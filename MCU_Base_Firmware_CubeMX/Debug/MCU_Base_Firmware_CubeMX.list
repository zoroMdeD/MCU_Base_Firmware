
MCU_Base_Firmware_CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f820  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000044e0  0801f9b0  0801f9b0  0002f9b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023e90  08023e90  00040258  2**0
                  CONTENTS
  4 .ARM          00000008  08023e90  08023e90  00033e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023e98  08023e98  00040258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023e98  08023e98  00033e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023e9c  08023e9c  00033e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  08023ea0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007418  20000258  080240f8  00040258  2**3
                  ALLOC
 10 ._user_heap_stack 00006000  20007670  080240f8  00047670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040258  2**0
                  CONTENTS, READONLY
 12 .debug_info   000751d8  00000000  00000000  00040288  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009534  00000000  00000000  000b5460  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002520  00000000  00000000  000be998  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000023a0  00000000  00000000  000c0eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00038d8f  00000000  00000000  000c3258  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000394dc  00000000  00000000  000fbfe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f4696  00000000  00000000  001354c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00229b59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aafc  00000000  00000000  00229bd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000258 	.word	0x20000258
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801f998 	.word	0x0801f998

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	0801f998 	.word	0x0801f998

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <cJSON_strcasecmp>:
static const char *ep;

const char *cJSON_GetErrorPtr(void) {return ep;}

static int cJSON_strcasecmp(const char *s1,const char *s2)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
	if (!s1)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d107      	bne.n	8000fc8 <cJSON_strcasecmp+0x20>
		return (s1==s2)?0:1;
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	bf14      	ite	ne
 8000fc0:	2301      	movne	r3, #1
 8000fc2:	2300      	moveq	r3, #0
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	e05d      	b.n	8001084 <cJSON_strcasecmp+0xdc>
	if (!s2)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10d      	bne.n	8000fea <cJSON_strcasecmp+0x42>
		return 1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e058      	b.n	8001084 <cJSON_strcasecmp+0xdc>
	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)
		if(*s1 == 0)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <cJSON_strcasecmp+0x36>
			return 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e052      	b.n	8001084 <cJSON_strcasecmp+0xdc>
	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	f019 fbd0 	bl	801a794 <__locale_ctype_ptr>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4413      	add	r3, r2
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	2b01      	cmp	r3, #1
 8001004:	d103      	bne.n	800100e <cJSON_strcasecmp+0x66>
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	f103 0420 	add.w	r4, r3, #32
 800100c:	e000      	b.n	8001010 <cJSON_strcasecmp+0x68>
 800100e:	7bfc      	ldrb	r4, [r7, #15]
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	73bb      	strb	r3, [r7, #14]
 8001016:	f019 fbbd 	bl	801a794 <__locale_ctype_ptr>
 800101a:	4602      	mov	r2, r0
 800101c:	7bbb      	ldrb	r3, [r7, #14]
 800101e:	3301      	adds	r3, #1
 8001020:	4413      	add	r3, r2
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	2b01      	cmp	r3, #1
 800102a:	d102      	bne.n	8001032 <cJSON_strcasecmp+0x8a>
 800102c:	7bbb      	ldrb	r3, [r7, #14]
 800102e:	3320      	adds	r3, #32
 8001030:	e000      	b.n	8001034 <cJSON_strcasecmp+0x8c>
 8001032:	7bbb      	ldrb	r3, [r7, #14]
 8001034:	429c      	cmp	r4, r3
 8001036:	d0cc      	beq.n	8000fd2 <cJSON_strcasecmp+0x2a>
	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	737b      	strb	r3, [r7, #13]
 800103e:	f019 fba9 	bl	801a794 <__locale_ctype_ptr>
 8001042:	4602      	mov	r2, r0
 8001044:	7b7b      	ldrb	r3, [r7, #13]
 8001046:	3301      	adds	r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b01      	cmp	r3, #1
 8001052:	d103      	bne.n	800105c <cJSON_strcasecmp+0xb4>
 8001054:	7b7b      	ldrb	r3, [r7, #13]
 8001056:	f103 0420 	add.w	r4, r3, #32
 800105a:	e000      	b.n	800105e <cJSON_strcasecmp+0xb6>
 800105c:	7b7c      	ldrb	r4, [r7, #13]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	733b      	strb	r3, [r7, #12]
 8001064:	f019 fb96 	bl	801a794 <__locale_ctype_ptr>
 8001068:	4602      	mov	r2, r0
 800106a:	7b3b      	ldrb	r3, [r7, #12]
 800106c:	3301      	adds	r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	2b01      	cmp	r3, #1
 8001078:	d102      	bne.n	8001080 <cJSON_strcasecmp+0xd8>
 800107a:	7b3b      	ldrb	r3, [r7, #12]
 800107c:	3320      	adds	r3, #32
 800107e:	e000      	b.n	8001082 <cJSON_strcasecmp+0xda>
 8001080:	7b3b      	ldrb	r3, [r7, #12]
 8001082:	1ae3      	subs	r3, r4, r3
}
 8001084:	4618      	mov	r0, r3
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	bd90      	pop	{r4, r7, pc}

0800108c <cJSON_New_Item>:
	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:free;
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <cJSON_New_Item+0x2c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2028      	movs	r0, #40	; 0x28
 8001098:	4798      	blx	r3
 800109a:	6078      	str	r0, [r7, #4]
	if (node) memset(node,0,sizeof(cJSON));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d004      	beq.n	80010ac <cJSON_New_Item+0x20>
 80010a2:	2228      	movs	r2, #40	; 0x28
 80010a4:	2100      	movs	r1, #0
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f019 fbd7 	bl	801a85a <memset>
	return node;
 80010ac:	687b      	ldr	r3, [r7, #4]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000000 	.word	0x20000000

080010bc <cJSON_Delete>:

/* Delete a cJSON structure. */
void cJSON_Delete(cJSON *c)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	cJSON *next;
	while (c)
 80010c4:	e037      	b.n	8001136 <cJSON_Delete+0x7a>
	{
		next=c->next;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	60fb      	str	r3, [r7, #12]
		if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d108      	bne.n	80010ea <cJSON_Delete+0x2e>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <cJSON_Delete+0x2e>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ffe9 	bl	80010bc <cJSON_Delete>
		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d109      	bne.n	800110a <cJSON_Delete+0x4e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d005      	beq.n	800110a <cJSON_Delete+0x4e>
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <cJSON_Delete+0x88>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6912      	ldr	r2, [r2, #16]
 8001106:	4610      	mov	r0, r2
 8001108:	4798      	blx	r3
		if (!(c->type&cJSON_StringIsConst) && c->string) cJSON_free(c->string);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001112:	2b00      	cmp	r3, #0
 8001114:	d109      	bne.n	800112a <cJSON_Delete+0x6e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a1b      	ldr	r3, [r3, #32]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d005      	beq.n	800112a <cJSON_Delete+0x6e>
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <cJSON_Delete+0x88>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	6a12      	ldr	r2, [r2, #32]
 8001126:	4610      	mov	r0, r2
 8001128:	4798      	blx	r3
		cJSON_free(c);
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <cJSON_Delete+0x88>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	4798      	blx	r3
		c=next;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	607b      	str	r3, [r7, #4]
	while (c)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1c4      	bne.n	80010c6 <cJSON_Delete+0xa>
	}
}
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000004 	.word	0x20000004

08001148 <parse_number>:

/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item,const char *num)
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	f04f 0400 	mov.w	r4, #0
 800115a:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	4c83      	ldr	r4, [pc, #524]	; (8001370 <parse_number+0x228>)
 8001164:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8001168:	f04f 0300 	mov.w	r3, #0
 800116c:	f04f 0400 	mov.w	r4, #0
 8001170:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	2301      	movs	r3, #1
 800117a:	60bb      	str	r3, [r7, #8]

	if (*num=='-') sign=-1,num++;	/* Has sign? */
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b2d      	cmp	r3, #45	; 0x2d
 8001182:	d107      	bne.n	8001194 <parse_number+0x4c>
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	4c7a      	ldr	r4, [pc, #488]	; (8001374 <parse_number+0x22c>)
 800118a:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	603b      	str	r3, [r7, #0]
	if (*num=='0') num++;			/* is zero */
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b30      	cmp	r3, #48	; 0x30
 800119a:	d102      	bne.n	80011a2 <parse_number+0x5a>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	603b      	str	r3, [r7, #0]
	if (*num>='1' && *num<='9')	do	n=(n*10.0)+(*num++ -'0');	while (*num>='0' && *num<='9');	/* Number? */
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b30      	cmp	r3, #48	; 0x30
 80011a8:	d928      	bls.n	80011fc <parse_number+0xb4>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b39      	cmp	r3, #57	; 0x39
 80011b0:	d824      	bhi.n	80011fc <parse_number+0xb4>
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	4b70      	ldr	r3, [pc, #448]	; (8001378 <parse_number+0x230>)
 80011b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011bc:	f7ff fa2c 	bl	8000618 <__aeabi_dmul>
 80011c0:	4603      	mov	r3, r0
 80011c2:	460c      	mov	r4, r1
 80011c4:	4625      	mov	r5, r4
 80011c6:	461c      	mov	r4, r3
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	603a      	str	r2, [r7, #0]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	3b30      	subs	r3, #48	; 0x30
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f9b6 	bl	8000544 <__aeabi_i2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4620      	mov	r0, r4
 80011de:	4629      	mov	r1, r5
 80011e0:	f7ff f864 	bl	80002ac <__adddf3>
 80011e4:	4603      	mov	r3, r0
 80011e6:	460c      	mov	r4, r1
 80011e8:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b2f      	cmp	r3, #47	; 0x2f
 80011f2:	d903      	bls.n	80011fc <parse_number+0xb4>
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b39      	cmp	r3, #57	; 0x39
 80011fa:	d9da      	bls.n	80011b2 <parse_number+0x6a>
	if (*num=='.' && num[1]>='0' && num[1]<='9') {num++;		do	n=(n*10.0)+(*num++ -'0'),scale--; while (*num>='0' && *num<='9');}	/* Fractional part? */
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b2e      	cmp	r3, #46	; 0x2e
 8001202:	d13c      	bne.n	800127e <parse_number+0x136>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b2f      	cmp	r3, #47	; 0x2f
 800120c:	d937      	bls.n	800127e <parse_number+0x136>
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b39      	cmp	r3, #57	; 0x39
 8001216:	d832      	bhi.n	800127e <parse_number+0x136>
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	3301      	adds	r3, #1
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	4b55      	ldr	r3, [pc, #340]	; (8001378 <parse_number+0x230>)
 8001224:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001228:	f7ff f9f6 	bl	8000618 <__aeabi_dmul>
 800122c:	4603      	mov	r3, r0
 800122e:	460c      	mov	r4, r1
 8001230:	4625      	mov	r5, r4
 8001232:	461c      	mov	r4, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	603a      	str	r2, [r7, #0]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	3b30      	subs	r3, #48	; 0x30
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f980 	bl	8000544 <__aeabi_i2d>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4620      	mov	r0, r4
 800124a:	4629      	mov	r1, r5
 800124c:	f7ff f82e 	bl	80002ac <__adddf3>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	4b44      	ldr	r3, [pc, #272]	; (8001370 <parse_number+0x228>)
 800125e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001262:	f7ff f821 	bl	80002a8 <__aeabi_dsub>
 8001266:	4603      	mov	r3, r0
 8001268:	460c      	mov	r4, r1
 800126a:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b2f      	cmp	r3, #47	; 0x2f
 8001274:	d903      	bls.n	800127e <parse_number+0x136>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b39      	cmp	r3, #57	; 0x39
 800127c:	d9cf      	bls.n	800121e <parse_number+0xd6>
	if (*num=='e' || *num=='E')		/* Exponent? */
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b65      	cmp	r3, #101	; 0x65
 8001284:	d003      	beq.n	800128e <parse_number+0x146>
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b45      	cmp	r3, #69	; 0x45
 800128c:	d12a      	bne.n	80012e4 <parse_number+0x19c>
	{	num++;if (*num=='+') num++;	else if (*num=='-') signsubscale=-1,num++;		/* With sign? */
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	3301      	adds	r3, #1
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b2b      	cmp	r3, #43	; 0x2b
 800129a:	d103      	bne.n	80012a4 <parse_number+0x15c>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	e017      	b.n	80012d4 <parse_number+0x18c>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b2d      	cmp	r3, #45	; 0x2d
 80012aa:	d113      	bne.n	80012d4 <parse_number+0x18c>
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	603b      	str	r3, [r7, #0]
		while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
 80012b8:	e00c      	b.n	80012d4 <parse_number+0x18c>
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	4619      	mov	r1, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	1c5a      	adds	r2, r3, #1
 80012ca:	603a      	str	r2, [r7, #0]
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	3b30      	subs	r3, #48	; 0x30
 80012d0:	440b      	add	r3, r1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b2f      	cmp	r3, #47	; 0x2f
 80012da:	d903      	bls.n	80012e4 <parse_number+0x19c>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b39      	cmp	r3, #57	; 0x39
 80012e2:	d9ea      	bls.n	80012ba <parse_number+0x172>
	}

	n=sign*n*pow(10.0,(scale+subscale*signsubscale));	/* number = +/- number.fraction * 10^+/- exponent */
 80012e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012ec:	f7ff f994 	bl	8000618 <__aeabi_dmul>
 80012f0:	4603      	mov	r3, r0
 80012f2:	460c      	mov	r4, r1
 80012f4:	4625      	mov	r5, r4
 80012f6:	461c      	mov	r4, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	fb02 f303 	mul.w	r3, r2, r3
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f91f 	bl	8000544 <__aeabi_i2d>
 8001306:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800130a:	f7fe ffcf 	bl	80002ac <__adddf3>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	ec43 2b17 	vmov	d7, r2, r3
 8001316:	eeb0 1a47 	vmov.f32	s2, s14
 800131a:	eef0 1a67 	vmov.f32	s3, s15
 800131e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001368 <parse_number+0x220>
 8001322:	f01d fadd 	bl	801e8e0 <pow>
 8001326:	ec53 2b10 	vmov	r2, r3, d0
 800132a:	4620      	mov	r0, r4
 800132c:	4629      	mov	r1, r5
 800132e:	f7ff f973 	bl	8000618 <__aeabi_dmul>
 8001332:	4603      	mov	r3, r0
 8001334:	460c      	mov	r4, r1
 8001336:	e9c7 3408 	strd	r3, r4, [r7, #32]
	
	item->valuedouble=n;
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001340:	e9c2 3406 	strd	r3, r4, [r2, #24]
	item->valueint=(int)n;
 8001344:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001348:	f7ff fc16 	bl	8000b78 <__aeabi_d2iz>
 800134c:	4602      	mov	r2, r0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	615a      	str	r2, [r3, #20]
	item->type=cJSON_Number;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2203      	movs	r2, #3
 8001356:	60da      	str	r2, [r3, #12]
	return num;
 8001358:	683b      	ldr	r3, [r7, #0]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3728      	adds	r7, #40	; 0x28
 800135e:	46bd      	mov	sp, r7
 8001360:	bdb0      	pop	{r4, r5, r7, pc}
 8001362:	bf00      	nop
 8001364:	f3af 8000 	nop.w
 8001368:	00000000 	.word	0x00000000
 800136c:	40240000 	.word	0x40240000
 8001370:	3ff00000 	.word	0x3ff00000
 8001374:	bff00000 	.word	0xbff00000
 8001378:	40240000 	.word	0x40240000

0800137c <parse_hex4>:
	}
	return str;
}

static unsigned parse_hex4(const char *str)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	unsigned h=0;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b2f      	cmp	r3, #47	; 0x2f
 800138e:	d90b      	bls.n	80013a8 <parse_hex4+0x2c>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b39      	cmp	r3, #57	; 0x39
 8001396:	d807      	bhi.n	80013a8 <parse_hex4+0x2c>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4413      	add	r3, r2
 80013a2:	3b30      	subs	r3, #48	; 0x30
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	e021      	b.n	80013ec <parse_hex4+0x70>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b40      	cmp	r3, #64	; 0x40
 80013ae:	d90b      	bls.n	80013c8 <parse_hex4+0x4c>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b46      	cmp	r3, #70	; 0x46
 80013b6:	d807      	bhi.n	80013c8 <parse_hex4+0x4c>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4413      	add	r3, r2
 80013c2:	3b37      	subs	r3, #55	; 0x37
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	e011      	b.n	80013ec <parse_hex4+0x70>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b60      	cmp	r3, #96	; 0x60
 80013ce:	d90b      	bls.n	80013e8 <parse_hex4+0x6c>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b66      	cmp	r3, #102	; 0x66
 80013d6:	d807      	bhi.n	80013e8 <parse_hex4+0x6c>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4413      	add	r3, r2
 80013e2:	3b57      	subs	r3, #87	; 0x57
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e001      	b.n	80013ec <parse_hex4+0x70>
 80013e8:	2300      	movs	r3, #0
 80013ea:	e0a8      	b.n	800153e <parse_hex4+0x1c2>
	h=h<<4;str++;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3301      	adds	r3, #1
 80013f6:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b2f      	cmp	r3, #47	; 0x2f
 80013fe:	d90b      	bls.n	8001418 <parse_hex4+0x9c>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b39      	cmp	r3, #57	; 0x39
 8001406:	d807      	bhi.n	8001418 <parse_hex4+0x9c>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4413      	add	r3, r2
 8001412:	3b30      	subs	r3, #48	; 0x30
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	e021      	b.n	800145c <parse_hex4+0xe0>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b40      	cmp	r3, #64	; 0x40
 800141e:	d90b      	bls.n	8001438 <parse_hex4+0xbc>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b46      	cmp	r3, #70	; 0x46
 8001426:	d807      	bhi.n	8001438 <parse_hex4+0xbc>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4413      	add	r3, r2
 8001432:	3b37      	subs	r3, #55	; 0x37
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	e011      	b.n	800145c <parse_hex4+0xe0>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b60      	cmp	r3, #96	; 0x60
 800143e:	d90b      	bls.n	8001458 <parse_hex4+0xdc>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b66      	cmp	r3, #102	; 0x66
 8001446:	d807      	bhi.n	8001458 <parse_hex4+0xdc>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4413      	add	r3, r2
 8001452:	3b57      	subs	r3, #87	; 0x57
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	e001      	b.n	800145c <parse_hex4+0xe0>
 8001458:	2300      	movs	r3, #0
 800145a:	e070      	b.n	800153e <parse_hex4+0x1c2>
	h=h<<4;str++;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	011b      	lsls	r3, r3, #4
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3301      	adds	r3, #1
 8001466:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b2f      	cmp	r3, #47	; 0x2f
 800146e:	d90b      	bls.n	8001488 <parse_hex4+0x10c>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b39      	cmp	r3, #57	; 0x39
 8001476:	d807      	bhi.n	8001488 <parse_hex4+0x10c>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	3b30      	subs	r3, #48	; 0x30
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	e021      	b.n	80014cc <parse_hex4+0x150>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b40      	cmp	r3, #64	; 0x40
 800148e:	d90b      	bls.n	80014a8 <parse_hex4+0x12c>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b46      	cmp	r3, #70	; 0x46
 8001496:	d807      	bhi.n	80014a8 <parse_hex4+0x12c>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4413      	add	r3, r2
 80014a2:	3b37      	subs	r3, #55	; 0x37
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	e011      	b.n	80014cc <parse_hex4+0x150>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b60      	cmp	r3, #96	; 0x60
 80014ae:	d90b      	bls.n	80014c8 <parse_hex4+0x14c>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b66      	cmp	r3, #102	; 0x66
 80014b6:	d807      	bhi.n	80014c8 <parse_hex4+0x14c>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4413      	add	r3, r2
 80014c2:	3b57      	subs	r3, #87	; 0x57
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	e001      	b.n	80014cc <parse_hex4+0x150>
 80014c8:	2300      	movs	r3, #0
 80014ca:	e038      	b.n	800153e <parse_hex4+0x1c2>
	h=h<<4;str++;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3301      	adds	r3, #1
 80014d6:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b2f      	cmp	r3, #47	; 0x2f
 80014de:	d90b      	bls.n	80014f8 <parse_hex4+0x17c>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b39      	cmp	r3, #57	; 0x39
 80014e6:	d807      	bhi.n	80014f8 <parse_hex4+0x17c>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4413      	add	r3, r2
 80014f2:	3b30      	subs	r3, #48	; 0x30
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	e021      	b.n	800153c <parse_hex4+0x1c0>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b40      	cmp	r3, #64	; 0x40
 80014fe:	d90b      	bls.n	8001518 <parse_hex4+0x19c>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b46      	cmp	r3, #70	; 0x46
 8001506:	d807      	bhi.n	8001518 <parse_hex4+0x19c>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4413      	add	r3, r2
 8001512:	3b37      	subs	r3, #55	; 0x37
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	e011      	b.n	800153c <parse_hex4+0x1c0>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b60      	cmp	r3, #96	; 0x60
 800151e:	d90b      	bls.n	8001538 <parse_hex4+0x1bc>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b66      	cmp	r3, #102	; 0x66
 8001526:	d807      	bhi.n	8001538 <parse_hex4+0x1bc>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4413      	add	r3, r2
 8001532:	3b57      	subs	r3, #87	; 0x57
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	e001      	b.n	800153c <parse_hex4+0x1c0>
 8001538:	2300      	movs	r3, #0
 800153a:	e000      	b.n	800153e <parse_hex4+0x1c2>
	return h;
 800153c:	68fb      	ldr	r3, [r7, #12]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <parse_string>:

/* Parse the input text into an unescaped cstring, and populate item. */
static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
static const char *parse_string(cJSON *item,const char *str)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	61fb      	str	r3, [r7, #28]
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
	if (*str!='\"') {ep=str;return 0;}	/* not a string! */
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b22      	cmp	r3, #34	; 0x22
 8001566:	d00d      	beq.n	8001584 <parse_string+0x38>
 8001568:	4aa3      	ldr	r2, [pc, #652]	; (80017f8 <parse_string+0x2ac>)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	2300      	movs	r3, #0
 8001570:	e168      	b.n	8001844 <parse_string+0x2f8>
	
	while (*ptr!='\"' && *ptr && ++len) if (*ptr++ == '\\') ptr++;	/* Skip escaped quotes. */
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	61fa      	str	r2, [r7, #28]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b5c      	cmp	r3, #92	; 0x5c
 800157c:	d102      	bne.n	8001584 <parse_string+0x38>
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3301      	adds	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b22      	cmp	r3, #34	; 0x22
 800158a:	d009      	beq.n	80015a0 <parse_string+0x54>
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <parse_string+0x54>
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3301      	adds	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1e8      	bne.n	8001572 <parse_string+0x26>
	
	out=(char*)cJSON_malloc(len+1);	/* This is how long we need for the string, roughly. */
 80015a0:	4b96      	ldr	r3, [pc, #600]	; (80017fc <parse_string+0x2b0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	3201      	adds	r2, #1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4798      	blx	r3
 80015ac:	60f8      	str	r0, [r7, #12]
	if (!out) return 0;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <parse_string+0x6c>
 80015b4:	2300      	movs	r3, #0
 80015b6:	e145      	b.n	8001844 <parse_string+0x2f8>
	
	ptr=str+1;ptr2=out;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	3301      	adds	r3, #1
 80015bc:	61fb      	str	r3, [r7, #28]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	61bb      	str	r3, [r7, #24]
	while (*ptr!='\"' && *ptr)
 80015c2:	e125      	b.n	8001810 <parse_string+0x2c4>
	{
		if (*ptr!='\\') *ptr2++=*ptr++;
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b5c      	cmp	r3, #92	; 0x5c
 80015ca:	d008      	beq.n	80015de <parse_string+0x92>
 80015cc:	69fa      	ldr	r2, [r7, #28]
 80015ce:	1c53      	adds	r3, r2, #1
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	1c59      	adds	r1, r3, #1
 80015d6:	61b9      	str	r1, [r7, #24]
 80015d8:	7812      	ldrb	r2, [r2, #0]
 80015da:	701a      	strb	r2, [r3, #0]
 80015dc:	e118      	b.n	8001810 <parse_string+0x2c4>
		else
		{
			ptr++;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3301      	adds	r3, #1
 80015e2:	61fb      	str	r3, [r7, #28]
			switch (*ptr)
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	3b62      	subs	r3, #98	; 0x62
 80015ea:	2b13      	cmp	r3, #19
 80015ec:	f200 80fc 	bhi.w	80017e8 <parse_string+0x29c>
 80015f0:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <parse_string+0xac>)
 80015f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f6:	bf00      	nop
 80015f8:	08001649 	.word	0x08001649
 80015fc:	080017e9 	.word	0x080017e9
 8001600:	080017e9 	.word	0x080017e9
 8001604:	080017e9 	.word	0x080017e9
 8001608:	08001655 	.word	0x08001655
 800160c:	080017e9 	.word	0x080017e9
 8001610:	080017e9 	.word	0x080017e9
 8001614:	080017e9 	.word	0x080017e9
 8001618:	080017e9 	.word	0x080017e9
 800161c:	080017e9 	.word	0x080017e9
 8001620:	080017e9 	.word	0x080017e9
 8001624:	080017e9 	.word	0x080017e9
 8001628:	08001661 	.word	0x08001661
 800162c:	080017e9 	.word	0x080017e9
 8001630:	080017e9 	.word	0x080017e9
 8001634:	080017e9 	.word	0x080017e9
 8001638:	0800166d 	.word	0x0800166d
 800163c:	080017e9 	.word	0x080017e9
 8001640:	08001679 	.word	0x08001679
 8001644:	08001685 	.word	0x08001685
			{
				case 'b': *ptr2++='\b';	break;
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	61ba      	str	r2, [r7, #24]
 800164e:	2208      	movs	r2, #8
 8001650:	701a      	strb	r2, [r3, #0]
 8001652:	e0da      	b.n	800180a <parse_string+0x2be>
				case 'f': *ptr2++='\f';	break;
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	61ba      	str	r2, [r7, #24]
 800165a:	220c      	movs	r2, #12
 800165c:	701a      	strb	r2, [r3, #0]
 800165e:	e0d4      	b.n	800180a <parse_string+0x2be>
				case 'n': *ptr2++='\n';	break;
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	61ba      	str	r2, [r7, #24]
 8001666:	220a      	movs	r2, #10
 8001668:	701a      	strb	r2, [r3, #0]
 800166a:	e0ce      	b.n	800180a <parse_string+0x2be>
				case 'r': *ptr2++='\r';	break;
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	61ba      	str	r2, [r7, #24]
 8001672:	220d      	movs	r2, #13
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	e0c8      	b.n	800180a <parse_string+0x2be>
				case 't': *ptr2++='\t';	break;
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	61ba      	str	r2, [r7, #24]
 800167e:	2209      	movs	r2, #9
 8001680:	701a      	strb	r2, [r3, #0]
 8001682:	e0c2      	b.n	800180a <parse_string+0x2be>
				case 'u':	 /* transcode utf16 to utf8. */
					uc=parse_hex4(ptr+1);ptr+=4;	/* get the unicode char. */
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	3301      	adds	r3, #1
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fe77 	bl	800137c <parse_hex4>
 800168e:	6138      	str	r0, [r7, #16]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	3304      	adds	r3, #4
 8001694:	61fb      	str	r3, [r7, #28]

					if ((uc>=0xDC00 && uc<=0xDFFF) || uc==0)	break;	/* check for invalid.	*/
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800169c:	d304      	bcc.n	80016a8 <parse_string+0x15c>
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80016a4:	f0c0 80b0 	bcc.w	8001808 <parse_string+0x2bc>
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 80ac 	beq.w	8001808 <parse_string+0x2bc>

					if (uc>=0xD800 && uc<=0xDBFF)	/* UTF16 surrogate pairs.	*/
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80016b6:	d32d      	bcc.n	8001714 <parse_string+0x1c8>
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80016be:	d229      	bcs.n	8001714 <parse_string+0x1c8>
					{
						if (ptr[1]!='\\' || ptr[2]!='u')	break;	/* missing second-half of surrogate.	*/
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	3301      	adds	r3, #1
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b5c      	cmp	r3, #92	; 0x5c
 80016c8:	f040 809e 	bne.w	8001808 <parse_string+0x2bc>
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	3302      	adds	r3, #2
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b75      	cmp	r3, #117	; 0x75
 80016d4:	f040 8098 	bne.w	8001808 <parse_string+0x2bc>
						uc2=parse_hex4(ptr+3);ptr+=6;
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	3303      	adds	r3, #3
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fe4d 	bl	800137c <parse_hex4>
 80016e2:	60b8      	str	r0, [r7, #8]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	3306      	adds	r3, #6
 80016e8:	61fb      	str	r3, [r7, #28]
						if (uc2<0xDC00 || uc2>0xDFFF)		break;	/* invalid second-half of surrogate.	*/
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80016f0:	f0c0 808a 	bcc.w	8001808 <parse_string+0x2bc>
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80016fa:	f080 8085 	bcs.w	8001808 <parse_string+0x2bc>
						uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	029a      	lsls	r2, r3, #10
 8001702:	4b3f      	ldr	r3, [pc, #252]	; (8001800 <parse_string+0x2b4>)
 8001704:	4013      	ands	r3, r2
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800170c:	4313      	orrs	r3, r2
 800170e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001712:	613b      	str	r3, [r7, #16]
					}

					len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;
 8001714:	2304      	movs	r3, #4
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	2b7f      	cmp	r3, #127	; 0x7f
 800171c:	d802      	bhi.n	8001724 <parse_string+0x1d8>
 800171e:	2301      	movs	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	e00c      	b.n	800173e <parse_string+0x1f2>
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800172a:	d202      	bcs.n	8001732 <parse_string+0x1e6>
 800172c:	2302      	movs	r3, #2
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e005      	b.n	800173e <parse_string+0x1f2>
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001738:	d201      	bcs.n	800173e <parse_string+0x1f2>
 800173a:	2303      	movs	r3, #3
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4413      	add	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
					
					switch (len) {
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3b01      	subs	r3, #1
 800174a:	2b03      	cmp	r3, #3
 800174c:	d847      	bhi.n	80017de <parse_string+0x292>
 800174e:	a201      	add	r2, pc, #4	; (adr r2, 8001754 <parse_string+0x208>)
 8001750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001754:	080017c5 	.word	0x080017c5
 8001758:	080017a5 	.word	0x080017a5
 800175c:	08001785 	.word	0x08001785
 8001760:	08001765 	.word	0x08001765
						case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800176c:	b2db      	uxtb	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	3a01      	subs	r2, #1
 8001772:	61ba      	str	r2, [r7, #24]
 8001774:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001778:	b2da      	uxtb	r2, r3
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	701a      	strb	r2, [r3, #0]
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	099b      	lsrs	r3, r3, #6
 8001782:	613b      	str	r3, [r7, #16]
						case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800178c:	b2db      	uxtb	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	3a01      	subs	r2, #1
 8001792:	61ba      	str	r2, [r7, #24]
 8001794:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001798:	b2da      	uxtb	r2, r3
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	701a      	strb	r2, [r3, #0]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	099b      	lsrs	r3, r3, #6
 80017a2:	613b      	str	r3, [r7, #16]
						case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	3a01      	subs	r2, #1
 80017b2:	61ba      	str	r2, [r7, #24]
 80017b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	099b      	lsrs	r3, r3, #6
 80017c2:	613b      	str	r3, [r7, #16]
						case 1: *--ptr2 =(uc | firstByteMark[len]);
 80017c4:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <parse_string+0x2b8>)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	4413      	add	r3, r2
 80017ca:	781a      	ldrb	r2, [r3, #0]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	69b9      	ldr	r1, [r7, #24]
 80017d2:	3901      	subs	r1, #1
 80017d4:	61b9      	str	r1, [r7, #24]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	701a      	strb	r2, [r3, #0]
					}
					ptr2+=len;
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4413      	add	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
					break;
 80017e6:	e010      	b.n	800180a <parse_string+0x2be>
				default:  *ptr2++=*ptr; break;
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	61ba      	str	r2, [r7, #24]
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	7812      	ldrb	r2, [r2, #0]
 80017f2:	701a      	strb	r2, [r3, #0]
 80017f4:	e009      	b.n	800180a <parse_string+0x2be>
 80017f6:	bf00      	nop
 80017f8:	20000274 	.word	0x20000274
 80017fc:	20000000 	.word	0x20000000
 8001800:	000ffc00 	.word	0x000ffc00
 8001804:	080234c4 	.word	0x080234c4
			}
			ptr++;
 8001808:	bf00      	nop
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3301      	adds	r3, #1
 800180e:	61fb      	str	r3, [r7, #28]
	while (*ptr!='\"' && *ptr)
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b22      	cmp	r3, #34	; 0x22
 8001816:	d004      	beq.n	8001822 <parse_string+0x2d6>
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	f47f aed1 	bne.w	80015c4 <parse_string+0x78>
		}
	}
	*ptr2=0;
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
	if (*ptr=='\"') ptr++;
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b22      	cmp	r3, #34	; 0x22
 800182e:	d102      	bne.n	8001836 <parse_string+0x2ea>
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	3301      	adds	r3, #1
 8001834:	61fb      	str	r3, [r7, #28]
	item->valuestring=out;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	611a      	str	r2, [r3, #16]
	item->type=cJSON_String;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2204      	movs	r2, #4
 8001840:	60da      	str	r2, [r3, #12]
	return ptr;
 8001842:	69fb      	ldr	r3, [r7, #28]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3720      	adds	r7, #32
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <skip>:
static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p);
static const char *parse_object(cJSON *item,const char *value);
static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p);

/* Utility to jump whitespace and cr/lf */
static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	e002      	b.n	800185c <skip+0x10>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3301      	adds	r3, #1
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <skip+0x26>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <skip+0x26>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b20      	cmp	r3, #32
 8001870:	d9f1      	bls.n	8001856 <skip+0xa>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <cJSON_ParseWithOpts>:

/* Parse an object - create a new root, and populate. */
cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
	const char *end=0;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
	cJSON *c=cJSON_New_Item();
 8001890:	f7ff fbfc 	bl	800108c <cJSON_New_Item>
 8001894:	6138      	str	r0, [r7, #16]
	ep=0;
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <cJSON_ParseWithOpts+0x84>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
	if (!c) return 0;       /* memory fail */
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <cJSON_ParseWithOpts+0x26>
 80018a2:	2300      	movs	r3, #0
 80018a4:	e02a      	b.n	80018fc <cJSON_ParseWithOpts+0x7c>

	end=parse_value(c,skip(value));
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f7ff ffd0 	bl	800184c <skip>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4619      	mov	r1, r3
 80018b0:	6938      	ldr	r0, [r7, #16]
 80018b2:	f000 f837 	bl	8001924 <parse_value>
 80018b6:	6178      	str	r0, [r7, #20]
	if (!end)	{cJSON_Delete(c);return 0;}	/* parse failure. ep is set. */
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d104      	bne.n	80018c8 <cJSON_ParseWithOpts+0x48>
 80018be:	6938      	ldr	r0, [r7, #16]
 80018c0:	f7ff fbfc 	bl	80010bc <cJSON_Delete>
 80018c4:	2300      	movs	r3, #0
 80018c6:	e019      	b.n	80018fc <cJSON_ParseWithOpts+0x7c>

	/* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
	if (require_null_terminated) {end=skip(end);if (*end) {cJSON_Delete(c);ep=end;return 0;}}
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00f      	beq.n	80018ee <cJSON_ParseWithOpts+0x6e>
 80018ce:	6978      	ldr	r0, [r7, #20]
 80018d0:	f7ff ffbc 	bl	800184c <skip>
 80018d4:	6178      	str	r0, [r7, #20]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d007      	beq.n	80018ee <cJSON_ParseWithOpts+0x6e>
 80018de:	6938      	ldr	r0, [r7, #16]
 80018e0:	f7ff fbec 	bl	80010bc <cJSON_Delete>
 80018e4:	4a07      	ldr	r2, [pc, #28]	; (8001904 <cJSON_ParseWithOpts+0x84>)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	2300      	movs	r3, #0
 80018ec:	e006      	b.n	80018fc <cJSON_ParseWithOpts+0x7c>
	if (return_parse_end) *return_parse_end=end;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <cJSON_ParseWithOpts+0x7a>
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	601a      	str	r2, [r3, #0]
	return c;
 80018fa:	693b      	ldr	r3, [r7, #16]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000274 	.word	0x20000274

08001908 <cJSON_Parse>:
/* Default options for cJSON_Parse */
cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	2100      	movs	r1, #0
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ffb3 	bl	8001880 <cJSON_ParseWithOpts>
 800191a:	4603      	mov	r3, r0
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <parse_value>:
}


/* Parser core - when encountering text, process appropriately. */
static const char *parse_value(cJSON *item,const char *value)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
	if (!value)						return 0;	/* Fail on null. */
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <parse_value+0x14>
 8001934:	2300      	movs	r3, #0
 8001936:	e060      	b.n	80019fa <parse_value+0xd6>
	if (!strncmp(value,"null",4))	{ item->type=cJSON_NULL;  return value+4; }
 8001938:	2204      	movs	r2, #4
 800193a:	4932      	ldr	r1, [pc, #200]	; (8001a04 <parse_value+0xe0>)
 800193c:	6838      	ldr	r0, [r7, #0]
 800193e:	f019 fd49 	bl	801b3d4 <strncmp>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d105      	bne.n	8001954 <parse_value+0x30>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	3304      	adds	r3, #4
 8001952:	e052      	b.n	80019fa <parse_value+0xd6>
	if (!strncmp(value,"false",5))	{ item->type=cJSON_False; return value+5; }
 8001954:	2205      	movs	r2, #5
 8001956:	492c      	ldr	r1, [pc, #176]	; (8001a08 <parse_value+0xe4>)
 8001958:	6838      	ldr	r0, [r7, #0]
 800195a:	f019 fd3b 	bl	801b3d4 <strncmp>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <parse_value+0x4c>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	3305      	adds	r3, #5
 800196e:	e044      	b.n	80019fa <parse_value+0xd6>
	if (!strncmp(value,"true",4))	{ item->type=cJSON_True; item->valueint=1;	return value+4; }
 8001970:	2204      	movs	r2, #4
 8001972:	4926      	ldr	r1, [pc, #152]	; (8001a0c <parse_value+0xe8>)
 8001974:	6838      	ldr	r0, [r7, #0]
 8001976:	f019 fd2d 	bl	801b3d4 <strncmp>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d108      	bne.n	8001992 <parse_value+0x6e>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	615a      	str	r2, [r3, #20]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	3304      	adds	r3, #4
 8001990:	e033      	b.n	80019fa <parse_value+0xd6>
	if (*value=='\"')				{ return parse_string(item,value); }
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b22      	cmp	r3, #34	; 0x22
 8001998:	d105      	bne.n	80019a6 <parse_value+0x82>
 800199a:	6839      	ldr	r1, [r7, #0]
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff fdd5 	bl	800154c <parse_string>
 80019a2:	4603      	mov	r3, r0
 80019a4:	e029      	b.n	80019fa <parse_value+0xd6>
	if (*value=='-' || (*value>='0' && *value<='9'))	{ return parse_number(item,value); }
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b2d      	cmp	r3, #45	; 0x2d
 80019ac:	d007      	beq.n	80019be <parse_value+0x9a>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b2f      	cmp	r3, #47	; 0x2f
 80019b4:	d909      	bls.n	80019ca <parse_value+0xa6>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b39      	cmp	r3, #57	; 0x39
 80019bc:	d805      	bhi.n	80019ca <parse_value+0xa6>
 80019be:	6839      	ldr	r1, [r7, #0]
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff fbc1 	bl	8001148 <parse_number>
 80019c6:	4603      	mov	r3, r0
 80019c8:	e017      	b.n	80019fa <parse_value+0xd6>
	if (*value=='[')				{ return parse_array(item,value); }
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b5b      	cmp	r3, #91	; 0x5b
 80019d0:	d105      	bne.n	80019de <parse_value+0xba>
 80019d2:	6839      	ldr	r1, [r7, #0]
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 f81d 	bl	8001a14 <parse_array>
 80019da:	4603      	mov	r3, r0
 80019dc:	e00d      	b.n	80019fa <parse_value+0xd6>
	if (*value=='{')				{ return parse_object(item,value); }
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b7b      	cmp	r3, #123	; 0x7b
 80019e4:	d105      	bne.n	80019f2 <parse_value+0xce>
 80019e6:	6839      	ldr	r1, [r7, #0]
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f889 	bl	8001b00 <parse_object>
 80019ee:	4603      	mov	r3, r0
 80019f0:	e003      	b.n	80019fa <parse_value+0xd6>

	ep=value;return 0;	/* failure. */
 80019f2:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <parse_value+0xec>)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	0801f9dc 	.word	0x0801f9dc
 8001a08:	0801f9e4 	.word	0x0801f9e4
 8001a0c:	0801f9ec 	.word	0x0801f9ec
 8001a10:	20000274 	.word	0x20000274

08001a14 <parse_array>:
	return out;
}

/* Build an array from input text. */
static const char *parse_array(cJSON *item,const char *value)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='[')	{ep=value;return 0;}	/* not an array! */
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b5b      	cmp	r3, #91	; 0x5b
 8001a24:	d004      	beq.n	8001a30 <parse_array+0x1c>
 8001a26:	4a35      	ldr	r2, [pc, #212]	; (8001afc <parse_array+0xe8>)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	e060      	b.n	8001af2 <parse_array+0xde>

	item->type=cJSON_Array;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2205      	movs	r2, #5
 8001a34:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff06 	bl	800184c <skip>
 8001a40:	6038      	str	r0, [r7, #0]
	if (*value==']') return value+1;	/* empty array. */
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b5d      	cmp	r3, #93	; 0x5d
 8001a48:	d102      	bne.n	8001a50 <parse_array+0x3c>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	e050      	b.n	8001af2 <parse_array+0xde>

	item->child=child=cJSON_New_Item();
 8001a50:	f7ff fb1c 	bl	800108c <cJSON_New_Item>
 8001a54:	60f8      	str	r0, [r7, #12]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;		 /* memory fail */
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <parse_array+0x54>
 8001a64:	2300      	movs	r3, #0
 8001a66:	e044      	b.n	8001af2 <parse_array+0xde>
	value=skip(parse_value(child,skip(value)));	/* skip any spacing, get the value. */
 8001a68:	6838      	ldr	r0, [r7, #0]
 8001a6a:	f7ff feef 	bl	800184c <skip>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4619      	mov	r1, r3
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f7ff ff56 	bl	8001924 <parse_value>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fee6 	bl	800184c <skip>
 8001a80:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d125      	bne.n	8001ad4 <parse_array+0xc0>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e032      	b.n	8001af2 <parse_array+0xde>

	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item())) return 0; 	/* memory fail */
 8001a8c:	f7ff fafe 	bl	800108c <cJSON_New_Item>
 8001a90:	60b8      	str	r0, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <parse_array+0x88>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e02a      	b.n	8001af2 <parse_array+0xde>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	60fb      	str	r3, [r7, #12]
		value=skip(parse_value(child,skip(value+1)));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fecb 	bl	800184c <skip>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4619      	mov	r1, r3
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f7ff ff32 	bl	8001924 <parse_value>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fec2 	bl	800184c <skip>
 8001ac8:	6038      	str	r0, [r7, #0]
		if (!value) return 0;	/* memory fail */
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <parse_array+0xc0>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	e00e      	b.n	8001af2 <parse_array+0xde>
	while (*value==',')
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b2c      	cmp	r3, #44	; 0x2c
 8001ada:	d0d7      	beq.n	8001a8c <parse_array+0x78>
	}

	if (*value==']') return value+1;	/* end of array */
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b5d      	cmp	r3, #93	; 0x5d
 8001ae2:	d102      	bne.n	8001aea <parse_array+0xd6>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	e003      	b.n	8001af2 <parse_array+0xde>
	ep=value;return 0;	/* malformed. */
 8001aea:	4a04      	ldr	r2, [pc, #16]	; (8001afc <parse_array+0xe8>)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000274 	.word	0x20000274

08001b00 <parse_object>:
	return out;	
}

/* Build an object from the text. */
static const char *parse_object(cJSON *item,const char *value)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='{')	{ep=value;return 0;}	/* not an object! */
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b7b      	cmp	r3, #123	; 0x7b
 8001b10:	d004      	beq.n	8001b1c <parse_object+0x1c>
 8001b12:	4a59      	ldr	r2, [pc, #356]	; (8001c78 <parse_object+0x178>)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	e0a8      	b.n	8001c6e <parse_object+0x16e>
	
	item->type=cJSON_Object;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2206      	movs	r2, #6
 8001b20:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	3301      	adds	r3, #1
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fe90 	bl	800184c <skip>
 8001b2c:	6038      	str	r0, [r7, #0]
	if (*value=='}') return value+1;	/* empty array. */
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b7d      	cmp	r3, #125	; 0x7d
 8001b34:	d102      	bne.n	8001b3c <parse_object+0x3c>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	e098      	b.n	8001c6e <parse_object+0x16e>
	
	item->child=child=cJSON_New_Item();
 8001b3c:	f7ff faa6 	bl	800108c <cJSON_New_Item>
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <parse_object+0x54>
 8001b50:	2300      	movs	r3, #0
 8001b52:	e08c      	b.n	8001c6e <parse_object+0x16e>
	value=skip(parse_string(child,skip(value)));
 8001b54:	6838      	ldr	r0, [r7, #0]
 8001b56:	f7ff fe79 	bl	800184c <skip>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f7ff fcf4 	bl	800154c <parse_string>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fe70 	bl	800184c <skip>
 8001b6c:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <parse_object+0x78>
 8001b74:	2300      	movs	r3, #0
 8001b76:	e07a      	b.n	8001c6e <parse_object+0x16e>
	child->string=child->valuestring;child->valuestring=0;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	621a      	str	r2, [r3, #32]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]
	if (*value!=':') {ep=value;return 0;}	/* fail! */
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b3a      	cmp	r3, #58	; 0x3a
 8001b8c:	d004      	beq.n	8001b98 <parse_object+0x98>
 8001b8e:	4a3a      	ldr	r2, [pc, #232]	; (8001c78 <parse_object+0x178>)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	2300      	movs	r3, #0
 8001b96:	e06a      	b.n	8001c6e <parse_object+0x16e>
	value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fe55 	bl	800184c <skip>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f7ff febc 	bl	8001924 <parse_value>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fe4c 	bl	800184c <skip>
 8001bb4:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d149      	bne.n	8001c50 <parse_object+0x150>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	e056      	b.n	8001c6e <parse_object+0x16e>
	
	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item()))	return 0; /* memory fail */
 8001bc0:	f7ff fa64 	bl	800108c <cJSON_New_Item>
 8001bc4:	60b8      	str	r0, [r7, #8]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <parse_object+0xd0>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e04e      	b.n	8001c6e <parse_object+0x16e>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	60fb      	str	r3, [r7, #12]
		value=skip(parse_string(child,skip(value+1)));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	3301      	adds	r3, #1
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fe31 	bl	800184c <skip>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4619      	mov	r1, r3
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f7ff fcac 	bl	800154c <parse_string>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fe28 	bl	800184c <skip>
 8001bfc:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <parse_object+0x108>
 8001c04:	2300      	movs	r3, #0
 8001c06:	e032      	b.n	8001c6e <parse_object+0x16e>
		child->string=child->valuestring;child->valuestring=0;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	621a      	str	r2, [r3, #32]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
		if (*value!=':') {ep=value;return 0;}	/* fail! */
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b3a      	cmp	r3, #58	; 0x3a
 8001c1c:	d004      	beq.n	8001c28 <parse_object+0x128>
 8001c1e:	4a16      	ldr	r2, [pc, #88]	; (8001c78 <parse_object+0x178>)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	2300      	movs	r3, #0
 8001c26:	e022      	b.n	8001c6e <parse_object+0x16e>
		value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fe0d 	bl	800184c <skip>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4619      	mov	r1, r3
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f7ff fe74 	bl	8001924 <parse_value>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fe04 	bl	800184c <skip>
 8001c44:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <parse_object+0x150>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e00e      	b.n	8001c6e <parse_object+0x16e>
	while (*value==',')
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b2c      	cmp	r3, #44	; 0x2c
 8001c56:	d0b3      	beq.n	8001bc0 <parse_object+0xc0>
	}
	
	if (*value=='}') return value+1;	/* end of array */
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b7d      	cmp	r3, #125	; 0x7d
 8001c5e:	d102      	bne.n	8001c66 <parse_object+0x166>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	3301      	adds	r3, #1
 8001c64:	e003      	b.n	8001c6e <parse_object+0x16e>
	ep=value;return 0;	/* malformed. */
 8001c66:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <parse_object+0x178>)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000274 	.word	0x20000274

08001c7c <cJSON_GetObjectItem>:
}

/* Get Array size/item / object item. */
int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child; int i=0;while(c)i++,c=c->next;return i;}
cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child; while (c && item>0) item--,c=c->next; return c;}
cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	e002      	b.n	8001c94 <cJSON_GetObjectItem+0x18>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d008      	beq.n	8001cac <cJSON_GetObjectItem+0x30>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	6839      	ldr	r1, [r7, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff f981 	bl	8000fa8 <cJSON_strcasecmp>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <cJSON_GetObjectItem+0x12>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <parseValue>:

//Функция разбора подстроки значений параметра
//Принимает указатель на массив символов со значениями параметра
//Ворзвращает указатель на разобранный массив символов со значениями параметра
char *parseValue(char *value)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	char *tmp;
	for(int i = 1, j = 0; i < strlen(value); i++)
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	e013      	b.n	8001cf2 <parseValue+0x3a>
	{
		if(i % 2)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00b      	beq.n	8001cec <parseValue+0x34>
		{
			paramValue[j] = value[i];
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	7819      	ldrb	r1, [r3, #0]
 8001cdc:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <parseValue+0x58>)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	460a      	mov	r2, r1
 8001ce4:	701a      	strb	r2, [r3, #0]
			j++;
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	613b      	str	r3, [r7, #16]
	for(int i = 1, j = 0; i < strlen(value); i++)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7fe fa76 	bl	80001e4 <strlen>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d8e4      	bhi.n	8001cca <parseValue+0x12>
		}
	}
	tmp = paramValue;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <parseValue+0x58>)
 8001d02:	60fb      	str	r3, [r7, #12]

	return tmp;
 8001d04:	68fb      	ldr	r3, [r7, #12]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	2000082c 	.word	0x2000082c

08001d14 <json_input>:
//Функция разбора полученной строки JSON
void json_input(char *text)
{
 8001d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d16:	ed2d 8b04 	vpush	{d8-d9}
 8001d1a:	b0a3      	sub	sp, #140	; 0x8c
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	cJSON *json = cJSON_Parse(text);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff fdf1 	bl	8001908 <cJSON_Parse>
 8001d26:	67b8      	str	r0, [r7, #120]	; 0x78

	cJSON *stime = cJSON_GetObjectItem(json, "TIME");
 8001d28:	4978      	ldr	r1, [pc, #480]	; (8001f0c <json_input+0x1f8>)
 8001d2a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001d2c:	f7ff ffa6 	bl	8001c7c <cJSON_GetObjectItem>
 8001d30:	6778      	str	r0, [r7, #116]	; 0x74
	TIME = stime->valuestring;
 8001d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	4a76      	ldr	r2, [pc, #472]	; (8001f10 <json_input+0x1fc>)
 8001d38:	6013      	str	r3, [r2, #0]
	Time_Server = atoi(TIME);
 8001d3a:	4b75      	ldr	r3, [pc, #468]	; (8001f10 <json_input+0x1fc>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f018 fcfb 	bl	801a73a <atoi>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b73      	ldr	r3, [pc, #460]	; (8001f14 <json_input+0x200>)
 8001d48:	601a      	str	r2, [r3, #0]
	if(Time_Server > Time_Client)
 8001d4a:	4b72      	ldr	r3, [pc, #456]	; (8001f14 <json_input+0x200>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	4b72      	ldr	r3, [pc, #456]	; (8001f18 <json_input+0x204>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	f340 85ff 	ble.w	8002956 <json_input+0xc42>
	{
		cJSON *sInstruction = cJSON_GetObjectItem(json, "INSTRUCTION");
 8001d58:	4970      	ldr	r1, [pc, #448]	; (8001f1c <json_input+0x208>)
 8001d5a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001d5c:	f7ff ff8e 	bl	8001c7c <cJSON_GetObjectItem>
 8001d60:	6738      	str	r0, [r7, #112]	; 0x70
		INSTRUCTION = sInstruction->valuestring;
 8001d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	4a6e      	ldr	r2, [pc, #440]	; (8001f20 <json_input+0x20c>)
 8001d68:	6013      	str	r3, [r2, #0]

		if(strcmp(INSTRUCTION, "SET_PROGRAMM") == 0)
 8001d6a:	4b6d      	ldr	r3, [pc, #436]	; (8001f20 <json_input+0x20c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	496d      	ldr	r1, [pc, #436]	; (8001f24 <json_input+0x210>)
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fa2d 	bl	80001d0 <strcmp>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 84ad 	bne.w	80026d8 <json_input+0x9c4>
		{
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 8001d7e:	496a      	ldr	r1, [pc, #424]	; (8001f28 <json_input+0x214>)
 8001d80:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001d82:	f7ff ff7b 	bl	8001c7c <cJSON_GetObjectItem>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4968      	ldr	r1, [pc, #416]	; (8001f2c <json_input+0x218>)
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff76 	bl	8001c7c <cJSON_GetObjectItem>
 8001d90:	65f8      	str	r0, [r7, #92]	; 0x5c
			TYPE = sType->valuestring;
 8001d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	4a66      	ldr	r2, [pc, #408]	; (8001f30 <json_input+0x21c>)
 8001d98:	6013      	str	r3, [r2, #0]

			if(strcmp(TYPE, "SET_DIDO") == 0)	//Включить/выключить цифровой выход если цифровой вход = значение(уровень)
 8001d9a:	4b65      	ldr	r3, [pc, #404]	; (8001f30 <json_input+0x21c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4965      	ldr	r1, [pc, #404]	; (8001f34 <json_input+0x220>)
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fa15 	bl	80001d0 <strcmp>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f040 80d9 	bne.w	8001f60 <json_input+0x24c>
			{
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_IN");
 8001dae:	495e      	ldr	r1, [pc, #376]	; (8001f28 <json_input+0x214>)
 8001db0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001db2:	f7ff ff63 	bl	8001c7c <cJSON_GetObjectItem>
 8001db6:	4603      	mov	r3, r0
 8001db8:	495f      	ldr	r1, [pc, #380]	; (8001f38 <json_input+0x224>)
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff ff5e 	bl	8001c7c <cJSON_GetObjectItem>
 8001dc0:	6178      	str	r0, [r7, #20]
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_IN");
 8001dc2:	4959      	ldr	r1, [pc, #356]	; (8001f28 <json_input+0x214>)
 8001dc4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001dc6:	f7ff ff59 	bl	8001c7c <cJSON_GetObjectItem>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	495b      	ldr	r1, [pc, #364]	; (8001f3c <json_input+0x228>)
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ff54 	bl	8001c7c <cJSON_GetObjectItem>
 8001dd4:	6138      	str	r0, [r7, #16]
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 8001dd6:	4954      	ldr	r1, [pc, #336]	; (8001f28 <json_input+0x214>)
 8001dd8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001dda:	f7ff ff4f 	bl	8001c7c <cJSON_GetObjectItem>
 8001dde:	4603      	mov	r3, r0
 8001de0:	4957      	ldr	r1, [pc, #348]	; (8001f40 <json_input+0x22c>)
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ff4a 	bl	8001c7c <cJSON_GetObjectItem>
 8001de8:	60f8      	str	r0, [r7, #12]
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8001dea:	494f      	ldr	r1, [pc, #316]	; (8001f28 <json_input+0x214>)
 8001dec:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001dee:	f7ff ff45 	bl	8001c7c <cJSON_GetObjectItem>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4953      	ldr	r1, [pc, #332]	; (8001f44 <json_input+0x230>)
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ff40 	bl	8001c7c <cJSON_GetObjectItem>
 8001dfc:	60b8      	str	r0, [r7, #8]

				D_IN = s1->valuestring;
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	4a51      	ldr	r2, [pc, #324]	; (8001f48 <json_input+0x234>)
 8001e04:	6013      	str	r3, [r2, #0]
				VAR_IN = s2->valuestring;
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	4a50      	ldr	r2, [pc, #320]	; (8001f4c <json_input+0x238>)
 8001e0c:	6013      	str	r3, [r2, #0]
				D_OUT = s3->valuestring;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	4a4f      	ldr	r2, [pc, #316]	; (8001f50 <json_input+0x23c>)
 8001e14:	6013      	str	r3, [r2, #0]
				VAR_OUT = s4->valuestring;
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	4a4e      	ldr	r2, [pc, #312]	; (8001f54 <json_input+0x240>)
 8001e1c:	6013      	str	r3, [r2, #0]

				save_dido(D_IN, text);
 8001e1e:	4b4a      	ldr	r3, [pc, #296]	; (8001f48 <json_input+0x234>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f004 fec7 	bl	8006bb8 <save_dido>

				set_dido(D_IN, (uint8_t)(atoi(VAR_IN)), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 8001e2a:	4b47      	ldr	r3, [pc, #284]	; (8001f48 <json_input+0x234>)
 8001e2c:	681c      	ldr	r4, [r3, #0]
 8001e2e:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <json_input+0x238>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f018 fc81 	bl	801a73a <atoi>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	b2dd      	uxtb	r5, r3
 8001e3c:	4b44      	ldr	r3, [pc, #272]	; (8001f50 <json_input+0x23c>)
 8001e3e:	681e      	ldr	r6, [r3, #0]
 8001e40:	4b44      	ldr	r3, [pc, #272]	; (8001f54 <json_input+0x240>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f018 fc78 	bl	801a73a <atoi>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	4632      	mov	r2, r6
 8001e50:	4629      	mov	r1, r5
 8001e52:	4620      	mov	r0, r4
 8001e54:	f006 fa44 	bl	80082e0 <set_dido>

				//---------------------------------QA---------------------------------
				SEND_str("\n");
 8001e58:	483f      	ldr	r0, [pc, #252]	; (8001f58 <json_input+0x244>)
 8001e5a:	f000 fea7 	bl	8002bac <SEND_str>
				SEND_str(TYPE);
 8001e5e:	4b34      	ldr	r3, [pc, #208]	; (8001f30 <json_input+0x21c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fea2 	bl	8002bac <SEND_str>
				SEND_str("\n");
 8001e68:	483b      	ldr	r0, [pc, #236]	; (8001f58 <json_input+0x244>)
 8001e6a:	f000 fe9f 	bl	8002bac <SEND_str>
				SEND_str(D_IN);
 8001e6e:	4b36      	ldr	r3, [pc, #216]	; (8001f48 <json_input+0x234>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 fe9a 	bl	8002bac <SEND_str>
				SEND_str(": ");
 8001e78:	4838      	ldr	r0, [pc, #224]	; (8001f5c <json_input+0x248>)
 8001e7a:	f000 fe97 	bl	8002bac <SEND_str>
				USART_Tx(D_IN[4]);
 8001e7e:	4b32      	ldr	r3, [pc, #200]	; (8001f48 <json_input+0x234>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	3304      	adds	r3, #4
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fe78 	bl	8002b7c <USART_Tx>
				SEND_str("\n");
 8001e8c:	4832      	ldr	r0, [pc, #200]	; (8001f58 <json_input+0x244>)
 8001e8e:	f000 fe8d 	bl	8002bac <SEND_str>
				SEND_str(VAR_IN);
 8001e92:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <json_input+0x238>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 fe88 	bl	8002bac <SEND_str>
				SEND_str("\n");
 8001e9c:	482e      	ldr	r0, [pc, #184]	; (8001f58 <json_input+0x244>)
 8001e9e:	f000 fe85 	bl	8002bac <SEND_str>
				SEND_str(D_OUT);
 8001ea2:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <json_input+0x23c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 fe80 	bl	8002bac <SEND_str>
				SEND_str(": ");
 8001eac:	482b      	ldr	r0, [pc, #172]	; (8001f5c <json_input+0x248>)
 8001eae:	f000 fe7d 	bl	8002bac <SEND_str>
				USART_Tx(D_OUT[5]);
 8001eb2:	4b27      	ldr	r3, [pc, #156]	; (8001f50 <json_input+0x23c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	3305      	adds	r3, #5
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 fe5e 	bl	8002b7c <USART_Tx>
				SEND_str("\n");
 8001ec0:	4825      	ldr	r0, [pc, #148]	; (8001f58 <json_input+0x244>)
 8001ec2:	f000 fe73 	bl	8002bac <SEND_str>
				SEND_str(VAR_OUT);
 8001ec6:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <json_input+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fe6e 	bl	8002bac <SEND_str>
				SEND_str("\n");
 8001ed0:	4821      	ldr	r0, [pc, #132]	; (8001f58 <json_input+0x244>)
 8001ed2:	f000 fe6b 	bl	8002bac <SEND_str>
				//------------------------------------------------------------------

				cJSON_Delete(json);
 8001ed6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001ed8:	f7ff f8f0 	bl	80010bc <cJSON_Delete>
				free(stime);
 8001edc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001ede:	f018 fc6f 	bl	801a7c0 <free>
				free(sInstruction);
 8001ee2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001ee4:	f018 fc6c 	bl	801a7c0 <free>
				free(sType);
 8001ee8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001eea:	f018 fc69 	bl	801a7c0 <free>
				free(s1);
 8001eee:	6978      	ldr	r0, [r7, #20]
 8001ef0:	f018 fc66 	bl	801a7c0 <free>
				free(s2);
 8001ef4:	6938      	ldr	r0, [r7, #16]
 8001ef6:	f018 fc63 	bl	801a7c0 <free>
				free(s3);
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f018 fc60 	bl	801a7c0 <free>
				free(s4);
 8001f00:	68b8      	ldr	r0, [r7, #8]
 8001f02:	f018 fc5d 	bl	801a7c0 <free>
	else
	{
		cJSON_Delete(json);
		free(stime);
	}
}
 8001f06:	f000 bd2c 	b.w	8002962 <json_input+0xc4e>
 8001f0a:	bf00      	nop
 8001f0c:	0801f9f8 	.word	0x0801f9f8
 8001f10:	20000808 	.word	0x20000808
 8001f14:	20000278 	.word	0x20000278
 8001f18:	2000027c 	.word	0x2000027c
 8001f1c:	0801fa00 	.word	0x0801fa00
 8001f20:	20000850 	.word	0x20000850
 8001f24:	0801fa0c 	.word	0x0801fa0c
 8001f28:	0801fa1c 	.word	0x0801fa1c
 8001f2c:	0801fa24 	.word	0x0801fa24
 8001f30:	200007fc 	.word	0x200007fc
 8001f34:	0801fa2c 	.word	0x0801fa2c
 8001f38:	0801fa38 	.word	0x0801fa38
 8001f3c:	0801fa40 	.word	0x0801fa40
 8001f40:	0801fa48 	.word	0x0801fa48
 8001f44:	0801fa50 	.word	0x0801fa50
 8001f48:	20000848 	.word	0x20000848
 8001f4c:	2000080c 	.word	0x2000080c
 8001f50:	20000838 	.word	0x20000838
 8001f54:	20000818 	.word	0x20000818
 8001f58:	0801fa58 	.word	0x0801fa58
 8001f5c:	0801fa5c 	.word	0x0801fa5c
			else if((strcmp(TYPE, "SET_VAIDO") == 0) || strcmp(TYPE, "SET_CAIDO") == 0)	//Включить/выключить один цифровой выход если аналоговый вход(измерение напряжения || измерение тока) в интервале значений
 8001f60:	4b76      	ldr	r3, [pc, #472]	; (800213c <json_input+0x428>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4976      	ldr	r1, [pc, #472]	; (8002140 <json_input+0x42c>)
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe f932 	bl	80001d0 <strcmp>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d009      	beq.n	8001f86 <json_input+0x272>
 8001f72:	4b72      	ldr	r3, [pc, #456]	; (800213c <json_input+0x428>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4973      	ldr	r1, [pc, #460]	; (8002144 <json_input+0x430>)
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe f929 	bl	80001d0 <strcmp>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f040 818d 	bne.w	80022a0 <json_input+0x58c>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_IN");
 8001f86:	4970      	ldr	r1, [pc, #448]	; (8002148 <json_input+0x434>)
 8001f88:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001f8a:	f7ff fe77 	bl	8001c7c <cJSON_GetObjectItem>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	496e      	ldr	r1, [pc, #440]	; (800214c <json_input+0x438>)
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fe72 	bl	8001c7c <cJSON_GetObjectItem>
 8001f98:	62b8      	str	r0, [r7, #40]	; 0x28
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_LOW");
 8001f9a:	496b      	ldr	r1, [pc, #428]	; (8002148 <json_input+0x434>)
 8001f9c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001f9e:	f7ff fe6d 	bl	8001c7c <cJSON_GetObjectItem>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	496a      	ldr	r1, [pc, #424]	; (8002150 <json_input+0x43c>)
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fe68 	bl	8001c7c <cJSON_GetObjectItem>
 8001fac:	6278      	str	r0, [r7, #36]	; 0x24
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_HIGH");
 8001fae:	4966      	ldr	r1, [pc, #408]	; (8002148 <json_input+0x434>)
 8001fb0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001fb2:	f7ff fe63 	bl	8001c7c <cJSON_GetObjectItem>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4966      	ldr	r1, [pc, #408]	; (8002154 <json_input+0x440>)
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fe5e 	bl	8001c7c <cJSON_GetObjectItem>
 8001fc0:	6238      	str	r0, [r7, #32]
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 8001fc2:	4961      	ldr	r1, [pc, #388]	; (8002148 <json_input+0x434>)
 8001fc4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001fc6:	f7ff fe59 	bl	8001c7c <cJSON_GetObjectItem>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4962      	ldr	r1, [pc, #392]	; (8002158 <json_input+0x444>)
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fe54 	bl	8001c7c <cJSON_GetObjectItem>
 8001fd4:	61f8      	str	r0, [r7, #28]
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8001fd6:	495c      	ldr	r1, [pc, #368]	; (8002148 <json_input+0x434>)
 8001fd8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001fda:	f7ff fe4f 	bl	8001c7c <cJSON_GetObjectItem>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	495e      	ldr	r1, [pc, #376]	; (800215c <json_input+0x448>)
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fe4a 	bl	8001c7c <cJSON_GetObjectItem>
 8001fe8:	61b8      	str	r0, [r7, #24]
				A_IN = s1->valuestring;
 8001fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	4a5c      	ldr	r2, [pc, #368]	; (8002160 <json_input+0x44c>)
 8001ff0:	6013      	str	r3, [r2, #0]
				RANGE_LOW = s2->valuestring;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	4a5b      	ldr	r2, [pc, #364]	; (8002164 <json_input+0x450>)
 8001ff8:	6013      	str	r3, [r2, #0]
				RANGE_HIGH = s3->valuestring;
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	4a5a      	ldr	r2, [pc, #360]	; (8002168 <json_input+0x454>)
 8002000:	6013      	str	r3, [r2, #0]
				D_OUT = s4->valuestring;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	4a59      	ldr	r2, [pc, #356]	; (800216c <json_input+0x458>)
 8002008:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	4a58      	ldr	r2, [pc, #352]	; (8002170 <json_input+0x45c>)
 8002010:	6013      	str	r3, [r2, #0]
				if(strcmp(A_IN, "VHOD1") == 0)
 8002012:	4b53      	ldr	r3, [pc, #332]	; (8002160 <json_input+0x44c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4957      	ldr	r1, [pc, #348]	; (8002174 <json_input+0x460>)
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe f8d9 	bl	80001d0 <strcmp>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d11e      	bne.n	8002062 <json_input+0x34e>
					if(strcmp(TYPE, "SET_VAIDO") == 0)
 8002024:	4b45      	ldr	r3, [pc, #276]	; (800213c <json_input+0x428>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4945      	ldr	r1, [pc, #276]	; (8002140 <json_input+0x42c>)
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe f8d0 	bl	80001d0 <strcmp>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10a      	bne.n	800204c <json_input+0x338>
						AiDo[0].inputFlag = true;
 8002036:	4b50      	ldr	r3, [pc, #320]	; (8002178 <json_input+0x464>)
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2020 	strb.w	r2, [r3, #32]
						SelectChannelOne(SET);
 800203e:	2201      	movs	r2, #1
 8002040:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002044:	484d      	ldr	r0, [pc, #308]	; (800217c <json_input+0x468>)
 8002046:	f009 fcf3 	bl	800ba30 <HAL_GPIO_WritePin>
 800204a:	e0a9      	b.n	80021a0 <json_input+0x48c>
						AiDo[0].inputFlag = false;
 800204c:	4b4a      	ldr	r3, [pc, #296]	; (8002178 <json_input+0x464>)
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2020 	strb.w	r2, [r3, #32]
						SelectChannelOne(RESET);
 8002054:	2200      	movs	r2, #0
 8002056:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800205a:	4848      	ldr	r0, [pc, #288]	; (800217c <json_input+0x468>)
 800205c:	f009 fce8 	bl	800ba30 <HAL_GPIO_WritePin>
 8002060:	e09e      	b.n	80021a0 <json_input+0x48c>
				else if(strcmp(A_IN, "VHOD2") == 0)
 8002062:	4b3f      	ldr	r3, [pc, #252]	; (8002160 <json_input+0x44c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4946      	ldr	r1, [pc, #280]	; (8002180 <json_input+0x46c>)
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe f8b1 	bl	80001d0 <strcmp>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d11e      	bne.n	80020b2 <json_input+0x39e>
					if(strcmp(TYPE, "SET_VAIDO") == 0)
 8002074:	4b31      	ldr	r3, [pc, #196]	; (800213c <json_input+0x428>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4931      	ldr	r1, [pc, #196]	; (8002140 <json_input+0x42c>)
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe f8a8 	bl	80001d0 <strcmp>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10a      	bne.n	800209c <json_input+0x388>
						AiDo[1].inputFlag = true;
 8002086:	4b3c      	ldr	r3, [pc, #240]	; (8002178 <json_input+0x464>)
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
						SelectChannelTwo(SET);
 800208e:	2201      	movs	r2, #1
 8002090:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002094:	4839      	ldr	r0, [pc, #228]	; (800217c <json_input+0x468>)
 8002096:	f009 fccb 	bl	800ba30 <HAL_GPIO_WritePin>
 800209a:	e081      	b.n	80021a0 <json_input+0x48c>
						AiDo[1].inputFlag = false;
 800209c:	4b36      	ldr	r3, [pc, #216]	; (8002178 <json_input+0x464>)
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
						SelectChannelTwo(RESET);
 80020a4:	2200      	movs	r2, #0
 80020a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020aa:	4834      	ldr	r0, [pc, #208]	; (800217c <json_input+0x468>)
 80020ac:	f009 fcc0 	bl	800ba30 <HAL_GPIO_WritePin>
 80020b0:	e076      	b.n	80021a0 <json_input+0x48c>
				else if(strcmp(A_IN, "VHOD3") == 0)
 80020b2:	4b2b      	ldr	r3, [pc, #172]	; (8002160 <json_input+0x44c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4933      	ldr	r1, [pc, #204]	; (8002184 <json_input+0x470>)
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe f889 	bl	80001d0 <strcmp>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d11e      	bne.n	8002102 <json_input+0x3ee>
					if(strcmp(TYPE, "SET_VAIDO") == 0)
 80020c4:	4b1d      	ldr	r3, [pc, #116]	; (800213c <json_input+0x428>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	491d      	ldr	r1, [pc, #116]	; (8002140 <json_input+0x42c>)
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe f880 	bl	80001d0 <strcmp>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10a      	bne.n	80020ec <json_input+0x3d8>
						AiDo[2].inputFlag = true;
 80020d6:	4b28      	ldr	r3, [pc, #160]	; (8002178 <json_input+0x464>)
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
						SelectChannelThree(SET);
 80020de:	2201      	movs	r2, #1
 80020e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020e4:	4825      	ldr	r0, [pc, #148]	; (800217c <json_input+0x468>)
 80020e6:	f009 fca3 	bl	800ba30 <HAL_GPIO_WritePin>
 80020ea:	e059      	b.n	80021a0 <json_input+0x48c>
						AiDo[2].inputFlag = false;
 80020ec:	4b22      	ldr	r3, [pc, #136]	; (8002178 <json_input+0x464>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
						SelectChannelThree(RESET);
 80020f4:	2200      	movs	r2, #0
 80020f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020fa:	4820      	ldr	r0, [pc, #128]	; (800217c <json_input+0x468>)
 80020fc:	f009 fc98 	bl	800ba30 <HAL_GPIO_WritePin>
 8002100:	e04e      	b.n	80021a0 <json_input+0x48c>
				else if(strcmp(A_IN, "VHOD4") == 0)
 8002102:	4b17      	ldr	r3, [pc, #92]	; (8002160 <json_input+0x44c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4920      	ldr	r1, [pc, #128]	; (8002188 <json_input+0x474>)
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe f861 	bl	80001d0 <strcmp>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d145      	bne.n	80021a0 <json_input+0x48c>
					if(strcmp(TYPE, "SET_VAIDO") == 0)
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <json_input+0x428>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4909      	ldr	r1, [pc, #36]	; (8002140 <json_input+0x42c>)
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe f858 	bl	80001d0 <strcmp>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d132      	bne.n	800218c <json_input+0x478>
						AiDo[3].inputFlag = true;
 8002126:	4b14      	ldr	r3, [pc, #80]	; (8002178 <json_input+0x464>)
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
						SelectChannelFour(SET);
 800212e:	2201      	movs	r2, #1
 8002130:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002134:	4811      	ldr	r0, [pc, #68]	; (800217c <json_input+0x468>)
 8002136:	f009 fc7b 	bl	800ba30 <HAL_GPIO_WritePin>
 800213a:	e031      	b.n	80021a0 <json_input+0x48c>
 800213c:	200007fc 	.word	0x200007fc
 8002140:	0801fa60 	.word	0x0801fa60
 8002144:	0801fa6c 	.word	0x0801fa6c
 8002148:	0801fa1c 	.word	0x0801fa1c
 800214c:	0801fa78 	.word	0x0801fa78
 8002150:	0801fa80 	.word	0x0801fa80
 8002154:	0801fa8c 	.word	0x0801fa8c
 8002158:	0801fa48 	.word	0x0801fa48
 800215c:	0801fa50 	.word	0x0801fa50
 8002160:	2000084c 	.word	0x2000084c
 8002164:	2000081c 	.word	0x2000081c
 8002168:	2000083c 	.word	0x2000083c
 800216c:	20000838 	.word	0x20000838
 8002170:	20000818 	.word	0x20000818
 8002174:	0801fa98 	.word	0x0801fa98
 8002178:	200006b8 	.word	0x200006b8
 800217c:	40021000 	.word	0x40021000
 8002180:	0801faa0 	.word	0x0801faa0
 8002184:	0801faa8 	.word	0x0801faa8
 8002188:	0801fab0 	.word	0x0801fab0
						AiDo[3].inputFlag = false;
 800218c:	4b77      	ldr	r3, [pc, #476]	; (800236c <json_input+0x658>)
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
						SelectChannelFour(RESET);
 8002194:	2200      	movs	r2, #0
 8002196:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800219a:	4875      	ldr	r0, [pc, #468]	; (8002370 <json_input+0x65c>)
 800219c:	f009 fc48 	bl	800ba30 <HAL_GPIO_WritePin>
				save_aido(A_IN, text);
 80021a0:	4b74      	ldr	r3, [pc, #464]	; (8002374 <json_input+0x660>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f004 fd28 	bl	8006bfc <save_aido>
				set_aido(A_IN, atof(RANGE_LOW), atof(RANGE_HIGH), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 80021ac:	4b71      	ldr	r3, [pc, #452]	; (8002374 <json_input+0x660>)
 80021ae:	681c      	ldr	r4, [r3, #0]
 80021b0:	4b71      	ldr	r3, [pc, #452]	; (8002378 <json_input+0x664>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f018 fabd 	bl	801a734 <atof>
 80021ba:	eeb0 8a40 	vmov.f32	s16, s0
 80021be:	eef0 8a60 	vmov.f32	s17, s1
 80021c2:	4b6e      	ldr	r3, [pc, #440]	; (800237c <json_input+0x668>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f018 fab4 	bl	801a734 <atof>
 80021cc:	eeb0 9a40 	vmov.f32	s18, s0
 80021d0:	eef0 9a60 	vmov.f32	s19, s1
 80021d4:	4b6a      	ldr	r3, [pc, #424]	; (8002380 <json_input+0x66c>)
 80021d6:	681d      	ldr	r5, [r3, #0]
 80021d8:	4b6a      	ldr	r3, [pc, #424]	; (8002384 <json_input+0x670>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f018 faac 	bl	801a73a <atoi>
 80021e2:	4603      	mov	r3, r0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	4629      	mov	r1, r5
 80021ea:	eeb0 1a49 	vmov.f32	s2, s18
 80021ee:	eef0 1a69 	vmov.f32	s3, s19
 80021f2:	eeb0 0a48 	vmov.f32	s0, s16
 80021f6:	eef0 0a68 	vmov.f32	s1, s17
 80021fa:	4620      	mov	r0, r4
 80021fc:	f006 fa36 	bl	800866c <set_aido>
				SEND_str("\n");
 8002200:	4861      	ldr	r0, [pc, #388]	; (8002388 <json_input+0x674>)
 8002202:	f000 fcd3 	bl	8002bac <SEND_str>
				SEND_str(TYPE);
 8002206:	4b61      	ldr	r3, [pc, #388]	; (800238c <json_input+0x678>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fcce 	bl	8002bac <SEND_str>
				SEND_str("\n");
 8002210:	485d      	ldr	r0, [pc, #372]	; (8002388 <json_input+0x674>)
 8002212:	f000 fccb 	bl	8002bac <SEND_str>
				SEND_str(A_IN);
 8002216:	4b57      	ldr	r3, [pc, #348]	; (8002374 <json_input+0x660>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f000 fcc6 	bl	8002bac <SEND_str>
				SEND_str("\n");
 8002220:	4859      	ldr	r0, [pc, #356]	; (8002388 <json_input+0x674>)
 8002222:	f000 fcc3 	bl	8002bac <SEND_str>
				SEND_str(RANGE_LOW);
 8002226:	4b54      	ldr	r3, [pc, #336]	; (8002378 <json_input+0x664>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fcbe 	bl	8002bac <SEND_str>
				SEND_str("\n");
 8002230:	4855      	ldr	r0, [pc, #340]	; (8002388 <json_input+0x674>)
 8002232:	f000 fcbb 	bl	8002bac <SEND_str>
				SEND_str(RANGE_HIGH);
 8002236:	4b51      	ldr	r3, [pc, #324]	; (800237c <json_input+0x668>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fcb6 	bl	8002bac <SEND_str>
				SEND_str("\n");
 8002240:	4851      	ldr	r0, [pc, #324]	; (8002388 <json_input+0x674>)
 8002242:	f000 fcb3 	bl	8002bac <SEND_str>
				SEND_str(D_OUT);
 8002246:	4b4e      	ldr	r3, [pc, #312]	; (8002380 <json_input+0x66c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fcae 	bl	8002bac <SEND_str>
				SEND_str("\n");
 8002250:	484d      	ldr	r0, [pc, #308]	; (8002388 <json_input+0x674>)
 8002252:	f000 fcab 	bl	8002bac <SEND_str>
				SEND_str(VAR_OUT);
 8002256:	4b4b      	ldr	r3, [pc, #300]	; (8002384 <json_input+0x670>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f000 fca6 	bl	8002bac <SEND_str>
				SEND_str("\n");
 8002260:	4849      	ldr	r0, [pc, #292]	; (8002388 <json_input+0x674>)
 8002262:	f000 fca3 	bl	8002bac <SEND_str>
				cJSON_Delete(json);
 8002266:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002268:	f7fe ff28 	bl	80010bc <cJSON_Delete>
				free(stime);
 800226c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800226e:	f018 faa7 	bl	801a7c0 <free>
				free(sInstruction);
 8002272:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002274:	f018 faa4 	bl	801a7c0 <free>
				free(sType);
 8002278:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800227a:	f018 faa1 	bl	801a7c0 <free>
				free(s1);
 800227e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002280:	f018 fa9e 	bl	801a7c0 <free>
				free(s2);
 8002284:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002286:	f018 fa9b 	bl	801a7c0 <free>
				free(s3);
 800228a:	6a38      	ldr	r0, [r7, #32]
 800228c:	f018 fa98 	bl	801a7c0 <free>
				free(s4);
 8002290:	69f8      	ldr	r0, [r7, #28]
 8002292:	f018 fa95 	bl	801a7c0 <free>
				free(s5);
 8002296:	69b8      	ldr	r0, [r7, #24]
 8002298:	f018 fa92 	bl	801a7c0 <free>
			{
 800229c:	bf00      	nop
}
 800229e:	e360      	b.n	8002962 <json_input+0xc4e>
			else if(strcmp(TYPE, "SET_PWM") == 0)	//Выставить коэффициент заполнения на ШИМ
 80022a0:	4b3a      	ldr	r3, [pc, #232]	; (800238c <json_input+0x678>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	493a      	ldr	r1, [pc, #232]	; (8002390 <json_input+0x67c>)
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fd ff92 	bl	80001d0 <strcmp>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d17a      	bne.n	80023a8 <json_input+0x694>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "PWM_OUT");
 80022b2:	4938      	ldr	r1, [pc, #224]	; (8002394 <json_input+0x680>)
 80022b4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80022b6:	f7ff fce1 	bl	8001c7c <cJSON_GetObjectItem>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4936      	ldr	r1, [pc, #216]	; (8002398 <json_input+0x684>)
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fcdc 	bl	8001c7c <cJSON_GetObjectItem>
 80022c4:	6338      	str	r0, [r7, #48]	; 0x30
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_CYCLE");
 80022c6:	4933      	ldr	r1, [pc, #204]	; (8002394 <json_input+0x680>)
 80022c8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80022ca:	f7ff fcd7 	bl	8001c7c <cJSON_GetObjectItem>
 80022ce:	4603      	mov	r3, r0
 80022d0:	4932      	ldr	r1, [pc, #200]	; (800239c <json_input+0x688>)
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fcd2 	bl	8001c7c <cJSON_GetObjectItem>
 80022d8:	62f8      	str	r0, [r7, #44]	; 0x2c
				PWM_OUT = s1->valuestring;
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	4a30      	ldr	r2, [pc, #192]	; (80023a0 <json_input+0x68c>)
 80022e0:	6013      	str	r3, [r2, #0]
				D_CYCLE = s2->valuestring;
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	4a2f      	ldr	r2, [pc, #188]	; (80023a4 <json_input+0x690>)
 80022e8:	6013      	str	r3, [r2, #0]
				save_pwm(PWM_OUT, text);
 80022ea:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <json_input+0x68c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f004 fca5 	bl	8006c40 <save_pwm>
				set_pwm(PWM_OUT, (uint32_t)(atoi(D_CYCLE)));
 80022f6:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <json_input+0x68c>)
 80022f8:	681c      	ldr	r4, [r3, #0]
 80022fa:	4b2a      	ldr	r3, [pc, #168]	; (80023a4 <json_input+0x690>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f018 fa1b 	bl	801a73a <atoi>
 8002304:	4603      	mov	r3, r0
 8002306:	4619      	mov	r1, r3
 8002308:	4620      	mov	r0, r4
 800230a:	f006 faff 	bl	800890c <set_pwm>
				SEND_str("\n");
 800230e:	481e      	ldr	r0, [pc, #120]	; (8002388 <json_input+0x674>)
 8002310:	f000 fc4c 	bl	8002bac <SEND_str>
				SEND_str(TYPE);
 8002314:	4b1d      	ldr	r3, [pc, #116]	; (800238c <json_input+0x678>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f000 fc47 	bl	8002bac <SEND_str>
				SEND_str("\n");
 800231e:	481a      	ldr	r0, [pc, #104]	; (8002388 <json_input+0x674>)
 8002320:	f000 fc44 	bl	8002bac <SEND_str>
				SEND_str(PWM_OUT);
 8002324:	4b1e      	ldr	r3, [pc, #120]	; (80023a0 <json_input+0x68c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f000 fc3f 	bl	8002bac <SEND_str>
				SEND_str("\n");
 800232e:	4816      	ldr	r0, [pc, #88]	; (8002388 <json_input+0x674>)
 8002330:	f000 fc3c 	bl	8002bac <SEND_str>
				SEND_str(D_CYCLE);
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <json_input+0x690>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f000 fc37 	bl	8002bac <SEND_str>
				SEND_str("\n");
 800233e:	4812      	ldr	r0, [pc, #72]	; (8002388 <json_input+0x674>)
 8002340:	f000 fc34 	bl	8002bac <SEND_str>
				cJSON_Delete(json);
 8002344:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002346:	f7fe feb9 	bl	80010bc <cJSON_Delete>
				free(stime);
 800234a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800234c:	f018 fa38 	bl	801a7c0 <free>
				free(sInstruction);
 8002350:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002352:	f018 fa35 	bl	801a7c0 <free>
				free(sType);
 8002356:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002358:	f018 fa32 	bl	801a7c0 <free>
				free(s1);
 800235c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800235e:	f018 fa2f 	bl	801a7c0 <free>
				free(s2);
 8002362:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002364:	f018 fa2c 	bl	801a7c0 <free>
}
 8002368:	e2fb      	b.n	8002962 <json_input+0xc4e>
 800236a:	bf00      	nop
 800236c:	200006b8 	.word	0x200006b8
 8002370:	40021000 	.word	0x40021000
 8002374:	2000084c 	.word	0x2000084c
 8002378:	2000081c 	.word	0x2000081c
 800237c:	2000083c 	.word	0x2000083c
 8002380:	20000838 	.word	0x20000838
 8002384:	20000818 	.word	0x20000818
 8002388:	0801fa58 	.word	0x0801fa58
 800238c:	200007fc 	.word	0x200007fc
 8002390:	0801fab8 	.word	0x0801fab8
 8002394:	0801fa1c 	.word	0x0801fa1c
 8002398:	0801fac0 	.word	0x0801fac0
 800239c:	0801fac8 	.word	0x0801fac8
 80023a0:	20000804 	.word	0x20000804
 80023a4:	20000840 	.word	0x20000840
			else if(strcmp(TYPE, "SET_TEMP_PROFILE") == 0)	//Установить профиль температуры: Если температура в диапазоне значений то установить цыфровой выход(OCD)
 80023a8:	4b67      	ldr	r3, [pc, #412]	; (8002548 <json_input+0x834>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4967      	ldr	r1, [pc, #412]	; (800254c <json_input+0x838>)
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fd ff0e 	bl	80001d0 <strcmp>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f040 80e2 	bne.w	8002580 <json_input+0x86c>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "ROM_RAW");
 80023bc:	4964      	ldr	r1, [pc, #400]	; (8002550 <json_input+0x83c>)
 80023be:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80023c0:	f7ff fc5c 	bl	8001c7c <cJSON_GetObjectItem>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4963      	ldr	r1, [pc, #396]	; (8002554 <json_input+0x840>)
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fc57 	bl	8001c7c <cJSON_GetObjectItem>
 80023ce:	6478      	str	r0, [r7, #68]	; 0x44
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_TEMP_LOW");
 80023d0:	495f      	ldr	r1, [pc, #380]	; (8002550 <json_input+0x83c>)
 80023d2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80023d4:	f7ff fc52 	bl	8001c7c <cJSON_GetObjectItem>
 80023d8:	4603      	mov	r3, r0
 80023da:	495f      	ldr	r1, [pc, #380]	; (8002558 <json_input+0x844>)
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fc4d 	bl	8001c7c <cJSON_GetObjectItem>
 80023e2:	6438      	str	r0, [r7, #64]	; 0x40
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_TEMP_HIGH");
 80023e4:	495a      	ldr	r1, [pc, #360]	; (8002550 <json_input+0x83c>)
 80023e6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80023e8:	f7ff fc48 	bl	8001c7c <cJSON_GetObjectItem>
 80023ec:	4603      	mov	r3, r0
 80023ee:	495b      	ldr	r1, [pc, #364]	; (800255c <json_input+0x848>)
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fc43 	bl	8001c7c <cJSON_GetObjectItem>
 80023f6:	63f8      	str	r0, [r7, #60]	; 0x3c
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 80023f8:	4955      	ldr	r1, [pc, #340]	; (8002550 <json_input+0x83c>)
 80023fa:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80023fc:	f7ff fc3e 	bl	8001c7c <cJSON_GetObjectItem>
 8002400:	4603      	mov	r3, r0
 8002402:	4957      	ldr	r1, [pc, #348]	; (8002560 <json_input+0x84c>)
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fc39 	bl	8001c7c <cJSON_GetObjectItem>
 800240a:	63b8      	str	r0, [r7, #56]	; 0x38
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 800240c:	4950      	ldr	r1, [pc, #320]	; (8002550 <json_input+0x83c>)
 800240e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002410:	f7ff fc34 	bl	8001c7c <cJSON_GetObjectItem>
 8002414:	4603      	mov	r3, r0
 8002416:	4953      	ldr	r1, [pc, #332]	; (8002564 <json_input+0x850>)
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fc2f 	bl	8001c7c <cJSON_GetObjectItem>
 800241e:	6378      	str	r0, [r7, #52]	; 0x34
				ROM_RAW = s1->valuestring;
 8002420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	4a50      	ldr	r2, [pc, #320]	; (8002568 <json_input+0x854>)
 8002426:	6013      	str	r3, [r2, #0]
				RANGE_TEMP_LOW = s2->valuestring;
 8002428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	4a4f      	ldr	r2, [pc, #316]	; (800256c <json_input+0x858>)
 800242e:	6013      	str	r3, [r2, #0]
				RANGE_TEMP_HIGH = s3->valuestring;
 8002430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	4a4e      	ldr	r2, [pc, #312]	; (8002570 <json_input+0x85c>)
 8002436:	6013      	str	r3, [r2, #0]
				D_OUT = s4->valuestring;
 8002438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	4a4d      	ldr	r2, [pc, #308]	; (8002574 <json_input+0x860>)
 800243e:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 8002440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	4a4c      	ldr	r2, [pc, #304]	; (8002578 <json_input+0x864>)
 8002446:	6013      	str	r3, [r2, #0]
				save_tsido(ROM_RAW, text);
 8002448:	4b47      	ldr	r3, [pc, #284]	; (8002568 <json_input+0x854>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4618      	mov	r0, r3
 8002450:	f004 fc16 	bl	8006c80 <save_tsido>
				set_temperature(ROM_RAW, atof(RANGE_TEMP_LOW), atof(RANGE_TEMP_HIGH), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 8002454:	4b44      	ldr	r3, [pc, #272]	; (8002568 <json_input+0x854>)
 8002456:	681c      	ldr	r4, [r3, #0]
 8002458:	4b44      	ldr	r3, [pc, #272]	; (800256c <json_input+0x858>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f018 f969 	bl	801a734 <atof>
 8002462:	eeb0 8a40 	vmov.f32	s16, s0
 8002466:	eef0 8a60 	vmov.f32	s17, s1
 800246a:	4b41      	ldr	r3, [pc, #260]	; (8002570 <json_input+0x85c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f018 f960 	bl	801a734 <atof>
 8002474:	eeb0 9a40 	vmov.f32	s18, s0
 8002478:	eef0 9a60 	vmov.f32	s19, s1
 800247c:	4b3d      	ldr	r3, [pc, #244]	; (8002574 <json_input+0x860>)
 800247e:	681d      	ldr	r5, [r3, #0]
 8002480:	4b3d      	ldr	r3, [pc, #244]	; (8002578 <json_input+0x864>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f018 f958 	bl	801a73a <atoi>
 800248a:	4603      	mov	r3, r0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	4629      	mov	r1, r5
 8002492:	eeb0 1a49 	vmov.f32	s2, s18
 8002496:	eef0 1a69 	vmov.f32	s3, s19
 800249a:	eeb0 0a48 	vmov.f32	s0, s16
 800249e:	eef0 0a68 	vmov.f32	s1, s17
 80024a2:	4620      	mov	r0, r4
 80024a4:	f006 fae0 	bl	8008a68 <set_temperature>
				SEND_str("\n");
 80024a8:	4834      	ldr	r0, [pc, #208]	; (800257c <json_input+0x868>)
 80024aa:	f000 fb7f 	bl	8002bac <SEND_str>
				SEND_str(TYPE);
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <json_input+0x834>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 fb7a 	bl	8002bac <SEND_str>
				SEND_str("\n");
 80024b8:	4830      	ldr	r0, [pc, #192]	; (800257c <json_input+0x868>)
 80024ba:	f000 fb77 	bl	8002bac <SEND_str>
				SEND_str(ROM_RAW);
 80024be:	4b2a      	ldr	r3, [pc, #168]	; (8002568 <json_input+0x854>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 fb72 	bl	8002bac <SEND_str>
				SEND_str("\n");
 80024c8:	482c      	ldr	r0, [pc, #176]	; (800257c <json_input+0x868>)
 80024ca:	f000 fb6f 	bl	8002bac <SEND_str>
				SEND_str(RANGE_TEMP_LOW);
 80024ce:	4b27      	ldr	r3, [pc, #156]	; (800256c <json_input+0x858>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fb6a 	bl	8002bac <SEND_str>
				SEND_str("\n");
 80024d8:	4828      	ldr	r0, [pc, #160]	; (800257c <json_input+0x868>)
 80024da:	f000 fb67 	bl	8002bac <SEND_str>
				SEND_str(RANGE_TEMP_HIGH);
 80024de:	4b24      	ldr	r3, [pc, #144]	; (8002570 <json_input+0x85c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fb62 	bl	8002bac <SEND_str>
				SEND_str("\n");
 80024e8:	4824      	ldr	r0, [pc, #144]	; (800257c <json_input+0x868>)
 80024ea:	f000 fb5f 	bl	8002bac <SEND_str>
				SEND_str(D_OUT);
 80024ee:	4b21      	ldr	r3, [pc, #132]	; (8002574 <json_input+0x860>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fb5a 	bl	8002bac <SEND_str>
				SEND_str("\n");
 80024f8:	4820      	ldr	r0, [pc, #128]	; (800257c <json_input+0x868>)
 80024fa:	f000 fb57 	bl	8002bac <SEND_str>
				SEND_str(VAR_OUT);
 80024fe:	4b1e      	ldr	r3, [pc, #120]	; (8002578 <json_input+0x864>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f000 fb52 	bl	8002bac <SEND_str>
				SEND_str("\n");
 8002508:	481c      	ldr	r0, [pc, #112]	; (800257c <json_input+0x868>)
 800250a:	f000 fb4f 	bl	8002bac <SEND_str>
				cJSON_Delete(json);
 800250e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002510:	f7fe fdd4 	bl	80010bc <cJSON_Delete>
				free(stime);
 8002514:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002516:	f018 f953 	bl	801a7c0 <free>
				free(sInstruction);
 800251a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800251c:	f018 f950 	bl	801a7c0 <free>
				free(sType);
 8002520:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002522:	f018 f94d 	bl	801a7c0 <free>
				free(s1);
 8002526:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002528:	f018 f94a 	bl	801a7c0 <free>
				free(s2);
 800252c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800252e:	f018 f947 	bl	801a7c0 <free>
				free(s3);
 8002532:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002534:	f018 f944 	bl	801a7c0 <free>
				free(s4);
 8002538:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800253a:	f018 f941 	bl	801a7c0 <free>
				free(s5);
 800253e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002540:	f018 f93e 	bl	801a7c0 <free>
}
 8002544:	e20d      	b.n	8002962 <json_input+0xc4e>
 8002546:	bf00      	nop
 8002548:	200007fc 	.word	0x200007fc
 800254c:	0801fad0 	.word	0x0801fad0
 8002550:	0801fa1c 	.word	0x0801fa1c
 8002554:	0801fae4 	.word	0x0801fae4
 8002558:	0801faec 	.word	0x0801faec
 800255c:	0801fafc 	.word	0x0801fafc
 8002560:	0801fa48 	.word	0x0801fa48
 8002564:	0801fa50 	.word	0x0801fa50
 8002568:	20000858 	.word	0x20000858
 800256c:	200007f8 	.word	0x200007f8
 8002570:	20000854 	.word	0x20000854
 8002574:	20000838 	.word	0x20000838
 8002578:	20000818 	.word	0x20000818
 800257c:	0801fa58 	.word	0x0801fa58
			else if(strcmp(TYPE, "SET_AIAO") == 0)	//Установить значение в аналоговый выход если аналоговый вход = значение
 8002580:	4b9d      	ldr	r3, [pc, #628]	; (80027f8 <json_input+0xae4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	499d      	ldr	r1, [pc, #628]	; (80027fc <json_input+0xae8>)
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd fe22 	bl	80001d0 <strcmp>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	f040 8095 	bne.w	80026be <json_input+0x9aa>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_IN");
 8002594:	499a      	ldr	r1, [pc, #616]	; (8002800 <json_input+0xaec>)
 8002596:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002598:	f7ff fb70 	bl	8001c7c <cJSON_GetObjectItem>
 800259c:	4603      	mov	r3, r0
 800259e:	4999      	ldr	r1, [pc, #612]	; (8002804 <json_input+0xaf0>)
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fb6b 	bl	8001c7c <cJSON_GetObjectItem>
 80025a6:	65b8      	str	r0, [r7, #88]	; 0x58
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_LOW");
 80025a8:	4995      	ldr	r1, [pc, #596]	; (8002800 <json_input+0xaec>)
 80025aa:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80025ac:	f7ff fb66 	bl	8001c7c <cJSON_GetObjectItem>
 80025b0:	4603      	mov	r3, r0
 80025b2:	4995      	ldr	r1, [pc, #596]	; (8002808 <json_input+0xaf4>)
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fb61 	bl	8001c7c <cJSON_GetObjectItem>
 80025ba:	6578      	str	r0, [r7, #84]	; 0x54
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_HIGH");
 80025bc:	4990      	ldr	r1, [pc, #576]	; (8002800 <json_input+0xaec>)
 80025be:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80025c0:	f7ff fb5c 	bl	8001c7c <cJSON_GetObjectItem>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4991      	ldr	r1, [pc, #580]	; (800280c <json_input+0xaf8>)
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fb57 	bl	8001c7c <cJSON_GetObjectItem>
 80025ce:	6538      	str	r0, [r7, #80]	; 0x50
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_OUT");
 80025d0:	498b      	ldr	r1, [pc, #556]	; (8002800 <json_input+0xaec>)
 80025d2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80025d4:	f7ff fb52 	bl	8001c7c <cJSON_GetObjectItem>
 80025d8:	4603      	mov	r3, r0
 80025da:	498d      	ldr	r1, [pc, #564]	; (8002810 <json_input+0xafc>)
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fb4d 	bl	8001c7c <cJSON_GetObjectItem>
 80025e2:	64f8      	str	r0, [r7, #76]	; 0x4c
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 80025e4:	4986      	ldr	r1, [pc, #536]	; (8002800 <json_input+0xaec>)
 80025e6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80025e8:	f7ff fb48 	bl	8001c7c <cJSON_GetObjectItem>
 80025ec:	4603      	mov	r3, r0
 80025ee:	4989      	ldr	r1, [pc, #548]	; (8002814 <json_input+0xb00>)
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fb43 	bl	8001c7c <cJSON_GetObjectItem>
 80025f6:	64b8      	str	r0, [r7, #72]	; 0x48
				A_IN = s1->valuestring;
 80025f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	4a86      	ldr	r2, [pc, #536]	; (8002818 <json_input+0xb04>)
 80025fe:	6013      	str	r3, [r2, #0]
				RANGE_LOW = s2->valuestring;
 8002600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	4a85      	ldr	r2, [pc, #532]	; (800281c <json_input+0xb08>)
 8002606:	6013      	str	r3, [r2, #0]
				RANGE_HIGH = s3->valuestring;
 8002608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	4a84      	ldr	r2, [pc, #528]	; (8002820 <json_input+0xb0c>)
 800260e:	6013      	str	r3, [r2, #0]
				A_OUT = s4->valuestring;
 8002610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	4a83      	ldr	r2, [pc, #524]	; (8002824 <json_input+0xb10>)
 8002616:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 8002618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	4a82      	ldr	r2, [pc, #520]	; (8002828 <json_input+0xb14>)
 800261e:	6013      	str	r3, [r2, #0]
				SEND_str("\n");
 8002620:	4882      	ldr	r0, [pc, #520]	; (800282c <json_input+0xb18>)
 8002622:	f000 fac3 	bl	8002bac <SEND_str>
				SEND_str(TYPE);
 8002626:	4b74      	ldr	r3, [pc, #464]	; (80027f8 <json_input+0xae4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f000 fabe 	bl	8002bac <SEND_str>
				SEND_str("\n");
 8002630:	487e      	ldr	r0, [pc, #504]	; (800282c <json_input+0xb18>)
 8002632:	f000 fabb 	bl	8002bac <SEND_str>
				SEND_str(A_IN);
 8002636:	4b78      	ldr	r3, [pc, #480]	; (8002818 <json_input+0xb04>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fab6 	bl	8002bac <SEND_str>
				SEND_str("\n");
 8002640:	487a      	ldr	r0, [pc, #488]	; (800282c <json_input+0xb18>)
 8002642:	f000 fab3 	bl	8002bac <SEND_str>
				SEND_str(RANGE_LOW);
 8002646:	4b75      	ldr	r3, [pc, #468]	; (800281c <json_input+0xb08>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f000 faae 	bl	8002bac <SEND_str>
				SEND_str("\n");
 8002650:	4876      	ldr	r0, [pc, #472]	; (800282c <json_input+0xb18>)
 8002652:	f000 faab 	bl	8002bac <SEND_str>
				SEND_str(RANGE_HIGH);
 8002656:	4b72      	ldr	r3, [pc, #456]	; (8002820 <json_input+0xb0c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f000 faa6 	bl	8002bac <SEND_str>
				SEND_str("\n");
 8002660:	4872      	ldr	r0, [pc, #456]	; (800282c <json_input+0xb18>)
 8002662:	f000 faa3 	bl	8002bac <SEND_str>
				SEND_str(A_OUT);
 8002666:	4b6f      	ldr	r3, [pc, #444]	; (8002824 <json_input+0xb10>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f000 fa9e 	bl	8002bac <SEND_str>
				SEND_str("\n");
 8002670:	486e      	ldr	r0, [pc, #440]	; (800282c <json_input+0xb18>)
 8002672:	f000 fa9b 	bl	8002bac <SEND_str>
				SEND_str(VAR_OUT);
 8002676:	4b6c      	ldr	r3, [pc, #432]	; (8002828 <json_input+0xb14>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fa96 	bl	8002bac <SEND_str>
				SEND_str("\n");
 8002680:	486a      	ldr	r0, [pc, #424]	; (800282c <json_input+0xb18>)
 8002682:	f000 fa93 	bl	8002bac <SEND_str>
				cJSON_Delete(json);
 8002686:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002688:	f7fe fd18 	bl	80010bc <cJSON_Delete>
				free(stime);
 800268c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800268e:	f018 f897 	bl	801a7c0 <free>
				free(sInstruction);
 8002692:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002694:	f018 f894 	bl	801a7c0 <free>
				free(sType);
 8002698:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800269a:	f018 f891 	bl	801a7c0 <free>
				free(s1);
 800269e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80026a0:	f018 f88e 	bl	801a7c0 <free>
				free(s2);
 80026a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80026a6:	f018 f88b 	bl	801a7c0 <free>
				free(s3);
 80026aa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80026ac:	f018 f888 	bl	801a7c0 <free>
				free(s4);
 80026b0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80026b2:	f018 f885 	bl	801a7c0 <free>
				free(s5);
 80026b6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80026b8:	f018 f882 	bl	801a7c0 <free>
}
 80026bc:	e151      	b.n	8002962 <json_input+0xc4e>
				cJSON_Delete(json);
 80026be:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80026c0:	f7fe fcfc 	bl	80010bc <cJSON_Delete>
				free(stime);
 80026c4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80026c6:	f018 f87b 	bl	801a7c0 <free>
				free(sInstruction);
 80026ca:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80026cc:	f018 f878 	bl	801a7c0 <free>
				free(sType);
 80026d0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80026d2:	f018 f875 	bl	801a7c0 <free>
}
 80026d6:	e144      	b.n	8002962 <json_input+0xc4e>
		else if(strcmp(INSTRUCTION, "SET_PERIPHERALS") == 0)
 80026d8:	4b55      	ldr	r3, [pc, #340]	; (8002830 <json_input+0xb1c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4955      	ldr	r1, [pc, #340]	; (8002834 <json_input+0xb20>)
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fd fd76 	bl	80001d0 <strcmp>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f040 812e 	bne.w	8002948 <json_input+0xc34>
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 80026ec:	4944      	ldr	r1, [pc, #272]	; (8002800 <json_input+0xaec>)
 80026ee:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80026f0:	f7ff fac4 	bl	8001c7c <cJSON_GetObjectItem>
 80026f4:	4603      	mov	r3, r0
 80026f6:	4950      	ldr	r1, [pc, #320]	; (8002838 <json_input+0xb24>)
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fabf 	bl	8001c7c <cJSON_GetObjectItem>
 80026fe:	66f8      	str	r0, [r7, #108]	; 0x6c
			TYPE = sType->valuestring;
 8002700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	4a3c      	ldr	r2, [pc, #240]	; (80027f8 <json_input+0xae4>)
 8002706:	6013      	str	r3, [r2, #0]
			if(strcmp(TYPE, "DIGITAL") == 0)
 8002708:	4b3b      	ldr	r3, [pc, #236]	; (80027f8 <json_input+0xae4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	494b      	ldr	r1, [pc, #300]	; (800283c <json_input+0xb28>)
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd fd5e 	bl	80001d0 <strcmp>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d14b      	bne.n	80027b2 <json_input+0xa9e>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 800271a:	4939      	ldr	r1, [pc, #228]	; (8002800 <json_input+0xaec>)
 800271c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800271e:	f7ff faad 	bl	8001c7c <cJSON_GetObjectItem>
 8002722:	4603      	mov	r3, r0
 8002724:	4946      	ldr	r1, [pc, #280]	; (8002840 <json_input+0xb2c>)
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff faa8 	bl	8001c7c <cJSON_GetObjectItem>
 800272c:	6638      	str	r0, [r7, #96]	; 0x60
				DigitalParamMass = s1->valuestring;
 800272e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	4a44      	ldr	r2, [pc, #272]	; (8002844 <json_input+0xb30>)
 8002734:	6013      	str	r3, [r2, #0]
				test = parseValue(DigitalParamMass);
 8002736:	4b43      	ldr	r3, [pc, #268]	; (8002844 <json_input+0xb30>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff fabc 	bl	8001cb8 <parseValue>
 8002740:	4602      	mov	r2, r0
 8002742:	4b41      	ldr	r3, [pc, #260]	; (8002848 <json_input+0xb34>)
 8002744:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002746:	2300      	movs	r3, #0
 8002748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800274c:	e012      	b.n	8002774 <json_input+0xa60>
					Status_DIN[i] = (test[i] - 0x30);
 800274e:	4b3e      	ldr	r3, [pc, #248]	; (8002848 <json_input+0xb34>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002756:	4413      	add	r3, r2
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	3b30      	subs	r3, #48	; 0x30
 800275c:	b2d9      	uxtb	r1, r3
 800275e:	4a3b      	ldr	r2, [pc, #236]	; (800284c <json_input+0xb38>)
 8002760:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002764:	4413      	add	r3, r2
 8002766:	460a      	mov	r2, r1
 8002768:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 800276a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800276e:	3301      	adds	r3, #1
 8002770:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002774:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002778:	2b07      	cmp	r3, #7
 800277a:	dde8      	ble.n	800274e <json_input+0xa3a>
				SEND_str("\n");
 800277c:	482b      	ldr	r0, [pc, #172]	; (800282c <json_input+0xb18>)
 800277e:	f000 fa15 	bl	8002bac <SEND_str>
				SEND_str(TYPE);
 8002782:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <json_input+0xae4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fa10 	bl	8002bac <SEND_str>
				SEND_str("\n");
 800278c:	4827      	ldr	r0, [pc, #156]	; (800282c <json_input+0xb18>)
 800278e:	f000 fa0d 	bl	8002bac <SEND_str>
				cJSON_Delete(json);
 8002792:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002794:	f7fe fc92 	bl	80010bc <cJSON_Delete>
				free(stime);
 8002798:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800279a:	f018 f811 	bl	801a7c0 <free>
				free(sInstruction);
 800279e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80027a0:	f018 f80e 	bl	801a7c0 <free>
				free(sType);
 80027a4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80027a6:	f018 f80b 	bl	801a7c0 <free>
				free(s1);
 80027aa:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80027ac:	f018 f808 	bl	801a7c0 <free>
}
 80027b0:	e0d7      	b.n	8002962 <json_input+0xc4e>
			else if(strcmp(TYPE, "ANALOG") == 0)
 80027b2:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <json_input+0xae4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4926      	ldr	r1, [pc, #152]	; (8002850 <json_input+0xb3c>)
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd fd09 	bl	80001d0 <strcmp>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d17b      	bne.n	80028bc <json_input+0xba8>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 80027c4:	490e      	ldr	r1, [pc, #56]	; (8002800 <json_input+0xaec>)
 80027c6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80027c8:	f7ff fa58 	bl	8001c7c <cJSON_GetObjectItem>
 80027cc:	4603      	mov	r3, r0
 80027ce:	491c      	ldr	r1, [pc, #112]	; (8002840 <json_input+0xb2c>)
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fa53 	bl	8001c7c <cJSON_GetObjectItem>
 80027d6:	6678      	str	r0, [r7, #100]	; 0x64
				AnalogParamMass = s1->valuestring;
 80027d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	4a1d      	ldr	r2, [pc, #116]	; (8002854 <json_input+0xb40>)
 80027de:	6013      	str	r3, [r2, #0]
				test = parseValue(AnalogParamMass);
 80027e0:	4b1c      	ldr	r3, [pc, #112]	; (8002854 <json_input+0xb40>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fa67 	bl	8001cb8 <parseValue>
 80027ea:	4602      	mov	r2, r0
 80027ec:	4b16      	ldr	r3, [pc, #88]	; (8002848 <json_input+0xb34>)
 80027ee:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 80027f0:	2300      	movs	r3, #0
 80027f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027f6:	e042      	b.n	800287e <json_input+0xb6a>
 80027f8:	200007fc 	.word	0x200007fc
 80027fc:	0801fb0c 	.word	0x0801fb0c
 8002800:	0801fa1c 	.word	0x0801fa1c
 8002804:	0801fa78 	.word	0x0801fa78
 8002808:	0801fa80 	.word	0x0801fa80
 800280c:	0801fa8c 	.word	0x0801fa8c
 8002810:	0801fb18 	.word	0x0801fb18
 8002814:	0801fa50 	.word	0x0801fa50
 8002818:	2000084c 	.word	0x2000084c
 800281c:	2000081c 	.word	0x2000081c
 8002820:	2000083c 	.word	0x2000083c
 8002824:	20000834 	.word	0x20000834
 8002828:	20000818 	.word	0x20000818
 800282c:	0801fa58 	.word	0x0801fa58
 8002830:	20000850 	.word	0x20000850
 8002834:	0801fb20 	.word	0x0801fb20
 8002838:	0801fa24 	.word	0x0801fa24
 800283c:	0801fb30 	.word	0x0801fb30
 8002840:	0801fb38 	.word	0x0801fb38
 8002844:	20000800 	.word	0x20000800
 8002848:	20001130 	.word	0x20001130
 800284c:	20000494 	.word	0x20000494
 8002850:	0801fb3c 	.word	0x0801fb3c
 8002854:	20000828 	.word	0x20000828
					Status_AIN[i] = (test[i] - 0x30);
 8002858:	4b45      	ldr	r3, [pc, #276]	; (8002970 <json_input+0xc5c>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002860:	4413      	add	r3, r2
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	3b30      	subs	r3, #48	; 0x30
 8002866:	b2d9      	uxtb	r1, r3
 8002868:	4a42      	ldr	r2, [pc, #264]	; (8002974 <json_input+0xc60>)
 800286a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800286e:	4413      	add	r3, r2
 8002870:	460a      	mov	r2, r1
 8002872:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002874:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002878:	3301      	adds	r3, #1
 800287a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800287e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002882:	2b07      	cmp	r3, #7
 8002884:	dde8      	ble.n	8002858 <json_input+0xb44>
				SEND_str("\n");
 8002886:	483c      	ldr	r0, [pc, #240]	; (8002978 <json_input+0xc64>)
 8002888:	f000 f990 	bl	8002bac <SEND_str>
				SEND_str(TYPE);
 800288c:	4b3b      	ldr	r3, [pc, #236]	; (800297c <json_input+0xc68>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f000 f98b 	bl	8002bac <SEND_str>
				SEND_str("\n");
 8002896:	4838      	ldr	r0, [pc, #224]	; (8002978 <json_input+0xc64>)
 8002898:	f000 f988 	bl	8002bac <SEND_str>
				cJSON_Delete(json);
 800289c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800289e:	f7fe fc0d 	bl	80010bc <cJSON_Delete>
				free(stime);
 80028a2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80028a4:	f017 ff8c 	bl	801a7c0 <free>
				free(sInstruction);
 80028a8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80028aa:	f017 ff89 	bl	801a7c0 <free>
				free(sType);
 80028ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80028b0:	f017 ff86 	bl	801a7c0 <free>
				free(s1);
 80028b4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80028b6:	f017 ff83 	bl	801a7c0 <free>
}
 80028ba:	e052      	b.n	8002962 <json_input+0xc4e>
			else if(strcmp(TYPE, "OCD") == 0)
 80028bc:	4b2f      	ldr	r3, [pc, #188]	; (800297c <json_input+0xc68>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	492f      	ldr	r1, [pc, #188]	; (8002980 <json_input+0xc6c>)
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fd fc84 	bl	80001d0 <strcmp>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d149      	bne.n	8002962 <json_input+0xc4e>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 80028ce:	492d      	ldr	r1, [pc, #180]	; (8002984 <json_input+0xc70>)
 80028d0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80028d2:	f7ff f9d3 	bl	8001c7c <cJSON_GetObjectItem>
 80028d6:	4603      	mov	r3, r0
 80028d8:	492b      	ldr	r1, [pc, #172]	; (8002988 <json_input+0xc74>)
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff f9ce 	bl	8001c7c <cJSON_GetObjectItem>
 80028e0:	66b8      	str	r0, [r7, #104]	; 0x68
				OpenCollectorDrainParamMass = s1->valuestring;
 80028e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	4a29      	ldr	r2, [pc, #164]	; (800298c <json_input+0xc78>)
 80028e8:	6013      	str	r3, [r2, #0]
				test = parseValue(OpenCollectorDrainParamMass);
 80028ea:	4b28      	ldr	r3, [pc, #160]	; (800298c <json_input+0xc78>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff f9e2 	bl	8001cb8 <parseValue>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4b1e      	ldr	r3, [pc, #120]	; (8002970 <json_input+0xc5c>)
 80028f8:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 80028fa:	2300      	movs	r3, #0
 80028fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028fe:	e00e      	b.n	800291e <json_input+0xc0a>
					Status_OCD[i] = (test[i] - 0x30);
 8002900:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <json_input+0xc5c>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002906:	4413      	add	r3, r2
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	3b30      	subs	r3, #48	; 0x30
 800290c:	b2d9      	uxtb	r1, r3
 800290e:	4a20      	ldr	r2, [pc, #128]	; (8002990 <json_input+0xc7c>)
 8002910:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002912:	4413      	add	r3, r2
 8002914:	460a      	mov	r2, r1
 8002916:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002918:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800291a:	3301      	adds	r3, #1
 800291c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800291e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002920:	2b07      	cmp	r3, #7
 8002922:	dded      	ble.n	8002900 <json_input+0xbec>
				ReWriteOCD();
 8002924:	f005 f996 	bl	8007c54 <ReWriteOCD>
				cJSON_Delete(json);
 8002928:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800292a:	f7fe fbc7 	bl	80010bc <cJSON_Delete>
				free(stime);
 800292e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002930:	f017 ff46 	bl	801a7c0 <free>
				free(sInstruction);
 8002934:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002936:	f017 ff43 	bl	801a7c0 <free>
				free(sType);
 800293a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800293c:	f017 ff40 	bl	801a7c0 <free>
				free(s1);
 8002940:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002942:	f017 ff3d 	bl	801a7c0 <free>
}
 8002946:	e00c      	b.n	8002962 <json_input+0xc4e>
			free(stime);
 8002948:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800294a:	f017 ff39 	bl	801a7c0 <free>
			free(sInstruction);
 800294e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002950:	f017 ff36 	bl	801a7c0 <free>
}
 8002954:	e005      	b.n	8002962 <json_input+0xc4e>
		cJSON_Delete(json);
 8002956:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002958:	f7fe fbb0 	bl	80010bc <cJSON_Delete>
		free(stime);
 800295c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800295e:	f017 ff2f 	bl	801a7c0 <free>
}
 8002962:	bf00      	nop
 8002964:	378c      	adds	r7, #140	; 0x8c
 8002966:	46bd      	mov	sp, r7
 8002968:	ecbd 8b04 	vpop	{d8-d9}
 800296c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800296e:	bf00      	nop
 8002970:	20001130 	.word	0x20001130
 8002974:	2000048c 	.word	0x2000048c
 8002978:	0801fa58 	.word	0x0801fa58
 800297c:	200007fc 	.word	0x200007fc
 8002980:	0801fb44 	.word	0x0801fb44
 8002984:	0801fa1c 	.word	0x0801fa1c
 8002988:	0801fb38 	.word	0x0801fb38
 800298c:	2000085c 	.word	0x2000085c
 8002990:	2000049c 	.word	0x2000049c

08002994 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800299a:	463b      	mov	r3, r7
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80029a6:	4b37      	ldr	r3, [pc, #220]	; (8002a84 <MX_ADC1_Init+0xf0>)
 80029a8:	4a37      	ldr	r2, [pc, #220]	; (8002a88 <MX_ADC1_Init+0xf4>)
 80029aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80029ac:	4b35      	ldr	r3, [pc, #212]	; (8002a84 <MX_ADC1_Init+0xf0>)
 80029ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029b4:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <MX_ADC1_Init+0xf0>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80029ba:	4b32      	ldr	r3, [pc, #200]	; (8002a84 <MX_ADC1_Init+0xf0>)
 80029bc:	2201      	movs	r2, #1
 80029be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80029c0:	4b30      	ldr	r3, [pc, #192]	; (8002a84 <MX_ADC1_Init+0xf0>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029c6:	4b2f      	ldr	r3, [pc, #188]	; (8002a84 <MX_ADC1_Init+0xf0>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80029ce:	4b2d      	ldr	r3, [pc, #180]	; (8002a84 <MX_ADC1_Init+0xf0>)
 80029d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 80029d6:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <MX_ADC1_Init+0xf0>)
 80029d8:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 80029dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029de:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <MX_ADC1_Init+0xf0>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80029e4:	4b27      	ldr	r3, [pc, #156]	; (8002a84 <MX_ADC1_Init+0xf0>)
 80029e6:	2204      	movs	r2, #4
 80029e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80029ea:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <MX_ADC1_Init+0xf0>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029f2:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <MX_ADC1_Init+0xf0>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029f8:	4822      	ldr	r0, [pc, #136]	; (8002a84 <MX_ADC1_Init+0xf0>)
 80029fa:	f006 fd69 	bl	80094d0 <HAL_ADC_Init>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002a04:	f000 fd14 	bl	8003430 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a14:	463b      	mov	r3, r7
 8002a16:	4619      	mov	r1, r3
 8002a18:	481a      	ldr	r0, [pc, #104]	; (8002a84 <MX_ADC1_Init+0xf0>)
 8002a1a:	f006 fea3 	bl	8009764 <HAL_ADC_ConfigChannel>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002a24:	f000 fd04 	bl	8003430 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002a28:	2304      	movs	r3, #4
 8002a2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a30:	463b      	mov	r3, r7
 8002a32:	4619      	mov	r1, r3
 8002a34:	4813      	ldr	r0, [pc, #76]	; (8002a84 <MX_ADC1_Init+0xf0>)
 8002a36:	f006 fe95 	bl	8009764 <HAL_ADC_ConfigChannel>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002a40:	f000 fcf6 	bl	8003430 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002a44:	2305      	movs	r3, #5
 8002a46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a4c:	463b      	mov	r3, r7
 8002a4e:	4619      	mov	r1, r3
 8002a50:	480c      	ldr	r0, [pc, #48]	; (8002a84 <MX_ADC1_Init+0xf0>)
 8002a52:	f006 fe87 	bl	8009764 <HAL_ADC_ConfigChannel>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8002a5c:	f000 fce8 	bl	8003430 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002a60:	2306      	movs	r3, #6
 8002a62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002a64:	2304      	movs	r3, #4
 8002a66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a68:	463b      	mov	r3, r7
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4805      	ldr	r0, [pc, #20]	; (8002a84 <MX_ADC1_Init+0xf0>)
 8002a6e:	f006 fe79 	bl	8009764 <HAL_ADC_ConfigChannel>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8002a78:	f000 fcda 	bl	8003430 <Error_Handler>
  }

}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20000860 	.word	0x20000860
 8002a88:	40012000 	.word	0x40012000

08002a8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	; 0x28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a2f      	ldr	r2, [pc, #188]	; (8002b68 <HAL_ADC_MspInit+0xdc>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d157      	bne.n	8002b5e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	4b2e      	ldr	r3, [pc, #184]	; (8002b6c <HAL_ADC_MspInit+0xe0>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	4a2d      	ldr	r2, [pc, #180]	; (8002b6c <HAL_ADC_MspInit+0xe0>)
 8002ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002abc:	6453      	str	r3, [r2, #68]	; 0x44
 8002abe:	4b2b      	ldr	r3, [pc, #172]	; (8002b6c <HAL_ADC_MspInit+0xe0>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <HAL_ADC_MspInit+0xe0>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a26      	ldr	r2, [pc, #152]	; (8002b6c <HAL_ADC_MspInit+0xe0>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <HAL_ADC_MspInit+0xe0>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = AIN0_Pin|AIN1_Pin|AIN2_Pin|AIN3_Pin;
 8002ae6:	2378      	movs	r3, #120	; 0x78
 8002ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aea:	2303      	movs	r3, #3
 8002aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af2:	f107 0314 	add.w	r3, r7, #20
 8002af6:	4619      	mov	r1, r3
 8002af8:	481d      	ldr	r0, [pc, #116]	; (8002b70 <HAL_ADC_MspInit+0xe4>)
 8002afa:	f008 fde7 	bl	800b6cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002afe:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <HAL_ADC_MspInit+0xe8>)
 8002b00:	4a1d      	ldr	r2, [pc, #116]	; (8002b78 <HAL_ADC_MspInit+0xec>)
 8002b02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002b04:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <HAL_ADC_MspInit+0xe8>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b0a:	4b1a      	ldr	r3, [pc, #104]	; (8002b74 <HAL_ADC_MspInit+0xe8>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b10:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <HAL_ADC_MspInit+0xe8>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b16:	4b17      	ldr	r3, [pc, #92]	; (8002b74 <HAL_ADC_MspInit+0xe8>)
 8002b18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b1e:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <HAL_ADC_MspInit+0xe8>)
 8002b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b26:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <HAL_ADC_MspInit+0xe8>)
 8002b28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <HAL_ADC_MspInit+0xe8>)
 8002b30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b34:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002b36:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <HAL_ADC_MspInit+0xe8>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b3c:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <HAL_ADC_MspInit+0xe8>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b42:	480c      	ldr	r0, [pc, #48]	; (8002b74 <HAL_ADC_MspInit+0xe8>)
 8002b44:	f007 f990 	bl	8009e68 <HAL_DMA_Init>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002b4e:	f000 fc6f 	bl	8003430 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <HAL_ADC_MspInit+0xe8>)
 8002b56:	639a      	str	r2, [r3, #56]	; 0x38
 8002b58:	4a06      	ldr	r2, [pc, #24]	; (8002b74 <HAL_ADC_MspInit+0xe8>)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002b5e:	bf00      	nop
 8002b60:	3728      	adds	r7, #40	; 0x28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40012000 	.word	0x40012000
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40020000 	.word	0x40020000
 8002b74:	200008a8 	.word	0x200008a8
 8002b78:	40026410 	.word	0x40026410

08002b7c <USART_Tx>:
char DBG_str[DBG_RX_BUFFER_SIZE] = {0,};

//Функция передачи байта по USART3
//Принимает байт
void USART_Tx(unsigned char Data)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	71fb      	strb	r3, [r7, #7]
	while(!(USART3->SR & USART_SR_TC));
 8002b86:	bf00      	nop
 8002b88:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <USART_Tx+0x2c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f9      	beq.n	8002b88 <USART_Tx+0xc>
	USART3->DR = Data;
 8002b94:	4a04      	ldr	r2, [pc, #16]	; (8002ba8 <USART_Tx+0x2c>)
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	6053      	str	r3, [r2, #4]
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40004800 	.word	0x40004800

08002bac <SEND_str>:
//Функция отправки сткроки
//Принимает строку для отправки
void SEND_str(char * string)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8002bb8:	e009      	b.n	8002bce <SEND_str+0x22>
	{
		USART_Tx(string[i]);
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ffda 	bl	8002b7c <USART_Tx>
		i++;
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1ef      	bne.n	8002bba <SEND_str+0xe>
	}
}
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <DEBUG_main>:
//Функция для отладки через COM порт
void DEBUG_main(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
	if(dbg_available())
 8002bea:	f001 fba7 	bl	800433c <dbg_available>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80ef 	beq.w	8002dd4 <DEBUG_main+0x1f0>
	{
		uint16_t i = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	80fb      	strh	r3, [r7, #6]
		uint8_t fdbg = 1;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	717b      	strb	r3, [r7, #5]
		memset(DBG_buf, 0, DBG_RX_BUFFER_SIZE);
 8002bfe:	2240      	movs	r2, #64	; 0x40
 8002c00:	2100      	movs	r1, #0
 8002c02:	4876      	ldr	r0, [pc, #472]	; (8002ddc <DEBUG_main+0x1f8>)
 8002c04:	f017 fe29 	bl	801a85a <memset>
		HAL_Delay(50);
 8002c08:	2032      	movs	r0, #50	; 0x32
 8002c0a:	f006 fc3f 	bl	800948c <HAL_Delay>

		while(dbg_available())
 8002c0e:	e010      	b.n	8002c32 <DEBUG_main+0x4e>
		{
			DBG_buf[i++] = dbg_read();
 8002c10:	f001 fbac 	bl	800436c <dbg_read>
 8002c14:	4603      	mov	r3, r0
 8002c16:	4619      	mov	r1, r3
 8002c18:	88fb      	ldrh	r3, [r7, #6]
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	80fa      	strh	r2, [r7, #6]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	b2c9      	uxtb	r1, r1
 8002c22:	4b6e      	ldr	r3, [pc, #440]	; (8002ddc <DEBUG_main+0x1f8>)
 8002c24:	5499      	strb	r1, [r3, r2]
			if(i > DBG_RX_BUFFER_SIZE - 1)
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	2b3f      	cmp	r3, #63	; 0x3f
 8002c2a:	d808      	bhi.n	8002c3e <DEBUG_main+0x5a>
				break;
			HAL_Delay(1);
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	f006 fc2d 	bl	800948c <HAL_Delay>
		while(dbg_available())
 8002c32:	f001 fb83 	bl	800433c <dbg_available>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1e9      	bne.n	8002c10 <DEBUG_main+0x2c>
 8002c3c:	e000      	b.n	8002c40 <DEBUG_main+0x5c>
				break;
 8002c3e:	bf00      	nop
		}
		clear_string(DBG_buf);
 8002c40:	4866      	ldr	r0, [pc, #408]	; (8002ddc <DEBUG_main+0x1f8>)
 8002c42:	f004 ffc7 	bl	8007bd4 <clear_string>
		if(strstr(DBG_buf, "test") != NULL)
 8002c46:	4966      	ldr	r1, [pc, #408]	; (8002de0 <DEBUG_main+0x1fc>)
 8002c48:	4864      	ldr	r0, [pc, #400]	; (8002ddc <DEBUG_main+0x1f8>)
 8002c4a:	f018 fbd5 	bl	801b3f8 <strstr>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <DEBUG_main+0x78>
		{
			SEND_str("respone\n");
 8002c54:	4863      	ldr	r0, [pc, #396]	; (8002de4 <DEBUG_main+0x200>)
 8002c56:	f7ff ffa9 	bl	8002bac <SEND_str>
 8002c5a:	e0b2      	b.n	8002dc2 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "AIN") != NULL)
 8002c5c:	4962      	ldr	r1, [pc, #392]	; (8002de8 <DEBUG_main+0x204>)
 8002c5e:	485f      	ldr	r0, [pc, #380]	; (8002ddc <DEBUG_main+0x1f8>)
 8002c60:	f018 fbca 	bl	801b3f8 <strstr>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <DEBUG_main+0x8e>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"ANALOG\",\"SET\":\"[1,1,0,0,1,1,0,0]\"},\"TIME\":\"1122334455\"}");
 8002c6a:	4860      	ldr	r0, [pc, #384]	; (8002dec <DEBUG_main+0x208>)
 8002c6c:	f7ff f852 	bl	8001d14 <json_input>
 8002c70:	e0a7      	b.n	8002dc2 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "DIN") != NULL)
 8002c72:	495f      	ldr	r1, [pc, #380]	; (8002df0 <DEBUG_main+0x20c>)
 8002c74:	4859      	ldr	r0, [pc, #356]	; (8002ddc <DEBUG_main+0x1f8>)
 8002c76:	f018 fbbf 	bl	801b3f8 <strstr>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <DEBUG_main+0xa4>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"DIGITAL\",\"SET\":\"[0,0,1,1,0,0,1,1]\"},\"TIME\":\"1122334455\"}");
 8002c80:	485c      	ldr	r0, [pc, #368]	; (8002df4 <DEBUG_main+0x210>)
 8002c82:	f7ff f847 	bl	8001d14 <json_input>
 8002c86:	e09c      	b.n	8002dc2 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "OCD") != NULL)
 8002c88:	495b      	ldr	r1, [pc, #364]	; (8002df8 <DEBUG_main+0x214>)
 8002c8a:	4854      	ldr	r0, [pc, #336]	; (8002ddc <DEBUG_main+0x1f8>)
 8002c8c:	f018 fbb4 	bl	801b3f8 <strstr>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <DEBUG_main+0xba>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"OCD\",\"SET\":\"[0,1,1,0,0,1,1,0]\"},\"TIME\":\"1122334455\"}");
 8002c96:	4859      	ldr	r0, [pc, #356]	; (8002dfc <DEBUG_main+0x218>)
 8002c98:	f7ff f83c 	bl	8001d14 <json_input>
 8002c9c:	e091      	b.n	8002dc2 <DEBUG_main+0x1de>
		}
		//------------------------------------------------Digital-----------------------------------------------
		else if(strstr(DBG_buf, "SP1") != NULL)
 8002c9e:	4958      	ldr	r1, [pc, #352]	; (8002e00 <DEBUG_main+0x21c>)
 8002ca0:	484e      	ldr	r0, [pc, #312]	; (8002ddc <DEBUG_main+0x1f8>)
 8002ca2:	f018 fba9 	bl	801b3f8 <strstr>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <DEBUG_main+0xd0>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_DIDO\",\"D_IN\":\"VHOD1\",\"VAR_IN\":\"0\",\"D_OUT\":\"VIHOD2\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002cac:	4855      	ldr	r0, [pc, #340]	; (8002e04 <DEBUG_main+0x220>)
 8002cae:	f7ff f831 	bl	8001d14 <json_input>
 8002cb2:	e086      	b.n	8002dc2 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "SP2") != NULL)
 8002cb4:	4954      	ldr	r1, [pc, #336]	; (8002e08 <DEBUG_main+0x224>)
 8002cb6:	4849      	ldr	r0, [pc, #292]	; (8002ddc <DEBUG_main+0x1f8>)
 8002cb8:	f018 fb9e 	bl	801b3f8 <strstr>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <DEBUG_main+0xe6>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_DIDO\",\"D_IN\":\"VHOD2\",\"VAR_IN\":\"0\",\"D_OUT\":\"VIHOD8\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002cc2:	4852      	ldr	r0, [pc, #328]	; (8002e0c <DEBUG_main+0x228>)
 8002cc4:	f7ff f826 	bl	8001d14 <json_input>
 8002cc8:	e07b      	b.n	8002dc2 <DEBUG_main+0x1de>
		}
		//----------------------------------------------End_Digital---------------------------------------------
		//------------------------------------------------Analog------------------------------------------------
		else if(strstr(DBG_buf, "SP3") != NULL)
 8002cca:	4951      	ldr	r1, [pc, #324]	; (8002e10 <DEBUG_main+0x22c>)
 8002ccc:	4843      	ldr	r0, [pc, #268]	; (8002ddc <DEBUG_main+0x1f8>)
 8002cce:	f018 fb93 	bl	801b3f8 <strstr>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <DEBUG_main+0xfc>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_VAIDO\",\"A_IN\":\"VHOD1\",\"RANGE_LOW\":\"2.5\",\"RANGE_HIGH\":\"3.5\",\"D_OUT\":\"VIHOD3\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002cd8:	484e      	ldr	r0, [pc, #312]	; (8002e14 <DEBUG_main+0x230>)
 8002cda:	f7ff f81b 	bl	8001d14 <json_input>
 8002cde:	e070      	b.n	8002dc2 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "SPVol") != NULL)		//Voltage
 8002ce0:	494d      	ldr	r1, [pc, #308]	; (8002e18 <DEBUG_main+0x234>)
 8002ce2:	483e      	ldr	r0, [pc, #248]	; (8002ddc <DEBUG_main+0x1f8>)
 8002ce4:	f018 fb88 	bl	801b3f8 <strstr>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <DEBUG_main+0x112>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_VAIDO\",\"A_IN\":\"VHOD1\",\"RANGE_LOW\":\"1.5\",\"RANGE_HIGH\":\"2\",\"D_OUT\":\"VIHOD4\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002cee:	484b      	ldr	r0, [pc, #300]	; (8002e1c <DEBUG_main+0x238>)
 8002cf0:	f7ff f810 	bl	8001d14 <json_input>
 8002cf4:	e065      	b.n	8002dc2 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "SPCur") != NULL)	//Current
 8002cf6:	494a      	ldr	r1, [pc, #296]	; (8002e20 <DEBUG_main+0x23c>)
 8002cf8:	4838      	ldr	r0, [pc, #224]	; (8002ddc <DEBUG_main+0x1f8>)
 8002cfa:	f018 fb7d 	bl	801b3f8 <strstr>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <DEBUG_main+0x128>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_CAIDO\",\"A_IN\":\"VHOD1\",\"RANGE_LOW\":\"0.006\",\"RANGE_HIGH\":\"0.008\",\"D_OUT\":\"VIHOD4\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002d04:	4847      	ldr	r0, [pc, #284]	; (8002e24 <DEBUG_main+0x240>)
 8002d06:	f7ff f805 	bl	8001d14 <json_input>
 8002d0a:	e05a      	b.n	8002dc2 <DEBUG_main+0x1de>
		}
		//----------------------------------------------End_Analog----------------------------------------------
		//--------------------------------------------------PWM-------------------------------------------------
		else if(strstr(DBG_buf, "SP5") != NULL)
 8002d0c:	4946      	ldr	r1, [pc, #280]	; (8002e28 <DEBUG_main+0x244>)
 8002d0e:	4833      	ldr	r0, [pc, #204]	; (8002ddc <DEBUG_main+0x1f8>)
 8002d10:	f018 fb72 	bl	801b3f8 <strstr>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <DEBUG_main+0x13e>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM1\",\"D_CYCLE\":\"10\"},\"TIME\":\"1122334455\"}");
 8002d1a:	4844      	ldr	r0, [pc, #272]	; (8002e2c <DEBUG_main+0x248>)
 8002d1c:	f7fe fffa 	bl	8001d14 <json_input>
 8002d20:	e04f      	b.n	8002dc2 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "SP6") != NULL)
 8002d22:	4943      	ldr	r1, [pc, #268]	; (8002e30 <DEBUG_main+0x24c>)
 8002d24:	482d      	ldr	r0, [pc, #180]	; (8002ddc <DEBUG_main+0x1f8>)
 8002d26:	f018 fb67 	bl	801b3f8 <strstr>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <DEBUG_main+0x154>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM2\",\"D_CYCLE\":\"25\"},\"TIME\":\"1122334455\"}");
 8002d30:	4840      	ldr	r0, [pc, #256]	; (8002e34 <DEBUG_main+0x250>)
 8002d32:	f7fe ffef 	bl	8001d14 <json_input>
 8002d36:	e044      	b.n	8002dc2 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "SP7") != NULL)
 8002d38:	493f      	ldr	r1, [pc, #252]	; (8002e38 <DEBUG_main+0x254>)
 8002d3a:	4828      	ldr	r0, [pc, #160]	; (8002ddc <DEBUG_main+0x1f8>)
 8002d3c:	f018 fb5c 	bl	801b3f8 <strstr>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <DEBUG_main+0x16a>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM3\",\"D_CYCLE\":\"50\"},\"TIME\":\"1122334455\"}");
 8002d46:	483d      	ldr	r0, [pc, #244]	; (8002e3c <DEBUG_main+0x258>)
 8002d48:	f7fe ffe4 	bl	8001d14 <json_input>
 8002d4c:	e039      	b.n	8002dc2 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "SP8") != NULL)
 8002d4e:	493c      	ldr	r1, [pc, #240]	; (8002e40 <DEBUG_main+0x25c>)
 8002d50:	4822      	ldr	r0, [pc, #136]	; (8002ddc <DEBUG_main+0x1f8>)
 8002d52:	f018 fb51 	bl	801b3f8 <strstr>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <DEBUG_main+0x180>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM4\",\"D_CYCLE\":\"90\"},\"TIME\":\"1122334455\"}");
 8002d5c:	4839      	ldr	r0, [pc, #228]	; (8002e44 <DEBUG_main+0x260>)
 8002d5e:	f7fe ffd9 	bl	8001d14 <json_input>
 8002d62:	e02e      	b.n	8002dc2 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "SP9") != NULL)
 8002d64:	4938      	ldr	r1, [pc, #224]	; (8002e48 <DEBUG_main+0x264>)
 8002d66:	481d      	ldr	r0, [pc, #116]	; (8002ddc <DEBUG_main+0x1f8>)
 8002d68:	f018 fb46 	bl	801b3f8 <strstr>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <DEBUG_main+0x196>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM1\",\"D_CYCLE\":\"50\"},\"TIME\":\"1122334455\"}");
 8002d72:	4836      	ldr	r0, [pc, #216]	; (8002e4c <DEBUG_main+0x268>)
 8002d74:	f7fe ffce 	bl	8001d14 <json_input>
 8002d78:	e023      	b.n	8002dc2 <DEBUG_main+0x1de>
		}
		//------------------------------------------------End_PWM-----------------------------------------------
		//----------------------------------------------TEMPERATURE---------------------------------------------
		else if(strstr(DBG_buf, "TP1") != NULL)
 8002d7a:	4935      	ldr	r1, [pc, #212]	; (8002e50 <DEBUG_main+0x26c>)
 8002d7c:	4817      	ldr	r0, [pc, #92]	; (8002ddc <DEBUG_main+0x1f8>)
 8002d7e:	f018 fb3b 	bl	801b3f8 <strstr>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <DEBUG_main+0x1ac>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_TEMP_PROFILE\",\"ROM_RAW\":\"28BF1E930C000031\",\"RANGE_TEMP_LOW\":\"-128\",\"RANGE_TEMP_HIGH\":\"-126\",\"D_OUT\":\"VIHOD3\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002d88:	4832      	ldr	r0, [pc, #200]	; (8002e54 <DEBUG_main+0x270>)
 8002d8a:	f7fe ffc3 	bl	8001d14 <json_input>
 8002d8e:	e018      	b.n	8002dc2 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "TP2") != NULL)
 8002d90:	4931      	ldr	r1, [pc, #196]	; (8002e58 <DEBUG_main+0x274>)
 8002d92:	4812      	ldr	r0, [pc, #72]	; (8002ddc <DEBUG_main+0x1f8>)
 8002d94:	f018 fb30 	bl	801b3f8 <strstr>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <DEBUG_main+0x1c2>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_TEMP_PROFILE\",\"ROM_RAW\":\"28790E950C000069\",\"RANGE_TEMP_LOW\":\"+28\",\"RANGE_TEMP_HIGH\":\"+50\",\"D_OUT\":\"VIHOD4\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002d9e:	482f      	ldr	r0, [pc, #188]	; (8002e5c <DEBUG_main+0x278>)
 8002da0:	f7fe ffb8 	bl	8001d14 <json_input>
 8002da4:	e00d      	b.n	8002dc2 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "READ_SD") != NULL)
 8002da6:	492e      	ldr	r1, [pc, #184]	; (8002e60 <DEBUG_main+0x27c>)
 8002da8:	480c      	ldr	r0, [pc, #48]	; (8002ddc <DEBUG_main+0x1f8>)
 8002daa:	f018 fb25 	bl	801b3f8 <strstr>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <DEBUG_main+0x1d6>
		{
			my_read_file();
 8002db4:	f003 fe0c 	bl	80069d0 <my_read_file>
 8002db8:	e003      	b.n	8002dc2 <DEBUG_main+0x1de>
		}
		else if(strstr(DBG_buf, "WRITE_SD") != NULL)
 8002dba:	492a      	ldr	r1, [pc, #168]	; (8002e64 <DEBUG_main+0x280>)
 8002dbc:	4807      	ldr	r0, [pc, #28]	; (8002ddc <DEBUG_main+0x1f8>)
 8002dbe:	f018 fb1b 	bl	801b3f8 <strstr>
//			snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s", DBG_buf);
//			SEND_str(DBG_str);
//			json_input(DBG_str);
//		}
		//--------------------------------------------End_TEMPERATURE-------------------------------------------
		if(fdbg)
 8002dc2:	797b      	ldrb	r3, [r7, #5]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d005      	beq.n	8002dd4 <DEBUG_main+0x1f0>
		{
			snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s\n", DBG_buf);
 8002dc8:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <DEBUG_main+0x1f8>)
 8002dca:	4a27      	ldr	r2, [pc, #156]	; (8002e68 <DEBUG_main+0x284>)
 8002dcc:	2140      	movs	r1, #64	; 0x40
 8002dce:	4827      	ldr	r0, [pc, #156]	; (8002e6c <DEBUG_main+0x288>)
 8002dd0:	f018 faac 	bl	801b32c <sniprintf>

			//json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"DIGITAL\",\"SET\":\"[0,1,1,0,0,0,0,1]\"},\"TIME\":\"1122334455\"}");
		}
	}
}
 8002dd4:	bf00      	nop
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20000280 	.word	0x20000280
 8002de0:	0801fb48 	.word	0x0801fb48
 8002de4:	0801fb50 	.word	0x0801fb50
 8002de8:	0801fb5c 	.word	0x0801fb5c
 8002dec:	0801fb60 	.word	0x0801fb60
 8002df0:	0801fbcc 	.word	0x0801fbcc
 8002df4:	0801fbd0 	.word	0x0801fbd0
 8002df8:	0801fc40 	.word	0x0801fc40
 8002dfc:	0801fc44 	.word	0x0801fc44
 8002e00:	0801fcb0 	.word	0x0801fcb0
 8002e04:	0801fcb4 	.word	0x0801fcb4
 8002e08:	0801fd40 	.word	0x0801fd40
 8002e0c:	0801fd44 	.word	0x0801fd44
 8002e10:	0801fdd0 	.word	0x0801fdd0
 8002e14:	0801fdd4 	.word	0x0801fdd4
 8002e18:	0801fe7c 	.word	0x0801fe7c
 8002e1c:	0801fe84 	.word	0x0801fe84
 8002e20:	0801ff28 	.word	0x0801ff28
 8002e24:	0801ff30 	.word	0x0801ff30
 8002e28:	0801ffdc 	.word	0x0801ffdc
 8002e2c:	0801ffe0 	.word	0x0801ffe0
 8002e30:	08020050 	.word	0x08020050
 8002e34:	08020054 	.word	0x08020054
 8002e38:	080200c4 	.word	0x080200c4
 8002e3c:	080200c8 	.word	0x080200c8
 8002e40:	08020138 	.word	0x08020138
 8002e44:	0802013c 	.word	0x0802013c
 8002e48:	080201ac 	.word	0x080201ac
 8002e4c:	080201b0 	.word	0x080201b0
 8002e50:	08020220 	.word	0x08020220
 8002e54:	08020224 	.word	0x08020224
 8002e58:	080202ec 	.word	0x080202ec
 8002e5c:	080202f0 	.word	0x080202f0
 8002e60:	080203b4 	.word	0x080203b4
 8002e64:	080203bc 	.word	0x080203bc
 8002e68:	080203c8 	.word	0x080203c8
 8002e6c:	200002c0 	.word	0x200002c0

08002e70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	4b23      	ldr	r3, [pc, #140]	; (8002f08 <MX_DMA_Init+0x98>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	4a22      	ldr	r2, [pc, #136]	; (8002f08 <MX_DMA_Init+0x98>)
 8002e80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b20      	ldr	r3, [pc, #128]	; (8002f08 <MX_DMA_Init+0x98>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	4b1c      	ldr	r3, [pc, #112]	; (8002f08 <MX_DMA_Init+0x98>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	4a1b      	ldr	r2, [pc, #108]	; (8002f08 <MX_DMA_Init+0x98>)
 8002e9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea2:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <MX_DMA_Init+0x98>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	200d      	movs	r0, #13
 8002eb4:	f006 ffae 	bl	8009e14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002eb8:	200d      	movs	r0, #13
 8002eba:	f006 ffc7 	bl	8009e4c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	200f      	movs	r0, #15
 8002ec4:	f006 ffa6 	bl	8009e14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002ec8:	200f      	movs	r0, #15
 8002eca:	f006 ffbf 	bl	8009e4c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	2010      	movs	r0, #16
 8002ed4:	f006 ff9e 	bl	8009e14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002ed8:	2010      	movs	r0, #16
 8002eda:	f006 ffb7 	bl	8009e4c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	202f      	movs	r0, #47	; 0x2f
 8002ee4:	f006 ff96 	bl	8009e14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002ee8:	202f      	movs	r0, #47	; 0x2f
 8002eea:	f006 ffaf 	bl	8009e4c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	2038      	movs	r0, #56	; 0x38
 8002ef4:	f006 ff8e 	bl	8009e14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002ef8:	2038      	movs	r0, #56	; 0x38
 8002efa:	f006 ffa7 	bl	8009e4c <HAL_NVIC_EnableIRQ>

}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40023800 	.word	0x40023800

08002f0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08c      	sub	sp, #48	; 0x30
 8002f10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f12:	f107 031c 	add.w	r3, r7, #28
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	605a      	str	r2, [r3, #4]
 8002f1c:	609a      	str	r2, [r3, #8]
 8002f1e:	60da      	str	r2, [r3, #12]
 8002f20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	61bb      	str	r3, [r7, #24]
 8002f26:	4b8b      	ldr	r3, [pc, #556]	; (8003154 <MX_GPIO_Init+0x248>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	4a8a      	ldr	r2, [pc, #552]	; (8003154 <MX_GPIO_Init+0x248>)
 8002f2c:	f043 0310 	orr.w	r3, r3, #16
 8002f30:	6313      	str	r3, [r2, #48]	; 0x30
 8002f32:	4b88      	ldr	r3, [pc, #544]	; (8003154 <MX_GPIO_Init+0x248>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	f003 0310 	and.w	r3, r3, #16
 8002f3a:	61bb      	str	r3, [r7, #24]
 8002f3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	4b84      	ldr	r3, [pc, #528]	; (8003154 <MX_GPIO_Init+0x248>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	4a83      	ldr	r2, [pc, #524]	; (8003154 <MX_GPIO_Init+0x248>)
 8002f48:	f043 0304 	orr.w	r3, r3, #4
 8002f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4e:	4b81      	ldr	r3, [pc, #516]	; (8003154 <MX_GPIO_Init+0x248>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	4b7d      	ldr	r3, [pc, #500]	; (8003154 <MX_GPIO_Init+0x248>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	4a7c      	ldr	r2, [pc, #496]	; (8003154 <MX_GPIO_Init+0x248>)
 8002f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f68:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6a:	4b7a      	ldr	r3, [pc, #488]	; (8003154 <MX_GPIO_Init+0x248>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	4b76      	ldr	r3, [pc, #472]	; (8003154 <MX_GPIO_Init+0x248>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	4a75      	ldr	r2, [pc, #468]	; (8003154 <MX_GPIO_Init+0x248>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	6313      	str	r3, [r2, #48]	; 0x30
 8002f86:	4b73      	ldr	r3, [pc, #460]	; (8003154 <MX_GPIO_Init+0x248>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	4b6f      	ldr	r3, [pc, #444]	; (8003154 <MX_GPIO_Init+0x248>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	4a6e      	ldr	r2, [pc, #440]	; (8003154 <MX_GPIO_Init+0x248>)
 8002f9c:	f043 0302 	orr.w	r3, r3, #2
 8002fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa2:	4b6c      	ldr	r3, [pc, #432]	; (8003154 <MX_GPIO_Init+0x248>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	607b      	str	r3, [r7, #4]
 8002fb2:	4b68      	ldr	r3, [pc, #416]	; (8003154 <MX_GPIO_Init+0x248>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	4a67      	ldr	r2, [pc, #412]	; (8003154 <MX_GPIO_Init+0x248>)
 8002fb8:	f043 0308 	orr.w	r3, r3, #8
 8002fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fbe:	4b65      	ldr	r3, [pc, #404]	; (8003154 <MX_GPIO_Init+0x248>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	607b      	str	r3, [r7, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, FLAG_MCU_Pin|CS2__Pin, GPIO_PIN_SET);
 8002fca:	2201      	movs	r2, #1
 8002fcc:	2142      	movs	r1, #66	; 0x42
 8002fce:	4862      	ldr	r0, [pc, #392]	; (8003158 <MX_GPIO_Init+0x24c>)
 8002fd0:	f008 fd2e 	bl	800ba30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRON_GPIO_Port, PWRON_Pin, GPIO_PIN_RESET);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fda:	4860      	ldr	r0, [pc, #384]	; (800315c <MX_GPIO_Init+0x250>)
 8002fdc:	f008 fd28 	bl	800ba30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, GPIO_PIN_RESET);
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	485e      	ldr	r0, [pc, #376]	; (8003160 <MX_GPIO_Init+0x254>)
 8002fe6:	f008 fd23 	bl	800ba30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, O1_Pin|O2_Pin|CS1__Pin, GPIO_PIN_RESET);
 8002fea:	2200      	movs	r2, #0
 8002fec:	2143      	movs	r1, #67	; 0x43
 8002fee:	485d      	ldr	r0, [pc, #372]	; (8003164 <MX_GPIO_Init+0x258>)
 8002ff0:	f008 fd1e 	bl	800ba30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, O3_Pin|O4_Pin|O5_Pin|O6_Pin
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f64f 7181 	movw	r1, #65409	; 0xff81
 8002ffa:	4857      	ldr	r0, [pc, #348]	; (8003158 <MX_GPIO_Init+0x24c>)
 8002ffc:	f008 fd18 	bl	800ba30 <HAL_GPIO_WritePin>
                          |O7_Pin|S2_Pin|S3_Pin|S4_Pin
                          |S1_Pin|WP__Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PKEY_GPIO_Port, PKEY_Pin, GPIO_PIN_SET);
 8003000:	2201      	movs	r2, #1
 8003002:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003006:	4856      	ldr	r0, [pc, #344]	; (8003160 <MX_GPIO_Init+0x254>)
 8003008:	f008 fd12 	bl	800ba30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WR0_Pin|WR1_Pin|PWR1_Pin|RS485_DE_Pin
 800300c:	2200      	movs	r2, #0
 800300e:	219b      	movs	r1, #155	; 0x9b
 8003010:	4855      	ldr	r0, [pc, #340]	; (8003168 <MX_GPIO_Init+0x25c>)
 8003012:	f008 fd0d 	bl	800ba30 <HAL_GPIO_WritePin>
                          |RS485_RE__Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FLAG_MCU_Pin|O3_Pin|O4_Pin|O5_Pin
 8003016:	f64f 73c1 	movw	r3, #65473	; 0xffc1
 800301a:	61fb      	str	r3, [r7, #28]
                          |O6_Pin|O7_Pin|S2_Pin|S3_Pin
                          |S4_Pin|S1_Pin|WP__Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800301c:	2301      	movs	r3, #1
 800301e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003020:	2300      	movs	r3, #0
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003024:	2303      	movs	r3, #3
 8003026:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003028:	f107 031c 	add.w	r3, r7, #28
 800302c:	4619      	mov	r1, r3
 800302e:	484a      	ldr	r0, [pc, #296]	; (8003158 <MX_GPIO_Init+0x24c>)
 8003030:	f008 fb4c 	bl	800b6cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWRON_Pin;
 8003034:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800303a:	2301      	movs	r3, #1
 800303c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303e:	2300      	movs	r3, #0
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003042:	2300      	movs	r3, #0
 8003044:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PWRON_GPIO_Port, &GPIO_InitStruct);
 8003046:	f107 031c 	add.w	r3, r7, #28
 800304a:	4619      	mov	r1, r3
 800304c:	4843      	ldr	r0, [pc, #268]	; (800315c <MX_GPIO_Init+0x250>)
 800304e:	f008 fb3d 	bl	800b6cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS__M_Pin;
 8003052:	2301      	movs	r3, #1
 8003054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003056:	2300      	movs	r3, #0
 8003058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305a:	2300      	movs	r3, #0
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CS__M_GPIO_Port, &GPIO_InitStruct);
 800305e:	f107 031c 	add.w	r3, r7, #28
 8003062:	4619      	mov	r1, r3
 8003064:	483d      	ldr	r0, [pc, #244]	; (800315c <MX_GPIO_Init+0x250>)
 8003066:	f008 fb31 	bl	800b6cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = O0_Pin|PKEY_Pin;
 800306a:	f640 0301 	movw	r3, #2049	; 0x801
 800306e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003070:	2301      	movs	r3, #1
 8003072:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003074:	2300      	movs	r3, #0
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003078:	2303      	movs	r3, #3
 800307a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800307c:	f107 031c 	add.w	r3, r7, #28
 8003080:	4619      	mov	r1, r3
 8003082:	4837      	ldr	r0, [pc, #220]	; (8003160 <MX_GPIO_Init+0x254>)
 8003084:	f008 fb22 	bl	800b6cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = O1_Pin|O2_Pin|CS1__Pin;
 8003088:	2343      	movs	r3, #67	; 0x43
 800308a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800308c:	2301      	movs	r3, #1
 800308e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003090:	2300      	movs	r3, #0
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003094:	2303      	movs	r3, #3
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003098:	f107 031c 	add.w	r3, r7, #28
 800309c:	4619      	mov	r1, r3
 800309e:	4831      	ldr	r0, [pc, #196]	; (8003164 <MX_GPIO_Init+0x258>)
 80030a0:	f008 fb14 	bl	800b6cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = IN7_Pin|IN6_Pin|IN5_Pin|IN4_Pin
 80030a4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80030a8:	61fb      	str	r3, [r7, #28]
                          |IN3_Pin|IN2_Pin|IN1_Pin|IN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80030aa:	4b30      	ldr	r3, [pc, #192]	; (800316c <MX_GPIO_Init+0x260>)
 80030ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030b2:	f107 031c 	add.w	r3, r7, #28
 80030b6:	4619      	mov	r1, r3
 80030b8:	482b      	ldr	r0, [pc, #172]	; (8003168 <MX_GPIO_Init+0x25c>)
 80030ba:	f008 fb07 	bl	800b6cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WR0_Pin;
 80030be:	2301      	movs	r3, #1
 80030c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80030c2:	2311      	movs	r3, #17
 80030c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030ca:	2302      	movs	r3, #2
 80030cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(WR0_GPIO_Port, &GPIO_InitStruct);
 80030ce:	f107 031c 	add.w	r3, r7, #28
 80030d2:	4619      	mov	r1, r3
 80030d4:	4824      	ldr	r0, [pc, #144]	; (8003168 <MX_GPIO_Init+0x25c>)
 80030d6:	f008 faf9 	bl	800b6cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = WR1_Pin|PWR1_Pin|RS485_DE_Pin|RS485_RE__Pin;
 80030da:	239a      	movs	r3, #154	; 0x9a
 80030dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030de:	2301      	movs	r3, #1
 80030e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e6:	2303      	movs	r3, #3
 80030e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030ea:	f107 031c 	add.w	r3, r7, #28
 80030ee:	4619      	mov	r1, r3
 80030f0:	481d      	ldr	r0, [pc, #116]	; (8003168 <MX_GPIO_Init+0x25c>)
 80030f2:	f008 faeb 	bl	800b6cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CD_Pin;
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030fa:	2300      	movs	r3, #0
 80030fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 8003102:	f107 031c 	add.w	r3, r7, #28
 8003106:	4619      	mov	r1, r3
 8003108:	4816      	ldr	r0, [pc, #88]	; (8003164 <MX_GPIO_Init+0x258>)
 800310a:	f008 fadf 	bl	800b6cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS2__Pin;
 800310e:	2302      	movs	r3, #2
 8003110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003112:	2301      	movs	r3, #1
 8003114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003116:	2301      	movs	r3, #1
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800311a:	2303      	movs	r3, #3
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS2__GPIO_Port, &GPIO_InitStruct);
 800311e:	f107 031c 	add.w	r3, r7, #28
 8003122:	4619      	mov	r1, r3
 8003124:	480c      	ldr	r0, [pc, #48]	; (8003158 <MX_GPIO_Init+0x24c>)
 8003126:	f008 fad1 	bl	800b6cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800312a:	2200      	movs	r2, #0
 800312c:	2100      	movs	r1, #0
 800312e:	2017      	movs	r0, #23
 8003130:	f006 fe70 	bl	8009e14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003134:	2017      	movs	r0, #23
 8003136:	f006 fe89 	bl	8009e4c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800313a:	2200      	movs	r2, #0
 800313c:	2100      	movs	r1, #0
 800313e:	2028      	movs	r0, #40	; 0x28
 8003140:	f006 fe68 	bl	8009e14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003144:	2028      	movs	r0, #40	; 0x28
 8003146:	f006 fe81 	bl	8009e4c <HAL_NVIC_EnableIRQ>

}
 800314a:	bf00      	nop
 800314c:	3730      	adds	r7, #48	; 0x30
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800
 8003158:	40021000 	.word	0x40021000
 800315c:	40020800 	.word	0x40020800
 8003160:	40020000 	.word	0x40020000
 8003164:	40020400 	.word	0x40020400
 8003168:	40020c00 	.word	0x40020c00
 800316c:	10310000 	.word	0x10310000

08003170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003174:	f006 f948 	bl	8009408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003178:	f000 f840 	bl	80031fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800317c:	f7ff fec6 	bl	8002f0c <MX_GPIO_Init>
  MX_DMA_Init();
 8003180:	f7ff fe76 	bl	8002e70 <MX_DMA_Init>
  MX_ADC1_Init();
 8003184:	f7ff fc06 	bl	8002994 <MX_ADC1_Init>
  MX_SPI1_Init();
 8003188:	f000 f95a 	bl	8003440 <MX_SPI1_Init>
  MX_SPI2_Init();
 800318c:	f000 f98e 	bl	80034ac <MX_SPI2_Init>
  MX_TIM3_Init();
 8003190:	f000 fcfc 	bl	8003b8c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003194:	f000 ff86 	bl	80040a4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003198:	f000 ffae 	bl	80040f8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800319c:	f000 ffd6 	bl	800414c <MX_USART3_UART_Init>
  MX_LWIP_Init();
 80031a0:	f00b fa52 	bl	800e648 <MX_LWIP_Init>
  MX_TIM4_Init();
 80031a4:	f000 fd6e 	bl	8003c84 <MX_TIM4_Init>
//  MX_RTC_Init();
  MX_TIM6_Init();
 80031a8:	f000 fdc2 	bl	8003d30 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	HAL_Delay(1000);
 80031ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031b0:	f006 f96c 	bl	800948c <HAL_Delay>
	DWT_Init();
 80031b4:	f001 f958 	bl	8004468 <DWT_Init>

	EN_Interrupt();		//Для дебага по USART3
 80031b8:	f001 f906 	bl	80043c8 <EN_Interrupt>

												//Для организации обмена данными по ethernet нужно включить:
												//net_ini(); MX_LWIP_Process();(Вкл в main) также закоментить в файле stm32f4xx_it.c строчки для отладки через DEBUG_main();

	//----------------ADC_test------------------
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 4);		//Стартуем АЦП
 80031bc:	2204      	movs	r2, #4
 80031be:	490b      	ldr	r1, [pc, #44]	; (80031ec <main+0x7c>)
 80031c0:	480b      	ldr	r0, [pc, #44]	; (80031f0 <main+0x80>)
 80031c2:	f006 f9c9 	bl	8009558 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_4);
 80031c6:	210c      	movs	r1, #12
 80031c8:	480a      	ldr	r0, [pc, #40]	; (80031f4 <main+0x84>)
 80031ca:	f009 fe23 	bl	800ce14 <HAL_TIM_OC_Start>
	//------------------------------------------

	//-------------1-WIRE_test------------------
	UpdateTempSens();
 80031ce:	f006 f877 	bl	80092c0 <UpdateTempSens>
//	HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);	//Настройка прерывания по spi для МК

	//----------------PWM_test------------------
	//------------------------------------------
	//---------------FATfs----------------------
	my_init_card();
 80031d2:	f003 fbf7 	bl	80069c4 <my_init_card>
	SEND_str("Init sd card -> success\n");
 80031d6:	4808      	ldr	r0, [pc, #32]	; (80031f8 <main+0x88>)
 80031d8:	f7ff fce8 	bl	8002bac <SEND_str>

		//----------------PWM_test----------------
		//----------------------------------------

		//------------------DEBUG-----------------
		DEBUG_main();
 80031dc:	f7ff fd02 	bl	8002be4 <DEBUG_main>
		//----------------------------------------

		//--------------ReINIT_GPIO---------------
		CheckReWriteAiDo();
 80031e0:	f004 fe2c 	bl	8007e3c <CheckReWriteAiDo>
		//----------------------------------------
		//----------TEST_EXAMPLE_1-WIRE-----------
//		TempSensMain();
		CheckReWriteTSiDo();
 80031e4:	f004 fedc 	bl	8007fa0 <CheckReWriteTSiDo>
		DEBUG_main();
 80031e8:	e7f8      	b.n	80031dc <main+0x6c>
 80031ea:	bf00      	nop
 80031ec:	20000300 	.word	0x20000300
 80031f0:	20000860 	.word	0x20000860
 80031f4:	200009f8 	.word	0x200009f8
 80031f8:	080203cc 	.word	0x080203cc

080031fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b098      	sub	sp, #96	; 0x60
 8003200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003202:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003206:	2230      	movs	r2, #48	; 0x30
 8003208:	2100      	movs	r1, #0
 800320a:	4618      	mov	r0, r3
 800320c:	f017 fb25 	bl	801a85a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003210:	f107 031c 	add.w	r3, r7, #28
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003220:	f107 030c 	add.w	r3, r7, #12
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	60bb      	str	r3, [r7, #8]
 8003232:	4b31      	ldr	r3, [pc, #196]	; (80032f8 <SystemClock_Config+0xfc>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	4a30      	ldr	r2, [pc, #192]	; (80032f8 <SystemClock_Config+0xfc>)
 8003238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800323c:	6413      	str	r3, [r2, #64]	; 0x40
 800323e:	4b2e      	ldr	r3, [pc, #184]	; (80032f8 <SystemClock_Config+0xfc>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800324a:	2300      	movs	r3, #0
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	4b2b      	ldr	r3, [pc, #172]	; (80032fc <SystemClock_Config+0x100>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a2a      	ldr	r2, [pc, #168]	; (80032fc <SystemClock_Config+0x100>)
 8003254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	4b28      	ldr	r3, [pc, #160]	; (80032fc <SystemClock_Config+0x100>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003262:	607b      	str	r3, [r7, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003266:	2305      	movs	r3, #5
 8003268:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800326a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800326e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003270:	2301      	movs	r3, #1
 8003272:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003274:	2302      	movs	r3, #2
 8003276:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003278:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800327c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800327e:	2304      	movs	r3, #4
 8003280:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003282:	23a8      	movs	r3, #168	; 0xa8
 8003284:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003286:	2302      	movs	r3, #2
 8003288:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800328a:	2304      	movs	r3, #4
 800328c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800328e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003292:	4618      	mov	r0, r3
 8003294:	f008 fbfe 	bl	800ba94 <HAL_RCC_OscConfig>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800329e:	f000 f8c7 	bl	8003430 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032a2:	230f      	movs	r3, #15
 80032a4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032a6:	2302      	movs	r3, #2
 80032a8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032aa:	2300      	movs	r3, #0
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80032ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80032b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80032ba:	f107 031c 	add.w	r3, r7, #28
 80032be:	2105      	movs	r1, #5
 80032c0:	4618      	mov	r0, r3
 80032c2:	f008 fe57 	bl	800bf74 <HAL_RCC_ClockConfig>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80032cc:	f000 f8b0 	bl	8003430 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80032d0:	2302      	movs	r3, #2
 80032d2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80032d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032d8:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032da:	f107 030c 	add.w	r3, r7, #12
 80032de:	4618      	mov	r0, r3
 80032e0:	f009 f86c 	bl	800c3bc <HAL_RCCEx_PeriphCLKConfig>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80032ea:	f000 f8a1 	bl	8003430 <Error_Handler>
  }
}
 80032ee:	bf00      	nop
 80032f0:	3760      	adds	r7, #96	; 0x60
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40007000 	.word	0x40007000

08003300 <HAL_GPIO_EXTI_Callback>:
//	{
//		UART3_RxCpltCallback();
//	}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	80fb      	strh	r3, [r7, #6]
	CheckReWriteDiDo();
 800330a:	f004 fcd9 	bl	8007cc0 <CheckReWriteDiDo>
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <HAL_ADC_ConvCpltCallback>:
	    	flag_iput_spi2 = 1;
	    }
	}
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1f      	ldr	r2, [pc, #124]	; (80033a4 <HAL_ADC_ConvCpltCallback+0x8c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d137      	bne.n	800339a <HAL_ADC_ConvCpltCallback+0x82>
    {
    	adcValue[0] = Conversion_ADC1((uint16_t)adc[0], 0);
 800332a:	4b1f      	ldr	r3, [pc, #124]	; (80033a8 <HAL_ADC_ConvCpltCallback+0x90>)
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	b29b      	uxth	r3, r3
 8003330:	2100      	movs	r1, #0
 8003332:	4618      	mov	r0, r3
 8003334:	f004 ff78 	bl	8008228 <Conversion_ADC1>
 8003338:	eeb0 7a40 	vmov.f32	s14, s0
 800333c:	eef0 7a60 	vmov.f32	s15, s1
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <HAL_ADC_ConvCpltCallback+0x94>)
 8003342:	ed83 7b00 	vstr	d7, [r3]
        adcValue[1] = Conversion_ADC1((uint16_t)adc[1], 1);
 8003346:	4b18      	ldr	r3, [pc, #96]	; (80033a8 <HAL_ADC_ConvCpltCallback+0x90>)
 8003348:	885b      	ldrh	r3, [r3, #2]
 800334a:	b29b      	uxth	r3, r3
 800334c:	2101      	movs	r1, #1
 800334e:	4618      	mov	r0, r3
 8003350:	f004 ff6a 	bl	8008228 <Conversion_ADC1>
 8003354:	eeb0 7a40 	vmov.f32	s14, s0
 8003358:	eef0 7a60 	vmov.f32	s15, s1
 800335c:	4b13      	ldr	r3, [pc, #76]	; (80033ac <HAL_ADC_ConvCpltCallback+0x94>)
 800335e:	ed83 7b02 	vstr	d7, [r3, #8]
        adcValue[2] = Conversion_ADC1((uint16_t)adc[2], 2);
 8003362:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <HAL_ADC_ConvCpltCallback+0x90>)
 8003364:	889b      	ldrh	r3, [r3, #4]
 8003366:	b29b      	uxth	r3, r3
 8003368:	2102      	movs	r1, #2
 800336a:	4618      	mov	r0, r3
 800336c:	f004 ff5c 	bl	8008228 <Conversion_ADC1>
 8003370:	eeb0 7a40 	vmov.f32	s14, s0
 8003374:	eef0 7a60 	vmov.f32	s15, s1
 8003378:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <HAL_ADC_ConvCpltCallback+0x94>)
 800337a:	ed83 7b04 	vstr	d7, [r3, #16]
        adcValue[3] = Conversion_ADC1((uint16_t)adc[3], 3);
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <HAL_ADC_ConvCpltCallback+0x90>)
 8003380:	88db      	ldrh	r3, [r3, #6]
 8003382:	b29b      	uxth	r3, r3
 8003384:	2103      	movs	r1, #3
 8003386:	4618      	mov	r0, r3
 8003388:	f004 ff4e 	bl	8008228 <Conversion_ADC1>
 800338c:	eeb0 7a40 	vmov.f32	s14, s0
 8003390:	eef0 7a60 	vmov.f32	s15, s1
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_ADC_ConvCpltCallback+0x94>)
 8003396:	ed83 7b06 	vstr	d7, [r3, #24]
    }
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40012000 	.word	0x40012000
 80033a8:	20000300 	.word	0x20000300
 80033ac:	20000308 	.word	0x20000308

080033b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
    if(htim->Instance == TIM6) //check if the interrupt comes from TIM6
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a16      	ldr	r2, [pc, #88]	; (8003418 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d11f      	bne.n	8003402 <HAL_TIM_PeriodElapsedCallback+0x52>
    {
		Time_Counter_Init++;
 80033c2:	4b16      	ldr	r3, [pc, #88]	; (800341c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	3301      	adds	r3, #1
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4b14      	ldr	r3, [pc, #80]	; (800341c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80033cc:	701a      	strb	r2, [r3, #0]
		Time_Counter_Read++;
 80033ce:	4b14      	ldr	r3, [pc, #80]	; (8003420 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	3301      	adds	r3, #1
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	4b12      	ldr	r3, [pc, #72]	; (8003420 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80033d8:	701a      	strb	r2, [r3, #0]

		if(Time_Counter_Init == 16)		//Запрос данных каждую ~0.8 сек (old 16: 83 to 49999)
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b10      	cmp	r3, #16
 80033e0:	d102      	bne.n	80033e8 <HAL_TIM_PeriodElapsedCallback+0x38>
        {
	    	OneWire_Test_Flag_Init = true;
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	701a      	strb	r2, [r3, #0]
        }
		if(Time_Counter_Read == 32)	//Запрос данных каждую ~1.6 сек (old 32: 83 to 49999))
 80033e8:	4b0d      	ldr	r3, [pc, #52]	; (8003420 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b20      	cmp	r3, #32
 80033ee:	d108      	bne.n	8003402 <HAL_TIM_PeriodElapsedCallback+0x52>
        {
	    	OneWire_Test_Flag_Read = true;
 80033f0:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	701a      	strb	r2, [r3, #0]

	    	Time_Counter_Init = 0;
 80033f6:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
	    	Time_Counter_Read = 0;
 80033fc:	4b08      	ldr	r3, [pc, #32]	; (8003420 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80033fe:	2200      	movs	r2, #0
 8003400:	701a      	strb	r2, [r3, #0]
        }
    }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a09      	ldr	r2, [pc, #36]	; (800342c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d101      	bne.n	8003410 <HAL_TIM_PeriodElapsedCallback+0x60>
    HAL_IncTick();
 800340c:	f006 f81e 	bl	800944c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003410:	bf00      	nop
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40001000 	.word	0x40001000
 800341c:	20000328 	.word	0x20000328
 8003420:	20000329 	.word	0x20000329
 8003424:	2000032a 	.word	0x2000032a
 8003428:	2000032b 	.word	0x2000032b
 800342c:	40010000 	.word	0x40010000

08003430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003444:	4b17      	ldr	r3, [pc, #92]	; (80034a4 <MX_SPI1_Init+0x64>)
 8003446:	4a18      	ldr	r2, [pc, #96]	; (80034a8 <MX_SPI1_Init+0x68>)
 8003448:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800344a:	4b16      	ldr	r3, [pc, #88]	; (80034a4 <MX_SPI1_Init+0x64>)
 800344c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003450:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003452:	4b14      	ldr	r3, [pc, #80]	; (80034a4 <MX_SPI1_Init+0x64>)
 8003454:	2200      	movs	r2, #0
 8003456:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003458:	4b12      	ldr	r3, [pc, #72]	; (80034a4 <MX_SPI1_Init+0x64>)
 800345a:	2200      	movs	r2, #0
 800345c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800345e:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <MX_SPI1_Init+0x64>)
 8003460:	2200      	movs	r2, #0
 8003462:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003464:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <MX_SPI1_Init+0x64>)
 8003466:	2200      	movs	r2, #0
 8003468:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800346a:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <MX_SPI1_Init+0x64>)
 800346c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003470:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003472:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <MX_SPI1_Init+0x64>)
 8003474:	2210      	movs	r2, #16
 8003476:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003478:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <MX_SPI1_Init+0x64>)
 800347a:	2200      	movs	r2, #0
 800347c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800347e:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <MX_SPI1_Init+0x64>)
 8003480:	2200      	movs	r2, #0
 8003482:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003484:	4b07      	ldr	r3, [pc, #28]	; (80034a4 <MX_SPI1_Init+0x64>)
 8003486:	2200      	movs	r2, #0
 8003488:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <MX_SPI1_Init+0x64>)
 800348c:	220a      	movs	r2, #10
 800348e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003490:	4804      	ldr	r0, [pc, #16]	; (80034a4 <MX_SPI1_Init+0x64>)
 8003492:	f009 f875 	bl	800c580 <HAL_SPI_Init>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800349c:	f7ff ffc8 	bl	8003430 <Error_Handler>
  }

}
 80034a0:	bf00      	nop
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	20000960 	.word	0x20000960
 80034a8:	40013000 	.word	0x40013000

080034ac <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80034b0:	4b15      	ldr	r3, [pc, #84]	; (8003508 <MX_SPI2_Init+0x5c>)
 80034b2:	4a16      	ldr	r2, [pc, #88]	; (800350c <MX_SPI2_Init+0x60>)
 80034b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80034b6:	4b14      	ldr	r3, [pc, #80]	; (8003508 <MX_SPI2_Init+0x5c>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80034bc:	4b12      	ldr	r3, [pc, #72]	; (8003508 <MX_SPI2_Init+0x5c>)
 80034be:	2200      	movs	r2, #0
 80034c0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80034c2:	4b11      	ldr	r3, [pc, #68]	; (8003508 <MX_SPI2_Init+0x5c>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034c8:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <MX_SPI2_Init+0x5c>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034ce:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <MX_SPI2_Init+0x5c>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <MX_SPI2_Init+0x5c>)
 80034d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034da:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034dc:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <MX_SPI2_Init+0x5c>)
 80034de:	2200      	movs	r2, #0
 80034e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80034e2:	4b09      	ldr	r3, [pc, #36]	; (8003508 <MX_SPI2_Init+0x5c>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034e8:	4b07      	ldr	r3, [pc, #28]	; (8003508 <MX_SPI2_Init+0x5c>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80034ee:	4b06      	ldr	r3, [pc, #24]	; (8003508 <MX_SPI2_Init+0x5c>)
 80034f0:	220a      	movs	r2, #10
 80034f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80034f4:	4804      	ldr	r0, [pc, #16]	; (8003508 <MX_SPI2_Init+0x5c>)
 80034f6:	f009 f843 	bl	800c580 <HAL_SPI_Init>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 8003500:	f7ff ff96 	bl	8003430 <Error_Handler>
  }

}
 8003504:	bf00      	nop
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20000908 	.word	0x20000908
 800350c:	40003800 	.word	0x40003800

08003510 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08c      	sub	sp, #48	; 0x30
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003518:	f107 031c 	add.w	r3, r7, #28
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	60da      	str	r2, [r3, #12]
 8003526:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a45      	ldr	r2, [pc, #276]	; (8003644 <HAL_SPI_MspInit+0x134>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d12c      	bne.n	800358c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	61bb      	str	r3, [r7, #24]
 8003536:	4b44      	ldr	r3, [pc, #272]	; (8003648 <HAL_SPI_MspInit+0x138>)
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	4a43      	ldr	r2, [pc, #268]	; (8003648 <HAL_SPI_MspInit+0x138>)
 800353c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003540:	6453      	str	r3, [r2, #68]	; 0x44
 8003542:	4b41      	ldr	r3, [pc, #260]	; (8003648 <HAL_SPI_MspInit+0x138>)
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800354a:	61bb      	str	r3, [r7, #24]
 800354c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	4b3d      	ldr	r3, [pc, #244]	; (8003648 <HAL_SPI_MspInit+0x138>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	4a3c      	ldr	r2, [pc, #240]	; (8003648 <HAL_SPI_MspInit+0x138>)
 8003558:	f043 0302 	orr.w	r3, r3, #2
 800355c:	6313      	str	r3, [r2, #48]	; 0x30
 800355e:	4b3a      	ldr	r3, [pc, #232]	; (8003648 <HAL_SPI_MspInit+0x138>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 800356a:	2338      	movs	r3, #56	; 0x38
 800356c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356e:	2302      	movs	r3, #2
 8003570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003572:	2300      	movs	r3, #0
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003576:	2303      	movs	r3, #3
 8003578:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800357a:	2305      	movs	r3, #5
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800357e:	f107 031c 	add.w	r3, r7, #28
 8003582:	4619      	mov	r1, r3
 8003584:	4831      	ldr	r0, [pc, #196]	; (800364c <HAL_SPI_MspInit+0x13c>)
 8003586:	f008 f8a1 	bl	800b6cc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800358a:	e057      	b.n	800363c <HAL_SPI_MspInit+0x12c>
  else if(spiHandle->Instance==SPI2)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a2f      	ldr	r2, [pc, #188]	; (8003650 <HAL_SPI_MspInit+0x140>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d152      	bne.n	800363c <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	4b2b      	ldr	r3, [pc, #172]	; (8003648 <HAL_SPI_MspInit+0x138>)
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	4a2a      	ldr	r2, [pc, #168]	; (8003648 <HAL_SPI_MspInit+0x138>)
 80035a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035a4:	6413      	str	r3, [r2, #64]	; 0x40
 80035a6:	4b28      	ldr	r3, [pc, #160]	; (8003648 <HAL_SPI_MspInit+0x138>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	4b24      	ldr	r3, [pc, #144]	; (8003648 <HAL_SPI_MspInit+0x138>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	4a23      	ldr	r2, [pc, #140]	; (8003648 <HAL_SPI_MspInit+0x138>)
 80035bc:	f043 0304 	orr.w	r3, r3, #4
 80035c0:	6313      	str	r3, [r2, #48]	; 0x30
 80035c2:	4b21      	ldr	r3, [pc, #132]	; (8003648 <HAL_SPI_MspInit+0x138>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <HAL_SPI_MspInit+0x138>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	4a1c      	ldr	r2, [pc, #112]	; (8003648 <HAL_SPI_MspInit+0x138>)
 80035d8:	f043 0302 	orr.w	r3, r3, #2
 80035dc:	6313      	str	r3, [r2, #48]	; 0x30
 80035de:	4b1a      	ldr	r3, [pc, #104]	; (8003648 <HAL_SPI_MspInit+0x138>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MISO_M_Pin|MOSI_M_Pin;
 80035ea:	230c      	movs	r3, #12
 80035ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f6:	2303      	movs	r3, #3
 80035f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80035fa:	2305      	movs	r3, #5
 80035fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035fe:	f107 031c 	add.w	r3, r7, #28
 8003602:	4619      	mov	r1, r3
 8003604:	4813      	ldr	r0, [pc, #76]	; (8003654 <HAL_SPI_MspInit+0x144>)
 8003606:	f008 f861 	bl	800b6cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCK_M_Pin;
 800360a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800360e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003610:	2302      	movs	r3, #2
 8003612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003614:	2300      	movs	r3, #0
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003618:	2303      	movs	r3, #3
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800361c:	2305      	movs	r3, #5
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCK_M_GPIO_Port, &GPIO_InitStruct);
 8003620:	f107 031c 	add.w	r3, r7, #28
 8003624:	4619      	mov	r1, r3
 8003626:	4809      	ldr	r0, [pc, #36]	; (800364c <HAL_SPI_MspInit+0x13c>)
 8003628:	f008 f850 	bl	800b6cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800362c:	2200      	movs	r2, #0
 800362e:	2100      	movs	r1, #0
 8003630:	2024      	movs	r0, #36	; 0x24
 8003632:	f006 fbef 	bl	8009e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003636:	2024      	movs	r0, #36	; 0x24
 8003638:	f006 fc08 	bl	8009e4c <HAL_NVIC_EnableIRQ>
}
 800363c:	bf00      	nop
 800363e:	3730      	adds	r7, #48	; 0x30
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40013000 	.word	0x40013000
 8003648:	40023800 	.word	0x40023800
 800364c:	40020400 	.word	0x40020400
 8003650:	40003800 	.word	0x40003800
 8003654:	40020800 	.word	0x40020800

08003658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	607b      	str	r3, [r7, #4]
 8003662:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <HAL_MspInit+0x4c>)
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	4a0f      	ldr	r2, [pc, #60]	; (80036a4 <HAL_MspInit+0x4c>)
 8003668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800366c:	6453      	str	r3, [r2, #68]	; 0x44
 800366e:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <HAL_MspInit+0x4c>)
 8003670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003676:	607b      	str	r3, [r7, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	603b      	str	r3, [r7, #0]
 800367e:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <HAL_MspInit+0x4c>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	4a08      	ldr	r2, [pc, #32]	; (80036a4 <HAL_MspInit+0x4c>)
 8003684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003688:	6413      	str	r3, [r2, #64]	; 0x40
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_MspInit+0x4c>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	40023800 	.word	0x40023800

080036a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08c      	sub	sp, #48	; 0x30
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80036b8:	2200      	movs	r2, #0
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	2019      	movs	r0, #25
 80036be:	f006 fba9 	bl	8009e14 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80036c2:	2019      	movs	r0, #25
 80036c4:	f006 fbc2 	bl	8009e4c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	4b1f      	ldr	r3, [pc, #124]	; (800374c <HAL_InitTick+0xa4>)
 80036ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d0:	4a1e      	ldr	r2, [pc, #120]	; (800374c <HAL_InitTick+0xa4>)
 80036d2:	f043 0301 	orr.w	r3, r3, #1
 80036d6:	6453      	str	r3, [r2, #68]	; 0x44
 80036d8:	4b1c      	ldr	r3, [pc, #112]	; (800374c <HAL_InitTick+0xa4>)
 80036da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036e4:	f107 0210 	add.w	r2, r7, #16
 80036e8:	f107 0314 	add.w	r3, r7, #20
 80036ec:	4611      	mov	r1, r2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f008 fe32 	bl	800c358 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80036f4:	f008 fe1c 	bl	800c330 <HAL_RCC_GetPCLK2Freq>
 80036f8:	4603      	mov	r3, r0
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	4a13      	ldr	r2, [pc, #76]	; (8003750 <HAL_InitTick+0xa8>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	0c9b      	lsrs	r3, r3, #18
 8003708:	3b01      	subs	r3, #1
 800370a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800370c:	4b11      	ldr	r3, [pc, #68]	; (8003754 <HAL_InitTick+0xac>)
 800370e:	4a12      	ldr	r2, [pc, #72]	; (8003758 <HAL_InitTick+0xb0>)
 8003710:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003712:	4b10      	ldr	r3, [pc, #64]	; (8003754 <HAL_InitTick+0xac>)
 8003714:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003718:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800371a:	4a0e      	ldr	r2, [pc, #56]	; (8003754 <HAL_InitTick+0xac>)
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003720:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <HAL_InitTick+0xac>)
 8003722:	2200      	movs	r2, #0
 8003724:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003726:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_InitTick+0xac>)
 8003728:	2200      	movs	r2, #0
 800372a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800372c:	4809      	ldr	r0, [pc, #36]	; (8003754 <HAL_InitTick+0xac>)
 800372e:	f009 faf7 	bl	800cd20 <HAL_TIM_Base_Init>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d104      	bne.n	8003742 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003738:	4806      	ldr	r0, [pc, #24]	; (8003754 <HAL_InitTick+0xac>)
 800373a:	f009 fb1c 	bl	800cd76 <HAL_TIM_Base_Start_IT>
 800373e:	4603      	mov	r3, r0
 8003740:	e000      	b.n	8003744 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
}
 8003744:	4618      	mov	r0, r3
 8003746:	3730      	adds	r7, #48	; 0x30
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40023800 	.word	0x40023800
 8003750:	431bde83 	.word	0x431bde83
 8003754:	200009b8 	.word	0x200009b8
 8003758:	40010000 	.word	0x40010000

0800375c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003760:	bf00      	nop
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800376e:	e7fe      	b.n	800376e <HardFault_Handler+0x4>

08003770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003774:	e7fe      	b.n	8003774 <MemManage_Handler+0x4>

08003776 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003776:	b480      	push	{r7}
 8003778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800377a:	e7fe      	b.n	800377a <BusFault_Handler+0x4>

0800377c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003780:	e7fe      	b.n	8003780 <UsageFault_Handler+0x4>

08003782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003782:	b480      	push	{r7}
 8003784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800379e:	b480      	push	{r7}
 80037a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037b0:	bf00      	nop
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80037c0:	4802      	ldr	r0, [pc, #8]	; (80037cc <DMA1_Stream2_IRQHandler+0x10>)
 80037c2:	f006 fc79 	bl	800a0b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	20000bd8 	.word	0x20000bd8

080037d0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80037d4:	4802      	ldr	r0, [pc, #8]	; (80037e0 <DMA1_Stream4_IRQHandler+0x10>)
 80037d6:	f006 fc6f 	bl	800a0b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20000ad8 	.word	0x20000ad8

080037e4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80037e8:	4802      	ldr	r0, [pc, #8]	; (80037f4 <DMA1_Stream5_IRQHandler+0x10>)
 80037ea:	f006 fc65 	bl	800a0b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000b38 	.word	0x20000b38

080037f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80037fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003800:	f008 f930 	bl	800ba64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003804:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003808:	f008 f92c 	bl	800ba64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800380c:	bf00      	nop
 800380e:	bd80      	pop	{r7, pc}

08003810 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003814:	4802      	ldr	r0, [pc, #8]	; (8003820 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003816:	f009 fc79 	bl	800d10c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800381a:	bf00      	nop
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	200009b8 	.word	0x200009b8

08003824 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003828:	4802      	ldr	r0, [pc, #8]	; (8003834 <SPI2_IRQHandler+0x10>)
 800382a:	f009 f8af 	bl	800c98c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800382e:	bf00      	nop
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000908 	.word	0x20000908

08003838 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(((huart1.Instance->SR & USART_SR_RXNE) != RESET) && ((huart1.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 800383e:	4b18      	ldr	r3, [pc, #96]	; (80038a0 <USART1_IRQHandler+0x68>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b00      	cmp	r3, #0
 800384a:	d023      	beq.n	8003894 <USART1_IRQHandler+0x5c>
 800384c:	4b14      	ldr	r3, [pc, #80]	; (80038a0 <USART1_IRQHandler+0x68>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f003 0320 	and.w	r3, r3, #32
 8003856:	2b00      	cmp	r3, #0
 8003858:	d01c      	beq.n	8003894 <USART1_IRQHandler+0x5c>
	{
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 800385a:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <USART1_IRQHandler+0x68>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	71fb      	strb	r3, [r7, #7]
		gsm_rx_buffer_index_t i = (uint16_t)(gsm_rx_buffer_head + 1) % GSM_RX_BUFFER_SIZE;
 8003862:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <USART1_IRQHandler+0x6c>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	b2db      	uxtb	r3, r3
 8003868:	3301      	adds	r3, #1
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003870:	71bb      	strb	r3, [r7, #6]

		if(i != gsm_rx_buffer_tail)
 8003872:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <USART1_IRQHandler+0x70>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	b2db      	uxtb	r3, r3
 8003878:	79ba      	ldrb	r2, [r7, #6]
 800387a:	429a      	cmp	r2, r3
 800387c:	d00a      	beq.n	8003894 <USART1_IRQHandler+0x5c>
		{
			gsm_rx_buffer[gsm_rx_buffer_head] = rbyte;
 800387e:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <USART1_IRQHandler+0x6c>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	b2db      	uxtb	r3, r3
 8003884:	4619      	mov	r1, r3
 8003886:	4a09      	ldr	r2, [pc, #36]	; (80038ac <USART1_IRQHandler+0x74>)
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	5453      	strb	r3, [r2, r1]
			gsm_rx_buffer_head = i;
 800388c:	4a05      	ldr	r2, [pc, #20]	; (80038a4 <USART1_IRQHandler+0x6c>)
 800388e:	79bb      	ldrb	r3, [r7, #6]
 8003890:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 8003892:	bf00      	nop
 8003894:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	20000c78 	.word	0x20000c78
 80038a4:	20000330 	.word	0x20000330
 80038a8:	20000331 	.word	0x20000331
 80038ac:	20000334 	.word	0x20000334

080038b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(((huart2.Instance->SR & USART_SR_RXNE) != RESET) && ((huart2.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 80038b6:	4b18      	ldr	r3, [pc, #96]	; (8003918 <USART2_IRQHandler+0x68>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d023      	beq.n	800390c <USART2_IRQHandler+0x5c>
 80038c4:	4b14      	ldr	r3, [pc, #80]	; (8003918 <USART2_IRQHandler+0x68>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d01c      	beq.n	800390c <USART2_IRQHandler+0x5c>
	{
		uint8_t rbyte = (uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 80038d2:	4b11      	ldr	r3, [pc, #68]	; (8003918 <USART2_IRQHandler+0x68>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	71fb      	strb	r3, [r7, #7]
		rs485_rx_buffer_index_t i = (uint16_t)(rs485_rx_buffer_head + 1) % RS485_RX_BUFFER_SIZE;
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <USART2_IRQHandler+0x6c>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	3301      	adds	r3, #1
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038e8:	71bb      	strb	r3, [r7, #6]

		if(i != rs485_rx_buffer_tail)
 80038ea:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <USART2_IRQHandler+0x70>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	79ba      	ldrb	r2, [r7, #6]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d00a      	beq.n	800390c <USART2_IRQHandler+0x5c>
		{
			rs485_rx_buffer[rs485_rx_buffer_head] = rbyte;
 80038f6:	4b09      	ldr	r3, [pc, #36]	; (800391c <USART2_IRQHandler+0x6c>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	4619      	mov	r1, r3
 80038fe:	4a09      	ldr	r2, [pc, #36]	; (8003924 <USART2_IRQHandler+0x74>)
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	5453      	strb	r3, [r2, r1]
			rs485_rx_buffer_head = i;
 8003904:	4a05      	ldr	r2, [pc, #20]	; (800391c <USART2_IRQHandler+0x6c>)
 8003906:	79bb      	ldrb	r3, [r7, #6]
 8003908:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 800390a:	bf00      	nop
 800390c:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	20000cb8 	.word	0x20000cb8
 800391c:	200003b8 	.word	0x200003b8
 8003920:	200003b9 	.word	0x200003b9
 8003924:	200003bc 	.word	0x200003bc

08003928 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
//Раскоментить для дебага по USART(кроме отладки по Ethernet)

	if(((huart3.Instance->SR & USART_SR_RXNE) != RESET) && ((huart3.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 800392e:	4b18      	ldr	r3, [pc, #96]	; (8003990 <USART3_IRQHandler+0x68>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	d023      	beq.n	8003984 <USART3_IRQHandler+0x5c>
 800393c:	4b14      	ldr	r3, [pc, #80]	; (8003990 <USART3_IRQHandler+0x68>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b00      	cmp	r3, #0
 8003948:	d01c      	beq.n	8003984 <USART3_IRQHandler+0x5c>
	{
		uint8_t rbyte = (uint8_t)(huart3.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 800394a:	4b11      	ldr	r3, [pc, #68]	; (8003990 <USART3_IRQHandler+0x68>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 8003952:	4b10      	ldr	r3, [pc, #64]	; (8003994 <USART3_IRQHandler+0x6c>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	b2db      	uxtb	r3, r3
 8003958:	3301      	adds	r3, #1
 800395a:	b2db      	uxtb	r3, r3
 800395c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003960:	71bb      	strb	r3, [r7, #6]

		if(i != dbg_rx_buffer_tail)
 8003962:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <USART3_IRQHandler+0x70>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	b2db      	uxtb	r3, r3
 8003968:	79ba      	ldrb	r2, [r7, #6]
 800396a:	429a      	cmp	r2, r3
 800396c:	d00a      	beq.n	8003984 <USART3_IRQHandler+0x5c>
		{
			dbg_rx_buffer[dbg_rx_buffer_head] = rbyte;
 800396e:	4b09      	ldr	r3, [pc, #36]	; (8003994 <USART3_IRQHandler+0x6c>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	4619      	mov	r1, r3
 8003976:	4a09      	ldr	r2, [pc, #36]	; (800399c <USART3_IRQHandler+0x74>)
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	5453      	strb	r3, [r2, r1]
			dbg_rx_buffer_head = i;
 800397c:	4a05      	ldr	r2, [pc, #20]	; (8003994 <USART3_IRQHandler+0x6c>)
 800397e:	79bb      	ldrb	r3, [r7, #6]
 8003980:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 8003982:	bf00      	nop
 8003984:	bf00      	nop
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	20000c38 	.word	0x20000c38
 8003994:	20000374 	.word	0x20000374
 8003998:	20000375 	.word	0x20000375
 800399c:	20000378 	.word	0x20000378

080039a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80039a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80039a8:	f008 f85c 	bl	800ba64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80039ac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80039b0:	f008 f858 	bl	800ba64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80039b4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80039b8:	f008 f854 	bl	800ba64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80039bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80039c0:	f008 f850 	bl	800ba64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80039c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80039c8:	f008 f84c 	bl	800ba64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80039cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80039d0:	f008 f848 	bl	800ba64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039d4:	bf00      	nop
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 80039dc:	4802      	ldr	r0, [pc, #8]	; (80039e8 <DMA1_Stream7_IRQHandler+0x10>)
 80039de:	f006 fb6b 	bl	800a0b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20000a38 	.word	0x20000a38

080039ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80039f0:	4802      	ldr	r0, [pc, #8]	; (80039fc <TIM6_DAC_IRQHandler+0x10>)
 80039f2:	f009 fb8b 	bl	800d10c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000b98 	.word	0x20000b98

08003a00 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a04:	4802      	ldr	r0, [pc, #8]	; (8003a10 <DMA2_Stream0_IRQHandler+0x10>)
 8003a06:	f006 fb57 	bl	800a0b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003a0a:	bf00      	nop
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	200008a8 	.word	0x200008a8

08003a14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	e00a      	b.n	8003a3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a26:	f3af 8000 	nop.w
 8003a2a:	4601      	mov	r1, r0
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	60ba      	str	r2, [r7, #8]
 8003a32:	b2ca      	uxtb	r2, r1
 8003a34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	dbf0      	blt.n	8003a26 <_read+0x12>
	}

return len;
 8003a44:	687b      	ldr	r3, [r7, #4]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b086      	sub	sp, #24
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	e009      	b.n	8003a74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	60ba      	str	r2, [r7, #8]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	3301      	adds	r3, #1
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	dbf1      	blt.n	8003a60 <_write+0x12>
	}
	return len;
 8003a7c:	687b      	ldr	r3, [r7, #4]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <_close>:

int _close(int file)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
	return -1;
 8003a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003aae:	605a      	str	r2, [r3, #4]
	return 0;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <_isatty>:

int _isatty(int file)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
	return 1;
 8003ac6:	2301      	movs	r3, #1
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
	return 0;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
	...

08003af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003af8:	4a14      	ldr	r2, [pc, #80]	; (8003b4c <_sbrk+0x5c>)
 8003afa:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <_sbrk+0x60>)
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b04:	4b13      	ldr	r3, [pc, #76]	; (8003b54 <_sbrk+0x64>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d102      	bne.n	8003b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b0c:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <_sbrk+0x64>)
 8003b0e:	4a12      	ldr	r2, [pc, #72]	; (8003b58 <_sbrk+0x68>)
 8003b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b12:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <_sbrk+0x64>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4413      	add	r3, r2
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d205      	bcs.n	8003b2c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003b20:	4b0e      	ldr	r3, [pc, #56]	; (8003b5c <_sbrk+0x6c>)
 8003b22:	220c      	movs	r2, #12
 8003b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2a:	e009      	b.n	8003b40 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b2c:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <_sbrk+0x64>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b32:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <_sbrk+0x64>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4413      	add	r3, r2
 8003b3a:	4a06      	ldr	r2, [pc, #24]	; (8003b54 <_sbrk+0x64>)
 8003b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	371c      	adds	r7, #28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	20020000 	.word	0x20020000
 8003b50:	00004000 	.word	0x00004000
 8003b54:	2000032c 	.word	0x2000032c
 8003b58:	20007670 	.word	0x20007670
 8003b5c:	2000766c 	.word	0x2000766c

08003b60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b64:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <SystemInit+0x28>)
 8003b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6a:	4a07      	ldr	r2, [pc, #28]	; (8003b88 <SystemInit+0x28>)
 8003b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b74:	4b04      	ldr	r3, [pc, #16]	; (8003b88 <SystemInit+0x28>)
 8003b76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b7a:	609a      	str	r2, [r3, #8]
#endif
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	e000ed00 	.word	0xe000ed00

08003b8c <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch3;
DMA_HandleTypeDef hdma_tim3_ch4_up;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b08a      	sub	sp, #40	; 0x28
 8003b90:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b92:	f107 0320 	add.w	r3, r7, #32
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b9c:	1d3b      	adds	r3, r7, #4
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	605a      	str	r2, [r3, #4]
 8003ba4:	609a      	str	r2, [r3, #8]
 8003ba6:	60da      	str	r2, [r3, #12]
 8003ba8:	611a      	str	r2, [r3, #16]
 8003baa:	615a      	str	r2, [r3, #20]
 8003bac:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003bae:	4b33      	ldr	r3, [pc, #204]	; (8003c7c <MX_TIM3_Init+0xf0>)
 8003bb0:	4a33      	ldr	r2, [pc, #204]	; (8003c80 <MX_TIM3_Init+0xf4>)
 8003bb2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8003bb4:	4b31      	ldr	r3, [pc, #196]	; (8003c7c <MX_TIM3_Init+0xf0>)
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bba:	4b30      	ldr	r3, [pc, #192]	; (8003c7c <MX_TIM3_Init+0xf0>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8003bc0:	4b2e      	ldr	r3, [pc, #184]	; (8003c7c <MX_TIM3_Init+0xf0>)
 8003bc2:	f242 7210 	movw	r2, #10000	; 0x2710
 8003bc6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bc8:	4b2c      	ldr	r3, [pc, #176]	; (8003c7c <MX_TIM3_Init+0xf0>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bce:	4b2b      	ldr	r3, [pc, #172]	; (8003c7c <MX_TIM3_Init+0xf0>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003bd4:	4829      	ldr	r0, [pc, #164]	; (8003c7c <MX_TIM3_Init+0xf0>)
 8003bd6:	f009 f95b 	bl	800ce90 <HAL_TIM_PWM_Init>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003be0:	f7ff fc26 	bl	8003430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003be4:	2300      	movs	r3, #0
 8003be6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003bec:	f107 0320 	add.w	r3, r7, #32
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4822      	ldr	r0, [pc, #136]	; (8003c7c <MX_TIM3_Init+0xf0>)
 8003bf4:	f009 ffec 	bl	800dbd0 <HAL_TIMEx_MasterConfigSynchronization>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003bfe:	f7ff fc17 	bl	8003430 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c02:	2360      	movs	r3, #96	; 0x60
 8003c04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8003c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003c10:	2304      	movs	r3, #4
 8003c12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c14:	1d3b      	adds	r3, r7, #4
 8003c16:	2200      	movs	r2, #0
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4818      	ldr	r0, [pc, #96]	; (8003c7c <MX_TIM3_Init+0xf0>)
 8003c1c:	f009 fbde 	bl	800d3dc <HAL_TIM_PWM_ConfigChannel>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8003c26:	f7ff fc03 	bl	8003430 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c2a:	1d3b      	adds	r3, r7, #4
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4812      	ldr	r0, [pc, #72]	; (8003c7c <MX_TIM3_Init+0xf0>)
 8003c32:	f009 fbd3 	bl	800d3dc <HAL_TIM_PWM_ConfigChannel>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003c3c:	f7ff fbf8 	bl	8003430 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c40:	1d3b      	adds	r3, r7, #4
 8003c42:	2208      	movs	r2, #8
 8003c44:	4619      	mov	r1, r3
 8003c46:	480d      	ldr	r0, [pc, #52]	; (8003c7c <MX_TIM3_Init+0xf0>)
 8003c48:	f009 fbc8 	bl	800d3dc <HAL_TIM_PWM_ConfigChannel>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8003c52:	f7ff fbed 	bl	8003430 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c56:	1d3b      	adds	r3, r7, #4
 8003c58:	220c      	movs	r2, #12
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4807      	ldr	r0, [pc, #28]	; (8003c7c <MX_TIM3_Init+0xf0>)
 8003c5e:	f009 fbbd 	bl	800d3dc <HAL_TIM_PWM_ConfigChannel>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8003c68:	f7ff fbe2 	bl	8003430 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8003c6c:	4803      	ldr	r0, [pc, #12]	; (8003c7c <MX_TIM3_Init+0xf0>)
 8003c6e:	f000 f9df 	bl	8004030 <HAL_TIM_MspPostInit>

}
 8003c72:	bf00      	nop
 8003c74:	3728      	adds	r7, #40	; 0x28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000a98 	.word	0x20000a98
 8003c80:	40000400 	.word	0x40000400

08003c84 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08a      	sub	sp, #40	; 0x28
 8003c88:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c8a:	f107 0320 	add.w	r3, r7, #32
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c94:	1d3b      	adds	r3, r7, #4
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	605a      	str	r2, [r3, #4]
 8003c9c:	609a      	str	r2, [r3, #8]
 8003c9e:	60da      	str	r2, [r3, #12]
 8003ca0:	611a      	str	r2, [r3, #16]
 8003ca2:	615a      	str	r2, [r3, #20]
 8003ca4:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8003ca6:	4b20      	ldr	r3, [pc, #128]	; (8003d28 <MX_TIM4_Init+0xa4>)
 8003ca8:	4a20      	ldr	r2, [pc, #128]	; (8003d2c <MX_TIM4_Init+0xa8>)
 8003caa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003cac:	4b1e      	ldr	r3, [pc, #120]	; (8003d28 <MX_TIM4_Init+0xa4>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cb2:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <MX_TIM4_Init+0xa4>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000;
 8003cb8:	4b1b      	ldr	r3, [pc, #108]	; (8003d28 <MX_TIM4_Init+0xa4>)
 8003cba:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8003cbe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cc0:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <MX_TIM4_Init+0xa4>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cc6:	4b18      	ldr	r3, [pc, #96]	; (8003d28 <MX_TIM4_Init+0xa4>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8003ccc:	4816      	ldr	r0, [pc, #88]	; (8003d28 <MX_TIM4_Init+0xa4>)
 8003cce:	f009 f876 	bl	800cdbe <HAL_TIM_OC_Init>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8003cd8:	f7ff fbaa 	bl	8003430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003ce4:	f107 0320 	add.w	r3, r7, #32
 8003ce8:	4619      	mov	r1, r3
 8003cea:	480f      	ldr	r0, [pc, #60]	; (8003d28 <MX_TIM4_Init+0xa4>)
 8003cec:	f009 ff70 	bl	800dbd0 <HAL_TIMEx_MasterConfigSynchronization>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8003cf6:	f7ff fb9b 	bl	8003430 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003cfa:	2330      	movs	r3, #48	; 0x30
 8003cfc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003d0a:	1d3b      	adds	r3, r7, #4
 8003d0c:	220c      	movs	r2, #12
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4805      	ldr	r0, [pc, #20]	; (8003d28 <MX_TIM4_Init+0xa4>)
 8003d12:	f009 fb03 	bl	800d31c <HAL_TIM_OC_ConfigChannel>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8003d1c:	f7ff fb88 	bl	8003430 <Error_Handler>
  }

}
 8003d20:	bf00      	nop
 8003d22:	3728      	adds	r7, #40	; 0x28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	200009f8 	.word	0x200009f8
 8003d2c:	40000800 	.word	0x40000800

08003d30 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d36:	463b      	mov	r3, r7
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8003d3e:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <MX_TIM6_Init+0x64>)
 8003d40:	4a15      	ldr	r2, [pc, #84]	; (8003d98 <MX_TIM6_Init+0x68>)
 8003d42:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8003d44:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <MX_TIM6_Init+0x64>)
 8003d46:	2253      	movs	r2, #83	; 0x53
 8003d48:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d4a:	4b12      	ldr	r3, [pc, #72]	; (8003d94 <MX_TIM6_Init+0x64>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 8003d50:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <MX_TIM6_Init+0x64>)
 8003d52:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003d56:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d58:	4b0e      	ldr	r3, [pc, #56]	; (8003d94 <MX_TIM6_Init+0x64>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003d5e:	480d      	ldr	r0, [pc, #52]	; (8003d94 <MX_TIM6_Init+0x64>)
 8003d60:	f008 ffde 	bl	800cd20 <HAL_TIM_Base_Init>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003d6a:	f7ff fb61 	bl	8003430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d72:	2300      	movs	r3, #0
 8003d74:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003d76:	463b      	mov	r3, r7
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4806      	ldr	r0, [pc, #24]	; (8003d94 <MX_TIM6_Init+0x64>)
 8003d7c:	f009 ff28 	bl	800dbd0 <HAL_TIMEx_MasterConfigSynchronization>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003d86:	f7ff fb53 	bl	8003430 <Error_Handler>
  }

}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20000b98 	.word	0x20000b98
 8003d98:	40001000 	.word	0x40001000

08003d9c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a72      	ldr	r2, [pc, #456]	; (8003f74 <HAL_TIM_PWM_MspInit+0x1d8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	f040 80de 	bne.w	8003f6c <HAL_TIM_PWM_MspInit+0x1d0>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003db0:	2300      	movs	r3, #0
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	4b70      	ldr	r3, [pc, #448]	; (8003f78 <HAL_TIM_PWM_MspInit+0x1dc>)
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	4a6f      	ldr	r2, [pc, #444]	; (8003f78 <HAL_TIM_PWM_MspInit+0x1dc>)
 8003dba:	f043 0302 	orr.w	r3, r3, #2
 8003dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc0:	4b6d      	ldr	r3, [pc, #436]	; (8003f78 <HAL_TIM_PWM_MspInit+0x1dc>)
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8003dcc:	4b6b      	ldr	r3, [pc, #428]	; (8003f7c <HAL_TIM_PWM_MspInit+0x1e0>)
 8003dce:	4a6c      	ldr	r2, [pc, #432]	; (8003f80 <HAL_TIM_PWM_MspInit+0x1e4>)
 8003dd0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8003dd2:	4b6a      	ldr	r3, [pc, #424]	; (8003f7c <HAL_TIM_PWM_MspInit+0x1e0>)
 8003dd4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003dd8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dda:	4b68      	ldr	r3, [pc, #416]	; (8003f7c <HAL_TIM_PWM_MspInit+0x1e0>)
 8003ddc:	2240      	movs	r2, #64	; 0x40
 8003dde:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8003de0:	4b66      	ldr	r3, [pc, #408]	; (8003f7c <HAL_TIM_PWM_MspInit+0x1e0>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8003de6:	4b65      	ldr	r3, [pc, #404]	; (8003f7c <HAL_TIM_PWM_MspInit+0x1e0>)
 8003de8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dec:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003dee:	4b63      	ldr	r3, [pc, #396]	; (8003f7c <HAL_TIM_PWM_MspInit+0x1e0>)
 8003df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003df4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003df6:	4b61      	ldr	r3, [pc, #388]	; (8003f7c <HAL_TIM_PWM_MspInit+0x1e0>)
 8003df8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003dfc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8003dfe:	4b5f      	ldr	r3, [pc, #380]	; (8003f7c <HAL_TIM_PWM_MspInit+0x1e0>)
 8003e00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e04:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8003e06:	4b5d      	ldr	r3, [pc, #372]	; (8003f7c <HAL_TIM_PWM_MspInit+0x1e0>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e0c:	4b5b      	ldr	r3, [pc, #364]	; (8003f7c <HAL_TIM_PWM_MspInit+0x1e0>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8003e12:	485a      	ldr	r0, [pc, #360]	; (8003f7c <HAL_TIM_PWM_MspInit+0x1e0>)
 8003e14:	f006 f828 	bl	8009e68 <HAL_DMA_Init>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 8003e1e:	f7ff fb07 	bl	8003430 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a55      	ldr	r2, [pc, #340]	; (8003f7c <HAL_TIM_PWM_MspInit+0x1e0>)
 8003e26:	625a      	str	r2, [r3, #36]	; 0x24
 8003e28:	4a54      	ldr	r2, [pc, #336]	; (8003f7c <HAL_TIM_PWM_MspInit+0x1e0>)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a52      	ldr	r2, [pc, #328]	; (8003f7c <HAL_TIM_PWM_MspInit+0x1e0>)
 8003e32:	639a      	str	r2, [r3, #56]	; 0x38
 8003e34:	4a51      	ldr	r2, [pc, #324]	; (8003f7c <HAL_TIM_PWM_MspInit+0x1e0>)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 8003e3a:	4b52      	ldr	r3, [pc, #328]	; (8003f84 <HAL_TIM_PWM_MspInit+0x1e8>)
 8003e3c:	4a52      	ldr	r2, [pc, #328]	; (8003f88 <HAL_TIM_PWM_MspInit+0x1ec>)
 8003e3e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8003e40:	4b50      	ldr	r3, [pc, #320]	; (8003f84 <HAL_TIM_PWM_MspInit+0x1e8>)
 8003e42:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003e46:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e48:	4b4e      	ldr	r3, [pc, #312]	; (8003f84 <HAL_TIM_PWM_MspInit+0x1e8>)
 8003e4a:	2240      	movs	r2, #64	; 0x40
 8003e4c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e4e:	4b4d      	ldr	r3, [pc, #308]	; (8003f84 <HAL_TIM_PWM_MspInit+0x1e8>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003e54:	4b4b      	ldr	r3, [pc, #300]	; (8003f84 <HAL_TIM_PWM_MspInit+0x1e8>)
 8003e56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e5a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e5c:	4b49      	ldr	r3, [pc, #292]	; (8003f84 <HAL_TIM_PWM_MspInit+0x1e8>)
 8003e5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e62:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e64:	4b47      	ldr	r3, [pc, #284]	; (8003f84 <HAL_TIM_PWM_MspInit+0x1e8>)
 8003e66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e6a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8003e6c:	4b45      	ldr	r3, [pc, #276]	; (8003f84 <HAL_TIM_PWM_MspInit+0x1e8>)
 8003e6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e72:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003e74:	4b43      	ldr	r3, [pc, #268]	; (8003f84 <HAL_TIM_PWM_MspInit+0x1e8>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e7a:	4b42      	ldr	r3, [pc, #264]	; (8003f84 <HAL_TIM_PWM_MspInit+0x1e8>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003e80:	4840      	ldr	r0, [pc, #256]	; (8003f84 <HAL_TIM_PWM_MspInit+0x1e8>)
 8003e82:	f005 fff1 	bl	8009e68 <HAL_DMA_Init>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_TIM_PWM_MspInit+0xf4>
    {
      Error_Handler();
 8003e8c:	f7ff fad0 	bl	8003430 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a3c      	ldr	r2, [pc, #240]	; (8003f84 <HAL_TIM_PWM_MspInit+0x1e8>)
 8003e94:	629a      	str	r2, [r3, #40]	; 0x28
 8003e96:	4a3b      	ldr	r2, [pc, #236]	; (8003f84 <HAL_TIM_PWM_MspInit+0x1e8>)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 8003e9c:	4b3b      	ldr	r3, [pc, #236]	; (8003f8c <HAL_TIM_PWM_MspInit+0x1f0>)
 8003e9e:	4a3c      	ldr	r2, [pc, #240]	; (8003f90 <HAL_TIM_PWM_MspInit+0x1f4>)
 8003ea0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 8003ea2:	4b3a      	ldr	r3, [pc, #232]	; (8003f8c <HAL_TIM_PWM_MspInit+0x1f0>)
 8003ea4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003ea8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003eaa:	4b38      	ldr	r3, [pc, #224]	; (8003f8c <HAL_TIM_PWM_MspInit+0x1f0>)
 8003eac:	2240      	movs	r2, #64	; 0x40
 8003eae:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eb0:	4b36      	ldr	r3, [pc, #216]	; (8003f8c <HAL_TIM_PWM_MspInit+0x1f0>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003eb6:	4b35      	ldr	r3, [pc, #212]	; (8003f8c <HAL_TIM_PWM_MspInit+0x1f0>)
 8003eb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ebc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ebe:	4b33      	ldr	r3, [pc, #204]	; (8003f8c <HAL_TIM_PWM_MspInit+0x1f0>)
 8003ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ec4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ec6:	4b31      	ldr	r3, [pc, #196]	; (8003f8c <HAL_TIM_PWM_MspInit+0x1f0>)
 8003ec8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ecc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 8003ece:	4b2f      	ldr	r3, [pc, #188]	; (8003f8c <HAL_TIM_PWM_MspInit+0x1f0>)
 8003ed0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ed4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003ed6:	4b2d      	ldr	r3, [pc, #180]	; (8003f8c <HAL_TIM_PWM_MspInit+0x1f0>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003edc:	4b2b      	ldr	r3, [pc, #172]	; (8003f8c <HAL_TIM_PWM_MspInit+0x1f0>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8003ee2:	482a      	ldr	r0, [pc, #168]	; (8003f8c <HAL_TIM_PWM_MspInit+0x1f0>)
 8003ee4:	f005 ffc0 	bl	8009e68 <HAL_DMA_Init>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_TIM_PWM_MspInit+0x156>
    {
      Error_Handler();
 8003eee:	f7ff fa9f 	bl	8003430 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a25      	ldr	r2, [pc, #148]	; (8003f8c <HAL_TIM_PWM_MspInit+0x1f0>)
 8003ef6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ef8:	4a24      	ldr	r2, [pc, #144]	; (8003f8c <HAL_TIM_PWM_MspInit+0x1f0>)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8003efe:	4b25      	ldr	r3, [pc, #148]	; (8003f94 <HAL_TIM_PWM_MspInit+0x1f8>)
 8003f00:	4a25      	ldr	r2, [pc, #148]	; (8003f98 <HAL_TIM_PWM_MspInit+0x1fc>)
 8003f02:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8003f04:	4b23      	ldr	r3, [pc, #140]	; (8003f94 <HAL_TIM_PWM_MspInit+0x1f8>)
 8003f06:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003f0a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f0c:	4b21      	ldr	r3, [pc, #132]	; (8003f94 <HAL_TIM_PWM_MspInit+0x1f8>)
 8003f0e:	2240      	movs	r2, #64	; 0x40
 8003f10:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f12:	4b20      	ldr	r3, [pc, #128]	; (8003f94 <HAL_TIM_PWM_MspInit+0x1f8>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8003f18:	4b1e      	ldr	r3, [pc, #120]	; (8003f94 <HAL_TIM_PWM_MspInit+0x1f8>)
 8003f1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f1e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f20:	4b1c      	ldr	r3, [pc, #112]	; (8003f94 <HAL_TIM_PWM_MspInit+0x1f8>)
 8003f22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f26:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f28:	4b1a      	ldr	r3, [pc, #104]	; (8003f94 <HAL_TIM_PWM_MspInit+0x1f8>)
 8003f2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f2e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8003f30:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <HAL_TIM_PWM_MspInit+0x1f8>)
 8003f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f36:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8003f38:	4b16      	ldr	r3, [pc, #88]	; (8003f94 <HAL_TIM_PWM_MspInit+0x1f8>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f3e:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <HAL_TIM_PWM_MspInit+0x1f8>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8003f44:	4813      	ldr	r0, [pc, #76]	; (8003f94 <HAL_TIM_PWM_MspInit+0x1f8>)
 8003f46:	f005 ff8f 	bl	8009e68 <HAL_DMA_Init>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <HAL_TIM_PWM_MspInit+0x1b8>
    {
      Error_Handler();
 8003f50:	f7ff fa6e 	bl	8003430 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a0f      	ldr	r2, [pc, #60]	; (8003f94 <HAL_TIM_PWM_MspInit+0x1f8>)
 8003f58:	631a      	str	r2, [r3, #48]	; 0x30
 8003f5a:	4a0e      	ldr	r2, [pc, #56]	; (8003f94 <HAL_TIM_PWM_MspInit+0x1f8>)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a0c      	ldr	r2, [pc, #48]	; (8003f94 <HAL_TIM_PWM_MspInit+0x1f8>)
 8003f64:	621a      	str	r2, [r3, #32]
 8003f66:	4a0b      	ldr	r2, [pc, #44]	; (8003f94 <HAL_TIM_PWM_MspInit+0x1f8>)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40000400 	.word	0x40000400
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	20000ad8 	.word	0x20000ad8
 8003f80:	40026070 	.word	0x40026070
 8003f84:	20000b38 	.word	0x20000b38
 8003f88:	40026088 	.word	0x40026088
 8003f8c:	20000a38 	.word	0x20000a38
 8003f90:	400260b8 	.word	0x400260b8
 8003f94:	20000bd8 	.word	0x20000bd8
 8003f98:	40026040 	.word	0x40026040

08003f9c <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM4)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a0b      	ldr	r2, [pc, #44]	; (8003fd8 <HAL_TIM_OC_MspInit+0x3c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d10d      	bne.n	8003fca <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <HAL_TIM_OC_MspInit+0x40>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	4a09      	ldr	r2, [pc, #36]	; (8003fdc <HAL_TIM_OC_MspInit+0x40>)
 8003fb8:	f043 0304 	orr.w	r3, r3, #4
 8003fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003fbe:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <HAL_TIM_OC_MspInit+0x40>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003fca:	bf00      	nop
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40000800 	.word	0x40000800
 8003fdc:	40023800 	.word	0x40023800

08003fe0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a0e      	ldr	r2, [pc, #56]	; (8004028 <HAL_TIM_Base_MspInit+0x48>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d115      	bne.n	800401e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	4b0d      	ldr	r3, [pc, #52]	; (800402c <HAL_TIM_Base_MspInit+0x4c>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	4a0c      	ldr	r2, [pc, #48]	; (800402c <HAL_TIM_Base_MspInit+0x4c>)
 8003ffc:	f043 0310 	orr.w	r3, r3, #16
 8004000:	6413      	str	r3, [r2, #64]	; 0x40
 8004002:	4b0a      	ldr	r3, [pc, #40]	; (800402c <HAL_TIM_Base_MspInit+0x4c>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f003 0310 	and.w	r3, r3, #16
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800400e:	2200      	movs	r2, #0
 8004010:	2100      	movs	r1, #0
 8004012:	2036      	movs	r0, #54	; 0x36
 8004014:	f005 fefe 	bl	8009e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004018:	2036      	movs	r0, #54	; 0x36
 800401a:	f005 ff17 	bl	8009e4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40001000 	.word	0x40001000
 800402c:	40023800 	.word	0x40023800

08004030 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004038:	f107 030c 	add.w	r3, r7, #12
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	60da      	str	r2, [r3, #12]
 8004046:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a12      	ldr	r2, [pc, #72]	; (8004098 <HAL_TIM_MspPostInit+0x68>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d11e      	bne.n	8004090 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	4b11      	ldr	r3, [pc, #68]	; (800409c <HAL_TIM_MspPostInit+0x6c>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	4a10      	ldr	r2, [pc, #64]	; (800409c <HAL_TIM_MspPostInit+0x6c>)
 800405c:	f043 0304 	orr.w	r3, r3, #4
 8004060:	6313      	str	r3, [r2, #48]	; 0x30
 8004062:	4b0e      	ldr	r3, [pc, #56]	; (800409c <HAL_TIM_MspPostInit+0x6c>)
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM0_Pin|PWM1_Pin|PWM2_Pin|PWM3_Pin;
 800406e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004072:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004074:	2302      	movs	r3, #2
 8004076:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800407c:	2303      	movs	r3, #3
 800407e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004080:	2302      	movs	r3, #2
 8004082:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004084:	f107 030c 	add.w	r3, r7, #12
 8004088:	4619      	mov	r1, r3
 800408a:	4805      	ldr	r0, [pc, #20]	; (80040a0 <HAL_TIM_MspPostInit+0x70>)
 800408c:	f007 fb1e 	bl	800b6cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004090:	bf00      	nop
 8004092:	3720      	adds	r7, #32
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40000400 	.word	0x40000400
 800409c:	40023800 	.word	0x40023800
 80040a0:	40020800 	.word	0x40020800

080040a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80040a8:	4b11      	ldr	r3, [pc, #68]	; (80040f0 <MX_USART1_UART_Init+0x4c>)
 80040aa:	4a12      	ldr	r2, [pc, #72]	; (80040f4 <MX_USART1_UART_Init+0x50>)
 80040ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80040ae:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <MX_USART1_UART_Init+0x4c>)
 80040b0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80040b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80040b6:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <MX_USART1_UART_Init+0x4c>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80040bc:	4b0c      	ldr	r3, [pc, #48]	; (80040f0 <MX_USART1_UART_Init+0x4c>)
 80040be:	2200      	movs	r2, #0
 80040c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80040c2:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <MX_USART1_UART_Init+0x4c>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80040c8:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <MX_USART1_UART_Init+0x4c>)
 80040ca:	220c      	movs	r2, #12
 80040cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040ce:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <MX_USART1_UART_Init+0x4c>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80040d4:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <MX_USART1_UART_Init+0x4c>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80040da:	4805      	ldr	r0, [pc, #20]	; (80040f0 <MX_USART1_UART_Init+0x4c>)
 80040dc:	f009 fe08 	bl	800dcf0 <HAL_UART_Init>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80040e6:	f7ff f9a3 	bl	8003430 <Error_Handler>
  }

}
 80040ea:	bf00      	nop
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000c78 	.word	0x20000c78
 80040f4:	40011000 	.word	0x40011000

080040f8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80040fc:	4b11      	ldr	r3, [pc, #68]	; (8004144 <MX_USART2_UART_Init+0x4c>)
 80040fe:	4a12      	ldr	r2, [pc, #72]	; (8004148 <MX_USART2_UART_Init+0x50>)
 8004100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004102:	4b10      	ldr	r3, [pc, #64]	; (8004144 <MX_USART2_UART_Init+0x4c>)
 8004104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800410a:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <MX_USART2_UART_Init+0x4c>)
 800410c:	2200      	movs	r2, #0
 800410e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004110:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <MX_USART2_UART_Init+0x4c>)
 8004112:	2200      	movs	r2, #0
 8004114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004116:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <MX_USART2_UART_Init+0x4c>)
 8004118:	2200      	movs	r2, #0
 800411a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800411c:	4b09      	ldr	r3, [pc, #36]	; (8004144 <MX_USART2_UART_Init+0x4c>)
 800411e:	220c      	movs	r2, #12
 8004120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004122:	4b08      	ldr	r3, [pc, #32]	; (8004144 <MX_USART2_UART_Init+0x4c>)
 8004124:	2200      	movs	r2, #0
 8004126:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <MX_USART2_UART_Init+0x4c>)
 800412a:	2200      	movs	r2, #0
 800412c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800412e:	4805      	ldr	r0, [pc, #20]	; (8004144 <MX_USART2_UART_Init+0x4c>)
 8004130:	f009 fdde 	bl	800dcf0 <HAL_UART_Init>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800413a:	f7ff f979 	bl	8003430 <Error_Handler>
  }

}
 800413e:	bf00      	nop
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20000cb8 	.word	0x20000cb8
 8004148:	40004400 	.word	0x40004400

0800414c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8004150:	4b11      	ldr	r3, [pc, #68]	; (8004198 <MX_USART3_UART_Init+0x4c>)
 8004152:	4a12      	ldr	r2, [pc, #72]	; (800419c <MX_USART3_UART_Init+0x50>)
 8004154:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8004156:	4b10      	ldr	r3, [pc, #64]	; (8004198 <MX_USART3_UART_Init+0x4c>)
 8004158:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800415c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800415e:	4b0e      	ldr	r3, [pc, #56]	; (8004198 <MX_USART3_UART_Init+0x4c>)
 8004160:	2200      	movs	r2, #0
 8004162:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <MX_USART3_UART_Init+0x4c>)
 8004166:	2200      	movs	r2, #0
 8004168:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800416a:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <MX_USART3_UART_Init+0x4c>)
 800416c:	2200      	movs	r2, #0
 800416e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <MX_USART3_UART_Init+0x4c>)
 8004172:	220c      	movs	r2, #12
 8004174:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004176:	4b08      	ldr	r3, [pc, #32]	; (8004198 <MX_USART3_UART_Init+0x4c>)
 8004178:	2200      	movs	r2, #0
 800417a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <MX_USART3_UART_Init+0x4c>)
 800417e:	2200      	movs	r2, #0
 8004180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004182:	4805      	ldr	r0, [pc, #20]	; (8004198 <MX_USART3_UART_Init+0x4c>)
 8004184:	f009 fdb4 	bl	800dcf0 <HAL_UART_Init>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800418e:	f7ff f94f 	bl	8003430 <Error_Handler>
  }

}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000c38 	.word	0x20000c38
 800419c:	40004800 	.word	0x40004800

080041a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08e      	sub	sp, #56	; 0x38
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	605a      	str	r2, [r3, #4]
 80041b2:	609a      	str	r2, [r3, #8]
 80041b4:	60da      	str	r2, [r3, #12]
 80041b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a58      	ldr	r2, [pc, #352]	; (8004320 <HAL_UART_MspInit+0x180>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d135      	bne.n	800422e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	623b      	str	r3, [r7, #32]
 80041c6:	4b57      	ldr	r3, [pc, #348]	; (8004324 <HAL_UART_MspInit+0x184>)
 80041c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ca:	4a56      	ldr	r2, [pc, #344]	; (8004324 <HAL_UART_MspInit+0x184>)
 80041cc:	f043 0310 	orr.w	r3, r3, #16
 80041d0:	6453      	str	r3, [r2, #68]	; 0x44
 80041d2:	4b54      	ldr	r3, [pc, #336]	; (8004324 <HAL_UART_MspInit+0x184>)
 80041d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	623b      	str	r3, [r7, #32]
 80041dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	4b50      	ldr	r3, [pc, #320]	; (8004324 <HAL_UART_MspInit+0x184>)
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	4a4f      	ldr	r2, [pc, #316]	; (8004324 <HAL_UART_MspInit+0x184>)
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	6313      	str	r3, [r2, #48]	; 0x30
 80041ee:	4b4d      	ldr	r3, [pc, #308]	; (8004324 <HAL_UART_MspInit+0x184>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	61fb      	str	r3, [r7, #28]
 80041f8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM_RxD_Pin|SIM_TxD_Pin;
 80041fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004200:	2302      	movs	r3, #2
 8004202:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004204:	2300      	movs	r3, #0
 8004206:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004208:	2303      	movs	r3, #3
 800420a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800420c:	2307      	movs	r3, #7
 800420e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004214:	4619      	mov	r1, r3
 8004216:	4844      	ldr	r0, [pc, #272]	; (8004328 <HAL_UART_MspInit+0x188>)
 8004218:	f007 fa58 	bl	800b6cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800421c:	2200      	movs	r2, #0
 800421e:	2100      	movs	r1, #0
 8004220:	2025      	movs	r0, #37	; 0x25
 8004222:	f005 fdf7 	bl	8009e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004226:	2025      	movs	r0, #37	; 0x25
 8004228:	f005 fe10 	bl	8009e4c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800422c:	e073      	b.n	8004316 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART2)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a3e      	ldr	r2, [pc, #248]	; (800432c <HAL_UART_MspInit+0x18c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d134      	bne.n	80042a2 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004238:	2300      	movs	r3, #0
 800423a:	61bb      	str	r3, [r7, #24]
 800423c:	4b39      	ldr	r3, [pc, #228]	; (8004324 <HAL_UART_MspInit+0x184>)
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	4a38      	ldr	r2, [pc, #224]	; (8004324 <HAL_UART_MspInit+0x184>)
 8004242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004246:	6413      	str	r3, [r2, #64]	; 0x40
 8004248:	4b36      	ldr	r3, [pc, #216]	; (8004324 <HAL_UART_MspInit+0x184>)
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	4b32      	ldr	r3, [pc, #200]	; (8004324 <HAL_UART_MspInit+0x184>)
 800425a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425c:	4a31      	ldr	r2, [pc, #196]	; (8004324 <HAL_UART_MspInit+0x184>)
 800425e:	f043 0308 	orr.w	r3, r3, #8
 8004262:	6313      	str	r3, [r2, #48]	; 0x30
 8004264:	4b2f      	ldr	r3, [pc, #188]	; (8004324 <HAL_UART_MspInit+0x184>)
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	617b      	str	r3, [r7, #20]
 800426e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RS485_RxD_Pin|RS485_TxD_Pin;
 8004270:	2360      	movs	r3, #96	; 0x60
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004274:	2302      	movs	r3, #2
 8004276:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004278:	2300      	movs	r3, #0
 800427a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800427c:	2303      	movs	r3, #3
 800427e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004280:	2307      	movs	r3, #7
 8004282:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004288:	4619      	mov	r1, r3
 800428a:	4829      	ldr	r0, [pc, #164]	; (8004330 <HAL_UART_MspInit+0x190>)
 800428c:	f007 fa1e 	bl	800b6cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004290:	2200      	movs	r2, #0
 8004292:	2100      	movs	r1, #0
 8004294:	2026      	movs	r0, #38	; 0x26
 8004296:	f005 fdbd 	bl	8009e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800429a:	2026      	movs	r0, #38	; 0x26
 800429c:	f005 fdd6 	bl	8009e4c <HAL_NVIC_EnableIRQ>
}
 80042a0:	e039      	b.n	8004316 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART3)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a23      	ldr	r2, [pc, #140]	; (8004334 <HAL_UART_MspInit+0x194>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d134      	bne.n	8004316 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 80042ac:	2300      	movs	r3, #0
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <HAL_UART_MspInit+0x184>)
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	4a1b      	ldr	r2, [pc, #108]	; (8004324 <HAL_UART_MspInit+0x184>)
 80042b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042ba:	6413      	str	r3, [r2, #64]	; 0x40
 80042bc:	4b19      	ldr	r3, [pc, #100]	; (8004324 <HAL_UART_MspInit+0x184>)
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042c4:	613b      	str	r3, [r7, #16]
 80042c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	4b15      	ldr	r3, [pc, #84]	; (8004324 <HAL_UART_MspInit+0x184>)
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	4a14      	ldr	r2, [pc, #80]	; (8004324 <HAL_UART_MspInit+0x184>)
 80042d2:	f043 0304 	orr.w	r3, r3, #4
 80042d6:	6313      	str	r3, [r2, #48]	; 0x30
 80042d8:	4b12      	ldr	r3, [pc, #72]	; (8004324 <HAL_UART_MspInit+0x184>)
 80042da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = COM_RxD_Pin|COM_TxD_Pin;
 80042e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ea:	2302      	movs	r3, #2
 80042ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042f2:	2303      	movs	r3, #3
 80042f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80042f6:	2307      	movs	r3, #7
 80042f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042fe:	4619      	mov	r1, r3
 8004300:	480d      	ldr	r0, [pc, #52]	; (8004338 <HAL_UART_MspInit+0x198>)
 8004302:	f007 f9e3 	bl	800b6cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004306:	2200      	movs	r2, #0
 8004308:	2100      	movs	r1, #0
 800430a:	2027      	movs	r0, #39	; 0x27
 800430c:	f005 fd82 	bl	8009e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004310:	2027      	movs	r0, #39	; 0x27
 8004312:	f005 fd9b 	bl	8009e4c <HAL_NVIC_EnableIRQ>
}
 8004316:	bf00      	nop
 8004318:	3738      	adds	r7, #56	; 0x38
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40011000 	.word	0x40011000
 8004324:	40023800 	.word	0x40023800
 8004328:	40020000 	.word	0x40020000
 800432c:	40004400 	.word	0x40004400
 8004330:	40020c00 	.word	0x40020c00
 8004334:	40004800 	.word	0x40004800
 8004338:	40020800 	.word	0x40020800

0800433c <dbg_available>:
volatile dbg_rx_buffer_index_t dbg_rx_buffer_head = 0;
volatile dbg_rx_buffer_index_t dbg_rx_buffer_tail = 0;
uint8_t dbg_rx_buffer[DBG_RX_BUFFER_SIZE] = {0,};

int16_t dbg_available(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
	return ((uint16_t)(DBG_RX_BUFFER_SIZE + dbg_rx_buffer_head - dbg_rx_buffer_tail)) % DBG_RX_BUFFER_SIZE;
 8004340:	4b08      	ldr	r3, [pc, #32]	; (8004364 <dbg_available+0x28>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	b2da      	uxtb	r2, r3
 8004346:	4b08      	ldr	r3, [pc, #32]	; (8004368 <dbg_available+0x2c>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	b2db      	uxtb	r3, r3
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	b2db      	uxtb	r3, r3
 8004350:	b21b      	sxth	r3, r3
 8004352:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004356:	b21b      	sxth	r3, r3
}
 8004358:	4618      	mov	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	20000374 	.word	0x20000374
 8004368:	20000375 	.word	0x20000375

0800436c <dbg_read>:

int16_t dbg_read(void)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
	if(dbg_rx_buffer_head == dbg_rx_buffer_tail)
 8004372:	4b12      	ldr	r3, [pc, #72]	; (80043bc <dbg_read+0x50>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	b2da      	uxtb	r2, r3
 8004378:	4b11      	ldr	r3, [pc, #68]	; (80043c0 <dbg_read+0x54>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	429a      	cmp	r2, r3
 8004380:	d102      	bne.n	8004388 <dbg_read+0x1c>
	{
		return -1;
 8004382:	f04f 33ff 	mov.w	r3, #4294967295
 8004386:	e012      	b.n	80043ae <dbg_read+0x42>
	}
	else
	{
		uint8_t c = dbg_rx_buffer[dbg_rx_buffer_tail];
 8004388:	4b0d      	ldr	r3, [pc, #52]	; (80043c0 <dbg_read+0x54>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	b2db      	uxtb	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <dbg_read+0x58>)
 8004392:	5c9b      	ldrb	r3, [r3, r2]
 8004394:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_tail = (dbg_rx_buffer_index_t)(dbg_rx_buffer_tail + 1) % DBG_RX_BUFFER_SIZE;
 8004396:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <dbg_read+0x54>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	b2db      	uxtb	r3, r3
 800439c:	3301      	adds	r3, #1
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <dbg_read+0x54>)
 80043a8:	701a      	strb	r2, [r3, #0]
		return c;
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	b21b      	sxth	r3, r3
	}
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	20000374 	.word	0x20000374
 80043c0:	20000375 	.word	0x20000375
 80043c4:	20000378 	.word	0x20000378

080043c8 <EN_Interrupt>:
		return c;
	}
}
//-----------------------------------------------------------------------------------------------------------------
void EN_Interrupt(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80043cc:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <EN_Interrupt+0x40>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	4b0d      	ldr	r3, [pc, #52]	; (8004408 <EN_Interrupt+0x40>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0220 	orr.w	r2, r2, #32
 80043da:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80043dc:	4b0b      	ldr	r3, [pc, #44]	; (800440c <EN_Interrupt+0x44>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	4b0a      	ldr	r3, [pc, #40]	; (800440c <EN_Interrupt+0x44>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0220 	orr.w	r2, r2, #32
 80043ea:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80043ec:	4b08      	ldr	r3, [pc, #32]	; (8004410 <EN_Interrupt+0x48>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	4b07      	ldr	r3, [pc, #28]	; (8004410 <EN_Interrupt+0x48>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0220 	orr.w	r2, r2, #32
 80043fa:	60da      	str	r2, [r3, #12]

	//__HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_RXNE);
}
 80043fc:	bf00      	nop
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	20000c78 	.word	0x20000c78
 800440c:	20000c38 	.word	0x20000c38
 8004410:	20000cb8 	.word	0x20000cb8

08004414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800444c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004418:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800441a:	e003      	b.n	8004424 <LoopCopyDataInit>

0800441c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800441c:	4b0c      	ldr	r3, [pc, #48]	; (8004450 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800441e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004420:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004422:	3104      	adds	r1, #4

08004424 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004424:	480b      	ldr	r0, [pc, #44]	; (8004454 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004426:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004428:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800442a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800442c:	d3f6      	bcc.n	800441c <CopyDataInit>
  ldr  r2, =_sbss
 800442e:	4a0b      	ldr	r2, [pc, #44]	; (800445c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004430:	e002      	b.n	8004438 <LoopFillZerobss>

08004432 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004432:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004434:	f842 3b04 	str.w	r3, [r2], #4

08004438 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004438:	4b09      	ldr	r3, [pc, #36]	; (8004460 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800443a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800443c:	d3f9      	bcc.n	8004432 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800443e:	f7ff fb8f 	bl	8003b60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004442:	f016 f97f 	bl	801a744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004446:	f7fe fe93 	bl	8003170 <main>
  bx  lr    
 800444a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800444c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004450:	08023ea0 	.word	0x08023ea0
  ldr  r0, =_sdata
 8004454:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004458:	20000258 	.word	0x20000258
  ldr  r2, =_sbss
 800445c:	20000258 	.word	0x20000258
  ldr  r3, = _ebss
 8004460:	20007670 	.word	0x20007670

08004464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004464:	e7fe      	b.n	8004464 <ADC_IRQHandler>
	...

08004468 <DWT_Init>:
 */
#include "main.h"

//Функция инициализации DWT таймера
void DWT_Init(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;	//Разрешаем использовать счётчик
 800446c:	4b08      	ldr	r3, [pc, #32]	; (8004490 <DWT_Init+0x28>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a07      	ldr	r2, [pc, #28]	; (8004490 <DWT_Init+0x28>)
 8004472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004476:	6013      	str	r3, [r2, #0]
    DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;		//Запускаем счётчик
 8004478:	4b06      	ldr	r3, [pc, #24]	; (8004494 <DWT_Init+0x2c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a05      	ldr	r2, [pc, #20]	; (8004494 <DWT_Init+0x2c>)
 800447e:	f043 0301 	orr.w	r3, r3, #1
 8004482:	6013      	str	r3, [r2, #0]
}
 8004484:	bf00      	nop
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	e000edfc 	.word	0xe000edfc
 8004494:	e0001000 	.word	0xe0001000

08004498 <delay_micros>:
//Функция временной задержки в мкс
//Принимает "us" - значение в микросекундах
void delay_micros(uint32_t us)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);	//Получаем кол-во тактов за 1 мкс и умножаем на наше значение
 80044a0:	4b0c      	ldr	r3, [pc, #48]	; (80044d4 <delay_micros+0x3c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a0c      	ldr	r2, [pc, #48]	; (80044d8 <delay_micros+0x40>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	0c9a      	lsrs	r2, r3, #18
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	fb02 f303 	mul.w	r3, r2, r3
 80044b2:	60fb      	str	r3, [r7, #12]
    DWT->CYCCNT = 0U; 											//Обнуляем счётчик
 80044b4:	4b09      	ldr	r3, [pc, #36]	; (80044dc <delay_micros+0x44>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 80044ba:	bf00      	nop
 80044bc:	4b07      	ldr	r3, [pc, #28]	; (80044dc <delay_micros+0x44>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d8fa      	bhi.n	80044bc <delay_micros+0x24>
}
 80044c6:	bf00      	nop
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20000008 	.word	0x20000008
 80044d8:	431bde83 	.word	0x431bde83
 80044dc:	e0001000 	.word	0xe0001000

080044e0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	6039      	str	r1, [r7, #0]
 80044ea:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
 80044ec:	88fb      	ldrh	r3, [r7, #6]
 80044ee:	2b7f      	cmp	r3, #127	; 0x7f
 80044f0:	d802      	bhi.n	80044f8 <ff_convert+0x18>
		c = src;
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	81fb      	strh	r3, [r7, #14]
 80044f6:	e025      	b.n	8004544 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00b      	beq.n	8004516 <ff_convert+0x36>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	2bff      	cmp	r3, #255	; 0xff
 8004502:	d805      	bhi.n	8004510 <ff_convert+0x30>
 8004504:	88fb      	ldrh	r3, [r7, #6]
 8004506:	3b80      	subs	r3, #128	; 0x80
 8004508:	4a12      	ldr	r2, [pc, #72]	; (8004554 <ff_convert+0x74>)
 800450a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800450e:	e000      	b.n	8004512 <ff_convert+0x32>
 8004510:	2300      	movs	r3, #0
 8004512:	81fb      	strh	r3, [r7, #14]
 8004514:	e016      	b.n	8004544 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8004516:	2300      	movs	r3, #0
 8004518:	81fb      	strh	r3, [r7, #14]
 800451a:	e009      	b.n	8004530 <ff_convert+0x50>
				if (src == Tbl[c]) break;
 800451c:	89fb      	ldrh	r3, [r7, #14]
 800451e:	4a0d      	ldr	r2, [pc, #52]	; (8004554 <ff_convert+0x74>)
 8004520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004524:	88fa      	ldrh	r2, [r7, #6]
 8004526:	429a      	cmp	r2, r3
 8004528:	d006      	beq.n	8004538 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800452a:	89fb      	ldrh	r3, [r7, #14]
 800452c:	3301      	adds	r3, #1
 800452e:	81fb      	strh	r3, [r7, #14]
 8004530:	89fb      	ldrh	r3, [r7, #14]
 8004532:	2b7f      	cmp	r3, #127	; 0x7f
 8004534:	d9f2      	bls.n	800451c <ff_convert+0x3c>
 8004536:	e000      	b.n	800453a <ff_convert+0x5a>
				if (src == Tbl[c]) break;
 8004538:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800453a:	89fb      	ldrh	r3, [r7, #14]
 800453c:	3380      	adds	r3, #128	; 0x80
 800453e:	b29b      	uxth	r3, r3
 8004540:	b2db      	uxtb	r3, r3
 8004542:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8004544:	89fb      	ldrh	r3, [r7, #14]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	080234e4 	.word	0x080234e4

08004558 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8004562:	2300      	movs	r3, #0
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	e002      	b.n	800456e <ff_wtoupper+0x16>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	3301      	adds	r3, #1
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	4a0f      	ldr	r2, [pc, #60]	; (80045ac <ff_wtoupper+0x54>)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d006      	beq.n	8004588 <ff_wtoupper+0x30>
 800457a:	4a0c      	ldr	r2, [pc, #48]	; (80045ac <ff_wtoupper+0x54>)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004582:	88fa      	ldrh	r2, [r7, #6]
 8004584:	429a      	cmp	r2, r3
 8004586:	d1ef      	bne.n	8004568 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8004588:	4a08      	ldr	r2, [pc, #32]	; (80045ac <ff_wtoupper+0x54>)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d004      	beq.n	800459e <ff_wtoupper+0x46>
 8004594:	4a06      	ldr	r2, [pc, #24]	; (80045b0 <ff_wtoupper+0x58>)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800459c:	e000      	b.n	80045a0 <ff_wtoupper+0x48>
 800459e:	88fb      	ldrh	r3, [r7, #6]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	080235e4 	.word	0x080235e4
 80045b0:	080237c4 	.word	0x080237c4

080045b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	613b      	str	r3, [r7, #16]

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
 80045c8:	e00c      	b.n	80045e4 <mem_cpy+0x30>
		*(int*)d = *(int*)s;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	601a      	str	r2, [r3, #0]
		d += sizeof (int); s += sizeof (int);
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	3304      	adds	r3, #4
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	3304      	adds	r3, #4
 80045dc:	613b      	str	r3, [r7, #16]
		cnt -= sizeof (int);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3b04      	subs	r3, #4
 80045e2:	607b      	str	r3, [r7, #4]
	while (cnt >= sizeof (int)) {
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d8ef      	bhi.n	80045ca <mem_cpy+0x16>
	}
#endif
	while (cnt--)
 80045ea:	e007      	b.n	80045fc <mem_cpy+0x48>
		*d++ = *s++;
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	1c53      	adds	r3, r2, #1
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	1c59      	adds	r1, r3, #1
 80045f6:	6179      	str	r1, [r7, #20]
 80045f8:	7812      	ldrb	r2, [r2, #0]
 80045fa:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	1e5a      	subs	r2, r3, #1
 8004600:	607a      	str	r2, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f2      	bne.n	80045ec <mem_cpy+0x38>
}
 8004606:	bf00      	nop
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004612:	b480      	push	{r7}
 8004614:	b087      	sub	sp, #28
 8004616:	af00      	add	r7, sp, #0
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004622:	e005      	b.n	8004630 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	617a      	str	r2, [r7, #20]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	1e5a      	subs	r2, r3, #1
 8004634:	607a      	str	r2, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f4      	bne.n	8004624 <mem_set+0x12>
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004646:	b480      	push	{r7}
 8004648:	b089      	sub	sp, #36	; 0x24
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800465a:	2300      	movs	r3, #0
 800465c:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800465e:	bf00      	nop
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	1e5a      	subs	r2, r3, #1
 8004664:	607a      	str	r2, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00d      	beq.n	8004686 <mem_cmp+0x40>
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	61fa      	str	r2, [r7, #28]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	4619      	mov	r1, r3
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	61ba      	str	r2, [r7, #24]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	1acb      	subs	r3, r1, r3
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0ec      	beq.n	8004660 <mem_cmp+0x1a>
	return r;
 8004686:	697b      	ldr	r3, [r7, #20]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3724      	adds	r7, #36	; 0x24
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800469e:	e002      	b.n	80046a6 <chk_chr+0x12>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3301      	adds	r3, #1
 80046a4:	607b      	str	r3, [r7, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d005      	beq.n	80046ba <chk_chr+0x26>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d1f2      	bne.n	80046a0 <chk_chr+0xc>
	return *str;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	781b      	ldrb	r3, [r3, #0]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS *fs		/* File system object */
)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;

	
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	791b      	ldrb	r3, [r3, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d038      	beq.n	800474c <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046de:	60fb      	str	r3, [r7, #12]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	7858      	ldrb	r0, [r3, #1]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80046ea:	2301      	movs	r3, #1
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	f002 ffd9 	bl	80076a4 <disk_write>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <sync_window+0x32>
			return FR_DISK_ERR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e028      	b.n	800474e <sync_window+0x84>
		fs->wflag = 0;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	711a      	strb	r2, [r3, #4]
		if (wsect >= fs->fatbase && wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area? */
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	429a      	cmp	r2, r3
 800470a:	d31f      	bcc.n	800474c <sync_window+0x82>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	4413      	add	r3, r2
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	429a      	cmp	r2, r3
 800471a:	d217      	bcs.n	800474c <sync_window+0x82>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	78db      	ldrb	r3, [r3, #3]
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	e010      	b.n	8004746 <sync_window+0x7c>
				wsect += fs->fsize;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4413      	add	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
				disk_write(fs->drv, fs->win, wsect, 1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	7858      	ldrb	r0, [r3, #1]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004738:	2301      	movs	r3, #1
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	f002 ffb2 	bl	80076a4 <disk_write>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	3b01      	subs	r3, #1
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d8eb      	bhi.n	8004724 <sync_window+0x5a>
			}
		}
	}
	return FR_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b082      	sub	sp, #8
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	6039      	str	r1, [r7, #0]
	if (sector != fs->winsect) {	/* Changed current window */
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d018      	beq.n	800479c <move_window+0x46>
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff ffad 	bl	80046ca <sync_window>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <move_window+0x24>
			return FR_DISK_ERR;
 8004776:	2301      	movs	r3, #1
 8004778:	e011      	b.n	800479e <move_window+0x48>
#endif
		if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	7858      	ldrb	r0, [r3, #1]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004784:	2301      	movs	r3, #1
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	f002 ff24 	bl	80075d4 <disk_read>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <move_window+0x40>
			return FR_DISK_ERR;
 8004792:	2301      	movs	r3, #1
 8004794:	e003      	b.n	800479e <move_window+0x48>
		fs->winsect = sector;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return FR_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs		/* File system object */
)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff ff8a 	bl	80046ca <sync_window>
 80047b6:	4603      	mov	r3, r0
 80047b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d14a      	bne.n	8004856 <sync_fs+0xae>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d13a      	bne.n	800483e <sync_fs+0x96>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	795b      	ldrb	r3, [r3, #5]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d036      	beq.n	800483e <sync_fs+0x96>
			fs->winsect = 0;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	635a      	str	r2, [r3, #52]	; 0x34
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3338      	adds	r3, #56	; 0x38
 80047da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047de:	2100      	movs	r1, #0
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff ff16 	bl	8004612 <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3338      	adds	r3, #56	; 0x38
 80047ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80047ee:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80047f2:	801a      	strh	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3338      	adds	r3, #56	; 0x38
 80047f8:	4a19      	ldr	r2, [pc, #100]	; (8004860 <sync_fs+0xb8>)
 80047fa:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3338      	adds	r3, #56	; 0x38
 8004800:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004804:	4a17      	ldr	r2, [pc, #92]	; (8004864 <sync_fs+0xbc>)
 8004806:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3338      	adds	r3, #56	; 0x38
 800480c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6912      	ldr	r2, [r2, #16]
 8004814:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	3338      	adds	r3, #56	; 0x38
 800481a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68d2      	ldr	r2, [r2, #12]
 8004822:	601a      	str	r2, [r3, #0]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	7858      	ldrb	r0, [r3, #1]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695a      	ldr	r2, [r3, #20]
 8004832:	2301      	movs	r3, #1
 8004834:	f002 ff36 	bl	80076a4 <disk_write>
			fs->fsi_flag = 0;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	785b      	ldrb	r3, [r3, #1]
 8004842:	2200      	movs	r2, #0
 8004844:	2100      	movs	r1, #0
 8004846:	4618      	mov	r0, r3
 8004848:	f002 ffac 	bl	80077a4 <disk_ioctl>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <sync_fs+0xae>
			res = FR_DISK_ERR;
 8004852:	2301      	movs	r3, #1
 8004854:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004856:	7bfb      	ldrb	r3, [r7, #15]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	41615252 	.word	0x41615252
 8004864:	61417272 	.word	0x61417272

08004868 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	3b02      	subs	r3, #2
 8004876:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	3b02      	subs	r3, #2
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d301      	bcc.n	8004888 <clust2sect+0x20>
 8004884:	2300      	movs	r3, #0
 8004886:	e008      	b.n	800489a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	789b      	ldrb	r3, [r3, #2]
 800488c:	461a      	mov	r2, r3
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	fb03 f202 	mul.w	r2, r3, r2
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	4413      	add	r3, r2
}
 800489a:	4618      	mov	r0, r3
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b086      	sub	sp, #24
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d904      	bls.n	80048c0 <get_fat+0x1a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d301      	bcc.n	80048c4 <get_fat+0x1e>
		return 1;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e082      	b.n	80049ca <get_fat+0x124>

	switch (fs->fs_type) {
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d045      	beq.n	8004958 <get_fat+0xb2>
 80048cc:	2b03      	cmp	r3, #3
 80048ce:	d05a      	beq.n	8004986 <get_fat+0xe0>
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d178      	bne.n	80049c6 <get_fat+0x120>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	613b      	str	r3, [r7, #16]
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	085b      	lsrs	r3, r3, #1
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4413      	add	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	0a5b      	lsrs	r3, r3, #9
 80048ea:	4413      	add	r3, r2
 80048ec:	4619      	mov	r1, r3
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7ff ff31 	bl	8004756 <move_window>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d15e      	bne.n	80049b8 <get_fat+0x112>
		wc = fs->win[bc % SS(fs)]; bc++;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	4413      	add	r3, r2
 8004904:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	3301      	adds	r3, #1
 800490e:	613b      	str	r3, [r7, #16]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	0a5b      	lsrs	r3, r3, #9
 8004918:	4413      	add	r3, r2
 800491a:	4619      	mov	r1, r3
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff ff1a 	bl	8004756 <move_window>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d149      	bne.n	80049bc <get_fat+0x116>
		wc |= fs->win[bc % SS(fs)] << 8;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	4413      	add	r3, r2
 8004932:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004936:	021b      	lsls	r3, r3, #8
 8004938:	461a      	mov	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <get_fat+0xaa>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	091b      	lsrs	r3, r3, #4
 800494e:	e03c      	b.n	80049ca <get_fat+0x124>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004956:	e038      	b.n	80049ca <get_fat+0x124>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	0a1b      	lsrs	r3, r3, #8
 8004960:	4413      	add	r3, r2
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff fef6 	bl	8004756 <move_window>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d127      	bne.n	80049c0 <get_fat+0x11a>
		p = &fs->win[clst * 2 % SS(fs)];
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004978:	3338      	adds	r3, #56	; 0x38
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	4413      	add	r3, r2
 800497e:	617b      	str	r3, [r7, #20]
		return LD_WORD(p);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	e021      	b.n	80049ca <get_fat+0x124>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	09db      	lsrs	r3, r3, #7
 800498e:	4413      	add	r3, r2
 8004990:	4619      	mov	r1, r3
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff fedf 	bl	8004756 <move_window>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d112      	bne.n	80049c4 <get_fat+0x11e>
		p = &fs->win[clst * 4 % SS(fs)];
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80049a6:	3338      	adds	r3, #56	; 0x38
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	4413      	add	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]
		return LD_DWORD(p) & 0x0FFFFFFF;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80049b6:	e008      	b.n	80049ca <get_fat+0x124>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 80049b8:	bf00      	nop
 80049ba:	e004      	b.n	80049c6 <get_fat+0x120>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 80049bc:	bf00      	nop
 80049be:	e002      	b.n	80049c6 <get_fat+0x120>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 80049c0:	bf00      	nop
 80049c2:	e000      	b.n	80049c6 <get_fat+0x120>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 80049c4:	bf00      	nop
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 80049c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b088      	sub	sp, #32
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d904      	bls.n	80049ee <put_fat+0x1c>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d302      	bcc.n	80049f4 <put_fat+0x22>
		res = FR_INT_ERR;
 80049ee:	2302      	movs	r3, #2
 80049f0:	77fb      	strb	r3, [r7, #31]
 80049f2:	e0bc      	b.n	8004b6e <put_fat+0x19c>

	} else {
		switch (fs->fs_type) {
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d06f      	beq.n	8004adc <put_fat+0x10a>
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	f000 8088 	beq.w	8004b12 <put_fat+0x140>
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	f040 80a6 	bne.w	8004b54 <put_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	085b      	lsrs	r3, r3, #1
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4413      	add	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	0a5b      	lsrs	r3, r3, #9
 8004a1e:	4413      	add	r3, r2
 8004a20:	4619      	mov	r1, r3
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f7ff fe97 	bl	8004756 <move_window>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a2c:	7ffb      	ldrb	r3, [r7, #31]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f040 8093 	bne.w	8004b5a <put_fat+0x188>
			p = &fs->win[bc % SS(fs)];
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3a:	3338      	adds	r3, #56	; 0x38
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	4413      	add	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00d      	beq.n	8004a68 <put_fat+0x96>
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	b25b      	sxtb	r3, r3
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	b25a      	sxtb	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	b25b      	sxtb	r3, r3
 8004a60:	4313      	orrs	r3, r2
 8004a62:	b25b      	sxtb	r3, r3
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	e001      	b.n	8004a6c <put_fat+0x9a>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	7013      	strb	r3, [r2, #0]
			bc++;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	3301      	adds	r3, #1
 8004a74:	617b      	str	r3, [r7, #20]
			fs->wflag = 1;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	0a5b      	lsrs	r3, r3, #9
 8004a84:	4413      	add	r3, r2
 8004a86:	4619      	mov	r1, r3
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f7ff fe64 	bl	8004756 <move_window>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a92:	7ffb      	ldrb	r3, [r7, #31]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d162      	bne.n	8004b5e <put_fat+0x18c>
			p = &fs->win[bc % SS(fs)];
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9e:	3338      	adds	r3, #56	; 0x38
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <put_fat+0xe6>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	e00e      	b.n	8004ad6 <put_fat+0x104>
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	b25b      	sxtb	r3, r3
 8004abe:	f023 030f 	bic.w	r3, r3, #15
 8004ac2:	b25a      	sxtb	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	0a1b      	lsrs	r3, r3, #8
 8004ac8:	b25b      	sxtb	r3, r3
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	b25b      	sxtb	r3, r3
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	b25b      	sxtb	r3, r3
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	7013      	strb	r3, [r2, #0]
			break;
 8004ada:	e045      	b.n	8004b68 <put_fat+0x196>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	0a1b      	lsrs	r3, r3, #8
 8004ae4:	4413      	add	r3, r2
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f7ff fe34 	bl	8004756 <move_window>
 8004aee:	4603      	mov	r3, r0
 8004af0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004af2:	7ffb      	ldrb	r3, [r7, #31]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d134      	bne.n	8004b62 <put_fat+0x190>
			p = &fs->win[clst * 2 % SS(fs)];
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004b00:	3338      	adds	r3, #56	; 0x38
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4413      	add	r3, r2
 8004b06:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	801a      	strh	r2, [r3, #0]
			break;
 8004b10:	e02a      	b.n	8004b68 <put_fat+0x196>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	09db      	lsrs	r3, r3, #7
 8004b1a:	4413      	add	r3, r2
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f7ff fe19 	bl	8004756 <move_window>
 8004b24:	4603      	mov	r3, r0
 8004b26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b28:	7ffb      	ldrb	r3, [r7, #31]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d11b      	bne.n	8004b66 <put_fat+0x194>
			p = &fs->win[clst * 4 % SS(fs)];
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004b36:	3338      	adds	r3, #56	; 0x38
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	601a      	str	r2, [r3, #0]
			break;
 8004b52:	e009      	b.n	8004b68 <put_fat+0x196>

		default :
			res = FR_INT_ERR;
 8004b54:	2302      	movs	r3, #2
 8004b56:	77fb      	strb	r3, [r7, #31]
 8004b58:	e006      	b.n	8004b68 <put_fat+0x196>
			if (res != FR_OK) break;
 8004b5a:	bf00      	nop
 8004b5c:	e004      	b.n	8004b68 <put_fat+0x196>
			if (res != FR_OK) break;
 8004b5e:	bf00      	nop
 8004b60:	e002      	b.n	8004b68 <put_fat+0x196>
			if (res != FR_OK) break;
 8004b62:	bf00      	nop
 8004b64:	e000      	b.n	8004b68 <put_fat+0x196>
			if (res != FR_OK) break;
 8004b66:	bf00      	nop
		}
		fs->wflag = 1;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	711a      	strb	r2, [r3, #4]
	}

	return res;
 8004b6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3720      	adds	r7, #32
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d904      	bls.n	8004b92 <remove_chain+0x1a>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d302      	bcc.n	8004b98 <remove_chain+0x20>
		res = FR_INT_ERR;
 8004b92:	2302      	movs	r3, #2
 8004b94:	73fb      	strb	r3, [r7, #15]
 8004b96:	e039      	b.n	8004c0c <remove_chain+0x94>

	} else {
		res = FR_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004b9c:	e02d      	b.n	8004bfa <remove_chain+0x82>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004b9e:	6839      	ldr	r1, [r7, #0]
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff fe80 	bl	80048a6 <get_fat>
 8004ba6:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d02b      	beq.n	8004c06 <remove_chain+0x8e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d102      	bne.n	8004bba <remove_chain+0x42>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	73fb      	strb	r3, [r7, #15]
 8004bb8:	e028      	b.n	8004c0c <remove_chain+0x94>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc0:	d102      	bne.n	8004bc8 <remove_chain+0x50>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	73fb      	strb	r3, [r7, #15]
 8004bc6:	e021      	b.n	8004c0c <remove_chain+0x94>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004bc8:	2200      	movs	r2, #0
 8004bca:	6839      	ldr	r1, [r7, #0]
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff ff00 	bl	80049d2 <put_fat>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d116      	bne.n	8004c0a <remove_chain+0x92>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be4:	d007      	beq.n	8004bf6 <remove_chain+0x7e>
				fs->free_clust++;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, rt);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d3cc      	bcc.n	8004b9e <remove_chain+0x26>
 8004c04:	e002      	b.n	8004c0c <remove_chain+0x94>
			if (nxt == 0) break;				/* Empty cluster? */
 8004c06:	bf00      	nop
 8004c08:	e000      	b.n	8004c0c <remove_chain+0x94>
			if (res != FR_OK) break;
 8004c0a:	bf00      	nop
		}
	}

	return res;
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b086      	sub	sp, #24
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10d      	bne.n	8004c42 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d004      	beq.n	8004c3c <create_chain+0x26>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d315      	bcc.n	8004c68 <create_chain+0x52>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	e012      	b.n	8004c68 <create_chain+0x52>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004c42:	6839      	ldr	r1, [r7, #0]
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff fe2e 	bl	80048a6 <get_fat>
 8004c4a:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d801      	bhi.n	8004c56 <create_chain+0x40>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e064      	b.n	8004d20 <create_chain+0x10a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d201      	bcs.n	8004c64 <create_chain+0x4e>
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	e05d      	b.n	8004d20 <create_chain+0x10a>
		scl = clst;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d307      	bcc.n	8004c8c <create_chain+0x76>
			ncl = 2;
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d901      	bls.n	8004c8c <create_chain+0x76>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	e049      	b.n	8004d20 <create_chain+0x10a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004c8c:	6979      	ldr	r1, [r7, #20]
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7ff fe09 	bl	80048a6 <get_fat>
 8004c94:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00e      	beq.n	8004cba <create_chain+0xa4>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca2:	d002      	beq.n	8004caa <create_chain+0x94>
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <create_chain+0x98>
			return cs;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	e038      	b.n	8004d20 <create_chain+0x10a>
		if (ncl == scl) return 0;		/* No free cluster */
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d1da      	bne.n	8004c6c <create_chain+0x56>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	e032      	b.n	8004d20 <create_chain+0x10a>
		if (cs == 0) break;				/* Found a free cluster */
 8004cba:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004cbc:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004cc0:	6979      	ldr	r1, [r7, #20]
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7ff fe85 	bl	80049d2 <put_fat>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d109      	bne.n	8004ce6 <create_chain+0xd0>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d006      	beq.n	8004ce6 <create_chain+0xd0>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	6839      	ldr	r1, [r7, #0]
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff fe78 	bl	80049d2 <put_fat>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d110      	bne.n	8004d0e <create_chain+0xf8>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfa:	d010      	beq.n	8004d1e <create_chain+0x108>
			fs->free_clust--;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	1e5a      	subs	r2, r3, #1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	715a      	strb	r2, [r3, #5]
 8004d0c:	e007      	b.n	8004d1e <create_chain+0x108>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d102      	bne.n	8004d1a <create_chain+0x104>
 8004d14:	f04f 33ff 	mov.w	r3, #4294967295
 8004d18:	e000      	b.n	8004d1c <create_chain+0x106>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004d1e:	697b      	ldr	r3, [r7, #20]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Index of directory table */
)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	460b      	mov	r3, r1
 8004d32:	807b      	strh	r3, [r7, #2]
	DWORD clst;
	WORD ic;


	dj->index = idx;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	887a      	ldrh	r2, [r7, #2]
 8004d38:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d005      	beq.n	8004d52 <dir_sdi+0x2a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d301      	bcc.n	8004d56 <dir_sdi+0x2e>
		return FR_INT_ERR;
 8004d52:	2302      	movs	r3, #2
 8004d54:	e066      	b.n	8004e24 <dir_sdi+0xfc>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d108      	bne.n	8004d6e <dir_sdi+0x46>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b03      	cmp	r3, #3
 8004d64:	d103      	bne.n	8004d6e <dir_sdi+0x46>
		clst = dj->fs->dirbase;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d114      	bne.n	8004d9e <dir_sdi+0x76>
		dj->clust = clst;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	891b      	ldrh	r3, [r3, #8]
 8004d80:	887a      	ldrh	r2, [r7, #2]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d301      	bcc.n	8004d8a <dir_sdi+0x62>
			return FR_INT_ERR;
 8004d86:	2302      	movs	r3, #2
 8004d88:	e04c      	b.n	8004e24 <dir_sdi+0xfc>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	887a      	ldrh	r2, [r7, #2]
 8004d92:	0912      	lsrs	r2, r2, #4
 8004d94:	b292      	uxth	r2, r2
 8004d96:	441a      	add	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	611a      	str	r2, [r3, #16]
 8004d9c:	e036      	b.n	8004e0c <dir_sdi+0xe4>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	789b      	ldrb	r3, [r3, #2]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	817b      	strh	r3, [r7, #10]
		while (idx >= ic) {	/* Follow cluster chain */
 8004daa:	e01b      	b.n	8004de4 <dir_sdi+0xbc>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68f9      	ldr	r1, [r7, #12]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff fd77 	bl	80048a6 <get_fat>
 8004db8:	60f8      	str	r0, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc0:	d101      	bne.n	8004dc6 <dir_sdi+0x9e>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e02e      	b.n	8004e24 <dir_sdi+0xfc>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d905      	bls.n	8004dd8 <dir_sdi+0xb0>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d301      	bcc.n	8004ddc <dir_sdi+0xb4>
				return FR_INT_ERR;
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e023      	b.n	8004e24 <dir_sdi+0xfc>
			idx -= ic;
 8004ddc:	887a      	ldrh	r2, [r7, #2]
 8004dde:	897b      	ldrh	r3, [r7, #10]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	807b      	strh	r3, [r7, #2]
		while (idx >= ic) {	/* Follow cluster chain */
 8004de4:	887a      	ldrh	r2, [r7, #2]
 8004de6:	897b      	ldrh	r3, [r7, #10]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d2df      	bcs.n	8004dac <dir_sdi+0x84>
		}
		dj->clust = clst;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68f9      	ldr	r1, [r7, #12]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff fd35 	bl	8004868 <clust2sect>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	887b      	ldrh	r3, [r7, #2]
 8004e02:	091b      	lsrs	r3, r3, #4
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	441a      	add	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004e14:	887b      	ldrh	r3, [r7, #2]
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	015b      	lsls	r3, r3, #5
 8004e1c:	441a      	add	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR *dj,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004e2c:	b590      	push	{r4, r7, lr}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	88db      	ldrh	r3, [r3, #6]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	813b      	strh	r3, [r7, #8]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 8004e3e:	893b      	ldrh	r3, [r7, #8]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <dir_next+0x20>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <dir_next+0x24>
		return FR_NO_FILE;
 8004e4c:	2304      	movs	r3, #4
 8004e4e:	e0bb      	b.n	8004fc8 <dir_next+0x19c>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
 8004e50:	893b      	ldrh	r3, [r7, #8]
 8004e52:	f003 030f 	and.w	r3, r3, #15
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f040 80a6 	bne.w	8004faa <dir_next+0x17e>
		dj->sect++;					/* Next sector */
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d108      	bne.n	8004e82 <dir_next+0x56>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	891b      	ldrh	r3, [r3, #8]
 8004e76:	893a      	ldrh	r2, [r7, #8]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	f0c0 8096 	bcc.w	8004faa <dir_next+0x17e>
				return FR_NO_FILE;
 8004e7e:	2304      	movs	r3, #4
 8004e80:	e0a2      	b.n	8004fc8 <dir_next+0x19c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004e82:	893b      	ldrh	r3, [r7, #8]
 8004e84:	091b      	lsrs	r3, r3, #4
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	461a      	mov	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	789b      	ldrb	r3, [r3, #2]
 8004e90:	3b01      	subs	r3, #1
 8004e92:	4013      	ands	r3, r2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f040 8088 	bne.w	8004faa <dir_next+0x17e>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	f7ff fcfe 	bl	80048a6 <get_fat>
 8004eaa:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d801      	bhi.n	8004eb6 <dir_next+0x8a>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e088      	b.n	8004fc8 <dir_next+0x19c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebc:	d101      	bne.n	8004ec2 <dir_next+0x96>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e082      	b.n	8004fc8 <dir_next+0x19c>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d361      	bcc.n	8004f92 <dir_next+0x166>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <dir_next+0xac>
 8004ed4:	2304      	movs	r3, #4
 8004ed6:	e077      	b.n	8004fc8 <dir_next+0x19c>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4610      	mov	r0, r2
 8004ee4:	f7ff fe97 	bl	8004c16 <create_chain>
 8004ee8:	60f8      	str	r0, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <dir_next+0xc8>
 8004ef0:	2307      	movs	r3, #7
 8004ef2:	e069      	b.n	8004fc8 <dir_next+0x19c>
					if (clst == 1) return FR_INT_ERR;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <dir_next+0xd2>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e064      	b.n	8004fc8 <dir_next+0x19c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f04:	d101      	bne.n	8004f0a <dir_next+0xde>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e05e      	b.n	8004fc8 <dir_next+0x19c>
					/* Clean-up stretched table */
					if (sync_window(dj->fs)) return FR_DISK_ERR;	/* Flush active window */
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff fbdb 	bl	80046ca <sync_window>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <dir_next+0xf2>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e054      	b.n	8004fc8 <dir_next+0x19c>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3338      	adds	r3, #56	; 0x38
 8004f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f28:	2100      	movs	r1, #0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff fb71 	bl	8004612 <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681c      	ldr	r4, [r3, #0]
 8004f38:	68f9      	ldr	r1, [r7, #12]
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f7ff fc94 	bl	8004868 <clust2sect>
 8004f40:	4603      	mov	r3, r0
 8004f42:	6363      	str	r3, [r4, #52]	; 0x34
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004f44:	2300      	movs	r3, #0
 8004f46:	72fb      	strb	r3, [r7, #11]
 8004f48:	e015      	b.n	8004f76 <dir_next+0x14a>
						dj->fs->wflag = 1;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	711a      	strb	r2, [r3, #4]
						if (sync_window(dj->fs)) return FR_DISK_ERR;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff fbb7 	bl	80046ca <sync_window>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <dir_next+0x13a>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e030      	b.n	8004fc8 <dir_next+0x19c>
						dj->fs->winsect++;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f6c:	3201      	adds	r2, #1
 8004f6e:	635a      	str	r2, [r3, #52]	; 0x34
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004f70:	7afb      	ldrb	r3, [r7, #11]
 8004f72:	3301      	adds	r3, #1
 8004f74:	72fb      	strb	r3, [r7, #11]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	789b      	ldrb	r3, [r3, #2]
 8004f7c:	7afa      	ldrb	r2, [r7, #11]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d3e3      	bcc.n	8004f4a <dir_next+0x11e>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f88:	7afa      	ldrb	r2, [r7, #11]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	1a8a      	subs	r2, r1, r2
 8004f90:	635a      	str	r2, [r3, #52]	; 0x34
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68f9      	ldr	r1, [r7, #12]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff fc62 	bl	8004868 <clust2sect>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	893a      	ldrh	r2, [r7, #8]
 8004fae:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004fb8:	893b      	ldrh	r3, [r7, #8]
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	015b      	lsls	r3, r3, #5
 8004fc0:	441a      	add	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	615a      	str	r2, [r3, #20]

	return FR_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd90      	pop	{r4, r7, pc}

08004fd0 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dj,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dj, 0);
 8004fda:	2100      	movs	r1, #0
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff fea3 	bl	8004d28 <dir_sdi>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d12d      	bne.n	8005048 <dir_alloc+0x78>
		n = 0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dj->fs, dj->sect);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	f7ff fbab 	bl	8004756 <move_window>
 8005000:	4603      	mov	r3, r0
 8005002:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005004:	7bfb      	ldrb	r3, [r7, #15]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d11d      	bne.n	8005046 <dir_alloc+0x76>
			if (dj->dir[0] == DDE || dj->dir[0] == 0) {	/* Is it a blank entry? */
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2be5      	cmp	r3, #229	; 0xe5
 8005012:	d004      	beq.n	800501e <dir_alloc+0x4e>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d107      	bne.n	800502e <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous entry is found */
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	3301      	adds	r3, #1
 8005022:	60bb      	str	r3, [r7, #8]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d102      	bne.n	8005032 <dir_alloc+0x62>
 800502c:	e00c      	b.n	8005048 <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800502e:	2300      	movs	r3, #0
 8005030:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dj, 1);		/* Next entry with table stretch enabled */
 8005032:	2101      	movs	r1, #1
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7ff fef9 	bl	8004e2c <dir_next>
 800503a:	4603      	mov	r3, r0
 800503c:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800503e:	7bfb      	ldrb	r3, [r7, #15]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0d5      	beq.n	8004ff0 <dir_alloc+0x20>
 8005044:	e000      	b.n	8005048 <dir_alloc+0x78>
			if (res != FR_OK) break;
 8005046:	bf00      	nop
	}
	return res;
 8005048:	7bfb      	ldrb	r3, [r7, #15]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <ld_clust>:
static
DWORD ld_clust (
	FATFS *fs,	/* Pointer to the fs object */
	BYTE *dir	/* Pointer to the directory entry */
)
{
 8005052:	b480      	push	{r7}
 8005054:	b085      	sub	sp, #20
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	331a      	adds	r3, #26
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b03      	cmp	r3, #3
 800506a:	d106      	bne.n	800507a <ld_clust+0x28>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	3314      	adds	r3, #20
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	041b      	lsls	r3, r3, #16
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]

	return cl;
 800507a:	68fb      	ldr	r3, [r7, #12]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <st_clust>:
static
void st_clust (
	BYTE *dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
	ST_WORD(dir+DIR_FstClusLO, cl);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	331a      	adds	r3, #26
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	b292      	uxth	r2, r2
 800509a:	801a      	strh	r2, [r3, #0]
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	0c1a      	lsrs	r2, r3, #16
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3314      	adds	r3, #20
 80050a4:	b292      	uxth	r2, r2
 80050a6:	801a      	strh	r2, [r3, #0]
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050c6:	1e5a      	subs	r2, r3, #1
 80050c8:	4613      	mov	r3, r2
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	4413      	add	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80050d4:	2300      	movs	r3, #0
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	2301      	movs	r3, #1
 80050da:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 80050dc:	4a24      	ldr	r2, [pc, #144]	; (8005170 <cmp_lfn+0xbc>)
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	4413      	add	r3, r2
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	461a      	mov	r2, r3
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	4413      	add	r3, r2
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last char has not been processed */
 80050ee:	89fb      	ldrh	r3, [r7, #14]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d019      	beq.n	8005128 <cmp_lfn+0x74>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80050f4:	89bb      	ldrh	r3, [r7, #12]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7ff fa2e 	bl	8004558 <ff_wtoupper>
 80050fc:	4603      	mov	r3, r0
 80050fe:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	2b13      	cmp	r3, #19
 8005104:	d80e      	bhi.n	8005124 <cmp_lfn+0x70>
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	617a      	str	r2, [r7, #20]
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	4413      	add	r3, r2
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff fa1f 	bl	8004558 <ff_wtoupper>
 800511a:	4603      	mov	r3, r0
 800511c:	461a      	mov	r2, r3
 800511e:	89fb      	ldrh	r3, [r7, #14]
 8005120:	4293      	cmp	r3, r2
 8005122:	d008      	beq.n	8005136 <cmp_lfn+0x82>
				return 0;				/* Not matched */
 8005124:	2300      	movs	r3, #0
 8005126:	e01f      	b.n	8005168 <cmp_lfn+0xb4>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8005128:	89bb      	ldrh	r3, [r7, #12]
 800512a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800512e:	4293      	cmp	r3, r2
 8005130:	d001      	beq.n	8005136 <cmp_lfn+0x82>
 8005132:	2300      	movs	r3, #0
 8005134:	e018      	b.n	8005168 <cmp_lfn+0xb4>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	3301      	adds	r3, #1
 800513a:	613b      	str	r3, [r7, #16]
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	2b0c      	cmp	r3, #12
 8005140:	d9cc      	bls.n	80050dc <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00b      	beq.n	8005166 <cmp_lfn+0xb2>
 800514e:	89fb      	ldrh	r3, [r7, #14]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d008      	beq.n	8005166 <cmp_lfn+0xb2>
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	4413      	add	r3, r2
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <cmp_lfn+0xb2>
		return 0;
 8005162:	2300      	movs	r3, #0
 8005164:	e000      	b.n	8005168 <cmp_lfn+0xb4>

	return 1;						/* The part of LFN matched */
 8005166:	2301      	movs	r3, #1
}
 8005168:	4618      	mov	r0, r3
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	08023a24 	.word	0x08023a24

08005174 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8005174:	b480      	push	{r7}
 8005176:	b089      	sub	sp, #36	; 0x24
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	4611      	mov	r1, r2
 8005180:	461a      	mov	r2, r3
 8005182:	460b      	mov	r3, r1
 8005184:	71fb      	strb	r3, [r7, #7]
 8005186:	4613      	mov	r3, r2
 8005188:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	330d      	adds	r3, #13
 800518e:	79ba      	ldrb	r2, [r7, #6]
 8005190:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	330b      	adds	r3, #11
 8005196:	220f      	movs	r2, #15
 8005198:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	330c      	adds	r3, #12
 800519e:	2200      	movs	r2, #0
 80051a0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	331a      	adds	r3, #26
 80051a6:	2200      	movs	r2, #0
 80051a8:	801a      	strh	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	1e5a      	subs	r2, r3, #1
 80051ae:	4613      	mov	r3, r2
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	82fb      	strh	r3, [r7, #22]
 80051be:	2300      	movs	r3, #0
 80051c0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 80051c2:	8afb      	ldrh	r3, [r7, #22]
 80051c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d007      	beq.n	80051dc <fit_lfn+0x68>
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	61fa      	str	r2, [r7, #28]
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80051dc:	4a16      	ldr	r2, [pc, #88]	; (8005238 <fit_lfn+0xc4>)
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	4413      	add	r3, r2
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	4413      	add	r3, r2
 80051ea:	8afa      	ldrh	r2, [r7, #22]
 80051ec:	801a      	strh	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 80051ee:	8afb      	ldrh	r3, [r7, #22]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d102      	bne.n	80051fa <fit_lfn+0x86>
 80051f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051f8:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	3301      	adds	r3, #1
 80051fe:	61bb      	str	r3, [r7, #24]
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	2b0c      	cmp	r3, #12
 8005204:	d9dd      	bls.n	80051c2 <fit_lfn+0x4e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
 8005206:	8afb      	ldrh	r3, [r7, #22]
 8005208:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800520c:	4293      	cmp	r3, r2
 800520e:	d006      	beq.n	800521e <fit_lfn+0xaa>
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d103      	bne.n	8005226 <fit_lfn+0xb2>
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005224:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	79fa      	ldrb	r2, [r7, #7]
 800522a:	701a      	strb	r2, [r3, #0]
}
 800522c:	bf00      	nop
 800522e:	3724      	adds	r7, #36	; 0x24
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	08023a24 	.word	0x08023a24

0800523c <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08a      	sub	sp, #40	; 0x28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	807b      	strh	r3, [r7, #2]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
 800524a:	220b      	movs	r2, #11
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f7ff f9b0 	bl	80045b4 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8005254:	887b      	ldrh	r3, [r7, #2]
 8005256:	2b05      	cmp	r3, #5
 8005258:	d90f      	bls.n	800527a <gen_numname+0x3e>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
 800525a:	887b      	ldrh	r3, [r7, #2]
 800525c:	b29a      	uxth	r2, r3
 800525e:	0852      	lsrs	r2, r2, #1
 8005260:	03db      	lsls	r3, r3, #15
 8005262:	4313      	orrs	r3, r2
 8005264:	b29a      	uxth	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	1c99      	adds	r1, r3, #2
 800526a:	6079      	str	r1, [r7, #4]
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	4413      	add	r3, r2
 8005270:	807b      	strh	r3, [r7, #2]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1ef      	bne.n	800525a <gen_numname+0x1e>
	}

	/* itoa (hexdecimal) */
	i = 7;
 800527a:	2307      	movs	r3, #7
 800527c:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
 800527e:	887b      	ldrh	r3, [r7, #2]
 8005280:	b2db      	uxtb	r3, r3
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	b2db      	uxtb	r3, r3
 8005288:	3330      	adds	r3, #48	; 0x30
 800528a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c > '9') c += 7;
 800528e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005292:	2b39      	cmp	r3, #57	; 0x39
 8005294:	d904      	bls.n	80052a0 <gen_numname+0x64>
 8005296:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800529a:	3307      	adds	r3, #7
 800529c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		ns[i--] = c;
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	1e5a      	subs	r2, r3, #1
 80052a4:	623a      	str	r2, [r7, #32]
 80052a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80052aa:	4413      	add	r3, r2
 80052ac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80052b0:	f803 2c14 	strb.w	r2, [r3, #-20]
		seq /= 16;
 80052b4:	887b      	ldrh	r3, [r7, #2]
 80052b6:	091b      	lsrs	r3, r3, #4
 80052b8:	807b      	strh	r3, [r7, #2]
	} while (seq);
 80052ba:	887b      	ldrh	r3, [r7, #2]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1de      	bne.n	800527e <gen_numname+0x42>
	ns[i] = '~';
 80052c0:	f107 0214 	add.w	r2, r7, #20
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	4413      	add	r3, r2
 80052c8:	227e      	movs	r2, #126	; 0x7e
 80052ca:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80052cc:	2300      	movs	r3, #0
 80052ce:	61fb      	str	r3, [r7, #28]
 80052d0:	e002      	b.n	80052d8 <gen_numname+0x9c>
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	3301      	adds	r3, #1
 80052d6:	61fb      	str	r3, [r7, #28]
 80052d8:	69fa      	ldr	r2, [r7, #28]
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d205      	bcs.n	80052ec <gen_numname+0xb0>
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	4413      	add	r3, r2
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	d1f2      	bne.n	80052d2 <gen_numname+0x96>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	2b07      	cmp	r3, #7
 80052f0:	d808      	bhi.n	8005304 <gen_numname+0xc8>
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	623a      	str	r2, [r7, #32]
 80052f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80052fc:	4413      	add	r3, r2
 80052fe:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8005302:	e000      	b.n	8005306 <gen_numname+0xca>
 8005304:	2120      	movs	r1, #32
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	61fa      	str	r2, [r7, #28]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	460a      	mov	r2, r1
 8005312:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	2b07      	cmp	r3, #7
 8005318:	d9e8      	bls.n	80052ec <gen_numname+0xb0>
}
 800531a:	bf00      	nop
 800531c:	3728      	adds	r7, #40	; 0x28
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
 8005322:	b480      	push	{r7}
 8005324:	b085      	sub	sp, #20
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800532a:	2300      	movs	r3, #0
 800532c:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800532e:	230b      	movs	r3, #11
 8005330:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8005332:	7bfb      	ldrb	r3, [r7, #15]
 8005334:	b2da      	uxtb	r2, r3
 8005336:	0852      	lsrs	r2, r2, #1
 8005338:	01db      	lsls	r3, r3, #7
 800533a:	4313      	orrs	r3, r2
 800533c:	b2da      	uxtb	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	1c59      	adds	r1, r3, #1
 8005342:	6079      	str	r1, [r7, #4]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	4413      	add	r3, r2
 8005348:	73fb      	strb	r3, [r7, #15]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	3b01      	subs	r3, #1
 800534e:	60bb      	str	r3, [r7, #8]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1ed      	bne.n	8005332 <sum_sfn+0x10>
	return sum;
 8005356:	7bfb      	ldrb	r3, [r7, #15]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
 800536c:	2100      	movs	r1, #0
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7ff fcda 	bl	8004d28 <dir_sdi>
 8005374:	4603      	mov	r3, r0
 8005376:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005378:	7dfb      	ldrb	r3, [r7, #23]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <dir_find+0x1e>
 800537e:	7dfb      	ldrb	r3, [r7, #23]
 8005380:	e098      	b.n	80054b4 <dir_find+0x150>

#if _USE_LFN
	ord = sum = 0xFF;
 8005382:	23ff      	movs	r3, #255	; 0xff
 8005384:	753b      	strb	r3, [r7, #20]
 8005386:	7d3b      	ldrb	r3, [r7, #20]
 8005388:	757b      	strb	r3, [r7, #21]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	4619      	mov	r1, r3
 8005394:	4610      	mov	r0, r2
 8005396:	f7ff f9de 	bl	8004756 <move_window>
 800539a:	4603      	mov	r3, r0
 800539c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800539e:	7dfb      	ldrb	r3, [r7, #23]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f040 8081 	bne.w	80054a8 <dir_find+0x144>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80053b2:	7dbb      	ldrb	r3, [r7, #22]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d102      	bne.n	80053be <dir_find+0x5a>
 80053b8:	2304      	movs	r3, #4
 80053ba:	75fb      	strb	r3, [r7, #23]
 80053bc:	e079      	b.n	80054b2 <dir_find+0x14e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	330b      	adds	r3, #11
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053c8:	73fb      	strb	r3, [r7, #15]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80053ca:	7dbb      	ldrb	r3, [r7, #22]
 80053cc:	2be5      	cmp	r3, #229	; 0xe5
 80053ce:	d007      	beq.n	80053e0 <dir_find+0x7c>
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d005      	beq.n	80053e6 <dir_find+0x82>
 80053da:	7bfb      	ldrb	r3, [r7, #15]
 80053dc:	2b0f      	cmp	r3, #15
 80053de:	d002      	beq.n	80053e6 <dir_find+0x82>
			ord = 0xFF;
 80053e0:	23ff      	movs	r3, #255	; 0xff
 80053e2:	757b      	strb	r3, [r7, #21]
 80053e4:	e055      	b.n	8005492 <dir_find+0x12e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	2b0f      	cmp	r3, #15
 80053ea:	d12f      	bne.n	800544c <dir_find+0xe8>
				if (dj->lfn) {
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d04e      	beq.n	8005492 <dir_find+0x12e>
					if (c & LLE) {		/* Is it start of LFN sequence? */
 80053f4:	7dbb      	ldrb	r3, [r7, #22]
 80053f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00c      	beq.n	8005418 <dir_find+0xb4>
						sum = dir[LDIR_Chksum];
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	7b5b      	ldrb	r3, [r3, #13]
 8005402:	753b      	strb	r3, [r7, #20]
						c &= ~LLE; ord = c;	/* LFN start order */
 8005404:	7dbb      	ldrb	r3, [r7, #22]
 8005406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800540a:	75bb      	strb	r3, [r7, #22]
 800540c:	7dbb      	ldrb	r3, [r7, #22]
 800540e:	757b      	strb	r3, [r7, #21]
						dj->lfn_idx = dj->index;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	88da      	ldrh	r2, [r3, #6]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 8005418:	7dba      	ldrb	r2, [r7, #22]
 800541a:	7d7b      	ldrb	r3, [r7, #21]
 800541c:	429a      	cmp	r2, r3
 800541e:	d112      	bne.n	8005446 <dir_find+0xe2>
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	330d      	adds	r3, #13
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	7d3a      	ldrb	r2, [r7, #20]
 8005428:	429a      	cmp	r2, r3
 800542a:	d10c      	bne.n	8005446 <dir_find+0xe2>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	6939      	ldr	r1, [r7, #16]
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff fe3e 	bl	80050b4 <cmp_lfn>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <dir_find+0xe2>
 800543e:	7d7b      	ldrb	r3, [r7, #21]
 8005440:	3b01      	subs	r3, #1
 8005442:	b2db      	uxtb	r3, r3
 8005444:	e000      	b.n	8005448 <dir_find+0xe4>
 8005446:	23ff      	movs	r3, #255	; 0xff
 8005448:	757b      	strb	r3, [r7, #21]
 800544a:	e022      	b.n	8005492 <dir_find+0x12e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800544c:	7d7b      	ldrb	r3, [r7, #21]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d107      	bne.n	8005462 <dir_find+0xfe>
 8005452:	6938      	ldr	r0, [r7, #16]
 8005454:	f7ff ff65 	bl	8005322 <sum_sfn>
 8005458:	4603      	mov	r3, r0
 800545a:	461a      	mov	r2, r3
 800545c:	7d3b      	ldrb	r3, [r7, #20]
 800545e:	4293      	cmp	r3, r2
 8005460:	d024      	beq.n	80054ac <dir_find+0x148>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005462:	23ff      	movs	r3, #255	; 0xff
 8005464:	757b      	strb	r3, [r7, #21]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800546c:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	330b      	adds	r3, #11
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d109      	bne.n	8005492 <dir_find+0x12e>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	220b      	movs	r2, #11
 8005484:	4619      	mov	r1, r3
 8005486:	6938      	ldr	r0, [r7, #16]
 8005488:	f7ff f8dd 	bl	8004646 <mem_cmp>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00e      	beq.n	80054b0 <dir_find+0x14c>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
 8005492:	2100      	movs	r1, #0
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7ff fcc9 	bl	8004e2c <dir_next>
 800549a:	4603      	mov	r3, r0
 800549c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800549e:	7dfb      	ldrb	r3, [r7, #23]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f43f af72 	beq.w	800538a <dir_find+0x26>
 80054a6:	e004      	b.n	80054b2 <dir_find+0x14e>
		if (res != FR_OK) break;
 80054a8:	bf00      	nop
 80054aa:	e002      	b.n	80054b2 <dir_find+0x14e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80054ac:	bf00      	nop
 80054ae:	e000      	b.n	80054b2 <dir_find+0x14e>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 80054b0:	bf00      	nop

	return res;
 80054b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3718      	adds	r7, #24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08a      	sub	sp, #40	; 0x28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
	WORD n, ne;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	61fb      	str	r3, [r7, #28]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	61bb      	str	r3, [r7, #24]
	mem_cpy(sn, fn, 12);
 80054d0:	f107 0308 	add.w	r3, r7, #8
 80054d4:	220c      	movs	r2, #12
 80054d6:	69f9      	ldr	r1, [r7, #28]
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff f86b 	bl	80045b4 <mem_cpy>

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
 80054de:	7cfb      	ldrb	r3, [r7, #19]
 80054e0:	f003 0320 	and.w	r3, r3, #32
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <dir_register+0x30>
		return FR_INVALID_NAME;
 80054e8:	2306      	movs	r3, #6
 80054ea:	e0e3      	b.n	80056b4 <dir_register+0x1f8>

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80054ec:	7cfb      	ldrb	r3, [r7, #19]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d035      	beq.n	8005562 <dir_register+0xa6>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	330b      	adds	r3, #11
 80054fa:	2200      	movs	r2, #0
 80054fc:	701a      	strb	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
 8005504:	2301      	movs	r3, #1
 8005506:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005508:	e013      	b.n	8005532 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800550a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800550c:	f107 0108 	add.w	r1, r7, #8
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	69f8      	ldr	r0, [r7, #28]
 8005514:	f7ff fe92 	bl	800523c <gen_numname>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff ff23 	bl	8005364 <dir_find>
 800551e:	4603      	mov	r3, r0
 8005520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (res != FR_OK) break;
 8005524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005528:	2b00      	cmp	r3, #0
 800552a:	d106      	bne.n	800553a <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800552c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800552e:	3301      	adds	r3, #1
 8005530:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005534:	2b63      	cmp	r3, #99	; 0x63
 8005536:	d9e8      	bls.n	800550a <dir_register+0x4e>
 8005538:	e000      	b.n	800553c <dir_register+0x80>
			if (res != FR_OK) break;
 800553a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800553c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800553e:	2b64      	cmp	r3, #100	; 0x64
 8005540:	d101      	bne.n	8005546 <dir_register+0x8a>
 8005542:	2307      	movs	r3, #7
 8005544:	e0b6      	b.n	80056b4 <dir_register+0x1f8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005546:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800554a:	2b04      	cmp	r3, #4
 800554c:	d002      	beq.n	8005554 <dir_register+0x98>
 800554e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005552:	e0af      	b.n	80056b4 <dir_register+0x1f8>
		fn[NS] = sn[NS]; dj->lfn = lfn;
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	330b      	adds	r3, #11
 8005558:	7cfa      	ldrb	r2, [r7, #19]
 800555a:	701a      	strb	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8005562:	7cfb      	ldrb	r3, [r7, #19]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d016      	beq.n	800559a <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 800556c:	2300      	movs	r3, #0
 800556e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005570:	e002      	b.n	8005578 <dir_register+0xbc>
 8005572:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005574:	3301      	adds	r3, #1
 8005576:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005578:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	4413      	add	r3, r2
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1f5      	bne.n	8005572 <dir_register+0xb6>
		ne = (n + 25) / 13;
 8005586:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005588:	3319      	adds	r3, #25
 800558a:	4a4c      	ldr	r2, [pc, #304]	; (80056bc <dir_register+0x200>)
 800558c:	fb82 1203 	smull	r1, r2, r2, r3
 8005590:	1092      	asrs	r2, r2, #2
 8005592:	17db      	asrs	r3, r3, #31
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	847b      	strh	r3, [r7, #34]	; 0x22
 8005598:	e001      	b.n	800559e <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		ne = 1;
 800559a:	2301      	movs	r3, #1
 800559c:	847b      	strh	r3, [r7, #34]	; 0x22
	}
	res = dir_alloc(dj, ne);		/* Allocate entries */
 800559e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80055a0:	4619      	mov	r1, r3
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7ff fd14 	bl	8004fd0 <dir_alloc>
 80055a8:	4603      	mov	r3, r0
 80055aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (res == FR_OK && --ne) {		/* Set LFN entry if needed */
 80055ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d14b      	bne.n	800564e <dir_register+0x192>
 80055b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80055b8:	3b01      	subs	r3, #1
 80055ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80055bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d045      	beq.n	800564e <dir_register+0x192>
		res = dir_sdi(dj, (WORD)(dj->index - ne));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	88da      	ldrh	r2, [r3, #6]
 80055c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	4619      	mov	r1, r3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7ff fbaa 	bl	8004d28 <dir_sdi>
 80055d4:	4603      	mov	r3, r0
 80055d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (res == FR_OK) {
 80055da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d135      	bne.n	800564e <dir_register+0x192>
			sum = sum_sfn(dj->fn);	/* Sum value of the SFN tied to the LFN */
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7ff fe9b 	bl	8005322 <sum_sfn>
 80055ec:	4603      	mov	r3, r0
 80055ee:	75fb      	strb	r3, [r7, #23]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	4619      	mov	r1, r3
 80055fa:	4610      	mov	r0, r2
 80055fc:	f7ff f8ab 	bl	8004756 <move_window>
 8005600:	4603      	mov	r3, r0
 8005602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (res != FR_OK) break;
 8005606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800560a:	2b00      	cmp	r3, #0
 800560c:	d11e      	bne.n	800564c <dir_register+0x190>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69d8      	ldr	r0, [r3, #28]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6959      	ldr	r1, [r3, #20]
 8005616:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005618:	b2da      	uxtb	r2, r3
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	f7ff fdaa 	bl	8005174 <fit_lfn>
				dj->fs->wflag = 1;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2201      	movs	r2, #1
 8005626:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
 8005628:	2100      	movs	r1, #0
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7ff fbfe 	bl	8004e2c <dir_next>
 8005630:	4603      	mov	r3, r0
 8005632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			} while (res == FR_OK && --ne);
 8005636:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800563a:	2b00      	cmp	r3, #0
 800563c:	d107      	bne.n	800564e <dir_register+0x192>
 800563e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005640:	3b01      	subs	r3, #1
 8005642:	847b      	strh	r3, [r7, #34]	; 0x22
 8005644:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1d2      	bne.n	80055f0 <dir_register+0x134>
 800564a:	e000      	b.n	800564e <dir_register+0x192>
				if (res != FR_OK) break;
 800564c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dj, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800564e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005652:	2b00      	cmp	r3, #0
 8005654:	d12c      	bne.n	80056b0 <dir_register+0x1f4>
		res = move_window(dj->fs, dj->sect);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	4619      	mov	r1, r3
 8005660:	4610      	mov	r0, r2
 8005662:	f7ff f878 	bl	8004756 <move_window>
 8005666:	4603      	mov	r3, r0
 8005668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (res == FR_OK) {
 800566c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005670:	2b00      	cmp	r3, #0
 8005672:	d11d      	bne.n	80056b0 <dir_register+0x1f4>
			mem_set(dj->dir, 0, SZ_DIR);	/* Clean the entry */
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	2220      	movs	r2, #32
 800567a:	2100      	movs	r1, #0
 800567c:	4618      	mov	r0, r3
 800567e:	f7fe ffc8 	bl	8004612 <mem_set>
			mem_cpy(dj->dir, dj->fn, 11);	/* Put SFN */
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6958      	ldr	r0, [r3, #20]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	220b      	movs	r2, #11
 800568c:	4619      	mov	r1, r3
 800568e:	f7fe ff91 	bl	80045b4 <mem_cpy>
#if _USE_LFN
			dj->dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	330b      	adds	r3, #11
 8005698:	781a      	ldrb	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	330c      	adds	r3, #12
 80056a0:	f002 0218 	and.w	r2, r2, #24
 80056a4:	b2d2      	uxtb	r2, r2
 80056a6:	701a      	strb	r2, [r3, #0]
#endif
			dj->fs->wflag = 1;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2201      	movs	r2, #1
 80056ae:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80056b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3728      	adds	r7, #40	; 0x28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	4ec4ec4f 	.word	0x4ec4ec4f

080056c0 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b08a      	sub	sp, #40	; 0x28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	613b      	str	r3, [r7, #16]
 80056d0:	e002      	b.n	80056d8 <create_name+0x18>
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	3301      	adds	r3, #1
 80056d6:	613b      	str	r3, [r7, #16]
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b2f      	cmp	r3, #47	; 0x2f
 80056de:	d0f8      	beq.n	80056d2 <create_name+0x12>
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2b5c      	cmp	r3, #92	; 0x5c
 80056e6:	d0f4      	beq.n	80056d2 <create_name+0x12>
	lfn = dj->lfn;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	1c5a      	adds	r2, r3, #1
 80056fa:	61ba      	str	r2, [r7, #24]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4413      	add	r3, r2
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8005704:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005706:	2b1f      	cmp	r3, #31
 8005708:	d92f      	bls.n	800576a <create_name+0xaa>
 800570a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800570c:	2b2f      	cmp	r3, #47	; 0x2f
 800570e:	d02c      	beq.n	800576a <create_name+0xaa>
 8005710:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005712:	2b5c      	cmp	r3, #92	; 0x5c
 8005714:	d029      	beq.n	800576a <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2b13      	cmp	r3, #19
 800571a:	d901      	bls.n	8005720 <create_name+0x60>
			return FR_INVALID_NAME;
 800571c:	2306      	movs	r3, #6
 800571e:	e1c7      	b.n	8005ab0 <create_name+0x3f0>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005720:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005722:	b2db      	uxtb	r3, r3
 8005724:	84bb      	strh	r3, [r7, #36]	; 0x24
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005726:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005728:	2101      	movs	r1, #1
 800572a:	4618      	mov	r0, r3
 800572c:	f7fe fed8 	bl	80044e0 <ff_convert>
 8005730:	4603      	mov	r3, r0
 8005732:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005734:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <create_name+0x7e>
 800573a:	2306      	movs	r3, #6
 800573c:	e1b8      	b.n	8005ab0 <create_name+0x3f0>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
 800573e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005740:	2b7f      	cmp	r3, #127	; 0x7f
 8005742:	d809      	bhi.n	8005758 <create_name+0x98>
 8005744:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005746:	4619      	mov	r1, r3
 8005748:	48a4      	ldr	r0, [pc, #656]	; (80059dc <create_name+0x31c>)
 800574a:	f7fe ffa3 	bl	8004694 <chk_chr>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <create_name+0x98>
			return FR_INVALID_NAME;
 8005754:	2306      	movs	r3, #6
 8005756:	e1ab      	b.n	8005ab0 <create_name+0x3f0>
		lfn[di++] = w;					/* Store the Unicode char */
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	617a      	str	r2, [r7, #20]
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4413      	add	r3, r2
 8005764:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005766:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005768:	e7c5      	b.n	80056f6 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	441a      	add	r2, r3
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005774:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005776:	2b1f      	cmp	r3, #31
 8005778:	d801      	bhi.n	800577e <create_name+0xbe>
 800577a:	2304      	movs	r3, #4
 800577c:	e000      	b.n	8005780 <create_name+0xc0>
 800577e:	2300      	movs	r3, #0
 8005780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH
	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d109      	bne.n	800579e <create_name+0xde>
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005790:	3b01      	subs	r3, #1
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	4413      	add	r3, r2
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	2b2e      	cmp	r3, #46	; 0x2e
 800579c:	d016      	beq.n	80057cc <create_name+0x10c>
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d14d      	bne.n	8005840 <create_name+0x180>
		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80057aa:	3b01      	subs	r3, #1
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4413      	add	r3, r2
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	2b2e      	cmp	r3, #46	; 0x2e
 80057b6:	d143      	bne.n	8005840 <create_name+0x180>
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80057be:	3b02      	subs	r3, #2
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4413      	add	r3, r2
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	2b2e      	cmp	r3, #46	; 0x2e
 80057ca:	d139      	bne.n	8005840 <create_name+0x180>
		lfn[di] = 0;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	2200      	movs	r2, #0
 80057d6:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)
 80057d8:	2300      	movs	r3, #0
 80057da:	623b      	str	r3, [r7, #32]
 80057dc:	e00f      	b.n	80057fe <create_name+0x13e>
			dj->fn[i] = (i < di) ? '.' : ' ';
 80057de:	6a3a      	ldr	r2, [r7, #32]
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d201      	bcs.n	80057ea <create_name+0x12a>
 80057e6:	212e      	movs	r1, #46	; 0x2e
 80057e8:	e000      	b.n	80057ec <create_name+0x12c>
 80057ea:	2120      	movs	r1, #32
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	699a      	ldr	r2, [r3, #24]
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	4413      	add	r3, r2
 80057f4:	460a      	mov	r2, r1
 80057f6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	3301      	adds	r3, #1
 80057fc:	623b      	str	r3, [r7, #32]
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	2b0a      	cmp	r3, #10
 8005802:	d9ec      	bls.n	80057de <create_name+0x11e>
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699a      	ldr	r2, [r3, #24]
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	4413      	add	r3, r2
 800580c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005810:	f042 0220 	orr.w	r2, r2, #32
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8005818:	2300      	movs	r3, #0
 800581a:	e149      	b.n	8005ab0 <create_name+0x3f0>
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005822:	3b01      	subs	r3, #1
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4413      	add	r3, r2
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800582e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005830:	2b20      	cmp	r3, #32
 8005832:	d002      	beq.n	800583a <create_name+0x17a>
 8005834:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005836:	2b2e      	cmp	r3, #46	; 0x2e
 8005838:	d106      	bne.n	8005848 <create_name+0x188>
		di--;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	3b01      	subs	r3, #1
 800583e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1ea      	bne.n	800581c <create_name+0x15c>
 8005846:	e000      	b.n	800584a <create_name+0x18a>
		if (w != ' ' && w != '.') break;
 8005848:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <create_name+0x194>
 8005850:	2306      	movs	r3, #6
 8005852:	e12d      	b.n	8005ab0 <create_name+0x3f0>

	lfn[di] = 0;						/* LFN is created */
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4413      	add	r3, r2
 800585c:	2200      	movs	r2, #0
 800585e:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	220b      	movs	r2, #11
 8005866:	2120      	movs	r1, #32
 8005868:	4618      	mov	r0, r3
 800586a:	f7fe fed2 	bl	8004612 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800586e:	2300      	movs	r3, #0
 8005870:	61bb      	str	r3, [r7, #24]
 8005872:	e002      	b.n	800587a <create_name+0x1ba>
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	3301      	adds	r3, #1
 8005878:	61bb      	str	r3, [r7, #24]
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4413      	add	r3, r2
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	2b20      	cmp	r3, #32
 8005886:	d0f5      	beq.n	8005874 <create_name+0x1b4>
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4413      	add	r3, r2
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	2b2e      	cmp	r3, #46	; 0x2e
 8005894:	d0ee      	beq.n	8005874 <create_name+0x1b4>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d009      	beq.n	80058b0 <create_name+0x1f0>
 800589c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058a0:	f043 0303 	orr.w	r3, r3, #3
 80058a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80058a8:	e002      	b.n	80058b0 <create_name+0x1f0>
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d009      	beq.n	80058ca <create_name+0x20a>
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80058bc:	3b01      	subs	r3, #1
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4413      	add	r3, r2
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	2b2e      	cmp	r3, #46	; 0x2e
 80058c8:	d1ef      	bne.n	80058aa <create_name+0x1ea>

	b = i = 0; ni = 8;
 80058ca:	2300      	movs	r3, #0
 80058cc:	623b      	str	r3, [r7, #32]
 80058ce:	2300      	movs	r3, #0
 80058d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80058d4:	2308      	movs	r3, #8
 80058d6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	61ba      	str	r2, [r7, #24]
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	4413      	add	r3, r2
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80058e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 8095 	beq.w	8005a1a <create_name+0x35a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80058f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	d006      	beq.n	8005904 <create_name+0x244>
 80058f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058f8:	2b2e      	cmp	r3, #46	; 0x2e
 80058fa:	d10a      	bne.n	8005912 <create_name+0x252>
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	429a      	cmp	r2, r3
 8005902:	d006      	beq.n	8005912 <create_name+0x252>
			cf |= NS_LOSS | NS_LFN; continue;
 8005904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005908:	f043 0303 	orr.w	r3, r3, #3
 800590c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005910:	e082      	b.n	8005a18 <create_name+0x358>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005912:	6a3a      	ldr	r2, [r7, #32]
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	429a      	cmp	r2, r3
 8005918:	d203      	bcs.n	8005922 <create_name+0x262>
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	429a      	cmp	r2, r3
 8005920:	d123      	bne.n	800596a <create_name+0x2aa>
			if (ni == 11) {				/* Long extension */
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	2b0b      	cmp	r3, #11
 8005926:	d106      	bne.n	8005936 <create_name+0x276>
				cf |= NS_LOSS | NS_LFN; break;
 8005928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800592c:	f043 0303 	orr.w	r3, r3, #3
 8005930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005934:	e074      	b.n	8005a20 <create_name+0x360>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	429a      	cmp	r2, r3
 800593c:	d005      	beq.n	800594a <create_name+0x28a>
 800593e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005942:	f043 0303 	orr.w	r3, r3, #3
 8005946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	429a      	cmp	r2, r3
 8005950:	d865      	bhi.n	8005a1e <create_name+0x35e>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	2308      	movs	r3, #8
 8005958:	623b      	str	r3, [r7, #32]
 800595a:	230b      	movs	r3, #11
 800595c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800595e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005968:	e056      	b.n	8005a18 <create_name+0x358>
		}

		if (w >= 0x80) {				/* Non ASCII char */
 800596a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800596c:	2b7f      	cmp	r3, #127	; 0x7f
 800596e:	d914      	bls.n	800599a <create_name+0x2da>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005970:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005972:	2100      	movs	r1, #0
 8005974:	4618      	mov	r0, r3
 8005976:	f7fe fdb3 	bl	80044e0 <ff_convert>
 800597a:	4603      	mov	r3, r0
 800597c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
 800597e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005980:	2b00      	cmp	r3, #0
 8005982:	d004      	beq.n	800598e <create_name+0x2ce>
 8005984:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005986:	3b80      	subs	r3, #128	; 0x80
 8005988:	4a15      	ldr	r2, [pc, #84]	; (80059e0 <create_name+0x320>)
 800598a:	5cd3      	ldrb	r3, [r2, r3]
 800598c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800598e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005992:	f043 0302 	orr.w	r3, r3, #2
 8005996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
 800599a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800599c:	2b00      	cmp	r3, #0
 800599e:	d007      	beq.n	80059b0 <create_name+0x2f0>
 80059a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059a2:	4619      	mov	r1, r3
 80059a4:	480f      	ldr	r0, [pc, #60]	; (80059e4 <create_name+0x324>)
 80059a6:	f7fe fe75 	bl	8004694 <chk_chr>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80059b0:	235f      	movs	r3, #95	; 0x5f
 80059b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80059b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059b8:	f043 0303 	orr.w	r3, r3, #3
 80059bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80059c0:	e021      	b.n	8005a06 <create_name+0x346>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80059c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059c4:	2b40      	cmp	r3, #64	; 0x40
 80059c6:	d90f      	bls.n	80059e8 <create_name+0x328>
 80059c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059ca:	2b5a      	cmp	r3, #90	; 0x5a
 80059cc:	d80c      	bhi.n	80059e8 <create_name+0x328>
					b |= 2;
 80059ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80059d2:	f043 0302 	orr.w	r3, r3, #2
 80059d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80059da:	e014      	b.n	8005a06 <create_name+0x346>
 80059dc:	080203e8 	.word	0x080203e8
 80059e0:	080239a4 	.word	0x080239a4
 80059e4:	080203f4 	.word	0x080203f4
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80059e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059ea:	2b60      	cmp	r3, #96	; 0x60
 80059ec:	d90b      	bls.n	8005a06 <create_name+0x346>
 80059ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059f0:	2b7a      	cmp	r3, #122	; 0x7a
 80059f2:	d808      	bhi.n	8005a06 <create_name+0x346>
						b |= 1; w -= 0x20;
 80059f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80059f8:	f043 0301 	orr.w	r3, r3, #1
 80059fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005a00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a02:	3b20      	subs	r3, #32
 8005a04:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699a      	ldr	r2, [r3, #24]
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	1c59      	adds	r1, r3, #1
 8005a0e:	6239      	str	r1, [r7, #32]
 8005a10:	4413      	add	r3, r2
 8005a12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
 8005a18:	e75e      	b.n	80058d8 <create_name+0x218>
		if (!w) break;					/* Break on end of the LFN */
 8005a1a:	bf00      	nop
 8005a1c:	e000      	b.n	8005a20 <create_name+0x360>
			if (si > di) break;			/* No extension */
 8005a1e:	bf00      	nop
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2be5      	cmp	r3, #229	; 0xe5
 8005a28:	d103      	bne.n	8005a32 <create_name+0x372>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	2205      	movs	r2, #5
 8005a30:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	d104      	bne.n	8005a42 <create_name+0x382>
 8005a38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8005a42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a46:	f003 030c 	and.w	r3, r3, #12
 8005a4a:	2b0c      	cmp	r3, #12
 8005a4c:	d005      	beq.n	8005a5a <create_name+0x39a>
 8005a4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d105      	bne.n	8005a66 <create_name+0x3a6>
		cf |= NS_LFN;
 8005a5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a5e:	f043 0302 	orr.w	r3, r3, #2
 8005a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
 8005a66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d117      	bne.n	8005aa2 <create_name+0x3e2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005a72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d105      	bne.n	8005a8a <create_name+0x3ca>
 8005a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a82:	f043 0310 	orr.w	r3, r3, #16
 8005a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005a8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a8e:	f003 030c 	and.w	r3, r3, #12
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d105      	bne.n	8005aa2 <create_name+0x3e2>
 8005a96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a9a:	f043 0308 	orr.w	r3, r3, #8
 8005a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dj->fn[NS] = cf;	/* SFN is created */
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	330b      	adds	r3, #11
 8005aa8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005aac:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005aae:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3728      	adds	r7, #40	; 0x28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b2f      	cmp	r3, #47	; 0x2f
 8005ac8:	d003      	beq.n	8005ad2 <follow_path+0x1a>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2b5c      	cmp	r3, #92	; 0x5c
 8005ad0:	d106      	bne.n	8005ae0 <follow_path+0x28>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	603b      	str	r3, [r7, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	609a      	str	r2, [r3, #8]
 8005ade:	e004      	b.n	8005aea <follow_path+0x32>
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699a      	ldr	r2, [r3, #24]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	609a      	str	r2, [r3, #8]
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b1f      	cmp	r3, #31
 8005af0:	d809      	bhi.n	8005b06 <follow_path+0x4e>
		res = dir_sdi(dj, 0);
 8005af2:	2100      	movs	r1, #0
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7ff f917 	bl	8004d28 <dir_sdi>
 8005afa:	4603      	mov	r3, r0
 8005afc:	73fb      	strb	r3, [r7, #15]
		dj->dir = 0;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	615a      	str	r2, [r3, #20]
 8005b04:	e056      	b.n	8005bb4 <follow_path+0xfc>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
 8005b06:	463b      	mov	r3, r7
 8005b08:	4619      	mov	r1, r3
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7ff fdd8 	bl	80056c0 <create_name>
 8005b10:	4603      	mov	r3, r0
 8005b12:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d145      	bne.n	8005ba6 <follow_path+0xee>
			res = dir_find(dj);				/* Find it */
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff fc22 	bl	8005364 <dir_find>
 8005b20:	4603      	mov	r3, r0
 8005b22:	73fb      	strb	r3, [r7, #15]
			ns = *(dj->fn+NS);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	7adb      	ldrb	r3, [r3, #11]
 8005b2a:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d01d      	beq.n	8005b6e <follow_path+0xb6>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d138      	bne.n	8005baa <follow_path+0xf2>
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
 8005b38:	7bbb      	ldrb	r3, [r7, #14]
 8005b3a:	f003 0320 	and.w	r3, r3, #32
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00d      	beq.n	8005b5e <follow_path+0xa6>
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	609a      	str	r2, [r3, #8]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	615a      	str	r2, [r3, #20]
					res = FR_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	73fb      	strb	r3, [r7, #15]
					if (!(ns & NS_LAST)) continue;
 8005b52:	7bbb      	ldrb	r3, [r7, #14]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d128      	bne.n	8005bae <follow_path+0xf6>
 8005b5c:	e022      	b.n	8005ba4 <follow_path+0xec>
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
 8005b5e:	7bbb      	ldrb	r3, [r7, #14]
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d122      	bne.n	8005bae <follow_path+0xf6>
 8005b68:	2305      	movs	r3, #5
 8005b6a:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8005b6c:	e01f      	b.n	8005bae <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 8005b6e:	7bbb      	ldrb	r3, [r7, #14]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d11c      	bne.n	8005bb2 <follow_path+0xfa>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	330b      	adds	r3, #11
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d102      	bne.n	8005b92 <follow_path+0xda>
				res = FR_NO_PATH; break;
 8005b8c:	2305      	movs	r3, #5
 8005b8e:	73fb      	strb	r3, [r7, #15]
 8005b90:	e010      	b.n	8005bb4 <follow_path+0xfc>
			}
			dj->sclust = ld_clust(dj->fs, dir);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7ff fa5a 	bl	8005052 <ld_clust>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
 8005ba4:	e7af      	b.n	8005b06 <follow_path+0x4e>
			if (res != FR_OK) break;
 8005ba6:	bf00      	nop
 8005ba8:	e004      	b.n	8005bb4 <follow_path+0xfc>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
 8005baa:	bf00      	nop
 8005bac:	e002      	b.n	8005bb4 <follow_path+0xfc>
				break;
 8005bae:	bf00      	nop
 8005bb0:	e000      	b.n	8005bb4 <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 8005bb2:	bf00      	nop
		}
	}

	return res;
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
	...

08005bc0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	7858      	ldrb	r0, [r3, #1]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	f001 fcfc 	bl	80075d4 <disk_read>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <check_fs+0x26>
		return 3;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e01e      	b.n	8005c24 <check_fs+0x64>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f203 2336 	addw	r3, r3, #566	; 0x236
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d001      	beq.n	8005bfa <check_fs+0x3a>
		return 2;
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	e014      	b.n	8005c24 <check_fs+0x64>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	336e      	adds	r3, #110	; 0x6e
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c04:	4a09      	ldr	r2, [pc, #36]	; (8005c2c <check_fs+0x6c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d101      	bne.n	8005c0e <check_fs+0x4e>
		return 0;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	e00a      	b.n	8005c24 <check_fs+0x64>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	338a      	adds	r3, #138	; 0x8a
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c18:	4a04      	ldr	r2, [pc, #16]	; (8005c2c <check_fs+0x6c>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d101      	bne.n	8005c22 <check_fs+0x62>
		return 0;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e000      	b.n	8005c24 <check_fs+0x64>

	return 1;
 8005c22:	2301      	movs	r3, #1
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	00544146 	.word	0x00544146

08005c30 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b092      	sub	sp, #72	; 0x48
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	71fb      	strb	r3, [r7, #7]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
 8005c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	3b30      	subs	r3, #48	; 0x30
 8005c4a:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 8005c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c4e:	2b09      	cmp	r3, #9
 8005c50:	d80b      	bhi.n	8005c6a <chk_mounted+0x3a>
 8005c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c54:	3301      	adds	r3, #1
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b3a      	cmp	r3, #58	; 0x3a
 8005c5a:	d106      	bne.n	8005c6a <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
 8005c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5e:	3302      	adds	r3, #2
 8005c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	e002      	b.n	8005c70 <chk_mounted+0x40>
	} else {							/* No drive number, use default drive */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
 8005c6a:	4ba8      	ldr	r3, [pc, #672]	; (8005f0c <chk_mounted+0x2dc>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	643b      	str	r3, [r7, #64]	; 0x40
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
 8005c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <chk_mounted+0x50>
		return FR_INVALID_DRIVE;
 8005c7c:	230b      	movs	r3, #11
 8005c7e:	e1d4      	b.n	800602a <chk_mounted+0x3fa>
	fs = FatFs[vol];					/* Get corresponding file system object */
 8005c80:	4aa3      	ldr	r2, [pc, #652]	; (8005f10 <chk_mounted+0x2e0>)
 8005c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c88:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <chk_mounted+0x64>
 8005c90:	230c      	movs	r3, #12
 8005c92:	e1ca      	b.n	800602a <chk_mounted+0x3fa>

	ENTER_FF(fs);						/* Lock volume */

	*rfs = fs;							/* Return pointer to the corresponding file system object */
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c98:	601a      	str	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d01a      	beq.n	8005cd8 <chk_mounted+0xa8>
		stat = disk_status(fs->drv);
 8005ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca4:	785b      	ldrb	r3, [r3, #1]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f001 fc7e 	bl	80075a8 <disk_status>
 8005cac:	4603      	mov	r3, r0
 8005cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
 8005cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10c      	bne.n	8005cd8 <chk_mounted+0xa8>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005cbe:	79fb      	ldrb	r3, [r7, #7]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d007      	beq.n	8005cd4 <chk_mounted+0xa4>
 8005cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <chk_mounted+0xa4>
				return FR_WRITE_PROTECTED;
 8005cd0:	230a      	movs	r3, #10
 8005cd2:	e1aa      	b.n	800602a <chk_mounted+0x3fa>
			return FR_OK;				/* The file system object is valid */
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e1a8      	b.n	800602a <chk_mounted+0x3fa>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	2200      	movs	r2, #0
 8005cdc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce8:	785b      	ldrb	r3, [r3, #1]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f001 fb7c 	bl	80073e8 <disk_initialize>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005cf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <chk_mounted+0xd6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005d02:	2303      	movs	r3, #3
 8005d04:	e191      	b.n	800602a <chk_mounted+0x3fa>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005d06:	79fb      	ldrb	r3, [r7, #7]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d007      	beq.n	8005d1c <chk_mounted+0xec>
 8005d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
 8005d18:	230a      	movs	r3, #10
 8005d1a:	e186      	b.n	800602a <chk_mounted+0x3fa>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d24:	f7ff ff4c 	bl	8005bc0 <check_fs>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
 8005d2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d124      	bne.n	8005d80 <chk_mounted+0x150>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
 8005d36:	2300      	movs	r3, #0
 8005d38:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		if (pi) pi--;
 8005d3c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d004      	beq.n	8005d4e <chk_mounted+0x11e>
 8005d44:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
 8005d4e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005d52:	011b      	lsls	r3, r3, #4
 8005d54:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005d58:	3338      	adds	r3, #56	; 0x38
 8005d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d5c:	4413      	add	r3, r2
 8005d5e:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	3304      	adds	r3, #4
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <chk_mounted+0x150>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
 8005d72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d76:	f7ff ff23 	bl	8005bc0 <check_fs>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 8005d80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	d101      	bne.n	8005d8c <chk_mounted+0x15c>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e14e      	b.n	800602a <chk_mounted+0x3fa>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005d8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <chk_mounted+0x168>
 8005d94:	230d      	movs	r3, #13
 8005d96:	e148      	b.n	800602a <chk_mounted+0x3fa>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	3338      	adds	r3, #56	; 0x38
 8005d9c:	330b      	adds	r3, #11
 8005d9e:	881b      	ldrh	r3, [r3, #0]
 8005da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da4:	d001      	beq.n	8005daa <chk_mounted+0x17a>
		return FR_NO_FILESYSTEM;
 8005da6:	230d      	movs	r3, #13
 8005da8:	e13f      	b.n	800602a <chk_mounted+0x3fa>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 8005daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dac:	3338      	adds	r3, #56	; 0x38
 8005dae:	3316      	adds	r3, #22
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 8005db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d104      	bne.n	8005dc4 <chk_mounted+0x194>
 8005dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbc:	3338      	adds	r3, #56	; 0x38
 8005dbe:	3324      	adds	r3, #36	; 0x24
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dc8:	621a      	str	r2, [r3, #32]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 8005dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dcc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005dd0:	77fb      	strb	r3, [r7, #31]
 8005dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd4:	7ffa      	ldrb	r2, [r7, #31]
 8005dd6:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 8005dd8:	7ffb      	ldrb	r3, [r7, #31]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d004      	beq.n	8005de8 <chk_mounted+0x1b8>
 8005dde:	7ffb      	ldrb	r3, [r7, #31]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d001      	beq.n	8005de8 <chk_mounted+0x1b8>
 8005de4:	230d      	movs	r3, #13
 8005de6:	e120      	b.n	800602a <chk_mounted+0x3fa>
	fasize *= b;										/* Number of sectors for FAT area */
 8005de8:	7ffa      	ldrb	r2, [r7, #31]
 8005dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dec:	fb02 f303 	mul.w	r3, r2, r3
 8005df0:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005df8:	77fb      	strb	r3, [r7, #31]
 8005dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfc:	7ffa      	ldrb	r2, [r7, #31]
 8005dfe:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005e00:	7ffb      	ldrb	r3, [r7, #31]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d005      	beq.n	8005e12 <chk_mounted+0x1e2>
 8005e06:	7ffa      	ldrb	r2, [r7, #31]
 8005e08:	7ffb      	ldrb	r3, [r7, #31]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <chk_mounted+0x1e6>
 8005e12:	230d      	movs	r3, #13
 8005e14:	e109      	b.n	800602a <chk_mounted+0x3fa>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 8005e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e18:	3338      	adds	r3, #56	; 0x38
 8005e1a:	3311      	adds	r3, #17
 8005e1c:	881a      	ldrh	r2, [r3, #0]
 8005e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e20:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
 8005e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e24:	891b      	ldrh	r3, [r3, #8]
 8005e26:	f003 030f 	and.w	r3, r3, #15
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <chk_mounted+0x204>
 8005e30:	230d      	movs	r3, #13
 8005e32:	e0fa      	b.n	800602a <chk_mounted+0x3fa>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	3338      	adds	r3, #56	; 0x38
 8005e38:	3313      	adds	r3, #19
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 8005e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d104      	bne.n	8005e4e <chk_mounted+0x21e>
 8005e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e46:	3338      	adds	r3, #56	; 0x38
 8005e48:	3320      	adds	r3, #32
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 8005e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e50:	3338      	adds	r3, #56	; 0x38
 8005e52:	330e      	adds	r3, #14
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	83bb      	strh	r3, [r7, #28]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 8005e58:	8bbb      	ldrh	r3, [r7, #28]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <chk_mounted+0x232>
 8005e5e:	230d      	movs	r3, #13
 8005e60:	e0e3      	b.n	800602a <chk_mounted+0x3fa>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 8005e62:	8bba      	ldrh	r2, [r7, #28]
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	4413      	add	r3, r2
 8005e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e6a:	8912      	ldrh	r2, [r2, #8]
 8005e6c:	0912      	lsrs	r2, r2, #4
 8005e6e:	b292      	uxth	r2, r2
 8005e70:	4413      	add	r3, r2
 8005e72:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005e74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d201      	bcs.n	8005e80 <chk_mounted+0x250>
 8005e7c:	230d      	movs	r3, #13
 8005e7e:	e0d4      	b.n	800602a <chk_mounted+0x3fa>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005e80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e88:	7892      	ldrb	r2, [r2, #2]
 8005e8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <chk_mounted+0x26a>
 8005e96:	230d      	movs	r3, #13
 8005e98:	e0c7      	b.n	800602a <chk_mounted+0x3fa>
	fmt = FS_FAT12;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d902      	bls.n	8005eb0 <chk_mounted+0x280>
 8005eaa:	2302      	movs	r3, #2
 8005eac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d902      	bls.n	8005ec0 <chk_mounted+0x290>
 8005eba:	2303      	movs	r3, #3
 8005ebc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	1c9a      	adds	r2, r3, #2
 8005ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec6:	61da      	str	r2, [r3, #28]
	fs->volbase = bsect;								/* Volume start sector */
 8005ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ecc:	625a      	str	r2, [r3, #36]	; 0x24
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005ece:	8bba      	ldrh	r2, [r7, #28]
 8005ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed2:	441a      	add	r2, r3
 8005ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed6:	629a      	str	r2, [r3, #40]	; 0x28
	fs->database = bsect + sysect;						/* Data start sector */
 8005ed8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	441a      	add	r2, r3
 8005ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee0:	631a      	str	r2, [r3, #48]	; 0x30
	if (fmt == FS_FAT32) {
 8005ee2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d114      	bne.n	8005f14 <chk_mounted+0x2e4>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eec:	891b      	ldrh	r3, [r3, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <chk_mounted+0x2c6>
 8005ef2:	230d      	movs	r3, #13
 8005ef4:	e099      	b.n	800602a <chk_mounted+0x3fa>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	3338      	adds	r3, #56	; 0x38
 8005efa:	332c      	adds	r3, #44	; 0x2c
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f00:	62da      	str	r2, [r3, #44]	; 0x2c
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	633b      	str	r3, [r7, #48]	; 0x30
 8005f0a:	e023      	b.n	8005f54 <chk_mounted+0x324>
 8005f0c:	20000402 	.word	0x20000402
 8005f10:	200003fc 	.word	0x200003fc
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f16:	891b      	ldrh	r3, [r3, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <chk_mounted+0x2f0>
 8005f1c:	230d      	movs	r3, #13
 8005f1e:	e084      	b.n	800602a <chk_mounted+0x3fa>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f26:	441a      	add	r2, r3
 8005f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2a:	62da      	str	r2, [r3, #44]	; 0x2c
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005f2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d103      	bne.n	8005f3c <chk_mounted+0x30c>
 8005f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	e00a      	b.n	8005f52 <chk_mounted+0x322>
 8005f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3e:	69da      	ldr	r2, [r3, #28]
 8005f40:	4613      	mov	r3, r2
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	4413      	add	r3, r2
 8005f46:	085a      	lsrs	r2, r3, #1
 8005f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
 8005f52:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
 8005f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f56:	6a1a      	ldr	r2, [r3, #32]
 8005f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005f5e:	0a5b      	lsrs	r3, r3, #9
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d201      	bcs.n	8005f68 <chk_mounted+0x338>
		return FR_NO_FILESYSTEM;
 8005f64:	230d      	movs	r3, #13
 8005f66:	e060      	b.n	800602a <chk_mounted+0x3fa>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
 8005f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f6e:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
 8005f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f72:	2200      	movs	r2, #0
 8005f74:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
 8005f76:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d13d      	bne.n	8005ffa <chk_mounted+0x3ca>
	 	fs->fsi_flag = 0;
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f80:	2200      	movs	r2, #0
 8005f82:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	3338      	adds	r3, #56	; 0x38
 8005f88:	3330      	adds	r3, #48	; 0x30
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f90:	441a      	add	r2, r3
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 8005f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f98:	7858      	ldrb	r0, [r3, #1]
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	695a      	ldr	r2, [r3, #20]
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	f001 fb15 	bl	80075d4 <disk_read>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d124      	bne.n	8005ffa <chk_mounted+0x3ca>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 8005fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb2:	3338      	adds	r3, #56	; 0x38
 8005fb4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005fb8:	881b      	ldrh	r3, [r3, #0]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 8005fba:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d11b      	bne.n	8005ffa <chk_mounted+0x3ca>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 8005fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc4:	3338      	adds	r3, #56	; 0x38
 8005fc6:	681b      	ldr	r3, [r3, #0]
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 8005fc8:	4a1a      	ldr	r2, [pc, #104]	; (8006034 <chk_mounted+0x404>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d115      	bne.n	8005ffa <chk_mounted+0x3ca>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 8005fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd0:	3338      	adds	r3, #56	; 0x38
 8005fd2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005fd6:	681b      	ldr	r3, [r3, #0]
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 8005fd8:	4a17      	ldr	r2, [pc, #92]	; (8006038 <chk_mounted+0x408>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d10d      	bne.n	8005ffa <chk_mounted+0x3ca>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 8005fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe0:	3338      	adds	r3, #56	; 0x38
 8005fe2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 8005fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fee:	3338      	adds	r3, #56	; 0x38
 8005ff0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff8:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
 8005ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffc:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8006000:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006002:	4b0e      	ldr	r3, [pc, #56]	; (800603c <chk_mounted+0x40c>)
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	3301      	adds	r3, #1
 8006008:	b29a      	uxth	r2, r3
 800600a:	4b0c      	ldr	r3, [pc, #48]	; (800603c <chk_mounted+0x40c>)
 800600c:	801a      	strh	r2, [r3, #0]
 800600e:	4b0b      	ldr	r3, [pc, #44]	; (800603c <chk_mounted+0x40c>)
 8006010:	881a      	ldrh	r2, [r3, #0]
 8006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006014:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
 8006016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006018:	2200      	movs	r2, #0
 800601a:	635a      	str	r2, [r3, #52]	; 0x34
	fs->wflag = 0;
 800601c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601e:	2200      	movs	r2, #0
 8006020:	711a      	strb	r2, [r3, #4]
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	2200      	movs	r2, #0
 8006026:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3748      	adds	r7, #72	; 0x48
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	41615252 	.word	0x41615252
 8006038:	61417272 	.word	0x61417272
 800603c:	20000400 	.word	0x20000400

08006040 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00f      	beq.n	8006072 <validate+0x32>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00b      	beq.n	8006072 <validate+0x32>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d006      	beq.n	8006072 <validate+0x32>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	88da      	ldrh	r2, [r3, #6]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	889b      	ldrh	r3, [r3, #4]
 800606e:	429a      	cmp	r2, r3
 8006070:	d001      	beq.n	8006076 <validate+0x36>
		return FR_INVALID_OBJECT;
 8006072:	2309      	movs	r3, #9
 8006074:	e00d      	b.n	8006092 <validate+0x52>

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	785b      	ldrb	r3, [r3, #1]
 800607c:	4618      	mov	r0, r3
 800607e:	f001 fa93 	bl	80075a8 <disk_status>
 8006082:	4603      	mov	r3, r0
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <validate+0x50>
		return FR_NOT_READY;
 800608c:	2303      	movs	r3, #3
 800608e:	e000      	b.n	8006092 <validate+0x52>

	return FR_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
	...

0800609c <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	4603      	mov	r3, r0
 80060a4:	6039      	str	r1, [r7, #0]
 80060a6:	71fb      	strb	r3, [r7, #7]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <f_mount+0x16>
		return FR_INVALID_DRIVE;
 80060ae:	230b      	movs	r3, #11
 80060b0:	e016      	b.n	80060e0 <f_mount+0x44>
	rfs = FatFs[vol];			/* Get current fs object */
 80060b2:	79fb      	ldrb	r3, [r7, #7]
 80060b4:	4a0d      	ldr	r2, [pc, #52]	; (80060ec <f_mount+0x50>)
 80060b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060ba:	60fb      	str	r3, [r7, #12]

	if (rfs) {
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <f_mount+0x2c>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d002      	beq.n	80060d4 <f_mount+0x38>
		fs->fs_type = 0;		/* Clear new fs object */
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2200      	movs	r2, #0
 80060d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
 80060d4:	79fb      	ldrb	r3, [r7, #7]
 80060d6:	4905      	ldr	r1, [pc, #20]	; (80060ec <f_mount+0x50>)
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return FR_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	200003fc 	.word	0x200003fc

080060f0 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b094      	sub	sp, #80	; 0x50
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	4613      	mov	r3, r2
 80060fc:	71fb      	strb	r3, [r7, #7]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <f_open+0x18>
 8006104:	2309      	movs	r3, #9
 8006106:	e0fc      	b.n	8006302 <f_open+0x212>
	fp->fs = 0;			/* Clear file object */
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800610e:	79fb      	ldrb	r3, [r7, #7]
 8006110:	f003 031f 	and.w	r3, r3, #31
 8006114:	71fb      	strb	r3, [r7, #7]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
 8006116:	79fb      	ldrb	r3, [r7, #7]
 8006118:	f023 0301 	bic.w	r3, r3, #1
 800611c:	b2da      	uxtb	r2, r3
 800611e:	f107 011c 	add.w	r1, r7, #28
 8006122:	f107 0308 	add.w	r3, r7, #8
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff fd82 	bl	8005c30 <chk_mounted>
 800612c:	4603      	mov	r3, r0
 800612e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
 8006132:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006136:	2b00      	cmp	r3, #0
 8006138:	f040 80e1 	bne.w	80062fe <f_open+0x20e>
		INIT_BUF(dj);
 800613c:	f107 0310 	add.w	r3, r7, #16
 8006140:	637b      	str	r3, [r7, #52]	; 0x34
 8006142:	4b72      	ldr	r3, [pc, #456]	; (800630c <f_open+0x21c>)
 8006144:	63bb      	str	r3, [r7, #56]	; 0x38
		res = follow_path(&dj, path);	/* Follow the file path */
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	f107 031c 	add.w	r3, r7, #28
 800614c:	4611      	mov	r1, r2
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff fcb2 	bl	8005ab8 <follow_path>
 8006154:	4603      	mov	r3, r0
 8006156:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		dir = dj.dir;
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	64bb      	str	r3, [r7, #72]	; 0x48
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800615e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006162:	2b00      	cmp	r3, #0
 8006164:	d105      	bne.n	8006172 <f_open+0x82>
			if (!dir)	/* Current dir itself */
 8006166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006168:	2b00      	cmp	r3, #0
 800616a:	d102      	bne.n	8006172 <f_open+0x82>
				res = FR_INVALID_NAME;
 800616c:	2306      	movs	r3, #6
 800616e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006172:	79fb      	ldrb	r3, [r7, #7]
 8006174:	f003 031c 	and.w	r3, r3, #28
 8006178:	2b00      	cmp	r3, #0
 800617a:	d06d      	beq.n	8006258 <f_open+0x168>
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
 800617c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006180:	2b00      	cmp	r3, #0
 8006182:	d012      	beq.n	80061aa <f_open+0xba>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006184:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006188:	2b04      	cmp	r3, #4
 800618a:	d107      	bne.n	800619c <f_open+0xac>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800618c:	f107 031c 	add.w	r3, r7, #28
 8006190:	4618      	mov	r0, r3
 8006192:	f7ff f993 	bl	80054bc <dir_register>
 8006196:	4603      	mov	r3, r0
 8006198:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800619c:	79fb      	ldrb	r3, [r7, #7]
 800619e:	f043 0308 	orr.w	r3, r3, #8
 80061a2:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 80061a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80061a8:	e012      	b.n	80061d0 <f_open+0xe0>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80061aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ac:	330b      	adds	r3, #11
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	f003 0311 	and.w	r3, r3, #17
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <f_open+0xd0>
					res = FR_DENIED;
 80061b8:	2307      	movs	r3, #7
 80061ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80061be:	e007      	b.n	80061d0 <f_open+0xe0>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	f003 0304 	and.w	r3, r3, #4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d002      	beq.n	80061d0 <f_open+0xe0>
						res = FR_EXIST;
 80061ca:	2308      	movs	r3, #8
 80061cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80061d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d15d      	bne.n	8006294 <f_open+0x1a4>
 80061d8:	79fb      	ldrb	r3, [r7, #7]
 80061da:	f003 0308 	and.w	r3, r3, #8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d058      	beq.n	8006294 <f_open+0x1a4>
				dw = get_fattime();					/* Created time */
 80061e2:	f001 fced 	bl	8007bc0 <get_fattime>
 80061e6:	6478      	str	r0, [r7, #68]	; 0x44
				ST_DWORD(dir+DIR_CrtTime, dw);
 80061e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ea:	330e      	adds	r3, #14
 80061ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061ee:	601a      	str	r2, [r3, #0]
				dir[DIR_Attr] = 0;					/* Reset attribute */
 80061f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061f2:	330b      	adds	r3, #11
 80061f4:	2200      	movs	r2, #0
 80061f6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
 80061f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061fa:	331c      	adds	r3, #28
 80061fc:	2200      	movs	r2, #0
 80061fe:	601a      	str	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006204:	4618      	mov	r0, r3
 8006206:	f7fe ff24 	bl	8005052 <ld_clust>
 800620a:	6438      	str	r0, [r7, #64]	; 0x40
				st_clust(dir, 0);					/* cluster = 0 */
 800620c:	2100      	movs	r1, #0
 800620e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006210:	f7fe ff3a 	bl	8005088 <st_clust>
				dj.fs->wflag = 1;
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	2201      	movs	r2, #1
 8006218:	711a      	strb	r2, [r3, #4]
				if (cl) {							/* Remove the cluster chain if exist */
 800621a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800621c:	2b00      	cmp	r3, #0
 800621e:	d039      	beq.n	8006294 <f_open+0x1a4>
					dw = dj.fs->winsect;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006224:	647b      	str	r3, [r7, #68]	; 0x44
					res = remove_chain(dj.fs, cl);
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800622a:	4618      	mov	r0, r3
 800622c:	f7fe fca4 	bl	8004b78 <remove_chain>
 8006230:	4603      	mov	r3, r0
 8006232:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					if (res == FR_OK) {
 8006236:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800623a:	2b00      	cmp	r3, #0
 800623c:	d12a      	bne.n	8006294 <f_open+0x1a4>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006242:	3a01      	subs	r2, #1
 8006244:	60da      	str	r2, [r3, #12]
						res = move_window(dj.fs, dw);
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800624a:	4618      	mov	r0, r3
 800624c:	f7fe fa83 	bl	8004756 <move_window>
 8006250:	4603      	mov	r3, r0
 8006252:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006256:	e01d      	b.n	8006294 <f_open+0x1a4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
 8006258:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800625c:	2b00      	cmp	r3, #0
 800625e:	d119      	bne.n	8006294 <f_open+0x1a4>
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
 8006260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006262:	330b      	adds	r3, #11
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	f003 0310 	and.w	r3, r3, #16
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <f_open+0x186>
					res = FR_NO_FILE;
 800626e:	2304      	movs	r3, #4
 8006270:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006274:	e00e      	b.n	8006294 <f_open+0x1a4>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006276:	79fb      	ldrb	r3, [r7, #7]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d009      	beq.n	8006294 <f_open+0x1a4>
 8006280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006282:	330b      	adds	r3, #11
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <f_open+0x1a4>
						res = FR_DENIED;
 800628e:	2307      	movs	r3, #7
 8006290:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				}
			}
		}
		if (res == FR_OK) {
 8006294:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10f      	bne.n	80062bc <f_open+0x1cc>
			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
 800629c:	79fb      	ldrb	r3, [r7, #7]
 800629e:	f003 0308 	and.w	r3, r3, #8
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <f_open+0x1be>
				mode |= FA__WRITTEN;
 80062a6:	79fb      	ldrb	r3, [r7, #7]
 80062a8:	f043 0320 	orr.w	r3, r3, #32
 80062ac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ba:	621a      	str	r2, [r3, #32]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80062bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d11c      	bne.n	80062fe <f_open+0x20e>
			fp->flag = mode;					/* File access mode */
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	79fa      	ldrb	r2, [r7, #7]
 80062c8:	719a      	strb	r2, [r3, #6]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fe febf 	bl	8005052 <ld_clust>
 80062d4:	4602      	mov	r2, r0
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 80062da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062dc:	331c      	adds	r3, #28
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 80062f0:	69fa      	ldr	r2, [r7, #28]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	88da      	ldrh	r2, [r3, #6]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 80062fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006302:	4618      	mov	r0, r3
 8006304:	3750      	adds	r7, #80	; 0x50
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	20000404 	.word	0x20000404

08006310 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b08c      	sub	sp, #48	; 0x30
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f7ff fe89 	bl	8006040 <validate>
 800632e:	4603      	mov	r3, r0
 8006330:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006332:	7ffb      	ldrb	r3, [r7, #31]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <f_read+0x2c>
 8006338:	7ffb      	ldrb	r3, [r7, #31]
 800633a:	e135      	b.n	80065a8 <f_read+0x298>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	799b      	ldrb	r3, [r3, #6]
 8006340:	b25b      	sxtb	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	da01      	bge.n	800634a <f_read+0x3a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 8006346:	2302      	movs	r3, #2
 8006348:	e12e      	b.n	80065a8 <f_read+0x298>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	799b      	ldrb	r3, [r3, #6]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006356:	2307      	movs	r3, #7
 8006358:	e126      	b.n	80065a8 <f_read+0x298>
	remain = fp->fsize - fp->fptr;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	429a      	cmp	r2, r3
 800636c:	f240 8117 	bls.w	800659e <f_read+0x28e>
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006374:	e113      	b.n	800659e <f_read+0x28e>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800637e:	2b00      	cmp	r3, #0
 8006380:	f040 80df 	bne.w	8006542 <f_read+0x232>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	0a5b      	lsrs	r3, r3, #9
 800638a:	b2da      	uxtb	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	789b      	ldrb	r3, [r3, #2]
 8006392:	3b01      	subs	r3, #1
 8006394:	b2db      	uxtb	r3, r3
 8006396:	4013      	ands	r3, r2
 8006398:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800639a:	7dfb      	ldrb	r3, [r7, #23]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d12c      	bne.n	80063fa <f_read+0xea>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d103      	bne.n	80063b0 <f_read+0xa0>
					clst = fp->sclust;			/* Follow from the origin */
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ae:	e008      	b.n	80063c2 <f_read+0xb2>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	4619      	mov	r1, r3
 80063ba:	4610      	mov	r0, r2
 80063bc:	f7fe fa73 	bl	80048a6 <get_fat>
 80063c0:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80063c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d808      	bhi.n	80063da <f_read+0xca>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	799b      	ldrb	r3, [r3, #6]
 80063cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	719a      	strb	r2, [r3, #6]
 80063d6:	2302      	movs	r3, #2
 80063d8:	e0e6      	b.n	80065a8 <f_read+0x298>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80063da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e0:	d108      	bne.n	80063f4 <f_read+0xe4>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	799b      	ldrb	r3, [r3, #6]
 80063e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	719a      	strb	r2, [r3, #6]
 80063f0:	2301      	movs	r3, #1
 80063f2:	e0d9      	b.n	80065a8 <f_read+0x298>
				fp->clust = clst;				/* Update current cluster */
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063f8:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	4619      	mov	r1, r3
 8006404:	4610      	mov	r0, r2
 8006406:	f7fe fa2f 	bl	8004868 <clust2sect>
 800640a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d108      	bne.n	8006424 <f_read+0x114>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	799b      	ldrb	r3, [r3, #6]
 8006416:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800641a:	b2da      	uxtb	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	719a      	strb	r2, [r3, #6]
 8006420:	2302      	movs	r3, #2
 8006422:	e0c1      	b.n	80065a8 <f_read+0x298>
			sect += csect;
 8006424:	7dfb      	ldrb	r3, [r7, #23]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4413      	add	r3, r2
 800642a:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	0a5b      	lsrs	r3, r3, #9
 8006430:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	2b00      	cmp	r3, #0
 8006436:	d042      	beq.n	80064be <f_read+0x1ae>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006438:	7dfa      	ldrb	r2, [r7, #23]
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	4413      	add	r3, r2
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	6812      	ldr	r2, [r2, #0]
 8006442:	7892      	ldrb	r2, [r2, #2]
 8006444:	4293      	cmp	r3, r2
 8006446:	d906      	bls.n	8006456 <f_read+0x146>
					cc = fp->fs->csize - csect;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	789b      	ldrb	r3, [r3, #2]
 800644e:	461a      	mov	r2, r3
 8006450:	7dfb      	ldrb	r3, [r7, #23]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	7858      	ldrb	r0, [r3, #1]
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	b2db      	uxtb	r3, r3
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	6a39      	ldr	r1, [r7, #32]
 8006464:	f001 f8b6 	bl	80075d4 <disk_read>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d008      	beq.n	8006480 <f_read+0x170>
					ABORT(fp->fs, FR_DISK_ERR);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	799b      	ldrb	r3, [r3, #6]
 8006472:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006476:	b2da      	uxtb	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	719a      	strb	r2, [r3, #6]
 800647c:	2301      	movs	r3, #1
 800647e:	e093      	b.n	80065a8 <f_read+0x298>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	799b      	ldrb	r3, [r3, #6]
 8006484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006488:	2b00      	cmp	r3, #0
 800648a:	d014      	beq.n	80064b6 <f_read+0x1a6>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	699a      	ldr	r2, [r3, #24]
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006496:	429a      	cmp	r2, r3
 8006498:	d90d      	bls.n	80064b6 <f_read+0x1a6>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	699a      	ldr	r2, [r3, #24]
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	025b      	lsls	r3, r3, #9
 80064a4:	6a3a      	ldr	r2, [r7, #32]
 80064a6:	18d0      	adds	r0, r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	3324      	adds	r3, #36	; 0x24
 80064ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064b0:	4619      	mov	r1, r3
 80064b2:	f7fe f87f 	bl	80045b4 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	025b      	lsls	r3, r3, #9
 80064ba:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80064bc:	e05b      	b.n	8006576 <f_read+0x266>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d039      	beq.n	800653c <f_read+0x22c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	799b      	ldrb	r3, [r3, #6]
 80064cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01d      	beq.n	8006510 <f_read+0x200>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	7858      	ldrb	r0, [r3, #1]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	699a      	ldr	r2, [r3, #24]
 80064e4:	2301      	movs	r3, #1
 80064e6:	f001 f8dd 	bl	80076a4 <disk_write>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d008      	beq.n	8006502 <f_read+0x1f2>
						ABORT(fp->fs, FR_DISK_ERR);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	799b      	ldrb	r3, [r3, #6]
 80064f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	719a      	strb	r2, [r3, #6]
 80064fe:	2301      	movs	r3, #1
 8006500:	e052      	b.n	80065a8 <f_read+0x298>
					fp->flag &= ~FA__DIRTY;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	799b      	ldrb	r3, [r3, #6]
 8006506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800650a:	b2da      	uxtb	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	7858      	ldrb	r0, [r3, #1]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800651c:	2301      	movs	r3, #1
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	f001 f858 	bl	80075d4 <disk_read>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d008      	beq.n	800653c <f_read+0x22c>
					ABORT(fp->fs, FR_DISK_ERR);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	799b      	ldrb	r3, [r3, #6]
 800652e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006532:	b2da      	uxtb	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	719a      	strb	r2, [r3, #6]
 8006538:	2301      	movs	r3, #1
 800653a:	e035      	b.n	80065a8 <f_read+0x298>
			}
#endif
			fp->dsect = sect;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800654a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800654e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8006550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	429a      	cmp	r2, r3
 8006556:	d901      	bls.n	800655c <f_read+0x24c>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006564:	3320      	adds	r3, #32
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	4413      	add	r3, r2
 800656a:	3304      	adds	r3, #4
 800656c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800656e:	4619      	mov	r1, r3
 8006570:	6a38      	ldr	r0, [r7, #32]
 8006572:	f7fe f81f 	bl	80045b4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006576:	6a3a      	ldr	r2, [r7, #32]
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	4413      	add	r3, r2
 800657c:	623b      	str	r3, [r7, #32]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	689a      	ldr	r2, [r3, #8]
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006584:	441a      	add	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	609a      	str	r2, [r3, #8]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006590:	441a      	add	r2, r3
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f47f aee8 	bne.w	8006376 <f_read+0x66>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3730      	adds	r7, #48	; 0x30
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08a      	sub	sp, #40	; 0x28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
 80065bc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2200      	movs	r2, #0
 80065c6:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f7ff fd39 	bl	8006040 <validate>
 80065ce:	4603      	mov	r3, r0
 80065d0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80065d2:	7dfb      	ldrb	r3, [r7, #23]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <f_write+0x2c>
 80065d8:	7dfb      	ldrb	r3, [r7, #23]
 80065da:	e166      	b.n	80068aa <f_write+0x2fa>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	799b      	ldrb	r3, [r3, #6]
 80065e0:	b25b      	sxtb	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	da01      	bge.n	80065ea <f_write+0x3a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 80065e6:	2302      	movs	r3, #2
 80065e8:	e15f      	b.n	80068aa <f_write+0x2fa>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	799b      	ldrb	r3, [r3, #6]
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 80065f6:	2307      	movs	r3, #7
 80065f8:	e157      	b.n	80068aa <f_write+0x2fa>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	68da      	ldr	r2, [r3, #12]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	441a      	add	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	429a      	cmp	r2, r3
 8006608:	f080 8137 	bcs.w	800687a <f_write+0x2ca>
 800660c:	2300      	movs	r3, #0
 800660e:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8006610:	e133      	b.n	800687a <f_write+0x2ca>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800661a:	2b00      	cmp	r3, #0
 800661c:	f040 80f8 	bne.w	8006810 <f_write+0x260>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	0a5b      	lsrs	r3, r3, #9
 8006626:	b2da      	uxtb	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	789b      	ldrb	r3, [r3, #2]
 800662e:	3b01      	subs	r3, #1
 8006630:	b2db      	uxtb	r3, r3
 8006632:	4013      	ands	r3, r2
 8006634:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8006636:	7dbb      	ldrb	r3, [r7, #22]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d13d      	bne.n	80066b8 <f_write+0x108>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d110      	bne.n	8006666 <f_write+0xb6>
					clst = fp->sclust;		/* Follow from the origin */
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	2b00      	cmp	r3, #0
 800664e:	d113      	bne.n	8006678 <f_write+0xc8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2100      	movs	r1, #0
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe fadd 	bl	8004c16 <create_chain>
 800665c:	6278      	str	r0, [r7, #36]	; 0x24
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006662:	611a      	str	r2, [r3, #16]
 8006664:	e008      	b.n	8006678 <f_write+0xc8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	4619      	mov	r1, r3
 8006670:	4610      	mov	r0, r2
 8006672:	f7fe fad0 	bl	8004c16 <create_chain>
 8006676:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	2b00      	cmp	r3, #0
 800667c:	f000 8102 	beq.w	8006884 <f_write+0x2d4>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	2b01      	cmp	r3, #1
 8006684:	d108      	bne.n	8006698 <f_write+0xe8>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	799b      	ldrb	r3, [r3, #6]
 800668a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800668e:	b2da      	uxtb	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	719a      	strb	r2, [r3, #6]
 8006694:	2302      	movs	r3, #2
 8006696:	e108      	b.n	80068aa <f_write+0x2fa>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669e:	d108      	bne.n	80066b2 <f_write+0x102>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	799b      	ldrb	r3, [r3, #6]
 80066a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	719a      	strb	r2, [r3, #6]
 80066ae:	2301      	movs	r3, #1
 80066b0:	e0fb      	b.n	80068aa <f_write+0x2fa>
				fp->clust = clst;			/* Update current cluster */
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b6:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	799b      	ldrb	r3, [r3, #6]
 80066bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d01d      	beq.n	8006700 <f_write+0x150>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	7858      	ldrb	r0, [r3, #1]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	699a      	ldr	r2, [r3, #24]
 80066d4:	2301      	movs	r3, #1
 80066d6:	f000 ffe5 	bl	80076a4 <disk_write>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d008      	beq.n	80066f2 <f_write+0x142>
					ABORT(fp->fs, FR_DISK_ERR);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	799b      	ldrb	r3, [r3, #6]
 80066e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	719a      	strb	r2, [r3, #6]
 80066ee:	2301      	movs	r3, #1
 80066f0:	e0db      	b.n	80068aa <f_write+0x2fa>
				fp->flag &= ~FA__DIRTY;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	799b      	ldrb	r3, [r3, #6]
 80066f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	4619      	mov	r1, r3
 800670a:	4610      	mov	r0, r2
 800670c:	f7fe f8ac 	bl	8004868 <clust2sect>
 8006710:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d108      	bne.n	800672a <f_write+0x17a>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	799b      	ldrb	r3, [r3, #6]
 800671c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006720:	b2da      	uxtb	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	719a      	strb	r2, [r3, #6]
 8006726:	2302      	movs	r3, #2
 8006728:	e0bf      	b.n	80068aa <f_write+0x2fa>
			sect += csect;
 800672a:	7dbb      	ldrb	r3, [r7, #22]
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	4413      	add	r3, r2
 8006730:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	0a5b      	lsrs	r3, r3, #9
 8006736:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d044      	beq.n	80067c8 <f_write+0x218>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800673e:	7dba      	ldrb	r2, [r7, #22]
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	4413      	add	r3, r2
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	6812      	ldr	r2, [r2, #0]
 8006748:	7892      	ldrb	r2, [r2, #2]
 800674a:	4293      	cmp	r3, r2
 800674c:	d906      	bls.n	800675c <f_write+0x1ac>
					cc = fp->fs->csize - csect;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	789b      	ldrb	r3, [r3, #2]
 8006754:	461a      	mov	r2, r3
 8006756:	7dbb      	ldrb	r3, [r7, #22]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	7858      	ldrb	r0, [r3, #1]
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	b2db      	uxtb	r3, r3
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	69b9      	ldr	r1, [r7, #24]
 800676a:	f000 ff9b 	bl	80076a4 <disk_write>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d008      	beq.n	8006786 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	799b      	ldrb	r3, [r3, #6]
 8006778:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800677c:	b2da      	uxtb	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	719a      	strb	r2, [r3, #6]
 8006782:	2301      	movs	r3, #1
 8006784:	e091      	b.n	80068aa <f_write+0x2fa>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	699a      	ldr	r2, [r3, #24]
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	69fa      	ldr	r2, [r7, #28]
 8006790:	429a      	cmp	r2, r3
 8006792:	d915      	bls.n	80067c0 <f_write+0x210>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	699a      	ldr	r2, [r3, #24]
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	025b      	lsls	r3, r3, #9
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	4413      	add	r3, r2
 80067a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ac:	4619      	mov	r1, r3
 80067ae:	f7fd ff01 	bl	80045b4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	799b      	ldrb	r3, [r3, #6]
 80067b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	719a      	strb	r2, [r3, #6]
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	025b      	lsls	r3, r3, #9
 80067c4:	623b      	str	r3, [r7, #32]
				continue;
 80067c6:	e044      	b.n	8006852 <f_write+0x2a2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d01b      	beq.n	800680a <f_write+0x25a>
				if (fp->fptr < fp->fsize &&
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d215      	bcs.n	800680a <f_write+0x25a>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	7858      	ldrb	r0, [r3, #1]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80067ea:	2301      	movs	r3, #1
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	f000 fef1 	bl	80075d4 <disk_read>
 80067f2:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d008      	beq.n	800680a <f_write+0x25a>
						ABORT(fp->fs, FR_DISK_ERR);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	799b      	ldrb	r3, [r3, #6]
 80067fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006800:	b2da      	uxtb	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	719a      	strb	r2, [r3, #6]
 8006806:	2301      	movs	r3, #1
 8006808:	e04f      	b.n	80068aa <f_write+0x2fa>
			}
#endif
			fp->dsect = sect;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006818:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800681c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800681e:	6a3a      	ldr	r2, [r7, #32]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	429a      	cmp	r2, r3
 8006824:	d901      	bls.n	800682a <f_write+0x27a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006832:	3320      	adds	r3, #32
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	4413      	add	r3, r2
 8006838:	3304      	adds	r3, #4
 800683a:	6a3a      	ldr	r2, [r7, #32]
 800683c:	69b9      	ldr	r1, [r7, #24]
 800683e:	4618      	mov	r0, r3
 8006840:	f7fd feb8 	bl	80045b4 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	799b      	ldrb	r3, [r3, #6]
 8006848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800684c:	b2da      	uxtb	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	4413      	add	r3, r2
 8006858:	61bb      	str	r3, [r7, #24]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	441a      	add	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	609a      	str	r2, [r3, #8]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	441a      	add	r2, r3
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	f47f aec8 	bne.w	8006612 <f_write+0x62>
 8006882:	e000      	b.n	8006886 <f_write+0x2d6>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006884:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	689a      	ldr	r2, [r3, #8]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	429a      	cmp	r2, r3
 8006890:	d903      	bls.n	800689a <f_write+0x2ea>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	799b      	ldrb	r3, [r3, #6]
 800689e:	f043 0320 	orr.w	r3, r3, #32
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3728      	adds	r7, #40	; 0x28
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b086      	sub	sp, #24
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff fbc0 	bl	8006040 <validate>
 80068c0:	4603      	mov	r3, r0
 80068c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80068c4:	7dfb      	ldrb	r3, [r7, #23]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d163      	bne.n	8006992 <f_sync+0xe0>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	799b      	ldrb	r3, [r3, #6]
 80068ce:	f003 0320 	and.w	r3, r3, #32
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d05d      	beq.n	8006992 <f_sync+0xe0>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	799b      	ldrb	r3, [r3, #6]
 80068da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d016      	beq.n	8006910 <f_sync+0x5e>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	7858      	ldrb	r0, [r3, #1]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	2301      	movs	r3, #1
 80068f4:	f000 fed6 	bl	80076a4 <disk_write>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <f_sync+0x50>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80068fe:	2301      	movs	r3, #1
 8006900:	e048      	b.n	8006994 <f_sync+0xe2>
				fp->flag &= ~FA__DIRTY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	799b      	ldrb	r3, [r3, #6]
 8006906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800690a:	b2da      	uxtb	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	4619      	mov	r1, r3
 800691a:	4610      	mov	r0, r2
 800691c:	f7fd ff1b 	bl	8004756 <move_window>
 8006920:	4603      	mov	r3, r0
 8006922:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8006924:	7dfb      	ldrb	r3, [r7, #23]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d133      	bne.n	8006992 <f_sync+0xe0>
				dir = fp->dir_ptr;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	330b      	adds	r3, #11
 8006934:	781a      	ldrb	r2, [r3, #0]
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	330b      	adds	r3, #11
 800693a:	f042 0220 	orr.w	r2, r2, #32
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	331c      	adds	r3, #28
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	68d2      	ldr	r2, [r2, #12]
 800694a:	601a      	str	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	4619      	mov	r1, r3
 8006952:	6938      	ldr	r0, [r7, #16]
 8006954:	f7fe fb98 	bl	8005088 <st_clust>
				tm = get_fattime();							/* Update updated time */
 8006958:	f001 f932 	bl	8007bc0 <get_fattime>
 800695c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tm);
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	3316      	adds	r3, #22
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	601a      	str	r2, [r3, #0]
				ST_WORD(dir+DIR_LstAccDate, 0);
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	3312      	adds	r3, #18
 800696a:	2200      	movs	r2, #0
 800696c:	801a      	strh	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	799b      	ldrb	r3, [r3, #6]
 8006972:	f023 0320 	bic.w	r3, r3, #32
 8006976:	b2da      	uxtb	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2201      	movs	r2, #1
 8006982:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4618      	mov	r0, r3
 800698a:	f7fd ff0d 	bl	80047a8 <sync_fs>
 800698e:	4603      	mov	r3, r0
 8006990:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8006992:	7dfb      	ldrb	r3, [r7, #23]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
#endif
		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
		LEAVE_FF(fs, res);
	}
#else
	res = f_sync(fp);		/* Flush cached data */
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7ff ff84 	bl	80068b2 <f_sync>
 80069aa:	4603      	mov	r3, r0
 80069ac:	73fb      	strb	r3, [r7, #15]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
 80069ae:	7bfb      	ldrb	r3, [r7, #15]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d102      	bne.n	80069ba <f_close+0x1e>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	601a      	str	r2, [r3, #0]
	return res;
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <my_init_card>:
UINT readBytes = 0;			//Счетчик кол-ва прочитанных данных
UINT WriteBytes = 0;		//Счетчик кол-ва записанных данных

//Функция инициализации карты памяти
void my_init_card(void)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	af00      	add	r7, sp, #0
//	SD_PowerOn();
	sd_ini();
 80069c8:	f000 fa32 	bl	8006e30 <sd_ini>
}
 80069cc:	bf00      	nop
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <my_read_file>:
//Функция чтения файла с карты памяти
void my_read_file(void)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b092      	sub	sp, #72	; 0x48
 80069d4:	af00      	add	r7, sp, #0
	if (f_mount(0, &FATFS_Obj) == FR_OK)	//Монтируем модуль FatFs
 80069d6:	4940      	ldr	r1, [pc, #256]	; (8006ad8 <my_read_file+0x108>)
 80069d8:	2000      	movs	r0, #0
 80069da:	f7ff fb5f 	bl	800609c <f_mount>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d175      	bne.n	8006ad0 <my_read_file+0x100>
	{
		SEND_str("f_mount -> success\n");
 80069e4:	483d      	ldr	r0, [pc, #244]	; (8006adc <my_read_file+0x10c>)
 80069e6:	f7fc f8e1 	bl	8002bac <SEND_str>

		uint8_t path[10]="test.json";
 80069ea:	4a3d      	ldr	r2, [pc, #244]	; (8006ae0 <my_read_file+0x110>)
 80069ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80069f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80069f2:	c303      	stmia	r3!, {r0, r1}
 80069f4:	801a      	strh	r2, [r3, #0]
		path[9] = '\0';
 80069f6:	2300      	movs	r3, #0
 80069f8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

		result = f_open(&test, (char*)path, FA_READ);
 80069fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006a00:	2201      	movs	r2, #1
 8006a02:	4619      	mov	r1, r3
 8006a04:	4837      	ldr	r0, [pc, #220]	; (8006ae4 <my_read_file+0x114>)
 8006a06:	f7ff fb73 	bl	80060f0 <f_open>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	4b36      	ldr	r3, [pc, #216]	; (8006ae8 <my_read_file+0x118>)
 8006a10:	701a      	strb	r2, [r3, #0]

		if(result == FR_OK)
 8006a12:	4b35      	ldr	r3, [pc, #212]	; (8006ae8 <my_read_file+0x118>)
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d15a      	bne.n	8006ad0 <my_read_file+0x100>
		{
			SEND_str("f_open -> success\n");
 8006a1a:	4834      	ldr	r0, [pc, #208]	; (8006aec <my_read_file+0x11c>)
 8006a1c:	f7fc f8c6 	bl	8002bac <SEND_str>

			BytesToRead = test.fsize;
 8006a20:	4b30      	ldr	r3, [pc, #192]	; (8006ae4 <my_read_file+0x114>)
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	4a32      	ldr	r2, [pc, #200]	; (8006af0 <my_read_file+0x120>)
 8006a26:	6013      	str	r3, [r2, #0]

			char str1[60];
			sprintf(str1, "file_Size: %d Byte\n", BytesToRead);
 8006a28:	4b31      	ldr	r3, [pc, #196]	; (8006af0 <my_read_file+0x120>)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	463b      	mov	r3, r7
 8006a2e:	4931      	ldr	r1, [pc, #196]	; (8006af4 <my_read_file+0x124>)
 8006a30:	4618      	mov	r0, r3
 8006a32:	f014 fcaf 	bl	801b394 <siprintf>
			SEND_str(str1);
 8006a36:	463b      	mov	r3, r7
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fc f8b7 	bl	8002bac <SEND_str>

			BytesCounter = 0;
 8006a3e:	4b2e      	ldr	r3, [pc, #184]	; (8006af8 <my_read_file+0x128>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	601a      	str	r2, [r3, #0]
			while ((BytesToRead - BytesCounter) >= 512)
 8006a44:	e017      	b.n	8006a76 <my_read_file+0xa6>
		    {
		       	f_read(&test, readBuffer, 512, &readBytes);
 8006a46:	4b2d      	ldr	r3, [pc, #180]	; (8006afc <my_read_file+0x12c>)
 8006a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a4c:	492c      	ldr	r1, [pc, #176]	; (8006b00 <my_read_file+0x130>)
 8006a4e:	4825      	ldr	r0, [pc, #148]	; (8006ae4 <my_read_file+0x114>)
 8006a50:	f7ff fc5e 	bl	8006310 <f_read>
		       	BytesCounter += 512;
 8006a54:	4b28      	ldr	r3, [pc, #160]	; (8006af8 <my_read_file+0x128>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006a5c:	4a26      	ldr	r2, [pc, #152]	; (8006af8 <my_read_file+0x128>)
 8006a5e:	6013      	str	r3, [r2, #0]

		       	HAL_UART_Transmit(&huart3, (uint8_t*)readBuffer, strlen(readBuffer), 0x1000);
 8006a60:	4827      	ldr	r0, [pc, #156]	; (8006b00 <my_read_file+0x130>)
 8006a62:	f7f9 fbbf 	bl	80001e4 <strlen>
 8006a66:	4603      	mov	r3, r0
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a6e:	4924      	ldr	r1, [pc, #144]	; (8006b00 <my_read_file+0x130>)
 8006a70:	4824      	ldr	r0, [pc, #144]	; (8006b04 <my_read_file+0x134>)
 8006a72:	f007 f98a 	bl	800dd8a <HAL_UART_Transmit>
			while ((BytesToRead - BytesCounter) >= 512)
 8006a76:	4b1e      	ldr	r3, [pc, #120]	; (8006af0 <my_read_file+0x120>)
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	4b1f      	ldr	r3, [pc, #124]	; (8006af8 <my_read_file+0x128>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a84:	d2df      	bcs.n	8006a46 <my_read_file+0x76>
		    }
		    if (BytesToRead != BytesCounter)
 8006a86:	4b1a      	ldr	r3, [pc, #104]	; (8006af0 <my_read_file+0x120>)
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	4b1b      	ldr	r3, [pc, #108]	; (8006af8 <my_read_file+0x128>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d01b      	beq.n	8006aca <my_read_file+0xfa>
		    {
	        	f_read(&test, readBuffer, (BytesToRead - BytesCounter), &readBytes);
 8006a92:	4b17      	ldr	r3, [pc, #92]	; (8006af0 <my_read_file+0x120>)
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	4b18      	ldr	r3, [pc, #96]	; (8006af8 <my_read_file+0x128>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	1ad2      	subs	r2, r2, r3
 8006a9c:	4b17      	ldr	r3, [pc, #92]	; (8006afc <my_read_file+0x12c>)
 8006a9e:	4918      	ldr	r1, [pc, #96]	; (8006b00 <my_read_file+0x130>)
 8006aa0:	4810      	ldr	r0, [pc, #64]	; (8006ae4 <my_read_file+0x114>)
 8006aa2:	f7ff fc35 	bl	8006310 <f_read>

	        	HAL_UART_Transmit(&huart3, (uint8_t*)readBuffer, BytesToRead - BytesCounter, 0x1000);
 8006aa6:	4b12      	ldr	r3, [pc, #72]	; (8006af0 <my_read_file+0x120>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	4b12      	ldr	r3, [pc, #72]	; (8006af8 <my_read_file+0x128>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006aba:	4911      	ldr	r1, [pc, #68]	; (8006b00 <my_read_file+0x130>)
 8006abc:	4811      	ldr	r0, [pc, #68]	; (8006b04 <my_read_file+0x134>)
 8006abe:	f007 f964 	bl	800dd8a <HAL_UART_Transmit>

	        	BytesCounter = BytesToRead;
 8006ac2:	4b0b      	ldr	r3, [pc, #44]	; (8006af0 <my_read_file+0x120>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a0c      	ldr	r2, [pc, #48]	; (8006af8 <my_read_file+0x128>)
 8006ac8:	6013      	str	r3, [r2, #0]
//				SEND_str(readBuffer);
//				SEND_str("\n");
//				sprintf(str1,"BytesToRead: %d\n",readBytes);
//				SEND_str(str1);
//			}
		    f_close(&test);
 8006aca:	4806      	ldr	r0, [pc, #24]	; (8006ae4 <my_read_file+0x114>)
 8006acc:	f7ff ff66 	bl	800699c <f_close>
//		    f_unlink((char*)path);
		}
	}
}
 8006ad0:	bf00      	nop
 8006ad2:	3748      	adds	r7, #72	; 0x48
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	20000ef8 	.word	0x20000ef8
 8006adc:	08020430 	.word	0x08020430
 8006ae0:	0802046c 	.word	0x0802046c
 8006ae4:	20001130 	.word	0x20001130
 8006ae8:	20001354 	.word	0x20001354
 8006aec:	08020444 	.word	0x08020444
 8006af0:	20000430 	.word	0x20000430
 8006af4:	08020458 	.word	0x08020458
 8006af8:	20000434 	.word	0x20000434
 8006afc:	20000438 	.word	0x20000438
 8006b00:	20000cf8 	.word	0x20000cf8
 8006b04:	20000c38 	.word	0x20000c38

08006b08 <my_write_file>:
//Функция записи файла на карту памяти
//Принимает "path" - указатель на имя файла
//Принимает "text" - указатель на строку JSON, которую нужно сохранить
void my_write_file(char *path, char *text)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b092      	sub	sp, #72	; 0x48
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
	if (f_mount(0, &FATFS_Obj) == FR_OK)
 8006b12:	4921      	ldr	r1, [pc, #132]	; (8006b98 <my_write_file+0x90>)
 8006b14:	2000      	movs	r0, #0
 8006b16:	f7ff fac1 	bl	800609c <f_mount>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d136      	bne.n	8006b8e <my_write_file+0x86>
	{
		SEND_str("f_mount -> success\n");
 8006b20:	481e      	ldr	r0, [pc, #120]	; (8006b9c <my_write_file+0x94>)
 8006b22:	f7fc f843 	bl	8002bac <SEND_str>

		result = f_open(&test, path + '\0', FA_CREATE_ALWAYS|FA_WRITE);
 8006b26:	220a      	movs	r2, #10
 8006b28:	6879      	ldr	r1, [r7, #4]
 8006b2a:	481d      	ldr	r0, [pc, #116]	; (8006ba0 <my_write_file+0x98>)
 8006b2c:	f7ff fae0 	bl	80060f0 <f_open>
 8006b30:	4603      	mov	r3, r0
 8006b32:	461a      	mov	r2, r3
 8006b34:	4b1b      	ldr	r3, [pc, #108]	; (8006ba4 <my_write_file+0x9c>)
 8006b36:	701a      	strb	r2, [r3, #0]

		if(result == FR_OK)
 8006b38:	4b1a      	ldr	r3, [pc, #104]	; (8006ba4 <my_write_file+0x9c>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d126      	bne.n	8006b8e <my_write_file+0x86>
		{
			SEND_str("f_open -> success\n");
 8006b40:	4819      	ldr	r0, [pc, #100]	; (8006ba8 <my_write_file+0xa0>)
 8006b42:	f7fc f833 	bl	8002bac <SEND_str>

			result = f_write(&test, text, strlen(text), &WriteBytes);
 8006b46:	6838      	ldr	r0, [r7, #0]
 8006b48:	f7f9 fb4c 	bl	80001e4 <strlen>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	4b17      	ldr	r3, [pc, #92]	; (8006bac <my_write_file+0xa4>)
 8006b50:	6839      	ldr	r1, [r7, #0]
 8006b52:	4813      	ldr	r0, [pc, #76]	; (8006ba0 <my_write_file+0x98>)
 8006b54:	f7ff fd2c 	bl	80065b0 <f_write>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	4b11      	ldr	r3, [pc, #68]	; (8006ba4 <my_write_file+0x9c>)
 8006b5e:	701a      	strb	r2, [r3, #0]
			if(result == FR_OK)
 8006b60:	4b10      	ldr	r3, [pc, #64]	; (8006ba4 <my_write_file+0x9c>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10f      	bne.n	8006b88 <my_write_file+0x80>
			{
				SEND_str("f_write -> success\n");
 8006b68:	4811      	ldr	r0, [pc, #68]	; (8006bb0 <my_write_file+0xa8>)
 8006b6a:	f7fc f81f 	bl	8002bac <SEND_str>

				char str1[60];
				sprintf(str1, "write_bytes: %d Byte\n", WriteBytes);
 8006b6e:	4b0f      	ldr	r3, [pc, #60]	; (8006bac <my_write_file+0xa4>)
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	f107 030c 	add.w	r3, r7, #12
 8006b76:	490f      	ldr	r1, [pc, #60]	; (8006bb4 <my_write_file+0xac>)
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f014 fc0b 	bl	801b394 <siprintf>
				SEND_str(str1);
 8006b7e:	f107 030c 	add.w	r3, r7, #12
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fc f812 	bl	8002bac <SEND_str>
			}
		    f_close(&test);
 8006b88:	4805      	ldr	r0, [pc, #20]	; (8006ba0 <my_write_file+0x98>)
 8006b8a:	f7ff ff07 	bl	800699c <f_close>
		}
	}
}
 8006b8e:	bf00      	nop
 8006b90:	3748      	adds	r7, #72	; 0x48
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20000ef8 	.word	0x20000ef8
 8006b9c:	08020430 	.word	0x08020430
 8006ba0:	20001130 	.word	0x20001130
 8006ba4:	20001354 	.word	0x20001354
 8006ba8:	08020444 	.word	0x08020444
 8006bac:	2000043c 	.word	0x2000043c
 8006bb0:	08020478 	.word	0x08020478
 8006bb4:	0802048c 	.word	0x0802048c

08006bb8 <save_dido>:
//Функция сохраниения конфигурационных данных (Включить/выключить цифровой выход(Открытый коллектор) если цифровой вход = значение(уровень))
//Принимает "D_IN" - строку с номером цифрового входа
//Принимает "text" - указатель на строку JSON
void save_dido(char *D_IN, char *text)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b08a      	sub	sp, #40	; 0x28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
	char name_FIL[32];

	SEND_str(text);
 8006bc2:	6838      	ldr	r0, [r7, #0]
 8006bc4:	f7fb fff2 	bl	8002bac <SEND_str>
	sprintf(name_FIL,"%s%s.json", D_IN, "(DiDo)");
 8006bc8:	f107 0008 	add.w	r0, r7, #8
 8006bcc:	4b09      	ldr	r3, [pc, #36]	; (8006bf4 <save_dido+0x3c>)
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	4909      	ldr	r1, [pc, #36]	; (8006bf8 <save_dido+0x40>)
 8006bd2:	f014 fbdf 	bl	801b394 <siprintf>
	SEND_str(name_FIL);
 8006bd6:	f107 0308 	add.w	r3, r7, #8
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fb ffe6 	bl	8002bac <SEND_str>
	my_write_file(name_FIL, text);
 8006be0:	f107 0308 	add.w	r3, r7, #8
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7ff ff8e 	bl	8006b08 <my_write_file>
}
 8006bec:	bf00      	nop
 8006bee:	3728      	adds	r7, #40	; 0x28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	080204a4 	.word	0x080204a4
 8006bf8:	080204ac 	.word	0x080204ac

08006bfc <save_aido>:
//Функция сохраниения конфигурационных данных (Включить/выключить один цифровой выход(открытый коллектор) если аналоговый вход в интервале значений)
//Принимает "A_IN" - строку с номером аналогового входа
//Принимает "text" - указатель на строку JSON
void save_aido(char *A_IN, char *text)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08a      	sub	sp, #40	; 0x28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
	char name_FIL[32];

	SEND_str(text);
 8006c06:	6838      	ldr	r0, [r7, #0]
 8006c08:	f7fb ffd0 	bl	8002bac <SEND_str>
	sprintf(name_FIL,"%s%s.json", A_IN, "(AiDo)");
 8006c0c:	f107 0008 	add.w	r0, r7, #8
 8006c10:	4b09      	ldr	r3, [pc, #36]	; (8006c38 <save_aido+0x3c>)
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	4909      	ldr	r1, [pc, #36]	; (8006c3c <save_aido+0x40>)
 8006c16:	f014 fbbd 	bl	801b394 <siprintf>
	SEND_str(name_FIL);
 8006c1a:	f107 0308 	add.w	r3, r7, #8
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fb ffc4 	bl	8002bac <SEND_str>
	my_write_file(name_FIL, text);
 8006c24:	f107 0308 	add.w	r3, r7, #8
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7ff ff6c 	bl	8006b08 <my_write_file>
}
 8006c30:	bf00      	nop
 8006c32:	3728      	adds	r7, #40	; 0x28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	080204b8 	.word	0x080204b8
 8006c3c:	080204ac 	.word	0x080204ac

08006c40 <save_pwm>:
//Функция сохраниения конфигурационных данных (Задать сигнал ШИМ на одном выходе)
//Принимает "PWM_OUT" - строку с номером ШИМ выхода
//Принимает "text" - указатель на строку JSON
void save_pwm(char *PWM_OUT, char *text)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08a      	sub	sp, #40	; 0x28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
	char name_FIL[32];

	SEND_str(text);
 8006c4a:	6838      	ldr	r0, [r7, #0]
 8006c4c:	f7fb ffae 	bl	8002bac <SEND_str>
	sprintf(name_FIL,"%s.json", PWM_OUT);
 8006c50:	f107 0308 	add.w	r3, r7, #8
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	4909      	ldr	r1, [pc, #36]	; (8006c7c <save_pwm+0x3c>)
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f014 fb9b 	bl	801b394 <siprintf>
	SEND_str(name_FIL);
 8006c5e:	f107 0308 	add.w	r3, r7, #8
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fb ffa2 	bl	8002bac <SEND_str>
	my_write_file(name_FIL, text);
 8006c68:	f107 0308 	add.w	r3, r7, #8
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7ff ff4a 	bl	8006b08 <my_write_file>
}
 8006c74:	bf00      	nop
 8006c76:	3728      	adds	r7, #40	; 0x28
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	080204c0 	.word	0x080204c0

08006c80 <save_tsido>:
//Функция сохраниения конфигурационных данных (Включить/выключить один цифровой выход(открытый коллектор) если температура датчика в интервале значений)
//Принимает "ROM_RAW" - строку с уникальным идентификатором температурного датчика
//Принимает "text" - указатель на строку JSON
void save_tsido(char *ROM_RAW, char *text)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b08a      	sub	sp, #40	; 0x28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
	char name_FIL[32];

	SEND_str(text);
 8006c8a:	6838      	ldr	r0, [r7, #0]
 8006c8c:	f7fb ff8e 	bl	8002bac <SEND_str>
	sprintf(name_FIL,"%s%s.json", ROM_RAW, "(TSiDo)");
 8006c90:	f107 0008 	add.w	r0, r7, #8
 8006c94:	4b09      	ldr	r3, [pc, #36]	; (8006cbc <save_tsido+0x3c>)
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	4909      	ldr	r1, [pc, #36]	; (8006cc0 <save_tsido+0x40>)
 8006c9a:	f014 fb7b 	bl	801b394 <siprintf>
	SEND_str(name_FIL);
 8006c9e:	f107 0308 	add.w	r3, r7, #8
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7fb ff82 	bl	8002bac <SEND_str>
	my_write_file(name_FIL, text);
 8006ca8:	f107 0308 	add.w	r3, r7, #8
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff ff2a 	bl	8006b08 <my_write_file>
}
 8006cb4:	bf00      	nop
 8006cb6:	3728      	adds	r7, #40	; 0x28
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	080204c8 	.word	0x080204c8
 8006cc0:	080204ac 	.word	0x080204ac

08006cc4 <Error>:
extern volatile uint16_t Timer1;
sd_info_ptr sdinfo;
char str1[60]={0};
//--------------------------------------------------
static void Error (void)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	af00      	add	r7, sp, #0
	LD_ON;
 8006cc8:	2200      	movs	r2, #0
 8006cca:	2101      	movs	r1, #1
 8006ccc:	4802      	ldr	r0, [pc, #8]	; (8006cd8 <Error+0x14>)
 8006cce:	f004 feaf 	bl	800ba30 <HAL_GPIO_WritePin>
}
 8006cd2:	bf00      	nop
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	40020000 	.word	0x40020000

08006cdc <SPIx_WriteRead>:
//-----------------------------------------------
uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af02      	add	r7, sp, #8
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK)
 8006cea:	f107 020f 	add.w	r2, r7, #15
 8006cee:	1df9      	adds	r1, r7, #7
 8006cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	4806      	ldr	r0, [pc, #24]	; (8006d14 <SPIx_WriteRead+0x38>)
 8006cfa:	f005 fca5 	bl	800c648 <HAL_SPI_TransmitReceive>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d001      	beq.n	8006d08 <SPIx_WriteRead+0x2c>
	{
		Error();
 8006d04:	f7ff ffde 	bl	8006cc4 <Error>
  	}
  	return receivedbyte;
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	20000960 	.word	0x20000960

08006d18 <SPI_SendByte>:
//-----------------------------------------------
void SPI_SendByte(uint8_t bt)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	4603      	mov	r3, r0
 8006d20:	71fb      	strb	r3, [r7, #7]
	SPIx_WriteRead(bt);
 8006d22:	79fb      	ldrb	r3, [r7, #7]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff ffd9 	bl	8006cdc <SPIx_WriteRead>
}
 8006d2a:	bf00      	nop
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <SPI_ReceiveByte>:
//-----------------------------------------------
uint8_t SPI_ReceiveByte(void)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b082      	sub	sp, #8
 8006d36:	af00      	add	r7, sp, #0
	uint8_t bt = SPIx_WriteRead(0xFF);
 8006d38:	20ff      	movs	r0, #255	; 0xff
 8006d3a:	f7ff ffcf 	bl	8006cdc <SPIx_WriteRead>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	71fb      	strb	r3, [r7, #7]
	return bt;
 8006d42:	79fb      	ldrb	r3, [r7, #7]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <SPI_Release>:
//-----------------------------------------------
void SPI_Release(void)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
	SPIx_WriteRead(0xFF);
 8006d50:	20ff      	movs	r0, #255	; 0xff
 8006d52:	f7ff ffc3 	bl	8006cdc <SPIx_WriteRead>
}
 8006d56:	bf00      	nop
 8006d58:	bd80      	pop	{r7, pc}
	...

08006d5c <SD_cmd>:
//-----------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	4603      	mov	r3, r0
 8006d64:	6039      	str	r1, [r7, #0]
 8006d66:	71fb      	strb	r3, [r7, #7]
	uint8_t n, res;
	//ACMD<n> is the command sequense of CMD55-CMD<n>
	if (cmd & 0x80)
 8006d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	da0e      	bge.n	8006d8e <SD_cmd+0x32>
	{
		cmd &= 0x7F;
 8006d70:	79fb      	ldrb	r3, [r7, #7]
 8006d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d76:	71fb      	strb	r3, [r7, #7]
		res = SD_cmd(CMD55, 0);
 8006d78:	2100      	movs	r1, #0
 8006d7a:	2077      	movs	r0, #119	; 0x77
 8006d7c:	f7ff ffee 	bl	8006d5c <SD_cmd>
 8006d80:	4603      	mov	r3, r0
 8006d82:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006d84:	7bbb      	ldrb	r3, [r7, #14]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d901      	bls.n	8006d8e <SD_cmd+0x32>
 8006d8a:	7bbb      	ldrb	r3, [r7, #14]
 8006d8c:	e049      	b.n	8006e22 <SD_cmd+0xc6>
	}
	//Select the card
	SS_SD_DESELECT();
 8006d8e:	2201      	movs	r2, #1
 8006d90:	2140      	movs	r1, #64	; 0x40
 8006d92:	4826      	ldr	r0, [pc, #152]	; (8006e2c <SD_cmd+0xd0>)
 8006d94:	f004 fe4c 	bl	800ba30 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8006d98:	f7ff ffcb 	bl	8006d32 <SPI_ReceiveByte>
	SS_SD_SELECT();
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2140      	movs	r1, #64	; 0x40
 8006da0:	4822      	ldr	r0, [pc, #136]	; (8006e2c <SD_cmd+0xd0>)
 8006da2:	f004 fe45 	bl	800ba30 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8006da6:	f7ff ffc4 	bl	8006d32 <SPI_ReceiveByte>
	//Send a command packet
	SPI_SendByte(cmd); 						//Start + Command index
 8006daa:	79fb      	ldrb	r3, [r7, #7]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7ff ffb3 	bl	8006d18 <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 24)); 	//Argument[31..24]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	0e1b      	lsrs	r3, r3, #24
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7ff ffad 	bl	8006d18 <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 16)); 	//Argument[23..16]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	0c1b      	lsrs	r3, r3, #16
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7ff ffa7 	bl	8006d18 <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 8)); 		//Argument[15..8]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	0a1b      	lsrs	r3, r3, #8
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7ff ffa1 	bl	8006d18 <SPI_SendByte>
	SPI_SendByte((uint8_t)arg); 			//Argument[7..0]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7ff ff9c 	bl	8006d18 <SPI_SendByte>
	n = 0x01; 								//Dummy CRC + Stop
 8006de0:	2301      	movs	r3, #1
 8006de2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) {n = 0x95;} 			//Valid CRC for CMD0(0)
 8006de4:	79fb      	ldrb	r3, [r7, #7]
 8006de6:	2b40      	cmp	r3, #64	; 0x40
 8006de8:	d101      	bne.n	8006dee <SD_cmd+0x92>
 8006dea:	2395      	movs	r3, #149	; 0x95
 8006dec:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) {n = 0x87;} 			//Valid CRC for CMD8(0x1AA)
 8006dee:	79fb      	ldrb	r3, [r7, #7]
 8006df0:	2b48      	cmp	r3, #72	; 0x48
 8006df2:	d101      	bne.n	8006df8 <SD_cmd+0x9c>
 8006df4:	2387      	movs	r3, #135	; 0x87
 8006df6:	73fb      	strb	r3, [r7, #15]
	SPI_SendByte(n);
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7ff ff8c 	bl	8006d18 <SPI_SendByte>
	//Receive a command response
	n = 10; //Wait for a valid response in timeout of 10 attempts
 8006e00:	230a      	movs	r3, #10
 8006e02:	73fb      	strb	r3, [r7, #15]
	do
	{
		res = SPI_ReceiveByte();
 8006e04:	f7ff ff95 	bl	8006d32 <SPI_ReceiveByte>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73bb      	strb	r3, [r7, #14]
	}
	while ((res & 0x80) && --n);
 8006e0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	da05      	bge.n	8006e20 <SD_cmd+0xc4>
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	73fb      	strb	r3, [r7, #15]
 8006e1a:	7bfb      	ldrb	r3, [r7, #15]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1f1      	bne.n	8006e04 <SD_cmd+0xa8>

	return res;
 8006e20:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	40020400 	.word	0x40020400

08006e30 <sd_ini>:
	Timer1 = 0;
	while(Timer1 < 2); //ждём 20 милисекунд, для того, чтобы напряжение стабилизировалось
}
//-----------------------------------------------
uint8_t sd_ini(void)
{
 8006e30:	b590      	push	{r4, r7, lr}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af02      	add	r7, sp, #8
	uint8_t i, cmd;
	int16_t tmr;
	uint32_t temp;
	LD_OFF;
 8006e36:	2201      	movs	r2, #1
 8006e38:	2101      	movs	r1, #1
 8006e3a:	4881      	ldr	r0, [pc, #516]	; (8007040 <sd_ini+0x210>)
 8006e3c:	f004 fdf8 	bl	800ba30 <HAL_GPIO_WritePin>
	sdinfo.type = 0;
 8006e40:	4b80      	ldr	r3, [pc, #512]	; (8007044 <sd_ini+0x214>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	701a      	strb	r2, [r3, #0]
	uint8_t ocr[4];
	temp = hspi1.Init.BaudRatePrescaler;
 8006e46:	4b80      	ldr	r3, [pc, #512]	; (8007048 <sd_ini+0x218>)
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	60bb      	str	r3, [r7, #8]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256; //156.25 kbbs
 8006e4c:	4b7e      	ldr	r3, [pc, #504]	; (8007048 <sd_ini+0x218>)
 8006e4e:	2238      	movs	r2, #56	; 0x38
 8006e50:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 8006e52:	487d      	ldr	r0, [pc, #500]	; (8007048 <sd_ini+0x218>)
 8006e54:	f005 fb94 	bl	800c580 <HAL_SPI_Init>
	SS_SD_DESELECT();
 8006e58:	2201      	movs	r2, #1
 8006e5a:	2140      	movs	r1, #64	; 0x40
 8006e5c:	487b      	ldr	r0, [pc, #492]	; (800704c <sd_ini+0x21c>)
 8006e5e:	f004 fde7 	bl	800ba30 <HAL_GPIO_WritePin>
	for(i = 0; i < 10; i++) //80 импульсов (не менее 74) Даташит стр 91
 8006e62:	2300      	movs	r3, #0
 8006e64:	73fb      	strb	r3, [r7, #15]
 8006e66:	e004      	b.n	8006e72 <sd_ini+0x42>
		SPI_Release();
 8006e68:	f7ff ff70 	bl	8006d4c <SPI_Release>
	for(i = 0; i < 10; i++) //80 импульсов (не менее 74) Даташит стр 91
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	73fb      	strb	r3, [r7, #15]
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
 8006e74:	2b09      	cmp	r3, #9
 8006e76:	d9f7      	bls.n	8006e68 <sd_ini+0x38>
	hspi1.Init.BaudRatePrescaler = temp;
 8006e78:	4a73      	ldr	r2, [pc, #460]	; (8007048 <sd_ini+0x218>)
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	61d3      	str	r3, [r2, #28]
	HAL_SPI_Init(&hspi1);
 8006e7e:	4872      	ldr	r0, [pc, #456]	; (8007048 <sd_ini+0x218>)
 8006e80:	f005 fb7e 	bl	800c580 <HAL_SPI_Init>
	SS_SD_SELECT();
 8006e84:	2200      	movs	r2, #0
 8006e86:	2140      	movs	r1, #64	; 0x40
 8006e88:	4870      	ldr	r0, [pc, #448]	; (800704c <sd_ini+0x21c>)
 8006e8a:	f004 fdd1 	bl	800ba30 <HAL_GPIO_WritePin>
	if(SD_cmd(CMD0, 0) == 1) // Enter Idle state
 8006e8e:	2100      	movs	r1, #0
 8006e90:	2040      	movs	r0, #64	; 0x40
 8006e92:	f7ff ff63 	bl	8006d5c <SD_cmd>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	f040 80be 	bne.w	800701a <sd_ini+0x1ea>
	{
		SPI_Release();
 8006e9e:	f7ff ff55 	bl	8006d4c <SPI_Release>
		if(SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8006ea2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006ea6:	2048      	movs	r0, #72	; 0x48
 8006ea8:	f7ff ff58 	bl	8006d5c <SD_cmd>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d17b      	bne.n	8006faa <sd_ini+0x17a>
		{
			for(i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	73fb      	strb	r3, [r7, #15]
 8006eb6:	e00c      	b.n	8006ed2 <sd_ini+0xa2>
 8006eb8:	7bfc      	ldrb	r4, [r7, #15]
 8006eba:	f7ff ff3a 	bl	8006d32 <SPI_ReceiveByte>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	f107 0310 	add.w	r3, r7, #16
 8006ec6:	4423      	add	r3, r4
 8006ec8:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	73fb      	strb	r3, [r7, #15]
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d9ef      	bls.n	8006eb8 <sd_ini+0x88>
			sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 8006ed8:	793b      	ldrb	r3, [r7, #4]
 8006eda:	4619      	mov	r1, r3
 8006edc:	797b      	ldrb	r3, [r7, #5]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	79bb      	ldrb	r3, [r7, #6]
 8006ee2:	79fa      	ldrb	r2, [r7, #7]
 8006ee4:	9201      	str	r2, [sp, #4]
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	4603      	mov	r3, r0
 8006eea:	460a      	mov	r2, r1
 8006eec:	4958      	ldr	r1, [pc, #352]	; (8007050 <sd_ini+0x220>)
 8006eee:	4859      	ldr	r0, [pc, #356]	; (8007054 <sd_ini+0x224>)
 8006ef0:	f014 fa50 	bl	801b394 <siprintf>
			SEND_str(str1);
 8006ef4:	4857      	ldr	r0, [pc, #348]	; (8007054 <sd_ini+0x224>)
 8006ef6:	f7fb fe59 	bl	8002bac <SEND_str>
			// Get trailing return value of R7 resp
			if(ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8006efa:	79bb      	ldrb	r3, [r7, #6]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	f040 808e 	bne.w	800701e <sd_ini+0x1ee>
 8006f02:	79fb      	ldrb	r3, [r7, #7]
 8006f04:	2baa      	cmp	r3, #170	; 0xaa
 8006f06:	f040 808a 	bne.w	800701e <sd_ini+0x1ee>
			{
				for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--); // Wait for leaving idle state (ACMD41 with HCS bit)
 8006f0a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8006f0e:	81bb      	strh	r3, [r7, #12]
 8006f10:	e005      	b.n	8006f1e <sd_ini+0xee>
 8006f12:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	81bb      	strh	r3, [r7, #12]
 8006f1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d007      	beq.n	8006f36 <sd_ini+0x106>
 8006f26:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006f2a:	20e9      	movs	r0, #233	; 0xe9
 8006f2c:	f7ff ff16 	bl	8006d5c <SD_cmd>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1ed      	bne.n	8006f12 <sd_ini+0xe2>
				if (tmr && SD_cmd(CMD58, 0) == 0) { // Check CCS bit in the OCR
 8006f36:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d06f      	beq.n	800701e <sd_ini+0x1ee>
 8006f3e:	2100      	movs	r1, #0
 8006f40:	207a      	movs	r0, #122	; 0x7a
 8006f42:	f7ff ff0b 	bl	8006d5c <SD_cmd>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d168      	bne.n	800701e <sd_ini+0x1ee>
				for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	73fb      	strb	r3, [r7, #15]
 8006f50:	e00c      	b.n	8006f6c <sd_ini+0x13c>
 8006f52:	7bfc      	ldrb	r4, [r7, #15]
 8006f54:	f7ff feed 	bl	8006d32 <SPI_ReceiveByte>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f107 0310 	add.w	r3, r7, #16
 8006f60:	4423      	add	r3, r4
 8006f62:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	73fb      	strb	r3, [r7, #15]
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d9ef      	bls.n	8006f52 <sd_ini+0x122>
				sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 8006f72:	793b      	ldrb	r3, [r7, #4]
 8006f74:	4619      	mov	r1, r3
 8006f76:	797b      	ldrb	r3, [r7, #5]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	79bb      	ldrb	r3, [r7, #6]
 8006f7c:	79fa      	ldrb	r2, [r7, #7]
 8006f7e:	9201      	str	r2, [sp, #4]
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	4603      	mov	r3, r0
 8006f84:	460a      	mov	r2, r1
 8006f86:	4932      	ldr	r1, [pc, #200]	; (8007050 <sd_ini+0x220>)
 8006f88:	4832      	ldr	r0, [pc, #200]	; (8007054 <sd_ini+0x224>)
 8006f8a:	f014 fa03 	bl	801b394 <siprintf>
				SEND_str(str1);
 8006f8e:	4831      	ldr	r0, [pc, #196]	; (8007054 <sd_ini+0x224>)
 8006f90:	f7fb fe0c 	bl	8002bac <SEND_str>
				sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8006f94:	793b      	ldrb	r3, [r7, #4]
 8006f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <sd_ini+0x172>
 8006f9e:	220c      	movs	r2, #12
 8006fa0:	e000      	b.n	8006fa4 <sd_ini+0x174>
 8006fa2:	2204      	movs	r2, #4
 8006fa4:	4b27      	ldr	r3, [pc, #156]	; (8007044 <sd_ini+0x214>)
 8006fa6:	701a      	strb	r2, [r3, #0]
 8006fa8:	e039      	b.n	800701e <sd_ini+0x1ee>
				}
			}
		}
		else //SDv1 or MMCv3
		{
			if (SD_cmd(ACMD41, 0) <= 1)
 8006faa:	2100      	movs	r1, #0
 8006fac:	20e9      	movs	r0, #233	; 0xe9
 8006fae:	f7ff fed5 	bl	8006d5c <SD_cmd>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d805      	bhi.n	8006fc4 <sd_ini+0x194>
			{
				sdinfo.type = CT_SD1; cmd = ACMD41;		//SDv1
 8006fb8:	4b22      	ldr	r3, [pc, #136]	; (8007044 <sd_ini+0x214>)
 8006fba:	2202      	movs	r2, #2
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	23e9      	movs	r3, #233	; 0xe9
 8006fc0:	73bb      	strb	r3, [r7, #14]
 8006fc2:	e004      	b.n	8006fce <sd_ini+0x19e>
			}
			else
			{
				sdinfo.type = CT_MMC; cmd = CMD1; 		//MMCv3
 8006fc4:	4b1f      	ldr	r3, [pc, #124]	; (8007044 <sd_ini+0x214>)
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	701a      	strb	r2, [r3, #0]
 8006fca:	2341      	movs	r3, #65	; 0x41
 8006fcc:	73bb      	strb	r3, [r7, #14]
			}
			for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; 	//Wait for leaving idle state
 8006fce:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8006fd2:	81bb      	strh	r3, [r7, #12]
 8006fd4:	e005      	b.n	8006fe2 <sd_ini+0x1b2>
 8006fd6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	81bb      	strh	r3, [r7, #12]
 8006fe2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d007      	beq.n	8006ffa <sd_ini+0x1ca>
 8006fea:	7bbb      	ldrb	r3, [r7, #14]
 8006fec:	2100      	movs	r1, #0
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7ff feb4 	bl	8006d5c <SD_cmd>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1ed      	bne.n	8006fd6 <sd_ini+0x1a6>
			if (!tmr || SD_cmd(CMD16, 512) != 0) 				//Set R/W block length to 512
 8006ffa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d007      	beq.n	8007012 <sd_ini+0x1e2>
 8007002:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007006:	2050      	movs	r0, #80	; 0x50
 8007008:	f7ff fea8 	bl	8006d5c <SD_cmd>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d005      	beq.n	800701e <sd_ini+0x1ee>
				sdinfo.type = 0;
 8007012:	4b0c      	ldr	r3, [pc, #48]	; (8007044 <sd_ini+0x214>)
 8007014:	2200      	movs	r2, #0
 8007016:	701a      	strb	r2, [r3, #0]
 8007018:	e001      	b.n	800701e <sd_ini+0x1ee>
		}
	}
	else
	{
		return 1;
 800701a:	2301      	movs	r3, #1
 800701c:	e00b      	b.n	8007036 <sd_ini+0x206>
	}
	sprintf(str1,"Type SD: 0x%02X\r\n",sdinfo.type);
 800701e:	4b09      	ldr	r3, [pc, #36]	; (8007044 <sd_ini+0x214>)
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	461a      	mov	r2, r3
 8007026:	490c      	ldr	r1, [pc, #48]	; (8007058 <sd_ini+0x228>)
 8007028:	480a      	ldr	r0, [pc, #40]	; (8007054 <sd_ini+0x224>)
 800702a:	f014 f9b3 	bl	801b394 <siprintf>
	SEND_str(str1);
 800702e:	4809      	ldr	r0, [pc, #36]	; (8007054 <sd_ini+0x224>)
 8007030:	f7fb fdbc 	bl	8002bac <SEND_str>
	return 0;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	bd90      	pop	{r4, r7, pc}
 800703e:	bf00      	nop
 8007040:	40020000 	.word	0x40020000
 8007044:	20001358 	.word	0x20001358
 8007048:	20000960 	.word	0x20000960
 800704c:	40020400 	.word	0x40020400
 8007050:	080204d0 	.word	0x080204d0
 8007054:	20000440 	.word	0x20000440
 8007058:	080204f4 	.word	0x080204f4

0800705c <FCLK_SLOW>:
	@param  None
    @retval : None
*/
/**************************************************************************/
static void FCLK_SLOW(void)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
	uint32_t tmp;

	tmp = SPI1->CR1;
 8007062:	4b08      	ldr	r3, [pc, #32]	; (8007084 <FCLK_SLOW+0x28>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	607b      	str	r3, [r7, #4]
	tmp = ( tmp | SPI_BAUDRATEPRESCALER_256 );
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800706e:	607b      	str	r3, [r7, #4]
	SPI1->CR1 = tmp;
 8007070:	4a04      	ldr	r2, [pc, #16]	; (8007084 <FCLK_SLOW+0x28>)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6013      	str	r3, [r2, #0]
}
 8007076:	bf00      	nop
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	40013000 	.word	0x40013000

08007088 <FCLK_FAST>:
	@param  None
    @retval : None
*/
/**************************************************************************/
static void FCLK_FAST(void)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
	uint32_t tmp;

	tmp = SPI1->CR1;
 800708e:	4b09      	ldr	r3, [pc, #36]	; (80070b4 <FCLK_FAST+0x2c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	607b      	str	r3, [r7, #4]
//	tmp = ( tmp & ~SPI_BaudRatePrescaler_256 ) | SPI_BaudRatePrescaler_2;
	tmp = ( tmp & ~SPI_BAUDRATEPRESCALER_256 ) | SPI_BAUDRATEPRESCALER_8;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800709a:	f043 0310 	orr.w	r3, r3, #16
 800709e:	607b      	str	r3, [r7, #4]
	SPI1->CR1 = tmp;
 80070a0:	4a04      	ldr	r2, [pc, #16]	; (80070b4 <FCLK_FAST+0x2c>)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6013      	str	r3, [r2, #0]
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	40013000 	.word	0x40013000

080070b8 <xmit_spi>:
	@param  uint8_t out
    @retval : uint8_t
*/
/**************************************************************************/
static inline uint8_t xmit_spi(uint8_t out)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	4603      	mov	r3, r0
 80070c0:	71fb      	strb	r3, [r7, #7]
/* Loop while DR register in not empty */
	while(!(SPI1->SR & SPI_FLAG_TXE));	//SPI_I2S_FLAG_TXE
 80070c2:	bf00      	nop
 80070c4:	4b0c      	ldr	r3, [pc, #48]	; (80070f8 <xmit_spi+0x40>)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f003 0302 	and.w	r3, r3, #2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0f9      	beq.n	80070c4 <xmit_spi+0xc>

/* Send byte through the SPIMMC peripheral */
	SPI1->DR = out;
 80070d0:	4a09      	ldr	r2, [pc, #36]	; (80070f8 <xmit_spi+0x40>)
 80070d2:	79fb      	ldrb	r3, [r7, #7]
 80070d4:	60d3      	str	r3, [r2, #12]
/* Wait to receive a byte */
	while(!(SPI1->SR & SPI_FLAG_RXNE));	//SPI_I2S_FLAG_RXNE
 80070d6:	bf00      	nop
 80070d8:	4b07      	ldr	r3, [pc, #28]	; (80070f8 <xmit_spi+0x40>)
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d0f9      	beq.n	80070d8 <xmit_spi+0x20>

/* Return the byte read from the SPI bus */
	return (SPI1->DR);
 80070e4:	4b04      	ldr	r3, [pc, #16]	; (80070f8 <xmit_spi+0x40>)
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	b2db      	uxtb	r3, r3
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	40013000 	.word	0x40013000

080070fc <rcvr_spi>:
	@param  none
    @retval : uint8_t
*/
/**************************************************************************/
static inline uint8_t rcvr_spi(void)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	af00      	add	r7, sp, #0
	return xmit_spi(0xFF);
 8007100:	20ff      	movs	r0, #255	; 0xff
 8007102:	f7ff ffd9 	bl	80070b8 <xmit_spi>
 8007106:	4603      	mov	r3, r0
}
 8007108:	4618      	mov	r0, r3
 800710a:	bd80      	pop	{r7, pc}

0800710c <wait_ready>:
*/
/**************************************************************************/
static int wait_ready (	/* 1:Ready, 0:Timeout */
	unsigned int wt		/* Timeout [ms/10] */
)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
	Timer2 = wt;
 8007114:	4a0a      	ldr	r2, [pc, #40]	; (8007140 <wait_ready+0x34>)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6013      	str	r3, [r2, #0]
	rcvr_spi();
 800711a:	f7ff ffef 	bl	80070fc <rcvr_spi>
	do
		if (rcvr_spi() == 0xFF) return 1;
 800711e:	f7ff ffed 	bl	80070fc <rcvr_spi>
 8007122:	4603      	mov	r3, r0
 8007124:	2bff      	cmp	r3, #255	; 0xff
 8007126:	d101      	bne.n	800712c <wait_ready+0x20>
 8007128:	2301      	movs	r3, #1
 800712a:	e004      	b.n	8007136 <wait_ready+0x2a>
	while (Timer2);
 800712c:	4b04      	ldr	r3, [pc, #16]	; (8007140 <wait_ready+0x34>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1f4      	bne.n	800711e <wait_ready+0x12>

	return 0;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	20000484 	.word	0x20000484

08007144 <deselect>:
	@param  none
    @retval : none
*/
/**************************************************************************/
static inline void deselect(void)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
	CS_HIGH();
 8007148:	2201      	movs	r2, #1
 800714a:	2140      	movs	r1, #64	; 0x40
 800714c:	4803      	ldr	r0, [pc, #12]	; (800715c <deselect+0x18>)
 800714e:	f004 fc6f 	bl	800ba30 <HAL_GPIO_WritePin>
	rcvr_spi();
 8007152:	f7ff ffd3 	bl	80070fc <rcvr_spi>
}
 8007156:	bf00      	nop
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	40020400 	.word	0x40020400

08007160 <selecting>:
	@param  none
    @retval : 1:Successful, 0:Timeout
*/
/**************************************************************************/
static inline int selecting(void)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0
	CS_LOW();
 8007164:	2200      	movs	r2, #0
 8007166:	2140      	movs	r1, #64	; 0x40
 8007168:	4807      	ldr	r0, [pc, #28]	; (8007188 <selecting+0x28>)
 800716a:	f004 fc61 	bl	800ba30 <HAL_GPIO_WritePin>
	if (!wait_ready(50)) {
 800716e:	2032      	movs	r0, #50	; 0x32
 8007170:	f7ff ffcc 	bl	800710c <wait_ready>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d103      	bne.n	8007182 <selecting+0x22>
		deselect();
 800717a:	f7ff ffe3 	bl	8007144 <deselect>
		return 0;
 800717e:	2300      	movs	r3, #0
 8007180:	e000      	b.n	8007184 <selecting+0x24>
	}
	return 1;
 8007182:	2301      	movs	r3, #1
}
 8007184:	4618      	mov	r0, r3
 8007186:	bd80      	pop	{r7, pc}
 8007188:	40020400 	.word	0x40020400

0800718c <power_status>:
	@param  none
    @retval : Socket power state: 0=off, 1=on
*/
/**************************************************************************/
static int power_status(void)
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8007190:	4b03      	ldr	r3, [pc, #12]	; (80071a0 <power_status+0x14>)
 8007192:	781b      	ldrb	r3, [r3, #0]
}
 8007194:	4618      	mov	r0, r3
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	2000047c 	.word	0x2000047c

080071a4 <power_on>:
	@param  none
    @retval : none
*/
/**************************************************************************/
static void power_on (void)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
	//u8 i;
	uint8_t i;

	CS_HIGH();      // CS = 1
 80071aa:	2201      	movs	r2, #1
 80071ac:	2140      	movs	r1, #64	; 0x40
 80071ae:	480b      	ldr	r0, [pc, #44]	; (80071dc <power_on+0x38>)
 80071b0:	f004 fc3e 	bl	800ba30 <HAL_GPIO_WritePin>

	for (i = 0; i < 10; i++)
 80071b4:	2300      	movs	r3, #0
 80071b6:	71fb      	strb	r3, [r7, #7]
 80071b8:	e005      	b.n	80071c6 <power_on+0x22>
		xmit_spi(0xFF);
 80071ba:	20ff      	movs	r0, #255	; 0xff
 80071bc:	f7ff ff7c 	bl	80070b8 <xmit_spi>
	for (i = 0; i < 10; i++)
 80071c0:	79fb      	ldrb	r3, [r7, #7]
 80071c2:	3301      	adds	r3, #1
 80071c4:	71fb      	strb	r3, [r7, #7]
 80071c6:	79fb      	ldrb	r3, [r7, #7]
 80071c8:	2b09      	cmp	r3, #9
 80071ca:	d9f6      	bls.n	80071ba <power_on+0x16>

	PowerFlag = 1;
 80071cc:	4b04      	ldr	r3, [pc, #16]	; (80071e0 <power_on+0x3c>)
 80071ce:	2201      	movs	r2, #1
 80071d0:	701a      	strb	r2, [r3, #0]

}
 80071d2:	bf00      	nop
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	40020400 	.word	0x40020400
 80071e0:	2000047c 	.word	0x2000047c

080071e4 <power_off>:
	@param  none
    @retval : none
*/
/**************************************************************************/
static void power_off (void)
{
 80071e4:	b480      	push	{r7}
 80071e6:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 80071e8:	4b03      	ldr	r3, [pc, #12]	; (80071f8 <power_off+0x14>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	701a      	strb	r2, [r3, #0]
}
 80071ee:	bf00      	nop
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	2000047c 	.word	0x2000047c

080071fc <rcvr_datablock>:
/**************************************************************************/
static int rcvr_datablock (
	uint8_t 		*buff,			/* Data buffer to store received data */
	unsigned int 	 btr			/* Byte count (must be multiple of 4) */
)
{
 80071fc:	b590      	push	{r4, r7, lr}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
	uint8_t token;


	Timer1 = 20;
 8007206:	4b21      	ldr	r3, [pc, #132]	; (800728c <rcvr_datablock+0x90>)
 8007208:	2214      	movs	r2, #20
 800720a:	601a      	str	r2, [r3, #0]
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
 800720c:	f7ff ff76 	bl	80070fc <rcvr_spi>
 8007210:	4603      	mov	r3, r0
 8007212:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8007214:	7bfb      	ldrb	r3, [r7, #15]
 8007216:	2bff      	cmp	r3, #255	; 0xff
 8007218:	d103      	bne.n	8007222 <rcvr_datablock+0x26>
 800721a:	4b1c      	ldr	r3, [pc, #112]	; (800728c <rcvr_datablock+0x90>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1f4      	bne.n	800720c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
 8007222:	7bfb      	ldrb	r3, [r7, #15]
 8007224:	2bfe      	cmp	r3, #254	; 0xfe
 8007226:	d001      	beq.n	800722c <rcvr_datablock+0x30>
 8007228:	2300      	movs	r3, #0
 800722a:	e02a      	b.n	8007282 <rcvr_datablock+0x86>


	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 800722c:	687c      	ldr	r4, [r7, #4]
 800722e:	1c63      	adds	r3, r4, #1
 8007230:	607b      	str	r3, [r7, #4]
 8007232:	20ff      	movs	r0, #255	; 0xff
 8007234:	f7ff ff40 	bl	80070b8 <xmit_spi>
 8007238:	4603      	mov	r3, r0
 800723a:	7023      	strb	r3, [r4, #0]
		rcvr_spi_m(buff++);
 800723c:	687c      	ldr	r4, [r7, #4]
 800723e:	1c63      	adds	r3, r4, #1
 8007240:	607b      	str	r3, [r7, #4]
 8007242:	20ff      	movs	r0, #255	; 0xff
 8007244:	f7ff ff38 	bl	80070b8 <xmit_spi>
 8007248:	4603      	mov	r3, r0
 800724a:	7023      	strb	r3, [r4, #0]
		rcvr_spi_m(buff++);
 800724c:	687c      	ldr	r4, [r7, #4]
 800724e:	1c63      	adds	r3, r4, #1
 8007250:	607b      	str	r3, [r7, #4]
 8007252:	20ff      	movs	r0, #255	; 0xff
 8007254:	f7ff ff30 	bl	80070b8 <xmit_spi>
 8007258:	4603      	mov	r3, r0
 800725a:	7023      	strb	r3, [r4, #0]
		rcvr_spi_m(buff++);
 800725c:	687c      	ldr	r4, [r7, #4]
 800725e:	1c63      	adds	r3, r4, #1
 8007260:	607b      	str	r3, [r7, #4]
 8007262:	20ff      	movs	r0, #255	; 0xff
 8007264:	f7ff ff28 	bl	80070b8 <xmit_spi>
 8007268:	4603      	mov	r3, r0
 800726a:	7023      	strb	r3, [r4, #0]
	} while (btr -= 4);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	3b04      	subs	r3, #4
 8007270:	603b      	str	r3, [r7, #0]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1d9      	bne.n	800722c <rcvr_datablock+0x30>
	rcvr_spi();						/* Discard CRC */
 8007278:	f7ff ff40 	bl	80070fc <rcvr_spi>
	rcvr_spi();
 800727c:	f7ff ff3e 	bl	80070fc <rcvr_spi>

	return 1;						/* Return with success */
 8007280:	2301      	movs	r3, #1
}
 8007282:	4618      	mov	r0, r3
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	bd90      	pop	{r4, r7, pc}
 800728a:	bf00      	nop
 800728c:	20000480 	.word	0x20000480

08007290 <xmit_datablock>:
#if _READONLY == 0
static int xmit_datablock (
	const uint8_t *buff,	/* 512 byte data block to be transmitted */
	uint8_t       token		/* Data/Stop token */
)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t wc;

	if (!wait_ready(50)) return 0;
 800729c:	2032      	movs	r0, #50	; 0x32
 800729e:	f7ff ff35 	bl	800710c <wait_ready>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <xmit_datablock+0x1c>
 80072a8:	2300      	movs	r3, #0
 80072aa:	e02e      	b.n	800730a <xmit_datablock+0x7a>

	xmit_spi(token);					/* Xmit data token */
 80072ac:	78fb      	ldrb	r3, [r7, #3]
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7ff ff02 	bl	80070b8 <xmit_spi>
	if (token != 0xFD) {				/* Is data token */
 80072b4:	78fb      	ldrb	r3, [r7, #3]
 80072b6:	2bfd      	cmp	r3, #253	; 0xfd
 80072b8:	d026      	beq.n	8007308 <xmit_datablock+0x78>
		wc = 0;
 80072ba:	2300      	movs	r3, #0
 80072bc:	73fb      	strb	r3, [r7, #15]
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	1c5a      	adds	r2, r3, #1
 80072c2:	607a      	str	r2, [r7, #4]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7ff fef6 	bl	80070b8 <xmit_spi>
			xmit_spi(*buff++);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	607a      	str	r2, [r7, #4]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7ff feef 	bl	80070b8 <xmit_spi>
		} while (--wc);
 80072da:	7bfb      	ldrb	r3, [r7, #15]
 80072dc:	3b01      	subs	r3, #1
 80072de:	73fb      	strb	r3, [r7, #15]
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1eb      	bne.n	80072be <xmit_datablock+0x2e>
		xmit_spi(0xFF);					/* CRC (Dummy) */
 80072e6:	20ff      	movs	r0, #255	; 0xff
 80072e8:	f7ff fee6 	bl	80070b8 <xmit_spi>
		xmit_spi(0xFF);
 80072ec:	20ff      	movs	r0, #255	; 0xff
 80072ee:	f7ff fee3 	bl	80070b8 <xmit_spi>
		resp = rcvr_spi();				/* Reveive data response */
 80072f2:	f7ff ff03 	bl	80070fc <rcvr_spi>
 80072f6:	4603      	mov	r3, r0
 80072f8:	73bb      	strb	r3, [r7, #14]
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	f003 031f 	and.w	r3, r3, #31
 8007300:	2b05      	cmp	r3, #5
 8007302:	d001      	beq.n	8007308 <xmit_datablock+0x78>
			return 0;
 8007304:	2300      	movs	r3, #0
 8007306:	e000      	b.n	800730a <xmit_datablock+0x7a>
	}

	return 1;
 8007308:	2301      	movs	r3, #1
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <send_cmd>:
/**************************************************************************/
static uint8_t send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	uint8_t  cmd,				/* Command index */
	uint32_t arg				/* Argument */
)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	4603      	mov	r3, r0
 800731a:	6039      	str	r1, [r7, #0]
 800731c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
 800731e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007322:	2b00      	cmp	r3, #0
 8007324:	da0e      	bge.n	8007344 <send_cmd+0x32>
		cmd &= 0x7F;
 8007326:	79fb      	ldrb	r3, [r7, #7]
 8007328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800732c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800732e:	2100      	movs	r1, #0
 8007330:	2037      	movs	r0, #55	; 0x37
 8007332:	f7ff ffee 	bl	8007312 <send_cmd>
 8007336:	4603      	mov	r3, r0
 8007338:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800733a:	7bbb      	ldrb	r3, [r7, #14]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d901      	bls.n	8007344 <send_cmd+0x32>
 8007340:	7bbb      	ldrb	r3, [r7, #14]
 8007342:	e04c      	b.n	80073de <send_cmd+0xcc>
	}

	/* Select the card and wait for ready */
	deselect();
 8007344:	f7ff fefe 	bl	8007144 <deselect>
	if (!selecting()) return 0xFF;
 8007348:	f7ff ff0a 	bl	8007160 <selecting>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <send_cmd+0x44>
 8007352:	23ff      	movs	r3, #255	; 0xff
 8007354:	e043      	b.n	80073de <send_cmd+0xcc>

	/* Send command packet */
	xmit_spi(0x40 | cmd);				/* Start + Command index */
 8007356:	79fb      	ldrb	r3, [r7, #7]
 8007358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800735c:	b2db      	uxtb	r3, r3
 800735e:	4618      	mov	r0, r3
 8007360:	f7ff feaa 	bl	80070b8 <xmit_spi>
	xmit_spi((uint8_t)(arg >> 24));		/* Argument[31..24] */
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	0e1b      	lsrs	r3, r3, #24
 8007368:	b2db      	uxtb	r3, r3
 800736a:	4618      	mov	r0, r3
 800736c:	f7ff fea4 	bl	80070b8 <xmit_spi>
	xmit_spi((uint8_t)(arg >> 16));		/* Argument[23..16] */
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	0c1b      	lsrs	r3, r3, #16
 8007374:	b2db      	uxtb	r3, r3
 8007376:	4618      	mov	r0, r3
 8007378:	f7ff fe9e 	bl	80070b8 <xmit_spi>
	xmit_spi((uint8_t)(arg >> 8));		/* Argument[15..8] */
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	0a1b      	lsrs	r3, r3, #8
 8007380:	b2db      	uxtb	r3, r3
 8007382:	4618      	mov	r0, r3
 8007384:	f7ff fe98 	bl	80070b8 <xmit_spi>
	xmit_spi((uint8_t)arg);				/* Argument[7..0] */
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	b2db      	uxtb	r3, r3
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff fe93 	bl	80070b8 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007392:	2301      	movs	r3, #1
 8007394:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007396:	79fb      	ldrb	r3, [r7, #7]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <send_cmd+0x8e>
 800739c:	2395      	movs	r3, #149	; 0x95
 800739e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80073a0:	79fb      	ldrb	r3, [r7, #7]
 80073a2:	2b08      	cmp	r3, #8
 80073a4:	d101      	bne.n	80073aa <send_cmd+0x98>
 80073a6:	2387      	movs	r3, #135	; 0x87
 80073a8:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7ff fe83 	bl	80070b8 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
 80073b2:	79fb      	ldrb	r3, [r7, #7]
 80073b4:	2b0c      	cmp	r3, #12
 80073b6:	d101      	bne.n	80073bc <send_cmd+0xaa>
 80073b8:	f7ff fea0 	bl	80070fc <rcvr_spi>
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
 80073bc:	230a      	movs	r3, #10
 80073be:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 80073c0:	f7ff fe9c 	bl	80070fc <rcvr_spi>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 80073c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	da05      	bge.n	80073dc <send_cmd+0xca>
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
 80073d2:	3b01      	subs	r3, #1
 80073d4:	73fb      	strb	r3, [r7, #15]
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1f1      	bne.n	80073c0 <send_cmd+0xae>

	return res;			/* Return with the response value */
 80073dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
	...

080073e8 <disk_initialize>:
*/
/**************************************************************************/
DSTATUS disk_initialize (
	uint8_t drv		/* Physical drive number (0) */
)
{
 80073e8:	b590      	push	{r4, r7, lr}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	4603      	mov	r3, r0
 80073f0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
 80073f2:	79fb      	ldrb	r3, [r7, #7]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <disk_initialize+0x14>
 80073f8:	2301      	movs	r3, #1
 80073fa:	e0c9      	b.n	8007590 <disk_initialize+0x1a8>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
 80073fc:	4b66      	ldr	r3, [pc, #408]	; (8007598 <disk_initialize+0x1b0>)
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	b2db      	uxtb	r3, r3
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <disk_initialize+0x2a>
 800740a:	4b63      	ldr	r3, [pc, #396]	; (8007598 <disk_initialize+0x1b0>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	b2db      	uxtb	r3, r3
 8007410:	e0be      	b.n	8007590 <disk_initialize+0x1a8>

//	spi_init();
	CS_HIGH();
 8007412:	2201      	movs	r2, #1
 8007414:	2140      	movs	r1, #64	; 0x40
 8007416:	4861      	ldr	r0, [pc, #388]	; (800759c <disk_initialize+0x1b4>)
 8007418:	f004 fb0a 	bl	800ba30 <HAL_GPIO_WritePin>
	power_on();							/* Force socket power on */
 800741c:	f7ff fec2 	bl	80071a4 <power_on>
	FCLK_SLOW();
 8007420:	f7ff fe1c 	bl	800705c <FCLK_SLOW>
	CS_LOW();
 8007424:	2200      	movs	r2, #0
 8007426:	2140      	movs	r1, #64	; 0x40
 8007428:	485c      	ldr	r0, [pc, #368]	; (800759c <disk_initialize+0x1b4>)
 800742a:	f004 fb01 	bl	800ba30 <HAL_GPIO_WritePin>
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
 800742e:	230a      	movs	r3, #10
 8007430:	73fb      	strb	r3, [r7, #15]
 8007432:	e004      	b.n	800743e <disk_initialize+0x56>
 8007434:	f7ff fe62 	bl	80070fc <rcvr_spi>
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	3b01      	subs	r3, #1
 800743c:	73fb      	strb	r3, [r7, #15]
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1f7      	bne.n	8007434 <disk_initialize+0x4c>

	ty = 0;
 8007444:	2300      	movs	r3, #0
 8007446:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
 8007448:	2100      	movs	r1, #0
 800744a:	2000      	movs	r0, #0
 800744c:	f7ff ff61 	bl	8007312 <send_cmd>
 8007450:	4603      	mov	r3, r0
 8007452:	2b01      	cmp	r3, #1
 8007454:	f040 8084 	bne.w	8007560 <disk_initialize+0x178>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
 8007458:	4b51      	ldr	r3, [pc, #324]	; (80075a0 <disk_initialize+0x1b8>)
 800745a:	2264      	movs	r2, #100	; 0x64
 800745c:	601a      	str	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800745e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007462:	2008      	movs	r0, #8
 8007464:	f7ff ff55 	bl	8007312 <send_cmd>
 8007468:	4603      	mov	r3, r0
 800746a:	2b01      	cmp	r3, #1
 800746c:	d14d      	bne.n	800750a <disk_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
 800746e:	2300      	movs	r3, #0
 8007470:	73fb      	strb	r3, [r7, #15]
 8007472:	e00c      	b.n	800748e <disk_initialize+0xa6>
 8007474:	7bfc      	ldrb	r4, [r7, #15]
 8007476:	f7ff fe41 	bl	80070fc <rcvr_spi>
 800747a:	4603      	mov	r3, r0
 800747c:	461a      	mov	r2, r3
 800747e:	f107 0310 	add.w	r3, r7, #16
 8007482:	4423      	add	r3, r4
 8007484:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007488:	7bfb      	ldrb	r3, [r7, #15]
 800748a:	3301      	adds	r3, #1
 800748c:	73fb      	strb	r3, [r7, #15]
 800748e:	7bfb      	ldrb	r3, [r7, #15]
 8007490:	2b03      	cmp	r3, #3
 8007492:	d9ef      	bls.n	8007474 <disk_initialize+0x8c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
 8007494:	7abb      	ldrb	r3, [r7, #10]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d162      	bne.n	8007560 <disk_initialize+0x178>
 800749a:	7afb      	ldrb	r3, [r7, #11]
 800749c:	2baa      	cmp	r3, #170	; 0xaa
 800749e:	d15f      	bne.n	8007560 <disk_initialize+0x178>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
 80074a0:	bf00      	nop
 80074a2:	4b3f      	ldr	r3, [pc, #252]	; (80075a0 <disk_initialize+0x1b8>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d007      	beq.n	80074ba <disk_initialize+0xd2>
 80074aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80074ae:	20a9      	movs	r0, #169	; 0xa9
 80074b0:	f7ff ff2f 	bl	8007312 <send_cmd>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1f3      	bne.n	80074a2 <disk_initialize+0xba>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80074ba:	4b39      	ldr	r3, [pc, #228]	; (80075a0 <disk_initialize+0x1b8>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d04e      	beq.n	8007560 <disk_initialize+0x178>
 80074c2:	2100      	movs	r1, #0
 80074c4:	203a      	movs	r0, #58	; 0x3a
 80074c6:	f7ff ff24 	bl	8007312 <send_cmd>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d147      	bne.n	8007560 <disk_initialize+0x178>
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
 80074d0:	2300      	movs	r3, #0
 80074d2:	73fb      	strb	r3, [r7, #15]
 80074d4:	e00c      	b.n	80074f0 <disk_initialize+0x108>
 80074d6:	7bfc      	ldrb	r4, [r7, #15]
 80074d8:	f7ff fe10 	bl	80070fc <rcvr_spi>
 80074dc:	4603      	mov	r3, r0
 80074de:	461a      	mov	r2, r3
 80074e0:	f107 0310 	add.w	r3, r7, #16
 80074e4:	4423      	add	r3, r4
 80074e6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	3301      	adds	r3, #1
 80074ee:	73fb      	strb	r3, [r7, #15]
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	d9ef      	bls.n	80074d6 <disk_initialize+0xee>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
 80074f6:	7a3b      	ldrb	r3, [r7, #8]
 80074f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <disk_initialize+0x11c>
 8007500:	230c      	movs	r3, #12
 8007502:	e000      	b.n	8007506 <disk_initialize+0x11e>
 8007504:	2304      	movs	r3, #4
 8007506:	737b      	strb	r3, [r7, #13]
 8007508:	e02a      	b.n	8007560 <disk_initialize+0x178>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
 800750a:	2100      	movs	r1, #0
 800750c:	20a9      	movs	r0, #169	; 0xa9
 800750e:	f7ff ff00 	bl	8007312 <send_cmd>
 8007512:	4603      	mov	r3, r0
 8007514:	2b01      	cmp	r3, #1
 8007516:	d804      	bhi.n	8007522 <disk_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
 8007518:	2302      	movs	r3, #2
 800751a:	737b      	strb	r3, [r7, #13]
 800751c:	23a9      	movs	r3, #169	; 0xa9
 800751e:	73bb      	strb	r3, [r7, #14]
 8007520:	e003      	b.n	800752a <disk_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
 8007522:	2301      	movs	r3, #1
 8007524:	737b      	strb	r3, [r7, #13]
 8007526:	2301      	movs	r3, #1
 8007528:	73bb      	strb	r3, [r7, #14]
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
 800752a:	bf00      	nop
 800752c:	4b1c      	ldr	r3, [pc, #112]	; (80075a0 <disk_initialize+0x1b8>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d007      	beq.n	8007544 <disk_initialize+0x15c>
 8007534:	7bbb      	ldrb	r3, [r7, #14]
 8007536:	2100      	movs	r1, #0
 8007538:	4618      	mov	r0, r3
 800753a:	f7ff feea 	bl	8007312 <send_cmd>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1f3      	bne.n	800752c <disk_initialize+0x144>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
 8007544:	4b16      	ldr	r3, [pc, #88]	; (80075a0 <disk_initialize+0x1b8>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d007      	beq.n	800755c <disk_initialize+0x174>
 800754c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007550:	2010      	movs	r0, #16
 8007552:	f7ff fede 	bl	8007312 <send_cmd>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <disk_initialize+0x178>
				ty = 0;
 800755c:	2300      	movs	r3, #0
 800755e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;
 8007560:	4a10      	ldr	r2, [pc, #64]	; (80075a4 <disk_initialize+0x1bc>)
 8007562:	7b7b      	ldrb	r3, [r7, #13]
 8007564:	7013      	strb	r3, [r2, #0]
	deselect();
 8007566:	f7ff fded 	bl	8007144 <deselect>

	if (ty) {						/* Initialization succeded */
 800756a:	7b7b      	ldrb	r3, [r7, #13]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00a      	beq.n	8007586 <disk_initialize+0x19e>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
 8007570:	4b09      	ldr	r3, [pc, #36]	; (8007598 <disk_initialize+0x1b0>)
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	b2db      	uxtb	r3, r3
 8007576:	f023 0301 	bic.w	r3, r3, #1
 800757a:	b2da      	uxtb	r2, r3
 800757c:	4b06      	ldr	r3, [pc, #24]	; (8007598 <disk_initialize+0x1b0>)
 800757e:	701a      	strb	r2, [r3, #0]

		FCLK_FAST();
 8007580:	f7ff fd82 	bl	8007088 <FCLK_FAST>
 8007584:	e001      	b.n	800758a <disk_initialize+0x1a2>

	} else {						/* Initialization failed */
		power_off();
 8007586:	f7ff fe2d 	bl	80071e4 <power_off>
	}

	return Stat;
 800758a:	4b03      	ldr	r3, [pc, #12]	; (8007598 <disk_initialize+0x1b0>)
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	b2db      	uxtb	r3, r3
}
 8007590:	4618      	mov	r0, r3
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	bd90      	pop	{r4, r7, pc}
 8007598:	2000000c 	.word	0x2000000c
 800759c:	40020400 	.word	0x40020400
 80075a0:	20000480 	.word	0x20000480
 80075a4:	20000488 	.word	0x20000488

080075a8 <disk_status>:
*/
/**************************************************************************/
DSTATUS disk_status (
	uint8_t drv		/* Physical drive number (0) */
)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	4603      	mov	r3, r0
 80075b0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only single drive */
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <disk_status+0x14>
 80075b8:	2301      	movs	r3, #1
 80075ba:	e002      	b.n	80075c2 <disk_status+0x1a>
	return Stat;
 80075bc:	4b04      	ldr	r3, [pc, #16]	; (80075d0 <disk_status+0x28>)
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	b2db      	uxtb	r3, r3
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	2000000c 	.word	0x2000000c

080075d4 <disk_read>:
	uint8_t drv,			/* Physical drive number (0) */
	uint8_t *buff,			/* Pointer to the data buffer to store read data */
	uint32_t sector,		/* Start sector number (LBA) */
	uint8_t count			/* Sector count (1..255) */
)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60b9      	str	r1, [r7, #8]
 80075dc:	607a      	str	r2, [r7, #4]
 80075de:	461a      	mov	r2, r3
 80075e0:	4603      	mov	r3, r0
 80075e2:	73fb      	strb	r3, [r7, #15]
 80075e4:	4613      	mov	r3, r2
 80075e6:	73bb      	strb	r3, [r7, #14]
	if (drv || !count) return RES_PARERR;
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d102      	bne.n	80075f4 <disk_read+0x20>
 80075ee:	7bbb      	ldrb	r3, [r7, #14]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <disk_read+0x24>
 80075f4:	2304      	movs	r3, #4
 80075f6:	e04d      	b.n	8007694 <disk_read+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80075f8:	4b28      	ldr	r3, [pc, #160]	; (800769c <disk_read+0xc8>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <disk_read+0x36>
 8007606:	2303      	movs	r3, #3
 8007608:	e044      	b.n	8007694 <disk_read+0xc0>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
 800760a:	4b25      	ldr	r3, [pc, #148]	; (80076a0 <disk_read+0xcc>)
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	f003 0308 	and.w	r3, r3, #8
 8007612:	2b00      	cmp	r3, #0
 8007614:	d102      	bne.n	800761c <disk_read+0x48>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	025b      	lsls	r3, r3, #9
 800761a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single block read */
 800761c:	7bbb      	ldrb	r3, [r7, #14]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d111      	bne.n	8007646 <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007622:	6879      	ldr	r1, [r7, #4]
 8007624:	2011      	movs	r0, #17
 8007626:	f7ff fe74 	bl	8007312 <send_cmd>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d129      	bne.n	8007684 <disk_read+0xb0>
			&& rcvr_datablock(buff, 512))
 8007630:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007634:	68b8      	ldr	r0, [r7, #8]
 8007636:	f7ff fde1 	bl	80071fc <rcvr_datablock>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d021      	beq.n	8007684 <disk_read+0xb0>
			count = 0;
 8007640:	2300      	movs	r3, #0
 8007642:	73bb      	strb	r3, [r7, #14]
 8007644:	e01e      	b.n	8007684 <disk_read+0xb0>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	2012      	movs	r0, #18
 800764a:	f7ff fe62 	bl	8007312 <send_cmd>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d117      	bne.n	8007684 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007654:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007658:	68b8      	ldr	r0, [r7, #8]
 800765a:	f7ff fdcf 	bl	80071fc <rcvr_datablock>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00a      	beq.n	800767a <disk_read+0xa6>
				buff += 512;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800766a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	3b01      	subs	r3, #1
 8007670:	73bb      	strb	r3, [r7, #14]
 8007672:	7bbb      	ldrb	r3, [r7, #14]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1ed      	bne.n	8007654 <disk_read+0x80>
 8007678:	e000      	b.n	800767c <disk_read+0xa8>
				if (!rcvr_datablock(buff, 512)) break;
 800767a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800767c:	2100      	movs	r1, #0
 800767e:	200c      	movs	r0, #12
 8007680:	f7ff fe47 	bl	8007312 <send_cmd>
		}
	}
	deselect();
 8007684:	f7ff fd5e 	bl	8007144 <deselect>

	return count ? RES_ERROR : RES_OK;
 8007688:	7bbb      	ldrb	r3, [r7, #14]
 800768a:	2b00      	cmp	r3, #0
 800768c:	bf14      	ite	ne
 800768e:	2301      	movne	r3, #1
 8007690:	2300      	moveq	r3, #0
 8007692:	b2db      	uxtb	r3, r3
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	2000000c 	.word	0x2000000c
 80076a0:	20000488 	.word	0x20000488

080076a4 <disk_write>:
	uint8_t  drv,			/* Physical drive number (0) */
	const    uint8_t *buff,	/* Pointer to the data to be written */
	uint32_t sector,		/* Start sector number (LBA) */
	uint8_t  count			/* Sector count (1..255) */
)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60b9      	str	r1, [r7, #8]
 80076ac:	607a      	str	r2, [r7, #4]
 80076ae:	461a      	mov	r2, r3
 80076b0:	4603      	mov	r3, r0
 80076b2:	73fb      	strb	r3, [r7, #15]
 80076b4:	4613      	mov	r3, r2
 80076b6:	73bb      	strb	r3, [r7, #14]
	if (drv || !count) return RES_PARERR;
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d102      	bne.n	80076c4 <disk_write+0x20>
 80076be:	7bbb      	ldrb	r3, [r7, #14]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <disk_write+0x24>
 80076c4:	2304      	movs	r3, #4
 80076c6:	e064      	b.n	8007792 <disk_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80076c8:	4b34      	ldr	r3, [pc, #208]	; (800779c <disk_write+0xf8>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <disk_write+0x36>
 80076d6:	2303      	movs	r3, #3
 80076d8:	e05b      	b.n	8007792 <disk_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80076da:	4b30      	ldr	r3, [pc, #192]	; (800779c <disk_write+0xf8>)
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	f003 0304 	and.w	r3, r3, #4
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d001      	beq.n	80076ec <disk_write+0x48>
 80076e8:	2302      	movs	r3, #2
 80076ea:	e052      	b.n	8007792 <disk_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
 80076ec:	4b2c      	ldr	r3, [pc, #176]	; (80077a0 <disk_write+0xfc>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	f003 0308 	and.w	r3, r3, #8
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d102      	bne.n	80076fe <disk_write+0x5a>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	025b      	lsls	r3, r3, #9
 80076fc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single block write */
 80076fe:	7bbb      	ldrb	r3, [r7, #14]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d110      	bne.n	8007726 <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007704:	6879      	ldr	r1, [r7, #4]
 8007706:	2018      	movs	r0, #24
 8007708:	f7ff fe03 	bl	8007312 <send_cmd>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d137      	bne.n	8007782 <disk_write+0xde>
			&& xmit_datablock(buff, 0xFE))
 8007712:	21fe      	movs	r1, #254	; 0xfe
 8007714:	68b8      	ldr	r0, [r7, #8]
 8007716:	f7ff fdbb 	bl	8007290 <xmit_datablock>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d030      	beq.n	8007782 <disk_write+0xde>
			count = 0;
 8007720:	2300      	movs	r3, #0
 8007722:	73bb      	strb	r3, [r7, #14]
 8007724:	e02d      	b.n	8007782 <disk_write+0xde>
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
 8007726:	4b1e      	ldr	r3, [pc, #120]	; (80077a0 <disk_write+0xfc>)
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	f003 0306 	and.w	r3, r3, #6
 800772e:	2b00      	cmp	r3, #0
 8007730:	d004      	beq.n	800773c <disk_write+0x98>
 8007732:	7bbb      	ldrb	r3, [r7, #14]
 8007734:	4619      	mov	r1, r3
 8007736:	2097      	movs	r0, #151	; 0x97
 8007738:	f7ff fdeb 	bl	8007312 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800773c:	6879      	ldr	r1, [r7, #4]
 800773e:	2019      	movs	r0, #25
 8007740:	f7ff fde7 	bl	8007312 <send_cmd>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d11b      	bne.n	8007782 <disk_write+0xde>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800774a:	21fc      	movs	r1, #252	; 0xfc
 800774c:	68b8      	ldr	r0, [r7, #8]
 800774e:	f7ff fd9f 	bl	8007290 <xmit_datablock>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00a      	beq.n	800776e <disk_write+0xca>
				buff += 512;
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800775e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007760:	7bbb      	ldrb	r3, [r7, #14]
 8007762:	3b01      	subs	r3, #1
 8007764:	73bb      	strb	r3, [r7, #14]
 8007766:	7bbb      	ldrb	r3, [r7, #14]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1ee      	bne.n	800774a <disk_write+0xa6>
 800776c:	e000      	b.n	8007770 <disk_write+0xcc>
				if (!xmit_datablock(buff, 0xFC)) break;
 800776e:	bf00      	nop
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
 8007770:	21fd      	movs	r1, #253	; 0xfd
 8007772:	2000      	movs	r0, #0
 8007774:	f7ff fd8c 	bl	8007290 <xmit_datablock>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <disk_write+0xde>
				count = 1;
 800777e:	2301      	movs	r3, #1
 8007780:	73bb      	strb	r3, [r7, #14]
		}
	}
	deselect();
 8007782:	f7ff fcdf 	bl	8007144 <deselect>

	return count ? RES_ERROR : RES_OK;
 8007786:	7bbb      	ldrb	r3, [r7, #14]
 8007788:	2b00      	cmp	r3, #0
 800778a:	bf14      	ite	ne
 800778c:	2301      	movne	r3, #1
 800778e:	2300      	moveq	r3, #0
 8007790:	b2db      	uxtb	r3, r3
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	2000000c 	.word	0x2000000c
 80077a0:	20000488 	.word	0x20000488

080077a4 <disk_ioctl>:
DRESULT disk_ioctl (
	uint8_t drv,		/* Physical drive number (0) */
	uint8_t ctrl,		/* Control code */
	void    *buff		/* Buffer to send/receive control data */
)
{
 80077a4:	b590      	push	{r4, r7, lr}
 80077a6:	b089      	sub	sp, #36	; 0x24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	4603      	mov	r3, r0
 80077ac:	603a      	str	r2, [r7, #0]
 80077ae:	71fb      	strb	r3, [r7, #7]
 80077b0:	460b      	mov	r3, r1
 80077b2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, *ptr = buff;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	61bb      	str	r3, [r7, #24]
	/*uint8_t csd[16];*/ /* local variable(CCRAM region) cannot DMA! */
	uint32_t *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80077b8:	79fb      	ldrb	r3, [r7, #7]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <disk_ioctl+0x1e>
 80077be:	2304      	movs	r3, #4
 80077c0:	e1f6      	b.n	8007bb0 <disk_ioctl+0x40c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80077c2:	4b97      	ldr	r3, [pc, #604]	; (8007a20 <disk_ioctl+0x27c>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <disk_ioctl+0x30>
 80077d0:	2303      	movs	r3, #3
 80077d2:	e1ed      	b.n	8007bb0 <disk_ioctl+0x40c>

	res = RES_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	77fb      	strb	r3, [r7, #31]

	switch (ctrl) {
 80077d8:	79bb      	ldrb	r3, [r7, #6]
 80077da:	2b0e      	cmp	r3, #14
 80077dc:	f200 81cd 	bhi.w	8007b7a <disk_ioctl+0x3d6>
 80077e0:	a201      	add	r2, pc, #4	; (adr r2, 80077e8 <disk_ioctl+0x44>)
 80077e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e6:	bf00      	nop
 80077e8:	08007859 	.word	0x08007859
 80077ec:	0800786f 	.word	0x0800786f
 80077f0:	08007925 	.word	0x08007925
 80077f4:	08007933 	.word	0x08007933
 80077f8:	08007a2d 	.word	0x08007a2d
 80077fc:	08007825 	.word	0x08007825
 8007800:	08007b7b 	.word	0x08007b7b
 8007804:	08007b7b 	.word	0x08007b7b
 8007808:	08007b7b 	.word	0x08007b7b
 800780c:	08007b7b 	.word	0x08007b7b
 8007810:	08007acf 	.word	0x08007acf
 8007814:	08007add 	.word	0x08007add
 8007818:	08007aff 	.word	0x08007aff
 800781c:	08007b21 	.word	0x08007b21
 8007820:	08007b55 	.word	0x08007b55

	case CTRL_POWER :
		switch (ptr[0]) {
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <disk_ioctl+0x8e>
 800782c:	2b01      	cmp	r3, #1
 800782e:	d005      	beq.n	800783c <disk_ioctl+0x98>
 8007830:	e00e      	b.n	8007850 <disk_ioctl+0xac>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
 8007832:	f7ff fcd7 	bl	80071e4 <power_off>
			res = RES_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	77fb      	strb	r3, [r7, #31]
			break;
 800783a:	e00c      	b.n	8007856 <disk_ioctl+0xb2>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (uint8_t)power_status();
 800783c:	f7ff fca6 	bl	800718c <power_status>
 8007840:	4602      	mov	r2, r0
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	3301      	adds	r3, #1
 8007846:	b2d2      	uxtb	r2, r2
 8007848:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	77fb      	strb	r3, [r7, #31]
			break;
 800784e:	e002      	b.n	8007856 <disk_ioctl+0xb2>
		default :
			res = RES_PARERR;
 8007850:	2304      	movs	r3, #4
 8007852:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8007854:	e1a9      	b.n	8007baa <disk_ioctl+0x406>
 8007856:	e1a8      	b.n	8007baa <disk_ioctl+0x406>

	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (selecting()) {
 8007858:	f7ff fc82 	bl	8007160 <selecting>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 818e 	beq.w	8007b80 <disk_ioctl+0x3dc>
			deselect();
 8007864:	f7ff fc6e 	bl	8007144 <deselect>
			res = RES_OK;
 8007868:	2300      	movs	r3, #0
 800786a:	77fb      	strb	r3, [r7, #31]
		}
		break;
 800786c:	e188      	b.n	8007b80 <disk_ioctl+0x3dc>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (uint32_t) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800786e:	2100      	movs	r1, #0
 8007870:	2009      	movs	r0, #9
 8007872:	f7ff fd4e 	bl	8007312 <send_cmd>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	f040 8183 	bne.w	8007b84 <disk_ioctl+0x3e0>
 800787e:	2110      	movs	r1, #16
 8007880:	4868      	ldr	r0, [pc, #416]	; (8007a24 <disk_ioctl+0x280>)
 8007882:	f7ff fcbb 	bl	80071fc <rcvr_datablock>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 817b 	beq.w	8007b84 <disk_ioctl+0x3e0>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800788e:	4b65      	ldr	r3, [pc, #404]	; (8007a24 <disk_ioctl+0x280>)
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	099b      	lsrs	r3, r3, #6
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b01      	cmp	r3, #1
 8007898:	d114      	bne.n	80078c4 <disk_ioctl+0x120>
				csize = csd[9] + ((uint16_t)csd[8] << 8) + ((uint32_t)(csd[7] & 63) << 16) + 1;
 800789a:	4b62      	ldr	r3, [pc, #392]	; (8007a24 <disk_ioctl+0x280>)
 800789c:	7a5b      	ldrb	r3, [r3, #9]
 800789e:	461a      	mov	r2, r3
 80078a0:	4b60      	ldr	r3, [pc, #384]	; (8007a24 <disk_ioctl+0x280>)
 80078a2:	7a1b      	ldrb	r3, [r3, #8]
 80078a4:	021b      	lsls	r3, r3, #8
 80078a6:	4413      	add	r3, r2
 80078a8:	461a      	mov	r2, r3
 80078aa:	4b5e      	ldr	r3, [pc, #376]	; (8007a24 <disk_ioctl+0x280>)
 80078ac:	79db      	ldrb	r3, [r3, #7]
 80078ae:	041b      	lsls	r3, r3, #16
 80078b0:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80078b4:	4413      	add	r3, r2
 80078b6:	3301      	adds	r3, #1
 80078b8:	60bb      	str	r3, [r7, #8]
				*(uint32_t*)buff = csize << 10;
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	029a      	lsls	r2, r3, #10
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	e02c      	b.n	800791e <disk_ioctl+0x17a>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80078c4:	4b57      	ldr	r3, [pc, #348]	; (8007a24 <disk_ioctl+0x280>)
 80078c6:	795b      	ldrb	r3, [r3, #5]
 80078c8:	f003 030f 	and.w	r3, r3, #15
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	4b55      	ldr	r3, [pc, #340]	; (8007a24 <disk_ioctl+0x280>)
 80078d0:	7a9b      	ldrb	r3, [r3, #10]
 80078d2:	09db      	lsrs	r3, r3, #7
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	4413      	add	r3, r2
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	4b52      	ldr	r3, [pc, #328]	; (8007a24 <disk_ioctl+0x280>)
 80078dc:	7a5b      	ldrb	r3, [r3, #9]
 80078de:	005b      	lsls	r3, r3, #1
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	f003 0306 	and.w	r3, r3, #6
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	4413      	add	r3, r2
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	3302      	adds	r3, #2
 80078ee:	77bb      	strb	r3, [r7, #30]
				csize = (csd[8] >> 6) + ((uint16_t)csd[7] << 2) + ((uint16_t)(csd[6] & 3) << 10) + 1;
 80078f0:	4b4c      	ldr	r3, [pc, #304]	; (8007a24 <disk_ioctl+0x280>)
 80078f2:	7a1b      	ldrb	r3, [r3, #8]
 80078f4:	099b      	lsrs	r3, r3, #6
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	461a      	mov	r2, r3
 80078fa:	4b4a      	ldr	r3, [pc, #296]	; (8007a24 <disk_ioctl+0x280>)
 80078fc:	79db      	ldrb	r3, [r3, #7]
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	441a      	add	r2, r3
 8007902:	4b48      	ldr	r3, [pc, #288]	; (8007a24 <disk_ioctl+0x280>)
 8007904:	799b      	ldrb	r3, [r3, #6]
 8007906:	029b      	lsls	r3, r3, #10
 8007908:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800790c:	4413      	add	r3, r2
 800790e:	3301      	adds	r3, #1
 8007910:	60bb      	str	r3, [r7, #8]
				*(uint32_t*)buff = csize << (n - 9);
 8007912:	7fbb      	ldrb	r3, [r7, #30]
 8007914:	3b09      	subs	r3, #9
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	409a      	lsls	r2, r3
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8007922:	e12f      	b.n	8007b84 <disk_ioctl+0x3e0>

	case GET_SECTOR_SIZE :	/* Get sector size in unit of byte (uint16_t) */
		*(uint16_t*)buff = 512;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800792a:	801a      	strh	r2, [r3, #0]
		res = RES_OK;
 800792c:	2300      	movs	r3, #0
 800792e:	77fb      	strb	r3, [r7, #31]
		break;
 8007930:	e13b      	b.n	8007baa <disk_ioctl+0x406>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (uint32_t) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007932:	4b3d      	ldr	r3, [pc, #244]	; (8007a28 <disk_ioctl+0x284>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	f003 0304 	and.w	r3, r3, #4
 800793a:	2b00      	cmp	r3, #0
 800793c:	d029      	beq.n	8007992 <disk_ioctl+0x1ee>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800793e:	2100      	movs	r1, #0
 8007940:	208d      	movs	r0, #141	; 0x8d
 8007942:	f7ff fce6 	bl	8007312 <send_cmd>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	f040 811d 	bne.w	8007b88 <disk_ioctl+0x3e4>
				rcvr_spi();
 800794e:	f7ff fbd5 	bl	80070fc <rcvr_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8007952:	2110      	movs	r1, #16
 8007954:	4833      	ldr	r0, [pc, #204]	; (8007a24 <disk_ioctl+0x280>)
 8007956:	f7ff fc51 	bl	80071fc <rcvr_datablock>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 8113 	beq.w	8007b88 <disk_ioctl+0x3e4>
					for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
 8007962:	2330      	movs	r3, #48	; 0x30
 8007964:	77bb      	strb	r3, [r7, #30]
 8007966:	e004      	b.n	8007972 <disk_ioctl+0x1ce>
 8007968:	f7ff fbc8 	bl	80070fc <rcvr_spi>
 800796c:	7fbb      	ldrb	r3, [r7, #30]
 800796e:	3b01      	subs	r3, #1
 8007970:	77bb      	strb	r3, [r7, #30]
 8007972:	7fbb      	ldrb	r3, [r7, #30]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1f7      	bne.n	8007968 <disk_ioctl+0x1c4>
					*(uint32_t*)buff = 16UL << (csd[10] >> 4);
 8007978:	4b2a      	ldr	r3, [pc, #168]	; (8007a24 <disk_ioctl+0x280>)
 800797a:	7a9b      	ldrb	r3, [r3, #10]
 800797c:	091b      	lsrs	r3, r3, #4
 800797e:	b2db      	uxtb	r3, r3
 8007980:	461a      	mov	r2, r3
 8007982:	2310      	movs	r3, #16
 8007984:	fa03 f202 	lsl.w	r2, r3, r2
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	77fb      	strb	r3, [r7, #31]
					*(uint32_t*)buff = ((uint16_t)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007990:	e0fa      	b.n	8007b88 <disk_ioctl+0x3e4>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007992:	2100      	movs	r1, #0
 8007994:	2009      	movs	r0, #9
 8007996:	f7ff fcbc 	bl	8007312 <send_cmd>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	f040 80f3 	bne.w	8007b88 <disk_ioctl+0x3e4>
 80079a2:	2110      	movs	r1, #16
 80079a4:	481f      	ldr	r0, [pc, #124]	; (8007a24 <disk_ioctl+0x280>)
 80079a6:	f7ff fc29 	bl	80071fc <rcvr_datablock>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 80eb 	beq.w	8007b88 <disk_ioctl+0x3e4>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80079b2:	4b1d      	ldr	r3, [pc, #116]	; (8007a28 <disk_ioctl+0x284>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	f003 0302 	and.w	r3, r3, #2
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d015      	beq.n	80079ea <disk_ioctl+0x246>
					*(uint32_t*)buff = (((csd[10] & 63) << 1) + ((uint16_t)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80079be:	4b19      	ldr	r3, [pc, #100]	; (8007a24 <disk_ioctl+0x280>)
 80079c0:	7a9b      	ldrb	r3, [r3, #10]
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80079c8:	4a16      	ldr	r2, [pc, #88]	; (8007a24 <disk_ioctl+0x280>)
 80079ca:	7ad2      	ldrb	r2, [r2, #11]
 80079cc:	09d2      	lsrs	r2, r2, #7
 80079ce:	b2d2      	uxtb	r2, r2
 80079d0:	4413      	add	r3, r2
 80079d2:	1c5a      	adds	r2, r3, #1
 80079d4:	4b13      	ldr	r3, [pc, #76]	; (8007a24 <disk_ioctl+0x280>)
 80079d6:	7b5b      	ldrb	r3, [r3, #13]
 80079d8:	099b      	lsrs	r3, r3, #6
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	3b01      	subs	r3, #1
 80079de:	fa02 f303 	lsl.w	r3, r2, r3
 80079e2:	461a      	mov	r2, r3
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	601a      	str	r2, [r3, #0]
 80079e8:	e016      	b.n	8007a18 <disk_ioctl+0x274>
					*(uint32_t*)buff = ((uint16_t)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80079ea:	4b0e      	ldr	r3, [pc, #56]	; (8007a24 <disk_ioctl+0x280>)
 80079ec:	7a9b      	ldrb	r3, [r3, #10]
 80079ee:	109b      	asrs	r3, r3, #2
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	f003 031f 	and.w	r3, r3, #31
 80079f6:	3301      	adds	r3, #1
 80079f8:	4a0a      	ldr	r2, [pc, #40]	; (8007a24 <disk_ioctl+0x280>)
 80079fa:	7ad2      	ldrb	r2, [r2, #11]
 80079fc:	00d2      	lsls	r2, r2, #3
 80079fe:	f002 0218 	and.w	r2, r2, #24
 8007a02:	4908      	ldr	r1, [pc, #32]	; (8007a24 <disk_ioctl+0x280>)
 8007a04:	7ac9      	ldrb	r1, [r1, #11]
 8007a06:	0949      	lsrs	r1, r1, #5
 8007a08:	b2c9      	uxtb	r1, r1
 8007a0a:	440a      	add	r2, r1
 8007a0c:	3201      	adds	r2, #1
 8007a0e:	fb02 f303 	mul.w	r3, r2, r3
 8007a12:	461a      	mov	r2, r3
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	77fb      	strb	r3, [r7, #31]
		break;
 8007a1c:	e0b4      	b.n	8007b88 <disk_ioctl+0x3e4>
 8007a1e:	bf00      	nop
 8007a20:	2000000c 	.word	0x2000000c
 8007a24:	2000135c 	.word	0x2000135c
 8007a28:	20000488 	.word	0x20000488

	case CTRL_ERASE_SECTOR :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007a2c:	4b62      	ldr	r3, [pc, #392]	; (8007bb8 <disk_ioctl+0x414>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	f003 0306 	and.w	r3, r3, #6
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 80a9 	beq.w	8007b8c <disk_ioctl+0x3e8>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007a3a:	79fb      	ldrb	r3, [r7, #7]
 8007a3c:	4a5f      	ldr	r2, [pc, #380]	; (8007bbc <disk_ioctl+0x418>)
 8007a3e:	210b      	movs	r1, #11
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7ff feaf 	bl	80077a4 <disk_ioctl>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f040 80a1 	bne.w	8007b90 <disk_ioctl+0x3ec>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007a4e:	4b5b      	ldr	r3, [pc, #364]	; (8007bbc <disk_ioctl+0x418>)
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	099b      	lsrs	r3, r3, #6
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d106      	bne.n	8007a68 <disk_ioctl+0x2c4>
 8007a5a:	4b58      	ldr	r3, [pc, #352]	; (8007bbc <disk_ioctl+0x418>)
 8007a5c:	7a9b      	ldrb	r3, [r3, #10]
 8007a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 8096 	beq.w	8007b94 <disk_ioctl+0x3f0>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	617b      	str	r3, [r7, #20]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	613b      	str	r3, [r7, #16]
		if (!(CardType & CT_BLOCK)) {
 8007a78:	4b4f      	ldr	r3, [pc, #316]	; (8007bb8 <disk_ioctl+0x414>)
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	f003 0308 	and.w	r3, r3, #8
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d105      	bne.n	8007a90 <disk_ioctl+0x2ec>
			st *= 512; ed *= 512;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	025b      	lsls	r3, r3, #9
 8007a88:	617b      	str	r3, [r7, #20]
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	025b      	lsls	r3, r3, #9
 8007a8e:	613b      	str	r3, [r7, #16]
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(3000))	/* Erase sector block */
 8007a90:	6979      	ldr	r1, [r7, #20]
 8007a92:	2020      	movs	r0, #32
 8007a94:	f7ff fc3d 	bl	8007312 <send_cmd>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d17c      	bne.n	8007b98 <disk_ioctl+0x3f4>
 8007a9e:	6939      	ldr	r1, [r7, #16]
 8007aa0:	2021      	movs	r0, #33	; 0x21
 8007aa2:	f7ff fc36 	bl	8007312 <send_cmd>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d175      	bne.n	8007b98 <disk_ioctl+0x3f4>
 8007aac:	2100      	movs	r1, #0
 8007aae:	2026      	movs	r0, #38	; 0x26
 8007ab0:	f7ff fc2f 	bl	8007312 <send_cmd>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d16e      	bne.n	8007b98 <disk_ioctl+0x3f4>
 8007aba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007abe:	f7ff fb25 	bl	800710c <wait_ready>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d067      	beq.n	8007b98 <disk_ioctl+0x3f4>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007ac8:	2300      	movs	r3, #0
 8007aca:	77fb      	strb	r3, [r7, #31]
		break;
 8007acc:	e064      	b.n	8007b98 <disk_ioctl+0x3f4>

	/* Following command are not used by FatFs module */

	case MMC_GET_TYPE :		/* Get MMC/SDC type (uint8_t) */
		*ptr = CardType;
 8007ace:	4b3a      	ldr	r3, [pc, #232]	; (8007bb8 <disk_ioctl+0x414>)
 8007ad0:	781a      	ldrb	r2, [r3, #0]
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	701a      	strb	r2, [r3, #0]
		res = RES_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	77fb      	strb	r3, [r7, #31]
		break;
 8007ada:	e066      	b.n	8007baa <disk_ioctl+0x406>

	case MMC_GET_CSD :		/* Read CSD (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
 8007adc:	2100      	movs	r1, #0
 8007ade:	2009      	movs	r0, #9
 8007ae0:	f7ff fc17 	bl	8007312 <send_cmd>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d158      	bne.n	8007b9c <disk_ioctl+0x3f8>
			&& rcvr_datablock(ptr, 16))
 8007aea:	2110      	movs	r1, #16
 8007aec:	69b8      	ldr	r0, [r7, #24]
 8007aee:	f7ff fb85 	bl	80071fc <rcvr_datablock>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d051      	beq.n	8007b9c <disk_ioctl+0x3f8>
			res = RES_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	77fb      	strb	r3, [r7, #31]
		break;
 8007afc:	e04e      	b.n	8007b9c <disk_ioctl+0x3f8>

	case MMC_GET_CID :		/* Read CID (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
 8007afe:	2100      	movs	r1, #0
 8007b00:	200a      	movs	r0, #10
 8007b02:	f7ff fc06 	bl	8007312 <send_cmd>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d149      	bne.n	8007ba0 <disk_ioctl+0x3fc>
			&& rcvr_datablock(ptr, 16))
 8007b0c:	2110      	movs	r1, #16
 8007b0e:	69b8      	ldr	r0, [r7, #24]
 8007b10:	f7ff fb74 	bl	80071fc <rcvr_datablock>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d042      	beq.n	8007ba0 <disk_ioctl+0x3fc>
			res = RES_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	77fb      	strb	r3, [r7, #31]
		break;
 8007b1e:	e03f      	b.n	8007ba0 <disk_ioctl+0x3fc>

	case MMC_GET_OCR :		/* Read OCR (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
 8007b20:	2100      	movs	r1, #0
 8007b22:	203a      	movs	r0, #58	; 0x3a
 8007b24:	f7ff fbf5 	bl	8007312 <send_cmd>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d13a      	bne.n	8007ba4 <disk_ioctl+0x400>
			for (n = 4; n; n--) *ptr++ = rcvr_spi();
 8007b2e:	2304      	movs	r3, #4
 8007b30:	77bb      	strb	r3, [r7, #30]
 8007b32:	e009      	b.n	8007b48 <disk_ioctl+0x3a4>
 8007b34:	69bc      	ldr	r4, [r7, #24]
 8007b36:	1c63      	adds	r3, r4, #1
 8007b38:	61bb      	str	r3, [r7, #24]
 8007b3a:	f7ff fadf 	bl	80070fc <rcvr_spi>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	7023      	strb	r3, [r4, #0]
 8007b42:	7fbb      	ldrb	r3, [r7, #30]
 8007b44:	3b01      	subs	r3, #1
 8007b46:	77bb      	strb	r3, [r7, #30]
 8007b48:	7fbb      	ldrb	r3, [r7, #30]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1f2      	bne.n	8007b34 <disk_ioctl+0x390>
			res = RES_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8007b52:	e027      	b.n	8007ba4 <disk_ioctl+0x400>

	case MMC_GET_SDSTAT :	/* Read SD status (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
 8007b54:	2100      	movs	r1, #0
 8007b56:	208d      	movs	r0, #141	; 0x8d
 8007b58:	f7ff fbdb 	bl	8007312 <send_cmd>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d122      	bne.n	8007ba8 <disk_ioctl+0x404>
			rcvr_spi();
 8007b62:	f7ff facb 	bl	80070fc <rcvr_spi>
			if (rcvr_datablock(ptr, 64))
 8007b66:	2140      	movs	r1, #64	; 0x40
 8007b68:	69b8      	ldr	r0, [r7, #24]
 8007b6a:	f7ff fb47 	bl	80071fc <rcvr_datablock>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d019      	beq.n	8007ba8 <disk_ioctl+0x404>
				res = RES_OK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8007b78:	e016      	b.n	8007ba8 <disk_ioctl+0x404>

	default:
		res = RES_PARERR;
 8007b7a:	2304      	movs	r3, #4
 8007b7c:	77fb      	strb	r3, [r7, #31]
 8007b7e:	e014      	b.n	8007baa <disk_ioctl+0x406>
		break;
 8007b80:	bf00      	nop
 8007b82:	e012      	b.n	8007baa <disk_ioctl+0x406>
		break;
 8007b84:	bf00      	nop
 8007b86:	e010      	b.n	8007baa <disk_ioctl+0x406>
		break;
 8007b88:	bf00      	nop
 8007b8a:	e00e      	b.n	8007baa <disk_ioctl+0x406>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007b8c:	bf00      	nop
 8007b8e:	e00c      	b.n	8007baa <disk_ioctl+0x406>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007b90:	bf00      	nop
 8007b92:	e00a      	b.n	8007baa <disk_ioctl+0x406>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007b94:	bf00      	nop
 8007b96:	e008      	b.n	8007baa <disk_ioctl+0x406>
		break;
 8007b98:	bf00      	nop
 8007b9a:	e006      	b.n	8007baa <disk_ioctl+0x406>
		break;
 8007b9c:	bf00      	nop
 8007b9e:	e004      	b.n	8007baa <disk_ioctl+0x406>
		break;
 8007ba0:	bf00      	nop
 8007ba2:	e002      	b.n	8007baa <disk_ioctl+0x406>
		break;
 8007ba4:	bf00      	nop
 8007ba6:	e000      	b.n	8007baa <disk_ioctl+0x406>
		break;
 8007ba8:	bf00      	nop
	}

	deselect();
 8007baa:	f7ff facb 	bl	8007144 <deselect>

	return res;
 8007bae:	7ffb      	ldrb	r3, [r7, #31]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3724      	adds	r7, #36	; 0x24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd90      	pop	{r4, r7, pc}
 8007bb8:	20000488 	.word	0x20000488
 8007bbc:	2000135c 	.word	0x2000135c

08007bc0 <get_fattime>:
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

uint32_t get_fattime (void)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	af00      	add	r7, sp, #0

    return  ((2011UL-1980) << 25)    // Year = 2011
 8007bc4:	4b02      	ldr	r3, [pc, #8]	; (8007bd0 <get_fattime+0x10>)
            | (12U << 11)            // Hour = 12
            | (0U << 5)              // Min = 00
            | (0U >> 1)              // Sec = 00
            ;

}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr
 8007bd0:	3e216000 	.word	0x3e216000

08007bd4 <clear_string>:
	  }
  }
}
//Функция удаления символов \r и \n из строки
void clear_string(char *src)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
	char *dst = NULL;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	60fb      	str	r3, [r7, #12]
	if(!src) return;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d02f      	beq.n	8007c46 <clear_string+0x72>
	uint8_t i = 0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	72fb      	strb	r3, [r7, #11]

	for(dst = src; *src; src++)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	60fb      	str	r3, [r7, #12]
 8007bee:	e022      	b.n	8007c36 <clear_string+0x62>
	{
		if(i < 2 && (*src == '\n' || *src == '\r'))
 8007bf0:	7afb      	ldrb	r3, [r7, #11]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d80b      	bhi.n	8007c0e <clear_string+0x3a>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	2b0a      	cmp	r3, #10
 8007bfc:	d003      	beq.n	8007c06 <clear_string+0x32>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	2b0d      	cmp	r3, #13
 8007c04:	d103      	bne.n	8007c0e <clear_string+0x3a>
		{
			i++;
 8007c06:	7afb      	ldrb	r3, [r7, #11]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	72fb      	strb	r3, [r7, #11]
			continue;
 8007c0c:	e010      	b.n	8007c30 <clear_string+0x5c>
		}
		else if(*src == '\n' || *src == '\r') *src = ' ';
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	2b0a      	cmp	r3, #10
 8007c14:	d003      	beq.n	8007c1e <clear_string+0x4a>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	2b0d      	cmp	r3, #13
 8007c1c:	d102      	bne.n	8007c24 <clear_string+0x50>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2220      	movs	r2, #32
 8007c22:	701a      	strb	r2, [r3, #0]

		*dst++ = *src;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	1c5a      	adds	r2, r3, #1
 8007c28:	60fa      	str	r2, [r7, #12]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	7812      	ldrb	r2, [r2, #0]
 8007c2e:	701a      	strb	r2, [r3, #0]
	for(dst = src; *src; src++)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	3301      	adds	r3, #1
 8007c34:	607b      	str	r3, [r7, #4]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1d8      	bne.n	8007bf0 <clear_string+0x1c>
	}

	*dst = 0;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	701a      	strb	r2, [r3, #0]
 8007c44:	e000      	b.n	8007c48 <clear_string+0x74>
	if(!src) return;
 8007c46:	bf00      	nop
}
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
	...

08007c54 <ReWriteOCD>:
//char trans_str[64] = {0,};


//Функция обновления значений в массиве данных коллекторных выходов
void ReWriteOCD(void)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++)
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	607b      	str	r3, [r7, #4]
 8007c5e:	e021      	b.n	8007ca4 <ReWriteOCD+0x50>
		(Status_OCD[i]) ? (HAL_GPIO_WritePin(pVIHOD[i], OCD_Pin[i], SET)) : (HAL_GPIO_WritePin(pVIHOD[i], OCD_Pin[i], RESET));
 8007c60:	4a14      	ldr	r2, [pc, #80]	; (8007cb4 <ReWriteOCD+0x60>)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4413      	add	r3, r2
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00c      	beq.n	8007c86 <ReWriteOCD+0x32>
 8007c6c:	4a12      	ldr	r2, [pc, #72]	; (8007cb8 <ReWriteOCD+0x64>)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007c74:	4a11      	ldr	r2, [pc, #68]	; (8007cbc <ReWriteOCD+0x68>)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	4619      	mov	r1, r3
 8007c80:	f003 fed6 	bl	800ba30 <HAL_GPIO_WritePin>
 8007c84:	e00b      	b.n	8007c9e <ReWriteOCD+0x4a>
 8007c86:	4a0c      	ldr	r2, [pc, #48]	; (8007cb8 <ReWriteOCD+0x64>)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007c8e:	4a0b      	ldr	r2, [pc, #44]	; (8007cbc <ReWriteOCD+0x68>)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c96:	2200      	movs	r2, #0
 8007c98:	4619      	mov	r1, r3
 8007c9a:	f003 fec9 	bl	800ba30 <HAL_GPIO_WritePin>
	for(int i = 0; i < 8; i++)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	607b      	str	r3, [r7, #4]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b07      	cmp	r3, #7
 8007ca8:	ddda      	ble.n	8007c60 <ReWriteOCD+0xc>
}
 8007caa:	bf00      	nop
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	2000049c 	.word	0x2000049c
 8007cb8:	20000030 	.word	0x20000030
 8007cbc:	20000060 	.word	0x20000060

08007cc0 <CheckReWriteDiDo>:
uint16_t OW_Pin[2] = {WR0_Pin, WR1_Pin};

//Мониторинг дискретных входов и изменение выходов открытый коллектор
//	*(Если Вход1 == 0 то Выход3 = 1) Инверсная логика на входах оптопар
void CheckReWriteDiDo(void)
{
 8007cc0:	b590      	push	{r4, r7, lr}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++)
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	607b      	str	r3, [r7, #4]
 8007cca:	e0aa      	b.n	8007e22 <CheckReWriteDiDo+0x162>
	{
		if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) != DiDo[i].VAR_IN)
 8007ccc:	4959      	ldr	r1, [pc, #356]	; (8007e34 <CheckReWriteDiDo+0x174>)
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	440b      	add	r3, r1
 8007cda:	6818      	ldr	r0, [r3, #0]
 8007cdc:	4955      	ldr	r1, [pc, #340]	; (8007e34 <CheckReWriteDiDo+0x174>)
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4413      	add	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	440b      	add	r3, r1
 8007cea:	3306      	adds	r3, #6
 8007cec:	881b      	ldrh	r3, [r3, #0]
 8007cee:	4619      	mov	r1, r3
 8007cf0:	f003 fe86 	bl	800ba00 <HAL_GPIO_ReadPin>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	494e      	ldr	r1, [pc, #312]	; (8007e34 <CheckReWriteDiDo+0x174>)
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	440b      	add	r3, r1
 8007d06:	3304      	adds	r3, #4
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	4298      	cmp	r0, r3
 8007d0c:	d02d      	beq.n	8007d6a <CheckReWriteDiDo+0xaa>
		{
			Status_OCD[i] = DiDo[i].VAR_OUT;
 8007d0e:	4949      	ldr	r1, [pc, #292]	; (8007e34 <CheckReWriteDiDo+0x174>)
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	4613      	mov	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	440b      	add	r3, r1
 8007d1c:	330c      	adds	r3, #12
 8007d1e:	7819      	ldrb	r1, [r3, #0]
 8007d20:	4a45      	ldr	r2, [pc, #276]	; (8007e38 <CheckReWriteDiDo+0x178>)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4413      	add	r3, r2
 8007d26:	460a      	mov	r2, r1
 8007d28:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, DiDo[i].VAR_OUT);
 8007d2a:	4942      	ldr	r1, [pc, #264]	; (8007e34 <CheckReWriteDiDo+0x174>)
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4413      	add	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	440b      	add	r3, r1
 8007d38:	3308      	adds	r3, #8
 8007d3a:	6818      	ldr	r0, [r3, #0]
 8007d3c:	493d      	ldr	r1, [pc, #244]	; (8007e34 <CheckReWriteDiDo+0x174>)
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	4613      	mov	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4413      	add	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	440b      	add	r3, r1
 8007d4a:	330e      	adds	r3, #14
 8007d4c:	881c      	ldrh	r4, [r3, #0]
 8007d4e:	4939      	ldr	r1, [pc, #228]	; (8007e34 <CheckReWriteDiDo+0x174>)
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	4613      	mov	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	440b      	add	r3, r1
 8007d5c:	330c      	adds	r3, #12
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	461a      	mov	r2, r3
 8007d62:	4621      	mov	r1, r4
 8007d64:	f003 fe64 	bl	800ba30 <HAL_GPIO_WritePin>
 8007d68:	e058      	b.n	8007e1c <CheckReWriteDiDo+0x15c>
		}
		else if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) == DiDo[i].VAR_IN)
 8007d6a:	4932      	ldr	r1, [pc, #200]	; (8007e34 <CheckReWriteDiDo+0x174>)
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	440b      	add	r3, r1
 8007d78:	6818      	ldr	r0, [r3, #0]
 8007d7a:	492e      	ldr	r1, [pc, #184]	; (8007e34 <CheckReWriteDiDo+0x174>)
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	440b      	add	r3, r1
 8007d88:	3306      	adds	r3, #6
 8007d8a:	881b      	ldrh	r3, [r3, #0]
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	f003 fe37 	bl	800ba00 <HAL_GPIO_ReadPin>
 8007d92:	4603      	mov	r3, r0
 8007d94:	4618      	mov	r0, r3
 8007d96:	4927      	ldr	r1, [pc, #156]	; (8007e34 <CheckReWriteDiDo+0x174>)
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	440b      	add	r3, r1
 8007da4:	3304      	adds	r3, #4
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	4298      	cmp	r0, r3
 8007daa:	d137      	bne.n	8007e1c <CheckReWriteDiDo+0x15c>
		{
			Status_OCD[i] = !DiDo[i].VAR_OUT;
 8007dac:	4921      	ldr	r1, [pc, #132]	; (8007e34 <CheckReWriteDiDo+0x174>)
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	4613      	mov	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	440b      	add	r3, r1
 8007dba:	330c      	adds	r3, #12
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	bf0c      	ite	eq
 8007dc2:	2301      	moveq	r3, #1
 8007dc4:	2300      	movne	r3, #0
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	4619      	mov	r1, r3
 8007dca:	4a1b      	ldr	r2, [pc, #108]	; (8007e38 <CheckReWriteDiDo+0x178>)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4413      	add	r3, r2
 8007dd0:	460a      	mov	r2, r1
 8007dd2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, !DiDo[i].VAR_OUT);
 8007dd4:	4917      	ldr	r1, [pc, #92]	; (8007e34 <CheckReWriteDiDo+0x174>)
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	440b      	add	r3, r1
 8007de2:	3308      	adds	r3, #8
 8007de4:	6818      	ldr	r0, [r3, #0]
 8007de6:	4913      	ldr	r1, [pc, #76]	; (8007e34 <CheckReWriteDiDo+0x174>)
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	4613      	mov	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4413      	add	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	440b      	add	r3, r1
 8007df4:	330e      	adds	r3, #14
 8007df6:	881c      	ldrh	r4, [r3, #0]
 8007df8:	490e      	ldr	r1, [pc, #56]	; (8007e34 <CheckReWriteDiDo+0x174>)
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	440b      	add	r3, r1
 8007e06:	330c      	adds	r3, #12
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	bf0c      	ite	eq
 8007e0e:	2301      	moveq	r3, #1
 8007e10:	2300      	movne	r3, #0
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	461a      	mov	r2, r3
 8007e16:	4621      	mov	r1, r4
 8007e18:	f003 fe0a 	bl	800ba30 <HAL_GPIO_WritePin>
	for(int i = 0; i < 8; i++)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	607b      	str	r3, [r7, #4]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2b07      	cmp	r3, #7
 8007e26:	f77f af51 	ble.w	8007ccc <CheckReWriteDiDo+0xc>
		}
	}
}
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd90      	pop	{r4, r7, pc}
 8007e32:	bf00      	nop
 8007e34:	20000758 	.word	0x20000758
 8007e38:	2000049c 	.word	0x2000049c

08007e3c <CheckReWriteAiDo>:
//Мониторинг аналоговых входов и изменение выходов открытый коллектор
void CheckReWriteAiDo(void)
{
 8007e3c:	b590      	push	{r4, r7, lr}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++)
 8007e42:	2300      	movs	r3, #0
 8007e44:	607b      	str	r3, [r7, #4]
 8007e46:	e09b      	b.n	8007f80 <CheckReWriteAiDo+0x144>
	{
		for(int j = 0; j < 8; j++)
 8007e48:	2300      	movs	r3, #0
 8007e4a:	603b      	str	r3, [r7, #0]
 8007e4c:	e091      	b.n	8007f72 <CheckReWriteAiDo+0x136>
		{
			if(AiDo[i].OCD_Pin == OCD_Pin[j])
 8007e4e:	4950      	ldr	r1, [pc, #320]	; (8007f90 <CheckReWriteAiDo+0x154>)
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	4613      	mov	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4413      	add	r3, r2
 8007e58:	00db      	lsls	r3, r3, #3
 8007e5a:	440b      	add	r3, r1
 8007e5c:	331e      	adds	r3, #30
 8007e5e:	881a      	ldrh	r2, [r3, #0]
 8007e60:	494c      	ldr	r1, [pc, #304]	; (8007f94 <CheckReWriteAiDo+0x158>)
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d17f      	bne.n	8007f6c <CheckReWriteAiDo+0x130>
			{
				if((adcValue[i] >= AiDo[i].RANGE_LOW) && (AiDo[i].RANGE_HIGH >= adcValue[i]))
 8007e6c:	4a4a      	ldr	r2, [pc, #296]	; (8007f98 <CheckReWriteAiDo+0x15c>)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	00db      	lsls	r3, r3, #3
 8007e72:	4413      	add	r3, r2
 8007e74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e78:	4c45      	ldr	r4, [pc, #276]	; (8007f90 <CheckReWriteAiDo+0x154>)
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	4413      	add	r3, r2
 8007e82:	00db      	lsls	r3, r3, #3
 8007e84:	4423      	add	r3, r4
 8007e86:	3308      	adds	r3, #8
 8007e88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	4623      	mov	r3, r4
 8007e90:	f7f8 fe48 	bl	8000b24 <__aeabi_dcmpge>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d044      	beq.n	8007f24 <CheckReWriteAiDo+0xe8>
 8007e9a:	493d      	ldr	r1, [pc, #244]	; (8007f90 <CheckReWriteAiDo+0x154>)
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	00db      	lsls	r3, r3, #3
 8007ea6:	440b      	add	r3, r1
 8007ea8:	3310      	adds	r3, #16
 8007eaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007eae:	4a3a      	ldr	r2, [pc, #232]	; (8007f98 <CheckReWriteAiDo+0x15c>)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	00db      	lsls	r3, r3, #3
 8007eb4:	4413      	add	r3, r2
 8007eb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	4623      	mov	r3, r4
 8007ebe:	f7f8 fe31 	bl	8000b24 <__aeabi_dcmpge>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d02d      	beq.n	8007f24 <CheckReWriteAiDo+0xe8>
				{
					Status_OCD[j] = AiDo[i].VAR_OUT;
 8007ec8:	4931      	ldr	r1, [pc, #196]	; (8007f90 <CheckReWriteAiDo+0x154>)
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	00db      	lsls	r3, r3, #3
 8007ed4:	440b      	add	r3, r1
 8007ed6:	331c      	adds	r3, #28
 8007ed8:	7819      	ldrb	r1, [r3, #0]
 8007eda:	4a30      	ldr	r2, [pc, #192]	; (8007f9c <CheckReWriteAiDo+0x160>)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	4413      	add	r3, r2
 8007ee0:	460a      	mov	r2, r1
 8007ee2:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(AiDo[i].D_OUT, AiDo[i].OCD_Pin, AiDo[i].VAR_OUT);
 8007ee4:	492a      	ldr	r1, [pc, #168]	; (8007f90 <CheckReWriteAiDo+0x154>)
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4413      	add	r3, r2
 8007eee:	00db      	lsls	r3, r3, #3
 8007ef0:	440b      	add	r3, r1
 8007ef2:	3318      	adds	r3, #24
 8007ef4:	6818      	ldr	r0, [r3, #0]
 8007ef6:	4926      	ldr	r1, [pc, #152]	; (8007f90 <CheckReWriteAiDo+0x154>)
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	4613      	mov	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	00db      	lsls	r3, r3, #3
 8007f02:	440b      	add	r3, r1
 8007f04:	331e      	adds	r3, #30
 8007f06:	881c      	ldrh	r4, [r3, #0]
 8007f08:	4921      	ldr	r1, [pc, #132]	; (8007f90 <CheckReWriteAiDo+0x154>)
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4413      	add	r3, r2
 8007f12:	00db      	lsls	r3, r3, #3
 8007f14:	440b      	add	r3, r1
 8007f16:	331c      	adds	r3, #28
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	f003 fd87 	bl	800ba30 <HAL_GPIO_WritePin>
 8007f22:	e023      	b.n	8007f6c <CheckReWriteAiDo+0x130>
				}
				else
				{
					Status_OCD[j] = AiDo[i].VAR_OUT;
 8007f24:	491a      	ldr	r1, [pc, #104]	; (8007f90 <CheckReWriteAiDo+0x154>)
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	4613      	mov	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	00db      	lsls	r3, r3, #3
 8007f30:	440b      	add	r3, r1
 8007f32:	331c      	adds	r3, #28
 8007f34:	7819      	ldrb	r1, [r3, #0]
 8007f36:	4a19      	ldr	r2, [pc, #100]	; (8007f9c <CheckReWriteAiDo+0x160>)
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	460a      	mov	r2, r1
 8007f3e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(AiDo[i].D_OUT, AiDo[i].OCD_Pin, RESET);	//!AiDo[i].VAR_OUT - вариант инверсии выхода по отношении ко входу
 8007f40:	4913      	ldr	r1, [pc, #76]	; (8007f90 <CheckReWriteAiDo+0x154>)
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	4613      	mov	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	00db      	lsls	r3, r3, #3
 8007f4c:	440b      	add	r3, r1
 8007f4e:	3318      	adds	r3, #24
 8007f50:	6818      	ldr	r0, [r3, #0]
 8007f52:	490f      	ldr	r1, [pc, #60]	; (8007f90 <CheckReWriteAiDo+0x154>)
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	4613      	mov	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4413      	add	r3, r2
 8007f5c:	00db      	lsls	r3, r3, #3
 8007f5e:	440b      	add	r3, r1
 8007f60:	331e      	adds	r3, #30
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	2200      	movs	r2, #0
 8007f66:	4619      	mov	r1, r3
 8007f68:	f003 fd62 	bl	800ba30 <HAL_GPIO_WritePin>
		for(int j = 0; j < 8; j++)
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	603b      	str	r3, [r7, #0]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b07      	cmp	r3, #7
 8007f76:	f77f af6a 	ble.w	8007e4e <CheckReWriteAiDo+0x12>
	for(int i = 0; i < 4; i++)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	607b      	str	r3, [r7, #4]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b03      	cmp	r3, #3
 8007f84:	f77f af60 	ble.w	8007e48 <CheckReWriteAiDo+0xc>
				}
			}
		}
	}
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd90      	pop	{r4, r7, pc}
 8007f90:	200006b8 	.word	0x200006b8
 8007f94:	20000060 	.word	0x20000060
 8007f98:	20000308 	.word	0x20000308
 8007f9c:	2000049c 	.word	0x2000049c

08007fa0 <CheckReWriteTSiDo>:
//Мониторинг датчиков температуры и изменение выходов открытый коллектор
void CheckReWriteTSiDo(void)
{
 8007fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af02      	add	r7, sp, #8
	if(OneWire_Test_Flag_Init)
 8007fa6:	4b93      	ldr	r3, [pc, #588]	; (80081f4 <CheckReWriteTSiDo+0x254>)
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d012      	beq.n	8007fd4 <CheckReWriteTSiDo+0x34>
	{
		OneWire_Test_Flag_Init = false;
 8007fae:	4b91      	ldr	r3, [pc, #580]	; (80081f4 <CheckReWriteTSiDo+0x254>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	701a      	strb	r2, [r3, #0]
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	71fb      	strb	r3, [r7, #7]
 8007fb8:	e007      	b.n	8007fca <CheckReWriteTSiDo+0x2a>
    	{
    		sensors_MeasureTemperCmd(NO_SKIP_ROM, i);
 8007fba:	79fb      	ldrb	r3, [r7, #7]
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	2001      	movs	r0, #1
 8007fc0:	f001 f8ca 	bl	8009158 <sensors_MeasureTemperCmd>
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 8007fc4:	79fb      	ldrb	r3, [r7, #7]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	71fb      	strb	r3, [r7, #7]
 8007fca:	4b8b      	ldr	r3, [pc, #556]	; (80081f8 <CheckReWriteTSiDo+0x258>)
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	79fa      	ldrb	r2, [r7, #7]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d9f2      	bls.n	8007fba <CheckReWriteTSiDo+0x1a>
    	}
	}
	if(OneWire_Test_Flag_Read)
 8007fd4:	4b89      	ldr	r3, [pc, #548]	; (80081fc <CheckReWriteTSiDo+0x25c>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 8106 	beq.w	80081ea <CheckReWriteTSiDo+0x24a>
	{
		OneWire_Test_Flag_Read = false;
 8007fde:	4b87      	ldr	r3, [pc, #540]	; (80081fc <CheckReWriteTSiDo+0x25c>)
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	701a      	strb	r2, [r3, #0]
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	71bb      	strb	r3, [r7, #6]
 8007fe8:	e0f9      	b.n	80081de <CheckReWriteTSiDo+0x23e>
    	{
    		for(uint8_t j = 0; j < 8; j++)
 8007fea:	2300      	movs	r3, #0
 8007fec:	717b      	strb	r3, [r7, #5]
 8007fee:	e0ef      	b.n	80081d0 <CheckReWriteTSiDo+0x230>
    		{
    			if(TSiDo[i-1].OCD_Pin == OCD_Pin[j])
 8007ff0:	79bb      	ldrb	r3, [r7, #6]
 8007ff2:	1e5a      	subs	r2, r3, #1
 8007ff4:	4982      	ldr	r1, [pc, #520]	; (8008200 <CheckReWriteTSiDo+0x260>)
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	00db      	lsls	r3, r3, #3
 8007ffa:	1a9b      	subs	r3, r3, r2
 8007ffc:	00db      	lsls	r3, r3, #3
 8007ffe:	440b      	add	r3, r1
 8008000:	332e      	adds	r3, #46	; 0x2e
 8008002:	881a      	ldrh	r2, [r3, #0]
 8008004:	797b      	ldrb	r3, [r7, #5]
 8008006:	497f      	ldr	r1, [pc, #508]	; (8008204 <CheckReWriteTSiDo+0x264>)
 8008008:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800800c:	429a      	cmp	r2, r3
 800800e:	f040 80dc 	bne.w	80081ca <CheckReWriteTSiDo+0x22a>
    			{
    				sensors_ReadStratcpad(NO_SKIP_ROM, dt, i);
 8008012:	79bb      	ldrb	r3, [r7, #6]
 8008014:	461a      	mov	r2, r3
 8008016:	497c      	ldr	r1, [pc, #496]	; (8008208 <CheckReWriteTSiDo+0x268>)
 8008018:	2001      	movs	r0, #1
 800801a:	f001 f8d1 	bl	80091c0 <sensors_ReadStratcpad>
    				raw_temper = ((uint16_t)dt[1]<<8)|dt[0];
 800801e:	4b7a      	ldr	r3, [pc, #488]	; (8008208 <CheckReWriteTSiDo+0x268>)
 8008020:	785b      	ldrb	r3, [r3, #1]
 8008022:	021b      	lsls	r3, r3, #8
 8008024:	b21a      	sxth	r2, r3
 8008026:	4b78      	ldr	r3, [pc, #480]	; (8008208 <CheckReWriteTSiDo+0x268>)
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	b21b      	sxth	r3, r3
 800802c:	4313      	orrs	r3, r2
 800802e:	b21b      	sxth	r3, r3
 8008030:	b29a      	uxth	r2, r3
 8008032:	4b76      	ldr	r3, [pc, #472]	; (800820c <CheckReWriteTSiDo+0x26c>)
 8008034:	801a      	strh	r2, [r3, #0]
    				if(sensors_GetSign(raw_temper))
 8008036:	4b75      	ldr	r3, [pc, #468]	; (800820c <CheckReWriteTSiDo+0x26c>)
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	4618      	mov	r0, r3
 800803c:	f001 f902 	bl	8009244 <sensors_GetSign>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <CheckReWriteTSiDo+0xae>
    					c='-';
 8008046:	4b72      	ldr	r3, [pc, #456]	; (8008210 <CheckReWriteTSiDo+0x270>)
 8008048:	222d      	movs	r2, #45	; 0x2d
 800804a:	701a      	strb	r2, [r3, #0]
 800804c:	e002      	b.n	8008054 <CheckReWriteTSiDo+0xb4>
    				else
    					c='+';
 800804e:	4b70      	ldr	r3, [pc, #448]	; (8008210 <CheckReWriteTSiDo+0x270>)
 8008050:	222b      	movs	r2, #43	; 0x2b
 8008052:	701a      	strb	r2, [r3, #0]
    				temper = sensors_Convert(raw_temper);
 8008054:	4b6d      	ldr	r3, [pc, #436]	; (800820c <CheckReWriteTSiDo+0x26c>)
 8008056:	881b      	ldrh	r3, [r3, #0]
 8008058:	4618      	mov	r0, r3
 800805a:	f001 f906 	bl	800926a <sensors_Convert>
 800805e:	eef0 7a40 	vmov.f32	s15, s0
 8008062:	4b6c      	ldr	r3, [pc, #432]	; (8008214 <CheckReWriteTSiDo+0x274>)
 8008064:	edc3 7a00 	vstr	s15, [r3]
    				sprintf(sign_temper, "%c%.2f", c, temper);
 8008068:	4b69      	ldr	r3, [pc, #420]	; (8008210 <CheckReWriteTSiDo+0x270>)
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	461d      	mov	r5, r3
 800806e:	4b69      	ldr	r3, [pc, #420]	; (8008214 <CheckReWriteTSiDo+0x274>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4618      	mov	r0, r3
 8008074:	f7f8 fa78 	bl	8000568 <__aeabi_f2d>
 8008078:	4603      	mov	r3, r0
 800807a:	460c      	mov	r4, r1
 800807c:	e9cd 3400 	strd	r3, r4, [sp]
 8008080:	462a      	mov	r2, r5
 8008082:	4965      	ldr	r1, [pc, #404]	; (8008218 <CheckReWriteTSiDo+0x278>)
 8008084:	4865      	ldr	r0, [pc, #404]	; (800821c <CheckReWriteTSiDo+0x27c>)
 8008086:	f013 f985 	bl	801b394 <siprintf>
    				temper = atof(sign_temper);
 800808a:	4864      	ldr	r0, [pc, #400]	; (800821c <CheckReWriteTSiDo+0x27c>)
 800808c:	f012 fb52 	bl	801a734 <atof>
 8008090:	ec54 3b10 	vmov	r3, r4, d0
 8008094:	4618      	mov	r0, r3
 8008096:	4621      	mov	r1, r4
 8008098:	f7f8 fdb6 	bl	8000c08 <__aeabi_d2f>
 800809c:	4602      	mov	r2, r0
 800809e:	4b5d      	ldr	r3, [pc, #372]	; (8008214 <CheckReWriteTSiDo+0x274>)
 80080a0:	601a      	str	r2, [r3, #0]
    				//--------------------from debug--------------------------
    				HAL_UART_Transmit(&huart3, (uint8_t*)sign_temper, strlen(sign_temper), 0x1000);
 80080a2:	485e      	ldr	r0, [pc, #376]	; (800821c <CheckReWriteTSiDo+0x27c>)
 80080a4:	f7f8 f89e 	bl	80001e4 <strlen>
 80080a8:	4603      	mov	r3, r0
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080b0:	495a      	ldr	r1, [pc, #360]	; (800821c <CheckReWriteTSiDo+0x27c>)
 80080b2:	485b      	ldr	r0, [pc, #364]	; (8008220 <CheckReWriteTSiDo+0x280>)
 80080b4:	f005 fe69 	bl	800dd8a <HAL_UART_Transmit>
    				//--------------------------------------------------------
					if((temper >= TSiDo[i-1].RANGE_TEMP_LOW) && (TSiDo[i-1].RANGE_TEMP_HIGH >= temper))
 80080b8:	4b56      	ldr	r3, [pc, #344]	; (8008214 <CheckReWriteTSiDo+0x274>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4618      	mov	r0, r3
 80080be:	f7f8 fa53 	bl	8000568 <__aeabi_f2d>
 80080c2:	4605      	mov	r5, r0
 80080c4:	460e      	mov	r6, r1
 80080c6:	79bb      	ldrb	r3, [r7, #6]
 80080c8:	1e5a      	subs	r2, r3, #1
 80080ca:	494d      	ldr	r1, [pc, #308]	; (8008200 <CheckReWriteTSiDo+0x260>)
 80080cc:	4613      	mov	r3, r2
 80080ce:	00db      	lsls	r3, r3, #3
 80080d0:	1a9b      	subs	r3, r3, r2
 80080d2:	00db      	lsls	r3, r3, #3
 80080d4:	440b      	add	r3, r1
 80080d6:	3318      	adds	r3, #24
 80080d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80080dc:	461a      	mov	r2, r3
 80080de:	4623      	mov	r3, r4
 80080e0:	4628      	mov	r0, r5
 80080e2:	4631      	mov	r1, r6
 80080e4:	f7f8 fd1e 	bl	8000b24 <__aeabi_dcmpge>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d048      	beq.n	8008180 <CheckReWriteTSiDo+0x1e0>
 80080ee:	79bb      	ldrb	r3, [r7, #6]
 80080f0:	1e5a      	subs	r2, r3, #1
 80080f2:	4943      	ldr	r1, [pc, #268]	; (8008200 <CheckReWriteTSiDo+0x260>)
 80080f4:	4613      	mov	r3, r2
 80080f6:	00db      	lsls	r3, r3, #3
 80080f8:	1a9b      	subs	r3, r3, r2
 80080fa:	00db      	lsls	r3, r3, #3
 80080fc:	440b      	add	r3, r1
 80080fe:	3320      	adds	r3, #32
 8008100:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008104:	4b43      	ldr	r3, [pc, #268]	; (8008214 <CheckReWriteTSiDo+0x274>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4618      	mov	r0, r3
 800810a:	f7f8 fa2d 	bl	8000568 <__aeabi_f2d>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	4620      	mov	r0, r4
 8008114:	4629      	mov	r1, r5
 8008116:	f7f8 fd05 	bl	8000b24 <__aeabi_dcmpge>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d02f      	beq.n	8008180 <CheckReWriteTSiDo+0x1e0>
					{
						Status_OCD[j] = TSiDo[i-1].VAR_OUT;
 8008120:	79bb      	ldrb	r3, [r7, #6]
 8008122:	1e5a      	subs	r2, r3, #1
 8008124:	7979      	ldrb	r1, [r7, #5]
 8008126:	4836      	ldr	r0, [pc, #216]	; (8008200 <CheckReWriteTSiDo+0x260>)
 8008128:	4613      	mov	r3, r2
 800812a:	00db      	lsls	r3, r3, #3
 800812c:	1a9b      	subs	r3, r3, r2
 800812e:	00db      	lsls	r3, r3, #3
 8008130:	4403      	add	r3, r0
 8008132:	332c      	adds	r3, #44	; 0x2c
 8008134:	781a      	ldrb	r2, [r3, #0]
 8008136:	4b3b      	ldr	r3, [pc, #236]	; (8008224 <CheckReWriteTSiDo+0x284>)
 8008138:	545a      	strb	r2, [r3, r1]
						HAL_GPIO_WritePin(TSiDo[i-1].D_OUT, TSiDo[i-1].OCD_Pin, TSiDo[i-1].VAR_OUT);
 800813a:	79bb      	ldrb	r3, [r7, #6]
 800813c:	1e5a      	subs	r2, r3, #1
 800813e:	4930      	ldr	r1, [pc, #192]	; (8008200 <CheckReWriteTSiDo+0x260>)
 8008140:	4613      	mov	r3, r2
 8008142:	00db      	lsls	r3, r3, #3
 8008144:	1a9b      	subs	r3, r3, r2
 8008146:	00db      	lsls	r3, r3, #3
 8008148:	440b      	add	r3, r1
 800814a:	3328      	adds	r3, #40	; 0x28
 800814c:	6818      	ldr	r0, [r3, #0]
 800814e:	79bb      	ldrb	r3, [r7, #6]
 8008150:	1e5a      	subs	r2, r3, #1
 8008152:	492b      	ldr	r1, [pc, #172]	; (8008200 <CheckReWriteTSiDo+0x260>)
 8008154:	4613      	mov	r3, r2
 8008156:	00db      	lsls	r3, r3, #3
 8008158:	1a9b      	subs	r3, r3, r2
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	440b      	add	r3, r1
 800815e:	332e      	adds	r3, #46	; 0x2e
 8008160:	881c      	ldrh	r4, [r3, #0]
 8008162:	79bb      	ldrb	r3, [r7, #6]
 8008164:	1e5a      	subs	r2, r3, #1
 8008166:	4926      	ldr	r1, [pc, #152]	; (8008200 <CheckReWriteTSiDo+0x260>)
 8008168:	4613      	mov	r3, r2
 800816a:	00db      	lsls	r3, r3, #3
 800816c:	1a9b      	subs	r3, r3, r2
 800816e:	00db      	lsls	r3, r3, #3
 8008170:	440b      	add	r3, r1
 8008172:	332c      	adds	r3, #44	; 0x2c
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	4621      	mov	r1, r4
 800817a:	f003 fc59 	bl	800ba30 <HAL_GPIO_WritePin>
 800817e:	e024      	b.n	80081ca <CheckReWriteTSiDo+0x22a>
					}
					else
					{
						Status_OCD[j] =  TSiDo[i-1].VAR_OUT;
 8008180:	79bb      	ldrb	r3, [r7, #6]
 8008182:	1e5a      	subs	r2, r3, #1
 8008184:	7979      	ldrb	r1, [r7, #5]
 8008186:	481e      	ldr	r0, [pc, #120]	; (8008200 <CheckReWriteTSiDo+0x260>)
 8008188:	4613      	mov	r3, r2
 800818a:	00db      	lsls	r3, r3, #3
 800818c:	1a9b      	subs	r3, r3, r2
 800818e:	00db      	lsls	r3, r3, #3
 8008190:	4403      	add	r3, r0
 8008192:	332c      	adds	r3, #44	; 0x2c
 8008194:	781a      	ldrb	r2, [r3, #0]
 8008196:	4b23      	ldr	r3, [pc, #140]	; (8008224 <CheckReWriteTSiDo+0x284>)
 8008198:	545a      	strb	r2, [r3, r1]
						HAL_GPIO_WritePin(TSiDo[i-1].D_OUT, TSiDo[i-1].OCD_Pin, RESET);
 800819a:	79bb      	ldrb	r3, [r7, #6]
 800819c:	1e5a      	subs	r2, r3, #1
 800819e:	4918      	ldr	r1, [pc, #96]	; (8008200 <CheckReWriteTSiDo+0x260>)
 80081a0:	4613      	mov	r3, r2
 80081a2:	00db      	lsls	r3, r3, #3
 80081a4:	1a9b      	subs	r3, r3, r2
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	440b      	add	r3, r1
 80081aa:	3328      	adds	r3, #40	; 0x28
 80081ac:	6818      	ldr	r0, [r3, #0]
 80081ae:	79bb      	ldrb	r3, [r7, #6]
 80081b0:	1e5a      	subs	r2, r3, #1
 80081b2:	4913      	ldr	r1, [pc, #76]	; (8008200 <CheckReWriteTSiDo+0x260>)
 80081b4:	4613      	mov	r3, r2
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	1a9b      	subs	r3, r3, r2
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	440b      	add	r3, r1
 80081be:	332e      	adds	r3, #46	; 0x2e
 80081c0:	881b      	ldrh	r3, [r3, #0]
 80081c2:	2200      	movs	r2, #0
 80081c4:	4619      	mov	r1, r3
 80081c6:	f003 fc33 	bl	800ba30 <HAL_GPIO_WritePin>
    		for(uint8_t j = 0; j < 8; j++)
 80081ca:	797b      	ldrb	r3, [r7, #5]
 80081cc:	3301      	adds	r3, #1
 80081ce:	717b      	strb	r3, [r7, #5]
 80081d0:	797b      	ldrb	r3, [r7, #5]
 80081d2:	2b07      	cmp	r3, #7
 80081d4:	f67f af0c 	bls.w	8007ff0 <CheckReWriteTSiDo+0x50>
    	for(uint8_t i = 1; i <= Dev_Cnt; i++)
 80081d8:	79bb      	ldrb	r3, [r7, #6]
 80081da:	3301      	adds	r3, #1
 80081dc:	71bb      	strb	r3, [r7, #6]
 80081de:	4b06      	ldr	r3, [pc, #24]	; (80081f8 <CheckReWriteTSiDo+0x258>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	79ba      	ldrb	r2, [r7, #6]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	f67f af00 	bls.w	8007fea <CheckReWriteTSiDo+0x4a>
					}
    			}
    		}
    	}
	}
}
 80081ea:	bf00      	nop
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081f2:	bf00      	nop
 80081f4:	2000032a 	.word	0x2000032a
 80081f8:	200013a8 	.word	0x200013a8
 80081fc:	2000032b 	.word	0x2000032b
 8008200:	20000628 	.word	0x20000628
 8008204:	20000060 	.word	0x20000060
 8008208:	20001384 	.word	0x20001384
 800820c:	2000136c 	.word	0x2000136c
 8008210:	20001380 	.word	0x20001380
 8008214:	2000139c 	.word	0x2000139c
 8008218:	08020508 	.word	0x08020508
 800821c:	20001370 	.word	0x20001370
 8008220:	20000c38 	.word	0x20000c38
 8008224:	2000049c 	.word	0x2000049c

08008228 <Conversion_ADC1>:
//Функция преобразования данных АЦП
//Принимает "ADC_value" - значение АЦП
//Принимает "item" - номер аналогового входа АЦП
//Возвращает преобразованное значение в зависимости от конфигурации аналогового входа
double Conversion_ADC1(uint16_t ADC_value, uint8_t item)
{
 8008228:	b590      	push	{r4, r7, lr}
 800822a:	b087      	sub	sp, #28
 800822c:	af00      	add	r7, sp, #0
 800822e:	4603      	mov	r3, r0
 8008230:	460a      	mov	r2, r1
 8008232:	80fb      	strh	r3, [r7, #6]
 8008234:	4613      	mov	r3, r2
 8008236:	717b      	strb	r3, [r7, #5]
	double Value = 0;
 8008238:	f04f 0300 	mov.w	r3, #0
 800823c:	f04f 0400 	mov.w	r4, #0
 8008240:	e9c7 3404 	strd	r3, r4, [r7, #16]
	const double Resolution = 0.0008056640625;
 8008244:	a424      	add	r4, pc, #144	; (adr r4, 80082d8 <Conversion_ADC1+0xb0>)
 8008246:	e9d4 3400 	ldrd	r3, r4, [r4]
 800824a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	Value = (ADC_value * Resolution);
 800824e:	88fb      	ldrh	r3, [r7, #6]
 8008250:	4618      	mov	r0, r3
 8008252:	f7f8 f977 	bl	8000544 <__aeabi_i2d>
 8008256:	4603      	mov	r3, r0
 8008258:	460c      	mov	r4, r1
 800825a:	461a      	mov	r2, r3
 800825c:	4623      	mov	r3, r4
 800825e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008262:	f7f8 f9d9 	bl	8000618 <__aeabi_dmul>
 8008266:	4603      	mov	r3, r0
 8008268:	460c      	mov	r4, r1
 800826a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	(AiDo[item].inputFlag == true) ? (Value = (Value * 3.2323232323232)) : (Value = (Value / 60));
 800826e:	797a      	ldrb	r2, [r7, #5]
 8008270:	4917      	ldr	r1, [pc, #92]	; (80082d0 <Conversion_ADC1+0xa8>)
 8008272:	4613      	mov	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4413      	add	r3, r2
 8008278:	00db      	lsls	r3, r3, #3
 800827a:	440b      	add	r3, r1
 800827c:	3320      	adds	r3, #32
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00b      	beq.n	800829c <Conversion_ADC1+0x74>
 8008284:	a310      	add	r3, pc, #64	; (adr r3, 80082c8 <Conversion_ADC1+0xa0>)
 8008286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800828e:	f7f8 f9c3 	bl	8000618 <__aeabi_dmul>
 8008292:	4603      	mov	r3, r0
 8008294:	460c      	mov	r4, r1
 8008296:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800829a:	e00a      	b.n	80082b2 <Conversion_ADC1+0x8a>
 800829c:	f04f 0200 	mov.w	r2, #0
 80082a0:	4b0c      	ldr	r3, [pc, #48]	; (80082d4 <Conversion_ADC1+0xac>)
 80082a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80082a6:	f7f8 fae1 	bl	800086c <__aeabi_ddiv>
 80082aa:	4603      	mov	r3, r0
 80082ac:	460c      	mov	r4, r1
 80082ae:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return Value;
 80082b2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80082b6:	ec44 3b17 	vmov	d7, r3, r4
}
 80082ba:	eeb0 0a47 	vmov.f32	s0, s14
 80082be:	eef0 0a67 	vmov.f32	s1, s15
 80082c2:	371c      	adds	r7, #28
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd90      	pop	{r4, r7, pc}
 80082c8:	48676ee8 	.word	0x48676ee8
 80082cc:	4009dbcc 	.word	0x4009dbcc
 80082d0:	200006b8 	.word	0x200006b8
 80082d4:	404e0000 	.word	0x404e0000
 80082d8:	66666666 	.word	0x66666666
 80082dc:	3f4a6666 	.word	0x3f4a6666

080082e0 <set_dido>:
//Принимает "D_IN" - строку с номером цифрового входа
//Принимает "VAR_IN" - переменная состояния входа
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_dido(char *D_IN, uint8_t VAR_IN, char *D_OUT, uint8_t VAR_OUT)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b0ae      	sub	sp, #184	; 0xb8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	607a      	str	r2, [r7, #4]
 80082ea:	461a      	mov	r2, r3
 80082ec:	460b      	mov	r3, r1
 80082ee:	72fb      	strb	r3, [r7, #11]
 80082f0:	4613      	mov	r3, r2
 80082f2:	72bb      	strb	r3, [r7, #10]
	char VHOD[8][10] = {"VHOD1", "VHOD2", "VHOD3", "VHOD4", "VHOD5", "VHOD6", "VHOD7", "VHOD8"};
 80082f4:	4acd      	ldr	r2, [pc, #820]	; (800862c <set_dido+0x34c>)
 80082f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80082fa:	4611      	mov	r1, r2
 80082fc:	2250      	movs	r2, #80	; 0x50
 80082fe:	4618      	mov	r0, r3
 8008300:	f012 fa87 	bl	801a812 <memcpy>
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 8008304:	4aca      	ldr	r2, [pc, #808]	; (8008630 <set_dido+0x350>)
 8008306:	f107 0310 	add.w	r3, r7, #16
 800830a:	4611      	mov	r1, r2
 800830c:	2250      	movs	r2, #80	; 0x50
 800830e:	4618      	mov	r0, r3
 8008310:	f012 fa7f 	bl	801a812 <memcpy>

	for(int i = 0; i < 8; i++)
 8008314:	2300      	movs	r3, #0
 8008316:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800831a:	e17e      	b.n	800861a <set_dido+0x33a>
	{
		if(strcmp(D_IN, VHOD[i]) == 0)
 800831c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8008320:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008324:	4613      	mov	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4413      	add	r3, r2
 800832a:	005b      	lsls	r3, r3, #1
 800832c:	440b      	add	r3, r1
 800832e:	4619      	mov	r1, r3
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f7f7 ff4d 	bl	80001d0 <strcmp>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	f040 8169 	bne.w	8008610 <set_dido+0x330>
		{
			if(DiDo[i].clrFlag != false)
 800833e:	49bd      	ldr	r1, [pc, #756]	; (8008634 <set_dido+0x354>)
 8008340:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008344:	4613      	mov	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	440b      	add	r3, r1
 800834e:	3310      	adds	r3, #16
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d017      	beq.n	8008386 <set_dido+0xa6>
				HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, RESET);
 8008356:	49b7      	ldr	r1, [pc, #732]	; (8008634 <set_dido+0x354>)
 8008358:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800835c:	4613      	mov	r3, r2
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4413      	add	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	440b      	add	r3, r1
 8008366:	3308      	adds	r3, #8
 8008368:	6818      	ldr	r0, [r3, #0]
 800836a:	49b2      	ldr	r1, [pc, #712]	; (8008634 <set_dido+0x354>)
 800836c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008370:	4613      	mov	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	440b      	add	r3, r1
 800837a:	330e      	adds	r3, #14
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	2200      	movs	r2, #0
 8008380:	4619      	mov	r1, r3
 8008382:	f003 fb55 	bl	800ba30 <HAL_GPIO_WritePin>
			DiDo[i].clrFlag = true;
 8008386:	49ab      	ldr	r1, [pc, #684]	; (8008634 <set_dido+0x354>)
 8008388:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800838c:	4613      	mov	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	440b      	add	r3, r1
 8008396:	3310      	adds	r3, #16
 8008398:	2201      	movs	r2, #1
 800839a:	701a      	strb	r2, [r3, #0]
			DiDo[i].D_IN = pVHOD[i];
 800839c:	4aa6      	ldr	r2, [pc, #664]	; (8008638 <set_dido+0x358>)
 800839e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80083a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80083a6:	48a3      	ldr	r0, [pc, #652]	; (8008634 <set_dido+0x354>)
 80083a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083ac:	4613      	mov	r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	4413      	add	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4403      	add	r3, r0
 80083b6:	6019      	str	r1, [r3, #0]
			DiDo[i].VAR_IN = VAR_IN;
 80083b8:	499e      	ldr	r1, [pc, #632]	; (8008634 <set_dido+0x354>)
 80083ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083be:	4613      	mov	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	440b      	add	r3, r1
 80083c8:	3304      	adds	r3, #4
 80083ca:	7afa      	ldrb	r2, [r7, #11]
 80083cc:	701a      	strb	r2, [r3, #0]
			DiDo[i].DIN_Pin = DIN_Pin[i];
 80083ce:	4a9b      	ldr	r2, [pc, #620]	; (800863c <set_dido+0x35c>)
 80083d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80083d4:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80083d8:	4996      	ldr	r1, [pc, #600]	; (8008634 <set_dido+0x354>)
 80083da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083de:	4613      	mov	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	440b      	add	r3, r1
 80083e8:	3306      	adds	r3, #6
 80083ea:	4602      	mov	r2, r0
 80083ec:	801a      	strh	r2, [r3, #0]
			for(int j = 0; j < 8; j++)
 80083ee:	2300      	movs	r3, #0
 80083f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083f4:	e104      	b.n	8008600 <set_dido+0x320>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 80083f6:	f107 0110 	add.w	r1, r7, #16
 80083fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80083fe:	4613      	mov	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	005b      	lsls	r3, r3, #1
 8008406:	440b      	add	r3, r1
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f7f7 fee0 	bl	80001d0 <strcmp>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	f040 80ef 	bne.w	80085f6 <set_dido+0x316>
				{
					DiDo[i].D_OUT = pVIHOD[j];
 8008418:	4a89      	ldr	r2, [pc, #548]	; (8008640 <set_dido+0x360>)
 800841a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800841e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008422:	4884      	ldr	r0, [pc, #528]	; (8008634 <set_dido+0x354>)
 8008424:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008428:	4613      	mov	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4403      	add	r3, r0
 8008432:	3308      	adds	r3, #8
 8008434:	6019      	str	r1, [r3, #0]
					DiDo[i].VAR_OUT = VAR_OUT;
 8008436:	497f      	ldr	r1, [pc, #508]	; (8008634 <set_dido+0x354>)
 8008438:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800843c:	4613      	mov	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	440b      	add	r3, r1
 8008446:	330c      	adds	r3, #12
 8008448:	7aba      	ldrb	r2, [r7, #10]
 800844a:	701a      	strb	r2, [r3, #0]
					DiDo[i].OCD_Pin = OCD_Pin[j];
 800844c:	4a7d      	ldr	r2, [pc, #500]	; (8008644 <set_dido+0x364>)
 800844e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008452:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8008456:	4977      	ldr	r1, [pc, #476]	; (8008634 <set_dido+0x354>)
 8008458:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800845c:	4613      	mov	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	440b      	add	r3, r1
 8008466:	330e      	adds	r3, #14
 8008468:	4602      	mov	r2, r0
 800846a:	801a      	strh	r2, [r3, #0]
					if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) != VAR_IN)	//(Если Вход1 == 0 то Выход3 = 1) Инверсная логика на входах оптопар
 800846c:	4971      	ldr	r1, [pc, #452]	; (8008634 <set_dido+0x354>)
 800846e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008472:	4613      	mov	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	440b      	add	r3, r1
 800847c:	6818      	ldr	r0, [r3, #0]
 800847e:	496d      	ldr	r1, [pc, #436]	; (8008634 <set_dido+0x354>)
 8008480:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008484:	4613      	mov	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	4413      	add	r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	440b      	add	r3, r1
 800848e:	3306      	adds	r3, #6
 8008490:	881b      	ldrh	r3, [r3, #0]
 8008492:	4619      	mov	r1, r3
 8008494:	f003 fab4 	bl	800ba00 <HAL_GPIO_ReadPin>
 8008498:	4603      	mov	r3, r0
 800849a:	461a      	mov	r2, r3
 800849c:	7afb      	ldrb	r3, [r7, #11]
 800849e:	4293      	cmp	r3, r2
 80084a0:	d021      	beq.n	80084e6 <set_dido+0x206>
					{
						Status_OCD[j] = VAR_OUT;
 80084a2:	4a69      	ldr	r2, [pc, #420]	; (8008648 <set_dido+0x368>)
 80084a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80084a8:	4413      	add	r3, r2
 80084aa:	7aba      	ldrb	r2, [r7, #10]
 80084ac:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, VAR_OUT);
 80084ae:	4961      	ldr	r1, [pc, #388]	; (8008634 <set_dido+0x354>)
 80084b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	440b      	add	r3, r1
 80084be:	3308      	adds	r3, #8
 80084c0:	6818      	ldr	r0, [r3, #0]
 80084c2:	495c      	ldr	r1, [pc, #368]	; (8008634 <set_dido+0x354>)
 80084c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084c8:	4613      	mov	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	440b      	add	r3, r1
 80084d2:	330e      	adds	r3, #14
 80084d4:	881b      	ldrh	r3, [r3, #0]
 80084d6:	7aba      	ldrb	r2, [r7, #10]
 80084d8:	4619      	mov	r1, r3
 80084da:	f003 faa9 	bl	800ba30 <HAL_GPIO_WritePin>
						SEND_str("success...\n");
 80084de:	485b      	ldr	r0, [pc, #364]	; (800864c <set_dido+0x36c>)
 80084e0:	f7fa fb64 	bl	8002bac <SEND_str>
 80084e4:	e047      	b.n	8008576 <set_dido+0x296>
					}
					else if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) == VAR_IN)
 80084e6:	4953      	ldr	r1, [pc, #332]	; (8008634 <set_dido+0x354>)
 80084e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084ec:	4613      	mov	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4413      	add	r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	440b      	add	r3, r1
 80084f6:	6818      	ldr	r0, [r3, #0]
 80084f8:	494e      	ldr	r1, [pc, #312]	; (8008634 <set_dido+0x354>)
 80084fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084fe:	4613      	mov	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	440b      	add	r3, r1
 8008508:	3306      	adds	r3, #6
 800850a:	881b      	ldrh	r3, [r3, #0]
 800850c:	4619      	mov	r1, r3
 800850e:	f003 fa77 	bl	800ba00 <HAL_GPIO_ReadPin>
 8008512:	4603      	mov	r3, r0
 8008514:	461a      	mov	r2, r3
 8008516:	7afb      	ldrb	r3, [r7, #11]
 8008518:	4293      	cmp	r3, r2
 800851a:	d12c      	bne.n	8008576 <set_dido+0x296>
					{
						Status_OCD[j] = !VAR_OUT;
 800851c:	7abb      	ldrb	r3, [r7, #10]
 800851e:	2b00      	cmp	r3, #0
 8008520:	bf0c      	ite	eq
 8008522:	2301      	moveq	r3, #1
 8008524:	2300      	movne	r3, #0
 8008526:	b2db      	uxtb	r3, r3
 8008528:	4619      	mov	r1, r3
 800852a:	4a47      	ldr	r2, [pc, #284]	; (8008648 <set_dido+0x368>)
 800852c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008530:	4413      	add	r3, r2
 8008532:	460a      	mov	r2, r1
 8008534:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, !VAR_OUT);
 8008536:	493f      	ldr	r1, [pc, #252]	; (8008634 <set_dido+0x354>)
 8008538:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800853c:	4613      	mov	r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4413      	add	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	440b      	add	r3, r1
 8008546:	3308      	adds	r3, #8
 8008548:	6818      	ldr	r0, [r3, #0]
 800854a:	493a      	ldr	r1, [pc, #232]	; (8008634 <set_dido+0x354>)
 800854c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008550:	4613      	mov	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	440b      	add	r3, r1
 800855a:	330e      	adds	r3, #14
 800855c:	8819      	ldrh	r1, [r3, #0]
 800855e:	7abb      	ldrb	r3, [r7, #10]
 8008560:	2b00      	cmp	r3, #0
 8008562:	bf0c      	ite	eq
 8008564:	2301      	moveq	r3, #1
 8008566:	2300      	movne	r3, #0
 8008568:	b2db      	uxtb	r3, r3
 800856a:	461a      	mov	r2, r3
 800856c:	f003 fa60 	bl	800ba30 <HAL_GPIO_WritePin>
						SEND_str("miss...\n");
 8008570:	4837      	ldr	r0, [pc, #220]	; (8008650 <set_dido+0x370>)
 8008572:	f7fa fb1b 	bl	8002bac <SEND_str>
					}

					//For Debug:
					//------------------------------------------------
					if(DiDo[i].D_IN == VHOD1)
 8008576:	492f      	ldr	r1, [pc, #188]	; (8008634 <set_dido+0x354>)
 8008578:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800857c:	4613      	mov	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4413      	add	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	440b      	add	r3, r1
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a32      	ldr	r2, [pc, #200]	; (8008654 <set_dido+0x374>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d102      	bne.n	8008594 <set_dido+0x2b4>
						SEND_str("1 - success...\n");
 800858e:	4832      	ldr	r0, [pc, #200]	; (8008658 <set_dido+0x378>)
 8008590:	f7fa fb0c 	bl	8002bac <SEND_str>
					if(DiDo[i].VAR_IN == VAR_IN)
 8008594:	4927      	ldr	r1, [pc, #156]	; (8008634 <set_dido+0x354>)
 8008596:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800859a:	4613      	mov	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4413      	add	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	440b      	add	r3, r1
 80085a4:	3304      	adds	r3, #4
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	7afa      	ldrb	r2, [r7, #11]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d102      	bne.n	80085b4 <set_dido+0x2d4>
						SEND_str("2 - success...\n");
 80085ae:	482b      	ldr	r0, [pc, #172]	; (800865c <set_dido+0x37c>)
 80085b0:	f7fa fafc 	bl	8002bac <SEND_str>
					if(DiDo[i].D_OUT == VIHOD3)
 80085b4:	491f      	ldr	r1, [pc, #124]	; (8008634 <set_dido+0x354>)
 80085b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80085ba:	4613      	mov	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	440b      	add	r3, r1
 80085c4:	3308      	adds	r3, #8
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a25      	ldr	r2, [pc, #148]	; (8008660 <set_dido+0x380>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d102      	bne.n	80085d4 <set_dido+0x2f4>
						SEND_str("3 - success...\n");
 80085ce:	4825      	ldr	r0, [pc, #148]	; (8008664 <set_dido+0x384>)
 80085d0:	f7fa faec 	bl	8002bac <SEND_str>
					if(DiDo[i].VAR_OUT == VAR_OUT)
 80085d4:	4917      	ldr	r1, [pc, #92]	; (8008634 <set_dido+0x354>)
 80085d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80085da:	4613      	mov	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	440b      	add	r3, r1
 80085e4:	330c      	adds	r3, #12
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	7aba      	ldrb	r2, [r7, #10]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d10e      	bne.n	800860c <set_dido+0x32c>
						SEND_str("4 - success...\n");
 80085ee:	481e      	ldr	r0, [pc, #120]	; (8008668 <set_dido+0x388>)
 80085f0:	f7fa fadc 	bl	8002bac <SEND_str>
					//------------------------------------------------

					break;
 80085f4:	e00a      	b.n	800860c <set_dido+0x32c>
			for(int j = 0; j < 8; j++)
 80085f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80085fa:	3301      	adds	r3, #1
 80085fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008600:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008604:	2b07      	cmp	r3, #7
 8008606:	f77f aef6 	ble.w	80083f6 <set_dido+0x116>
				}
			}
			break;
 800860a:	e00b      	b.n	8008624 <set_dido+0x344>
					break;
 800860c:	bf00      	nop
			break;
 800860e:	e009      	b.n	8008624 <set_dido+0x344>
	for(int i = 0; i < 8; i++)
 8008610:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008614:	3301      	adds	r3, #1
 8008616:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800861a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800861e:	2b07      	cmp	r3, #7
 8008620:	f77f ae7c 	ble.w	800831c <set_dido+0x3c>
		}
	}
}
 8008624:	bf00      	nop
 8008626:	37b8      	adds	r7, #184	; 0xb8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	08020568 	.word	0x08020568
 8008630:	080205b8 	.word	0x080205b8
 8008634:	20000758 	.word	0x20000758
 8008638:	20000010 	.word	0x20000010
 800863c:	20000050 	.word	0x20000050
 8008640:	20000030 	.word	0x20000030
 8008644:	20000060 	.word	0x20000060
 8008648:	2000049c 	.word	0x2000049c
 800864c:	08020510 	.word	0x08020510
 8008650:	0802051c 	.word	0x0802051c
 8008654:	40020c00 	.word	0x40020c00
 8008658:	08020528 	.word	0x08020528
 800865c:	08020538 	.word	0x08020538
 8008660:	40020400 	.word	0x40020400
 8008664:	08020548 	.word	0x08020548
 8008668:	08020558 	.word	0x08020558

0800866c <set_aido>:
//Принимает "RANGE_LOW" - нижний предел значений
//Принимает "RANGE_HIGH" - верхний предел значений
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_aido(char *A_IN, double RANGE_LOW, double RANGE_HIGH, char *D_OUT, uint8_t VAR_OUT)
{
 800866c:	b5b0      	push	{r4, r5, r7, lr}
 800866e:	b0b2      	sub	sp, #200	; 0xc8
 8008670:	af00      	add	r7, sp, #0
 8008672:	61f8      	str	r0, [r7, #28]
 8008674:	ed87 0b04 	vstr	d0, [r7, #16]
 8008678:	ed87 1b02 	vstr	d1, [r7, #8]
 800867c:	61b9      	str	r1, [r7, #24]
 800867e:	4613      	mov	r3, r2
 8008680:	71fb      	strb	r3, [r7, #7]
	char VHOD[4][10] = {"VHOD1", "VHOD2", "VHOD3", "VHOD4"};
 8008682:	4b96      	ldr	r3, [pc, #600]	; (80088dc <set_aido+0x270>)
 8008684:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8008688:	461d      	mov	r5, r3
 800868a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800868c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800868e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008692:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008696:	e884 0003 	stmia.w	r4, {r0, r1}
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 800869a:	4a91      	ldr	r2, [pc, #580]	; (80088e0 <set_aido+0x274>)
 800869c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80086a0:	4611      	mov	r1, r2
 80086a2:	2250      	movs	r2, #80	; 0x50
 80086a4:	4618      	mov	r0, r3
 80086a6:	f012 f8b4 	bl	801a812 <memcpy>

	uint8_t pVHOD[4] = {ADC1_IN3, ADC1_IN4, ADC1_IN5, ADC1_IN6};
 80086aa:	4b8e      	ldr	r3, [pc, #568]	; (80088e4 <set_aido+0x278>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	647b      	str	r3, [r7, #68]	; 0x44

	for(int i = 0; i < 4; i++)
 80086b0:	2300      	movs	r3, #0
 80086b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80086b6:	e108      	b.n	80088ca <set_aido+0x25e>
	{
		if(strcmp(A_IN, VHOD[i]) == 0)
 80086b8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80086bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80086c0:	4613      	mov	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	005b      	lsls	r3, r3, #1
 80086c8:	440b      	add	r3, r1
 80086ca:	4619      	mov	r1, r3
 80086cc:	69f8      	ldr	r0, [r7, #28]
 80086ce:	f7f7 fd7f 	bl	80001d0 <strcmp>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f040 80f3 	bne.w	80088c0 <set_aido+0x254>
		{
			if(AiDo[i].clrFlag != false)
 80086da:	4983      	ldr	r1, [pc, #524]	; (80088e8 <set_aido+0x27c>)
 80086dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80086e0:	4613      	mov	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	00db      	lsls	r3, r3, #3
 80086e8:	440b      	add	r3, r1
 80086ea:	3321      	adds	r3, #33	; 0x21
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d017      	beq.n	8008722 <set_aido+0xb6>
				HAL_GPIO_WritePin(AiDo[i].D_OUT, AiDo[i].OCD_Pin, RESET);
 80086f2:	497d      	ldr	r1, [pc, #500]	; (80088e8 <set_aido+0x27c>)
 80086f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80086f8:	4613      	mov	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	00db      	lsls	r3, r3, #3
 8008700:	440b      	add	r3, r1
 8008702:	3318      	adds	r3, #24
 8008704:	6818      	ldr	r0, [r3, #0]
 8008706:	4978      	ldr	r1, [pc, #480]	; (80088e8 <set_aido+0x27c>)
 8008708:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800870c:	4613      	mov	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4413      	add	r3, r2
 8008712:	00db      	lsls	r3, r3, #3
 8008714:	440b      	add	r3, r1
 8008716:	331e      	adds	r3, #30
 8008718:	881b      	ldrh	r3, [r3, #0]
 800871a:	2200      	movs	r2, #0
 800871c:	4619      	mov	r1, r3
 800871e:	f003 f987 	bl	800ba30 <HAL_GPIO_WritePin>

			AiDo[i].clrFlag = true;
 8008722:	4971      	ldr	r1, [pc, #452]	; (80088e8 <set_aido+0x27c>)
 8008724:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008728:	4613      	mov	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4413      	add	r3, r2
 800872e:	00db      	lsls	r3, r3, #3
 8008730:	440b      	add	r3, r1
 8008732:	3321      	adds	r3, #33	; 0x21
 8008734:	2201      	movs	r2, #1
 8008736:	701a      	strb	r2, [r3, #0]
			AiDo[i].A_IN = pVHOD[i];
 8008738:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800873c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008740:	4413      	add	r3, r2
 8008742:	7818      	ldrb	r0, [r3, #0]
 8008744:	4968      	ldr	r1, [pc, #416]	; (80088e8 <set_aido+0x27c>)
 8008746:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800874a:	4613      	mov	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	4413      	add	r3, r2
 8008750:	00db      	lsls	r3, r3, #3
 8008752:	440b      	add	r3, r1
 8008754:	4602      	mov	r2, r0
 8008756:	701a      	strb	r2, [r3, #0]
			AiDo[i].RANGE_LOW = RANGE_LOW;
 8008758:	4963      	ldr	r1, [pc, #396]	; (80088e8 <set_aido+0x27c>)
 800875a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800875e:	4613      	mov	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4413      	add	r3, r2
 8008764:	00db      	lsls	r3, r3, #3
 8008766:	440b      	add	r3, r1
 8008768:	f103 0208 	add.w	r2, r3, #8
 800876c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008770:	e9c2 3400 	strd	r3, r4, [r2]
			AiDo[i].RANGE_HIGH = RANGE_HIGH;
 8008774:	495c      	ldr	r1, [pc, #368]	; (80088e8 <set_aido+0x27c>)
 8008776:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800877a:	4613      	mov	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	00db      	lsls	r3, r3, #3
 8008782:	440b      	add	r3, r1
 8008784:	f103 0210 	add.w	r2, r3, #16
 8008788:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800878c:	e9c2 3400 	strd	r3, r4, [r2]
			//DiDo[i].DIN_Pin = DIN_Pin[i];
			for(int j = 0; j < 8; j++)
 8008790:	2300      	movs	r3, #0
 8008792:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008796:	e08d      	b.n	80088b4 <set_aido+0x248>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 8008798:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800879c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80087a0:	4613      	mov	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	005b      	lsls	r3, r3, #1
 80087a8:	440b      	add	r3, r1
 80087aa:	4619      	mov	r1, r3
 80087ac:	69b8      	ldr	r0, [r7, #24]
 80087ae:	f7f7 fd0f 	bl	80001d0 <strcmp>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d178      	bne.n	80088aa <set_aido+0x23e>
				{
					AiDo[i].D_OUT = pVIHOD[j];
 80087b8:	4a4c      	ldr	r2, [pc, #304]	; (80088ec <set_aido+0x280>)
 80087ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80087be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80087c2:	4849      	ldr	r0, [pc, #292]	; (80088e8 <set_aido+0x27c>)
 80087c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80087c8:	4613      	mov	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	00db      	lsls	r3, r3, #3
 80087d0:	4403      	add	r3, r0
 80087d2:	3318      	adds	r3, #24
 80087d4:	6019      	str	r1, [r3, #0]
					AiDo[i].VAR_OUT = VAR_OUT;
 80087d6:	4944      	ldr	r1, [pc, #272]	; (80088e8 <set_aido+0x27c>)
 80087d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80087dc:	4613      	mov	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	4413      	add	r3, r2
 80087e2:	00db      	lsls	r3, r3, #3
 80087e4:	440b      	add	r3, r1
 80087e6:	331c      	adds	r3, #28
 80087e8:	79fa      	ldrb	r2, [r7, #7]
 80087ea:	701a      	strb	r2, [r3, #0]
					AiDo[i].OCD_Pin = OCD_Pin[j];
 80087ec:	4a40      	ldr	r2, [pc, #256]	; (80088f0 <set_aido+0x284>)
 80087ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80087f2:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80087f6:	493c      	ldr	r1, [pc, #240]	; (80088e8 <set_aido+0x27c>)
 80087f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80087fc:	4613      	mov	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	440b      	add	r3, r1
 8008806:	331e      	adds	r3, #30
 8008808:	4602      	mov	r2, r0
 800880a:	801a      	strh	r2, [r3, #0]

					//For Debug:
					//------------------------------------------------
					char Buff[32];
					SEND_str("SET VALUE: ");
 800880c:	4839      	ldr	r0, [pc, #228]	; (80088f4 <set_aido+0x288>)
 800880e:	f7fa f9cd 	bl	8002bac <SEND_str>
					sprintf(Buff, "%.3f", adcValue[i]);
 8008812:	4a39      	ldr	r2, [pc, #228]	; (80088f8 <set_aido+0x28c>)
 8008814:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008818:	00db      	lsls	r3, r3, #3
 800881a:	4413      	add	r3, r2
 800881c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008820:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008824:	461a      	mov	r2, r3
 8008826:	4623      	mov	r3, r4
 8008828:	4934      	ldr	r1, [pc, #208]	; (80088fc <set_aido+0x290>)
 800882a:	f012 fdb3 	bl	801b394 <siprintf>
					SEND_str(Buff);
 800882e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008832:	4618      	mov	r0, r3
 8008834:	f7fa f9ba 	bl	8002bac <SEND_str>
					SEND_str("\nRANGE_LOW: ");
 8008838:	4831      	ldr	r0, [pc, #196]	; (8008900 <set_aido+0x294>)
 800883a:	f7fa f9b7 	bl	8002bac <SEND_str>
					sprintf(Buff, "%.3f", AiDo[i].RANGE_LOW);
 800883e:	492a      	ldr	r1, [pc, #168]	; (80088e8 <set_aido+0x27c>)
 8008840:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008844:	4613      	mov	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	00db      	lsls	r3, r3, #3
 800884c:	440b      	add	r3, r1
 800884e:	3308      	adds	r3, #8
 8008850:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008854:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008858:	461a      	mov	r2, r3
 800885a:	4623      	mov	r3, r4
 800885c:	4927      	ldr	r1, [pc, #156]	; (80088fc <set_aido+0x290>)
 800885e:	f012 fd99 	bl	801b394 <siprintf>
					SEND_str(Buff);
 8008862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008866:	4618      	mov	r0, r3
 8008868:	f7fa f9a0 	bl	8002bac <SEND_str>
					SEND_str("\nRANGE_HIGH: ");
 800886c:	4825      	ldr	r0, [pc, #148]	; (8008904 <set_aido+0x298>)
 800886e:	f7fa f99d 	bl	8002bac <SEND_str>
					sprintf(Buff, "%.3f", AiDo[i].RANGE_HIGH);
 8008872:	491d      	ldr	r1, [pc, #116]	; (80088e8 <set_aido+0x27c>)
 8008874:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008878:	4613      	mov	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4413      	add	r3, r2
 800887e:	00db      	lsls	r3, r3, #3
 8008880:	440b      	add	r3, r1
 8008882:	3310      	adds	r3, #16
 8008884:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008888:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800888c:	461a      	mov	r2, r3
 800888e:	4623      	mov	r3, r4
 8008890:	491a      	ldr	r1, [pc, #104]	; (80088fc <set_aido+0x290>)
 8008892:	f012 fd7f 	bl	801b394 <siprintf>
					SEND_str(Buff);
 8008896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800889a:	4618      	mov	r0, r3
 800889c:	f7fa f986 	bl	8002bac <SEND_str>
					SEND_str("\n");
 80088a0:	4819      	ldr	r0, [pc, #100]	; (8008908 <set_aido+0x29c>)
 80088a2:	f7fa f983 	bl	8002bac <SEND_str>
					//------------------------------------------------

					break;
 80088a6:	bf00      	nop
				}
			}
			break;
 80088a8:	e014      	b.n	80088d4 <set_aido+0x268>
			for(int j = 0; j < 8; j++)
 80088aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80088ae:	3301      	adds	r3, #1
 80088b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80088b8:	2b07      	cmp	r3, #7
 80088ba:	f77f af6d 	ble.w	8008798 <set_aido+0x12c>
			break;
 80088be:	e009      	b.n	80088d4 <set_aido+0x268>
	for(int i = 0; i < 4; i++)
 80088c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80088c4:	3301      	adds	r3, #1
 80088c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80088ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80088ce:	2b03      	cmp	r3, #3
 80088d0:	f77f aef2 	ble.w	80086b8 <set_aido+0x4c>
		}
	}
}
 80088d4:	bf00      	nop
 80088d6:	37c8      	adds	r7, #200	; 0xc8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bdb0      	pop	{r4, r5, r7, pc}
 80088dc:	08020640 	.word	0x08020640
 80088e0:	080205b8 	.word	0x080205b8
 80088e4:	08020668 	.word	0x08020668
 80088e8:	200006b8 	.word	0x200006b8
 80088ec:	20000030 	.word	0x20000030
 80088f0:	20000060 	.word	0x20000060
 80088f4:	08020608 	.word	0x08020608
 80088f8:	20000308 	.word	0x20000308
 80088fc:	08020614 	.word	0x08020614
 8008900:	0802061c 	.word	0x0802061c
 8008904:	0802062c 	.word	0x0802062c
 8008908:	0802063c 	.word	0x0802063c

0800890c <set_pwm>:
//Задать сигнал ШИМ на одном выходе
//Принимает "PWM_OUT" - строку с номером ШИМ выхода
//Принимает "D_CYCLE" - коэффициент заполнения ШИМ
void set_pwm(char *PWM_OUT, uint32_t D_CYCLE)
{
 800890c:	b5b0      	push	{r4, r5, r7, lr}
 800890e:	b094      	sub	sp, #80	; 0x50
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
	char PVIHOD[4][5] = {"PWM1", "PWM2", "PWM3", "PWM4"};
 8008916:	4b4b      	ldr	r3, [pc, #300]	; (8008a44 <set_pwm+0x138>)
 8008918:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800891c:	461d      	mov	r5, r3
 800891e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008922:	682b      	ldr	r3, [r5, #0]
 8008924:	6023      	str	r3, [r4, #0]
	uint32_t PWM_Channel[4] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4};
 8008926:	4b48      	ldr	r3, [pc, #288]	; (8008a48 <set_pwm+0x13c>)
 8008928:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800892c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800892e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for(int i = 0; i < 4; i++)
 8008932:	2300      	movs	r3, #0
 8008934:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008936:	e07d      	b.n	8008a34 <set_pwm+0x128>
	{
		if(strcmp(PWM_OUT, PVIHOD[i]) == 0)
 8008938:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800893c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800893e:	4613      	mov	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	440b      	add	r3, r1
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f7f7 fc41 	bl	80001d0 <strcmp>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d16c      	bne.n	8008a2e <set_pwm+0x122>
		{
			if(PWM[i].clrFlag != false)
 8008954:	4a3d      	ldr	r2, [pc, #244]	; (8008a4c <set_pwm+0x140>)
 8008956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008958:	00db      	lsls	r3, r3, #3
 800895a:	4413      	add	r3, r2
 800895c:	799b      	ldrb	r3, [r3, #6]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00b      	beq.n	800897a <set_pwm+0x6e>
				HAL_TIM_PWM_Start_DMA(&htim3, PWM_Channel[i], 0, 1);
 8008962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800896a:	4413      	add	r3, r2
 800896c:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8008970:	2301      	movs	r3, #1
 8008972:	2200      	movs	r2, #0
 8008974:	4836      	ldr	r0, [pc, #216]	; (8008a50 <set_pwm+0x144>)
 8008976:	f004 fab7 	bl	800cee8 <HAL_TIM_PWM_Start_DMA>

			PWM[i].clrFlag = true;
 800897a:	4a34      	ldr	r2, [pc, #208]	; (8008a4c <set_pwm+0x140>)
 800897c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800897e:	00db      	lsls	r3, r3, #3
 8008980:	4413      	add	r3, r2
 8008982:	2201      	movs	r2, #1
 8008984:	719a      	strb	r2, [r3, #6]
			PWM[i].PWM_Channel = PWM_Channel[i];
 8008986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800898e:	4413      	add	r3, r2
 8008990:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8008994:	492d      	ldr	r1, [pc, #180]	; (8008a4c <set_pwm+0x140>)
 8008996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008998:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			PWM[i].D_CYCLE[0] = (D_CYCLE * 100);
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	b29b      	uxth	r3, r3
 80089a0:	461a      	mov	r2, r3
 80089a2:	0092      	lsls	r2, r2, #2
 80089a4:	4413      	add	r3, r2
 80089a6:	461a      	mov	r2, r3
 80089a8:	0091      	lsls	r1, r2, #2
 80089aa:	461a      	mov	r2, r3
 80089ac:	460b      	mov	r3, r1
 80089ae:	4413      	add	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	b299      	uxth	r1, r3
 80089b4:	4a25      	ldr	r2, [pc, #148]	; (8008a4c <set_pwm+0x140>)
 80089b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089b8:	00db      	lsls	r3, r3, #3
 80089ba:	4413      	add	r3, r2
 80089bc:	460a      	mov	r2, r1
 80089be:	809a      	strh	r2, [r3, #4]
			HAL_TIM_PWM_Start_DMA(&htim3, PWM_Channel[i], (uint32_t*)PWM[i].D_CYCLE, 1);
 80089c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80089c8:	4413      	add	r3, r2
 80089ca:	f853 1c28 	ldr.w	r1, [r3, #-40]
 80089ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089d0:	00db      	lsls	r3, r3, #3
 80089d2:	4a1e      	ldr	r2, [pc, #120]	; (8008a4c <set_pwm+0x140>)
 80089d4:	4413      	add	r3, r2
 80089d6:	1d1a      	adds	r2, r3, #4
 80089d8:	2301      	movs	r3, #1
 80089da:	481d      	ldr	r0, [pc, #116]	; (8008a50 <set_pwm+0x144>)
 80089dc:	f004 fa84 	bl	800cee8 <HAL_TIM_PWM_Start_DMA>

			//For Debug:
			//------------------------------------------------
			char Buff[32];
			SEND_str("PWM_OUT: ");
 80089e0:	481c      	ldr	r0, [pc, #112]	; (8008a54 <set_pwm+0x148>)
 80089e2:	f7fa f8e3 	bl	8002bac <SEND_str>
			SEND_str(PVIHOD[i]);
 80089e6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80089ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089ec:	4613      	mov	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	440b      	add	r3, r1
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fa f8d9 	bl	8002bac <SEND_str>
			SEND_str("\n");
 80089fa:	4817      	ldr	r0, [pc, #92]	; (8008a58 <set_pwm+0x14c>)
 80089fc:	f7fa f8d6 	bl	8002bac <SEND_str>
			SEND_str("DUTY_CYCLE: ");
 8008a00:	4816      	ldr	r0, [pc, #88]	; (8008a5c <set_pwm+0x150>)
 8008a02:	f7fa f8d3 	bl	8002bac <SEND_str>
			sprintf(Buff, "%d", D_CYCLE);
 8008a06:	f107 0308 	add.w	r3, r7, #8
 8008a0a:	683a      	ldr	r2, [r7, #0]
 8008a0c:	4914      	ldr	r1, [pc, #80]	; (8008a60 <set_pwm+0x154>)
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f012 fcc0 	bl	801b394 <siprintf>
			SEND_str(Buff);
 8008a14:	f107 0308 	add.w	r3, r7, #8
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7fa f8c7 	bl	8002bac <SEND_str>
			SEND_str("%");
 8008a1e:	4811      	ldr	r0, [pc, #68]	; (8008a64 <set_pwm+0x158>)
 8008a20:	f7fa f8c4 	bl	8002bac <SEND_str>
			SEND_str("\n");
 8008a24:	480c      	ldr	r0, [pc, #48]	; (8008a58 <set_pwm+0x14c>)
 8008a26:	f7fa f8c1 	bl	8002bac <SEND_str>
			//------------------------------------------------

			break;
 8008a2a:	bf00      	nop
 8008a2c:	e006      	b.n	8008a3c <set_pwm+0x130>
	for(int i = 0; i < 4; i++)
 8008a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a30:	3301      	adds	r3, #1
 8008a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	f77f af7e 	ble.w	8008938 <set_pwm+0x2c>
		}
	}
}
 8008a3c:	bf00      	nop
 8008a3e:	3750      	adds	r7, #80	; 0x50
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bdb0      	pop	{r4, r5, r7, pc}
 8008a44:	08020690 	.word	0x08020690
 8008a48:	080206a4 	.word	0x080206a4
 8008a4c:	20000698 	.word	0x20000698
 8008a50:	20000a98 	.word	0x20000a98
 8008a54:	0802066c 	.word	0x0802066c
 8008a58:	0802063c 	.word	0x0802063c
 8008a5c:	08020678 	.word	0x08020678
 8008a60:	08020688 	.word	0x08020688
 8008a64:	0802068c 	.word	0x0802068c

08008a68 <set_temperature>:
//Принимает "RANGE_TEMP_LOW" - нижний предел значения температуры
//Принимает "RANGE_TEMP_HIGH" - верхний предел значения температуры
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_temperature(char *ROM_RAW, double RANGE_TEMP_LOW, double RANGE_TEMP_HIGH, char *D_OUT, uint8_t VAR_OUT)
{
 8008a68:	b590      	push	{r4, r7, lr}
 8008a6a:	b0a9      	sub	sp, #164	; 0xa4
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	61f8      	str	r0, [r7, #28]
 8008a70:	ed87 0b04 	vstr	d0, [r7, #16]
 8008a74:	ed87 1b02 	vstr	d1, [r7, #8]
 8008a78:	61b9      	str	r1, [r7, #24]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	71fb      	strb	r3, [r7, #7]
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 8008a7e:	4aa5      	ldr	r2, [pc, #660]	; (8008d14 <set_temperature+0x2ac>)
 8008a80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008a84:	4611      	mov	r1, r2
 8008a86:	2250      	movs	r2, #80	; 0x50
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f011 fec2 	bl	801a812 <memcpy>

	for(int i = 0; i < AMT_TEMP_SENS; i++)
 8008a8e:	2300      	movs	r3, #0
 8008a90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a94:	e134      	b.n	8008d00 <set_temperature+0x298>
	{
		if(strcmp(ROM_RAW, Device_RAW_ROM[i]) == 0)
 8008a96:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4a9d      	ldr	r2, [pc, #628]	; (8008d18 <set_temperature+0x2b0>)
 8008aa4:	4413      	add	r3, r2
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	69f8      	ldr	r0, [r7, #28]
 8008aaa:	f7f7 fb91 	bl	80001d0 <strcmp>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f040 8120 	bne.w	8008cf6 <set_temperature+0x28e>
		{
			if(TSiDo[i].clrFlag != false)
 8008ab6:	4999      	ldr	r1, [pc, #612]	; (8008d1c <set_temperature+0x2b4>)
 8008ab8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008abc:	4613      	mov	r3, r2
 8008abe:	00db      	lsls	r3, r3, #3
 8008ac0:	1a9b      	subs	r3, r3, r2
 8008ac2:	00db      	lsls	r3, r3, #3
 8008ac4:	440b      	add	r3, r1
 8008ac6:	3330      	adds	r3, #48	; 0x30
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d017      	beq.n	8008afe <set_temperature+0x96>
				HAL_GPIO_WritePin(TSiDo[i].D_OUT, TSiDo[i].OCD_Pin, RESET);
 8008ace:	4993      	ldr	r1, [pc, #588]	; (8008d1c <set_temperature+0x2b4>)
 8008ad0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	00db      	lsls	r3, r3, #3
 8008ad8:	1a9b      	subs	r3, r3, r2
 8008ada:	00db      	lsls	r3, r3, #3
 8008adc:	440b      	add	r3, r1
 8008ade:	3328      	adds	r3, #40	; 0x28
 8008ae0:	6818      	ldr	r0, [r3, #0]
 8008ae2:	498e      	ldr	r1, [pc, #568]	; (8008d1c <set_temperature+0x2b4>)
 8008ae4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008ae8:	4613      	mov	r3, r2
 8008aea:	00db      	lsls	r3, r3, #3
 8008aec:	1a9b      	subs	r3, r3, r2
 8008aee:	00db      	lsls	r3, r3, #3
 8008af0:	440b      	add	r3, r1
 8008af2:	332e      	adds	r3, #46	; 0x2e
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	2200      	movs	r2, #0
 8008af8:	4619      	mov	r1, r3
 8008afa:	f002 ff99 	bl	800ba30 <HAL_GPIO_WritePin>

			TSiDo[i].clrFlag = true;
 8008afe:	4987      	ldr	r1, [pc, #540]	; (8008d1c <set_temperature+0x2b4>)
 8008b00:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008b04:	4613      	mov	r3, r2
 8008b06:	00db      	lsls	r3, r3, #3
 8008b08:	1a9b      	subs	r3, r3, r2
 8008b0a:	00db      	lsls	r3, r3, #3
 8008b0c:	440b      	add	r3, r1
 8008b0e:	3330      	adds	r3, #48	; 0x30
 8008b10:	2201      	movs	r2, #1
 8008b12:	701a      	strb	r2, [r3, #0]
			TSiDo[i].DEVICE_NUMBER = i+1;
 8008b14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	b2d8      	uxtb	r0, r3
 8008b1e:	497f      	ldr	r1, [pc, #508]	; (8008d1c <set_temperature+0x2b4>)
 8008b20:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008b24:	4613      	mov	r3, r2
 8008b26:	00db      	lsls	r3, r3, #3
 8008b28:	1a9b      	subs	r3, r3, r2
 8008b2a:	00db      	lsls	r3, r3, #3
 8008b2c:	440b      	add	r3, r1
 8008b2e:	4602      	mov	r2, r0
 8008b30:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 16; j++)
 8008b32:	2300      	movs	r3, #0
 8008b34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b38:	e01e      	b.n	8008b78 <set_temperature+0x110>
				TSiDo[i].ROM_RAW[j] = Device_RAW_ROM[i][j];
 8008b3a:	4977      	ldr	r1, [pc, #476]	; (8008d18 <set_temperature+0x2b0>)
 8008b3c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008b40:	4613      	mov	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4413      	add	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	18ca      	adds	r2, r1, r3
 8008b4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b4e:	4413      	add	r3, r2
 8008b50:	7818      	ldrb	r0, [r3, #0]
 8008b52:	4972      	ldr	r1, [pc, #456]	; (8008d1c <set_temperature+0x2b4>)
 8008b54:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008b58:	4613      	mov	r3, r2
 8008b5a:	00db      	lsls	r3, r3, #3
 8008b5c:	1a9b      	subs	r3, r3, r2
 8008b5e:	00db      	lsls	r3, r3, #3
 8008b60:	18ca      	adds	r2, r1, r3
 8008b62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b66:	4413      	add	r3, r2
 8008b68:	3301      	adds	r3, #1
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 16; j++)
 8008b6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b72:	3301      	adds	r3, #1
 8008b74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b7c:	2b0f      	cmp	r3, #15
 8008b7e:	dddc      	ble.n	8008b3a <set_temperature+0xd2>
			TSiDo[i].RANGE_TEMP_LOW = RANGE_TEMP_LOW;
 8008b80:	4966      	ldr	r1, [pc, #408]	; (8008d1c <set_temperature+0x2b4>)
 8008b82:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008b86:	4613      	mov	r3, r2
 8008b88:	00db      	lsls	r3, r3, #3
 8008b8a:	1a9b      	subs	r3, r3, r2
 8008b8c:	00db      	lsls	r3, r3, #3
 8008b8e:	440b      	add	r3, r1
 8008b90:	f103 0218 	add.w	r2, r3, #24
 8008b94:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008b98:	e9c2 3400 	strd	r3, r4, [r2]
			TSiDo[i].RANGE_TEMP_HIGH = RANGE_TEMP_HIGH;
 8008b9c:	495f      	ldr	r1, [pc, #380]	; (8008d1c <set_temperature+0x2b4>)
 8008b9e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	00db      	lsls	r3, r3, #3
 8008ba6:	1a9b      	subs	r3, r3, r2
 8008ba8:	00db      	lsls	r3, r3, #3
 8008baa:	440b      	add	r3, r1
 8008bac:	f103 0220 	add.w	r2, r3, #32
 8008bb0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008bb4:	e9c2 3400 	strd	r3, r4, [r2]
			for(int j = 0; j < 8; j++)
 8008bb8:	2300      	movs	r3, #0
 8008bba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008bbe:	e094      	b.n	8008cea <set_temperature+0x282>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 8008bc0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8008bc4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008bc8:	4613      	mov	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	005b      	lsls	r3, r3, #1
 8008bd0:	440b      	add	r3, r1
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	69b8      	ldr	r0, [r7, #24]
 8008bd6:	f7f7 fafb 	bl	80001d0 <strcmp>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d17f      	bne.n	8008ce0 <set_temperature+0x278>
				{
					TSiDo[i].D_OUT = pVIHOD[j];
 8008be0:	4a4f      	ldr	r2, [pc, #316]	; (8008d20 <set_temperature+0x2b8>)
 8008be2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008be6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008bea:	484c      	ldr	r0, [pc, #304]	; (8008d1c <set_temperature+0x2b4>)
 8008bec:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	1a9b      	subs	r3, r3, r2
 8008bf6:	00db      	lsls	r3, r3, #3
 8008bf8:	4403      	add	r3, r0
 8008bfa:	3328      	adds	r3, #40	; 0x28
 8008bfc:	6019      	str	r1, [r3, #0]
					TSiDo[i].VAR_OUT = VAR_OUT;
 8008bfe:	4947      	ldr	r1, [pc, #284]	; (8008d1c <set_temperature+0x2b4>)
 8008c00:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008c04:	4613      	mov	r3, r2
 8008c06:	00db      	lsls	r3, r3, #3
 8008c08:	1a9b      	subs	r3, r3, r2
 8008c0a:	00db      	lsls	r3, r3, #3
 8008c0c:	440b      	add	r3, r1
 8008c0e:	332c      	adds	r3, #44	; 0x2c
 8008c10:	79fa      	ldrb	r2, [r7, #7]
 8008c12:	701a      	strb	r2, [r3, #0]
					TSiDo[i].OCD_Pin = OCD_Pin[j];
 8008c14:	4a43      	ldr	r2, [pc, #268]	; (8008d24 <set_temperature+0x2bc>)
 8008c16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008c1a:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8008c1e:	493f      	ldr	r1, [pc, #252]	; (8008d1c <set_temperature+0x2b4>)
 8008c20:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008c24:	4613      	mov	r3, r2
 8008c26:	00db      	lsls	r3, r3, #3
 8008c28:	1a9b      	subs	r3, r3, r2
 8008c2a:	00db      	lsls	r3, r3, #3
 8008c2c:	440b      	add	r3, r1
 8008c2e:	332e      	adds	r3, #46	; 0x2e
 8008c30:	4602      	mov	r2, r0
 8008c32:	801a      	strh	r2, [r3, #0]

					//For Debug:
					//------------------------------------------------
					char Buff[32];
					SEND_str("ROM_RAW: ");
 8008c34:	483c      	ldr	r0, [pc, #240]	; (8008d28 <set_temperature+0x2c0>)
 8008c36:	f7f9 ffb9 	bl	8002bac <SEND_str>
					SEND_str(ROM_RAW);
 8008c3a:	69f8      	ldr	r0, [r7, #28]
 8008c3c:	f7f9 ffb6 	bl	8002bac <SEND_str>
					SEND_str("\n");
 8008c40:	483a      	ldr	r0, [pc, #232]	; (8008d2c <set_temperature+0x2c4>)
 8008c42:	f7f9 ffb3 	bl	8002bac <SEND_str>
					SEND_str("SET VALUE: ");
 8008c46:	483a      	ldr	r0, [pc, #232]	; (8008d30 <set_temperature+0x2c8>)
 8008c48:	f7f9 ffb0 	bl	8002bac <SEND_str>
					sprintf(Buff, "%.2f", atof(sign_temper));
 8008c4c:	4839      	ldr	r0, [pc, #228]	; (8008d34 <set_temperature+0x2cc>)
 8008c4e:	f011 fd71 	bl	801a734 <atof>
 8008c52:	ec54 3b10 	vmov	r3, r4, d0
 8008c56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	4623      	mov	r3, r4
 8008c5e:	4936      	ldr	r1, [pc, #216]	; (8008d38 <set_temperature+0x2d0>)
 8008c60:	f012 fb98 	bl	801b394 <siprintf>
					SEND_str(Buff);
 8008c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7f9 ff9f 	bl	8002bac <SEND_str>
					SEND_str("\nRANGE_TEMP_LOW: ");
 8008c6e:	4833      	ldr	r0, [pc, #204]	; (8008d3c <set_temperature+0x2d4>)
 8008c70:	f7f9 ff9c 	bl	8002bac <SEND_str>
					sprintf(Buff, "%.2f", TSiDo[i].RANGE_TEMP_LOW);
 8008c74:	4929      	ldr	r1, [pc, #164]	; (8008d1c <set_temperature+0x2b4>)
 8008c76:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	00db      	lsls	r3, r3, #3
 8008c7e:	1a9b      	subs	r3, r3, r2
 8008c80:	00db      	lsls	r3, r3, #3
 8008c82:	440b      	add	r3, r1
 8008c84:	3318      	adds	r3, #24
 8008c86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008c8e:	461a      	mov	r2, r3
 8008c90:	4623      	mov	r3, r4
 8008c92:	4929      	ldr	r1, [pc, #164]	; (8008d38 <set_temperature+0x2d0>)
 8008c94:	f012 fb7e 	bl	801b394 <siprintf>
					SEND_str(Buff);
 8008c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7f9 ff85 	bl	8002bac <SEND_str>
					SEND_str("\nRANGE_TEMP_HIGH: ");
 8008ca2:	4827      	ldr	r0, [pc, #156]	; (8008d40 <set_temperature+0x2d8>)
 8008ca4:	f7f9 ff82 	bl	8002bac <SEND_str>
					sprintf(Buff, "%.2f", TSiDo[i].RANGE_TEMP_HIGH);
 8008ca8:	491c      	ldr	r1, [pc, #112]	; (8008d1c <set_temperature+0x2b4>)
 8008caa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008cae:	4613      	mov	r3, r2
 8008cb0:	00db      	lsls	r3, r3, #3
 8008cb2:	1a9b      	subs	r3, r3, r2
 8008cb4:	00db      	lsls	r3, r3, #3
 8008cb6:	440b      	add	r3, r1
 8008cb8:	3320      	adds	r3, #32
 8008cba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008cbe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	4623      	mov	r3, r4
 8008cc6:	491c      	ldr	r1, [pc, #112]	; (8008d38 <set_temperature+0x2d0>)
 8008cc8:	f012 fb64 	bl	801b394 <siprintf>
					SEND_str(Buff);
 8008ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7f9 ff6b 	bl	8002bac <SEND_str>
					SEND_str("\n");
 8008cd6:	4815      	ldr	r0, [pc, #84]	; (8008d2c <set_temperature+0x2c4>)
 8008cd8:	f7f9 ff68 	bl	8002bac <SEND_str>
					//------------------------------------------------

					break;
 8008cdc:	bf00      	nop
				}
			}
			break;
 8008cde:	e014      	b.n	8008d0a <set_temperature+0x2a2>
			for(int j = 0; j < 8; j++)
 8008ce0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008cea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008cee:	2b07      	cmp	r3, #7
 8008cf0:	f77f af66 	ble.w	8008bc0 <set_temperature+0x158>
			break;
 8008cf4:	e009      	b.n	8008d0a <set_temperature+0x2a2>
	for(int i = 0; i < AMT_TEMP_SENS; i++)
 8008cf6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	f77f aec6 	ble.w	8008a96 <set_temperature+0x2e>
		}
	}
}
 8008d0a:	bf00      	nop
 8008d0c:	37a4      	adds	r7, #164	; 0xa4
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd90      	pop	{r4, r7, pc}
 8008d12:	bf00      	nop
 8008d14:	080205b8 	.word	0x080205b8
 8008d18:	200013ac 	.word	0x200013ac
 8008d1c:	20000628 	.word	0x20000628
 8008d20:	20000030 	.word	0x20000030
 8008d24:	20000060 	.word	0x20000060
 8008d28:	080206b4 	.word	0x080206b4
 8008d2c:	0802063c 	.word	0x0802063c
 8008d30:	08020608 	.word	0x08020608
 8008d34:	20001370 	.word	0x20001370
 8008d38:	080206c0 	.word	0x080206c0
 8008d3c:	080206c8 	.word	0x080206c8
 8008d40:	080206dc 	.word	0x080206dc

08008d44 <sensors_Reset>:
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
}
//--------------------------------------------------
uint8_t sensors_Reset(void)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
	uint16_t status;

	SET_LOW;					//низкий уровень
 8008d4a:	4b13      	ldr	r3, [pc, #76]	; (8008d98 <sensors_Reset+0x54>)
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	4a12      	ldr	r2, [pc, #72]	; (8008d98 <sensors_Reset+0x54>)
 8008d50:	f023 0301 	bic.w	r3, r3, #1
 8008d54:	6153      	str	r3, [r2, #20]
	delay_micros(480);			//задержка как минимум на 480 микросекунд
 8008d56:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8008d5a:	f7fb fb9d 	bl	8004498 <delay_micros>
	SET_HIGH;					//высокий уровень
 8008d5e:	4b0e      	ldr	r3, [pc, #56]	; (8008d98 <sensors_Reset+0x54>)
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	4a0d      	ldr	r2, [pc, #52]	; (8008d98 <sensors_Reset+0x54>)
 8008d64:	f043 0301 	orr.w	r3, r3, #1
 8008d68:	6153      	str	r3, [r2, #20]
	delay_micros(60);			//задержка как минимум на 60 микросекунд
 8008d6a:	203c      	movs	r0, #60	; 0x3c
 8008d6c:	f7fb fb94 	bl	8004498 <delay_micros>
	status = GET_STATUS_PIN;	//провер¤ем уровень
 8008d70:	4b09      	ldr	r3, [pc, #36]	; (8008d98 <sensors_Reset+0x54>)
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	f003 0301 	and.w	r3, r3, #1
 8008d7a:	80fb      	strh	r3, [r7, #6]
	delay_micros(480);			//задержка как минимум на 480 микросекунд
 8008d7c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8008d80:	f7fb fb8a 	bl	8004498 <delay_micros>
  	  	  	  	  	  	  		//(на всякий случай подождЄм побольше, так как могут быть неточности в задержке)
	return (status ? 1 : 0);	//вернЄм результат
 8008d84:	88fb      	ldrh	r3, [r7, #6]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	bf14      	ite	ne
 8008d8a:	2301      	movne	r3, #1
 8008d8c:	2300      	moveq	r3, #0
 8008d8e:	b2db      	uxtb	r3, r3
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	40020c00 	.word	0x40020c00

08008d9c <sensors_ReadBit>:
//----------------------------------------------------------
uint8_t sensors_ReadBit(void)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
	uint8_t bit = 0;
 8008da2:	2300      	movs	r3, #0
 8008da4:	71fb      	strb	r3, [r7, #7]

	SET_LOW;							//низкий уровень
 8008da6:	4b12      	ldr	r3, [pc, #72]	; (8008df0 <sensors_ReadBit+0x54>)
 8008da8:	695b      	ldr	r3, [r3, #20]
 8008daa:	4a11      	ldr	r2, [pc, #68]	; (8008df0 <sensors_ReadBit+0x54>)
 8008dac:	f023 0301 	bic.w	r3, r3, #1
 8008db0:	6153      	str	r3, [r2, #20]
	delay_micros(1);
 8008db2:	2001      	movs	r0, #1
 8008db4:	f7fb fb70 	bl	8004498 <delay_micros>
	SET_HIGH;							//высокий уровень
 8008db8:	4b0d      	ldr	r3, [pc, #52]	; (8008df0 <sensors_ReadBit+0x54>)
 8008dba:	695b      	ldr	r3, [r3, #20]
 8008dbc:	4a0c      	ldr	r2, [pc, #48]	; (8008df0 <sensors_ReadBit+0x54>)
 8008dbe:	f043 0301 	orr.w	r3, r3, #1
 8008dc2:	6153      	str	r3, [r2, #20]
	delay_micros(14);
 8008dc4:	200e      	movs	r0, #14
 8008dc6:	f7fb fb67 	bl	8004498 <delay_micros>
	bit = (GET_STATUS_PIN ? 1 : 0);		//провер¤ем уровень
 8008dca:	4b09      	ldr	r3, [pc, #36]	; (8008df0 <sensors_ReadBit+0x54>)
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	bf14      	ite	ne
 8008dd6:	2301      	movne	r3, #1
 8008dd8:	2300      	moveq	r3, #0
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	71fb      	strb	r3, [r7, #7]
	delay_micros(45);
 8008dde:	202d      	movs	r0, #45	; 0x2d
 8008de0:	f7fb fb5a 	bl	8004498 <delay_micros>

	return bit;
 8008de4:	79fb      	ldrb	r3, [r7, #7]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	40020c00 	.word	0x40020c00

08008df4 <sensors_ReadByte>:
//-----------------------------------------------
uint8_t sensors_ReadByte(void)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	71fb      	strb	r3, [r7, #7]

	for (uint8_t i = 0; i <= 7; i++)
 8008dfe:	2300      	movs	r3, #0
 8008e00:	71bb      	strb	r3, [r7, #6]
 8008e02:	e00d      	b.n	8008e20 <sensors_ReadByte+0x2c>
		data += sensors_ReadBit() << i;
 8008e04:	f7ff ffca 	bl	8008d9c <sensors_ReadBit>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	79bb      	ldrb	r3, [r7, #6]
 8008e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e12:	b2da      	uxtb	r2, r3
 8008e14:	79fb      	ldrb	r3, [r7, #7]
 8008e16:	4413      	add	r3, r2
 8008e18:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i <= 7; i++)
 8008e1a:	79bb      	ldrb	r3, [r7, #6]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	71bb      	strb	r3, [r7, #6]
 8008e20:	79bb      	ldrb	r3, [r7, #6]
 8008e22:	2b07      	cmp	r3, #7
 8008e24:	d9ee      	bls.n	8008e04 <sensors_ReadByte+0x10>

	return data;
 8008e26:	79fb      	ldrb	r3, [r7, #7]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <sensors_WriteBit>:
//-----------------------------------------------
void sensors_WriteBit(uint8_t bit)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	4603      	mov	r3, r0
 8008e38:	71fb      	strb	r3, [r7, #7]
	SET_LOW;
 8008e3a:	4b11      	ldr	r3, [pc, #68]	; (8008e80 <sensors_WriteBit+0x50>)
 8008e3c:	695b      	ldr	r3, [r3, #20]
 8008e3e:	4a10      	ldr	r2, [pc, #64]	; (8008e80 <sensors_WriteBit+0x50>)
 8008e40:	f023 0301 	bic.w	r3, r3, #1
 8008e44:	6153      	str	r3, [r2, #20]
	delay_micros(bit ? 1 : 60);
 8008e46:	79fb      	ldrb	r3, [r7, #7]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <sensors_WriteBit+0x20>
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e000      	b.n	8008e52 <sensors_WriteBit+0x22>
 8008e50:	233c      	movs	r3, #60	; 0x3c
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fb fb20 	bl	8004498 <delay_micros>
	SET_HIGH;
 8008e58:	4b09      	ldr	r3, [pc, #36]	; (8008e80 <sensors_WriteBit+0x50>)
 8008e5a:	695b      	ldr	r3, [r3, #20]
 8008e5c:	4a08      	ldr	r2, [pc, #32]	; (8008e80 <sensors_WriteBit+0x50>)
 8008e5e:	f043 0301 	orr.w	r3, r3, #1
 8008e62:	6153      	str	r3, [r2, #20]
	delay_micros(bit ? 60 : 1);
 8008e64:	79fb      	ldrb	r3, [r7, #7]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <sensors_WriteBit+0x3e>
 8008e6a:	233c      	movs	r3, #60	; 0x3c
 8008e6c:	e000      	b.n	8008e70 <sensors_WriteBit+0x40>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7fb fb11 	bl	8004498 <delay_micros>
}
 8008e76:	bf00      	nop
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	40020c00 	.word	0x40020c00

08008e84 <sensors_WriteByte>:
//-----------------------------------------------
void sensors_WriteByte(uint8_t dt)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8008e8e:	2300      	movs	r3, #0
 8008e90:	73fb      	strb	r3, [r7, #15]
 8008e92:	e010      	b.n	8008eb6 <sensors_WriteByte+0x32>
	{
		sensors_WriteBit(dt >> i & 1);
 8008e94:	79fa      	ldrb	r2, [r7, #7]
 8008e96:	7bfb      	ldrb	r3, [r7, #15]
 8008e98:	fa42 f303 	asr.w	r3, r2, r3
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7ff ffc3 	bl	8008e30 <sensors_WriteBit>
		//Delay Protection
		delay_micros(5);
 8008eaa:	2005      	movs	r0, #5
 8008eac:	f7fb faf4 	bl	8004498 <delay_micros>
	for (uint8_t i = 0; i < 8; i++)
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	73fb      	strb	r3, [r7, #15]
 8008eb6:	7bfb      	ldrb	r3, [r7, #15]
 8008eb8:	2b07      	cmp	r3, #7
 8008eba:	d9eb      	bls.n	8008e94 <sensors_WriteByte+0x10>
	}
}
 8008ebc:	bf00      	nop
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <sensors_SearchRom>:
//-----------------------------------------------
uint8_t sensors_SearchRom(uint8_t *Addr)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	//проинициализируем переменные
	id_bit_number = 1;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	75fb      	strb	r3, [r7, #23]
	last_zero = 0;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	75bb      	strb	r3, [r7, #22]
	rom_byte_number = 0;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	757b      	strb	r3, [r7, #21]
	rom_byte_mask = 1;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	74fb      	strb	r3, [r7, #19]
	search_result = 0;
 8008edc:	2300      	movs	r3, #0
 8008ede:	753b      	strb	r3, [r7, #20]
	if (!LastDeviceFlag)
 8008ee0:	4b55      	ldr	r3, [pc, #340]	; (8009038 <sensors_SearchRom+0x174>)
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d104      	bne.n	8008ef2 <sensors_SearchRom+0x2e>
	{
		sensors_Reset();
 8008ee8:	f7ff ff2c 	bl	8008d44 <sensors_Reset>
		sensors_WriteByte(0xF0);
 8008eec:	20f0      	movs	r0, #240	; 0xf0
 8008eee:	f7ff ffc9 	bl	8008e84 <sensors_WriteByte>
	}
	do
	{
		id_bit = sensors_ReadBit();
 8008ef2:	f7ff ff53 	bl	8008d9c <sensors_ReadBit>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	72fb      	strb	r3, [r7, #11]
		cmp_id_bit = sensors_ReadBit();
 8008efa:	f7ff ff4f 	bl	8008d9c <sensors_ReadBit>
 8008efe:	4603      	mov	r3, r0
 8008f00:	72bb      	strb	r3, [r7, #10]
		if ((id_bit == 1) && (cmp_id_bit == 1))
 8008f02:	7afb      	ldrb	r3, [r7, #11]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d102      	bne.n	8008f0e <sensors_SearchRom+0x4a>
 8008f08:	7abb      	ldrb	r3, [r7, #10]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d05c      	beq.n	8008fc8 <sensors_SearchRom+0x104>
			break;
		else
		{
			if (id_bit != cmp_id_bit)
 8008f0e:	7afa      	ldrb	r2, [r7, #11]
 8008f10:	7abb      	ldrb	r3, [r7, #10]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d002      	beq.n	8008f1c <sensors_SearchRom+0x58>
				search_direction = id_bit; // bit write value for search
 8008f16:	7afb      	ldrb	r3, [r7, #11]
 8008f18:	74bb      	strb	r3, [r7, #18]
 8008f1a:	e025      	b.n	8008f68 <sensors_SearchRom+0xa4>
			else
			{
				if (id_bit_number < LastDiscrepancy)
 8008f1c:	4b47      	ldr	r3, [pc, #284]	; (800903c <sensors_SearchRom+0x178>)
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	7dfa      	ldrb	r2, [r7, #23]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d20c      	bcs.n	8008f40 <sensors_SearchRom+0x7c>
					search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8008f26:	7d7b      	ldrb	r3, [r7, #21]
 8008f28:	4a45      	ldr	r2, [pc, #276]	; (8009040 <sensors_SearchRom+0x17c>)
 8008f2a:	5cd2      	ldrb	r2, [r2, r3]
 8008f2c:	7cfb      	ldrb	r3, [r7, #19]
 8008f2e:	4013      	ands	r3, r2
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	bf14      	ite	ne
 8008f36:	2301      	movne	r3, #1
 8008f38:	2300      	moveq	r3, #0
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	74bb      	strb	r3, [r7, #18]
 8008f3e:	e008      	b.n	8008f52 <sensors_SearchRom+0x8e>
				else
					search_direction = (id_bit_number == LastDiscrepancy);
 8008f40:	4b3e      	ldr	r3, [pc, #248]	; (800903c <sensors_SearchRom+0x178>)
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	7dfa      	ldrb	r2, [r7, #23]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	bf0c      	ite	eq
 8008f4a:	2301      	moveq	r3, #1
 8008f4c:	2300      	movne	r3, #0
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	74bb      	strb	r3, [r7, #18]
				if (search_direction == 0)
 8008f52:	7cbb      	ldrb	r3, [r7, #18]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d107      	bne.n	8008f68 <sensors_SearchRom+0xa4>
				{
					last_zero = id_bit_number;
 8008f58:	7dfb      	ldrb	r3, [r7, #23]
 8008f5a:	75bb      	strb	r3, [r7, #22]
					if (last_zero < 9)
 8008f5c:	7dbb      	ldrb	r3, [r7, #22]
 8008f5e:	2b08      	cmp	r3, #8
 8008f60:	d802      	bhi.n	8008f68 <sensors_SearchRom+0xa4>
					LastFamilyDiscrepancy = last_zero;
 8008f62:	4a38      	ldr	r2, [pc, #224]	; (8009044 <sensors_SearchRom+0x180>)
 8008f64:	7dbb      	ldrb	r3, [r7, #22]
 8008f66:	7013      	strb	r3, [r2, #0]
				}
			}
			if (search_direction == 1)
 8008f68:	7cbb      	ldrb	r3, [r7, #18]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d109      	bne.n	8008f82 <sensors_SearchRom+0xbe>
				ROM_NO[rom_byte_number] |= rom_byte_mask;
 8008f6e:	7d7b      	ldrb	r3, [r7, #21]
 8008f70:	4a33      	ldr	r2, [pc, #204]	; (8009040 <sensors_SearchRom+0x17c>)
 8008f72:	5cd1      	ldrb	r1, [r2, r3]
 8008f74:	7d7b      	ldrb	r3, [r7, #21]
 8008f76:	7cfa      	ldrb	r2, [r7, #19]
 8008f78:	430a      	orrs	r2, r1
 8008f7a:	b2d1      	uxtb	r1, r2
 8008f7c:	4a30      	ldr	r2, [pc, #192]	; (8009040 <sensors_SearchRom+0x17c>)
 8008f7e:	54d1      	strb	r1, [r2, r3]
 8008f80:	e00d      	b.n	8008f9e <sensors_SearchRom+0xda>
			else
				ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8008f82:	7d7b      	ldrb	r3, [r7, #21]
 8008f84:	4a2e      	ldr	r2, [pc, #184]	; (8009040 <sensors_SearchRom+0x17c>)
 8008f86:	5cd3      	ldrb	r3, [r2, r3]
 8008f88:	b25a      	sxtb	r2, r3
 8008f8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f8e:	43db      	mvns	r3, r3
 8008f90:	b25b      	sxtb	r3, r3
 8008f92:	4013      	ands	r3, r2
 8008f94:	b25a      	sxtb	r2, r3
 8008f96:	7d7b      	ldrb	r3, [r7, #21]
 8008f98:	b2d1      	uxtb	r1, r2
 8008f9a:	4a29      	ldr	r2, [pc, #164]	; (8009040 <sensors_SearchRom+0x17c>)
 8008f9c:	54d1      	strb	r1, [r2, r3]
			sensors_WriteBit(search_direction);
 8008f9e:	7cbb      	ldrb	r3, [r7, #18]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7ff ff45 	bl	8008e30 <sensors_WriteBit>
			id_bit_number++;
 8008fa6:	7dfb      	ldrb	r3, [r7, #23]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	75fb      	strb	r3, [r7, #23]
			rom_byte_mask <<= 1;
 8008fac:	7cfb      	ldrb	r3, [r7, #19]
 8008fae:	005b      	lsls	r3, r3, #1
 8008fb0:	74fb      	strb	r3, [r7, #19]
			if (rom_byte_mask == 0)
 8008fb2:	7cfb      	ldrb	r3, [r7, #19]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d104      	bne.n	8008fc2 <sensors_SearchRom+0xfe>
			{
				rom_byte_number++;
 8008fb8:	7d7b      	ldrb	r3, [r7, #21]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	757b      	strb	r3, [r7, #21]
				rom_byte_mask = 1;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	74fb      	strb	r3, [r7, #19]
			}
		}
	} while(rom_byte_number < 8);		//считываем байты с 0 до 7 в цикле
 8008fc2:	7d7b      	ldrb	r3, [r7, #21]
 8008fc4:	2b07      	cmp	r3, #7
 8008fc6:	d994      	bls.n	8008ef2 <sensors_SearchRom+0x2e>

	if (!(id_bit_number < 65))
 8008fc8:	7dfb      	ldrb	r3, [r7, #23]
 8008fca:	2b40      	cmp	r3, #64	; 0x40
 8008fcc:	d90b      	bls.n	8008fe6 <sensors_SearchRom+0x122>
	{
		// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
		LastDiscrepancy = last_zero;
 8008fce:	4a1b      	ldr	r2, [pc, #108]	; (800903c <sensors_SearchRom+0x178>)
 8008fd0:	7dbb      	ldrb	r3, [r7, #22]
 8008fd2:	7013      	strb	r3, [r2, #0]
		// check for last device
		if (LastDiscrepancy == 0)
 8008fd4:	4b19      	ldr	r3, [pc, #100]	; (800903c <sensors_SearchRom+0x178>)
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d102      	bne.n	8008fe2 <sensors_SearchRom+0x11e>
			LastDeviceFlag = 1;
 8008fdc:	4b16      	ldr	r3, [pc, #88]	; (8009038 <sensors_SearchRom+0x174>)
 8008fde:	2201      	movs	r2, #1
 8008fe0:	701a      	strb	r2, [r3, #0]
		search_result = 1;	
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	753b      	strb	r3, [r7, #20]
	}
	if (!search_result || !ROM_NO[0])
 8008fe6:	7d3b      	ldrb	r3, [r7, #20]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d003      	beq.n	8008ff4 <sensors_SearchRom+0x130>
 8008fec:	4b14      	ldr	r3, [pc, #80]	; (8009040 <sensors_SearchRom+0x17c>)
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d10b      	bne.n	800900c <sensors_SearchRom+0x148>
	{
		LastDiscrepancy = 0;
 8008ff4:	4b11      	ldr	r3, [pc, #68]	; (800903c <sensors_SearchRom+0x178>)
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	701a      	strb	r2, [r3, #0]
		LastDeviceFlag = 0;
 8008ffa:	4b0f      	ldr	r3, [pc, #60]	; (8009038 <sensors_SearchRom+0x174>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	701a      	strb	r2, [r3, #0]
		LastFamilyDiscrepancy = 0;
 8009000:	4b10      	ldr	r3, [pc, #64]	; (8009044 <sensors_SearchRom+0x180>)
 8009002:	2200      	movs	r2, #0
 8009004:	701a      	strb	r2, [r3, #0]
		search_result = 0;
 8009006:	2300      	movs	r3, #0
 8009008:	753b      	strb	r3, [r7, #20]
 800900a:	e010      	b.n	800902e <sensors_SearchRom+0x16a>
	}
	else
	{
		for (int i = 0; i < 8; i++)
 800900c:	2300      	movs	r3, #0
 800900e:	60fb      	str	r3, [r7, #12]
 8009010:	e00a      	b.n	8009028 <sensors_SearchRom+0x164>
			Addr[i] = ROM_NO[i];
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	4413      	add	r3, r2
 8009018:	4909      	ldr	r1, [pc, #36]	; (8009040 <sensors_SearchRom+0x17c>)
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	440a      	add	r2, r1
 800901e:	7812      	ldrb	r2, [r2, #0]
 8009020:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	3301      	adds	r3, #1
 8009026:	60fb      	str	r3, [r7, #12]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b07      	cmp	r3, #7
 800902c:	ddf1      	ble.n	8009012 <sensors_SearchRom+0x14e>
	}
	return search_result;
 800902e:	7d3b      	ldrb	r3, [r7, #20]
}
 8009030:	4618      	mov	r0, r3
 8009032:	3718      	adds	r7, #24
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	200013aa 	.word	0x200013aa
 800903c:	200013ab 	.word	0x200013ab
 8009040:	200013a0 	.word	0x200013a0
 8009044:	200013a9 	.word	0x200013a9

08009048 <sensors_init>:
//-----------------------------------------------
uint8_t sensors_init(uint8_t mode)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	4603      	mov	r3, r0
 8009050:	71fb      	strb	r3, [r7, #7]
	int i = 0, j=0;
 8009052:	2300      	movs	r3, #0
 8009054:	617b      	str	r3, [r7, #20]
 8009056:	2300      	movs	r3, #0
 8009058:	613b      	str	r3, [r7, #16]
	uint8_t dt[8];
	if(mode == SKIP_ROM)
 800905a:	79fb      	ldrb	r3, [r7, #7]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d116      	bne.n	800908e <sensors_init+0x46>
	{
		if(sensors_Reset())
 8009060:	f7ff fe70 	bl	8008d44 <sensors_Reset>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d001      	beq.n	800906e <sensors_init+0x26>
			return 1;
 800906a:	2301      	movs	r3, #1
 800906c:	e06b      	b.n	8009146 <sensors_init+0xfe>
		//SKIP ROM
		sensors_WriteByte(0xCC);
 800906e:	20cc      	movs	r0, #204	; 0xcc
 8009070:	f7ff ff08 	bl	8008e84 <sensors_WriteByte>
		//WRITE SCRATCHPAD
		sensors_WriteByte(0x4E);
 8009074:	204e      	movs	r0, #78	; 0x4e
 8009076:	f7ff ff05 	bl	8008e84 <sensors_WriteByte>
		//TH REGISTER 100 градусов
		sensors_WriteByte(0x64);
 800907a:	2064      	movs	r0, #100	; 0x64
 800907c:	f7ff ff02 	bl	8008e84 <sensors_WriteByte>
		//TL REGISTER - 30 градусов
		sensors_WriteByte(0x9E);
 8009080:	209e      	movs	r0, #158	; 0x9e
 8009082:	f7ff feff 	bl	8008e84 <sensors_WriteByte>
		//Resolution 12 bit
		sensors_WriteByte(RESOLUTION_12BIT);
 8009086:	207f      	movs	r0, #127	; 0x7f
 8009088:	f7ff fefc 	bl	8008e84 <sensors_WriteByte>
 800908c:	e05a      	b.n	8009144 <sensors_init+0xfc>
	}
	else
	{
		for(i = 1; i <= 8; i++)
 800908e:	2301      	movs	r3, #1
 8009090:	617b      	str	r3, [r7, #20]
 8009092:	e01c      	b.n	80090ce <sensors_init+0x86>
		{
			if(sensors_SearchRom(dt))
 8009094:	f107 0308 	add.w	r3, r7, #8
 8009098:	4618      	mov	r0, r3
 800909a:	f7ff ff13 	bl	8008ec4 <sensors_SearchRom>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d018      	beq.n	80090d6 <sensors_init+0x8e>
			{
				Dev_Cnt++;
 80090a4:	4b2a      	ldr	r3, [pc, #168]	; (8009150 <sensors_init+0x108>)
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	3301      	adds	r3, #1
 80090aa:	b2da      	uxtb	r2, r3
 80090ac:	4b28      	ldr	r3, [pc, #160]	; (8009150 <sensors_init+0x108>)
 80090ae:	701a      	strb	r2, [r3, #0]
				memcpy(Dev_ID[Dev_Cnt-1], dt, sizeof(dt));
 80090b0:	4b27      	ldr	r3, [pc, #156]	; (8009150 <sensors_init+0x108>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	3b01      	subs	r3, #1
 80090b6:	00db      	lsls	r3, r3, #3
 80090b8:	4a26      	ldr	r2, [pc, #152]	; (8009154 <sensors_init+0x10c>)
 80090ba:	4413      	add	r3, r2
 80090bc:	461a      	mov	r2, r3
 80090be:	f107 0308 	add.w	r3, r7, #8
 80090c2:	cb03      	ldmia	r3!, {r0, r1}
 80090c4:	6010      	str	r0, [r2, #0]
 80090c6:	6051      	str	r1, [r2, #4]
		for(i = 1; i <= 8; i++)
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	3301      	adds	r3, #1
 80090cc:	617b      	str	r3, [r7, #20]
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	2b08      	cmp	r3, #8
 80090d2:	dddf      	ble.n	8009094 <sensors_init+0x4c>
 80090d4:	e000      	b.n	80090d8 <sensors_init+0x90>
			}
			else break;
 80090d6:	bf00      	nop
		}
		for(i = 1; i <= Dev_Cnt; i++)
 80090d8:	2301      	movs	r3, #1
 80090da:	617b      	str	r3, [r7, #20]
 80090dc:	e02c      	b.n	8009138 <sensors_init+0xf0>
		{
			if(sensors_Reset())
 80090de:	f7ff fe31 	bl	8008d44 <sensors_Reset>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <sensors_init+0xa4>
				return 1;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e02c      	b.n	8009146 <sensors_init+0xfe>
			//Match Rom
			sensors_WriteByte(0x55);
 80090ec:	2055      	movs	r0, #85	; 0x55
 80090ee:	f7ff fec9 	bl	8008e84 <sensors_WriteByte>
			for(j = 0; j <= 7; j++)
 80090f2:	2300      	movs	r3, #0
 80090f4:	613b      	str	r3, [r7, #16]
 80090f6:	e00d      	b.n	8009114 <sensors_init+0xcc>
			{
				sensors_WriteByte(Dev_ID[i-1][j]);
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	3b01      	subs	r3, #1
 80090fc:	4a15      	ldr	r2, [pc, #84]	; (8009154 <sensors_init+0x10c>)
 80090fe:	00db      	lsls	r3, r3, #3
 8009100:	441a      	add	r2, r3
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	4413      	add	r3, r2
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	4618      	mov	r0, r3
 800910a:	f7ff febb 	bl	8008e84 <sensors_WriteByte>
			for(j = 0; j <= 7; j++)
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	3301      	adds	r3, #1
 8009112:	613b      	str	r3, [r7, #16]
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	2b07      	cmp	r3, #7
 8009118:	ddee      	ble.n	80090f8 <sensors_init+0xb0>
			}
			//WRITE SCRATCHPAD
			sensors_WriteByte(0x4E);
 800911a:	204e      	movs	r0, #78	; 0x4e
 800911c:	f7ff feb2 	bl	8008e84 <sensors_WriteByte>
			//TH REGISTER 100 градусов
			sensors_WriteByte(0x64);
 8009120:	2064      	movs	r0, #100	; 0x64
 8009122:	f7ff feaf 	bl	8008e84 <sensors_WriteByte>
			//TL REGISTER - 30 градусов
			sensors_WriteByte(0x9E);
 8009126:	209e      	movs	r0, #158	; 0x9e
 8009128:	f7ff feac 	bl	8008e84 <sensors_WriteByte>
			//Resolution 12 bit
			sensors_WriteByte(RESOLUTION_12BIT);
 800912c:	207f      	movs	r0, #127	; 0x7f
 800912e:	f7ff fea9 	bl	8008e84 <sensors_WriteByte>
		for(i = 1; i <= Dev_Cnt; i++)
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	3301      	adds	r3, #1
 8009136:	617b      	str	r3, [r7, #20]
 8009138:	4b05      	ldr	r3, [pc, #20]	; (8009150 <sensors_init+0x108>)
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	461a      	mov	r2, r3
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	4293      	cmp	r3, r2
 8009142:	ddcc      	ble.n	80090de <sensors_init+0x96>
		}
	}
	return 0;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3718      	adds	r7, #24
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	200013a8 	.word	0x200013a8
 8009154:	2000138c 	.word	0x2000138c

08009158 <sensors_MeasureTemperCmd>:
//----------------------------------------------------------
void sensors_MeasureTemperCmd(uint8_t mode, uint8_t DevNum)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	4603      	mov	r3, r0
 8009160:	460a      	mov	r2, r1
 8009162:	71fb      	strb	r3, [r7, #7]
 8009164:	4613      	mov	r3, r2
 8009166:	71bb      	strb	r3, [r7, #6]
	int i = 0;
 8009168:	2300      	movs	r3, #0
 800916a:	60fb      	str	r3, [r7, #12]
	sensors_Reset();
 800916c:	f7ff fdea 	bl	8008d44 <sensors_Reset>
	if(mode == SKIP_ROM)
 8009170:	79fb      	ldrb	r3, [r7, #7]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d103      	bne.n	800917e <sensors_MeasureTemperCmd+0x26>
	{
    //SKIP ROM
		sensors_WriteByte(0xCC);
 8009176:	20cc      	movs	r0, #204	; 0xcc
 8009178:	f7ff fe84 	bl	8008e84 <sensors_WriteByte>
 800917c:	e016      	b.n	80091ac <sensors_MeasureTemperCmd+0x54>
	}
	else
	{
		//Match Rom
		sensors_WriteByte(0x55);
 800917e:	2055      	movs	r0, #85	; 0x55
 8009180:	f7ff fe80 	bl	8008e84 <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 8009184:	2300      	movs	r3, #0
 8009186:	60fb      	str	r3, [r7, #12]
 8009188:	e00d      	b.n	80091a6 <sensors_MeasureTemperCmd+0x4e>
		{
			sensors_WriteByte(Dev_ID[DevNum-1][i]);
 800918a:	79bb      	ldrb	r3, [r7, #6]
 800918c:	3b01      	subs	r3, #1
 800918e:	4a0b      	ldr	r2, [pc, #44]	; (80091bc <sensors_MeasureTemperCmd+0x64>)
 8009190:	00db      	lsls	r3, r3, #3
 8009192:	441a      	add	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	4413      	add	r3, r2
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	4618      	mov	r0, r3
 800919c:	f7ff fe72 	bl	8008e84 <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	3301      	adds	r3, #1
 80091a4:	60fb      	str	r3, [r7, #12]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2b07      	cmp	r3, #7
 80091aa:	ddee      	ble.n	800918a <sensors_MeasureTemperCmd+0x32>
		}
	}
	//CONVERT T
	sensors_WriteByte(0x44);
 80091ac:	2044      	movs	r0, #68	; 0x44
 80091ae:	f7ff fe69 	bl	8008e84 <sensors_WriteByte>
}
 80091b2:	bf00      	nop
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	2000138c 	.word	0x2000138c

080091c0 <sensors_ReadStratcpad>:
//----------------------------------------------------------
void sensors_ReadStratcpad(uint8_t mode, uint8_t *Data, uint8_t DevNum)
{
 80091c0:	b590      	push	{r4, r7, lr}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	4603      	mov	r3, r0
 80091c8:	6039      	str	r1, [r7, #0]
 80091ca:	71fb      	strb	r3, [r7, #7]
 80091cc:	4613      	mov	r3, r2
 80091ce:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	sensors_Reset();
 80091d0:	f7ff fdb8 	bl	8008d44 <sensors_Reset>
	if(mode == SKIP_ROM)
 80091d4:	79fb      	ldrb	r3, [r7, #7]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d103      	bne.n	80091e2 <sensors_ReadStratcpad+0x22>
	{
		//SKIP ROM
		sensors_WriteByte(0xCC);
 80091da:	20cc      	movs	r0, #204	; 0xcc
 80091dc:	f7ff fe52 	bl	8008e84 <sensors_WriteByte>
 80091e0:	e016      	b.n	8009210 <sensors_ReadStratcpad+0x50>
	}
	else
	{
		//Match Rom
		sensors_WriteByte(0x55);
 80091e2:	2055      	movs	r0, #85	; 0x55
 80091e4:	f7ff fe4e 	bl	8008e84 <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 80091e8:	2300      	movs	r3, #0
 80091ea:	73fb      	strb	r3, [r7, #15]
 80091ec:	e00d      	b.n	800920a <sensors_ReadStratcpad+0x4a>
		{
			sensors_WriteByte(Dev_ID[DevNum-1][i]);
 80091ee:	79bb      	ldrb	r3, [r7, #6]
 80091f0:	1e5a      	subs	r2, r3, #1
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
 80091f4:	4912      	ldr	r1, [pc, #72]	; (8009240 <sensors_ReadStratcpad+0x80>)
 80091f6:	00d2      	lsls	r2, r2, #3
 80091f8:	440a      	add	r2, r1
 80091fa:	4413      	add	r3, r2
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	4618      	mov	r0, r3
 8009200:	f7ff fe40 	bl	8008e84 <sensors_WriteByte>
		for(i = 0; i <= 7; i++)
 8009204:	7bfb      	ldrb	r3, [r7, #15]
 8009206:	3301      	adds	r3, #1
 8009208:	73fb      	strb	r3, [r7, #15]
 800920a:	7bfb      	ldrb	r3, [r7, #15]
 800920c:	2b07      	cmp	r3, #7
 800920e:	d9ee      	bls.n	80091ee <sensors_ReadStratcpad+0x2e>
		}
	}
	//READ SCRATCHPAD
	sensors_WriteByte(0xBE);
 8009210:	20be      	movs	r0, #190	; 0xbe
 8009212:	f7ff fe37 	bl	8008e84 <sensors_WriteByte>
	for(i = 0; i < 8; i++)
 8009216:	2300      	movs	r3, #0
 8009218:	73fb      	strb	r3, [r7, #15]
 800921a:	e009      	b.n	8009230 <sensors_ReadStratcpad+0x70>
	{
		Data[i] = sensors_ReadByte();
 800921c:	7bfb      	ldrb	r3, [r7, #15]
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	18d4      	adds	r4, r2, r3
 8009222:	f7ff fde7 	bl	8008df4 <sensors_ReadByte>
 8009226:	4603      	mov	r3, r0
 8009228:	7023      	strb	r3, [r4, #0]
	for(i = 0; i < 8; i++)
 800922a:	7bfb      	ldrb	r3, [r7, #15]
 800922c:	3301      	adds	r3, #1
 800922e:	73fb      	strb	r3, [r7, #15]
 8009230:	7bfb      	ldrb	r3, [r7, #15]
 8009232:	2b07      	cmp	r3, #7
 8009234:	d9f2      	bls.n	800921c <sensors_ReadStratcpad+0x5c>
	}
}
 8009236:	bf00      	nop
 8009238:	3714      	adds	r7, #20
 800923a:	46bd      	mov	sp, r7
 800923c:	bd90      	pop	{r4, r7, pc}
 800923e:	bf00      	nop
 8009240:	2000138c 	.word	0x2000138c

08009244 <sensors_GetSign>:
//----------------------------------------------------------
uint8_t sensors_GetSign(uint16_t dt)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	4603      	mov	r3, r0
 800924c:	80fb      	strh	r3, [r7, #6]
	//ѕроверим 11-й бит
	if (dt&(1<<11))
 800924e:	88fb      	ldrh	r3, [r7, #6]
 8009250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009254:	2b00      	cmp	r3, #0
 8009256:	d001      	beq.n	800925c <sensors_GetSign+0x18>
		return 1;
 8009258:	2301      	movs	r3, #1
 800925a:	e000      	b.n	800925e <sensors_GetSign+0x1a>
	else
		return 0;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	370c      	adds	r7, #12
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr

0800926a <sensors_Convert>:
//----------------------------------------------------------
float sensors_Convert(uint16_t dt)
{
 800926a:	b480      	push	{r7}
 800926c:	b085      	sub	sp, #20
 800926e:	af00      	add	r7, sp, #0
 8009270:	4603      	mov	r3, r0
 8009272:	80fb      	strh	r3, [r7, #6]
	float t;

	t = (float)((dt&0x07FF)>>4);		//отборосим знаковые и дробные биты
 8009274:	88fb      	ldrh	r3, [r7, #6]
 8009276:	111b      	asrs	r3, r3, #4
 8009278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800927c:	ee07 3a90 	vmov	s15, r3
 8009280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009284:	edc7 7a03 	vstr	s15, [r7, #12]
	t += (float)(dt&0x000F) / 16.0f;	//ѕрибавим дробную часть
 8009288:	88fb      	ldrh	r3, [r7, #6]
 800928a:	f003 030f 	and.w	r3, r3, #15
 800928e:	ee07 3a90 	vmov	s15, r3
 8009292:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009296:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800929a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800929e:	ed97 7a03 	vldr	s14, [r7, #12]
 80092a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092a6:	edc7 7a03 	vstr	s15, [r7, #12]

	return t;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	ee07 3a90 	vmov	s15, r3
}
 80092b0:	eeb0 0a67 	vmov.f32	s0, s15
 80092b4:	3714      	adds	r7, #20
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
	...

080092c0 <UpdateTempSens>:
//----------------------------------------------------------
void UpdateTempSens(void)
{
 80092c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092c2:	b08b      	sub	sp, #44	; 0x2c
 80092c4:	af06      	add	r7, sp, #24
	sensors_init(NO_SKIP_ROM);
 80092c6:	2001      	movs	r0, #1
 80092c8:	f7ff febe 	bl	8009048 <sensors_init>

	for(uint8_t i = 0; i < Dev_Cnt; i++)
 80092cc:	2300      	movs	r3, #0
 80092ce:	73fb      	strb	r3, [r7, #15]
 80092d0:	e079      	b.n	80093c6 <UpdateTempSens+0x106>
	{
		sprintf(Device_RAW_ROM[i],"%02X%02X%02X%02X%02X%02X%02X%02X", Dev_ID[i][0], Dev_ID[i][1], Dev_ID[i][2], Dev_ID[i][3], Dev_ID[i][4], Dev_ID[i][5], Dev_ID[i][6], Dev_ID[i][7]);
 80092d2:	7bfa      	ldrb	r2, [r7, #15]
 80092d4:	4613      	mov	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4413      	add	r3, r2
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	4a42      	ldr	r2, [pc, #264]	; (80093e8 <UpdateTempSens+0x128>)
 80092de:	1898      	adds	r0, r3, r2
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
 80092e2:	4a42      	ldr	r2, [pc, #264]	; (80093ec <UpdateTempSens+0x12c>)
 80092e4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80092e8:	469c      	mov	ip, r3
 80092ea:	7bfb      	ldrb	r3, [r7, #15]
 80092ec:	4a3f      	ldr	r2, [pc, #252]	; (80093ec <UpdateTempSens+0x12c>)
 80092ee:	00db      	lsls	r3, r3, #3
 80092f0:	4413      	add	r3, r2
 80092f2:	785b      	ldrb	r3, [r3, #1]
 80092f4:	469e      	mov	lr, r3
 80092f6:	7bfb      	ldrb	r3, [r7, #15]
 80092f8:	4a3c      	ldr	r2, [pc, #240]	; (80093ec <UpdateTempSens+0x12c>)
 80092fa:	00db      	lsls	r3, r3, #3
 80092fc:	4413      	add	r3, r2
 80092fe:	789b      	ldrb	r3, [r3, #2]
 8009300:	4619      	mov	r1, r3
 8009302:	7bfb      	ldrb	r3, [r7, #15]
 8009304:	4a39      	ldr	r2, [pc, #228]	; (80093ec <UpdateTempSens+0x12c>)
 8009306:	00db      	lsls	r3, r3, #3
 8009308:	4413      	add	r3, r2
 800930a:	78db      	ldrb	r3, [r3, #3]
 800930c:	461c      	mov	r4, r3
 800930e:	7bfb      	ldrb	r3, [r7, #15]
 8009310:	4a36      	ldr	r2, [pc, #216]	; (80093ec <UpdateTempSens+0x12c>)
 8009312:	00db      	lsls	r3, r3, #3
 8009314:	4413      	add	r3, r2
 8009316:	791b      	ldrb	r3, [r3, #4]
 8009318:	461d      	mov	r5, r3
 800931a:	7bfb      	ldrb	r3, [r7, #15]
 800931c:	4a33      	ldr	r2, [pc, #204]	; (80093ec <UpdateTempSens+0x12c>)
 800931e:	00db      	lsls	r3, r3, #3
 8009320:	4413      	add	r3, r2
 8009322:	795b      	ldrb	r3, [r3, #5]
 8009324:	461e      	mov	r6, r3
 8009326:	7bfb      	ldrb	r3, [r7, #15]
 8009328:	4a30      	ldr	r2, [pc, #192]	; (80093ec <UpdateTempSens+0x12c>)
 800932a:	00db      	lsls	r3, r3, #3
 800932c:	4413      	add	r3, r2
 800932e:	799b      	ldrb	r3, [r3, #6]
 8009330:	607b      	str	r3, [r7, #4]
 8009332:	7bfb      	ldrb	r3, [r7, #15]
 8009334:	4a2d      	ldr	r2, [pc, #180]	; (80093ec <UpdateTempSens+0x12c>)
 8009336:	00db      	lsls	r3, r3, #3
 8009338:	4413      	add	r3, r2
 800933a:	79db      	ldrb	r3, [r3, #7]
 800933c:	9305      	str	r3, [sp, #20]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	9304      	str	r3, [sp, #16]
 8009342:	9603      	str	r6, [sp, #12]
 8009344:	9502      	str	r5, [sp, #8]
 8009346:	9401      	str	r4, [sp, #4]
 8009348:	9100      	str	r1, [sp, #0]
 800934a:	4673      	mov	r3, lr
 800934c:	4662      	mov	r2, ip
 800934e:	4928      	ldr	r1, [pc, #160]	; (80093f0 <UpdateTempSens+0x130>)
 8009350:	f012 f820 	bl	801b394 <siprintf>
		//----------------------from debug---------------------------
		if(strcmp(Device_RAW_ROM[i], "28790E950C000069") == 0)
 8009354:	7bfa      	ldrb	r2, [r7, #15]
 8009356:	4613      	mov	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	4413      	add	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4a22      	ldr	r2, [pc, #136]	; (80093e8 <UpdateTempSens+0x128>)
 8009360:	4413      	add	r3, r2
 8009362:	4924      	ldr	r1, [pc, #144]	; (80093f4 <UpdateTempSens+0x134>)
 8009364:	4618      	mov	r0, r3
 8009366:	f7f6 ff33 	bl	80001d0 <strcmp>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10c      	bne.n	800938a <UpdateTempSens+0xca>
		{
			SEND_str(Device_RAW_ROM[i]);
 8009370:	7bfa      	ldrb	r2, [r7, #15]
 8009372:	4613      	mov	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4413      	add	r3, r2
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	4a1b      	ldr	r2, [pc, #108]	; (80093e8 <UpdateTempSens+0x128>)
 800937c:	4413      	add	r3, r2
 800937e:	4618      	mov	r0, r3
 8009380:	f7f9 fc14 	bl	8002bac <SEND_str>
			SEND_str(" - YES\n");
 8009384:	481c      	ldr	r0, [pc, #112]	; (80093f8 <UpdateTempSens+0x138>)
 8009386:	f7f9 fc11 	bl	8002bac <SEND_str>
		}
		if(strcmp(Device_RAW_ROM[i], "28BF1E930C000031") == 0)
 800938a:	7bfa      	ldrb	r2, [r7, #15]
 800938c:	4613      	mov	r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	4413      	add	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4a14      	ldr	r2, [pc, #80]	; (80093e8 <UpdateTempSens+0x128>)
 8009396:	4413      	add	r3, r2
 8009398:	4918      	ldr	r1, [pc, #96]	; (80093fc <UpdateTempSens+0x13c>)
 800939a:	4618      	mov	r0, r3
 800939c:	f7f6 ff18 	bl	80001d0 <strcmp>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d10c      	bne.n	80093c0 <UpdateTempSens+0x100>
		{
			SEND_str(Device_RAW_ROM[i]);
 80093a6:	7bfa      	ldrb	r2, [r7, #15]
 80093a8:	4613      	mov	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4a0d      	ldr	r2, [pc, #52]	; (80093e8 <UpdateTempSens+0x128>)
 80093b2:	4413      	add	r3, r2
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7f9 fbf9 	bl	8002bac <SEND_str>
			SEND_str(" - YES\n");
 80093ba:	480f      	ldr	r0, [pc, #60]	; (80093f8 <UpdateTempSens+0x138>)
 80093bc:	f7f9 fbf6 	bl	8002bac <SEND_str>
	for(uint8_t i = 0; i < Dev_Cnt; i++)
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
 80093c2:	3301      	adds	r3, #1
 80093c4:	73fb      	strb	r3, [r7, #15]
 80093c6:	4b0e      	ldr	r3, [pc, #56]	; (8009400 <UpdateTempSens+0x140>)
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	7bfa      	ldrb	r2, [r7, #15]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d380      	bcc.n	80092d2 <UpdateTempSens+0x12>
		}
		//-----------------------------------------------------------
	}

	__HAL_TIM_CLEAR_FLAG(&htim6, TIM_SR_UIF); // очищаем флаг
 80093d0:	4b0c      	ldr	r3, [pc, #48]	; (8009404 <UpdateTempSens+0x144>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f06f 0201 	mvn.w	r2, #1
 80093d8:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim6);
 80093da:	480a      	ldr	r0, [pc, #40]	; (8009404 <UpdateTempSens+0x144>)
 80093dc:	f003 fccb 	bl	800cd76 <HAL_TIM_Base_Start_IT>
}
 80093e0:	bf00      	nop
 80093e2:	3714      	adds	r7, #20
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093e8:	200013ac 	.word	0x200013ac
 80093ec:	2000138c 	.word	0x2000138c
 80093f0:	080206f0 	.word	0x080206f0
 80093f4:	08020714 	.word	0x08020714
 80093f8:	08020728 	.word	0x08020728
 80093fc:	08020730 	.word	0x08020730
 8009400:	200013a8 	.word	0x200013a8
 8009404:	20000b98 	.word	0x20000b98

08009408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800940c:	4b0e      	ldr	r3, [pc, #56]	; (8009448 <HAL_Init+0x40>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a0d      	ldr	r2, [pc, #52]	; (8009448 <HAL_Init+0x40>)
 8009412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009416:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009418:	4b0b      	ldr	r3, [pc, #44]	; (8009448 <HAL_Init+0x40>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a0a      	ldr	r2, [pc, #40]	; (8009448 <HAL_Init+0x40>)
 800941e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009422:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009424:	4b08      	ldr	r3, [pc, #32]	; (8009448 <HAL_Init+0x40>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a07      	ldr	r2, [pc, #28]	; (8009448 <HAL_Init+0x40>)
 800942a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800942e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009430:	2003      	movs	r0, #3
 8009432:	f000 fce4 	bl	8009dfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009436:	2000      	movs	r0, #0
 8009438:	f7fa f936 	bl	80036a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800943c:	f7fa f90c 	bl	8003658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	40023c00 	.word	0x40023c00

0800944c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800944c:	b480      	push	{r7}
 800944e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009450:	4b06      	ldr	r3, [pc, #24]	; (800946c <HAL_IncTick+0x20>)
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	461a      	mov	r2, r3
 8009456:	4b06      	ldr	r3, [pc, #24]	; (8009470 <HAL_IncTick+0x24>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4413      	add	r3, r2
 800945c:	4a04      	ldr	r2, [pc, #16]	; (8009470 <HAL_IncTick+0x24>)
 800945e:	6013      	str	r3, [r2, #0]
}
 8009460:	bf00      	nop
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	20000074 	.word	0x20000074
 8009470:	200013d4 	.word	0x200013d4

08009474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009474:	b480      	push	{r7}
 8009476:	af00      	add	r7, sp, #0
  return uwTick;
 8009478:	4b03      	ldr	r3, [pc, #12]	; (8009488 <HAL_GetTick+0x14>)
 800947a:	681b      	ldr	r3, [r3, #0]
}
 800947c:	4618      	mov	r0, r3
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop
 8009488:	200013d4 	.word	0x200013d4

0800948c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009494:	f7ff ffee 	bl	8009474 <HAL_GetTick>
 8009498:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a4:	d005      	beq.n	80094b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80094a6:	4b09      	ldr	r3, [pc, #36]	; (80094cc <HAL_Delay+0x40>)
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	461a      	mov	r2, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	4413      	add	r3, r2
 80094b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80094b2:	bf00      	nop
 80094b4:	f7ff ffde 	bl	8009474 <HAL_GetTick>
 80094b8:	4602      	mov	r2, r0
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d8f7      	bhi.n	80094b4 <HAL_Delay+0x28>
  {
  }
}
 80094c4:	bf00      	nop
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	20000074 	.word	0x20000074

080094d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d101      	bne.n	80094e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e033      	b.n	800954e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d109      	bne.n	8009502 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7f9 facc 	bl	8002a8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009506:	f003 0310 	and.w	r3, r3, #16
 800950a:	2b00      	cmp	r3, #0
 800950c:	d118      	bne.n	8009540 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009512:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009516:	f023 0302 	bic.w	r3, r3, #2
 800951a:	f043 0202 	orr.w	r2, r3, #2
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fa40 	bl	80099a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009532:	f023 0303 	bic.w	r3, r3, #3
 8009536:	f043 0201 	orr.w	r2, r3, #1
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	641a      	str	r2, [r3, #64]	; 0x40
 800953e:	e001      	b.n	8009544 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800954c:	7bfb      	ldrb	r3, [r7, #15]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
	...

08009558 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b086      	sub	sp, #24
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009564:	2300      	movs	r3, #0
 8009566:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800956e:	2b01      	cmp	r3, #1
 8009570:	d101      	bne.n	8009576 <HAL_ADC_Start_DMA+0x1e>
 8009572:	2302      	movs	r3, #2
 8009574:	e0cc      	b.n	8009710 <HAL_ADC_Start_DMA+0x1b8>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2201      	movs	r2, #1
 800957a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	f003 0301 	and.w	r3, r3, #1
 8009588:	2b01      	cmp	r3, #1
 800958a:	d018      	beq.n	80095be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f042 0201 	orr.w	r2, r2, #1
 800959a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800959c:	4b5e      	ldr	r3, [pc, #376]	; (8009718 <HAL_ADC_Start_DMA+0x1c0>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a5e      	ldr	r2, [pc, #376]	; (800971c <HAL_ADC_Start_DMA+0x1c4>)
 80095a2:	fba2 2303 	umull	r2, r3, r2, r3
 80095a6:	0c9a      	lsrs	r2, r3, #18
 80095a8:	4613      	mov	r3, r2
 80095aa:	005b      	lsls	r3, r3, #1
 80095ac:	4413      	add	r3, r2
 80095ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80095b0:	e002      	b.n	80095b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	3b01      	subs	r3, #1
 80095b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1f9      	bne.n	80095b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	f003 0301 	and.w	r3, r3, #1
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	f040 80a0 	bne.w	800970e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80095d6:	f023 0301 	bic.w	r3, r3, #1
 80095da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d007      	beq.n	8009600 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80095f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800960c:	d106      	bne.n	800961c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009612:	f023 0206 	bic.w	r2, r3, #6
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	645a      	str	r2, [r3, #68]	; 0x44
 800961a:	e002      	b.n	8009622 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800962a:	4b3d      	ldr	r3, [pc, #244]	; (8009720 <HAL_ADC_Start_DMA+0x1c8>)
 800962c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009632:	4a3c      	ldr	r2, [pc, #240]	; (8009724 <HAL_ADC_Start_DMA+0x1cc>)
 8009634:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963a:	4a3b      	ldr	r2, [pc, #236]	; (8009728 <HAL_ADC_Start_DMA+0x1d0>)
 800963c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009642:	4a3a      	ldr	r2, [pc, #232]	; (800972c <HAL_ADC_Start_DMA+0x1d4>)
 8009644:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800964e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	685a      	ldr	r2, [r3, #4]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800965e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	689a      	ldr	r2, [r3, #8]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800966e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	334c      	adds	r3, #76	; 0x4c
 800967a:	4619      	mov	r1, r3
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f000 fca0 	bl	8009fc4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	f003 031f 	and.w	r3, r3, #31
 800968c:	2b00      	cmp	r3, #0
 800968e:	d12a      	bne.n	80096e6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a26      	ldr	r2, [pc, #152]	; (8009730 <HAL_ADC_Start_DMA+0x1d8>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d015      	beq.n	80096c6 <HAL_ADC_Start_DMA+0x16e>
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a25      	ldr	r2, [pc, #148]	; (8009734 <HAL_ADC_Start_DMA+0x1dc>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d105      	bne.n	80096b0 <HAL_ADC_Start_DMA+0x158>
 80096a4:	4b1e      	ldr	r3, [pc, #120]	; (8009720 <HAL_ADC_Start_DMA+0x1c8>)
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	f003 031f 	and.w	r3, r3, #31
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00a      	beq.n	80096c6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a20      	ldr	r2, [pc, #128]	; (8009738 <HAL_ADC_Start_DMA+0x1e0>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d129      	bne.n	800970e <HAL_ADC_Start_DMA+0x1b6>
 80096ba:	4b19      	ldr	r3, [pc, #100]	; (8009720 <HAL_ADC_Start_DMA+0x1c8>)
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	f003 031f 	and.w	r3, r3, #31
 80096c2:	2b0f      	cmp	r3, #15
 80096c4:	d823      	bhi.n	800970e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d11c      	bne.n	800970e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	689a      	ldr	r2, [r3, #8]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80096e2:	609a      	str	r2, [r3, #8]
 80096e4:	e013      	b.n	800970e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a11      	ldr	r2, [pc, #68]	; (8009730 <HAL_ADC_Start_DMA+0x1d8>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d10e      	bne.n	800970e <HAL_ADC_Start_DMA+0x1b6>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d107      	bne.n	800970e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	689a      	ldr	r2, [r3, #8]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800970c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3718      	adds	r7, #24
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	20000008 	.word	0x20000008
 800971c:	431bde83 	.word	0x431bde83
 8009720:	40012300 	.word	0x40012300
 8009724:	08009ba1 	.word	0x08009ba1
 8009728:	08009c5b 	.word	0x08009c5b
 800972c:	08009c77 	.word	0x08009c77
 8009730:	40012000 	.word	0x40012000
 8009734:	40012100 	.word	0x40012100
 8009738:	40012200 	.word	0x40012200

0800973c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009758:	bf00      	nop
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800976e:	2300      	movs	r3, #0
 8009770:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009778:	2b01      	cmp	r3, #1
 800977a:	d101      	bne.n	8009780 <HAL_ADC_ConfigChannel+0x1c>
 800977c:	2302      	movs	r3, #2
 800977e:	e105      	b.n	800998c <HAL_ADC_ConfigChannel+0x228>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2b09      	cmp	r3, #9
 800978e:	d925      	bls.n	80097dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	68d9      	ldr	r1, [r3, #12]
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	b29b      	uxth	r3, r3
 800979c:	461a      	mov	r2, r3
 800979e:	4613      	mov	r3, r2
 80097a0:	005b      	lsls	r3, r3, #1
 80097a2:	4413      	add	r3, r2
 80097a4:	3b1e      	subs	r3, #30
 80097a6:	2207      	movs	r2, #7
 80097a8:	fa02 f303 	lsl.w	r3, r2, r3
 80097ac:	43da      	mvns	r2, r3
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	400a      	ands	r2, r1
 80097b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68d9      	ldr	r1, [r3, #12]
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	689a      	ldr	r2, [r3, #8]
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	4618      	mov	r0, r3
 80097c8:	4603      	mov	r3, r0
 80097ca:	005b      	lsls	r3, r3, #1
 80097cc:	4403      	add	r3, r0
 80097ce:	3b1e      	subs	r3, #30
 80097d0:	409a      	lsls	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	430a      	orrs	r2, r1
 80097d8:	60da      	str	r2, [r3, #12]
 80097da:	e022      	b.n	8009822 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6919      	ldr	r1, [r3, #16]
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	461a      	mov	r2, r3
 80097ea:	4613      	mov	r3, r2
 80097ec:	005b      	lsls	r3, r3, #1
 80097ee:	4413      	add	r3, r2
 80097f0:	2207      	movs	r2, #7
 80097f2:	fa02 f303 	lsl.w	r3, r2, r3
 80097f6:	43da      	mvns	r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	400a      	ands	r2, r1
 80097fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6919      	ldr	r1, [r3, #16]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	689a      	ldr	r2, [r3, #8]
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	b29b      	uxth	r3, r3
 8009810:	4618      	mov	r0, r3
 8009812:	4603      	mov	r3, r0
 8009814:	005b      	lsls	r3, r3, #1
 8009816:	4403      	add	r3, r0
 8009818:	409a      	lsls	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	430a      	orrs	r2, r1
 8009820:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	2b06      	cmp	r3, #6
 8009828:	d824      	bhi.n	8009874 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	685a      	ldr	r2, [r3, #4]
 8009834:	4613      	mov	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	4413      	add	r3, r2
 800983a:	3b05      	subs	r3, #5
 800983c:	221f      	movs	r2, #31
 800983e:	fa02 f303 	lsl.w	r3, r2, r3
 8009842:	43da      	mvns	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	400a      	ands	r2, r1
 800984a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	b29b      	uxth	r3, r3
 8009858:	4618      	mov	r0, r3
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	4613      	mov	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4413      	add	r3, r2
 8009864:	3b05      	subs	r3, #5
 8009866:	fa00 f203 	lsl.w	r2, r0, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	430a      	orrs	r2, r1
 8009870:	635a      	str	r2, [r3, #52]	; 0x34
 8009872:	e04c      	b.n	800990e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	2b0c      	cmp	r3, #12
 800987a:	d824      	bhi.n	80098c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	685a      	ldr	r2, [r3, #4]
 8009886:	4613      	mov	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	3b23      	subs	r3, #35	; 0x23
 800988e:	221f      	movs	r2, #31
 8009890:	fa02 f303 	lsl.w	r3, r2, r3
 8009894:	43da      	mvns	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	400a      	ands	r2, r1
 800989c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	4618      	mov	r0, r3
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	685a      	ldr	r2, [r3, #4]
 80098b0:	4613      	mov	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	3b23      	subs	r3, #35	; 0x23
 80098b8:	fa00 f203 	lsl.w	r2, r0, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	430a      	orrs	r2, r1
 80098c2:	631a      	str	r2, [r3, #48]	; 0x30
 80098c4:	e023      	b.n	800990e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	685a      	ldr	r2, [r3, #4]
 80098d0:	4613      	mov	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	3b41      	subs	r3, #65	; 0x41
 80098d8:	221f      	movs	r2, #31
 80098da:	fa02 f303 	lsl.w	r3, r2, r3
 80098de:	43da      	mvns	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	400a      	ands	r2, r1
 80098e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	4618      	mov	r0, r3
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	685a      	ldr	r2, [r3, #4]
 80098fa:	4613      	mov	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	3b41      	subs	r3, #65	; 0x41
 8009902:	fa00 f203 	lsl.w	r2, r0, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	430a      	orrs	r2, r1
 800990c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800990e:	4b22      	ldr	r3, [pc, #136]	; (8009998 <HAL_ADC_ConfigChannel+0x234>)
 8009910:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a21      	ldr	r2, [pc, #132]	; (800999c <HAL_ADC_ConfigChannel+0x238>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d109      	bne.n	8009930 <HAL_ADC_ConfigChannel+0x1cc>
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b12      	cmp	r3, #18
 8009922:	d105      	bne.n	8009930 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a19      	ldr	r2, [pc, #100]	; (800999c <HAL_ADC_ConfigChannel+0x238>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d123      	bne.n	8009982 <HAL_ADC_ConfigChannel+0x21e>
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2b10      	cmp	r3, #16
 8009940:	d003      	beq.n	800994a <HAL_ADC_ConfigChannel+0x1e6>
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b11      	cmp	r3, #17
 8009948:	d11b      	bne.n	8009982 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b10      	cmp	r3, #16
 800995c:	d111      	bne.n	8009982 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800995e:	4b10      	ldr	r3, [pc, #64]	; (80099a0 <HAL_ADC_ConfigChannel+0x23c>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a10      	ldr	r2, [pc, #64]	; (80099a4 <HAL_ADC_ConfigChannel+0x240>)
 8009964:	fba2 2303 	umull	r2, r3, r2, r3
 8009968:	0c9a      	lsrs	r2, r3, #18
 800996a:	4613      	mov	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	4413      	add	r3, r2
 8009970:	005b      	lsls	r3, r3, #1
 8009972:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009974:	e002      	b.n	800997c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	3b01      	subs	r3, #1
 800997a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1f9      	bne.n	8009976 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3714      	adds	r7, #20
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr
 8009998:	40012300 	.word	0x40012300
 800999c:	40012000 	.word	0x40012000
 80099a0:	20000008 	.word	0x20000008
 80099a4:	431bde83 	.word	0x431bde83

080099a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80099b0:	4b79      	ldr	r3, [pc, #484]	; (8009b98 <ADC_Init+0x1f0>)
 80099b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	685a      	ldr	r2, [r3, #4]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	431a      	orrs	r2, r3
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	685a      	ldr	r2, [r3, #4]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80099dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6859      	ldr	r1, [r3, #4]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	021a      	lsls	r2, r3, #8
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	430a      	orrs	r2, r1
 80099f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	685a      	ldr	r2, [r3, #4]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009a00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	6859      	ldr	r1, [r3, #4]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	689a      	ldr	r2, [r3, #8]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	430a      	orrs	r2, r1
 8009a12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	689a      	ldr	r2, [r3, #8]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6899      	ldr	r1, [r3, #8]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68da      	ldr	r2, [r3, #12]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	430a      	orrs	r2, r1
 8009a34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3a:	4a58      	ldr	r2, [pc, #352]	; (8009b9c <ADC_Init+0x1f4>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d022      	beq.n	8009a86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	689a      	ldr	r2, [r3, #8]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009a4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	6899      	ldr	r1, [r3, #8]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	430a      	orrs	r2, r1
 8009a60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	689a      	ldr	r2, [r3, #8]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009a70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6899      	ldr	r1, [r3, #8]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	430a      	orrs	r2, r1
 8009a82:	609a      	str	r2, [r3, #8]
 8009a84:	e00f      	b.n	8009aa6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	689a      	ldr	r2, [r3, #8]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009a94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	689a      	ldr	r2, [r3, #8]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009aa4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	689a      	ldr	r2, [r3, #8]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f022 0202 	bic.w	r2, r2, #2
 8009ab4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	6899      	ldr	r1, [r3, #8]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	7e1b      	ldrb	r3, [r3, #24]
 8009ac0:	005a      	lsls	r2, r3, #1
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	430a      	orrs	r2, r1
 8009ac8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d01b      	beq.n	8009b0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	685a      	ldr	r2, [r3, #4]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ae2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	685a      	ldr	r2, [r3, #4]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009af2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6859      	ldr	r1, [r3, #4]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afe:	3b01      	subs	r3, #1
 8009b00:	035a      	lsls	r2, r3, #13
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	605a      	str	r2, [r3, #4]
 8009b0a:	e007      	b.n	8009b1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	69db      	ldr	r3, [r3, #28]
 8009b36:	3b01      	subs	r3, #1
 8009b38:	051a      	lsls	r2, r3, #20
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	430a      	orrs	r2, r1
 8009b40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	689a      	ldr	r2, [r3, #8]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009b50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6899      	ldr	r1, [r3, #8]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009b5e:	025a      	lsls	r2, r3, #9
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	430a      	orrs	r2, r1
 8009b66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	689a      	ldr	r2, [r3, #8]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	6899      	ldr	r1, [r3, #8]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	695b      	ldr	r3, [r3, #20]
 8009b82:	029a      	lsls	r2, r3, #10
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	430a      	orrs	r2, r1
 8009b8a:	609a      	str	r2, [r3, #8]
}
 8009b8c:	bf00      	nop
 8009b8e:	3714      	adds	r7, #20
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr
 8009b98:	40012300 	.word	0x40012300
 8009b9c:	0f000001 	.word	0x0f000001

08009ba0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d13c      	bne.n	8009c34 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bbe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d12b      	bne.n	8009c2c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d127      	bne.n	8009c2c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d006      	beq.n	8009bf8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d119      	bne.n	8009c2c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	685a      	ldr	r2, [r3, #4]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f022 0220 	bic.w	r2, r2, #32
 8009c06:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d105      	bne.n	8009c2c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c24:	f043 0201 	orr.w	r2, r3, #1
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f7f9 fb73 	bl	8003318 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009c32:	e00e      	b.n	8009c52 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c38:	f003 0310 	and.w	r3, r3, #16
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d003      	beq.n	8009c48 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f7ff fd85 	bl	8009750 <HAL_ADC_ErrorCallback>
}
 8009c46:	e004      	b.n	8009c52 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	4798      	blx	r3
}
 8009c52:	bf00      	nop
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c66:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f7ff fd67 	bl	800973c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009c6e:	bf00      	nop
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b084      	sub	sp, #16
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c82:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2240      	movs	r2, #64	; 0x40
 8009c88:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c8e:	f043 0204 	orr.w	r2, r3, #4
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f7ff fd5a 	bl	8009750 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009c9c:	bf00      	nop
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f003 0307 	and.w	r3, r3, #7
 8009cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009cb4:	4b0c      	ldr	r3, [pc, #48]	; (8009ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009cd6:	4a04      	ldr	r2, [pc, #16]	; (8009ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	60d3      	str	r3, [r2, #12]
}
 8009cdc:	bf00      	nop
 8009cde:	3714      	adds	r7, #20
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr
 8009ce8:	e000ed00 	.word	0xe000ed00

08009cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009cec:	b480      	push	{r7}
 8009cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009cf0:	4b04      	ldr	r3, [pc, #16]	; (8009d04 <__NVIC_GetPriorityGrouping+0x18>)
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	0a1b      	lsrs	r3, r3, #8
 8009cf6:	f003 0307 	and.w	r3, r3, #7
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr
 8009d04:	e000ed00 	.word	0xe000ed00

08009d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	4603      	mov	r3, r0
 8009d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	db0b      	blt.n	8009d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009d1a:	79fb      	ldrb	r3, [r7, #7]
 8009d1c:	f003 021f 	and.w	r2, r3, #31
 8009d20:	4907      	ldr	r1, [pc, #28]	; (8009d40 <__NVIC_EnableIRQ+0x38>)
 8009d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d26:	095b      	lsrs	r3, r3, #5
 8009d28:	2001      	movs	r0, #1
 8009d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8009d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009d32:	bf00      	nop
 8009d34:	370c      	adds	r7, #12
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	e000e100 	.word	0xe000e100

08009d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	6039      	str	r1, [r7, #0]
 8009d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	db0a      	blt.n	8009d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	490c      	ldr	r1, [pc, #48]	; (8009d90 <__NVIC_SetPriority+0x4c>)
 8009d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d62:	0112      	lsls	r2, r2, #4
 8009d64:	b2d2      	uxtb	r2, r2
 8009d66:	440b      	add	r3, r1
 8009d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009d6c:	e00a      	b.n	8009d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	b2da      	uxtb	r2, r3
 8009d72:	4908      	ldr	r1, [pc, #32]	; (8009d94 <__NVIC_SetPriority+0x50>)
 8009d74:	79fb      	ldrb	r3, [r7, #7]
 8009d76:	f003 030f 	and.w	r3, r3, #15
 8009d7a:	3b04      	subs	r3, #4
 8009d7c:	0112      	lsls	r2, r2, #4
 8009d7e:	b2d2      	uxtb	r2, r2
 8009d80:	440b      	add	r3, r1
 8009d82:	761a      	strb	r2, [r3, #24]
}
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr
 8009d90:	e000e100 	.word	0xe000e100
 8009d94:	e000ed00 	.word	0xe000ed00

08009d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b089      	sub	sp, #36	; 0x24
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f003 0307 	and.w	r3, r3, #7
 8009daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	f1c3 0307 	rsb	r3, r3, #7
 8009db2:	2b04      	cmp	r3, #4
 8009db4:	bf28      	it	cs
 8009db6:	2304      	movcs	r3, #4
 8009db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009dba:	69fb      	ldr	r3, [r7, #28]
 8009dbc:	3304      	adds	r3, #4
 8009dbe:	2b06      	cmp	r3, #6
 8009dc0:	d902      	bls.n	8009dc8 <NVIC_EncodePriority+0x30>
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	3b03      	subs	r3, #3
 8009dc6:	e000      	b.n	8009dca <NVIC_EncodePriority+0x32>
 8009dc8:	2300      	movs	r3, #0
 8009dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd6:	43da      	mvns	r2, r3
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	401a      	ands	r2, r3
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009de0:	f04f 31ff 	mov.w	r1, #4294967295
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	fa01 f303 	lsl.w	r3, r1, r3
 8009dea:	43d9      	mvns	r1, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009df0:	4313      	orrs	r3, r2
         );
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3724      	adds	r7, #36	; 0x24
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr

08009dfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b082      	sub	sp, #8
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f7ff ff4c 	bl	8009ca4 <__NVIC_SetPriorityGrouping>
}
 8009e0c:	bf00      	nop
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b086      	sub	sp, #24
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
 8009e20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009e22:	2300      	movs	r3, #0
 8009e24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009e26:	f7ff ff61 	bl	8009cec <__NVIC_GetPriorityGrouping>
 8009e2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	68b9      	ldr	r1, [r7, #8]
 8009e30:	6978      	ldr	r0, [r7, #20]
 8009e32:	f7ff ffb1 	bl	8009d98 <NVIC_EncodePriority>
 8009e36:	4602      	mov	r2, r0
 8009e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7ff ff80 	bl	8009d44 <__NVIC_SetPriority>
}
 8009e44:	bf00      	nop
 8009e46:	3718      	adds	r7, #24
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	4603      	mov	r3, r0
 8009e54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7ff ff54 	bl	8009d08 <__NVIC_EnableIRQ>
}
 8009e60:	bf00      	nop
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009e70:	2300      	movs	r3, #0
 8009e72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009e74:	f7ff fafe 	bl	8009474 <HAL_GetTick>
 8009e78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d101      	bne.n	8009e84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	e099      	b.n	8009fb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2202      	movs	r2, #2
 8009e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f022 0201 	bic.w	r2, r2, #1
 8009ea2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009ea4:	e00f      	b.n	8009ec6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009ea6:	f7ff fae5 	bl	8009474 <HAL_GetTick>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	1ad3      	subs	r3, r2, r3
 8009eb0:	2b05      	cmp	r3, #5
 8009eb2:	d908      	bls.n	8009ec6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2220      	movs	r2, #32
 8009eb8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2203      	movs	r2, #3
 8009ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e078      	b.n	8009fb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f003 0301 	and.w	r3, r3, #1
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1e8      	bne.n	8009ea6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009edc:	697a      	ldr	r2, [r7, #20]
 8009ede:	4b38      	ldr	r3, [pc, #224]	; (8009fc0 <HAL_DMA_Init+0x158>)
 8009ee0:	4013      	ands	r3, r2
 8009ee2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685a      	ldr	r2, [r3, #4]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009ef2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	691b      	ldr	r3, [r3, #16]
 8009ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009efe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	699b      	ldr	r3, [r3, #24]
 8009f04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a1b      	ldr	r3, [r3, #32]
 8009f10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009f12:	697a      	ldr	r2, [r7, #20]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1c:	2b04      	cmp	r3, #4
 8009f1e:	d107      	bne.n	8009f30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	697a      	ldr	r2, [r7, #20]
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	697a      	ldr	r2, [r7, #20]
 8009f36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	f023 0307 	bic.w	r3, r3, #7
 8009f46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f56:	2b04      	cmp	r3, #4
 8009f58:	d117      	bne.n	8009f8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f5e:	697a      	ldr	r2, [r7, #20]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00e      	beq.n	8009f8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fa91 	bl	800a494 <DMA_CheckFifoParam>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d008      	beq.n	8009f8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2240      	movs	r2, #64	; 0x40
 8009f7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009f86:	2301      	movs	r3, #1
 8009f88:	e016      	b.n	8009fb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fa48 	bl	800a428 <DMA_CalcBaseAndBitshift>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fa0:	223f      	movs	r2, #63	; 0x3f
 8009fa2:	409a      	lsls	r2, r3
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3718      	adds	r7, #24
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	f010803f 	.word	0xf010803f

08009fc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b086      	sub	sp, #24
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
 8009fd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d101      	bne.n	8009fea <HAL_DMA_Start_IT+0x26>
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	e040      	b.n	800a06c <HAL_DMA_Start_IT+0xa8>
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d12f      	bne.n	800a05e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2202      	movs	r2, #2
 800a002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	68b9      	ldr	r1, [r7, #8]
 800a012:	68f8      	ldr	r0, [r7, #12]
 800a014:	f000 f9da 	bl	800a3cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a01c:	223f      	movs	r2, #63	; 0x3f
 800a01e:	409a      	lsls	r2, r3
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f042 0216 	orr.w	r2, r2, #22
 800a032:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d007      	beq.n	800a04c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f042 0208 	orr.w	r2, r2, #8
 800a04a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f042 0201 	orr.w	r2, r2, #1
 800a05a:	601a      	str	r2, [r3, #0]
 800a05c:	e005      	b.n	800a06a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a066:	2302      	movs	r3, #2
 800a068:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a06a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3718      	adds	r7, #24
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a082:	b2db      	uxtb	r3, r3
 800a084:	2b02      	cmp	r3, #2
 800a086:	d004      	beq.n	800a092 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2280      	movs	r2, #128	; 0x80
 800a08c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e00c      	b.n	800a0ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2205      	movs	r2, #5
 800a096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f022 0201 	bic.w	r2, r2, #1
 800a0a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a0aa:	2300      	movs	r3, #0
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b086      	sub	sp, #24
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a0c4:	4b92      	ldr	r3, [pc, #584]	; (800a310 <HAL_DMA_IRQHandler+0x258>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a92      	ldr	r2, [pc, #584]	; (800a314 <HAL_DMA_IRQHandler+0x25c>)
 800a0ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ce:	0a9b      	lsrs	r3, r3, #10
 800a0d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0e2:	2208      	movs	r2, #8
 800a0e4:	409a      	lsls	r2, r3
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d01a      	beq.n	800a124 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f003 0304 	and.w	r3, r3, #4
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d013      	beq.n	800a124 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f022 0204 	bic.w	r2, r2, #4
 800a10a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a110:	2208      	movs	r2, #8
 800a112:	409a      	lsls	r2, r3
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a11c:	f043 0201 	orr.w	r2, r3, #1
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a128:	2201      	movs	r2, #1
 800a12a:	409a      	lsls	r2, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	4013      	ands	r3, r2
 800a130:	2b00      	cmp	r3, #0
 800a132:	d012      	beq.n	800a15a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	695b      	ldr	r3, [r3, #20]
 800a13a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00b      	beq.n	800a15a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a146:	2201      	movs	r2, #1
 800a148:	409a      	lsls	r2, r3
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a152:	f043 0202 	orr.w	r2, r3, #2
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a15e:	2204      	movs	r2, #4
 800a160:	409a      	lsls	r2, r3
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	4013      	ands	r3, r2
 800a166:	2b00      	cmp	r3, #0
 800a168:	d012      	beq.n	800a190 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f003 0302 	and.w	r3, r3, #2
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00b      	beq.n	800a190 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a17c:	2204      	movs	r2, #4
 800a17e:	409a      	lsls	r2, r3
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a188:	f043 0204 	orr.w	r2, r3, #4
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a194:	2210      	movs	r2, #16
 800a196:	409a      	lsls	r2, r3
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	4013      	ands	r3, r2
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d043      	beq.n	800a228 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 0308 	and.w	r3, r3, #8
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d03c      	beq.n	800a228 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1b2:	2210      	movs	r2, #16
 800a1b4:	409a      	lsls	r2, r3
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d018      	beq.n	800a1fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d108      	bne.n	800a1e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d024      	beq.n	800a228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	4798      	blx	r3
 800a1e6:	e01f      	b.n	800a228 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d01b      	beq.n	800a228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	4798      	blx	r3
 800a1f8:	e016      	b.n	800a228 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a204:	2b00      	cmp	r3, #0
 800a206:	d107      	bne.n	800a218 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f022 0208 	bic.w	r2, r2, #8
 800a216:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d003      	beq.n	800a228 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a22c:	2220      	movs	r2, #32
 800a22e:	409a      	lsls	r2, r3
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	4013      	ands	r3, r2
 800a234:	2b00      	cmp	r3, #0
 800a236:	f000 808e 	beq.w	800a356 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f003 0310 	and.w	r3, r3, #16
 800a244:	2b00      	cmp	r3, #0
 800a246:	f000 8086 	beq.w	800a356 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a24e:	2220      	movs	r2, #32
 800a250:	409a      	lsls	r2, r3
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	2b05      	cmp	r3, #5
 800a260:	d136      	bne.n	800a2d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f022 0216 	bic.w	r2, r2, #22
 800a270:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	695a      	ldr	r2, [r3, #20]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a280:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a286:	2b00      	cmp	r3, #0
 800a288:	d103      	bne.n	800a292 <HAL_DMA_IRQHandler+0x1da>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d007      	beq.n	800a2a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f022 0208 	bic.w	r2, r2, #8
 800a2a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2a6:	223f      	movs	r2, #63	; 0x3f
 800a2a8:	409a      	lsls	r2, r3
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d07d      	beq.n	800a3c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	4798      	blx	r3
        }
        return;
 800a2ce:	e078      	b.n	800a3c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d01c      	beq.n	800a318 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d108      	bne.n	800a2fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d030      	beq.n	800a356 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	4798      	blx	r3
 800a2fc:	e02b      	b.n	800a356 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a302:	2b00      	cmp	r3, #0
 800a304:	d027      	beq.n	800a356 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	4798      	blx	r3
 800a30e:	e022      	b.n	800a356 <HAL_DMA_IRQHandler+0x29e>
 800a310:	20000008 	.word	0x20000008
 800a314:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a322:	2b00      	cmp	r3, #0
 800a324:	d10f      	bne.n	800a346 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f022 0210 	bic.w	r2, r2, #16
 800a334:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2201      	movs	r2, #1
 800a342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d003      	beq.n	800a356 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d032      	beq.n	800a3c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a362:	f003 0301 	and.w	r3, r3, #1
 800a366:	2b00      	cmp	r3, #0
 800a368:	d022      	beq.n	800a3b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2205      	movs	r2, #5
 800a36e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f022 0201 	bic.w	r2, r2, #1
 800a380:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	3301      	adds	r3, #1
 800a386:	60bb      	str	r3, [r7, #8]
 800a388:	697a      	ldr	r2, [r7, #20]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d307      	bcc.n	800a39e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 0301 	and.w	r3, r3, #1
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d1f2      	bne.n	800a382 <HAL_DMA_IRQHandler+0x2ca>
 800a39c:	e000      	b.n	800a3a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a39e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d005      	beq.n	800a3c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	4798      	blx	r3
 800a3c0:	e000      	b.n	800a3c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a3c2:	bf00      	nop
    }
  }
}
 800a3c4:	3718      	adds	r7, #24
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop

0800a3cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b085      	sub	sp, #20
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	607a      	str	r2, [r7, #4]
 800a3d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a3e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	683a      	ldr	r2, [r7, #0]
 800a3f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	2b40      	cmp	r3, #64	; 0x40
 800a3f8:	d108      	bne.n	800a40c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a40a:	e007      	b.n	800a41c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	60da      	str	r2, [r3, #12]
}
 800a41c:	bf00      	nop
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	b2db      	uxtb	r3, r3
 800a436:	3b10      	subs	r3, #16
 800a438:	4a14      	ldr	r2, [pc, #80]	; (800a48c <DMA_CalcBaseAndBitshift+0x64>)
 800a43a:	fba2 2303 	umull	r2, r3, r2, r3
 800a43e:	091b      	lsrs	r3, r3, #4
 800a440:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a442:	4a13      	ldr	r2, [pc, #76]	; (800a490 <DMA_CalcBaseAndBitshift+0x68>)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	4413      	add	r3, r2
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	461a      	mov	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2b03      	cmp	r3, #3
 800a454:	d909      	bls.n	800a46a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a45e:	f023 0303 	bic.w	r3, r3, #3
 800a462:	1d1a      	adds	r2, r3, #4
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	659a      	str	r2, [r3, #88]	; 0x58
 800a468:	e007      	b.n	800a47a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a472:	f023 0303 	bic.w	r3, r3, #3
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3714      	adds	r7, #20
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	aaaaaaab 	.word	0xaaaaaaab
 800a490:	08023a34 	.word	0x08023a34

0800a494 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a494:	b480      	push	{r7}
 800a496:	b085      	sub	sp, #20
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a49c:	2300      	movs	r3, #0
 800a49e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	699b      	ldr	r3, [r3, #24]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d11f      	bne.n	800a4ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	2b03      	cmp	r3, #3
 800a4b2:	d855      	bhi.n	800a560 <DMA_CheckFifoParam+0xcc>
 800a4b4:	a201      	add	r2, pc, #4	; (adr r2, 800a4bc <DMA_CheckFifoParam+0x28>)
 800a4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ba:	bf00      	nop
 800a4bc:	0800a4cd 	.word	0x0800a4cd
 800a4c0:	0800a4df 	.word	0x0800a4df
 800a4c4:	0800a4cd 	.word	0x0800a4cd
 800a4c8:	0800a561 	.word	0x0800a561
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d045      	beq.n	800a564 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a4dc:	e042      	b.n	800a564 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a4e6:	d13f      	bne.n	800a568 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a4ec:	e03c      	b.n	800a568 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	699b      	ldr	r3, [r3, #24]
 800a4f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4f6:	d121      	bne.n	800a53c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	2b03      	cmp	r3, #3
 800a4fc:	d836      	bhi.n	800a56c <DMA_CheckFifoParam+0xd8>
 800a4fe:	a201      	add	r2, pc, #4	; (adr r2, 800a504 <DMA_CheckFifoParam+0x70>)
 800a500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a504:	0800a515 	.word	0x0800a515
 800a508:	0800a51b 	.word	0x0800a51b
 800a50c:	0800a515 	.word	0x0800a515
 800a510:	0800a52d 	.word	0x0800a52d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	73fb      	strb	r3, [r7, #15]
      break;
 800a518:	e02f      	b.n	800a57a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a522:	2b00      	cmp	r3, #0
 800a524:	d024      	beq.n	800a570 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a52a:	e021      	b.n	800a570 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a530:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a534:	d11e      	bne.n	800a574 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a53a:	e01b      	b.n	800a574 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	2b02      	cmp	r3, #2
 800a540:	d902      	bls.n	800a548 <DMA_CheckFifoParam+0xb4>
 800a542:	2b03      	cmp	r3, #3
 800a544:	d003      	beq.n	800a54e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a546:	e018      	b.n	800a57a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	73fb      	strb	r3, [r7, #15]
      break;
 800a54c:	e015      	b.n	800a57a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a552:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00e      	beq.n	800a578 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	73fb      	strb	r3, [r7, #15]
      break;
 800a55e:	e00b      	b.n	800a578 <DMA_CheckFifoParam+0xe4>
      break;
 800a560:	bf00      	nop
 800a562:	e00a      	b.n	800a57a <DMA_CheckFifoParam+0xe6>
      break;
 800a564:	bf00      	nop
 800a566:	e008      	b.n	800a57a <DMA_CheckFifoParam+0xe6>
      break;
 800a568:	bf00      	nop
 800a56a:	e006      	b.n	800a57a <DMA_CheckFifoParam+0xe6>
      break;
 800a56c:	bf00      	nop
 800a56e:	e004      	b.n	800a57a <DMA_CheckFifoParam+0xe6>
      break;
 800a570:	bf00      	nop
 800a572:	e002      	b.n	800a57a <DMA_CheckFifoParam+0xe6>
      break;   
 800a574:	bf00      	nop
 800a576:	e000      	b.n	800a57a <DMA_CheckFifoParam+0xe6>
      break;
 800a578:	bf00      	nop
    }
  } 
  
  return status; 
 800a57a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3714      	adds	r7, #20
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b088      	sub	sp, #32
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800a590:	2300      	movs	r3, #0
 800a592:	61fb      	str	r3, [r7, #28]
 800a594:	2300      	movs	r3, #0
 800a596:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800a598:	4baa      	ldr	r3, [pc, #680]	; (800a844 <HAL_ETH_Init+0x2bc>)
 800a59a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800a59c:	2300      	movs	r3, #0
 800a59e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d101      	bne.n	800a5ae <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e185      	b.n	800a8ba <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d106      	bne.n	800a5c8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f004 f886 	bl	800e6d4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	60bb      	str	r3, [r7, #8]
 800a5cc:	4b9e      	ldr	r3, [pc, #632]	; (800a848 <HAL_ETH_Init+0x2c0>)
 800a5ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5d0:	4a9d      	ldr	r2, [pc, #628]	; (800a848 <HAL_ETH_Init+0x2c0>)
 800a5d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a5d6:	6453      	str	r3, [r2, #68]	; 0x44
 800a5d8:	4b9b      	ldr	r3, [pc, #620]	; (800a848 <HAL_ETH_Init+0x2c0>)
 800a5da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5e0:	60bb      	str	r3, [r7, #8]
 800a5e2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a5e4:	4b99      	ldr	r3, [pc, #612]	; (800a84c <HAL_ETH_Init+0x2c4>)
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	4a98      	ldr	r2, [pc, #608]	; (800a84c <HAL_ETH_Init+0x2c4>)
 800a5ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a5ee:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800a5f0:	4b96      	ldr	r3, [pc, #600]	; (800a84c <HAL_ETH_Init+0x2c4>)
 800a5f2:	685a      	ldr	r2, [r3, #4]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6a1b      	ldr	r3, [r3, #32]
 800a5f8:	4994      	ldr	r1, [pc, #592]	; (800a84c <HAL_ETH_Init+0x2c4>)
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f042 0201 	orr.w	r2, r2, #1
 800a610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a614:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800a616:	f7fe ff2d 	bl	8009474 <HAL_GetTick>
 800a61a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800a61c:	e011      	b.n	800a642 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800a61e:	f7fe ff29 	bl	8009474 <HAL_GetTick>
 800a622:	4602      	mov	r2, r0
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	1ad3      	subs	r3, r2, r3
 800a628:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a62c:	d909      	bls.n	800a642 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2203      	movs	r2, #3
 800a632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800a63e:	2303      	movs	r3, #3
 800a640:	e13b      	b.n	800a8ba <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f003 0301 	and.w	r3, r3, #1
 800a650:	2b00      	cmp	r3, #0
 800a652:	d1e4      	bne.n	800a61e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	f023 031c 	bic.w	r3, r3, #28
 800a662:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800a664:	f001 fe44 	bl	800c2f0 <HAL_RCC_GetHCLKFreq>
 800a668:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	4a78      	ldr	r2, [pc, #480]	; (800a850 <HAL_ETH_Init+0x2c8>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d908      	bls.n	800a684 <HAL_ETH_Init+0xfc>
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	4a77      	ldr	r2, [pc, #476]	; (800a854 <HAL_ETH_Init+0x2cc>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d804      	bhi.n	800a684 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800a67a:	69fb      	ldr	r3, [r7, #28]
 800a67c:	f043 0308 	orr.w	r3, r3, #8
 800a680:	61fb      	str	r3, [r7, #28]
 800a682:	e027      	b.n	800a6d4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800a684:	69bb      	ldr	r3, [r7, #24]
 800a686:	4a73      	ldr	r2, [pc, #460]	; (800a854 <HAL_ETH_Init+0x2cc>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d908      	bls.n	800a69e <HAL_ETH_Init+0x116>
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	4a72      	ldr	r2, [pc, #456]	; (800a858 <HAL_ETH_Init+0x2d0>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d804      	bhi.n	800a69e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	f043 030c 	orr.w	r3, r3, #12
 800a69a:	61fb      	str	r3, [r7, #28]
 800a69c:	e01a      	b.n	800a6d4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	4a6d      	ldr	r2, [pc, #436]	; (800a858 <HAL_ETH_Init+0x2d0>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d903      	bls.n	800a6ae <HAL_ETH_Init+0x126>
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	4a6c      	ldr	r2, [pc, #432]	; (800a85c <HAL_ETH_Init+0x2d4>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d911      	bls.n	800a6d2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	4a6a      	ldr	r2, [pc, #424]	; (800a85c <HAL_ETH_Init+0x2d4>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d908      	bls.n	800a6c8 <HAL_ETH_Init+0x140>
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	4a69      	ldr	r2, [pc, #420]	; (800a860 <HAL_ETH_Init+0x2d8>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d804      	bhi.n	800a6c8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	f043 0304 	orr.w	r3, r3, #4
 800a6c4:	61fb      	str	r3, [r7, #28]
 800a6c6:	e005      	b.n	800a6d4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	f043 0310 	orr.w	r3, r3, #16
 800a6ce:	61fb      	str	r3, [r7, #28]
 800a6d0:	e000      	b.n	800a6d4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800a6d2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	69fa      	ldr	r2, [r7, #28]
 800a6da:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800a6dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 fb16 	bl	800ad14 <HAL_ETH_WritePHYRegister>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d00b      	beq.n	800a706 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800a6f2:	6939      	ldr	r1, [r7, #16]
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 fccb 	bl	800b090 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800a702:	2301      	movs	r3, #1
 800a704:	e0d9      	b.n	800a8ba <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800a706:	20ff      	movs	r0, #255	; 0xff
 800a708:	f7fe fec0 	bl	800948c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 80a7 	beq.w	800a864 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800a716:	f7fe fead 	bl	8009474 <HAL_GetTick>
 800a71a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800a71c:	f107 030c 	add.w	r3, r7, #12
 800a720:	461a      	mov	r2, r3
 800a722:	2101      	movs	r1, #1
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 fa8d 	bl	800ac44 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800a72a:	f7fe fea3 	bl	8009474 <HAL_GetTick>
 800a72e:	4602      	mov	r2, r0
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	1ad3      	subs	r3, r2, r3
 800a734:	f241 3288 	movw	r2, #5000	; 0x1388
 800a738:	4293      	cmp	r3, r2
 800a73a:	d90f      	bls.n	800a75c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800a73c:	2301      	movs	r3, #1
 800a73e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800a740:	6939      	ldr	r1, [r7, #16]
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 fca4 	bl	800b090 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800a758:	2303      	movs	r3, #3
 800a75a:	e0ae      	b.n	800a8ba <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f003 0304 	and.w	r3, r3, #4
 800a762:	2b00      	cmp	r3, #0
 800a764:	d0da      	beq.n	800a71c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800a766:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a76a:	2100      	movs	r1, #0
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 fad1 	bl	800ad14 <HAL_ETH_WritePHYRegister>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00b      	beq.n	800a790 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800a77c:	6939      	ldr	r1, [r7, #16]
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fc86 	bl	800b090 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800a78c:	2301      	movs	r3, #1
 800a78e:	e094      	b.n	800a8ba <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800a790:	f7fe fe70 	bl	8009474 <HAL_GetTick>
 800a794:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800a796:	f107 030c 	add.w	r3, r7, #12
 800a79a:	461a      	mov	r2, r3
 800a79c:	2101      	movs	r1, #1
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 fa50 	bl	800ac44 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800a7a4:	f7fe fe66 	bl	8009474 <HAL_GetTick>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	1ad3      	subs	r3, r2, r3
 800a7ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d90f      	bls.n	800a7d6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800a7ba:	6939      	ldr	r1, [r7, #16]
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 fc67 	bl	800b090 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800a7d2:	2303      	movs	r3, #3
 800a7d4:	e071      	b.n	800a8ba <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f003 0320 	and.w	r3, r3, #32
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d0da      	beq.n	800a796 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800a7e0:	f107 030c 	add.w	r3, r7, #12
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	211f      	movs	r1, #31
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 fa2b 	bl	800ac44 <HAL_ETH_ReadPHYRegister>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d00b      	beq.n	800a80c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800a7f8:	6939      	ldr	r1, [r7, #16]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fc48 	bl	800b090 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800a808:	2301      	movs	r3, #1
 800a80a:	e056      	b.n	800a8ba <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f003 0310 	and.w	r3, r3, #16
 800a812:	2b00      	cmp	r3, #0
 800a814:	d004      	beq.n	800a820 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a81c:	60da      	str	r2, [r3, #12]
 800a81e:	e002      	b.n	800a826 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f003 0304 	and.w	r3, r3, #4
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d003      	beq.n	800a838 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	609a      	str	r2, [r3, #8]
 800a836:	e037      	b.n	800a8a8 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a83e:	609a      	str	r2, [r3, #8]
 800a840:	e032      	b.n	800a8a8 <HAL_ETH_Init+0x320>
 800a842:	bf00      	nop
 800a844:	03938700 	.word	0x03938700
 800a848:	40023800 	.word	0x40023800
 800a84c:	40013800 	.word	0x40013800
 800a850:	01312cff 	.word	0x01312cff
 800a854:	02160ebf 	.word	0x02160ebf
 800a858:	039386ff 	.word	0x039386ff
 800a85c:	05f5e0ff 	.word	0x05f5e0ff
 800a860:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	08db      	lsrs	r3, r3, #3
 800a86a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	085b      	lsrs	r3, r3, #1
 800a872:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800a874:	4313      	orrs	r3, r2
 800a876:	b29b      	uxth	r3, r3
 800a878:	461a      	mov	r2, r3
 800a87a:	2100      	movs	r1, #0
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 fa49 	bl	800ad14 <HAL_ETH_WritePHYRegister>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00b      	beq.n	800a8a0 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800a888:	2301      	movs	r3, #1
 800a88a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800a88c:	6939      	ldr	r1, [r7, #16]
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 fbfe 	bl	800b090 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	e00c      	b.n	800a8ba <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800a8a0:	f640 70ff 	movw	r0, #4095	; 0xfff
 800a8a4:	f7fe fdf2 	bl	800948c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800a8a8:	6939      	ldr	r1, [r7, #16]
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fbf0 	bl	800b090 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800a8b8:	2300      	movs	r3, #0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3720      	adds	r7, #32
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop

0800a8c4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b087      	sub	sp, #28
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	607a      	str	r2, [r7, #4]
 800a8d0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d101      	bne.n	800a8e4 <HAL_ETH_DMATxDescListInit+0x20>
 800a8e0:	2302      	movs	r3, #2
 800a8e2:	e052      	b.n	800a98a <HAL_ETH_DMATxDescListInit+0xc6>
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2202      	movs	r2, #2
 800a8f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	617b      	str	r3, [r7, #20]
 800a8fe:	e030      	b.n	800a962 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	015b      	lsls	r3, r3, #5
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	4413      	add	r3, r2
 800a908:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a910:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a918:	fb02 f303 	mul.w	r3, r2, r3
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	4413      	add	r3, r2
 800a920:	461a      	mov	r2, r3
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	69db      	ldr	r3, [r3, #28]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d105      	bne.n	800a93a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	3b01      	subs	r3, #1
 800a93e:	697a      	ldr	r2, [r7, #20]
 800a940:	429a      	cmp	r2, r3
 800a942:	d208      	bcs.n	800a956 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	3301      	adds	r3, #1
 800a948:	015b      	lsls	r3, r3, #5
 800a94a:	68ba      	ldr	r2, [r7, #8]
 800a94c:	4413      	add	r3, r2
 800a94e:	461a      	mov	r2, r3
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	60da      	str	r2, [r3, #12]
 800a954:	e002      	b.n	800a95c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	3301      	adds	r3, #1
 800a960:	617b      	str	r3, [r7, #20]
 800a962:	697a      	ldr	r2, [r7, #20]
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	429a      	cmp	r2, r3
 800a968:	d3ca      	bcc.n	800a900 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68ba      	ldr	r2, [r7, #8]
 800a970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a974:	3310      	adds	r3, #16
 800a976:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2200      	movs	r2, #0
 800a984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	371c      	adds	r7, #28
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr

0800a996 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800a996:	b480      	push	{r7}
 800a998:	b087      	sub	sp, #28
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	60f8      	str	r0, [r7, #12]
 800a99e:	60b9      	str	r1, [r7, #8]
 800a9a0:	607a      	str	r2, [r7, #4]
 800a9a2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d101      	bne.n	800a9b6 <HAL_ETH_DMARxDescListInit+0x20>
 800a9b2:	2302      	movs	r3, #2
 800a9b4:	e056      	b.n	800aa64 <HAL_ETH_DMARxDescListInit+0xce>
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	68ba      	ldr	r2, [r7, #8]
 800a9ca:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	617b      	str	r3, [r7, #20]
 800a9d0:	e034      	b.n	800aa3c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	015b      	lsls	r3, r3, #5
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	4413      	add	r3, r2
 800a9da:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a9e2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800a9ea:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a9f2:	fb02 f303 	mul.w	r3, r2, r3
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	699b      	ldr	r3, [r3, #24]
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d105      	bne.n	800aa14 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	3b01      	subs	r3, #1
 800aa18:	697a      	ldr	r2, [r7, #20]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d208      	bcs.n	800aa30 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	3301      	adds	r3, #1
 800aa22:	015b      	lsls	r3, r3, #5
 800aa24:	68ba      	ldr	r2, [r7, #8]
 800aa26:	4413      	add	r3, r2
 800aa28:	461a      	mov	r2, r3
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	60da      	str	r2, [r3, #12]
 800aa2e:	e002      	b.n	800aa36 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800aa30:	68ba      	ldr	r2, [r7, #8]
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	617b      	str	r3, [r7, #20]
 800aa3c:	697a      	ldr	r2, [r7, #20]
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d3c6      	bcc.n	800a9d2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa4e:	330c      	adds	r3, #12
 800aa50:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2201      	movs	r2, #1
 800aa56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	371c      	adds	r7, #28
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b087      	sub	sp, #28
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	617b      	str	r3, [r7, #20]
 800aa7e:	2300      	movs	r3, #0
 800aa80:	60fb      	str	r3, [r7, #12]
 800aa82:	2300      	movs	r3, #0
 800aa84:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d101      	bne.n	800aa94 <HAL_ETH_TransmitFrame+0x24>
 800aa90:	2302      	movs	r3, #2
 800aa92:	e0cd      	b.n	800ac30 <HAL_ETH_TransmitFrame+0x1c0>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2202      	movs	r2, #2
 800aaa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d109      	bne.n	800aabe <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2201      	movs	r2, #1
 800aaae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800aaba:	2301      	movs	r3, #1
 800aabc:	e0b8      	b.n	800ac30 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	da09      	bge.n	800aadc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2212      	movs	r2, #18
 800aacc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800aad8:	2301      	movs	r3, #1
 800aada:	e0a9      	b.n	800ac30 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d915      	bls.n	800ab12 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	4a54      	ldr	r2, [pc, #336]	; (800ac3c <HAL_ETH_TransmitFrame+0x1cc>)
 800aaea:	fba2 2303 	umull	r2, r3, r2, r3
 800aaee:	0a9b      	lsrs	r3, r3, #10
 800aaf0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800aaf2:	683a      	ldr	r2, [r7, #0]
 800aaf4:	4b51      	ldr	r3, [pc, #324]	; (800ac3c <HAL_ETH_TransmitFrame+0x1cc>)
 800aaf6:	fba3 1302 	umull	r1, r3, r3, r2
 800aafa:	0a9b      	lsrs	r3, r3, #10
 800aafc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800ab00:	fb01 f303 	mul.w	r3, r1, r3
 800ab04:	1ad3      	subs	r3, r2, r3
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d005      	beq.n	800ab16 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	617b      	str	r3, [r7, #20]
 800ab10:	e001      	b.n	800ab16 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800ab12:	2301      	movs	r3, #1
 800ab14:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d11c      	bne.n	800ab56 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab26:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800ab2a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab30:	683a      	ldr	r2, [r7, #0]
 800ab32:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800ab36:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab42:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800ab46:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	461a      	mov	r2, r3
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	62da      	str	r2, [r3, #44]	; 0x2c
 800ab54:	e04b      	b.n	800abee <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800ab56:	2300      	movs	r3, #0
 800ab58:	613b      	str	r3, [r7, #16]
 800ab5a:	e044      	b.n	800abe6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab66:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ab6a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d107      	bne.n	800ab82 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ab80:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab86:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800ab8a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	693a      	ldr	r2, [r7, #16]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d116      	bne.n	800abc4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800aba4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	4a25      	ldr	r2, [pc, #148]	; (800ac40 <HAL_ETH_TransmitFrame+0x1d0>)
 800abaa:	fb02 f203 	mul.w	r2, r2, r3
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	4413      	add	r3, r2
 800abb2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800abb6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800abc2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800abd2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	461a      	mov	r2, r3
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	3301      	adds	r3, #1
 800abe4:	613b      	str	r3, [r7, #16]
 800abe6:	693a      	ldr	r2, [r7, #16]
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	429a      	cmp	r2, r3
 800abec:	d3b6      	bcc.n	800ab5c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abf6:	3314      	adds	r3, #20
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f003 0304 	and.w	r3, r3, #4
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00d      	beq.n	800ac1e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac0a:	3314      	adds	r3, #20
 800ac0c:	2204      	movs	r2, #4
 800ac0e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac18:	3304      	adds	r3, #4
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2201      	movs	r2, #1
 800ac22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800ac2e:	2300      	movs	r3, #0
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	371c      	adds	r7, #28
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr
 800ac3c:	ac02b00b 	.word	0xac02b00b
 800ac40:	fffffa0c 	.word	0xfffffa0c

0800ac44 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b086      	sub	sp, #24
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	607a      	str	r2, [r7, #4]
 800ac50:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800ac52:	2300      	movs	r3, #0
 800ac54:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800ac56:	2300      	movs	r3, #0
 800ac58:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	2b82      	cmp	r3, #130	; 0x82
 800ac64:	d101      	bne.n	800ac6a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800ac66:	2302      	movs	r3, #2
 800ac68:	e050      	b.n	800ad0c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2282      	movs	r2, #130	; 0x82
 800ac6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	691b      	ldr	r3, [r3, #16]
 800ac78:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	f003 031c 	and.w	r3, r3, #28
 800ac80:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	8a1b      	ldrh	r3, [r3, #16]
 800ac86:	02db      	lsls	r3, r3, #11
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	697a      	ldr	r2, [r7, #20]
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800ac90:	897b      	ldrh	r3, [r7, #10]
 800ac92:	019b      	lsls	r3, r3, #6
 800ac94:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800ac98:	697a      	ldr	r2, [r7, #20]
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	f023 0302 	bic.w	r3, r3, #2
 800aca4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	f043 0301 	orr.w	r3, r3, #1
 800acac:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	697a      	ldr	r2, [r7, #20]
 800acb4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800acb6:	f7fe fbdd 	bl	8009474 <HAL_GetTick>
 800acba:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800acbc:	e015      	b.n	800acea <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800acbe:	f7fe fbd9 	bl	8009474 <HAL_GetTick>
 800acc2:	4602      	mov	r2, r0
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	1ad3      	subs	r3, r2, r3
 800acc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800accc:	d309      	bcc.n	800ace2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2201      	movs	r2, #1
 800acd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2200      	movs	r2, #0
 800acda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800acde:	2303      	movs	r3, #3
 800ace0:	e014      	b.n	800ad0c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	f003 0301 	and.w	r3, r3, #1
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1e4      	bne.n	800acbe <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	695b      	ldr	r3, [r3, #20]
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	461a      	mov	r2, r3
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2201      	movs	r2, #1
 800ad06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3718      	adds	r7, #24
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	607a      	str	r2, [r7, #4]
 800ad20:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800ad22:	2300      	movs	r3, #0
 800ad24:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800ad26:	2300      	movs	r3, #0
 800ad28:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	2b42      	cmp	r3, #66	; 0x42
 800ad34:	d101      	bne.n	800ad3a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800ad36:	2302      	movs	r3, #2
 800ad38:	e04e      	b.n	800add8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2242      	movs	r2, #66	; 0x42
 800ad3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	f003 031c 	and.w	r3, r3, #28
 800ad50:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	8a1b      	ldrh	r3, [r3, #16]
 800ad56:	02db      	lsls	r3, r3, #11
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800ad60:	897b      	ldrh	r3, [r7, #10]
 800ad62:	019b      	lsls	r3, r3, #6
 800ad64:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800ad68:	697a      	ldr	r2, [r7, #20]
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	f043 0302 	orr.w	r3, r3, #2
 800ad74:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	f043 0301 	orr.w	r3, r3, #1
 800ad7c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	b29a      	uxth	r2, r3
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	697a      	ldr	r2, [r7, #20]
 800ad8e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800ad90:	f7fe fb70 	bl	8009474 <HAL_GetTick>
 800ad94:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800ad96:	e015      	b.n	800adc4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800ad98:	f7fe fb6c 	bl	8009474 <HAL_GetTick>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	1ad3      	subs	r3, r2, r3
 800ada2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ada6:	d309      	bcc.n	800adbc <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2201      	movs	r2, #1
 800adac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800adb8:	2303      	movs	r3, #3
 800adba:	e00d      	b.n	800add8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	691b      	ldr	r3, [r3, #16]
 800adc2:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	f003 0301 	and.w	r3, r3, #1
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d1e4      	bne.n	800ad98 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2201      	movs	r2, #1
 800add2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800add6:	2300      	movs	r3, #0
}
 800add8:	4618      	mov	r0, r3
 800adda:	3718      	adds	r7, #24
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d101      	bne.n	800adf6 <HAL_ETH_Start+0x16>
 800adf2:	2302      	movs	r3, #2
 800adf4:	e01f      	b.n	800ae36 <HAL_ETH_Start+0x56>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2201      	movs	r2, #1
 800adfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2202      	movs	r2, #2
 800ae02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fb44 	bl	800b494 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 fb7b 	bl	800b508 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 fc12 	bl	800b63c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 fbaf 	bl	800b57c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f000 fbdc 	bl	800b5dc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2201      	movs	r2, #1
 800ae28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3708      	adds	r7, #8
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b082      	sub	sp, #8
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d101      	bne.n	800ae54 <HAL_ETH_Stop+0x16>
 800ae50:	2302      	movs	r3, #2
 800ae52:	e01f      	b.n	800ae94 <HAL_ETH_Stop+0x56>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2201      	movs	r2, #1
 800ae58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2202      	movs	r2, #2
 800ae60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 fba1 	bl	800b5ac <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 fbce 	bl	800b60c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 fb66 	bl	800b542 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fbe0 	bl	800b63c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 fb26 	bl	800b4ce <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2201      	movs	r2, #1
 800ae86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3708      	adds	r7, #8
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800aea6:	2300      	movs	r3, #0
 800aea8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d101      	bne.n	800aeb8 <HAL_ETH_ConfigMAC+0x1c>
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	e0e4      	b.n	800b082 <HAL_ETH_ConfigMAC+0x1e6>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2201      	movs	r2, #1
 800aebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2202      	movs	r2, #2
 800aec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f000 80b1 	beq.w	800b032 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	4b6c      	ldr	r3, [pc, #432]	; (800b08c <HAL_ETH_ConfigMAC+0x1f0>)
 800aedc:	4013      	ands	r3, r2
 800aede:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800aee8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800aeee:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800aef4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800aefa:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800af00:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800af06:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800af0c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800af12:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800af18:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800af1e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800af24:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800af2a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	4313      	orrs	r3, r2
 800af30:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800af42:	2001      	movs	r0, #1
 800af44:	f7fe faa2 	bl	800948c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	68fa      	ldr	r2, [r7, #12]
 800af4e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800af58:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800af5e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800af64:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800af6a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800af70:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800af76:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800af82:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800af84:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800af8e:	2001      	movs	r0, #1
 800af90:	f7fe fa7c 	bl	800948c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	68fa      	ldr	r2, [r7, #12]
 800af9a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	683a      	ldr	r2, [r7, #0]
 800afa2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800afa4:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	683a      	ldr	r2, [r7, #0]
 800afac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800afae:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	699b      	ldr	r3, [r3, #24]
 800afb6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800afb8:	68fa      	ldr	r2, [r7, #12]
 800afba:	f64f 7341 	movw	r3, #65345	; 0xff41
 800afbe:	4013      	ands	r3, r2
 800afc0:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afc6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800afcc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800afd2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800afd8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800afde:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800afe4:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	4313      	orrs	r3, r2
 800afea:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	68fa      	ldr	r2, [r7, #12]
 800aff2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	699b      	ldr	r3, [r3, #24]
 800affa:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800affc:	2001      	movs	r0, #1
 800affe:	f7fe fa45 	bl	800948c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	430a      	orrs	r2, r1
 800b018:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	69db      	ldr	r3, [r3, #28]
 800b020:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800b022:	2001      	movs	r0, #1
 800b024:	f7fe fa32 	bl	800948c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	61da      	str	r2, [r3, #28]
 800b030:	e01e      	b.n	800b070 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800b040:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	689a      	ldr	r2, [r3, #8]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	4313      	orrs	r3, r2
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	4313      	orrs	r3, r2
 800b050:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b062:	2001      	movs	r0, #1
 800b064:	f7fe fa12 	bl	800948c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2201      	movs	r2, #1
 800b074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	ff20810f 	.word	0xff20810f

0800b090 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b0b0      	sub	sp, #192	; 0xc0
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800b09a:	2300      	movs	r3, #0
 800b09c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d007      	beq.n	800b0b6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b0ac:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b0b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	69db      	ldr	r3, [r3, #28]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d103      	bne.n	800b0de <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800b0d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0da:	663b      	str	r3, [r7, #96]	; 0x60
 800b0dc:	e001      	b.n	800b0e2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800b0e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0e6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800b0fc:	2340      	movs	r3, #64	; 0x40
 800b0fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800b100:	2300      	movs	r3, #0
 800b102:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800b106:	2300      	movs	r3, #0
 800b108:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800b10c:	2300      	movs	r3, #0
 800b10e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800b112:	2300      	movs	r3, #0
 800b114:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800b118:	2300      	movs	r3, #0
 800b11a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800b11e:	2300      	movs	r3, #0
 800b120:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800b124:	2300      	movs	r3, #0
 800b126:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800b12a:	2300      	movs	r3, #0
 800b12c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800b130:	2380      	movs	r3, #128	; 0x80
 800b132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800b136:	2300      	movs	r3, #0
 800b138:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800b13c:	2300      	movs	r3, #0
 800b13e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800b142:	2300      	movs	r3, #0
 800b144:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800b148:	2300      	movs	r3, #0
 800b14a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800b14e:	2300      	movs	r3, #0
 800b150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800b154:	2300      	movs	r3, #0
 800b156:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800b164:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b168:	4bac      	ldr	r3, [pc, #688]	; (800b41c <ETH_MACDMAConfig+0x38c>)
 800b16a:	4013      	ands	r3, r2
 800b16c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800b170:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800b172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800b174:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800b176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800b178:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800b17a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800b17c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800b182:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800b184:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800b186:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800b188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800b18a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800b190:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800b192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800b194:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800b196:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800b198:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800b19a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800b19c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800b19e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800b1a0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800b1a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800b1a4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800b1a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b1b8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b1c4:	2001      	movs	r0, #1
 800b1c6:	f7fe f961 	bl	800948c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b1d2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b1d4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800b1d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b1d8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800b1da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800b1dc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800b1de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800b1e2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800b1e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800b1e8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800b1ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800b1ee:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800b1f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800b1f4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800b1f8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800b200:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b202:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b20e:	2001      	movs	r0, #1
 800b210:	f7fe f93c 	bl	800948c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b21c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b226:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b230:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	699b      	ldr	r3, [r3, #24]
 800b238:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800b23c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b240:	f64f 7341 	movw	r3, #65345	; 0xff41
 800b244:	4013      	ands	r3, r2
 800b246:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800b24a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b24e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800b250:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800b254:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800b256:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800b25a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800b25c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800b260:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800b262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800b266:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800b268:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800b26c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800b26e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b272:	4313      	orrs	r3, r2
 800b274:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b280:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	699b      	ldr	r3, [r3, #24]
 800b288:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b28c:	2001      	movs	r0, #1
 800b28e:	f7fe f8fd 	bl	800948c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b29a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800b29c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800b2a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	430a      	orrs	r2, r1
 800b2aa:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	69db      	ldr	r3, [r3, #28]
 800b2b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b2b6:	2001      	movs	r0, #1
 800b2b8:	f7fe f8e8 	bl	800948c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b2c4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800b2ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b2ce:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800b2d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b2d8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800b2ea:	2304      	movs	r3, #4
 800b2ec:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800b2ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b2f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800b2f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b2f8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800b2fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b2fe:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800b300:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b304:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800b306:	2380      	movs	r3, #128	; 0x80
 800b308:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800b30a:	2300      	movs	r3, #0
 800b30c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800b30e:	2300      	movs	r3, #0
 800b310:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b31a:	3318      	adds	r3, #24
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800b322:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b326:	4b3e      	ldr	r3, [pc, #248]	; (800b420 <ETH_MACDMAConfig+0x390>)
 800b328:	4013      	ands	r3, r2
 800b32a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800b32e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800b330:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800b332:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800b334:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800b336:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800b338:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800b33a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800b33c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800b33e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800b340:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800b342:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800b344:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800b346:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800b348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800b34a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800b34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800b34e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800b350:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b354:	4313      	orrs	r3, r2
 800b356:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b362:	3318      	adds	r3, #24
 800b364:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b368:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b372:	3318      	adds	r3, #24
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b37a:	2001      	movs	r0, #1
 800b37c:	f7fe f886 	bl	800948c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b388:	3318      	adds	r3, #24
 800b38a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b38e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800b390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800b392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800b394:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800b396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800b398:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800b39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800b39c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800b39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800b3a0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800b3a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3a4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800b3a6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800b3a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800b3aa:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800b3b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3b8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800b3c8:	2001      	movs	r0, #1
 800b3ca:	f7fe f85f 	bl	800948c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b3da:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	699b      	ldr	r3, [r3, #24]
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d10f      	bne.n	800b404 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3ec:	331c      	adds	r3, #28
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b3f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b400:	331c      	adds	r3, #28
 800b402:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	695b      	ldr	r3, [r3, #20]
 800b408:	461a      	mov	r2, r3
 800b40a:	2100      	movs	r1, #0
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f000 f809 	bl	800b424 <ETH_MACAddressConfig>
}
 800b412:	bf00      	nop
 800b414:	37c0      	adds	r7, #192	; 0xc0
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	ff20810f 	.word	0xff20810f
 800b420:	f8de3f23 	.word	0xf8de3f23

0800b424 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800b424:	b480      	push	{r7}
 800b426:	b087      	sub	sp, #28
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	3305      	adds	r3, #5
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	021b      	lsls	r3, r3, #8
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	3204      	adds	r2, #4
 800b43c:	7812      	ldrb	r2, [r2, #0]
 800b43e:	4313      	orrs	r3, r2
 800b440:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800b442:	68ba      	ldr	r2, [r7, #8]
 800b444:	4b11      	ldr	r3, [pc, #68]	; (800b48c <ETH_MACAddressConfig+0x68>)
 800b446:	4413      	add	r3, r2
 800b448:	461a      	mov	r2, r3
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	3303      	adds	r3, #3
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	061a      	lsls	r2, r3, #24
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	3302      	adds	r3, #2
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	041b      	lsls	r3, r3, #16
 800b45e:	431a      	orrs	r2, r3
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	3301      	adds	r3, #1
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	021b      	lsls	r3, r3, #8
 800b468:	4313      	orrs	r3, r2
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	7812      	ldrb	r2, [r2, #0]
 800b46e:	4313      	orrs	r3, r2
 800b470:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800b472:	68ba      	ldr	r2, [r7, #8]
 800b474:	4b06      	ldr	r3, [pc, #24]	; (800b490 <ETH_MACAddressConfig+0x6c>)
 800b476:	4413      	add	r3, r2
 800b478:	461a      	mov	r2, r3
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	6013      	str	r3, [r2, #0]
}
 800b47e:	bf00      	nop
 800b480:	371c      	adds	r7, #28
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	40028040 	.word	0x40028040
 800b490:	40028044 	.word	0x40028044

0800b494 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800b49c:	2300      	movs	r3, #0
 800b49e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f042 0208 	orr.w	r2, r2, #8
 800b4ae:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800b4b8:	2001      	movs	r0, #1
 800b4ba:	f000 f8e9 	bl	800b690 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	601a      	str	r2, [r3, #0]
}
 800b4c6:	bf00      	nop
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800b4ce:	b580      	push	{r7, lr}
 800b4d0:	b084      	sub	sp, #16
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f022 0208 	bic.w	r2, r2, #8
 800b4e8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800b4f2:	2001      	movs	r0, #1
 800b4f4:	f000 f8cc 	bl	800b690 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	68fa      	ldr	r2, [r7, #12]
 800b4fe:	601a      	str	r2, [r3, #0]
}
 800b500:	bf00      	nop
 800b502:	3710      	adds	r7, #16
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800b510:	2300      	movs	r3, #0
 800b512:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f042 0204 	orr.w	r2, r2, #4
 800b522:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800b52c:	2001      	movs	r0, #1
 800b52e:	f000 f8af 	bl	800b690 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	601a      	str	r2, [r3, #0]
}
 800b53a:	bf00      	nop
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800b542:	b580      	push	{r7, lr}
 800b544:	b084      	sub	sp, #16
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800b54a:	2300      	movs	r3, #0
 800b54c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	681a      	ldr	r2, [r3, #0]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f022 0204 	bic.w	r2, r2, #4
 800b55c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800b566:	2001      	movs	r0, #1
 800b568:	f000 f892 	bl	800b690 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	601a      	str	r2, [r3, #0]
}
 800b574:	bf00      	nop
 800b576:	3710      	adds	r7, #16
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b083      	sub	sp, #12
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b58c:	3318      	adds	r3, #24
 800b58e:	681a      	ldr	r2, [r3, #0]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b59c:	3318      	adds	r3, #24
 800b59e:	601a      	str	r2, [r3, #0]
}
 800b5a0:	bf00      	nop
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5bc:	3318      	adds	r3, #24
 800b5be:	681a      	ldr	r2, [r3, #0]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b5c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5cc:	3318      	adds	r3, #24
 800b5ce:	601a      	str	r2, [r3, #0]
}
 800b5d0:	bf00      	nop
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5ec:	3318      	adds	r3, #24
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f042 0202 	orr.w	r2, r2, #2
 800b5f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5fc:	3318      	adds	r3, #24
 800b5fe:	601a      	str	r2, [r3, #0]
}
 800b600:	bf00      	nop
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b61c:	3318      	adds	r3, #24
 800b61e:	681a      	ldr	r2, [r3, #0]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f022 0202 	bic.w	r2, r2, #2
 800b628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b62c:	3318      	adds	r3, #24
 800b62e:	601a      	str	r2, [r3, #0]
}
 800b630:	bf00      	nop
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800b644:	2300      	movs	r3, #0
 800b646:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b650:	3318      	adds	r3, #24
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b65c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b660:	3318      	adds	r3, #24
 800b662:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b66c:	3318      	adds	r3, #24
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800b672:	2001      	movs	r0, #1
 800b674:	f000 f80c 	bl	800b690 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b682:	3318      	adds	r3, #24
 800b684:	601a      	str	r2, [r3, #0]
}
 800b686:	bf00      	nop
 800b688:	3710      	adds	r7, #16
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
	...

0800b690 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800b690:	b480      	push	{r7}
 800b692:	b085      	sub	sp, #20
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b698:	4b0a      	ldr	r3, [pc, #40]	; (800b6c4 <ETH_Delay+0x34>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a0a      	ldr	r2, [pc, #40]	; (800b6c8 <ETH_Delay+0x38>)
 800b69e:	fba2 2303 	umull	r2, r3, r2, r3
 800b6a2:	0a5b      	lsrs	r3, r3, #9
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	fb02 f303 	mul.w	r3, r2, r3
 800b6aa:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800b6ac:	bf00      	nop
  } 
  while (Delay --);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	1e5a      	subs	r2, r3, #1
 800b6b2:	60fa      	str	r2, [r7, #12]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d1f9      	bne.n	800b6ac <ETH_Delay+0x1c>
}
 800b6b8:	bf00      	nop
 800b6ba:	3714      	adds	r7, #20
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr
 800b6c4:	20000008 	.word	0x20000008
 800b6c8:	10624dd3 	.word	0x10624dd3

0800b6cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b089      	sub	sp, #36	; 0x24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	61fb      	str	r3, [r7, #28]
 800b6e6:	e16b      	b.n	800b9c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b6f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	697a      	ldr	r2, [r7, #20]
 800b6f8:	4013      	ands	r3, r2
 800b6fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b6fc:	693a      	ldr	r2, [r7, #16]
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	429a      	cmp	r2, r3
 800b702:	f040 815a 	bne.w	800b9ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d00b      	beq.n	800b726 <HAL_GPIO_Init+0x5a>
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	2b02      	cmp	r3, #2
 800b714:	d007      	beq.n	800b726 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b71a:	2b11      	cmp	r3, #17
 800b71c:	d003      	beq.n	800b726 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	2b12      	cmp	r3, #18
 800b724:	d130      	bne.n	800b788 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b72c:	69fb      	ldr	r3, [r7, #28]
 800b72e:	005b      	lsls	r3, r3, #1
 800b730:	2203      	movs	r2, #3
 800b732:	fa02 f303 	lsl.w	r3, r2, r3
 800b736:	43db      	mvns	r3, r3
 800b738:	69ba      	ldr	r2, [r7, #24]
 800b73a:	4013      	ands	r3, r2
 800b73c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	68da      	ldr	r2, [r3, #12]
 800b742:	69fb      	ldr	r3, [r7, #28]
 800b744:	005b      	lsls	r3, r3, #1
 800b746:	fa02 f303 	lsl.w	r3, r2, r3
 800b74a:	69ba      	ldr	r2, [r7, #24]
 800b74c:	4313      	orrs	r3, r2
 800b74e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	69ba      	ldr	r2, [r7, #24]
 800b754:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b75c:	2201      	movs	r2, #1
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	fa02 f303 	lsl.w	r3, r2, r3
 800b764:	43db      	mvns	r3, r3
 800b766:	69ba      	ldr	r2, [r7, #24]
 800b768:	4013      	ands	r3, r2
 800b76a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	091b      	lsrs	r3, r3, #4
 800b772:	f003 0201 	and.w	r2, r3, #1
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	fa02 f303 	lsl.w	r3, r2, r3
 800b77c:	69ba      	ldr	r2, [r7, #24]
 800b77e:	4313      	orrs	r3, r2
 800b780:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	69ba      	ldr	r2, [r7, #24]
 800b786:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	68db      	ldr	r3, [r3, #12]
 800b78c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	005b      	lsls	r3, r3, #1
 800b792:	2203      	movs	r2, #3
 800b794:	fa02 f303 	lsl.w	r3, r2, r3
 800b798:	43db      	mvns	r3, r3
 800b79a:	69ba      	ldr	r2, [r7, #24]
 800b79c:	4013      	ands	r3, r2
 800b79e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	689a      	ldr	r2, [r3, #8]
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	005b      	lsls	r3, r3, #1
 800b7a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ac:	69ba      	ldr	r2, [r7, #24]
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	69ba      	ldr	r2, [r7, #24]
 800b7b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	2b02      	cmp	r3, #2
 800b7be:	d003      	beq.n	800b7c8 <HAL_GPIO_Init+0xfc>
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	2b12      	cmp	r3, #18
 800b7c6:	d123      	bne.n	800b810 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	08da      	lsrs	r2, r3, #3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	3208      	adds	r2, #8
 800b7d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b7d6:	69fb      	ldr	r3, [r7, #28]
 800b7d8:	f003 0307 	and.w	r3, r3, #7
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	220f      	movs	r2, #15
 800b7e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b7e4:	43db      	mvns	r3, r3
 800b7e6:	69ba      	ldr	r2, [r7, #24]
 800b7e8:	4013      	ands	r3, r2
 800b7ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	691a      	ldr	r2, [r3, #16]
 800b7f0:	69fb      	ldr	r3, [r7, #28]
 800b7f2:	f003 0307 	and.w	r3, r3, #7
 800b7f6:	009b      	lsls	r3, r3, #2
 800b7f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b7fc:	69ba      	ldr	r2, [r7, #24]
 800b7fe:	4313      	orrs	r3, r2
 800b800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b802:	69fb      	ldr	r3, [r7, #28]
 800b804:	08da      	lsrs	r2, r3, #3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	3208      	adds	r2, #8
 800b80a:	69b9      	ldr	r1, [r7, #24]
 800b80c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	005b      	lsls	r3, r3, #1
 800b81a:	2203      	movs	r2, #3
 800b81c:	fa02 f303 	lsl.w	r3, r2, r3
 800b820:	43db      	mvns	r3, r3
 800b822:	69ba      	ldr	r2, [r7, #24]
 800b824:	4013      	ands	r3, r2
 800b826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	f003 0203 	and.w	r2, r3, #3
 800b830:	69fb      	ldr	r3, [r7, #28]
 800b832:	005b      	lsls	r3, r3, #1
 800b834:	fa02 f303 	lsl.w	r3, r2, r3
 800b838:	69ba      	ldr	r2, [r7, #24]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	69ba      	ldr	r2, [r7, #24]
 800b842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	f000 80b4 	beq.w	800b9ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b852:	2300      	movs	r3, #0
 800b854:	60fb      	str	r3, [r7, #12]
 800b856:	4b5f      	ldr	r3, [pc, #380]	; (800b9d4 <HAL_GPIO_Init+0x308>)
 800b858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b85a:	4a5e      	ldr	r2, [pc, #376]	; (800b9d4 <HAL_GPIO_Init+0x308>)
 800b85c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b860:	6453      	str	r3, [r2, #68]	; 0x44
 800b862:	4b5c      	ldr	r3, [pc, #368]	; (800b9d4 <HAL_GPIO_Init+0x308>)
 800b864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b86a:	60fb      	str	r3, [r7, #12]
 800b86c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b86e:	4a5a      	ldr	r2, [pc, #360]	; (800b9d8 <HAL_GPIO_Init+0x30c>)
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	089b      	lsrs	r3, r3, #2
 800b874:	3302      	adds	r3, #2
 800b876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b87a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b87c:	69fb      	ldr	r3, [r7, #28]
 800b87e:	f003 0303 	and.w	r3, r3, #3
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	220f      	movs	r2, #15
 800b886:	fa02 f303 	lsl.w	r3, r2, r3
 800b88a:	43db      	mvns	r3, r3
 800b88c:	69ba      	ldr	r2, [r7, #24]
 800b88e:	4013      	ands	r3, r2
 800b890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	4a51      	ldr	r2, [pc, #324]	; (800b9dc <HAL_GPIO_Init+0x310>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d02b      	beq.n	800b8f2 <HAL_GPIO_Init+0x226>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	4a50      	ldr	r2, [pc, #320]	; (800b9e0 <HAL_GPIO_Init+0x314>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d025      	beq.n	800b8ee <HAL_GPIO_Init+0x222>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	4a4f      	ldr	r2, [pc, #316]	; (800b9e4 <HAL_GPIO_Init+0x318>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d01f      	beq.n	800b8ea <HAL_GPIO_Init+0x21e>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	4a4e      	ldr	r2, [pc, #312]	; (800b9e8 <HAL_GPIO_Init+0x31c>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d019      	beq.n	800b8e6 <HAL_GPIO_Init+0x21a>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	4a4d      	ldr	r2, [pc, #308]	; (800b9ec <HAL_GPIO_Init+0x320>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d013      	beq.n	800b8e2 <HAL_GPIO_Init+0x216>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4a4c      	ldr	r2, [pc, #304]	; (800b9f0 <HAL_GPIO_Init+0x324>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d00d      	beq.n	800b8de <HAL_GPIO_Init+0x212>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	4a4b      	ldr	r2, [pc, #300]	; (800b9f4 <HAL_GPIO_Init+0x328>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d007      	beq.n	800b8da <HAL_GPIO_Init+0x20e>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4a4a      	ldr	r2, [pc, #296]	; (800b9f8 <HAL_GPIO_Init+0x32c>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d101      	bne.n	800b8d6 <HAL_GPIO_Init+0x20a>
 800b8d2:	2307      	movs	r3, #7
 800b8d4:	e00e      	b.n	800b8f4 <HAL_GPIO_Init+0x228>
 800b8d6:	2308      	movs	r3, #8
 800b8d8:	e00c      	b.n	800b8f4 <HAL_GPIO_Init+0x228>
 800b8da:	2306      	movs	r3, #6
 800b8dc:	e00a      	b.n	800b8f4 <HAL_GPIO_Init+0x228>
 800b8de:	2305      	movs	r3, #5
 800b8e0:	e008      	b.n	800b8f4 <HAL_GPIO_Init+0x228>
 800b8e2:	2304      	movs	r3, #4
 800b8e4:	e006      	b.n	800b8f4 <HAL_GPIO_Init+0x228>
 800b8e6:	2303      	movs	r3, #3
 800b8e8:	e004      	b.n	800b8f4 <HAL_GPIO_Init+0x228>
 800b8ea:	2302      	movs	r3, #2
 800b8ec:	e002      	b.n	800b8f4 <HAL_GPIO_Init+0x228>
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e000      	b.n	800b8f4 <HAL_GPIO_Init+0x228>
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	69fa      	ldr	r2, [r7, #28]
 800b8f6:	f002 0203 	and.w	r2, r2, #3
 800b8fa:	0092      	lsls	r2, r2, #2
 800b8fc:	4093      	lsls	r3, r2
 800b8fe:	69ba      	ldr	r2, [r7, #24]
 800b900:	4313      	orrs	r3, r2
 800b902:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b904:	4934      	ldr	r1, [pc, #208]	; (800b9d8 <HAL_GPIO_Init+0x30c>)
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	089b      	lsrs	r3, r3, #2
 800b90a:	3302      	adds	r3, #2
 800b90c:	69ba      	ldr	r2, [r7, #24]
 800b90e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b912:	4b3a      	ldr	r3, [pc, #232]	; (800b9fc <HAL_GPIO_Init+0x330>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	43db      	mvns	r3, r3
 800b91c:	69ba      	ldr	r2, [r7, #24]
 800b91e:	4013      	ands	r3, r2
 800b920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d003      	beq.n	800b936 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b92e:	69ba      	ldr	r2, [r7, #24]
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	4313      	orrs	r3, r2
 800b934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b936:	4a31      	ldr	r2, [pc, #196]	; (800b9fc <HAL_GPIO_Init+0x330>)
 800b938:	69bb      	ldr	r3, [r7, #24]
 800b93a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b93c:	4b2f      	ldr	r3, [pc, #188]	; (800b9fc <HAL_GPIO_Init+0x330>)
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	43db      	mvns	r3, r3
 800b946:	69ba      	ldr	r2, [r7, #24]
 800b948:	4013      	ands	r3, r2
 800b94a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b954:	2b00      	cmp	r3, #0
 800b956:	d003      	beq.n	800b960 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b958:	69ba      	ldr	r2, [r7, #24]
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	4313      	orrs	r3, r2
 800b95e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b960:	4a26      	ldr	r2, [pc, #152]	; (800b9fc <HAL_GPIO_Init+0x330>)
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b966:	4b25      	ldr	r3, [pc, #148]	; (800b9fc <HAL_GPIO_Init+0x330>)
 800b968:	689b      	ldr	r3, [r3, #8]
 800b96a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	43db      	mvns	r3, r3
 800b970:	69ba      	ldr	r2, [r7, #24]
 800b972:	4013      	ands	r3, r2
 800b974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d003      	beq.n	800b98a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b982:	69ba      	ldr	r2, [r7, #24]
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	4313      	orrs	r3, r2
 800b988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b98a:	4a1c      	ldr	r2, [pc, #112]	; (800b9fc <HAL_GPIO_Init+0x330>)
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b990:	4b1a      	ldr	r3, [pc, #104]	; (800b9fc <HAL_GPIO_Init+0x330>)
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	43db      	mvns	r3, r3
 800b99a:	69ba      	ldr	r2, [r7, #24]
 800b99c:	4013      	ands	r3, r2
 800b99e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d003      	beq.n	800b9b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b9ac:	69ba      	ldr	r2, [r7, #24]
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b9b4:	4a11      	ldr	r2, [pc, #68]	; (800b9fc <HAL_GPIO_Init+0x330>)
 800b9b6:	69bb      	ldr	r3, [r7, #24]
 800b9b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b9ba:	69fb      	ldr	r3, [r7, #28]
 800b9bc:	3301      	adds	r3, #1
 800b9be:	61fb      	str	r3, [r7, #28]
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	2b0f      	cmp	r3, #15
 800b9c4:	f67f ae90 	bls.w	800b6e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b9c8:	bf00      	nop
 800b9ca:	3724      	adds	r7, #36	; 0x24
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr
 800b9d4:	40023800 	.word	0x40023800
 800b9d8:	40013800 	.word	0x40013800
 800b9dc:	40020000 	.word	0x40020000
 800b9e0:	40020400 	.word	0x40020400
 800b9e4:	40020800 	.word	0x40020800
 800b9e8:	40020c00 	.word	0x40020c00
 800b9ec:	40021000 	.word	0x40021000
 800b9f0:	40021400 	.word	0x40021400
 800b9f4:	40021800 	.word	0x40021800
 800b9f8:	40021c00 	.word	0x40021c00
 800b9fc:	40013c00 	.word	0x40013c00

0800ba00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b085      	sub	sp, #20
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	460b      	mov	r3, r1
 800ba0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	691a      	ldr	r2, [r3, #16]
 800ba10:	887b      	ldrh	r3, [r7, #2]
 800ba12:	4013      	ands	r3, r2
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	73fb      	strb	r3, [r7, #15]
 800ba1c:	e001      	b.n	800ba22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ba22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3714      	adds	r7, #20
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	460b      	mov	r3, r1
 800ba3a:	807b      	strh	r3, [r7, #2]
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ba40:	787b      	ldrb	r3, [r7, #1]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d003      	beq.n	800ba4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ba46:	887a      	ldrh	r2, [r7, #2]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ba4c:	e003      	b.n	800ba56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ba4e:	887b      	ldrh	r3, [r7, #2]
 800ba50:	041a      	lsls	r2, r3, #16
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	619a      	str	r2, [r3, #24]
}
 800ba56:	bf00      	nop
 800ba58:	370c      	adds	r7, #12
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr
	...

0800ba64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ba6e:	4b08      	ldr	r3, [pc, #32]	; (800ba90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ba70:	695a      	ldr	r2, [r3, #20]
 800ba72:	88fb      	ldrh	r3, [r7, #6]
 800ba74:	4013      	ands	r3, r2
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d006      	beq.n	800ba88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ba7a:	4a05      	ldr	r2, [pc, #20]	; (800ba90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ba7c:	88fb      	ldrh	r3, [r7, #6]
 800ba7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ba80:	88fb      	ldrh	r3, [r7, #6]
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7f7 fc3c 	bl	8003300 <HAL_GPIO_EXTI_Callback>
  }
}
 800ba88:	bf00      	nop
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	40013c00 	.word	0x40013c00

0800ba94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b086      	sub	sp, #24
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d101      	bne.n	800baa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800baa2:	2301      	movs	r3, #1
 800baa4:	e25b      	b.n	800bf5e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f003 0301 	and.w	r3, r3, #1
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d075      	beq.n	800bb9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bab2:	4ba3      	ldr	r3, [pc, #652]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	f003 030c 	and.w	r3, r3, #12
 800baba:	2b04      	cmp	r3, #4
 800babc:	d00c      	beq.n	800bad8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800babe:	4ba0      	ldr	r3, [pc, #640]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bac0:	689b      	ldr	r3, [r3, #8]
 800bac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bac6:	2b08      	cmp	r3, #8
 800bac8:	d112      	bne.n	800baf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800baca:	4b9d      	ldr	r3, [pc, #628]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bad2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bad6:	d10b      	bne.n	800baf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bad8:	4b99      	ldr	r3, [pc, #612]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d05b      	beq.n	800bb9c <HAL_RCC_OscConfig+0x108>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d157      	bne.n	800bb9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800baec:	2301      	movs	r3, #1
 800baee:	e236      	b.n	800bf5e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800baf8:	d106      	bne.n	800bb08 <HAL_RCC_OscConfig+0x74>
 800bafa:	4b91      	ldr	r3, [pc, #580]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4a90      	ldr	r2, [pc, #576]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bb00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb04:	6013      	str	r3, [r2, #0]
 800bb06:	e01d      	b.n	800bb44 <HAL_RCC_OscConfig+0xb0>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb10:	d10c      	bne.n	800bb2c <HAL_RCC_OscConfig+0x98>
 800bb12:	4b8b      	ldr	r3, [pc, #556]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a8a      	ldr	r2, [pc, #552]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bb18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bb1c:	6013      	str	r3, [r2, #0]
 800bb1e:	4b88      	ldr	r3, [pc, #544]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a87      	ldr	r2, [pc, #540]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bb24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb28:	6013      	str	r3, [r2, #0]
 800bb2a:	e00b      	b.n	800bb44 <HAL_RCC_OscConfig+0xb0>
 800bb2c:	4b84      	ldr	r3, [pc, #528]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a83      	ldr	r2, [pc, #524]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bb32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb36:	6013      	str	r3, [r2, #0]
 800bb38:	4b81      	ldr	r3, [pc, #516]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a80      	ldr	r2, [pc, #512]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bb3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bb42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d013      	beq.n	800bb74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb4c:	f7fd fc92 	bl	8009474 <HAL_GetTick>
 800bb50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb52:	e008      	b.n	800bb66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bb54:	f7fd fc8e 	bl	8009474 <HAL_GetTick>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	1ad3      	subs	r3, r2, r3
 800bb5e:	2b64      	cmp	r3, #100	; 0x64
 800bb60:	d901      	bls.n	800bb66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800bb62:	2303      	movs	r3, #3
 800bb64:	e1fb      	b.n	800bf5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb66:	4b76      	ldr	r3, [pc, #472]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d0f0      	beq.n	800bb54 <HAL_RCC_OscConfig+0xc0>
 800bb72:	e014      	b.n	800bb9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb74:	f7fd fc7e 	bl	8009474 <HAL_GetTick>
 800bb78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bb7a:	e008      	b.n	800bb8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bb7c:	f7fd fc7a 	bl	8009474 <HAL_GetTick>
 800bb80:	4602      	mov	r2, r0
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	1ad3      	subs	r3, r2, r3
 800bb86:	2b64      	cmp	r3, #100	; 0x64
 800bb88:	d901      	bls.n	800bb8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bb8a:	2303      	movs	r3, #3
 800bb8c:	e1e7      	b.n	800bf5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bb8e:	4b6c      	ldr	r3, [pc, #432]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d1f0      	bne.n	800bb7c <HAL_RCC_OscConfig+0xe8>
 800bb9a:	e000      	b.n	800bb9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bb9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f003 0302 	and.w	r3, r3, #2
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d063      	beq.n	800bc72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bbaa:	4b65      	ldr	r3, [pc, #404]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	f003 030c 	and.w	r3, r3, #12
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00b      	beq.n	800bbce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bbb6:	4b62      	ldr	r3, [pc, #392]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bbbe:	2b08      	cmp	r3, #8
 800bbc0:	d11c      	bne.n	800bbfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bbc2:	4b5f      	ldr	r3, [pc, #380]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d116      	bne.n	800bbfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bbce:	4b5c      	ldr	r3, [pc, #368]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f003 0302 	and.w	r3, r3, #2
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d005      	beq.n	800bbe6 <HAL_RCC_OscConfig+0x152>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	68db      	ldr	r3, [r3, #12]
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d001      	beq.n	800bbe6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e1bb      	b.n	800bf5e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bbe6:	4b56      	ldr	r3, [pc, #344]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	691b      	ldr	r3, [r3, #16]
 800bbf2:	00db      	lsls	r3, r3, #3
 800bbf4:	4952      	ldr	r1, [pc, #328]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bbfa:	e03a      	b.n	800bc72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d020      	beq.n	800bc46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bc04:	4b4f      	ldr	r3, [pc, #316]	; (800bd44 <HAL_RCC_OscConfig+0x2b0>)
 800bc06:	2201      	movs	r2, #1
 800bc08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc0a:	f7fd fc33 	bl	8009474 <HAL_GetTick>
 800bc0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc10:	e008      	b.n	800bc24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bc12:	f7fd fc2f 	bl	8009474 <HAL_GetTick>
 800bc16:	4602      	mov	r2, r0
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	2b02      	cmp	r3, #2
 800bc1e:	d901      	bls.n	800bc24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800bc20:	2303      	movs	r3, #3
 800bc22:	e19c      	b.n	800bf5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc24:	4b46      	ldr	r3, [pc, #280]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 0302 	and.w	r3, r3, #2
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d0f0      	beq.n	800bc12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc30:	4b43      	ldr	r3, [pc, #268]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	691b      	ldr	r3, [r3, #16]
 800bc3c:	00db      	lsls	r3, r3, #3
 800bc3e:	4940      	ldr	r1, [pc, #256]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bc40:	4313      	orrs	r3, r2
 800bc42:	600b      	str	r3, [r1, #0]
 800bc44:	e015      	b.n	800bc72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bc46:	4b3f      	ldr	r3, [pc, #252]	; (800bd44 <HAL_RCC_OscConfig+0x2b0>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc4c:	f7fd fc12 	bl	8009474 <HAL_GetTick>
 800bc50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bc52:	e008      	b.n	800bc66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bc54:	f7fd fc0e 	bl	8009474 <HAL_GetTick>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	1ad3      	subs	r3, r2, r3
 800bc5e:	2b02      	cmp	r3, #2
 800bc60:	d901      	bls.n	800bc66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800bc62:	2303      	movs	r3, #3
 800bc64:	e17b      	b.n	800bf5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bc66:	4b36      	ldr	r3, [pc, #216]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f003 0302 	and.w	r3, r3, #2
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d1f0      	bne.n	800bc54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f003 0308 	and.w	r3, r3, #8
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d030      	beq.n	800bce0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	695b      	ldr	r3, [r3, #20]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d016      	beq.n	800bcb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bc86:	4b30      	ldr	r3, [pc, #192]	; (800bd48 <HAL_RCC_OscConfig+0x2b4>)
 800bc88:	2201      	movs	r2, #1
 800bc8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc8c:	f7fd fbf2 	bl	8009474 <HAL_GetTick>
 800bc90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bc92:	e008      	b.n	800bca6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bc94:	f7fd fbee 	bl	8009474 <HAL_GetTick>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	1ad3      	subs	r3, r2, r3
 800bc9e:	2b02      	cmp	r3, #2
 800bca0:	d901      	bls.n	800bca6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800bca2:	2303      	movs	r3, #3
 800bca4:	e15b      	b.n	800bf5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bca6:	4b26      	ldr	r3, [pc, #152]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcaa:	f003 0302 	and.w	r3, r3, #2
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d0f0      	beq.n	800bc94 <HAL_RCC_OscConfig+0x200>
 800bcb2:	e015      	b.n	800bce0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bcb4:	4b24      	ldr	r3, [pc, #144]	; (800bd48 <HAL_RCC_OscConfig+0x2b4>)
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bcba:	f7fd fbdb 	bl	8009474 <HAL_GetTick>
 800bcbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bcc0:	e008      	b.n	800bcd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bcc2:	f7fd fbd7 	bl	8009474 <HAL_GetTick>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	1ad3      	subs	r3, r2, r3
 800bccc:	2b02      	cmp	r3, #2
 800bcce:	d901      	bls.n	800bcd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800bcd0:	2303      	movs	r3, #3
 800bcd2:	e144      	b.n	800bf5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bcd4:	4b1a      	ldr	r3, [pc, #104]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bcd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcd8:	f003 0302 	and.w	r3, r3, #2
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d1f0      	bne.n	800bcc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f003 0304 	and.w	r3, r3, #4
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f000 80a0 	beq.w	800be2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bcf2:	4b13      	ldr	r3, [pc, #76]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bcf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d10f      	bne.n	800bd1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bcfe:	2300      	movs	r3, #0
 800bd00:	60bb      	str	r3, [r7, #8]
 800bd02:	4b0f      	ldr	r3, [pc, #60]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bd04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd06:	4a0e      	ldr	r2, [pc, #56]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bd08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd0c:	6413      	str	r3, [r2, #64]	; 0x40
 800bd0e:	4b0c      	ldr	r3, [pc, #48]	; (800bd40 <HAL_RCC_OscConfig+0x2ac>)
 800bd10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd16:	60bb      	str	r3, [r7, #8]
 800bd18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd1e:	4b0b      	ldr	r3, [pc, #44]	; (800bd4c <HAL_RCC_OscConfig+0x2b8>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d121      	bne.n	800bd6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bd2a:	4b08      	ldr	r3, [pc, #32]	; (800bd4c <HAL_RCC_OscConfig+0x2b8>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a07      	ldr	r2, [pc, #28]	; (800bd4c <HAL_RCC_OscConfig+0x2b8>)
 800bd30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bd36:	f7fd fb9d 	bl	8009474 <HAL_GetTick>
 800bd3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd3c:	e011      	b.n	800bd62 <HAL_RCC_OscConfig+0x2ce>
 800bd3e:	bf00      	nop
 800bd40:	40023800 	.word	0x40023800
 800bd44:	42470000 	.word	0x42470000
 800bd48:	42470e80 	.word	0x42470e80
 800bd4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd50:	f7fd fb90 	bl	8009474 <HAL_GetTick>
 800bd54:	4602      	mov	r2, r0
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	1ad3      	subs	r3, r2, r3
 800bd5a:	2b02      	cmp	r3, #2
 800bd5c:	d901      	bls.n	800bd62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800bd5e:	2303      	movs	r3, #3
 800bd60:	e0fd      	b.n	800bf5e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd62:	4b81      	ldr	r3, [pc, #516]	; (800bf68 <HAL_RCC_OscConfig+0x4d4>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d0f0      	beq.n	800bd50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	689b      	ldr	r3, [r3, #8]
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	d106      	bne.n	800bd84 <HAL_RCC_OscConfig+0x2f0>
 800bd76:	4b7d      	ldr	r3, [pc, #500]	; (800bf6c <HAL_RCC_OscConfig+0x4d8>)
 800bd78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd7a:	4a7c      	ldr	r2, [pc, #496]	; (800bf6c <HAL_RCC_OscConfig+0x4d8>)
 800bd7c:	f043 0301 	orr.w	r3, r3, #1
 800bd80:	6713      	str	r3, [r2, #112]	; 0x70
 800bd82:	e01c      	b.n	800bdbe <HAL_RCC_OscConfig+0x32a>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	689b      	ldr	r3, [r3, #8]
 800bd88:	2b05      	cmp	r3, #5
 800bd8a:	d10c      	bne.n	800bda6 <HAL_RCC_OscConfig+0x312>
 800bd8c:	4b77      	ldr	r3, [pc, #476]	; (800bf6c <HAL_RCC_OscConfig+0x4d8>)
 800bd8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd90:	4a76      	ldr	r2, [pc, #472]	; (800bf6c <HAL_RCC_OscConfig+0x4d8>)
 800bd92:	f043 0304 	orr.w	r3, r3, #4
 800bd96:	6713      	str	r3, [r2, #112]	; 0x70
 800bd98:	4b74      	ldr	r3, [pc, #464]	; (800bf6c <HAL_RCC_OscConfig+0x4d8>)
 800bd9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd9c:	4a73      	ldr	r2, [pc, #460]	; (800bf6c <HAL_RCC_OscConfig+0x4d8>)
 800bd9e:	f043 0301 	orr.w	r3, r3, #1
 800bda2:	6713      	str	r3, [r2, #112]	; 0x70
 800bda4:	e00b      	b.n	800bdbe <HAL_RCC_OscConfig+0x32a>
 800bda6:	4b71      	ldr	r3, [pc, #452]	; (800bf6c <HAL_RCC_OscConfig+0x4d8>)
 800bda8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdaa:	4a70      	ldr	r2, [pc, #448]	; (800bf6c <HAL_RCC_OscConfig+0x4d8>)
 800bdac:	f023 0301 	bic.w	r3, r3, #1
 800bdb0:	6713      	str	r3, [r2, #112]	; 0x70
 800bdb2:	4b6e      	ldr	r3, [pc, #440]	; (800bf6c <HAL_RCC_OscConfig+0x4d8>)
 800bdb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdb6:	4a6d      	ldr	r2, [pc, #436]	; (800bf6c <HAL_RCC_OscConfig+0x4d8>)
 800bdb8:	f023 0304 	bic.w	r3, r3, #4
 800bdbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	689b      	ldr	r3, [r3, #8]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d015      	beq.n	800bdf2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bdc6:	f7fd fb55 	bl	8009474 <HAL_GetTick>
 800bdca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bdcc:	e00a      	b.n	800bde4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bdce:	f7fd fb51 	bl	8009474 <HAL_GetTick>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	1ad3      	subs	r3, r2, r3
 800bdd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d901      	bls.n	800bde4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800bde0:	2303      	movs	r3, #3
 800bde2:	e0bc      	b.n	800bf5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bde4:	4b61      	ldr	r3, [pc, #388]	; (800bf6c <HAL_RCC_OscConfig+0x4d8>)
 800bde6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bde8:	f003 0302 	and.w	r3, r3, #2
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d0ee      	beq.n	800bdce <HAL_RCC_OscConfig+0x33a>
 800bdf0:	e014      	b.n	800be1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bdf2:	f7fd fb3f 	bl	8009474 <HAL_GetTick>
 800bdf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bdf8:	e00a      	b.n	800be10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bdfa:	f7fd fb3b 	bl	8009474 <HAL_GetTick>
 800bdfe:	4602      	mov	r2, r0
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	1ad3      	subs	r3, r2, r3
 800be04:	f241 3288 	movw	r2, #5000	; 0x1388
 800be08:	4293      	cmp	r3, r2
 800be0a:	d901      	bls.n	800be10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800be0c:	2303      	movs	r3, #3
 800be0e:	e0a6      	b.n	800bf5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800be10:	4b56      	ldr	r3, [pc, #344]	; (800bf6c <HAL_RCC_OscConfig+0x4d8>)
 800be12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be14:	f003 0302 	and.w	r3, r3, #2
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1ee      	bne.n	800bdfa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800be1c:	7dfb      	ldrb	r3, [r7, #23]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d105      	bne.n	800be2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800be22:	4b52      	ldr	r3, [pc, #328]	; (800bf6c <HAL_RCC_OscConfig+0x4d8>)
 800be24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be26:	4a51      	ldr	r2, [pc, #324]	; (800bf6c <HAL_RCC_OscConfig+0x4d8>)
 800be28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	699b      	ldr	r3, [r3, #24]
 800be32:	2b00      	cmp	r3, #0
 800be34:	f000 8092 	beq.w	800bf5c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800be38:	4b4c      	ldr	r3, [pc, #304]	; (800bf6c <HAL_RCC_OscConfig+0x4d8>)
 800be3a:	689b      	ldr	r3, [r3, #8]
 800be3c:	f003 030c 	and.w	r3, r3, #12
 800be40:	2b08      	cmp	r3, #8
 800be42:	d05c      	beq.n	800befe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	699b      	ldr	r3, [r3, #24]
 800be48:	2b02      	cmp	r3, #2
 800be4a:	d141      	bne.n	800bed0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be4c:	4b48      	ldr	r3, [pc, #288]	; (800bf70 <HAL_RCC_OscConfig+0x4dc>)
 800be4e:	2200      	movs	r2, #0
 800be50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be52:	f7fd fb0f 	bl	8009474 <HAL_GetTick>
 800be56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be58:	e008      	b.n	800be6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800be5a:	f7fd fb0b 	bl	8009474 <HAL_GetTick>
 800be5e:	4602      	mov	r2, r0
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	1ad3      	subs	r3, r2, r3
 800be64:	2b02      	cmp	r3, #2
 800be66:	d901      	bls.n	800be6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800be68:	2303      	movs	r3, #3
 800be6a:	e078      	b.n	800bf5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be6c:	4b3f      	ldr	r3, [pc, #252]	; (800bf6c <HAL_RCC_OscConfig+0x4d8>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be74:	2b00      	cmp	r3, #0
 800be76:	d1f0      	bne.n	800be5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	69da      	ldr	r2, [r3, #28]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6a1b      	ldr	r3, [r3, #32]
 800be80:	431a      	orrs	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be86:	019b      	lsls	r3, r3, #6
 800be88:	431a      	orrs	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be8e:	085b      	lsrs	r3, r3, #1
 800be90:	3b01      	subs	r3, #1
 800be92:	041b      	lsls	r3, r3, #16
 800be94:	431a      	orrs	r2, r3
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be9a:	061b      	lsls	r3, r3, #24
 800be9c:	4933      	ldr	r1, [pc, #204]	; (800bf6c <HAL_RCC_OscConfig+0x4d8>)
 800be9e:	4313      	orrs	r3, r2
 800bea0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bea2:	4b33      	ldr	r3, [pc, #204]	; (800bf70 <HAL_RCC_OscConfig+0x4dc>)
 800bea4:	2201      	movs	r2, #1
 800bea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bea8:	f7fd fae4 	bl	8009474 <HAL_GetTick>
 800beac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800beae:	e008      	b.n	800bec2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800beb0:	f7fd fae0 	bl	8009474 <HAL_GetTick>
 800beb4:	4602      	mov	r2, r0
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	1ad3      	subs	r3, r2, r3
 800beba:	2b02      	cmp	r3, #2
 800bebc:	d901      	bls.n	800bec2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800bebe:	2303      	movs	r3, #3
 800bec0:	e04d      	b.n	800bf5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bec2:	4b2a      	ldr	r3, [pc, #168]	; (800bf6c <HAL_RCC_OscConfig+0x4d8>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800beca:	2b00      	cmp	r3, #0
 800becc:	d0f0      	beq.n	800beb0 <HAL_RCC_OscConfig+0x41c>
 800bece:	e045      	b.n	800bf5c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bed0:	4b27      	ldr	r3, [pc, #156]	; (800bf70 <HAL_RCC_OscConfig+0x4dc>)
 800bed2:	2200      	movs	r2, #0
 800bed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bed6:	f7fd facd 	bl	8009474 <HAL_GetTick>
 800beda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bedc:	e008      	b.n	800bef0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bede:	f7fd fac9 	bl	8009474 <HAL_GetTick>
 800bee2:	4602      	mov	r2, r0
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	1ad3      	subs	r3, r2, r3
 800bee8:	2b02      	cmp	r3, #2
 800beea:	d901      	bls.n	800bef0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800beec:	2303      	movs	r3, #3
 800beee:	e036      	b.n	800bf5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bef0:	4b1e      	ldr	r3, [pc, #120]	; (800bf6c <HAL_RCC_OscConfig+0x4d8>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d1f0      	bne.n	800bede <HAL_RCC_OscConfig+0x44a>
 800befc:	e02e      	b.n	800bf5c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	699b      	ldr	r3, [r3, #24]
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d101      	bne.n	800bf0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800bf06:	2301      	movs	r3, #1
 800bf08:	e029      	b.n	800bf5e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bf0a:	4b18      	ldr	r3, [pc, #96]	; (800bf6c <HAL_RCC_OscConfig+0x4d8>)
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	69db      	ldr	r3, [r3, #28]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d11c      	bne.n	800bf58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d115      	bne.n	800bf58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800bf2c:	68fa      	ldr	r2, [r7, #12]
 800bf2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bf32:	4013      	ands	r3, r2
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d10d      	bne.n	800bf58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d106      	bne.n	800bf58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d001      	beq.n	800bf5c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e000      	b.n	800bf5e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800bf5c:	2300      	movs	r3, #0
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3718      	adds	r7, #24
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	40007000 	.word	0x40007000
 800bf6c:	40023800 	.word	0x40023800
 800bf70:	42470060 	.word	0x42470060

0800bf74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d101      	bne.n	800bf88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bf84:	2301      	movs	r3, #1
 800bf86:	e0cc      	b.n	800c122 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bf88:	4b68      	ldr	r3, [pc, #416]	; (800c12c <HAL_RCC_ClockConfig+0x1b8>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f003 030f 	and.w	r3, r3, #15
 800bf90:	683a      	ldr	r2, [r7, #0]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d90c      	bls.n	800bfb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf96:	4b65      	ldr	r3, [pc, #404]	; (800c12c <HAL_RCC_ClockConfig+0x1b8>)
 800bf98:	683a      	ldr	r2, [r7, #0]
 800bf9a:	b2d2      	uxtb	r2, r2
 800bf9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf9e:	4b63      	ldr	r3, [pc, #396]	; (800c12c <HAL_RCC_ClockConfig+0x1b8>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f003 030f 	and.w	r3, r3, #15
 800bfa6:	683a      	ldr	r2, [r7, #0]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d001      	beq.n	800bfb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bfac:	2301      	movs	r3, #1
 800bfae:	e0b8      	b.n	800c122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f003 0302 	and.w	r3, r3, #2
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d020      	beq.n	800bffe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f003 0304 	and.w	r3, r3, #4
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d005      	beq.n	800bfd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bfc8:	4b59      	ldr	r3, [pc, #356]	; (800c130 <HAL_RCC_ClockConfig+0x1bc>)
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	4a58      	ldr	r2, [pc, #352]	; (800c130 <HAL_RCC_ClockConfig+0x1bc>)
 800bfce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bfd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f003 0308 	and.w	r3, r3, #8
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d005      	beq.n	800bfec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bfe0:	4b53      	ldr	r3, [pc, #332]	; (800c130 <HAL_RCC_ClockConfig+0x1bc>)
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	4a52      	ldr	r2, [pc, #328]	; (800c130 <HAL_RCC_ClockConfig+0x1bc>)
 800bfe6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bfea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bfec:	4b50      	ldr	r3, [pc, #320]	; (800c130 <HAL_RCC_ClockConfig+0x1bc>)
 800bfee:	689b      	ldr	r3, [r3, #8]
 800bff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	494d      	ldr	r1, [pc, #308]	; (800c130 <HAL_RCC_ClockConfig+0x1bc>)
 800bffa:	4313      	orrs	r3, r2
 800bffc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f003 0301 	and.w	r3, r3, #1
 800c006:	2b00      	cmp	r3, #0
 800c008:	d044      	beq.n	800c094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d107      	bne.n	800c022 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c012:	4b47      	ldr	r3, [pc, #284]	; (800c130 <HAL_RCC_ClockConfig+0x1bc>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d119      	bne.n	800c052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c01e:	2301      	movs	r3, #1
 800c020:	e07f      	b.n	800c122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	2b02      	cmp	r3, #2
 800c028:	d003      	beq.n	800c032 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c02e:	2b03      	cmp	r3, #3
 800c030:	d107      	bne.n	800c042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c032:	4b3f      	ldr	r3, [pc, #252]	; (800c130 <HAL_RCC_ClockConfig+0x1bc>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d109      	bne.n	800c052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c03e:	2301      	movs	r3, #1
 800c040:	e06f      	b.n	800c122 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c042:	4b3b      	ldr	r3, [pc, #236]	; (800c130 <HAL_RCC_ClockConfig+0x1bc>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f003 0302 	and.w	r3, r3, #2
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d101      	bne.n	800c052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c04e:	2301      	movs	r3, #1
 800c050:	e067      	b.n	800c122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c052:	4b37      	ldr	r3, [pc, #220]	; (800c130 <HAL_RCC_ClockConfig+0x1bc>)
 800c054:	689b      	ldr	r3, [r3, #8]
 800c056:	f023 0203 	bic.w	r2, r3, #3
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	4934      	ldr	r1, [pc, #208]	; (800c130 <HAL_RCC_ClockConfig+0x1bc>)
 800c060:	4313      	orrs	r3, r2
 800c062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c064:	f7fd fa06 	bl	8009474 <HAL_GetTick>
 800c068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c06a:	e00a      	b.n	800c082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c06c:	f7fd fa02 	bl	8009474 <HAL_GetTick>
 800c070:	4602      	mov	r2, r0
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	1ad3      	subs	r3, r2, r3
 800c076:	f241 3288 	movw	r2, #5000	; 0x1388
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d901      	bls.n	800c082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c07e:	2303      	movs	r3, #3
 800c080:	e04f      	b.n	800c122 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c082:	4b2b      	ldr	r3, [pc, #172]	; (800c130 <HAL_RCC_ClockConfig+0x1bc>)
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	f003 020c 	and.w	r2, r3, #12
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	429a      	cmp	r2, r3
 800c092:	d1eb      	bne.n	800c06c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c094:	4b25      	ldr	r3, [pc, #148]	; (800c12c <HAL_RCC_ClockConfig+0x1b8>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f003 030f 	and.w	r3, r3, #15
 800c09c:	683a      	ldr	r2, [r7, #0]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d20c      	bcs.n	800c0bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c0a2:	4b22      	ldr	r3, [pc, #136]	; (800c12c <HAL_RCC_ClockConfig+0x1b8>)
 800c0a4:	683a      	ldr	r2, [r7, #0]
 800c0a6:	b2d2      	uxtb	r2, r2
 800c0a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c0aa:	4b20      	ldr	r3, [pc, #128]	; (800c12c <HAL_RCC_ClockConfig+0x1b8>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f003 030f 	and.w	r3, r3, #15
 800c0b2:	683a      	ldr	r2, [r7, #0]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d001      	beq.n	800c0bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	e032      	b.n	800c122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f003 0304 	and.w	r3, r3, #4
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d008      	beq.n	800c0da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c0c8:	4b19      	ldr	r3, [pc, #100]	; (800c130 <HAL_RCC_ClockConfig+0x1bc>)
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	68db      	ldr	r3, [r3, #12]
 800c0d4:	4916      	ldr	r1, [pc, #88]	; (800c130 <HAL_RCC_ClockConfig+0x1bc>)
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f003 0308 	and.w	r3, r3, #8
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d009      	beq.n	800c0fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c0e6:	4b12      	ldr	r3, [pc, #72]	; (800c130 <HAL_RCC_ClockConfig+0x1bc>)
 800c0e8:	689b      	ldr	r3, [r3, #8]
 800c0ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	691b      	ldr	r3, [r3, #16]
 800c0f2:	00db      	lsls	r3, r3, #3
 800c0f4:	490e      	ldr	r1, [pc, #56]	; (800c130 <HAL_RCC_ClockConfig+0x1bc>)
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c0fa:	f000 f821 	bl	800c140 <HAL_RCC_GetSysClockFreq>
 800c0fe:	4601      	mov	r1, r0
 800c100:	4b0b      	ldr	r3, [pc, #44]	; (800c130 <HAL_RCC_ClockConfig+0x1bc>)
 800c102:	689b      	ldr	r3, [r3, #8]
 800c104:	091b      	lsrs	r3, r3, #4
 800c106:	f003 030f 	and.w	r3, r3, #15
 800c10a:	4a0a      	ldr	r2, [pc, #40]	; (800c134 <HAL_RCC_ClockConfig+0x1c0>)
 800c10c:	5cd3      	ldrb	r3, [r2, r3]
 800c10e:	fa21 f303 	lsr.w	r3, r1, r3
 800c112:	4a09      	ldr	r2, [pc, #36]	; (800c138 <HAL_RCC_ClockConfig+0x1c4>)
 800c114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c116:	4b09      	ldr	r3, [pc, #36]	; (800c13c <HAL_RCC_ClockConfig+0x1c8>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7f7 fac4 	bl	80036a8 <HAL_InitTick>

  return HAL_OK;
 800c120:	2300      	movs	r3, #0
}
 800c122:	4618      	mov	r0, r3
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	40023c00 	.word	0x40023c00
 800c130:	40023800 	.word	0x40023800
 800c134:	080234cc 	.word	0x080234cc
 800c138:	20000008 	.word	0x20000008
 800c13c:	20000070 	.word	0x20000070

0800c140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c142:	b085      	sub	sp, #20
 800c144:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c146:	2300      	movs	r3, #0
 800c148:	607b      	str	r3, [r7, #4]
 800c14a:	2300      	movs	r3, #0
 800c14c:	60fb      	str	r3, [r7, #12]
 800c14e:	2300      	movs	r3, #0
 800c150:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c152:	2300      	movs	r3, #0
 800c154:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c156:	4b63      	ldr	r3, [pc, #396]	; (800c2e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	f003 030c 	and.w	r3, r3, #12
 800c15e:	2b04      	cmp	r3, #4
 800c160:	d007      	beq.n	800c172 <HAL_RCC_GetSysClockFreq+0x32>
 800c162:	2b08      	cmp	r3, #8
 800c164:	d008      	beq.n	800c178 <HAL_RCC_GetSysClockFreq+0x38>
 800c166:	2b00      	cmp	r3, #0
 800c168:	f040 80b4 	bne.w	800c2d4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c16c:	4b5e      	ldr	r3, [pc, #376]	; (800c2e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c16e:	60bb      	str	r3, [r7, #8]
       break;
 800c170:	e0b3      	b.n	800c2da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c172:	4b5e      	ldr	r3, [pc, #376]	; (800c2ec <HAL_RCC_GetSysClockFreq+0x1ac>)
 800c174:	60bb      	str	r3, [r7, #8]
      break;
 800c176:	e0b0      	b.n	800c2da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c178:	4b5a      	ldr	r3, [pc, #360]	; (800c2e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c180:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c182:	4b58      	ldr	r3, [pc, #352]	; (800c2e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d04a      	beq.n	800c224 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c18e:	4b55      	ldr	r3, [pc, #340]	; (800c2e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	099b      	lsrs	r3, r3, #6
 800c194:	f04f 0400 	mov.w	r4, #0
 800c198:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c19c:	f04f 0200 	mov.w	r2, #0
 800c1a0:	ea03 0501 	and.w	r5, r3, r1
 800c1a4:	ea04 0602 	and.w	r6, r4, r2
 800c1a8:	4629      	mov	r1, r5
 800c1aa:	4632      	mov	r2, r6
 800c1ac:	f04f 0300 	mov.w	r3, #0
 800c1b0:	f04f 0400 	mov.w	r4, #0
 800c1b4:	0154      	lsls	r4, r2, #5
 800c1b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c1ba:	014b      	lsls	r3, r1, #5
 800c1bc:	4619      	mov	r1, r3
 800c1be:	4622      	mov	r2, r4
 800c1c0:	1b49      	subs	r1, r1, r5
 800c1c2:	eb62 0206 	sbc.w	r2, r2, r6
 800c1c6:	f04f 0300 	mov.w	r3, #0
 800c1ca:	f04f 0400 	mov.w	r4, #0
 800c1ce:	0194      	lsls	r4, r2, #6
 800c1d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c1d4:	018b      	lsls	r3, r1, #6
 800c1d6:	1a5b      	subs	r3, r3, r1
 800c1d8:	eb64 0402 	sbc.w	r4, r4, r2
 800c1dc:	f04f 0100 	mov.w	r1, #0
 800c1e0:	f04f 0200 	mov.w	r2, #0
 800c1e4:	00e2      	lsls	r2, r4, #3
 800c1e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c1ea:	00d9      	lsls	r1, r3, #3
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	4614      	mov	r4, r2
 800c1f0:	195b      	adds	r3, r3, r5
 800c1f2:	eb44 0406 	adc.w	r4, r4, r6
 800c1f6:	f04f 0100 	mov.w	r1, #0
 800c1fa:	f04f 0200 	mov.w	r2, #0
 800c1fe:	0262      	lsls	r2, r4, #9
 800c200:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800c204:	0259      	lsls	r1, r3, #9
 800c206:	460b      	mov	r3, r1
 800c208:	4614      	mov	r4, r2
 800c20a:	4618      	mov	r0, r3
 800c20c:	4621      	mov	r1, r4
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f04f 0400 	mov.w	r4, #0
 800c214:	461a      	mov	r2, r3
 800c216:	4623      	mov	r3, r4
 800c218:	f7f4 fd46 	bl	8000ca8 <__aeabi_uldivmod>
 800c21c:	4603      	mov	r3, r0
 800c21e:	460c      	mov	r4, r1
 800c220:	60fb      	str	r3, [r7, #12]
 800c222:	e049      	b.n	800c2b8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c224:	4b2f      	ldr	r3, [pc, #188]	; (800c2e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	099b      	lsrs	r3, r3, #6
 800c22a:	f04f 0400 	mov.w	r4, #0
 800c22e:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c232:	f04f 0200 	mov.w	r2, #0
 800c236:	ea03 0501 	and.w	r5, r3, r1
 800c23a:	ea04 0602 	and.w	r6, r4, r2
 800c23e:	4629      	mov	r1, r5
 800c240:	4632      	mov	r2, r6
 800c242:	f04f 0300 	mov.w	r3, #0
 800c246:	f04f 0400 	mov.w	r4, #0
 800c24a:	0154      	lsls	r4, r2, #5
 800c24c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c250:	014b      	lsls	r3, r1, #5
 800c252:	4619      	mov	r1, r3
 800c254:	4622      	mov	r2, r4
 800c256:	1b49      	subs	r1, r1, r5
 800c258:	eb62 0206 	sbc.w	r2, r2, r6
 800c25c:	f04f 0300 	mov.w	r3, #0
 800c260:	f04f 0400 	mov.w	r4, #0
 800c264:	0194      	lsls	r4, r2, #6
 800c266:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c26a:	018b      	lsls	r3, r1, #6
 800c26c:	1a5b      	subs	r3, r3, r1
 800c26e:	eb64 0402 	sbc.w	r4, r4, r2
 800c272:	f04f 0100 	mov.w	r1, #0
 800c276:	f04f 0200 	mov.w	r2, #0
 800c27a:	00e2      	lsls	r2, r4, #3
 800c27c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c280:	00d9      	lsls	r1, r3, #3
 800c282:	460b      	mov	r3, r1
 800c284:	4614      	mov	r4, r2
 800c286:	195b      	adds	r3, r3, r5
 800c288:	eb44 0406 	adc.w	r4, r4, r6
 800c28c:	f04f 0100 	mov.w	r1, #0
 800c290:	f04f 0200 	mov.w	r2, #0
 800c294:	02a2      	lsls	r2, r4, #10
 800c296:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c29a:	0299      	lsls	r1, r3, #10
 800c29c:	460b      	mov	r3, r1
 800c29e:	4614      	mov	r4, r2
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f04f 0400 	mov.w	r4, #0
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	4623      	mov	r3, r4
 800c2ae:	f7f4 fcfb 	bl	8000ca8 <__aeabi_uldivmod>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	460c      	mov	r4, r1
 800c2b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c2b8:	4b0a      	ldr	r3, [pc, #40]	; (800c2e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	0c1b      	lsrs	r3, r3, #16
 800c2be:	f003 0303 	and.w	r3, r3, #3
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	005b      	lsls	r3, r3, #1
 800c2c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c2c8:	68fa      	ldr	r2, [r7, #12]
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2d0:	60bb      	str	r3, [r7, #8]
      break;
 800c2d2:	e002      	b.n	800c2da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c2d4:	4b04      	ldr	r3, [pc, #16]	; (800c2e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c2d6:	60bb      	str	r3, [r7, #8]
      break;
 800c2d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c2da:	68bb      	ldr	r3, [r7, #8]
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3714      	adds	r7, #20
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2e4:	40023800 	.word	0x40023800
 800c2e8:	00f42400 	.word	0x00f42400
 800c2ec:	007a1200 	.word	0x007a1200

0800c2f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c2f4:	4b03      	ldr	r3, [pc, #12]	; (800c304 <HAL_RCC_GetHCLKFreq+0x14>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr
 800c302:	bf00      	nop
 800c304:	20000008 	.word	0x20000008

0800c308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c30c:	f7ff fff0 	bl	800c2f0 <HAL_RCC_GetHCLKFreq>
 800c310:	4601      	mov	r1, r0
 800c312:	4b05      	ldr	r3, [pc, #20]	; (800c328 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c314:	689b      	ldr	r3, [r3, #8]
 800c316:	0a9b      	lsrs	r3, r3, #10
 800c318:	f003 0307 	and.w	r3, r3, #7
 800c31c:	4a03      	ldr	r2, [pc, #12]	; (800c32c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c31e:	5cd3      	ldrb	r3, [r2, r3]
 800c320:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c324:	4618      	mov	r0, r3
 800c326:	bd80      	pop	{r7, pc}
 800c328:	40023800 	.word	0x40023800
 800c32c:	080234dc 	.word	0x080234dc

0800c330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c334:	f7ff ffdc 	bl	800c2f0 <HAL_RCC_GetHCLKFreq>
 800c338:	4601      	mov	r1, r0
 800c33a:	4b05      	ldr	r3, [pc, #20]	; (800c350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c33c:	689b      	ldr	r3, [r3, #8]
 800c33e:	0b5b      	lsrs	r3, r3, #13
 800c340:	f003 0307 	and.w	r3, r3, #7
 800c344:	4a03      	ldr	r2, [pc, #12]	; (800c354 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c346:	5cd3      	ldrb	r3, [r2, r3]
 800c348:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	bd80      	pop	{r7, pc}
 800c350:	40023800 	.word	0x40023800
 800c354:	080234dc 	.word	0x080234dc

0800c358 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c358:	b480      	push	{r7}
 800c35a:	b083      	sub	sp, #12
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	220f      	movs	r2, #15
 800c366:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c368:	4b12      	ldr	r3, [pc, #72]	; (800c3b4 <HAL_RCC_GetClockConfig+0x5c>)
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	f003 0203 	and.w	r2, r3, #3
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c374:	4b0f      	ldr	r3, [pc, #60]	; (800c3b4 <HAL_RCC_GetClockConfig+0x5c>)
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c380:	4b0c      	ldr	r3, [pc, #48]	; (800c3b4 <HAL_RCC_GetClockConfig+0x5c>)
 800c382:	689b      	ldr	r3, [r3, #8]
 800c384:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800c38c:	4b09      	ldr	r3, [pc, #36]	; (800c3b4 <HAL_RCC_GetClockConfig+0x5c>)
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	08db      	lsrs	r3, r3, #3
 800c392:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c39a:	4b07      	ldr	r3, [pc, #28]	; (800c3b8 <HAL_RCC_GetClockConfig+0x60>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f003 020f 	and.w	r2, r3, #15
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	601a      	str	r2, [r3, #0]
}
 800c3a6:	bf00      	nop
 800c3a8:	370c      	adds	r7, #12
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b0:	4770      	bx	lr
 800c3b2:	bf00      	nop
 800c3b4:	40023800 	.word	0x40023800
 800c3b8:	40023c00 	.word	0x40023c00

0800c3bc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b086      	sub	sp, #24
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f003 0301 	and.w	r3, r3, #1
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d105      	bne.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d035      	beq.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c3e4:	4b62      	ldr	r3, [pc, #392]	; (800c570 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c3ea:	f7fd f843 	bl	8009474 <HAL_GetTick>
 800c3ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c3f0:	e008      	b.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c3f2:	f7fd f83f 	bl	8009474 <HAL_GetTick>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	1ad3      	subs	r3, r2, r3
 800c3fc:	2b02      	cmp	r3, #2
 800c3fe:	d901      	bls.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c400:	2303      	movs	r3, #3
 800c402:	e0b0      	b.n	800c566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c404:	4b5b      	ldr	r3, [pc, #364]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d1f0      	bne.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	019a      	lsls	r2, r3, #6
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	689b      	ldr	r3, [r3, #8]
 800c41a:	071b      	lsls	r3, r3, #28
 800c41c:	4955      	ldr	r1, [pc, #340]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c41e:	4313      	orrs	r3, r2
 800c420:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c424:	4b52      	ldr	r3, [pc, #328]	; (800c570 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c426:	2201      	movs	r2, #1
 800c428:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c42a:	f7fd f823 	bl	8009474 <HAL_GetTick>
 800c42e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c430:	e008      	b.n	800c444 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c432:	f7fd f81f 	bl	8009474 <HAL_GetTick>
 800c436:	4602      	mov	r2, r0
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	1ad3      	subs	r3, r2, r3
 800c43c:	2b02      	cmp	r3, #2
 800c43e:	d901      	bls.n	800c444 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c440:	2303      	movs	r3, #3
 800c442:	e090      	b.n	800c566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c444:	4b4b      	ldr	r3, [pc, #300]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d0f0      	beq.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f003 0302 	and.w	r3, r3, #2
 800c458:	2b00      	cmp	r3, #0
 800c45a:	f000 8083 	beq.w	800c564 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c45e:	2300      	movs	r3, #0
 800c460:	60fb      	str	r3, [r7, #12]
 800c462:	4b44      	ldr	r3, [pc, #272]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c466:	4a43      	ldr	r2, [pc, #268]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c46c:	6413      	str	r3, [r2, #64]	; 0x40
 800c46e:	4b41      	ldr	r3, [pc, #260]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c476:	60fb      	str	r3, [r7, #12]
 800c478:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c47a:	4b3f      	ldr	r3, [pc, #252]	; (800c578 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	4a3e      	ldr	r2, [pc, #248]	; (800c578 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c484:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c486:	f7fc fff5 	bl	8009474 <HAL_GetTick>
 800c48a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c48c:	e008      	b.n	800c4a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c48e:	f7fc fff1 	bl	8009474 <HAL_GetTick>
 800c492:	4602      	mov	r2, r0
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	1ad3      	subs	r3, r2, r3
 800c498:	2b02      	cmp	r3, #2
 800c49a:	d901      	bls.n	800c4a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800c49c:	2303      	movs	r3, #3
 800c49e:	e062      	b.n	800c566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c4a0:	4b35      	ldr	r3, [pc, #212]	; (800c578 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d0f0      	beq.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c4ac:	4b31      	ldr	r3, [pc, #196]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c4ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4b4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d02f      	beq.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4c4:	693a      	ldr	r2, [r7, #16]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d028      	beq.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c4ca:	4b2a      	ldr	r3, [pc, #168]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c4cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c4d4:	4b29      	ldr	r3, [pc, #164]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c4da:	4b28      	ldr	r3, [pc, #160]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c4dc:	2200      	movs	r2, #0
 800c4de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c4e0:	4a24      	ldr	r2, [pc, #144]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c4e6:	4b23      	ldr	r3, [pc, #140]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c4e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ea:	f003 0301 	and.w	r3, r3, #1
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	d114      	bne.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c4f2:	f7fc ffbf 	bl	8009474 <HAL_GetTick>
 800c4f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c4f8:	e00a      	b.n	800c510 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c4fa:	f7fc ffbb 	bl	8009474 <HAL_GetTick>
 800c4fe:	4602      	mov	r2, r0
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	1ad3      	subs	r3, r2, r3
 800c504:	f241 3288 	movw	r2, #5000	; 0x1388
 800c508:	4293      	cmp	r3, r2
 800c50a:	d901      	bls.n	800c510 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800c50c:	2303      	movs	r3, #3
 800c50e:	e02a      	b.n	800c566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c510:	4b18      	ldr	r3, [pc, #96]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c514:	f003 0302 	and.w	r3, r3, #2
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d0ee      	beq.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c524:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c528:	d10d      	bne.n	800c546 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800c52a:	4b12      	ldr	r3, [pc, #72]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c52c:	689b      	ldr	r3, [r3, #8]
 800c52e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c53a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c53e:	490d      	ldr	r1, [pc, #52]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c540:	4313      	orrs	r3, r2
 800c542:	608b      	str	r3, [r1, #8]
 800c544:	e005      	b.n	800c552 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c546:	4b0b      	ldr	r3, [pc, #44]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c548:	689b      	ldr	r3, [r3, #8]
 800c54a:	4a0a      	ldr	r2, [pc, #40]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c54c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c550:	6093      	str	r3, [r2, #8]
 800c552:	4b08      	ldr	r3, [pc, #32]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c554:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c55e:	4905      	ldr	r1, [pc, #20]	; (800c574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c560:	4313      	orrs	r3, r2
 800c562:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800c564:	2300      	movs	r3, #0
}
 800c566:	4618      	mov	r0, r3
 800c568:	3718      	adds	r7, #24
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	42470068 	.word	0x42470068
 800c574:	40023800 	.word	0x40023800
 800c578:	40007000 	.word	0x40007000
 800c57c:	42470e40 	.word	0x42470e40

0800c580 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d101      	bne.n	800c592 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c58e:	2301      	movs	r3, #1
 800c590:	e056      	b.n	800c640 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2200      	movs	r2, #0
 800c596:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d106      	bne.n	800c5b2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f7f6 ffaf 	bl	8003510 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2202      	movs	r2, #2
 800c5b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5c8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	685a      	ldr	r2, [r3, #4]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	689b      	ldr	r3, [r3, #8]
 800c5d2:	431a      	orrs	r2, r3
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	431a      	orrs	r2, r3
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	691b      	ldr	r3, [r3, #16]
 800c5de:	431a      	orrs	r2, r3
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	695b      	ldr	r3, [r3, #20]
 800c5e4:	431a      	orrs	r2, r3
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	699b      	ldr	r3, [r3, #24]
 800c5ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c5ee:	431a      	orrs	r2, r3
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	69db      	ldr	r3, [r3, #28]
 800c5f4:	431a      	orrs	r2, r3
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6a1b      	ldr	r3, [r3, #32]
 800c5fa:	ea42 0103 	orr.w	r1, r2, r3
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	430a      	orrs	r2, r1
 800c608:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	699b      	ldr	r3, [r3, #24]
 800c60e:	0c1b      	lsrs	r3, r3, #16
 800c610:	f003 0104 	and.w	r1, r3, #4
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	430a      	orrs	r2, r1
 800c61e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	69da      	ldr	r2, [r3, #28]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c62e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2200      	movs	r2, #0
 800c634:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2201      	movs	r2, #1
 800c63a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c63e:	2300      	movs	r3, #0
}
 800c640:	4618      	mov	r0, r3
 800c642:	3708      	adds	r7, #8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b08c      	sub	sp, #48	; 0x30
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	60b9      	str	r1, [r7, #8]
 800c652:	607a      	str	r2, [r7, #4]
 800c654:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c656:	2301      	movs	r3, #1
 800c658:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c65a:	2300      	movs	r3, #0
 800c65c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c666:	2b01      	cmp	r3, #1
 800c668:	d101      	bne.n	800c66e <HAL_SPI_TransmitReceive+0x26>
 800c66a:	2302      	movs	r3, #2
 800c66c:	e18a      	b.n	800c984 <HAL_SPI_TransmitReceive+0x33c>
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2201      	movs	r2, #1
 800c672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c676:	f7fc fefd 	bl	8009474 <HAL_GetTick>
 800c67a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c68c:	887b      	ldrh	r3, [r7, #2]
 800c68e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c690:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c694:	2b01      	cmp	r3, #1
 800c696:	d00f      	beq.n	800c6b8 <HAL_SPI_TransmitReceive+0x70>
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c69e:	d107      	bne.n	800c6b0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	689b      	ldr	r3, [r3, #8]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d103      	bne.n	800c6b0 <HAL_SPI_TransmitReceive+0x68>
 800c6a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c6ac:	2b04      	cmp	r3, #4
 800c6ae:	d003      	beq.n	800c6b8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c6b0:	2302      	movs	r3, #2
 800c6b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c6b6:	e15b      	b.n	800c970 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d005      	beq.n	800c6ca <HAL_SPI_TransmitReceive+0x82>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d002      	beq.n	800c6ca <HAL_SPI_TransmitReceive+0x82>
 800c6c4:	887b      	ldrh	r3, [r7, #2]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d103      	bne.n	800c6d2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c6d0:	e14e      	b.n	800c970 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c6d8:	b2db      	uxtb	r3, r3
 800c6da:	2b04      	cmp	r3, #4
 800c6dc:	d003      	beq.n	800c6e6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2205      	movs	r2, #5
 800c6e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	887a      	ldrh	r2, [r7, #2]
 800c6f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	887a      	ldrh	r2, [r7, #2]
 800c6fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	68ba      	ldr	r2, [r7, #8]
 800c702:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	887a      	ldrh	r2, [r7, #2]
 800c708:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	887a      	ldrh	r2, [r7, #2]
 800c70e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2200      	movs	r2, #0
 800c714:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2200      	movs	r2, #0
 800c71a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c726:	2b40      	cmp	r3, #64	; 0x40
 800c728:	d007      	beq.n	800c73a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c738:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c742:	d178      	bne.n	800c836 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d002      	beq.n	800c752 <HAL_SPI_TransmitReceive+0x10a>
 800c74c:	8b7b      	ldrh	r3, [r7, #26]
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d166      	bne.n	800c820 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c756:	881a      	ldrh	r2, [r3, #0]
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c762:	1c9a      	adds	r2, r3, #2
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c76c:	b29b      	uxth	r3, r3
 800c76e:	3b01      	subs	r3, #1
 800c770:	b29a      	uxth	r2, r3
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c776:	e053      	b.n	800c820 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	f003 0302 	and.w	r3, r3, #2
 800c782:	2b02      	cmp	r3, #2
 800c784:	d11b      	bne.n	800c7be <HAL_SPI_TransmitReceive+0x176>
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d016      	beq.n	800c7be <HAL_SPI_TransmitReceive+0x176>
 800c790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c792:	2b01      	cmp	r3, #1
 800c794:	d113      	bne.n	800c7be <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c79a:	881a      	ldrh	r2, [r3, #0]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7a6:	1c9a      	adds	r2, r3, #2
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	b29a      	uxth	r2, r3
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	689b      	ldr	r3, [r3, #8]
 800c7c4:	f003 0301 	and.w	r3, r3, #1
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d119      	bne.n	800c800 <HAL_SPI_TransmitReceive+0x1b8>
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d014      	beq.n	800c800 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	68da      	ldr	r2, [r3, #12]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e0:	b292      	uxth	r2, r2
 800c7e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e8:	1c9a      	adds	r2, r3, #2
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7f2:	b29b      	uxth	r3, r3
 800c7f4:	3b01      	subs	r3, #1
 800c7f6:	b29a      	uxth	r2, r3
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c800:	f7fc fe38 	bl	8009474 <HAL_GetTick>
 800c804:	4602      	mov	r2, r0
 800c806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c808:	1ad3      	subs	r3, r2, r3
 800c80a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d807      	bhi.n	800c820 <HAL_SPI_TransmitReceive+0x1d8>
 800c810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c816:	d003      	beq.n	800c820 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c818:	2303      	movs	r3, #3
 800c81a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c81e:	e0a7      	b.n	800c970 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c824:	b29b      	uxth	r3, r3
 800c826:	2b00      	cmp	r3, #0
 800c828:	d1a6      	bne.n	800c778 <HAL_SPI_TransmitReceive+0x130>
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c82e:	b29b      	uxth	r3, r3
 800c830:	2b00      	cmp	r3, #0
 800c832:	d1a1      	bne.n	800c778 <HAL_SPI_TransmitReceive+0x130>
 800c834:	e07c      	b.n	800c930 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d002      	beq.n	800c844 <HAL_SPI_TransmitReceive+0x1fc>
 800c83e:	8b7b      	ldrh	r3, [r7, #26]
 800c840:	2b01      	cmp	r3, #1
 800c842:	d16b      	bne.n	800c91c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	330c      	adds	r3, #12
 800c84e:	7812      	ldrb	r2, [r2, #0]
 800c850:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c856:	1c5a      	adds	r2, r3, #1
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c860:	b29b      	uxth	r3, r3
 800c862:	3b01      	subs	r3, #1
 800c864:	b29a      	uxth	r2, r3
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c86a:	e057      	b.n	800c91c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	689b      	ldr	r3, [r3, #8]
 800c872:	f003 0302 	and.w	r3, r3, #2
 800c876:	2b02      	cmp	r3, #2
 800c878:	d11c      	bne.n	800c8b4 <HAL_SPI_TransmitReceive+0x26c>
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c87e:	b29b      	uxth	r3, r3
 800c880:	2b00      	cmp	r3, #0
 800c882:	d017      	beq.n	800c8b4 <HAL_SPI_TransmitReceive+0x26c>
 800c884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c886:	2b01      	cmp	r3, #1
 800c888:	d114      	bne.n	800c8b4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	330c      	adds	r3, #12
 800c894:	7812      	ldrb	r2, [r2, #0]
 800c896:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c89c:	1c5a      	adds	r2, r3, #1
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	3b01      	subs	r3, #1
 800c8aa:	b29a      	uxth	r2, r3
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	689b      	ldr	r3, [r3, #8]
 800c8ba:	f003 0301 	and.w	r3, r3, #1
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d119      	bne.n	800c8f6 <HAL_SPI_TransmitReceive+0x2ae>
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d014      	beq.n	800c8f6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	68da      	ldr	r2, [r3, #12]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d6:	b2d2      	uxtb	r2, r2
 800c8d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8de:	1c5a      	adds	r2, r3, #1
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	3b01      	subs	r3, #1
 800c8ec:	b29a      	uxth	r2, r3
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c8f6:	f7fc fdbd 	bl	8009474 <HAL_GetTick>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fe:	1ad3      	subs	r3, r2, r3
 800c900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c902:	429a      	cmp	r2, r3
 800c904:	d803      	bhi.n	800c90e <HAL_SPI_TransmitReceive+0x2c6>
 800c906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c90c:	d102      	bne.n	800c914 <HAL_SPI_TransmitReceive+0x2cc>
 800c90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c910:	2b00      	cmp	r3, #0
 800c912:	d103      	bne.n	800c91c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c914:	2303      	movs	r3, #3
 800c916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c91a:	e029      	b.n	800c970 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c920:	b29b      	uxth	r3, r3
 800c922:	2b00      	cmp	r3, #0
 800c924:	d1a2      	bne.n	800c86c <HAL_SPI_TransmitReceive+0x224>
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d19d      	bne.n	800c86c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c932:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c934:	68f8      	ldr	r0, [r7, #12]
 800c936:	f000 f9b1 	bl	800cc9c <SPI_EndRxTxTransaction>
 800c93a:	4603      	mov	r3, r0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d006      	beq.n	800c94e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c940:	2301      	movs	r3, #1
 800c942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2220      	movs	r2, #32
 800c94a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c94c:	e010      	b.n	800c970 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	689b      	ldr	r3, [r3, #8]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d10b      	bne.n	800c96e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c956:	2300      	movs	r3, #0
 800c958:	617b      	str	r3, [r7, #20]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	617b      	str	r3, [r7, #20]
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	689b      	ldr	r3, [r3, #8]
 800c968:	617b      	str	r3, [r7, #20]
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	e000      	b.n	800c970 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c96e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	2201      	movs	r2, #1
 800c974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2200      	movs	r2, #0
 800c97c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c980:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c984:	4618      	mov	r0, r3
 800c986:	3730      	adds	r7, #48	; 0x30
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b088      	sub	sp, #32
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c9a4:	69bb      	ldr	r3, [r7, #24]
 800c9a6:	099b      	lsrs	r3, r3, #6
 800c9a8:	f003 0301 	and.w	r3, r3, #1
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d10f      	bne.n	800c9d0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d00a      	beq.n	800c9d0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	099b      	lsrs	r3, r3, #6
 800c9be:	f003 0301 	and.w	r3, r3, #1
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d004      	beq.n	800c9d0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	4798      	blx	r3
    return;
 800c9ce:	e0d8      	b.n	800cb82 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	085b      	lsrs	r3, r3, #1
 800c9d4:	f003 0301 	and.w	r3, r3, #1
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d00a      	beq.n	800c9f2 <HAL_SPI_IRQHandler+0x66>
 800c9dc:	69fb      	ldr	r3, [r7, #28]
 800c9de:	09db      	lsrs	r3, r3, #7
 800c9e0:	f003 0301 	and.w	r3, r3, #1
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d004      	beq.n	800c9f2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	4798      	blx	r3
    return;
 800c9f0:	e0c7      	b.n	800cb82 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c9f2:	69bb      	ldr	r3, [r7, #24]
 800c9f4:	095b      	lsrs	r3, r3, #5
 800c9f6:	f003 0301 	and.w	r3, r3, #1
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d10c      	bne.n	800ca18 <HAL_SPI_IRQHandler+0x8c>
 800c9fe:	69bb      	ldr	r3, [r7, #24]
 800ca00:	099b      	lsrs	r3, r3, #6
 800ca02:	f003 0301 	and.w	r3, r3, #1
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d106      	bne.n	800ca18 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	0a1b      	lsrs	r3, r3, #8
 800ca0e:	f003 0301 	and.w	r3, r3, #1
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	f000 80b5 	beq.w	800cb82 <HAL_SPI_IRQHandler+0x1f6>
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	095b      	lsrs	r3, r3, #5
 800ca1c:	f003 0301 	and.w	r3, r3, #1
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	f000 80ae 	beq.w	800cb82 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ca26:	69bb      	ldr	r3, [r7, #24]
 800ca28:	099b      	lsrs	r3, r3, #6
 800ca2a:	f003 0301 	and.w	r3, r3, #1
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d023      	beq.n	800ca7a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	2b03      	cmp	r3, #3
 800ca3c:	d011      	beq.n	800ca62 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca42:	f043 0204 	orr.w	r2, r3, #4
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	617b      	str	r3, [r7, #20]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	617b      	str	r3, [r7, #20]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	689b      	ldr	r3, [r3, #8]
 800ca5c:	617b      	str	r3, [r7, #20]
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	e00b      	b.n	800ca7a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ca62:	2300      	movs	r3, #0
 800ca64:	613b      	str	r3, [r7, #16]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	613b      	str	r3, [r7, #16]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	613b      	str	r3, [r7, #16]
 800ca76:	693b      	ldr	r3, [r7, #16]
        return;
 800ca78:	e083      	b.n	800cb82 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ca7a:	69bb      	ldr	r3, [r7, #24]
 800ca7c:	095b      	lsrs	r3, r3, #5
 800ca7e:	f003 0301 	and.w	r3, r3, #1
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d014      	beq.n	800cab0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca8a:	f043 0201 	orr.w	r2, r3, #1
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ca92:	2300      	movs	r3, #0
 800ca94:	60fb      	str	r3, [r7, #12]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	60fb      	str	r3, [r7, #12]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800caac:	601a      	str	r2, [r3, #0]
 800caae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800cab0:	69bb      	ldr	r3, [r7, #24]
 800cab2:	0a1b      	lsrs	r3, r3, #8
 800cab4:	f003 0301 	and.w	r3, r3, #1
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d00c      	beq.n	800cad6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cac0:	f043 0208 	orr.w	r2, r3, #8
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cac8:	2300      	movs	r3, #0
 800caca:	60bb      	str	r3, [r7, #8]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	689b      	ldr	r3, [r3, #8]
 800cad2:	60bb      	str	r3, [r7, #8]
 800cad4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d050      	beq.n	800cb80 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	685a      	ldr	r2, [r3, #4]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800caec:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2201      	movs	r2, #1
 800caf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800caf6:	69fb      	ldr	r3, [r7, #28]
 800caf8:	f003 0302 	and.w	r3, r3, #2
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d104      	bne.n	800cb0a <HAL_SPI_IRQHandler+0x17e>
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	f003 0301 	and.w	r3, r3, #1
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d034      	beq.n	800cb74 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	685a      	ldr	r2, [r3, #4]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	f022 0203 	bic.w	r2, r2, #3
 800cb18:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d011      	beq.n	800cb46 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb26:	4a18      	ldr	r2, [pc, #96]	; (800cb88 <HAL_SPI_IRQHandler+0x1fc>)
 800cb28:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7fd faa0 	bl	800a074 <HAL_DMA_Abort_IT>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d005      	beq.n	800cb46 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d016      	beq.n	800cb7c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb52:	4a0d      	ldr	r2, [pc, #52]	; (800cb88 <HAL_SPI_IRQHandler+0x1fc>)
 800cb54:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fd fa8a 	bl	800a074 <HAL_DMA_Abort_IT>
 800cb60:	4603      	mov	r3, r0
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d00a      	beq.n	800cb7c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800cb72:	e003      	b.n	800cb7c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 f809 	bl	800cb8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800cb7a:	e000      	b.n	800cb7e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800cb7c:	bf00      	nop
    return;
 800cb7e:	bf00      	nop
 800cb80:	bf00      	nop
  }
}
 800cb82:	3720      	adds	r7, #32
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}
 800cb88:	0800cba1 	.word	0x0800cba1

0800cb8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cb94:	bf00      	nop
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cbba:	68f8      	ldr	r0, [r7, #12]
 800cbbc:	f7ff ffe6 	bl	800cb8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cbc0:	bf00      	nop
 800cbc2:	3710      	adds	r7, #16
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	603b      	str	r3, [r7, #0]
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cbd8:	e04c      	b.n	800cc74 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbe0:	d048      	beq.n	800cc74 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800cbe2:	f7fc fc47 	bl	8009474 <HAL_GetTick>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	69bb      	ldr	r3, [r7, #24]
 800cbea:	1ad3      	subs	r3, r2, r3
 800cbec:	683a      	ldr	r2, [r7, #0]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d902      	bls.n	800cbf8 <SPI_WaitFlagStateUntilTimeout+0x30>
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d13d      	bne.n	800cc74 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	685a      	ldr	r2, [r3, #4]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cc06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cc10:	d111      	bne.n	800cc36 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	689b      	ldr	r3, [r3, #8]
 800cc16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc1a:	d004      	beq.n	800cc26 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	689b      	ldr	r3, [r3, #8]
 800cc20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc24:	d107      	bne.n	800cc36 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	681a      	ldr	r2, [r3, #0]
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc3e:	d10f      	bne.n	800cc60 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cc4e:	601a      	str	r2, [r3, #0]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	681a      	ldr	r2, [r3, #0]
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cc5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2201      	movs	r2, #1
 800cc64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800cc70:	2303      	movs	r3, #3
 800cc72:	e00f      	b.n	800cc94 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	689a      	ldr	r2, [r3, #8]
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	4013      	ands	r3, r2
 800cc7e:	68ba      	ldr	r2, [r7, #8]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	bf0c      	ite	eq
 800cc84:	2301      	moveq	r3, #1
 800cc86:	2300      	movne	r3, #0
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	79fb      	ldrb	r3, [r7, #7]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d1a3      	bne.n	800cbda <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800cc92:	2300      	movs	r3, #0
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3710      	adds	r7, #16
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b088      	sub	sp, #32
 800cca0:	af02      	add	r7, sp, #8
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	60b9      	str	r1, [r7, #8]
 800cca6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800cca8:	4b1b      	ldr	r3, [pc, #108]	; (800cd18 <SPI_EndRxTxTransaction+0x7c>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4a1b      	ldr	r2, [pc, #108]	; (800cd1c <SPI_EndRxTxTransaction+0x80>)
 800ccae:	fba2 2303 	umull	r2, r3, r2, r3
 800ccb2:	0d5b      	lsrs	r3, r3, #21
 800ccb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ccb8:	fb02 f303 	mul.w	r3, r2, r3
 800ccbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ccc6:	d112      	bne.n	800ccee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	2180      	movs	r1, #128	; 0x80
 800ccd2:	68f8      	ldr	r0, [r7, #12]
 800ccd4:	f7ff ff78 	bl	800cbc8 <SPI_WaitFlagStateUntilTimeout>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d016      	beq.n	800cd0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cce2:	f043 0220 	orr.w	r2, r3, #32
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ccea:	2303      	movs	r3, #3
 800ccec:	e00f      	b.n	800cd0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d00a      	beq.n	800cd0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	3b01      	subs	r3, #1
 800ccf8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd04:	2b80      	cmp	r3, #128	; 0x80
 800cd06:	d0f2      	beq.n	800ccee <SPI_EndRxTxTransaction+0x52>
 800cd08:	e000      	b.n	800cd0c <SPI_EndRxTxTransaction+0x70>
        break;
 800cd0a:	bf00      	nop
  }

  return HAL_OK;
 800cd0c:	2300      	movs	r3, #0
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3718      	adds	r7, #24
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	20000008 	.word	0x20000008
 800cd1c:	165e9f81 	.word	0x165e9f81

0800cd20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d101      	bne.n	800cd32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e01d      	b.n	800cd6e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd38:	b2db      	uxtb	r3, r3
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d106      	bne.n	800cd4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2200      	movs	r2, #0
 800cd42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f7f7 f94a 	bl	8003fe0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2202      	movs	r2, #2
 800cd50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681a      	ldr	r2, [r3, #0]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	3304      	adds	r3, #4
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	4610      	mov	r0, r2
 800cd60:	f000 fcc0 	bl	800d6e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2201      	movs	r2, #1
 800cd68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cd6c:	2300      	movs	r3, #0
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3708      	adds	r7, #8
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}

0800cd76 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cd76:	b480      	push	{r7}
 800cd78:	b085      	sub	sp, #20
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	68da      	ldr	r2, [r3, #12]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f042 0201 	orr.w	r2, r2, #1
 800cd8c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	689b      	ldr	r3, [r3, #8]
 800cd94:	f003 0307 	and.w	r3, r3, #7
 800cd98:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2b06      	cmp	r3, #6
 800cd9e:	d007      	beq.n	800cdb0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f042 0201 	orr.w	r2, r2, #1
 800cdae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cdb0:	2300      	movs	r3, #0
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3714      	adds	r7, #20
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr

0800cdbe <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800cdbe:	b580      	push	{r7, lr}
 800cdc0:	b082      	sub	sp, #8
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d101      	bne.n	800cdd0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	e01d      	b.n	800ce0c <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d106      	bne.n	800cdea <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2200      	movs	r2, #0
 800cde0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f7f7 f8d9 	bl	8003f9c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2202      	movs	r2, #2
 800cdee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681a      	ldr	r2, [r3, #0]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	3304      	adds	r3, #4
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	4610      	mov	r0, r2
 800cdfe:	f000 fc71 	bl	800d6e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2201      	movs	r2, #1
 800ce06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce0a:	2300      	movs	r3, #0
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b084      	sub	sp, #16
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	2201      	movs	r2, #1
 800ce24:	6839      	ldr	r1, [r7, #0]
 800ce26:	4618      	mov	r0, r3
 800ce28:	f000 feac 	bl	800db84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a15      	ldr	r2, [pc, #84]	; (800ce88 <HAL_TIM_OC_Start+0x74>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d004      	beq.n	800ce40 <HAL_TIM_OC_Start+0x2c>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a14      	ldr	r2, [pc, #80]	; (800ce8c <HAL_TIM_OC_Start+0x78>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d101      	bne.n	800ce44 <HAL_TIM_OC_Start+0x30>
 800ce40:	2301      	movs	r3, #1
 800ce42:	e000      	b.n	800ce46 <HAL_TIM_OC_Start+0x32>
 800ce44:	2300      	movs	r3, #0
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d007      	beq.n	800ce5a <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ce58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	689b      	ldr	r3, [r3, #8]
 800ce60:	f003 0307 	and.w	r3, r3, #7
 800ce64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2b06      	cmp	r3, #6
 800ce6a:	d007      	beq.n	800ce7c <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	681a      	ldr	r2, [r3, #0]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f042 0201 	orr.w	r2, r2, #1
 800ce7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ce7c:	2300      	movs	r3, #0
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3710      	adds	r7, #16
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	40010000 	.word	0x40010000
 800ce8c:	40010400 	.word	0x40010400

0800ce90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d101      	bne.n	800cea2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e01d      	b.n	800cede <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d106      	bne.n	800cebc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f7f6 ff70 	bl	8003d9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2202      	movs	r2, #2
 800cec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681a      	ldr	r2, [r3, #0]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	3304      	adds	r3, #4
 800cecc:	4619      	mov	r1, r3
 800cece:	4610      	mov	r0, r2
 800ced0:	f000 fc08 	bl	800d6e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2201      	movs	r2, #1
 800ced8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cedc:	2300      	movs	r3, #0
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3708      	adds	r7, #8
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
	...

0800cee8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b086      	sub	sp, #24
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	607a      	str	r2, [r7, #4]
 800cef4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	2b02      	cmp	r3, #2
 800cf00:	d101      	bne.n	800cf06 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800cf02:	2302      	movs	r3, #2
 800cf04:	e0f3      	b.n	800d0ee <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d10b      	bne.n	800cf2a <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d104      	bne.n	800cf22 <HAL_TIM_PWM_Start_DMA+0x3a>
 800cf18:	887b      	ldrh	r3, [r7, #2]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d001      	beq.n	800cf22 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800cf1e:	2301      	movs	r3, #1
 800cf20:	e0e5      	b.n	800d0ee <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2202      	movs	r2, #2
 800cf26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	2b0c      	cmp	r3, #12
 800cf2e:	f200 80ad 	bhi.w	800d08c <HAL_TIM_PWM_Start_DMA+0x1a4>
 800cf32:	a201      	add	r2, pc, #4	; (adr r2, 800cf38 <HAL_TIM_PWM_Start_DMA+0x50>)
 800cf34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf38:	0800cf6d 	.word	0x0800cf6d
 800cf3c:	0800d08d 	.word	0x0800d08d
 800cf40:	0800d08d 	.word	0x0800d08d
 800cf44:	0800d08d 	.word	0x0800d08d
 800cf48:	0800cfb5 	.word	0x0800cfb5
 800cf4c:	0800d08d 	.word	0x0800d08d
 800cf50:	0800d08d 	.word	0x0800d08d
 800cf54:	0800d08d 	.word	0x0800d08d
 800cf58:	0800cffd 	.word	0x0800cffd
 800cf5c:	0800d08d 	.word	0x0800d08d
 800cf60:	0800d08d 	.word	0x0800d08d
 800cf64:	0800d08d 	.word	0x0800d08d
 800cf68:	0800d045 	.word	0x0800d045
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf70:	4a61      	ldr	r2, [pc, #388]	; (800d0f8 <HAL_TIM_PWM_Start_DMA+0x210>)
 800cf72:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf78:	4a60      	ldr	r2, [pc, #384]	; (800d0fc <HAL_TIM_PWM_Start_DMA+0x214>)
 800cf7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf80:	4a5f      	ldr	r2, [pc, #380]	; (800d100 <HAL_TIM_PWM_Start_DMA+0x218>)
 800cf82:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800cf88:	6879      	ldr	r1, [r7, #4]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	3334      	adds	r3, #52	; 0x34
 800cf90:	461a      	mov	r2, r3
 800cf92:	887b      	ldrh	r3, [r7, #2]
 800cf94:	f7fd f816 	bl	8009fc4 <HAL_DMA_Start_IT>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d001      	beq.n	800cfa2 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	e0a5      	b.n	800d0ee <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	68da      	ldr	r2, [r3, #12]
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cfb0:	60da      	str	r2, [r3, #12]
      break;
 800cfb2:	e06c      	b.n	800d08e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfb8:	4a4f      	ldr	r2, [pc, #316]	; (800d0f8 <HAL_TIM_PWM_Start_DMA+0x210>)
 800cfba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfc0:	4a4e      	ldr	r2, [pc, #312]	; (800d0fc <HAL_TIM_PWM_Start_DMA+0x214>)
 800cfc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfc8:	4a4d      	ldr	r2, [pc, #308]	; (800d100 <HAL_TIM_PWM_Start_DMA+0x218>)
 800cfca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800cfd0:	6879      	ldr	r1, [r7, #4]
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	3338      	adds	r3, #56	; 0x38
 800cfd8:	461a      	mov	r2, r3
 800cfda:	887b      	ldrh	r3, [r7, #2]
 800cfdc:	f7fc fff2 	bl	8009fc4 <HAL_DMA_Start_IT>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d001      	beq.n	800cfea <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	e081      	b.n	800d0ee <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	68da      	ldr	r2, [r3, #12]
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cff8:	60da      	str	r2, [r3, #12]
      break;
 800cffa:	e048      	b.n	800d08e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d000:	4a3d      	ldr	r2, [pc, #244]	; (800d0f8 <HAL_TIM_PWM_Start_DMA+0x210>)
 800d002:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d008:	4a3c      	ldr	r2, [pc, #240]	; (800d0fc <HAL_TIM_PWM_Start_DMA+0x214>)
 800d00a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d010:	4a3b      	ldr	r2, [pc, #236]	; (800d100 <HAL_TIM_PWM_Start_DMA+0x218>)
 800d012:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d018:	6879      	ldr	r1, [r7, #4]
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	333c      	adds	r3, #60	; 0x3c
 800d020:	461a      	mov	r2, r3
 800d022:	887b      	ldrh	r3, [r7, #2]
 800d024:	f7fc ffce 	bl	8009fc4 <HAL_DMA_Start_IT>
 800d028:	4603      	mov	r3, r0
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d001      	beq.n	800d032 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 800d02e:	2301      	movs	r3, #1
 800d030:	e05d      	b.n	800d0ee <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	68da      	ldr	r2, [r3, #12]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d040:	60da      	str	r2, [r3, #12]
      break;
 800d042:	e024      	b.n	800d08e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d048:	4a2b      	ldr	r2, [pc, #172]	; (800d0f8 <HAL_TIM_PWM_Start_DMA+0x210>)
 800d04a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d050:	4a2a      	ldr	r2, [pc, #168]	; (800d0fc <HAL_TIM_PWM_Start_DMA+0x214>)
 800d052:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d058:	4a29      	ldr	r2, [pc, #164]	; (800d100 <HAL_TIM_PWM_Start_DMA+0x218>)
 800d05a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d060:	6879      	ldr	r1, [r7, #4]
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	3340      	adds	r3, #64	; 0x40
 800d068:	461a      	mov	r2, r3
 800d06a:	887b      	ldrh	r3, [r7, #2]
 800d06c:	f7fc ffaa 	bl	8009fc4 <HAL_DMA_Start_IT>
 800d070:	4603      	mov	r3, r0
 800d072:	2b00      	cmp	r3, #0
 800d074:	d001      	beq.n	800d07a <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 800d076:	2301      	movs	r3, #1
 800d078:	e039      	b.n	800d0ee <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	68da      	ldr	r2, [r3, #12]
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d088:	60da      	str	r2, [r3, #12]
      break;
 800d08a:	e000      	b.n	800d08e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 800d08c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	2201      	movs	r2, #1
 800d094:	68b9      	ldr	r1, [r7, #8]
 800d096:	4618      	mov	r0, r3
 800d098:	f000 fd74 	bl	800db84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4a18      	ldr	r2, [pc, #96]	; (800d104 <HAL_TIM_PWM_Start_DMA+0x21c>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d004      	beq.n	800d0b0 <HAL_TIM_PWM_Start_DMA+0x1c8>
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a17      	ldr	r2, [pc, #92]	; (800d108 <HAL_TIM_PWM_Start_DMA+0x220>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d101      	bne.n	800d0b4 <HAL_TIM_PWM_Start_DMA+0x1cc>
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	e000      	b.n	800d0b6 <HAL_TIM_PWM_Start_DMA+0x1ce>
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d007      	beq.n	800d0ca <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d0c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	f003 0307 	and.w	r3, r3, #7
 800d0d4:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	2b06      	cmp	r3, #6
 800d0da:	d007      	beq.n	800d0ec <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f042 0201 	orr.w	r2, r2, #1
 800d0ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d0ec:	2300      	movs	r3, #0
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3718      	adds	r7, #24
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	0800d605 	.word	0x0800d605
 800d0fc:	0800d675 	.word	0x0800d675
 800d100:	0800d5e1 	.word	0x0800d5e1
 800d104:	40010000 	.word	0x40010000
 800d108:	40010400 	.word	0x40010400

0800d10c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b082      	sub	sp, #8
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	691b      	ldr	r3, [r3, #16]
 800d11a:	f003 0302 	and.w	r3, r3, #2
 800d11e:	2b02      	cmp	r3, #2
 800d120:	d122      	bne.n	800d168 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	68db      	ldr	r3, [r3, #12]
 800d128:	f003 0302 	and.w	r3, r3, #2
 800d12c:	2b02      	cmp	r3, #2
 800d12e:	d11b      	bne.n	800d168 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f06f 0202 	mvn.w	r2, #2
 800d138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2201      	movs	r2, #1
 800d13e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	699b      	ldr	r3, [r3, #24]
 800d146:	f003 0303 	and.w	r3, r3, #3
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d003      	beq.n	800d156 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 fa14 	bl	800d57c <HAL_TIM_IC_CaptureCallback>
 800d154:	e005      	b.n	800d162 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 fa06 	bl	800d568 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f000 fa17 	bl	800d590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2200      	movs	r2, #0
 800d166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	691b      	ldr	r3, [r3, #16]
 800d16e:	f003 0304 	and.w	r3, r3, #4
 800d172:	2b04      	cmp	r3, #4
 800d174:	d122      	bne.n	800d1bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	68db      	ldr	r3, [r3, #12]
 800d17c:	f003 0304 	and.w	r3, r3, #4
 800d180:	2b04      	cmp	r3, #4
 800d182:	d11b      	bne.n	800d1bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f06f 0204 	mvn.w	r2, #4
 800d18c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2202      	movs	r2, #2
 800d192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	699b      	ldr	r3, [r3, #24]
 800d19a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d003      	beq.n	800d1aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f000 f9ea 	bl	800d57c <HAL_TIM_IC_CaptureCallback>
 800d1a8:	e005      	b.n	800d1b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f000 f9dc 	bl	800d568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f000 f9ed 	bl	800d590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	691b      	ldr	r3, [r3, #16]
 800d1c2:	f003 0308 	and.w	r3, r3, #8
 800d1c6:	2b08      	cmp	r3, #8
 800d1c8:	d122      	bne.n	800d210 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	68db      	ldr	r3, [r3, #12]
 800d1d0:	f003 0308 	and.w	r3, r3, #8
 800d1d4:	2b08      	cmp	r3, #8
 800d1d6:	d11b      	bne.n	800d210 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f06f 0208 	mvn.w	r2, #8
 800d1e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2204      	movs	r2, #4
 800d1e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	69db      	ldr	r3, [r3, #28]
 800d1ee:	f003 0303 	and.w	r3, r3, #3
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d003      	beq.n	800d1fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f000 f9c0 	bl	800d57c <HAL_TIM_IC_CaptureCallback>
 800d1fc:	e005      	b.n	800d20a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f000 f9b2 	bl	800d568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f000 f9c3 	bl	800d590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2200      	movs	r2, #0
 800d20e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	691b      	ldr	r3, [r3, #16]
 800d216:	f003 0310 	and.w	r3, r3, #16
 800d21a:	2b10      	cmp	r3, #16
 800d21c:	d122      	bne.n	800d264 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	68db      	ldr	r3, [r3, #12]
 800d224:	f003 0310 	and.w	r3, r3, #16
 800d228:	2b10      	cmp	r3, #16
 800d22a:	d11b      	bne.n	800d264 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	f06f 0210 	mvn.w	r2, #16
 800d234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2208      	movs	r2, #8
 800d23a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	69db      	ldr	r3, [r3, #28]
 800d242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d246:	2b00      	cmp	r3, #0
 800d248:	d003      	beq.n	800d252 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 f996 	bl	800d57c <HAL_TIM_IC_CaptureCallback>
 800d250:	e005      	b.n	800d25e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f000 f988 	bl	800d568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 f999 	bl	800d590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2200      	movs	r2, #0
 800d262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	691b      	ldr	r3, [r3, #16]
 800d26a:	f003 0301 	and.w	r3, r3, #1
 800d26e:	2b01      	cmp	r3, #1
 800d270:	d10e      	bne.n	800d290 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	f003 0301 	and.w	r3, r3, #1
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d107      	bne.n	800d290 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	f06f 0201 	mvn.w	r2, #1
 800d288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f7f6 f890 	bl	80033b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	691b      	ldr	r3, [r3, #16]
 800d296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d29a:	2b80      	cmp	r3, #128	; 0x80
 800d29c:	d10e      	bne.n	800d2bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	68db      	ldr	r3, [r3, #12]
 800d2a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2a8:	2b80      	cmp	r3, #128	; 0x80
 800d2aa:	d107      	bne.n	800d2bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d2b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f000 fd10 	bl	800dcdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	691b      	ldr	r3, [r3, #16]
 800d2c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2c6:	2b40      	cmp	r3, #64	; 0x40
 800d2c8:	d10e      	bne.n	800d2e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	68db      	ldr	r3, [r3, #12]
 800d2d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2d4:	2b40      	cmp	r3, #64	; 0x40
 800d2d6:	d107      	bne.n	800d2e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d2e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 f968 	bl	800d5b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	691b      	ldr	r3, [r3, #16]
 800d2ee:	f003 0320 	and.w	r3, r3, #32
 800d2f2:	2b20      	cmp	r3, #32
 800d2f4:	d10e      	bne.n	800d314 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	68db      	ldr	r3, [r3, #12]
 800d2fc:	f003 0320 	and.w	r3, r3, #32
 800d300:	2b20      	cmp	r3, #32
 800d302:	d107      	bne.n	800d314 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f06f 0220 	mvn.w	r2, #32
 800d30c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 fcda 	bl	800dcc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d314:	bf00      	nop
 800d316:	3708      	adds	r7, #8
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}

0800d31c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b084      	sub	sp, #16
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d32e:	2b01      	cmp	r3, #1
 800d330:	d101      	bne.n	800d336 <HAL_TIM_OC_ConfigChannel+0x1a>
 800d332:	2302      	movs	r3, #2
 800d334:	e04e      	b.n	800d3d4 <HAL_TIM_OC_ConfigChannel+0xb8>
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2201      	movs	r2, #1
 800d33a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	2202      	movs	r2, #2
 800d342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2b0c      	cmp	r3, #12
 800d34a:	d839      	bhi.n	800d3c0 <HAL_TIM_OC_ConfigChannel+0xa4>
 800d34c:	a201      	add	r2, pc, #4	; (adr r2, 800d354 <HAL_TIM_OC_ConfigChannel+0x38>)
 800d34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d352:	bf00      	nop
 800d354:	0800d389 	.word	0x0800d389
 800d358:	0800d3c1 	.word	0x0800d3c1
 800d35c:	0800d3c1 	.word	0x0800d3c1
 800d360:	0800d3c1 	.word	0x0800d3c1
 800d364:	0800d397 	.word	0x0800d397
 800d368:	0800d3c1 	.word	0x0800d3c1
 800d36c:	0800d3c1 	.word	0x0800d3c1
 800d370:	0800d3c1 	.word	0x0800d3c1
 800d374:	0800d3a5 	.word	0x0800d3a5
 800d378:	0800d3c1 	.word	0x0800d3c1
 800d37c:	0800d3c1 	.word	0x0800d3c1
 800d380:	0800d3c1 	.word	0x0800d3c1
 800d384:	0800d3b3 	.word	0x0800d3b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	68b9      	ldr	r1, [r7, #8]
 800d38e:	4618      	mov	r0, r3
 800d390:	f000 fa48 	bl	800d824 <TIM_OC1_SetConfig>
      break;
 800d394:	e015      	b.n	800d3c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	68b9      	ldr	r1, [r7, #8]
 800d39c:	4618      	mov	r0, r3
 800d39e:	f000 fab1 	bl	800d904 <TIM_OC2_SetConfig>
      break;
 800d3a2:	e00e      	b.n	800d3c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	68b9      	ldr	r1, [r7, #8]
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f000 fb20 	bl	800d9f0 <TIM_OC3_SetConfig>
      break;
 800d3b0:	e007      	b.n	800d3c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	68b9      	ldr	r1, [r7, #8]
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f000 fb8d 	bl	800dad8 <TIM_OC4_SetConfig>
      break;
 800d3be:	e000      	b.n	800d3c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800d3c0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d3d2:	2300      	movs	r3, #0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3710      	adds	r7, #16
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	60b9      	str	r1, [r7, #8]
 800d3e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	d101      	bne.n	800d3f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d3f2:	2302      	movs	r3, #2
 800d3f4:	e0b4      	b.n	800d560 <HAL_TIM_PWM_ConfigChannel+0x184>
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2202      	movs	r2, #2
 800d402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2b0c      	cmp	r3, #12
 800d40a:	f200 809f 	bhi.w	800d54c <HAL_TIM_PWM_ConfigChannel+0x170>
 800d40e:	a201      	add	r2, pc, #4	; (adr r2, 800d414 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800d410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d414:	0800d449 	.word	0x0800d449
 800d418:	0800d54d 	.word	0x0800d54d
 800d41c:	0800d54d 	.word	0x0800d54d
 800d420:	0800d54d 	.word	0x0800d54d
 800d424:	0800d489 	.word	0x0800d489
 800d428:	0800d54d 	.word	0x0800d54d
 800d42c:	0800d54d 	.word	0x0800d54d
 800d430:	0800d54d 	.word	0x0800d54d
 800d434:	0800d4cb 	.word	0x0800d4cb
 800d438:	0800d54d 	.word	0x0800d54d
 800d43c:	0800d54d 	.word	0x0800d54d
 800d440:	0800d54d 	.word	0x0800d54d
 800d444:	0800d50b 	.word	0x0800d50b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	68b9      	ldr	r1, [r7, #8]
 800d44e:	4618      	mov	r0, r3
 800d450:	f000 f9e8 	bl	800d824 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	699a      	ldr	r2, [r3, #24]
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f042 0208 	orr.w	r2, r2, #8
 800d462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	699a      	ldr	r2, [r3, #24]
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f022 0204 	bic.w	r2, r2, #4
 800d472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	6999      	ldr	r1, [r3, #24]
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	691a      	ldr	r2, [r3, #16]
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	430a      	orrs	r2, r1
 800d484:	619a      	str	r2, [r3, #24]
      break;
 800d486:	e062      	b.n	800d54e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	68b9      	ldr	r1, [r7, #8]
 800d48e:	4618      	mov	r0, r3
 800d490:	f000 fa38 	bl	800d904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	699a      	ldr	r2, [r3, #24]
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	699a      	ldr	r2, [r3, #24]
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	6999      	ldr	r1, [r3, #24]
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	691b      	ldr	r3, [r3, #16]
 800d4be:	021a      	lsls	r2, r3, #8
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	430a      	orrs	r2, r1
 800d4c6:	619a      	str	r2, [r3, #24]
      break;
 800d4c8:	e041      	b.n	800d54e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	68b9      	ldr	r1, [r7, #8]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f000 fa8d 	bl	800d9f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	69da      	ldr	r2, [r3, #28]
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f042 0208 	orr.w	r2, r2, #8
 800d4e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	69da      	ldr	r2, [r3, #28]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f022 0204 	bic.w	r2, r2, #4
 800d4f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	69d9      	ldr	r1, [r3, #28]
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	691a      	ldr	r2, [r3, #16]
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	430a      	orrs	r2, r1
 800d506:	61da      	str	r2, [r3, #28]
      break;
 800d508:	e021      	b.n	800d54e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	68b9      	ldr	r1, [r7, #8]
 800d510:	4618      	mov	r0, r3
 800d512:	f000 fae1 	bl	800dad8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	69da      	ldr	r2, [r3, #28]
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	69da      	ldr	r2, [r3, #28]
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	69d9      	ldr	r1, [r3, #28]
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	691b      	ldr	r3, [r3, #16]
 800d540:	021a      	lsls	r2, r3, #8
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	430a      	orrs	r2, r1
 800d548:	61da      	str	r2, [r3, #28]
      break;
 800d54a:	e000      	b.n	800d54e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800d54c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2201      	movs	r2, #1
 800d552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2200      	movs	r2, #0
 800d55a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d55e:	2300      	movs	r3, #0
}
 800d560:	4618      	mov	r0, r3
 800d562:	3710      	adds	r7, #16
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}

0800d568 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d568:	b480      	push	{r7}
 800d56a:	b083      	sub	sp, #12
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d570:	bf00      	nop
 800d572:	370c      	adds	r7, #12
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr

0800d57c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d584:	bf00      	nop
 800d586:	370c      	adds	r7, #12
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d590:	b480      	push	{r7}
 800d592:	b083      	sub	sp, #12
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d598:	bf00      	nop
 800d59a:	370c      	adds	r7, #12
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr

0800d5a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b083      	sub	sp, #12
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800d5ac:	bf00      	nop
 800d5ae:	370c      	adds	r7, #12
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr

0800d5b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b083      	sub	sp, #12
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d5c0:	bf00      	nop
 800d5c2:	370c      	adds	r7, #12
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b083      	sub	sp, #12
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800d5d4:	bf00      	nop
 800d5d6:	370c      	adds	r7, #12
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr

0800d5e0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ec:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800d5f6:	68f8      	ldr	r0, [r7, #12]
 800d5f8:	f7ff ffe8 	bl	800d5cc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800d5fc:	bf00      	nop
 800d5fe:	3710      	adds	r7, #16
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}

0800d604 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b084      	sub	sp, #16
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d610:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	2201      	movs	r2, #1
 800d616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	429a      	cmp	r2, r3
 800d622:	d103      	bne.n	800d62c <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	2201      	movs	r2, #1
 800d628:	771a      	strb	r2, [r3, #28]
 800d62a:	e019      	b.n	800d660 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	429a      	cmp	r2, r3
 800d634:	d103      	bne.n	800d63e <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2202      	movs	r2, #2
 800d63a:	771a      	strb	r2, [r3, #28]
 800d63c:	e010      	b.n	800d660 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d642:	687a      	ldr	r2, [r7, #4]
 800d644:	429a      	cmp	r2, r3
 800d646:	d103      	bne.n	800d650 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2204      	movs	r2, #4
 800d64c:	771a      	strb	r2, [r3, #28]
 800d64e:	e007      	b.n	800d660 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	429a      	cmp	r2, r3
 800d658:	d102      	bne.n	800d660 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	2208      	movs	r2, #8
 800d65e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d660:	68f8      	ldr	r0, [r7, #12]
 800d662:	f7ff ff95 	bl	800d590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2200      	movs	r2, #0
 800d66a:	771a      	strb	r2, [r3, #28]
}
 800d66c:	bf00      	nop
 800d66e:	3710      	adds	r7, #16
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}

0800d674 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d680:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	2201      	movs	r2, #1
 800d686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d68e:	687a      	ldr	r2, [r7, #4]
 800d690:	429a      	cmp	r2, r3
 800d692:	d103      	bne.n	800d69c <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2201      	movs	r2, #1
 800d698:	771a      	strb	r2, [r3, #28]
 800d69a:	e019      	b.n	800d6d0 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6a0:	687a      	ldr	r2, [r7, #4]
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d103      	bne.n	800d6ae <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2202      	movs	r2, #2
 800d6aa:	771a      	strb	r2, [r3, #28]
 800d6ac:	e010      	b.n	800d6d0 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d103      	bne.n	800d6c0 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2204      	movs	r2, #4
 800d6bc:	771a      	strb	r2, [r3, #28]
 800d6be:	e007      	b.n	800d6d0 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d102      	bne.n	800d6d0 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2208      	movs	r2, #8
 800d6ce:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800d6d0:	68f8      	ldr	r0, [r7, #12]
 800d6d2:	f7ff ff67 	bl	800d5a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	771a      	strb	r2, [r3, #28]
}
 800d6dc:	bf00      	nop
 800d6de:	3710      	adds	r7, #16
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}

0800d6e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b085      	sub	sp, #20
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	4a40      	ldr	r2, [pc, #256]	; (800d7f8 <TIM_Base_SetConfig+0x114>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d013      	beq.n	800d724 <TIM_Base_SetConfig+0x40>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d702:	d00f      	beq.n	800d724 <TIM_Base_SetConfig+0x40>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	4a3d      	ldr	r2, [pc, #244]	; (800d7fc <TIM_Base_SetConfig+0x118>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d00b      	beq.n	800d724 <TIM_Base_SetConfig+0x40>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	4a3c      	ldr	r2, [pc, #240]	; (800d800 <TIM_Base_SetConfig+0x11c>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d007      	beq.n	800d724 <TIM_Base_SetConfig+0x40>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	4a3b      	ldr	r2, [pc, #236]	; (800d804 <TIM_Base_SetConfig+0x120>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d003      	beq.n	800d724 <TIM_Base_SetConfig+0x40>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	4a3a      	ldr	r2, [pc, #232]	; (800d808 <TIM_Base_SetConfig+0x124>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d108      	bne.n	800d736 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d72a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	685b      	ldr	r3, [r3, #4]
 800d730:	68fa      	ldr	r2, [r7, #12]
 800d732:	4313      	orrs	r3, r2
 800d734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	4a2f      	ldr	r2, [pc, #188]	; (800d7f8 <TIM_Base_SetConfig+0x114>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d02b      	beq.n	800d796 <TIM_Base_SetConfig+0xb2>
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d744:	d027      	beq.n	800d796 <TIM_Base_SetConfig+0xb2>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	4a2c      	ldr	r2, [pc, #176]	; (800d7fc <TIM_Base_SetConfig+0x118>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d023      	beq.n	800d796 <TIM_Base_SetConfig+0xb2>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	4a2b      	ldr	r2, [pc, #172]	; (800d800 <TIM_Base_SetConfig+0x11c>)
 800d752:	4293      	cmp	r3, r2
 800d754:	d01f      	beq.n	800d796 <TIM_Base_SetConfig+0xb2>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	4a2a      	ldr	r2, [pc, #168]	; (800d804 <TIM_Base_SetConfig+0x120>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d01b      	beq.n	800d796 <TIM_Base_SetConfig+0xb2>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	4a29      	ldr	r2, [pc, #164]	; (800d808 <TIM_Base_SetConfig+0x124>)
 800d762:	4293      	cmp	r3, r2
 800d764:	d017      	beq.n	800d796 <TIM_Base_SetConfig+0xb2>
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	4a28      	ldr	r2, [pc, #160]	; (800d80c <TIM_Base_SetConfig+0x128>)
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d013      	beq.n	800d796 <TIM_Base_SetConfig+0xb2>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	4a27      	ldr	r2, [pc, #156]	; (800d810 <TIM_Base_SetConfig+0x12c>)
 800d772:	4293      	cmp	r3, r2
 800d774:	d00f      	beq.n	800d796 <TIM_Base_SetConfig+0xb2>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	4a26      	ldr	r2, [pc, #152]	; (800d814 <TIM_Base_SetConfig+0x130>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d00b      	beq.n	800d796 <TIM_Base_SetConfig+0xb2>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	4a25      	ldr	r2, [pc, #148]	; (800d818 <TIM_Base_SetConfig+0x134>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d007      	beq.n	800d796 <TIM_Base_SetConfig+0xb2>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	4a24      	ldr	r2, [pc, #144]	; (800d81c <TIM_Base_SetConfig+0x138>)
 800d78a:	4293      	cmp	r3, r2
 800d78c:	d003      	beq.n	800d796 <TIM_Base_SetConfig+0xb2>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	4a23      	ldr	r2, [pc, #140]	; (800d820 <TIM_Base_SetConfig+0x13c>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d108      	bne.n	800d7a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d79c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	68db      	ldr	r3, [r3, #12]
 800d7a2:	68fa      	ldr	r2, [r7, #12]
 800d7a4:	4313      	orrs	r3, r2
 800d7a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	695b      	ldr	r3, [r3, #20]
 800d7b2:	4313      	orrs	r3, r2
 800d7b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	68fa      	ldr	r2, [r7, #12]
 800d7ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	689a      	ldr	r2, [r3, #8]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	4a0a      	ldr	r2, [pc, #40]	; (800d7f8 <TIM_Base_SetConfig+0x114>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d003      	beq.n	800d7dc <TIM_Base_SetConfig+0xf8>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	4a0c      	ldr	r2, [pc, #48]	; (800d808 <TIM_Base_SetConfig+0x124>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d103      	bne.n	800d7e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	691a      	ldr	r2, [r3, #16]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2201      	movs	r2, #1
 800d7e8:	615a      	str	r2, [r3, #20]
}
 800d7ea:	bf00      	nop
 800d7ec:	3714      	adds	r7, #20
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr
 800d7f6:	bf00      	nop
 800d7f8:	40010000 	.word	0x40010000
 800d7fc:	40000400 	.word	0x40000400
 800d800:	40000800 	.word	0x40000800
 800d804:	40000c00 	.word	0x40000c00
 800d808:	40010400 	.word	0x40010400
 800d80c:	40014000 	.word	0x40014000
 800d810:	40014400 	.word	0x40014400
 800d814:	40014800 	.word	0x40014800
 800d818:	40001800 	.word	0x40001800
 800d81c:	40001c00 	.word	0x40001c00
 800d820:	40002000 	.word	0x40002000

0800d824 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d824:	b480      	push	{r7}
 800d826:	b087      	sub	sp, #28
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6a1b      	ldr	r3, [r3, #32]
 800d832:	f023 0201 	bic.w	r2, r3, #1
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6a1b      	ldr	r3, [r3, #32]
 800d83e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	685b      	ldr	r3, [r3, #4]
 800d844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	699b      	ldr	r3, [r3, #24]
 800d84a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f023 0303 	bic.w	r3, r3, #3
 800d85a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	68fa      	ldr	r2, [r7, #12]
 800d862:	4313      	orrs	r3, r2
 800d864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	f023 0302 	bic.w	r3, r3, #2
 800d86c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	689b      	ldr	r3, [r3, #8]
 800d872:	697a      	ldr	r2, [r7, #20]
 800d874:	4313      	orrs	r3, r2
 800d876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	4a20      	ldr	r2, [pc, #128]	; (800d8fc <TIM_OC1_SetConfig+0xd8>)
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d003      	beq.n	800d888 <TIM_OC1_SetConfig+0x64>
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	4a1f      	ldr	r2, [pc, #124]	; (800d900 <TIM_OC1_SetConfig+0xdc>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d10c      	bne.n	800d8a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	f023 0308 	bic.w	r3, r3, #8
 800d88e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	68db      	ldr	r3, [r3, #12]
 800d894:	697a      	ldr	r2, [r7, #20]
 800d896:	4313      	orrs	r3, r2
 800d898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	f023 0304 	bic.w	r3, r3, #4
 800d8a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	4a15      	ldr	r2, [pc, #84]	; (800d8fc <TIM_OC1_SetConfig+0xd8>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d003      	beq.n	800d8b2 <TIM_OC1_SetConfig+0x8e>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4a14      	ldr	r2, [pc, #80]	; (800d900 <TIM_OC1_SetConfig+0xdc>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d111      	bne.n	800d8d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d8c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	695b      	ldr	r3, [r3, #20]
 800d8c6:	693a      	ldr	r2, [r7, #16]
 800d8c8:	4313      	orrs	r3, r2
 800d8ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	699b      	ldr	r3, [r3, #24]
 800d8d0:	693a      	ldr	r2, [r7, #16]
 800d8d2:	4313      	orrs	r3, r2
 800d8d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	693a      	ldr	r2, [r7, #16]
 800d8da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	68fa      	ldr	r2, [r7, #12]
 800d8e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	685a      	ldr	r2, [r3, #4]
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	697a      	ldr	r2, [r7, #20]
 800d8ee:	621a      	str	r2, [r3, #32]
}
 800d8f0:	bf00      	nop
 800d8f2:	371c      	adds	r7, #28
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr
 800d8fc:	40010000 	.word	0x40010000
 800d900:	40010400 	.word	0x40010400

0800d904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d904:	b480      	push	{r7}
 800d906:	b087      	sub	sp, #28
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6a1b      	ldr	r3, [r3, #32]
 800d912:	f023 0210 	bic.w	r2, r3, #16
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6a1b      	ldr	r3, [r3, #32]
 800d91e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	699b      	ldr	r3, [r3, #24]
 800d92a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d93a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	021b      	lsls	r3, r3, #8
 800d942:	68fa      	ldr	r2, [r7, #12]
 800d944:	4313      	orrs	r3, r2
 800d946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	f023 0320 	bic.w	r3, r3, #32
 800d94e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	689b      	ldr	r3, [r3, #8]
 800d954:	011b      	lsls	r3, r3, #4
 800d956:	697a      	ldr	r2, [r7, #20]
 800d958:	4313      	orrs	r3, r2
 800d95a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	4a22      	ldr	r2, [pc, #136]	; (800d9e8 <TIM_OC2_SetConfig+0xe4>)
 800d960:	4293      	cmp	r3, r2
 800d962:	d003      	beq.n	800d96c <TIM_OC2_SetConfig+0x68>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	4a21      	ldr	r2, [pc, #132]	; (800d9ec <TIM_OC2_SetConfig+0xe8>)
 800d968:	4293      	cmp	r3, r2
 800d96a:	d10d      	bne.n	800d988 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	68db      	ldr	r3, [r3, #12]
 800d978:	011b      	lsls	r3, r3, #4
 800d97a:	697a      	ldr	r2, [r7, #20]
 800d97c:	4313      	orrs	r3, r2
 800d97e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d986:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	4a17      	ldr	r2, [pc, #92]	; (800d9e8 <TIM_OC2_SetConfig+0xe4>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d003      	beq.n	800d998 <TIM_OC2_SetConfig+0x94>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	4a16      	ldr	r2, [pc, #88]	; (800d9ec <TIM_OC2_SetConfig+0xe8>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d113      	bne.n	800d9c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d99e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d9a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	695b      	ldr	r3, [r3, #20]
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	693a      	ldr	r2, [r7, #16]
 800d9b0:	4313      	orrs	r3, r2
 800d9b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	699b      	ldr	r3, [r3, #24]
 800d9b8:	009b      	lsls	r3, r3, #2
 800d9ba:	693a      	ldr	r2, [r7, #16]
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	693a      	ldr	r2, [r7, #16]
 800d9c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	68fa      	ldr	r2, [r7, #12]
 800d9ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	685a      	ldr	r2, [r3, #4]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	697a      	ldr	r2, [r7, #20]
 800d9d8:	621a      	str	r2, [r3, #32]
}
 800d9da:	bf00      	nop
 800d9dc:	371c      	adds	r7, #28
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e4:	4770      	bx	lr
 800d9e6:	bf00      	nop
 800d9e8:	40010000 	.word	0x40010000
 800d9ec:	40010400 	.word	0x40010400

0800d9f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b087      	sub	sp, #28
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6a1b      	ldr	r3, [r3, #32]
 800d9fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6a1b      	ldr	r3, [r3, #32]
 800da0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	685b      	ldr	r3, [r3, #4]
 800da10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	69db      	ldr	r3, [r3, #28]
 800da16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f023 0303 	bic.w	r3, r3, #3
 800da26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	68fa      	ldr	r2, [r7, #12]
 800da2e:	4313      	orrs	r3, r2
 800da30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	689b      	ldr	r3, [r3, #8]
 800da3e:	021b      	lsls	r3, r3, #8
 800da40:	697a      	ldr	r2, [r7, #20]
 800da42:	4313      	orrs	r3, r2
 800da44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	4a21      	ldr	r2, [pc, #132]	; (800dad0 <TIM_OC3_SetConfig+0xe0>)
 800da4a:	4293      	cmp	r3, r2
 800da4c:	d003      	beq.n	800da56 <TIM_OC3_SetConfig+0x66>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	4a20      	ldr	r2, [pc, #128]	; (800dad4 <TIM_OC3_SetConfig+0xe4>)
 800da52:	4293      	cmp	r3, r2
 800da54:	d10d      	bne.n	800da72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	68db      	ldr	r3, [r3, #12]
 800da62:	021b      	lsls	r3, r3, #8
 800da64:	697a      	ldr	r2, [r7, #20]
 800da66:	4313      	orrs	r3, r2
 800da68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800da70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	4a16      	ldr	r2, [pc, #88]	; (800dad0 <TIM_OC3_SetConfig+0xe0>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d003      	beq.n	800da82 <TIM_OC3_SetConfig+0x92>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	4a15      	ldr	r2, [pc, #84]	; (800dad4 <TIM_OC3_SetConfig+0xe4>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d113      	bne.n	800daaa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800da90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	695b      	ldr	r3, [r3, #20]
 800da96:	011b      	lsls	r3, r3, #4
 800da98:	693a      	ldr	r2, [r7, #16]
 800da9a:	4313      	orrs	r3, r2
 800da9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	699b      	ldr	r3, [r3, #24]
 800daa2:	011b      	lsls	r3, r3, #4
 800daa4:	693a      	ldr	r2, [r7, #16]
 800daa6:	4313      	orrs	r3, r2
 800daa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	693a      	ldr	r2, [r7, #16]
 800daae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	68fa      	ldr	r2, [r7, #12]
 800dab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	685a      	ldr	r2, [r3, #4]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	697a      	ldr	r2, [r7, #20]
 800dac2:	621a      	str	r2, [r3, #32]
}
 800dac4:	bf00      	nop
 800dac6:	371c      	adds	r7, #28
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr
 800dad0:	40010000 	.word	0x40010000
 800dad4:	40010400 	.word	0x40010400

0800dad8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dad8:	b480      	push	{r7}
 800dada:	b087      	sub	sp, #28
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6a1b      	ldr	r3, [r3, #32]
 800dae6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6a1b      	ldr	r3, [r3, #32]
 800daf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	69db      	ldr	r3, [r3, #28]
 800dafe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	021b      	lsls	r3, r3, #8
 800db16:	68fa      	ldr	r2, [r7, #12]
 800db18:	4313      	orrs	r3, r2
 800db1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800db22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	689b      	ldr	r3, [r3, #8]
 800db28:	031b      	lsls	r3, r3, #12
 800db2a:	693a      	ldr	r2, [r7, #16]
 800db2c:	4313      	orrs	r3, r2
 800db2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	4a12      	ldr	r2, [pc, #72]	; (800db7c <TIM_OC4_SetConfig+0xa4>)
 800db34:	4293      	cmp	r3, r2
 800db36:	d003      	beq.n	800db40 <TIM_OC4_SetConfig+0x68>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	4a11      	ldr	r2, [pc, #68]	; (800db80 <TIM_OC4_SetConfig+0xa8>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d109      	bne.n	800db54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800db46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	695b      	ldr	r3, [r3, #20]
 800db4c:	019b      	lsls	r3, r3, #6
 800db4e:	697a      	ldr	r2, [r7, #20]
 800db50:	4313      	orrs	r3, r2
 800db52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	697a      	ldr	r2, [r7, #20]
 800db58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	68fa      	ldr	r2, [r7, #12]
 800db5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	685a      	ldr	r2, [r3, #4]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	693a      	ldr	r2, [r7, #16]
 800db6c:	621a      	str	r2, [r3, #32]
}
 800db6e:	bf00      	nop
 800db70:	371c      	adds	r7, #28
 800db72:	46bd      	mov	sp, r7
 800db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db78:	4770      	bx	lr
 800db7a:	bf00      	nop
 800db7c:	40010000 	.word	0x40010000
 800db80:	40010400 	.word	0x40010400

0800db84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800db84:	b480      	push	{r7}
 800db86:	b087      	sub	sp, #28
 800db88:	af00      	add	r7, sp, #0
 800db8a:	60f8      	str	r0, [r7, #12]
 800db8c:	60b9      	str	r1, [r7, #8]
 800db8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	f003 031f 	and.w	r3, r3, #31
 800db96:	2201      	movs	r2, #1
 800db98:	fa02 f303 	lsl.w	r3, r2, r3
 800db9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	6a1a      	ldr	r2, [r3, #32]
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	43db      	mvns	r3, r3
 800dba6:	401a      	ands	r2, r3
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	6a1a      	ldr	r2, [r3, #32]
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	f003 031f 	and.w	r3, r3, #31
 800dbb6:	6879      	ldr	r1, [r7, #4]
 800dbb8:	fa01 f303 	lsl.w	r3, r1, r3
 800dbbc:	431a      	orrs	r2, r3
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	621a      	str	r2, [r3, #32]
}
 800dbc2:	bf00      	nop
 800dbc4:	371c      	adds	r7, #28
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbcc:	4770      	bx	lr
	...

0800dbd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b085      	sub	sp, #20
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	d101      	bne.n	800dbe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dbe4:	2302      	movs	r3, #2
 800dbe6:	e05a      	b.n	800dc9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2201      	movs	r2, #1
 800dbec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2202      	movs	r2, #2
 800dbf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	689b      	ldr	r3, [r3, #8]
 800dc06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	68fa      	ldr	r2, [r7, #12]
 800dc16:	4313      	orrs	r3, r2
 800dc18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	68fa      	ldr	r2, [r7, #12]
 800dc20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	4a21      	ldr	r2, [pc, #132]	; (800dcac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d022      	beq.n	800dc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc34:	d01d      	beq.n	800dc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	4a1d      	ldr	r2, [pc, #116]	; (800dcb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d018      	beq.n	800dc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4a1b      	ldr	r2, [pc, #108]	; (800dcb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d013      	beq.n	800dc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	4a1a      	ldr	r2, [pc, #104]	; (800dcb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d00e      	beq.n	800dc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4a18      	ldr	r2, [pc, #96]	; (800dcbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d009      	beq.n	800dc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	4a17      	ldr	r2, [pc, #92]	; (800dcc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dc64:	4293      	cmp	r3, r2
 800dc66:	d004      	beq.n	800dc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4a15      	ldr	r2, [pc, #84]	; (800dcc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d10c      	bne.n	800dc8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	685b      	ldr	r3, [r3, #4]
 800dc7e:	68ba      	ldr	r2, [r7, #8]
 800dc80:	4313      	orrs	r3, r2
 800dc82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	68ba      	ldr	r2, [r7, #8]
 800dc8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2201      	movs	r2, #1
 800dc90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2200      	movs	r2, #0
 800dc98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dc9c:	2300      	movs	r3, #0
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3714      	adds	r7, #20
 800dca2:	46bd      	mov	sp, r7
 800dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca8:	4770      	bx	lr
 800dcaa:	bf00      	nop
 800dcac:	40010000 	.word	0x40010000
 800dcb0:	40000400 	.word	0x40000400
 800dcb4:	40000800 	.word	0x40000800
 800dcb8:	40000c00 	.word	0x40000c00
 800dcbc:	40010400 	.word	0x40010400
 800dcc0:	40014000 	.word	0x40014000
 800dcc4:	40001800 	.word	0x40001800

0800dcc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b083      	sub	sp, #12
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dcd0:	bf00      	nop
 800dcd2:	370c      	adds	r7, #12
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcda:	4770      	bx	lr

0800dcdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dcdc:	b480      	push	{r7}
 800dcde:	b083      	sub	sp, #12
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dce4:	bf00      	nop
 800dce6:	370c      	adds	r7, #12
 800dce8:	46bd      	mov	sp, r7
 800dcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcee:	4770      	bx	lr

0800dcf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b082      	sub	sp, #8
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d101      	bne.n	800dd02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	e03f      	b.n	800dd82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dd08:	b2db      	uxtb	r3, r3
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d106      	bne.n	800dd1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2200      	movs	r2, #0
 800dd12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f7f6 fa42 	bl	80041a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2224      	movs	r2, #36	; 0x24
 800dd20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	68da      	ldr	r2, [r3, #12]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dd32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f000 f90b 	bl	800df50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	691a      	ldr	r2, [r3, #16]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dd48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	695a      	ldr	r2, [r3, #20]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dd58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	68da      	ldr	r2, [r3, #12]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dd68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2220      	movs	r2, #32
 800dd74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2220      	movs	r2, #32
 800dd7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800dd80:	2300      	movs	r3, #0
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3708      	adds	r7, #8
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}

0800dd8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dd8a:	b580      	push	{r7, lr}
 800dd8c:	b088      	sub	sp, #32
 800dd8e:	af02      	add	r7, sp, #8
 800dd90:	60f8      	str	r0, [r7, #12]
 800dd92:	60b9      	str	r1, [r7, #8]
 800dd94:	603b      	str	r3, [r7, #0]
 800dd96:	4613      	mov	r3, r2
 800dd98:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dda4:	b2db      	uxtb	r3, r3
 800dda6:	2b20      	cmp	r3, #32
 800dda8:	f040 8083 	bne.w	800deb2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d002      	beq.n	800ddb8 <HAL_UART_Transmit+0x2e>
 800ddb2:	88fb      	ldrh	r3, [r7, #6]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d101      	bne.n	800ddbc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	e07b      	b.n	800deb4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	d101      	bne.n	800ddca <HAL_UART_Transmit+0x40>
 800ddc6:	2302      	movs	r3, #2
 800ddc8:	e074      	b.n	800deb4 <HAL_UART_Transmit+0x12a>
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2201      	movs	r2, #1
 800ddce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2221      	movs	r2, #33	; 0x21
 800dddc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800dde0:	f7fb fb48 	bl	8009474 <HAL_GetTick>
 800dde4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	88fa      	ldrh	r2, [r7, #6]
 800ddea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	88fa      	ldrh	r2, [r7, #6]
 800ddf0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800ddfa:	e042      	b.n	800de82 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800de00:	b29b      	uxth	r3, r3
 800de02:	3b01      	subs	r3, #1
 800de04:	b29a      	uxth	r2, r3
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	689b      	ldr	r3, [r3, #8]
 800de0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de12:	d122      	bne.n	800de5a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	9300      	str	r3, [sp, #0]
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	2200      	movs	r2, #0
 800de1c:	2180      	movs	r1, #128	; 0x80
 800de1e:	68f8      	ldr	r0, [r7, #12]
 800de20:	f000 f84c 	bl	800debc <UART_WaitOnFlagUntilTimeout>
 800de24:	4603      	mov	r3, r0
 800de26:	2b00      	cmp	r3, #0
 800de28:	d001      	beq.n	800de2e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800de2a:	2303      	movs	r3, #3
 800de2c:	e042      	b.n	800deb4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	881b      	ldrh	r3, [r3, #0]
 800de36:	461a      	mov	r2, r3
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800de40:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	691b      	ldr	r3, [r3, #16]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d103      	bne.n	800de52 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	3302      	adds	r3, #2
 800de4e:	60bb      	str	r3, [r7, #8]
 800de50:	e017      	b.n	800de82 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	3301      	adds	r3, #1
 800de56:	60bb      	str	r3, [r7, #8]
 800de58:	e013      	b.n	800de82 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	9300      	str	r3, [sp, #0]
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	2200      	movs	r2, #0
 800de62:	2180      	movs	r1, #128	; 0x80
 800de64:	68f8      	ldr	r0, [r7, #12]
 800de66:	f000 f829 	bl	800debc <UART_WaitOnFlagUntilTimeout>
 800de6a:	4603      	mov	r3, r0
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d001      	beq.n	800de74 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800de70:	2303      	movs	r3, #3
 800de72:	e01f      	b.n	800deb4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	1c5a      	adds	r2, r3, #1
 800de78:	60ba      	str	r2, [r7, #8]
 800de7a:	781a      	ldrb	r2, [r3, #0]
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800de86:	b29b      	uxth	r3, r3
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d1b7      	bne.n	800ddfc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	9300      	str	r3, [sp, #0]
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	2200      	movs	r2, #0
 800de94:	2140      	movs	r1, #64	; 0x40
 800de96:	68f8      	ldr	r0, [r7, #12]
 800de98:	f000 f810 	bl	800debc <UART_WaitOnFlagUntilTimeout>
 800de9c:	4603      	mov	r3, r0
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d001      	beq.n	800dea6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800dea2:	2303      	movs	r3, #3
 800dea4:	e006      	b.n	800deb4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2220      	movs	r2, #32
 800deaa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800deae:	2300      	movs	r3, #0
 800deb0:	e000      	b.n	800deb4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800deb2:	2302      	movs	r3, #2
  }
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3718      	adds	r7, #24
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b084      	sub	sp, #16
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	60b9      	str	r1, [r7, #8]
 800dec6:	603b      	str	r3, [r7, #0]
 800dec8:	4613      	mov	r3, r2
 800deca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800decc:	e02c      	b.n	800df28 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dece:	69bb      	ldr	r3, [r7, #24]
 800ded0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ded4:	d028      	beq.n	800df28 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ded6:	69bb      	ldr	r3, [r7, #24]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d007      	beq.n	800deec <UART_WaitOnFlagUntilTimeout+0x30>
 800dedc:	f7fb faca 	bl	8009474 <HAL_GetTick>
 800dee0:	4602      	mov	r2, r0
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	1ad3      	subs	r3, r2, r3
 800dee6:	69ba      	ldr	r2, [r7, #24]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d21d      	bcs.n	800df28 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	68da      	ldr	r2, [r3, #12]
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800defa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	695a      	ldr	r2, [r3, #20]
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	f022 0201 	bic.w	r2, r2, #1
 800df0a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	2220      	movs	r2, #32
 800df10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2220      	movs	r2, #32
 800df18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2200      	movs	r2, #0
 800df20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800df24:	2303      	movs	r3, #3
 800df26:	e00f      	b.n	800df48 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	681a      	ldr	r2, [r3, #0]
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	4013      	ands	r3, r2
 800df32:	68ba      	ldr	r2, [r7, #8]
 800df34:	429a      	cmp	r2, r3
 800df36:	bf0c      	ite	eq
 800df38:	2301      	moveq	r3, #1
 800df3a:	2300      	movne	r3, #0
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	461a      	mov	r2, r3
 800df40:	79fb      	ldrb	r3, [r7, #7]
 800df42:	429a      	cmp	r2, r3
 800df44:	d0c3      	beq.n	800dece <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800df46:	2300      	movs	r3, #0
}
 800df48:	4618      	mov	r0, r3
 800df4a:	3710      	adds	r7, #16
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}

0800df50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800df50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df54:	b085      	sub	sp, #20
 800df56:	af00      	add	r7, sp, #0
 800df58:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	691b      	ldr	r3, [r3, #16]
 800df60:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	68da      	ldr	r2, [r3, #12]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	430a      	orrs	r2, r1
 800df6e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	689a      	ldr	r2, [r3, #8]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	691b      	ldr	r3, [r3, #16]
 800df78:	431a      	orrs	r2, r3
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	695b      	ldr	r3, [r3, #20]
 800df7e:	431a      	orrs	r2, r3
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	69db      	ldr	r3, [r3, #28]
 800df84:	4313      	orrs	r3, r2
 800df86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	68db      	ldr	r3, [r3, #12]
 800df8e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800df92:	f023 030c 	bic.w	r3, r3, #12
 800df96:	687a      	ldr	r2, [r7, #4]
 800df98:	6812      	ldr	r2, [r2, #0]
 800df9a:	68f9      	ldr	r1, [r7, #12]
 800df9c:	430b      	orrs	r3, r1
 800df9e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	695b      	ldr	r3, [r3, #20]
 800dfa6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	699a      	ldr	r2, [r3, #24]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	430a      	orrs	r2, r1
 800dfb4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	69db      	ldr	r3, [r3, #28]
 800dfba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dfbe:	f040 818b 	bne.w	800e2d8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	4ac1      	ldr	r2, [pc, #772]	; (800e2cc <UART_SetConfig+0x37c>)
 800dfc8:	4293      	cmp	r3, r2
 800dfca:	d005      	beq.n	800dfd8 <UART_SetConfig+0x88>
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4abf      	ldr	r2, [pc, #764]	; (800e2d0 <UART_SetConfig+0x380>)
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	f040 80bd 	bne.w	800e152 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800dfd8:	f7fe f9aa 	bl	800c330 <HAL_RCC_GetPCLK2Freq>
 800dfdc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	461d      	mov	r5, r3
 800dfe2:	f04f 0600 	mov.w	r6, #0
 800dfe6:	46a8      	mov	r8, r5
 800dfe8:	46b1      	mov	r9, r6
 800dfea:	eb18 0308 	adds.w	r3, r8, r8
 800dfee:	eb49 0409 	adc.w	r4, r9, r9
 800dff2:	4698      	mov	r8, r3
 800dff4:	46a1      	mov	r9, r4
 800dff6:	eb18 0805 	adds.w	r8, r8, r5
 800dffa:	eb49 0906 	adc.w	r9, r9, r6
 800dffe:	f04f 0100 	mov.w	r1, #0
 800e002:	f04f 0200 	mov.w	r2, #0
 800e006:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e00a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e00e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e012:	4688      	mov	r8, r1
 800e014:	4691      	mov	r9, r2
 800e016:	eb18 0005 	adds.w	r0, r8, r5
 800e01a:	eb49 0106 	adc.w	r1, r9, r6
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	461d      	mov	r5, r3
 800e024:	f04f 0600 	mov.w	r6, #0
 800e028:	196b      	adds	r3, r5, r5
 800e02a:	eb46 0406 	adc.w	r4, r6, r6
 800e02e:	461a      	mov	r2, r3
 800e030:	4623      	mov	r3, r4
 800e032:	f7f2 fe39 	bl	8000ca8 <__aeabi_uldivmod>
 800e036:	4603      	mov	r3, r0
 800e038:	460c      	mov	r4, r1
 800e03a:	461a      	mov	r2, r3
 800e03c:	4ba5      	ldr	r3, [pc, #660]	; (800e2d4 <UART_SetConfig+0x384>)
 800e03e:	fba3 2302 	umull	r2, r3, r3, r2
 800e042:	095b      	lsrs	r3, r3, #5
 800e044:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	461d      	mov	r5, r3
 800e04c:	f04f 0600 	mov.w	r6, #0
 800e050:	46a9      	mov	r9, r5
 800e052:	46b2      	mov	sl, r6
 800e054:	eb19 0309 	adds.w	r3, r9, r9
 800e058:	eb4a 040a 	adc.w	r4, sl, sl
 800e05c:	4699      	mov	r9, r3
 800e05e:	46a2      	mov	sl, r4
 800e060:	eb19 0905 	adds.w	r9, r9, r5
 800e064:	eb4a 0a06 	adc.w	sl, sl, r6
 800e068:	f04f 0100 	mov.w	r1, #0
 800e06c:	f04f 0200 	mov.w	r2, #0
 800e070:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e074:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e078:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e07c:	4689      	mov	r9, r1
 800e07e:	4692      	mov	sl, r2
 800e080:	eb19 0005 	adds.w	r0, r9, r5
 800e084:	eb4a 0106 	adc.w	r1, sl, r6
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	461d      	mov	r5, r3
 800e08e:	f04f 0600 	mov.w	r6, #0
 800e092:	196b      	adds	r3, r5, r5
 800e094:	eb46 0406 	adc.w	r4, r6, r6
 800e098:	461a      	mov	r2, r3
 800e09a:	4623      	mov	r3, r4
 800e09c:	f7f2 fe04 	bl	8000ca8 <__aeabi_uldivmod>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	460c      	mov	r4, r1
 800e0a4:	461a      	mov	r2, r3
 800e0a6:	4b8b      	ldr	r3, [pc, #556]	; (800e2d4 <UART_SetConfig+0x384>)
 800e0a8:	fba3 1302 	umull	r1, r3, r3, r2
 800e0ac:	095b      	lsrs	r3, r3, #5
 800e0ae:	2164      	movs	r1, #100	; 0x64
 800e0b0:	fb01 f303 	mul.w	r3, r1, r3
 800e0b4:	1ad3      	subs	r3, r2, r3
 800e0b6:	00db      	lsls	r3, r3, #3
 800e0b8:	3332      	adds	r3, #50	; 0x32
 800e0ba:	4a86      	ldr	r2, [pc, #536]	; (800e2d4 <UART_SetConfig+0x384>)
 800e0bc:	fba2 2303 	umull	r2, r3, r2, r3
 800e0c0:	095b      	lsrs	r3, r3, #5
 800e0c2:	005b      	lsls	r3, r3, #1
 800e0c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e0c8:	4498      	add	r8, r3
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	461d      	mov	r5, r3
 800e0ce:	f04f 0600 	mov.w	r6, #0
 800e0d2:	46a9      	mov	r9, r5
 800e0d4:	46b2      	mov	sl, r6
 800e0d6:	eb19 0309 	adds.w	r3, r9, r9
 800e0da:	eb4a 040a 	adc.w	r4, sl, sl
 800e0de:	4699      	mov	r9, r3
 800e0e0:	46a2      	mov	sl, r4
 800e0e2:	eb19 0905 	adds.w	r9, r9, r5
 800e0e6:	eb4a 0a06 	adc.w	sl, sl, r6
 800e0ea:	f04f 0100 	mov.w	r1, #0
 800e0ee:	f04f 0200 	mov.w	r2, #0
 800e0f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e0f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e0fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e0fe:	4689      	mov	r9, r1
 800e100:	4692      	mov	sl, r2
 800e102:	eb19 0005 	adds.w	r0, r9, r5
 800e106:	eb4a 0106 	adc.w	r1, sl, r6
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	461d      	mov	r5, r3
 800e110:	f04f 0600 	mov.w	r6, #0
 800e114:	196b      	adds	r3, r5, r5
 800e116:	eb46 0406 	adc.w	r4, r6, r6
 800e11a:	461a      	mov	r2, r3
 800e11c:	4623      	mov	r3, r4
 800e11e:	f7f2 fdc3 	bl	8000ca8 <__aeabi_uldivmod>
 800e122:	4603      	mov	r3, r0
 800e124:	460c      	mov	r4, r1
 800e126:	461a      	mov	r2, r3
 800e128:	4b6a      	ldr	r3, [pc, #424]	; (800e2d4 <UART_SetConfig+0x384>)
 800e12a:	fba3 1302 	umull	r1, r3, r3, r2
 800e12e:	095b      	lsrs	r3, r3, #5
 800e130:	2164      	movs	r1, #100	; 0x64
 800e132:	fb01 f303 	mul.w	r3, r1, r3
 800e136:	1ad3      	subs	r3, r2, r3
 800e138:	00db      	lsls	r3, r3, #3
 800e13a:	3332      	adds	r3, #50	; 0x32
 800e13c:	4a65      	ldr	r2, [pc, #404]	; (800e2d4 <UART_SetConfig+0x384>)
 800e13e:	fba2 2303 	umull	r2, r3, r2, r3
 800e142:	095b      	lsrs	r3, r3, #5
 800e144:	f003 0207 	and.w	r2, r3, #7
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4442      	add	r2, r8
 800e14e:	609a      	str	r2, [r3, #8]
 800e150:	e26f      	b.n	800e632 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e152:	f7fe f8d9 	bl	800c308 <HAL_RCC_GetPCLK1Freq>
 800e156:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	461d      	mov	r5, r3
 800e15c:	f04f 0600 	mov.w	r6, #0
 800e160:	46a8      	mov	r8, r5
 800e162:	46b1      	mov	r9, r6
 800e164:	eb18 0308 	adds.w	r3, r8, r8
 800e168:	eb49 0409 	adc.w	r4, r9, r9
 800e16c:	4698      	mov	r8, r3
 800e16e:	46a1      	mov	r9, r4
 800e170:	eb18 0805 	adds.w	r8, r8, r5
 800e174:	eb49 0906 	adc.w	r9, r9, r6
 800e178:	f04f 0100 	mov.w	r1, #0
 800e17c:	f04f 0200 	mov.w	r2, #0
 800e180:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e184:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e188:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e18c:	4688      	mov	r8, r1
 800e18e:	4691      	mov	r9, r2
 800e190:	eb18 0005 	adds.w	r0, r8, r5
 800e194:	eb49 0106 	adc.w	r1, r9, r6
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	685b      	ldr	r3, [r3, #4]
 800e19c:	461d      	mov	r5, r3
 800e19e:	f04f 0600 	mov.w	r6, #0
 800e1a2:	196b      	adds	r3, r5, r5
 800e1a4:	eb46 0406 	adc.w	r4, r6, r6
 800e1a8:	461a      	mov	r2, r3
 800e1aa:	4623      	mov	r3, r4
 800e1ac:	f7f2 fd7c 	bl	8000ca8 <__aeabi_uldivmod>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	460c      	mov	r4, r1
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	4b47      	ldr	r3, [pc, #284]	; (800e2d4 <UART_SetConfig+0x384>)
 800e1b8:	fba3 2302 	umull	r2, r3, r3, r2
 800e1bc:	095b      	lsrs	r3, r3, #5
 800e1be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	461d      	mov	r5, r3
 800e1c6:	f04f 0600 	mov.w	r6, #0
 800e1ca:	46a9      	mov	r9, r5
 800e1cc:	46b2      	mov	sl, r6
 800e1ce:	eb19 0309 	adds.w	r3, r9, r9
 800e1d2:	eb4a 040a 	adc.w	r4, sl, sl
 800e1d6:	4699      	mov	r9, r3
 800e1d8:	46a2      	mov	sl, r4
 800e1da:	eb19 0905 	adds.w	r9, r9, r5
 800e1de:	eb4a 0a06 	adc.w	sl, sl, r6
 800e1e2:	f04f 0100 	mov.w	r1, #0
 800e1e6:	f04f 0200 	mov.w	r2, #0
 800e1ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e1ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e1f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e1f6:	4689      	mov	r9, r1
 800e1f8:	4692      	mov	sl, r2
 800e1fa:	eb19 0005 	adds.w	r0, r9, r5
 800e1fe:	eb4a 0106 	adc.w	r1, sl, r6
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	685b      	ldr	r3, [r3, #4]
 800e206:	461d      	mov	r5, r3
 800e208:	f04f 0600 	mov.w	r6, #0
 800e20c:	196b      	adds	r3, r5, r5
 800e20e:	eb46 0406 	adc.w	r4, r6, r6
 800e212:	461a      	mov	r2, r3
 800e214:	4623      	mov	r3, r4
 800e216:	f7f2 fd47 	bl	8000ca8 <__aeabi_uldivmod>
 800e21a:	4603      	mov	r3, r0
 800e21c:	460c      	mov	r4, r1
 800e21e:	461a      	mov	r2, r3
 800e220:	4b2c      	ldr	r3, [pc, #176]	; (800e2d4 <UART_SetConfig+0x384>)
 800e222:	fba3 1302 	umull	r1, r3, r3, r2
 800e226:	095b      	lsrs	r3, r3, #5
 800e228:	2164      	movs	r1, #100	; 0x64
 800e22a:	fb01 f303 	mul.w	r3, r1, r3
 800e22e:	1ad3      	subs	r3, r2, r3
 800e230:	00db      	lsls	r3, r3, #3
 800e232:	3332      	adds	r3, #50	; 0x32
 800e234:	4a27      	ldr	r2, [pc, #156]	; (800e2d4 <UART_SetConfig+0x384>)
 800e236:	fba2 2303 	umull	r2, r3, r2, r3
 800e23a:	095b      	lsrs	r3, r3, #5
 800e23c:	005b      	lsls	r3, r3, #1
 800e23e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e242:	4498      	add	r8, r3
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	461d      	mov	r5, r3
 800e248:	f04f 0600 	mov.w	r6, #0
 800e24c:	46a9      	mov	r9, r5
 800e24e:	46b2      	mov	sl, r6
 800e250:	eb19 0309 	adds.w	r3, r9, r9
 800e254:	eb4a 040a 	adc.w	r4, sl, sl
 800e258:	4699      	mov	r9, r3
 800e25a:	46a2      	mov	sl, r4
 800e25c:	eb19 0905 	adds.w	r9, r9, r5
 800e260:	eb4a 0a06 	adc.w	sl, sl, r6
 800e264:	f04f 0100 	mov.w	r1, #0
 800e268:	f04f 0200 	mov.w	r2, #0
 800e26c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e270:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e274:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e278:	4689      	mov	r9, r1
 800e27a:	4692      	mov	sl, r2
 800e27c:	eb19 0005 	adds.w	r0, r9, r5
 800e280:	eb4a 0106 	adc.w	r1, sl, r6
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	685b      	ldr	r3, [r3, #4]
 800e288:	461d      	mov	r5, r3
 800e28a:	f04f 0600 	mov.w	r6, #0
 800e28e:	196b      	adds	r3, r5, r5
 800e290:	eb46 0406 	adc.w	r4, r6, r6
 800e294:	461a      	mov	r2, r3
 800e296:	4623      	mov	r3, r4
 800e298:	f7f2 fd06 	bl	8000ca8 <__aeabi_uldivmod>
 800e29c:	4603      	mov	r3, r0
 800e29e:	460c      	mov	r4, r1
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	4b0c      	ldr	r3, [pc, #48]	; (800e2d4 <UART_SetConfig+0x384>)
 800e2a4:	fba3 1302 	umull	r1, r3, r3, r2
 800e2a8:	095b      	lsrs	r3, r3, #5
 800e2aa:	2164      	movs	r1, #100	; 0x64
 800e2ac:	fb01 f303 	mul.w	r3, r1, r3
 800e2b0:	1ad3      	subs	r3, r2, r3
 800e2b2:	00db      	lsls	r3, r3, #3
 800e2b4:	3332      	adds	r3, #50	; 0x32
 800e2b6:	4a07      	ldr	r2, [pc, #28]	; (800e2d4 <UART_SetConfig+0x384>)
 800e2b8:	fba2 2303 	umull	r2, r3, r2, r3
 800e2bc:	095b      	lsrs	r3, r3, #5
 800e2be:	f003 0207 	and.w	r2, r3, #7
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	4442      	add	r2, r8
 800e2c8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800e2ca:	e1b2      	b.n	800e632 <UART_SetConfig+0x6e2>
 800e2cc:	40011000 	.word	0x40011000
 800e2d0:	40011400 	.word	0x40011400
 800e2d4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	4ad7      	ldr	r2, [pc, #860]	; (800e63c <UART_SetConfig+0x6ec>)
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	d005      	beq.n	800e2ee <UART_SetConfig+0x39e>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	4ad6      	ldr	r2, [pc, #856]	; (800e640 <UART_SetConfig+0x6f0>)
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	f040 80d1 	bne.w	800e490 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800e2ee:	f7fe f81f 	bl	800c330 <HAL_RCC_GetPCLK2Freq>
 800e2f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	469a      	mov	sl, r3
 800e2f8:	f04f 0b00 	mov.w	fp, #0
 800e2fc:	46d0      	mov	r8, sl
 800e2fe:	46d9      	mov	r9, fp
 800e300:	eb18 0308 	adds.w	r3, r8, r8
 800e304:	eb49 0409 	adc.w	r4, r9, r9
 800e308:	4698      	mov	r8, r3
 800e30a:	46a1      	mov	r9, r4
 800e30c:	eb18 080a 	adds.w	r8, r8, sl
 800e310:	eb49 090b 	adc.w	r9, r9, fp
 800e314:	f04f 0100 	mov.w	r1, #0
 800e318:	f04f 0200 	mov.w	r2, #0
 800e31c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e320:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e324:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e328:	4688      	mov	r8, r1
 800e32a:	4691      	mov	r9, r2
 800e32c:	eb1a 0508 	adds.w	r5, sl, r8
 800e330:	eb4b 0609 	adc.w	r6, fp, r9
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	685b      	ldr	r3, [r3, #4]
 800e338:	4619      	mov	r1, r3
 800e33a:	f04f 0200 	mov.w	r2, #0
 800e33e:	f04f 0300 	mov.w	r3, #0
 800e342:	f04f 0400 	mov.w	r4, #0
 800e346:	0094      	lsls	r4, r2, #2
 800e348:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e34c:	008b      	lsls	r3, r1, #2
 800e34e:	461a      	mov	r2, r3
 800e350:	4623      	mov	r3, r4
 800e352:	4628      	mov	r0, r5
 800e354:	4631      	mov	r1, r6
 800e356:	f7f2 fca7 	bl	8000ca8 <__aeabi_uldivmod>
 800e35a:	4603      	mov	r3, r0
 800e35c:	460c      	mov	r4, r1
 800e35e:	461a      	mov	r2, r3
 800e360:	4bb8      	ldr	r3, [pc, #736]	; (800e644 <UART_SetConfig+0x6f4>)
 800e362:	fba3 2302 	umull	r2, r3, r3, r2
 800e366:	095b      	lsrs	r3, r3, #5
 800e368:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	469b      	mov	fp, r3
 800e370:	f04f 0c00 	mov.w	ip, #0
 800e374:	46d9      	mov	r9, fp
 800e376:	46e2      	mov	sl, ip
 800e378:	eb19 0309 	adds.w	r3, r9, r9
 800e37c:	eb4a 040a 	adc.w	r4, sl, sl
 800e380:	4699      	mov	r9, r3
 800e382:	46a2      	mov	sl, r4
 800e384:	eb19 090b 	adds.w	r9, r9, fp
 800e388:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e38c:	f04f 0100 	mov.w	r1, #0
 800e390:	f04f 0200 	mov.w	r2, #0
 800e394:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e398:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e39c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e3a0:	4689      	mov	r9, r1
 800e3a2:	4692      	mov	sl, r2
 800e3a4:	eb1b 0509 	adds.w	r5, fp, r9
 800e3a8:	eb4c 060a 	adc.w	r6, ip, sl
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	685b      	ldr	r3, [r3, #4]
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	f04f 0200 	mov.w	r2, #0
 800e3b6:	f04f 0300 	mov.w	r3, #0
 800e3ba:	f04f 0400 	mov.w	r4, #0
 800e3be:	0094      	lsls	r4, r2, #2
 800e3c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e3c4:	008b      	lsls	r3, r1, #2
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	4623      	mov	r3, r4
 800e3ca:	4628      	mov	r0, r5
 800e3cc:	4631      	mov	r1, r6
 800e3ce:	f7f2 fc6b 	bl	8000ca8 <__aeabi_uldivmod>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	460c      	mov	r4, r1
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	4b9a      	ldr	r3, [pc, #616]	; (800e644 <UART_SetConfig+0x6f4>)
 800e3da:	fba3 1302 	umull	r1, r3, r3, r2
 800e3de:	095b      	lsrs	r3, r3, #5
 800e3e0:	2164      	movs	r1, #100	; 0x64
 800e3e2:	fb01 f303 	mul.w	r3, r1, r3
 800e3e6:	1ad3      	subs	r3, r2, r3
 800e3e8:	011b      	lsls	r3, r3, #4
 800e3ea:	3332      	adds	r3, #50	; 0x32
 800e3ec:	4a95      	ldr	r2, [pc, #596]	; (800e644 <UART_SetConfig+0x6f4>)
 800e3ee:	fba2 2303 	umull	r2, r3, r2, r3
 800e3f2:	095b      	lsrs	r3, r3, #5
 800e3f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e3f8:	4498      	add	r8, r3
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	469b      	mov	fp, r3
 800e3fe:	f04f 0c00 	mov.w	ip, #0
 800e402:	46d9      	mov	r9, fp
 800e404:	46e2      	mov	sl, ip
 800e406:	eb19 0309 	adds.w	r3, r9, r9
 800e40a:	eb4a 040a 	adc.w	r4, sl, sl
 800e40e:	4699      	mov	r9, r3
 800e410:	46a2      	mov	sl, r4
 800e412:	eb19 090b 	adds.w	r9, r9, fp
 800e416:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e41a:	f04f 0100 	mov.w	r1, #0
 800e41e:	f04f 0200 	mov.w	r2, #0
 800e422:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e426:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e42a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e42e:	4689      	mov	r9, r1
 800e430:	4692      	mov	sl, r2
 800e432:	eb1b 0509 	adds.w	r5, fp, r9
 800e436:	eb4c 060a 	adc.w	r6, ip, sl
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	685b      	ldr	r3, [r3, #4]
 800e43e:	4619      	mov	r1, r3
 800e440:	f04f 0200 	mov.w	r2, #0
 800e444:	f04f 0300 	mov.w	r3, #0
 800e448:	f04f 0400 	mov.w	r4, #0
 800e44c:	0094      	lsls	r4, r2, #2
 800e44e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e452:	008b      	lsls	r3, r1, #2
 800e454:	461a      	mov	r2, r3
 800e456:	4623      	mov	r3, r4
 800e458:	4628      	mov	r0, r5
 800e45a:	4631      	mov	r1, r6
 800e45c:	f7f2 fc24 	bl	8000ca8 <__aeabi_uldivmod>
 800e460:	4603      	mov	r3, r0
 800e462:	460c      	mov	r4, r1
 800e464:	461a      	mov	r2, r3
 800e466:	4b77      	ldr	r3, [pc, #476]	; (800e644 <UART_SetConfig+0x6f4>)
 800e468:	fba3 1302 	umull	r1, r3, r3, r2
 800e46c:	095b      	lsrs	r3, r3, #5
 800e46e:	2164      	movs	r1, #100	; 0x64
 800e470:	fb01 f303 	mul.w	r3, r1, r3
 800e474:	1ad3      	subs	r3, r2, r3
 800e476:	011b      	lsls	r3, r3, #4
 800e478:	3332      	adds	r3, #50	; 0x32
 800e47a:	4a72      	ldr	r2, [pc, #456]	; (800e644 <UART_SetConfig+0x6f4>)
 800e47c:	fba2 2303 	umull	r2, r3, r2, r3
 800e480:	095b      	lsrs	r3, r3, #5
 800e482:	f003 020f 	and.w	r2, r3, #15
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	4442      	add	r2, r8
 800e48c:	609a      	str	r2, [r3, #8]
 800e48e:	e0d0      	b.n	800e632 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800e490:	f7fd ff3a 	bl	800c308 <HAL_RCC_GetPCLK1Freq>
 800e494:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	469a      	mov	sl, r3
 800e49a:	f04f 0b00 	mov.w	fp, #0
 800e49e:	46d0      	mov	r8, sl
 800e4a0:	46d9      	mov	r9, fp
 800e4a2:	eb18 0308 	adds.w	r3, r8, r8
 800e4a6:	eb49 0409 	adc.w	r4, r9, r9
 800e4aa:	4698      	mov	r8, r3
 800e4ac:	46a1      	mov	r9, r4
 800e4ae:	eb18 080a 	adds.w	r8, r8, sl
 800e4b2:	eb49 090b 	adc.w	r9, r9, fp
 800e4b6:	f04f 0100 	mov.w	r1, #0
 800e4ba:	f04f 0200 	mov.w	r2, #0
 800e4be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e4c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e4c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e4ca:	4688      	mov	r8, r1
 800e4cc:	4691      	mov	r9, r2
 800e4ce:	eb1a 0508 	adds.w	r5, sl, r8
 800e4d2:	eb4b 0609 	adc.w	r6, fp, r9
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	685b      	ldr	r3, [r3, #4]
 800e4da:	4619      	mov	r1, r3
 800e4dc:	f04f 0200 	mov.w	r2, #0
 800e4e0:	f04f 0300 	mov.w	r3, #0
 800e4e4:	f04f 0400 	mov.w	r4, #0
 800e4e8:	0094      	lsls	r4, r2, #2
 800e4ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e4ee:	008b      	lsls	r3, r1, #2
 800e4f0:	461a      	mov	r2, r3
 800e4f2:	4623      	mov	r3, r4
 800e4f4:	4628      	mov	r0, r5
 800e4f6:	4631      	mov	r1, r6
 800e4f8:	f7f2 fbd6 	bl	8000ca8 <__aeabi_uldivmod>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	460c      	mov	r4, r1
 800e500:	461a      	mov	r2, r3
 800e502:	4b50      	ldr	r3, [pc, #320]	; (800e644 <UART_SetConfig+0x6f4>)
 800e504:	fba3 2302 	umull	r2, r3, r3, r2
 800e508:	095b      	lsrs	r3, r3, #5
 800e50a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	469b      	mov	fp, r3
 800e512:	f04f 0c00 	mov.w	ip, #0
 800e516:	46d9      	mov	r9, fp
 800e518:	46e2      	mov	sl, ip
 800e51a:	eb19 0309 	adds.w	r3, r9, r9
 800e51e:	eb4a 040a 	adc.w	r4, sl, sl
 800e522:	4699      	mov	r9, r3
 800e524:	46a2      	mov	sl, r4
 800e526:	eb19 090b 	adds.w	r9, r9, fp
 800e52a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e52e:	f04f 0100 	mov.w	r1, #0
 800e532:	f04f 0200 	mov.w	r2, #0
 800e536:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e53a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e53e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e542:	4689      	mov	r9, r1
 800e544:	4692      	mov	sl, r2
 800e546:	eb1b 0509 	adds.w	r5, fp, r9
 800e54a:	eb4c 060a 	adc.w	r6, ip, sl
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	685b      	ldr	r3, [r3, #4]
 800e552:	4619      	mov	r1, r3
 800e554:	f04f 0200 	mov.w	r2, #0
 800e558:	f04f 0300 	mov.w	r3, #0
 800e55c:	f04f 0400 	mov.w	r4, #0
 800e560:	0094      	lsls	r4, r2, #2
 800e562:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e566:	008b      	lsls	r3, r1, #2
 800e568:	461a      	mov	r2, r3
 800e56a:	4623      	mov	r3, r4
 800e56c:	4628      	mov	r0, r5
 800e56e:	4631      	mov	r1, r6
 800e570:	f7f2 fb9a 	bl	8000ca8 <__aeabi_uldivmod>
 800e574:	4603      	mov	r3, r0
 800e576:	460c      	mov	r4, r1
 800e578:	461a      	mov	r2, r3
 800e57a:	4b32      	ldr	r3, [pc, #200]	; (800e644 <UART_SetConfig+0x6f4>)
 800e57c:	fba3 1302 	umull	r1, r3, r3, r2
 800e580:	095b      	lsrs	r3, r3, #5
 800e582:	2164      	movs	r1, #100	; 0x64
 800e584:	fb01 f303 	mul.w	r3, r1, r3
 800e588:	1ad3      	subs	r3, r2, r3
 800e58a:	011b      	lsls	r3, r3, #4
 800e58c:	3332      	adds	r3, #50	; 0x32
 800e58e:	4a2d      	ldr	r2, [pc, #180]	; (800e644 <UART_SetConfig+0x6f4>)
 800e590:	fba2 2303 	umull	r2, r3, r2, r3
 800e594:	095b      	lsrs	r3, r3, #5
 800e596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e59a:	4498      	add	r8, r3
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	469b      	mov	fp, r3
 800e5a0:	f04f 0c00 	mov.w	ip, #0
 800e5a4:	46d9      	mov	r9, fp
 800e5a6:	46e2      	mov	sl, ip
 800e5a8:	eb19 0309 	adds.w	r3, r9, r9
 800e5ac:	eb4a 040a 	adc.w	r4, sl, sl
 800e5b0:	4699      	mov	r9, r3
 800e5b2:	46a2      	mov	sl, r4
 800e5b4:	eb19 090b 	adds.w	r9, r9, fp
 800e5b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e5bc:	f04f 0100 	mov.w	r1, #0
 800e5c0:	f04f 0200 	mov.w	r2, #0
 800e5c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e5c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e5cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e5d0:	4689      	mov	r9, r1
 800e5d2:	4692      	mov	sl, r2
 800e5d4:	eb1b 0509 	adds.w	r5, fp, r9
 800e5d8:	eb4c 060a 	adc.w	r6, ip, sl
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	685b      	ldr	r3, [r3, #4]
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	f04f 0200 	mov.w	r2, #0
 800e5e6:	f04f 0300 	mov.w	r3, #0
 800e5ea:	f04f 0400 	mov.w	r4, #0
 800e5ee:	0094      	lsls	r4, r2, #2
 800e5f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e5f4:	008b      	lsls	r3, r1, #2
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	4623      	mov	r3, r4
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	4631      	mov	r1, r6
 800e5fe:	f7f2 fb53 	bl	8000ca8 <__aeabi_uldivmod>
 800e602:	4603      	mov	r3, r0
 800e604:	460c      	mov	r4, r1
 800e606:	461a      	mov	r2, r3
 800e608:	4b0e      	ldr	r3, [pc, #56]	; (800e644 <UART_SetConfig+0x6f4>)
 800e60a:	fba3 1302 	umull	r1, r3, r3, r2
 800e60e:	095b      	lsrs	r3, r3, #5
 800e610:	2164      	movs	r1, #100	; 0x64
 800e612:	fb01 f303 	mul.w	r3, r1, r3
 800e616:	1ad3      	subs	r3, r2, r3
 800e618:	011b      	lsls	r3, r3, #4
 800e61a:	3332      	adds	r3, #50	; 0x32
 800e61c:	4a09      	ldr	r2, [pc, #36]	; (800e644 <UART_SetConfig+0x6f4>)
 800e61e:	fba2 2303 	umull	r2, r3, r2, r3
 800e622:	095b      	lsrs	r3, r3, #5
 800e624:	f003 020f 	and.w	r2, r3, #15
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	4442      	add	r2, r8
 800e62e:	609a      	str	r2, [r3, #8]
}
 800e630:	e7ff      	b.n	800e632 <UART_SetConfig+0x6e2>
 800e632:	bf00      	nop
 800e634:	3714      	adds	r7, #20
 800e636:	46bd      	mov	sp, r7
 800e638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e63c:	40011000 	.word	0x40011000
 800e640:	40011400 	.word	0x40011400
 800e644:	51eb851f 	.word	0x51eb851f

0800e648 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800e64e:	f000 fb1f 	bl	800ec90 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800e652:	4b19      	ldr	r3, [pc, #100]	; (800e6b8 <MX_LWIP_Init+0x70>)
 800e654:	2200      	movs	r2, #0
 800e656:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800e658:	4b18      	ldr	r3, [pc, #96]	; (800e6bc <MX_LWIP_Init+0x74>)
 800e65a:	2200      	movs	r2, #0
 800e65c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800e65e:	4b18      	ldr	r3, [pc, #96]	; (800e6c0 <MX_LWIP_Init+0x78>)
 800e660:	2200      	movs	r2, #0
 800e662:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800e664:	4b17      	ldr	r3, [pc, #92]	; (800e6c4 <MX_LWIP_Init+0x7c>)
 800e666:	9302      	str	r3, [sp, #8]
 800e668:	4b17      	ldr	r3, [pc, #92]	; (800e6c8 <MX_LWIP_Init+0x80>)
 800e66a:	9301      	str	r3, [sp, #4]
 800e66c:	2300      	movs	r3, #0
 800e66e:	9300      	str	r3, [sp, #0]
 800e670:	4b13      	ldr	r3, [pc, #76]	; (800e6c0 <MX_LWIP_Init+0x78>)
 800e672:	4a12      	ldr	r2, [pc, #72]	; (800e6bc <MX_LWIP_Init+0x74>)
 800e674:	4910      	ldr	r1, [pc, #64]	; (800e6b8 <MX_LWIP_Init+0x70>)
 800e676:	4815      	ldr	r0, [pc, #84]	; (800e6cc <MX_LWIP_Init+0x84>)
 800e678:	f000 ffb0 	bl	800f5dc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800e67c:	4813      	ldr	r0, [pc, #76]	; (800e6cc <MX_LWIP_Init+0x84>)
 800e67e:	f001 f967 	bl	800f950 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800e682:	4b12      	ldr	r3, [pc, #72]	; (800e6cc <MX_LWIP_Init+0x84>)
 800e684:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e688:	089b      	lsrs	r3, r3, #2
 800e68a:	f003 0301 	and.w	r3, r3, #1
 800e68e:	b2db      	uxtb	r3, r3
 800e690:	2b00      	cmp	r3, #0
 800e692:	d003      	beq.n	800e69c <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800e694:	480d      	ldr	r0, [pc, #52]	; (800e6cc <MX_LWIP_Init+0x84>)
 800e696:	f001 f96b 	bl	800f970 <netif_set_up>
 800e69a:	e002      	b.n	800e6a2 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800e69c:	480b      	ldr	r0, [pc, #44]	; (800e6cc <MX_LWIP_Init+0x84>)
 800e69e:	f001 f9d3 	bl	800fa48 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800e6a2:	490b      	ldr	r1, [pc, #44]	; (800e6d0 <MX_LWIP_Init+0x88>)
 800e6a4:	4809      	ldr	r0, [pc, #36]	; (800e6cc <MX_LWIP_Init+0x84>)
 800e6a6:	f001 fa01 	bl	800faac <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800e6aa:	4808      	ldr	r0, [pc, #32]	; (800e6cc <MX_LWIP_Init+0x84>)
 800e6ac:	f008 fa8e 	bl	8016bcc <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800e6b0:	bf00      	nop
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	20001410 	.word	0x20001410
 800e6bc:	20001414 	.word	0x20001414
 800e6c0:	20001418 	.word	0x20001418
 800e6c4:	0801a589 	.word	0x0801a589
 800e6c8:	0800eabd 	.word	0x0800eabd
 800e6cc:	200013d8 	.word	0x200013d8
 800e6d0:	0800eb29 	.word	0x0800eb29

0800e6d4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b08e      	sub	sp, #56	; 0x38
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e6dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	601a      	str	r2, [r3, #0]
 800e6e4:	605a      	str	r2, [r3, #4]
 800e6e6:	609a      	str	r2, [r3, #8]
 800e6e8:	60da      	str	r2, [r3, #12]
 800e6ea:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	4a46      	ldr	r2, [pc, #280]	; (800e80c <HAL_ETH_MspInit+0x138>)
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	f040 8085 	bne.w	800e802 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	623b      	str	r3, [r7, #32]
 800e6fc:	4b44      	ldr	r3, [pc, #272]	; (800e810 <HAL_ETH_MspInit+0x13c>)
 800e6fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e700:	4a43      	ldr	r2, [pc, #268]	; (800e810 <HAL_ETH_MspInit+0x13c>)
 800e702:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e706:	6313      	str	r3, [r2, #48]	; 0x30
 800e708:	4b41      	ldr	r3, [pc, #260]	; (800e810 <HAL_ETH_MspInit+0x13c>)
 800e70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e70c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e710:	623b      	str	r3, [r7, #32]
 800e712:	6a3b      	ldr	r3, [r7, #32]
 800e714:	2300      	movs	r3, #0
 800e716:	61fb      	str	r3, [r7, #28]
 800e718:	4b3d      	ldr	r3, [pc, #244]	; (800e810 <HAL_ETH_MspInit+0x13c>)
 800e71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e71c:	4a3c      	ldr	r2, [pc, #240]	; (800e810 <HAL_ETH_MspInit+0x13c>)
 800e71e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e722:	6313      	str	r3, [r2, #48]	; 0x30
 800e724:	4b3a      	ldr	r3, [pc, #232]	; (800e810 <HAL_ETH_MspInit+0x13c>)
 800e726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e728:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e72c:	61fb      	str	r3, [r7, #28]
 800e72e:	69fb      	ldr	r3, [r7, #28]
 800e730:	2300      	movs	r3, #0
 800e732:	61bb      	str	r3, [r7, #24]
 800e734:	4b36      	ldr	r3, [pc, #216]	; (800e810 <HAL_ETH_MspInit+0x13c>)
 800e736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e738:	4a35      	ldr	r2, [pc, #212]	; (800e810 <HAL_ETH_MspInit+0x13c>)
 800e73a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e73e:	6313      	str	r3, [r2, #48]	; 0x30
 800e740:	4b33      	ldr	r3, [pc, #204]	; (800e810 <HAL_ETH_MspInit+0x13c>)
 800e742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e748:	61bb      	str	r3, [r7, #24]
 800e74a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e74c:	2300      	movs	r3, #0
 800e74e:	617b      	str	r3, [r7, #20]
 800e750:	4b2f      	ldr	r3, [pc, #188]	; (800e810 <HAL_ETH_MspInit+0x13c>)
 800e752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e754:	4a2e      	ldr	r2, [pc, #184]	; (800e810 <HAL_ETH_MspInit+0x13c>)
 800e756:	f043 0304 	orr.w	r3, r3, #4
 800e75a:	6313      	str	r3, [r2, #48]	; 0x30
 800e75c:	4b2c      	ldr	r3, [pc, #176]	; (800e810 <HAL_ETH_MspInit+0x13c>)
 800e75e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e760:	f003 0304 	and.w	r3, r3, #4
 800e764:	617b      	str	r3, [r7, #20]
 800e766:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e768:	2300      	movs	r3, #0
 800e76a:	613b      	str	r3, [r7, #16]
 800e76c:	4b28      	ldr	r3, [pc, #160]	; (800e810 <HAL_ETH_MspInit+0x13c>)
 800e76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e770:	4a27      	ldr	r2, [pc, #156]	; (800e810 <HAL_ETH_MspInit+0x13c>)
 800e772:	f043 0301 	orr.w	r3, r3, #1
 800e776:	6313      	str	r3, [r2, #48]	; 0x30
 800e778:	4b25      	ldr	r3, [pc, #148]	; (800e810 <HAL_ETH_MspInit+0x13c>)
 800e77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e77c:	f003 0301 	and.w	r3, r3, #1
 800e780:	613b      	str	r3, [r7, #16]
 800e782:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e784:	2300      	movs	r3, #0
 800e786:	60fb      	str	r3, [r7, #12]
 800e788:	4b21      	ldr	r3, [pc, #132]	; (800e810 <HAL_ETH_MspInit+0x13c>)
 800e78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e78c:	4a20      	ldr	r2, [pc, #128]	; (800e810 <HAL_ETH_MspInit+0x13c>)
 800e78e:	f043 0302 	orr.w	r3, r3, #2
 800e792:	6313      	str	r3, [r2, #48]	; 0x30
 800e794:	4b1e      	ldr	r3, [pc, #120]	; (800e810 <HAL_ETH_MspInit+0x13c>)
 800e796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e798:	f003 0302 	and.w	r3, r3, #2
 800e79c:	60fb      	str	r3, [r7, #12]
 800e79e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800e7a0:	2332      	movs	r3, #50	; 0x32
 800e7a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7a4:	2302      	movs	r3, #2
 800e7a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e7ac:	2303      	movs	r3, #3
 800e7ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e7b0:	230b      	movs	r3, #11
 800e7b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e7b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	4816      	ldr	r0, [pc, #88]	; (800e814 <HAL_ETH_MspInit+0x140>)
 800e7bc:	f7fc ff86 	bl	800b6cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800e7c0:	2386      	movs	r3, #134	; 0x86
 800e7c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7c4:	2302      	movs	r3, #2
 800e7c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e7cc:	2303      	movs	r3, #3
 800e7ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e7d0:	230b      	movs	r3, #11
 800e7d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e7d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7d8:	4619      	mov	r1, r3
 800e7da:	480f      	ldr	r0, [pc, #60]	; (800e818 <HAL_ETH_MspInit+0x144>)
 800e7dc:	f7fc ff76 	bl	800b6cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800e7e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e7e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7e6:	2302      	movs	r3, #2
 800e7e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e7ee:	2303      	movs	r3, #3
 800e7f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e7f2:	230b      	movs	r3, #11
 800e7f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e7f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	4807      	ldr	r0, [pc, #28]	; (800e81c <HAL_ETH_MspInit+0x148>)
 800e7fe:	f7fc ff65 	bl	800b6cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800e802:	bf00      	nop
 800e804:	3738      	adds	r7, #56	; 0x38
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	40028000 	.word	0x40028000
 800e810:	40023800 	.word	0x40023800
 800e814:	40020800 	.word	0x40020800
 800e818:	40020000 	.word	0x40020000
 800e81c:	40020400 	.word	0x40020400

0800e820 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b086      	sub	sp, #24
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800e828:	2300      	movs	r3, #0
 800e82a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800e82c:	4b4e      	ldr	r3, [pc, #312]	; (800e968 <low_level_init+0x148>)
 800e82e:	4a4f      	ldr	r2, [pc, #316]	; (800e96c <low_level_init+0x14c>)
 800e830:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800e832:	4b4d      	ldr	r3, [pc, #308]	; (800e968 <low_level_init+0x148>)
 800e834:	2201      	movs	r2, #1
 800e836:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 800e838:	4b4b      	ldr	r3, [pc, #300]	; (800e968 <low_level_init+0x148>)
 800e83a:	2201      	movs	r2, #1
 800e83c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x02;
 800e83e:	2302      	movs	r3, #2
 800e840:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x00;
 800e842:	2300      	movs	r3, #0
 800e844:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x00;
 800e846:	2300      	movs	r3, #0
 800e848:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800e84a:	2300      	movs	r3, #0
 800e84c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800e84e:	2300      	movs	r3, #0
 800e850:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800e852:	2300      	movs	r3, #0
 800e854:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800e856:	4a44      	ldr	r2, [pc, #272]	; (800e968 <low_level_init+0x148>)
 800e858:	f107 0308 	add.w	r3, r7, #8
 800e85c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800e85e:	4b42      	ldr	r3, [pc, #264]	; (800e968 <low_level_init+0x148>)
 800e860:	2200      	movs	r2, #0
 800e862:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800e864:	4b40      	ldr	r3, [pc, #256]	; (800e968 <low_level_init+0x148>)
 800e866:	2200      	movs	r2, #0
 800e868:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800e86a:	4b3f      	ldr	r3, [pc, #252]	; (800e968 <low_level_init+0x148>)
 800e86c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800e870:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800e872:	483d      	ldr	r0, [pc, #244]	; (800e968 <low_level_init+0x148>)
 800e874:	f7fb fe88 	bl	800a588 <HAL_ETH_Init>
 800e878:	4603      	mov	r3, r0
 800e87a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800e87c:	7dfb      	ldrb	r3, [r7, #23]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d108      	bne.n	800e894 <low_level_init+0x74>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e888:	f043 0304 	orr.w	r3, r3, #4
 800e88c:	b2da      	uxtb	r2, r3
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800e894:	2304      	movs	r3, #4
 800e896:	4a36      	ldr	r2, [pc, #216]	; (800e970 <low_level_init+0x150>)
 800e898:	4936      	ldr	r1, [pc, #216]	; (800e974 <low_level_init+0x154>)
 800e89a:	4833      	ldr	r0, [pc, #204]	; (800e968 <low_level_init+0x148>)
 800e89c:	f7fc f812 	bl	800a8c4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800e8a0:	2304      	movs	r3, #4
 800e8a2:	4a35      	ldr	r2, [pc, #212]	; (800e978 <low_level_init+0x158>)
 800e8a4:	4935      	ldr	r1, [pc, #212]	; (800e97c <low_level_init+0x15c>)
 800e8a6:	4830      	ldr	r0, [pc, #192]	; (800e968 <low_level_init+0x148>)
 800e8a8:	f7fc f875 	bl	800a996 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2206      	movs	r2, #6
 800e8b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800e8b4:	4b2c      	ldr	r3, [pc, #176]	; (800e968 <low_level_init+0x148>)
 800e8b6:	695b      	ldr	r3, [r3, #20]
 800e8b8:	781a      	ldrb	r2, [r3, #0]
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800e8c0:	4b29      	ldr	r3, [pc, #164]	; (800e968 <low_level_init+0x148>)
 800e8c2:	695b      	ldr	r3, [r3, #20]
 800e8c4:	785a      	ldrb	r2, [r3, #1]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800e8cc:	4b26      	ldr	r3, [pc, #152]	; (800e968 <low_level_init+0x148>)
 800e8ce:	695b      	ldr	r3, [r3, #20]
 800e8d0:	789a      	ldrb	r2, [r3, #2]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800e8d8:	4b23      	ldr	r3, [pc, #140]	; (800e968 <low_level_init+0x148>)
 800e8da:	695b      	ldr	r3, [r3, #20]
 800e8dc:	78da      	ldrb	r2, [r3, #3]
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800e8e4:	4b20      	ldr	r3, [pc, #128]	; (800e968 <low_level_init+0x148>)
 800e8e6:	695b      	ldr	r3, [r3, #20]
 800e8e8:	791a      	ldrb	r2, [r3, #4]
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800e8f0:	4b1d      	ldr	r3, [pc, #116]	; (800e968 <low_level_init+0x148>)
 800e8f2:	695b      	ldr	r3, [r3, #20]
 800e8f4:	795a      	ldrb	r2, [r3, #5]
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800e902:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e90a:	f043 030a 	orr.w	r3, r3, #10
 800e90e:	b2da      	uxtb	r2, r3
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800e916:	4814      	ldr	r0, [pc, #80]	; (800e968 <low_level_init+0x148>)
 800e918:	f7fc fa62 	bl	800ade0 <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 800e91c:	f107 0310 	add.w	r3, r7, #16
 800e920:	461a      	mov	r2, r3
 800e922:	2111      	movs	r1, #17
 800e924:	4810      	ldr	r0, [pc, #64]	; (800e968 <low_level_init+0x148>)
 800e926:	f7fc f98d 	bl	800ac44 <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	f043 0303 	orr.w	r3, r3, #3
 800e930:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	461a      	mov	r2, r3
 800e936:	2111      	movs	r1, #17
 800e938:	480b      	ldr	r0, [pc, #44]	; (800e968 <low_level_init+0x148>)
 800e93a:	f7fc f9eb 	bl	800ad14 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 800e93e:	f107 0310 	add.w	r3, r7, #16
 800e942:	461a      	mov	r2, r3
 800e944:	2112      	movs	r1, #18
 800e946:	4808      	ldr	r0, [pc, #32]	; (800e968 <low_level_init+0x148>)
 800e948:	f7fc f97c 	bl	800ac44 <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	f043 0320 	orr.w	r3, r3, #32
 800e952:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	461a      	mov	r2, r3
 800e958:	2112      	movs	r1, #18
 800e95a:	4803      	ldr	r0, [pc, #12]	; (800e968 <low_level_init+0x148>)
 800e95c:	f7fc f9da 	bl	800ad14 <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800e960:	bf00      	nop
 800e962:	3718      	adds	r7, #24
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}
 800e968:	20002cec 	.word	0x20002cec
 800e96c:	40028000 	.word	0x40028000
 800e970:	20002d34 	.word	0x20002d34
 800e974:	2000141c 	.word	0x2000141c
 800e978:	2000149c 	.word	0x2000149c
 800e97c:	20002c6c 	.word	0x20002c6c

0800e980 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b08a      	sub	sp, #40	; 0x28
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800e98a:	4b4b      	ldr	r3, [pc, #300]	; (800eab8 <low_level_output+0x138>)
 800e98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e98e:	689b      	ldr	r3, [r3, #8]
 800e990:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800e992:	2300      	movs	r3, #0
 800e994:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800e996:	2300      	movs	r3, #0
 800e998:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800e99a:	2300      	movs	r3, #0
 800e99c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800e9a2:	4b45      	ldr	r3, [pc, #276]	; (800eab8 <low_level_output+0x138>)
 800e9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9a6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	623b      	str	r3, [r7, #32]
 800e9b0:	e05a      	b.n	800ea68 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800e9b2:	69bb      	ldr	r3, [r7, #24]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	da03      	bge.n	800e9c2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800e9ba:	23f8      	movs	r3, #248	; 0xf8
 800e9bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800e9c0:	e05c      	b.n	800ea7c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800e9c2:	6a3b      	ldr	r3, [r7, #32]
 800e9c4:	895b      	ldrh	r3, [r3, #10]
 800e9c6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800e9cc:	e02f      	b.n	800ea2e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800e9ce:	69fa      	ldr	r2, [r7, #28]
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	18d0      	adds	r0, r2, r3
 800e9d4:	6a3b      	ldr	r3, [r7, #32]
 800e9d6:	685a      	ldr	r2, [r3, #4]
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	18d1      	adds	r1, r2, r3
 800e9dc:	693b      	ldr	r3, [r7, #16]
 800e9de:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800e9e2:	3304      	adds	r3, #4
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	f00b ff14 	bl	801a812 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800e9ea:	69bb      	ldr	r3, [r7, #24]
 800e9ec:	68db      	ldr	r3, [r3, #12]
 800e9ee:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800e9f0:	69bb      	ldr	r3, [r7, #24]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	da03      	bge.n	800ea00 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800e9f8:	23f8      	movs	r3, #248	; 0xf8
 800e9fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800e9fe:	e03d      	b.n	800ea7c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800ea00:	69bb      	ldr	r3, [r7, #24]
 800ea02:	689b      	ldr	r3, [r3, #8]
 800ea04:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800ea06:	693a      	ldr	r2, [r7, #16]
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	4413      	add	r3, r2
 800ea0c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800ea10:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800ea12:	68ba      	ldr	r2, [r7, #8]
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	1ad3      	subs	r3, r2, r3
 800ea18:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800ea1c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800ea1e:	697a      	ldr	r2, [r7, #20]
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	1ad3      	subs	r3, r2, r3
 800ea24:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800ea28:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800ea2e:	68fa      	ldr	r2, [r7, #12]
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	4413      	add	r3, r2
 800ea34:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d8c8      	bhi.n	800e9ce <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800ea3c:	69fa      	ldr	r2, [r7, #28]
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	18d0      	adds	r0, r2, r3
 800ea42:	6a3b      	ldr	r3, [r7, #32]
 800ea44:	685a      	ldr	r2, [r3, #4]
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	4413      	add	r3, r2
 800ea4a:	68fa      	ldr	r2, [r7, #12]
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	f00b fee0 	bl	801a812 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800ea52:	693a      	ldr	r2, [r7, #16]
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	4413      	add	r3, r2
 800ea58:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800ea5a:	697a      	ldr	r2, [r7, #20]
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	4413      	add	r3, r2
 800ea60:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800ea62:	6a3b      	ldr	r3, [r7, #32]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	623b      	str	r3, [r7, #32]
 800ea68:	6a3b      	ldr	r3, [r7, #32]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d1a1      	bne.n	800e9b2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800ea6e:	6979      	ldr	r1, [r7, #20]
 800ea70:	4811      	ldr	r0, [pc, #68]	; (800eab8 <low_level_output+0x138>)
 800ea72:	f7fb fffd 	bl	800aa70 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800ea76:	2300      	movs	r3, #0
 800ea78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800ea7c:	4b0e      	ldr	r3, [pc, #56]	; (800eab8 <low_level_output+0x138>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea84:	3314      	adds	r3, #20
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f003 0320 	and.w	r3, r3, #32
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d00d      	beq.n	800eaac <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800ea90:	4b09      	ldr	r3, [pc, #36]	; (800eab8 <low_level_output+0x138>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea98:	3314      	adds	r3, #20
 800ea9a:	2220      	movs	r2, #32
 800ea9c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800ea9e:	4b06      	ldr	r3, [pc, #24]	; (800eab8 <low_level_output+0x138>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eaa6:	3304      	adds	r3, #4
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800eaac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3728      	adds	r7, #40	; 0x28
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}
 800eab8:	20002cec 	.word	0x20002cec

0800eabc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d106      	bne.n	800ead8 <ethernetif_init+0x1c>
 800eaca:	4b0e      	ldr	r3, [pc, #56]	; (800eb04 <ethernetif_init+0x48>)
 800eacc:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800ead0:	490d      	ldr	r1, [pc, #52]	; (800eb08 <ethernetif_init+0x4c>)
 800ead2:	480e      	ldr	r0, [pc, #56]	; (800eb0c <ethernetif_init+0x50>)
 800ead4:	f00c fbce 	bl	801b274 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2273      	movs	r2, #115	; 0x73
 800eadc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2274      	movs	r2, #116	; 0x74
 800eae4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	4a09      	ldr	r2, [pc, #36]	; (800eb10 <ethernetif_init+0x54>)
 800eaec:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	4a08      	ldr	r2, [pc, #32]	; (800eb14 <ethernetif_init+0x58>)
 800eaf2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f7ff fe93 	bl	800e820 <low_level_init>

  return ERR_OK;
 800eafa:	2300      	movs	r3, #0
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3708      	adds	r7, #8
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	08020744 	.word	0x08020744
 800eb08:	08020760 	.word	0x08020760
 800eb0c:	08020770 	.word	0x08020770
 800eb10:	08018a1d 	.word	0x08018a1d
 800eb14:	0800e981 	.word	0x0800e981

0800eb18 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800eb1c:	f7fa fcaa 	bl	8009474 <HAL_GetTick>
 800eb20:	4603      	mov	r3, r0
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	bd80      	pop	{r7, pc}
	...

0800eb28 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800eb30:	2300      	movs	r3, #0
 800eb32:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800eb34:	2300      	movs	r3, #0
 800eb36:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eb3e:	089b      	lsrs	r3, r3, #2
 800eb40:	f003 0301 	and.w	r3, r3, #1
 800eb44:	b2db      	uxtb	r3, r3
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d05d      	beq.n	800ec06 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800eb4a:	4b34      	ldr	r3, [pc, #208]	; (800ec1c <ethernetif_update_config+0xf4>)
 800eb4c:	685b      	ldr	r3, [r3, #4]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d03f      	beq.n	800ebd2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800eb52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800eb56:	2100      	movs	r1, #0
 800eb58:	4830      	ldr	r0, [pc, #192]	; (800ec1c <ethernetif_update_config+0xf4>)
 800eb5a:	f7fc f8db 	bl	800ad14 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800eb5e:	f7fa fc89 	bl	8009474 <HAL_GetTick>
 800eb62:	4603      	mov	r3, r0
 800eb64:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800eb66:	f107 0308 	add.w	r3, r7, #8
 800eb6a:	461a      	mov	r2, r3
 800eb6c:	2101      	movs	r1, #1
 800eb6e:	482b      	ldr	r0, [pc, #172]	; (800ec1c <ethernetif_update_config+0xf4>)
 800eb70:	f7fc f868 	bl	800ac44 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800eb74:	f7fa fc7e 	bl	8009474 <HAL_GetTick>
 800eb78:	4602      	mov	r2, r0
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	1ad3      	subs	r3, r2, r3
 800eb7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eb82:	d828      	bhi.n	800ebd6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	f003 0320 	and.w	r3, r3, #32
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d0eb      	beq.n	800eb66 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800eb8e:	f107 0308 	add.w	r3, r7, #8
 800eb92:	461a      	mov	r2, r3
 800eb94:	211f      	movs	r1, #31
 800eb96:	4821      	ldr	r0, [pc, #132]	; (800ec1c <ethernetif_update_config+0xf4>)
 800eb98:	f7fc f854 	bl	800ac44 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	f003 0310 	and.w	r3, r3, #16
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d004      	beq.n	800ebb0 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800eba6:	4b1d      	ldr	r3, [pc, #116]	; (800ec1c <ethernetif_update_config+0xf4>)
 800eba8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ebac:	60da      	str	r2, [r3, #12]
 800ebae:	e002      	b.n	800ebb6 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800ebb0:	4b1a      	ldr	r3, [pc, #104]	; (800ec1c <ethernetif_update_config+0xf4>)
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	f003 0304 	and.w	r3, r3, #4
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d003      	beq.n	800ebc8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800ebc0:	4b16      	ldr	r3, [pc, #88]	; (800ec1c <ethernetif_update_config+0xf4>)
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	609a      	str	r2, [r3, #8]
 800ebc6:	e016      	b.n	800ebf6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800ebc8:	4b14      	ldr	r3, [pc, #80]	; (800ec1c <ethernetif_update_config+0xf4>)
 800ebca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ebce:	609a      	str	r2, [r3, #8]
 800ebd0:	e011      	b.n	800ebf6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800ebd2:	bf00      	nop
 800ebd4:	e000      	b.n	800ebd8 <ethernetif_update_config+0xb0>
          goto error;
 800ebd6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800ebd8:	4b10      	ldr	r3, [pc, #64]	; (800ec1c <ethernetif_update_config+0xf4>)
 800ebda:	68db      	ldr	r3, [r3, #12]
 800ebdc:	08db      	lsrs	r3, r3, #3
 800ebde:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800ebe0:	4b0e      	ldr	r3, [pc, #56]	; (800ec1c <ethernetif_update_config+0xf4>)
 800ebe2:	689b      	ldr	r3, [r3, #8]
 800ebe4:	085b      	lsrs	r3, r3, #1
 800ebe6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800ebe8:	4313      	orrs	r3, r2
 800ebea:	b29b      	uxth	r3, r3
 800ebec:	461a      	mov	r2, r3
 800ebee:	2100      	movs	r1, #0
 800ebf0:	480a      	ldr	r0, [pc, #40]	; (800ec1c <ethernetif_update_config+0xf4>)
 800ebf2:	f7fc f88f 	bl	800ad14 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800ebf6:	2100      	movs	r1, #0
 800ebf8:	4808      	ldr	r0, [pc, #32]	; (800ec1c <ethernetif_update_config+0xf4>)
 800ebfa:	f7fc f94f 	bl	800ae9c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800ebfe:	4807      	ldr	r0, [pc, #28]	; (800ec1c <ethernetif_update_config+0xf4>)
 800ec00:	f7fc f8ee 	bl	800ade0 <HAL_ETH_Start>
 800ec04:	e002      	b.n	800ec0c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800ec06:	4805      	ldr	r0, [pc, #20]	; (800ec1c <ethernetif_update_config+0xf4>)
 800ec08:	f7fc f919 	bl	800ae3e <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f000 f807 	bl	800ec20 <ethernetif_notify_conn_changed>
}
 800ec12:	bf00      	nop
 800ec14:	3710      	adds	r7, #16
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}
 800ec1a:	bf00      	nop
 800ec1c:	20002cec 	.word	0x20002cec

0800ec20 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b083      	sub	sp, #12
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800ec28:	bf00      	nop
 800ec2a:	370c      	adds	r7, #12
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec32:	4770      	bx	lr

0800ec34 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ec34:	b480      	push	{r7}
 800ec36:	b083      	sub	sp, #12
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ec3e:	88fb      	ldrh	r3, [r7, #6]
 800ec40:	021b      	lsls	r3, r3, #8
 800ec42:	b21a      	sxth	r2, r3
 800ec44:	88fb      	ldrh	r3, [r7, #6]
 800ec46:	0a1b      	lsrs	r3, r3, #8
 800ec48:	b29b      	uxth	r3, r3
 800ec4a:	b21b      	sxth	r3, r3
 800ec4c:	4313      	orrs	r3, r2
 800ec4e:	b21b      	sxth	r3, r3
 800ec50:	b29b      	uxth	r3, r3
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	370c      	adds	r7, #12
 800ec56:	46bd      	mov	sp, r7
 800ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5c:	4770      	bx	lr

0800ec5e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ec5e:	b480      	push	{r7}
 800ec60:	b083      	sub	sp, #12
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	061a      	lsls	r2, r3, #24
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	021b      	lsls	r3, r3, #8
 800ec6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ec72:	431a      	orrs	r2, r3
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	0a1b      	lsrs	r3, r3, #8
 800ec78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ec7c:	431a      	orrs	r2, r3
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	0e1b      	lsrs	r3, r3, #24
 800ec82:	4313      	orrs	r3, r2
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	370c      	adds	r7, #12
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8e:	4770      	bx	lr

0800ec90 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b082      	sub	sp, #8
 800ec94:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ec96:	2300      	movs	r3, #0
 800ec98:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800ec9a:	f000 f8d5 	bl	800ee48 <mem_init>
  memp_init();
 800ec9e:	f000 fbdb 	bl	800f458 <memp_init>
  pbuf_init();
  netif_init();
 800eca2:	f000 fc93 	bl	800f5cc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800eca6:	f006 ff59 	bl	8015b5c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ecaa:	f001 fcf9 	bl	80106a0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ecae:	f006 ff0f 	bl	8015ad0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ecb2:	bf00      	nop
 800ecb4:	3708      	adds	r7, #8
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
	...

0800ecbc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b083      	sub	sp, #12
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ecc6:	4b05      	ldr	r3, [pc, #20]	; (800ecdc <ptr_to_mem+0x20>)
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	88fb      	ldrh	r3, [r7, #6]
 800eccc:	4413      	add	r3, r2
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	370c      	adds	r7, #12
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd8:	4770      	bx	lr
 800ecda:	bf00      	nop
 800ecdc:	200004a4 	.word	0x200004a4

0800ece0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b083      	sub	sp, #12
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	4a05      	ldr	r2, [pc, #20]	; (800ed00 <mem_to_ptr+0x20>)
 800ecec:	6812      	ldr	r2, [r2, #0]
 800ecee:	1a9b      	subs	r3, r3, r2
 800ecf0:	b29b      	uxth	r3, r3
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	370c      	adds	r7, #12
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr
 800ecfe:	bf00      	nop
 800ed00:	200004a4 	.word	0x200004a4

0800ed04 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ed04:	b590      	push	{r4, r7, lr}
 800ed06:	b085      	sub	sp, #20
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ed0c:	4b45      	ldr	r3, [pc, #276]	; (800ee24 <plug_holes+0x120>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	687a      	ldr	r2, [r7, #4]
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d206      	bcs.n	800ed24 <plug_holes+0x20>
 800ed16:	4b44      	ldr	r3, [pc, #272]	; (800ee28 <plug_holes+0x124>)
 800ed18:	f240 12df 	movw	r2, #479	; 0x1df
 800ed1c:	4943      	ldr	r1, [pc, #268]	; (800ee2c <plug_holes+0x128>)
 800ed1e:	4844      	ldr	r0, [pc, #272]	; (800ee30 <plug_holes+0x12c>)
 800ed20:	f00c faa8 	bl	801b274 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ed24:	4b43      	ldr	r3, [pc, #268]	; (800ee34 <plug_holes+0x130>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	687a      	ldr	r2, [r7, #4]
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d306      	bcc.n	800ed3c <plug_holes+0x38>
 800ed2e:	4b3e      	ldr	r3, [pc, #248]	; (800ee28 <plug_holes+0x124>)
 800ed30:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ed34:	4940      	ldr	r1, [pc, #256]	; (800ee38 <plug_holes+0x134>)
 800ed36:	483e      	ldr	r0, [pc, #248]	; (800ee30 <plug_holes+0x12c>)
 800ed38:	f00c fa9c 	bl	801b274 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	791b      	ldrb	r3, [r3, #4]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d006      	beq.n	800ed52 <plug_holes+0x4e>
 800ed44:	4b38      	ldr	r3, [pc, #224]	; (800ee28 <plug_holes+0x124>)
 800ed46:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ed4a:	493c      	ldr	r1, [pc, #240]	; (800ee3c <plug_holes+0x138>)
 800ed4c:	4838      	ldr	r0, [pc, #224]	; (800ee30 <plug_holes+0x12c>)
 800ed4e:	f00c fa91 	bl	801b274 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	881b      	ldrh	r3, [r3, #0]
 800ed56:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ed5a:	d906      	bls.n	800ed6a <plug_holes+0x66>
 800ed5c:	4b32      	ldr	r3, [pc, #200]	; (800ee28 <plug_holes+0x124>)
 800ed5e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ed62:	4937      	ldr	r1, [pc, #220]	; (800ee40 <plug_holes+0x13c>)
 800ed64:	4832      	ldr	r0, [pc, #200]	; (800ee30 <plug_holes+0x12c>)
 800ed66:	f00c fa85 	bl	801b274 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	881b      	ldrh	r3, [r3, #0]
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7ff ffa4 	bl	800ecbc <ptr_to_mem>
 800ed74:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ed76:	687a      	ldr	r2, [r7, #4]
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d024      	beq.n	800edc8 <plug_holes+0xc4>
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	791b      	ldrb	r3, [r3, #4]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d120      	bne.n	800edc8 <plug_holes+0xc4>
 800ed86:	4b2b      	ldr	r3, [pc, #172]	; (800ee34 <plug_holes+0x130>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	68fa      	ldr	r2, [r7, #12]
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d01b      	beq.n	800edc8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ed90:	4b2c      	ldr	r3, [pc, #176]	; (800ee44 <plug_holes+0x140>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	68fa      	ldr	r2, [r7, #12]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d102      	bne.n	800eda0 <plug_holes+0x9c>
      lfree = mem;
 800ed9a:	4a2a      	ldr	r2, [pc, #168]	; (800ee44 <plug_holes+0x140>)
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	881a      	ldrh	r2, [r3, #0]
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	881b      	ldrh	r3, [r3, #0]
 800edac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800edb0:	d00a      	beq.n	800edc8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	881b      	ldrh	r3, [r3, #0]
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7ff ff80 	bl	800ecbc <ptr_to_mem>
 800edbc:	4604      	mov	r4, r0
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f7ff ff8e 	bl	800ece0 <mem_to_ptr>
 800edc4:	4603      	mov	r3, r0
 800edc6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	885b      	ldrh	r3, [r3, #2]
 800edcc:	4618      	mov	r0, r3
 800edce:	f7ff ff75 	bl	800ecbc <ptr_to_mem>
 800edd2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800edd4:	68ba      	ldr	r2, [r7, #8]
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	429a      	cmp	r2, r3
 800edda:	d01f      	beq.n	800ee1c <plug_holes+0x118>
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	791b      	ldrb	r3, [r3, #4]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d11b      	bne.n	800ee1c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ede4:	4b17      	ldr	r3, [pc, #92]	; (800ee44 <plug_holes+0x140>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	687a      	ldr	r2, [r7, #4]
 800edea:	429a      	cmp	r2, r3
 800edec:	d102      	bne.n	800edf4 <plug_holes+0xf0>
      lfree = pmem;
 800edee:	4a15      	ldr	r2, [pc, #84]	; (800ee44 <plug_holes+0x140>)
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	881a      	ldrh	r2, [r3, #0]
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	881b      	ldrh	r3, [r3, #0]
 800ee00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ee04:	d00a      	beq.n	800ee1c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	881b      	ldrh	r3, [r3, #0]
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7ff ff56 	bl	800ecbc <ptr_to_mem>
 800ee10:	4604      	mov	r4, r0
 800ee12:	68b8      	ldr	r0, [r7, #8]
 800ee14:	f7ff ff64 	bl	800ece0 <mem_to_ptr>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ee1c:	bf00      	nop
 800ee1e:	3714      	adds	r7, #20
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd90      	pop	{r4, r7, pc}
 800ee24:	200004a4 	.word	0x200004a4
 800ee28:	08020798 	.word	0x08020798
 800ee2c:	080207c8 	.word	0x080207c8
 800ee30:	080207e0 	.word	0x080207e0
 800ee34:	200004a8 	.word	0x200004a8
 800ee38:	08020808 	.word	0x08020808
 800ee3c:	08020824 	.word	0x08020824
 800ee40:	08020840 	.word	0x08020840
 800ee44:	200004ac 	.word	0x200004ac

0800ee48 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ee4e:	4b18      	ldr	r3, [pc, #96]	; (800eeb0 <mem_init+0x68>)
 800ee50:	3303      	adds	r3, #3
 800ee52:	f023 0303 	bic.w	r3, r3, #3
 800ee56:	461a      	mov	r2, r3
 800ee58:	4b16      	ldr	r3, [pc, #88]	; (800eeb4 <mem_init+0x6c>)
 800ee5a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ee5c:	4b15      	ldr	r3, [pc, #84]	; (800eeb4 <mem_init+0x6c>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ee68:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2200      	movs	r2, #0
 800ee74:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ee76:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ee7a:	f7ff ff1f 	bl	800ecbc <ptr_to_mem>
 800ee7e:	4602      	mov	r2, r0
 800ee80:	4b0d      	ldr	r3, [pc, #52]	; (800eeb8 <mem_init+0x70>)
 800ee82:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800ee84:	4b0c      	ldr	r3, [pc, #48]	; (800eeb8 <mem_init+0x70>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	2201      	movs	r2, #1
 800ee8a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ee8c:	4b0a      	ldr	r3, [pc, #40]	; (800eeb8 <mem_init+0x70>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ee94:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ee96:	4b08      	ldr	r3, [pc, #32]	; (800eeb8 <mem_init+0x70>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ee9e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800eea0:	4b04      	ldr	r3, [pc, #16]	; (800eeb4 <mem_init+0x6c>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	4a05      	ldr	r2, [pc, #20]	; (800eebc <mem_init+0x74>)
 800eea6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800eea8:	bf00      	nop
 800eeaa:	3708      	adds	r7, #8
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}
 800eeb0:	2000451c 	.word	0x2000451c
 800eeb4:	200004a4 	.word	0x200004a4
 800eeb8:	200004a8 	.word	0x200004a8
 800eebc:	200004ac 	.word	0x200004ac

0800eec0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b086      	sub	sp, #24
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f7ff ff09 	bl	800ece0 <mem_to_ptr>
 800eece:	4603      	mov	r3, r0
 800eed0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	881b      	ldrh	r3, [r3, #0]
 800eed6:	4618      	mov	r0, r3
 800eed8:	f7ff fef0 	bl	800ecbc <ptr_to_mem>
 800eedc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	885b      	ldrh	r3, [r3, #2]
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7ff feea 	bl	800ecbc <ptr_to_mem>
 800eee8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	881b      	ldrh	r3, [r3, #0]
 800eeee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eef2:	d818      	bhi.n	800ef26 <mem_link_valid+0x66>
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	885b      	ldrh	r3, [r3, #2]
 800eef8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eefc:	d813      	bhi.n	800ef26 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ef02:	8afa      	ldrh	r2, [r7, #22]
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d004      	beq.n	800ef12 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	881b      	ldrh	r3, [r3, #0]
 800ef0c:	8afa      	ldrh	r2, [r7, #22]
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d109      	bne.n	800ef26 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ef12:	4b08      	ldr	r3, [pc, #32]	; (800ef34 <mem_link_valid+0x74>)
 800ef14:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ef16:	693a      	ldr	r2, [r7, #16]
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d006      	beq.n	800ef2a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ef1c:	693b      	ldr	r3, [r7, #16]
 800ef1e:	885b      	ldrh	r3, [r3, #2]
 800ef20:	8afa      	ldrh	r2, [r7, #22]
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d001      	beq.n	800ef2a <mem_link_valid+0x6a>
    return 0;
 800ef26:	2300      	movs	r3, #0
 800ef28:	e000      	b.n	800ef2c <mem_link_valid+0x6c>
  }
  return 1;
 800ef2a:	2301      	movs	r3, #1
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3718      	adds	r7, #24
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}
 800ef34:	200004a8 	.word	0x200004a8

0800ef38 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b084      	sub	sp, #16
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d04c      	beq.n	800efe0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f003 0303 	and.w	r3, r3, #3
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d007      	beq.n	800ef60 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ef50:	4b25      	ldr	r3, [pc, #148]	; (800efe8 <mem_free+0xb0>)
 800ef52:	f240 2273 	movw	r2, #627	; 0x273
 800ef56:	4925      	ldr	r1, [pc, #148]	; (800efec <mem_free+0xb4>)
 800ef58:	4825      	ldr	r0, [pc, #148]	; (800eff0 <mem_free+0xb8>)
 800ef5a:	f00c f98b 	bl	801b274 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ef5e:	e040      	b.n	800efe2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	3b08      	subs	r3, #8
 800ef64:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ef66:	4b23      	ldr	r3, [pc, #140]	; (800eff4 <mem_free+0xbc>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	68fa      	ldr	r2, [r7, #12]
 800ef6c:	429a      	cmp	r2, r3
 800ef6e:	d306      	bcc.n	800ef7e <mem_free+0x46>
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f103 020c 	add.w	r2, r3, #12
 800ef76:	4b20      	ldr	r3, [pc, #128]	; (800eff8 <mem_free+0xc0>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d907      	bls.n	800ef8e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ef7e:	4b1a      	ldr	r3, [pc, #104]	; (800efe8 <mem_free+0xb0>)
 800ef80:	f240 227f 	movw	r2, #639	; 0x27f
 800ef84:	491d      	ldr	r1, [pc, #116]	; (800effc <mem_free+0xc4>)
 800ef86:	481a      	ldr	r0, [pc, #104]	; (800eff0 <mem_free+0xb8>)
 800ef88:	f00c f974 	bl	801b274 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ef8c:	e029      	b.n	800efe2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	791b      	ldrb	r3, [r3, #4]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d107      	bne.n	800efa6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ef96:	4b14      	ldr	r3, [pc, #80]	; (800efe8 <mem_free+0xb0>)
 800ef98:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ef9c:	4918      	ldr	r1, [pc, #96]	; (800f000 <mem_free+0xc8>)
 800ef9e:	4814      	ldr	r0, [pc, #80]	; (800eff0 <mem_free+0xb8>)
 800efa0:	f00c f968 	bl	801b274 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800efa4:	e01d      	b.n	800efe2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800efa6:	68f8      	ldr	r0, [r7, #12]
 800efa8:	f7ff ff8a 	bl	800eec0 <mem_link_valid>
 800efac:	4603      	mov	r3, r0
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d107      	bne.n	800efc2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800efb2:	4b0d      	ldr	r3, [pc, #52]	; (800efe8 <mem_free+0xb0>)
 800efb4:	f240 2295 	movw	r2, #661	; 0x295
 800efb8:	4912      	ldr	r1, [pc, #72]	; (800f004 <mem_free+0xcc>)
 800efba:	480d      	ldr	r0, [pc, #52]	; (800eff0 <mem_free+0xb8>)
 800efbc:	f00c f95a 	bl	801b274 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800efc0:	e00f      	b.n	800efe2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	2200      	movs	r2, #0
 800efc6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800efc8:	4b0f      	ldr	r3, [pc, #60]	; (800f008 <mem_free+0xd0>)
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	68fa      	ldr	r2, [r7, #12]
 800efce:	429a      	cmp	r2, r3
 800efd0:	d202      	bcs.n	800efd8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800efd2:	4a0d      	ldr	r2, [pc, #52]	; (800f008 <mem_free+0xd0>)
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800efd8:	68f8      	ldr	r0, [r7, #12]
 800efda:	f7ff fe93 	bl	800ed04 <plug_holes>
 800efde:	e000      	b.n	800efe2 <mem_free+0xaa>
    return;
 800efe0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800efe2:	3710      	adds	r7, #16
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}
 800efe8:	08020798 	.word	0x08020798
 800efec:	0802086c 	.word	0x0802086c
 800eff0:	080207e0 	.word	0x080207e0
 800eff4:	200004a4 	.word	0x200004a4
 800eff8:	200004a8 	.word	0x200004a8
 800effc:	08020890 	.word	0x08020890
 800f000:	080208ac 	.word	0x080208ac
 800f004:	080208d4 	.word	0x080208d4
 800f008:	200004ac 	.word	0x200004ac

0800f00c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b088      	sub	sp, #32
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
 800f014:	460b      	mov	r3, r1
 800f016:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f018:	887b      	ldrh	r3, [r7, #2]
 800f01a:	3303      	adds	r3, #3
 800f01c:	b29b      	uxth	r3, r3
 800f01e:	f023 0303 	bic.w	r3, r3, #3
 800f022:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f024:	8bfb      	ldrh	r3, [r7, #30]
 800f026:	2b0b      	cmp	r3, #11
 800f028:	d801      	bhi.n	800f02e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f02a:	230c      	movs	r3, #12
 800f02c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f02e:	8bfb      	ldrh	r3, [r7, #30]
 800f030:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f034:	d803      	bhi.n	800f03e <mem_trim+0x32>
 800f036:	8bfa      	ldrh	r2, [r7, #30]
 800f038:	887b      	ldrh	r3, [r7, #2]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d201      	bcs.n	800f042 <mem_trim+0x36>
    return NULL;
 800f03e:	2300      	movs	r3, #0
 800f040:	e0cc      	b.n	800f1dc <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f042:	4b68      	ldr	r3, [pc, #416]	; (800f1e4 <mem_trim+0x1d8>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	687a      	ldr	r2, [r7, #4]
 800f048:	429a      	cmp	r2, r3
 800f04a:	d304      	bcc.n	800f056 <mem_trim+0x4a>
 800f04c:	4b66      	ldr	r3, [pc, #408]	; (800f1e8 <mem_trim+0x1dc>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	687a      	ldr	r2, [r7, #4]
 800f052:	429a      	cmp	r2, r3
 800f054:	d306      	bcc.n	800f064 <mem_trim+0x58>
 800f056:	4b65      	ldr	r3, [pc, #404]	; (800f1ec <mem_trim+0x1e0>)
 800f058:	f240 22d2 	movw	r2, #722	; 0x2d2
 800f05c:	4964      	ldr	r1, [pc, #400]	; (800f1f0 <mem_trim+0x1e4>)
 800f05e:	4865      	ldr	r0, [pc, #404]	; (800f1f4 <mem_trim+0x1e8>)
 800f060:	f00c f908 	bl	801b274 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f064:	4b5f      	ldr	r3, [pc, #380]	; (800f1e4 <mem_trim+0x1d8>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	687a      	ldr	r2, [r7, #4]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d304      	bcc.n	800f078 <mem_trim+0x6c>
 800f06e:	4b5e      	ldr	r3, [pc, #376]	; (800f1e8 <mem_trim+0x1dc>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	687a      	ldr	r2, [r7, #4]
 800f074:	429a      	cmp	r2, r3
 800f076:	d301      	bcc.n	800f07c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	e0af      	b.n	800f1dc <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	3b08      	subs	r3, #8
 800f080:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f082:	69b8      	ldr	r0, [r7, #24]
 800f084:	f7ff fe2c 	bl	800ece0 <mem_to_ptr>
 800f088:	4603      	mov	r3, r0
 800f08a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f08c:	69bb      	ldr	r3, [r7, #24]
 800f08e:	881a      	ldrh	r2, [r3, #0]
 800f090:	8afb      	ldrh	r3, [r7, #22]
 800f092:	1ad3      	subs	r3, r2, r3
 800f094:	b29b      	uxth	r3, r3
 800f096:	3b08      	subs	r3, #8
 800f098:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f09a:	8bfa      	ldrh	r2, [r7, #30]
 800f09c:	8abb      	ldrh	r3, [r7, #20]
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d906      	bls.n	800f0b0 <mem_trim+0xa4>
 800f0a2:	4b52      	ldr	r3, [pc, #328]	; (800f1ec <mem_trim+0x1e0>)
 800f0a4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800f0a8:	4953      	ldr	r1, [pc, #332]	; (800f1f8 <mem_trim+0x1ec>)
 800f0aa:	4852      	ldr	r0, [pc, #328]	; (800f1f4 <mem_trim+0x1e8>)
 800f0ac:	f00c f8e2 	bl	801b274 <iprintf>
  if (newsize > size) {
 800f0b0:	8bfa      	ldrh	r2, [r7, #30]
 800f0b2:	8abb      	ldrh	r3, [r7, #20]
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d901      	bls.n	800f0bc <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	e08f      	b.n	800f1dc <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800f0bc:	8bfa      	ldrh	r2, [r7, #30]
 800f0be:	8abb      	ldrh	r3, [r7, #20]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d101      	bne.n	800f0c8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	e089      	b.n	800f1dc <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800f0c8:	69bb      	ldr	r3, [r7, #24]
 800f0ca:	881b      	ldrh	r3, [r3, #0]
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7ff fdf5 	bl	800ecbc <ptr_to_mem>
 800f0d2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	791b      	ldrb	r3, [r3, #4]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d13f      	bne.n	800f15c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f0dc:	69bb      	ldr	r3, [r7, #24]
 800f0de:	881b      	ldrh	r3, [r3, #0]
 800f0e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f0e4:	d106      	bne.n	800f0f4 <mem_trim+0xe8>
 800f0e6:	4b41      	ldr	r3, [pc, #260]	; (800f1ec <mem_trim+0x1e0>)
 800f0e8:	f240 22f5 	movw	r2, #757	; 0x2f5
 800f0ec:	4943      	ldr	r1, [pc, #268]	; (800f1fc <mem_trim+0x1f0>)
 800f0ee:	4841      	ldr	r0, [pc, #260]	; (800f1f4 <mem_trim+0x1e8>)
 800f0f0:	f00c f8c0 	bl	801b274 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	881b      	ldrh	r3, [r3, #0]
 800f0f8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f0fa:	8afa      	ldrh	r2, [r7, #22]
 800f0fc:	8bfb      	ldrh	r3, [r7, #30]
 800f0fe:	4413      	add	r3, r2
 800f100:	b29b      	uxth	r3, r3
 800f102:	3308      	adds	r3, #8
 800f104:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f106:	4b3e      	ldr	r3, [pc, #248]	; (800f200 <mem_trim+0x1f4>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	693a      	ldr	r2, [r7, #16]
 800f10c:	429a      	cmp	r2, r3
 800f10e:	d106      	bne.n	800f11e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800f110:	89fb      	ldrh	r3, [r7, #14]
 800f112:	4618      	mov	r0, r3
 800f114:	f7ff fdd2 	bl	800ecbc <ptr_to_mem>
 800f118:	4602      	mov	r2, r0
 800f11a:	4b39      	ldr	r3, [pc, #228]	; (800f200 <mem_trim+0x1f4>)
 800f11c:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f11e:	89fb      	ldrh	r3, [r7, #14]
 800f120:	4618      	mov	r0, r3
 800f122:	f7ff fdcb 	bl	800ecbc <ptr_to_mem>
 800f126:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f128:	693b      	ldr	r3, [r7, #16]
 800f12a:	2200      	movs	r2, #0
 800f12c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	89ba      	ldrh	r2, [r7, #12]
 800f132:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f134:	693b      	ldr	r3, [r7, #16]
 800f136:	8afa      	ldrh	r2, [r7, #22]
 800f138:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f13a:	69bb      	ldr	r3, [r7, #24]
 800f13c:	89fa      	ldrh	r2, [r7, #14]
 800f13e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	881b      	ldrh	r3, [r3, #0]
 800f144:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f148:	d047      	beq.n	800f1da <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	881b      	ldrh	r3, [r3, #0]
 800f14e:	4618      	mov	r0, r3
 800f150:	f7ff fdb4 	bl	800ecbc <ptr_to_mem>
 800f154:	4602      	mov	r2, r0
 800f156:	89fb      	ldrh	r3, [r7, #14]
 800f158:	8053      	strh	r3, [r2, #2]
 800f15a:	e03e      	b.n	800f1da <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f15c:	8bfb      	ldrh	r3, [r7, #30]
 800f15e:	f103 0214 	add.w	r2, r3, #20
 800f162:	8abb      	ldrh	r3, [r7, #20]
 800f164:	429a      	cmp	r2, r3
 800f166:	d838      	bhi.n	800f1da <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f168:	8afa      	ldrh	r2, [r7, #22]
 800f16a:	8bfb      	ldrh	r3, [r7, #30]
 800f16c:	4413      	add	r3, r2
 800f16e:	b29b      	uxth	r3, r3
 800f170:	3308      	adds	r3, #8
 800f172:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f174:	69bb      	ldr	r3, [r7, #24]
 800f176:	881b      	ldrh	r3, [r3, #0]
 800f178:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f17c:	d106      	bne.n	800f18c <mem_trim+0x180>
 800f17e:	4b1b      	ldr	r3, [pc, #108]	; (800f1ec <mem_trim+0x1e0>)
 800f180:	f240 3216 	movw	r2, #790	; 0x316
 800f184:	491d      	ldr	r1, [pc, #116]	; (800f1fc <mem_trim+0x1f0>)
 800f186:	481b      	ldr	r0, [pc, #108]	; (800f1f4 <mem_trim+0x1e8>)
 800f188:	f00c f874 	bl	801b274 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f18c:	89fb      	ldrh	r3, [r7, #14]
 800f18e:	4618      	mov	r0, r3
 800f190:	f7ff fd94 	bl	800ecbc <ptr_to_mem>
 800f194:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f196:	4b1a      	ldr	r3, [pc, #104]	; (800f200 <mem_trim+0x1f4>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	693a      	ldr	r2, [r7, #16]
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d202      	bcs.n	800f1a6 <mem_trim+0x19a>
      lfree = mem2;
 800f1a0:	4a17      	ldr	r2, [pc, #92]	; (800f200 <mem_trim+0x1f4>)
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f1ac:	69bb      	ldr	r3, [r7, #24]
 800f1ae:	881a      	ldrh	r2, [r3, #0]
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	8afa      	ldrh	r2, [r7, #22]
 800f1b8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f1ba:	69bb      	ldr	r3, [r7, #24]
 800f1bc:	89fa      	ldrh	r2, [r7, #14]
 800f1be:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	881b      	ldrh	r3, [r3, #0]
 800f1c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f1c8:	d007      	beq.n	800f1da <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	881b      	ldrh	r3, [r3, #0]
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7ff fd74 	bl	800ecbc <ptr_to_mem>
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	89fb      	ldrh	r3, [r7, #14]
 800f1d8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800f1da:	687b      	ldr	r3, [r7, #4]
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	3720      	adds	r7, #32
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}
 800f1e4:	200004a4 	.word	0x200004a4
 800f1e8:	200004a8 	.word	0x200004a8
 800f1ec:	08020798 	.word	0x08020798
 800f1f0:	08020908 	.word	0x08020908
 800f1f4:	080207e0 	.word	0x080207e0
 800f1f8:	08020920 	.word	0x08020920
 800f1fc:	08020940 	.word	0x08020940
 800f200:	200004ac 	.word	0x200004ac

0800f204 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b088      	sub	sp, #32
 800f208:	af00      	add	r7, sp, #0
 800f20a:	4603      	mov	r3, r0
 800f20c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f20e:	88fb      	ldrh	r3, [r7, #6]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d101      	bne.n	800f218 <mem_malloc+0x14>
    return NULL;
 800f214:	2300      	movs	r3, #0
 800f216:	e0d9      	b.n	800f3cc <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f218:	88fb      	ldrh	r3, [r7, #6]
 800f21a:	3303      	adds	r3, #3
 800f21c:	b29b      	uxth	r3, r3
 800f21e:	f023 0303 	bic.w	r3, r3, #3
 800f222:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f224:	8bbb      	ldrh	r3, [r7, #28]
 800f226:	2b0b      	cmp	r3, #11
 800f228:	d801      	bhi.n	800f22e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f22a:	230c      	movs	r3, #12
 800f22c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f22e:	8bbb      	ldrh	r3, [r7, #28]
 800f230:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f234:	d803      	bhi.n	800f23e <mem_malloc+0x3a>
 800f236:	8bba      	ldrh	r2, [r7, #28]
 800f238:	88fb      	ldrh	r3, [r7, #6]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d201      	bcs.n	800f242 <mem_malloc+0x3e>
    return NULL;
 800f23e:	2300      	movs	r3, #0
 800f240:	e0c4      	b.n	800f3cc <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f242:	4b64      	ldr	r3, [pc, #400]	; (800f3d4 <mem_malloc+0x1d0>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	4618      	mov	r0, r3
 800f248:	f7ff fd4a 	bl	800ece0 <mem_to_ptr>
 800f24c:	4603      	mov	r3, r0
 800f24e:	83fb      	strh	r3, [r7, #30]
 800f250:	e0b4      	b.n	800f3bc <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f252:	8bfb      	ldrh	r3, [r7, #30]
 800f254:	4618      	mov	r0, r3
 800f256:	f7ff fd31 	bl	800ecbc <ptr_to_mem>
 800f25a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	791b      	ldrb	r3, [r3, #4]
 800f260:	2b00      	cmp	r3, #0
 800f262:	f040 80a4 	bne.w	800f3ae <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	881b      	ldrh	r3, [r3, #0]
 800f26a:	461a      	mov	r2, r3
 800f26c:	8bfb      	ldrh	r3, [r7, #30]
 800f26e:	1ad3      	subs	r3, r2, r3
 800f270:	f1a3 0208 	sub.w	r2, r3, #8
 800f274:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f276:	429a      	cmp	r2, r3
 800f278:	f0c0 8099 	bcc.w	800f3ae <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	881b      	ldrh	r3, [r3, #0]
 800f280:	461a      	mov	r2, r3
 800f282:	8bfb      	ldrh	r3, [r7, #30]
 800f284:	1ad3      	subs	r3, r2, r3
 800f286:	f1a3 0208 	sub.w	r2, r3, #8
 800f28a:	8bbb      	ldrh	r3, [r7, #28]
 800f28c:	3314      	adds	r3, #20
 800f28e:	429a      	cmp	r2, r3
 800f290:	d333      	bcc.n	800f2fa <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f292:	8bfa      	ldrh	r2, [r7, #30]
 800f294:	8bbb      	ldrh	r3, [r7, #28]
 800f296:	4413      	add	r3, r2
 800f298:	b29b      	uxth	r3, r3
 800f29a:	3308      	adds	r3, #8
 800f29c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f29e:	8a7b      	ldrh	r3, [r7, #18]
 800f2a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f2a4:	d106      	bne.n	800f2b4 <mem_malloc+0xb0>
 800f2a6:	4b4c      	ldr	r3, [pc, #304]	; (800f3d8 <mem_malloc+0x1d4>)
 800f2a8:	f240 3287 	movw	r2, #903	; 0x387
 800f2ac:	494b      	ldr	r1, [pc, #300]	; (800f3dc <mem_malloc+0x1d8>)
 800f2ae:	484c      	ldr	r0, [pc, #304]	; (800f3e0 <mem_malloc+0x1dc>)
 800f2b0:	f00b ffe0 	bl	801b274 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f2b4:	8a7b      	ldrh	r3, [r7, #18]
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f7ff fd00 	bl	800ecbc <ptr_to_mem>
 800f2bc:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	881a      	ldrh	r2, [r3, #0]
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	8bfa      	ldrh	r2, [r7, #30]
 800f2d0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	8a7a      	ldrh	r2, [r7, #18]
 800f2d6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	2201      	movs	r2, #1
 800f2dc:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	881b      	ldrh	r3, [r3, #0]
 800f2e2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f2e6:	d00b      	beq.n	800f300 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	881b      	ldrh	r3, [r3, #0]
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f7ff fce5 	bl	800ecbc <ptr_to_mem>
 800f2f2:	4602      	mov	r2, r0
 800f2f4:	8a7b      	ldrh	r3, [r7, #18]
 800f2f6:	8053      	strh	r3, [r2, #2]
 800f2f8:	e002      	b.n	800f300 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	2201      	movs	r2, #1
 800f2fe:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f300:	4b34      	ldr	r3, [pc, #208]	; (800f3d4 <mem_malloc+0x1d0>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	697a      	ldr	r2, [r7, #20]
 800f306:	429a      	cmp	r2, r3
 800f308:	d127      	bne.n	800f35a <mem_malloc+0x156>
          struct mem *cur = lfree;
 800f30a:	4b32      	ldr	r3, [pc, #200]	; (800f3d4 <mem_malloc+0x1d0>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f310:	e005      	b.n	800f31e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f312:	69bb      	ldr	r3, [r7, #24]
 800f314:	881b      	ldrh	r3, [r3, #0]
 800f316:	4618      	mov	r0, r3
 800f318:	f7ff fcd0 	bl	800ecbc <ptr_to_mem>
 800f31c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f31e:	69bb      	ldr	r3, [r7, #24]
 800f320:	791b      	ldrb	r3, [r3, #4]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d004      	beq.n	800f330 <mem_malloc+0x12c>
 800f326:	4b2f      	ldr	r3, [pc, #188]	; (800f3e4 <mem_malloc+0x1e0>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	69ba      	ldr	r2, [r7, #24]
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d1f0      	bne.n	800f312 <mem_malloc+0x10e>
          }
          lfree = cur;
 800f330:	4a28      	ldr	r2, [pc, #160]	; (800f3d4 <mem_malloc+0x1d0>)
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f336:	4b27      	ldr	r3, [pc, #156]	; (800f3d4 <mem_malloc+0x1d0>)
 800f338:	681a      	ldr	r2, [r3, #0]
 800f33a:	4b2a      	ldr	r3, [pc, #168]	; (800f3e4 <mem_malloc+0x1e0>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	429a      	cmp	r2, r3
 800f340:	d00b      	beq.n	800f35a <mem_malloc+0x156>
 800f342:	4b24      	ldr	r3, [pc, #144]	; (800f3d4 <mem_malloc+0x1d0>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	791b      	ldrb	r3, [r3, #4]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d006      	beq.n	800f35a <mem_malloc+0x156>
 800f34c:	4b22      	ldr	r3, [pc, #136]	; (800f3d8 <mem_malloc+0x1d4>)
 800f34e:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f352:	4925      	ldr	r1, [pc, #148]	; (800f3e8 <mem_malloc+0x1e4>)
 800f354:	4822      	ldr	r0, [pc, #136]	; (800f3e0 <mem_malloc+0x1dc>)
 800f356:	f00b ff8d 	bl	801b274 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f35a:	8bba      	ldrh	r2, [r7, #28]
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	4413      	add	r3, r2
 800f360:	3308      	adds	r3, #8
 800f362:	4a20      	ldr	r2, [pc, #128]	; (800f3e4 <mem_malloc+0x1e0>)
 800f364:	6812      	ldr	r2, [r2, #0]
 800f366:	4293      	cmp	r3, r2
 800f368:	d906      	bls.n	800f378 <mem_malloc+0x174>
 800f36a:	4b1b      	ldr	r3, [pc, #108]	; (800f3d8 <mem_malloc+0x1d4>)
 800f36c:	f240 32ba 	movw	r2, #954	; 0x3ba
 800f370:	491e      	ldr	r1, [pc, #120]	; (800f3ec <mem_malloc+0x1e8>)
 800f372:	481b      	ldr	r0, [pc, #108]	; (800f3e0 <mem_malloc+0x1dc>)
 800f374:	f00b ff7e 	bl	801b274 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	f003 0303 	and.w	r3, r3, #3
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d006      	beq.n	800f390 <mem_malloc+0x18c>
 800f382:	4b15      	ldr	r3, [pc, #84]	; (800f3d8 <mem_malloc+0x1d4>)
 800f384:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800f388:	4919      	ldr	r1, [pc, #100]	; (800f3f0 <mem_malloc+0x1ec>)
 800f38a:	4815      	ldr	r0, [pc, #84]	; (800f3e0 <mem_malloc+0x1dc>)
 800f38c:	f00b ff72 	bl	801b274 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	f003 0303 	and.w	r3, r3, #3
 800f396:	2b00      	cmp	r3, #0
 800f398:	d006      	beq.n	800f3a8 <mem_malloc+0x1a4>
 800f39a:	4b0f      	ldr	r3, [pc, #60]	; (800f3d8 <mem_malloc+0x1d4>)
 800f39c:	f240 32be 	movw	r2, #958	; 0x3be
 800f3a0:	4914      	ldr	r1, [pc, #80]	; (800f3f4 <mem_malloc+0x1f0>)
 800f3a2:	480f      	ldr	r0, [pc, #60]	; (800f3e0 <mem_malloc+0x1dc>)
 800f3a4:	f00b ff66 	bl	801b274 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	3308      	adds	r3, #8
 800f3ac:	e00e      	b.n	800f3cc <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800f3ae:	8bfb      	ldrh	r3, [r7, #30]
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f7ff fc83 	bl	800ecbc <ptr_to_mem>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	881b      	ldrh	r3, [r3, #0]
 800f3ba:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f3bc:	8bfa      	ldrh	r2, [r7, #30]
 800f3be:	8bbb      	ldrh	r3, [r7, #28]
 800f3c0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	f4ff af44 	bcc.w	800f252 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f3ca:	2300      	movs	r3, #0
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	3720      	adds	r7, #32
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}
 800f3d4:	200004ac 	.word	0x200004ac
 800f3d8:	08020798 	.word	0x08020798
 800f3dc:	08020940 	.word	0x08020940
 800f3e0:	080207e0 	.word	0x080207e0
 800f3e4:	200004a8 	.word	0x200004a8
 800f3e8:	08020954 	.word	0x08020954
 800f3ec:	08020970 	.word	0x08020970
 800f3f0:	080209a0 	.word	0x080209a0
 800f3f4:	080209d0 	.word	0x080209d0

0800f3f8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b085      	sub	sp, #20
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	689b      	ldr	r3, [r3, #8]
 800f404:	2200      	movs	r2, #0
 800f406:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	685b      	ldr	r3, [r3, #4]
 800f40c:	3303      	adds	r3, #3
 800f40e:	f023 0303 	bic.w	r3, r3, #3
 800f412:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f414:	2300      	movs	r3, #0
 800f416:	60fb      	str	r3, [r7, #12]
 800f418:	e011      	b.n	800f43e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	689b      	ldr	r3, [r3, #8]
 800f41e:	681a      	ldr	r2, [r3, #0]
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	689b      	ldr	r3, [r3, #8]
 800f428:	68ba      	ldr	r2, [r7, #8]
 800f42a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	881b      	ldrh	r3, [r3, #0]
 800f430:	461a      	mov	r2, r3
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	4413      	add	r3, r2
 800f436:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	3301      	adds	r3, #1
 800f43c:	60fb      	str	r3, [r7, #12]
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	885b      	ldrh	r3, [r3, #2]
 800f442:	461a      	mov	r2, r3
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	4293      	cmp	r3, r2
 800f448:	dbe7      	blt.n	800f41a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f44a:	bf00      	nop
 800f44c:	3714      	adds	r7, #20
 800f44e:	46bd      	mov	sp, r7
 800f450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f454:	4770      	bx	lr
	...

0800f458 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b082      	sub	sp, #8
 800f45c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f45e:	2300      	movs	r3, #0
 800f460:	80fb      	strh	r3, [r7, #6]
 800f462:	e009      	b.n	800f478 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f464:	88fb      	ldrh	r3, [r7, #6]
 800f466:	4a08      	ldr	r2, [pc, #32]	; (800f488 <memp_init+0x30>)
 800f468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f46c:	4618      	mov	r0, r3
 800f46e:	f7ff ffc3 	bl	800f3f8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f472:	88fb      	ldrh	r3, [r7, #6]
 800f474:	3301      	adds	r3, #1
 800f476:	80fb      	strh	r3, [r7, #6]
 800f478:	88fb      	ldrh	r3, [r7, #6]
 800f47a:	2b08      	cmp	r3, #8
 800f47c:	d9f2      	bls.n	800f464 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f47e:	bf00      	nop
 800f480:	3708      	adds	r7, #8
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
 800f486:	bf00      	nop
 800f488:	08023aa8 	.word	0x08023aa8

0800f48c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b084      	sub	sp, #16
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	689b      	ldr	r3, [r3, #8]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d012      	beq.n	800f4c8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	689b      	ldr	r3, [r3, #8]
 800f4a6:	68fa      	ldr	r2, [r7, #12]
 800f4a8:	6812      	ldr	r2, [r2, #0]
 800f4aa:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	f003 0303 	and.w	r3, r3, #3
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d006      	beq.n	800f4c4 <do_memp_malloc_pool+0x38>
 800f4b6:	4b07      	ldr	r3, [pc, #28]	; (800f4d4 <do_memp_malloc_pool+0x48>)
 800f4b8:	f240 1219 	movw	r2, #281	; 0x119
 800f4bc:	4906      	ldr	r1, [pc, #24]	; (800f4d8 <do_memp_malloc_pool+0x4c>)
 800f4be:	4807      	ldr	r0, [pc, #28]	; (800f4dc <do_memp_malloc_pool+0x50>)
 800f4c0:	f00b fed8 	bl	801b274 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	e000      	b.n	800f4ca <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f4c8:	2300      	movs	r3, #0
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3710      	adds	r7, #16
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}
 800f4d2:	bf00      	nop
 800f4d4:	080209f4 	.word	0x080209f4
 800f4d8:	08020a24 	.word	0x08020a24
 800f4dc:	08020a48 	.word	0x08020a48

0800f4e0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b084      	sub	sp, #16
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f4ea:	79fb      	ldrb	r3, [r7, #7]
 800f4ec:	2b08      	cmp	r3, #8
 800f4ee:	d908      	bls.n	800f502 <memp_malloc+0x22>
 800f4f0:	4b0a      	ldr	r3, [pc, #40]	; (800f51c <memp_malloc+0x3c>)
 800f4f2:	f240 1257 	movw	r2, #343	; 0x157
 800f4f6:	490a      	ldr	r1, [pc, #40]	; (800f520 <memp_malloc+0x40>)
 800f4f8:	480a      	ldr	r0, [pc, #40]	; (800f524 <memp_malloc+0x44>)
 800f4fa:	f00b febb 	bl	801b274 <iprintf>
 800f4fe:	2300      	movs	r3, #0
 800f500:	e008      	b.n	800f514 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f502:	79fb      	ldrb	r3, [r7, #7]
 800f504:	4a08      	ldr	r2, [pc, #32]	; (800f528 <memp_malloc+0x48>)
 800f506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f50a:	4618      	mov	r0, r3
 800f50c:	f7ff ffbe 	bl	800f48c <do_memp_malloc_pool>
 800f510:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f512:	68fb      	ldr	r3, [r7, #12]
}
 800f514:	4618      	mov	r0, r3
 800f516:	3710      	adds	r7, #16
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	080209f4 	.word	0x080209f4
 800f520:	08020a84 	.word	0x08020a84
 800f524:	08020a48 	.word	0x08020a48
 800f528:	08023aa8 	.word	0x08023aa8

0800f52c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b084      	sub	sp, #16
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	f003 0303 	and.w	r3, r3, #3
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d006      	beq.n	800f54e <do_memp_free_pool+0x22>
 800f540:	4b0a      	ldr	r3, [pc, #40]	; (800f56c <do_memp_free_pool+0x40>)
 800f542:	f240 126d 	movw	r2, #365	; 0x16d
 800f546:	490a      	ldr	r1, [pc, #40]	; (800f570 <do_memp_free_pool+0x44>)
 800f548:	480a      	ldr	r0, [pc, #40]	; (800f574 <do_memp_free_pool+0x48>)
 800f54a:	f00b fe93 	bl	801b274 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	689b      	ldr	r3, [r3, #8]
 800f556:	681a      	ldr	r2, [r3, #0]
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	689b      	ldr	r3, [r3, #8]
 800f560:	68fa      	ldr	r2, [r7, #12]
 800f562:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800f564:	bf00      	nop
 800f566:	3710      	adds	r7, #16
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}
 800f56c:	080209f4 	.word	0x080209f4
 800f570:	08020aa4 	.word	0x08020aa4
 800f574:	08020a48 	.word	0x08020a48

0800f578 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	4603      	mov	r3, r0
 800f580:	6039      	str	r1, [r7, #0]
 800f582:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f584:	79fb      	ldrb	r3, [r7, #7]
 800f586:	2b08      	cmp	r3, #8
 800f588:	d907      	bls.n	800f59a <memp_free+0x22>
 800f58a:	4b0c      	ldr	r3, [pc, #48]	; (800f5bc <memp_free+0x44>)
 800f58c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800f590:	490b      	ldr	r1, [pc, #44]	; (800f5c0 <memp_free+0x48>)
 800f592:	480c      	ldr	r0, [pc, #48]	; (800f5c4 <memp_free+0x4c>)
 800f594:	f00b fe6e 	bl	801b274 <iprintf>
 800f598:	e00c      	b.n	800f5b4 <memp_free+0x3c>

  if (mem == NULL) {
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d008      	beq.n	800f5b2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f5a0:	79fb      	ldrb	r3, [r7, #7]
 800f5a2:	4a09      	ldr	r2, [pc, #36]	; (800f5c8 <memp_free+0x50>)
 800f5a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5a8:	6839      	ldr	r1, [r7, #0]
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7ff ffbe 	bl	800f52c <do_memp_free_pool>
 800f5b0:	e000      	b.n	800f5b4 <memp_free+0x3c>
    return;
 800f5b2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f5b4:	3708      	adds	r7, #8
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
 800f5ba:	bf00      	nop
 800f5bc:	080209f4 	.word	0x080209f4
 800f5c0:	08020ac4 	.word	0x08020ac4
 800f5c4:	08020a48 	.word	0x08020a48
 800f5c8:	08023aa8 	.word	0x08023aa8

0800f5cc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f5d0:	bf00      	nop
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d8:	4770      	bx	lr
	...

0800f5dc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b086      	sub	sp, #24
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	60f8      	str	r0, [r7, #12]
 800f5e4:	60b9      	str	r1, [r7, #8]
 800f5e6:	607a      	str	r2, [r7, #4]
 800f5e8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d108      	bne.n	800f602 <netif_add+0x26>
 800f5f0:	4b5b      	ldr	r3, [pc, #364]	; (800f760 <netif_add+0x184>)
 800f5f2:	f240 1227 	movw	r2, #295	; 0x127
 800f5f6:	495b      	ldr	r1, [pc, #364]	; (800f764 <netif_add+0x188>)
 800f5f8:	485b      	ldr	r0, [pc, #364]	; (800f768 <netif_add+0x18c>)
 800f5fa:	f00b fe3b 	bl	801b274 <iprintf>
 800f5fe:	2300      	movs	r3, #0
 800f600:	e0a9      	b.n	800f756 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f604:	2b00      	cmp	r3, #0
 800f606:	d108      	bne.n	800f61a <netif_add+0x3e>
 800f608:	4b55      	ldr	r3, [pc, #340]	; (800f760 <netif_add+0x184>)
 800f60a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f60e:	4957      	ldr	r1, [pc, #348]	; (800f76c <netif_add+0x190>)
 800f610:	4855      	ldr	r0, [pc, #340]	; (800f768 <netif_add+0x18c>)
 800f612:	f00b fe2f 	bl	801b274 <iprintf>
 800f616:	2300      	movs	r3, #0
 800f618:	e09d      	b.n	800f756 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d101      	bne.n	800f624 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f620:	4b53      	ldr	r3, [pc, #332]	; (800f770 <netif_add+0x194>)
 800f622:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d101      	bne.n	800f62e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f62a:	4b51      	ldr	r3, [pc, #324]	; (800f770 <netif_add+0x194>)
 800f62c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d101      	bne.n	800f638 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f634:	4b4e      	ldr	r3, [pc, #312]	; (800f770 <netif_add+0x194>)
 800f636:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	2200      	movs	r2, #0
 800f63c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	2200      	movs	r2, #0
 800f642:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	2200      	movs	r2, #0
 800f648:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	4a49      	ldr	r2, [pc, #292]	; (800f774 <netif_add+0x198>)
 800f64e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	2200      	movs	r2, #0
 800f654:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	2200      	movs	r2, #0
 800f65a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	3324      	adds	r3, #36	; 0x24
 800f662:	2204      	movs	r2, #4
 800f664:	2100      	movs	r1, #0
 800f666:	4618      	mov	r0, r3
 800f668:	f00b f8f7 	bl	801a85a <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2200      	movs	r2, #0
 800f670:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	6a3a      	ldr	r2, [r7, #32]
 800f676:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800f678:	4b3f      	ldr	r3, [pc, #252]	; (800f778 <netif_add+0x19c>)
 800f67a:	781a      	ldrb	r2, [r3, #0]
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f686:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	687a      	ldr	r2, [r7, #4]
 800f68c:	68b9      	ldr	r1, [r7, #8]
 800f68e:	68f8      	ldr	r0, [r7, #12]
 800f690:	f000 f914 	bl	800f8bc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f696:	68f8      	ldr	r0, [r7, #12]
 800f698:	4798      	blx	r3
 800f69a:	4603      	mov	r3, r0
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d001      	beq.n	800f6a4 <netif_add+0xc8>
    return NULL;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	e058      	b.n	800f756 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f6aa:	2bff      	cmp	r3, #255	; 0xff
 800f6ac:	d103      	bne.n	800f6b6 <netif_add+0xda>
        netif->num = 0;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f6ba:	4b30      	ldr	r3, [pc, #192]	; (800f77c <netif_add+0x1a0>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	617b      	str	r3, [r7, #20]
 800f6c0:	e02b      	b.n	800f71a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f6c2:	697a      	ldr	r2, [r7, #20]
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d106      	bne.n	800f6d8 <netif_add+0xfc>
 800f6ca:	4b25      	ldr	r3, [pc, #148]	; (800f760 <netif_add+0x184>)
 800f6cc:	f240 128b 	movw	r2, #395	; 0x18b
 800f6d0:	492b      	ldr	r1, [pc, #172]	; (800f780 <netif_add+0x1a4>)
 800f6d2:	4825      	ldr	r0, [pc, #148]	; (800f768 <netif_add+0x18c>)
 800f6d4:	f00b fdce 	bl	801b274 <iprintf>
        num_netifs++;
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	3301      	adds	r3, #1
 800f6dc:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f6de:	693b      	ldr	r3, [r7, #16]
 800f6e0:	2bff      	cmp	r3, #255	; 0xff
 800f6e2:	dd06      	ble.n	800f6f2 <netif_add+0x116>
 800f6e4:	4b1e      	ldr	r3, [pc, #120]	; (800f760 <netif_add+0x184>)
 800f6e6:	f240 128d 	movw	r2, #397	; 0x18d
 800f6ea:	4926      	ldr	r1, [pc, #152]	; (800f784 <netif_add+0x1a8>)
 800f6ec:	481e      	ldr	r0, [pc, #120]	; (800f768 <netif_add+0x18c>)
 800f6ee:	f00b fdc1 	bl	801b274 <iprintf>
        if (netif2->num == netif->num) {
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f6fe:	429a      	cmp	r2, r3
 800f700:	d108      	bne.n	800f714 <netif_add+0x138>
          netif->num++;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f708:	3301      	adds	r3, #1
 800f70a:	b2da      	uxtb	r2, r3
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800f712:	e005      	b.n	800f720 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f714:	697b      	ldr	r3, [r7, #20]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	617b      	str	r3, [r7, #20]
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d1d0      	bne.n	800f6c2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d1be      	bne.n	800f6a4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f72c:	2bfe      	cmp	r3, #254	; 0xfe
 800f72e:	d103      	bne.n	800f738 <netif_add+0x15c>
    netif_num = 0;
 800f730:	4b11      	ldr	r3, [pc, #68]	; (800f778 <netif_add+0x19c>)
 800f732:	2200      	movs	r2, #0
 800f734:	701a      	strb	r2, [r3, #0]
 800f736:	e006      	b.n	800f746 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f73e:	3301      	adds	r3, #1
 800f740:	b2da      	uxtb	r2, r3
 800f742:	4b0d      	ldr	r3, [pc, #52]	; (800f778 <netif_add+0x19c>)
 800f744:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f746:	4b0d      	ldr	r3, [pc, #52]	; (800f77c <netif_add+0x1a0>)
 800f748:	681a      	ldr	r2, [r3, #0]
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f74e:	4a0b      	ldr	r2, [pc, #44]	; (800f77c <netif_add+0x1a0>)
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800f754:	68fb      	ldr	r3, [r7, #12]
}
 800f756:	4618      	mov	r0, r3
 800f758:	3718      	adds	r7, #24
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
 800f75e:	bf00      	nop
 800f760:	08020ae0 	.word	0x08020ae0
 800f764:	08020b74 	.word	0x08020b74
 800f768:	08020b30 	.word	0x08020b30
 800f76c:	08020b90 	.word	0x08020b90
 800f770:	08023b1c 	.word	0x08023b1c
 800f774:	0800facf 	.word	0x0800facf
 800f778:	200004d4 	.word	0x200004d4
 800f77c:	20007618 	.word	0x20007618
 800f780:	08020bb4 	.word	0x08020bb4
 800f784:	08020bc8 	.word	0x08020bc8

0800f788 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b082      	sub	sp, #8
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
 800f790:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800f792:	6839      	ldr	r1, [r7, #0]
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f002 fabf 	bl	8011d18 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800f79a:	6839      	ldr	r1, [r7, #0]
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f006 fe69 	bl	8016474 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800f7a2:	bf00      	nop
 800f7a4:	3708      	adds	r7, #8
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}
	...

0800f7ac <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b086      	sub	sp, #24
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	60f8      	str	r0, [r7, #12]
 800f7b4:	60b9      	str	r1, [r7, #8]
 800f7b6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d106      	bne.n	800f7cc <netif_do_set_ipaddr+0x20>
 800f7be:	4b1d      	ldr	r3, [pc, #116]	; (800f834 <netif_do_set_ipaddr+0x88>)
 800f7c0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800f7c4:	491c      	ldr	r1, [pc, #112]	; (800f838 <netif_do_set_ipaddr+0x8c>)
 800f7c6:	481d      	ldr	r0, [pc, #116]	; (800f83c <netif_do_set_ipaddr+0x90>)
 800f7c8:	f00b fd54 	bl	801b274 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d106      	bne.n	800f7e0 <netif_do_set_ipaddr+0x34>
 800f7d2:	4b18      	ldr	r3, [pc, #96]	; (800f834 <netif_do_set_ipaddr+0x88>)
 800f7d4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800f7d8:	4917      	ldr	r1, [pc, #92]	; (800f838 <netif_do_set_ipaddr+0x8c>)
 800f7da:	4818      	ldr	r0, [pc, #96]	; (800f83c <netif_do_set_ipaddr+0x90>)
 800f7dc:	f00b fd4a 	bl	801b274 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	681a      	ldr	r2, [r3, #0]
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	3304      	adds	r3, #4
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	429a      	cmp	r2, r3
 800f7ec:	d01c      	beq.n	800f828 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	3304      	adds	r3, #4
 800f7f8:	681a      	ldr	r2, [r3, #0]
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800f7fe:	f107 0314 	add.w	r3, r7, #20
 800f802:	4619      	mov	r1, r3
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f7ff ffbf 	bl	800f788 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d002      	beq.n	800f816 <netif_do_set_ipaddr+0x6a>
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	e000      	b.n	800f818 <netif_do_set_ipaddr+0x6c>
 800f816:	2300      	movs	r3, #0
 800f818:	68fa      	ldr	r2, [r7, #12]
 800f81a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f81c:	2101      	movs	r1, #1
 800f81e:	68f8      	ldr	r0, [r7, #12]
 800f820:	f000 f8d2 	bl	800f9c8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800f824:	2301      	movs	r3, #1
 800f826:	e000      	b.n	800f82a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800f828:	2300      	movs	r3, #0
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	3718      	adds	r7, #24
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}
 800f832:	bf00      	nop
 800f834:	08020ae0 	.word	0x08020ae0
 800f838:	08020bf8 	.word	0x08020bf8
 800f83c:	08020b30 	.word	0x08020b30

0800f840 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800f840:	b480      	push	{r7}
 800f842:	b085      	sub	sp, #20
 800f844:	af00      	add	r7, sp, #0
 800f846:	60f8      	str	r0, [r7, #12]
 800f848:	60b9      	str	r1, [r7, #8]
 800f84a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	681a      	ldr	r2, [r3, #0]
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	3308      	adds	r3, #8
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	429a      	cmp	r2, r3
 800f858:	d00a      	beq.n	800f870 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d002      	beq.n	800f866 <netif_do_set_netmask+0x26>
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	e000      	b.n	800f868 <netif_do_set_netmask+0x28>
 800f866:	2300      	movs	r3, #0
 800f868:	68fa      	ldr	r2, [r7, #12]
 800f86a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800f86c:	2301      	movs	r3, #1
 800f86e:	e000      	b.n	800f872 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800f870:	2300      	movs	r3, #0
}
 800f872:	4618      	mov	r0, r3
 800f874:	3714      	adds	r7, #20
 800f876:	46bd      	mov	sp, r7
 800f878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87c:	4770      	bx	lr

0800f87e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800f87e:	b480      	push	{r7}
 800f880:	b085      	sub	sp, #20
 800f882:	af00      	add	r7, sp, #0
 800f884:	60f8      	str	r0, [r7, #12]
 800f886:	60b9      	str	r1, [r7, #8]
 800f888:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	681a      	ldr	r2, [r3, #0]
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	330c      	adds	r3, #12
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	429a      	cmp	r2, r3
 800f896:	d00a      	beq.n	800f8ae <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d002      	beq.n	800f8a4 <netif_do_set_gw+0x26>
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	e000      	b.n	800f8a6 <netif_do_set_gw+0x28>
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	68fa      	ldr	r2, [r7, #12]
 800f8a8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	e000      	b.n	800f8b0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800f8ae:	2300      	movs	r3, #0
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3714      	adds	r7, #20
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr

0800f8bc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b088      	sub	sp, #32
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	60f8      	str	r0, [r7, #12]
 800f8c4:	60b9      	str	r1, [r7, #8]
 800f8c6:	607a      	str	r2, [r7, #4]
 800f8c8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f8d2:	68bb      	ldr	r3, [r7, #8]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d101      	bne.n	800f8dc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800f8d8:	4b1c      	ldr	r3, [pc, #112]	; (800f94c <netif_set_addr+0x90>)
 800f8da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d101      	bne.n	800f8e6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800f8e2:	4b1a      	ldr	r3, [pc, #104]	; (800f94c <netif_set_addr+0x90>)
 800f8e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d101      	bne.n	800f8f0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800f8ec:	4b17      	ldr	r3, [pc, #92]	; (800f94c <netif_set_addr+0x90>)
 800f8ee:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d003      	beq.n	800f8fe <netif_set_addr+0x42>
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d101      	bne.n	800f902 <netif_set_addr+0x46>
 800f8fe:	2301      	movs	r3, #1
 800f900:	e000      	b.n	800f904 <netif_set_addr+0x48>
 800f902:	2300      	movs	r3, #0
 800f904:	617b      	str	r3, [r7, #20]
  if (remove) {
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d006      	beq.n	800f91a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f90c:	f107 0310 	add.w	r3, r7, #16
 800f910:	461a      	mov	r2, r3
 800f912:	68b9      	ldr	r1, [r7, #8]
 800f914:	68f8      	ldr	r0, [r7, #12]
 800f916:	f7ff ff49 	bl	800f7ac <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800f91a:	69fa      	ldr	r2, [r7, #28]
 800f91c:	6879      	ldr	r1, [r7, #4]
 800f91e:	68f8      	ldr	r0, [r7, #12]
 800f920:	f7ff ff8e 	bl	800f840 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800f924:	69ba      	ldr	r2, [r7, #24]
 800f926:	6839      	ldr	r1, [r7, #0]
 800f928:	68f8      	ldr	r0, [r7, #12]
 800f92a:	f7ff ffa8 	bl	800f87e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d106      	bne.n	800f942 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f934:	f107 0310 	add.w	r3, r7, #16
 800f938:	461a      	mov	r2, r3
 800f93a:	68b9      	ldr	r1, [r7, #8]
 800f93c:	68f8      	ldr	r0, [r7, #12]
 800f93e:	f7ff ff35 	bl	800f7ac <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800f942:	bf00      	nop
 800f944:	3720      	adds	r7, #32
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}
 800f94a:	bf00      	nop
 800f94c:	08023b1c 	.word	0x08023b1c

0800f950 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f950:	b480      	push	{r7}
 800f952:	b083      	sub	sp, #12
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f958:	4a04      	ldr	r2, [pc, #16]	; (800f96c <netif_set_default+0x1c>)
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f95e:	bf00      	nop
 800f960:	370c      	adds	r7, #12
 800f962:	46bd      	mov	sp, r7
 800f964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f968:	4770      	bx	lr
 800f96a:	bf00      	nop
 800f96c:	2000761c 	.word	0x2000761c

0800f970 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d107      	bne.n	800f98e <netif_set_up+0x1e>
 800f97e:	4b0f      	ldr	r3, [pc, #60]	; (800f9bc <netif_set_up+0x4c>)
 800f980:	f44f 7254 	mov.w	r2, #848	; 0x350
 800f984:	490e      	ldr	r1, [pc, #56]	; (800f9c0 <netif_set_up+0x50>)
 800f986:	480f      	ldr	r0, [pc, #60]	; (800f9c4 <netif_set_up+0x54>)
 800f988:	f00b fc74 	bl	801b274 <iprintf>
 800f98c:	e013      	b.n	800f9b6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f994:	f003 0301 	and.w	r3, r3, #1
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d10c      	bne.n	800f9b6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f9a2:	f043 0301 	orr.w	r3, r3, #1
 800f9a6:	b2da      	uxtb	r2, r3
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f9ae:	2103      	movs	r1, #3
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	f000 f809 	bl	800f9c8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800f9b6:	3708      	adds	r7, #8
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}
 800f9bc:	08020ae0 	.word	0x08020ae0
 800f9c0:	08020c68 	.word	0x08020c68
 800f9c4:	08020b30 	.word	0x08020b30

0800f9c8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b082      	sub	sp, #8
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	460b      	mov	r3, r1
 800f9d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d106      	bne.n	800f9e8 <netif_issue_reports+0x20>
 800f9da:	4b18      	ldr	r3, [pc, #96]	; (800fa3c <netif_issue_reports+0x74>)
 800f9dc:	f240 326d 	movw	r2, #877	; 0x36d
 800f9e0:	4917      	ldr	r1, [pc, #92]	; (800fa40 <netif_issue_reports+0x78>)
 800f9e2:	4818      	ldr	r0, [pc, #96]	; (800fa44 <netif_issue_reports+0x7c>)
 800f9e4:	f00b fc46 	bl	801b274 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f9ee:	f003 0304 	and.w	r3, r3, #4
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d01e      	beq.n	800fa34 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f9fc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d017      	beq.n	800fa34 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fa04:	78fb      	ldrb	r3, [r7, #3]
 800fa06:	f003 0301 	and.w	r3, r3, #1
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d013      	beq.n	800fa36 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	3304      	adds	r3, #4
 800fa12:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d00e      	beq.n	800fa36 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fa1e:	f003 0308 	and.w	r3, r3, #8
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d007      	beq.n	800fa36 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	3304      	adds	r3, #4
 800fa2a:	4619      	mov	r1, r3
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f009 fae3 	bl	8018ff8 <etharp_request>
 800fa32:	e000      	b.n	800fa36 <netif_issue_reports+0x6e>
    return;
 800fa34:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800fa36:	3708      	adds	r7, #8
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}
 800fa3c:	08020ae0 	.word	0x08020ae0
 800fa40:	08020c84 	.word	0x08020c84
 800fa44:	08020b30 	.word	0x08020b30

0800fa48 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b082      	sub	sp, #8
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d107      	bne.n	800fa66 <netif_set_down+0x1e>
 800fa56:	4b12      	ldr	r3, [pc, #72]	; (800faa0 <netif_set_down+0x58>)
 800fa58:	f240 329b 	movw	r2, #923	; 0x39b
 800fa5c:	4911      	ldr	r1, [pc, #68]	; (800faa4 <netif_set_down+0x5c>)
 800fa5e:	4812      	ldr	r0, [pc, #72]	; (800faa8 <netif_set_down+0x60>)
 800fa60:	f00b fc08 	bl	801b274 <iprintf>
 800fa64:	e019      	b.n	800fa9a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fa6c:	f003 0301 	and.w	r3, r3, #1
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d012      	beq.n	800fa9a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fa7a:	f023 0301 	bic.w	r3, r3, #1
 800fa7e:	b2da      	uxtb	r2, r3
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fa8c:	f003 0308 	and.w	r3, r3, #8
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d002      	beq.n	800fa9a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f008 fe69 	bl	801876c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800fa9a:	3708      	adds	r7, #8
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}
 800faa0:	08020ae0 	.word	0x08020ae0
 800faa4:	08020ca8 	.word	0x08020ca8
 800faa8:	08020b30 	.word	0x08020b30

0800faac <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800faac:	b480      	push	{r7}
 800faae:	b083      	sub	sp, #12
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d002      	beq.n	800fac2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	683a      	ldr	r2, [r7, #0]
 800fac0:	61da      	str	r2, [r3, #28]
  }
}
 800fac2:	bf00      	nop
 800fac4:	370c      	adds	r7, #12
 800fac6:	46bd      	mov	sp, r7
 800fac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800facc:	4770      	bx	lr

0800face <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800face:	b480      	push	{r7}
 800fad0:	b085      	sub	sp, #20
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	60f8      	str	r0, [r7, #12]
 800fad6:	60b9      	str	r1, [r7, #8]
 800fad8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800fada:	f06f 030b 	mvn.w	r3, #11
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3714      	adds	r7, #20
 800fae2:	46bd      	mov	sp, r7
 800fae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae8:	4770      	bx	lr
	...

0800faec <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800faec:	b480      	push	{r7}
 800faee:	b085      	sub	sp, #20
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	4603      	mov	r3, r0
 800faf4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800faf6:	79fb      	ldrb	r3, [r7, #7]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d013      	beq.n	800fb24 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800fafc:	4b0d      	ldr	r3, [pc, #52]	; (800fb34 <netif_get_by_index+0x48>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	60fb      	str	r3, [r7, #12]
 800fb02:	e00c      	b.n	800fb1e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	b2db      	uxtb	r3, r3
 800fb0e:	79fa      	ldrb	r2, [r7, #7]
 800fb10:	429a      	cmp	r2, r3
 800fb12:	d101      	bne.n	800fb18 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	e006      	b.n	800fb26 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	60fb      	str	r3, [r7, #12]
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d1ef      	bne.n	800fb04 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800fb24:	2300      	movs	r3, #0
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	3714      	adds	r7, #20
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb30:	4770      	bx	lr
 800fb32:	bf00      	nop
 800fb34:	20007618 	.word	0x20007618

0800fb38 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800fb38:	b480      	push	{r7}
 800fb3a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800fb3c:	4b03      	ldr	r3, [pc, #12]	; (800fb4c <pbuf_pool_is_empty+0x14>)
 800fb3e:	2201      	movs	r2, #1
 800fb40:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800fb42:	bf00      	nop
 800fb44:	46bd      	mov	sp, r7
 800fb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4a:	4770      	bx	lr
 800fb4c:	20007620 	.word	0x20007620

0800fb50 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800fb50:	b480      	push	{r7}
 800fb52:	b085      	sub	sp, #20
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	60f8      	str	r0, [r7, #12]
 800fb58:	60b9      	str	r1, [r7, #8]
 800fb5a:	4611      	mov	r1, r2
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	460b      	mov	r3, r1
 800fb60:	80fb      	strh	r3, [r7, #6]
 800fb62:	4613      	mov	r3, r2
 800fb64:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	68ba      	ldr	r2, [r7, #8]
 800fb70:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	88fa      	ldrh	r2, [r7, #6]
 800fb76:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	88ba      	ldrh	r2, [r7, #4]
 800fb7c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800fb7e:	8b3b      	ldrh	r3, [r7, #24]
 800fb80:	b2da      	uxtb	r2, r3
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	7f3a      	ldrb	r2, [r7, #28]
 800fb8a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	2201      	movs	r2, #1
 800fb90:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	2200      	movs	r2, #0
 800fb96:	73da      	strb	r2, [r3, #15]
}
 800fb98:	bf00      	nop
 800fb9a:	3714      	adds	r7, #20
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba2:	4770      	bx	lr

0800fba4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b08c      	sub	sp, #48	; 0x30
 800fba8:	af02      	add	r7, sp, #8
 800fbaa:	4603      	mov	r3, r0
 800fbac:	71fb      	strb	r3, [r7, #7]
 800fbae:	460b      	mov	r3, r1
 800fbb0:	80bb      	strh	r3, [r7, #4]
 800fbb2:	4613      	mov	r3, r2
 800fbb4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800fbb6:	79fb      	ldrb	r3, [r7, #7]
 800fbb8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800fbba:	887b      	ldrh	r3, [r7, #2]
 800fbbc:	2b41      	cmp	r3, #65	; 0x41
 800fbbe:	d00b      	beq.n	800fbd8 <pbuf_alloc+0x34>
 800fbc0:	2b41      	cmp	r3, #65	; 0x41
 800fbc2:	dc02      	bgt.n	800fbca <pbuf_alloc+0x26>
 800fbc4:	2b01      	cmp	r3, #1
 800fbc6:	d007      	beq.n	800fbd8 <pbuf_alloc+0x34>
 800fbc8:	e0c2      	b.n	800fd50 <pbuf_alloc+0x1ac>
 800fbca:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fbce:	d00b      	beq.n	800fbe8 <pbuf_alloc+0x44>
 800fbd0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fbd4:	d070      	beq.n	800fcb8 <pbuf_alloc+0x114>
 800fbd6:	e0bb      	b.n	800fd50 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800fbd8:	887a      	ldrh	r2, [r7, #2]
 800fbda:	88bb      	ldrh	r3, [r7, #4]
 800fbdc:	4619      	mov	r1, r3
 800fbde:	2000      	movs	r0, #0
 800fbe0:	f000 f8d2 	bl	800fd88 <pbuf_alloc_reference>
 800fbe4:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800fbe6:	e0bd      	b.n	800fd64 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800fbec:	2300      	movs	r3, #0
 800fbee:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800fbf0:	88bb      	ldrh	r3, [r7, #4]
 800fbf2:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800fbf4:	2008      	movs	r0, #8
 800fbf6:	f7ff fc73 	bl	800f4e0 <memp_malloc>
 800fbfa:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800fbfc:	693b      	ldr	r3, [r7, #16]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d109      	bne.n	800fc16 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800fc02:	f7ff ff99 	bl	800fb38 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800fc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d002      	beq.n	800fc12 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800fc0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc0e:	f000 faa9 	bl	8010164 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800fc12:	2300      	movs	r3, #0
 800fc14:	e0a7      	b.n	800fd66 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800fc16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc18:	3303      	adds	r3, #3
 800fc1a:	b29b      	uxth	r3, r3
 800fc1c:	f023 0303 	bic.w	r3, r3, #3
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	f5c3 7301 	rsb	r3, r3, #516	; 0x204
 800fc26:	b29b      	uxth	r3, r3
 800fc28:	8b7a      	ldrh	r2, [r7, #26]
 800fc2a:	4293      	cmp	r3, r2
 800fc2c:	bf28      	it	cs
 800fc2e:	4613      	movcs	r3, r2
 800fc30:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800fc32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc34:	3310      	adds	r3, #16
 800fc36:	693a      	ldr	r2, [r7, #16]
 800fc38:	4413      	add	r3, r2
 800fc3a:	3303      	adds	r3, #3
 800fc3c:	f023 0303 	bic.w	r3, r3, #3
 800fc40:	4618      	mov	r0, r3
 800fc42:	89f9      	ldrh	r1, [r7, #14]
 800fc44:	8b7a      	ldrh	r2, [r7, #26]
 800fc46:	2300      	movs	r3, #0
 800fc48:	9301      	str	r3, [sp, #4]
 800fc4a:	887b      	ldrh	r3, [r7, #2]
 800fc4c:	9300      	str	r3, [sp, #0]
 800fc4e:	460b      	mov	r3, r1
 800fc50:	4601      	mov	r1, r0
 800fc52:	6938      	ldr	r0, [r7, #16]
 800fc54:	f7ff ff7c 	bl	800fb50 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800fc58:	693b      	ldr	r3, [r7, #16]
 800fc5a:	685b      	ldr	r3, [r3, #4]
 800fc5c:	f003 0303 	and.w	r3, r3, #3
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d006      	beq.n	800fc72 <pbuf_alloc+0xce>
 800fc64:	4b42      	ldr	r3, [pc, #264]	; (800fd70 <pbuf_alloc+0x1cc>)
 800fc66:	f240 1201 	movw	r2, #257	; 0x101
 800fc6a:	4942      	ldr	r1, [pc, #264]	; (800fd74 <pbuf_alloc+0x1d0>)
 800fc6c:	4842      	ldr	r0, [pc, #264]	; (800fd78 <pbuf_alloc+0x1d4>)
 800fc6e:	f00b fb01 	bl	801b274 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800fc72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc74:	3303      	adds	r3, #3
 800fc76:	f023 0303 	bic.w	r3, r3, #3
 800fc7a:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800fc7e:	d106      	bne.n	800fc8e <pbuf_alloc+0xea>
 800fc80:	4b3b      	ldr	r3, [pc, #236]	; (800fd70 <pbuf_alloc+0x1cc>)
 800fc82:	f240 1203 	movw	r2, #259	; 0x103
 800fc86:	493d      	ldr	r1, [pc, #244]	; (800fd7c <pbuf_alloc+0x1d8>)
 800fc88:	483b      	ldr	r0, [pc, #236]	; (800fd78 <pbuf_alloc+0x1d4>)
 800fc8a:	f00b faf3 	bl	801b274 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800fc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d102      	bne.n	800fc9a <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	627b      	str	r3, [r7, #36]	; 0x24
 800fc98:	e002      	b.n	800fca0 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800fc9a:	69fb      	ldr	r3, [r7, #28]
 800fc9c:	693a      	ldr	r2, [r7, #16]
 800fc9e:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800fca0:	693b      	ldr	r3, [r7, #16]
 800fca2:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800fca4:	8b7a      	ldrh	r2, [r7, #26]
 800fca6:	89fb      	ldrh	r3, [r7, #14]
 800fca8:	1ad3      	subs	r3, r2, r3
 800fcaa:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800fcac:	2300      	movs	r3, #0
 800fcae:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800fcb0:	8b7b      	ldrh	r3, [r7, #26]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d19e      	bne.n	800fbf4 <pbuf_alloc+0x50>
      break;
 800fcb6:	e055      	b.n	800fd64 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800fcb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fcba:	3303      	adds	r3, #3
 800fcbc:	b29b      	uxth	r3, r3
 800fcbe:	f023 0303 	bic.w	r3, r3, #3
 800fcc2:	b29a      	uxth	r2, r3
 800fcc4:	88bb      	ldrh	r3, [r7, #4]
 800fcc6:	3303      	adds	r3, #3
 800fcc8:	b29b      	uxth	r3, r3
 800fcca:	f023 0303 	bic.w	r3, r3, #3
 800fcce:	b29b      	uxth	r3, r3
 800fcd0:	4413      	add	r3, r2
 800fcd2:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800fcd4:	8b3b      	ldrh	r3, [r7, #24]
 800fcd6:	3310      	adds	r3, #16
 800fcd8:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fcda:	8b3a      	ldrh	r2, [r7, #24]
 800fcdc:	88bb      	ldrh	r3, [r7, #4]
 800fcde:	3303      	adds	r3, #3
 800fce0:	f023 0303 	bic.w	r3, r3, #3
 800fce4:	429a      	cmp	r2, r3
 800fce6:	d306      	bcc.n	800fcf6 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800fce8:	8afa      	ldrh	r2, [r7, #22]
 800fcea:	88bb      	ldrh	r3, [r7, #4]
 800fcec:	3303      	adds	r3, #3
 800fcee:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	d201      	bcs.n	800fcfa <pbuf_alloc+0x156>
        return NULL;
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	e035      	b.n	800fd66 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800fcfa:	8afb      	ldrh	r3, [r7, #22]
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7ff fa81 	bl	800f204 <mem_malloc>
 800fd02:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800fd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d101      	bne.n	800fd0e <pbuf_alloc+0x16a>
        return NULL;
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	e02b      	b.n	800fd66 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800fd0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd10:	3310      	adds	r3, #16
 800fd12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd14:	4413      	add	r3, r2
 800fd16:	3303      	adds	r3, #3
 800fd18:	f023 0303 	bic.w	r3, r3, #3
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	88b9      	ldrh	r1, [r7, #4]
 800fd20:	88ba      	ldrh	r2, [r7, #4]
 800fd22:	2300      	movs	r3, #0
 800fd24:	9301      	str	r3, [sp, #4]
 800fd26:	887b      	ldrh	r3, [r7, #2]
 800fd28:	9300      	str	r3, [sp, #0]
 800fd2a:	460b      	mov	r3, r1
 800fd2c:	4601      	mov	r1, r0
 800fd2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd30:	f7ff ff0e 	bl	800fb50 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800fd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd36:	685b      	ldr	r3, [r3, #4]
 800fd38:	f003 0303 	and.w	r3, r3, #3
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d010      	beq.n	800fd62 <pbuf_alloc+0x1be>
 800fd40:	4b0b      	ldr	r3, [pc, #44]	; (800fd70 <pbuf_alloc+0x1cc>)
 800fd42:	f240 1223 	movw	r2, #291	; 0x123
 800fd46:	490e      	ldr	r1, [pc, #56]	; (800fd80 <pbuf_alloc+0x1dc>)
 800fd48:	480b      	ldr	r0, [pc, #44]	; (800fd78 <pbuf_alloc+0x1d4>)
 800fd4a:	f00b fa93 	bl	801b274 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800fd4e:	e008      	b.n	800fd62 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800fd50:	4b07      	ldr	r3, [pc, #28]	; (800fd70 <pbuf_alloc+0x1cc>)
 800fd52:	f240 1227 	movw	r2, #295	; 0x127
 800fd56:	490b      	ldr	r1, [pc, #44]	; (800fd84 <pbuf_alloc+0x1e0>)
 800fd58:	4807      	ldr	r0, [pc, #28]	; (800fd78 <pbuf_alloc+0x1d4>)
 800fd5a:	f00b fa8b 	bl	801b274 <iprintf>
      return NULL;
 800fd5e:	2300      	movs	r3, #0
 800fd60:	e001      	b.n	800fd66 <pbuf_alloc+0x1c2>
      break;
 800fd62:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800fd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	3728      	adds	r7, #40	; 0x28
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}
 800fd6e:	bf00      	nop
 800fd70:	08020d10 	.word	0x08020d10
 800fd74:	08020d40 	.word	0x08020d40
 800fd78:	08020d70 	.word	0x08020d70
 800fd7c:	08020d98 	.word	0x08020d98
 800fd80:	08020dcc 	.word	0x08020dcc
 800fd84:	08020df8 	.word	0x08020df8

0800fd88 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b086      	sub	sp, #24
 800fd8c:	af02      	add	r7, sp, #8
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	460b      	mov	r3, r1
 800fd92:	807b      	strh	r3, [r7, #2]
 800fd94:	4613      	mov	r3, r2
 800fd96:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800fd98:	883b      	ldrh	r3, [r7, #0]
 800fd9a:	2b41      	cmp	r3, #65	; 0x41
 800fd9c:	d009      	beq.n	800fdb2 <pbuf_alloc_reference+0x2a>
 800fd9e:	883b      	ldrh	r3, [r7, #0]
 800fda0:	2b01      	cmp	r3, #1
 800fda2:	d006      	beq.n	800fdb2 <pbuf_alloc_reference+0x2a>
 800fda4:	4b0f      	ldr	r3, [pc, #60]	; (800fde4 <pbuf_alloc_reference+0x5c>)
 800fda6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800fdaa:	490f      	ldr	r1, [pc, #60]	; (800fde8 <pbuf_alloc_reference+0x60>)
 800fdac:	480f      	ldr	r0, [pc, #60]	; (800fdec <pbuf_alloc_reference+0x64>)
 800fdae:	f00b fa61 	bl	801b274 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800fdb2:	2007      	movs	r0, #7
 800fdb4:	f7ff fb94 	bl	800f4e0 <memp_malloc>
 800fdb8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d101      	bne.n	800fdc4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	e00b      	b.n	800fddc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800fdc4:	8879      	ldrh	r1, [r7, #2]
 800fdc6:	887a      	ldrh	r2, [r7, #2]
 800fdc8:	2300      	movs	r3, #0
 800fdca:	9301      	str	r3, [sp, #4]
 800fdcc:	883b      	ldrh	r3, [r7, #0]
 800fdce:	9300      	str	r3, [sp, #0]
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	6879      	ldr	r1, [r7, #4]
 800fdd4:	68f8      	ldr	r0, [r7, #12]
 800fdd6:	f7ff febb 	bl	800fb50 <pbuf_init_alloced_pbuf>
  return p;
 800fdda:	68fb      	ldr	r3, [r7, #12]
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3710      	adds	r7, #16
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}
 800fde4:	08020d10 	.word	0x08020d10
 800fde8:	08020e14 	.word	0x08020e14
 800fdec:	08020d70 	.word	0x08020d70

0800fdf0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b088      	sub	sp, #32
 800fdf4:	af02      	add	r7, sp, #8
 800fdf6:	607b      	str	r3, [r7, #4]
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	73fb      	strb	r3, [r7, #15]
 800fdfc:	460b      	mov	r3, r1
 800fdfe:	81bb      	strh	r3, [r7, #12]
 800fe00:	4613      	mov	r3, r2
 800fe02:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800fe04:	7bfb      	ldrb	r3, [r7, #15]
 800fe06:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800fe08:	8a7b      	ldrh	r3, [r7, #18]
 800fe0a:	3303      	adds	r3, #3
 800fe0c:	f023 0203 	bic.w	r2, r3, #3
 800fe10:	89bb      	ldrh	r3, [r7, #12]
 800fe12:	441a      	add	r2, r3
 800fe14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d901      	bls.n	800fe1e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	e018      	b.n	800fe50 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800fe1e:	6a3b      	ldr	r3, [r7, #32]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d007      	beq.n	800fe34 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800fe24:	8a7b      	ldrh	r3, [r7, #18]
 800fe26:	3303      	adds	r3, #3
 800fe28:	f023 0303 	bic.w	r3, r3, #3
 800fe2c:	6a3a      	ldr	r2, [r7, #32]
 800fe2e:	4413      	add	r3, r2
 800fe30:	617b      	str	r3, [r7, #20]
 800fe32:	e001      	b.n	800fe38 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800fe34:	2300      	movs	r3, #0
 800fe36:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	89b9      	ldrh	r1, [r7, #12]
 800fe3c:	89ba      	ldrh	r2, [r7, #12]
 800fe3e:	2302      	movs	r3, #2
 800fe40:	9301      	str	r3, [sp, #4]
 800fe42:	897b      	ldrh	r3, [r7, #10]
 800fe44:	9300      	str	r3, [sp, #0]
 800fe46:	460b      	mov	r3, r1
 800fe48:	6979      	ldr	r1, [r7, #20]
 800fe4a:	f7ff fe81 	bl	800fb50 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800fe4e:	687b      	ldr	r3, [r7, #4]
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3718      	adds	r7, #24
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}

0800fe58 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b084      	sub	sp, #16
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	460b      	mov	r3, r1
 800fe62:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d106      	bne.n	800fe78 <pbuf_realloc+0x20>
 800fe6a:	4b3a      	ldr	r3, [pc, #232]	; (800ff54 <pbuf_realloc+0xfc>)
 800fe6c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800fe70:	4939      	ldr	r1, [pc, #228]	; (800ff58 <pbuf_realloc+0x100>)
 800fe72:	483a      	ldr	r0, [pc, #232]	; (800ff5c <pbuf_realloc+0x104>)
 800fe74:	f00b f9fe 	bl	801b274 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	891b      	ldrh	r3, [r3, #8]
 800fe7c:	887a      	ldrh	r2, [r7, #2]
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d264      	bcs.n	800ff4c <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	891a      	ldrh	r2, [r3, #8]
 800fe86:	887b      	ldrh	r3, [r7, #2]
 800fe88:	1ad3      	subs	r3, r2, r3
 800fe8a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800fe8c:	887b      	ldrh	r3, [r7, #2]
 800fe8e:	817b      	strh	r3, [r7, #10]
  q = p;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800fe94:	e018      	b.n	800fec8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	895b      	ldrh	r3, [r3, #10]
 800fe9a:	897a      	ldrh	r2, [r7, #10]
 800fe9c:	1ad3      	subs	r3, r2, r3
 800fe9e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	891a      	ldrh	r2, [r3, #8]
 800fea4:	893b      	ldrh	r3, [r7, #8]
 800fea6:	1ad3      	subs	r3, r2, r3
 800fea8:	b29a      	uxth	r2, r3
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d106      	bne.n	800fec8 <pbuf_realloc+0x70>
 800feba:	4b26      	ldr	r3, [pc, #152]	; (800ff54 <pbuf_realloc+0xfc>)
 800febc:	f240 12af 	movw	r2, #431	; 0x1af
 800fec0:	4927      	ldr	r1, [pc, #156]	; (800ff60 <pbuf_realloc+0x108>)
 800fec2:	4826      	ldr	r0, [pc, #152]	; (800ff5c <pbuf_realloc+0x104>)
 800fec4:	f00b f9d6 	bl	801b274 <iprintf>
  while (rem_len > q->len) {
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	895b      	ldrh	r3, [r3, #10]
 800fecc:	897a      	ldrh	r2, [r7, #10]
 800fece:	429a      	cmp	r2, r3
 800fed0:	d8e1      	bhi.n	800fe96 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	7b1b      	ldrb	r3, [r3, #12]
 800fed6:	f003 030f 	and.w	r3, r3, #15
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d122      	bne.n	800ff24 <pbuf_realloc+0xcc>
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	895b      	ldrh	r3, [r3, #10]
 800fee2:	897a      	ldrh	r2, [r7, #10]
 800fee4:	429a      	cmp	r2, r3
 800fee6:	d01d      	beq.n	800ff24 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	7b5b      	ldrb	r3, [r3, #13]
 800feec:	f003 0302 	and.w	r3, r3, #2
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d117      	bne.n	800ff24 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	461a      	mov	r2, r3
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	1ad3      	subs	r3, r2, r3
 800fefe:	b29a      	uxth	r2, r3
 800ff00:	897b      	ldrh	r3, [r7, #10]
 800ff02:	4413      	add	r3, r2
 800ff04:	b29b      	uxth	r3, r3
 800ff06:	4619      	mov	r1, r3
 800ff08:	68f8      	ldr	r0, [r7, #12]
 800ff0a:	f7ff f87f 	bl	800f00c <mem_trim>
 800ff0e:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d106      	bne.n	800ff24 <pbuf_realloc+0xcc>
 800ff16:	4b0f      	ldr	r3, [pc, #60]	; (800ff54 <pbuf_realloc+0xfc>)
 800ff18:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ff1c:	4911      	ldr	r1, [pc, #68]	; (800ff64 <pbuf_realloc+0x10c>)
 800ff1e:	480f      	ldr	r0, [pc, #60]	; (800ff5c <pbuf_realloc+0x104>)
 800ff20:	f00b f9a8 	bl	801b274 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	897a      	ldrh	r2, [r7, #10]
 800ff28:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	895a      	ldrh	r2, [r3, #10]
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d004      	beq.n	800ff44 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f000 f910 	bl	8010164 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	2200      	movs	r2, #0
 800ff48:	601a      	str	r2, [r3, #0]
 800ff4a:	e000      	b.n	800ff4e <pbuf_realloc+0xf6>
    return;
 800ff4c:	bf00      	nop

}
 800ff4e:	3710      	adds	r7, #16
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}
 800ff54:	08020d10 	.word	0x08020d10
 800ff58:	08020e28 	.word	0x08020e28
 800ff5c:	08020d70 	.word	0x08020d70
 800ff60:	08020e40 	.word	0x08020e40
 800ff64:	08020e58 	.word	0x08020e58

0800ff68 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b086      	sub	sp, #24
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	60f8      	str	r0, [r7, #12]
 800ff70:	60b9      	str	r1, [r7, #8]
 800ff72:	4613      	mov	r3, r2
 800ff74:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d106      	bne.n	800ff8a <pbuf_add_header_impl+0x22>
 800ff7c:	4b2b      	ldr	r3, [pc, #172]	; (801002c <pbuf_add_header_impl+0xc4>)
 800ff7e:	f240 12df 	movw	r2, #479	; 0x1df
 800ff82:	492b      	ldr	r1, [pc, #172]	; (8010030 <pbuf_add_header_impl+0xc8>)
 800ff84:	482b      	ldr	r0, [pc, #172]	; (8010034 <pbuf_add_header_impl+0xcc>)
 800ff86:	f00b f975 	bl	801b274 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d003      	beq.n	800ff98 <pbuf_add_header_impl+0x30>
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff96:	d301      	bcc.n	800ff9c <pbuf_add_header_impl+0x34>
    return 1;
 800ff98:	2301      	movs	r3, #1
 800ff9a:	e043      	b.n	8010024 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d101      	bne.n	800ffa6 <pbuf_add_header_impl+0x3e>
    return 0;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	e03e      	b.n	8010024 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	891a      	ldrh	r2, [r3, #8]
 800ffae:	8a7b      	ldrh	r3, [r7, #18]
 800ffb0:	4413      	add	r3, r2
 800ffb2:	b29b      	uxth	r3, r3
 800ffb4:	8a7a      	ldrh	r2, [r7, #18]
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d901      	bls.n	800ffbe <pbuf_add_header_impl+0x56>
    return 1;
 800ffba:	2301      	movs	r3, #1
 800ffbc:	e032      	b.n	8010024 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	7b1b      	ldrb	r3, [r3, #12]
 800ffc2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ffc4:	8a3b      	ldrh	r3, [r7, #16]
 800ffc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d00c      	beq.n	800ffe8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	685a      	ldr	r2, [r3, #4]
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	425b      	negs	r3, r3
 800ffd6:	4413      	add	r3, r2
 800ffd8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	3310      	adds	r3, #16
 800ffde:	697a      	ldr	r2, [r7, #20]
 800ffe0:	429a      	cmp	r2, r3
 800ffe2:	d20d      	bcs.n	8010000 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	e01d      	b.n	8010024 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ffe8:	79fb      	ldrb	r3, [r7, #7]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d006      	beq.n	800fffc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	685a      	ldr	r2, [r3, #4]
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	425b      	negs	r3, r3
 800fff6:	4413      	add	r3, r2
 800fff8:	617b      	str	r3, [r7, #20]
 800fffa:	e001      	b.n	8010000 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800fffc:	2301      	movs	r3, #1
 800fffe:	e011      	b.n	8010024 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	697a      	ldr	r2, [r7, #20]
 8010004:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	895a      	ldrh	r2, [r3, #10]
 801000a:	8a7b      	ldrh	r3, [r7, #18]
 801000c:	4413      	add	r3, r2
 801000e:	b29a      	uxth	r2, r3
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	891a      	ldrh	r2, [r3, #8]
 8010018:	8a7b      	ldrh	r3, [r7, #18]
 801001a:	4413      	add	r3, r2
 801001c:	b29a      	uxth	r2, r3
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	811a      	strh	r2, [r3, #8]


  return 0;
 8010022:	2300      	movs	r3, #0
}
 8010024:	4618      	mov	r0, r3
 8010026:	3718      	adds	r7, #24
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}
 801002c:	08020d10 	.word	0x08020d10
 8010030:	08020e74 	.word	0x08020e74
 8010034:	08020d70 	.word	0x08020d70

08010038 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b082      	sub	sp, #8
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010042:	2200      	movs	r2, #0
 8010044:	6839      	ldr	r1, [r7, #0]
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f7ff ff8e 	bl	800ff68 <pbuf_add_header_impl>
 801004c:	4603      	mov	r3, r0
}
 801004e:	4618      	mov	r0, r3
 8010050:	3708      	adds	r7, #8
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}
	...

08010058 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b084      	sub	sp, #16
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d106      	bne.n	8010076 <pbuf_remove_header+0x1e>
 8010068:	4b20      	ldr	r3, [pc, #128]	; (80100ec <pbuf_remove_header+0x94>)
 801006a:	f240 224b 	movw	r2, #587	; 0x24b
 801006e:	4920      	ldr	r1, [pc, #128]	; (80100f0 <pbuf_remove_header+0x98>)
 8010070:	4820      	ldr	r0, [pc, #128]	; (80100f4 <pbuf_remove_header+0x9c>)
 8010072:	f00b f8ff 	bl	801b274 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d003      	beq.n	8010084 <pbuf_remove_header+0x2c>
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010082:	d301      	bcc.n	8010088 <pbuf_remove_header+0x30>
    return 1;
 8010084:	2301      	movs	r3, #1
 8010086:	e02c      	b.n	80100e2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d101      	bne.n	8010092 <pbuf_remove_header+0x3a>
    return 0;
 801008e:	2300      	movs	r3, #0
 8010090:	e027      	b.n	80100e2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	895b      	ldrh	r3, [r3, #10]
 801009a:	89fa      	ldrh	r2, [r7, #14]
 801009c:	429a      	cmp	r2, r3
 801009e:	d908      	bls.n	80100b2 <pbuf_remove_header+0x5a>
 80100a0:	4b12      	ldr	r3, [pc, #72]	; (80100ec <pbuf_remove_header+0x94>)
 80100a2:	f240 2255 	movw	r2, #597	; 0x255
 80100a6:	4914      	ldr	r1, [pc, #80]	; (80100f8 <pbuf_remove_header+0xa0>)
 80100a8:	4812      	ldr	r0, [pc, #72]	; (80100f4 <pbuf_remove_header+0x9c>)
 80100aa:	f00b f8e3 	bl	801b274 <iprintf>
 80100ae:	2301      	movs	r3, #1
 80100b0:	e017      	b.n	80100e2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	685b      	ldr	r3, [r3, #4]
 80100b6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	685a      	ldr	r2, [r3, #4]
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	441a      	add	r2, r3
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	895a      	ldrh	r2, [r3, #10]
 80100c8:	89fb      	ldrh	r3, [r7, #14]
 80100ca:	1ad3      	subs	r3, r2, r3
 80100cc:	b29a      	uxth	r2, r3
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	891a      	ldrh	r2, [r3, #8]
 80100d6:	89fb      	ldrh	r3, [r7, #14]
 80100d8:	1ad3      	subs	r3, r2, r3
 80100da:	b29a      	uxth	r2, r3
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80100e0:	2300      	movs	r3, #0
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3710      	adds	r7, #16
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
 80100ea:	bf00      	nop
 80100ec:	08020d10 	.word	0x08020d10
 80100f0:	08020e74 	.word	0x08020e74
 80100f4:	08020d70 	.word	0x08020d70
 80100f8:	08020e80 	.word	0x08020e80

080100fc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
 8010104:	460b      	mov	r3, r1
 8010106:	807b      	strh	r3, [r7, #2]
 8010108:	4613      	mov	r3, r2
 801010a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801010c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010110:	2b00      	cmp	r3, #0
 8010112:	da08      	bge.n	8010126 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010114:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010118:	425b      	negs	r3, r3
 801011a:	4619      	mov	r1, r3
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	f7ff ff9b 	bl	8010058 <pbuf_remove_header>
 8010122:	4603      	mov	r3, r0
 8010124:	e007      	b.n	8010136 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010126:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801012a:	787a      	ldrb	r2, [r7, #1]
 801012c:	4619      	mov	r1, r3
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f7ff ff1a 	bl	800ff68 <pbuf_add_header_impl>
 8010134:	4603      	mov	r3, r0
  }
}
 8010136:	4618      	mov	r0, r3
 8010138:	3708      	adds	r7, #8
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}

0801013e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801013e:	b580      	push	{r7, lr}
 8010140:	b082      	sub	sp, #8
 8010142:	af00      	add	r7, sp, #0
 8010144:	6078      	str	r0, [r7, #4]
 8010146:	460b      	mov	r3, r1
 8010148:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801014a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801014e:	2201      	movs	r2, #1
 8010150:	4619      	mov	r1, r3
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f7ff ffd2 	bl	80100fc <pbuf_header_impl>
 8010158:	4603      	mov	r3, r0
}
 801015a:	4618      	mov	r0, r3
 801015c:	3708      	adds	r7, #8
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}
	...

08010164 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b086      	sub	sp, #24
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d10b      	bne.n	801018a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d106      	bne.n	8010186 <pbuf_free+0x22>
 8010178:	4b38      	ldr	r3, [pc, #224]	; (801025c <pbuf_free+0xf8>)
 801017a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801017e:	4938      	ldr	r1, [pc, #224]	; (8010260 <pbuf_free+0xfc>)
 8010180:	4838      	ldr	r0, [pc, #224]	; (8010264 <pbuf_free+0x100>)
 8010182:	f00b f877 	bl	801b274 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010186:	2300      	movs	r3, #0
 8010188:	e063      	b.n	8010252 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801018a:	2300      	movs	r3, #0
 801018c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801018e:	e05c      	b.n	801024a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	7b9b      	ldrb	r3, [r3, #14]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d106      	bne.n	80101a6 <pbuf_free+0x42>
 8010198:	4b30      	ldr	r3, [pc, #192]	; (801025c <pbuf_free+0xf8>)
 801019a:	f240 22f1 	movw	r2, #753	; 0x2f1
 801019e:	4932      	ldr	r1, [pc, #200]	; (8010268 <pbuf_free+0x104>)
 80101a0:	4830      	ldr	r0, [pc, #192]	; (8010264 <pbuf_free+0x100>)
 80101a2:	f00b f867 	bl	801b274 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	7b9b      	ldrb	r3, [r3, #14]
 80101aa:	3b01      	subs	r3, #1
 80101ac:	b2da      	uxtb	r2, r3
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	739a      	strb	r2, [r3, #14]
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	7b9b      	ldrb	r3, [r3, #14]
 80101b6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80101b8:	7dbb      	ldrb	r3, [r7, #22]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d143      	bne.n	8010246 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	7b1b      	ldrb	r3, [r3, #12]
 80101c8:	f003 030f 	and.w	r3, r3, #15
 80101cc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	7b5b      	ldrb	r3, [r3, #13]
 80101d2:	f003 0302 	and.w	r3, r3, #2
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d011      	beq.n	80101fe <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	691b      	ldr	r3, [r3, #16]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d106      	bne.n	80101f4 <pbuf_free+0x90>
 80101e6:	4b1d      	ldr	r3, [pc, #116]	; (801025c <pbuf_free+0xf8>)
 80101e8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80101ec:	491f      	ldr	r1, [pc, #124]	; (801026c <pbuf_free+0x108>)
 80101ee:	481d      	ldr	r0, [pc, #116]	; (8010264 <pbuf_free+0x100>)
 80101f0:	f00b f840 	bl	801b274 <iprintf>
        pc->custom_free_function(p);
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	691b      	ldr	r3, [r3, #16]
 80101f8:	6878      	ldr	r0, [r7, #4]
 80101fa:	4798      	blx	r3
 80101fc:	e01d      	b.n	801023a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80101fe:	7bfb      	ldrb	r3, [r7, #15]
 8010200:	2b02      	cmp	r3, #2
 8010202:	d104      	bne.n	801020e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8010204:	6879      	ldr	r1, [r7, #4]
 8010206:	2008      	movs	r0, #8
 8010208:	f7ff f9b6 	bl	800f578 <memp_free>
 801020c:	e015      	b.n	801023a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801020e:	7bfb      	ldrb	r3, [r7, #15]
 8010210:	2b01      	cmp	r3, #1
 8010212:	d104      	bne.n	801021e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8010214:	6879      	ldr	r1, [r7, #4]
 8010216:	2007      	movs	r0, #7
 8010218:	f7ff f9ae 	bl	800f578 <memp_free>
 801021c:	e00d      	b.n	801023a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801021e:	7bfb      	ldrb	r3, [r7, #15]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d103      	bne.n	801022c <pbuf_free+0xc8>
          mem_free(p);
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f7fe fe87 	bl	800ef38 <mem_free>
 801022a:	e006      	b.n	801023a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801022c:	4b0b      	ldr	r3, [pc, #44]	; (801025c <pbuf_free+0xf8>)
 801022e:	f240 320f 	movw	r2, #783	; 0x30f
 8010232:	490f      	ldr	r1, [pc, #60]	; (8010270 <pbuf_free+0x10c>)
 8010234:	480b      	ldr	r0, [pc, #44]	; (8010264 <pbuf_free+0x100>)
 8010236:	f00b f81d 	bl	801b274 <iprintf>
        }
      }
      count++;
 801023a:	7dfb      	ldrb	r3, [r7, #23]
 801023c:	3301      	adds	r3, #1
 801023e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8010240:	693b      	ldr	r3, [r7, #16]
 8010242:	607b      	str	r3, [r7, #4]
 8010244:	e001      	b.n	801024a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010246:	2300      	movs	r3, #0
 8010248:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d19f      	bne.n	8010190 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010250:	7dfb      	ldrb	r3, [r7, #23]
}
 8010252:	4618      	mov	r0, r3
 8010254:	3718      	adds	r7, #24
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}
 801025a:	bf00      	nop
 801025c:	08020d10 	.word	0x08020d10
 8010260:	08020e74 	.word	0x08020e74
 8010264:	08020d70 	.word	0x08020d70
 8010268:	08020ea0 	.word	0x08020ea0
 801026c:	08020eb8 	.word	0x08020eb8
 8010270:	08020edc 	.word	0x08020edc

08010274 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010274:	b480      	push	{r7}
 8010276:	b085      	sub	sp, #20
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801027c:	2300      	movs	r3, #0
 801027e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010280:	e005      	b.n	801028e <pbuf_clen+0x1a>
    ++len;
 8010282:	89fb      	ldrh	r3, [r7, #14]
 8010284:	3301      	adds	r3, #1
 8010286:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d1f6      	bne.n	8010282 <pbuf_clen+0xe>
  }
  return len;
 8010294:	89fb      	ldrh	r3, [r7, #14]
}
 8010296:	4618      	mov	r0, r3
 8010298:	3714      	adds	r7, #20
 801029a:	46bd      	mov	sp, r7
 801029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a0:	4770      	bx	lr
	...

080102a4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b082      	sub	sp, #8
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d010      	beq.n	80102d4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	7b9b      	ldrb	r3, [r3, #14]
 80102b6:	3301      	adds	r3, #1
 80102b8:	b2da      	uxtb	r2, r3
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	7b9b      	ldrb	r3, [r3, #14]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d106      	bne.n	80102d4 <pbuf_ref+0x30>
 80102c6:	4b05      	ldr	r3, [pc, #20]	; (80102dc <pbuf_ref+0x38>)
 80102c8:	f240 3242 	movw	r2, #834	; 0x342
 80102cc:	4904      	ldr	r1, [pc, #16]	; (80102e0 <pbuf_ref+0x3c>)
 80102ce:	4805      	ldr	r0, [pc, #20]	; (80102e4 <pbuf_ref+0x40>)
 80102d0:	f00a ffd0 	bl	801b274 <iprintf>
  }
}
 80102d4:	bf00      	nop
 80102d6:	3708      	adds	r7, #8
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}
 80102dc:	08020d10 	.word	0x08020d10
 80102e0:	08020ef0 	.word	0x08020ef0
 80102e4:	08020d70 	.word	0x08020d70

080102e8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b084      	sub	sp, #16
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d002      	beq.n	80102fe <pbuf_cat+0x16>
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d107      	bne.n	801030e <pbuf_cat+0x26>
 80102fe:	4b20      	ldr	r3, [pc, #128]	; (8010380 <pbuf_cat+0x98>)
 8010300:	f240 325a 	movw	r2, #858	; 0x35a
 8010304:	491f      	ldr	r1, [pc, #124]	; (8010384 <pbuf_cat+0x9c>)
 8010306:	4820      	ldr	r0, [pc, #128]	; (8010388 <pbuf_cat+0xa0>)
 8010308:	f00a ffb4 	bl	801b274 <iprintf>
 801030c:	e034      	b.n	8010378 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	60fb      	str	r3, [r7, #12]
 8010312:	e00a      	b.n	801032a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	891a      	ldrh	r2, [r3, #8]
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	891b      	ldrh	r3, [r3, #8]
 801031c:	4413      	add	r3, r2
 801031e:	b29a      	uxth	r2, r3
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	60fb      	str	r3, [r7, #12]
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d1f0      	bne.n	8010314 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	891a      	ldrh	r2, [r3, #8]
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	895b      	ldrh	r3, [r3, #10]
 801033a:	429a      	cmp	r2, r3
 801033c:	d006      	beq.n	801034c <pbuf_cat+0x64>
 801033e:	4b10      	ldr	r3, [pc, #64]	; (8010380 <pbuf_cat+0x98>)
 8010340:	f240 3262 	movw	r2, #866	; 0x362
 8010344:	4911      	ldr	r1, [pc, #68]	; (801038c <pbuf_cat+0xa4>)
 8010346:	4810      	ldr	r0, [pc, #64]	; (8010388 <pbuf_cat+0xa0>)
 8010348:	f00a ff94 	bl	801b274 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d006      	beq.n	8010362 <pbuf_cat+0x7a>
 8010354:	4b0a      	ldr	r3, [pc, #40]	; (8010380 <pbuf_cat+0x98>)
 8010356:	f240 3263 	movw	r2, #867	; 0x363
 801035a:	490d      	ldr	r1, [pc, #52]	; (8010390 <pbuf_cat+0xa8>)
 801035c:	480a      	ldr	r0, [pc, #40]	; (8010388 <pbuf_cat+0xa0>)
 801035e:	f00a ff89 	bl	801b274 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	891a      	ldrh	r2, [r3, #8]
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	891b      	ldrh	r3, [r3, #8]
 801036a:	4413      	add	r3, r2
 801036c:	b29a      	uxth	r2, r3
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	683a      	ldr	r2, [r7, #0]
 8010376:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010378:	3710      	adds	r7, #16
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}
 801037e:	bf00      	nop
 8010380:	08020d10 	.word	0x08020d10
 8010384:	08020f04 	.word	0x08020f04
 8010388:	08020d70 	.word	0x08020d70
 801038c:	08020f3c 	.word	0x08020f3c
 8010390:	08020f6c 	.word	0x08020f6c

08010394 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b082      	sub	sp, #8
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801039e:	6839      	ldr	r1, [r7, #0]
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f7ff ffa1 	bl	80102e8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80103a6:	6838      	ldr	r0, [r7, #0]
 80103a8:	f7ff ff7c 	bl	80102a4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80103ac:	bf00      	nop
 80103ae:	3708      	adds	r7, #8
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}

080103b4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b086      	sub	sp, #24
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80103be:	2300      	movs	r3, #0
 80103c0:	617b      	str	r3, [r7, #20]
 80103c2:	2300      	movs	r3, #0
 80103c4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d008      	beq.n	80103de <pbuf_copy+0x2a>
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d005      	beq.n	80103de <pbuf_copy+0x2a>
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	891a      	ldrh	r2, [r3, #8]
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	891b      	ldrh	r3, [r3, #8]
 80103da:	429a      	cmp	r2, r3
 80103dc:	d209      	bcs.n	80103f2 <pbuf_copy+0x3e>
 80103de:	4b57      	ldr	r3, [pc, #348]	; (801053c <pbuf_copy+0x188>)
 80103e0:	f240 32ca 	movw	r2, #970	; 0x3ca
 80103e4:	4956      	ldr	r1, [pc, #344]	; (8010540 <pbuf_copy+0x18c>)
 80103e6:	4857      	ldr	r0, [pc, #348]	; (8010544 <pbuf_copy+0x190>)
 80103e8:	f00a ff44 	bl	801b274 <iprintf>
 80103ec:	f06f 030f 	mvn.w	r3, #15
 80103f0:	e09f      	b.n	8010532 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	895b      	ldrh	r3, [r3, #10]
 80103f6:	461a      	mov	r2, r3
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	1ad2      	subs	r2, r2, r3
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	895b      	ldrh	r3, [r3, #10]
 8010400:	4619      	mov	r1, r3
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	1acb      	subs	r3, r1, r3
 8010406:	429a      	cmp	r2, r3
 8010408:	d306      	bcc.n	8010418 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	895b      	ldrh	r3, [r3, #10]
 801040e:	461a      	mov	r2, r3
 8010410:	693b      	ldr	r3, [r7, #16]
 8010412:	1ad3      	subs	r3, r2, r3
 8010414:	60fb      	str	r3, [r7, #12]
 8010416:	e005      	b.n	8010424 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	895b      	ldrh	r3, [r3, #10]
 801041c:	461a      	mov	r2, r3
 801041e:	697b      	ldr	r3, [r7, #20]
 8010420:	1ad3      	subs	r3, r2, r3
 8010422:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	685a      	ldr	r2, [r3, #4]
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	18d0      	adds	r0, r2, r3
 801042c:	683b      	ldr	r3, [r7, #0]
 801042e:	685a      	ldr	r2, [r3, #4]
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	4413      	add	r3, r2
 8010434:	68fa      	ldr	r2, [r7, #12]
 8010436:	4619      	mov	r1, r3
 8010438:	f00a f9eb 	bl	801a812 <memcpy>
    offset_to += len;
 801043c:	697a      	ldr	r2, [r7, #20]
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	4413      	add	r3, r2
 8010442:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010444:	693a      	ldr	r2, [r7, #16]
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	4413      	add	r3, r2
 801044a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	895b      	ldrh	r3, [r3, #10]
 8010450:	461a      	mov	r2, r3
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	4293      	cmp	r3, r2
 8010456:	d906      	bls.n	8010466 <pbuf_copy+0xb2>
 8010458:	4b38      	ldr	r3, [pc, #224]	; (801053c <pbuf_copy+0x188>)
 801045a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801045e:	493a      	ldr	r1, [pc, #232]	; (8010548 <pbuf_copy+0x194>)
 8010460:	4838      	ldr	r0, [pc, #224]	; (8010544 <pbuf_copy+0x190>)
 8010462:	f00a ff07 	bl	801b274 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	895b      	ldrh	r3, [r3, #10]
 801046a:	461a      	mov	r2, r3
 801046c:	693b      	ldr	r3, [r7, #16]
 801046e:	4293      	cmp	r3, r2
 8010470:	d906      	bls.n	8010480 <pbuf_copy+0xcc>
 8010472:	4b32      	ldr	r3, [pc, #200]	; (801053c <pbuf_copy+0x188>)
 8010474:	f240 32da 	movw	r2, #986	; 0x3da
 8010478:	4934      	ldr	r1, [pc, #208]	; (801054c <pbuf_copy+0x198>)
 801047a:	4832      	ldr	r0, [pc, #200]	; (8010544 <pbuf_copy+0x190>)
 801047c:	f00a fefa 	bl	801b274 <iprintf>
    if (offset_from >= p_from->len) {
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	895b      	ldrh	r3, [r3, #10]
 8010484:	461a      	mov	r2, r3
 8010486:	693b      	ldr	r3, [r7, #16]
 8010488:	4293      	cmp	r3, r2
 801048a:	d304      	bcc.n	8010496 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801048c:	2300      	movs	r3, #0
 801048e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	895b      	ldrh	r3, [r3, #10]
 801049a:	461a      	mov	r2, r3
 801049c:	697b      	ldr	r3, [r7, #20]
 801049e:	4293      	cmp	r3, r2
 80104a0:	d114      	bne.n	80104cc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80104a2:	2300      	movs	r3, #0
 80104a4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d10c      	bne.n	80104cc <pbuf_copy+0x118>
 80104b2:	683b      	ldr	r3, [r7, #0]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d009      	beq.n	80104cc <pbuf_copy+0x118>
 80104b8:	4b20      	ldr	r3, [pc, #128]	; (801053c <pbuf_copy+0x188>)
 80104ba:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80104be:	4924      	ldr	r1, [pc, #144]	; (8010550 <pbuf_copy+0x19c>)
 80104c0:	4820      	ldr	r0, [pc, #128]	; (8010544 <pbuf_copy+0x190>)
 80104c2:	f00a fed7 	bl	801b274 <iprintf>
 80104c6:	f06f 030f 	mvn.w	r3, #15
 80104ca:	e032      	b.n	8010532 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d013      	beq.n	80104fa <pbuf_copy+0x146>
 80104d2:	683b      	ldr	r3, [r7, #0]
 80104d4:	895a      	ldrh	r2, [r3, #10]
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	891b      	ldrh	r3, [r3, #8]
 80104da:	429a      	cmp	r2, r3
 80104dc:	d10d      	bne.n	80104fa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d009      	beq.n	80104fa <pbuf_copy+0x146>
 80104e6:	4b15      	ldr	r3, [pc, #84]	; (801053c <pbuf_copy+0x188>)
 80104e8:	f240 32ea 	movw	r2, #1002	; 0x3ea
 80104ec:	4919      	ldr	r1, [pc, #100]	; (8010554 <pbuf_copy+0x1a0>)
 80104ee:	4815      	ldr	r0, [pc, #84]	; (8010544 <pbuf_copy+0x190>)
 80104f0:	f00a fec0 	bl	801b274 <iprintf>
 80104f4:	f06f 0305 	mvn.w	r3, #5
 80104f8:	e01b      	b.n	8010532 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d013      	beq.n	8010528 <pbuf_copy+0x174>
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	895a      	ldrh	r2, [r3, #10]
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	891b      	ldrh	r3, [r3, #8]
 8010508:	429a      	cmp	r2, r3
 801050a:	d10d      	bne.n	8010528 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d009      	beq.n	8010528 <pbuf_copy+0x174>
 8010514:	4b09      	ldr	r3, [pc, #36]	; (801053c <pbuf_copy+0x188>)
 8010516:	f240 32ef 	movw	r2, #1007	; 0x3ef
 801051a:	490e      	ldr	r1, [pc, #56]	; (8010554 <pbuf_copy+0x1a0>)
 801051c:	4809      	ldr	r0, [pc, #36]	; (8010544 <pbuf_copy+0x190>)
 801051e:	f00a fea9 	bl	801b274 <iprintf>
 8010522:	f06f 0305 	mvn.w	r3, #5
 8010526:	e004      	b.n	8010532 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	2b00      	cmp	r3, #0
 801052c:	f47f af61 	bne.w	80103f2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010530:	2300      	movs	r3, #0
}
 8010532:	4618      	mov	r0, r3
 8010534:	3718      	adds	r7, #24
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}
 801053a:	bf00      	nop
 801053c:	08020d10 	.word	0x08020d10
 8010540:	08020fb8 	.word	0x08020fb8
 8010544:	08020d70 	.word	0x08020d70
 8010548:	08020fe8 	.word	0x08020fe8
 801054c:	08021000 	.word	0x08021000
 8010550:	0802101c 	.word	0x0802101c
 8010554:	0802102c 	.word	0x0802102c

08010558 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b088      	sub	sp, #32
 801055c:	af00      	add	r7, sp, #0
 801055e:	60f8      	str	r0, [r7, #12]
 8010560:	60b9      	str	r1, [r7, #8]
 8010562:	4611      	mov	r1, r2
 8010564:	461a      	mov	r2, r3
 8010566:	460b      	mov	r3, r1
 8010568:	80fb      	strh	r3, [r7, #6]
 801056a:	4613      	mov	r3, r2
 801056c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801056e:	2300      	movs	r3, #0
 8010570:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010572:	2300      	movs	r3, #0
 8010574:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d108      	bne.n	801058e <pbuf_copy_partial+0x36>
 801057c:	4b2b      	ldr	r3, [pc, #172]	; (801062c <pbuf_copy_partial+0xd4>)
 801057e:	f240 420a 	movw	r2, #1034	; 0x40a
 8010582:	492b      	ldr	r1, [pc, #172]	; (8010630 <pbuf_copy_partial+0xd8>)
 8010584:	482b      	ldr	r0, [pc, #172]	; (8010634 <pbuf_copy_partial+0xdc>)
 8010586:	f00a fe75 	bl	801b274 <iprintf>
 801058a:	2300      	movs	r3, #0
 801058c:	e04a      	b.n	8010624 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d108      	bne.n	80105a6 <pbuf_copy_partial+0x4e>
 8010594:	4b25      	ldr	r3, [pc, #148]	; (801062c <pbuf_copy_partial+0xd4>)
 8010596:	f240 420b 	movw	r2, #1035	; 0x40b
 801059a:	4927      	ldr	r1, [pc, #156]	; (8010638 <pbuf_copy_partial+0xe0>)
 801059c:	4825      	ldr	r0, [pc, #148]	; (8010634 <pbuf_copy_partial+0xdc>)
 801059e:	f00a fe69 	bl	801b274 <iprintf>
 80105a2:	2300      	movs	r3, #0
 80105a4:	e03e      	b.n	8010624 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	61fb      	str	r3, [r7, #28]
 80105aa:	e034      	b.n	8010616 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80105ac:	88bb      	ldrh	r3, [r7, #4]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d00a      	beq.n	80105c8 <pbuf_copy_partial+0x70>
 80105b2:	69fb      	ldr	r3, [r7, #28]
 80105b4:	895b      	ldrh	r3, [r3, #10]
 80105b6:	88ba      	ldrh	r2, [r7, #4]
 80105b8:	429a      	cmp	r2, r3
 80105ba:	d305      	bcc.n	80105c8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80105bc:	69fb      	ldr	r3, [r7, #28]
 80105be:	895b      	ldrh	r3, [r3, #10]
 80105c0:	88ba      	ldrh	r2, [r7, #4]
 80105c2:	1ad3      	subs	r3, r2, r3
 80105c4:	80bb      	strh	r3, [r7, #4]
 80105c6:	e023      	b.n	8010610 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80105c8:	69fb      	ldr	r3, [r7, #28]
 80105ca:	895a      	ldrh	r2, [r3, #10]
 80105cc:	88bb      	ldrh	r3, [r7, #4]
 80105ce:	1ad3      	subs	r3, r2, r3
 80105d0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80105d2:	8b3a      	ldrh	r2, [r7, #24]
 80105d4:	88fb      	ldrh	r3, [r7, #6]
 80105d6:	429a      	cmp	r2, r3
 80105d8:	d901      	bls.n	80105de <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80105da:	88fb      	ldrh	r3, [r7, #6]
 80105dc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80105de:	8b7b      	ldrh	r3, [r7, #26]
 80105e0:	68ba      	ldr	r2, [r7, #8]
 80105e2:	18d0      	adds	r0, r2, r3
 80105e4:	69fb      	ldr	r3, [r7, #28]
 80105e6:	685a      	ldr	r2, [r3, #4]
 80105e8:	88bb      	ldrh	r3, [r7, #4]
 80105ea:	4413      	add	r3, r2
 80105ec:	8b3a      	ldrh	r2, [r7, #24]
 80105ee:	4619      	mov	r1, r3
 80105f0:	f00a f90f 	bl	801a812 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80105f4:	8afa      	ldrh	r2, [r7, #22]
 80105f6:	8b3b      	ldrh	r3, [r7, #24]
 80105f8:	4413      	add	r3, r2
 80105fa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80105fc:	8b7a      	ldrh	r2, [r7, #26]
 80105fe:	8b3b      	ldrh	r3, [r7, #24]
 8010600:	4413      	add	r3, r2
 8010602:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010604:	88fa      	ldrh	r2, [r7, #6]
 8010606:	8b3b      	ldrh	r3, [r7, #24]
 8010608:	1ad3      	subs	r3, r2, r3
 801060a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801060c:	2300      	movs	r3, #0
 801060e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010610:	69fb      	ldr	r3, [r7, #28]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	61fb      	str	r3, [r7, #28]
 8010616:	88fb      	ldrh	r3, [r7, #6]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d002      	beq.n	8010622 <pbuf_copy_partial+0xca>
 801061c:	69fb      	ldr	r3, [r7, #28]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d1c4      	bne.n	80105ac <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010622:	8afb      	ldrh	r3, [r7, #22]
}
 8010624:	4618      	mov	r0, r3
 8010626:	3720      	adds	r7, #32
 8010628:	46bd      	mov	sp, r7
 801062a:	bd80      	pop	{r7, pc}
 801062c:	08020d10 	.word	0x08020d10
 8010630:	08021058 	.word	0x08021058
 8010634:	08020d70 	.word	0x08020d70
 8010638:	08021078 	.word	0x08021078

0801063c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b084      	sub	sp, #16
 8010640:	af00      	add	r7, sp, #0
 8010642:	4603      	mov	r3, r0
 8010644:	603a      	str	r2, [r7, #0]
 8010646:	71fb      	strb	r3, [r7, #7]
 8010648:	460b      	mov	r3, r1
 801064a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	8919      	ldrh	r1, [r3, #8]
 8010650:	88ba      	ldrh	r2, [r7, #4]
 8010652:	79fb      	ldrb	r3, [r7, #7]
 8010654:	4618      	mov	r0, r3
 8010656:	f7ff faa5 	bl	800fba4 <pbuf_alloc>
 801065a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d101      	bne.n	8010666 <pbuf_clone+0x2a>
    return NULL;
 8010662:	2300      	movs	r3, #0
 8010664:	e011      	b.n	801068a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010666:	6839      	ldr	r1, [r7, #0]
 8010668:	68f8      	ldr	r0, [r7, #12]
 801066a:	f7ff fea3 	bl	80103b4 <pbuf_copy>
 801066e:	4603      	mov	r3, r0
 8010670:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010672:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d006      	beq.n	8010688 <pbuf_clone+0x4c>
 801067a:	4b06      	ldr	r3, [pc, #24]	; (8010694 <pbuf_clone+0x58>)
 801067c:	f240 5224 	movw	r2, #1316	; 0x524
 8010680:	4905      	ldr	r1, [pc, #20]	; (8010698 <pbuf_clone+0x5c>)
 8010682:	4806      	ldr	r0, [pc, #24]	; (801069c <pbuf_clone+0x60>)
 8010684:	f00a fdf6 	bl	801b274 <iprintf>
  return q;
 8010688:	68fb      	ldr	r3, [r7, #12]
}
 801068a:	4618      	mov	r0, r3
 801068c:	3710      	adds	r7, #16
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}
 8010692:	bf00      	nop
 8010694:	08020d10 	.word	0x08020d10
 8010698:	08021184 	.word	0x08021184
 801069c:	08020d70 	.word	0x08020d70

080106a0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80106a4:	f00a fdfe 	bl	801b2a4 <rand>
 80106a8:	4603      	mov	r3, r0
 80106aa:	b29b      	uxth	r3, r3
 80106ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80106b0:	b29b      	uxth	r3, r3
 80106b2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80106b6:	b29a      	uxth	r2, r3
 80106b8:	4b01      	ldr	r3, [pc, #4]	; (80106c0 <tcp_init+0x20>)
 80106ba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80106bc:	bf00      	nop
 80106be:	bd80      	pop	{r7, pc}
 80106c0:	20000076 	.word	0x20000076

080106c4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b082      	sub	sp, #8
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	7d1b      	ldrb	r3, [r3, #20]
 80106d0:	2b01      	cmp	r3, #1
 80106d2:	d105      	bne.n	80106e0 <tcp_free+0x1c>
 80106d4:	4b06      	ldr	r3, [pc, #24]	; (80106f0 <tcp_free+0x2c>)
 80106d6:	22d4      	movs	r2, #212	; 0xd4
 80106d8:	4906      	ldr	r1, [pc, #24]	; (80106f4 <tcp_free+0x30>)
 80106da:	4807      	ldr	r0, [pc, #28]	; (80106f8 <tcp_free+0x34>)
 80106dc:	f00a fdca 	bl	801b274 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80106e0:	6879      	ldr	r1, [r7, #4]
 80106e2:	2001      	movs	r0, #1
 80106e4:	f7fe ff48 	bl	800f578 <memp_free>
}
 80106e8:	bf00      	nop
 80106ea:	3708      	adds	r7, #8
 80106ec:	46bd      	mov	sp, r7
 80106ee:	bd80      	pop	{r7, pc}
 80106f0:	08021210 	.word	0x08021210
 80106f4:	08021240 	.word	0x08021240
 80106f8:	08021254 	.word	0x08021254

080106fc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	7d1b      	ldrb	r3, [r3, #20]
 8010708:	2b01      	cmp	r3, #1
 801070a:	d105      	bne.n	8010718 <tcp_free_listen+0x1c>
 801070c:	4b06      	ldr	r3, [pc, #24]	; (8010728 <tcp_free_listen+0x2c>)
 801070e:	22df      	movs	r2, #223	; 0xdf
 8010710:	4906      	ldr	r1, [pc, #24]	; (801072c <tcp_free_listen+0x30>)
 8010712:	4807      	ldr	r0, [pc, #28]	; (8010730 <tcp_free_listen+0x34>)
 8010714:	f00a fdae 	bl	801b274 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010718:	6879      	ldr	r1, [r7, #4]
 801071a:	2002      	movs	r0, #2
 801071c:	f7fe ff2c 	bl	800f578 <memp_free>
}
 8010720:	bf00      	nop
 8010722:	3708      	adds	r7, #8
 8010724:	46bd      	mov	sp, r7
 8010726:	bd80      	pop	{r7, pc}
 8010728:	08021210 	.word	0x08021210
 801072c:	0802127c 	.word	0x0802127c
 8010730:	08021254 	.word	0x08021254

08010734 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010738:	f000 fe98 	bl	801146c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801073c:	4b07      	ldr	r3, [pc, #28]	; (801075c <tcp_tmr+0x28>)
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	3301      	adds	r3, #1
 8010742:	b2da      	uxtb	r2, r3
 8010744:	4b05      	ldr	r3, [pc, #20]	; (801075c <tcp_tmr+0x28>)
 8010746:	701a      	strb	r2, [r3, #0]
 8010748:	4b04      	ldr	r3, [pc, #16]	; (801075c <tcp_tmr+0x28>)
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	f003 0301 	and.w	r3, r3, #1
 8010750:	2b00      	cmp	r3, #0
 8010752:	d001      	beq.n	8010758 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010754:	f000 fb4c 	bl	8010df0 <tcp_slowtmr>
  }
}
 8010758:	bf00      	nop
 801075a:	bd80      	pop	{r7, pc}
 801075c:	200004d5 	.word	0x200004d5

08010760 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b084      	sub	sp, #16
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d105      	bne.n	801077c <tcp_remove_listener+0x1c>
 8010770:	4b0d      	ldr	r3, [pc, #52]	; (80107a8 <tcp_remove_listener+0x48>)
 8010772:	22ff      	movs	r2, #255	; 0xff
 8010774:	490d      	ldr	r1, [pc, #52]	; (80107ac <tcp_remove_listener+0x4c>)
 8010776:	480e      	ldr	r0, [pc, #56]	; (80107b0 <tcp_remove_listener+0x50>)
 8010778:	f00a fd7c 	bl	801b274 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	60fb      	str	r3, [r7, #12]
 8010780:	e00a      	b.n	8010798 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010786:	683a      	ldr	r2, [r7, #0]
 8010788:	429a      	cmp	r2, r3
 801078a:	d102      	bne.n	8010792 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	2200      	movs	r2, #0
 8010790:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	68db      	ldr	r3, [r3, #12]
 8010796:	60fb      	str	r3, [r7, #12]
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d1f1      	bne.n	8010782 <tcp_remove_listener+0x22>
    }
  }
}
 801079e:	bf00      	nop
 80107a0:	3710      	adds	r7, #16
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}
 80107a6:	bf00      	nop
 80107a8:	08021210 	.word	0x08021210
 80107ac:	08021298 	.word	0x08021298
 80107b0:	08021254 	.word	0x08021254

080107b4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b084      	sub	sp, #16
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d106      	bne.n	80107d0 <tcp_listen_closed+0x1c>
 80107c2:	4b14      	ldr	r3, [pc, #80]	; (8010814 <tcp_listen_closed+0x60>)
 80107c4:	f240 1211 	movw	r2, #273	; 0x111
 80107c8:	4913      	ldr	r1, [pc, #76]	; (8010818 <tcp_listen_closed+0x64>)
 80107ca:	4814      	ldr	r0, [pc, #80]	; (801081c <tcp_listen_closed+0x68>)
 80107cc:	f00a fd52 	bl	801b274 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	7d1b      	ldrb	r3, [r3, #20]
 80107d4:	2b01      	cmp	r3, #1
 80107d6:	d006      	beq.n	80107e6 <tcp_listen_closed+0x32>
 80107d8:	4b0e      	ldr	r3, [pc, #56]	; (8010814 <tcp_listen_closed+0x60>)
 80107da:	f44f 7289 	mov.w	r2, #274	; 0x112
 80107de:	4910      	ldr	r1, [pc, #64]	; (8010820 <tcp_listen_closed+0x6c>)
 80107e0:	480e      	ldr	r0, [pc, #56]	; (801081c <tcp_listen_closed+0x68>)
 80107e2:	f00a fd47 	bl	801b274 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80107e6:	2301      	movs	r3, #1
 80107e8:	60fb      	str	r3, [r7, #12]
 80107ea:	e00b      	b.n	8010804 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80107ec:	4a0d      	ldr	r2, [pc, #52]	; (8010824 <tcp_listen_closed+0x70>)
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	6879      	ldr	r1, [r7, #4]
 80107f8:	4618      	mov	r0, r3
 80107fa:	f7ff ffb1 	bl	8010760 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	3301      	adds	r3, #1
 8010802:	60fb      	str	r3, [r7, #12]
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	2b03      	cmp	r3, #3
 8010808:	d9f0      	bls.n	80107ec <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801080a:	bf00      	nop
 801080c:	3710      	adds	r7, #16
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}
 8010812:	bf00      	nop
 8010814:	08021210 	.word	0x08021210
 8010818:	080212c0 	.word	0x080212c0
 801081c:	08021254 	.word	0x08021254
 8010820:	080212cc 	.word	0x080212cc
 8010824:	08023ae4 	.word	0x08023ae4

08010828 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010828:	b5b0      	push	{r4, r5, r7, lr}
 801082a:	b088      	sub	sp, #32
 801082c:	af04      	add	r7, sp, #16
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	460b      	mov	r3, r1
 8010832:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d106      	bne.n	8010848 <tcp_close_shutdown+0x20>
 801083a:	4b61      	ldr	r3, [pc, #388]	; (80109c0 <tcp_close_shutdown+0x198>)
 801083c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010840:	4960      	ldr	r1, [pc, #384]	; (80109c4 <tcp_close_shutdown+0x19c>)
 8010842:	4861      	ldr	r0, [pc, #388]	; (80109c8 <tcp_close_shutdown+0x1a0>)
 8010844:	f00a fd16 	bl	801b274 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010848:	78fb      	ldrb	r3, [r7, #3]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d066      	beq.n	801091c <tcp_close_shutdown+0xf4>
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	7d1b      	ldrb	r3, [r3, #20]
 8010852:	2b04      	cmp	r3, #4
 8010854:	d003      	beq.n	801085e <tcp_close_shutdown+0x36>
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	7d1b      	ldrb	r3, [r3, #20]
 801085a:	2b07      	cmp	r3, #7
 801085c:	d15e      	bne.n	801091c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010862:	2b00      	cmp	r3, #0
 8010864:	d104      	bne.n	8010870 <tcp_close_shutdown+0x48>
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801086a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801086e:	d055      	beq.n	801091c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	8b5b      	ldrh	r3, [r3, #26]
 8010874:	f003 0310 	and.w	r3, r3, #16
 8010878:	2b00      	cmp	r3, #0
 801087a:	d106      	bne.n	801088a <tcp_close_shutdown+0x62>
 801087c:	4b50      	ldr	r3, [pc, #320]	; (80109c0 <tcp_close_shutdown+0x198>)
 801087e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8010882:	4952      	ldr	r1, [pc, #328]	; (80109cc <tcp_close_shutdown+0x1a4>)
 8010884:	4850      	ldr	r0, [pc, #320]	; (80109c8 <tcp_close_shutdown+0x1a0>)
 8010886:	f00a fcf5 	bl	801b274 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010892:	687d      	ldr	r5, [r7, #4]
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	3304      	adds	r3, #4
 8010898:	687a      	ldr	r2, [r7, #4]
 801089a:	8ad2      	ldrh	r2, [r2, #22]
 801089c:	6879      	ldr	r1, [r7, #4]
 801089e:	8b09      	ldrh	r1, [r1, #24]
 80108a0:	9102      	str	r1, [sp, #8]
 80108a2:	9201      	str	r2, [sp, #4]
 80108a4:	9300      	str	r3, [sp, #0]
 80108a6:	462b      	mov	r3, r5
 80108a8:	4622      	mov	r2, r4
 80108aa:	4601      	mov	r1, r0
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f004 fe8f 	bl	80155d0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80108b2:	6878      	ldr	r0, [r7, #4]
 80108b4:	f001 f8ba 	bl	8011a2c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80108b8:	4b45      	ldr	r3, [pc, #276]	; (80109d0 <tcp_close_shutdown+0x1a8>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	687a      	ldr	r2, [r7, #4]
 80108be:	429a      	cmp	r2, r3
 80108c0:	d105      	bne.n	80108ce <tcp_close_shutdown+0xa6>
 80108c2:	4b43      	ldr	r3, [pc, #268]	; (80109d0 <tcp_close_shutdown+0x1a8>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	68db      	ldr	r3, [r3, #12]
 80108c8:	4a41      	ldr	r2, [pc, #260]	; (80109d0 <tcp_close_shutdown+0x1a8>)
 80108ca:	6013      	str	r3, [r2, #0]
 80108cc:	e013      	b.n	80108f6 <tcp_close_shutdown+0xce>
 80108ce:	4b40      	ldr	r3, [pc, #256]	; (80109d0 <tcp_close_shutdown+0x1a8>)
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	60fb      	str	r3, [r7, #12]
 80108d4:	e00c      	b.n	80108f0 <tcp_close_shutdown+0xc8>
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	68db      	ldr	r3, [r3, #12]
 80108da:	687a      	ldr	r2, [r7, #4]
 80108dc:	429a      	cmp	r2, r3
 80108de:	d104      	bne.n	80108ea <tcp_close_shutdown+0xc2>
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	68da      	ldr	r2, [r3, #12]
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	60da      	str	r2, [r3, #12]
 80108e8:	e005      	b.n	80108f6 <tcp_close_shutdown+0xce>
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	68db      	ldr	r3, [r3, #12]
 80108ee:	60fb      	str	r3, [r7, #12]
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d1ef      	bne.n	80108d6 <tcp_close_shutdown+0xae>
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2200      	movs	r2, #0
 80108fa:	60da      	str	r2, [r3, #12]
 80108fc:	4b35      	ldr	r3, [pc, #212]	; (80109d4 <tcp_close_shutdown+0x1ac>)
 80108fe:	2201      	movs	r2, #1
 8010900:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010902:	4b35      	ldr	r3, [pc, #212]	; (80109d8 <tcp_close_shutdown+0x1b0>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	687a      	ldr	r2, [r7, #4]
 8010908:	429a      	cmp	r2, r3
 801090a:	d102      	bne.n	8010912 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801090c:	f003 fd4c 	bl	80143a8 <tcp_trigger_input_pcb_close>
 8010910:	e002      	b.n	8010918 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f7ff fed6 	bl	80106c4 <tcp_free>
      }
      return ERR_OK;
 8010918:	2300      	movs	r3, #0
 801091a:	e04d      	b.n	80109b8 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	7d1b      	ldrb	r3, [r3, #20]
 8010920:	2b01      	cmp	r3, #1
 8010922:	d02d      	beq.n	8010980 <tcp_close_shutdown+0x158>
 8010924:	2b02      	cmp	r3, #2
 8010926:	d036      	beq.n	8010996 <tcp_close_shutdown+0x16e>
 8010928:	2b00      	cmp	r3, #0
 801092a:	d13f      	bne.n	80109ac <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	8adb      	ldrh	r3, [r3, #22]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d021      	beq.n	8010978 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010934:	4b29      	ldr	r3, [pc, #164]	; (80109dc <tcp_close_shutdown+0x1b4>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	687a      	ldr	r2, [r7, #4]
 801093a:	429a      	cmp	r2, r3
 801093c:	d105      	bne.n	801094a <tcp_close_shutdown+0x122>
 801093e:	4b27      	ldr	r3, [pc, #156]	; (80109dc <tcp_close_shutdown+0x1b4>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	68db      	ldr	r3, [r3, #12]
 8010944:	4a25      	ldr	r2, [pc, #148]	; (80109dc <tcp_close_shutdown+0x1b4>)
 8010946:	6013      	str	r3, [r2, #0]
 8010948:	e013      	b.n	8010972 <tcp_close_shutdown+0x14a>
 801094a:	4b24      	ldr	r3, [pc, #144]	; (80109dc <tcp_close_shutdown+0x1b4>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	60bb      	str	r3, [r7, #8]
 8010950:	e00c      	b.n	801096c <tcp_close_shutdown+0x144>
 8010952:	68bb      	ldr	r3, [r7, #8]
 8010954:	68db      	ldr	r3, [r3, #12]
 8010956:	687a      	ldr	r2, [r7, #4]
 8010958:	429a      	cmp	r2, r3
 801095a:	d104      	bne.n	8010966 <tcp_close_shutdown+0x13e>
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	68da      	ldr	r2, [r3, #12]
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	60da      	str	r2, [r3, #12]
 8010964:	e005      	b.n	8010972 <tcp_close_shutdown+0x14a>
 8010966:	68bb      	ldr	r3, [r7, #8]
 8010968:	68db      	ldr	r3, [r3, #12]
 801096a:	60bb      	str	r3, [r7, #8]
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d1ef      	bne.n	8010952 <tcp_close_shutdown+0x12a>
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2200      	movs	r2, #0
 8010976:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f7ff fea3 	bl	80106c4 <tcp_free>
      break;
 801097e:	e01a      	b.n	80109b6 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f7ff ff17 	bl	80107b4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010986:	6879      	ldr	r1, [r7, #4]
 8010988:	4815      	ldr	r0, [pc, #84]	; (80109e0 <tcp_close_shutdown+0x1b8>)
 801098a:	f001 f89f 	bl	8011acc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f7ff feb4 	bl	80106fc <tcp_free_listen>
      break;
 8010994:	e00f      	b.n	80109b6 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010996:	6879      	ldr	r1, [r7, #4]
 8010998:	480d      	ldr	r0, [pc, #52]	; (80109d0 <tcp_close_shutdown+0x1a8>)
 801099a:	f001 f897 	bl	8011acc <tcp_pcb_remove>
 801099e:	4b0d      	ldr	r3, [pc, #52]	; (80109d4 <tcp_close_shutdown+0x1ac>)
 80109a0:	2201      	movs	r2, #1
 80109a2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f7ff fe8d 	bl	80106c4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80109aa:	e004      	b.n	80109b6 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f000 f819 	bl	80109e4 <tcp_close_shutdown_fin>
 80109b2:	4603      	mov	r3, r0
 80109b4:	e000      	b.n	80109b8 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 80109b6:	2300      	movs	r3, #0
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	3710      	adds	r7, #16
 80109bc:	46bd      	mov	sp, r7
 80109be:	bdb0      	pop	{r4, r5, r7, pc}
 80109c0:	08021210 	.word	0x08021210
 80109c4:	080212e4 	.word	0x080212e4
 80109c8:	08021254 	.word	0x08021254
 80109cc:	08021304 	.word	0x08021304
 80109d0:	20007628 	.word	0x20007628
 80109d4:	20007624 	.word	0x20007624
 80109d8:	2000763c 	.word	0x2000763c
 80109dc:	20007634 	.word	0x20007634
 80109e0:	20007630 	.word	0x20007630

080109e4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b084      	sub	sp, #16
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d106      	bne.n	8010a00 <tcp_close_shutdown_fin+0x1c>
 80109f2:	4b2c      	ldr	r3, [pc, #176]	; (8010aa4 <tcp_close_shutdown_fin+0xc0>)
 80109f4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80109f8:	492b      	ldr	r1, [pc, #172]	; (8010aa8 <tcp_close_shutdown_fin+0xc4>)
 80109fa:	482c      	ldr	r0, [pc, #176]	; (8010aac <tcp_close_shutdown_fin+0xc8>)
 80109fc:	f00a fc3a 	bl	801b274 <iprintf>

  switch (pcb->state) {
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	7d1b      	ldrb	r3, [r3, #20]
 8010a04:	2b04      	cmp	r3, #4
 8010a06:	d010      	beq.n	8010a2a <tcp_close_shutdown_fin+0x46>
 8010a08:	2b07      	cmp	r3, #7
 8010a0a:	d01b      	beq.n	8010a44 <tcp_close_shutdown_fin+0x60>
 8010a0c:	2b03      	cmp	r3, #3
 8010a0e:	d126      	bne.n	8010a5e <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f003 fedb 	bl	80147cc <tcp_send_fin>
 8010a16:	4603      	mov	r3, r0
 8010a18:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d11f      	bne.n	8010a62 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	2205      	movs	r2, #5
 8010a26:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010a28:	e01b      	b.n	8010a62 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f003 fece 	bl	80147cc <tcp_send_fin>
 8010a30:	4603      	mov	r3, r0
 8010a32:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d114      	bne.n	8010a66 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2205      	movs	r2, #5
 8010a40:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010a42:	e010      	b.n	8010a66 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010a44:	6878      	ldr	r0, [r7, #4]
 8010a46:	f003 fec1 	bl	80147cc <tcp_send_fin>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d109      	bne.n	8010a6a <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	2209      	movs	r2, #9
 8010a5a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010a5c:	e005      	b.n	8010a6a <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010a5e:	2300      	movs	r3, #0
 8010a60:	e01c      	b.n	8010a9c <tcp_close_shutdown_fin+0xb8>
      break;
 8010a62:	bf00      	nop
 8010a64:	e002      	b.n	8010a6c <tcp_close_shutdown_fin+0x88>
      break;
 8010a66:	bf00      	nop
 8010a68:	e000      	b.n	8010a6c <tcp_close_shutdown_fin+0x88>
      break;
 8010a6a:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d103      	bne.n	8010a7c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010a74:	6878      	ldr	r0, [r7, #4]
 8010a76:	f003 ffe7 	bl	8014a48 <tcp_output>
 8010a7a:	e00d      	b.n	8010a98 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8010a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a84:	d108      	bne.n	8010a98 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	8b5b      	ldrh	r3, [r3, #26]
 8010a8a:	f043 0308 	orr.w	r3, r3, #8
 8010a8e:	b29a      	uxth	r2, r3
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010a94:	2300      	movs	r3, #0
 8010a96:	e001      	b.n	8010a9c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8010a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3710      	adds	r7, #16
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}
 8010aa4:	08021210 	.word	0x08021210
 8010aa8:	080212c0 	.word	0x080212c0
 8010aac:	08021254 	.word	0x08021254

08010ab0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b082      	sub	sp, #8
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d109      	bne.n	8010ad2 <tcp_close+0x22>
 8010abe:	4b0f      	ldr	r3, [pc, #60]	; (8010afc <tcp_close+0x4c>)
 8010ac0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8010ac4:	490e      	ldr	r1, [pc, #56]	; (8010b00 <tcp_close+0x50>)
 8010ac6:	480f      	ldr	r0, [pc, #60]	; (8010b04 <tcp_close+0x54>)
 8010ac8:	f00a fbd4 	bl	801b274 <iprintf>
 8010acc:	f06f 030f 	mvn.w	r3, #15
 8010ad0:	e00f      	b.n	8010af2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	7d1b      	ldrb	r3, [r3, #20]
 8010ad6:	2b01      	cmp	r3, #1
 8010ad8:	d006      	beq.n	8010ae8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	8b5b      	ldrh	r3, [r3, #26]
 8010ade:	f043 0310 	orr.w	r3, r3, #16
 8010ae2:	b29a      	uxth	r2, r3
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010ae8:	2101      	movs	r1, #1
 8010aea:	6878      	ldr	r0, [r7, #4]
 8010aec:	f7ff fe9c 	bl	8010828 <tcp_close_shutdown>
 8010af0:	4603      	mov	r3, r0
}
 8010af2:	4618      	mov	r0, r3
 8010af4:	3708      	adds	r7, #8
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}
 8010afa:	bf00      	nop
 8010afc:	08021210 	.word	0x08021210
 8010b00:	08021320 	.word	0x08021320
 8010b04:	08021254 	.word	0x08021254

08010b08 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b08e      	sub	sp, #56	; 0x38
 8010b0c:	af04      	add	r7, sp, #16
 8010b0e:	6078      	str	r0, [r7, #4]
 8010b10:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d107      	bne.n	8010b28 <tcp_abandon+0x20>
 8010b18:	4b52      	ldr	r3, [pc, #328]	; (8010c64 <tcp_abandon+0x15c>)
 8010b1a:	f240 223d 	movw	r2, #573	; 0x23d
 8010b1e:	4952      	ldr	r1, [pc, #328]	; (8010c68 <tcp_abandon+0x160>)
 8010b20:	4852      	ldr	r0, [pc, #328]	; (8010c6c <tcp_abandon+0x164>)
 8010b22:	f00a fba7 	bl	801b274 <iprintf>
 8010b26:	e099      	b.n	8010c5c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	7d1b      	ldrb	r3, [r3, #20]
 8010b2c:	2b01      	cmp	r3, #1
 8010b2e:	d106      	bne.n	8010b3e <tcp_abandon+0x36>
 8010b30:	4b4c      	ldr	r3, [pc, #304]	; (8010c64 <tcp_abandon+0x15c>)
 8010b32:	f240 2241 	movw	r2, #577	; 0x241
 8010b36:	494e      	ldr	r1, [pc, #312]	; (8010c70 <tcp_abandon+0x168>)
 8010b38:	484c      	ldr	r0, [pc, #304]	; (8010c6c <tcp_abandon+0x164>)
 8010b3a:	f00a fb9b 	bl	801b274 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	7d1b      	ldrb	r3, [r3, #20]
 8010b42:	2b0a      	cmp	r3, #10
 8010b44:	d107      	bne.n	8010b56 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010b46:	6879      	ldr	r1, [r7, #4]
 8010b48:	484a      	ldr	r0, [pc, #296]	; (8010c74 <tcp_abandon+0x16c>)
 8010b4a:	f000 ffbf 	bl	8011acc <tcp_pcb_remove>
    tcp_free(pcb);
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f7ff fdb8 	bl	80106c4 <tcp_free>
 8010b54:	e082      	b.n	8010c5c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010b56:	2300      	movs	r3, #0
 8010b58:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b62:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b68:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b70:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	691b      	ldr	r3, [r3, #16]
 8010b76:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	7d1b      	ldrb	r3, [r3, #20]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d126      	bne.n	8010bce <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	8adb      	ldrh	r3, [r3, #22]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d02e      	beq.n	8010be6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010b88:	4b3b      	ldr	r3, [pc, #236]	; (8010c78 <tcp_abandon+0x170>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	687a      	ldr	r2, [r7, #4]
 8010b8e:	429a      	cmp	r2, r3
 8010b90:	d105      	bne.n	8010b9e <tcp_abandon+0x96>
 8010b92:	4b39      	ldr	r3, [pc, #228]	; (8010c78 <tcp_abandon+0x170>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	68db      	ldr	r3, [r3, #12]
 8010b98:	4a37      	ldr	r2, [pc, #220]	; (8010c78 <tcp_abandon+0x170>)
 8010b9a:	6013      	str	r3, [r2, #0]
 8010b9c:	e013      	b.n	8010bc6 <tcp_abandon+0xbe>
 8010b9e:	4b36      	ldr	r3, [pc, #216]	; (8010c78 <tcp_abandon+0x170>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	61fb      	str	r3, [r7, #28]
 8010ba4:	e00c      	b.n	8010bc0 <tcp_abandon+0xb8>
 8010ba6:	69fb      	ldr	r3, [r7, #28]
 8010ba8:	68db      	ldr	r3, [r3, #12]
 8010baa:	687a      	ldr	r2, [r7, #4]
 8010bac:	429a      	cmp	r2, r3
 8010bae:	d104      	bne.n	8010bba <tcp_abandon+0xb2>
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	68da      	ldr	r2, [r3, #12]
 8010bb4:	69fb      	ldr	r3, [r7, #28]
 8010bb6:	60da      	str	r2, [r3, #12]
 8010bb8:	e005      	b.n	8010bc6 <tcp_abandon+0xbe>
 8010bba:	69fb      	ldr	r3, [r7, #28]
 8010bbc:	68db      	ldr	r3, [r3, #12]
 8010bbe:	61fb      	str	r3, [r7, #28]
 8010bc0:	69fb      	ldr	r3, [r7, #28]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d1ef      	bne.n	8010ba6 <tcp_abandon+0x9e>
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2200      	movs	r2, #0
 8010bca:	60da      	str	r2, [r3, #12]
 8010bcc:	e00b      	b.n	8010be6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	8adb      	ldrh	r3, [r3, #22]
 8010bd6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010bd8:	6879      	ldr	r1, [r7, #4]
 8010bda:	4828      	ldr	r0, [pc, #160]	; (8010c7c <tcp_abandon+0x174>)
 8010bdc:	f000 ff76 	bl	8011acc <tcp_pcb_remove>
 8010be0:	4b27      	ldr	r3, [pc, #156]	; (8010c80 <tcp_abandon+0x178>)
 8010be2:	2201      	movs	r2, #1
 8010be4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d004      	beq.n	8010bf8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f000 fd1a 	bl	801162c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d004      	beq.n	8010c0a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c04:	4618      	mov	r0, r3
 8010c06:	f000 fd11 	bl	801162c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d004      	beq.n	8010c1c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c16:	4618      	mov	r0, r3
 8010c18:	f000 fd08 	bl	801162c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d00e      	beq.n	8010c40 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010c22:	6879      	ldr	r1, [r7, #4]
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	3304      	adds	r3, #4
 8010c28:	687a      	ldr	r2, [r7, #4]
 8010c2a:	8b12      	ldrh	r2, [r2, #24]
 8010c2c:	9202      	str	r2, [sp, #8]
 8010c2e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010c30:	9201      	str	r2, [sp, #4]
 8010c32:	9300      	str	r3, [sp, #0]
 8010c34:	460b      	mov	r3, r1
 8010c36:	697a      	ldr	r2, [r7, #20]
 8010c38:	69b9      	ldr	r1, [r7, #24]
 8010c3a:	6878      	ldr	r0, [r7, #4]
 8010c3c:	f004 fcc8 	bl	80155d0 <tcp_rst>
    }
    last_state = pcb->state;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	7d1b      	ldrb	r3, [r3, #20]
 8010c44:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f7ff fd3c 	bl	80106c4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010c4c:	693b      	ldr	r3, [r7, #16]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d004      	beq.n	8010c5c <tcp_abandon+0x154>
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	f06f 010c 	mvn.w	r1, #12
 8010c58:	68f8      	ldr	r0, [r7, #12]
 8010c5a:	4798      	blx	r3
  }
}
 8010c5c:	3728      	adds	r7, #40	; 0x28
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}
 8010c62:	bf00      	nop
 8010c64:	08021210 	.word	0x08021210
 8010c68:	08021354 	.word	0x08021354
 8010c6c:	08021254 	.word	0x08021254
 8010c70:	08021370 	.word	0x08021370
 8010c74:	20007638 	.word	0x20007638
 8010c78:	20007634 	.word	0x20007634
 8010c7c:	20007628 	.word	0x20007628
 8010c80:	20007624 	.word	0x20007624

08010c84 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b082      	sub	sp, #8
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010c8c:	2101      	movs	r1, #1
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f7ff ff3a 	bl	8010b08 <tcp_abandon>
}
 8010c94:	bf00      	nop
 8010c96:	3708      	adds	r7, #8
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}

08010c9c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b084      	sub	sp, #16
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d106      	bne.n	8010cb8 <tcp_update_rcv_ann_wnd+0x1c>
 8010caa:	4b25      	ldr	r3, [pc, #148]	; (8010d40 <tcp_update_rcv_ann_wnd+0xa4>)
 8010cac:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010cb0:	4924      	ldr	r1, [pc, #144]	; (8010d44 <tcp_update_rcv_ann_wnd+0xa8>)
 8010cb2:	4825      	ldr	r0, [pc, #148]	; (8010d48 <tcp_update_rcv_ann_wnd+0xac>)
 8010cb4:	f00a fade 	bl	801b274 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cbc:	687a      	ldr	r2, [r7, #4]
 8010cbe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010cc0:	4413      	add	r3, r2
 8010cc2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cc8:	687a      	ldr	r2, [r7, #4]
 8010cca:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010ccc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8010cd0:	bf28      	it	cs
 8010cd2:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 8010cd6:	b292      	uxth	r2, r2
 8010cd8:	4413      	add	r3, r2
 8010cda:	68fa      	ldr	r2, [r7, #12]
 8010cdc:	1ad3      	subs	r3, r2, r3
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	db08      	blt.n	8010cf4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cee:	68fa      	ldr	r2, [r7, #12]
 8010cf0:	1ad3      	subs	r3, r2, r3
 8010cf2:	e020      	b.n	8010d36 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cfc:	1ad3      	subs	r3, r2, r3
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	dd03      	ble.n	8010d0a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2200      	movs	r2, #0
 8010d06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010d08:	e014      	b.n	8010d34 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d12:	1ad3      	subs	r3, r2, r3
 8010d14:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d1c:	d306      	bcc.n	8010d2c <tcp_update_rcv_ann_wnd+0x90>
 8010d1e:	4b08      	ldr	r3, [pc, #32]	; (8010d40 <tcp_update_rcv_ann_wnd+0xa4>)
 8010d20:	f240 32b6 	movw	r2, #950	; 0x3b6
 8010d24:	4909      	ldr	r1, [pc, #36]	; (8010d4c <tcp_update_rcv_ann_wnd+0xb0>)
 8010d26:	4808      	ldr	r0, [pc, #32]	; (8010d48 <tcp_update_rcv_ann_wnd+0xac>)
 8010d28:	f00a faa4 	bl	801b274 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8010d2c:	68bb      	ldr	r3, [r7, #8]
 8010d2e:	b29a      	uxth	r2, r3
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010d34:	2300      	movs	r3, #0
  }
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	3710      	adds	r7, #16
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	08021210 	.word	0x08021210
 8010d44:	0802146c 	.word	0x0802146c
 8010d48:	08021254 	.word	0x08021254
 8010d4c:	08021490 	.word	0x08021490

08010d50 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b084      	sub	sp, #16
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	460b      	mov	r3, r1
 8010d5a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d107      	bne.n	8010d72 <tcp_recved+0x22>
 8010d62:	4b1f      	ldr	r3, [pc, #124]	; (8010de0 <tcp_recved+0x90>)
 8010d64:	f240 32cf 	movw	r2, #975	; 0x3cf
 8010d68:	491e      	ldr	r1, [pc, #120]	; (8010de4 <tcp_recved+0x94>)
 8010d6a:	481f      	ldr	r0, [pc, #124]	; (8010de8 <tcp_recved+0x98>)
 8010d6c:	f00a fa82 	bl	801b274 <iprintf>
 8010d70:	e032      	b.n	8010dd8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	7d1b      	ldrb	r3, [r3, #20]
 8010d76:	2b01      	cmp	r3, #1
 8010d78:	d106      	bne.n	8010d88 <tcp_recved+0x38>
 8010d7a:	4b19      	ldr	r3, [pc, #100]	; (8010de0 <tcp_recved+0x90>)
 8010d7c:	f240 32d3 	movw	r2, #979	; 0x3d3
 8010d80:	491a      	ldr	r1, [pc, #104]	; (8010dec <tcp_recved+0x9c>)
 8010d82:	4819      	ldr	r0, [pc, #100]	; (8010de8 <tcp_recved+0x98>)
 8010d84:	f00a fa76 	bl	801b274 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010d8c:	887b      	ldrh	r3, [r7, #2]
 8010d8e:	4413      	add	r3, r2
 8010d90:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010d92:	89fb      	ldrh	r3, [r7, #14]
 8010d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010d98:	d804      	bhi.n	8010da4 <tcp_recved+0x54>
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d9e:	89fa      	ldrh	r2, [r7, #14]
 8010da0:	429a      	cmp	r2, r3
 8010da2:	d204      	bcs.n	8010dae <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010daa:	851a      	strh	r2, [r3, #40]	; 0x28
 8010dac:	e002      	b.n	8010db4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	89fa      	ldrh	r2, [r7, #14]
 8010db2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f7ff ff71 	bl	8010c9c <tcp_update_rcv_ann_wnd>
 8010dba:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010dc2:	d309      	bcc.n	8010dd8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	8b5b      	ldrh	r3, [r3, #26]
 8010dc8:	f043 0302 	orr.w	r3, r3, #2
 8010dcc:	b29a      	uxth	r2, r3
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010dd2:	6878      	ldr	r0, [r7, #4]
 8010dd4:	f003 fe38 	bl	8014a48 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010dd8:	3710      	adds	r7, #16
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	08021210 	.word	0x08021210
 8010de4:	080214ac 	.word	0x080214ac
 8010de8:	08021254 	.word	0x08021254
 8010dec:	080214c4 	.word	0x080214c4

08010df0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010df0:	b5b0      	push	{r4, r5, r7, lr}
 8010df2:	b090      	sub	sp, #64	; 0x40
 8010df4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010df6:	2300      	movs	r3, #0
 8010df8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8010dfc:	4b94      	ldr	r3, [pc, #592]	; (8011050 <tcp_slowtmr+0x260>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	3301      	adds	r3, #1
 8010e02:	4a93      	ldr	r2, [pc, #588]	; (8011050 <tcp_slowtmr+0x260>)
 8010e04:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010e06:	4b93      	ldr	r3, [pc, #588]	; (8011054 <tcp_slowtmr+0x264>)
 8010e08:	781b      	ldrb	r3, [r3, #0]
 8010e0a:	3301      	adds	r3, #1
 8010e0c:	b2da      	uxtb	r2, r3
 8010e0e:	4b91      	ldr	r3, [pc, #580]	; (8011054 <tcp_slowtmr+0x264>)
 8010e10:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8010e12:	2300      	movs	r3, #0
 8010e14:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8010e16:	4b90      	ldr	r3, [pc, #576]	; (8011058 <tcp_slowtmr+0x268>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8010e1c:	e29f      	b.n	801135e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e20:	7d1b      	ldrb	r3, [r3, #20]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d106      	bne.n	8010e34 <tcp_slowtmr+0x44>
 8010e26:	4b8d      	ldr	r3, [pc, #564]	; (801105c <tcp_slowtmr+0x26c>)
 8010e28:	f240 42be 	movw	r2, #1214	; 0x4be
 8010e2c:	498c      	ldr	r1, [pc, #560]	; (8011060 <tcp_slowtmr+0x270>)
 8010e2e:	488d      	ldr	r0, [pc, #564]	; (8011064 <tcp_slowtmr+0x274>)
 8010e30:	f00a fa20 	bl	801b274 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e36:	7d1b      	ldrb	r3, [r3, #20]
 8010e38:	2b01      	cmp	r3, #1
 8010e3a:	d106      	bne.n	8010e4a <tcp_slowtmr+0x5a>
 8010e3c:	4b87      	ldr	r3, [pc, #540]	; (801105c <tcp_slowtmr+0x26c>)
 8010e3e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8010e42:	4989      	ldr	r1, [pc, #548]	; (8011068 <tcp_slowtmr+0x278>)
 8010e44:	4887      	ldr	r0, [pc, #540]	; (8011064 <tcp_slowtmr+0x274>)
 8010e46:	f00a fa15 	bl	801b274 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e4c:	7d1b      	ldrb	r3, [r3, #20]
 8010e4e:	2b0a      	cmp	r3, #10
 8010e50:	d106      	bne.n	8010e60 <tcp_slowtmr+0x70>
 8010e52:	4b82      	ldr	r3, [pc, #520]	; (801105c <tcp_slowtmr+0x26c>)
 8010e54:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8010e58:	4984      	ldr	r1, [pc, #528]	; (801106c <tcp_slowtmr+0x27c>)
 8010e5a:	4882      	ldr	r0, [pc, #520]	; (8011064 <tcp_slowtmr+0x274>)
 8010e5c:	f00a fa0a 	bl	801b274 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e62:	7f9a      	ldrb	r2, [r3, #30]
 8010e64:	4b7b      	ldr	r3, [pc, #492]	; (8011054 <tcp_slowtmr+0x264>)
 8010e66:	781b      	ldrb	r3, [r3, #0]
 8010e68:	429a      	cmp	r2, r3
 8010e6a:	d105      	bne.n	8010e78 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8010e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e6e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e72:	68db      	ldr	r3, [r3, #12]
 8010e74:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8010e76:	e272      	b.n	801135e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010e78:	4b76      	ldr	r3, [pc, #472]	; (8011054 <tcp_slowtmr+0x264>)
 8010e7a:	781a      	ldrb	r2, [r3, #0]
 8010e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e7e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8010e80:	2300      	movs	r3, #0
 8010e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8010e86:	2300      	movs	r3, #0
 8010e88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e8e:	7d1b      	ldrb	r3, [r3, #20]
 8010e90:	2b02      	cmp	r3, #2
 8010e92:	d10a      	bne.n	8010eaa <tcp_slowtmr+0xba>
 8010e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010e9a:	2b05      	cmp	r3, #5
 8010e9c:	d905      	bls.n	8010eaa <tcp_slowtmr+0xba>
      ++pcb_remove;
 8010e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ea2:	3301      	adds	r3, #1
 8010ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010ea8:	e11e      	b.n	80110e8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8010eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010eb0:	2b0b      	cmp	r3, #11
 8010eb2:	d905      	bls.n	8010ec0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8010eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010eb8:	3301      	adds	r3, #1
 8010eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010ebe:	e113      	b.n	80110e8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ec2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d075      	beq.n	8010fb6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8010eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d006      	beq.n	8010ee0 <tcp_slowtmr+0xf0>
 8010ed2:	4b62      	ldr	r3, [pc, #392]	; (801105c <tcp_slowtmr+0x26c>)
 8010ed4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8010ed8:	4965      	ldr	r1, [pc, #404]	; (8011070 <tcp_slowtmr+0x280>)
 8010eda:	4862      	ldr	r0, [pc, #392]	; (8011064 <tcp_slowtmr+0x274>)
 8010edc:	f00a f9ca 	bl	801b274 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d106      	bne.n	8010ef6 <tcp_slowtmr+0x106>
 8010ee8:	4b5c      	ldr	r3, [pc, #368]	; (801105c <tcp_slowtmr+0x26c>)
 8010eea:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8010eee:	4961      	ldr	r1, [pc, #388]	; (8011074 <tcp_slowtmr+0x284>)
 8010ef0:	485c      	ldr	r0, [pc, #368]	; (8011064 <tcp_slowtmr+0x274>)
 8010ef2:	f00a f9bf 	bl	801b274 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8010ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ef8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010efc:	2b0b      	cmp	r3, #11
 8010efe:	d905      	bls.n	8010f0c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8010f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f04:	3301      	adds	r3, #1
 8010f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010f0a:	e0ed      	b.n	80110e8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8010f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f0e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010f12:	3b01      	subs	r3, #1
 8010f14:	4a58      	ldr	r2, [pc, #352]	; (8011078 <tcp_slowtmr+0x288>)
 8010f16:	5cd3      	ldrb	r3, [r2, r3]
 8010f18:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8010f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f1c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010f20:	7c7a      	ldrb	r2, [r7, #17]
 8010f22:	429a      	cmp	r2, r3
 8010f24:	d907      	bls.n	8010f36 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8010f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010f2c:	3301      	adds	r3, #1
 8010f2e:	b2da      	uxtb	r2, r3
 8010f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f32:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8010f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f38:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010f3c:	7c7a      	ldrb	r2, [r7, #17]
 8010f3e:	429a      	cmp	r2, r3
 8010f40:	f200 80d2 	bhi.w	80110e8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8010f44:	2301      	movs	r3, #1
 8010f46:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8010f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d108      	bne.n	8010f64 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010f52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f54:	f004 fc2e 	bl	80157b4 <tcp_zero_window_probe>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d014      	beq.n	8010f88 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8010f5e:	2300      	movs	r3, #0
 8010f60:	623b      	str	r3, [r7, #32]
 8010f62:	e011      	b.n	8010f88 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010f6a:	4619      	mov	r1, r3
 8010f6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f6e:	f003 fae5 	bl	801453c <tcp_split_unsent_seg>
 8010f72:	4603      	mov	r3, r0
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d107      	bne.n	8010f88 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8010f78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f7a:	f003 fd65 	bl	8014a48 <tcp_output>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d101      	bne.n	8010f88 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8010f84:	2300      	movs	r3, #0
 8010f86:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8010f88:	6a3b      	ldr	r3, [r7, #32]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	f000 80ac 	beq.w	80110e8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8010f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f92:	2200      	movs	r2, #0
 8010f94:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f9a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010f9e:	2b06      	cmp	r3, #6
 8010fa0:	f200 80a2 	bhi.w	80110e8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8010fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010faa:	3301      	adds	r3, #1
 8010fac:	b2da      	uxtb	r2, r3
 8010fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8010fb4:	e098      	b.n	80110e8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8010fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	db0f      	blt.n	8010fe0 <tcp_slowtmr+0x1f0>
 8010fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fc2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010fc6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010fca:	4293      	cmp	r3, r2
 8010fcc:	d008      	beq.n	8010fe0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8010fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010fd4:	b29b      	uxth	r3, r3
 8010fd6:	3301      	adds	r3, #1
 8010fd8:	b29b      	uxth	r3, r3
 8010fda:	b21a      	sxth	r2, r3
 8010fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fde:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8010fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8010fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010fec:	429a      	cmp	r2, r3
 8010fee:	db7b      	blt.n	80110e8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010ff0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ff2:	f004 f821 	bl	8015038 <tcp_rexmit_rto_prepare>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d007      	beq.n	801100c <tcp_slowtmr+0x21c>
 8010ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011000:	2b00      	cmp	r3, #0
 8011002:	d171      	bne.n	80110e8 <tcp_slowtmr+0x2f8>
 8011004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011008:	2b00      	cmp	r3, #0
 801100a:	d06d      	beq.n	80110e8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801100c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801100e:	7d1b      	ldrb	r3, [r3, #20]
 8011010:	2b02      	cmp	r3, #2
 8011012:	d03a      	beq.n	801108a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011016:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801101a:	2b0c      	cmp	r3, #12
 801101c:	bf28      	it	cs
 801101e:	230c      	movcs	r3, #12
 8011020:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011024:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011028:	10db      	asrs	r3, r3, #3
 801102a:	b21b      	sxth	r3, r3
 801102c:	461a      	mov	r2, r3
 801102e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011030:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011034:	4413      	add	r3, r2
 8011036:	7efa      	ldrb	r2, [r7, #27]
 8011038:	4910      	ldr	r1, [pc, #64]	; (801107c <tcp_slowtmr+0x28c>)
 801103a:	5c8a      	ldrb	r2, [r1, r2]
 801103c:	4093      	lsls	r3, r2
 801103e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011040:	697b      	ldr	r3, [r7, #20]
 8011042:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011046:	4293      	cmp	r3, r2
 8011048:	dc1a      	bgt.n	8011080 <tcp_slowtmr+0x290>
 801104a:	697b      	ldr	r3, [r7, #20]
 801104c:	b21a      	sxth	r2, r3
 801104e:	e019      	b.n	8011084 <tcp_slowtmr+0x294>
 8011050:	2000762c 	.word	0x2000762c
 8011054:	200004d6 	.word	0x200004d6
 8011058:	20007628 	.word	0x20007628
 801105c:	08021210 	.word	0x08021210
 8011060:	08021554 	.word	0x08021554
 8011064:	08021254 	.word	0x08021254
 8011068:	08021580 	.word	0x08021580
 801106c:	080215ac 	.word	0x080215ac
 8011070:	080215dc 	.word	0x080215dc
 8011074:	08021610 	.word	0x08021610
 8011078:	08023adc 	.word	0x08023adc
 801107c:	08023acc 	.word	0x08023acc
 8011080:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011086:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801108a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801108c:	2200      	movs	r2, #0
 801108e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011092:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011098:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801109c:	4293      	cmp	r3, r2
 801109e:	bf28      	it	cs
 80110a0:	4613      	movcs	r3, r2
 80110a2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80110a4:	8a7b      	ldrh	r3, [r7, #18]
 80110a6:	085b      	lsrs	r3, r3, #1
 80110a8:	b29a      	uxth	r2, r3
 80110aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80110b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80110b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80110ba:	005b      	lsls	r3, r3, #1
 80110bc:	b29b      	uxth	r3, r3
 80110be:	429a      	cmp	r2, r3
 80110c0:	d206      	bcs.n	80110d0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80110c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80110c6:	005b      	lsls	r3, r3, #1
 80110c8:	b29a      	uxth	r2, r3
 80110ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80110d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80110d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80110da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110dc:	2200      	movs	r2, #0
 80110de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80110e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110e4:	f004 f818 	bl	8015118 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80110e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ea:	7d1b      	ldrb	r3, [r3, #20]
 80110ec:	2b06      	cmp	r3, #6
 80110ee:	d111      	bne.n	8011114 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80110f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f2:	8b5b      	ldrh	r3, [r3, #26]
 80110f4:	f003 0310 	and.w	r3, r3, #16
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d00b      	beq.n	8011114 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80110fc:	4b9d      	ldr	r3, [pc, #628]	; (8011374 <tcp_slowtmr+0x584>)
 80110fe:	681a      	ldr	r2, [r3, #0]
 8011100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011102:	6a1b      	ldr	r3, [r3, #32]
 8011104:	1ad3      	subs	r3, r2, r3
 8011106:	2b28      	cmp	r3, #40	; 0x28
 8011108:	d904      	bls.n	8011114 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801110a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801110e:	3301      	adds	r3, #1
 8011110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011116:	7a5b      	ldrb	r3, [r3, #9]
 8011118:	f003 0308 	and.w	r3, r3, #8
 801111c:	2b00      	cmp	r3, #0
 801111e:	d04c      	beq.n	80111ba <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8011120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011122:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011124:	2b04      	cmp	r3, #4
 8011126:	d003      	beq.n	8011130 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801112a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801112c:	2b07      	cmp	r3, #7
 801112e:	d144      	bne.n	80111ba <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011130:	4b90      	ldr	r3, [pc, #576]	; (8011374 <tcp_slowtmr+0x584>)
 8011132:	681a      	ldr	r2, [r3, #0]
 8011134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011136:	6a1b      	ldr	r3, [r3, #32]
 8011138:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801113a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801113c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011140:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8011144:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8011148:	498b      	ldr	r1, [pc, #556]	; (8011378 <tcp_slowtmr+0x588>)
 801114a:	fba1 1303 	umull	r1, r3, r1, r3
 801114e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011150:	429a      	cmp	r2, r3
 8011152:	d90a      	bls.n	801116a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011158:	3301      	adds	r3, #1
 801115a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801115e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011162:	3301      	adds	r3, #1
 8011164:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011168:	e027      	b.n	80111ba <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801116a:	4b82      	ldr	r3, [pc, #520]	; (8011374 <tcp_slowtmr+0x584>)
 801116c:	681a      	ldr	r2, [r3, #0]
 801116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011170:	6a1b      	ldr	r3, [r3, #32]
 8011172:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011176:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801117a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801117c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011180:	4618      	mov	r0, r3
 8011182:	4b7e      	ldr	r3, [pc, #504]	; (801137c <tcp_slowtmr+0x58c>)
 8011184:	fb03 f300 	mul.w	r3, r3, r0
 8011188:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801118a:	497b      	ldr	r1, [pc, #492]	; (8011378 <tcp_slowtmr+0x588>)
 801118c:	fba1 1303 	umull	r1, r3, r1, r3
 8011190:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011192:	429a      	cmp	r2, r3
 8011194:	d911      	bls.n	80111ba <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8011196:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011198:	f004 facc 	bl	8015734 <tcp_keepalive>
 801119c:	4603      	mov	r3, r0
 801119e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80111a2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d107      	bne.n	80111ba <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80111aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ac:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80111b0:	3301      	adds	r3, #1
 80111b2:	b2da      	uxtb	r2, r3
 80111b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80111ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d011      	beq.n	80111e6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80111c2:	4b6c      	ldr	r3, [pc, #432]	; (8011374 <tcp_slowtmr+0x584>)
 80111c4:	681a      	ldr	r2, [r3, #0]
 80111c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c8:	6a1b      	ldr	r3, [r3, #32]
 80111ca:	1ad2      	subs	r2, r2, r3
 80111cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ce:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80111d2:	4619      	mov	r1, r3
 80111d4:	460b      	mov	r3, r1
 80111d6:	005b      	lsls	r3, r3, #1
 80111d8:	440b      	add	r3, r1
 80111da:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80111dc:	429a      	cmp	r2, r3
 80111de:	d302      	bcc.n	80111e6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80111e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111e2:	f000 fdd7 	bl	8011d94 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80111e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e8:	7d1b      	ldrb	r3, [r3, #20]
 80111ea:	2b03      	cmp	r3, #3
 80111ec:	d10b      	bne.n	8011206 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80111ee:	4b61      	ldr	r3, [pc, #388]	; (8011374 <tcp_slowtmr+0x584>)
 80111f0:	681a      	ldr	r2, [r3, #0]
 80111f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f4:	6a1b      	ldr	r3, [r3, #32]
 80111f6:	1ad3      	subs	r3, r2, r3
 80111f8:	2b28      	cmp	r3, #40	; 0x28
 80111fa:	d904      	bls.n	8011206 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80111fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011200:	3301      	adds	r3, #1
 8011202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011208:	7d1b      	ldrb	r3, [r3, #20]
 801120a:	2b09      	cmp	r3, #9
 801120c:	d10b      	bne.n	8011226 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801120e:	4b59      	ldr	r3, [pc, #356]	; (8011374 <tcp_slowtmr+0x584>)
 8011210:	681a      	ldr	r2, [r3, #0]
 8011212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011214:	6a1b      	ldr	r3, [r3, #32]
 8011216:	1ad3      	subs	r3, r2, r3
 8011218:	2bf0      	cmp	r3, #240	; 0xf0
 801121a:	d904      	bls.n	8011226 <tcp_slowtmr+0x436>
        ++pcb_remove;
 801121c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011220:	3301      	adds	r3, #1
 8011222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801122a:	2b00      	cmp	r3, #0
 801122c:	d060      	beq.n	80112f0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801122e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011234:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011236:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011238:	f000 fbf8 	bl	8011a2c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801123c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801123e:	2b00      	cmp	r3, #0
 8011240:	d010      	beq.n	8011264 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011242:	4b4f      	ldr	r3, [pc, #316]	; (8011380 <tcp_slowtmr+0x590>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011248:	429a      	cmp	r2, r3
 801124a:	d106      	bne.n	801125a <tcp_slowtmr+0x46a>
 801124c:	4b4d      	ldr	r3, [pc, #308]	; (8011384 <tcp_slowtmr+0x594>)
 801124e:	f240 526d 	movw	r2, #1389	; 0x56d
 8011252:	494d      	ldr	r1, [pc, #308]	; (8011388 <tcp_slowtmr+0x598>)
 8011254:	484d      	ldr	r0, [pc, #308]	; (801138c <tcp_slowtmr+0x59c>)
 8011256:	f00a f80d 	bl	801b274 <iprintf>
        prev->next = pcb->next;
 801125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801125c:	68da      	ldr	r2, [r3, #12]
 801125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011260:	60da      	str	r2, [r3, #12]
 8011262:	e00f      	b.n	8011284 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011264:	4b46      	ldr	r3, [pc, #280]	; (8011380 <tcp_slowtmr+0x590>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801126a:	429a      	cmp	r2, r3
 801126c:	d006      	beq.n	801127c <tcp_slowtmr+0x48c>
 801126e:	4b45      	ldr	r3, [pc, #276]	; (8011384 <tcp_slowtmr+0x594>)
 8011270:	f240 5271 	movw	r2, #1393	; 0x571
 8011274:	4946      	ldr	r1, [pc, #280]	; (8011390 <tcp_slowtmr+0x5a0>)
 8011276:	4845      	ldr	r0, [pc, #276]	; (801138c <tcp_slowtmr+0x59c>)
 8011278:	f009 fffc 	bl	801b274 <iprintf>
        tcp_active_pcbs = pcb->next;
 801127c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801127e:	68db      	ldr	r3, [r3, #12]
 8011280:	4a3f      	ldr	r2, [pc, #252]	; (8011380 <tcp_slowtmr+0x590>)
 8011282:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011284:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011288:	2b00      	cmp	r3, #0
 801128a:	d013      	beq.n	80112b4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801128c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801128e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011292:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011294:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8011296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011298:	3304      	adds	r3, #4
 801129a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801129c:	8ad2      	ldrh	r2, [r2, #22]
 801129e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80112a0:	8b09      	ldrh	r1, [r1, #24]
 80112a2:	9102      	str	r1, [sp, #8]
 80112a4:	9201      	str	r2, [sp, #4]
 80112a6:	9300      	str	r3, [sp, #0]
 80112a8:	462b      	mov	r3, r5
 80112aa:	4622      	mov	r2, r4
 80112ac:	4601      	mov	r1, r0
 80112ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112b0:	f004 f98e 	bl	80155d0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80112b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b6:	691b      	ldr	r3, [r3, #16]
 80112b8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80112ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112bc:	7d1b      	ldrb	r3, [r3, #20]
 80112be:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80112c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80112c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c6:	68db      	ldr	r3, [r3, #12]
 80112c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80112ca:	6838      	ldr	r0, [r7, #0]
 80112cc:	f7ff f9fa 	bl	80106c4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80112d0:	4b30      	ldr	r3, [pc, #192]	; (8011394 <tcp_slowtmr+0x5a4>)
 80112d2:	2200      	movs	r2, #0
 80112d4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d004      	beq.n	80112e6 <tcp_slowtmr+0x4f6>
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	f06f 010c 	mvn.w	r1, #12
 80112e2:	68b8      	ldr	r0, [r7, #8]
 80112e4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80112e6:	4b2b      	ldr	r3, [pc, #172]	; (8011394 <tcp_slowtmr+0x5a4>)
 80112e8:	781b      	ldrb	r3, [r3, #0]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d037      	beq.n	801135e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80112ee:	e590      	b.n	8010e12 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80112f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80112f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f6:	68db      	ldr	r3, [r3, #12]
 80112f8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80112fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112fc:	7f1b      	ldrb	r3, [r3, #28]
 80112fe:	3301      	adds	r3, #1
 8011300:	b2da      	uxtb	r2, r3
 8011302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011304:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011308:	7f1a      	ldrb	r2, [r3, #28]
 801130a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801130c:	7f5b      	ldrb	r3, [r3, #29]
 801130e:	429a      	cmp	r2, r3
 8011310:	d325      	bcc.n	801135e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8011312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011314:	2200      	movs	r2, #0
 8011316:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011318:	4b1e      	ldr	r3, [pc, #120]	; (8011394 <tcp_slowtmr+0x5a4>)
 801131a:	2200      	movs	r2, #0
 801131c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011324:	2b00      	cmp	r3, #0
 8011326:	d00b      	beq.n	8011340 <tcp_slowtmr+0x550>
 8011328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801132a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801132e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011330:	6912      	ldr	r2, [r2, #16]
 8011332:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011334:	4610      	mov	r0, r2
 8011336:	4798      	blx	r3
 8011338:	4603      	mov	r3, r0
 801133a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801133e:	e002      	b.n	8011346 <tcp_slowtmr+0x556>
 8011340:	2300      	movs	r3, #0
 8011342:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8011346:	4b13      	ldr	r3, [pc, #76]	; (8011394 <tcp_slowtmr+0x5a4>)
 8011348:	781b      	ldrb	r3, [r3, #0]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d000      	beq.n	8011350 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801134e:	e560      	b.n	8010e12 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011350:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011354:	2b00      	cmp	r3, #0
 8011356:	d102      	bne.n	801135e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8011358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801135a:	f003 fb75 	bl	8014a48 <tcp_output>
  while (pcb != NULL) {
 801135e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011360:	2b00      	cmp	r3, #0
 8011362:	f47f ad5c 	bne.w	8010e1e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011366:	2300      	movs	r3, #0
 8011368:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801136a:	4b0b      	ldr	r3, [pc, #44]	; (8011398 <tcp_slowtmr+0x5a8>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011370:	e067      	b.n	8011442 <tcp_slowtmr+0x652>
 8011372:	bf00      	nop
 8011374:	2000762c 	.word	0x2000762c
 8011378:	10624dd3 	.word	0x10624dd3
 801137c:	000124f8 	.word	0x000124f8
 8011380:	20007628 	.word	0x20007628
 8011384:	08021210 	.word	0x08021210
 8011388:	08021648 	.word	0x08021648
 801138c:	08021254 	.word	0x08021254
 8011390:	08021674 	.word	0x08021674
 8011394:	20007624 	.word	0x20007624
 8011398:	20007638 	.word	0x20007638
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801139c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801139e:	7d1b      	ldrb	r3, [r3, #20]
 80113a0:	2b0a      	cmp	r3, #10
 80113a2:	d006      	beq.n	80113b2 <tcp_slowtmr+0x5c2>
 80113a4:	4b2a      	ldr	r3, [pc, #168]	; (8011450 <tcp_slowtmr+0x660>)
 80113a6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80113aa:	492a      	ldr	r1, [pc, #168]	; (8011454 <tcp_slowtmr+0x664>)
 80113ac:	482a      	ldr	r0, [pc, #168]	; (8011458 <tcp_slowtmr+0x668>)
 80113ae:	f009 ff61 	bl	801b274 <iprintf>
    pcb_remove = 0;
 80113b2:	2300      	movs	r3, #0
 80113b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80113b8:	4b28      	ldr	r3, [pc, #160]	; (801145c <tcp_slowtmr+0x66c>)
 80113ba:	681a      	ldr	r2, [r3, #0]
 80113bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113be:	6a1b      	ldr	r3, [r3, #32]
 80113c0:	1ad3      	subs	r3, r2, r3
 80113c2:	2bf0      	cmp	r3, #240	; 0xf0
 80113c4:	d904      	bls.n	80113d0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80113c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113ca:	3301      	adds	r3, #1
 80113cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80113d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d02f      	beq.n	8011438 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80113d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80113da:	f000 fb27 	bl	8011a2c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80113de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d010      	beq.n	8011406 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80113e4:	4b1e      	ldr	r3, [pc, #120]	; (8011460 <tcp_slowtmr+0x670>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113ea:	429a      	cmp	r2, r3
 80113ec:	d106      	bne.n	80113fc <tcp_slowtmr+0x60c>
 80113ee:	4b18      	ldr	r3, [pc, #96]	; (8011450 <tcp_slowtmr+0x660>)
 80113f0:	f240 52af 	movw	r2, #1455	; 0x5af
 80113f4:	491b      	ldr	r1, [pc, #108]	; (8011464 <tcp_slowtmr+0x674>)
 80113f6:	4818      	ldr	r0, [pc, #96]	; (8011458 <tcp_slowtmr+0x668>)
 80113f8:	f009 ff3c 	bl	801b274 <iprintf>
        prev->next = pcb->next;
 80113fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113fe:	68da      	ldr	r2, [r3, #12]
 8011400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011402:	60da      	str	r2, [r3, #12]
 8011404:	e00f      	b.n	8011426 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011406:	4b16      	ldr	r3, [pc, #88]	; (8011460 <tcp_slowtmr+0x670>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801140c:	429a      	cmp	r2, r3
 801140e:	d006      	beq.n	801141e <tcp_slowtmr+0x62e>
 8011410:	4b0f      	ldr	r3, [pc, #60]	; (8011450 <tcp_slowtmr+0x660>)
 8011412:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011416:	4914      	ldr	r1, [pc, #80]	; (8011468 <tcp_slowtmr+0x678>)
 8011418:	480f      	ldr	r0, [pc, #60]	; (8011458 <tcp_slowtmr+0x668>)
 801141a:	f009 ff2b 	bl	801b274 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801141e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011420:	68db      	ldr	r3, [r3, #12]
 8011422:	4a0f      	ldr	r2, [pc, #60]	; (8011460 <tcp_slowtmr+0x670>)
 8011424:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011428:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801142a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801142c:	68db      	ldr	r3, [r3, #12]
 801142e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011430:	69f8      	ldr	r0, [r7, #28]
 8011432:	f7ff f947 	bl	80106c4 <tcp_free>
 8011436:	e004      	b.n	8011442 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801143a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801143c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801143e:	68db      	ldr	r3, [r3, #12]
 8011440:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011444:	2b00      	cmp	r3, #0
 8011446:	d1a9      	bne.n	801139c <tcp_slowtmr+0x5ac>
    }
  }
}
 8011448:	bf00      	nop
 801144a:	3730      	adds	r7, #48	; 0x30
 801144c:	46bd      	mov	sp, r7
 801144e:	bdb0      	pop	{r4, r5, r7, pc}
 8011450:	08021210 	.word	0x08021210
 8011454:	080216a0 	.word	0x080216a0
 8011458:	08021254 	.word	0x08021254
 801145c:	2000762c 	.word	0x2000762c
 8011460:	20007638 	.word	0x20007638
 8011464:	080216d0 	.word	0x080216d0
 8011468:	080216f8 	.word	0x080216f8

0801146c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b082      	sub	sp, #8
 8011470:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011472:	4b2d      	ldr	r3, [pc, #180]	; (8011528 <tcp_fasttmr+0xbc>)
 8011474:	781b      	ldrb	r3, [r3, #0]
 8011476:	3301      	adds	r3, #1
 8011478:	b2da      	uxtb	r2, r3
 801147a:	4b2b      	ldr	r3, [pc, #172]	; (8011528 <tcp_fasttmr+0xbc>)
 801147c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801147e:	4b2b      	ldr	r3, [pc, #172]	; (801152c <tcp_fasttmr+0xc0>)
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011484:	e048      	b.n	8011518 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	7f9a      	ldrb	r2, [r3, #30]
 801148a:	4b27      	ldr	r3, [pc, #156]	; (8011528 <tcp_fasttmr+0xbc>)
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	429a      	cmp	r2, r3
 8011490:	d03f      	beq.n	8011512 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011492:	4b25      	ldr	r3, [pc, #148]	; (8011528 <tcp_fasttmr+0xbc>)
 8011494:	781a      	ldrb	r2, [r3, #0]
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	8b5b      	ldrh	r3, [r3, #26]
 801149e:	f003 0301 	and.w	r3, r3, #1
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d010      	beq.n	80114c8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	8b5b      	ldrh	r3, [r3, #26]
 80114aa:	f043 0302 	orr.w	r3, r3, #2
 80114ae:	b29a      	uxth	r2, r3
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f003 fac7 	bl	8014a48 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	8b5b      	ldrh	r3, [r3, #26]
 80114be:	f023 0303 	bic.w	r3, r3, #3
 80114c2:	b29a      	uxth	r2, r3
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	8b5b      	ldrh	r3, [r3, #26]
 80114cc:	f003 0308 	and.w	r3, r3, #8
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d009      	beq.n	80114e8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	8b5b      	ldrh	r3, [r3, #26]
 80114d8:	f023 0308 	bic.w	r3, r3, #8
 80114dc:	b29a      	uxth	r2, r3
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f7ff fa7e 	bl	80109e4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	68db      	ldr	r3, [r3, #12]
 80114ec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d00a      	beq.n	801150c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80114f6:	4b0e      	ldr	r3, [pc, #56]	; (8011530 <tcp_fasttmr+0xc4>)
 80114f8:	2200      	movs	r2, #0
 80114fa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80114fc:	6878      	ldr	r0, [r7, #4]
 80114fe:	f000 f819 	bl	8011534 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011502:	4b0b      	ldr	r3, [pc, #44]	; (8011530 <tcp_fasttmr+0xc4>)
 8011504:	781b      	ldrb	r3, [r3, #0]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d000      	beq.n	801150c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801150a:	e7b8      	b.n	801147e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	607b      	str	r3, [r7, #4]
 8011510:	e002      	b.n	8011518 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	68db      	ldr	r3, [r3, #12]
 8011516:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d1b3      	bne.n	8011486 <tcp_fasttmr+0x1a>
    }
  }
}
 801151e:	bf00      	nop
 8011520:	3708      	adds	r7, #8
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}
 8011526:	bf00      	nop
 8011528:	200004d6 	.word	0x200004d6
 801152c:	20007628 	.word	0x20007628
 8011530:	20007624 	.word	0x20007624

08011534 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011534:	b590      	push	{r4, r7, lr}
 8011536:	b085      	sub	sp, #20
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d109      	bne.n	8011556 <tcp_process_refused_data+0x22>
 8011542:	4b37      	ldr	r3, [pc, #220]	; (8011620 <tcp_process_refused_data+0xec>)
 8011544:	f240 6209 	movw	r2, #1545	; 0x609
 8011548:	4936      	ldr	r1, [pc, #216]	; (8011624 <tcp_process_refused_data+0xf0>)
 801154a:	4837      	ldr	r0, [pc, #220]	; (8011628 <tcp_process_refused_data+0xf4>)
 801154c:	f009 fe92 	bl	801b274 <iprintf>
 8011550:	f06f 030f 	mvn.w	r3, #15
 8011554:	e060      	b.n	8011618 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801155a:	7b5b      	ldrb	r3, [r3, #13]
 801155c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011562:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2200      	movs	r2, #0
 8011568:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011570:	2b00      	cmp	r3, #0
 8011572:	d00b      	beq.n	801158c <tcp_process_refused_data+0x58>
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	6918      	ldr	r0, [r3, #16]
 801157e:	2300      	movs	r3, #0
 8011580:	68ba      	ldr	r2, [r7, #8]
 8011582:	6879      	ldr	r1, [r7, #4]
 8011584:	47a0      	blx	r4
 8011586:	4603      	mov	r3, r0
 8011588:	73fb      	strb	r3, [r7, #15]
 801158a:	e007      	b.n	801159c <tcp_process_refused_data+0x68>
 801158c:	2300      	movs	r3, #0
 801158e:	68ba      	ldr	r2, [r7, #8]
 8011590:	6879      	ldr	r1, [r7, #4]
 8011592:	2000      	movs	r0, #0
 8011594:	f000 f8a2 	bl	80116dc <tcp_recv_null>
 8011598:	4603      	mov	r3, r0
 801159a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801159c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d12a      	bne.n	80115fa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80115a4:	7bbb      	ldrb	r3, [r7, #14]
 80115a6:	f003 0320 	and.w	r3, r3, #32
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d033      	beq.n	8011616 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80115b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80115b6:	d005      	beq.n	80115c4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80115bc:	3301      	adds	r3, #1
 80115be:	b29a      	uxth	r2, r3
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d00b      	beq.n	80115e6 <tcp_process_refused_data+0xb2>
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	6918      	ldr	r0, [r3, #16]
 80115d8:	2300      	movs	r3, #0
 80115da:	2200      	movs	r2, #0
 80115dc:	6879      	ldr	r1, [r7, #4]
 80115de:	47a0      	blx	r4
 80115e0:	4603      	mov	r3, r0
 80115e2:	73fb      	strb	r3, [r7, #15]
 80115e4:	e001      	b.n	80115ea <tcp_process_refused_data+0xb6>
 80115e6:	2300      	movs	r3, #0
 80115e8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80115ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80115ee:	f113 0f0d 	cmn.w	r3, #13
 80115f2:	d110      	bne.n	8011616 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80115f4:	f06f 030c 	mvn.w	r3, #12
 80115f8:	e00e      	b.n	8011618 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80115fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80115fe:	f113 0f0d 	cmn.w	r3, #13
 8011602:	d102      	bne.n	801160a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011604:	f06f 030c 	mvn.w	r3, #12
 8011608:	e006      	b.n	8011618 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	68ba      	ldr	r2, [r7, #8]
 801160e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8011610:	f06f 0304 	mvn.w	r3, #4
 8011614:	e000      	b.n	8011618 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8011616:	2300      	movs	r3, #0
}
 8011618:	4618      	mov	r0, r3
 801161a:	3714      	adds	r7, #20
 801161c:	46bd      	mov	sp, r7
 801161e:	bd90      	pop	{r4, r7, pc}
 8011620:	08021210 	.word	0x08021210
 8011624:	08021720 	.word	0x08021720
 8011628:	08021254 	.word	0x08021254

0801162c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b084      	sub	sp, #16
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011634:	e007      	b.n	8011646 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	f000 f809 	bl	8011654 <tcp_seg_free>
    seg = next;
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d1f4      	bne.n	8011636 <tcp_segs_free+0xa>
  }
}
 801164c:	bf00      	nop
 801164e:	3710      	adds	r7, #16
 8011650:	46bd      	mov	sp, r7
 8011652:	bd80      	pop	{r7, pc}

08011654 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b082      	sub	sp, #8
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d00c      	beq.n	801167c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	685b      	ldr	r3, [r3, #4]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d004      	beq.n	8011674 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	685b      	ldr	r3, [r3, #4]
 801166e:	4618      	mov	r0, r3
 8011670:	f7fe fd78 	bl	8010164 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011674:	6879      	ldr	r1, [r7, #4]
 8011676:	2003      	movs	r0, #3
 8011678:	f7fd ff7e 	bl	800f578 <memp_free>
  }
}
 801167c:	bf00      	nop
 801167e:	3708      	adds	r7, #8
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}

08011684 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b084      	sub	sp, #16
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d106      	bne.n	80116a0 <tcp_seg_copy+0x1c>
 8011692:	4b0f      	ldr	r3, [pc, #60]	; (80116d0 <tcp_seg_copy+0x4c>)
 8011694:	f240 6282 	movw	r2, #1666	; 0x682
 8011698:	490e      	ldr	r1, [pc, #56]	; (80116d4 <tcp_seg_copy+0x50>)
 801169a:	480f      	ldr	r0, [pc, #60]	; (80116d8 <tcp_seg_copy+0x54>)
 801169c:	f009 fdea 	bl	801b274 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80116a0:	2003      	movs	r0, #3
 80116a2:	f7fd ff1d 	bl	800f4e0 <memp_malloc>
 80116a6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d101      	bne.n	80116b2 <tcp_seg_copy+0x2e>
    return NULL;
 80116ae:	2300      	movs	r3, #0
 80116b0:	e00a      	b.n	80116c8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80116b2:	2210      	movs	r2, #16
 80116b4:	6879      	ldr	r1, [r7, #4]
 80116b6:	68f8      	ldr	r0, [r7, #12]
 80116b8:	f009 f8ab 	bl	801a812 <memcpy>
  pbuf_ref(cseg->p);
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	685b      	ldr	r3, [r3, #4]
 80116c0:	4618      	mov	r0, r3
 80116c2:	f7fe fdef 	bl	80102a4 <pbuf_ref>
  return cseg;
 80116c6:	68fb      	ldr	r3, [r7, #12]
}
 80116c8:	4618      	mov	r0, r3
 80116ca:	3710      	adds	r7, #16
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}
 80116d0:	08021210 	.word	0x08021210
 80116d4:	08021764 	.word	0x08021764
 80116d8:	08021254 	.word	0x08021254

080116dc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b084      	sub	sp, #16
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	60f8      	str	r0, [r7, #12]
 80116e4:	60b9      	str	r1, [r7, #8]
 80116e6:	607a      	str	r2, [r7, #4]
 80116e8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d109      	bne.n	8011704 <tcp_recv_null+0x28>
 80116f0:	4b12      	ldr	r3, [pc, #72]	; (801173c <tcp_recv_null+0x60>)
 80116f2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80116f6:	4912      	ldr	r1, [pc, #72]	; (8011740 <tcp_recv_null+0x64>)
 80116f8:	4812      	ldr	r0, [pc, #72]	; (8011744 <tcp_recv_null+0x68>)
 80116fa:	f009 fdbb 	bl	801b274 <iprintf>
 80116fe:	f06f 030f 	mvn.w	r3, #15
 8011702:	e016      	b.n	8011732 <tcp_recv_null+0x56>

  if (p != NULL) {
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d009      	beq.n	801171e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	891b      	ldrh	r3, [r3, #8]
 801170e:	4619      	mov	r1, r3
 8011710:	68b8      	ldr	r0, [r7, #8]
 8011712:	f7ff fb1d 	bl	8010d50 <tcp_recved>
    pbuf_free(p);
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	f7fe fd24 	bl	8010164 <pbuf_free>
 801171c:	e008      	b.n	8011730 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801171e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d104      	bne.n	8011730 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011726:	68b8      	ldr	r0, [r7, #8]
 8011728:	f7ff f9c2 	bl	8010ab0 <tcp_close>
 801172c:	4603      	mov	r3, r0
 801172e:	e000      	b.n	8011732 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011730:	2300      	movs	r3, #0
}
 8011732:	4618      	mov	r0, r3
 8011734:	3710      	adds	r7, #16
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}
 801173a:	bf00      	nop
 801173c:	08021210 	.word	0x08021210
 8011740:	08021780 	.word	0x08021780
 8011744:	08021254 	.word	0x08021254

08011748 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b086      	sub	sp, #24
 801174c:	af00      	add	r7, sp, #0
 801174e:	4603      	mov	r3, r0
 8011750:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011756:	2b00      	cmp	r3, #0
 8011758:	db01      	blt.n	801175e <tcp_kill_prio+0x16>
 801175a:	79fb      	ldrb	r3, [r7, #7]
 801175c:	e000      	b.n	8011760 <tcp_kill_prio+0x18>
 801175e:	237f      	movs	r3, #127	; 0x7f
 8011760:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011762:	7afb      	ldrb	r3, [r7, #11]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d034      	beq.n	80117d2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011768:	7afb      	ldrb	r3, [r7, #11]
 801176a:	3b01      	subs	r3, #1
 801176c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801176e:	2300      	movs	r3, #0
 8011770:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011772:	2300      	movs	r3, #0
 8011774:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011776:	4b19      	ldr	r3, [pc, #100]	; (80117dc <tcp_kill_prio+0x94>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	617b      	str	r3, [r7, #20]
 801177c:	e01f      	b.n	80117be <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801177e:	697b      	ldr	r3, [r7, #20]
 8011780:	7d5b      	ldrb	r3, [r3, #21]
 8011782:	7afa      	ldrb	r2, [r7, #11]
 8011784:	429a      	cmp	r2, r3
 8011786:	d80c      	bhi.n	80117a2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801178c:	7afa      	ldrb	r2, [r7, #11]
 801178e:	429a      	cmp	r2, r3
 8011790:	d112      	bne.n	80117b8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011792:	4b13      	ldr	r3, [pc, #76]	; (80117e0 <tcp_kill_prio+0x98>)
 8011794:	681a      	ldr	r2, [r3, #0]
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	6a1b      	ldr	r3, [r3, #32]
 801179a:	1ad3      	subs	r3, r2, r3
 801179c:	68fa      	ldr	r2, [r7, #12]
 801179e:	429a      	cmp	r2, r3
 80117a0:	d80a      	bhi.n	80117b8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80117a2:	4b0f      	ldr	r3, [pc, #60]	; (80117e0 <tcp_kill_prio+0x98>)
 80117a4:	681a      	ldr	r2, [r3, #0]
 80117a6:	697b      	ldr	r3, [r7, #20]
 80117a8:	6a1b      	ldr	r3, [r3, #32]
 80117aa:	1ad3      	subs	r3, r2, r3
 80117ac:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80117ae:	697b      	ldr	r3, [r7, #20]
 80117b0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80117b2:	697b      	ldr	r3, [r7, #20]
 80117b4:	7d5b      	ldrb	r3, [r3, #21]
 80117b6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80117b8:	697b      	ldr	r3, [r7, #20]
 80117ba:	68db      	ldr	r3, [r3, #12]
 80117bc:	617b      	str	r3, [r7, #20]
 80117be:	697b      	ldr	r3, [r7, #20]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d1dc      	bne.n	801177e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80117c4:	693b      	ldr	r3, [r7, #16]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d004      	beq.n	80117d4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80117ca:	6938      	ldr	r0, [r7, #16]
 80117cc:	f7ff fa5a 	bl	8010c84 <tcp_abort>
 80117d0:	e000      	b.n	80117d4 <tcp_kill_prio+0x8c>
    return;
 80117d2:	bf00      	nop
  }
}
 80117d4:	3718      	adds	r7, #24
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd80      	pop	{r7, pc}
 80117da:	bf00      	nop
 80117dc:	20007628 	.word	0x20007628
 80117e0:	2000762c 	.word	0x2000762c

080117e4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b086      	sub	sp, #24
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	4603      	mov	r3, r0
 80117ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80117ee:	79fb      	ldrb	r3, [r7, #7]
 80117f0:	2b08      	cmp	r3, #8
 80117f2:	d009      	beq.n	8011808 <tcp_kill_state+0x24>
 80117f4:	79fb      	ldrb	r3, [r7, #7]
 80117f6:	2b09      	cmp	r3, #9
 80117f8:	d006      	beq.n	8011808 <tcp_kill_state+0x24>
 80117fa:	4b1a      	ldr	r3, [pc, #104]	; (8011864 <tcp_kill_state+0x80>)
 80117fc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8011800:	4919      	ldr	r1, [pc, #100]	; (8011868 <tcp_kill_state+0x84>)
 8011802:	481a      	ldr	r0, [pc, #104]	; (801186c <tcp_kill_state+0x88>)
 8011804:	f009 fd36 	bl	801b274 <iprintf>

  inactivity = 0;
 8011808:	2300      	movs	r3, #0
 801180a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801180c:	2300      	movs	r3, #0
 801180e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011810:	4b17      	ldr	r3, [pc, #92]	; (8011870 <tcp_kill_state+0x8c>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	617b      	str	r3, [r7, #20]
 8011816:	e017      	b.n	8011848 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011818:	697b      	ldr	r3, [r7, #20]
 801181a:	7d1b      	ldrb	r3, [r3, #20]
 801181c:	79fa      	ldrb	r2, [r7, #7]
 801181e:	429a      	cmp	r2, r3
 8011820:	d10f      	bne.n	8011842 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011822:	4b14      	ldr	r3, [pc, #80]	; (8011874 <tcp_kill_state+0x90>)
 8011824:	681a      	ldr	r2, [r3, #0]
 8011826:	697b      	ldr	r3, [r7, #20]
 8011828:	6a1b      	ldr	r3, [r3, #32]
 801182a:	1ad3      	subs	r3, r2, r3
 801182c:	68fa      	ldr	r2, [r7, #12]
 801182e:	429a      	cmp	r2, r3
 8011830:	d807      	bhi.n	8011842 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011832:	4b10      	ldr	r3, [pc, #64]	; (8011874 <tcp_kill_state+0x90>)
 8011834:	681a      	ldr	r2, [r3, #0]
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	6a1b      	ldr	r3, [r3, #32]
 801183a:	1ad3      	subs	r3, r2, r3
 801183c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801183e:	697b      	ldr	r3, [r7, #20]
 8011840:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	68db      	ldr	r3, [r3, #12]
 8011846:	617b      	str	r3, [r7, #20]
 8011848:	697b      	ldr	r3, [r7, #20]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d1e4      	bne.n	8011818 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801184e:	693b      	ldr	r3, [r7, #16]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d003      	beq.n	801185c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011854:	2100      	movs	r1, #0
 8011856:	6938      	ldr	r0, [r7, #16]
 8011858:	f7ff f956 	bl	8010b08 <tcp_abandon>
  }
}
 801185c:	bf00      	nop
 801185e:	3718      	adds	r7, #24
 8011860:	46bd      	mov	sp, r7
 8011862:	bd80      	pop	{r7, pc}
 8011864:	08021210 	.word	0x08021210
 8011868:	0802179c 	.word	0x0802179c
 801186c:	08021254 	.word	0x08021254
 8011870:	20007628 	.word	0x20007628
 8011874:	2000762c 	.word	0x2000762c

08011878 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b084      	sub	sp, #16
 801187c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801187e:	2300      	movs	r3, #0
 8011880:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011882:	2300      	movs	r3, #0
 8011884:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011886:	4b12      	ldr	r3, [pc, #72]	; (80118d0 <tcp_kill_timewait+0x58>)
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	60fb      	str	r3, [r7, #12]
 801188c:	e012      	b.n	80118b4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801188e:	4b11      	ldr	r3, [pc, #68]	; (80118d4 <tcp_kill_timewait+0x5c>)
 8011890:	681a      	ldr	r2, [r3, #0]
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	6a1b      	ldr	r3, [r3, #32]
 8011896:	1ad3      	subs	r3, r2, r3
 8011898:	687a      	ldr	r2, [r7, #4]
 801189a:	429a      	cmp	r2, r3
 801189c:	d807      	bhi.n	80118ae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801189e:	4b0d      	ldr	r3, [pc, #52]	; (80118d4 <tcp_kill_timewait+0x5c>)
 80118a0:	681a      	ldr	r2, [r3, #0]
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	6a1b      	ldr	r3, [r3, #32]
 80118a6:	1ad3      	subs	r3, r2, r3
 80118a8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	68db      	ldr	r3, [r3, #12]
 80118b2:	60fb      	str	r3, [r7, #12]
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d1e9      	bne.n	801188e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d002      	beq.n	80118c6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80118c0:	68b8      	ldr	r0, [r7, #8]
 80118c2:	f7ff f9df 	bl	8010c84 <tcp_abort>
  }
}
 80118c6:	bf00      	nop
 80118c8:	3710      	adds	r7, #16
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}
 80118ce:	bf00      	nop
 80118d0:	20007638 	.word	0x20007638
 80118d4:	2000762c 	.word	0x2000762c

080118d8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b082      	sub	sp, #8
 80118dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80118de:	4b10      	ldr	r3, [pc, #64]	; (8011920 <tcp_handle_closepend+0x48>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80118e4:	e014      	b.n	8011910 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	68db      	ldr	r3, [r3, #12]
 80118ea:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	8b5b      	ldrh	r3, [r3, #26]
 80118f0:	f003 0308 	and.w	r3, r3, #8
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d009      	beq.n	801190c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	8b5b      	ldrh	r3, [r3, #26]
 80118fc:	f023 0308 	bic.w	r3, r3, #8
 8011900:	b29a      	uxth	r2, r3
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f7ff f86c 	bl	80109e4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d1e7      	bne.n	80118e6 <tcp_handle_closepend+0xe>
  }
}
 8011916:	bf00      	nop
 8011918:	3708      	adds	r7, #8
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}
 801191e:	bf00      	nop
 8011920:	20007628 	.word	0x20007628

08011924 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b084      	sub	sp, #16
 8011928:	af00      	add	r7, sp, #0
 801192a:	4603      	mov	r3, r0
 801192c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801192e:	2001      	movs	r0, #1
 8011930:	f7fd fdd6 	bl	800f4e0 <memp_malloc>
 8011934:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d126      	bne.n	801198a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801193c:	f7ff ffcc 	bl	80118d8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011940:	f7ff ff9a 	bl	8011878 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011944:	2001      	movs	r0, #1
 8011946:	f7fd fdcb 	bl	800f4e0 <memp_malloc>
 801194a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d11b      	bne.n	801198a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011952:	2009      	movs	r0, #9
 8011954:	f7ff ff46 	bl	80117e4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011958:	2001      	movs	r0, #1
 801195a:	f7fd fdc1 	bl	800f4e0 <memp_malloc>
 801195e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d111      	bne.n	801198a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011966:	2008      	movs	r0, #8
 8011968:	f7ff ff3c 	bl	80117e4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801196c:	2001      	movs	r0, #1
 801196e:	f7fd fdb7 	bl	800f4e0 <memp_malloc>
 8011972:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d107      	bne.n	801198a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801197a:	79fb      	ldrb	r3, [r7, #7]
 801197c:	4618      	mov	r0, r3
 801197e:	f7ff fee3 	bl	8011748 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011982:	2001      	movs	r0, #1
 8011984:	f7fd fdac 	bl	800f4e0 <memp_malloc>
 8011988:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d03f      	beq.n	8011a10 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011990:	229c      	movs	r2, #156	; 0x9c
 8011992:	2100      	movs	r1, #0
 8011994:	68f8      	ldr	r0, [r7, #12]
 8011996:	f008 ff60 	bl	801a85a <memset>
    pcb->prio = prio;
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	79fa      	ldrb	r2, [r7, #7]
 801199e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 80119a6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80119b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	22ff      	movs	r2, #255	; 0xff
 80119be:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80119c6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	2206      	movs	r2, #6
 80119cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	2206      	movs	r2, #6
 80119d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119dc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	2201      	movs	r2, #1
 80119e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80119e6:	4b0d      	ldr	r3, [pc, #52]	; (8011a1c <tcp_alloc+0xf8>)
 80119e8:	681a      	ldr	r2, [r3, #0]
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80119ee:	4b0c      	ldr	r3, [pc, #48]	; (8011a20 <tcp_alloc+0xfc>)
 80119f0:	781a      	ldrb	r2, [r3, #0]
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 80119fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	4a08      	ldr	r2, [pc, #32]	; (8011a24 <tcp_alloc+0x100>)
 8011a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	4a07      	ldr	r2, [pc, #28]	; (8011a28 <tcp_alloc+0x104>)
 8011a0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011a10:	68fb      	ldr	r3, [r7, #12]
}
 8011a12:	4618      	mov	r0, r3
 8011a14:	3710      	adds	r7, #16
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}
 8011a1a:	bf00      	nop
 8011a1c:	2000762c 	.word	0x2000762c
 8011a20:	200004d6 	.word	0x200004d6
 8011a24:	080116dd 	.word	0x080116dd
 8011a28:	006ddd00 	.word	0x006ddd00

08011a2c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b082      	sub	sp, #8
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d107      	bne.n	8011a4a <tcp_pcb_purge+0x1e>
 8011a3a:	4b21      	ldr	r3, [pc, #132]	; (8011ac0 <tcp_pcb_purge+0x94>)
 8011a3c:	f640 0251 	movw	r2, #2129	; 0x851
 8011a40:	4920      	ldr	r1, [pc, #128]	; (8011ac4 <tcp_pcb_purge+0x98>)
 8011a42:	4821      	ldr	r0, [pc, #132]	; (8011ac8 <tcp_pcb_purge+0x9c>)
 8011a44:	f009 fc16 	bl	801b274 <iprintf>
 8011a48:	e037      	b.n	8011aba <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	7d1b      	ldrb	r3, [r3, #20]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d033      	beq.n	8011aba <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011a56:	2b0a      	cmp	r3, #10
 8011a58:	d02f      	beq.n	8011aba <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011a5e:	2b01      	cmp	r3, #1
 8011a60:	d02b      	beq.n	8011aba <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d007      	beq.n	8011a7a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7fe fb78 	bl	8010164 <pbuf_free>
      pcb->refused_data = NULL;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2200      	movs	r2, #0
 8011a78:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d002      	beq.n	8011a88 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011a82:	6878      	ldr	r0, [r7, #4]
 8011a84:	f000 f986 	bl	8011d94 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a8e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7ff fdc9 	bl	801162c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f7ff fdc4 	bl	801162c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	66da      	str	r2, [r3, #108]	; 0x6c
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8011aba:	3708      	adds	r7, #8
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd80      	pop	{r7, pc}
 8011ac0:	08021210 	.word	0x08021210
 8011ac4:	0802185c 	.word	0x0802185c
 8011ac8:	08021254 	.word	0x08021254

08011acc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b084      	sub	sp, #16
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
 8011ad4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d106      	bne.n	8011aea <tcp_pcb_remove+0x1e>
 8011adc:	4b3e      	ldr	r3, [pc, #248]	; (8011bd8 <tcp_pcb_remove+0x10c>)
 8011ade:	f640 0283 	movw	r2, #2179	; 0x883
 8011ae2:	493e      	ldr	r1, [pc, #248]	; (8011bdc <tcp_pcb_remove+0x110>)
 8011ae4:	483e      	ldr	r0, [pc, #248]	; (8011be0 <tcp_pcb_remove+0x114>)
 8011ae6:	f009 fbc5 	bl	801b274 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d106      	bne.n	8011afe <tcp_pcb_remove+0x32>
 8011af0:	4b39      	ldr	r3, [pc, #228]	; (8011bd8 <tcp_pcb_remove+0x10c>)
 8011af2:	f640 0284 	movw	r2, #2180	; 0x884
 8011af6:	493b      	ldr	r1, [pc, #236]	; (8011be4 <tcp_pcb_remove+0x118>)
 8011af8:	4839      	ldr	r0, [pc, #228]	; (8011be0 <tcp_pcb_remove+0x114>)
 8011afa:	f009 fbbb 	bl	801b274 <iprintf>

  TCP_RMV(pcblist, pcb);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	683a      	ldr	r2, [r7, #0]
 8011b04:	429a      	cmp	r2, r3
 8011b06:	d105      	bne.n	8011b14 <tcp_pcb_remove+0x48>
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	68da      	ldr	r2, [r3, #12]
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	601a      	str	r2, [r3, #0]
 8011b12:	e013      	b.n	8011b3c <tcp_pcb_remove+0x70>
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	60fb      	str	r3, [r7, #12]
 8011b1a:	e00c      	b.n	8011b36 <tcp_pcb_remove+0x6a>
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	68db      	ldr	r3, [r3, #12]
 8011b20:	683a      	ldr	r2, [r7, #0]
 8011b22:	429a      	cmp	r2, r3
 8011b24:	d104      	bne.n	8011b30 <tcp_pcb_remove+0x64>
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	68da      	ldr	r2, [r3, #12]
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	60da      	str	r2, [r3, #12]
 8011b2e:	e005      	b.n	8011b3c <tcp_pcb_remove+0x70>
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	68db      	ldr	r3, [r3, #12]
 8011b34:	60fb      	str	r3, [r7, #12]
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d1ef      	bne.n	8011b1c <tcp_pcb_remove+0x50>
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	2200      	movs	r2, #0
 8011b40:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011b42:	6838      	ldr	r0, [r7, #0]
 8011b44:	f7ff ff72 	bl	8011a2c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011b48:	683b      	ldr	r3, [r7, #0]
 8011b4a:	7d1b      	ldrb	r3, [r3, #20]
 8011b4c:	2b0a      	cmp	r3, #10
 8011b4e:	d013      	beq.n	8011b78 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011b54:	2b01      	cmp	r3, #1
 8011b56:	d00f      	beq.n	8011b78 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	8b5b      	ldrh	r3, [r3, #26]
 8011b5c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d009      	beq.n	8011b78 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	8b5b      	ldrh	r3, [r3, #26]
 8011b68:	f043 0302 	orr.w	r3, r3, #2
 8011b6c:	b29a      	uxth	r2, r3
 8011b6e:	683b      	ldr	r3, [r7, #0]
 8011b70:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011b72:	6838      	ldr	r0, [r7, #0]
 8011b74:	f002 ff68 	bl	8014a48 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	7d1b      	ldrb	r3, [r3, #20]
 8011b7c:	2b01      	cmp	r3, #1
 8011b7e:	d020      	beq.n	8011bc2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011b80:	683b      	ldr	r3, [r7, #0]
 8011b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d006      	beq.n	8011b96 <tcp_pcb_remove+0xca>
 8011b88:	4b13      	ldr	r3, [pc, #76]	; (8011bd8 <tcp_pcb_remove+0x10c>)
 8011b8a:	f640 0293 	movw	r2, #2195	; 0x893
 8011b8e:	4916      	ldr	r1, [pc, #88]	; (8011be8 <tcp_pcb_remove+0x11c>)
 8011b90:	4813      	ldr	r0, [pc, #76]	; (8011be0 <tcp_pcb_remove+0x114>)
 8011b92:	f009 fb6f 	bl	801b274 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d006      	beq.n	8011bac <tcp_pcb_remove+0xe0>
 8011b9e:	4b0e      	ldr	r3, [pc, #56]	; (8011bd8 <tcp_pcb_remove+0x10c>)
 8011ba0:	f640 0294 	movw	r2, #2196	; 0x894
 8011ba4:	4911      	ldr	r1, [pc, #68]	; (8011bec <tcp_pcb_remove+0x120>)
 8011ba6:	480e      	ldr	r0, [pc, #56]	; (8011be0 <tcp_pcb_remove+0x114>)
 8011ba8:	f009 fb64 	bl	801b274 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d006      	beq.n	8011bc2 <tcp_pcb_remove+0xf6>
 8011bb4:	4b08      	ldr	r3, [pc, #32]	; (8011bd8 <tcp_pcb_remove+0x10c>)
 8011bb6:	f640 0296 	movw	r2, #2198	; 0x896
 8011bba:	490d      	ldr	r1, [pc, #52]	; (8011bf0 <tcp_pcb_remove+0x124>)
 8011bbc:	4808      	ldr	r0, [pc, #32]	; (8011be0 <tcp_pcb_remove+0x114>)
 8011bbe:	f009 fb59 	bl	801b274 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011bc8:	683b      	ldr	r3, [r7, #0]
 8011bca:	2200      	movs	r2, #0
 8011bcc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011bce:	bf00      	nop
 8011bd0:	3710      	adds	r7, #16
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	bd80      	pop	{r7, pc}
 8011bd6:	bf00      	nop
 8011bd8:	08021210 	.word	0x08021210
 8011bdc:	08021878 	.word	0x08021878
 8011be0:	08021254 	.word	0x08021254
 8011be4:	08021894 	.word	0x08021894
 8011be8:	080218b4 	.word	0x080218b4
 8011bec:	080218cc 	.word	0x080218cc
 8011bf0:	080218e8 	.word	0x080218e8

08011bf4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b082      	sub	sp, #8
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d106      	bne.n	8011c10 <tcp_next_iss+0x1c>
 8011c02:	4b0a      	ldr	r3, [pc, #40]	; (8011c2c <tcp_next_iss+0x38>)
 8011c04:	f640 02af 	movw	r2, #2223	; 0x8af
 8011c08:	4909      	ldr	r1, [pc, #36]	; (8011c30 <tcp_next_iss+0x3c>)
 8011c0a:	480a      	ldr	r0, [pc, #40]	; (8011c34 <tcp_next_iss+0x40>)
 8011c0c:	f009 fb32 	bl	801b274 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011c10:	4b09      	ldr	r3, [pc, #36]	; (8011c38 <tcp_next_iss+0x44>)
 8011c12:	681a      	ldr	r2, [r3, #0]
 8011c14:	4b09      	ldr	r3, [pc, #36]	; (8011c3c <tcp_next_iss+0x48>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	4413      	add	r3, r2
 8011c1a:	4a07      	ldr	r2, [pc, #28]	; (8011c38 <tcp_next_iss+0x44>)
 8011c1c:	6013      	str	r3, [r2, #0]
  return iss;
 8011c1e:	4b06      	ldr	r3, [pc, #24]	; (8011c38 <tcp_next_iss+0x44>)
 8011c20:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011c22:	4618      	mov	r0, r3
 8011c24:	3708      	adds	r7, #8
 8011c26:	46bd      	mov	sp, r7
 8011c28:	bd80      	pop	{r7, pc}
 8011c2a:	bf00      	nop
 8011c2c:	08021210 	.word	0x08021210
 8011c30:	08021900 	.word	0x08021900
 8011c34:	08021254 	.word	0x08021254
 8011c38:	20000078 	.word	0x20000078
 8011c3c:	2000762c 	.word	0x2000762c

08011c40 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b086      	sub	sp, #24
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	4603      	mov	r3, r0
 8011c48:	60b9      	str	r1, [r7, #8]
 8011c4a:	607a      	str	r2, [r7, #4]
 8011c4c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d106      	bne.n	8011c62 <tcp_eff_send_mss_netif+0x22>
 8011c54:	4b14      	ldr	r3, [pc, #80]	; (8011ca8 <tcp_eff_send_mss_netif+0x68>)
 8011c56:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8011c5a:	4914      	ldr	r1, [pc, #80]	; (8011cac <tcp_eff_send_mss_netif+0x6c>)
 8011c5c:	4814      	ldr	r0, [pc, #80]	; (8011cb0 <tcp_eff_send_mss_netif+0x70>)
 8011c5e:	f009 fb09 	bl	801b274 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d101      	bne.n	8011c6c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8011c68:	89fb      	ldrh	r3, [r7, #14]
 8011c6a:	e019      	b.n	8011ca0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011c6c:	68bb      	ldr	r3, [r7, #8]
 8011c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011c70:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011c72:	8afb      	ldrh	r3, [r7, #22]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d012      	beq.n	8011c9e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011c78:	2328      	movs	r3, #40	; 0x28
 8011c7a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011c7c:	8afa      	ldrh	r2, [r7, #22]
 8011c7e:	8abb      	ldrh	r3, [r7, #20]
 8011c80:	429a      	cmp	r2, r3
 8011c82:	d904      	bls.n	8011c8e <tcp_eff_send_mss_netif+0x4e>
 8011c84:	8afa      	ldrh	r2, [r7, #22]
 8011c86:	8abb      	ldrh	r3, [r7, #20]
 8011c88:	1ad3      	subs	r3, r2, r3
 8011c8a:	b29b      	uxth	r3, r3
 8011c8c:	e000      	b.n	8011c90 <tcp_eff_send_mss_netif+0x50>
 8011c8e:	2300      	movs	r3, #0
 8011c90:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011c92:	8a7a      	ldrh	r2, [r7, #18]
 8011c94:	89fb      	ldrh	r3, [r7, #14]
 8011c96:	4293      	cmp	r3, r2
 8011c98:	bf28      	it	cs
 8011c9a:	4613      	movcs	r3, r2
 8011c9c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011c9e:	89fb      	ldrh	r3, [r7, #14]
}
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	3718      	adds	r7, #24
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}
 8011ca8:	08021210 	.word	0x08021210
 8011cac:	0802191c 	.word	0x0802191c
 8011cb0:	08021254 	.word	0x08021254

08011cb4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b084      	sub	sp, #16
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
 8011cbc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d119      	bne.n	8011cfc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011cc8:	4b10      	ldr	r3, [pc, #64]	; (8011d0c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011cca:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8011cce:	4910      	ldr	r1, [pc, #64]	; (8011d10 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011cd0:	4810      	ldr	r0, [pc, #64]	; (8011d14 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011cd2:	f009 facf 	bl	801b274 <iprintf>

  while (pcb != NULL) {
 8011cd6:	e011      	b.n	8011cfc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	681a      	ldr	r2, [r3, #0]
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	d108      	bne.n	8011cf6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	68db      	ldr	r3, [r3, #12]
 8011ce8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011cea:	68f8      	ldr	r0, [r7, #12]
 8011cec:	f7fe ffca 	bl	8010c84 <tcp_abort>
      pcb = next;
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	60fb      	str	r3, [r7, #12]
 8011cf4:	e002      	b.n	8011cfc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	68db      	ldr	r3, [r3, #12]
 8011cfa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d1ea      	bne.n	8011cd8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8011d02:	bf00      	nop
 8011d04:	3710      	adds	r7, #16
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}
 8011d0a:	bf00      	nop
 8011d0c:	08021210 	.word	0x08021210
 8011d10:	08021944 	.word	0x08021944
 8011d14:	08021254 	.word	0x08021254

08011d18 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b084      	sub	sp, #16
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
 8011d20:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d02a      	beq.n	8011d7e <tcp_netif_ip_addr_changed+0x66>
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d026      	beq.n	8011d7e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011d30:	4b15      	ldr	r3, [pc, #84]	; (8011d88 <tcp_netif_ip_addr_changed+0x70>)
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	4619      	mov	r1, r3
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f7ff ffbc 	bl	8011cb4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011d3c:	4b13      	ldr	r3, [pc, #76]	; (8011d8c <tcp_netif_ip_addr_changed+0x74>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	4619      	mov	r1, r3
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f7ff ffb6 	bl	8011cb4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d017      	beq.n	8011d7e <tcp_netif_ip_addr_changed+0x66>
 8011d4e:	683b      	ldr	r3, [r7, #0]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d013      	beq.n	8011d7e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011d56:	4b0e      	ldr	r3, [pc, #56]	; (8011d90 <tcp_netif_ip_addr_changed+0x78>)
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	60fb      	str	r3, [r7, #12]
 8011d5c:	e00c      	b.n	8011d78 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	681a      	ldr	r2, [r3, #0]
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	429a      	cmp	r2, r3
 8011d68:	d103      	bne.n	8011d72 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	681a      	ldr	r2, [r3, #0]
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	68db      	ldr	r3, [r3, #12]
 8011d76:	60fb      	str	r3, [r7, #12]
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d1ef      	bne.n	8011d5e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011d7e:	bf00      	nop
 8011d80:	3710      	adds	r7, #16
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}
 8011d86:	bf00      	nop
 8011d88:	20007628 	.word	0x20007628
 8011d8c:	20007634 	.word	0x20007634
 8011d90:	20007630 	.word	0x20007630

08011d94 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b082      	sub	sp, #8
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d007      	beq.n	8011db4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011da8:	4618      	mov	r0, r3
 8011daa:	f7ff fc3f 	bl	801162c <tcp_segs_free>
    pcb->ooseq = NULL;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	2200      	movs	r2, #0
 8011db2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011db4:	bf00      	nop
 8011db6:	3708      	adds	r7, #8
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}

08011dbc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011dbc:	b590      	push	{r4, r7, lr}
 8011dbe:	b08d      	sub	sp, #52	; 0x34
 8011dc0:	af04      	add	r7, sp, #16
 8011dc2:	6078      	str	r0, [r7, #4]
 8011dc4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d105      	bne.n	8011dd8 <tcp_input+0x1c>
 8011dcc:	4b9b      	ldr	r3, [pc, #620]	; (801203c <tcp_input+0x280>)
 8011dce:	2283      	movs	r2, #131	; 0x83
 8011dd0:	499b      	ldr	r1, [pc, #620]	; (8012040 <tcp_input+0x284>)
 8011dd2:	489c      	ldr	r0, [pc, #624]	; (8012044 <tcp_input+0x288>)
 8011dd4:	f009 fa4e 	bl	801b274 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	685b      	ldr	r3, [r3, #4]
 8011ddc:	4a9a      	ldr	r2, [pc, #616]	; (8012048 <tcp_input+0x28c>)
 8011dde:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	895b      	ldrh	r3, [r3, #10]
 8011de4:	2b13      	cmp	r3, #19
 8011de6:	f240 83c4 	bls.w	8012572 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011dea:	4b98      	ldr	r3, [pc, #608]	; (801204c <tcp_input+0x290>)
 8011dec:	695a      	ldr	r2, [r3, #20]
 8011dee:	4b97      	ldr	r3, [pc, #604]	; (801204c <tcp_input+0x290>)
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	4619      	mov	r1, r3
 8011df4:	4610      	mov	r0, r2
 8011df6:	f007 fd51 	bl	801989c <ip4_addr_isbroadcast_u32>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	f040 83ba 	bne.w	8012576 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011e02:	4b92      	ldr	r3, [pc, #584]	; (801204c <tcp_input+0x290>)
 8011e04:	695b      	ldr	r3, [r3, #20]
 8011e06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011e0a:	2be0      	cmp	r3, #224	; 0xe0
 8011e0c:	f000 83b3 	beq.w	8012576 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8011e10:	4b8d      	ldr	r3, [pc, #564]	; (8012048 <tcp_input+0x28c>)
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	899b      	ldrh	r3, [r3, #12]
 8011e16:	b29b      	uxth	r3, r3
 8011e18:	4618      	mov	r0, r3
 8011e1a:	f7fc ff0b 	bl	800ec34 <lwip_htons>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	0b1b      	lsrs	r3, r3, #12
 8011e22:	b29b      	uxth	r3, r3
 8011e24:	b2db      	uxtb	r3, r3
 8011e26:	009b      	lsls	r3, r3, #2
 8011e28:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011e2a:	7cbb      	ldrb	r3, [r7, #18]
 8011e2c:	2b13      	cmp	r3, #19
 8011e2e:	f240 83a2 	bls.w	8012576 <tcp_input+0x7ba>
 8011e32:	7cbb      	ldrb	r3, [r7, #18]
 8011e34:	b29a      	uxth	r2, r3
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	891b      	ldrh	r3, [r3, #8]
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	f200 839b 	bhi.w	8012576 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8011e40:	7cbb      	ldrb	r3, [r7, #18]
 8011e42:	b29b      	uxth	r3, r3
 8011e44:	3b14      	subs	r3, #20
 8011e46:	b29a      	uxth	r2, r3
 8011e48:	4b81      	ldr	r3, [pc, #516]	; (8012050 <tcp_input+0x294>)
 8011e4a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011e4c:	4b81      	ldr	r3, [pc, #516]	; (8012054 <tcp_input+0x298>)
 8011e4e:	2200      	movs	r2, #0
 8011e50:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	895a      	ldrh	r2, [r3, #10]
 8011e56:	7cbb      	ldrb	r3, [r7, #18]
 8011e58:	b29b      	uxth	r3, r3
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	d309      	bcc.n	8011e72 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011e5e:	4b7c      	ldr	r3, [pc, #496]	; (8012050 <tcp_input+0x294>)
 8011e60:	881a      	ldrh	r2, [r3, #0]
 8011e62:	4b7d      	ldr	r3, [pc, #500]	; (8012058 <tcp_input+0x29c>)
 8011e64:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8011e66:	7cbb      	ldrb	r3, [r7, #18]
 8011e68:	4619      	mov	r1, r3
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f7fe f8f4 	bl	8010058 <pbuf_remove_header>
 8011e70:	e04e      	b.n	8011f10 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d105      	bne.n	8011e86 <tcp_input+0xca>
 8011e7a:	4b70      	ldr	r3, [pc, #448]	; (801203c <tcp_input+0x280>)
 8011e7c:	22c2      	movs	r2, #194	; 0xc2
 8011e7e:	4977      	ldr	r1, [pc, #476]	; (801205c <tcp_input+0x2a0>)
 8011e80:	4870      	ldr	r0, [pc, #448]	; (8012044 <tcp_input+0x288>)
 8011e82:	f009 f9f7 	bl	801b274 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8011e86:	2114      	movs	r1, #20
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f7fe f8e5 	bl	8010058 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	895a      	ldrh	r2, [r3, #10]
 8011e92:	4b71      	ldr	r3, [pc, #452]	; (8012058 <tcp_input+0x29c>)
 8011e94:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8011e96:	4b6e      	ldr	r3, [pc, #440]	; (8012050 <tcp_input+0x294>)
 8011e98:	881a      	ldrh	r2, [r3, #0]
 8011e9a:	4b6f      	ldr	r3, [pc, #444]	; (8012058 <tcp_input+0x29c>)
 8011e9c:	881b      	ldrh	r3, [r3, #0]
 8011e9e:	1ad3      	subs	r3, r2, r3
 8011ea0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011ea2:	4b6d      	ldr	r3, [pc, #436]	; (8012058 <tcp_input+0x29c>)
 8011ea4:	881b      	ldrh	r3, [r3, #0]
 8011ea6:	4619      	mov	r1, r3
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f7fe f8d5 	bl	8010058 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	895b      	ldrh	r3, [r3, #10]
 8011eb4:	8a3a      	ldrh	r2, [r7, #16]
 8011eb6:	429a      	cmp	r2, r3
 8011eb8:	f200 835f 	bhi.w	801257a <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	685b      	ldr	r3, [r3, #4]
 8011ec2:	4a64      	ldr	r2, [pc, #400]	; (8012054 <tcp_input+0x298>)
 8011ec4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	8a3a      	ldrh	r2, [r7, #16]
 8011ecc:	4611      	mov	r1, r2
 8011ece:	4618      	mov	r0, r3
 8011ed0:	f7fe f8c2 	bl	8010058 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	891a      	ldrh	r2, [r3, #8]
 8011ed8:	8a3b      	ldrh	r3, [r7, #16]
 8011eda:	1ad3      	subs	r3, r2, r3
 8011edc:	b29a      	uxth	r2, r3
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	895b      	ldrh	r3, [r3, #10]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d005      	beq.n	8011ef6 <tcp_input+0x13a>
 8011eea:	4b54      	ldr	r3, [pc, #336]	; (801203c <tcp_input+0x280>)
 8011eec:	22df      	movs	r2, #223	; 0xdf
 8011eee:	495c      	ldr	r1, [pc, #368]	; (8012060 <tcp_input+0x2a4>)
 8011ef0:	4854      	ldr	r0, [pc, #336]	; (8012044 <tcp_input+0x288>)
 8011ef2:	f009 f9bf 	bl	801b274 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	891a      	ldrh	r2, [r3, #8]
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	891b      	ldrh	r3, [r3, #8]
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d005      	beq.n	8011f10 <tcp_input+0x154>
 8011f04:	4b4d      	ldr	r3, [pc, #308]	; (801203c <tcp_input+0x280>)
 8011f06:	22e0      	movs	r2, #224	; 0xe0
 8011f08:	4956      	ldr	r1, [pc, #344]	; (8012064 <tcp_input+0x2a8>)
 8011f0a:	484e      	ldr	r0, [pc, #312]	; (8012044 <tcp_input+0x288>)
 8011f0c:	f009 f9b2 	bl	801b274 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011f10:	4b4d      	ldr	r3, [pc, #308]	; (8012048 <tcp_input+0x28c>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	881b      	ldrh	r3, [r3, #0]
 8011f16:	b29a      	uxth	r2, r3
 8011f18:	4b4b      	ldr	r3, [pc, #300]	; (8012048 <tcp_input+0x28c>)
 8011f1a:	681c      	ldr	r4, [r3, #0]
 8011f1c:	4610      	mov	r0, r2
 8011f1e:	f7fc fe89 	bl	800ec34 <lwip_htons>
 8011f22:	4603      	mov	r3, r0
 8011f24:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011f26:	4b48      	ldr	r3, [pc, #288]	; (8012048 <tcp_input+0x28c>)
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	885b      	ldrh	r3, [r3, #2]
 8011f2c:	b29a      	uxth	r2, r3
 8011f2e:	4b46      	ldr	r3, [pc, #280]	; (8012048 <tcp_input+0x28c>)
 8011f30:	681c      	ldr	r4, [r3, #0]
 8011f32:	4610      	mov	r0, r2
 8011f34:	f7fc fe7e 	bl	800ec34 <lwip_htons>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011f3c:	4b42      	ldr	r3, [pc, #264]	; (8012048 <tcp_input+0x28c>)
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	685a      	ldr	r2, [r3, #4]
 8011f42:	4b41      	ldr	r3, [pc, #260]	; (8012048 <tcp_input+0x28c>)
 8011f44:	681c      	ldr	r4, [r3, #0]
 8011f46:	4610      	mov	r0, r2
 8011f48:	f7fc fe89 	bl	800ec5e <lwip_htonl>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	6063      	str	r3, [r4, #4]
 8011f50:	6863      	ldr	r3, [r4, #4]
 8011f52:	4a45      	ldr	r2, [pc, #276]	; (8012068 <tcp_input+0x2ac>)
 8011f54:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011f56:	4b3c      	ldr	r3, [pc, #240]	; (8012048 <tcp_input+0x28c>)
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	689a      	ldr	r2, [r3, #8]
 8011f5c:	4b3a      	ldr	r3, [pc, #232]	; (8012048 <tcp_input+0x28c>)
 8011f5e:	681c      	ldr	r4, [r3, #0]
 8011f60:	4610      	mov	r0, r2
 8011f62:	f7fc fe7c 	bl	800ec5e <lwip_htonl>
 8011f66:	4603      	mov	r3, r0
 8011f68:	60a3      	str	r3, [r4, #8]
 8011f6a:	68a3      	ldr	r3, [r4, #8]
 8011f6c:	4a3f      	ldr	r2, [pc, #252]	; (801206c <tcp_input+0x2b0>)
 8011f6e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011f70:	4b35      	ldr	r3, [pc, #212]	; (8012048 <tcp_input+0x28c>)
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	89db      	ldrh	r3, [r3, #14]
 8011f76:	b29a      	uxth	r2, r3
 8011f78:	4b33      	ldr	r3, [pc, #204]	; (8012048 <tcp_input+0x28c>)
 8011f7a:	681c      	ldr	r4, [r3, #0]
 8011f7c:	4610      	mov	r0, r2
 8011f7e:	f7fc fe59 	bl	800ec34 <lwip_htons>
 8011f82:	4603      	mov	r3, r0
 8011f84:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8011f86:	4b30      	ldr	r3, [pc, #192]	; (8012048 <tcp_input+0x28c>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	899b      	ldrh	r3, [r3, #12]
 8011f8c:	b29b      	uxth	r3, r3
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f7fc fe50 	bl	800ec34 <lwip_htons>
 8011f94:	4603      	mov	r3, r0
 8011f96:	b2db      	uxtb	r3, r3
 8011f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011f9c:	b2da      	uxtb	r2, r3
 8011f9e:	4b34      	ldr	r3, [pc, #208]	; (8012070 <tcp_input+0x2b4>)
 8011fa0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	891a      	ldrh	r2, [r3, #8]
 8011fa6:	4b33      	ldr	r3, [pc, #204]	; (8012074 <tcp_input+0x2b8>)
 8011fa8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8011faa:	4b31      	ldr	r3, [pc, #196]	; (8012070 <tcp_input+0x2b4>)
 8011fac:	781b      	ldrb	r3, [r3, #0]
 8011fae:	f003 0303 	and.w	r3, r3, #3
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d00c      	beq.n	8011fd0 <tcp_input+0x214>
    tcplen++;
 8011fb6:	4b2f      	ldr	r3, [pc, #188]	; (8012074 <tcp_input+0x2b8>)
 8011fb8:	881b      	ldrh	r3, [r3, #0]
 8011fba:	3301      	adds	r3, #1
 8011fbc:	b29a      	uxth	r2, r3
 8011fbe:	4b2d      	ldr	r3, [pc, #180]	; (8012074 <tcp_input+0x2b8>)
 8011fc0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	891a      	ldrh	r2, [r3, #8]
 8011fc6:	4b2b      	ldr	r3, [pc, #172]	; (8012074 <tcp_input+0x2b8>)
 8011fc8:	881b      	ldrh	r3, [r3, #0]
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	f200 82d7 	bhi.w	801257e <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011fd4:	4b28      	ldr	r3, [pc, #160]	; (8012078 <tcp_input+0x2bc>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	61fb      	str	r3, [r7, #28]
 8011fda:	e09d      	b.n	8012118 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011fdc:	69fb      	ldr	r3, [r7, #28]
 8011fde:	7d1b      	ldrb	r3, [r3, #20]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d105      	bne.n	8011ff0 <tcp_input+0x234>
 8011fe4:	4b15      	ldr	r3, [pc, #84]	; (801203c <tcp_input+0x280>)
 8011fe6:	22fb      	movs	r2, #251	; 0xfb
 8011fe8:	4924      	ldr	r1, [pc, #144]	; (801207c <tcp_input+0x2c0>)
 8011fea:	4816      	ldr	r0, [pc, #88]	; (8012044 <tcp_input+0x288>)
 8011fec:	f009 f942 	bl	801b274 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011ff0:	69fb      	ldr	r3, [r7, #28]
 8011ff2:	7d1b      	ldrb	r3, [r3, #20]
 8011ff4:	2b0a      	cmp	r3, #10
 8011ff6:	d105      	bne.n	8012004 <tcp_input+0x248>
 8011ff8:	4b10      	ldr	r3, [pc, #64]	; (801203c <tcp_input+0x280>)
 8011ffa:	22fc      	movs	r2, #252	; 0xfc
 8011ffc:	4920      	ldr	r1, [pc, #128]	; (8012080 <tcp_input+0x2c4>)
 8011ffe:	4811      	ldr	r0, [pc, #68]	; (8012044 <tcp_input+0x288>)
 8012000:	f009 f938 	bl	801b274 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012004:	69fb      	ldr	r3, [r7, #28]
 8012006:	7d1b      	ldrb	r3, [r3, #20]
 8012008:	2b01      	cmp	r3, #1
 801200a:	d105      	bne.n	8012018 <tcp_input+0x25c>
 801200c:	4b0b      	ldr	r3, [pc, #44]	; (801203c <tcp_input+0x280>)
 801200e:	22fd      	movs	r2, #253	; 0xfd
 8012010:	491c      	ldr	r1, [pc, #112]	; (8012084 <tcp_input+0x2c8>)
 8012012:	480c      	ldr	r0, [pc, #48]	; (8012044 <tcp_input+0x288>)
 8012014:	f009 f92e 	bl	801b274 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012018:	69fb      	ldr	r3, [r7, #28]
 801201a:	7a1b      	ldrb	r3, [r3, #8]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d033      	beq.n	8012088 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012020:	69fb      	ldr	r3, [r7, #28]
 8012022:	7a1a      	ldrb	r2, [r3, #8]
 8012024:	4b09      	ldr	r3, [pc, #36]	; (801204c <tcp_input+0x290>)
 8012026:	685b      	ldr	r3, [r3, #4]
 8012028:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801202c:	3301      	adds	r3, #1
 801202e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012030:	429a      	cmp	r2, r3
 8012032:	d029      	beq.n	8012088 <tcp_input+0x2cc>
      prev = pcb;
 8012034:	69fb      	ldr	r3, [r7, #28]
 8012036:	61bb      	str	r3, [r7, #24]
      continue;
 8012038:	e06b      	b.n	8012112 <tcp_input+0x356>
 801203a:	bf00      	nop
 801203c:	08021978 	.word	0x08021978
 8012040:	080219ac 	.word	0x080219ac
 8012044:	080219c4 	.word	0x080219c4
 8012048:	200004e8 	.word	0x200004e8
 801204c:	20004504 	.word	0x20004504
 8012050:	200004ec 	.word	0x200004ec
 8012054:	200004f0 	.word	0x200004f0
 8012058:	200004ee 	.word	0x200004ee
 801205c:	080219ec 	.word	0x080219ec
 8012060:	080219fc 	.word	0x080219fc
 8012064:	08021a08 	.word	0x08021a08
 8012068:	200004f8 	.word	0x200004f8
 801206c:	200004fc 	.word	0x200004fc
 8012070:	20000504 	.word	0x20000504
 8012074:	20000502 	.word	0x20000502
 8012078:	20007628 	.word	0x20007628
 801207c:	08021a28 	.word	0x08021a28
 8012080:	08021a50 	.word	0x08021a50
 8012084:	08021a7c 	.word	0x08021a7c
    }

    if (pcb->remote_port == tcphdr->src &&
 8012088:	69fb      	ldr	r3, [r7, #28]
 801208a:	8b1a      	ldrh	r2, [r3, #24]
 801208c:	4b94      	ldr	r3, [pc, #592]	; (80122e0 <tcp_input+0x524>)
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	881b      	ldrh	r3, [r3, #0]
 8012092:	b29b      	uxth	r3, r3
 8012094:	429a      	cmp	r2, r3
 8012096:	d13a      	bne.n	801210e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012098:	69fb      	ldr	r3, [r7, #28]
 801209a:	8ada      	ldrh	r2, [r3, #22]
 801209c:	4b90      	ldr	r3, [pc, #576]	; (80122e0 <tcp_input+0x524>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	885b      	ldrh	r3, [r3, #2]
 80120a2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80120a4:	429a      	cmp	r2, r3
 80120a6:	d132      	bne.n	801210e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80120a8:	69fb      	ldr	r3, [r7, #28]
 80120aa:	685a      	ldr	r2, [r3, #4]
 80120ac:	4b8d      	ldr	r3, [pc, #564]	; (80122e4 <tcp_input+0x528>)
 80120ae:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80120b0:	429a      	cmp	r2, r3
 80120b2:	d12c      	bne.n	801210e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80120b4:	69fb      	ldr	r3, [r7, #28]
 80120b6:	681a      	ldr	r2, [r3, #0]
 80120b8:	4b8a      	ldr	r3, [pc, #552]	; (80122e4 <tcp_input+0x528>)
 80120ba:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80120bc:	429a      	cmp	r2, r3
 80120be:	d126      	bne.n	801210e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80120c0:	69fb      	ldr	r3, [r7, #28]
 80120c2:	68db      	ldr	r3, [r3, #12]
 80120c4:	69fa      	ldr	r2, [r7, #28]
 80120c6:	429a      	cmp	r2, r3
 80120c8:	d106      	bne.n	80120d8 <tcp_input+0x31c>
 80120ca:	4b87      	ldr	r3, [pc, #540]	; (80122e8 <tcp_input+0x52c>)
 80120cc:	f240 120d 	movw	r2, #269	; 0x10d
 80120d0:	4986      	ldr	r1, [pc, #536]	; (80122ec <tcp_input+0x530>)
 80120d2:	4887      	ldr	r0, [pc, #540]	; (80122f0 <tcp_input+0x534>)
 80120d4:	f009 f8ce 	bl	801b274 <iprintf>
      if (prev != NULL) {
 80120d8:	69bb      	ldr	r3, [r7, #24]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d00a      	beq.n	80120f4 <tcp_input+0x338>
        prev->next = pcb->next;
 80120de:	69fb      	ldr	r3, [r7, #28]
 80120e0:	68da      	ldr	r2, [r3, #12]
 80120e2:	69bb      	ldr	r3, [r7, #24]
 80120e4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80120e6:	4b83      	ldr	r3, [pc, #524]	; (80122f4 <tcp_input+0x538>)
 80120e8:	681a      	ldr	r2, [r3, #0]
 80120ea:	69fb      	ldr	r3, [r7, #28]
 80120ec:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80120ee:	4a81      	ldr	r2, [pc, #516]	; (80122f4 <tcp_input+0x538>)
 80120f0:	69fb      	ldr	r3, [r7, #28]
 80120f2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80120f4:	69fb      	ldr	r3, [r7, #28]
 80120f6:	68db      	ldr	r3, [r3, #12]
 80120f8:	69fa      	ldr	r2, [r7, #28]
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d111      	bne.n	8012122 <tcp_input+0x366>
 80120fe:	4b7a      	ldr	r3, [pc, #488]	; (80122e8 <tcp_input+0x52c>)
 8012100:	f240 1215 	movw	r2, #277	; 0x115
 8012104:	497c      	ldr	r1, [pc, #496]	; (80122f8 <tcp_input+0x53c>)
 8012106:	487a      	ldr	r0, [pc, #488]	; (80122f0 <tcp_input+0x534>)
 8012108:	f009 f8b4 	bl	801b274 <iprintf>
      break;
 801210c:	e009      	b.n	8012122 <tcp_input+0x366>
    }
    prev = pcb;
 801210e:	69fb      	ldr	r3, [r7, #28]
 8012110:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012112:	69fb      	ldr	r3, [r7, #28]
 8012114:	68db      	ldr	r3, [r3, #12]
 8012116:	61fb      	str	r3, [r7, #28]
 8012118:	69fb      	ldr	r3, [r7, #28]
 801211a:	2b00      	cmp	r3, #0
 801211c:	f47f af5e 	bne.w	8011fdc <tcp_input+0x220>
 8012120:	e000      	b.n	8012124 <tcp_input+0x368>
      break;
 8012122:	bf00      	nop
  }

  if (pcb == NULL) {
 8012124:	69fb      	ldr	r3, [r7, #28]
 8012126:	2b00      	cmp	r3, #0
 8012128:	f040 8095 	bne.w	8012256 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801212c:	4b73      	ldr	r3, [pc, #460]	; (80122fc <tcp_input+0x540>)
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	61fb      	str	r3, [r7, #28]
 8012132:	e03f      	b.n	80121b4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012134:	69fb      	ldr	r3, [r7, #28]
 8012136:	7d1b      	ldrb	r3, [r3, #20]
 8012138:	2b0a      	cmp	r3, #10
 801213a:	d006      	beq.n	801214a <tcp_input+0x38e>
 801213c:	4b6a      	ldr	r3, [pc, #424]	; (80122e8 <tcp_input+0x52c>)
 801213e:	f240 121f 	movw	r2, #287	; 0x11f
 8012142:	496f      	ldr	r1, [pc, #444]	; (8012300 <tcp_input+0x544>)
 8012144:	486a      	ldr	r0, [pc, #424]	; (80122f0 <tcp_input+0x534>)
 8012146:	f009 f895 	bl	801b274 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801214a:	69fb      	ldr	r3, [r7, #28]
 801214c:	7a1b      	ldrb	r3, [r3, #8]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d009      	beq.n	8012166 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012152:	69fb      	ldr	r3, [r7, #28]
 8012154:	7a1a      	ldrb	r2, [r3, #8]
 8012156:	4b63      	ldr	r3, [pc, #396]	; (80122e4 <tcp_input+0x528>)
 8012158:	685b      	ldr	r3, [r3, #4]
 801215a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801215e:	3301      	adds	r3, #1
 8012160:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012162:	429a      	cmp	r2, r3
 8012164:	d122      	bne.n	80121ac <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012166:	69fb      	ldr	r3, [r7, #28]
 8012168:	8b1a      	ldrh	r2, [r3, #24]
 801216a:	4b5d      	ldr	r3, [pc, #372]	; (80122e0 <tcp_input+0x524>)
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	881b      	ldrh	r3, [r3, #0]
 8012170:	b29b      	uxth	r3, r3
 8012172:	429a      	cmp	r2, r3
 8012174:	d11b      	bne.n	80121ae <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012176:	69fb      	ldr	r3, [r7, #28]
 8012178:	8ada      	ldrh	r2, [r3, #22]
 801217a:	4b59      	ldr	r3, [pc, #356]	; (80122e0 <tcp_input+0x524>)
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	885b      	ldrh	r3, [r3, #2]
 8012180:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012182:	429a      	cmp	r2, r3
 8012184:	d113      	bne.n	80121ae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012186:	69fb      	ldr	r3, [r7, #28]
 8012188:	685a      	ldr	r2, [r3, #4]
 801218a:	4b56      	ldr	r3, [pc, #344]	; (80122e4 <tcp_input+0x528>)
 801218c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801218e:	429a      	cmp	r2, r3
 8012190:	d10d      	bne.n	80121ae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012192:	69fb      	ldr	r3, [r7, #28]
 8012194:	681a      	ldr	r2, [r3, #0]
 8012196:	4b53      	ldr	r3, [pc, #332]	; (80122e4 <tcp_input+0x528>)
 8012198:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801219a:	429a      	cmp	r2, r3
 801219c:	d107      	bne.n	80121ae <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801219e:	69f8      	ldr	r0, [r7, #28]
 80121a0:	f000 fb52 	bl	8012848 <tcp_timewait_input>
        }
        pbuf_free(p);
 80121a4:	6878      	ldr	r0, [r7, #4]
 80121a6:	f7fd ffdd 	bl	8010164 <pbuf_free>
        return;
 80121aa:	e1ee      	b.n	801258a <tcp_input+0x7ce>
        continue;
 80121ac:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80121ae:	69fb      	ldr	r3, [r7, #28]
 80121b0:	68db      	ldr	r3, [r3, #12]
 80121b2:	61fb      	str	r3, [r7, #28]
 80121b4:	69fb      	ldr	r3, [r7, #28]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d1bc      	bne.n	8012134 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80121ba:	2300      	movs	r3, #0
 80121bc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80121be:	4b51      	ldr	r3, [pc, #324]	; (8012304 <tcp_input+0x548>)
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	617b      	str	r3, [r7, #20]
 80121c4:	e02a      	b.n	801221c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80121c6:	697b      	ldr	r3, [r7, #20]
 80121c8:	7a1b      	ldrb	r3, [r3, #8]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d00c      	beq.n	80121e8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80121ce:	697b      	ldr	r3, [r7, #20]
 80121d0:	7a1a      	ldrb	r2, [r3, #8]
 80121d2:	4b44      	ldr	r3, [pc, #272]	; (80122e4 <tcp_input+0x528>)
 80121d4:	685b      	ldr	r3, [r3, #4]
 80121d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80121da:	3301      	adds	r3, #1
 80121dc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80121de:	429a      	cmp	r2, r3
 80121e0:	d002      	beq.n	80121e8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80121e2:	697b      	ldr	r3, [r7, #20]
 80121e4:	61bb      	str	r3, [r7, #24]
        continue;
 80121e6:	e016      	b.n	8012216 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80121e8:	697b      	ldr	r3, [r7, #20]
 80121ea:	8ada      	ldrh	r2, [r3, #22]
 80121ec:	4b3c      	ldr	r3, [pc, #240]	; (80122e0 <tcp_input+0x524>)
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	885b      	ldrh	r3, [r3, #2]
 80121f2:	b29b      	uxth	r3, r3
 80121f4:	429a      	cmp	r2, r3
 80121f6:	d10c      	bne.n	8012212 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80121f8:	697b      	ldr	r3, [r7, #20]
 80121fa:	681a      	ldr	r2, [r3, #0]
 80121fc:	4b39      	ldr	r3, [pc, #228]	; (80122e4 <tcp_input+0x528>)
 80121fe:	695b      	ldr	r3, [r3, #20]
 8012200:	429a      	cmp	r2, r3
 8012202:	d00f      	beq.n	8012224 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012204:	697b      	ldr	r3, [r7, #20]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d00d      	beq.n	8012226 <tcp_input+0x46a>
 801220a:	697b      	ldr	r3, [r7, #20]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d009      	beq.n	8012226 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012212:	697b      	ldr	r3, [r7, #20]
 8012214:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012216:	697b      	ldr	r3, [r7, #20]
 8012218:	68db      	ldr	r3, [r3, #12]
 801221a:	617b      	str	r3, [r7, #20]
 801221c:	697b      	ldr	r3, [r7, #20]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d1d1      	bne.n	80121c6 <tcp_input+0x40a>
 8012222:	e000      	b.n	8012226 <tcp_input+0x46a>
            break;
 8012224:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012226:	697b      	ldr	r3, [r7, #20]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d014      	beq.n	8012256 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801222c:	69bb      	ldr	r3, [r7, #24]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d00a      	beq.n	8012248 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012232:	697b      	ldr	r3, [r7, #20]
 8012234:	68da      	ldr	r2, [r3, #12]
 8012236:	69bb      	ldr	r3, [r7, #24]
 8012238:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801223a:	4b32      	ldr	r3, [pc, #200]	; (8012304 <tcp_input+0x548>)
 801223c:	681a      	ldr	r2, [r3, #0]
 801223e:	697b      	ldr	r3, [r7, #20]
 8012240:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012242:	4a30      	ldr	r2, [pc, #192]	; (8012304 <tcp_input+0x548>)
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012248:	6978      	ldr	r0, [r7, #20]
 801224a:	f000 f9ff 	bl	801264c <tcp_listen_input>
      }
      pbuf_free(p);
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	f7fd ff88 	bl	8010164 <pbuf_free>
      return;
 8012254:	e199      	b.n	801258a <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012256:	69fb      	ldr	r3, [r7, #28]
 8012258:	2b00      	cmp	r3, #0
 801225a:	f000 8160 	beq.w	801251e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801225e:	4b2a      	ldr	r3, [pc, #168]	; (8012308 <tcp_input+0x54c>)
 8012260:	2200      	movs	r2, #0
 8012262:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	891a      	ldrh	r2, [r3, #8]
 8012268:	4b27      	ldr	r3, [pc, #156]	; (8012308 <tcp_input+0x54c>)
 801226a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801226c:	4a26      	ldr	r2, [pc, #152]	; (8012308 <tcp_input+0x54c>)
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012272:	4b1b      	ldr	r3, [pc, #108]	; (80122e0 <tcp_input+0x524>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	4a24      	ldr	r2, [pc, #144]	; (8012308 <tcp_input+0x54c>)
 8012278:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801227a:	4b24      	ldr	r3, [pc, #144]	; (801230c <tcp_input+0x550>)
 801227c:	2200      	movs	r2, #0
 801227e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012280:	4b23      	ldr	r3, [pc, #140]	; (8012310 <tcp_input+0x554>)
 8012282:	2200      	movs	r2, #0
 8012284:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012286:	4b23      	ldr	r3, [pc, #140]	; (8012314 <tcp_input+0x558>)
 8012288:	2200      	movs	r2, #0
 801228a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801228c:	4b22      	ldr	r3, [pc, #136]	; (8012318 <tcp_input+0x55c>)
 801228e:	781b      	ldrb	r3, [r3, #0]
 8012290:	f003 0308 	and.w	r3, r3, #8
 8012294:	2b00      	cmp	r3, #0
 8012296:	d006      	beq.n	80122a6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	7b5b      	ldrb	r3, [r3, #13]
 801229c:	f043 0301 	orr.w	r3, r3, #1
 80122a0:	b2da      	uxtb	r2, r3
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80122a6:	69fb      	ldr	r3, [r7, #28]
 80122a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d038      	beq.n	8012320 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80122ae:	69f8      	ldr	r0, [r7, #28]
 80122b0:	f7ff f940 	bl	8011534 <tcp_process_refused_data>
 80122b4:	4603      	mov	r3, r0
 80122b6:	f113 0f0d 	cmn.w	r3, #13
 80122ba:	d007      	beq.n	80122cc <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80122bc:	69fb      	ldr	r3, [r7, #28]
 80122be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d02d      	beq.n	8012320 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80122c4:	4b15      	ldr	r3, [pc, #84]	; (801231c <tcp_input+0x560>)
 80122c6:	881b      	ldrh	r3, [r3, #0]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d029      	beq.n	8012320 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80122cc:	69fb      	ldr	r3, [r7, #28]
 80122ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	f040 8104 	bne.w	80124de <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80122d6:	69f8      	ldr	r0, [r7, #28]
 80122d8:	f003 f9ca 	bl	8015670 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80122dc:	e0ff      	b.n	80124de <tcp_input+0x722>
 80122de:	bf00      	nop
 80122e0:	200004e8 	.word	0x200004e8
 80122e4:	20004504 	.word	0x20004504
 80122e8:	08021978 	.word	0x08021978
 80122ec:	08021aa4 	.word	0x08021aa4
 80122f0:	080219c4 	.word	0x080219c4
 80122f4:	20007628 	.word	0x20007628
 80122f8:	08021ad0 	.word	0x08021ad0
 80122fc:	20007638 	.word	0x20007638
 8012300:	08021afc 	.word	0x08021afc
 8012304:	20007630 	.word	0x20007630
 8012308:	200004d8 	.word	0x200004d8
 801230c:	20000508 	.word	0x20000508
 8012310:	20000505 	.word	0x20000505
 8012314:	20000500 	.word	0x20000500
 8012318:	20000504 	.word	0x20000504
 801231c:	20000502 	.word	0x20000502
      }
    }
    tcp_input_pcb = pcb;
 8012320:	4a9b      	ldr	r2, [pc, #620]	; (8012590 <tcp_input+0x7d4>)
 8012322:	69fb      	ldr	r3, [r7, #28]
 8012324:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012326:	69f8      	ldr	r0, [r7, #28]
 8012328:	f000 fb0a 	bl	8012940 <tcp_process>
 801232c:	4603      	mov	r3, r0
 801232e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012330:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012334:	f113 0f0d 	cmn.w	r3, #13
 8012338:	f000 80d3 	beq.w	80124e2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801233c:	4b95      	ldr	r3, [pc, #596]	; (8012594 <tcp_input+0x7d8>)
 801233e:	781b      	ldrb	r3, [r3, #0]
 8012340:	f003 0308 	and.w	r3, r3, #8
 8012344:	2b00      	cmp	r3, #0
 8012346:	d015      	beq.n	8012374 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012348:	69fb      	ldr	r3, [r7, #28]
 801234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801234e:	2b00      	cmp	r3, #0
 8012350:	d008      	beq.n	8012364 <tcp_input+0x5a8>
 8012352:	69fb      	ldr	r3, [r7, #28]
 8012354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012358:	69fa      	ldr	r2, [r7, #28]
 801235a:	6912      	ldr	r2, [r2, #16]
 801235c:	f06f 010d 	mvn.w	r1, #13
 8012360:	4610      	mov	r0, r2
 8012362:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012364:	69f9      	ldr	r1, [r7, #28]
 8012366:	488c      	ldr	r0, [pc, #560]	; (8012598 <tcp_input+0x7dc>)
 8012368:	f7ff fbb0 	bl	8011acc <tcp_pcb_remove>
        tcp_free(pcb);
 801236c:	69f8      	ldr	r0, [r7, #28]
 801236e:	f7fe f9a9 	bl	80106c4 <tcp_free>
 8012372:	e0c1      	b.n	80124f8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8012374:	2300      	movs	r3, #0
 8012376:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012378:	4b88      	ldr	r3, [pc, #544]	; (801259c <tcp_input+0x7e0>)
 801237a:	881b      	ldrh	r3, [r3, #0]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d01d      	beq.n	80123bc <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012380:	4b86      	ldr	r3, [pc, #536]	; (801259c <tcp_input+0x7e0>)
 8012382:	881b      	ldrh	r3, [r3, #0]
 8012384:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012386:	69fb      	ldr	r3, [r7, #28]
 8012388:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801238c:	2b00      	cmp	r3, #0
 801238e:	d00a      	beq.n	80123a6 <tcp_input+0x5ea>
 8012390:	69fb      	ldr	r3, [r7, #28]
 8012392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012396:	69fa      	ldr	r2, [r7, #28]
 8012398:	6910      	ldr	r0, [r2, #16]
 801239a:	89fa      	ldrh	r2, [r7, #14]
 801239c:	69f9      	ldr	r1, [r7, #28]
 801239e:	4798      	blx	r3
 80123a0:	4603      	mov	r3, r0
 80123a2:	74fb      	strb	r3, [r7, #19]
 80123a4:	e001      	b.n	80123aa <tcp_input+0x5ee>
 80123a6:	2300      	movs	r3, #0
 80123a8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80123aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80123ae:	f113 0f0d 	cmn.w	r3, #13
 80123b2:	f000 8098 	beq.w	80124e6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80123b6:	4b79      	ldr	r3, [pc, #484]	; (801259c <tcp_input+0x7e0>)
 80123b8:	2200      	movs	r2, #0
 80123ba:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80123bc:	69f8      	ldr	r0, [r7, #28]
 80123be:	f000 f905 	bl	80125cc <tcp_input_delayed_close>
 80123c2:	4603      	mov	r3, r0
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	f040 8090 	bne.w	80124ea <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80123ca:	4b75      	ldr	r3, [pc, #468]	; (80125a0 <tcp_input+0x7e4>)
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d041      	beq.n	8012456 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80123d2:	69fb      	ldr	r3, [r7, #28]
 80123d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d006      	beq.n	80123e8 <tcp_input+0x62c>
 80123da:	4b72      	ldr	r3, [pc, #456]	; (80125a4 <tcp_input+0x7e8>)
 80123dc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80123e0:	4971      	ldr	r1, [pc, #452]	; (80125a8 <tcp_input+0x7ec>)
 80123e2:	4872      	ldr	r0, [pc, #456]	; (80125ac <tcp_input+0x7f0>)
 80123e4:	f008 ff46 	bl	801b274 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80123e8:	69fb      	ldr	r3, [r7, #28]
 80123ea:	8b5b      	ldrh	r3, [r3, #26]
 80123ec:	f003 0310 	and.w	r3, r3, #16
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d008      	beq.n	8012406 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80123f4:	4b6a      	ldr	r3, [pc, #424]	; (80125a0 <tcp_input+0x7e4>)
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	4618      	mov	r0, r3
 80123fa:	f7fd feb3 	bl	8010164 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80123fe:	69f8      	ldr	r0, [r7, #28]
 8012400:	f7fe fc40 	bl	8010c84 <tcp_abort>
            goto aborted;
 8012404:	e078      	b.n	80124f8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012406:	69fb      	ldr	r3, [r7, #28]
 8012408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801240c:	2b00      	cmp	r3, #0
 801240e:	d00c      	beq.n	801242a <tcp_input+0x66e>
 8012410:	69fb      	ldr	r3, [r7, #28]
 8012412:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012416:	69fb      	ldr	r3, [r7, #28]
 8012418:	6918      	ldr	r0, [r3, #16]
 801241a:	4b61      	ldr	r3, [pc, #388]	; (80125a0 <tcp_input+0x7e4>)
 801241c:	681a      	ldr	r2, [r3, #0]
 801241e:	2300      	movs	r3, #0
 8012420:	69f9      	ldr	r1, [r7, #28]
 8012422:	47a0      	blx	r4
 8012424:	4603      	mov	r3, r0
 8012426:	74fb      	strb	r3, [r7, #19]
 8012428:	e008      	b.n	801243c <tcp_input+0x680>
 801242a:	4b5d      	ldr	r3, [pc, #372]	; (80125a0 <tcp_input+0x7e4>)
 801242c:	681a      	ldr	r2, [r3, #0]
 801242e:	2300      	movs	r3, #0
 8012430:	69f9      	ldr	r1, [r7, #28]
 8012432:	2000      	movs	r0, #0
 8012434:	f7ff f952 	bl	80116dc <tcp_recv_null>
 8012438:	4603      	mov	r3, r0
 801243a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801243c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012440:	f113 0f0d 	cmn.w	r3, #13
 8012444:	d053      	beq.n	80124ee <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012446:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d003      	beq.n	8012456 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801244e:	4b54      	ldr	r3, [pc, #336]	; (80125a0 <tcp_input+0x7e4>)
 8012450:	681a      	ldr	r2, [r3, #0]
 8012452:	69fb      	ldr	r3, [r7, #28]
 8012454:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012456:	4b4f      	ldr	r3, [pc, #316]	; (8012594 <tcp_input+0x7d8>)
 8012458:	781b      	ldrb	r3, [r3, #0]
 801245a:	f003 0320 	and.w	r3, r3, #32
 801245e:	2b00      	cmp	r3, #0
 8012460:	d030      	beq.n	80124c4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8012462:	69fb      	ldr	r3, [r7, #28]
 8012464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012466:	2b00      	cmp	r3, #0
 8012468:	d009      	beq.n	801247e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801246a:	69fb      	ldr	r3, [r7, #28]
 801246c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801246e:	7b5a      	ldrb	r2, [r3, #13]
 8012470:	69fb      	ldr	r3, [r7, #28]
 8012472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012474:	f042 0220 	orr.w	r2, r2, #32
 8012478:	b2d2      	uxtb	r2, r2
 801247a:	735a      	strb	r2, [r3, #13]
 801247c:	e022      	b.n	80124c4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801247e:	69fb      	ldr	r3, [r7, #28]
 8012480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012486:	d005      	beq.n	8012494 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8012488:	69fb      	ldr	r3, [r7, #28]
 801248a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801248c:	3301      	adds	r3, #1
 801248e:	b29a      	uxth	r2, r3
 8012490:	69fb      	ldr	r3, [r7, #28]
 8012492:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012494:	69fb      	ldr	r3, [r7, #28]
 8012496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801249a:	2b00      	cmp	r3, #0
 801249c:	d00b      	beq.n	80124b6 <tcp_input+0x6fa>
 801249e:	69fb      	ldr	r3, [r7, #28]
 80124a0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80124a4:	69fb      	ldr	r3, [r7, #28]
 80124a6:	6918      	ldr	r0, [r3, #16]
 80124a8:	2300      	movs	r3, #0
 80124aa:	2200      	movs	r2, #0
 80124ac:	69f9      	ldr	r1, [r7, #28]
 80124ae:	47a0      	blx	r4
 80124b0:	4603      	mov	r3, r0
 80124b2:	74fb      	strb	r3, [r7, #19]
 80124b4:	e001      	b.n	80124ba <tcp_input+0x6fe>
 80124b6:	2300      	movs	r3, #0
 80124b8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80124ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80124be:	f113 0f0d 	cmn.w	r3, #13
 80124c2:	d016      	beq.n	80124f2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80124c4:	4b32      	ldr	r3, [pc, #200]	; (8012590 <tcp_input+0x7d4>)
 80124c6:	2200      	movs	r2, #0
 80124c8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80124ca:	69f8      	ldr	r0, [r7, #28]
 80124cc:	f000 f87e 	bl	80125cc <tcp_input_delayed_close>
 80124d0:	4603      	mov	r3, r0
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d10f      	bne.n	80124f6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80124d6:	69f8      	ldr	r0, [r7, #28]
 80124d8:	f002 fab6 	bl	8014a48 <tcp_output>
 80124dc:	e00c      	b.n	80124f8 <tcp_input+0x73c>
        goto aborted;
 80124de:	bf00      	nop
 80124e0:	e00a      	b.n	80124f8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80124e2:	bf00      	nop
 80124e4:	e008      	b.n	80124f8 <tcp_input+0x73c>
              goto aborted;
 80124e6:	bf00      	nop
 80124e8:	e006      	b.n	80124f8 <tcp_input+0x73c>
          goto aborted;
 80124ea:	bf00      	nop
 80124ec:	e004      	b.n	80124f8 <tcp_input+0x73c>
            goto aborted;
 80124ee:	bf00      	nop
 80124f0:	e002      	b.n	80124f8 <tcp_input+0x73c>
              goto aborted;
 80124f2:	bf00      	nop
 80124f4:	e000      	b.n	80124f8 <tcp_input+0x73c>
          goto aborted;
 80124f6:	bf00      	nop
    tcp_input_pcb = NULL;
 80124f8:	4b25      	ldr	r3, [pc, #148]	; (8012590 <tcp_input+0x7d4>)
 80124fa:	2200      	movs	r2, #0
 80124fc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80124fe:	4b28      	ldr	r3, [pc, #160]	; (80125a0 <tcp_input+0x7e4>)
 8012500:	2200      	movs	r2, #0
 8012502:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012504:	4b2a      	ldr	r3, [pc, #168]	; (80125b0 <tcp_input+0x7f4>)
 8012506:	685b      	ldr	r3, [r3, #4]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d03d      	beq.n	8012588 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 801250c:	4b28      	ldr	r3, [pc, #160]	; (80125b0 <tcp_input+0x7f4>)
 801250e:	685b      	ldr	r3, [r3, #4]
 8012510:	4618      	mov	r0, r3
 8012512:	f7fd fe27 	bl	8010164 <pbuf_free>
      inseg.p = NULL;
 8012516:	4b26      	ldr	r3, [pc, #152]	; (80125b0 <tcp_input+0x7f4>)
 8012518:	2200      	movs	r2, #0
 801251a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801251c:	e034      	b.n	8012588 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801251e:	4b25      	ldr	r3, [pc, #148]	; (80125b4 <tcp_input+0x7f8>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	899b      	ldrh	r3, [r3, #12]
 8012524:	b29b      	uxth	r3, r3
 8012526:	4618      	mov	r0, r3
 8012528:	f7fc fb84 	bl	800ec34 <lwip_htons>
 801252c:	4603      	mov	r3, r0
 801252e:	b2db      	uxtb	r3, r3
 8012530:	f003 0304 	and.w	r3, r3, #4
 8012534:	2b00      	cmp	r3, #0
 8012536:	d118      	bne.n	801256a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012538:	4b1f      	ldr	r3, [pc, #124]	; (80125b8 <tcp_input+0x7fc>)
 801253a:	6819      	ldr	r1, [r3, #0]
 801253c:	4b1f      	ldr	r3, [pc, #124]	; (80125bc <tcp_input+0x800>)
 801253e:	881b      	ldrh	r3, [r3, #0]
 8012540:	461a      	mov	r2, r3
 8012542:	4b1f      	ldr	r3, [pc, #124]	; (80125c0 <tcp_input+0x804>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012548:	4b1a      	ldr	r3, [pc, #104]	; (80125b4 <tcp_input+0x7f8>)
 801254a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801254c:	885b      	ldrh	r3, [r3, #2]
 801254e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012550:	4a18      	ldr	r2, [pc, #96]	; (80125b4 <tcp_input+0x7f8>)
 8012552:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012554:	8812      	ldrh	r2, [r2, #0]
 8012556:	b292      	uxth	r2, r2
 8012558:	9202      	str	r2, [sp, #8]
 801255a:	9301      	str	r3, [sp, #4]
 801255c:	4b19      	ldr	r3, [pc, #100]	; (80125c4 <tcp_input+0x808>)
 801255e:	9300      	str	r3, [sp, #0]
 8012560:	4b19      	ldr	r3, [pc, #100]	; (80125c8 <tcp_input+0x80c>)
 8012562:	4602      	mov	r2, r0
 8012564:	2000      	movs	r0, #0
 8012566:	f003 f833 	bl	80155d0 <tcp_rst>
    pbuf_free(p);
 801256a:	6878      	ldr	r0, [r7, #4]
 801256c:	f7fd fdfa 	bl	8010164 <pbuf_free>
  return;
 8012570:	e00a      	b.n	8012588 <tcp_input+0x7cc>
    goto dropped;
 8012572:	bf00      	nop
 8012574:	e004      	b.n	8012580 <tcp_input+0x7c4>
dropped:
 8012576:	bf00      	nop
 8012578:	e002      	b.n	8012580 <tcp_input+0x7c4>
      goto dropped;
 801257a:	bf00      	nop
 801257c:	e000      	b.n	8012580 <tcp_input+0x7c4>
      goto dropped;
 801257e:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f7fd fdef 	bl	8010164 <pbuf_free>
 8012586:	e000      	b.n	801258a <tcp_input+0x7ce>
  return;
 8012588:	bf00      	nop
}
 801258a:	3724      	adds	r7, #36	; 0x24
 801258c:	46bd      	mov	sp, r7
 801258e:	bd90      	pop	{r4, r7, pc}
 8012590:	2000763c 	.word	0x2000763c
 8012594:	20000505 	.word	0x20000505
 8012598:	20007628 	.word	0x20007628
 801259c:	20000500 	.word	0x20000500
 80125a0:	20000508 	.word	0x20000508
 80125a4:	08021978 	.word	0x08021978
 80125a8:	08021b2c 	.word	0x08021b2c
 80125ac:	080219c4 	.word	0x080219c4
 80125b0:	200004d8 	.word	0x200004d8
 80125b4:	200004e8 	.word	0x200004e8
 80125b8:	200004fc 	.word	0x200004fc
 80125bc:	20000502 	.word	0x20000502
 80125c0:	200004f8 	.word	0x200004f8
 80125c4:	20004514 	.word	0x20004514
 80125c8:	20004518 	.word	0x20004518

080125cc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b082      	sub	sp, #8
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d106      	bne.n	80125e8 <tcp_input_delayed_close+0x1c>
 80125da:	4b17      	ldr	r3, [pc, #92]	; (8012638 <tcp_input_delayed_close+0x6c>)
 80125dc:	f240 225a 	movw	r2, #602	; 0x25a
 80125e0:	4916      	ldr	r1, [pc, #88]	; (801263c <tcp_input_delayed_close+0x70>)
 80125e2:	4817      	ldr	r0, [pc, #92]	; (8012640 <tcp_input_delayed_close+0x74>)
 80125e4:	f008 fe46 	bl	801b274 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80125e8:	4b16      	ldr	r3, [pc, #88]	; (8012644 <tcp_input_delayed_close+0x78>)
 80125ea:	781b      	ldrb	r3, [r3, #0]
 80125ec:	f003 0310 	and.w	r3, r3, #16
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d01c      	beq.n	801262e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	8b5b      	ldrh	r3, [r3, #26]
 80125f8:	f003 0310 	and.w	r3, r3, #16
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d10d      	bne.n	801261c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012606:	2b00      	cmp	r3, #0
 8012608:	d008      	beq.n	801261c <tcp_input_delayed_close+0x50>
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012610:	687a      	ldr	r2, [r7, #4]
 8012612:	6912      	ldr	r2, [r2, #16]
 8012614:	f06f 010e 	mvn.w	r1, #14
 8012618:	4610      	mov	r0, r2
 801261a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801261c:	6879      	ldr	r1, [r7, #4]
 801261e:	480a      	ldr	r0, [pc, #40]	; (8012648 <tcp_input_delayed_close+0x7c>)
 8012620:	f7ff fa54 	bl	8011acc <tcp_pcb_remove>
    tcp_free(pcb);
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f7fe f84d 	bl	80106c4 <tcp_free>
    return 1;
 801262a:	2301      	movs	r3, #1
 801262c:	e000      	b.n	8012630 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801262e:	2300      	movs	r3, #0
}
 8012630:	4618      	mov	r0, r3
 8012632:	3708      	adds	r7, #8
 8012634:	46bd      	mov	sp, r7
 8012636:	bd80      	pop	{r7, pc}
 8012638:	08021978 	.word	0x08021978
 801263c:	08021b48 	.word	0x08021b48
 8012640:	080219c4 	.word	0x080219c4
 8012644:	20000505 	.word	0x20000505
 8012648:	20007628 	.word	0x20007628

0801264c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801264c:	b590      	push	{r4, r7, lr}
 801264e:	b08b      	sub	sp, #44	; 0x2c
 8012650:	af04      	add	r7, sp, #16
 8012652:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012654:	4b6f      	ldr	r3, [pc, #444]	; (8012814 <tcp_listen_input+0x1c8>)
 8012656:	781b      	ldrb	r3, [r3, #0]
 8012658:	f003 0304 	and.w	r3, r3, #4
 801265c:	2b00      	cmp	r3, #0
 801265e:	f040 80d3 	bne.w	8012808 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d106      	bne.n	8012676 <tcp_listen_input+0x2a>
 8012668:	4b6b      	ldr	r3, [pc, #428]	; (8012818 <tcp_listen_input+0x1cc>)
 801266a:	f240 2281 	movw	r2, #641	; 0x281
 801266e:	496b      	ldr	r1, [pc, #428]	; (801281c <tcp_listen_input+0x1d0>)
 8012670:	486b      	ldr	r0, [pc, #428]	; (8012820 <tcp_listen_input+0x1d4>)
 8012672:	f008 fdff 	bl	801b274 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012676:	4b67      	ldr	r3, [pc, #412]	; (8012814 <tcp_listen_input+0x1c8>)
 8012678:	781b      	ldrb	r3, [r3, #0]
 801267a:	f003 0310 	and.w	r3, r3, #16
 801267e:	2b00      	cmp	r3, #0
 8012680:	d019      	beq.n	80126b6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012682:	4b68      	ldr	r3, [pc, #416]	; (8012824 <tcp_listen_input+0x1d8>)
 8012684:	6819      	ldr	r1, [r3, #0]
 8012686:	4b68      	ldr	r3, [pc, #416]	; (8012828 <tcp_listen_input+0x1dc>)
 8012688:	881b      	ldrh	r3, [r3, #0]
 801268a:	461a      	mov	r2, r3
 801268c:	4b67      	ldr	r3, [pc, #412]	; (801282c <tcp_listen_input+0x1e0>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012692:	4b67      	ldr	r3, [pc, #412]	; (8012830 <tcp_listen_input+0x1e4>)
 8012694:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012696:	885b      	ldrh	r3, [r3, #2]
 8012698:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801269a:	4a65      	ldr	r2, [pc, #404]	; (8012830 <tcp_listen_input+0x1e4>)
 801269c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801269e:	8812      	ldrh	r2, [r2, #0]
 80126a0:	b292      	uxth	r2, r2
 80126a2:	9202      	str	r2, [sp, #8]
 80126a4:	9301      	str	r3, [sp, #4]
 80126a6:	4b63      	ldr	r3, [pc, #396]	; (8012834 <tcp_listen_input+0x1e8>)
 80126a8:	9300      	str	r3, [sp, #0]
 80126aa:	4b63      	ldr	r3, [pc, #396]	; (8012838 <tcp_listen_input+0x1ec>)
 80126ac:	4602      	mov	r2, r0
 80126ae:	6878      	ldr	r0, [r7, #4]
 80126b0:	f002 ff8e 	bl	80155d0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80126b4:	e0aa      	b.n	801280c <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 80126b6:	4b57      	ldr	r3, [pc, #348]	; (8012814 <tcp_listen_input+0x1c8>)
 80126b8:	781b      	ldrb	r3, [r3, #0]
 80126ba:	f003 0302 	and.w	r3, r3, #2
 80126be:	2b00      	cmp	r3, #0
 80126c0:	f000 80a4 	beq.w	801280c <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	7d5b      	ldrb	r3, [r3, #21]
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7ff f92b 	bl	8011924 <tcp_alloc>
 80126ce:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80126d0:	697b      	ldr	r3, [r7, #20]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d111      	bne.n	80126fa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	699b      	ldr	r3, [r3, #24]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d00a      	beq.n	80126f4 <tcp_listen_input+0xa8>
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	699b      	ldr	r3, [r3, #24]
 80126e2:	687a      	ldr	r2, [r7, #4]
 80126e4:	6910      	ldr	r0, [r2, #16]
 80126e6:	f04f 32ff 	mov.w	r2, #4294967295
 80126ea:	2100      	movs	r1, #0
 80126ec:	4798      	blx	r3
 80126ee:	4603      	mov	r3, r0
 80126f0:	73bb      	strb	r3, [r7, #14]
      return;
 80126f2:	e08c      	b.n	801280e <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80126f4:	23f0      	movs	r3, #240	; 0xf0
 80126f6:	73bb      	strb	r3, [r7, #14]
      return;
 80126f8:	e089      	b.n	801280e <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80126fa:	4b50      	ldr	r3, [pc, #320]	; (801283c <tcp_listen_input+0x1f0>)
 80126fc:	695a      	ldr	r2, [r3, #20]
 80126fe:	697b      	ldr	r3, [r7, #20]
 8012700:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012702:	4b4e      	ldr	r3, [pc, #312]	; (801283c <tcp_listen_input+0x1f0>)
 8012704:	691a      	ldr	r2, [r3, #16]
 8012706:	697b      	ldr	r3, [r7, #20]
 8012708:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	8ada      	ldrh	r2, [r3, #22]
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012712:	4b47      	ldr	r3, [pc, #284]	; (8012830 <tcp_listen_input+0x1e4>)
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	881b      	ldrh	r3, [r3, #0]
 8012718:	b29a      	uxth	r2, r3
 801271a:	697b      	ldr	r3, [r7, #20]
 801271c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801271e:	697b      	ldr	r3, [r7, #20]
 8012720:	2203      	movs	r2, #3
 8012722:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012724:	4b41      	ldr	r3, [pc, #260]	; (801282c <tcp_listen_input+0x1e0>)
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	1c5a      	adds	r2, r3, #1
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801272e:	697b      	ldr	r3, [r7, #20]
 8012730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012732:	697b      	ldr	r3, [r7, #20]
 8012734:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8012736:	6978      	ldr	r0, [r7, #20]
 8012738:	f7ff fa5c 	bl	8011bf4 <tcp_next_iss>
 801273c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801273e:	697b      	ldr	r3, [r7, #20]
 8012740:	693a      	ldr	r2, [r7, #16]
 8012742:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8012744:	697b      	ldr	r3, [r7, #20]
 8012746:	693a      	ldr	r2, [r7, #16]
 8012748:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801274a:	697b      	ldr	r3, [r7, #20]
 801274c:	693a      	ldr	r2, [r7, #16]
 801274e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8012750:	697b      	ldr	r3, [r7, #20]
 8012752:	693a      	ldr	r2, [r7, #16]
 8012754:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012756:	4b35      	ldr	r3, [pc, #212]	; (801282c <tcp_listen_input+0x1e0>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	1e5a      	subs	r2, r3, #1
 801275c:	697b      	ldr	r3, [r7, #20]
 801275e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	691a      	ldr	r2, [r3, #16]
 8012764:	697b      	ldr	r3, [r7, #20]
 8012766:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012768:	697b      	ldr	r3, [r7, #20]
 801276a:	687a      	ldr	r2, [r7, #4]
 801276c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	7a5b      	ldrb	r3, [r3, #9]
 8012772:	f003 030c 	and.w	r3, r3, #12
 8012776:	b2da      	uxtb	r2, r3
 8012778:	697b      	ldr	r3, [r7, #20]
 801277a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	7a1a      	ldrb	r2, [r3, #8]
 8012780:	697b      	ldr	r3, [r7, #20]
 8012782:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012784:	4b2e      	ldr	r3, [pc, #184]	; (8012840 <tcp_listen_input+0x1f4>)
 8012786:	681a      	ldr	r2, [r3, #0]
 8012788:	697b      	ldr	r3, [r7, #20]
 801278a:	60da      	str	r2, [r3, #12]
 801278c:	4a2c      	ldr	r2, [pc, #176]	; (8012840 <tcp_listen_input+0x1f4>)
 801278e:	697b      	ldr	r3, [r7, #20]
 8012790:	6013      	str	r3, [r2, #0]
 8012792:	f003 f8dd 	bl	8015950 <tcp_timer_needed>
 8012796:	4b2b      	ldr	r3, [pc, #172]	; (8012844 <tcp_listen_input+0x1f8>)
 8012798:	2201      	movs	r2, #1
 801279a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801279c:	6978      	ldr	r0, [r7, #20]
 801279e:	f001 fd8f 	bl	80142c0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80127a2:	4b23      	ldr	r3, [pc, #140]	; (8012830 <tcp_listen_input+0x1e4>)
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	89db      	ldrh	r3, [r3, #14]
 80127a8:	b29a      	uxth	r2, r3
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80127b0:	697b      	ldr	r3, [r7, #20]
 80127b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80127b6:	697b      	ldr	r3, [r7, #20]
 80127b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80127bc:	697b      	ldr	r3, [r7, #20]
 80127be:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	3304      	adds	r3, #4
 80127c4:	4618      	mov	r0, r3
 80127c6:	f006 fdb7 	bl	8019338 <ip4_route>
 80127ca:	4601      	mov	r1, r0
 80127cc:	697b      	ldr	r3, [r7, #20]
 80127ce:	3304      	adds	r3, #4
 80127d0:	461a      	mov	r2, r3
 80127d2:	4620      	mov	r0, r4
 80127d4:	f7ff fa34 	bl	8011c40 <tcp_eff_send_mss_netif>
 80127d8:	4603      	mov	r3, r0
 80127da:	461a      	mov	r2, r3
 80127dc:	697b      	ldr	r3, [r7, #20]
 80127de:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80127e0:	2112      	movs	r1, #18
 80127e2:	6978      	ldr	r0, [r7, #20]
 80127e4:	f002 f842 	bl	801486c <tcp_enqueue_flags>
 80127e8:	4603      	mov	r3, r0
 80127ea:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80127ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d004      	beq.n	80127fe <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80127f4:	2100      	movs	r1, #0
 80127f6:	6978      	ldr	r0, [r7, #20]
 80127f8:	f7fe f986 	bl	8010b08 <tcp_abandon>
      return;
 80127fc:	e007      	b.n	801280e <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 80127fe:	6978      	ldr	r0, [r7, #20]
 8012800:	f002 f922 	bl	8014a48 <tcp_output>
  return;
 8012804:	bf00      	nop
 8012806:	e001      	b.n	801280c <tcp_listen_input+0x1c0>
    return;
 8012808:	bf00      	nop
 801280a:	e000      	b.n	801280e <tcp_listen_input+0x1c2>
  return;
 801280c:	bf00      	nop
}
 801280e:	371c      	adds	r7, #28
 8012810:	46bd      	mov	sp, r7
 8012812:	bd90      	pop	{r4, r7, pc}
 8012814:	20000504 	.word	0x20000504
 8012818:	08021978 	.word	0x08021978
 801281c:	08021b70 	.word	0x08021b70
 8012820:	080219c4 	.word	0x080219c4
 8012824:	200004fc 	.word	0x200004fc
 8012828:	20000502 	.word	0x20000502
 801282c:	200004f8 	.word	0x200004f8
 8012830:	200004e8 	.word	0x200004e8
 8012834:	20004514 	.word	0x20004514
 8012838:	20004518 	.word	0x20004518
 801283c:	20004504 	.word	0x20004504
 8012840:	20007628 	.word	0x20007628
 8012844:	20007624 	.word	0x20007624

08012848 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b086      	sub	sp, #24
 801284c:	af04      	add	r7, sp, #16
 801284e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012850:	4b30      	ldr	r3, [pc, #192]	; (8012914 <tcp_timewait_input+0xcc>)
 8012852:	781b      	ldrb	r3, [r3, #0]
 8012854:	f003 0304 	and.w	r3, r3, #4
 8012858:	2b00      	cmp	r3, #0
 801285a:	d154      	bne.n	8012906 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d106      	bne.n	8012870 <tcp_timewait_input+0x28>
 8012862:	4b2d      	ldr	r3, [pc, #180]	; (8012918 <tcp_timewait_input+0xd0>)
 8012864:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012868:	492c      	ldr	r1, [pc, #176]	; (801291c <tcp_timewait_input+0xd4>)
 801286a:	482d      	ldr	r0, [pc, #180]	; (8012920 <tcp_timewait_input+0xd8>)
 801286c:	f008 fd02 	bl	801b274 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012870:	4b28      	ldr	r3, [pc, #160]	; (8012914 <tcp_timewait_input+0xcc>)
 8012872:	781b      	ldrb	r3, [r3, #0]
 8012874:	f003 0302 	and.w	r3, r3, #2
 8012878:	2b00      	cmp	r3, #0
 801287a:	d02a      	beq.n	80128d2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801287c:	4b29      	ldr	r3, [pc, #164]	; (8012924 <tcp_timewait_input+0xdc>)
 801287e:	681a      	ldr	r2, [r3, #0]
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012884:	1ad3      	subs	r3, r2, r3
 8012886:	2b00      	cmp	r3, #0
 8012888:	db2d      	blt.n	80128e6 <tcp_timewait_input+0x9e>
 801288a:	4b26      	ldr	r3, [pc, #152]	; (8012924 <tcp_timewait_input+0xdc>)
 801288c:	681a      	ldr	r2, [r3, #0]
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012892:	6879      	ldr	r1, [r7, #4]
 8012894:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012896:	440b      	add	r3, r1
 8012898:	1ad3      	subs	r3, r2, r3
 801289a:	2b00      	cmp	r3, #0
 801289c:	dc23      	bgt.n	80128e6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801289e:	4b22      	ldr	r3, [pc, #136]	; (8012928 <tcp_timewait_input+0xe0>)
 80128a0:	6819      	ldr	r1, [r3, #0]
 80128a2:	4b22      	ldr	r3, [pc, #136]	; (801292c <tcp_timewait_input+0xe4>)
 80128a4:	881b      	ldrh	r3, [r3, #0]
 80128a6:	461a      	mov	r2, r3
 80128a8:	4b1e      	ldr	r3, [pc, #120]	; (8012924 <tcp_timewait_input+0xdc>)
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80128ae:	4b20      	ldr	r3, [pc, #128]	; (8012930 <tcp_timewait_input+0xe8>)
 80128b0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80128b2:	885b      	ldrh	r3, [r3, #2]
 80128b4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80128b6:	4a1e      	ldr	r2, [pc, #120]	; (8012930 <tcp_timewait_input+0xe8>)
 80128b8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80128ba:	8812      	ldrh	r2, [r2, #0]
 80128bc:	b292      	uxth	r2, r2
 80128be:	9202      	str	r2, [sp, #8]
 80128c0:	9301      	str	r3, [sp, #4]
 80128c2:	4b1c      	ldr	r3, [pc, #112]	; (8012934 <tcp_timewait_input+0xec>)
 80128c4:	9300      	str	r3, [sp, #0]
 80128c6:	4b1c      	ldr	r3, [pc, #112]	; (8012938 <tcp_timewait_input+0xf0>)
 80128c8:	4602      	mov	r2, r0
 80128ca:	6878      	ldr	r0, [r7, #4]
 80128cc:	f002 fe80 	bl	80155d0 <tcp_rst>
      return;
 80128d0:	e01c      	b.n	801290c <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 80128d2:	4b10      	ldr	r3, [pc, #64]	; (8012914 <tcp_timewait_input+0xcc>)
 80128d4:	781b      	ldrb	r3, [r3, #0]
 80128d6:	f003 0301 	and.w	r3, r3, #1
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d003      	beq.n	80128e6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80128de:	4b17      	ldr	r3, [pc, #92]	; (801293c <tcp_timewait_input+0xf4>)
 80128e0:	681a      	ldr	r2, [r3, #0]
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80128e6:	4b11      	ldr	r3, [pc, #68]	; (801292c <tcp_timewait_input+0xe4>)
 80128e8:	881b      	ldrh	r3, [r3, #0]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d00d      	beq.n	801290a <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	8b5b      	ldrh	r3, [r3, #26]
 80128f2:	f043 0302 	orr.w	r3, r3, #2
 80128f6:	b29a      	uxth	r2, r3
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	f002 f8a3 	bl	8014a48 <tcp_output>
  }
  return;
 8012902:	bf00      	nop
 8012904:	e001      	b.n	801290a <tcp_timewait_input+0xc2>
    return;
 8012906:	bf00      	nop
 8012908:	e000      	b.n	801290c <tcp_timewait_input+0xc4>
  return;
 801290a:	bf00      	nop
}
 801290c:	3708      	adds	r7, #8
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}
 8012912:	bf00      	nop
 8012914:	20000504 	.word	0x20000504
 8012918:	08021978 	.word	0x08021978
 801291c:	08021b90 	.word	0x08021b90
 8012920:	080219c4 	.word	0x080219c4
 8012924:	200004f8 	.word	0x200004f8
 8012928:	200004fc 	.word	0x200004fc
 801292c:	20000502 	.word	0x20000502
 8012930:	200004e8 	.word	0x200004e8
 8012934:	20004514 	.word	0x20004514
 8012938:	20004518 	.word	0x20004518
 801293c:	2000762c 	.word	0x2000762c

08012940 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012940:	b590      	push	{r4, r7, lr}
 8012942:	b08d      	sub	sp, #52	; 0x34
 8012944:	af04      	add	r7, sp, #16
 8012946:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012948:	2300      	movs	r3, #0
 801294a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801294c:	2300      	movs	r3, #0
 801294e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d106      	bne.n	8012964 <tcp_process+0x24>
 8012956:	4ba5      	ldr	r3, [pc, #660]	; (8012bec <tcp_process+0x2ac>)
 8012958:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801295c:	49a4      	ldr	r1, [pc, #656]	; (8012bf0 <tcp_process+0x2b0>)
 801295e:	48a5      	ldr	r0, [pc, #660]	; (8012bf4 <tcp_process+0x2b4>)
 8012960:	f008 fc88 	bl	801b274 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012964:	4ba4      	ldr	r3, [pc, #656]	; (8012bf8 <tcp_process+0x2b8>)
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	f003 0304 	and.w	r3, r3, #4
 801296c:	2b00      	cmp	r3, #0
 801296e:	d04e      	beq.n	8012a0e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	7d1b      	ldrb	r3, [r3, #20]
 8012974:	2b02      	cmp	r3, #2
 8012976:	d108      	bne.n	801298a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801297c:	4b9f      	ldr	r3, [pc, #636]	; (8012bfc <tcp_process+0x2bc>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	429a      	cmp	r2, r3
 8012982:	d123      	bne.n	80129cc <tcp_process+0x8c>
        acceptable = 1;
 8012984:	2301      	movs	r3, #1
 8012986:	76fb      	strb	r3, [r7, #27]
 8012988:	e020      	b.n	80129cc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801298e:	4b9c      	ldr	r3, [pc, #624]	; (8012c00 <tcp_process+0x2c0>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	429a      	cmp	r2, r3
 8012994:	d102      	bne.n	801299c <tcp_process+0x5c>
        acceptable = 1;
 8012996:	2301      	movs	r3, #1
 8012998:	76fb      	strb	r3, [r7, #27]
 801299a:	e017      	b.n	80129cc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801299c:	4b98      	ldr	r3, [pc, #608]	; (8012c00 <tcp_process+0x2c0>)
 801299e:	681a      	ldr	r2, [r3, #0]
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129a4:	1ad3      	subs	r3, r2, r3
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	db10      	blt.n	80129cc <tcp_process+0x8c>
 80129aa:	4b95      	ldr	r3, [pc, #596]	; (8012c00 <tcp_process+0x2c0>)
 80129ac:	681a      	ldr	r2, [r3, #0]
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129b2:	6879      	ldr	r1, [r7, #4]
 80129b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80129b6:	440b      	add	r3, r1
 80129b8:	1ad3      	subs	r3, r2, r3
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	dc06      	bgt.n	80129cc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	8b5b      	ldrh	r3, [r3, #26]
 80129c2:	f043 0302 	orr.w	r3, r3, #2
 80129c6:	b29a      	uxth	r2, r3
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80129cc:	7efb      	ldrb	r3, [r7, #27]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d01b      	beq.n	8012a0a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	7d1b      	ldrb	r3, [r3, #20]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d106      	bne.n	80129e8 <tcp_process+0xa8>
 80129da:	4b84      	ldr	r3, [pc, #528]	; (8012bec <tcp_process+0x2ac>)
 80129dc:	f44f 724e 	mov.w	r2, #824	; 0x338
 80129e0:	4988      	ldr	r1, [pc, #544]	; (8012c04 <tcp_process+0x2c4>)
 80129e2:	4884      	ldr	r0, [pc, #528]	; (8012bf4 <tcp_process+0x2b4>)
 80129e4:	f008 fc46 	bl	801b274 <iprintf>
      recv_flags |= TF_RESET;
 80129e8:	4b87      	ldr	r3, [pc, #540]	; (8012c08 <tcp_process+0x2c8>)
 80129ea:	781b      	ldrb	r3, [r3, #0]
 80129ec:	f043 0308 	orr.w	r3, r3, #8
 80129f0:	b2da      	uxtb	r2, r3
 80129f2:	4b85      	ldr	r3, [pc, #532]	; (8012c08 <tcp_process+0x2c8>)
 80129f4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	8b5b      	ldrh	r3, [r3, #26]
 80129fa:	f023 0301 	bic.w	r3, r3, #1
 80129fe:	b29a      	uxth	r2, r3
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012a04:	f06f 030d 	mvn.w	r3, #13
 8012a08:	e37a      	b.n	8013100 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	e378      	b.n	8013100 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012a0e:	4b7a      	ldr	r3, [pc, #488]	; (8012bf8 <tcp_process+0x2b8>)
 8012a10:	781b      	ldrb	r3, [r3, #0]
 8012a12:	f003 0302 	and.w	r3, r3, #2
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d010      	beq.n	8012a3c <tcp_process+0xfc>
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	7d1b      	ldrb	r3, [r3, #20]
 8012a1e:	2b02      	cmp	r3, #2
 8012a20:	d00c      	beq.n	8012a3c <tcp_process+0xfc>
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	7d1b      	ldrb	r3, [r3, #20]
 8012a26:	2b03      	cmp	r3, #3
 8012a28:	d008      	beq.n	8012a3c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	8b5b      	ldrh	r3, [r3, #26]
 8012a2e:	f043 0302 	orr.w	r3, r3, #2
 8012a32:	b29a      	uxth	r2, r3
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012a38:	2300      	movs	r3, #0
 8012a3a:	e361      	b.n	8013100 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	8b5b      	ldrh	r3, [r3, #26]
 8012a40:	f003 0310 	and.w	r3, r3, #16
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d103      	bne.n	8012a50 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012a48:	4b70      	ldr	r3, [pc, #448]	; (8012c0c <tcp_process+0x2cc>)
 8012a4a:	681a      	ldr	r2, [r3, #0]
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	2200      	movs	r2, #0
 8012a54:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f001 fc2d 	bl	80142c0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	7d1b      	ldrb	r3, [r3, #20]
 8012a6a:	3b02      	subs	r3, #2
 8012a6c:	2b07      	cmp	r3, #7
 8012a6e:	f200 8337 	bhi.w	80130e0 <tcp_process+0x7a0>
 8012a72:	a201      	add	r2, pc, #4	; (adr r2, 8012a78 <tcp_process+0x138>)
 8012a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a78:	08012a99 	.word	0x08012a99
 8012a7c:	08012cc9 	.word	0x08012cc9
 8012a80:	08012e41 	.word	0x08012e41
 8012a84:	08012e6b 	.word	0x08012e6b
 8012a88:	08012f8f 	.word	0x08012f8f
 8012a8c:	08012e41 	.word	0x08012e41
 8012a90:	0801301b 	.word	0x0801301b
 8012a94:	080130ab 	.word	0x080130ab
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012a98:	4b57      	ldr	r3, [pc, #348]	; (8012bf8 <tcp_process+0x2b8>)
 8012a9a:	781b      	ldrb	r3, [r3, #0]
 8012a9c:	f003 0310 	and.w	r3, r3, #16
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	f000 80e4 	beq.w	8012c6e <tcp_process+0x32e>
 8012aa6:	4b54      	ldr	r3, [pc, #336]	; (8012bf8 <tcp_process+0x2b8>)
 8012aa8:	781b      	ldrb	r3, [r3, #0]
 8012aaa:	f003 0302 	and.w	r3, r3, #2
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	f000 80dd 	beq.w	8012c6e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ab8:	1c5a      	adds	r2, r3, #1
 8012aba:	4b50      	ldr	r3, [pc, #320]	; (8012bfc <tcp_process+0x2bc>)
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	429a      	cmp	r2, r3
 8012ac0:	f040 80d5 	bne.w	8012c6e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012ac4:	4b4e      	ldr	r3, [pc, #312]	; (8012c00 <tcp_process+0x2c0>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	1c5a      	adds	r2, r3, #1
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012ad6:	4b49      	ldr	r3, [pc, #292]	; (8012bfc <tcp_process+0x2bc>)
 8012ad8:	681a      	ldr	r2, [r3, #0]
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012ade:	4b4c      	ldr	r3, [pc, #304]	; (8012c10 <tcp_process+0x2d0>)
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	89db      	ldrh	r3, [r3, #14]
 8012ae4:	b29a      	uxth	r2, r3
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012af8:	4b41      	ldr	r3, [pc, #260]	; (8012c00 <tcp_process+0x2c0>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	1e5a      	subs	r2, r3, #1
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	2204      	movs	r2, #4
 8012b06:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	3304      	adds	r3, #4
 8012b10:	4618      	mov	r0, r3
 8012b12:	f006 fc11 	bl	8019338 <ip4_route>
 8012b16:	4601      	mov	r1, r0
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	3304      	adds	r3, #4
 8012b1c:	461a      	mov	r2, r3
 8012b1e:	4620      	mov	r0, r4
 8012b20:	f7ff f88e 	bl	8011c40 <tcp_eff_send_mss_netif>
 8012b24:	4603      	mov	r3, r0
 8012b26:	461a      	mov	r2, r3
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b30:	009a      	lsls	r2, r3, #2
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b36:	005b      	lsls	r3, r3, #1
 8012b38:	f241 111c 	movw	r1, #4380	; 0x111c
 8012b3c:	428b      	cmp	r3, r1
 8012b3e:	bf38      	it	cc
 8012b40:	460b      	movcc	r3, r1
 8012b42:	429a      	cmp	r2, r3
 8012b44:	d204      	bcs.n	8012b50 <tcp_process+0x210>
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b4a:	009b      	lsls	r3, r3, #2
 8012b4c:	b29b      	uxth	r3, r3
 8012b4e:	e00d      	b.n	8012b6c <tcp_process+0x22c>
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b54:	005b      	lsls	r3, r3, #1
 8012b56:	f241 121c 	movw	r2, #4380	; 0x111c
 8012b5a:	4293      	cmp	r3, r2
 8012b5c:	d904      	bls.n	8012b68 <tcp_process+0x228>
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b62:	005b      	lsls	r3, r3, #1
 8012b64:	b29b      	uxth	r3, r3
 8012b66:	e001      	b.n	8012b6c <tcp_process+0x22c>
 8012b68:	f241 131c 	movw	r3, #4380	; 0x111c
 8012b6c:	687a      	ldr	r2, [r7, #4]
 8012b6e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d106      	bne.n	8012b8a <tcp_process+0x24a>
 8012b7c:	4b1b      	ldr	r3, [pc, #108]	; (8012bec <tcp_process+0x2ac>)
 8012b7e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8012b82:	4924      	ldr	r1, [pc, #144]	; (8012c14 <tcp_process+0x2d4>)
 8012b84:	481b      	ldr	r0, [pc, #108]	; (8012bf4 <tcp_process+0x2b4>)
 8012b86:	f008 fb75 	bl	801b274 <iprintf>
        --pcb->snd_queuelen;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b90:	3b01      	subs	r3, #1
 8012b92:	b29a      	uxth	r2, r3
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b9e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012ba0:	69fb      	ldr	r3, [r7, #28]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d111      	bne.n	8012bca <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012baa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012bac:	69fb      	ldr	r3, [r7, #28]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d106      	bne.n	8012bc0 <tcp_process+0x280>
 8012bb2:	4b0e      	ldr	r3, [pc, #56]	; (8012bec <tcp_process+0x2ac>)
 8012bb4:	f44f 725d 	mov.w	r2, #884	; 0x374
 8012bb8:	4917      	ldr	r1, [pc, #92]	; (8012c18 <tcp_process+0x2d8>)
 8012bba:	480e      	ldr	r0, [pc, #56]	; (8012bf4 <tcp_process+0x2b4>)
 8012bbc:	f008 fb5a 	bl	801b274 <iprintf>
          pcb->unsent = rseg->next;
 8012bc0:	69fb      	ldr	r3, [r7, #28]
 8012bc2:	681a      	ldr	r2, [r3, #0]
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	66da      	str	r2, [r3, #108]	; 0x6c
 8012bc8:	e003      	b.n	8012bd2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8012bca:	69fb      	ldr	r3, [r7, #28]
 8012bcc:	681a      	ldr	r2, [r3, #0]
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8012bd2:	69f8      	ldr	r0, [r7, #28]
 8012bd4:	f7fe fd3e 	bl	8011654 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d11d      	bne.n	8012c1c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012be6:	861a      	strh	r2, [r3, #48]	; 0x30
 8012be8:	e01f      	b.n	8012c2a <tcp_process+0x2ea>
 8012bea:	bf00      	nop
 8012bec:	08021978 	.word	0x08021978
 8012bf0:	08021bb0 	.word	0x08021bb0
 8012bf4:	080219c4 	.word	0x080219c4
 8012bf8:	20000504 	.word	0x20000504
 8012bfc:	200004fc 	.word	0x200004fc
 8012c00:	200004f8 	.word	0x200004f8
 8012c04:	08021bcc 	.word	0x08021bcc
 8012c08:	20000505 	.word	0x20000505
 8012c0c:	2000762c 	.word	0x2000762c
 8012c10:	200004e8 	.word	0x200004e8
 8012c14:	08021bec 	.word	0x08021bec
 8012c18:	08021c04 	.word	0x08021c04
        } else {
          pcb->rtime = 0;
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	2200      	movs	r2, #0
 8012c20:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	2200      	movs	r2, #0
 8012c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d00a      	beq.n	8012c4a <tcp_process+0x30a>
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012c3a:	687a      	ldr	r2, [r7, #4]
 8012c3c:	6910      	ldr	r0, [r2, #16]
 8012c3e:	2200      	movs	r2, #0
 8012c40:	6879      	ldr	r1, [r7, #4]
 8012c42:	4798      	blx	r3
 8012c44:	4603      	mov	r3, r0
 8012c46:	76bb      	strb	r3, [r7, #26]
 8012c48:	e001      	b.n	8012c4e <tcp_process+0x30e>
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8012c4e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012c52:	f113 0f0d 	cmn.w	r3, #13
 8012c56:	d102      	bne.n	8012c5e <tcp_process+0x31e>
          return ERR_ABRT;
 8012c58:	f06f 030c 	mvn.w	r3, #12
 8012c5c:	e250      	b.n	8013100 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	8b5b      	ldrh	r3, [r3, #26]
 8012c62:	f043 0302 	orr.w	r3, r3, #2
 8012c66:	b29a      	uxth	r2, r3
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012c6c:	e23a      	b.n	80130e4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012c6e:	4b9d      	ldr	r3, [pc, #628]	; (8012ee4 <tcp_process+0x5a4>)
 8012c70:	781b      	ldrb	r3, [r3, #0]
 8012c72:	f003 0310 	and.w	r3, r3, #16
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	f000 8234 	beq.w	80130e4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012c7c:	4b9a      	ldr	r3, [pc, #616]	; (8012ee8 <tcp_process+0x5a8>)
 8012c7e:	6819      	ldr	r1, [r3, #0]
 8012c80:	4b9a      	ldr	r3, [pc, #616]	; (8012eec <tcp_process+0x5ac>)
 8012c82:	881b      	ldrh	r3, [r3, #0]
 8012c84:	461a      	mov	r2, r3
 8012c86:	4b9a      	ldr	r3, [pc, #616]	; (8012ef0 <tcp_process+0x5b0>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012c8c:	4b99      	ldr	r3, [pc, #612]	; (8012ef4 <tcp_process+0x5b4>)
 8012c8e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012c90:	885b      	ldrh	r3, [r3, #2]
 8012c92:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012c94:	4a97      	ldr	r2, [pc, #604]	; (8012ef4 <tcp_process+0x5b4>)
 8012c96:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012c98:	8812      	ldrh	r2, [r2, #0]
 8012c9a:	b292      	uxth	r2, r2
 8012c9c:	9202      	str	r2, [sp, #8]
 8012c9e:	9301      	str	r3, [sp, #4]
 8012ca0:	4b95      	ldr	r3, [pc, #596]	; (8012ef8 <tcp_process+0x5b8>)
 8012ca2:	9300      	str	r3, [sp, #0]
 8012ca4:	4b95      	ldr	r3, [pc, #596]	; (8012efc <tcp_process+0x5bc>)
 8012ca6:	4602      	mov	r2, r0
 8012ca8:	6878      	ldr	r0, [r7, #4]
 8012caa:	f002 fc91 	bl	80155d0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012cb4:	2b05      	cmp	r3, #5
 8012cb6:	f200 8215 	bhi.w	80130e4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8012cc0:	6878      	ldr	r0, [r7, #4]
 8012cc2:	f002 fa51 	bl	8015168 <tcp_rexmit_rto>
      break;
 8012cc6:	e20d      	b.n	80130e4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012cc8:	4b86      	ldr	r3, [pc, #536]	; (8012ee4 <tcp_process+0x5a4>)
 8012cca:	781b      	ldrb	r3, [r3, #0]
 8012ccc:	f003 0310 	and.w	r3, r3, #16
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	f000 80a1 	beq.w	8012e18 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012cd6:	4b84      	ldr	r3, [pc, #528]	; (8012ee8 <tcp_process+0x5a8>)
 8012cd8:	681a      	ldr	r2, [r3, #0]
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012cde:	1ad3      	subs	r3, r2, r3
 8012ce0:	3b01      	subs	r3, #1
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	db7e      	blt.n	8012de4 <tcp_process+0x4a4>
 8012ce6:	4b80      	ldr	r3, [pc, #512]	; (8012ee8 <tcp_process+0x5a8>)
 8012ce8:	681a      	ldr	r2, [r3, #0]
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012cee:	1ad3      	subs	r3, r2, r3
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	dc77      	bgt.n	8012de4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2204      	movs	r2, #4
 8012cf8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d102      	bne.n	8012d08 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8012d02:	23fa      	movs	r3, #250	; 0xfa
 8012d04:	76bb      	strb	r3, [r7, #26]
 8012d06:	e01d      	b.n	8012d44 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012d0c:	699b      	ldr	r3, [r3, #24]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d106      	bne.n	8012d20 <tcp_process+0x3e0>
 8012d12:	4b7b      	ldr	r3, [pc, #492]	; (8012f00 <tcp_process+0x5c0>)
 8012d14:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8012d18:	497a      	ldr	r1, [pc, #488]	; (8012f04 <tcp_process+0x5c4>)
 8012d1a:	487b      	ldr	r0, [pc, #492]	; (8012f08 <tcp_process+0x5c8>)
 8012d1c:	f008 faaa 	bl	801b274 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012d24:	699b      	ldr	r3, [r3, #24]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d00a      	beq.n	8012d40 <tcp_process+0x400>
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012d2e:	699b      	ldr	r3, [r3, #24]
 8012d30:	687a      	ldr	r2, [r7, #4]
 8012d32:	6910      	ldr	r0, [r2, #16]
 8012d34:	2200      	movs	r2, #0
 8012d36:	6879      	ldr	r1, [r7, #4]
 8012d38:	4798      	blx	r3
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	76bb      	strb	r3, [r7, #26]
 8012d3e:	e001      	b.n	8012d44 <tcp_process+0x404>
 8012d40:	23f0      	movs	r3, #240	; 0xf0
 8012d42:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012d44:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d00a      	beq.n	8012d62 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012d4c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012d50:	f113 0f0d 	cmn.w	r3, #13
 8012d54:	d002      	beq.n	8012d5c <tcp_process+0x41c>
              tcp_abort(pcb);
 8012d56:	6878      	ldr	r0, [r7, #4]
 8012d58:	f7fd ff94 	bl	8010c84 <tcp_abort>
            }
            return ERR_ABRT;
 8012d5c:	f06f 030c 	mvn.w	r3, #12
 8012d60:	e1ce      	b.n	8013100 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8012d62:	6878      	ldr	r0, [r7, #4]
 8012d64:	f000 fae0 	bl	8013328 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012d68:	4b68      	ldr	r3, [pc, #416]	; (8012f0c <tcp_process+0x5cc>)
 8012d6a:	881b      	ldrh	r3, [r3, #0]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d005      	beq.n	8012d7c <tcp_process+0x43c>
            recv_acked--;
 8012d70:	4b66      	ldr	r3, [pc, #408]	; (8012f0c <tcp_process+0x5cc>)
 8012d72:	881b      	ldrh	r3, [r3, #0]
 8012d74:	3b01      	subs	r3, #1
 8012d76:	b29a      	uxth	r2, r3
 8012d78:	4b64      	ldr	r3, [pc, #400]	; (8012f0c <tcp_process+0x5cc>)
 8012d7a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d80:	009a      	lsls	r2, r3, #2
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d86:	005b      	lsls	r3, r3, #1
 8012d88:	f241 111c 	movw	r1, #4380	; 0x111c
 8012d8c:	428b      	cmp	r3, r1
 8012d8e:	bf38      	it	cc
 8012d90:	460b      	movcc	r3, r1
 8012d92:	429a      	cmp	r2, r3
 8012d94:	d204      	bcs.n	8012da0 <tcp_process+0x460>
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d9a:	009b      	lsls	r3, r3, #2
 8012d9c:	b29b      	uxth	r3, r3
 8012d9e:	e00d      	b.n	8012dbc <tcp_process+0x47c>
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012da4:	005b      	lsls	r3, r3, #1
 8012da6:	f241 121c 	movw	r2, #4380	; 0x111c
 8012daa:	4293      	cmp	r3, r2
 8012dac:	d904      	bls.n	8012db8 <tcp_process+0x478>
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012db2:	005b      	lsls	r3, r3, #1
 8012db4:	b29b      	uxth	r3, r3
 8012db6:	e001      	b.n	8012dbc <tcp_process+0x47c>
 8012db8:	f241 131c 	movw	r3, #4380	; 0x111c
 8012dbc:	687a      	ldr	r2, [r7, #4]
 8012dbe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8012dc2:	4b53      	ldr	r3, [pc, #332]	; (8012f10 <tcp_process+0x5d0>)
 8012dc4:	781b      	ldrb	r3, [r3, #0]
 8012dc6:	f003 0320 	and.w	r3, r3, #32
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d037      	beq.n	8012e3e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	8b5b      	ldrh	r3, [r3, #26]
 8012dd2:	f043 0302 	orr.w	r3, r3, #2
 8012dd6:	b29a      	uxth	r2, r3
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	2207      	movs	r2, #7
 8012de0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8012de2:	e02c      	b.n	8012e3e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012de4:	4b40      	ldr	r3, [pc, #256]	; (8012ee8 <tcp_process+0x5a8>)
 8012de6:	6819      	ldr	r1, [r3, #0]
 8012de8:	4b40      	ldr	r3, [pc, #256]	; (8012eec <tcp_process+0x5ac>)
 8012dea:	881b      	ldrh	r3, [r3, #0]
 8012dec:	461a      	mov	r2, r3
 8012dee:	4b40      	ldr	r3, [pc, #256]	; (8012ef0 <tcp_process+0x5b0>)
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012df4:	4b3f      	ldr	r3, [pc, #252]	; (8012ef4 <tcp_process+0x5b4>)
 8012df6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012df8:	885b      	ldrh	r3, [r3, #2]
 8012dfa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012dfc:	4a3d      	ldr	r2, [pc, #244]	; (8012ef4 <tcp_process+0x5b4>)
 8012dfe:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e00:	8812      	ldrh	r2, [r2, #0]
 8012e02:	b292      	uxth	r2, r2
 8012e04:	9202      	str	r2, [sp, #8]
 8012e06:	9301      	str	r3, [sp, #4]
 8012e08:	4b3b      	ldr	r3, [pc, #236]	; (8012ef8 <tcp_process+0x5b8>)
 8012e0a:	9300      	str	r3, [sp, #0]
 8012e0c:	4b3b      	ldr	r3, [pc, #236]	; (8012efc <tcp_process+0x5bc>)
 8012e0e:	4602      	mov	r2, r0
 8012e10:	6878      	ldr	r0, [r7, #4]
 8012e12:	f002 fbdd 	bl	80155d0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8012e16:	e167      	b.n	80130e8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012e18:	4b32      	ldr	r3, [pc, #200]	; (8012ee4 <tcp_process+0x5a4>)
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	f003 0302 	and.w	r3, r3, #2
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	f000 8161 	beq.w	80130e8 <tcp_process+0x7a8>
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e2a:	1e5a      	subs	r2, r3, #1
 8012e2c:	4b30      	ldr	r3, [pc, #192]	; (8012ef0 <tcp_process+0x5b0>)
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	429a      	cmp	r2, r3
 8012e32:	f040 8159 	bne.w	80130e8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8012e36:	6878      	ldr	r0, [r7, #4]
 8012e38:	f002 f9b8 	bl	80151ac <tcp_rexmit>
      break;
 8012e3c:	e154      	b.n	80130e8 <tcp_process+0x7a8>
 8012e3e:	e153      	b.n	80130e8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8012e40:	6878      	ldr	r0, [r7, #4]
 8012e42:	f000 fa71 	bl	8013328 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012e46:	4b32      	ldr	r3, [pc, #200]	; (8012f10 <tcp_process+0x5d0>)
 8012e48:	781b      	ldrb	r3, [r3, #0]
 8012e4a:	f003 0320 	and.w	r3, r3, #32
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	f000 814c 	beq.w	80130ec <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	8b5b      	ldrh	r3, [r3, #26]
 8012e58:	f043 0302 	orr.w	r3, r3, #2
 8012e5c:	b29a      	uxth	r2, r3
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	2207      	movs	r2, #7
 8012e66:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012e68:	e140      	b.n	80130ec <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8012e6a:	6878      	ldr	r0, [r7, #4]
 8012e6c:	f000 fa5c 	bl	8013328 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012e70:	4b27      	ldr	r3, [pc, #156]	; (8012f10 <tcp_process+0x5d0>)
 8012e72:	781b      	ldrb	r3, [r3, #0]
 8012e74:	f003 0320 	and.w	r3, r3, #32
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d071      	beq.n	8012f60 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012e7c:	4b19      	ldr	r3, [pc, #100]	; (8012ee4 <tcp_process+0x5a4>)
 8012e7e:	781b      	ldrb	r3, [r3, #0]
 8012e80:	f003 0310 	and.w	r3, r3, #16
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d060      	beq.n	8012f4a <tcp_process+0x60a>
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012e8c:	4b16      	ldr	r3, [pc, #88]	; (8012ee8 <tcp_process+0x5a8>)
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	429a      	cmp	r2, r3
 8012e92:	d15a      	bne.n	8012f4a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d156      	bne.n	8012f4a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	8b5b      	ldrh	r3, [r3, #26]
 8012ea0:	f043 0302 	orr.w	r3, r3, #2
 8012ea4:	b29a      	uxth	r2, r3
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012eaa:	6878      	ldr	r0, [r7, #4]
 8012eac:	f7fe fdbe 	bl	8011a2c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012eb0:	4b18      	ldr	r3, [pc, #96]	; (8012f14 <tcp_process+0x5d4>)
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	687a      	ldr	r2, [r7, #4]
 8012eb6:	429a      	cmp	r2, r3
 8012eb8:	d105      	bne.n	8012ec6 <tcp_process+0x586>
 8012eba:	4b16      	ldr	r3, [pc, #88]	; (8012f14 <tcp_process+0x5d4>)
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	68db      	ldr	r3, [r3, #12]
 8012ec0:	4a14      	ldr	r2, [pc, #80]	; (8012f14 <tcp_process+0x5d4>)
 8012ec2:	6013      	str	r3, [r2, #0]
 8012ec4:	e02e      	b.n	8012f24 <tcp_process+0x5e4>
 8012ec6:	4b13      	ldr	r3, [pc, #76]	; (8012f14 <tcp_process+0x5d4>)
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	617b      	str	r3, [r7, #20]
 8012ecc:	e027      	b.n	8012f1e <tcp_process+0x5de>
 8012ece:	697b      	ldr	r3, [r7, #20]
 8012ed0:	68db      	ldr	r3, [r3, #12]
 8012ed2:	687a      	ldr	r2, [r7, #4]
 8012ed4:	429a      	cmp	r2, r3
 8012ed6:	d11f      	bne.n	8012f18 <tcp_process+0x5d8>
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	68da      	ldr	r2, [r3, #12]
 8012edc:	697b      	ldr	r3, [r7, #20]
 8012ede:	60da      	str	r2, [r3, #12]
 8012ee0:	e020      	b.n	8012f24 <tcp_process+0x5e4>
 8012ee2:	bf00      	nop
 8012ee4:	20000504 	.word	0x20000504
 8012ee8:	200004fc 	.word	0x200004fc
 8012eec:	20000502 	.word	0x20000502
 8012ef0:	200004f8 	.word	0x200004f8
 8012ef4:	200004e8 	.word	0x200004e8
 8012ef8:	20004514 	.word	0x20004514
 8012efc:	20004518 	.word	0x20004518
 8012f00:	08021978 	.word	0x08021978
 8012f04:	08021c18 	.word	0x08021c18
 8012f08:	080219c4 	.word	0x080219c4
 8012f0c:	20000500 	.word	0x20000500
 8012f10:	20000505 	.word	0x20000505
 8012f14:	20007628 	.word	0x20007628
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	68db      	ldr	r3, [r3, #12]
 8012f1c:	617b      	str	r3, [r7, #20]
 8012f1e:	697b      	ldr	r3, [r7, #20]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d1d4      	bne.n	8012ece <tcp_process+0x58e>
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2200      	movs	r2, #0
 8012f28:	60da      	str	r2, [r3, #12]
 8012f2a:	4b77      	ldr	r3, [pc, #476]	; (8013108 <tcp_process+0x7c8>)
 8012f2c:	2201      	movs	r2, #1
 8012f2e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	220a      	movs	r2, #10
 8012f34:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8012f36:	4b75      	ldr	r3, [pc, #468]	; (801310c <tcp_process+0x7cc>)
 8012f38:	681a      	ldr	r2, [r3, #0]
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	60da      	str	r2, [r3, #12]
 8012f3e:	4a73      	ldr	r2, [pc, #460]	; (801310c <tcp_process+0x7cc>)
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	6013      	str	r3, [r2, #0]
 8012f44:	f002 fd04 	bl	8015950 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012f48:	e0d2      	b.n	80130f0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	8b5b      	ldrh	r3, [r3, #26]
 8012f4e:	f043 0302 	orr.w	r3, r3, #2
 8012f52:	b29a      	uxth	r2, r3
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	2208      	movs	r2, #8
 8012f5c:	751a      	strb	r2, [r3, #20]
      break;
 8012f5e:	e0c7      	b.n	80130f0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012f60:	4b6b      	ldr	r3, [pc, #428]	; (8013110 <tcp_process+0x7d0>)
 8012f62:	781b      	ldrb	r3, [r3, #0]
 8012f64:	f003 0310 	and.w	r3, r3, #16
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	f000 80c1 	beq.w	80130f0 <tcp_process+0x7b0>
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012f72:	4b68      	ldr	r3, [pc, #416]	; (8013114 <tcp_process+0x7d4>)
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	429a      	cmp	r2, r3
 8012f78:	f040 80ba 	bne.w	80130f0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	f040 80b5 	bne.w	80130f0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2206      	movs	r2, #6
 8012f8a:	751a      	strb	r2, [r3, #20]
      break;
 8012f8c:	e0b0      	b.n	80130f0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8012f8e:	6878      	ldr	r0, [r7, #4]
 8012f90:	f000 f9ca 	bl	8013328 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012f94:	4b60      	ldr	r3, [pc, #384]	; (8013118 <tcp_process+0x7d8>)
 8012f96:	781b      	ldrb	r3, [r3, #0]
 8012f98:	f003 0320 	and.w	r3, r3, #32
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	f000 80a9 	beq.w	80130f4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	8b5b      	ldrh	r3, [r3, #26]
 8012fa6:	f043 0302 	orr.w	r3, r3, #2
 8012faa:	b29a      	uxth	r2, r3
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012fb0:	6878      	ldr	r0, [r7, #4]
 8012fb2:	f7fe fd3b 	bl	8011a2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012fb6:	4b59      	ldr	r3, [pc, #356]	; (801311c <tcp_process+0x7dc>)
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	687a      	ldr	r2, [r7, #4]
 8012fbc:	429a      	cmp	r2, r3
 8012fbe:	d105      	bne.n	8012fcc <tcp_process+0x68c>
 8012fc0:	4b56      	ldr	r3, [pc, #344]	; (801311c <tcp_process+0x7dc>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	68db      	ldr	r3, [r3, #12]
 8012fc6:	4a55      	ldr	r2, [pc, #340]	; (801311c <tcp_process+0x7dc>)
 8012fc8:	6013      	str	r3, [r2, #0]
 8012fca:	e013      	b.n	8012ff4 <tcp_process+0x6b4>
 8012fcc:	4b53      	ldr	r3, [pc, #332]	; (801311c <tcp_process+0x7dc>)
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	613b      	str	r3, [r7, #16]
 8012fd2:	e00c      	b.n	8012fee <tcp_process+0x6ae>
 8012fd4:	693b      	ldr	r3, [r7, #16]
 8012fd6:	68db      	ldr	r3, [r3, #12]
 8012fd8:	687a      	ldr	r2, [r7, #4]
 8012fda:	429a      	cmp	r2, r3
 8012fdc:	d104      	bne.n	8012fe8 <tcp_process+0x6a8>
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	68da      	ldr	r2, [r3, #12]
 8012fe2:	693b      	ldr	r3, [r7, #16]
 8012fe4:	60da      	str	r2, [r3, #12]
 8012fe6:	e005      	b.n	8012ff4 <tcp_process+0x6b4>
 8012fe8:	693b      	ldr	r3, [r7, #16]
 8012fea:	68db      	ldr	r3, [r3, #12]
 8012fec:	613b      	str	r3, [r7, #16]
 8012fee:	693b      	ldr	r3, [r7, #16]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d1ef      	bne.n	8012fd4 <tcp_process+0x694>
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	60da      	str	r2, [r3, #12]
 8012ffa:	4b43      	ldr	r3, [pc, #268]	; (8013108 <tcp_process+0x7c8>)
 8012ffc:	2201      	movs	r2, #1
 8012ffe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	220a      	movs	r2, #10
 8013004:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013006:	4b41      	ldr	r3, [pc, #260]	; (801310c <tcp_process+0x7cc>)
 8013008:	681a      	ldr	r2, [r3, #0]
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	60da      	str	r2, [r3, #12]
 801300e:	4a3f      	ldr	r2, [pc, #252]	; (801310c <tcp_process+0x7cc>)
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	6013      	str	r3, [r2, #0]
 8013014:	f002 fc9c 	bl	8015950 <tcp_timer_needed>
      }
      break;
 8013018:	e06c      	b.n	80130f4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801301a:	6878      	ldr	r0, [r7, #4]
 801301c:	f000 f984 	bl	8013328 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013020:	4b3b      	ldr	r3, [pc, #236]	; (8013110 <tcp_process+0x7d0>)
 8013022:	781b      	ldrb	r3, [r3, #0]
 8013024:	f003 0310 	and.w	r3, r3, #16
 8013028:	2b00      	cmp	r3, #0
 801302a:	d065      	beq.n	80130f8 <tcp_process+0x7b8>
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013030:	4b38      	ldr	r3, [pc, #224]	; (8013114 <tcp_process+0x7d4>)
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	429a      	cmp	r2, r3
 8013036:	d15f      	bne.n	80130f8 <tcp_process+0x7b8>
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801303c:	2b00      	cmp	r3, #0
 801303e:	d15b      	bne.n	80130f8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013040:	6878      	ldr	r0, [r7, #4]
 8013042:	f7fe fcf3 	bl	8011a2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013046:	4b35      	ldr	r3, [pc, #212]	; (801311c <tcp_process+0x7dc>)
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	687a      	ldr	r2, [r7, #4]
 801304c:	429a      	cmp	r2, r3
 801304e:	d105      	bne.n	801305c <tcp_process+0x71c>
 8013050:	4b32      	ldr	r3, [pc, #200]	; (801311c <tcp_process+0x7dc>)
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	68db      	ldr	r3, [r3, #12]
 8013056:	4a31      	ldr	r2, [pc, #196]	; (801311c <tcp_process+0x7dc>)
 8013058:	6013      	str	r3, [r2, #0]
 801305a:	e013      	b.n	8013084 <tcp_process+0x744>
 801305c:	4b2f      	ldr	r3, [pc, #188]	; (801311c <tcp_process+0x7dc>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	60fb      	str	r3, [r7, #12]
 8013062:	e00c      	b.n	801307e <tcp_process+0x73e>
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	68db      	ldr	r3, [r3, #12]
 8013068:	687a      	ldr	r2, [r7, #4]
 801306a:	429a      	cmp	r2, r3
 801306c:	d104      	bne.n	8013078 <tcp_process+0x738>
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	68da      	ldr	r2, [r3, #12]
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	60da      	str	r2, [r3, #12]
 8013076:	e005      	b.n	8013084 <tcp_process+0x744>
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	68db      	ldr	r3, [r3, #12]
 801307c:	60fb      	str	r3, [r7, #12]
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d1ef      	bne.n	8013064 <tcp_process+0x724>
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2200      	movs	r2, #0
 8013088:	60da      	str	r2, [r3, #12]
 801308a:	4b1f      	ldr	r3, [pc, #124]	; (8013108 <tcp_process+0x7c8>)
 801308c:	2201      	movs	r2, #1
 801308e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	220a      	movs	r2, #10
 8013094:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013096:	4b1d      	ldr	r3, [pc, #116]	; (801310c <tcp_process+0x7cc>)
 8013098:	681a      	ldr	r2, [r3, #0]
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	60da      	str	r2, [r3, #12]
 801309e:	4a1b      	ldr	r2, [pc, #108]	; (801310c <tcp_process+0x7cc>)
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	6013      	str	r3, [r2, #0]
 80130a4:	f002 fc54 	bl	8015950 <tcp_timer_needed>
      }
      break;
 80130a8:	e026      	b.n	80130f8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80130aa:	6878      	ldr	r0, [r7, #4]
 80130ac:	f000 f93c 	bl	8013328 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80130b0:	4b17      	ldr	r3, [pc, #92]	; (8013110 <tcp_process+0x7d0>)
 80130b2:	781b      	ldrb	r3, [r3, #0]
 80130b4:	f003 0310 	and.w	r3, r3, #16
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d01f      	beq.n	80130fc <tcp_process+0x7bc>
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80130c0:	4b14      	ldr	r3, [pc, #80]	; (8013114 <tcp_process+0x7d4>)
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	429a      	cmp	r2, r3
 80130c6:	d119      	bne.n	80130fc <tcp_process+0x7bc>
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d115      	bne.n	80130fc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80130d0:	4b11      	ldr	r3, [pc, #68]	; (8013118 <tcp_process+0x7d8>)
 80130d2:	781b      	ldrb	r3, [r3, #0]
 80130d4:	f043 0310 	orr.w	r3, r3, #16
 80130d8:	b2da      	uxtb	r2, r3
 80130da:	4b0f      	ldr	r3, [pc, #60]	; (8013118 <tcp_process+0x7d8>)
 80130dc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80130de:	e00d      	b.n	80130fc <tcp_process+0x7bc>
    default:
      break;
 80130e0:	bf00      	nop
 80130e2:	e00c      	b.n	80130fe <tcp_process+0x7be>
      break;
 80130e4:	bf00      	nop
 80130e6:	e00a      	b.n	80130fe <tcp_process+0x7be>
      break;
 80130e8:	bf00      	nop
 80130ea:	e008      	b.n	80130fe <tcp_process+0x7be>
      break;
 80130ec:	bf00      	nop
 80130ee:	e006      	b.n	80130fe <tcp_process+0x7be>
      break;
 80130f0:	bf00      	nop
 80130f2:	e004      	b.n	80130fe <tcp_process+0x7be>
      break;
 80130f4:	bf00      	nop
 80130f6:	e002      	b.n	80130fe <tcp_process+0x7be>
      break;
 80130f8:	bf00      	nop
 80130fa:	e000      	b.n	80130fe <tcp_process+0x7be>
      break;
 80130fc:	bf00      	nop
  }
  return ERR_OK;
 80130fe:	2300      	movs	r3, #0
}
 8013100:	4618      	mov	r0, r3
 8013102:	3724      	adds	r7, #36	; 0x24
 8013104:	46bd      	mov	sp, r7
 8013106:	bd90      	pop	{r4, r7, pc}
 8013108:	20007624 	.word	0x20007624
 801310c:	20007638 	.word	0x20007638
 8013110:	20000504 	.word	0x20000504
 8013114:	200004fc 	.word	0x200004fc
 8013118:	20000505 	.word	0x20000505
 801311c:	20007628 	.word	0x20007628

08013120 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013120:	b590      	push	{r4, r7, lr}
 8013122:	b085      	sub	sp, #20
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
 8013128:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d106      	bne.n	801313e <tcp_oos_insert_segment+0x1e>
 8013130:	4b3b      	ldr	r3, [pc, #236]	; (8013220 <tcp_oos_insert_segment+0x100>)
 8013132:	f240 421f 	movw	r2, #1055	; 0x41f
 8013136:	493b      	ldr	r1, [pc, #236]	; (8013224 <tcp_oos_insert_segment+0x104>)
 8013138:	483b      	ldr	r0, [pc, #236]	; (8013228 <tcp_oos_insert_segment+0x108>)
 801313a:	f008 f89b 	bl	801b274 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	68db      	ldr	r3, [r3, #12]
 8013142:	899b      	ldrh	r3, [r3, #12]
 8013144:	b29b      	uxth	r3, r3
 8013146:	4618      	mov	r0, r3
 8013148:	f7fb fd74 	bl	800ec34 <lwip_htons>
 801314c:	4603      	mov	r3, r0
 801314e:	b2db      	uxtb	r3, r3
 8013150:	f003 0301 	and.w	r3, r3, #1
 8013154:	2b00      	cmp	r3, #0
 8013156:	d028      	beq.n	80131aa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013158:	6838      	ldr	r0, [r7, #0]
 801315a:	f7fe fa67 	bl	801162c <tcp_segs_free>
    next = NULL;
 801315e:	2300      	movs	r3, #0
 8013160:	603b      	str	r3, [r7, #0]
 8013162:	e056      	b.n	8013212 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	68db      	ldr	r3, [r3, #12]
 8013168:	899b      	ldrh	r3, [r3, #12]
 801316a:	b29b      	uxth	r3, r3
 801316c:	4618      	mov	r0, r3
 801316e:	f7fb fd61 	bl	800ec34 <lwip_htons>
 8013172:	4603      	mov	r3, r0
 8013174:	b2db      	uxtb	r3, r3
 8013176:	f003 0301 	and.w	r3, r3, #1
 801317a:	2b00      	cmp	r3, #0
 801317c:	d00d      	beq.n	801319a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	68db      	ldr	r3, [r3, #12]
 8013182:	899b      	ldrh	r3, [r3, #12]
 8013184:	b29c      	uxth	r4, r3
 8013186:	2001      	movs	r0, #1
 8013188:	f7fb fd54 	bl	800ec34 <lwip_htons>
 801318c:	4603      	mov	r3, r0
 801318e:	461a      	mov	r2, r3
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	68db      	ldr	r3, [r3, #12]
 8013194:	4322      	orrs	r2, r4
 8013196:	b292      	uxth	r2, r2
 8013198:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801319a:	683b      	ldr	r3, [r7, #0]
 801319c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801319e:	683b      	ldr	r3, [r7, #0]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80131a4:	68f8      	ldr	r0, [r7, #12]
 80131a6:	f7fe fa55 	bl	8011654 <tcp_seg_free>
    while (next &&
 80131aa:	683b      	ldr	r3, [r7, #0]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d00e      	beq.n	80131ce <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	891b      	ldrh	r3, [r3, #8]
 80131b4:	461a      	mov	r2, r3
 80131b6:	4b1d      	ldr	r3, [pc, #116]	; (801322c <tcp_oos_insert_segment+0x10c>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	441a      	add	r2, r3
 80131bc:	683b      	ldr	r3, [r7, #0]
 80131be:	68db      	ldr	r3, [r3, #12]
 80131c0:	685b      	ldr	r3, [r3, #4]
 80131c2:	6839      	ldr	r1, [r7, #0]
 80131c4:	8909      	ldrh	r1, [r1, #8]
 80131c6:	440b      	add	r3, r1
 80131c8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	daca      	bge.n	8013164 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d01e      	beq.n	8013212 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	891b      	ldrh	r3, [r3, #8]
 80131d8:	461a      	mov	r2, r3
 80131da:	4b14      	ldr	r3, [pc, #80]	; (801322c <tcp_oos_insert_segment+0x10c>)
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	441a      	add	r2, r3
 80131e0:	683b      	ldr	r3, [r7, #0]
 80131e2:	68db      	ldr	r3, [r3, #12]
 80131e4:	685b      	ldr	r3, [r3, #4]
 80131e6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	dd12      	ble.n	8013212 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80131ec:	683b      	ldr	r3, [r7, #0]
 80131ee:	68db      	ldr	r3, [r3, #12]
 80131f0:	685b      	ldr	r3, [r3, #4]
 80131f2:	b29a      	uxth	r2, r3
 80131f4:	4b0d      	ldr	r3, [pc, #52]	; (801322c <tcp_oos_insert_segment+0x10c>)
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	b29b      	uxth	r3, r3
 80131fa:	1ad3      	subs	r3, r2, r3
 80131fc:	b29a      	uxth	r2, r3
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	685a      	ldr	r2, [r3, #4]
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	891b      	ldrh	r3, [r3, #8]
 801320a:	4619      	mov	r1, r3
 801320c:	4610      	mov	r0, r2
 801320e:	f7fc fe23 	bl	800fe58 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	683a      	ldr	r2, [r7, #0]
 8013216:	601a      	str	r2, [r3, #0]
}
 8013218:	bf00      	nop
 801321a:	3714      	adds	r7, #20
 801321c:	46bd      	mov	sp, r7
 801321e:	bd90      	pop	{r4, r7, pc}
 8013220:	08021978 	.word	0x08021978
 8013224:	08021c38 	.word	0x08021c38
 8013228:	080219c4 	.word	0x080219c4
 801322c:	200004f8 	.word	0x200004f8

08013230 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013230:	b5b0      	push	{r4, r5, r7, lr}
 8013232:	b086      	sub	sp, #24
 8013234:	af00      	add	r7, sp, #0
 8013236:	60f8      	str	r0, [r7, #12]
 8013238:	60b9      	str	r1, [r7, #8]
 801323a:	607a      	str	r2, [r7, #4]
 801323c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801323e:	e03e      	b.n	80132be <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013240:	68bb      	ldr	r3, [r7, #8]
 8013242:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013244:	68bb      	ldr	r3, [r7, #8]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801324a:	697b      	ldr	r3, [r7, #20]
 801324c:	685b      	ldr	r3, [r3, #4]
 801324e:	4618      	mov	r0, r3
 8013250:	f7fd f810 	bl	8010274 <pbuf_clen>
 8013254:	4603      	mov	r3, r0
 8013256:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801325e:	8a7a      	ldrh	r2, [r7, #18]
 8013260:	429a      	cmp	r2, r3
 8013262:	d906      	bls.n	8013272 <tcp_free_acked_segments+0x42>
 8013264:	4b2a      	ldr	r3, [pc, #168]	; (8013310 <tcp_free_acked_segments+0xe0>)
 8013266:	f240 4257 	movw	r2, #1111	; 0x457
 801326a:	492a      	ldr	r1, [pc, #168]	; (8013314 <tcp_free_acked_segments+0xe4>)
 801326c:	482a      	ldr	r0, [pc, #168]	; (8013318 <tcp_free_acked_segments+0xe8>)
 801326e:	f008 f801 	bl	801b274 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013278:	8a7b      	ldrh	r3, [r7, #18]
 801327a:	1ad3      	subs	r3, r2, r3
 801327c:	b29a      	uxth	r2, r3
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013284:	697b      	ldr	r3, [r7, #20]
 8013286:	891a      	ldrh	r2, [r3, #8]
 8013288:	4b24      	ldr	r3, [pc, #144]	; (801331c <tcp_free_acked_segments+0xec>)
 801328a:	881b      	ldrh	r3, [r3, #0]
 801328c:	4413      	add	r3, r2
 801328e:	b29a      	uxth	r2, r3
 8013290:	4b22      	ldr	r3, [pc, #136]	; (801331c <tcp_free_acked_segments+0xec>)
 8013292:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013294:	6978      	ldr	r0, [r7, #20]
 8013296:	f7fe f9dd 	bl	8011654 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d00c      	beq.n	80132be <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80132a4:	68bb      	ldr	r3, [r7, #8]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d109      	bne.n	80132be <tcp_free_acked_segments+0x8e>
 80132aa:	683b      	ldr	r3, [r7, #0]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d106      	bne.n	80132be <tcp_free_acked_segments+0x8e>
 80132b0:	4b17      	ldr	r3, [pc, #92]	; (8013310 <tcp_free_acked_segments+0xe0>)
 80132b2:	f240 4262 	movw	r2, #1122	; 0x462
 80132b6:	491a      	ldr	r1, [pc, #104]	; (8013320 <tcp_free_acked_segments+0xf0>)
 80132b8:	4817      	ldr	r0, [pc, #92]	; (8013318 <tcp_free_acked_segments+0xe8>)
 80132ba:	f007 ffdb 	bl	801b274 <iprintf>
  while (seg_list != NULL &&
 80132be:	68bb      	ldr	r3, [r7, #8]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d020      	beq.n	8013306 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80132c4:	68bb      	ldr	r3, [r7, #8]
 80132c6:	68db      	ldr	r3, [r3, #12]
 80132c8:	685b      	ldr	r3, [r3, #4]
 80132ca:	4618      	mov	r0, r3
 80132cc:	f7fb fcc7 	bl	800ec5e <lwip_htonl>
 80132d0:	4604      	mov	r4, r0
 80132d2:	68bb      	ldr	r3, [r7, #8]
 80132d4:	891b      	ldrh	r3, [r3, #8]
 80132d6:	461d      	mov	r5, r3
 80132d8:	68bb      	ldr	r3, [r7, #8]
 80132da:	68db      	ldr	r3, [r3, #12]
 80132dc:	899b      	ldrh	r3, [r3, #12]
 80132de:	b29b      	uxth	r3, r3
 80132e0:	4618      	mov	r0, r3
 80132e2:	f7fb fca7 	bl	800ec34 <lwip_htons>
 80132e6:	4603      	mov	r3, r0
 80132e8:	b2db      	uxtb	r3, r3
 80132ea:	f003 0303 	and.w	r3, r3, #3
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d001      	beq.n	80132f6 <tcp_free_acked_segments+0xc6>
 80132f2:	2301      	movs	r3, #1
 80132f4:	e000      	b.n	80132f8 <tcp_free_acked_segments+0xc8>
 80132f6:	2300      	movs	r3, #0
 80132f8:	442b      	add	r3, r5
 80132fa:	18e2      	adds	r2, r4, r3
 80132fc:	4b09      	ldr	r3, [pc, #36]	; (8013324 <tcp_free_acked_segments+0xf4>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013302:	2b00      	cmp	r3, #0
 8013304:	dd9c      	ble.n	8013240 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013306:	68bb      	ldr	r3, [r7, #8]
}
 8013308:	4618      	mov	r0, r3
 801330a:	3718      	adds	r7, #24
 801330c:	46bd      	mov	sp, r7
 801330e:	bdb0      	pop	{r4, r5, r7, pc}
 8013310:	08021978 	.word	0x08021978
 8013314:	08021c60 	.word	0x08021c60
 8013318:	080219c4 	.word	0x080219c4
 801331c:	20000500 	.word	0x20000500
 8013320:	08021c88 	.word	0x08021c88
 8013324:	200004fc 	.word	0x200004fc

08013328 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013328:	b5b0      	push	{r4, r5, r7, lr}
 801332a:	b094      	sub	sp, #80	; 0x50
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013330:	2300      	movs	r3, #0
 8013332:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d106      	bne.n	8013348 <tcp_receive+0x20>
 801333a:	4ba6      	ldr	r3, [pc, #664]	; (80135d4 <tcp_receive+0x2ac>)
 801333c:	f240 427b 	movw	r2, #1147	; 0x47b
 8013340:	49a5      	ldr	r1, [pc, #660]	; (80135d8 <tcp_receive+0x2b0>)
 8013342:	48a6      	ldr	r0, [pc, #664]	; (80135dc <tcp_receive+0x2b4>)
 8013344:	f007 ff96 	bl	801b274 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	7d1b      	ldrb	r3, [r3, #20]
 801334c:	2b03      	cmp	r3, #3
 801334e:	d806      	bhi.n	801335e <tcp_receive+0x36>
 8013350:	4ba0      	ldr	r3, [pc, #640]	; (80135d4 <tcp_receive+0x2ac>)
 8013352:	f240 427c 	movw	r2, #1148	; 0x47c
 8013356:	49a2      	ldr	r1, [pc, #648]	; (80135e0 <tcp_receive+0x2b8>)
 8013358:	48a0      	ldr	r0, [pc, #640]	; (80135dc <tcp_receive+0x2b4>)
 801335a:	f007 ff8b 	bl	801b274 <iprintf>

  if (flags & TCP_ACK) {
 801335e:	4ba1      	ldr	r3, [pc, #644]	; (80135e4 <tcp_receive+0x2bc>)
 8013360:	781b      	ldrb	r3, [r3, #0]
 8013362:	f003 0310 	and.w	r3, r3, #16
 8013366:	2b00      	cmp	r3, #0
 8013368:	f000 8263 	beq.w	8013832 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013372:	461a      	mov	r2, r3
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013378:	4413      	add	r3, r2
 801337a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013380:	4b99      	ldr	r3, [pc, #612]	; (80135e8 <tcp_receive+0x2c0>)
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	1ad3      	subs	r3, r2, r3
 8013386:	2b00      	cmp	r3, #0
 8013388:	db1b      	blt.n	80133c2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801338e:	4b96      	ldr	r3, [pc, #600]	; (80135e8 <tcp_receive+0x2c0>)
 8013390:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013392:	429a      	cmp	r2, r3
 8013394:	d106      	bne.n	80133a4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801339a:	4b94      	ldr	r3, [pc, #592]	; (80135ec <tcp_receive+0x2c4>)
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	1ad3      	subs	r3, r2, r3
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	db0e      	blt.n	80133c2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80133a8:	4b90      	ldr	r3, [pc, #576]	; (80135ec <tcp_receive+0x2c4>)
 80133aa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80133ac:	429a      	cmp	r2, r3
 80133ae:	d125      	bne.n	80133fc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80133b0:	4b8f      	ldr	r3, [pc, #572]	; (80135f0 <tcp_receive+0x2c8>)
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	89db      	ldrh	r3, [r3, #14]
 80133b6:	b29a      	uxth	r2, r3
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80133be:	429a      	cmp	r2, r3
 80133c0:	d91c      	bls.n	80133fc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80133c2:	4b8b      	ldr	r3, [pc, #556]	; (80135f0 <tcp_receive+0x2c8>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	89db      	ldrh	r3, [r3, #14]
 80133c8:	b29a      	uxth	r2, r3
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80133dc:	429a      	cmp	r2, r3
 80133de:	d205      	bcs.n	80133ec <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80133ec:	4b7e      	ldr	r3, [pc, #504]	; (80135e8 <tcp_receive+0x2c0>)
 80133ee:	681a      	ldr	r2, [r3, #0]
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80133f4:	4b7d      	ldr	r3, [pc, #500]	; (80135ec <tcp_receive+0x2c4>)
 80133f6:	681a      	ldr	r2, [r3, #0]
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80133fc:	4b7b      	ldr	r3, [pc, #492]	; (80135ec <tcp_receive+0x2c4>)
 80133fe:	681a      	ldr	r2, [r3, #0]
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013404:	1ad3      	subs	r3, r2, r3
 8013406:	2b00      	cmp	r3, #0
 8013408:	dc58      	bgt.n	80134bc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801340a:	4b7a      	ldr	r3, [pc, #488]	; (80135f4 <tcp_receive+0x2cc>)
 801340c:	881b      	ldrh	r3, [r3, #0]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d14b      	bne.n	80134aa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013416:	687a      	ldr	r2, [r7, #4]
 8013418:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801341c:	4413      	add	r3, r2
 801341e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013420:	429a      	cmp	r2, r3
 8013422:	d142      	bne.n	80134aa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801342a:	2b00      	cmp	r3, #0
 801342c:	db3d      	blt.n	80134aa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013432:	4b6e      	ldr	r3, [pc, #440]	; (80135ec <tcp_receive+0x2c4>)
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	429a      	cmp	r2, r3
 8013438:	d137      	bne.n	80134aa <tcp_receive+0x182>
              found_dupack = 1;
 801343a:	2301      	movs	r3, #1
 801343c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013444:	2bff      	cmp	r3, #255	; 0xff
 8013446:	d007      	beq.n	8013458 <tcp_receive+0x130>
                ++pcb->dupacks;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801344e:	3301      	adds	r3, #1
 8013450:	b2da      	uxtb	r2, r3
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801345e:	2b03      	cmp	r3, #3
 8013460:	d91b      	bls.n	801349a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801346c:	4413      	add	r3, r2
 801346e:	b29a      	uxth	r2, r3
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013476:	429a      	cmp	r2, r3
 8013478:	d30a      	bcc.n	8013490 <tcp_receive+0x168>
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013484:	4413      	add	r3, r2
 8013486:	b29a      	uxth	r2, r3
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801348e:	e004      	b.n	801349a <tcp_receive+0x172>
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013496:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80134a0:	2b02      	cmp	r3, #2
 80134a2:	d902      	bls.n	80134aa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80134a4:	6878      	ldr	r0, [r7, #4]
 80134a6:	f001 feed 	bl	8015284 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80134aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	f040 8160 	bne.w	8013772 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	2200      	movs	r2, #0
 80134b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80134ba:	e15a      	b.n	8013772 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80134bc:	4b4b      	ldr	r3, [pc, #300]	; (80135ec <tcp_receive+0x2c4>)
 80134be:	681a      	ldr	r2, [r3, #0]
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80134c4:	1ad3      	subs	r3, r2, r3
 80134c6:	3b01      	subs	r3, #1
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	f2c0 814d 	blt.w	8013768 <tcp_receive+0x440>
 80134ce:	4b47      	ldr	r3, [pc, #284]	; (80135ec <tcp_receive+0x2c4>)
 80134d0:	681a      	ldr	r2, [r3, #0]
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80134d6:	1ad3      	subs	r3, r2, r3
 80134d8:	2b00      	cmp	r3, #0
 80134da:	f300 8145 	bgt.w	8013768 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	8b5b      	ldrh	r3, [r3, #26]
 80134e2:	f003 0304 	and.w	r3, r3, #4
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d010      	beq.n	801350c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	8b5b      	ldrh	r3, [r3, #26]
 80134ee:	f023 0304 	bic.w	r3, r3, #4
 80134f2:	b29a      	uxth	r2, r3
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	2200      	movs	r2, #0
 8013508:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	2200      	movs	r2, #0
 8013510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801351a:	10db      	asrs	r3, r3, #3
 801351c:	b21b      	sxth	r3, r3
 801351e:	b29a      	uxth	r2, r3
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013526:	b29b      	uxth	r3, r3
 8013528:	4413      	add	r3, r2
 801352a:	b29b      	uxth	r3, r3
 801352c:	b21a      	sxth	r2, r3
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013534:	4b2d      	ldr	r3, [pc, #180]	; (80135ec <tcp_receive+0x2c4>)
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	b29a      	uxth	r2, r3
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801353e:	b29b      	uxth	r3, r3
 8013540:	1ad3      	subs	r3, r2, r3
 8013542:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	2200      	movs	r2, #0
 8013548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801354c:	4b27      	ldr	r3, [pc, #156]	; (80135ec <tcp_receive+0x2c4>)
 801354e:	681a      	ldr	r2, [r3, #0]
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	7d1b      	ldrb	r3, [r3, #20]
 8013558:	2b03      	cmp	r3, #3
 801355a:	f240 8096 	bls.w	801368a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801356a:	429a      	cmp	r2, r3
 801356c:	d244      	bcs.n	80135f8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	8b5b      	ldrh	r3, [r3, #26]
 8013572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013576:	2b00      	cmp	r3, #0
 8013578:	d001      	beq.n	801357e <tcp_receive+0x256>
 801357a:	2301      	movs	r3, #1
 801357c:	e000      	b.n	8013580 <tcp_receive+0x258>
 801357e:	2302      	movs	r3, #2
 8013580:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013584:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013588:	b29a      	uxth	r2, r3
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801358e:	fb12 f303 	smulbb	r3, r2, r3
 8013592:	b29b      	uxth	r3, r3
 8013594:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013596:	4293      	cmp	r3, r2
 8013598:	bf28      	it	cs
 801359a:	4613      	movcs	r3, r2
 801359c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80135a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80135a6:	4413      	add	r3, r2
 80135a8:	b29a      	uxth	r2, r3
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80135b0:	429a      	cmp	r2, r3
 80135b2:	d309      	bcc.n	80135c8 <tcp_receive+0x2a0>
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80135ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80135bc:	4413      	add	r3, r2
 80135be:	b29a      	uxth	r2, r3
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80135c6:	e060      	b.n	801368a <tcp_receive+0x362>
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80135ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80135d2:	e05a      	b.n	801368a <tcp_receive+0x362>
 80135d4:	08021978 	.word	0x08021978
 80135d8:	08021ca8 	.word	0x08021ca8
 80135dc:	080219c4 	.word	0x080219c4
 80135e0:	08021cc4 	.word	0x08021cc4
 80135e4:	20000504 	.word	0x20000504
 80135e8:	200004f8 	.word	0x200004f8
 80135ec:	200004fc 	.word	0x200004fc
 80135f0:	200004e8 	.word	0x200004e8
 80135f4:	20000502 	.word	0x20000502
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80135fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013600:	4413      	add	r3, r2
 8013602:	b29a      	uxth	r2, r3
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801360a:	429a      	cmp	r2, r3
 801360c:	d309      	bcc.n	8013622 <tcp_receive+0x2fa>
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013614:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013616:	4413      	add	r3, r2
 8013618:	b29a      	uxth	r2, r3
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013620:	e004      	b.n	801362c <tcp_receive+0x304>
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013628:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013638:	429a      	cmp	r2, r3
 801363a:	d326      	bcc.n	801368a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013648:	1ad3      	subs	r3, r2, r3
 801364a:	b29a      	uxth	r2, r3
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801365c:	4413      	add	r3, r2
 801365e:	b29a      	uxth	r2, r3
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013666:	429a      	cmp	r2, r3
 8013668:	d30a      	bcc.n	8013680 <tcp_receive+0x358>
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013674:	4413      	add	r3, r2
 8013676:	b29a      	uxth	r2, r3
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801367e:	e004      	b.n	801368a <tcp_receive+0x362>
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013686:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013692:	4a98      	ldr	r2, [pc, #608]	; (80138f4 <tcp_receive+0x5cc>)
 8013694:	6878      	ldr	r0, [r7, #4]
 8013696:	f7ff fdcb 	bl	8013230 <tcp_free_acked_segments>
 801369a:	4602      	mov	r2, r0
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136a8:	4a93      	ldr	r2, [pc, #588]	; (80138f8 <tcp_receive+0x5d0>)
 80136aa:	6878      	ldr	r0, [r7, #4]
 80136ac:	f7ff fdc0 	bl	8013230 <tcp_free_acked_segments>
 80136b0:	4602      	mov	r2, r0
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d104      	bne.n	80136c8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80136c4:	861a      	strh	r2, [r3, #48]	; 0x30
 80136c6:	e002      	b.n	80136ce <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	2200      	movs	r2, #0
 80136cc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	2200      	movs	r2, #0
 80136d2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d103      	bne.n	80136e4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	2200      	movs	r2, #0
 80136e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80136ea:	4b84      	ldr	r3, [pc, #528]	; (80138fc <tcp_receive+0x5d4>)
 80136ec:	881b      	ldrh	r3, [r3, #0]
 80136ee:	4413      	add	r3, r2
 80136f0:	b29a      	uxth	r2, r3
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	8b5b      	ldrh	r3, [r3, #26]
 80136fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013700:	2b00      	cmp	r3, #0
 8013702:	d035      	beq.n	8013770 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013708:	2b00      	cmp	r3, #0
 801370a:	d118      	bne.n	801373e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013710:	2b00      	cmp	r3, #0
 8013712:	d00c      	beq.n	801372e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801371c:	68db      	ldr	r3, [r3, #12]
 801371e:	685b      	ldr	r3, [r3, #4]
 8013720:	4618      	mov	r0, r3
 8013722:	f7fb fa9c 	bl	800ec5e <lwip_htonl>
 8013726:	4603      	mov	r3, r0
 8013728:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801372a:	2b00      	cmp	r3, #0
 801372c:	dc20      	bgt.n	8013770 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	8b5b      	ldrh	r3, [r3, #26]
 8013732:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013736:	b29a      	uxth	r2, r3
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801373c:	e018      	b.n	8013770 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013746:	68db      	ldr	r3, [r3, #12]
 8013748:	685b      	ldr	r3, [r3, #4]
 801374a:	4618      	mov	r0, r3
 801374c:	f7fb fa87 	bl	800ec5e <lwip_htonl>
 8013750:	4603      	mov	r3, r0
 8013752:	1ae3      	subs	r3, r4, r3
 8013754:	2b00      	cmp	r3, #0
 8013756:	dc0b      	bgt.n	8013770 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	8b5b      	ldrh	r3, [r3, #26]
 801375c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013760:	b29a      	uxth	r2, r3
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013766:	e003      	b.n	8013770 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013768:	6878      	ldr	r0, [r7, #4]
 801376a:	f001 ff81 	bl	8015670 <tcp_send_empty_ack>
 801376e:	e000      	b.n	8013772 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013770:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013776:	2b00      	cmp	r3, #0
 8013778:	d05b      	beq.n	8013832 <tcp_receive+0x50a>
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801377e:	4b60      	ldr	r3, [pc, #384]	; (8013900 <tcp_receive+0x5d8>)
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	1ad3      	subs	r3, r2, r3
 8013784:	2b00      	cmp	r3, #0
 8013786:	da54      	bge.n	8013832 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013788:	4b5e      	ldr	r3, [pc, #376]	; (8013904 <tcp_receive+0x5dc>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	b29a      	uxth	r2, r3
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013792:	b29b      	uxth	r3, r3
 8013794:	1ad3      	subs	r3, r2, r3
 8013796:	b29b      	uxth	r3, r3
 8013798:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801379c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80137a6:	10db      	asrs	r3, r3, #3
 80137a8:	b21b      	sxth	r3, r3
 80137aa:	b29b      	uxth	r3, r3
 80137ac:	1ad3      	subs	r3, r2, r3
 80137ae:	b29b      	uxth	r3, r3
 80137b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80137ba:	b29a      	uxth	r2, r3
 80137bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80137c0:	4413      	add	r3, r2
 80137c2:	b29b      	uxth	r3, r3
 80137c4:	b21a      	sxth	r2, r3
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80137ca:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	da05      	bge.n	80137de <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80137d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80137d6:	425b      	negs	r3, r3
 80137d8:	b29b      	uxth	r3, r3
 80137da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80137de:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80137e8:	109b      	asrs	r3, r3, #2
 80137ea:	b21b      	sxth	r3, r3
 80137ec:	b29b      	uxth	r3, r3
 80137ee:	1ad3      	subs	r3, r2, r3
 80137f0:	b29b      	uxth	r3, r3
 80137f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80137fc:	b29a      	uxth	r2, r3
 80137fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013802:	4413      	add	r3, r2
 8013804:	b29b      	uxth	r3, r3
 8013806:	b21a      	sxth	r2, r3
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013812:	10db      	asrs	r3, r3, #3
 8013814:	b21b      	sxth	r3, r3
 8013816:	b29a      	uxth	r2, r3
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801381e:	b29b      	uxth	r3, r3
 8013820:	4413      	add	r3, r2
 8013822:	b29b      	uxth	r3, r3
 8013824:	b21a      	sxth	r2, r3
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	2200      	movs	r2, #0
 8013830:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013832:	4b35      	ldr	r3, [pc, #212]	; (8013908 <tcp_receive+0x5e0>)
 8013834:	881b      	ldrh	r3, [r3, #0]
 8013836:	2b00      	cmp	r3, #0
 8013838:	f000 84e1 	beq.w	80141fe <tcp_receive+0xed6>
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	7d1b      	ldrb	r3, [r3, #20]
 8013840:	2b06      	cmp	r3, #6
 8013842:	f200 84dc 	bhi.w	80141fe <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801384a:	4b30      	ldr	r3, [pc, #192]	; (801390c <tcp_receive+0x5e4>)
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	1ad3      	subs	r3, r2, r3
 8013850:	3b01      	subs	r3, #1
 8013852:	2b00      	cmp	r3, #0
 8013854:	f2c0 808e 	blt.w	8013974 <tcp_receive+0x64c>
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801385c:	4b2a      	ldr	r3, [pc, #168]	; (8013908 <tcp_receive+0x5e0>)
 801385e:	881b      	ldrh	r3, [r3, #0]
 8013860:	4619      	mov	r1, r3
 8013862:	4b2a      	ldr	r3, [pc, #168]	; (801390c <tcp_receive+0x5e4>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	440b      	add	r3, r1
 8013868:	1ad3      	subs	r3, r2, r3
 801386a:	3301      	adds	r3, #1
 801386c:	2b00      	cmp	r3, #0
 801386e:	f300 8081 	bgt.w	8013974 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013872:	4b27      	ldr	r3, [pc, #156]	; (8013910 <tcp_receive+0x5e8>)
 8013874:	685b      	ldr	r3, [r3, #4]
 8013876:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801387c:	4b23      	ldr	r3, [pc, #140]	; (801390c <tcp_receive+0x5e4>)
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	1ad3      	subs	r3, r2, r3
 8013882:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013884:	4b22      	ldr	r3, [pc, #136]	; (8013910 <tcp_receive+0x5e8>)
 8013886:	685b      	ldr	r3, [r3, #4]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d106      	bne.n	801389a <tcp_receive+0x572>
 801388c:	4b21      	ldr	r3, [pc, #132]	; (8013914 <tcp_receive+0x5ec>)
 801388e:	f240 5294 	movw	r2, #1428	; 0x594
 8013892:	4921      	ldr	r1, [pc, #132]	; (8013918 <tcp_receive+0x5f0>)
 8013894:	4821      	ldr	r0, [pc, #132]	; (801391c <tcp_receive+0x5f4>)
 8013896:	f007 fced 	bl	801b274 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801389c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80138a0:	4293      	cmp	r3, r2
 80138a2:	d906      	bls.n	80138b2 <tcp_receive+0x58a>
 80138a4:	4b1b      	ldr	r3, [pc, #108]	; (8013914 <tcp_receive+0x5ec>)
 80138a6:	f240 5295 	movw	r2, #1429	; 0x595
 80138aa:	491d      	ldr	r1, [pc, #116]	; (8013920 <tcp_receive+0x5f8>)
 80138ac:	481b      	ldr	r0, [pc, #108]	; (801391c <tcp_receive+0x5f4>)
 80138ae:	f007 fce1 	bl	801b274 <iprintf>
      off = (u16_t)off32;
 80138b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80138b8:	4b15      	ldr	r3, [pc, #84]	; (8013910 <tcp_receive+0x5e8>)
 80138ba:	685b      	ldr	r3, [r3, #4]
 80138bc:	891b      	ldrh	r3, [r3, #8]
 80138be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80138c2:	429a      	cmp	r2, r3
 80138c4:	d906      	bls.n	80138d4 <tcp_receive+0x5ac>
 80138c6:	4b13      	ldr	r3, [pc, #76]	; (8013914 <tcp_receive+0x5ec>)
 80138c8:	f240 5297 	movw	r2, #1431	; 0x597
 80138cc:	4915      	ldr	r1, [pc, #84]	; (8013924 <tcp_receive+0x5fc>)
 80138ce:	4813      	ldr	r0, [pc, #76]	; (801391c <tcp_receive+0x5f4>)
 80138d0:	f007 fcd0 	bl	801b274 <iprintf>
      inseg.len -= off;
 80138d4:	4b0e      	ldr	r3, [pc, #56]	; (8013910 <tcp_receive+0x5e8>)
 80138d6:	891a      	ldrh	r2, [r3, #8]
 80138d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80138dc:	1ad3      	subs	r3, r2, r3
 80138de:	b29a      	uxth	r2, r3
 80138e0:	4b0b      	ldr	r3, [pc, #44]	; (8013910 <tcp_receive+0x5e8>)
 80138e2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80138e4:	4b0a      	ldr	r3, [pc, #40]	; (8013910 <tcp_receive+0x5e8>)
 80138e6:	685b      	ldr	r3, [r3, #4]
 80138e8:	891a      	ldrh	r2, [r3, #8]
 80138ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80138ee:	1ad3      	subs	r3, r2, r3
 80138f0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80138f2:	e029      	b.n	8013948 <tcp_receive+0x620>
 80138f4:	08021ce0 	.word	0x08021ce0
 80138f8:	08021ce8 	.word	0x08021ce8
 80138fc:	20000500 	.word	0x20000500
 8013900:	200004fc 	.word	0x200004fc
 8013904:	2000762c 	.word	0x2000762c
 8013908:	20000502 	.word	0x20000502
 801390c:	200004f8 	.word	0x200004f8
 8013910:	200004d8 	.word	0x200004d8
 8013914:	08021978 	.word	0x08021978
 8013918:	08021cf0 	.word	0x08021cf0
 801391c:	080219c4 	.word	0x080219c4
 8013920:	08021d00 	.word	0x08021d00
 8013924:	08021d10 	.word	0x08021d10
        off -= p->len;
 8013928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801392a:	895b      	ldrh	r3, [r3, #10]
 801392c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013930:	1ad3      	subs	r3, r2, r3
 8013932:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013938:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801393a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801393c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801393e:	2200      	movs	r2, #0
 8013940:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8013948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801394a:	895b      	ldrh	r3, [r3, #10]
 801394c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013950:	429a      	cmp	r2, r3
 8013952:	d8e9      	bhi.n	8013928 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013954:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013958:	4619      	mov	r1, r3
 801395a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801395c:	f7fc fb7c 	bl	8010058 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013964:	4a91      	ldr	r2, [pc, #580]	; (8013bac <tcp_receive+0x884>)
 8013966:	6013      	str	r3, [r2, #0]
 8013968:	4b91      	ldr	r3, [pc, #580]	; (8013bb0 <tcp_receive+0x888>)
 801396a:	68db      	ldr	r3, [r3, #12]
 801396c:	4a8f      	ldr	r2, [pc, #572]	; (8013bac <tcp_receive+0x884>)
 801396e:	6812      	ldr	r2, [r2, #0]
 8013970:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013972:	e00d      	b.n	8013990 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013974:	4b8d      	ldr	r3, [pc, #564]	; (8013bac <tcp_receive+0x884>)
 8013976:	681a      	ldr	r2, [r3, #0]
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801397c:	1ad3      	subs	r3, r2, r3
 801397e:	2b00      	cmp	r3, #0
 8013980:	da06      	bge.n	8013990 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	8b5b      	ldrh	r3, [r3, #26]
 8013986:	f043 0302 	orr.w	r3, r3, #2
 801398a:	b29a      	uxth	r2, r3
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013990:	4b86      	ldr	r3, [pc, #536]	; (8013bac <tcp_receive+0x884>)
 8013992:	681a      	ldr	r2, [r3, #0]
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013998:	1ad3      	subs	r3, r2, r3
 801399a:	2b00      	cmp	r3, #0
 801399c:	f2c0 842a 	blt.w	80141f4 <tcp_receive+0xecc>
 80139a0:	4b82      	ldr	r3, [pc, #520]	; (8013bac <tcp_receive+0x884>)
 80139a2:	681a      	ldr	r2, [r3, #0]
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139a8:	6879      	ldr	r1, [r7, #4]
 80139aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80139ac:	440b      	add	r3, r1
 80139ae:	1ad3      	subs	r3, r2, r3
 80139b0:	3301      	adds	r3, #1
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	f300 841e 	bgt.w	80141f4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80139bc:	4b7b      	ldr	r3, [pc, #492]	; (8013bac <tcp_receive+0x884>)
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	429a      	cmp	r2, r3
 80139c2:	f040 829a 	bne.w	8013efa <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80139c6:	4b7a      	ldr	r3, [pc, #488]	; (8013bb0 <tcp_receive+0x888>)
 80139c8:	891c      	ldrh	r4, [r3, #8]
 80139ca:	4b79      	ldr	r3, [pc, #484]	; (8013bb0 <tcp_receive+0x888>)
 80139cc:	68db      	ldr	r3, [r3, #12]
 80139ce:	899b      	ldrh	r3, [r3, #12]
 80139d0:	b29b      	uxth	r3, r3
 80139d2:	4618      	mov	r0, r3
 80139d4:	f7fb f92e 	bl	800ec34 <lwip_htons>
 80139d8:	4603      	mov	r3, r0
 80139da:	b2db      	uxtb	r3, r3
 80139dc:	f003 0303 	and.w	r3, r3, #3
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d001      	beq.n	80139e8 <tcp_receive+0x6c0>
 80139e4:	2301      	movs	r3, #1
 80139e6:	e000      	b.n	80139ea <tcp_receive+0x6c2>
 80139e8:	2300      	movs	r3, #0
 80139ea:	4423      	add	r3, r4
 80139ec:	b29a      	uxth	r2, r3
 80139ee:	4b71      	ldr	r3, [pc, #452]	; (8013bb4 <tcp_receive+0x88c>)
 80139f0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80139f6:	4b6f      	ldr	r3, [pc, #444]	; (8013bb4 <tcp_receive+0x88c>)
 80139f8:	881b      	ldrh	r3, [r3, #0]
 80139fa:	429a      	cmp	r2, r3
 80139fc:	d275      	bcs.n	8013aea <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80139fe:	4b6c      	ldr	r3, [pc, #432]	; (8013bb0 <tcp_receive+0x888>)
 8013a00:	68db      	ldr	r3, [r3, #12]
 8013a02:	899b      	ldrh	r3, [r3, #12]
 8013a04:	b29b      	uxth	r3, r3
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7fb f914 	bl	800ec34 <lwip_htons>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	b2db      	uxtb	r3, r3
 8013a10:	f003 0301 	and.w	r3, r3, #1
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d01f      	beq.n	8013a58 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013a18:	4b65      	ldr	r3, [pc, #404]	; (8013bb0 <tcp_receive+0x888>)
 8013a1a:	68db      	ldr	r3, [r3, #12]
 8013a1c:	899b      	ldrh	r3, [r3, #12]
 8013a1e:	b29b      	uxth	r3, r3
 8013a20:	b21b      	sxth	r3, r3
 8013a22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013a26:	b21c      	sxth	r4, r3
 8013a28:	4b61      	ldr	r3, [pc, #388]	; (8013bb0 <tcp_receive+0x888>)
 8013a2a:	68db      	ldr	r3, [r3, #12]
 8013a2c:	899b      	ldrh	r3, [r3, #12]
 8013a2e:	b29b      	uxth	r3, r3
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7fb f8ff 	bl	800ec34 <lwip_htons>
 8013a36:	4603      	mov	r3, r0
 8013a38:	b2db      	uxtb	r3, r3
 8013a3a:	b29b      	uxth	r3, r3
 8013a3c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013a40:	b29b      	uxth	r3, r3
 8013a42:	4618      	mov	r0, r3
 8013a44:	f7fb f8f6 	bl	800ec34 <lwip_htons>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	b21b      	sxth	r3, r3
 8013a4c:	4323      	orrs	r3, r4
 8013a4e:	b21a      	sxth	r2, r3
 8013a50:	4b57      	ldr	r3, [pc, #348]	; (8013bb0 <tcp_receive+0x888>)
 8013a52:	68db      	ldr	r3, [r3, #12]
 8013a54:	b292      	uxth	r2, r2
 8013a56:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013a5c:	4b54      	ldr	r3, [pc, #336]	; (8013bb0 <tcp_receive+0x888>)
 8013a5e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013a60:	4b53      	ldr	r3, [pc, #332]	; (8013bb0 <tcp_receive+0x888>)
 8013a62:	68db      	ldr	r3, [r3, #12]
 8013a64:	899b      	ldrh	r3, [r3, #12]
 8013a66:	b29b      	uxth	r3, r3
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f7fb f8e3 	bl	800ec34 <lwip_htons>
 8013a6e:	4603      	mov	r3, r0
 8013a70:	b2db      	uxtb	r3, r3
 8013a72:	f003 0302 	and.w	r3, r3, #2
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d005      	beq.n	8013a86 <tcp_receive+0x75e>
            inseg.len -= 1;
 8013a7a:	4b4d      	ldr	r3, [pc, #308]	; (8013bb0 <tcp_receive+0x888>)
 8013a7c:	891b      	ldrh	r3, [r3, #8]
 8013a7e:	3b01      	subs	r3, #1
 8013a80:	b29a      	uxth	r2, r3
 8013a82:	4b4b      	ldr	r3, [pc, #300]	; (8013bb0 <tcp_receive+0x888>)
 8013a84:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013a86:	4b4a      	ldr	r3, [pc, #296]	; (8013bb0 <tcp_receive+0x888>)
 8013a88:	685a      	ldr	r2, [r3, #4]
 8013a8a:	4b49      	ldr	r3, [pc, #292]	; (8013bb0 <tcp_receive+0x888>)
 8013a8c:	891b      	ldrh	r3, [r3, #8]
 8013a8e:	4619      	mov	r1, r3
 8013a90:	4610      	mov	r0, r2
 8013a92:	f7fc f9e1 	bl	800fe58 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013a96:	4b46      	ldr	r3, [pc, #280]	; (8013bb0 <tcp_receive+0x888>)
 8013a98:	891c      	ldrh	r4, [r3, #8]
 8013a9a:	4b45      	ldr	r3, [pc, #276]	; (8013bb0 <tcp_receive+0x888>)
 8013a9c:	68db      	ldr	r3, [r3, #12]
 8013a9e:	899b      	ldrh	r3, [r3, #12]
 8013aa0:	b29b      	uxth	r3, r3
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f7fb f8c6 	bl	800ec34 <lwip_htons>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	b2db      	uxtb	r3, r3
 8013aac:	f003 0303 	and.w	r3, r3, #3
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d001      	beq.n	8013ab8 <tcp_receive+0x790>
 8013ab4:	2301      	movs	r3, #1
 8013ab6:	e000      	b.n	8013aba <tcp_receive+0x792>
 8013ab8:	2300      	movs	r3, #0
 8013aba:	4423      	add	r3, r4
 8013abc:	b29a      	uxth	r2, r3
 8013abe:	4b3d      	ldr	r3, [pc, #244]	; (8013bb4 <tcp_receive+0x88c>)
 8013ac0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013ac2:	4b3c      	ldr	r3, [pc, #240]	; (8013bb4 <tcp_receive+0x88c>)
 8013ac4:	881b      	ldrh	r3, [r3, #0]
 8013ac6:	461a      	mov	r2, r3
 8013ac8:	4b38      	ldr	r3, [pc, #224]	; (8013bac <tcp_receive+0x884>)
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	441a      	add	r2, r3
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ad2:	6879      	ldr	r1, [r7, #4]
 8013ad4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013ad6:	440b      	add	r3, r1
 8013ad8:	429a      	cmp	r2, r3
 8013ada:	d006      	beq.n	8013aea <tcp_receive+0x7c2>
 8013adc:	4b36      	ldr	r3, [pc, #216]	; (8013bb8 <tcp_receive+0x890>)
 8013ade:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8013ae2:	4936      	ldr	r1, [pc, #216]	; (8013bbc <tcp_receive+0x894>)
 8013ae4:	4836      	ldr	r0, [pc, #216]	; (8013bc0 <tcp_receive+0x898>)
 8013ae6:	f007 fbc5 	bl	801b274 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	f000 80e7 	beq.w	8013cc2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013af4:	4b2e      	ldr	r3, [pc, #184]	; (8013bb0 <tcp_receive+0x888>)
 8013af6:	68db      	ldr	r3, [r3, #12]
 8013af8:	899b      	ldrh	r3, [r3, #12]
 8013afa:	b29b      	uxth	r3, r3
 8013afc:	4618      	mov	r0, r3
 8013afe:	f7fb f899 	bl	800ec34 <lwip_htons>
 8013b02:	4603      	mov	r3, r0
 8013b04:	b2db      	uxtb	r3, r3
 8013b06:	f003 0301 	and.w	r3, r3, #1
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d010      	beq.n	8013b30 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013b0e:	e00a      	b.n	8013b26 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013b14:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013b1a:	681a      	ldr	r2, [r3, #0]
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8013b20:	68f8      	ldr	r0, [r7, #12]
 8013b22:	f7fd fd97 	bl	8011654 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d1f0      	bne.n	8013b10 <tcp_receive+0x7e8>
 8013b2e:	e0c8      	b.n	8013cc2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013b34:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013b36:	e052      	b.n	8013bde <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b3a:	68db      	ldr	r3, [r3, #12]
 8013b3c:	899b      	ldrh	r3, [r3, #12]
 8013b3e:	b29b      	uxth	r3, r3
 8013b40:	4618      	mov	r0, r3
 8013b42:	f7fb f877 	bl	800ec34 <lwip_htons>
 8013b46:	4603      	mov	r3, r0
 8013b48:	b2db      	uxtb	r3, r3
 8013b4a:	f003 0301 	and.w	r3, r3, #1
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d03d      	beq.n	8013bce <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013b52:	4b17      	ldr	r3, [pc, #92]	; (8013bb0 <tcp_receive+0x888>)
 8013b54:	68db      	ldr	r3, [r3, #12]
 8013b56:	899b      	ldrh	r3, [r3, #12]
 8013b58:	b29b      	uxth	r3, r3
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7fb f86a 	bl	800ec34 <lwip_htons>
 8013b60:	4603      	mov	r3, r0
 8013b62:	b2db      	uxtb	r3, r3
 8013b64:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d130      	bne.n	8013bce <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013b6c:	4b10      	ldr	r3, [pc, #64]	; (8013bb0 <tcp_receive+0x888>)
 8013b6e:	68db      	ldr	r3, [r3, #12]
 8013b70:	899b      	ldrh	r3, [r3, #12]
 8013b72:	b29c      	uxth	r4, r3
 8013b74:	2001      	movs	r0, #1
 8013b76:	f7fb f85d 	bl	800ec34 <lwip_htons>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	461a      	mov	r2, r3
 8013b7e:	4b0c      	ldr	r3, [pc, #48]	; (8013bb0 <tcp_receive+0x888>)
 8013b80:	68db      	ldr	r3, [r3, #12]
 8013b82:	4322      	orrs	r2, r4
 8013b84:	b292      	uxth	r2, r2
 8013b86:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013b88:	4b09      	ldr	r3, [pc, #36]	; (8013bb0 <tcp_receive+0x888>)
 8013b8a:	891c      	ldrh	r4, [r3, #8]
 8013b8c:	4b08      	ldr	r3, [pc, #32]	; (8013bb0 <tcp_receive+0x888>)
 8013b8e:	68db      	ldr	r3, [r3, #12]
 8013b90:	899b      	ldrh	r3, [r3, #12]
 8013b92:	b29b      	uxth	r3, r3
 8013b94:	4618      	mov	r0, r3
 8013b96:	f7fb f84d 	bl	800ec34 <lwip_htons>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	b2db      	uxtb	r3, r3
 8013b9e:	f003 0303 	and.w	r3, r3, #3
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d00e      	beq.n	8013bc4 <tcp_receive+0x89c>
 8013ba6:	2301      	movs	r3, #1
 8013ba8:	e00d      	b.n	8013bc6 <tcp_receive+0x89e>
 8013baa:	bf00      	nop
 8013bac:	200004f8 	.word	0x200004f8
 8013bb0:	200004d8 	.word	0x200004d8
 8013bb4:	20000502 	.word	0x20000502
 8013bb8:	08021978 	.word	0x08021978
 8013bbc:	08021d20 	.word	0x08021d20
 8013bc0:	080219c4 	.word	0x080219c4
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	4423      	add	r3, r4
 8013bc8:	b29a      	uxth	r2, r3
 8013bca:	4b98      	ldr	r3, [pc, #608]	; (8013e2c <tcp_receive+0xb04>)
 8013bcc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bd0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8013bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8013bd8:	6938      	ldr	r0, [r7, #16]
 8013bda:	f7fd fd3b 	bl	8011654 <tcp_seg_free>
            while (next &&
 8013bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d00e      	beq.n	8013c02 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013be4:	4b91      	ldr	r3, [pc, #580]	; (8013e2c <tcp_receive+0xb04>)
 8013be6:	881b      	ldrh	r3, [r3, #0]
 8013be8:	461a      	mov	r2, r3
 8013bea:	4b91      	ldr	r3, [pc, #580]	; (8013e30 <tcp_receive+0xb08>)
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	441a      	add	r2, r3
 8013bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bf2:	68db      	ldr	r3, [r3, #12]
 8013bf4:	685b      	ldr	r3, [r3, #4]
 8013bf6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013bf8:	8909      	ldrh	r1, [r1, #8]
 8013bfa:	440b      	add	r3, r1
 8013bfc:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	da9a      	bge.n	8013b38 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d059      	beq.n	8013cbc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8013c08:	4b88      	ldr	r3, [pc, #544]	; (8013e2c <tcp_receive+0xb04>)
 8013c0a:	881b      	ldrh	r3, [r3, #0]
 8013c0c:	461a      	mov	r2, r3
 8013c0e:	4b88      	ldr	r3, [pc, #544]	; (8013e30 <tcp_receive+0xb08>)
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	441a      	add	r2, r3
 8013c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c16:	68db      	ldr	r3, [r3, #12]
 8013c18:	685b      	ldr	r3, [r3, #4]
 8013c1a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	dd4d      	ble.n	8013cbc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c22:	68db      	ldr	r3, [r3, #12]
 8013c24:	685b      	ldr	r3, [r3, #4]
 8013c26:	b29a      	uxth	r2, r3
 8013c28:	4b81      	ldr	r3, [pc, #516]	; (8013e30 <tcp_receive+0xb08>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	b29b      	uxth	r3, r3
 8013c2e:	1ad3      	subs	r3, r2, r3
 8013c30:	b29a      	uxth	r2, r3
 8013c32:	4b80      	ldr	r3, [pc, #512]	; (8013e34 <tcp_receive+0xb0c>)
 8013c34:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013c36:	4b7f      	ldr	r3, [pc, #508]	; (8013e34 <tcp_receive+0xb0c>)
 8013c38:	68db      	ldr	r3, [r3, #12]
 8013c3a:	899b      	ldrh	r3, [r3, #12]
 8013c3c:	b29b      	uxth	r3, r3
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f7fa fff8 	bl	800ec34 <lwip_htons>
 8013c44:	4603      	mov	r3, r0
 8013c46:	b2db      	uxtb	r3, r3
 8013c48:	f003 0302 	and.w	r3, r3, #2
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d005      	beq.n	8013c5c <tcp_receive+0x934>
                inseg.len -= 1;
 8013c50:	4b78      	ldr	r3, [pc, #480]	; (8013e34 <tcp_receive+0xb0c>)
 8013c52:	891b      	ldrh	r3, [r3, #8]
 8013c54:	3b01      	subs	r3, #1
 8013c56:	b29a      	uxth	r2, r3
 8013c58:	4b76      	ldr	r3, [pc, #472]	; (8013e34 <tcp_receive+0xb0c>)
 8013c5a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013c5c:	4b75      	ldr	r3, [pc, #468]	; (8013e34 <tcp_receive+0xb0c>)
 8013c5e:	685a      	ldr	r2, [r3, #4]
 8013c60:	4b74      	ldr	r3, [pc, #464]	; (8013e34 <tcp_receive+0xb0c>)
 8013c62:	891b      	ldrh	r3, [r3, #8]
 8013c64:	4619      	mov	r1, r3
 8013c66:	4610      	mov	r0, r2
 8013c68:	f7fc f8f6 	bl	800fe58 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013c6c:	4b71      	ldr	r3, [pc, #452]	; (8013e34 <tcp_receive+0xb0c>)
 8013c6e:	891c      	ldrh	r4, [r3, #8]
 8013c70:	4b70      	ldr	r3, [pc, #448]	; (8013e34 <tcp_receive+0xb0c>)
 8013c72:	68db      	ldr	r3, [r3, #12]
 8013c74:	899b      	ldrh	r3, [r3, #12]
 8013c76:	b29b      	uxth	r3, r3
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f7fa ffdb 	bl	800ec34 <lwip_htons>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	b2db      	uxtb	r3, r3
 8013c82:	f003 0303 	and.w	r3, r3, #3
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d001      	beq.n	8013c8e <tcp_receive+0x966>
 8013c8a:	2301      	movs	r3, #1
 8013c8c:	e000      	b.n	8013c90 <tcp_receive+0x968>
 8013c8e:	2300      	movs	r3, #0
 8013c90:	4423      	add	r3, r4
 8013c92:	b29a      	uxth	r2, r3
 8013c94:	4b65      	ldr	r3, [pc, #404]	; (8013e2c <tcp_receive+0xb04>)
 8013c96:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013c98:	4b64      	ldr	r3, [pc, #400]	; (8013e2c <tcp_receive+0xb04>)
 8013c9a:	881b      	ldrh	r3, [r3, #0]
 8013c9c:	461a      	mov	r2, r3
 8013c9e:	4b64      	ldr	r3, [pc, #400]	; (8013e30 <tcp_receive+0xb08>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	441a      	add	r2, r3
 8013ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ca6:	68db      	ldr	r3, [r3, #12]
 8013ca8:	685b      	ldr	r3, [r3, #4]
 8013caa:	429a      	cmp	r2, r3
 8013cac:	d006      	beq.n	8013cbc <tcp_receive+0x994>
 8013cae:	4b62      	ldr	r3, [pc, #392]	; (8013e38 <tcp_receive+0xb10>)
 8013cb0:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8013cb4:	4961      	ldr	r1, [pc, #388]	; (8013e3c <tcp_receive+0xb14>)
 8013cb6:	4862      	ldr	r0, [pc, #392]	; (8013e40 <tcp_receive+0xb18>)
 8013cb8:	f007 fadc 	bl	801b274 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013cc0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013cc2:	4b5a      	ldr	r3, [pc, #360]	; (8013e2c <tcp_receive+0xb04>)
 8013cc4:	881b      	ldrh	r3, [r3, #0]
 8013cc6:	461a      	mov	r2, r3
 8013cc8:	4b59      	ldr	r3, [pc, #356]	; (8013e30 <tcp_receive+0xb08>)
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	441a      	add	r2, r3
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013cd6:	4b55      	ldr	r3, [pc, #340]	; (8013e2c <tcp_receive+0xb04>)
 8013cd8:	881b      	ldrh	r3, [r3, #0]
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d206      	bcs.n	8013cec <tcp_receive+0x9c4>
 8013cde:	4b56      	ldr	r3, [pc, #344]	; (8013e38 <tcp_receive+0xb10>)
 8013ce0:	f240 6207 	movw	r2, #1543	; 0x607
 8013ce4:	4957      	ldr	r1, [pc, #348]	; (8013e44 <tcp_receive+0xb1c>)
 8013ce6:	4856      	ldr	r0, [pc, #344]	; (8013e40 <tcp_receive+0xb18>)
 8013ce8:	f007 fac4 	bl	801b274 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013cf0:	4b4e      	ldr	r3, [pc, #312]	; (8013e2c <tcp_receive+0xb04>)
 8013cf2:	881b      	ldrh	r3, [r3, #0]
 8013cf4:	1ad3      	subs	r3, r2, r3
 8013cf6:	b29a      	uxth	r2, r3
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013cfc:	6878      	ldr	r0, [r7, #4]
 8013cfe:	f7fc ffcd 	bl	8010c9c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013d02:	4b4c      	ldr	r3, [pc, #304]	; (8013e34 <tcp_receive+0xb0c>)
 8013d04:	685b      	ldr	r3, [r3, #4]
 8013d06:	891b      	ldrh	r3, [r3, #8]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d006      	beq.n	8013d1a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8013d0c:	4b49      	ldr	r3, [pc, #292]	; (8013e34 <tcp_receive+0xb0c>)
 8013d0e:	685b      	ldr	r3, [r3, #4]
 8013d10:	4a4d      	ldr	r2, [pc, #308]	; (8013e48 <tcp_receive+0xb20>)
 8013d12:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013d14:	4b47      	ldr	r3, [pc, #284]	; (8013e34 <tcp_receive+0xb0c>)
 8013d16:	2200      	movs	r2, #0
 8013d18:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013d1a:	4b46      	ldr	r3, [pc, #280]	; (8013e34 <tcp_receive+0xb0c>)
 8013d1c:	68db      	ldr	r3, [r3, #12]
 8013d1e:	899b      	ldrh	r3, [r3, #12]
 8013d20:	b29b      	uxth	r3, r3
 8013d22:	4618      	mov	r0, r3
 8013d24:	f7fa ff86 	bl	800ec34 <lwip_htons>
 8013d28:	4603      	mov	r3, r0
 8013d2a:	b2db      	uxtb	r3, r3
 8013d2c:	f003 0301 	and.w	r3, r3, #1
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	f000 80b8 	beq.w	8013ea6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013d36:	4b45      	ldr	r3, [pc, #276]	; (8013e4c <tcp_receive+0xb24>)
 8013d38:	781b      	ldrb	r3, [r3, #0]
 8013d3a:	f043 0320 	orr.w	r3, r3, #32
 8013d3e:	b2da      	uxtb	r2, r3
 8013d40:	4b42      	ldr	r3, [pc, #264]	; (8013e4c <tcp_receive+0xb24>)
 8013d42:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013d44:	e0af      	b.n	8013ea6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d4a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d50:	68db      	ldr	r3, [r3, #12]
 8013d52:	685b      	ldr	r3, [r3, #4]
 8013d54:	4a36      	ldr	r2, [pc, #216]	; (8013e30 <tcp_receive+0xb08>)
 8013d56:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013d58:	68bb      	ldr	r3, [r7, #8]
 8013d5a:	891b      	ldrh	r3, [r3, #8]
 8013d5c:	461c      	mov	r4, r3
 8013d5e:	68bb      	ldr	r3, [r7, #8]
 8013d60:	68db      	ldr	r3, [r3, #12]
 8013d62:	899b      	ldrh	r3, [r3, #12]
 8013d64:	b29b      	uxth	r3, r3
 8013d66:	4618      	mov	r0, r3
 8013d68:	f7fa ff64 	bl	800ec34 <lwip_htons>
 8013d6c:	4603      	mov	r3, r0
 8013d6e:	b2db      	uxtb	r3, r3
 8013d70:	f003 0303 	and.w	r3, r3, #3
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d001      	beq.n	8013d7c <tcp_receive+0xa54>
 8013d78:	2301      	movs	r3, #1
 8013d7a:	e000      	b.n	8013d7e <tcp_receive+0xa56>
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	191a      	adds	r2, r3, r4
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d84:	441a      	add	r2, r3
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013d8e:	461c      	mov	r4, r3
 8013d90:	68bb      	ldr	r3, [r7, #8]
 8013d92:	891b      	ldrh	r3, [r3, #8]
 8013d94:	461d      	mov	r5, r3
 8013d96:	68bb      	ldr	r3, [r7, #8]
 8013d98:	68db      	ldr	r3, [r3, #12]
 8013d9a:	899b      	ldrh	r3, [r3, #12]
 8013d9c:	b29b      	uxth	r3, r3
 8013d9e:	4618      	mov	r0, r3
 8013da0:	f7fa ff48 	bl	800ec34 <lwip_htons>
 8013da4:	4603      	mov	r3, r0
 8013da6:	b2db      	uxtb	r3, r3
 8013da8:	f003 0303 	and.w	r3, r3, #3
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d001      	beq.n	8013db4 <tcp_receive+0xa8c>
 8013db0:	2301      	movs	r3, #1
 8013db2:	e000      	b.n	8013db6 <tcp_receive+0xa8e>
 8013db4:	2300      	movs	r3, #0
 8013db6:	442b      	add	r3, r5
 8013db8:	429c      	cmp	r4, r3
 8013dba:	d206      	bcs.n	8013dca <tcp_receive+0xaa2>
 8013dbc:	4b1e      	ldr	r3, [pc, #120]	; (8013e38 <tcp_receive+0xb10>)
 8013dbe:	f240 622c 	movw	r2, #1580	; 0x62c
 8013dc2:	4923      	ldr	r1, [pc, #140]	; (8013e50 <tcp_receive+0xb28>)
 8013dc4:	481e      	ldr	r0, [pc, #120]	; (8013e40 <tcp_receive+0xb18>)
 8013dc6:	f007 fa55 	bl	801b274 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013dca:	68bb      	ldr	r3, [r7, #8]
 8013dcc:	891b      	ldrh	r3, [r3, #8]
 8013dce:	461c      	mov	r4, r3
 8013dd0:	68bb      	ldr	r3, [r7, #8]
 8013dd2:	68db      	ldr	r3, [r3, #12]
 8013dd4:	899b      	ldrh	r3, [r3, #12]
 8013dd6:	b29b      	uxth	r3, r3
 8013dd8:	4618      	mov	r0, r3
 8013dda:	f7fa ff2b 	bl	800ec34 <lwip_htons>
 8013dde:	4603      	mov	r3, r0
 8013de0:	b2db      	uxtb	r3, r3
 8013de2:	f003 0303 	and.w	r3, r3, #3
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d001      	beq.n	8013dee <tcp_receive+0xac6>
 8013dea:	2301      	movs	r3, #1
 8013dec:	e000      	b.n	8013df0 <tcp_receive+0xac8>
 8013dee:	2300      	movs	r3, #0
 8013df0:	1919      	adds	r1, r3, r4
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013df6:	b28b      	uxth	r3, r1
 8013df8:	1ad3      	subs	r3, r2, r3
 8013dfa:	b29a      	uxth	r2, r3
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013e00:	6878      	ldr	r0, [r7, #4]
 8013e02:	f7fc ff4b 	bl	8010c9c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013e06:	68bb      	ldr	r3, [r7, #8]
 8013e08:	685b      	ldr	r3, [r3, #4]
 8013e0a:	891b      	ldrh	r3, [r3, #8]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d028      	beq.n	8013e62 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013e10:	4b0d      	ldr	r3, [pc, #52]	; (8013e48 <tcp_receive+0xb20>)
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d01d      	beq.n	8013e54 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8013e18:	4b0b      	ldr	r3, [pc, #44]	; (8013e48 <tcp_receive+0xb20>)
 8013e1a:	681a      	ldr	r2, [r3, #0]
 8013e1c:	68bb      	ldr	r3, [r7, #8]
 8013e1e:	685b      	ldr	r3, [r3, #4]
 8013e20:	4619      	mov	r1, r3
 8013e22:	4610      	mov	r0, r2
 8013e24:	f7fc fa60 	bl	80102e8 <pbuf_cat>
 8013e28:	e018      	b.n	8013e5c <tcp_receive+0xb34>
 8013e2a:	bf00      	nop
 8013e2c:	20000502 	.word	0x20000502
 8013e30:	200004f8 	.word	0x200004f8
 8013e34:	200004d8 	.word	0x200004d8
 8013e38:	08021978 	.word	0x08021978
 8013e3c:	08021d58 	.word	0x08021d58
 8013e40:	080219c4 	.word	0x080219c4
 8013e44:	08021d94 	.word	0x08021d94
 8013e48:	20000508 	.word	0x20000508
 8013e4c:	20000505 	.word	0x20000505
 8013e50:	08021db4 	.word	0x08021db4
            } else {
              recv_data = cseg->p;
 8013e54:	68bb      	ldr	r3, [r7, #8]
 8013e56:	685b      	ldr	r3, [r3, #4]
 8013e58:	4a70      	ldr	r2, [pc, #448]	; (801401c <tcp_receive+0xcf4>)
 8013e5a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013e5c:	68bb      	ldr	r3, [r7, #8]
 8013e5e:	2200      	movs	r2, #0
 8013e60:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013e62:	68bb      	ldr	r3, [r7, #8]
 8013e64:	68db      	ldr	r3, [r3, #12]
 8013e66:	899b      	ldrh	r3, [r3, #12]
 8013e68:	b29b      	uxth	r3, r3
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f7fa fee2 	bl	800ec34 <lwip_htons>
 8013e70:	4603      	mov	r3, r0
 8013e72:	b2db      	uxtb	r3, r3
 8013e74:	f003 0301 	and.w	r3, r3, #1
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d00d      	beq.n	8013e98 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013e7c:	4b68      	ldr	r3, [pc, #416]	; (8014020 <tcp_receive+0xcf8>)
 8013e7e:	781b      	ldrb	r3, [r3, #0]
 8013e80:	f043 0320 	orr.w	r3, r3, #32
 8013e84:	b2da      	uxtb	r2, r3
 8013e86:	4b66      	ldr	r3, [pc, #408]	; (8014020 <tcp_receive+0xcf8>)
 8013e88:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	7d1b      	ldrb	r3, [r3, #20]
 8013e8e:	2b04      	cmp	r3, #4
 8013e90:	d102      	bne.n	8013e98 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	2207      	movs	r2, #7
 8013e96:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	681a      	ldr	r2, [r3, #0]
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8013ea0:	68b8      	ldr	r0, [r7, #8]
 8013ea2:	f7fd fbd7 	bl	8011654 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d008      	beq.n	8013ec0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013eb2:	68db      	ldr	r3, [r3, #12]
 8013eb4:	685a      	ldr	r2, [r3, #4]
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8013eba:	429a      	cmp	r2, r3
 8013ebc:	f43f af43 	beq.w	8013d46 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	8b5b      	ldrh	r3, [r3, #26]
 8013ec4:	f003 0301 	and.w	r3, r3, #1
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d00e      	beq.n	8013eea <tcp_receive+0xbc2>
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	8b5b      	ldrh	r3, [r3, #26]
 8013ed0:	f023 0301 	bic.w	r3, r3, #1
 8013ed4:	b29a      	uxth	r2, r3
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	835a      	strh	r2, [r3, #26]
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	8b5b      	ldrh	r3, [r3, #26]
 8013ede:	f043 0302 	orr.w	r3, r3, #2
 8013ee2:	b29a      	uxth	r2, r3
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013ee8:	e188      	b.n	80141fc <tcp_receive+0xed4>
        tcp_ack(pcb);
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	8b5b      	ldrh	r3, [r3, #26]
 8013eee:	f043 0301 	orr.w	r3, r3, #1
 8013ef2:	b29a      	uxth	r2, r3
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013ef8:	e180      	b.n	80141fc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d106      	bne.n	8013f10 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013f02:	4848      	ldr	r0, [pc, #288]	; (8014024 <tcp_receive+0xcfc>)
 8013f04:	f7fd fbbe 	bl	8011684 <tcp_seg_copy>
 8013f08:	4602      	mov	r2, r0
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	675a      	str	r2, [r3, #116]	; 0x74
 8013f0e:	e16d      	b.n	80141ec <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013f10:	2300      	movs	r3, #0
 8013f12:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f18:	63bb      	str	r3, [r7, #56]	; 0x38
 8013f1a:	e157      	b.n	80141cc <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8013f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f1e:	68db      	ldr	r3, [r3, #12]
 8013f20:	685a      	ldr	r2, [r3, #4]
 8013f22:	4b41      	ldr	r3, [pc, #260]	; (8014028 <tcp_receive+0xd00>)
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	429a      	cmp	r2, r3
 8013f28:	d11d      	bne.n	8013f66 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013f2a:	4b3e      	ldr	r3, [pc, #248]	; (8014024 <tcp_receive+0xcfc>)
 8013f2c:	891a      	ldrh	r2, [r3, #8]
 8013f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f30:	891b      	ldrh	r3, [r3, #8]
 8013f32:	429a      	cmp	r2, r3
 8013f34:	f240 814f 	bls.w	80141d6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013f38:	483a      	ldr	r0, [pc, #232]	; (8014024 <tcp_receive+0xcfc>)
 8013f3a:	f7fd fba3 	bl	8011684 <tcp_seg_copy>
 8013f3e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8013f40:	697b      	ldr	r3, [r7, #20]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	f000 8149 	beq.w	80141da <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8013f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d003      	beq.n	8013f56 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8013f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f50:	697a      	ldr	r2, [r7, #20]
 8013f52:	601a      	str	r2, [r3, #0]
 8013f54:	e002      	b.n	8013f5c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	697a      	ldr	r2, [r7, #20]
 8013f5a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013f5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013f5e:	6978      	ldr	r0, [r7, #20]
 8013f60:	f7ff f8de 	bl	8013120 <tcp_oos_insert_segment>
                }
                break;
 8013f64:	e139      	b.n	80141da <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8013f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d117      	bne.n	8013f9c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013f6c:	4b2e      	ldr	r3, [pc, #184]	; (8014028 <tcp_receive+0xd00>)
 8013f6e:	681a      	ldr	r2, [r3, #0]
 8013f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f72:	68db      	ldr	r3, [r3, #12]
 8013f74:	685b      	ldr	r3, [r3, #4]
 8013f76:	1ad3      	subs	r3, r2, r3
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	da57      	bge.n	801402c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013f7c:	4829      	ldr	r0, [pc, #164]	; (8014024 <tcp_receive+0xcfc>)
 8013f7e:	f7fd fb81 	bl	8011684 <tcp_seg_copy>
 8013f82:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8013f84:	69bb      	ldr	r3, [r7, #24]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	f000 8129 	beq.w	80141de <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	69ba      	ldr	r2, [r7, #24]
 8013f90:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8013f92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013f94:	69b8      	ldr	r0, [r7, #24]
 8013f96:	f7ff f8c3 	bl	8013120 <tcp_oos_insert_segment>
                  }
                  break;
 8013f9a:	e120      	b.n	80141de <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013f9c:	4b22      	ldr	r3, [pc, #136]	; (8014028 <tcp_receive+0xd00>)
 8013f9e:	681a      	ldr	r2, [r3, #0]
 8013fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fa2:	68db      	ldr	r3, [r3, #12]
 8013fa4:	685b      	ldr	r3, [r3, #4]
 8013fa6:	1ad3      	subs	r3, r2, r3
 8013fa8:	3b01      	subs	r3, #1
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	db3e      	blt.n	801402c <tcp_receive+0xd04>
 8013fae:	4b1e      	ldr	r3, [pc, #120]	; (8014028 <tcp_receive+0xd00>)
 8013fb0:	681a      	ldr	r2, [r3, #0]
 8013fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fb4:	68db      	ldr	r3, [r3, #12]
 8013fb6:	685b      	ldr	r3, [r3, #4]
 8013fb8:	1ad3      	subs	r3, r2, r3
 8013fba:	3301      	adds	r3, #1
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	dc35      	bgt.n	801402c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013fc0:	4818      	ldr	r0, [pc, #96]	; (8014024 <tcp_receive+0xcfc>)
 8013fc2:	f7fd fb5f 	bl	8011684 <tcp_seg_copy>
 8013fc6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013fc8:	69fb      	ldr	r3, [r7, #28]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	f000 8109 	beq.w	80141e2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fd2:	68db      	ldr	r3, [r3, #12]
 8013fd4:	685b      	ldr	r3, [r3, #4]
 8013fd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013fd8:	8912      	ldrh	r2, [r2, #8]
 8013fda:	441a      	add	r2, r3
 8013fdc:	4b12      	ldr	r3, [pc, #72]	; (8014028 <tcp_receive+0xd00>)
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	1ad3      	subs	r3, r2, r3
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	dd12      	ble.n	801400c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013fe6:	4b10      	ldr	r3, [pc, #64]	; (8014028 <tcp_receive+0xd00>)
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	b29a      	uxth	r2, r3
 8013fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fee:	68db      	ldr	r3, [r3, #12]
 8013ff0:	685b      	ldr	r3, [r3, #4]
 8013ff2:	b29b      	uxth	r3, r3
 8013ff4:	1ad3      	subs	r3, r2, r3
 8013ff6:	b29a      	uxth	r2, r3
 8013ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ffa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ffe:	685a      	ldr	r2, [r3, #4]
 8014000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014002:	891b      	ldrh	r3, [r3, #8]
 8014004:	4619      	mov	r1, r3
 8014006:	4610      	mov	r0, r2
 8014008:	f7fb ff26 	bl	800fe58 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801400c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801400e:	69fa      	ldr	r2, [r7, #28]
 8014010:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014012:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014014:	69f8      	ldr	r0, [r7, #28]
 8014016:	f7ff f883 	bl	8013120 <tcp_oos_insert_segment>
                  }
                  break;
 801401a:	e0e2      	b.n	80141e2 <tcp_receive+0xeba>
 801401c:	20000508 	.word	0x20000508
 8014020:	20000505 	.word	0x20000505
 8014024:	200004d8 	.word	0x200004d8
 8014028:	200004f8 	.word	0x200004f8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801402c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801402e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	2b00      	cmp	r3, #0
 8014036:	f040 80c6 	bne.w	80141c6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801403a:	4b80      	ldr	r3, [pc, #512]	; (801423c <tcp_receive+0xf14>)
 801403c:	681a      	ldr	r2, [r3, #0]
 801403e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014040:	68db      	ldr	r3, [r3, #12]
 8014042:	685b      	ldr	r3, [r3, #4]
 8014044:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014046:	2b00      	cmp	r3, #0
 8014048:	f340 80bd 	ble.w	80141c6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801404c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801404e:	68db      	ldr	r3, [r3, #12]
 8014050:	899b      	ldrh	r3, [r3, #12]
 8014052:	b29b      	uxth	r3, r3
 8014054:	4618      	mov	r0, r3
 8014056:	f7fa fded 	bl	800ec34 <lwip_htons>
 801405a:	4603      	mov	r3, r0
 801405c:	b2db      	uxtb	r3, r3
 801405e:	f003 0301 	and.w	r3, r3, #1
 8014062:	2b00      	cmp	r3, #0
 8014064:	f040 80bf 	bne.w	80141e6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014068:	4875      	ldr	r0, [pc, #468]	; (8014240 <tcp_receive+0xf18>)
 801406a:	f7fd fb0b 	bl	8011684 <tcp_seg_copy>
 801406e:	4602      	mov	r2, r0
 8014070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014072:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	2b00      	cmp	r3, #0
 801407a:	f000 80b6 	beq.w	80141ea <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801407e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014080:	68db      	ldr	r3, [r3, #12]
 8014082:	685b      	ldr	r3, [r3, #4]
 8014084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014086:	8912      	ldrh	r2, [r2, #8]
 8014088:	441a      	add	r2, r3
 801408a:	4b6c      	ldr	r3, [pc, #432]	; (801423c <tcp_receive+0xf14>)
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	1ad3      	subs	r3, r2, r3
 8014090:	2b00      	cmp	r3, #0
 8014092:	dd12      	ble.n	80140ba <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014094:	4b69      	ldr	r3, [pc, #420]	; (801423c <tcp_receive+0xf14>)
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	b29a      	uxth	r2, r3
 801409a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801409c:	68db      	ldr	r3, [r3, #12]
 801409e:	685b      	ldr	r3, [r3, #4]
 80140a0:	b29b      	uxth	r3, r3
 80140a2:	1ad3      	subs	r3, r2, r3
 80140a4:	b29a      	uxth	r2, r3
 80140a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140a8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80140aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140ac:	685a      	ldr	r2, [r3, #4]
 80140ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140b0:	891b      	ldrh	r3, [r3, #8]
 80140b2:	4619      	mov	r1, r3
 80140b4:	4610      	mov	r0, r2
 80140b6:	f7fb fecf 	bl	800fe58 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80140ba:	4b62      	ldr	r3, [pc, #392]	; (8014244 <tcp_receive+0xf1c>)
 80140bc:	881b      	ldrh	r3, [r3, #0]
 80140be:	461a      	mov	r2, r3
 80140c0:	4b5e      	ldr	r3, [pc, #376]	; (801423c <tcp_receive+0xf14>)
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	441a      	add	r2, r3
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140ca:	6879      	ldr	r1, [r7, #4]
 80140cc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80140ce:	440b      	add	r3, r1
 80140d0:	1ad3      	subs	r3, r2, r3
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	f340 8089 	ble.w	80141ea <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80140d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	68db      	ldr	r3, [r3, #12]
 80140de:	899b      	ldrh	r3, [r3, #12]
 80140e0:	b29b      	uxth	r3, r3
 80140e2:	4618      	mov	r0, r3
 80140e4:	f7fa fda6 	bl	800ec34 <lwip_htons>
 80140e8:	4603      	mov	r3, r0
 80140ea:	b2db      	uxtb	r3, r3
 80140ec:	f003 0301 	and.w	r3, r3, #1
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d022      	beq.n	801413a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80140f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	68db      	ldr	r3, [r3, #12]
 80140fa:	899b      	ldrh	r3, [r3, #12]
 80140fc:	b29b      	uxth	r3, r3
 80140fe:	b21b      	sxth	r3, r3
 8014100:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014104:	b21c      	sxth	r4, r3
 8014106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	68db      	ldr	r3, [r3, #12]
 801410c:	899b      	ldrh	r3, [r3, #12]
 801410e:	b29b      	uxth	r3, r3
 8014110:	4618      	mov	r0, r3
 8014112:	f7fa fd8f 	bl	800ec34 <lwip_htons>
 8014116:	4603      	mov	r3, r0
 8014118:	b2db      	uxtb	r3, r3
 801411a:	b29b      	uxth	r3, r3
 801411c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014120:	b29b      	uxth	r3, r3
 8014122:	4618      	mov	r0, r3
 8014124:	f7fa fd86 	bl	800ec34 <lwip_htons>
 8014128:	4603      	mov	r3, r0
 801412a:	b21b      	sxth	r3, r3
 801412c:	4323      	orrs	r3, r4
 801412e:	b21a      	sxth	r2, r3
 8014130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	68db      	ldr	r3, [r3, #12]
 8014136:	b292      	uxth	r2, r2
 8014138:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801413e:	b29a      	uxth	r2, r3
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014144:	4413      	add	r3, r2
 8014146:	b299      	uxth	r1, r3
 8014148:	4b3c      	ldr	r3, [pc, #240]	; (801423c <tcp_receive+0xf14>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	b29a      	uxth	r2, r3
 801414e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	1a8a      	subs	r2, r1, r2
 8014154:	b292      	uxth	r2, r2
 8014156:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	685a      	ldr	r2, [r3, #4]
 801415e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	891b      	ldrh	r3, [r3, #8]
 8014164:	4619      	mov	r1, r3
 8014166:	4610      	mov	r0, r2
 8014168:	f7fb fe76 	bl	800fe58 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801416c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	891c      	ldrh	r4, [r3, #8]
 8014172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	68db      	ldr	r3, [r3, #12]
 8014178:	899b      	ldrh	r3, [r3, #12]
 801417a:	b29b      	uxth	r3, r3
 801417c:	4618      	mov	r0, r3
 801417e:	f7fa fd59 	bl	800ec34 <lwip_htons>
 8014182:	4603      	mov	r3, r0
 8014184:	b2db      	uxtb	r3, r3
 8014186:	f003 0303 	and.w	r3, r3, #3
 801418a:	2b00      	cmp	r3, #0
 801418c:	d001      	beq.n	8014192 <tcp_receive+0xe6a>
 801418e:	2301      	movs	r3, #1
 8014190:	e000      	b.n	8014194 <tcp_receive+0xe6c>
 8014192:	2300      	movs	r3, #0
 8014194:	4423      	add	r3, r4
 8014196:	b29a      	uxth	r2, r3
 8014198:	4b2a      	ldr	r3, [pc, #168]	; (8014244 <tcp_receive+0xf1c>)
 801419a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801419c:	4b29      	ldr	r3, [pc, #164]	; (8014244 <tcp_receive+0xf1c>)
 801419e:	881b      	ldrh	r3, [r3, #0]
 80141a0:	461a      	mov	r2, r3
 80141a2:	4b26      	ldr	r3, [pc, #152]	; (801423c <tcp_receive+0xf14>)
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	441a      	add	r2, r3
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141ac:	6879      	ldr	r1, [r7, #4]
 80141ae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80141b0:	440b      	add	r3, r1
 80141b2:	429a      	cmp	r2, r3
 80141b4:	d019      	beq.n	80141ea <tcp_receive+0xec2>
 80141b6:	4b24      	ldr	r3, [pc, #144]	; (8014248 <tcp_receive+0xf20>)
 80141b8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80141bc:	4923      	ldr	r1, [pc, #140]	; (801424c <tcp_receive+0xf24>)
 80141be:	4824      	ldr	r0, [pc, #144]	; (8014250 <tcp_receive+0xf28>)
 80141c0:	f007 f858 	bl	801b274 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80141c4:	e011      	b.n	80141ea <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80141c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80141cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	f47f aea4 	bne.w	8013f1c <tcp_receive+0xbf4>
 80141d4:	e00a      	b.n	80141ec <tcp_receive+0xec4>
                break;
 80141d6:	bf00      	nop
 80141d8:	e008      	b.n	80141ec <tcp_receive+0xec4>
                break;
 80141da:	bf00      	nop
 80141dc:	e006      	b.n	80141ec <tcp_receive+0xec4>
                  break;
 80141de:	bf00      	nop
 80141e0:	e004      	b.n	80141ec <tcp_receive+0xec4>
                  break;
 80141e2:	bf00      	nop
 80141e4:	e002      	b.n	80141ec <tcp_receive+0xec4>
                  break;
 80141e6:	bf00      	nop
 80141e8:	e000      	b.n	80141ec <tcp_receive+0xec4>
                break;
 80141ea:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80141ec:	6878      	ldr	r0, [r7, #4]
 80141ee:	f001 fa3f 	bl	8015670 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80141f2:	e003      	b.n	80141fc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80141f4:	6878      	ldr	r0, [r7, #4]
 80141f6:	f001 fa3b 	bl	8015670 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80141fa:	e01a      	b.n	8014232 <tcp_receive+0xf0a>
 80141fc:	e019      	b.n	8014232 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80141fe:	4b0f      	ldr	r3, [pc, #60]	; (801423c <tcp_receive+0xf14>)
 8014200:	681a      	ldr	r2, [r3, #0]
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014206:	1ad3      	subs	r3, r2, r3
 8014208:	2b00      	cmp	r3, #0
 801420a:	db0a      	blt.n	8014222 <tcp_receive+0xefa>
 801420c:	4b0b      	ldr	r3, [pc, #44]	; (801423c <tcp_receive+0xf14>)
 801420e:	681a      	ldr	r2, [r3, #0]
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014214:	6879      	ldr	r1, [r7, #4]
 8014216:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014218:	440b      	add	r3, r1
 801421a:	1ad3      	subs	r3, r2, r3
 801421c:	3301      	adds	r3, #1
 801421e:	2b00      	cmp	r3, #0
 8014220:	dd07      	ble.n	8014232 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	8b5b      	ldrh	r3, [r3, #26]
 8014226:	f043 0302 	orr.w	r3, r3, #2
 801422a:	b29a      	uxth	r2, r3
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014230:	e7ff      	b.n	8014232 <tcp_receive+0xf0a>
 8014232:	bf00      	nop
 8014234:	3750      	adds	r7, #80	; 0x50
 8014236:	46bd      	mov	sp, r7
 8014238:	bdb0      	pop	{r4, r5, r7, pc}
 801423a:	bf00      	nop
 801423c:	200004f8 	.word	0x200004f8
 8014240:	200004d8 	.word	0x200004d8
 8014244:	20000502 	.word	0x20000502
 8014248:	08021978 	.word	0x08021978
 801424c:	08021d20 	.word	0x08021d20
 8014250:	080219c4 	.word	0x080219c4

08014254 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014254:	b480      	push	{r7}
 8014256:	b083      	sub	sp, #12
 8014258:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801425a:	4b15      	ldr	r3, [pc, #84]	; (80142b0 <tcp_get_next_optbyte+0x5c>)
 801425c:	881b      	ldrh	r3, [r3, #0]
 801425e:	1c5a      	adds	r2, r3, #1
 8014260:	b291      	uxth	r1, r2
 8014262:	4a13      	ldr	r2, [pc, #76]	; (80142b0 <tcp_get_next_optbyte+0x5c>)
 8014264:	8011      	strh	r1, [r2, #0]
 8014266:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014268:	4b12      	ldr	r3, [pc, #72]	; (80142b4 <tcp_get_next_optbyte+0x60>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d004      	beq.n	801427a <tcp_get_next_optbyte+0x26>
 8014270:	4b11      	ldr	r3, [pc, #68]	; (80142b8 <tcp_get_next_optbyte+0x64>)
 8014272:	881b      	ldrh	r3, [r3, #0]
 8014274:	88fa      	ldrh	r2, [r7, #6]
 8014276:	429a      	cmp	r2, r3
 8014278:	d208      	bcs.n	801428c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801427a:	4b10      	ldr	r3, [pc, #64]	; (80142bc <tcp_get_next_optbyte+0x68>)
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	3314      	adds	r3, #20
 8014280:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014282:	88fb      	ldrh	r3, [r7, #6]
 8014284:	683a      	ldr	r2, [r7, #0]
 8014286:	4413      	add	r3, r2
 8014288:	781b      	ldrb	r3, [r3, #0]
 801428a:	e00b      	b.n	80142a4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801428c:	88fb      	ldrh	r3, [r7, #6]
 801428e:	b2da      	uxtb	r2, r3
 8014290:	4b09      	ldr	r3, [pc, #36]	; (80142b8 <tcp_get_next_optbyte+0x64>)
 8014292:	881b      	ldrh	r3, [r3, #0]
 8014294:	b2db      	uxtb	r3, r3
 8014296:	1ad3      	subs	r3, r2, r3
 8014298:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801429a:	4b06      	ldr	r3, [pc, #24]	; (80142b4 <tcp_get_next_optbyte+0x60>)
 801429c:	681a      	ldr	r2, [r3, #0]
 801429e:	797b      	ldrb	r3, [r7, #5]
 80142a0:	4413      	add	r3, r2
 80142a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80142a4:	4618      	mov	r0, r3
 80142a6:	370c      	adds	r7, #12
 80142a8:	46bd      	mov	sp, r7
 80142aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ae:	4770      	bx	lr
 80142b0:	200004f4 	.word	0x200004f4
 80142b4:	200004f0 	.word	0x200004f0
 80142b8:	200004ee 	.word	0x200004ee
 80142bc:	200004e8 	.word	0x200004e8

080142c0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b084      	sub	sp, #16
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d106      	bne.n	80142dc <tcp_parseopt+0x1c>
 80142ce:	4b31      	ldr	r3, [pc, #196]	; (8014394 <tcp_parseopt+0xd4>)
 80142d0:	f240 727d 	movw	r2, #1917	; 0x77d
 80142d4:	4930      	ldr	r1, [pc, #192]	; (8014398 <tcp_parseopt+0xd8>)
 80142d6:	4831      	ldr	r0, [pc, #196]	; (801439c <tcp_parseopt+0xdc>)
 80142d8:	f006 ffcc 	bl	801b274 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80142dc:	4b30      	ldr	r3, [pc, #192]	; (80143a0 <tcp_parseopt+0xe0>)
 80142de:	881b      	ldrh	r3, [r3, #0]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d053      	beq.n	801438c <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80142e4:	4b2f      	ldr	r3, [pc, #188]	; (80143a4 <tcp_parseopt+0xe4>)
 80142e6:	2200      	movs	r2, #0
 80142e8:	801a      	strh	r2, [r3, #0]
 80142ea:	e043      	b.n	8014374 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 80142ec:	f7ff ffb2 	bl	8014254 <tcp_get_next_optbyte>
 80142f0:	4603      	mov	r3, r0
 80142f2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80142f4:	7bfb      	ldrb	r3, [r7, #15]
 80142f6:	2b01      	cmp	r3, #1
 80142f8:	d03c      	beq.n	8014374 <tcp_parseopt+0xb4>
 80142fa:	2b02      	cmp	r3, #2
 80142fc:	d002      	beq.n	8014304 <tcp_parseopt+0x44>
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d03f      	beq.n	8014382 <tcp_parseopt+0xc2>
 8014302:	e026      	b.n	8014352 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014304:	f7ff ffa6 	bl	8014254 <tcp_get_next_optbyte>
 8014308:	4603      	mov	r3, r0
 801430a:	2b04      	cmp	r3, #4
 801430c:	d13b      	bne.n	8014386 <tcp_parseopt+0xc6>
 801430e:	4b25      	ldr	r3, [pc, #148]	; (80143a4 <tcp_parseopt+0xe4>)
 8014310:	881b      	ldrh	r3, [r3, #0]
 8014312:	3302      	adds	r3, #2
 8014314:	4a22      	ldr	r2, [pc, #136]	; (80143a0 <tcp_parseopt+0xe0>)
 8014316:	8812      	ldrh	r2, [r2, #0]
 8014318:	4293      	cmp	r3, r2
 801431a:	dc34      	bgt.n	8014386 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801431c:	f7ff ff9a 	bl	8014254 <tcp_get_next_optbyte>
 8014320:	4603      	mov	r3, r0
 8014322:	b29b      	uxth	r3, r3
 8014324:	021b      	lsls	r3, r3, #8
 8014326:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014328:	f7ff ff94 	bl	8014254 <tcp_get_next_optbyte>
 801432c:	4603      	mov	r3, r0
 801432e:	b29a      	uxth	r2, r3
 8014330:	89bb      	ldrh	r3, [r7, #12]
 8014332:	4313      	orrs	r3, r2
 8014334:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014336:	89bb      	ldrh	r3, [r7, #12]
 8014338:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 801433c:	d804      	bhi.n	8014348 <tcp_parseopt+0x88>
 801433e:	89bb      	ldrh	r3, [r7, #12]
 8014340:	2b00      	cmp	r3, #0
 8014342:	d001      	beq.n	8014348 <tcp_parseopt+0x88>
 8014344:	89ba      	ldrh	r2, [r7, #12]
 8014346:	e001      	b.n	801434c <tcp_parseopt+0x8c>
 8014348:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8014350:	e010      	b.n	8014374 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014352:	f7ff ff7f 	bl	8014254 <tcp_get_next_optbyte>
 8014356:	4603      	mov	r3, r0
 8014358:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801435a:	7afb      	ldrb	r3, [r7, #11]
 801435c:	2b01      	cmp	r3, #1
 801435e:	d914      	bls.n	801438a <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014360:	7afb      	ldrb	r3, [r7, #11]
 8014362:	b29a      	uxth	r2, r3
 8014364:	4b0f      	ldr	r3, [pc, #60]	; (80143a4 <tcp_parseopt+0xe4>)
 8014366:	881b      	ldrh	r3, [r3, #0]
 8014368:	4413      	add	r3, r2
 801436a:	b29b      	uxth	r3, r3
 801436c:	3b02      	subs	r3, #2
 801436e:	b29a      	uxth	r2, r3
 8014370:	4b0c      	ldr	r3, [pc, #48]	; (80143a4 <tcp_parseopt+0xe4>)
 8014372:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014374:	4b0b      	ldr	r3, [pc, #44]	; (80143a4 <tcp_parseopt+0xe4>)
 8014376:	881a      	ldrh	r2, [r3, #0]
 8014378:	4b09      	ldr	r3, [pc, #36]	; (80143a0 <tcp_parseopt+0xe0>)
 801437a:	881b      	ldrh	r3, [r3, #0]
 801437c:	429a      	cmp	r2, r3
 801437e:	d3b5      	bcc.n	80142ec <tcp_parseopt+0x2c>
 8014380:	e004      	b.n	801438c <tcp_parseopt+0xcc>
          return;
 8014382:	bf00      	nop
 8014384:	e002      	b.n	801438c <tcp_parseopt+0xcc>
            return;
 8014386:	bf00      	nop
 8014388:	e000      	b.n	801438c <tcp_parseopt+0xcc>
            return;
 801438a:	bf00      	nop
      }
    }
  }
}
 801438c:	3710      	adds	r7, #16
 801438e:	46bd      	mov	sp, r7
 8014390:	bd80      	pop	{r7, pc}
 8014392:	bf00      	nop
 8014394:	08021978 	.word	0x08021978
 8014398:	08021ddc 	.word	0x08021ddc
 801439c:	080219c4 	.word	0x080219c4
 80143a0:	200004ec 	.word	0x200004ec
 80143a4:	200004f4 	.word	0x200004f4

080143a8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80143a8:	b480      	push	{r7}
 80143aa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80143ac:	4b05      	ldr	r3, [pc, #20]	; (80143c4 <tcp_trigger_input_pcb_close+0x1c>)
 80143ae:	781b      	ldrb	r3, [r3, #0]
 80143b0:	f043 0310 	orr.w	r3, r3, #16
 80143b4:	b2da      	uxtb	r2, r3
 80143b6:	4b03      	ldr	r3, [pc, #12]	; (80143c4 <tcp_trigger_input_pcb_close+0x1c>)
 80143b8:	701a      	strb	r2, [r3, #0]
}
 80143ba:	bf00      	nop
 80143bc:	46bd      	mov	sp, r7
 80143be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c2:	4770      	bx	lr
 80143c4:	20000505 	.word	0x20000505

080143c8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b084      	sub	sp, #16
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	60f8      	str	r0, [r7, #12]
 80143d0:	60b9      	str	r1, [r7, #8]
 80143d2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d00a      	beq.n	80143f0 <tcp_route+0x28>
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	7a1b      	ldrb	r3, [r3, #8]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d006      	beq.n	80143f0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	7a1b      	ldrb	r3, [r3, #8]
 80143e6:	4618      	mov	r0, r3
 80143e8:	f7fb fb80 	bl	800faec <netif_get_by_index>
 80143ec:	4603      	mov	r3, r0
 80143ee:	e003      	b.n	80143f8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80143f0:	6878      	ldr	r0, [r7, #4]
 80143f2:	f004 ffa1 	bl	8019338 <ip4_route>
 80143f6:	4603      	mov	r3, r0
  }
}
 80143f8:	4618      	mov	r0, r3
 80143fa:	3710      	adds	r7, #16
 80143fc:	46bd      	mov	sp, r7
 80143fe:	bd80      	pop	{r7, pc}

08014400 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014400:	b590      	push	{r4, r7, lr}
 8014402:	b087      	sub	sp, #28
 8014404:	af00      	add	r7, sp, #0
 8014406:	60f8      	str	r0, [r7, #12]
 8014408:	60b9      	str	r1, [r7, #8]
 801440a:	603b      	str	r3, [r7, #0]
 801440c:	4613      	mov	r3, r2
 801440e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d105      	bne.n	8014422 <tcp_create_segment+0x22>
 8014416:	4b44      	ldr	r3, [pc, #272]	; (8014528 <tcp_create_segment+0x128>)
 8014418:	22a3      	movs	r2, #163	; 0xa3
 801441a:	4944      	ldr	r1, [pc, #272]	; (801452c <tcp_create_segment+0x12c>)
 801441c:	4844      	ldr	r0, [pc, #272]	; (8014530 <tcp_create_segment+0x130>)
 801441e:	f006 ff29 	bl	801b274 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8014422:	68bb      	ldr	r3, [r7, #8]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d105      	bne.n	8014434 <tcp_create_segment+0x34>
 8014428:	4b3f      	ldr	r3, [pc, #252]	; (8014528 <tcp_create_segment+0x128>)
 801442a:	22a4      	movs	r2, #164	; 0xa4
 801442c:	4941      	ldr	r1, [pc, #260]	; (8014534 <tcp_create_segment+0x134>)
 801442e:	4840      	ldr	r0, [pc, #256]	; (8014530 <tcp_create_segment+0x130>)
 8014430:	f006 ff20 	bl	801b274 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014434:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014438:	009b      	lsls	r3, r3, #2
 801443a:	b2db      	uxtb	r3, r3
 801443c:	f003 0304 	and.w	r3, r3, #4
 8014440:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014442:	2003      	movs	r0, #3
 8014444:	f7fb f84c 	bl	800f4e0 <memp_malloc>
 8014448:	6138      	str	r0, [r7, #16]
 801444a:	693b      	ldr	r3, [r7, #16]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d104      	bne.n	801445a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014450:	68b8      	ldr	r0, [r7, #8]
 8014452:	f7fb fe87 	bl	8010164 <pbuf_free>
    return NULL;
 8014456:	2300      	movs	r3, #0
 8014458:	e061      	b.n	801451e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801445a:	693b      	ldr	r3, [r7, #16]
 801445c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014460:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014462:	693b      	ldr	r3, [r7, #16]
 8014464:	2200      	movs	r2, #0
 8014466:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014468:	693b      	ldr	r3, [r7, #16]
 801446a:	68ba      	ldr	r2, [r7, #8]
 801446c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801446e:	68bb      	ldr	r3, [r7, #8]
 8014470:	891a      	ldrh	r2, [r3, #8]
 8014472:	7dfb      	ldrb	r3, [r7, #23]
 8014474:	b29b      	uxth	r3, r3
 8014476:	429a      	cmp	r2, r3
 8014478:	d205      	bcs.n	8014486 <tcp_create_segment+0x86>
 801447a:	4b2b      	ldr	r3, [pc, #172]	; (8014528 <tcp_create_segment+0x128>)
 801447c:	22b0      	movs	r2, #176	; 0xb0
 801447e:	492e      	ldr	r1, [pc, #184]	; (8014538 <tcp_create_segment+0x138>)
 8014480:	482b      	ldr	r0, [pc, #172]	; (8014530 <tcp_create_segment+0x130>)
 8014482:	f006 fef7 	bl	801b274 <iprintf>
  seg->len = p->tot_len - optlen;
 8014486:	68bb      	ldr	r3, [r7, #8]
 8014488:	891a      	ldrh	r2, [r3, #8]
 801448a:	7dfb      	ldrb	r3, [r7, #23]
 801448c:	b29b      	uxth	r3, r3
 801448e:	1ad3      	subs	r3, r2, r3
 8014490:	b29a      	uxth	r2, r3
 8014492:	693b      	ldr	r3, [r7, #16]
 8014494:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014496:	2114      	movs	r1, #20
 8014498:	68b8      	ldr	r0, [r7, #8]
 801449a:	f7fb fdcd 	bl	8010038 <pbuf_add_header>
 801449e:	4603      	mov	r3, r0
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d004      	beq.n	80144ae <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80144a4:	6938      	ldr	r0, [r7, #16]
 80144a6:	f7fd f8d5 	bl	8011654 <tcp_seg_free>
    return NULL;
 80144aa:	2300      	movs	r3, #0
 80144ac:	e037      	b.n	801451e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80144ae:	693b      	ldr	r3, [r7, #16]
 80144b0:	685b      	ldr	r3, [r3, #4]
 80144b2:	685a      	ldr	r2, [r3, #4]
 80144b4:	693b      	ldr	r3, [r7, #16]
 80144b6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	8ada      	ldrh	r2, [r3, #22]
 80144bc:	693b      	ldr	r3, [r7, #16]
 80144be:	68dc      	ldr	r4, [r3, #12]
 80144c0:	4610      	mov	r0, r2
 80144c2:	f7fa fbb7 	bl	800ec34 <lwip_htons>
 80144c6:	4603      	mov	r3, r0
 80144c8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	8b1a      	ldrh	r2, [r3, #24]
 80144ce:	693b      	ldr	r3, [r7, #16]
 80144d0:	68dc      	ldr	r4, [r3, #12]
 80144d2:	4610      	mov	r0, r2
 80144d4:	f7fa fbae 	bl	800ec34 <lwip_htons>
 80144d8:	4603      	mov	r3, r0
 80144da:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80144dc:	693b      	ldr	r3, [r7, #16]
 80144de:	68dc      	ldr	r4, [r3, #12]
 80144e0:	6838      	ldr	r0, [r7, #0]
 80144e2:	f7fa fbbc 	bl	800ec5e <lwip_htonl>
 80144e6:	4603      	mov	r3, r0
 80144e8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80144ea:	7dfb      	ldrb	r3, [r7, #23]
 80144ec:	089b      	lsrs	r3, r3, #2
 80144ee:	b2db      	uxtb	r3, r3
 80144f0:	b29b      	uxth	r3, r3
 80144f2:	3305      	adds	r3, #5
 80144f4:	b29b      	uxth	r3, r3
 80144f6:	031b      	lsls	r3, r3, #12
 80144f8:	b29a      	uxth	r2, r3
 80144fa:	79fb      	ldrb	r3, [r7, #7]
 80144fc:	b29b      	uxth	r3, r3
 80144fe:	4313      	orrs	r3, r2
 8014500:	b29a      	uxth	r2, r3
 8014502:	693b      	ldr	r3, [r7, #16]
 8014504:	68dc      	ldr	r4, [r3, #12]
 8014506:	4610      	mov	r0, r2
 8014508:	f7fa fb94 	bl	800ec34 <lwip_htons>
 801450c:	4603      	mov	r3, r0
 801450e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014510:	693b      	ldr	r3, [r7, #16]
 8014512:	68db      	ldr	r3, [r3, #12]
 8014514:	2200      	movs	r2, #0
 8014516:	749a      	strb	r2, [r3, #18]
 8014518:	2200      	movs	r2, #0
 801451a:	74da      	strb	r2, [r3, #19]
  return seg;
 801451c:	693b      	ldr	r3, [r7, #16]
}
 801451e:	4618      	mov	r0, r3
 8014520:	371c      	adds	r7, #28
 8014522:	46bd      	mov	sp, r7
 8014524:	bd90      	pop	{r4, r7, pc}
 8014526:	bf00      	nop
 8014528:	08021df8 	.word	0x08021df8
 801452c:	08021e2c 	.word	0x08021e2c
 8014530:	08021e4c 	.word	0x08021e4c
 8014534:	08021e74 	.word	0x08021e74
 8014538:	08021e98 	.word	0x08021e98

0801453c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801453c:	b590      	push	{r4, r7, lr}
 801453e:	b08b      	sub	sp, #44	; 0x2c
 8014540:	af02      	add	r7, sp, #8
 8014542:	6078      	str	r0, [r7, #4]
 8014544:	460b      	mov	r3, r1
 8014546:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014548:	2300      	movs	r3, #0
 801454a:	61fb      	str	r3, [r7, #28]
 801454c:	2300      	movs	r3, #0
 801454e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014550:	2300      	movs	r3, #0
 8014552:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d106      	bne.n	8014568 <tcp_split_unsent_seg+0x2c>
 801455a:	4b95      	ldr	r3, [pc, #596]	; (80147b0 <tcp_split_unsent_seg+0x274>)
 801455c:	f240 324b 	movw	r2, #843	; 0x34b
 8014560:	4994      	ldr	r1, [pc, #592]	; (80147b4 <tcp_split_unsent_seg+0x278>)
 8014562:	4895      	ldr	r0, [pc, #596]	; (80147b8 <tcp_split_unsent_seg+0x27c>)
 8014564:	f006 fe86 	bl	801b274 <iprintf>

  useg = pcb->unsent;
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801456c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801456e:	697b      	ldr	r3, [r7, #20]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d102      	bne.n	801457a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014574:	f04f 33ff 	mov.w	r3, #4294967295
 8014578:	e116      	b.n	80147a8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801457a:	887b      	ldrh	r3, [r7, #2]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d109      	bne.n	8014594 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014580:	4b8b      	ldr	r3, [pc, #556]	; (80147b0 <tcp_split_unsent_seg+0x274>)
 8014582:	f240 3253 	movw	r2, #851	; 0x353
 8014586:	498d      	ldr	r1, [pc, #564]	; (80147bc <tcp_split_unsent_seg+0x280>)
 8014588:	488b      	ldr	r0, [pc, #556]	; (80147b8 <tcp_split_unsent_seg+0x27c>)
 801458a:	f006 fe73 	bl	801b274 <iprintf>
    return ERR_VAL;
 801458e:	f06f 0305 	mvn.w	r3, #5
 8014592:	e109      	b.n	80147a8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014594:	697b      	ldr	r3, [r7, #20]
 8014596:	891b      	ldrh	r3, [r3, #8]
 8014598:	887a      	ldrh	r2, [r7, #2]
 801459a:	429a      	cmp	r2, r3
 801459c:	d301      	bcc.n	80145a2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801459e:	2300      	movs	r3, #0
 80145a0:	e102      	b.n	80147a8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80145a6:	887a      	ldrh	r2, [r7, #2]
 80145a8:	429a      	cmp	r2, r3
 80145aa:	d906      	bls.n	80145ba <tcp_split_unsent_seg+0x7e>
 80145ac:	4b80      	ldr	r3, [pc, #512]	; (80147b0 <tcp_split_unsent_seg+0x274>)
 80145ae:	f240 325b 	movw	r2, #859	; 0x35b
 80145b2:	4983      	ldr	r1, [pc, #524]	; (80147c0 <tcp_split_unsent_seg+0x284>)
 80145b4:	4880      	ldr	r0, [pc, #512]	; (80147b8 <tcp_split_unsent_seg+0x27c>)
 80145b6:	f006 fe5d 	bl	801b274 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80145ba:	697b      	ldr	r3, [r7, #20]
 80145bc:	891b      	ldrh	r3, [r3, #8]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d106      	bne.n	80145d0 <tcp_split_unsent_seg+0x94>
 80145c2:	4b7b      	ldr	r3, [pc, #492]	; (80147b0 <tcp_split_unsent_seg+0x274>)
 80145c4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80145c8:	497e      	ldr	r1, [pc, #504]	; (80147c4 <tcp_split_unsent_seg+0x288>)
 80145ca:	487b      	ldr	r0, [pc, #492]	; (80147b8 <tcp_split_unsent_seg+0x27c>)
 80145cc:	f006 fe52 	bl	801b274 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80145d0:	697b      	ldr	r3, [r7, #20]
 80145d2:	7a9b      	ldrb	r3, [r3, #10]
 80145d4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80145d6:	7bfb      	ldrb	r3, [r7, #15]
 80145d8:	009b      	lsls	r3, r3, #2
 80145da:	b2db      	uxtb	r3, r3
 80145dc:	f003 0304 	and.w	r3, r3, #4
 80145e0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80145e2:	697b      	ldr	r3, [r7, #20]
 80145e4:	891a      	ldrh	r2, [r3, #8]
 80145e6:	887b      	ldrh	r3, [r7, #2]
 80145e8:	1ad3      	subs	r3, r2, r3
 80145ea:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80145ec:	7bbb      	ldrb	r3, [r7, #14]
 80145ee:	b29a      	uxth	r2, r3
 80145f0:	89bb      	ldrh	r3, [r7, #12]
 80145f2:	4413      	add	r3, r2
 80145f4:	b29b      	uxth	r3, r3
 80145f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80145fa:	4619      	mov	r1, r3
 80145fc:	2036      	movs	r0, #54	; 0x36
 80145fe:	f7fb fad1 	bl	800fba4 <pbuf_alloc>
 8014602:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014604:	693b      	ldr	r3, [r7, #16]
 8014606:	2b00      	cmp	r3, #0
 8014608:	f000 80b7 	beq.w	801477a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801460c:	697b      	ldr	r3, [r7, #20]
 801460e:	685b      	ldr	r3, [r3, #4]
 8014610:	891a      	ldrh	r2, [r3, #8]
 8014612:	697b      	ldr	r3, [r7, #20]
 8014614:	891b      	ldrh	r3, [r3, #8]
 8014616:	1ad3      	subs	r3, r2, r3
 8014618:	b29a      	uxth	r2, r3
 801461a:	887b      	ldrh	r3, [r7, #2]
 801461c:	4413      	add	r3, r2
 801461e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014620:	697b      	ldr	r3, [r7, #20]
 8014622:	6858      	ldr	r0, [r3, #4]
 8014624:	693b      	ldr	r3, [r7, #16]
 8014626:	685a      	ldr	r2, [r3, #4]
 8014628:	7bbb      	ldrb	r3, [r7, #14]
 801462a:	18d1      	adds	r1, r2, r3
 801462c:	897b      	ldrh	r3, [r7, #10]
 801462e:	89ba      	ldrh	r2, [r7, #12]
 8014630:	f7fb ff92 	bl	8010558 <pbuf_copy_partial>
 8014634:	4603      	mov	r3, r0
 8014636:	461a      	mov	r2, r3
 8014638:	89bb      	ldrh	r3, [r7, #12]
 801463a:	4293      	cmp	r3, r2
 801463c:	f040 809f 	bne.w	801477e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014640:	697b      	ldr	r3, [r7, #20]
 8014642:	68db      	ldr	r3, [r3, #12]
 8014644:	899b      	ldrh	r3, [r3, #12]
 8014646:	b29b      	uxth	r3, r3
 8014648:	4618      	mov	r0, r3
 801464a:	f7fa faf3 	bl	800ec34 <lwip_htons>
 801464e:	4603      	mov	r3, r0
 8014650:	b2db      	uxtb	r3, r3
 8014652:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014656:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014658:	2300      	movs	r3, #0
 801465a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801465c:	7efb      	ldrb	r3, [r7, #27]
 801465e:	f003 0308 	and.w	r3, r3, #8
 8014662:	2b00      	cmp	r3, #0
 8014664:	d007      	beq.n	8014676 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014666:	7efb      	ldrb	r3, [r7, #27]
 8014668:	f023 0308 	bic.w	r3, r3, #8
 801466c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801466e:	7ebb      	ldrb	r3, [r7, #26]
 8014670:	f043 0308 	orr.w	r3, r3, #8
 8014674:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014676:	7efb      	ldrb	r3, [r7, #27]
 8014678:	f003 0301 	and.w	r3, r3, #1
 801467c:	2b00      	cmp	r3, #0
 801467e:	d007      	beq.n	8014690 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014680:	7efb      	ldrb	r3, [r7, #27]
 8014682:	f023 0301 	bic.w	r3, r3, #1
 8014686:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014688:	7ebb      	ldrb	r3, [r7, #26]
 801468a:	f043 0301 	orr.w	r3, r3, #1
 801468e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014690:	697b      	ldr	r3, [r7, #20]
 8014692:	68db      	ldr	r3, [r3, #12]
 8014694:	685b      	ldr	r3, [r3, #4]
 8014696:	4618      	mov	r0, r3
 8014698:	f7fa fae1 	bl	800ec5e <lwip_htonl>
 801469c:	4602      	mov	r2, r0
 801469e:	887b      	ldrh	r3, [r7, #2]
 80146a0:	18d1      	adds	r1, r2, r3
 80146a2:	7eba      	ldrb	r2, [r7, #26]
 80146a4:	7bfb      	ldrb	r3, [r7, #15]
 80146a6:	9300      	str	r3, [sp, #0]
 80146a8:	460b      	mov	r3, r1
 80146aa:	6939      	ldr	r1, [r7, #16]
 80146ac:	6878      	ldr	r0, [r7, #4]
 80146ae:	f7ff fea7 	bl	8014400 <tcp_create_segment>
 80146b2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80146b4:	69fb      	ldr	r3, [r7, #28]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d063      	beq.n	8014782 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80146ba:	697b      	ldr	r3, [r7, #20]
 80146bc:	685b      	ldr	r3, [r3, #4]
 80146be:	4618      	mov	r0, r3
 80146c0:	f7fb fdd8 	bl	8010274 <pbuf_clen>
 80146c4:	4603      	mov	r3, r0
 80146c6:	461a      	mov	r2, r3
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80146ce:	1a9b      	subs	r3, r3, r2
 80146d0:	b29a      	uxth	r2, r3
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80146d8:	697b      	ldr	r3, [r7, #20]
 80146da:	6858      	ldr	r0, [r3, #4]
 80146dc:	697b      	ldr	r3, [r7, #20]
 80146de:	685b      	ldr	r3, [r3, #4]
 80146e0:	891a      	ldrh	r2, [r3, #8]
 80146e2:	89bb      	ldrh	r3, [r7, #12]
 80146e4:	1ad3      	subs	r3, r2, r3
 80146e6:	b29b      	uxth	r3, r3
 80146e8:	4619      	mov	r1, r3
 80146ea:	f7fb fbb5 	bl	800fe58 <pbuf_realloc>
  useg->len -= remainder;
 80146ee:	697b      	ldr	r3, [r7, #20]
 80146f0:	891a      	ldrh	r2, [r3, #8]
 80146f2:	89bb      	ldrh	r3, [r7, #12]
 80146f4:	1ad3      	subs	r3, r2, r3
 80146f6:	b29a      	uxth	r2, r3
 80146f8:	697b      	ldr	r3, [r7, #20]
 80146fa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80146fc:	697b      	ldr	r3, [r7, #20]
 80146fe:	68db      	ldr	r3, [r3, #12]
 8014700:	899b      	ldrh	r3, [r3, #12]
 8014702:	b29c      	uxth	r4, r3
 8014704:	7efb      	ldrb	r3, [r7, #27]
 8014706:	b29b      	uxth	r3, r3
 8014708:	4618      	mov	r0, r3
 801470a:	f7fa fa93 	bl	800ec34 <lwip_htons>
 801470e:	4603      	mov	r3, r0
 8014710:	461a      	mov	r2, r3
 8014712:	697b      	ldr	r3, [r7, #20]
 8014714:	68db      	ldr	r3, [r3, #12]
 8014716:	4322      	orrs	r2, r4
 8014718:	b292      	uxth	r2, r2
 801471a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801471c:	697b      	ldr	r3, [r7, #20]
 801471e:	685b      	ldr	r3, [r3, #4]
 8014720:	4618      	mov	r0, r3
 8014722:	f7fb fda7 	bl	8010274 <pbuf_clen>
 8014726:	4603      	mov	r3, r0
 8014728:	461a      	mov	r2, r3
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014730:	4413      	add	r3, r2
 8014732:	b29a      	uxth	r2, r3
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801473a:	69fb      	ldr	r3, [r7, #28]
 801473c:	685b      	ldr	r3, [r3, #4]
 801473e:	4618      	mov	r0, r3
 8014740:	f7fb fd98 	bl	8010274 <pbuf_clen>
 8014744:	4603      	mov	r3, r0
 8014746:	461a      	mov	r2, r3
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801474e:	4413      	add	r3, r2
 8014750:	b29a      	uxth	r2, r3
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014758:	697b      	ldr	r3, [r7, #20]
 801475a:	681a      	ldr	r2, [r3, #0]
 801475c:	69fb      	ldr	r3, [r7, #28]
 801475e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014760:	697b      	ldr	r3, [r7, #20]
 8014762:	69fa      	ldr	r2, [r7, #28]
 8014764:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014766:	69fb      	ldr	r3, [r7, #28]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d103      	bne.n	8014776 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	2200      	movs	r2, #0
 8014772:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014776:	2300      	movs	r3, #0
 8014778:	e016      	b.n	80147a8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801477a:	bf00      	nop
 801477c:	e002      	b.n	8014784 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801477e:	bf00      	nop
 8014780:	e000      	b.n	8014784 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014782:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014784:	69fb      	ldr	r3, [r7, #28]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d006      	beq.n	8014798 <tcp_split_unsent_seg+0x25c>
 801478a:	4b09      	ldr	r3, [pc, #36]	; (80147b0 <tcp_split_unsent_seg+0x274>)
 801478c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8014790:	490d      	ldr	r1, [pc, #52]	; (80147c8 <tcp_split_unsent_seg+0x28c>)
 8014792:	4809      	ldr	r0, [pc, #36]	; (80147b8 <tcp_split_unsent_seg+0x27c>)
 8014794:	f006 fd6e 	bl	801b274 <iprintf>
  if (p != NULL) {
 8014798:	693b      	ldr	r3, [r7, #16]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d002      	beq.n	80147a4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801479e:	6938      	ldr	r0, [r7, #16]
 80147a0:	f7fb fce0 	bl	8010164 <pbuf_free>
  }

  return ERR_MEM;
 80147a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80147a8:	4618      	mov	r0, r3
 80147aa:	3724      	adds	r7, #36	; 0x24
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd90      	pop	{r4, r7, pc}
 80147b0:	08021df8 	.word	0x08021df8
 80147b4:	0802218c 	.word	0x0802218c
 80147b8:	08021e4c 	.word	0x08021e4c
 80147bc:	080221b0 	.word	0x080221b0
 80147c0:	080221d4 	.word	0x080221d4
 80147c4:	080221e4 	.word	0x080221e4
 80147c8:	080221f4 	.word	0x080221f4

080147cc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80147cc:	b590      	push	{r4, r7, lr}
 80147ce:	b085      	sub	sp, #20
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d106      	bne.n	80147e8 <tcp_send_fin+0x1c>
 80147da:	4b21      	ldr	r3, [pc, #132]	; (8014860 <tcp_send_fin+0x94>)
 80147dc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80147e0:	4920      	ldr	r1, [pc, #128]	; (8014864 <tcp_send_fin+0x98>)
 80147e2:	4821      	ldr	r0, [pc, #132]	; (8014868 <tcp_send_fin+0x9c>)
 80147e4:	f006 fd46 	bl	801b274 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d02e      	beq.n	801484e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147f4:	60fb      	str	r3, [r7, #12]
 80147f6:	e002      	b.n	80147fe <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d1f8      	bne.n	80147f8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	68db      	ldr	r3, [r3, #12]
 801480a:	899b      	ldrh	r3, [r3, #12]
 801480c:	b29b      	uxth	r3, r3
 801480e:	4618      	mov	r0, r3
 8014810:	f7fa fa10 	bl	800ec34 <lwip_htons>
 8014814:	4603      	mov	r3, r0
 8014816:	b2db      	uxtb	r3, r3
 8014818:	f003 0307 	and.w	r3, r3, #7
 801481c:	2b00      	cmp	r3, #0
 801481e:	d116      	bne.n	801484e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	68db      	ldr	r3, [r3, #12]
 8014824:	899b      	ldrh	r3, [r3, #12]
 8014826:	b29c      	uxth	r4, r3
 8014828:	2001      	movs	r0, #1
 801482a:	f7fa fa03 	bl	800ec34 <lwip_htons>
 801482e:	4603      	mov	r3, r0
 8014830:	461a      	mov	r2, r3
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	68db      	ldr	r3, [r3, #12]
 8014836:	4322      	orrs	r2, r4
 8014838:	b292      	uxth	r2, r2
 801483a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	8b5b      	ldrh	r3, [r3, #26]
 8014840:	f043 0320 	orr.w	r3, r3, #32
 8014844:	b29a      	uxth	r2, r3
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801484a:	2300      	movs	r3, #0
 801484c:	e004      	b.n	8014858 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801484e:	2101      	movs	r1, #1
 8014850:	6878      	ldr	r0, [r7, #4]
 8014852:	f000 f80b 	bl	801486c <tcp_enqueue_flags>
 8014856:	4603      	mov	r3, r0
}
 8014858:	4618      	mov	r0, r3
 801485a:	3714      	adds	r7, #20
 801485c:	46bd      	mov	sp, r7
 801485e:	bd90      	pop	{r4, r7, pc}
 8014860:	08021df8 	.word	0x08021df8
 8014864:	08022200 	.word	0x08022200
 8014868:	08021e4c 	.word	0x08021e4c

0801486c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801486c:	b580      	push	{r7, lr}
 801486e:	b08a      	sub	sp, #40	; 0x28
 8014870:	af02      	add	r7, sp, #8
 8014872:	6078      	str	r0, [r7, #4]
 8014874:	460b      	mov	r3, r1
 8014876:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014878:	2300      	movs	r3, #0
 801487a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801487c:	2300      	movs	r3, #0
 801487e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014880:	78fb      	ldrb	r3, [r7, #3]
 8014882:	f003 0303 	and.w	r3, r3, #3
 8014886:	2b00      	cmp	r3, #0
 8014888:	d106      	bne.n	8014898 <tcp_enqueue_flags+0x2c>
 801488a:	4b67      	ldr	r3, [pc, #412]	; (8014a28 <tcp_enqueue_flags+0x1bc>)
 801488c:	f240 4212 	movw	r2, #1042	; 0x412
 8014890:	4966      	ldr	r1, [pc, #408]	; (8014a2c <tcp_enqueue_flags+0x1c0>)
 8014892:	4867      	ldr	r0, [pc, #412]	; (8014a30 <tcp_enqueue_flags+0x1c4>)
 8014894:	f006 fcee 	bl	801b274 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d106      	bne.n	80148ac <tcp_enqueue_flags+0x40>
 801489e:	4b62      	ldr	r3, [pc, #392]	; (8014a28 <tcp_enqueue_flags+0x1bc>)
 80148a0:	f240 4213 	movw	r2, #1043	; 0x413
 80148a4:	4963      	ldr	r1, [pc, #396]	; (8014a34 <tcp_enqueue_flags+0x1c8>)
 80148a6:	4862      	ldr	r0, [pc, #392]	; (8014a30 <tcp_enqueue_flags+0x1c4>)
 80148a8:	f006 fce4 	bl	801b274 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80148ac:	78fb      	ldrb	r3, [r7, #3]
 80148ae:	f003 0302 	and.w	r3, r3, #2
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d001      	beq.n	80148ba <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80148b6:	2301      	movs	r3, #1
 80148b8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80148ba:	7ffb      	ldrb	r3, [r7, #31]
 80148bc:	009b      	lsls	r3, r3, #2
 80148be:	b2db      	uxtb	r3, r3
 80148c0:	f003 0304 	and.w	r3, r3, #4
 80148c4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80148c6:	7dfb      	ldrb	r3, [r7, #23]
 80148c8:	b29b      	uxth	r3, r3
 80148ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 80148ce:	4619      	mov	r1, r3
 80148d0:	2036      	movs	r0, #54	; 0x36
 80148d2:	f7fb f967 	bl	800fba4 <pbuf_alloc>
 80148d6:	6138      	str	r0, [r7, #16]
 80148d8:	693b      	ldr	r3, [r7, #16]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d109      	bne.n	80148f2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	8b5b      	ldrh	r3, [r3, #26]
 80148e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80148e6:	b29a      	uxth	r2, r3
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80148ec:	f04f 33ff 	mov.w	r3, #4294967295
 80148f0:	e095      	b.n	8014a1e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80148f2:	693b      	ldr	r3, [r7, #16]
 80148f4:	895a      	ldrh	r2, [r3, #10]
 80148f6:	7dfb      	ldrb	r3, [r7, #23]
 80148f8:	b29b      	uxth	r3, r3
 80148fa:	429a      	cmp	r2, r3
 80148fc:	d206      	bcs.n	801490c <tcp_enqueue_flags+0xa0>
 80148fe:	4b4a      	ldr	r3, [pc, #296]	; (8014a28 <tcp_enqueue_flags+0x1bc>)
 8014900:	f240 423a 	movw	r2, #1082	; 0x43a
 8014904:	494c      	ldr	r1, [pc, #304]	; (8014a38 <tcp_enqueue_flags+0x1cc>)
 8014906:	484a      	ldr	r0, [pc, #296]	; (8014a30 <tcp_enqueue_flags+0x1c4>)
 8014908:	f006 fcb4 	bl	801b274 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014910:	78fa      	ldrb	r2, [r7, #3]
 8014912:	7ffb      	ldrb	r3, [r7, #31]
 8014914:	9300      	str	r3, [sp, #0]
 8014916:	460b      	mov	r3, r1
 8014918:	6939      	ldr	r1, [r7, #16]
 801491a:	6878      	ldr	r0, [r7, #4]
 801491c:	f7ff fd70 	bl	8014400 <tcp_create_segment>
 8014920:	60f8      	str	r0, [r7, #12]
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d109      	bne.n	801493c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	8b5b      	ldrh	r3, [r3, #26]
 801492c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014930:	b29a      	uxth	r2, r3
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014936:	f04f 33ff 	mov.w	r3, #4294967295
 801493a:	e070      	b.n	8014a1e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	68db      	ldr	r3, [r3, #12]
 8014940:	f003 0303 	and.w	r3, r3, #3
 8014944:	2b00      	cmp	r3, #0
 8014946:	d006      	beq.n	8014956 <tcp_enqueue_flags+0xea>
 8014948:	4b37      	ldr	r3, [pc, #220]	; (8014a28 <tcp_enqueue_flags+0x1bc>)
 801494a:	f240 4242 	movw	r2, #1090	; 0x442
 801494e:	493b      	ldr	r1, [pc, #236]	; (8014a3c <tcp_enqueue_flags+0x1d0>)
 8014950:	4837      	ldr	r0, [pc, #220]	; (8014a30 <tcp_enqueue_flags+0x1c4>)
 8014952:	f006 fc8f 	bl	801b274 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	891b      	ldrh	r3, [r3, #8]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d006      	beq.n	801496c <tcp_enqueue_flags+0x100>
 801495e:	4b32      	ldr	r3, [pc, #200]	; (8014a28 <tcp_enqueue_flags+0x1bc>)
 8014960:	f240 4243 	movw	r2, #1091	; 0x443
 8014964:	4936      	ldr	r1, [pc, #216]	; (8014a40 <tcp_enqueue_flags+0x1d4>)
 8014966:	4832      	ldr	r0, [pc, #200]	; (8014a30 <tcp_enqueue_flags+0x1c4>)
 8014968:	f006 fc84 	bl	801b274 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014970:	2b00      	cmp	r3, #0
 8014972:	d103      	bne.n	801497c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	68fa      	ldr	r2, [r7, #12]
 8014978:	66da      	str	r2, [r3, #108]	; 0x6c
 801497a:	e00d      	b.n	8014998 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014980:	61bb      	str	r3, [r7, #24]
 8014982:	e002      	b.n	801498a <tcp_enqueue_flags+0x11e>
 8014984:	69bb      	ldr	r3, [r7, #24]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	61bb      	str	r3, [r7, #24]
 801498a:	69bb      	ldr	r3, [r7, #24]
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d1f8      	bne.n	8014984 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014992:	69bb      	ldr	r3, [r7, #24]
 8014994:	68fa      	ldr	r2, [r7, #12]
 8014996:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	2200      	movs	r2, #0
 801499c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80149a0:	78fb      	ldrb	r3, [r7, #3]
 80149a2:	f003 0302 	and.w	r3, r3, #2
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d104      	bne.n	80149b4 <tcp_enqueue_flags+0x148>
 80149aa:	78fb      	ldrb	r3, [r7, #3]
 80149ac:	f003 0301 	and.w	r3, r3, #1
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d004      	beq.n	80149be <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80149b8:	1c5a      	adds	r2, r3, #1
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80149be:	78fb      	ldrb	r3, [r7, #3]
 80149c0:	f003 0301 	and.w	r3, r3, #1
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d006      	beq.n	80149d6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	8b5b      	ldrh	r3, [r3, #26]
 80149cc:	f043 0320 	orr.w	r3, r3, #32
 80149d0:	b29a      	uxth	r2, r3
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	685b      	ldr	r3, [r3, #4]
 80149da:	4618      	mov	r0, r3
 80149dc:	f7fb fc4a 	bl	8010274 <pbuf_clen>
 80149e0:	4603      	mov	r3, r0
 80149e2:	461a      	mov	r2, r3
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80149ea:	4413      	add	r3, r2
 80149ec:	b29a      	uxth	r2, r3
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d00e      	beq.n	8014a1c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d10a      	bne.n	8014a1c <tcp_enqueue_flags+0x1b0>
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d106      	bne.n	8014a1c <tcp_enqueue_flags+0x1b0>
 8014a0e:	4b06      	ldr	r3, [pc, #24]	; (8014a28 <tcp_enqueue_flags+0x1bc>)
 8014a10:	f240 4266 	movw	r2, #1126	; 0x466
 8014a14:	490b      	ldr	r1, [pc, #44]	; (8014a44 <tcp_enqueue_flags+0x1d8>)
 8014a16:	4806      	ldr	r0, [pc, #24]	; (8014a30 <tcp_enqueue_flags+0x1c4>)
 8014a18:	f006 fc2c 	bl	801b274 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014a1c:	2300      	movs	r3, #0
}
 8014a1e:	4618      	mov	r0, r3
 8014a20:	3720      	adds	r7, #32
 8014a22:	46bd      	mov	sp, r7
 8014a24:	bd80      	pop	{r7, pc}
 8014a26:	bf00      	nop
 8014a28:	08021df8 	.word	0x08021df8
 8014a2c:	0802221c 	.word	0x0802221c
 8014a30:	08021e4c 	.word	0x08021e4c
 8014a34:	08022274 	.word	0x08022274
 8014a38:	08022294 	.word	0x08022294
 8014a3c:	080222d0 	.word	0x080222d0
 8014a40:	080222e8 	.word	0x080222e8
 8014a44:	08022314 	.word	0x08022314

08014a48 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014a48:	b5b0      	push	{r4, r5, r7, lr}
 8014a4a:	b08a      	sub	sp, #40	; 0x28
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d106      	bne.n	8014a64 <tcp_output+0x1c>
 8014a56:	4ba0      	ldr	r3, [pc, #640]	; (8014cd8 <tcp_output+0x290>)
 8014a58:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8014a5c:	499f      	ldr	r1, [pc, #636]	; (8014cdc <tcp_output+0x294>)
 8014a5e:	48a0      	ldr	r0, [pc, #640]	; (8014ce0 <tcp_output+0x298>)
 8014a60:	f006 fc08 	bl	801b274 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	7d1b      	ldrb	r3, [r3, #20]
 8014a68:	2b01      	cmp	r3, #1
 8014a6a:	d106      	bne.n	8014a7a <tcp_output+0x32>
 8014a6c:	4b9a      	ldr	r3, [pc, #616]	; (8014cd8 <tcp_output+0x290>)
 8014a6e:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8014a72:	499c      	ldr	r1, [pc, #624]	; (8014ce4 <tcp_output+0x29c>)
 8014a74:	489a      	ldr	r0, [pc, #616]	; (8014ce0 <tcp_output+0x298>)
 8014a76:	f006 fbfd 	bl	801b274 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014a7a:	4b9b      	ldr	r3, [pc, #620]	; (8014ce8 <tcp_output+0x2a0>)
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	687a      	ldr	r2, [r7, #4]
 8014a80:	429a      	cmp	r2, r3
 8014a82:	d101      	bne.n	8014a88 <tcp_output+0x40>
    return ERR_OK;
 8014a84:	2300      	movs	r3, #0
 8014a86:	e1d2      	b.n	8014e2e <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014a94:	429a      	cmp	r2, r3
 8014a96:	d203      	bcs.n	8014aa0 <tcp_output+0x58>
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014a9e:	e002      	b.n	8014aa6 <tcp_output+0x5e>
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014aa6:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014aac:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d10b      	bne.n	8014acc <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	8b5b      	ldrh	r3, [r3, #26]
 8014ab8:	f003 0302 	and.w	r3, r3, #2
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	f000 81a9 	beq.w	8014e14 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8014ac2:	6878      	ldr	r0, [r7, #4]
 8014ac4:	f000 fdd4 	bl	8015670 <tcp_send_empty_ack>
 8014ac8:	4603      	mov	r3, r0
 8014aca:	e1b0      	b.n	8014e2e <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014acc:	6879      	ldr	r1, [r7, #4]
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	3304      	adds	r3, #4
 8014ad2:	461a      	mov	r2, r3
 8014ad4:	6878      	ldr	r0, [r7, #4]
 8014ad6:	f7ff fc77 	bl	80143c8 <tcp_route>
 8014ada:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014adc:	697b      	ldr	r3, [r7, #20]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d102      	bne.n	8014ae8 <tcp_output+0xa0>
    return ERR_RTE;
 8014ae2:	f06f 0303 	mvn.w	r3, #3
 8014ae6:	e1a2      	b.n	8014e2e <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d003      	beq.n	8014af6 <tcp_output+0xae>
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d111      	bne.n	8014b1a <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014af6:	697b      	ldr	r3, [r7, #20]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d002      	beq.n	8014b02 <tcp_output+0xba>
 8014afc:	697b      	ldr	r3, [r7, #20]
 8014afe:	3304      	adds	r3, #4
 8014b00:	e000      	b.n	8014b04 <tcp_output+0xbc>
 8014b02:	2300      	movs	r3, #0
 8014b04:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014b06:	693b      	ldr	r3, [r7, #16]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d102      	bne.n	8014b12 <tcp_output+0xca>
      return ERR_RTE;
 8014b0c:	f06f 0303 	mvn.w	r3, #3
 8014b10:	e18d      	b.n	8014e2e <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014b12:	693b      	ldr	r3, [r7, #16]
 8014b14:	681a      	ldr	r2, [r3, #0]
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b1c:	68db      	ldr	r3, [r3, #12]
 8014b1e:	685b      	ldr	r3, [r3, #4]
 8014b20:	4618      	mov	r0, r3
 8014b22:	f7fa f89c 	bl	800ec5e <lwip_htonl>
 8014b26:	4602      	mov	r2, r0
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b2c:	1ad3      	subs	r3, r2, r3
 8014b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b30:	8912      	ldrh	r2, [r2, #8]
 8014b32:	4413      	add	r3, r2
 8014b34:	69ba      	ldr	r2, [r7, #24]
 8014b36:	429a      	cmp	r2, r3
 8014b38:	d227      	bcs.n	8014b8a <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014b40:	461a      	mov	r2, r3
 8014b42:	69bb      	ldr	r3, [r7, #24]
 8014b44:	4293      	cmp	r3, r2
 8014b46:	d114      	bne.n	8014b72 <tcp_output+0x12a>
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d110      	bne.n	8014b72 <tcp_output+0x12a>
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d10b      	bne.n	8014b72 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	2201      	movs	r2, #1
 8014b66:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	8b5b      	ldrh	r3, [r3, #26]
 8014b76:	f003 0302 	and.w	r3, r3, #2
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	f000 814c 	beq.w	8014e18 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8014b80:	6878      	ldr	r0, [r7, #4]
 8014b82:	f000 fd75 	bl	8015670 <tcp_send_empty_ack>
 8014b86:	4603      	mov	r3, r0
 8014b88:	e151      	b.n	8014e2e <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b96:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014b98:	6a3b      	ldr	r3, [r7, #32]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	f000 811b 	beq.w	8014dd6 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8014ba0:	e002      	b.n	8014ba8 <tcp_output+0x160>
 8014ba2:	6a3b      	ldr	r3, [r7, #32]
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	623b      	str	r3, [r7, #32]
 8014ba8:	6a3b      	ldr	r3, [r7, #32]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d1f8      	bne.n	8014ba2 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014bb0:	e111      	b.n	8014dd6 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bb4:	68db      	ldr	r3, [r3, #12]
 8014bb6:	899b      	ldrh	r3, [r3, #12]
 8014bb8:	b29b      	uxth	r3, r3
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f7fa f83a 	bl	800ec34 <lwip_htons>
 8014bc0:	4603      	mov	r3, r0
 8014bc2:	b2db      	uxtb	r3, r3
 8014bc4:	f003 0304 	and.w	r3, r3, #4
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d006      	beq.n	8014bda <tcp_output+0x192>
 8014bcc:	4b42      	ldr	r3, [pc, #264]	; (8014cd8 <tcp_output+0x290>)
 8014bce:	f240 5237 	movw	r2, #1335	; 0x537
 8014bd2:	4946      	ldr	r1, [pc, #280]	; (8014cec <tcp_output+0x2a4>)
 8014bd4:	4842      	ldr	r0, [pc, #264]	; (8014ce0 <tcp_output+0x298>)
 8014bd6:	f006 fb4d 	bl	801b274 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d01f      	beq.n	8014c22 <tcp_output+0x1da>
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	8b5b      	ldrh	r3, [r3, #26]
 8014be6:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d119      	bne.n	8014c22 <tcp_output+0x1da>
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d00b      	beq.n	8014c0e <tcp_output+0x1c6>
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d110      	bne.n	8014c22 <tcp_output+0x1da>
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c04:	891a      	ldrh	r2, [r3, #8]
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014c0a:	429a      	cmp	r2, r3
 8014c0c:	d209      	bcs.n	8014c22 <tcp_output+0x1da>
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d004      	beq.n	8014c22 <tcp_output+0x1da>
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014c1e:	2b0f      	cmp	r3, #15
 8014c20:	d901      	bls.n	8014c26 <tcp_output+0x1de>
 8014c22:	2301      	movs	r3, #1
 8014c24:	e000      	b.n	8014c28 <tcp_output+0x1e0>
 8014c26:	2300      	movs	r3, #0
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d106      	bne.n	8014c3a <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	8b5b      	ldrh	r3, [r3, #26]
 8014c30:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	f000 80e3 	beq.w	8014e00 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	7d1b      	ldrb	r3, [r3, #20]
 8014c3e:	2b02      	cmp	r3, #2
 8014c40:	d00d      	beq.n	8014c5e <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c44:	68db      	ldr	r3, [r3, #12]
 8014c46:	899b      	ldrh	r3, [r3, #12]
 8014c48:	b29c      	uxth	r4, r3
 8014c4a:	2010      	movs	r0, #16
 8014c4c:	f7f9 fff2 	bl	800ec34 <lwip_htons>
 8014c50:	4603      	mov	r3, r0
 8014c52:	461a      	mov	r2, r3
 8014c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c56:	68db      	ldr	r3, [r3, #12]
 8014c58:	4322      	orrs	r2, r4
 8014c5a:	b292      	uxth	r2, r2
 8014c5c:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014c5e:	697a      	ldr	r2, [r7, #20]
 8014c60:	6879      	ldr	r1, [r7, #4]
 8014c62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014c64:	f000 f908 	bl	8014e78 <tcp_output_segment>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d009      	beq.n	8014c88 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	8b5b      	ldrh	r3, [r3, #26]
 8014c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c7c:	b29a      	uxth	r2, r3
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	835a      	strh	r2, [r3, #26]
      return err;
 8014c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c86:	e0d2      	b.n	8014e2e <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c8a:	681a      	ldr	r2, [r3, #0]
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	7d1b      	ldrb	r3, [r3, #20]
 8014c94:	2b02      	cmp	r3, #2
 8014c96:	d006      	beq.n	8014ca6 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	8b5b      	ldrh	r3, [r3, #26]
 8014c9c:	f023 0303 	bic.w	r3, r3, #3
 8014ca0:	b29a      	uxth	r2, r3
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ca8:	68db      	ldr	r3, [r3, #12]
 8014caa:	685b      	ldr	r3, [r3, #4]
 8014cac:	4618      	mov	r0, r3
 8014cae:	f7f9 ffd6 	bl	800ec5e <lwip_htonl>
 8014cb2:	4604      	mov	r4, r0
 8014cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cb6:	891b      	ldrh	r3, [r3, #8]
 8014cb8:	461d      	mov	r5, r3
 8014cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cbc:	68db      	ldr	r3, [r3, #12]
 8014cbe:	899b      	ldrh	r3, [r3, #12]
 8014cc0:	b29b      	uxth	r3, r3
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f7f9 ffb6 	bl	800ec34 <lwip_htons>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	b2db      	uxtb	r3, r3
 8014ccc:	f003 0303 	and.w	r3, r3, #3
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d00d      	beq.n	8014cf0 <tcp_output+0x2a8>
 8014cd4:	2301      	movs	r3, #1
 8014cd6:	e00c      	b.n	8014cf2 <tcp_output+0x2aa>
 8014cd8:	08021df8 	.word	0x08021df8
 8014cdc:	0802233c 	.word	0x0802233c
 8014ce0:	08021e4c 	.word	0x08021e4c
 8014ce4:	08022354 	.word	0x08022354
 8014ce8:	2000763c 	.word	0x2000763c
 8014cec:	0802237c 	.word	0x0802237c
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	442b      	add	r3, r5
 8014cf4:	4423      	add	r3, r4
 8014cf6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014cfc:	68bb      	ldr	r3, [r7, #8]
 8014cfe:	1ad3      	subs	r3, r2, r3
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	da02      	bge.n	8014d0a <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	68ba      	ldr	r2, [r7, #8]
 8014d08:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d0c:	891b      	ldrh	r3, [r3, #8]
 8014d0e:	461c      	mov	r4, r3
 8014d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d12:	68db      	ldr	r3, [r3, #12]
 8014d14:	899b      	ldrh	r3, [r3, #12]
 8014d16:	b29b      	uxth	r3, r3
 8014d18:	4618      	mov	r0, r3
 8014d1a:	f7f9 ff8b 	bl	800ec34 <lwip_htons>
 8014d1e:	4603      	mov	r3, r0
 8014d20:	b2db      	uxtb	r3, r3
 8014d22:	f003 0303 	and.w	r3, r3, #3
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d001      	beq.n	8014d2e <tcp_output+0x2e6>
 8014d2a:	2301      	movs	r3, #1
 8014d2c:	e000      	b.n	8014d30 <tcp_output+0x2e8>
 8014d2e:	2300      	movs	r3, #0
 8014d30:	4423      	add	r3, r4
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d049      	beq.n	8014dca <tcp_output+0x382>
      seg->next = NULL;
 8014d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d38:	2200      	movs	r2, #0
 8014d3a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d105      	bne.n	8014d50 <tcp_output+0x308>
        pcb->unacked = seg;
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d48:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d4c:	623b      	str	r3, [r7, #32]
 8014d4e:	e03f      	b.n	8014dd0 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d52:	68db      	ldr	r3, [r3, #12]
 8014d54:	685b      	ldr	r3, [r3, #4]
 8014d56:	4618      	mov	r0, r3
 8014d58:	f7f9 ff81 	bl	800ec5e <lwip_htonl>
 8014d5c:	4604      	mov	r4, r0
 8014d5e:	6a3b      	ldr	r3, [r7, #32]
 8014d60:	68db      	ldr	r3, [r3, #12]
 8014d62:	685b      	ldr	r3, [r3, #4]
 8014d64:	4618      	mov	r0, r3
 8014d66:	f7f9 ff7a 	bl	800ec5e <lwip_htonl>
 8014d6a:	4603      	mov	r3, r0
 8014d6c:	1ae3      	subs	r3, r4, r3
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	da24      	bge.n	8014dbc <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	3370      	adds	r3, #112	; 0x70
 8014d76:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014d78:	e002      	b.n	8014d80 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014d7a:	69fb      	ldr	r3, [r7, #28]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014d80:	69fb      	ldr	r3, [r7, #28]
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d011      	beq.n	8014dac <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014d88:	69fb      	ldr	r3, [r7, #28]
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	68db      	ldr	r3, [r3, #12]
 8014d8e:	685b      	ldr	r3, [r3, #4]
 8014d90:	4618      	mov	r0, r3
 8014d92:	f7f9 ff64 	bl	800ec5e <lwip_htonl>
 8014d96:	4604      	mov	r4, r0
 8014d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d9a:	68db      	ldr	r3, [r3, #12]
 8014d9c:	685b      	ldr	r3, [r3, #4]
 8014d9e:	4618      	mov	r0, r3
 8014da0:	f7f9 ff5d 	bl	800ec5e <lwip_htonl>
 8014da4:	4603      	mov	r3, r0
 8014da6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	dbe6      	blt.n	8014d7a <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8014dac:	69fb      	ldr	r3, [r7, #28]
 8014dae:	681a      	ldr	r2, [r3, #0]
 8014db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014db2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014db4:	69fb      	ldr	r3, [r7, #28]
 8014db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014db8:	601a      	str	r2, [r3, #0]
 8014dba:	e009      	b.n	8014dd0 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014dbc:	6a3b      	ldr	r3, [r7, #32]
 8014dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014dc0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8014dc2:	6a3b      	ldr	r3, [r7, #32]
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	623b      	str	r3, [r7, #32]
 8014dc8:	e002      	b.n	8014dd0 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014dca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014dcc:	f7fc fc42 	bl	8011654 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014dd4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d012      	beq.n	8014e02 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dde:	68db      	ldr	r3, [r3, #12]
 8014de0:	685b      	ldr	r3, [r3, #4]
 8014de2:	4618      	mov	r0, r3
 8014de4:	f7f9 ff3b 	bl	800ec5e <lwip_htonl>
 8014de8:	4602      	mov	r2, r0
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014dee:	1ad3      	subs	r3, r2, r3
 8014df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014df2:	8912      	ldrh	r2, [r2, #8]
 8014df4:	4413      	add	r3, r2
  while (seg != NULL &&
 8014df6:	69ba      	ldr	r2, [r7, #24]
 8014df8:	429a      	cmp	r2, r3
 8014dfa:	f4bf aeda 	bcs.w	8014bb2 <tcp_output+0x16a>
 8014dfe:	e000      	b.n	8014e02 <tcp_output+0x3ba>
      break;
 8014e00:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d108      	bne.n	8014e1c <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	2200      	movs	r2, #0
 8014e0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8014e12:	e004      	b.n	8014e1e <tcp_output+0x3d6>
    goto output_done;
 8014e14:	bf00      	nop
 8014e16:	e002      	b.n	8014e1e <tcp_output+0x3d6>
    goto output_done;
 8014e18:	bf00      	nop
 8014e1a:	e000      	b.n	8014e1e <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014e1c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	8b5b      	ldrh	r3, [r3, #26]
 8014e22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014e26:	b29a      	uxth	r2, r3
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014e2c:	2300      	movs	r3, #0
}
 8014e2e:	4618      	mov	r0, r3
 8014e30:	3728      	adds	r7, #40	; 0x28
 8014e32:	46bd      	mov	sp, r7
 8014e34:	bdb0      	pop	{r4, r5, r7, pc}
 8014e36:	bf00      	nop

08014e38 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b082      	sub	sp, #8
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d106      	bne.n	8014e54 <tcp_output_segment_busy+0x1c>
 8014e46:	4b09      	ldr	r3, [pc, #36]	; (8014e6c <tcp_output_segment_busy+0x34>)
 8014e48:	f240 529a 	movw	r2, #1434	; 0x59a
 8014e4c:	4908      	ldr	r1, [pc, #32]	; (8014e70 <tcp_output_segment_busy+0x38>)
 8014e4e:	4809      	ldr	r0, [pc, #36]	; (8014e74 <tcp_output_segment_busy+0x3c>)
 8014e50:	f006 fa10 	bl	801b274 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	685b      	ldr	r3, [r3, #4]
 8014e58:	7b9b      	ldrb	r3, [r3, #14]
 8014e5a:	2b01      	cmp	r3, #1
 8014e5c:	d001      	beq.n	8014e62 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014e5e:	2301      	movs	r3, #1
 8014e60:	e000      	b.n	8014e64 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8014e62:	2300      	movs	r3, #0
}
 8014e64:	4618      	mov	r0, r3
 8014e66:	3708      	adds	r7, #8
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	bd80      	pop	{r7, pc}
 8014e6c:	08021df8 	.word	0x08021df8
 8014e70:	08022394 	.word	0x08022394
 8014e74:	08021e4c 	.word	0x08021e4c

08014e78 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014e78:	b5b0      	push	{r4, r5, r7, lr}
 8014e7a:	b08c      	sub	sp, #48	; 0x30
 8014e7c:	af04      	add	r7, sp, #16
 8014e7e:	60f8      	str	r0, [r7, #12]
 8014e80:	60b9      	str	r1, [r7, #8]
 8014e82:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d106      	bne.n	8014e98 <tcp_output_segment+0x20>
 8014e8a:	4b64      	ldr	r3, [pc, #400]	; (801501c <tcp_output_segment+0x1a4>)
 8014e8c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8014e90:	4963      	ldr	r1, [pc, #396]	; (8015020 <tcp_output_segment+0x1a8>)
 8014e92:	4864      	ldr	r0, [pc, #400]	; (8015024 <tcp_output_segment+0x1ac>)
 8014e94:	f006 f9ee 	bl	801b274 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014e98:	68bb      	ldr	r3, [r7, #8]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d106      	bne.n	8014eac <tcp_output_segment+0x34>
 8014e9e:	4b5f      	ldr	r3, [pc, #380]	; (801501c <tcp_output_segment+0x1a4>)
 8014ea0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014ea4:	4960      	ldr	r1, [pc, #384]	; (8015028 <tcp_output_segment+0x1b0>)
 8014ea6:	485f      	ldr	r0, [pc, #380]	; (8015024 <tcp_output_segment+0x1ac>)
 8014ea8:	f006 f9e4 	bl	801b274 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d106      	bne.n	8014ec0 <tcp_output_segment+0x48>
 8014eb2:	4b5a      	ldr	r3, [pc, #360]	; (801501c <tcp_output_segment+0x1a4>)
 8014eb4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014eb8:	495c      	ldr	r1, [pc, #368]	; (801502c <tcp_output_segment+0x1b4>)
 8014eba:	485a      	ldr	r0, [pc, #360]	; (8015024 <tcp_output_segment+0x1ac>)
 8014ebc:	f006 f9da 	bl	801b274 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014ec0:	68f8      	ldr	r0, [r7, #12]
 8014ec2:	f7ff ffb9 	bl	8014e38 <tcp_output_segment_busy>
 8014ec6:	4603      	mov	r3, r0
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d001      	beq.n	8014ed0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014ecc:	2300      	movs	r3, #0
 8014ece:	e0a0      	b.n	8015012 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014ed0:	68bb      	ldr	r3, [r7, #8]
 8014ed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	68dc      	ldr	r4, [r3, #12]
 8014ed8:	4610      	mov	r0, r2
 8014eda:	f7f9 fec0 	bl	800ec5e <lwip_htonl>
 8014ede:	4603      	mov	r3, r0
 8014ee0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014ee2:	68bb      	ldr	r3, [r7, #8]
 8014ee4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	68dc      	ldr	r4, [r3, #12]
 8014eea:	4610      	mov	r0, r2
 8014eec:	f7f9 fea2 	bl	800ec34 <lwip_htons>
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014ef4:	68bb      	ldr	r3, [r7, #8]
 8014ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ef8:	68ba      	ldr	r2, [r7, #8]
 8014efa:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014efc:	441a      	add	r2, r3
 8014efe:	68bb      	ldr	r3, [r7, #8]
 8014f00:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	68db      	ldr	r3, [r3, #12]
 8014f06:	3314      	adds	r3, #20
 8014f08:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	7a9b      	ldrb	r3, [r3, #10]
 8014f0e:	f003 0301 	and.w	r3, r3, #1
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d015      	beq.n	8014f42 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	3304      	adds	r3, #4
 8014f1a:	461a      	mov	r2, r3
 8014f1c:	6879      	ldr	r1, [r7, #4]
 8014f1e:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 8014f22:	f7fc fe8d 	bl	8011c40 <tcp_eff_send_mss_netif>
 8014f26:	4603      	mov	r3, r0
 8014f28:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014f2a:	8b7b      	ldrh	r3, [r7, #26]
 8014f2c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8014f30:	4618      	mov	r0, r3
 8014f32:	f7f9 fe94 	bl	800ec5e <lwip_htonl>
 8014f36:	4602      	mov	r2, r0
 8014f38:	69fb      	ldr	r3, [r7, #28]
 8014f3a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014f3c:	69fb      	ldr	r3, [r7, #28]
 8014f3e:	3304      	adds	r3, #4
 8014f40:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014f42:	68bb      	ldr	r3, [r7, #8]
 8014f44:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	da02      	bge.n	8014f52 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014f4c:	68bb      	ldr	r3, [r7, #8]
 8014f4e:	2200      	movs	r2, #0
 8014f50:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8014f52:	68bb      	ldr	r3, [r7, #8]
 8014f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d10c      	bne.n	8014f74 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014f5a:	4b35      	ldr	r3, [pc, #212]	; (8015030 <tcp_output_segment+0x1b8>)
 8014f5c:	681a      	ldr	r2, [r3, #0]
 8014f5e:	68bb      	ldr	r3, [r7, #8]
 8014f60:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	68db      	ldr	r3, [r3, #12]
 8014f66:	685b      	ldr	r3, [r3, #4]
 8014f68:	4618      	mov	r0, r3
 8014f6a:	f7f9 fe78 	bl	800ec5e <lwip_htonl>
 8014f6e:	4602      	mov	r2, r0
 8014f70:	68bb      	ldr	r3, [r7, #8]
 8014f72:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	68db      	ldr	r3, [r3, #12]
 8014f78:	461a      	mov	r2, r3
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	685b      	ldr	r3, [r3, #4]
 8014f7e:	685b      	ldr	r3, [r3, #4]
 8014f80:	1ad3      	subs	r3, r2, r3
 8014f82:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	685b      	ldr	r3, [r3, #4]
 8014f88:	8959      	ldrh	r1, [r3, #10]
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	685b      	ldr	r3, [r3, #4]
 8014f8e:	8b3a      	ldrh	r2, [r7, #24]
 8014f90:	1a8a      	subs	r2, r1, r2
 8014f92:	b292      	uxth	r2, r2
 8014f94:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	685b      	ldr	r3, [r3, #4]
 8014f9a:	8919      	ldrh	r1, [r3, #8]
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	685b      	ldr	r3, [r3, #4]
 8014fa0:	8b3a      	ldrh	r2, [r7, #24]
 8014fa2:	1a8a      	subs	r2, r1, r2
 8014fa4:	b292      	uxth	r2, r2
 8014fa6:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	685b      	ldr	r3, [r3, #4]
 8014fac:	68fa      	ldr	r2, [r7, #12]
 8014fae:	68d2      	ldr	r2, [r2, #12]
 8014fb0:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	68db      	ldr	r3, [r3, #12]
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	741a      	strb	r2, [r3, #16]
 8014fba:	2200      	movs	r2, #0
 8014fbc:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	68db      	ldr	r3, [r3, #12]
 8014fc2:	f103 0214 	add.w	r2, r3, #20
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	7a9b      	ldrb	r3, [r3, #10]
 8014fca:	009b      	lsls	r3, r3, #2
 8014fcc:	f003 0304 	and.w	r3, r3, #4
 8014fd0:	4413      	add	r3, r2
 8014fd2:	69fa      	ldr	r2, [r7, #28]
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	d006      	beq.n	8014fe6 <tcp_output_segment+0x16e>
 8014fd8:	4b10      	ldr	r3, [pc, #64]	; (801501c <tcp_output_segment+0x1a4>)
 8014fda:	f240 621c 	movw	r2, #1564	; 0x61c
 8014fde:	4915      	ldr	r1, [pc, #84]	; (8015034 <tcp_output_segment+0x1bc>)
 8014fe0:	4810      	ldr	r0, [pc, #64]	; (8015024 <tcp_output_segment+0x1ac>)
 8014fe2:	f006 f947 	bl	801b274 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	6858      	ldr	r0, [r3, #4]
 8014fea:	68b9      	ldr	r1, [r7, #8]
 8014fec:	68bb      	ldr	r3, [r7, #8]
 8014fee:	1d1c      	adds	r4, r3, #4
 8014ff0:	68bb      	ldr	r3, [r7, #8]
 8014ff2:	7add      	ldrb	r5, [r3, #11]
 8014ff4:	68bb      	ldr	r3, [r7, #8]
 8014ff6:	7a9b      	ldrb	r3, [r3, #10]
 8014ff8:	687a      	ldr	r2, [r7, #4]
 8014ffa:	9202      	str	r2, [sp, #8]
 8014ffc:	2206      	movs	r2, #6
 8014ffe:	9201      	str	r2, [sp, #4]
 8015000:	9300      	str	r3, [sp, #0]
 8015002:	462b      	mov	r3, r5
 8015004:	4622      	mov	r2, r4
 8015006:	f004 fb71 	bl	80196ec <ip4_output_if>
 801500a:	4603      	mov	r3, r0
 801500c:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801500e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015012:	4618      	mov	r0, r3
 8015014:	3720      	adds	r7, #32
 8015016:	46bd      	mov	sp, r7
 8015018:	bdb0      	pop	{r4, r5, r7, pc}
 801501a:	bf00      	nop
 801501c:	08021df8 	.word	0x08021df8
 8015020:	080223bc 	.word	0x080223bc
 8015024:	08021e4c 	.word	0x08021e4c
 8015028:	080223dc 	.word	0x080223dc
 801502c:	080223fc 	.word	0x080223fc
 8015030:	2000762c 	.word	0x2000762c
 8015034:	08022420 	.word	0x08022420

08015038 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015038:	b5b0      	push	{r4, r5, r7, lr}
 801503a:	b084      	sub	sp, #16
 801503c:	af00      	add	r7, sp, #0
 801503e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	2b00      	cmp	r3, #0
 8015044:	d106      	bne.n	8015054 <tcp_rexmit_rto_prepare+0x1c>
 8015046:	4b31      	ldr	r3, [pc, #196]	; (801510c <tcp_rexmit_rto_prepare+0xd4>)
 8015048:	f240 6263 	movw	r2, #1635	; 0x663
 801504c:	4930      	ldr	r1, [pc, #192]	; (8015110 <tcp_rexmit_rto_prepare+0xd8>)
 801504e:	4831      	ldr	r0, [pc, #196]	; (8015114 <tcp_rexmit_rto_prepare+0xdc>)
 8015050:	f006 f910 	bl	801b274 <iprintf>

  if (pcb->unacked == NULL) {
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015058:	2b00      	cmp	r3, #0
 801505a:	d102      	bne.n	8015062 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801505c:	f06f 0305 	mvn.w	r3, #5
 8015060:	e050      	b.n	8015104 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015066:	60fb      	str	r3, [r7, #12]
 8015068:	e00b      	b.n	8015082 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801506a:	68f8      	ldr	r0, [r7, #12]
 801506c:	f7ff fee4 	bl	8014e38 <tcp_output_segment_busy>
 8015070:	4603      	mov	r3, r0
 8015072:	2b00      	cmp	r3, #0
 8015074:	d002      	beq.n	801507c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015076:	f06f 0305 	mvn.w	r3, #5
 801507a:	e043      	b.n	8015104 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	60fb      	str	r3, [r7, #12]
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d1ef      	bne.n	801506a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801508a:	68f8      	ldr	r0, [r7, #12]
 801508c:	f7ff fed4 	bl	8014e38 <tcp_output_segment_busy>
 8015090:	4603      	mov	r3, r0
 8015092:	2b00      	cmp	r3, #0
 8015094:	d002      	beq.n	801509c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015096:	f06f 0305 	mvn.w	r3, #5
 801509a:	e033      	b.n	8015104 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	2200      	movs	r2, #0
 80150b0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	8b5b      	ldrh	r3, [r3, #26]
 80150b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80150ba:	b29a      	uxth	r2, r3
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	68db      	ldr	r3, [r3, #12]
 80150c4:	685b      	ldr	r3, [r3, #4]
 80150c6:	4618      	mov	r0, r3
 80150c8:	f7f9 fdc9 	bl	800ec5e <lwip_htonl>
 80150cc:	4604      	mov	r4, r0
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	891b      	ldrh	r3, [r3, #8]
 80150d2:	461d      	mov	r5, r3
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	68db      	ldr	r3, [r3, #12]
 80150d8:	899b      	ldrh	r3, [r3, #12]
 80150da:	b29b      	uxth	r3, r3
 80150dc:	4618      	mov	r0, r3
 80150de:	f7f9 fda9 	bl	800ec34 <lwip_htons>
 80150e2:	4603      	mov	r3, r0
 80150e4:	b2db      	uxtb	r3, r3
 80150e6:	f003 0303 	and.w	r3, r3, #3
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d001      	beq.n	80150f2 <tcp_rexmit_rto_prepare+0xba>
 80150ee:	2301      	movs	r3, #1
 80150f0:	e000      	b.n	80150f4 <tcp_rexmit_rto_prepare+0xbc>
 80150f2:	2300      	movs	r3, #0
 80150f4:	442b      	add	r3, r5
 80150f6:	18e2      	adds	r2, r4, r3
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	2200      	movs	r2, #0
 8015100:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015102:	2300      	movs	r3, #0
}
 8015104:	4618      	mov	r0, r3
 8015106:	3710      	adds	r7, #16
 8015108:	46bd      	mov	sp, r7
 801510a:	bdb0      	pop	{r4, r5, r7, pc}
 801510c:	08021df8 	.word	0x08021df8
 8015110:	08022434 	.word	0x08022434
 8015114:	08021e4c 	.word	0x08021e4c

08015118 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b082      	sub	sp, #8
 801511c:	af00      	add	r7, sp, #0
 801511e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d106      	bne.n	8015134 <tcp_rexmit_rto_commit+0x1c>
 8015126:	4b0d      	ldr	r3, [pc, #52]	; (801515c <tcp_rexmit_rto_commit+0x44>)
 8015128:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801512c:	490c      	ldr	r1, [pc, #48]	; (8015160 <tcp_rexmit_rto_commit+0x48>)
 801512e:	480d      	ldr	r0, [pc, #52]	; (8015164 <tcp_rexmit_rto_commit+0x4c>)
 8015130:	f006 f8a0 	bl	801b274 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801513a:	2bff      	cmp	r3, #255	; 0xff
 801513c:	d007      	beq.n	801514e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015144:	3301      	adds	r3, #1
 8015146:	b2da      	uxtb	r2, r3
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801514e:	6878      	ldr	r0, [r7, #4]
 8015150:	f7ff fc7a 	bl	8014a48 <tcp_output>
}
 8015154:	bf00      	nop
 8015156:	3708      	adds	r7, #8
 8015158:	46bd      	mov	sp, r7
 801515a:	bd80      	pop	{r7, pc}
 801515c:	08021df8 	.word	0x08021df8
 8015160:	08022458 	.word	0x08022458
 8015164:	08021e4c 	.word	0x08021e4c

08015168 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015168:	b580      	push	{r7, lr}
 801516a:	b082      	sub	sp, #8
 801516c:	af00      	add	r7, sp, #0
 801516e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d106      	bne.n	8015184 <tcp_rexmit_rto+0x1c>
 8015176:	4b0a      	ldr	r3, [pc, #40]	; (80151a0 <tcp_rexmit_rto+0x38>)
 8015178:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801517c:	4909      	ldr	r1, [pc, #36]	; (80151a4 <tcp_rexmit_rto+0x3c>)
 801517e:	480a      	ldr	r0, [pc, #40]	; (80151a8 <tcp_rexmit_rto+0x40>)
 8015180:	f006 f878 	bl	801b274 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	f7ff ff57 	bl	8015038 <tcp_rexmit_rto_prepare>
 801518a:	4603      	mov	r3, r0
 801518c:	2b00      	cmp	r3, #0
 801518e:	d102      	bne.n	8015196 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015190:	6878      	ldr	r0, [r7, #4]
 8015192:	f7ff ffc1 	bl	8015118 <tcp_rexmit_rto_commit>
  }
}
 8015196:	bf00      	nop
 8015198:	3708      	adds	r7, #8
 801519a:	46bd      	mov	sp, r7
 801519c:	bd80      	pop	{r7, pc}
 801519e:	bf00      	nop
 80151a0:	08021df8 	.word	0x08021df8
 80151a4:	0802247c 	.word	0x0802247c
 80151a8:	08021e4c 	.word	0x08021e4c

080151ac <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80151ac:	b590      	push	{r4, r7, lr}
 80151ae:	b085      	sub	sp, #20
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d106      	bne.n	80151c8 <tcp_rexmit+0x1c>
 80151ba:	4b2f      	ldr	r3, [pc, #188]	; (8015278 <tcp_rexmit+0xcc>)
 80151bc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80151c0:	492e      	ldr	r1, [pc, #184]	; (801527c <tcp_rexmit+0xd0>)
 80151c2:	482f      	ldr	r0, [pc, #188]	; (8015280 <tcp_rexmit+0xd4>)
 80151c4:	f006 f856 	bl	801b274 <iprintf>

  if (pcb->unacked == NULL) {
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d102      	bne.n	80151d6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80151d0:	f06f 0305 	mvn.w	r3, #5
 80151d4:	e04c      	b.n	8015270 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151da:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80151dc:	68b8      	ldr	r0, [r7, #8]
 80151de:	f7ff fe2b 	bl	8014e38 <tcp_output_segment_busy>
 80151e2:	4603      	mov	r3, r0
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d002      	beq.n	80151ee <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80151e8:	f06f 0305 	mvn.w	r3, #5
 80151ec:	e040      	b.n	8015270 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80151ee:	68bb      	ldr	r3, [r7, #8]
 80151f0:	681a      	ldr	r2, [r3, #0]
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	336c      	adds	r3, #108	; 0x6c
 80151fa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80151fc:	e002      	b.n	8015204 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d011      	beq.n	8015230 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	68db      	ldr	r3, [r3, #12]
 8015212:	685b      	ldr	r3, [r3, #4]
 8015214:	4618      	mov	r0, r3
 8015216:	f7f9 fd22 	bl	800ec5e <lwip_htonl>
 801521a:	4604      	mov	r4, r0
 801521c:	68bb      	ldr	r3, [r7, #8]
 801521e:	68db      	ldr	r3, [r3, #12]
 8015220:	685b      	ldr	r3, [r3, #4]
 8015222:	4618      	mov	r0, r3
 8015224:	f7f9 fd1b 	bl	800ec5e <lwip_htonl>
 8015228:	4603      	mov	r3, r0
 801522a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801522c:	2b00      	cmp	r3, #0
 801522e:	dbe6      	blt.n	80151fe <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	681a      	ldr	r2, [r3, #0]
 8015234:	68bb      	ldr	r3, [r7, #8]
 8015236:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	68ba      	ldr	r2, [r7, #8]
 801523c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801523e:	68bb      	ldr	r3, [r7, #8]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d103      	bne.n	801524e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	2200      	movs	r2, #0
 801524a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015254:	2bff      	cmp	r3, #255	; 0xff
 8015256:	d007      	beq.n	8015268 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801525e:	3301      	adds	r3, #1
 8015260:	b2da      	uxtb	r2, r3
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	2200      	movs	r2, #0
 801526c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801526e:	2300      	movs	r3, #0
}
 8015270:	4618      	mov	r0, r3
 8015272:	3714      	adds	r7, #20
 8015274:	46bd      	mov	sp, r7
 8015276:	bd90      	pop	{r4, r7, pc}
 8015278:	08021df8 	.word	0x08021df8
 801527c:	08022498 	.word	0x08022498
 8015280:	08021e4c 	.word	0x08021e4c

08015284 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015284:	b580      	push	{r7, lr}
 8015286:	b082      	sub	sp, #8
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d106      	bne.n	80152a0 <tcp_rexmit_fast+0x1c>
 8015292:	4b2e      	ldr	r3, [pc, #184]	; (801534c <tcp_rexmit_fast+0xc8>)
 8015294:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8015298:	492d      	ldr	r1, [pc, #180]	; (8015350 <tcp_rexmit_fast+0xcc>)
 801529a:	482e      	ldr	r0, [pc, #184]	; (8015354 <tcp_rexmit_fast+0xd0>)
 801529c:	f005 ffea 	bl	801b274 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d04d      	beq.n	8015344 <tcp_rexmit_fast+0xc0>
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	8b5b      	ldrh	r3, [r3, #26]
 80152ac:	f003 0304 	and.w	r3, r3, #4
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d147      	bne.n	8015344 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80152b4:	6878      	ldr	r0, [r7, #4]
 80152b6:	f7ff ff79 	bl	80151ac <tcp_rexmit>
 80152ba:	4603      	mov	r3, r0
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d141      	bne.n	8015344 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80152cc:	429a      	cmp	r2, r3
 80152ce:	d207      	bcs.n	80152e0 <tcp_rexmit_fast+0x5c>
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80152d6:	0fda      	lsrs	r2, r3, #31
 80152d8:	4413      	add	r3, r2
 80152da:	105b      	asrs	r3, r3, #1
 80152dc:	b29b      	uxth	r3, r3
 80152de:	e006      	b.n	80152ee <tcp_rexmit_fast+0x6a>
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80152e6:	0fda      	lsrs	r2, r3, #31
 80152e8:	4413      	add	r3, r2
 80152ea:	105b      	asrs	r3, r3, #1
 80152ec:	b29b      	uxth	r3, r3
 80152ee:	687a      	ldr	r2, [r7, #4]
 80152f0:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80152fa:	461a      	mov	r2, r3
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015300:	005b      	lsls	r3, r3, #1
 8015302:	429a      	cmp	r2, r3
 8015304:	d206      	bcs.n	8015314 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801530a:	005b      	lsls	r3, r3, #1
 801530c:	b29a      	uxth	r2, r3
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801531e:	4619      	mov	r1, r3
 8015320:	0049      	lsls	r1, r1, #1
 8015322:	440b      	add	r3, r1
 8015324:	b29b      	uxth	r3, r3
 8015326:	4413      	add	r3, r2
 8015328:	b29a      	uxth	r2, r3
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	8b5b      	ldrh	r3, [r3, #26]
 8015334:	f043 0304 	orr.w	r3, r3, #4
 8015338:	b29a      	uxth	r2, r3
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	2200      	movs	r2, #0
 8015342:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8015344:	bf00      	nop
 8015346:	3708      	adds	r7, #8
 8015348:	46bd      	mov	sp, r7
 801534a:	bd80      	pop	{r7, pc}
 801534c:	08021df8 	.word	0x08021df8
 8015350:	080224b0 	.word	0x080224b0
 8015354:	08021e4c 	.word	0x08021e4c

08015358 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015358:	b580      	push	{r7, lr}
 801535a:	b086      	sub	sp, #24
 801535c:	af00      	add	r7, sp, #0
 801535e:	60f8      	str	r0, [r7, #12]
 8015360:	607b      	str	r3, [r7, #4]
 8015362:	460b      	mov	r3, r1
 8015364:	817b      	strh	r3, [r7, #10]
 8015366:	4613      	mov	r3, r2
 8015368:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801536a:	897a      	ldrh	r2, [r7, #10]
 801536c:	893b      	ldrh	r3, [r7, #8]
 801536e:	4413      	add	r3, r2
 8015370:	b29b      	uxth	r3, r3
 8015372:	3314      	adds	r3, #20
 8015374:	b29b      	uxth	r3, r3
 8015376:	f44f 7220 	mov.w	r2, #640	; 0x280
 801537a:	4619      	mov	r1, r3
 801537c:	2022      	movs	r0, #34	; 0x22
 801537e:	f7fa fc11 	bl	800fba4 <pbuf_alloc>
 8015382:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015384:	697b      	ldr	r3, [r7, #20]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d04e      	beq.n	8015428 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801538a:	697b      	ldr	r3, [r7, #20]
 801538c:	895b      	ldrh	r3, [r3, #10]
 801538e:	461a      	mov	r2, r3
 8015390:	897b      	ldrh	r3, [r7, #10]
 8015392:	3314      	adds	r3, #20
 8015394:	429a      	cmp	r2, r3
 8015396:	da06      	bge.n	80153a6 <tcp_output_alloc_header_common+0x4e>
 8015398:	4b26      	ldr	r3, [pc, #152]	; (8015434 <tcp_output_alloc_header_common+0xdc>)
 801539a:	f240 7224 	movw	r2, #1828	; 0x724
 801539e:	4926      	ldr	r1, [pc, #152]	; (8015438 <tcp_output_alloc_header_common+0xe0>)
 80153a0:	4826      	ldr	r0, [pc, #152]	; (801543c <tcp_output_alloc_header_common+0xe4>)
 80153a2:	f005 ff67 	bl	801b274 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80153a6:	697b      	ldr	r3, [r7, #20]
 80153a8:	685b      	ldr	r3, [r3, #4]
 80153aa:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80153ac:	8c3b      	ldrh	r3, [r7, #32]
 80153ae:	4618      	mov	r0, r3
 80153b0:	f7f9 fc40 	bl	800ec34 <lwip_htons>
 80153b4:	4603      	mov	r3, r0
 80153b6:	461a      	mov	r2, r3
 80153b8:	693b      	ldr	r3, [r7, #16]
 80153ba:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80153bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80153be:	4618      	mov	r0, r3
 80153c0:	f7f9 fc38 	bl	800ec34 <lwip_htons>
 80153c4:	4603      	mov	r3, r0
 80153c6:	461a      	mov	r2, r3
 80153c8:	693b      	ldr	r3, [r7, #16]
 80153ca:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80153cc:	693b      	ldr	r3, [r7, #16]
 80153ce:	687a      	ldr	r2, [r7, #4]
 80153d0:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80153d2:	68f8      	ldr	r0, [r7, #12]
 80153d4:	f7f9 fc43 	bl	800ec5e <lwip_htonl>
 80153d8:	4602      	mov	r2, r0
 80153da:	693b      	ldr	r3, [r7, #16]
 80153dc:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80153de:	897b      	ldrh	r3, [r7, #10]
 80153e0:	089b      	lsrs	r3, r3, #2
 80153e2:	b29b      	uxth	r3, r3
 80153e4:	3305      	adds	r3, #5
 80153e6:	b29b      	uxth	r3, r3
 80153e8:	031b      	lsls	r3, r3, #12
 80153ea:	b29a      	uxth	r2, r3
 80153ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80153f0:	b29b      	uxth	r3, r3
 80153f2:	4313      	orrs	r3, r2
 80153f4:	b29b      	uxth	r3, r3
 80153f6:	4618      	mov	r0, r3
 80153f8:	f7f9 fc1c 	bl	800ec34 <lwip_htons>
 80153fc:	4603      	mov	r3, r0
 80153fe:	461a      	mov	r2, r3
 8015400:	693b      	ldr	r3, [r7, #16]
 8015402:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015404:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015406:	4618      	mov	r0, r3
 8015408:	f7f9 fc14 	bl	800ec34 <lwip_htons>
 801540c:	4603      	mov	r3, r0
 801540e:	461a      	mov	r2, r3
 8015410:	693b      	ldr	r3, [r7, #16]
 8015412:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015414:	693b      	ldr	r3, [r7, #16]
 8015416:	2200      	movs	r2, #0
 8015418:	741a      	strb	r2, [r3, #16]
 801541a:	2200      	movs	r2, #0
 801541c:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801541e:	693b      	ldr	r3, [r7, #16]
 8015420:	2200      	movs	r2, #0
 8015422:	749a      	strb	r2, [r3, #18]
 8015424:	2200      	movs	r2, #0
 8015426:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015428:	697b      	ldr	r3, [r7, #20]
}
 801542a:	4618      	mov	r0, r3
 801542c:	3718      	adds	r7, #24
 801542e:	46bd      	mov	sp, r7
 8015430:	bd80      	pop	{r7, pc}
 8015432:	bf00      	nop
 8015434:	08021df8 	.word	0x08021df8
 8015438:	080224d0 	.word	0x080224d0
 801543c:	08021e4c 	.word	0x08021e4c

08015440 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015440:	b5b0      	push	{r4, r5, r7, lr}
 8015442:	b08a      	sub	sp, #40	; 0x28
 8015444:	af04      	add	r7, sp, #16
 8015446:	60f8      	str	r0, [r7, #12]
 8015448:	607b      	str	r3, [r7, #4]
 801544a:	460b      	mov	r3, r1
 801544c:	817b      	strh	r3, [r7, #10]
 801544e:	4613      	mov	r3, r2
 8015450:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	2b00      	cmp	r3, #0
 8015456:	d106      	bne.n	8015466 <tcp_output_alloc_header+0x26>
 8015458:	4b15      	ldr	r3, [pc, #84]	; (80154b0 <tcp_output_alloc_header+0x70>)
 801545a:	f240 7242 	movw	r2, #1858	; 0x742
 801545e:	4915      	ldr	r1, [pc, #84]	; (80154b4 <tcp_output_alloc_header+0x74>)
 8015460:	4815      	ldr	r0, [pc, #84]	; (80154b8 <tcp_output_alloc_header+0x78>)
 8015462:	f005 ff07 	bl	801b274 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	8adb      	ldrh	r3, [r3, #22]
 801546e:	68fa      	ldr	r2, [r7, #12]
 8015470:	8b12      	ldrh	r2, [r2, #24]
 8015472:	68f9      	ldr	r1, [r7, #12]
 8015474:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8015476:	893d      	ldrh	r5, [r7, #8]
 8015478:	897c      	ldrh	r4, [r7, #10]
 801547a:	9103      	str	r1, [sp, #12]
 801547c:	2110      	movs	r1, #16
 801547e:	9102      	str	r1, [sp, #8]
 8015480:	9201      	str	r2, [sp, #4]
 8015482:	9300      	str	r3, [sp, #0]
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	462a      	mov	r2, r5
 8015488:	4621      	mov	r1, r4
 801548a:	f7ff ff65 	bl	8015358 <tcp_output_alloc_header_common>
 801548e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015490:	697b      	ldr	r3, [r7, #20]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d006      	beq.n	80154a4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801549a:	68fa      	ldr	r2, [r7, #12]
 801549c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801549e:	441a      	add	r2, r3
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80154a4:	697b      	ldr	r3, [r7, #20]
}
 80154a6:	4618      	mov	r0, r3
 80154a8:	3718      	adds	r7, #24
 80154aa:	46bd      	mov	sp, r7
 80154ac:	bdb0      	pop	{r4, r5, r7, pc}
 80154ae:	bf00      	nop
 80154b0:	08021df8 	.word	0x08021df8
 80154b4:	08022500 	.word	0x08022500
 80154b8:	08021e4c 	.word	0x08021e4c

080154bc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	b088      	sub	sp, #32
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	60f8      	str	r0, [r7, #12]
 80154c4:	60b9      	str	r1, [r7, #8]
 80154c6:	4611      	mov	r1, r2
 80154c8:	461a      	mov	r2, r3
 80154ca:	460b      	mov	r3, r1
 80154cc:	71fb      	strb	r3, [r7, #7]
 80154ce:	4613      	mov	r3, r2
 80154d0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80154d2:	2300      	movs	r3, #0
 80154d4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80154d6:	68bb      	ldr	r3, [r7, #8]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d106      	bne.n	80154ea <tcp_output_fill_options+0x2e>
 80154dc:	4b13      	ldr	r3, [pc, #76]	; (801552c <tcp_output_fill_options+0x70>)
 80154de:	f240 7256 	movw	r2, #1878	; 0x756
 80154e2:	4913      	ldr	r1, [pc, #76]	; (8015530 <tcp_output_fill_options+0x74>)
 80154e4:	4813      	ldr	r0, [pc, #76]	; (8015534 <tcp_output_fill_options+0x78>)
 80154e6:	f005 fec5 	bl	801b274 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80154ea:	68bb      	ldr	r3, [r7, #8]
 80154ec:	685b      	ldr	r3, [r3, #4]
 80154ee:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80154f0:	69bb      	ldr	r3, [r7, #24]
 80154f2:	3314      	adds	r3, #20
 80154f4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80154f6:	69bb      	ldr	r3, [r7, #24]
 80154f8:	f103 0214 	add.w	r2, r3, #20
 80154fc:	8bfb      	ldrh	r3, [r7, #30]
 80154fe:	009b      	lsls	r3, r3, #2
 8015500:	4619      	mov	r1, r3
 8015502:	79fb      	ldrb	r3, [r7, #7]
 8015504:	009b      	lsls	r3, r3, #2
 8015506:	f003 0304 	and.w	r3, r3, #4
 801550a:	440b      	add	r3, r1
 801550c:	4413      	add	r3, r2
 801550e:	697a      	ldr	r2, [r7, #20]
 8015510:	429a      	cmp	r2, r3
 8015512:	d006      	beq.n	8015522 <tcp_output_fill_options+0x66>
 8015514:	4b05      	ldr	r3, [pc, #20]	; (801552c <tcp_output_fill_options+0x70>)
 8015516:	f240 7275 	movw	r2, #1909	; 0x775
 801551a:	4907      	ldr	r1, [pc, #28]	; (8015538 <tcp_output_fill_options+0x7c>)
 801551c:	4805      	ldr	r0, [pc, #20]	; (8015534 <tcp_output_fill_options+0x78>)
 801551e:	f005 fea9 	bl	801b274 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015522:	bf00      	nop
 8015524:	3720      	adds	r7, #32
 8015526:	46bd      	mov	sp, r7
 8015528:	bd80      	pop	{r7, pc}
 801552a:	bf00      	nop
 801552c:	08021df8 	.word	0x08021df8
 8015530:	08022528 	.word	0x08022528
 8015534:	08021e4c 	.word	0x08021e4c
 8015538:	08022420 	.word	0x08022420

0801553c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801553c:	b580      	push	{r7, lr}
 801553e:	b08a      	sub	sp, #40	; 0x28
 8015540:	af04      	add	r7, sp, #16
 8015542:	60f8      	str	r0, [r7, #12]
 8015544:	60b9      	str	r1, [r7, #8]
 8015546:	607a      	str	r2, [r7, #4]
 8015548:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801554a:	68bb      	ldr	r3, [r7, #8]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d106      	bne.n	801555e <tcp_output_control_segment+0x22>
 8015550:	4b1c      	ldr	r3, [pc, #112]	; (80155c4 <tcp_output_control_segment+0x88>)
 8015552:	f240 7287 	movw	r2, #1927	; 0x787
 8015556:	491c      	ldr	r1, [pc, #112]	; (80155c8 <tcp_output_control_segment+0x8c>)
 8015558:	481c      	ldr	r0, [pc, #112]	; (80155cc <tcp_output_control_segment+0x90>)
 801555a:	f005 fe8b 	bl	801b274 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801555e:	683a      	ldr	r2, [r7, #0]
 8015560:	6879      	ldr	r1, [r7, #4]
 8015562:	68f8      	ldr	r0, [r7, #12]
 8015564:	f7fe ff30 	bl	80143c8 <tcp_route>
 8015568:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801556a:	693b      	ldr	r3, [r7, #16]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d102      	bne.n	8015576 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015570:	23fc      	movs	r3, #252	; 0xfc
 8015572:	75fb      	strb	r3, [r7, #23]
 8015574:	e01c      	b.n	80155b0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d006      	beq.n	801558a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	7adb      	ldrb	r3, [r3, #11]
 8015580:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	7a9b      	ldrb	r3, [r3, #10]
 8015586:	757b      	strb	r3, [r7, #21]
 8015588:	e003      	b.n	8015592 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801558a:	23ff      	movs	r3, #255	; 0xff
 801558c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801558e:	2300      	movs	r3, #0
 8015590:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015592:	7dba      	ldrb	r2, [r7, #22]
 8015594:	693b      	ldr	r3, [r7, #16]
 8015596:	9302      	str	r3, [sp, #8]
 8015598:	2306      	movs	r3, #6
 801559a:	9301      	str	r3, [sp, #4]
 801559c:	7d7b      	ldrb	r3, [r7, #21]
 801559e:	9300      	str	r3, [sp, #0]
 80155a0:	4613      	mov	r3, r2
 80155a2:	683a      	ldr	r2, [r7, #0]
 80155a4:	6879      	ldr	r1, [r7, #4]
 80155a6:	68b8      	ldr	r0, [r7, #8]
 80155a8:	f004 f8a0 	bl	80196ec <ip4_output_if>
 80155ac:	4603      	mov	r3, r0
 80155ae:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80155b0:	68b8      	ldr	r0, [r7, #8]
 80155b2:	f7fa fdd7 	bl	8010164 <pbuf_free>
  return err;
 80155b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80155ba:	4618      	mov	r0, r3
 80155bc:	3718      	adds	r7, #24
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}
 80155c2:	bf00      	nop
 80155c4:	08021df8 	.word	0x08021df8
 80155c8:	08022550 	.word	0x08022550
 80155cc:	08021e4c 	.word	0x08021e4c

080155d0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80155d0:	b590      	push	{r4, r7, lr}
 80155d2:	b08b      	sub	sp, #44	; 0x2c
 80155d4:	af04      	add	r7, sp, #16
 80155d6:	60f8      	str	r0, [r7, #12]
 80155d8:	60b9      	str	r1, [r7, #8]
 80155da:	607a      	str	r2, [r7, #4]
 80155dc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80155de:	683b      	ldr	r3, [r7, #0]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d106      	bne.n	80155f2 <tcp_rst+0x22>
 80155e4:	4b1e      	ldr	r3, [pc, #120]	; (8015660 <tcp_rst+0x90>)
 80155e6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80155ea:	491e      	ldr	r1, [pc, #120]	; (8015664 <tcp_rst+0x94>)
 80155ec:	481e      	ldr	r0, [pc, #120]	; (8015668 <tcp_rst+0x98>)
 80155ee:	f005 fe41 	bl	801b274 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80155f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d106      	bne.n	8015606 <tcp_rst+0x36>
 80155f8:	4b19      	ldr	r3, [pc, #100]	; (8015660 <tcp_rst+0x90>)
 80155fa:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80155fe:	491b      	ldr	r1, [pc, #108]	; (801566c <tcp_rst+0x9c>)
 8015600:	4819      	ldr	r0, [pc, #100]	; (8015668 <tcp_rst+0x98>)
 8015602:	f005 fe37 	bl	801b274 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015606:	2300      	movs	r3, #0
 8015608:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801560a:	2308      	movs	r3, #8
 801560c:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801560e:	7dfb      	ldrb	r3, [r7, #23]
 8015610:	b29c      	uxth	r4, r3
 8015612:	68b8      	ldr	r0, [r7, #8]
 8015614:	f7f9 fb23 	bl	800ec5e <lwip_htonl>
 8015618:	4602      	mov	r2, r0
 801561a:	8abb      	ldrh	r3, [r7, #20]
 801561c:	9303      	str	r3, [sp, #12]
 801561e:	2314      	movs	r3, #20
 8015620:	9302      	str	r3, [sp, #8]
 8015622:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015624:	9301      	str	r3, [sp, #4]
 8015626:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015628:	9300      	str	r3, [sp, #0]
 801562a:	4613      	mov	r3, r2
 801562c:	2200      	movs	r2, #0
 801562e:	4621      	mov	r1, r4
 8015630:	6878      	ldr	r0, [r7, #4]
 8015632:	f7ff fe91 	bl	8015358 <tcp_output_alloc_header_common>
 8015636:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015638:	693b      	ldr	r3, [r7, #16]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d00c      	beq.n	8015658 <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801563e:	7dfb      	ldrb	r3, [r7, #23]
 8015640:	2200      	movs	r2, #0
 8015642:	6939      	ldr	r1, [r7, #16]
 8015644:	68f8      	ldr	r0, [r7, #12]
 8015646:	f7ff ff39 	bl	80154bc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801564c:	683a      	ldr	r2, [r7, #0]
 801564e:	6939      	ldr	r1, [r7, #16]
 8015650:	68f8      	ldr	r0, [r7, #12]
 8015652:	f7ff ff73 	bl	801553c <tcp_output_control_segment>
 8015656:	e000      	b.n	801565a <tcp_rst+0x8a>
    return;
 8015658:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801565a:	371c      	adds	r7, #28
 801565c:	46bd      	mov	sp, r7
 801565e:	bd90      	pop	{r4, r7, pc}
 8015660:	08021df8 	.word	0x08021df8
 8015664:	0802257c 	.word	0x0802257c
 8015668:	08021e4c 	.word	0x08021e4c
 801566c:	08022598 	.word	0x08022598

08015670 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015670:	b590      	push	{r4, r7, lr}
 8015672:	b087      	sub	sp, #28
 8015674:	af00      	add	r7, sp, #0
 8015676:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015678:	2300      	movs	r3, #0
 801567a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801567c:	2300      	movs	r3, #0
 801567e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d106      	bne.n	8015694 <tcp_send_empty_ack+0x24>
 8015686:	4b28      	ldr	r3, [pc, #160]	; (8015728 <tcp_send_empty_ack+0xb8>)
 8015688:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801568c:	4927      	ldr	r1, [pc, #156]	; (801572c <tcp_send_empty_ack+0xbc>)
 801568e:	4828      	ldr	r0, [pc, #160]	; (8015730 <tcp_send_empty_ack+0xc0>)
 8015690:	f005 fdf0 	bl	801b274 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015694:	7dfb      	ldrb	r3, [r7, #23]
 8015696:	009b      	lsls	r3, r3, #2
 8015698:	b2db      	uxtb	r3, r3
 801569a:	f003 0304 	and.w	r3, r3, #4
 801569e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80156a0:	7d7b      	ldrb	r3, [r7, #21]
 80156a2:	b29c      	uxth	r4, r3
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80156a8:	4618      	mov	r0, r3
 80156aa:	f7f9 fad8 	bl	800ec5e <lwip_htonl>
 80156ae:	4603      	mov	r3, r0
 80156b0:	2200      	movs	r2, #0
 80156b2:	4621      	mov	r1, r4
 80156b4:	6878      	ldr	r0, [r7, #4]
 80156b6:	f7ff fec3 	bl	8015440 <tcp_output_alloc_header>
 80156ba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80156bc:	693b      	ldr	r3, [r7, #16]
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d109      	bne.n	80156d6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	8b5b      	ldrh	r3, [r3, #26]
 80156c6:	f043 0303 	orr.w	r3, r3, #3
 80156ca:	b29a      	uxth	r2, r3
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80156d0:	f06f 0301 	mvn.w	r3, #1
 80156d4:	e023      	b.n	801571e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80156d6:	7dbb      	ldrb	r3, [r7, #22]
 80156d8:	7dfa      	ldrb	r2, [r7, #23]
 80156da:	6939      	ldr	r1, [r7, #16]
 80156dc:	6878      	ldr	r0, [r7, #4]
 80156de:	f7ff feed 	bl	80154bc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80156e2:	687a      	ldr	r2, [r7, #4]
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	3304      	adds	r3, #4
 80156e8:	6939      	ldr	r1, [r7, #16]
 80156ea:	6878      	ldr	r0, [r7, #4]
 80156ec:	f7ff ff26 	bl	801553c <tcp_output_control_segment>
 80156f0:	4603      	mov	r3, r0
 80156f2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80156f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d007      	beq.n	801570c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	8b5b      	ldrh	r3, [r3, #26]
 8015700:	f043 0303 	orr.w	r3, r3, #3
 8015704:	b29a      	uxth	r2, r3
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	835a      	strh	r2, [r3, #26]
 801570a:	e006      	b.n	801571a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	8b5b      	ldrh	r3, [r3, #26]
 8015710:	f023 0303 	bic.w	r3, r3, #3
 8015714:	b29a      	uxth	r2, r3
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801571a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801571e:	4618      	mov	r0, r3
 8015720:	371c      	adds	r7, #28
 8015722:	46bd      	mov	sp, r7
 8015724:	bd90      	pop	{r4, r7, pc}
 8015726:	bf00      	nop
 8015728:	08021df8 	.word	0x08021df8
 801572c:	080225b4 	.word	0x080225b4
 8015730:	08021e4c 	.word	0x08021e4c

08015734 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015734:	b590      	push	{r4, r7, lr}
 8015736:	b087      	sub	sp, #28
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801573c:	2300      	movs	r3, #0
 801573e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d106      	bne.n	8015754 <tcp_keepalive+0x20>
 8015746:	4b18      	ldr	r3, [pc, #96]	; (80157a8 <tcp_keepalive+0x74>)
 8015748:	f640 0224 	movw	r2, #2084	; 0x824
 801574c:	4917      	ldr	r1, [pc, #92]	; (80157ac <tcp_keepalive+0x78>)
 801574e:	4818      	ldr	r0, [pc, #96]	; (80157b0 <tcp_keepalive+0x7c>)
 8015750:	f005 fd90 	bl	801b274 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015754:	7dfb      	ldrb	r3, [r7, #23]
 8015756:	b29c      	uxth	r4, r3
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801575c:	3b01      	subs	r3, #1
 801575e:	4618      	mov	r0, r3
 8015760:	f7f9 fa7d 	bl	800ec5e <lwip_htonl>
 8015764:	4603      	mov	r3, r0
 8015766:	2200      	movs	r2, #0
 8015768:	4621      	mov	r1, r4
 801576a:	6878      	ldr	r0, [r7, #4]
 801576c:	f7ff fe68 	bl	8015440 <tcp_output_alloc_header>
 8015770:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015772:	693b      	ldr	r3, [r7, #16]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d102      	bne.n	801577e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015778:	f04f 33ff 	mov.w	r3, #4294967295
 801577c:	e010      	b.n	80157a0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801577e:	7dfb      	ldrb	r3, [r7, #23]
 8015780:	2200      	movs	r2, #0
 8015782:	6939      	ldr	r1, [r7, #16]
 8015784:	6878      	ldr	r0, [r7, #4]
 8015786:	f7ff fe99 	bl	80154bc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801578a:	687a      	ldr	r2, [r7, #4]
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	3304      	adds	r3, #4
 8015790:	6939      	ldr	r1, [r7, #16]
 8015792:	6878      	ldr	r0, [r7, #4]
 8015794:	f7ff fed2 	bl	801553c <tcp_output_control_segment>
 8015798:	4603      	mov	r3, r0
 801579a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801579c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80157a0:	4618      	mov	r0, r3
 80157a2:	371c      	adds	r7, #28
 80157a4:	46bd      	mov	sp, r7
 80157a6:	bd90      	pop	{r4, r7, pc}
 80157a8:	08021df8 	.word	0x08021df8
 80157ac:	080225d4 	.word	0x080225d4
 80157b0:	08021e4c 	.word	0x08021e4c

080157b4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80157b4:	b590      	push	{r4, r7, lr}
 80157b6:	b08b      	sub	sp, #44	; 0x2c
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80157bc:	2300      	movs	r3, #0
 80157be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d106      	bne.n	80157d6 <tcp_zero_window_probe+0x22>
 80157c8:	4b4c      	ldr	r3, [pc, #304]	; (80158fc <tcp_zero_window_probe+0x148>)
 80157ca:	f640 024f 	movw	r2, #2127	; 0x84f
 80157ce:	494c      	ldr	r1, [pc, #304]	; (8015900 <tcp_zero_window_probe+0x14c>)
 80157d0:	484c      	ldr	r0, [pc, #304]	; (8015904 <tcp_zero_window_probe+0x150>)
 80157d2:	f005 fd4f 	bl	801b274 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157da:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80157dc:	6a3b      	ldr	r3, [r7, #32]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d101      	bne.n	80157e6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80157e2:	2300      	movs	r3, #0
 80157e4:	e086      	b.n	80158f4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80157ec:	2bff      	cmp	r3, #255	; 0xff
 80157ee:	d007      	beq.n	8015800 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80157f6:	3301      	adds	r3, #1
 80157f8:	b2da      	uxtb	r2, r3
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015800:	6a3b      	ldr	r3, [r7, #32]
 8015802:	68db      	ldr	r3, [r3, #12]
 8015804:	899b      	ldrh	r3, [r3, #12]
 8015806:	b29b      	uxth	r3, r3
 8015808:	4618      	mov	r0, r3
 801580a:	f7f9 fa13 	bl	800ec34 <lwip_htons>
 801580e:	4603      	mov	r3, r0
 8015810:	b2db      	uxtb	r3, r3
 8015812:	f003 0301 	and.w	r3, r3, #1
 8015816:	2b00      	cmp	r3, #0
 8015818:	d005      	beq.n	8015826 <tcp_zero_window_probe+0x72>
 801581a:	6a3b      	ldr	r3, [r7, #32]
 801581c:	891b      	ldrh	r3, [r3, #8]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d101      	bne.n	8015826 <tcp_zero_window_probe+0x72>
 8015822:	2301      	movs	r3, #1
 8015824:	e000      	b.n	8015828 <tcp_zero_window_probe+0x74>
 8015826:	2300      	movs	r3, #0
 8015828:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801582a:	7ffb      	ldrb	r3, [r7, #31]
 801582c:	2b00      	cmp	r3, #0
 801582e:	bf0c      	ite	eq
 8015830:	2301      	moveq	r3, #1
 8015832:	2300      	movne	r3, #0
 8015834:	b2db      	uxtb	r3, r3
 8015836:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801583c:	b299      	uxth	r1, r3
 801583e:	6a3b      	ldr	r3, [r7, #32]
 8015840:	68db      	ldr	r3, [r3, #12]
 8015842:	685b      	ldr	r3, [r3, #4]
 8015844:	8bba      	ldrh	r2, [r7, #28]
 8015846:	6878      	ldr	r0, [r7, #4]
 8015848:	f7ff fdfa 	bl	8015440 <tcp_output_alloc_header>
 801584c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801584e:	69bb      	ldr	r3, [r7, #24]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d102      	bne.n	801585a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015854:	f04f 33ff 	mov.w	r3, #4294967295
 8015858:	e04c      	b.n	80158f4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801585a:	69bb      	ldr	r3, [r7, #24]
 801585c:	685b      	ldr	r3, [r3, #4]
 801585e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015860:	7ffb      	ldrb	r3, [r7, #31]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d011      	beq.n	801588a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015866:	697b      	ldr	r3, [r7, #20]
 8015868:	899b      	ldrh	r3, [r3, #12]
 801586a:	b29b      	uxth	r3, r3
 801586c:	b21b      	sxth	r3, r3
 801586e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015872:	b21c      	sxth	r4, r3
 8015874:	2011      	movs	r0, #17
 8015876:	f7f9 f9dd 	bl	800ec34 <lwip_htons>
 801587a:	4603      	mov	r3, r0
 801587c:	b21b      	sxth	r3, r3
 801587e:	4323      	orrs	r3, r4
 8015880:	b21b      	sxth	r3, r3
 8015882:	b29a      	uxth	r2, r3
 8015884:	697b      	ldr	r3, [r7, #20]
 8015886:	819a      	strh	r2, [r3, #12]
 8015888:	e010      	b.n	80158ac <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801588a:	69bb      	ldr	r3, [r7, #24]
 801588c:	685b      	ldr	r3, [r3, #4]
 801588e:	3314      	adds	r3, #20
 8015890:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015892:	6a3b      	ldr	r3, [r7, #32]
 8015894:	6858      	ldr	r0, [r3, #4]
 8015896:	6a3b      	ldr	r3, [r7, #32]
 8015898:	685b      	ldr	r3, [r3, #4]
 801589a:	891a      	ldrh	r2, [r3, #8]
 801589c:	6a3b      	ldr	r3, [r7, #32]
 801589e:	891b      	ldrh	r3, [r3, #8]
 80158a0:	1ad3      	subs	r3, r2, r3
 80158a2:	b29b      	uxth	r3, r3
 80158a4:	2201      	movs	r2, #1
 80158a6:	6939      	ldr	r1, [r7, #16]
 80158a8:	f7fa fe56 	bl	8010558 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80158ac:	6a3b      	ldr	r3, [r7, #32]
 80158ae:	68db      	ldr	r3, [r3, #12]
 80158b0:	685b      	ldr	r3, [r3, #4]
 80158b2:	4618      	mov	r0, r3
 80158b4:	f7f9 f9d3 	bl	800ec5e <lwip_htonl>
 80158b8:	4603      	mov	r3, r0
 80158ba:	3301      	adds	r3, #1
 80158bc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	1ad3      	subs	r3, r2, r3
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	da02      	bge.n	80158d0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	68fa      	ldr	r2, [r7, #12]
 80158ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80158d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80158d4:	2200      	movs	r2, #0
 80158d6:	69b9      	ldr	r1, [r7, #24]
 80158d8:	6878      	ldr	r0, [r7, #4]
 80158da:	f7ff fdef 	bl	80154bc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80158de:	687a      	ldr	r2, [r7, #4]
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	3304      	adds	r3, #4
 80158e4:	69b9      	ldr	r1, [r7, #24]
 80158e6:	6878      	ldr	r0, [r7, #4]
 80158e8:	f7ff fe28 	bl	801553c <tcp_output_control_segment>
 80158ec:	4603      	mov	r3, r0
 80158ee:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80158f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80158f4:	4618      	mov	r0, r3
 80158f6:	372c      	adds	r7, #44	; 0x2c
 80158f8:	46bd      	mov	sp, r7
 80158fa:	bd90      	pop	{r4, r7, pc}
 80158fc:	08021df8 	.word	0x08021df8
 8015900:	080225f0 	.word	0x080225f0
 8015904:	08021e4c 	.word	0x08021e4c

08015908 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b082      	sub	sp, #8
 801590c:	af00      	add	r7, sp, #0
 801590e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015910:	f7fa ff10 	bl	8010734 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015914:	4b0a      	ldr	r3, [pc, #40]	; (8015940 <tcpip_tcp_timer+0x38>)
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d103      	bne.n	8015924 <tcpip_tcp_timer+0x1c>
 801591c:	4b09      	ldr	r3, [pc, #36]	; (8015944 <tcpip_tcp_timer+0x3c>)
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d005      	beq.n	8015930 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015924:	2200      	movs	r2, #0
 8015926:	4908      	ldr	r1, [pc, #32]	; (8015948 <tcpip_tcp_timer+0x40>)
 8015928:	20fa      	movs	r0, #250	; 0xfa
 801592a:	f000 f8f1 	bl	8015b10 <sys_timeout>
 801592e:	e002      	b.n	8015936 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015930:	4b06      	ldr	r3, [pc, #24]	; (801594c <tcpip_tcp_timer+0x44>)
 8015932:	2200      	movs	r2, #0
 8015934:	601a      	str	r2, [r3, #0]
  }
}
 8015936:	bf00      	nop
 8015938:	3708      	adds	r7, #8
 801593a:	46bd      	mov	sp, r7
 801593c:	bd80      	pop	{r7, pc}
 801593e:	bf00      	nop
 8015940:	20007628 	.word	0x20007628
 8015944:	20007638 	.word	0x20007638
 8015948:	08015909 	.word	0x08015909
 801594c:	20000514 	.word	0x20000514

08015950 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015950:	b580      	push	{r7, lr}
 8015952:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015954:	4b0a      	ldr	r3, [pc, #40]	; (8015980 <tcp_timer_needed+0x30>)
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	2b00      	cmp	r3, #0
 801595a:	d10f      	bne.n	801597c <tcp_timer_needed+0x2c>
 801595c:	4b09      	ldr	r3, [pc, #36]	; (8015984 <tcp_timer_needed+0x34>)
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d103      	bne.n	801596c <tcp_timer_needed+0x1c>
 8015964:	4b08      	ldr	r3, [pc, #32]	; (8015988 <tcp_timer_needed+0x38>)
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d007      	beq.n	801597c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801596c:	4b04      	ldr	r3, [pc, #16]	; (8015980 <tcp_timer_needed+0x30>)
 801596e:	2201      	movs	r2, #1
 8015970:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015972:	2200      	movs	r2, #0
 8015974:	4905      	ldr	r1, [pc, #20]	; (801598c <tcp_timer_needed+0x3c>)
 8015976:	20fa      	movs	r0, #250	; 0xfa
 8015978:	f000 f8ca 	bl	8015b10 <sys_timeout>
  }
}
 801597c:	bf00      	nop
 801597e:	bd80      	pop	{r7, pc}
 8015980:	20000514 	.word	0x20000514
 8015984:	20007628 	.word	0x20007628
 8015988:	20007638 	.word	0x20007638
 801598c:	08015909 	.word	0x08015909

08015990 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015990:	b580      	push	{r7, lr}
 8015992:	b086      	sub	sp, #24
 8015994:	af00      	add	r7, sp, #0
 8015996:	60f8      	str	r0, [r7, #12]
 8015998:	60b9      	str	r1, [r7, #8]
 801599a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801599c:	2006      	movs	r0, #6
 801599e:	f7f9 fd9f 	bl	800f4e0 <memp_malloc>
 80159a2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80159a4:	693b      	ldr	r3, [r7, #16]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d109      	bne.n	80159be <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80159aa:	693b      	ldr	r3, [r7, #16]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d151      	bne.n	8015a54 <sys_timeout_abs+0xc4>
 80159b0:	4b2a      	ldr	r3, [pc, #168]	; (8015a5c <sys_timeout_abs+0xcc>)
 80159b2:	22be      	movs	r2, #190	; 0xbe
 80159b4:	492a      	ldr	r1, [pc, #168]	; (8015a60 <sys_timeout_abs+0xd0>)
 80159b6:	482b      	ldr	r0, [pc, #172]	; (8015a64 <sys_timeout_abs+0xd4>)
 80159b8:	f005 fc5c 	bl	801b274 <iprintf>
    return;
 80159bc:	e04a      	b.n	8015a54 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80159be:	693b      	ldr	r3, [r7, #16]
 80159c0:	2200      	movs	r2, #0
 80159c2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80159c4:	693b      	ldr	r3, [r7, #16]
 80159c6:	68ba      	ldr	r2, [r7, #8]
 80159c8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80159ca:	693b      	ldr	r3, [r7, #16]
 80159cc:	687a      	ldr	r2, [r7, #4]
 80159ce:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80159d0:	693b      	ldr	r3, [r7, #16]
 80159d2:	68fa      	ldr	r2, [r7, #12]
 80159d4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80159d6:	4b24      	ldr	r3, [pc, #144]	; (8015a68 <sys_timeout_abs+0xd8>)
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d103      	bne.n	80159e6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80159de:	4a22      	ldr	r2, [pc, #136]	; (8015a68 <sys_timeout_abs+0xd8>)
 80159e0:	693b      	ldr	r3, [r7, #16]
 80159e2:	6013      	str	r3, [r2, #0]
    return;
 80159e4:	e037      	b.n	8015a56 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80159e6:	693b      	ldr	r3, [r7, #16]
 80159e8:	685a      	ldr	r2, [r3, #4]
 80159ea:	4b1f      	ldr	r3, [pc, #124]	; (8015a68 <sys_timeout_abs+0xd8>)
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	685b      	ldr	r3, [r3, #4]
 80159f0:	1ad3      	subs	r3, r2, r3
 80159f2:	0fdb      	lsrs	r3, r3, #31
 80159f4:	f003 0301 	and.w	r3, r3, #1
 80159f8:	b2db      	uxtb	r3, r3
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d007      	beq.n	8015a0e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80159fe:	4b1a      	ldr	r3, [pc, #104]	; (8015a68 <sys_timeout_abs+0xd8>)
 8015a00:	681a      	ldr	r2, [r3, #0]
 8015a02:	693b      	ldr	r3, [r7, #16]
 8015a04:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015a06:	4a18      	ldr	r2, [pc, #96]	; (8015a68 <sys_timeout_abs+0xd8>)
 8015a08:	693b      	ldr	r3, [r7, #16]
 8015a0a:	6013      	str	r3, [r2, #0]
 8015a0c:	e023      	b.n	8015a56 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015a0e:	4b16      	ldr	r3, [pc, #88]	; (8015a68 <sys_timeout_abs+0xd8>)
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	617b      	str	r3, [r7, #20]
 8015a14:	e01a      	b.n	8015a4c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8015a16:	697b      	ldr	r3, [r7, #20]
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d00b      	beq.n	8015a36 <sys_timeout_abs+0xa6>
 8015a1e:	693b      	ldr	r3, [r7, #16]
 8015a20:	685a      	ldr	r2, [r3, #4]
 8015a22:	697b      	ldr	r3, [r7, #20]
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	685b      	ldr	r3, [r3, #4]
 8015a28:	1ad3      	subs	r3, r2, r3
 8015a2a:	0fdb      	lsrs	r3, r3, #31
 8015a2c:	f003 0301 	and.w	r3, r3, #1
 8015a30:	b2db      	uxtb	r3, r3
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d007      	beq.n	8015a46 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8015a36:	697b      	ldr	r3, [r7, #20]
 8015a38:	681a      	ldr	r2, [r3, #0]
 8015a3a:	693b      	ldr	r3, [r7, #16]
 8015a3c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015a3e:	697b      	ldr	r3, [r7, #20]
 8015a40:	693a      	ldr	r2, [r7, #16]
 8015a42:	601a      	str	r2, [r3, #0]
        break;
 8015a44:	e007      	b.n	8015a56 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015a46:	697b      	ldr	r3, [r7, #20]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	617b      	str	r3, [r7, #20]
 8015a4c:	697b      	ldr	r3, [r7, #20]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d1e1      	bne.n	8015a16 <sys_timeout_abs+0x86>
 8015a52:	e000      	b.n	8015a56 <sys_timeout_abs+0xc6>
    return;
 8015a54:	bf00      	nop
      }
    }
  }
}
 8015a56:	3718      	adds	r7, #24
 8015a58:	46bd      	mov	sp, r7
 8015a5a:	bd80      	pop	{r7, pc}
 8015a5c:	08022614 	.word	0x08022614
 8015a60:	08022648 	.word	0x08022648
 8015a64:	08022688 	.word	0x08022688
 8015a68:	2000050c 	.word	0x2000050c

08015a6c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b086      	sub	sp, #24
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015a78:	697b      	ldr	r3, [r7, #20]
 8015a7a:	685b      	ldr	r3, [r3, #4]
 8015a7c:	4798      	blx	r3

  now = sys_now();
 8015a7e:	f7f9 f84b 	bl	800eb18 <sys_now>
 8015a82:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015a84:	697b      	ldr	r3, [r7, #20]
 8015a86:	681a      	ldr	r2, [r3, #0]
 8015a88:	4b0f      	ldr	r3, [pc, #60]	; (8015ac8 <lwip_cyclic_timer+0x5c>)
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	4413      	add	r3, r2
 8015a8e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015a90:	68fa      	ldr	r2, [r7, #12]
 8015a92:	693b      	ldr	r3, [r7, #16]
 8015a94:	1ad3      	subs	r3, r2, r3
 8015a96:	0fdb      	lsrs	r3, r3, #31
 8015a98:	f003 0301 	and.w	r3, r3, #1
 8015a9c:	b2db      	uxtb	r3, r3
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d009      	beq.n	8015ab6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015aa2:	697b      	ldr	r3, [r7, #20]
 8015aa4:	681a      	ldr	r2, [r3, #0]
 8015aa6:	693b      	ldr	r3, [r7, #16]
 8015aa8:	4413      	add	r3, r2
 8015aaa:	687a      	ldr	r2, [r7, #4]
 8015aac:	4907      	ldr	r1, [pc, #28]	; (8015acc <lwip_cyclic_timer+0x60>)
 8015aae:	4618      	mov	r0, r3
 8015ab0:	f7ff ff6e 	bl	8015990 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015ab4:	e004      	b.n	8015ac0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8015ab6:	687a      	ldr	r2, [r7, #4]
 8015ab8:	4904      	ldr	r1, [pc, #16]	; (8015acc <lwip_cyclic_timer+0x60>)
 8015aba:	68f8      	ldr	r0, [r7, #12]
 8015abc:	f7ff ff68 	bl	8015990 <sys_timeout_abs>
}
 8015ac0:	bf00      	nop
 8015ac2:	3718      	adds	r7, #24
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	bd80      	pop	{r7, pc}
 8015ac8:	20000510 	.word	0x20000510
 8015acc:	08015a6d 	.word	0x08015a6d

08015ad0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	b082      	sub	sp, #8
 8015ad4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015ad6:	2301      	movs	r3, #1
 8015ad8:	607b      	str	r3, [r7, #4]
 8015ada:	e00e      	b.n	8015afa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015adc:	4a0a      	ldr	r2, [pc, #40]	; (8015b08 <sys_timeouts_init+0x38>)
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	00db      	lsls	r3, r3, #3
 8015ae8:	4a07      	ldr	r2, [pc, #28]	; (8015b08 <sys_timeouts_init+0x38>)
 8015aea:	4413      	add	r3, r2
 8015aec:	461a      	mov	r2, r3
 8015aee:	4907      	ldr	r1, [pc, #28]	; (8015b0c <sys_timeouts_init+0x3c>)
 8015af0:	f000 f80e 	bl	8015b10 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	3301      	adds	r3, #1
 8015af8:	607b      	str	r3, [r7, #4]
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	2b04      	cmp	r3, #4
 8015afe:	d9ed      	bls.n	8015adc <sys_timeouts_init+0xc>
  }
}
 8015b00:	bf00      	nop
 8015b02:	3708      	adds	r7, #8
 8015b04:	46bd      	mov	sp, r7
 8015b06:	bd80      	pop	{r7, pc}
 8015b08:	08023af4 	.word	0x08023af4
 8015b0c:	08015a6d 	.word	0x08015a6d

08015b10 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b086      	sub	sp, #24
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	60f8      	str	r0, [r7, #12]
 8015b18:	60b9      	str	r1, [r7, #8]
 8015b1a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015b22:	d306      	bcc.n	8015b32 <sys_timeout+0x22>
 8015b24:	4b0a      	ldr	r3, [pc, #40]	; (8015b50 <sys_timeout+0x40>)
 8015b26:	f240 1229 	movw	r2, #297	; 0x129
 8015b2a:	490a      	ldr	r1, [pc, #40]	; (8015b54 <sys_timeout+0x44>)
 8015b2c:	480a      	ldr	r0, [pc, #40]	; (8015b58 <sys_timeout+0x48>)
 8015b2e:	f005 fba1 	bl	801b274 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8015b32:	f7f8 fff1 	bl	800eb18 <sys_now>
 8015b36:	4602      	mov	r2, r0
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	4413      	add	r3, r2
 8015b3c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8015b3e:	687a      	ldr	r2, [r7, #4]
 8015b40:	68b9      	ldr	r1, [r7, #8]
 8015b42:	6978      	ldr	r0, [r7, #20]
 8015b44:	f7ff ff24 	bl	8015990 <sys_timeout_abs>
#endif
}
 8015b48:	bf00      	nop
 8015b4a:	3718      	adds	r7, #24
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	bd80      	pop	{r7, pc}
 8015b50:	08022614 	.word	0x08022614
 8015b54:	080226b0 	.word	0x080226b0
 8015b58:	08022688 	.word	0x08022688

08015b5c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015b60:	f005 fba0 	bl	801b2a4 <rand>
 8015b64:	4603      	mov	r3, r0
 8015b66:	b29b      	uxth	r3, r3
 8015b68:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015b6c:	b29b      	uxth	r3, r3
 8015b6e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015b72:	b29a      	uxth	r2, r3
 8015b74:	4b01      	ldr	r3, [pc, #4]	; (8015b7c <udp_init+0x20>)
 8015b76:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015b78:	bf00      	nop
 8015b7a:	bd80      	pop	{r7, pc}
 8015b7c:	2000007c 	.word	0x2000007c

08015b80 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015b80:	b480      	push	{r7}
 8015b82:	b083      	sub	sp, #12
 8015b84:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015b86:	2300      	movs	r3, #0
 8015b88:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8015b8a:	4b17      	ldr	r3, [pc, #92]	; (8015be8 <udp_new_port+0x68>)
 8015b8c:	881b      	ldrh	r3, [r3, #0]
 8015b8e:	1c5a      	adds	r2, r3, #1
 8015b90:	b291      	uxth	r1, r2
 8015b92:	4a15      	ldr	r2, [pc, #84]	; (8015be8 <udp_new_port+0x68>)
 8015b94:	8011      	strh	r1, [r2, #0]
 8015b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015b9a:	4293      	cmp	r3, r2
 8015b9c:	d103      	bne.n	8015ba6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8015b9e:	4b12      	ldr	r3, [pc, #72]	; (8015be8 <udp_new_port+0x68>)
 8015ba0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015ba4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015ba6:	4b11      	ldr	r3, [pc, #68]	; (8015bec <udp_new_port+0x6c>)
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	603b      	str	r3, [r7, #0]
 8015bac:	e011      	b.n	8015bd2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8015bae:	683b      	ldr	r3, [r7, #0]
 8015bb0:	8a5a      	ldrh	r2, [r3, #18]
 8015bb2:	4b0d      	ldr	r3, [pc, #52]	; (8015be8 <udp_new_port+0x68>)
 8015bb4:	881b      	ldrh	r3, [r3, #0]
 8015bb6:	429a      	cmp	r2, r3
 8015bb8:	d108      	bne.n	8015bcc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8015bba:	88fb      	ldrh	r3, [r7, #6]
 8015bbc:	3301      	adds	r3, #1
 8015bbe:	80fb      	strh	r3, [r7, #6]
 8015bc0:	88fb      	ldrh	r3, [r7, #6]
 8015bc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015bc6:	d3e0      	bcc.n	8015b8a <udp_new_port+0xa>
        return 0;
 8015bc8:	2300      	movs	r3, #0
 8015bca:	e007      	b.n	8015bdc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015bcc:	683b      	ldr	r3, [r7, #0]
 8015bce:	68db      	ldr	r3, [r3, #12]
 8015bd0:	603b      	str	r3, [r7, #0]
 8015bd2:	683b      	ldr	r3, [r7, #0]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d1ea      	bne.n	8015bae <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015bd8:	4b03      	ldr	r3, [pc, #12]	; (8015be8 <udp_new_port+0x68>)
 8015bda:	881b      	ldrh	r3, [r3, #0]
}
 8015bdc:	4618      	mov	r0, r3
 8015bde:	370c      	adds	r7, #12
 8015be0:	46bd      	mov	sp, r7
 8015be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be6:	4770      	bx	lr
 8015be8:	2000007c 	.word	0x2000007c
 8015bec:	20007640 	.word	0x20007640

08015bf0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b084      	sub	sp, #16
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	60f8      	str	r0, [r7, #12]
 8015bf8:	60b9      	str	r1, [r7, #8]
 8015bfa:	4613      	mov	r3, r2
 8015bfc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d105      	bne.n	8015c10 <udp_input_local_match+0x20>
 8015c04:	4b27      	ldr	r3, [pc, #156]	; (8015ca4 <udp_input_local_match+0xb4>)
 8015c06:	2287      	movs	r2, #135	; 0x87
 8015c08:	4927      	ldr	r1, [pc, #156]	; (8015ca8 <udp_input_local_match+0xb8>)
 8015c0a:	4828      	ldr	r0, [pc, #160]	; (8015cac <udp_input_local_match+0xbc>)
 8015c0c:	f005 fb32 	bl	801b274 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015c10:	68bb      	ldr	r3, [r7, #8]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d105      	bne.n	8015c22 <udp_input_local_match+0x32>
 8015c16:	4b23      	ldr	r3, [pc, #140]	; (8015ca4 <udp_input_local_match+0xb4>)
 8015c18:	2288      	movs	r2, #136	; 0x88
 8015c1a:	4925      	ldr	r1, [pc, #148]	; (8015cb0 <udp_input_local_match+0xc0>)
 8015c1c:	4823      	ldr	r0, [pc, #140]	; (8015cac <udp_input_local_match+0xbc>)
 8015c1e:	f005 fb29 	bl	801b274 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	7a1b      	ldrb	r3, [r3, #8]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d00b      	beq.n	8015c42 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	7a1a      	ldrb	r2, [r3, #8]
 8015c2e:	4b21      	ldr	r3, [pc, #132]	; (8015cb4 <udp_input_local_match+0xc4>)
 8015c30:	685b      	ldr	r3, [r3, #4]
 8015c32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015c36:	3301      	adds	r3, #1
 8015c38:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015c3a:	429a      	cmp	r2, r3
 8015c3c:	d001      	beq.n	8015c42 <udp_input_local_match+0x52>
    return 0;
 8015c3e:	2300      	movs	r3, #0
 8015c40:	e02b      	b.n	8015c9a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015c42:	79fb      	ldrb	r3, [r7, #7]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d018      	beq.n	8015c7a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d013      	beq.n	8015c76 <udp_input_local_match+0x86>
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d00f      	beq.n	8015c76 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015c56:	4b17      	ldr	r3, [pc, #92]	; (8015cb4 <udp_input_local_match+0xc4>)
 8015c58:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c5e:	d00a      	beq.n	8015c76 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	681a      	ldr	r2, [r3, #0]
 8015c64:	4b13      	ldr	r3, [pc, #76]	; (8015cb4 <udp_input_local_match+0xc4>)
 8015c66:	695b      	ldr	r3, [r3, #20]
 8015c68:	405a      	eors	r2, r3
 8015c6a:	68bb      	ldr	r3, [r7, #8]
 8015c6c:	3308      	adds	r3, #8
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d110      	bne.n	8015c98 <udp_input_local_match+0xa8>
          return 1;
 8015c76:	2301      	movs	r3, #1
 8015c78:	e00f      	b.n	8015c9a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d009      	beq.n	8015c94 <udp_input_local_match+0xa4>
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d005      	beq.n	8015c94 <udp_input_local_match+0xa4>
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	681a      	ldr	r2, [r3, #0]
 8015c8c:	4b09      	ldr	r3, [pc, #36]	; (8015cb4 <udp_input_local_match+0xc4>)
 8015c8e:	695b      	ldr	r3, [r3, #20]
 8015c90:	429a      	cmp	r2, r3
 8015c92:	d101      	bne.n	8015c98 <udp_input_local_match+0xa8>
        return 1;
 8015c94:	2301      	movs	r3, #1
 8015c96:	e000      	b.n	8015c9a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015c98:	2300      	movs	r3, #0
}
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	3710      	adds	r7, #16
 8015c9e:	46bd      	mov	sp, r7
 8015ca0:	bd80      	pop	{r7, pc}
 8015ca2:	bf00      	nop
 8015ca4:	080226fc 	.word	0x080226fc
 8015ca8:	0802272c 	.word	0x0802272c
 8015cac:	08022750 	.word	0x08022750
 8015cb0:	08022778 	.word	0x08022778
 8015cb4:	20004504 	.word	0x20004504

08015cb8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015cb8:	b590      	push	{r4, r7, lr}
 8015cba:	b08d      	sub	sp, #52	; 0x34
 8015cbc:	af02      	add	r7, sp, #8
 8015cbe:	6078      	str	r0, [r7, #4]
 8015cc0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d105      	bne.n	8015cd8 <udp_input+0x20>
 8015ccc:	4b7c      	ldr	r3, [pc, #496]	; (8015ec0 <udp_input+0x208>)
 8015cce:	22cf      	movs	r2, #207	; 0xcf
 8015cd0:	497c      	ldr	r1, [pc, #496]	; (8015ec4 <udp_input+0x20c>)
 8015cd2:	487d      	ldr	r0, [pc, #500]	; (8015ec8 <udp_input+0x210>)
 8015cd4:	f005 face 	bl	801b274 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015cd8:	683b      	ldr	r3, [r7, #0]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d105      	bne.n	8015cea <udp_input+0x32>
 8015cde:	4b78      	ldr	r3, [pc, #480]	; (8015ec0 <udp_input+0x208>)
 8015ce0:	22d0      	movs	r2, #208	; 0xd0
 8015ce2:	497a      	ldr	r1, [pc, #488]	; (8015ecc <udp_input+0x214>)
 8015ce4:	4878      	ldr	r0, [pc, #480]	; (8015ec8 <udp_input+0x210>)
 8015ce6:	f005 fac5 	bl	801b274 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	895b      	ldrh	r3, [r3, #10]
 8015cee:	2b07      	cmp	r3, #7
 8015cf0:	d803      	bhi.n	8015cfa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015cf2:	6878      	ldr	r0, [r7, #4]
 8015cf4:	f7fa fa36 	bl	8010164 <pbuf_free>
    goto end;
 8015cf8:	e0de      	b.n	8015eb8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	685b      	ldr	r3, [r3, #4]
 8015cfe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015d00:	4b73      	ldr	r3, [pc, #460]	; (8015ed0 <udp_input+0x218>)
 8015d02:	695a      	ldr	r2, [r3, #20]
 8015d04:	4b72      	ldr	r3, [pc, #456]	; (8015ed0 <udp_input+0x218>)
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	4619      	mov	r1, r3
 8015d0a:	4610      	mov	r0, r2
 8015d0c:	f003 fdc6 	bl	801989c <ip4_addr_isbroadcast_u32>
 8015d10:	4603      	mov	r3, r0
 8015d12:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015d14:	697b      	ldr	r3, [r7, #20]
 8015d16:	881b      	ldrh	r3, [r3, #0]
 8015d18:	b29b      	uxth	r3, r3
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	f7f8 ff8a 	bl	800ec34 <lwip_htons>
 8015d20:	4603      	mov	r3, r0
 8015d22:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015d24:	697b      	ldr	r3, [r7, #20]
 8015d26:	885b      	ldrh	r3, [r3, #2]
 8015d28:	b29b      	uxth	r3, r3
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	f7f8 ff82 	bl	800ec34 <lwip_htons>
 8015d30:	4603      	mov	r3, r0
 8015d32:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015d34:	2300      	movs	r3, #0
 8015d36:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015d38:	2300      	movs	r3, #0
 8015d3a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015d40:	4b64      	ldr	r3, [pc, #400]	; (8015ed4 <udp_input+0x21c>)
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	627b      	str	r3, [r7, #36]	; 0x24
 8015d46:	e054      	b.n	8015df2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d4a:	8a5b      	ldrh	r3, [r3, #18]
 8015d4c:	89fa      	ldrh	r2, [r7, #14]
 8015d4e:	429a      	cmp	r2, r3
 8015d50:	d14a      	bne.n	8015de8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015d52:	7cfb      	ldrb	r3, [r7, #19]
 8015d54:	461a      	mov	r2, r3
 8015d56:	6839      	ldr	r1, [r7, #0]
 8015d58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d5a:	f7ff ff49 	bl	8015bf0 <udp_input_local_match>
 8015d5e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d041      	beq.n	8015de8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d66:	7c1b      	ldrb	r3, [r3, #16]
 8015d68:	f003 0304 	and.w	r3, r3, #4
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d11d      	bne.n	8015dac <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015d70:	69fb      	ldr	r3, [r7, #28]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d102      	bne.n	8015d7c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d78:	61fb      	str	r3, [r7, #28]
 8015d7a:	e017      	b.n	8015dac <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015d7c:	7cfb      	ldrb	r3, [r7, #19]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d014      	beq.n	8015dac <udp_input+0xf4>
 8015d82:	4b53      	ldr	r3, [pc, #332]	; (8015ed0 <udp_input+0x218>)
 8015d84:	695b      	ldr	r3, [r3, #20]
 8015d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d8a:	d10f      	bne.n	8015dac <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015d8c:	69fb      	ldr	r3, [r7, #28]
 8015d8e:	681a      	ldr	r2, [r3, #0]
 8015d90:	683b      	ldr	r3, [r7, #0]
 8015d92:	3304      	adds	r3, #4
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	429a      	cmp	r2, r3
 8015d98:	d008      	beq.n	8015dac <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d9c:	681a      	ldr	r2, [r3, #0]
 8015d9e:	683b      	ldr	r3, [r7, #0]
 8015da0:	3304      	adds	r3, #4
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	429a      	cmp	r2, r3
 8015da6:	d101      	bne.n	8015dac <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015daa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dae:	8a9b      	ldrh	r3, [r3, #20]
 8015db0:	8a3a      	ldrh	r2, [r7, #16]
 8015db2:	429a      	cmp	r2, r3
 8015db4:	d118      	bne.n	8015de8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015db8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d005      	beq.n	8015dca <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dc0:	685a      	ldr	r2, [r3, #4]
 8015dc2:	4b43      	ldr	r3, [pc, #268]	; (8015ed0 <udp_input+0x218>)
 8015dc4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015dc6:	429a      	cmp	r2, r3
 8015dc8:	d10e      	bne.n	8015de8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015dca:	6a3b      	ldr	r3, [r7, #32]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d014      	beq.n	8015dfa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dd2:	68da      	ldr	r2, [r3, #12]
 8015dd4:	6a3b      	ldr	r3, [r7, #32]
 8015dd6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015dd8:	4b3e      	ldr	r3, [pc, #248]	; (8015ed4 <udp_input+0x21c>)
 8015dda:	681a      	ldr	r2, [r3, #0]
 8015ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dde:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015de0:	4a3c      	ldr	r2, [pc, #240]	; (8015ed4 <udp_input+0x21c>)
 8015de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015de6:	e008      	b.n	8015dfa <udp_input+0x142>
      }
    }

    prev = pcb;
 8015de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dea:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dee:	68db      	ldr	r3, [r3, #12]
 8015df0:	627b      	str	r3, [r7, #36]	; 0x24
 8015df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d1a7      	bne.n	8015d48 <udp_input+0x90>
 8015df8:	e000      	b.n	8015dfc <udp_input+0x144>
        break;
 8015dfa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d101      	bne.n	8015e06 <udp_input+0x14e>
    pcb = uncon_pcb;
 8015e02:	69fb      	ldr	r3, [r7, #28]
 8015e04:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d002      	beq.n	8015e12 <udp_input+0x15a>
    for_us = 1;
 8015e0c:	2301      	movs	r3, #1
 8015e0e:	76fb      	strb	r3, [r7, #27]
 8015e10:	e00a      	b.n	8015e28 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015e12:	683b      	ldr	r3, [r7, #0]
 8015e14:	3304      	adds	r3, #4
 8015e16:	681a      	ldr	r2, [r3, #0]
 8015e18:	4b2d      	ldr	r3, [pc, #180]	; (8015ed0 <udp_input+0x218>)
 8015e1a:	695b      	ldr	r3, [r3, #20]
 8015e1c:	429a      	cmp	r2, r3
 8015e1e:	bf0c      	ite	eq
 8015e20:	2301      	moveq	r3, #1
 8015e22:	2300      	movne	r3, #0
 8015e24:	b2db      	uxtb	r3, r3
 8015e26:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015e28:	7efb      	ldrb	r3, [r7, #27]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d041      	beq.n	8015eb2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8015e2e:	2108      	movs	r1, #8
 8015e30:	6878      	ldr	r0, [r7, #4]
 8015e32:	f7fa f911 	bl	8010058 <pbuf_remove_header>
 8015e36:	4603      	mov	r3, r0
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d00a      	beq.n	8015e52 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015e3c:	4b20      	ldr	r3, [pc, #128]	; (8015ec0 <udp_input+0x208>)
 8015e3e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8015e42:	4925      	ldr	r1, [pc, #148]	; (8015ed8 <udp_input+0x220>)
 8015e44:	4820      	ldr	r0, [pc, #128]	; (8015ec8 <udp_input+0x210>)
 8015e46:	f005 fa15 	bl	801b274 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015e4a:	6878      	ldr	r0, [r7, #4]
 8015e4c:	f7fa f98a 	bl	8010164 <pbuf_free>
      goto end;
 8015e50:	e032      	b.n	8015eb8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d012      	beq.n	8015e7e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e5a:	699b      	ldr	r3, [r3, #24]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d00a      	beq.n	8015e76 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e62:	699c      	ldr	r4, [r3, #24]
 8015e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e66:	69d8      	ldr	r0, [r3, #28]
 8015e68:	8a3b      	ldrh	r3, [r7, #16]
 8015e6a:	9300      	str	r3, [sp, #0]
 8015e6c:	4b1b      	ldr	r3, [pc, #108]	; (8015edc <udp_input+0x224>)
 8015e6e:	687a      	ldr	r2, [r7, #4]
 8015e70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015e72:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015e74:	e021      	b.n	8015eba <udp_input+0x202>
        pbuf_free(p);
 8015e76:	6878      	ldr	r0, [r7, #4]
 8015e78:	f7fa f974 	bl	8010164 <pbuf_free>
        goto end;
 8015e7c:	e01c      	b.n	8015eb8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015e7e:	7cfb      	ldrb	r3, [r7, #19]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d112      	bne.n	8015eaa <udp_input+0x1f2>
 8015e84:	4b12      	ldr	r3, [pc, #72]	; (8015ed0 <udp_input+0x218>)
 8015e86:	695b      	ldr	r3, [r3, #20]
 8015e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015e8c:	2be0      	cmp	r3, #224	; 0xe0
 8015e8e:	d00c      	beq.n	8015eaa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015e90:	4b0f      	ldr	r3, [pc, #60]	; (8015ed0 <udp_input+0x218>)
 8015e92:	899b      	ldrh	r3, [r3, #12]
 8015e94:	3308      	adds	r3, #8
 8015e96:	b29b      	uxth	r3, r3
 8015e98:	b21b      	sxth	r3, r3
 8015e9a:	4619      	mov	r1, r3
 8015e9c:	6878      	ldr	r0, [r7, #4]
 8015e9e:	f7fa f94e 	bl	801013e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015ea2:	2103      	movs	r1, #3
 8015ea4:	6878      	ldr	r0, [r7, #4]
 8015ea6:	f003 f9bd 	bl	8019224 <icmp_dest_unreach>
      pbuf_free(p);
 8015eaa:	6878      	ldr	r0, [r7, #4]
 8015eac:	f7fa f95a 	bl	8010164 <pbuf_free>
  return;
 8015eb0:	e003      	b.n	8015eba <udp_input+0x202>
    pbuf_free(p);
 8015eb2:	6878      	ldr	r0, [r7, #4]
 8015eb4:	f7fa f956 	bl	8010164 <pbuf_free>
  return;
 8015eb8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015eba:	372c      	adds	r7, #44	; 0x2c
 8015ebc:	46bd      	mov	sp, r7
 8015ebe:	bd90      	pop	{r4, r7, pc}
 8015ec0:	080226fc 	.word	0x080226fc
 8015ec4:	080227a0 	.word	0x080227a0
 8015ec8:	08022750 	.word	0x08022750
 8015ecc:	080227b8 	.word	0x080227b8
 8015ed0:	20004504 	.word	0x20004504
 8015ed4:	20007640 	.word	0x20007640
 8015ed8:	080227d4 	.word	0x080227d4
 8015edc:	20004514 	.word	0x20004514

08015ee0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b088      	sub	sp, #32
 8015ee4:	af02      	add	r7, sp, #8
 8015ee6:	60f8      	str	r0, [r7, #12]
 8015ee8:	60b9      	str	r1, [r7, #8]
 8015eea:	607a      	str	r2, [r7, #4]
 8015eec:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d109      	bne.n	8015f08 <udp_sendto_if+0x28>
 8015ef4:	4b2e      	ldr	r3, [pc, #184]	; (8015fb0 <udp_sendto_if+0xd0>)
 8015ef6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015efa:	492e      	ldr	r1, [pc, #184]	; (8015fb4 <udp_sendto_if+0xd4>)
 8015efc:	482e      	ldr	r0, [pc, #184]	; (8015fb8 <udp_sendto_if+0xd8>)
 8015efe:	f005 f9b9 	bl	801b274 <iprintf>
 8015f02:	f06f 030f 	mvn.w	r3, #15
 8015f06:	e04f      	b.n	8015fa8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015f08:	68bb      	ldr	r3, [r7, #8]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d109      	bne.n	8015f22 <udp_sendto_if+0x42>
 8015f0e:	4b28      	ldr	r3, [pc, #160]	; (8015fb0 <udp_sendto_if+0xd0>)
 8015f10:	f240 2281 	movw	r2, #641	; 0x281
 8015f14:	4929      	ldr	r1, [pc, #164]	; (8015fbc <udp_sendto_if+0xdc>)
 8015f16:	4828      	ldr	r0, [pc, #160]	; (8015fb8 <udp_sendto_if+0xd8>)
 8015f18:	f005 f9ac 	bl	801b274 <iprintf>
 8015f1c:	f06f 030f 	mvn.w	r3, #15
 8015f20:	e042      	b.n	8015fa8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d109      	bne.n	8015f3c <udp_sendto_if+0x5c>
 8015f28:	4b21      	ldr	r3, [pc, #132]	; (8015fb0 <udp_sendto_if+0xd0>)
 8015f2a:	f240 2282 	movw	r2, #642	; 0x282
 8015f2e:	4924      	ldr	r1, [pc, #144]	; (8015fc0 <udp_sendto_if+0xe0>)
 8015f30:	4821      	ldr	r0, [pc, #132]	; (8015fb8 <udp_sendto_if+0xd8>)
 8015f32:	f005 f99f 	bl	801b274 <iprintf>
 8015f36:	f06f 030f 	mvn.w	r3, #15
 8015f3a:	e035      	b.n	8015fa8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8015f3c:	6a3b      	ldr	r3, [r7, #32]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d109      	bne.n	8015f56 <udp_sendto_if+0x76>
 8015f42:	4b1b      	ldr	r3, [pc, #108]	; (8015fb0 <udp_sendto_if+0xd0>)
 8015f44:	f240 2283 	movw	r2, #643	; 0x283
 8015f48:	491e      	ldr	r1, [pc, #120]	; (8015fc4 <udp_sendto_if+0xe4>)
 8015f4a:	481b      	ldr	r0, [pc, #108]	; (8015fb8 <udp_sendto_if+0xd8>)
 8015f4c:	f005 f992 	bl	801b274 <iprintf>
 8015f50:	f06f 030f 	mvn.w	r3, #15
 8015f54:	e028      	b.n	8015fa8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d009      	beq.n	8015f70 <udp_sendto_if+0x90>
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d005      	beq.n	8015f70 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015f6c:	2be0      	cmp	r3, #224	; 0xe0
 8015f6e:	d103      	bne.n	8015f78 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8015f70:	6a3b      	ldr	r3, [r7, #32]
 8015f72:	3304      	adds	r3, #4
 8015f74:	617b      	str	r3, [r7, #20]
 8015f76:	e00b      	b.n	8015f90 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	681a      	ldr	r2, [r3, #0]
 8015f7c:	6a3b      	ldr	r3, [r7, #32]
 8015f7e:	3304      	adds	r3, #4
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	429a      	cmp	r2, r3
 8015f84:	d002      	beq.n	8015f8c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8015f86:	f06f 0303 	mvn.w	r3, #3
 8015f8a:	e00d      	b.n	8015fa8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8015f90:	887a      	ldrh	r2, [r7, #2]
 8015f92:	697b      	ldr	r3, [r7, #20]
 8015f94:	9301      	str	r3, [sp, #4]
 8015f96:	6a3b      	ldr	r3, [r7, #32]
 8015f98:	9300      	str	r3, [sp, #0]
 8015f9a:	4613      	mov	r3, r2
 8015f9c:	687a      	ldr	r2, [r7, #4]
 8015f9e:	68b9      	ldr	r1, [r7, #8]
 8015fa0:	68f8      	ldr	r0, [r7, #12]
 8015fa2:	f000 f811 	bl	8015fc8 <udp_sendto_if_src>
 8015fa6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015fa8:	4618      	mov	r0, r3
 8015faa:	3718      	adds	r7, #24
 8015fac:	46bd      	mov	sp, r7
 8015fae:	bd80      	pop	{r7, pc}
 8015fb0:	080226fc 	.word	0x080226fc
 8015fb4:	08022870 	.word	0x08022870
 8015fb8:	08022750 	.word	0x08022750
 8015fbc:	0802288c 	.word	0x0802288c
 8015fc0:	080228a8 	.word	0x080228a8
 8015fc4:	080228c8 	.word	0x080228c8

08015fc8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b08c      	sub	sp, #48	; 0x30
 8015fcc:	af04      	add	r7, sp, #16
 8015fce:	60f8      	str	r0, [r7, #12]
 8015fd0:	60b9      	str	r1, [r7, #8]
 8015fd2:	607a      	str	r2, [r7, #4]
 8015fd4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d109      	bne.n	8015ff0 <udp_sendto_if_src+0x28>
 8015fdc:	4b65      	ldr	r3, [pc, #404]	; (8016174 <udp_sendto_if_src+0x1ac>)
 8015fde:	f240 22d1 	movw	r2, #721	; 0x2d1
 8015fe2:	4965      	ldr	r1, [pc, #404]	; (8016178 <udp_sendto_if_src+0x1b0>)
 8015fe4:	4865      	ldr	r0, [pc, #404]	; (801617c <udp_sendto_if_src+0x1b4>)
 8015fe6:	f005 f945 	bl	801b274 <iprintf>
 8015fea:	f06f 030f 	mvn.w	r3, #15
 8015fee:	e0bc      	b.n	801616a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8015ff0:	68bb      	ldr	r3, [r7, #8]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d109      	bne.n	801600a <udp_sendto_if_src+0x42>
 8015ff6:	4b5f      	ldr	r3, [pc, #380]	; (8016174 <udp_sendto_if_src+0x1ac>)
 8015ff8:	f240 22d2 	movw	r2, #722	; 0x2d2
 8015ffc:	4960      	ldr	r1, [pc, #384]	; (8016180 <udp_sendto_if_src+0x1b8>)
 8015ffe:	485f      	ldr	r0, [pc, #380]	; (801617c <udp_sendto_if_src+0x1b4>)
 8016000:	f005 f938 	bl	801b274 <iprintf>
 8016004:	f06f 030f 	mvn.w	r3, #15
 8016008:	e0af      	b.n	801616a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d109      	bne.n	8016024 <udp_sendto_if_src+0x5c>
 8016010:	4b58      	ldr	r3, [pc, #352]	; (8016174 <udp_sendto_if_src+0x1ac>)
 8016012:	f240 22d3 	movw	r2, #723	; 0x2d3
 8016016:	495b      	ldr	r1, [pc, #364]	; (8016184 <udp_sendto_if_src+0x1bc>)
 8016018:	4858      	ldr	r0, [pc, #352]	; (801617c <udp_sendto_if_src+0x1b4>)
 801601a:	f005 f92b 	bl	801b274 <iprintf>
 801601e:	f06f 030f 	mvn.w	r3, #15
 8016022:	e0a2      	b.n	801616a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8016024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016026:	2b00      	cmp	r3, #0
 8016028:	d109      	bne.n	801603e <udp_sendto_if_src+0x76>
 801602a:	4b52      	ldr	r3, [pc, #328]	; (8016174 <udp_sendto_if_src+0x1ac>)
 801602c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8016030:	4955      	ldr	r1, [pc, #340]	; (8016188 <udp_sendto_if_src+0x1c0>)
 8016032:	4852      	ldr	r0, [pc, #328]	; (801617c <udp_sendto_if_src+0x1b4>)
 8016034:	f005 f91e 	bl	801b274 <iprintf>
 8016038:	f06f 030f 	mvn.w	r3, #15
 801603c:	e095      	b.n	801616a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801603e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016040:	2b00      	cmp	r3, #0
 8016042:	d109      	bne.n	8016058 <udp_sendto_if_src+0x90>
 8016044:	4b4b      	ldr	r3, [pc, #300]	; (8016174 <udp_sendto_if_src+0x1ac>)
 8016046:	f240 22d5 	movw	r2, #725	; 0x2d5
 801604a:	4950      	ldr	r1, [pc, #320]	; (801618c <udp_sendto_if_src+0x1c4>)
 801604c:	484b      	ldr	r0, [pc, #300]	; (801617c <udp_sendto_if_src+0x1b4>)
 801604e:	f005 f911 	bl	801b274 <iprintf>
 8016052:	f06f 030f 	mvn.w	r3, #15
 8016056:	e088      	b.n	801616a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	8a5b      	ldrh	r3, [r3, #18]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d10f      	bne.n	8016080 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016060:	68f9      	ldr	r1, [r7, #12]
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	8a5b      	ldrh	r3, [r3, #18]
 8016066:	461a      	mov	r2, r3
 8016068:	68f8      	ldr	r0, [r7, #12]
 801606a:	f000 f893 	bl	8016194 <udp_bind>
 801606e:	4603      	mov	r3, r0
 8016070:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8016072:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d002      	beq.n	8016080 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801607a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801607e:	e074      	b.n	801616a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8016080:	68bb      	ldr	r3, [r7, #8]
 8016082:	891b      	ldrh	r3, [r3, #8]
 8016084:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8016088:	4293      	cmp	r3, r2
 801608a:	d902      	bls.n	8016092 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801608c:	f04f 33ff 	mov.w	r3, #4294967295
 8016090:	e06b      	b.n	801616a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8016092:	2108      	movs	r1, #8
 8016094:	68b8      	ldr	r0, [r7, #8]
 8016096:	f7f9 ffcf 	bl	8010038 <pbuf_add_header>
 801609a:	4603      	mov	r3, r0
 801609c:	2b00      	cmp	r3, #0
 801609e:	d015      	beq.n	80160cc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80160a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80160a4:	2108      	movs	r1, #8
 80160a6:	2022      	movs	r0, #34	; 0x22
 80160a8:	f7f9 fd7c 	bl	800fba4 <pbuf_alloc>
 80160ac:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80160ae:	69fb      	ldr	r3, [r7, #28]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d102      	bne.n	80160ba <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80160b4:	f04f 33ff 	mov.w	r3, #4294967295
 80160b8:	e057      	b.n	801616a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80160ba:	68bb      	ldr	r3, [r7, #8]
 80160bc:	891b      	ldrh	r3, [r3, #8]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d006      	beq.n	80160d0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80160c2:	68b9      	ldr	r1, [r7, #8]
 80160c4:	69f8      	ldr	r0, [r7, #28]
 80160c6:	f7fa f965 	bl	8010394 <pbuf_chain>
 80160ca:	e001      	b.n	80160d0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80160cc:	68bb      	ldr	r3, [r7, #8]
 80160ce:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80160d0:	69fb      	ldr	r3, [r7, #28]
 80160d2:	895b      	ldrh	r3, [r3, #10]
 80160d4:	2b07      	cmp	r3, #7
 80160d6:	d806      	bhi.n	80160e6 <udp_sendto_if_src+0x11e>
 80160d8:	4b26      	ldr	r3, [pc, #152]	; (8016174 <udp_sendto_if_src+0x1ac>)
 80160da:	f240 320e 	movw	r2, #782	; 0x30e
 80160de:	492c      	ldr	r1, [pc, #176]	; (8016190 <udp_sendto_if_src+0x1c8>)
 80160e0:	4826      	ldr	r0, [pc, #152]	; (801617c <udp_sendto_if_src+0x1b4>)
 80160e2:	f005 f8c7 	bl	801b274 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80160e6:	69fb      	ldr	r3, [r7, #28]
 80160e8:	685b      	ldr	r3, [r3, #4]
 80160ea:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	8a5b      	ldrh	r3, [r3, #18]
 80160f0:	4618      	mov	r0, r3
 80160f2:	f7f8 fd9f 	bl	800ec34 <lwip_htons>
 80160f6:	4603      	mov	r3, r0
 80160f8:	461a      	mov	r2, r3
 80160fa:	697b      	ldr	r3, [r7, #20]
 80160fc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80160fe:	887b      	ldrh	r3, [r7, #2]
 8016100:	4618      	mov	r0, r3
 8016102:	f7f8 fd97 	bl	800ec34 <lwip_htons>
 8016106:	4603      	mov	r3, r0
 8016108:	461a      	mov	r2, r3
 801610a:	697b      	ldr	r3, [r7, #20]
 801610c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801610e:	697b      	ldr	r3, [r7, #20]
 8016110:	2200      	movs	r2, #0
 8016112:	719a      	strb	r2, [r3, #6]
 8016114:	2200      	movs	r2, #0
 8016116:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016118:	69fb      	ldr	r3, [r7, #28]
 801611a:	891b      	ldrh	r3, [r3, #8]
 801611c:	4618      	mov	r0, r3
 801611e:	f7f8 fd89 	bl	800ec34 <lwip_htons>
 8016122:	4603      	mov	r3, r0
 8016124:	461a      	mov	r2, r3
 8016126:	697b      	ldr	r3, [r7, #20]
 8016128:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801612a:	2311      	movs	r3, #17
 801612c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	7adb      	ldrb	r3, [r3, #11]
 8016132:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	7a9b      	ldrb	r3, [r3, #10]
 8016138:	7cb9      	ldrb	r1, [r7, #18]
 801613a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801613c:	9202      	str	r2, [sp, #8]
 801613e:	7cfa      	ldrb	r2, [r7, #19]
 8016140:	9201      	str	r2, [sp, #4]
 8016142:	9300      	str	r3, [sp, #0]
 8016144:	460b      	mov	r3, r1
 8016146:	687a      	ldr	r2, [r7, #4]
 8016148:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801614a:	69f8      	ldr	r0, [r7, #28]
 801614c:	f003 faf8 	bl	8019740 <ip4_output_if_src>
 8016150:	4603      	mov	r3, r0
 8016152:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8016154:	69fa      	ldr	r2, [r7, #28]
 8016156:	68bb      	ldr	r3, [r7, #8]
 8016158:	429a      	cmp	r2, r3
 801615a:	d004      	beq.n	8016166 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801615c:	69f8      	ldr	r0, [r7, #28]
 801615e:	f7fa f801 	bl	8010164 <pbuf_free>
    q = NULL;
 8016162:	2300      	movs	r3, #0
 8016164:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8016166:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801616a:	4618      	mov	r0, r3
 801616c:	3720      	adds	r7, #32
 801616e:	46bd      	mov	sp, r7
 8016170:	bd80      	pop	{r7, pc}
 8016172:	bf00      	nop
 8016174:	080226fc 	.word	0x080226fc
 8016178:	080228e8 	.word	0x080228e8
 801617c:	08022750 	.word	0x08022750
 8016180:	08022908 	.word	0x08022908
 8016184:	08022928 	.word	0x08022928
 8016188:	0802294c 	.word	0x0802294c
 801618c:	08022970 	.word	0x08022970
 8016190:	08022994 	.word	0x08022994

08016194 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b086      	sub	sp, #24
 8016198:	af00      	add	r7, sp, #0
 801619a:	60f8      	str	r0, [r7, #12]
 801619c:	60b9      	str	r1, [r7, #8]
 801619e:	4613      	mov	r3, r2
 80161a0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80161a2:	68bb      	ldr	r3, [r7, #8]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d101      	bne.n	80161ac <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80161a8:	4b39      	ldr	r3, [pc, #228]	; (8016290 <udp_bind+0xfc>)
 80161aa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d109      	bne.n	80161c6 <udp_bind+0x32>
 80161b2:	4b38      	ldr	r3, [pc, #224]	; (8016294 <udp_bind+0x100>)
 80161b4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80161b8:	4937      	ldr	r1, [pc, #220]	; (8016298 <udp_bind+0x104>)
 80161ba:	4838      	ldr	r0, [pc, #224]	; (801629c <udp_bind+0x108>)
 80161bc:	f005 f85a 	bl	801b274 <iprintf>
 80161c0:	f06f 030f 	mvn.w	r3, #15
 80161c4:	e060      	b.n	8016288 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80161c6:	2300      	movs	r3, #0
 80161c8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80161ca:	4b35      	ldr	r3, [pc, #212]	; (80162a0 <udp_bind+0x10c>)
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	617b      	str	r3, [r7, #20]
 80161d0:	e009      	b.n	80161e6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80161d2:	68fa      	ldr	r2, [r7, #12]
 80161d4:	697b      	ldr	r3, [r7, #20]
 80161d6:	429a      	cmp	r2, r3
 80161d8:	d102      	bne.n	80161e0 <udp_bind+0x4c>
      rebind = 1;
 80161da:	2301      	movs	r3, #1
 80161dc:	74fb      	strb	r3, [r7, #19]
      break;
 80161de:	e005      	b.n	80161ec <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80161e0:	697b      	ldr	r3, [r7, #20]
 80161e2:	68db      	ldr	r3, [r3, #12]
 80161e4:	617b      	str	r3, [r7, #20]
 80161e6:	697b      	ldr	r3, [r7, #20]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d1f2      	bne.n	80161d2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80161ec:	88fb      	ldrh	r3, [r7, #6]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d109      	bne.n	8016206 <udp_bind+0x72>
    port = udp_new_port();
 80161f2:	f7ff fcc5 	bl	8015b80 <udp_new_port>
 80161f6:	4603      	mov	r3, r0
 80161f8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80161fa:	88fb      	ldrh	r3, [r7, #6]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d12c      	bne.n	801625a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016200:	f06f 0307 	mvn.w	r3, #7
 8016204:	e040      	b.n	8016288 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016206:	4b26      	ldr	r3, [pc, #152]	; (80162a0 <udp_bind+0x10c>)
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	617b      	str	r3, [r7, #20]
 801620c:	e022      	b.n	8016254 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801620e:	68fa      	ldr	r2, [r7, #12]
 8016210:	697b      	ldr	r3, [r7, #20]
 8016212:	429a      	cmp	r2, r3
 8016214:	d01b      	beq.n	801624e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016216:	697b      	ldr	r3, [r7, #20]
 8016218:	8a5b      	ldrh	r3, [r3, #18]
 801621a:	88fa      	ldrh	r2, [r7, #6]
 801621c:	429a      	cmp	r2, r3
 801621e:	d116      	bne.n	801624e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016220:	697b      	ldr	r3, [r7, #20]
 8016222:	681a      	ldr	r2, [r3, #0]
 8016224:	68bb      	ldr	r3, [r7, #8]
 8016226:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016228:	429a      	cmp	r2, r3
 801622a:	d00d      	beq.n	8016248 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801622c:	68bb      	ldr	r3, [r7, #8]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d00a      	beq.n	8016248 <udp_bind+0xb4>
 8016232:	68bb      	ldr	r3, [r7, #8]
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d006      	beq.n	8016248 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801623a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801623c:	2b00      	cmp	r3, #0
 801623e:	d003      	beq.n	8016248 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016240:	697b      	ldr	r3, [r7, #20]
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d102      	bne.n	801624e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016248:	f06f 0307 	mvn.w	r3, #7
 801624c:	e01c      	b.n	8016288 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801624e:	697b      	ldr	r3, [r7, #20]
 8016250:	68db      	ldr	r3, [r3, #12]
 8016252:	617b      	str	r3, [r7, #20]
 8016254:	697b      	ldr	r3, [r7, #20]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d1d9      	bne.n	801620e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801625a:	68bb      	ldr	r3, [r7, #8]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d002      	beq.n	8016266 <udp_bind+0xd2>
 8016260:	68bb      	ldr	r3, [r7, #8]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	e000      	b.n	8016268 <udp_bind+0xd4>
 8016266:	2300      	movs	r3, #0
 8016268:	68fa      	ldr	r2, [r7, #12]
 801626a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	88fa      	ldrh	r2, [r7, #6]
 8016270:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8016272:	7cfb      	ldrb	r3, [r7, #19]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d106      	bne.n	8016286 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016278:	4b09      	ldr	r3, [pc, #36]	; (80162a0 <udp_bind+0x10c>)
 801627a:	681a      	ldr	r2, [r3, #0]
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8016280:	4a07      	ldr	r2, [pc, #28]	; (80162a0 <udp_bind+0x10c>)
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016286:	2300      	movs	r3, #0
}
 8016288:	4618      	mov	r0, r3
 801628a:	3718      	adds	r7, #24
 801628c:	46bd      	mov	sp, r7
 801628e:	bd80      	pop	{r7, pc}
 8016290:	08023b1c 	.word	0x08023b1c
 8016294:	080226fc 	.word	0x080226fc
 8016298:	080229c4 	.word	0x080229c4
 801629c:	08022750 	.word	0x08022750
 80162a0:	20007640 	.word	0x20007640

080162a4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80162a4:	b580      	push	{r7, lr}
 80162a6:	b086      	sub	sp, #24
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	60f8      	str	r0, [r7, #12]
 80162ac:	60b9      	str	r1, [r7, #8]
 80162ae:	4613      	mov	r3, r2
 80162b0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d109      	bne.n	80162cc <udp_connect+0x28>
 80162b8:	4b2c      	ldr	r3, [pc, #176]	; (801636c <udp_connect+0xc8>)
 80162ba:	f240 4235 	movw	r2, #1077	; 0x435
 80162be:	492c      	ldr	r1, [pc, #176]	; (8016370 <udp_connect+0xcc>)
 80162c0:	482c      	ldr	r0, [pc, #176]	; (8016374 <udp_connect+0xd0>)
 80162c2:	f004 ffd7 	bl	801b274 <iprintf>
 80162c6:	f06f 030f 	mvn.w	r3, #15
 80162ca:	e04b      	b.n	8016364 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80162cc:	68bb      	ldr	r3, [r7, #8]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d109      	bne.n	80162e6 <udp_connect+0x42>
 80162d2:	4b26      	ldr	r3, [pc, #152]	; (801636c <udp_connect+0xc8>)
 80162d4:	f240 4236 	movw	r2, #1078	; 0x436
 80162d8:	4927      	ldr	r1, [pc, #156]	; (8016378 <udp_connect+0xd4>)
 80162da:	4826      	ldr	r0, [pc, #152]	; (8016374 <udp_connect+0xd0>)
 80162dc:	f004 ffca 	bl	801b274 <iprintf>
 80162e0:	f06f 030f 	mvn.w	r3, #15
 80162e4:	e03e      	b.n	8016364 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	8a5b      	ldrh	r3, [r3, #18]
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d10f      	bne.n	801630e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80162ee:	68f9      	ldr	r1, [r7, #12]
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	8a5b      	ldrh	r3, [r3, #18]
 80162f4:	461a      	mov	r2, r3
 80162f6:	68f8      	ldr	r0, [r7, #12]
 80162f8:	f7ff ff4c 	bl	8016194 <udp_bind>
 80162fc:	4603      	mov	r3, r0
 80162fe:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8016300:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016304:	2b00      	cmp	r3, #0
 8016306:	d002      	beq.n	801630e <udp_connect+0x6a>
      return err;
 8016308:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801630c:	e02a      	b.n	8016364 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801630e:	68bb      	ldr	r3, [r7, #8]
 8016310:	2b00      	cmp	r3, #0
 8016312:	d002      	beq.n	801631a <udp_connect+0x76>
 8016314:	68bb      	ldr	r3, [r7, #8]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	e000      	b.n	801631c <udp_connect+0x78>
 801631a:	2300      	movs	r3, #0
 801631c:	68fa      	ldr	r2, [r7, #12]
 801631e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	88fa      	ldrh	r2, [r7, #6]
 8016324:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	7c1b      	ldrb	r3, [r3, #16]
 801632a:	f043 0304 	orr.w	r3, r3, #4
 801632e:	b2da      	uxtb	r2, r3
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016334:	4b11      	ldr	r3, [pc, #68]	; (801637c <udp_connect+0xd8>)
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	617b      	str	r3, [r7, #20]
 801633a:	e008      	b.n	801634e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801633c:	68fa      	ldr	r2, [r7, #12]
 801633e:	697b      	ldr	r3, [r7, #20]
 8016340:	429a      	cmp	r2, r3
 8016342:	d101      	bne.n	8016348 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8016344:	2300      	movs	r3, #0
 8016346:	e00d      	b.n	8016364 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016348:	697b      	ldr	r3, [r7, #20]
 801634a:	68db      	ldr	r3, [r3, #12]
 801634c:	617b      	str	r3, [r7, #20]
 801634e:	697b      	ldr	r3, [r7, #20]
 8016350:	2b00      	cmp	r3, #0
 8016352:	d1f3      	bne.n	801633c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8016354:	4b09      	ldr	r3, [pc, #36]	; (801637c <udp_connect+0xd8>)
 8016356:	681a      	ldr	r2, [r3, #0]
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801635c:	4a07      	ldr	r2, [pc, #28]	; (801637c <udp_connect+0xd8>)
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8016362:	2300      	movs	r3, #0
}
 8016364:	4618      	mov	r0, r3
 8016366:	3718      	adds	r7, #24
 8016368:	46bd      	mov	sp, r7
 801636a:	bd80      	pop	{r7, pc}
 801636c:	080226fc 	.word	0x080226fc
 8016370:	080229dc 	.word	0x080229dc
 8016374:	08022750 	.word	0x08022750
 8016378:	080229f8 	.word	0x080229f8
 801637c:	20007640 	.word	0x20007640

08016380 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b084      	sub	sp, #16
 8016384:	af00      	add	r7, sp, #0
 8016386:	60f8      	str	r0, [r7, #12]
 8016388:	60b9      	str	r1, [r7, #8]
 801638a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d107      	bne.n	80163a2 <udp_recv+0x22>
 8016392:	4b08      	ldr	r3, [pc, #32]	; (80163b4 <udp_recv+0x34>)
 8016394:	f240 428a 	movw	r2, #1162	; 0x48a
 8016398:	4907      	ldr	r1, [pc, #28]	; (80163b8 <udp_recv+0x38>)
 801639a:	4808      	ldr	r0, [pc, #32]	; (80163bc <udp_recv+0x3c>)
 801639c:	f004 ff6a 	bl	801b274 <iprintf>
 80163a0:	e005      	b.n	80163ae <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	68ba      	ldr	r2, [r7, #8]
 80163a6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	687a      	ldr	r2, [r7, #4]
 80163ac:	61da      	str	r2, [r3, #28]
}
 80163ae:	3710      	adds	r7, #16
 80163b0:	46bd      	mov	sp, r7
 80163b2:	bd80      	pop	{r7, pc}
 80163b4:	080226fc 	.word	0x080226fc
 80163b8:	08022a30 	.word	0x08022a30
 80163bc:	08022750 	.word	0x08022750

080163c0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b084      	sub	sp, #16
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d107      	bne.n	80163de <udp_remove+0x1e>
 80163ce:	4b19      	ldr	r3, [pc, #100]	; (8016434 <udp_remove+0x74>)
 80163d0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80163d4:	4918      	ldr	r1, [pc, #96]	; (8016438 <udp_remove+0x78>)
 80163d6:	4819      	ldr	r0, [pc, #100]	; (801643c <udp_remove+0x7c>)
 80163d8:	f004 ff4c 	bl	801b274 <iprintf>
 80163dc:	e026      	b.n	801642c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80163de:	4b18      	ldr	r3, [pc, #96]	; (8016440 <udp_remove+0x80>)
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	687a      	ldr	r2, [r7, #4]
 80163e4:	429a      	cmp	r2, r3
 80163e6:	d105      	bne.n	80163f4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80163e8:	4b15      	ldr	r3, [pc, #84]	; (8016440 <udp_remove+0x80>)
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	68db      	ldr	r3, [r3, #12]
 80163ee:	4a14      	ldr	r2, [pc, #80]	; (8016440 <udp_remove+0x80>)
 80163f0:	6013      	str	r3, [r2, #0]
 80163f2:	e017      	b.n	8016424 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80163f4:	4b12      	ldr	r3, [pc, #72]	; (8016440 <udp_remove+0x80>)
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	60fb      	str	r3, [r7, #12]
 80163fa:	e010      	b.n	801641e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	68db      	ldr	r3, [r3, #12]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d009      	beq.n	8016418 <udp_remove+0x58>
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	68db      	ldr	r3, [r3, #12]
 8016408:	687a      	ldr	r2, [r7, #4]
 801640a:	429a      	cmp	r2, r3
 801640c:	d104      	bne.n	8016418 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	68da      	ldr	r2, [r3, #12]
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	60da      	str	r2, [r3, #12]
        break;
 8016416:	e005      	b.n	8016424 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	68db      	ldr	r3, [r3, #12]
 801641c:	60fb      	str	r3, [r7, #12]
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d1eb      	bne.n	80163fc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8016424:	6879      	ldr	r1, [r7, #4]
 8016426:	2000      	movs	r0, #0
 8016428:	f7f9 f8a6 	bl	800f578 <memp_free>
}
 801642c:	3710      	adds	r7, #16
 801642e:	46bd      	mov	sp, r7
 8016430:	bd80      	pop	{r7, pc}
 8016432:	bf00      	nop
 8016434:	080226fc 	.word	0x080226fc
 8016438:	08022a48 	.word	0x08022a48
 801643c:	08022750 	.word	0x08022750
 8016440:	20007640 	.word	0x20007640

08016444 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8016444:	b580      	push	{r7, lr}
 8016446:	b082      	sub	sp, #8
 8016448:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801644a:	2000      	movs	r0, #0
 801644c:	f7f9 f848 	bl	800f4e0 <memp_malloc>
 8016450:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d007      	beq.n	8016468 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016458:	2220      	movs	r2, #32
 801645a:	2100      	movs	r1, #0
 801645c:	6878      	ldr	r0, [r7, #4]
 801645e:	f004 f9fc 	bl	801a85a <memset>
    pcb->ttl = UDP_TTL;
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	22ff      	movs	r2, #255	; 0xff
 8016466:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016468:	687b      	ldr	r3, [r7, #4]
}
 801646a:	4618      	mov	r0, r3
 801646c:	3708      	adds	r7, #8
 801646e:	46bd      	mov	sp, r7
 8016470:	bd80      	pop	{r7, pc}
	...

08016474 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016474:	b480      	push	{r7}
 8016476:	b085      	sub	sp, #20
 8016478:	af00      	add	r7, sp, #0
 801647a:	6078      	str	r0, [r7, #4]
 801647c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d01e      	beq.n	80164c2 <udp_netif_ip_addr_changed+0x4e>
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d01a      	beq.n	80164c2 <udp_netif_ip_addr_changed+0x4e>
 801648c:	683b      	ldr	r3, [r7, #0]
 801648e:	2b00      	cmp	r3, #0
 8016490:	d017      	beq.n	80164c2 <udp_netif_ip_addr_changed+0x4e>
 8016492:	683b      	ldr	r3, [r7, #0]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d013      	beq.n	80164c2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801649a:	4b0d      	ldr	r3, [pc, #52]	; (80164d0 <udp_netif_ip_addr_changed+0x5c>)
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	60fb      	str	r3, [r7, #12]
 80164a0:	e00c      	b.n	80164bc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	681a      	ldr	r2, [r3, #0]
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	429a      	cmp	r2, r3
 80164ac:	d103      	bne.n	80164b6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80164ae:	683b      	ldr	r3, [r7, #0]
 80164b0:	681a      	ldr	r2, [r3, #0]
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	68db      	ldr	r3, [r3, #12]
 80164ba:	60fb      	str	r3, [r7, #12]
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d1ef      	bne.n	80164a2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80164c2:	bf00      	nop
 80164c4:	3714      	adds	r7, #20
 80164c6:	46bd      	mov	sp, r7
 80164c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164cc:	4770      	bx	lr
 80164ce:	bf00      	nop
 80164d0:	20007640 	.word	0x20007640

080164d4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80164d4:	b580      	push	{r7, lr}
 80164d6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80164d8:	4b20      	ldr	r3, [pc, #128]	; (801655c <dhcp_inc_pcb_refcount+0x88>)
 80164da:	781b      	ldrb	r3, [r3, #0]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d133      	bne.n	8016548 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80164e0:	4b1f      	ldr	r3, [pc, #124]	; (8016560 <dhcp_inc_pcb_refcount+0x8c>)
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d005      	beq.n	80164f4 <dhcp_inc_pcb_refcount+0x20>
 80164e8:	4b1e      	ldr	r3, [pc, #120]	; (8016564 <dhcp_inc_pcb_refcount+0x90>)
 80164ea:	22e5      	movs	r2, #229	; 0xe5
 80164ec:	491e      	ldr	r1, [pc, #120]	; (8016568 <dhcp_inc_pcb_refcount+0x94>)
 80164ee:	481f      	ldr	r0, [pc, #124]	; (801656c <dhcp_inc_pcb_refcount+0x98>)
 80164f0:	f004 fec0 	bl	801b274 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80164f4:	f7ff ffa6 	bl	8016444 <udp_new>
 80164f8:	4602      	mov	r2, r0
 80164fa:	4b19      	ldr	r3, [pc, #100]	; (8016560 <dhcp_inc_pcb_refcount+0x8c>)
 80164fc:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 80164fe:	4b18      	ldr	r3, [pc, #96]	; (8016560 <dhcp_inc_pcb_refcount+0x8c>)
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d102      	bne.n	801650c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8016506:	f04f 33ff 	mov.w	r3, #4294967295
 801650a:	e024      	b.n	8016556 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801650c:	4b14      	ldr	r3, [pc, #80]	; (8016560 <dhcp_inc_pcb_refcount+0x8c>)
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	7a5a      	ldrb	r2, [r3, #9]
 8016512:	4b13      	ldr	r3, [pc, #76]	; (8016560 <dhcp_inc_pcb_refcount+0x8c>)
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	f042 0220 	orr.w	r2, r2, #32
 801651a:	b2d2      	uxtb	r2, r2
 801651c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801651e:	4b10      	ldr	r3, [pc, #64]	; (8016560 <dhcp_inc_pcb_refcount+0x8c>)
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	2244      	movs	r2, #68	; 0x44
 8016524:	4912      	ldr	r1, [pc, #72]	; (8016570 <dhcp_inc_pcb_refcount+0x9c>)
 8016526:	4618      	mov	r0, r3
 8016528:	f7ff fe34 	bl	8016194 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801652c:	4b0c      	ldr	r3, [pc, #48]	; (8016560 <dhcp_inc_pcb_refcount+0x8c>)
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	2243      	movs	r2, #67	; 0x43
 8016532:	490f      	ldr	r1, [pc, #60]	; (8016570 <dhcp_inc_pcb_refcount+0x9c>)
 8016534:	4618      	mov	r0, r3
 8016536:	f7ff feb5 	bl	80162a4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801653a:	4b09      	ldr	r3, [pc, #36]	; (8016560 <dhcp_inc_pcb_refcount+0x8c>)
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	2200      	movs	r2, #0
 8016540:	490c      	ldr	r1, [pc, #48]	; (8016574 <dhcp_inc_pcb_refcount+0xa0>)
 8016542:	4618      	mov	r0, r3
 8016544:	f7ff ff1c 	bl	8016380 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8016548:	4b04      	ldr	r3, [pc, #16]	; (801655c <dhcp_inc_pcb_refcount+0x88>)
 801654a:	781b      	ldrb	r3, [r3, #0]
 801654c:	3301      	adds	r3, #1
 801654e:	b2da      	uxtb	r2, r3
 8016550:	4b02      	ldr	r3, [pc, #8]	; (801655c <dhcp_inc_pcb_refcount+0x88>)
 8016552:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8016554:	2300      	movs	r3, #0
}
 8016556:	4618      	mov	r0, r3
 8016558:	bd80      	pop	{r7, pc}
 801655a:	bf00      	nop
 801655c:	2000051c 	.word	0x2000051c
 8016560:	20000518 	.word	0x20000518
 8016564:	08022a60 	.word	0x08022a60
 8016568:	08022a98 	.word	0x08022a98
 801656c:	08022ac0 	.word	0x08022ac0
 8016570:	08023b1c 	.word	0x08023b1c
 8016574:	08017d91 	.word	0x08017d91

08016578 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8016578:	b580      	push	{r7, lr}
 801657a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801657c:	4b0e      	ldr	r3, [pc, #56]	; (80165b8 <dhcp_dec_pcb_refcount+0x40>)
 801657e:	781b      	ldrb	r3, [r3, #0]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d105      	bne.n	8016590 <dhcp_dec_pcb_refcount+0x18>
 8016584:	4b0d      	ldr	r3, [pc, #52]	; (80165bc <dhcp_dec_pcb_refcount+0x44>)
 8016586:	22ff      	movs	r2, #255	; 0xff
 8016588:	490d      	ldr	r1, [pc, #52]	; (80165c0 <dhcp_dec_pcb_refcount+0x48>)
 801658a:	480e      	ldr	r0, [pc, #56]	; (80165c4 <dhcp_dec_pcb_refcount+0x4c>)
 801658c:	f004 fe72 	bl	801b274 <iprintf>
  dhcp_pcb_refcount--;
 8016590:	4b09      	ldr	r3, [pc, #36]	; (80165b8 <dhcp_dec_pcb_refcount+0x40>)
 8016592:	781b      	ldrb	r3, [r3, #0]
 8016594:	3b01      	subs	r3, #1
 8016596:	b2da      	uxtb	r2, r3
 8016598:	4b07      	ldr	r3, [pc, #28]	; (80165b8 <dhcp_dec_pcb_refcount+0x40>)
 801659a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801659c:	4b06      	ldr	r3, [pc, #24]	; (80165b8 <dhcp_dec_pcb_refcount+0x40>)
 801659e:	781b      	ldrb	r3, [r3, #0]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d107      	bne.n	80165b4 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80165a4:	4b08      	ldr	r3, [pc, #32]	; (80165c8 <dhcp_dec_pcb_refcount+0x50>)
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	4618      	mov	r0, r3
 80165aa:	f7ff ff09 	bl	80163c0 <udp_remove>
    dhcp_pcb = NULL;
 80165ae:	4b06      	ldr	r3, [pc, #24]	; (80165c8 <dhcp_dec_pcb_refcount+0x50>)
 80165b0:	2200      	movs	r2, #0
 80165b2:	601a      	str	r2, [r3, #0]
  }
}
 80165b4:	bf00      	nop
 80165b6:	bd80      	pop	{r7, pc}
 80165b8:	2000051c 	.word	0x2000051c
 80165bc:	08022a60 	.word	0x08022a60
 80165c0:	08022ae8 	.word	0x08022ae8
 80165c4:	08022ac0 	.word	0x08022ac0
 80165c8:	20000518 	.word	0x20000518

080165cc <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80165cc:	b580      	push	{r7, lr}
 80165ce:	b084      	sub	sp, #16
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165d8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80165da:	210c      	movs	r1, #12
 80165dc:	68f8      	ldr	r0, [r7, #12]
 80165de:	f001 f819 	bl	8017614 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80165e2:	4b06      	ldr	r3, [pc, #24]	; (80165fc <dhcp_handle_nak+0x30>)
 80165e4:	4a05      	ldr	r2, [pc, #20]	; (80165fc <dhcp_handle_nak+0x30>)
 80165e6:	4905      	ldr	r1, [pc, #20]	; (80165fc <dhcp_handle_nak+0x30>)
 80165e8:	6878      	ldr	r0, [r7, #4]
 80165ea:	f7f9 f967 	bl	800f8bc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80165ee:	6878      	ldr	r0, [r7, #4]
 80165f0:	f000 fc0c 	bl	8016e0c <dhcp_discover>
}
 80165f4:	bf00      	nop
 80165f6:	3710      	adds	r7, #16
 80165f8:	46bd      	mov	sp, r7
 80165fa:	bd80      	pop	{r7, pc}
 80165fc:	08023b1c 	.word	0x08023b1c

08016600 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8016600:	b580      	push	{r7, lr}
 8016602:	b084      	sub	sp, #16
 8016604:	af00      	add	r7, sp, #0
 8016606:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801660c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801660e:	2108      	movs	r1, #8
 8016610:	68f8      	ldr	r0, [r7, #12]
 8016612:	f000 ffff 	bl	8017614 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	331c      	adds	r3, #28
 801661a:	2200      	movs	r2, #0
 801661c:	4619      	mov	r1, r3
 801661e:	6878      	ldr	r0, [r7, #4]
 8016620:	f002 fafe 	bl	8018c20 <etharp_query>
 8016624:	4603      	mov	r3, r0
 8016626:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	799b      	ldrb	r3, [r3, #6]
 801662c:	2bff      	cmp	r3, #255	; 0xff
 801662e:	d005      	beq.n	801663c <dhcp_check+0x3c>
    dhcp->tries++;
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	799b      	ldrb	r3, [r3, #6]
 8016634:	3301      	adds	r3, #1
 8016636:	b2da      	uxtb	r2, r3
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801663c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8016640:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016642:	893b      	ldrh	r3, [r7, #8]
 8016644:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016648:	4a06      	ldr	r2, [pc, #24]	; (8016664 <dhcp_check+0x64>)
 801664a:	fb82 1203 	smull	r1, r2, r2, r3
 801664e:	1152      	asrs	r2, r2, #5
 8016650:	17db      	asrs	r3, r3, #31
 8016652:	1ad3      	subs	r3, r2, r3
 8016654:	b29a      	uxth	r2, r3
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801665a:	bf00      	nop
 801665c:	3710      	adds	r7, #16
 801665e:	46bd      	mov	sp, r7
 8016660:	bd80      	pop	{r7, pc}
 8016662:	bf00      	nop
 8016664:	10624dd3 	.word	0x10624dd3

08016668 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8016668:	b580      	push	{r7, lr}
 801666a:	b084      	sub	sp, #16
 801666c:	af00      	add	r7, sp, #0
 801666e:	6078      	str	r0, [r7, #4]
 8016670:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016676:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8016678:	4b0c      	ldr	r3, [pc, #48]	; (80166ac <dhcp_handle_offer+0x44>)
 801667a:	789b      	ldrb	r3, [r3, #2]
 801667c:	2b00      	cmp	r3, #0
 801667e:	d011      	beq.n	80166a4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	2200      	movs	r2, #0
 8016684:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8016686:	4b0a      	ldr	r3, [pc, #40]	; (80166b0 <dhcp_handle_offer+0x48>)
 8016688:	689b      	ldr	r3, [r3, #8]
 801668a:	4618      	mov	r0, r3
 801668c:	f7f8 fae7 	bl	800ec5e <lwip_htonl>
 8016690:	4602      	mov	r2, r0
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8016696:	683b      	ldr	r3, [r7, #0]
 8016698:	691a      	ldr	r2, [r3, #16]
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801669e:	6878      	ldr	r0, [r7, #4]
 80166a0:	f000 f808 	bl	80166b4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80166a4:	bf00      	nop
 80166a6:	3710      	adds	r7, #16
 80166a8:	46bd      	mov	sp, r7
 80166aa:	bd80      	pop	{r7, pc}
 80166ac:	20007644 	.word	0x20007644
 80166b0:	2000764c 	.word	0x2000764c

080166b4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80166b4:	b5b0      	push	{r4, r5, r7, lr}
 80166b6:	b08a      	sub	sp, #40	; 0x28
 80166b8:	af02      	add	r7, sp, #8
 80166ba:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d109      	bne.n	80166d6 <dhcp_select+0x22>
 80166c2:	4b71      	ldr	r3, [pc, #452]	; (8016888 <dhcp_select+0x1d4>)
 80166c4:	f240 1277 	movw	r2, #375	; 0x177
 80166c8:	4970      	ldr	r1, [pc, #448]	; (801688c <dhcp_select+0x1d8>)
 80166ca:	4871      	ldr	r0, [pc, #452]	; (8016890 <dhcp_select+0x1dc>)
 80166cc:	f004 fdd2 	bl	801b274 <iprintf>
 80166d0:	f06f 030f 	mvn.w	r3, #15
 80166d4:	e0d3      	b.n	801687e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166da:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80166dc:	69bb      	ldr	r3, [r7, #24]
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d109      	bne.n	80166f6 <dhcp_select+0x42>
 80166e2:	4b69      	ldr	r3, [pc, #420]	; (8016888 <dhcp_select+0x1d4>)
 80166e4:	f240 1279 	movw	r2, #377	; 0x179
 80166e8:	496a      	ldr	r1, [pc, #424]	; (8016894 <dhcp_select+0x1e0>)
 80166ea:	4869      	ldr	r0, [pc, #420]	; (8016890 <dhcp_select+0x1dc>)
 80166ec:	f004 fdc2 	bl	801b274 <iprintf>
 80166f0:	f06f 0305 	mvn.w	r3, #5
 80166f4:	e0c3      	b.n	801687e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80166f6:	2101      	movs	r1, #1
 80166f8:	69b8      	ldr	r0, [r7, #24]
 80166fa:	f000 ff8b 	bl	8017614 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80166fe:	f107 030c 	add.w	r3, r7, #12
 8016702:	2203      	movs	r2, #3
 8016704:	69b9      	ldr	r1, [r7, #24]
 8016706:	6878      	ldr	r0, [r7, #4]
 8016708:	f001 fc0e 	bl	8017f28 <dhcp_create_msg>
 801670c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801670e:	697b      	ldr	r3, [r7, #20]
 8016710:	2b00      	cmp	r3, #0
 8016712:	f000 8085 	beq.w	8016820 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016716:	697b      	ldr	r3, [r7, #20]
 8016718:	685b      	ldr	r3, [r3, #4]
 801671a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801671c:	89b8      	ldrh	r0, [r7, #12]
 801671e:	693b      	ldr	r3, [r7, #16]
 8016720:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016724:	2302      	movs	r3, #2
 8016726:	2239      	movs	r2, #57	; 0x39
 8016728:	f000 ff8e 	bl	8017648 <dhcp_option>
 801672c:	4603      	mov	r3, r0
 801672e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016730:	89b8      	ldrh	r0, [r7, #12]
 8016732:	693b      	ldr	r3, [r7, #16]
 8016734:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801673c:	461a      	mov	r2, r3
 801673e:	f000 ffdd 	bl	80176fc <dhcp_option_short>
 8016742:	4603      	mov	r3, r0
 8016744:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016746:	89b8      	ldrh	r0, [r7, #12]
 8016748:	693b      	ldr	r3, [r7, #16]
 801674a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801674e:	2304      	movs	r3, #4
 8016750:	2232      	movs	r2, #50	; 0x32
 8016752:	f000 ff79 	bl	8017648 <dhcp_option>
 8016756:	4603      	mov	r3, r0
 8016758:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801675a:	89bc      	ldrh	r4, [r7, #12]
 801675c:	693b      	ldr	r3, [r7, #16]
 801675e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016762:	69bb      	ldr	r3, [r7, #24]
 8016764:	69db      	ldr	r3, [r3, #28]
 8016766:	4618      	mov	r0, r3
 8016768:	f7f8 fa79 	bl	800ec5e <lwip_htonl>
 801676c:	4603      	mov	r3, r0
 801676e:	461a      	mov	r2, r3
 8016770:	4629      	mov	r1, r5
 8016772:	4620      	mov	r0, r4
 8016774:	f000 fff4 	bl	8017760 <dhcp_option_long>
 8016778:	4603      	mov	r3, r0
 801677a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801677c:	89b8      	ldrh	r0, [r7, #12]
 801677e:	693b      	ldr	r3, [r7, #16]
 8016780:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016784:	2304      	movs	r3, #4
 8016786:	2236      	movs	r2, #54	; 0x36
 8016788:	f000 ff5e 	bl	8017648 <dhcp_option>
 801678c:	4603      	mov	r3, r0
 801678e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8016790:	89bc      	ldrh	r4, [r7, #12]
 8016792:	693b      	ldr	r3, [r7, #16]
 8016794:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016798:	69bb      	ldr	r3, [r7, #24]
 801679a:	699b      	ldr	r3, [r3, #24]
 801679c:	4618      	mov	r0, r3
 801679e:	f7f8 fa5e 	bl	800ec5e <lwip_htonl>
 80167a2:	4603      	mov	r3, r0
 80167a4:	461a      	mov	r2, r3
 80167a6:	4629      	mov	r1, r5
 80167a8:	4620      	mov	r0, r4
 80167aa:	f000 ffd9 	bl	8017760 <dhcp_option_long>
 80167ae:	4603      	mov	r3, r0
 80167b0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80167b2:	89b8      	ldrh	r0, [r7, #12]
 80167b4:	693b      	ldr	r3, [r7, #16]
 80167b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80167ba:	2303      	movs	r3, #3
 80167bc:	2237      	movs	r2, #55	; 0x37
 80167be:	f000 ff43 	bl	8017648 <dhcp_option>
 80167c2:	4603      	mov	r3, r0
 80167c4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80167c6:	2300      	movs	r3, #0
 80167c8:	77bb      	strb	r3, [r7, #30]
 80167ca:	e00e      	b.n	80167ea <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80167cc:	89b8      	ldrh	r0, [r7, #12]
 80167ce:	693b      	ldr	r3, [r7, #16]
 80167d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80167d4:	7fbb      	ldrb	r3, [r7, #30]
 80167d6:	4a30      	ldr	r2, [pc, #192]	; (8016898 <dhcp_select+0x1e4>)
 80167d8:	5cd3      	ldrb	r3, [r2, r3]
 80167da:	461a      	mov	r2, r3
 80167dc:	f000 ff68 	bl	80176b0 <dhcp_option_byte>
 80167e0:	4603      	mov	r3, r0
 80167e2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80167e4:	7fbb      	ldrb	r3, [r7, #30]
 80167e6:	3301      	adds	r3, #1
 80167e8:	77bb      	strb	r3, [r7, #30]
 80167ea:	7fbb      	ldrb	r3, [r7, #30]
 80167ec:	2b02      	cmp	r3, #2
 80167ee:	d9ed      	bls.n	80167cc <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80167f0:	89b8      	ldrh	r0, [r7, #12]
 80167f2:	693b      	ldr	r3, [r7, #16]
 80167f4:	33f0      	adds	r3, #240	; 0xf0
 80167f6:	697a      	ldr	r2, [r7, #20]
 80167f8:	4619      	mov	r1, r3
 80167fa:	f001 fc6b 	bl	80180d4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80167fe:	4b27      	ldr	r3, [pc, #156]	; (801689c <dhcp_select+0x1e8>)
 8016800:	6818      	ldr	r0, [r3, #0]
 8016802:	4b27      	ldr	r3, [pc, #156]	; (80168a0 <dhcp_select+0x1ec>)
 8016804:	9301      	str	r3, [sp, #4]
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	9300      	str	r3, [sp, #0]
 801680a:	2343      	movs	r3, #67	; 0x43
 801680c:	4a25      	ldr	r2, [pc, #148]	; (80168a4 <dhcp_select+0x1f0>)
 801680e:	6979      	ldr	r1, [r7, #20]
 8016810:	f7ff fbda 	bl	8015fc8 <udp_sendto_if_src>
 8016814:	4603      	mov	r3, r0
 8016816:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016818:	6978      	ldr	r0, [r7, #20]
 801681a:	f7f9 fca3 	bl	8010164 <pbuf_free>
 801681e:	e001      	b.n	8016824 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016820:	23ff      	movs	r3, #255	; 0xff
 8016822:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016824:	69bb      	ldr	r3, [r7, #24]
 8016826:	799b      	ldrb	r3, [r3, #6]
 8016828:	2bff      	cmp	r3, #255	; 0xff
 801682a:	d005      	beq.n	8016838 <dhcp_select+0x184>
    dhcp->tries++;
 801682c:	69bb      	ldr	r3, [r7, #24]
 801682e:	799b      	ldrb	r3, [r3, #6]
 8016830:	3301      	adds	r3, #1
 8016832:	b2da      	uxtb	r2, r3
 8016834:	69bb      	ldr	r3, [r7, #24]
 8016836:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016838:	69bb      	ldr	r3, [r7, #24]
 801683a:	799b      	ldrb	r3, [r3, #6]
 801683c:	2b05      	cmp	r3, #5
 801683e:	d80d      	bhi.n	801685c <dhcp_select+0x1a8>
 8016840:	69bb      	ldr	r3, [r7, #24]
 8016842:	799b      	ldrb	r3, [r3, #6]
 8016844:	461a      	mov	r2, r3
 8016846:	2301      	movs	r3, #1
 8016848:	4093      	lsls	r3, r2
 801684a:	b29b      	uxth	r3, r3
 801684c:	461a      	mov	r2, r3
 801684e:	0152      	lsls	r2, r2, #5
 8016850:	1ad2      	subs	r2, r2, r3
 8016852:	0092      	lsls	r2, r2, #2
 8016854:	4413      	add	r3, r2
 8016856:	00db      	lsls	r3, r3, #3
 8016858:	b29b      	uxth	r3, r3
 801685a:	e001      	b.n	8016860 <dhcp_select+0x1ac>
 801685c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8016860:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016862:	89fb      	ldrh	r3, [r7, #14]
 8016864:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016868:	4a0f      	ldr	r2, [pc, #60]	; (80168a8 <dhcp_select+0x1f4>)
 801686a:	fb82 1203 	smull	r1, r2, r2, r3
 801686e:	1152      	asrs	r2, r2, #5
 8016870:	17db      	asrs	r3, r3, #31
 8016872:	1ad3      	subs	r3, r2, r3
 8016874:	b29a      	uxth	r2, r3
 8016876:	69bb      	ldr	r3, [r7, #24]
 8016878:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801687a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801687e:	4618      	mov	r0, r3
 8016880:	3720      	adds	r7, #32
 8016882:	46bd      	mov	sp, r7
 8016884:	bdb0      	pop	{r4, r5, r7, pc}
 8016886:	bf00      	nop
 8016888:	08022a60 	.word	0x08022a60
 801688c:	08022b0c 	.word	0x08022b0c
 8016890:	08022ac0 	.word	0x08022ac0
 8016894:	08022b28 	.word	0x08022b28
 8016898:	20000080 	.word	0x20000080
 801689c:	20000518 	.word	0x20000518
 80168a0:	08023b1c 	.word	0x08023b1c
 80168a4:	08023b20 	.word	0x08023b20
 80168a8:	10624dd3 	.word	0x10624dd3

080168ac <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b082      	sub	sp, #8
 80168b0:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80168b2:	4b27      	ldr	r3, [pc, #156]	; (8016950 <dhcp_coarse_tmr+0xa4>)
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	607b      	str	r3, [r7, #4]
 80168b8:	e042      	b.n	8016940 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168be:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80168c0:	683b      	ldr	r3, [r7, #0]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d039      	beq.n	801693a <dhcp_coarse_tmr+0x8e>
 80168c6:	683b      	ldr	r3, [r7, #0]
 80168c8:	795b      	ldrb	r3, [r3, #5]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d035      	beq.n	801693a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80168ce:	683b      	ldr	r3, [r7, #0]
 80168d0:	8a9b      	ldrh	r3, [r3, #20]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d012      	beq.n	80168fc <dhcp_coarse_tmr+0x50>
 80168d6:	683b      	ldr	r3, [r7, #0]
 80168d8:	8a5b      	ldrh	r3, [r3, #18]
 80168da:	3301      	adds	r3, #1
 80168dc:	b29a      	uxth	r2, r3
 80168de:	683b      	ldr	r3, [r7, #0]
 80168e0:	825a      	strh	r2, [r3, #18]
 80168e2:	683b      	ldr	r3, [r7, #0]
 80168e4:	8a5a      	ldrh	r2, [r3, #18]
 80168e6:	683b      	ldr	r3, [r7, #0]
 80168e8:	8a9b      	ldrh	r3, [r3, #20]
 80168ea:	429a      	cmp	r2, r3
 80168ec:	d106      	bne.n	80168fc <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80168ee:	6878      	ldr	r0, [r7, #4]
 80168f0:	f000 fdf6 	bl	80174e0 <dhcp_release_and_stop>
        dhcp_start(netif);
 80168f4:	6878      	ldr	r0, [r7, #4]
 80168f6:	f000 f969 	bl	8016bcc <dhcp_start>
 80168fa:	e01e      	b.n	801693a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80168fc:	683b      	ldr	r3, [r7, #0]
 80168fe:	8a1b      	ldrh	r3, [r3, #16]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d00b      	beq.n	801691c <dhcp_coarse_tmr+0x70>
 8016904:	683b      	ldr	r3, [r7, #0]
 8016906:	8a1b      	ldrh	r3, [r3, #16]
 8016908:	1e5a      	subs	r2, r3, #1
 801690a:	b291      	uxth	r1, r2
 801690c:	683a      	ldr	r2, [r7, #0]
 801690e:	8211      	strh	r1, [r2, #16]
 8016910:	2b01      	cmp	r3, #1
 8016912:	d103      	bne.n	801691c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8016914:	6878      	ldr	r0, [r7, #4]
 8016916:	f000 f8c6 	bl	8016aa6 <dhcp_t2_timeout>
 801691a:	e00e      	b.n	801693a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801691c:	683b      	ldr	r3, [r7, #0]
 801691e:	89db      	ldrh	r3, [r3, #14]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d00a      	beq.n	801693a <dhcp_coarse_tmr+0x8e>
 8016924:	683b      	ldr	r3, [r7, #0]
 8016926:	89db      	ldrh	r3, [r3, #14]
 8016928:	1e5a      	subs	r2, r3, #1
 801692a:	b291      	uxth	r1, r2
 801692c:	683a      	ldr	r2, [r7, #0]
 801692e:	81d1      	strh	r1, [r2, #14]
 8016930:	2b01      	cmp	r3, #1
 8016932:	d102      	bne.n	801693a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8016934:	6878      	ldr	r0, [r7, #4]
 8016936:	f000 f888 	bl	8016a4a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	607b      	str	r3, [r7, #4]
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d1b9      	bne.n	80168ba <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8016946:	bf00      	nop
 8016948:	3708      	adds	r7, #8
 801694a:	46bd      	mov	sp, r7
 801694c:	bd80      	pop	{r7, pc}
 801694e:	bf00      	nop
 8016950:	20007618 	.word	0x20007618

08016954 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8016954:	b580      	push	{r7, lr}
 8016956:	b082      	sub	sp, #8
 8016958:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801695a:	4b16      	ldr	r3, [pc, #88]	; (80169b4 <dhcp_fine_tmr+0x60>)
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	607b      	str	r3, [r7, #4]
 8016960:	e020      	b.n	80169a4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016966:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8016968:	683b      	ldr	r3, [r7, #0]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d017      	beq.n	801699e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801696e:	683b      	ldr	r3, [r7, #0]
 8016970:	891b      	ldrh	r3, [r3, #8]
 8016972:	2b01      	cmp	r3, #1
 8016974:	d906      	bls.n	8016984 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8016976:	683b      	ldr	r3, [r7, #0]
 8016978:	891b      	ldrh	r3, [r3, #8]
 801697a:	3b01      	subs	r3, #1
 801697c:	b29a      	uxth	r2, r3
 801697e:	683b      	ldr	r3, [r7, #0]
 8016980:	811a      	strh	r2, [r3, #8]
 8016982:	e00c      	b.n	801699e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8016984:	683b      	ldr	r3, [r7, #0]
 8016986:	891b      	ldrh	r3, [r3, #8]
 8016988:	2b01      	cmp	r3, #1
 801698a:	d108      	bne.n	801699e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801698c:	683b      	ldr	r3, [r7, #0]
 801698e:	891b      	ldrh	r3, [r3, #8]
 8016990:	3b01      	subs	r3, #1
 8016992:	b29a      	uxth	r2, r3
 8016994:	683b      	ldr	r3, [r7, #0]
 8016996:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8016998:	6878      	ldr	r0, [r7, #4]
 801699a:	f000 f80d 	bl	80169b8 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	607b      	str	r3, [r7, #4]
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d1db      	bne.n	8016962 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80169aa:	bf00      	nop
 80169ac:	3708      	adds	r7, #8
 80169ae:	46bd      	mov	sp, r7
 80169b0:	bd80      	pop	{r7, pc}
 80169b2:	bf00      	nop
 80169b4:	20007618 	.word	0x20007618

080169b8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80169b8:	b580      	push	{r7, lr}
 80169ba:	b084      	sub	sp, #16
 80169bc:	af00      	add	r7, sp, #0
 80169be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169c4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	795b      	ldrb	r3, [r3, #5]
 80169ca:	2b0c      	cmp	r3, #12
 80169cc:	d003      	beq.n	80169d6 <dhcp_timeout+0x1e>
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	795b      	ldrb	r3, [r3, #5]
 80169d2:	2b06      	cmp	r3, #6
 80169d4:	d103      	bne.n	80169de <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80169d6:	6878      	ldr	r0, [r7, #4]
 80169d8:	f000 fa18 	bl	8016e0c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80169dc:	e031      	b.n	8016a42 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	795b      	ldrb	r3, [r3, #5]
 80169e2:	2b01      	cmp	r3, #1
 80169e4:	d10e      	bne.n	8016a04 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	799b      	ldrb	r3, [r3, #6]
 80169ea:	2b05      	cmp	r3, #5
 80169ec:	d803      	bhi.n	80169f6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80169ee:	6878      	ldr	r0, [r7, #4]
 80169f0:	f7ff fe60 	bl	80166b4 <dhcp_select>
}
 80169f4:	e025      	b.n	8016a42 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80169f6:	6878      	ldr	r0, [r7, #4]
 80169f8:	f000 fd72 	bl	80174e0 <dhcp_release_and_stop>
      dhcp_start(netif);
 80169fc:	6878      	ldr	r0, [r7, #4]
 80169fe:	f000 f8e5 	bl	8016bcc <dhcp_start>
}
 8016a02:	e01e      	b.n	8016a42 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	795b      	ldrb	r3, [r3, #5]
 8016a08:	2b08      	cmp	r3, #8
 8016a0a:	d10b      	bne.n	8016a24 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	799b      	ldrb	r3, [r3, #6]
 8016a10:	2b01      	cmp	r3, #1
 8016a12:	d803      	bhi.n	8016a1c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8016a14:	6878      	ldr	r0, [r7, #4]
 8016a16:	f7ff fdf3 	bl	8016600 <dhcp_check>
}
 8016a1a:	e012      	b.n	8016a42 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8016a1c:	6878      	ldr	r0, [r7, #4]
 8016a1e:	f000 fa97 	bl	8016f50 <dhcp_bind>
}
 8016a22:	e00e      	b.n	8016a42 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	795b      	ldrb	r3, [r3, #5]
 8016a28:	2b03      	cmp	r3, #3
 8016a2a:	d10a      	bne.n	8016a42 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	799b      	ldrb	r3, [r3, #6]
 8016a30:	2b01      	cmp	r3, #1
 8016a32:	d803      	bhi.n	8016a3c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8016a34:	6878      	ldr	r0, [r7, #4]
 8016a36:	f000 fc9d 	bl	8017374 <dhcp_reboot>
}
 8016a3a:	e002      	b.n	8016a42 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8016a3c:	6878      	ldr	r0, [r7, #4]
 8016a3e:	f000 f9e5 	bl	8016e0c <dhcp_discover>
}
 8016a42:	bf00      	nop
 8016a44:	3710      	adds	r7, #16
 8016a46:	46bd      	mov	sp, r7
 8016a48:	bd80      	pop	{r7, pc}

08016a4a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8016a4a:	b580      	push	{r7, lr}
 8016a4c:	b084      	sub	sp, #16
 8016a4e:	af00      	add	r7, sp, #0
 8016a50:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a56:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	795b      	ldrb	r3, [r3, #5]
 8016a5c:	2b01      	cmp	r3, #1
 8016a5e:	d007      	beq.n	8016a70 <dhcp_t1_timeout+0x26>
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	795b      	ldrb	r3, [r3, #5]
 8016a64:	2b0a      	cmp	r3, #10
 8016a66:	d003      	beq.n	8016a70 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016a6c:	2b05      	cmp	r3, #5
 8016a6e:	d116      	bne.n	8016a9e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8016a70:	6878      	ldr	r0, [r7, #4]
 8016a72:	f000 fb47 	bl	8017104 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	899b      	ldrh	r3, [r3, #12]
 8016a7a:	461a      	mov	r2, r3
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	8a5b      	ldrh	r3, [r3, #18]
 8016a80:	1ad3      	subs	r3, r2, r3
 8016a82:	2b01      	cmp	r3, #1
 8016a84:	dd0b      	ble.n	8016a9e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	899b      	ldrh	r3, [r3, #12]
 8016a8a:	461a      	mov	r2, r3
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	8a5b      	ldrh	r3, [r3, #18]
 8016a90:	1ad3      	subs	r3, r2, r3
 8016a92:	0fda      	lsrs	r2, r3, #31
 8016a94:	4413      	add	r3, r2
 8016a96:	105b      	asrs	r3, r3, #1
 8016a98:	b29a      	uxth	r2, r3
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8016a9e:	bf00      	nop
 8016aa0:	3710      	adds	r7, #16
 8016aa2:	46bd      	mov	sp, r7
 8016aa4:	bd80      	pop	{r7, pc}

08016aa6 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8016aa6:	b580      	push	{r7, lr}
 8016aa8:	b084      	sub	sp, #16
 8016aaa:	af00      	add	r7, sp, #0
 8016aac:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ab2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	795b      	ldrb	r3, [r3, #5]
 8016ab8:	2b01      	cmp	r3, #1
 8016aba:	d00b      	beq.n	8016ad4 <dhcp_t2_timeout+0x2e>
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	795b      	ldrb	r3, [r3, #5]
 8016ac0:	2b0a      	cmp	r3, #10
 8016ac2:	d007      	beq.n	8016ad4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016ac8:	2b05      	cmp	r3, #5
 8016aca:	d003      	beq.n	8016ad4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	795b      	ldrb	r3, [r3, #5]
 8016ad0:	2b04      	cmp	r3, #4
 8016ad2:	d116      	bne.n	8016b02 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8016ad4:	6878      	ldr	r0, [r7, #4]
 8016ad6:	f000 fbb1 	bl	801723c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	8a9b      	ldrh	r3, [r3, #20]
 8016ade:	461a      	mov	r2, r3
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	8a5b      	ldrh	r3, [r3, #18]
 8016ae4:	1ad3      	subs	r3, r2, r3
 8016ae6:	2b01      	cmp	r3, #1
 8016ae8:	dd0b      	ble.n	8016b02 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	8a9b      	ldrh	r3, [r3, #20]
 8016aee:	461a      	mov	r2, r3
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	8a5b      	ldrh	r3, [r3, #18]
 8016af4:	1ad3      	subs	r3, r2, r3
 8016af6:	0fda      	lsrs	r2, r3, #31
 8016af8:	4413      	add	r3, r2
 8016afa:	105b      	asrs	r3, r3, #1
 8016afc:	b29a      	uxth	r2, r3
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8016b02:	bf00      	nop
 8016b04:	3710      	adds	r7, #16
 8016b06:	46bd      	mov	sp, r7
 8016b08:	bd80      	pop	{r7, pc}
	...

08016b0c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	b084      	sub	sp, #16
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	6078      	str	r0, [r7, #4]
 8016b14:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b1a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	2200      	movs	r2, #0
 8016b20:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	2200      	movs	r2, #0
 8016b26:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8016b28:	4b26      	ldr	r3, [pc, #152]	; (8016bc4 <dhcp_handle_ack+0xb8>)
 8016b2a:	78db      	ldrb	r3, [r3, #3]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d003      	beq.n	8016b38 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8016b30:	4b25      	ldr	r3, [pc, #148]	; (8016bc8 <dhcp_handle_ack+0xbc>)
 8016b32:	68da      	ldr	r2, [r3, #12]
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8016b38:	4b22      	ldr	r3, [pc, #136]	; (8016bc4 <dhcp_handle_ack+0xb8>)
 8016b3a:	791b      	ldrb	r3, [r3, #4]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d004      	beq.n	8016b4a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8016b40:	4b21      	ldr	r3, [pc, #132]	; (8016bc8 <dhcp_handle_ack+0xbc>)
 8016b42:	691a      	ldr	r2, [r3, #16]
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	62da      	str	r2, [r3, #44]	; 0x2c
 8016b48:	e004      	b.n	8016b54 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b4e:	085a      	lsrs	r2, r3, #1
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8016b54:	4b1b      	ldr	r3, [pc, #108]	; (8016bc4 <dhcp_handle_ack+0xb8>)
 8016b56:	795b      	ldrb	r3, [r3, #5]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d004      	beq.n	8016b66 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8016b5c:	4b1a      	ldr	r3, [pc, #104]	; (8016bc8 <dhcp_handle_ack+0xbc>)
 8016b5e:	695a      	ldr	r2, [r3, #20]
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	631a      	str	r2, [r3, #48]	; 0x30
 8016b64:	e007      	b.n	8016b76 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016b6a:	4613      	mov	r3, r2
 8016b6c:	00db      	lsls	r3, r3, #3
 8016b6e:	1a9b      	subs	r3, r3, r2
 8016b70:	08da      	lsrs	r2, r3, #3
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8016b76:	683b      	ldr	r3, [r7, #0]
 8016b78:	691a      	ldr	r2, [r3, #16]
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8016b7e:	4b11      	ldr	r3, [pc, #68]	; (8016bc4 <dhcp_handle_ack+0xb8>)
 8016b80:	799b      	ldrb	r3, [r3, #6]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d00b      	beq.n	8016b9e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8016b86:	4b10      	ldr	r3, [pc, #64]	; (8016bc8 <dhcp_handle_ack+0xbc>)
 8016b88:	699b      	ldr	r3, [r3, #24]
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	f7f8 f867 	bl	800ec5e <lwip_htonl>
 8016b90:	4602      	mov	r2, r0
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	2201      	movs	r2, #1
 8016b9a:	71da      	strb	r2, [r3, #7]
 8016b9c:	e002      	b.n	8016ba4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	2200      	movs	r2, #0
 8016ba2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8016ba4:	4b07      	ldr	r3, [pc, #28]	; (8016bc4 <dhcp_handle_ack+0xb8>)
 8016ba6:	79db      	ldrb	r3, [r3, #7]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d007      	beq.n	8016bbc <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8016bac:	4b06      	ldr	r3, [pc, #24]	; (8016bc8 <dhcp_handle_ack+0xbc>)
 8016bae:	69db      	ldr	r3, [r3, #28]
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	f7f8 f854 	bl	800ec5e <lwip_htonl>
 8016bb6:	4602      	mov	r2, r0
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8016bbc:	bf00      	nop
 8016bbe:	3710      	adds	r7, #16
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	bd80      	pop	{r7, pc}
 8016bc4:	20007644 	.word	0x20007644
 8016bc8:	2000764c 	.word	0x2000764c

08016bcc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8016bcc:	b580      	push	{r7, lr}
 8016bce:	b084      	sub	sp, #16
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d109      	bne.n	8016bee <dhcp_start+0x22>
 8016bda:	4b37      	ldr	r3, [pc, #220]	; (8016cb8 <dhcp_start+0xec>)
 8016bdc:	f240 22e7 	movw	r2, #743	; 0x2e7
 8016be0:	4936      	ldr	r1, [pc, #216]	; (8016cbc <dhcp_start+0xf0>)
 8016be2:	4837      	ldr	r0, [pc, #220]	; (8016cc0 <dhcp_start+0xf4>)
 8016be4:	f004 fb46 	bl	801b274 <iprintf>
 8016be8:	f06f 030f 	mvn.w	r3, #15
 8016bec:	e060      	b.n	8016cb0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016bf4:	f003 0301 	and.w	r3, r3, #1
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d109      	bne.n	8016c10 <dhcp_start+0x44>
 8016bfc:	4b2e      	ldr	r3, [pc, #184]	; (8016cb8 <dhcp_start+0xec>)
 8016bfe:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8016c02:	4930      	ldr	r1, [pc, #192]	; (8016cc4 <dhcp_start+0xf8>)
 8016c04:	482e      	ldr	r0, [pc, #184]	; (8016cc0 <dhcp_start+0xf4>)
 8016c06:	f004 fb35 	bl	801b274 <iprintf>
 8016c0a:	f06f 030f 	mvn.w	r3, #15
 8016c0e:	e04f      	b.n	8016cb0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c14:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016c1a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8016c1e:	d202      	bcs.n	8016c26 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8016c20:	f04f 33ff 	mov.w	r3, #4294967295
 8016c24:	e044      	b.n	8016cb0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d10d      	bne.n	8016c48 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8016c2c:	2034      	movs	r0, #52	; 0x34
 8016c2e:	f7f8 fae9 	bl	800f204 <mem_malloc>
 8016c32:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d102      	bne.n	8016c40 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8016c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8016c3e:	e037      	b.n	8016cb0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	68fa      	ldr	r2, [r7, #12]
 8016c44:	625a      	str	r2, [r3, #36]	; 0x24
 8016c46:	e005      	b.n	8016c54 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	791b      	ldrb	r3, [r3, #4]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d001      	beq.n	8016c54 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016c50:	f7ff fc92 	bl	8016578 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8016c54:	2234      	movs	r2, #52	; 0x34
 8016c56:	2100      	movs	r1, #0
 8016c58:	68f8      	ldr	r0, [r7, #12]
 8016c5a:	f003 fdfe 	bl	801a85a <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8016c5e:	f7ff fc39 	bl	80164d4 <dhcp_inc_pcb_refcount>
 8016c62:	4603      	mov	r3, r0
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d002      	beq.n	8016c6e <dhcp_start+0xa2>
    return ERR_MEM;
 8016c68:	f04f 33ff 	mov.w	r3, #4294967295
 8016c6c:	e020      	b.n	8016cb0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	2201      	movs	r2, #1
 8016c72:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016c7a:	f003 0304 	and.w	r3, r3, #4
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d105      	bne.n	8016c8e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8016c82:	2102      	movs	r1, #2
 8016c84:	68f8      	ldr	r0, [r7, #12]
 8016c86:	f000 fcc5 	bl	8017614 <dhcp_set_state>
    return ERR_OK;
 8016c8a:	2300      	movs	r3, #0
 8016c8c:	e010      	b.n	8016cb0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8016c8e:	6878      	ldr	r0, [r7, #4]
 8016c90:	f000 f8bc 	bl	8016e0c <dhcp_discover>
 8016c94:	4603      	mov	r3, r0
 8016c96:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8016c98:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d005      	beq.n	8016cac <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8016ca0:	6878      	ldr	r0, [r7, #4]
 8016ca2:	f000 fc1d 	bl	80174e0 <dhcp_release_and_stop>
    return ERR_MEM;
 8016ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8016caa:	e001      	b.n	8016cb0 <dhcp_start+0xe4>
  }
  return result;
 8016cac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	3710      	adds	r7, #16
 8016cb4:	46bd      	mov	sp, r7
 8016cb6:	bd80      	pop	{r7, pc}
 8016cb8:	08022a60 	.word	0x08022a60
 8016cbc:	08022b44 	.word	0x08022b44
 8016cc0:	08022ac0 	.word	0x08022ac0
 8016cc4:	08022b88 	.word	0x08022b88

08016cc8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b084      	sub	sp, #16
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
 8016cd0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d107      	bne.n	8016ce8 <dhcp_arp_reply+0x20>
 8016cd8:	4b0e      	ldr	r3, [pc, #56]	; (8016d14 <dhcp_arp_reply+0x4c>)
 8016cda:	f240 328b 	movw	r2, #907	; 0x38b
 8016cde:	490e      	ldr	r1, [pc, #56]	; (8016d18 <dhcp_arp_reply+0x50>)
 8016ce0:	480e      	ldr	r0, [pc, #56]	; (8016d1c <dhcp_arp_reply+0x54>)
 8016ce2:	f004 fac7 	bl	801b274 <iprintf>
 8016ce6:	e012      	b.n	8016d0e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cec:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d00c      	beq.n	8016d0e <dhcp_arp_reply+0x46>
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	795b      	ldrb	r3, [r3, #5]
 8016cf8:	2b08      	cmp	r3, #8
 8016cfa:	d108      	bne.n	8016d0e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8016cfc:	683b      	ldr	r3, [r7, #0]
 8016cfe:	681a      	ldr	r2, [r3, #0]
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	69db      	ldr	r3, [r3, #28]
 8016d04:	429a      	cmp	r2, r3
 8016d06:	d102      	bne.n	8016d0e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8016d08:	6878      	ldr	r0, [r7, #4]
 8016d0a:	f000 f809 	bl	8016d20 <dhcp_decline>
    }
  }
}
 8016d0e:	3710      	adds	r7, #16
 8016d10:	46bd      	mov	sp, r7
 8016d12:	bd80      	pop	{r7, pc}
 8016d14:	08022a60 	.word	0x08022a60
 8016d18:	08022b44 	.word	0x08022b44
 8016d1c:	08022ac0 	.word	0x08022ac0

08016d20 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8016d20:	b5b0      	push	{r4, r5, r7, lr}
 8016d22:	b08a      	sub	sp, #40	; 0x28
 8016d24:	af02      	add	r7, sp, #8
 8016d26:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d2c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8016d2e:	210c      	movs	r1, #12
 8016d30:	69b8      	ldr	r0, [r7, #24]
 8016d32:	f000 fc6f 	bl	8017614 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8016d36:	f107 030c 	add.w	r3, r7, #12
 8016d3a:	2204      	movs	r2, #4
 8016d3c:	69b9      	ldr	r1, [r7, #24]
 8016d3e:	6878      	ldr	r0, [r7, #4]
 8016d40:	f001 f8f2 	bl	8017f28 <dhcp_create_msg>
 8016d44:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016d46:	697b      	ldr	r3, [r7, #20]
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d035      	beq.n	8016db8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016d4c:	697b      	ldr	r3, [r7, #20]
 8016d4e:	685b      	ldr	r3, [r3, #4]
 8016d50:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016d52:	89b8      	ldrh	r0, [r7, #12]
 8016d54:	693b      	ldr	r3, [r7, #16]
 8016d56:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016d5a:	2304      	movs	r3, #4
 8016d5c:	2232      	movs	r2, #50	; 0x32
 8016d5e:	f000 fc73 	bl	8017648 <dhcp_option>
 8016d62:	4603      	mov	r3, r0
 8016d64:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016d66:	89bc      	ldrh	r4, [r7, #12]
 8016d68:	693b      	ldr	r3, [r7, #16]
 8016d6a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016d6e:	69bb      	ldr	r3, [r7, #24]
 8016d70:	69db      	ldr	r3, [r3, #28]
 8016d72:	4618      	mov	r0, r3
 8016d74:	f7f7 ff73 	bl	800ec5e <lwip_htonl>
 8016d78:	4603      	mov	r3, r0
 8016d7a:	461a      	mov	r2, r3
 8016d7c:	4629      	mov	r1, r5
 8016d7e:	4620      	mov	r0, r4
 8016d80:	f000 fcee 	bl	8017760 <dhcp_option_long>
 8016d84:	4603      	mov	r3, r0
 8016d86:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016d88:	89b8      	ldrh	r0, [r7, #12]
 8016d8a:	693b      	ldr	r3, [r7, #16]
 8016d8c:	33f0      	adds	r3, #240	; 0xf0
 8016d8e:	697a      	ldr	r2, [r7, #20]
 8016d90:	4619      	mov	r1, r3
 8016d92:	f001 f99f 	bl	80180d4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016d96:	4b19      	ldr	r3, [pc, #100]	; (8016dfc <dhcp_decline+0xdc>)
 8016d98:	6818      	ldr	r0, [r3, #0]
 8016d9a:	4b19      	ldr	r3, [pc, #100]	; (8016e00 <dhcp_decline+0xe0>)
 8016d9c:	9301      	str	r3, [sp, #4]
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	9300      	str	r3, [sp, #0]
 8016da2:	2343      	movs	r3, #67	; 0x43
 8016da4:	4a17      	ldr	r2, [pc, #92]	; (8016e04 <dhcp_decline+0xe4>)
 8016da6:	6979      	ldr	r1, [r7, #20]
 8016da8:	f7ff f90e 	bl	8015fc8 <udp_sendto_if_src>
 8016dac:	4603      	mov	r3, r0
 8016dae:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016db0:	6978      	ldr	r0, [r7, #20]
 8016db2:	f7f9 f9d7 	bl	8010164 <pbuf_free>
 8016db6:	e001      	b.n	8016dbc <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016db8:	23ff      	movs	r3, #255	; 0xff
 8016dba:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016dbc:	69bb      	ldr	r3, [r7, #24]
 8016dbe:	799b      	ldrb	r3, [r3, #6]
 8016dc0:	2bff      	cmp	r3, #255	; 0xff
 8016dc2:	d005      	beq.n	8016dd0 <dhcp_decline+0xb0>
    dhcp->tries++;
 8016dc4:	69bb      	ldr	r3, [r7, #24]
 8016dc6:	799b      	ldrb	r3, [r3, #6]
 8016dc8:	3301      	adds	r3, #1
 8016dca:	b2da      	uxtb	r2, r3
 8016dcc:	69bb      	ldr	r3, [r7, #24]
 8016dce:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8016dd0:	f242 7310 	movw	r3, #10000	; 0x2710
 8016dd4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016dd6:	89fb      	ldrh	r3, [r7, #14]
 8016dd8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016ddc:	4a0a      	ldr	r2, [pc, #40]	; (8016e08 <dhcp_decline+0xe8>)
 8016dde:	fb82 1203 	smull	r1, r2, r2, r3
 8016de2:	1152      	asrs	r2, r2, #5
 8016de4:	17db      	asrs	r3, r3, #31
 8016de6:	1ad3      	subs	r3, r2, r3
 8016de8:	b29a      	uxth	r2, r3
 8016dea:	69bb      	ldr	r3, [r7, #24]
 8016dec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016dee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016df2:	4618      	mov	r0, r3
 8016df4:	3720      	adds	r7, #32
 8016df6:	46bd      	mov	sp, r7
 8016df8:	bdb0      	pop	{r4, r5, r7, pc}
 8016dfa:	bf00      	nop
 8016dfc:	20000518 	.word	0x20000518
 8016e00:	08023b1c 	.word	0x08023b1c
 8016e04:	08023b20 	.word	0x08023b20
 8016e08:	10624dd3 	.word	0x10624dd3

08016e0c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8016e0c:	b580      	push	{r7, lr}
 8016e0e:	b08a      	sub	sp, #40	; 0x28
 8016e10:	af02      	add	r7, sp, #8
 8016e12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e18:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8016e1e:	69bb      	ldr	r3, [r7, #24]
 8016e20:	2200      	movs	r2, #0
 8016e22:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8016e24:	2106      	movs	r1, #6
 8016e26:	69b8      	ldr	r0, [r7, #24]
 8016e28:	f000 fbf4 	bl	8017614 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8016e2c:	f107 0308 	add.w	r3, r7, #8
 8016e30:	2201      	movs	r2, #1
 8016e32:	69b9      	ldr	r1, [r7, #24]
 8016e34:	6878      	ldr	r0, [r7, #4]
 8016e36:	f001 f877 	bl	8017f28 <dhcp_create_msg>
 8016e3a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8016e3c:	693b      	ldr	r3, [r7, #16]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d04b      	beq.n	8016eda <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016e42:	693b      	ldr	r3, [r7, #16]
 8016e44:	685b      	ldr	r3, [r3, #4]
 8016e46:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016e48:	8938      	ldrh	r0, [r7, #8]
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016e50:	2302      	movs	r3, #2
 8016e52:	2239      	movs	r2, #57	; 0x39
 8016e54:	f000 fbf8 	bl	8017648 <dhcp_option>
 8016e58:	4603      	mov	r3, r0
 8016e5a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016e5c:	8938      	ldrh	r0, [r7, #8]
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e68:	461a      	mov	r2, r3
 8016e6a:	f000 fc47 	bl	80176fc <dhcp_option_short>
 8016e6e:	4603      	mov	r3, r0
 8016e70:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016e72:	8938      	ldrh	r0, [r7, #8]
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016e7a:	2303      	movs	r3, #3
 8016e7c:	2237      	movs	r2, #55	; 0x37
 8016e7e:	f000 fbe3 	bl	8017648 <dhcp_option>
 8016e82:	4603      	mov	r3, r0
 8016e84:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016e86:	2300      	movs	r3, #0
 8016e88:	77fb      	strb	r3, [r7, #31]
 8016e8a:	e00e      	b.n	8016eaa <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016e8c:	8938      	ldrh	r0, [r7, #8]
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016e94:	7ffb      	ldrb	r3, [r7, #31]
 8016e96:	4a29      	ldr	r2, [pc, #164]	; (8016f3c <dhcp_discover+0x130>)
 8016e98:	5cd3      	ldrb	r3, [r2, r3]
 8016e9a:	461a      	mov	r2, r3
 8016e9c:	f000 fc08 	bl	80176b0 <dhcp_option_byte>
 8016ea0:	4603      	mov	r3, r0
 8016ea2:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016ea4:	7ffb      	ldrb	r3, [r7, #31]
 8016ea6:	3301      	adds	r3, #1
 8016ea8:	77fb      	strb	r3, [r7, #31]
 8016eaa:	7ffb      	ldrb	r3, [r7, #31]
 8016eac:	2b02      	cmp	r3, #2
 8016eae:	d9ed      	bls.n	8016e8c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016eb0:	8938      	ldrh	r0, [r7, #8]
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	33f0      	adds	r3, #240	; 0xf0
 8016eb6:	693a      	ldr	r2, [r7, #16]
 8016eb8:	4619      	mov	r1, r3
 8016eba:	f001 f90b 	bl	80180d4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016ebe:	4b20      	ldr	r3, [pc, #128]	; (8016f40 <dhcp_discover+0x134>)
 8016ec0:	6818      	ldr	r0, [r3, #0]
 8016ec2:	4b20      	ldr	r3, [pc, #128]	; (8016f44 <dhcp_discover+0x138>)
 8016ec4:	9301      	str	r3, [sp, #4]
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	9300      	str	r3, [sp, #0]
 8016eca:	2343      	movs	r3, #67	; 0x43
 8016ecc:	4a1e      	ldr	r2, [pc, #120]	; (8016f48 <dhcp_discover+0x13c>)
 8016ece:	6939      	ldr	r1, [r7, #16]
 8016ed0:	f7ff f87a 	bl	8015fc8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8016ed4:	6938      	ldr	r0, [r7, #16]
 8016ed6:	f7f9 f945 	bl	8010164 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8016eda:	69bb      	ldr	r3, [r7, #24]
 8016edc:	799b      	ldrb	r3, [r3, #6]
 8016ede:	2bff      	cmp	r3, #255	; 0xff
 8016ee0:	d005      	beq.n	8016eee <dhcp_discover+0xe2>
    dhcp->tries++;
 8016ee2:	69bb      	ldr	r3, [r7, #24]
 8016ee4:	799b      	ldrb	r3, [r3, #6]
 8016ee6:	3301      	adds	r3, #1
 8016ee8:	b2da      	uxtb	r2, r3
 8016eea:	69bb      	ldr	r3, [r7, #24]
 8016eec:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016eee:	69bb      	ldr	r3, [r7, #24]
 8016ef0:	799b      	ldrb	r3, [r3, #6]
 8016ef2:	2b05      	cmp	r3, #5
 8016ef4:	d80d      	bhi.n	8016f12 <dhcp_discover+0x106>
 8016ef6:	69bb      	ldr	r3, [r7, #24]
 8016ef8:	799b      	ldrb	r3, [r3, #6]
 8016efa:	461a      	mov	r2, r3
 8016efc:	2301      	movs	r3, #1
 8016efe:	4093      	lsls	r3, r2
 8016f00:	b29b      	uxth	r3, r3
 8016f02:	461a      	mov	r2, r3
 8016f04:	0152      	lsls	r2, r2, #5
 8016f06:	1ad2      	subs	r2, r2, r3
 8016f08:	0092      	lsls	r2, r2, #2
 8016f0a:	4413      	add	r3, r2
 8016f0c:	00db      	lsls	r3, r3, #3
 8016f0e:	b29b      	uxth	r3, r3
 8016f10:	e001      	b.n	8016f16 <dhcp_discover+0x10a>
 8016f12:	f64e 2360 	movw	r3, #60000	; 0xea60
 8016f16:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016f18:	897b      	ldrh	r3, [r7, #10]
 8016f1a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016f1e:	4a0b      	ldr	r2, [pc, #44]	; (8016f4c <dhcp_discover+0x140>)
 8016f20:	fb82 1203 	smull	r1, r2, r2, r3
 8016f24:	1152      	asrs	r2, r2, #5
 8016f26:	17db      	asrs	r3, r3, #31
 8016f28:	1ad3      	subs	r3, r2, r3
 8016f2a:	b29a      	uxth	r2, r3
 8016f2c:	69bb      	ldr	r3, [r7, #24]
 8016f2e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016f30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016f34:	4618      	mov	r0, r3
 8016f36:	3720      	adds	r7, #32
 8016f38:	46bd      	mov	sp, r7
 8016f3a:	bd80      	pop	{r7, pc}
 8016f3c:	20000080 	.word	0x20000080
 8016f40:	20000518 	.word	0x20000518
 8016f44:	08023b1c 	.word	0x08023b1c
 8016f48:	08023b20 	.word	0x08023b20
 8016f4c:	10624dd3 	.word	0x10624dd3

08016f50 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8016f50:	b580      	push	{r7, lr}
 8016f52:	b088      	sub	sp, #32
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d107      	bne.n	8016f6e <dhcp_bind+0x1e>
 8016f5e:	4b64      	ldr	r3, [pc, #400]	; (80170f0 <dhcp_bind+0x1a0>)
 8016f60:	f240 4215 	movw	r2, #1045	; 0x415
 8016f64:	4963      	ldr	r1, [pc, #396]	; (80170f4 <dhcp_bind+0x1a4>)
 8016f66:	4864      	ldr	r0, [pc, #400]	; (80170f8 <dhcp_bind+0x1a8>)
 8016f68:	f004 f984 	bl	801b274 <iprintf>
 8016f6c:	e0bc      	b.n	80170e8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f72:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8016f74:	69bb      	ldr	r3, [r7, #24]
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d107      	bne.n	8016f8a <dhcp_bind+0x3a>
 8016f7a:	4b5d      	ldr	r3, [pc, #372]	; (80170f0 <dhcp_bind+0x1a0>)
 8016f7c:	f240 4217 	movw	r2, #1047	; 0x417
 8016f80:	495e      	ldr	r1, [pc, #376]	; (80170fc <dhcp_bind+0x1ac>)
 8016f82:	485d      	ldr	r0, [pc, #372]	; (80170f8 <dhcp_bind+0x1a8>)
 8016f84:	f004 f976 	bl	801b274 <iprintf>
 8016f88:	e0ae      	b.n	80170e8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8016f8a:	69bb      	ldr	r3, [r7, #24]
 8016f8c:	2200      	movs	r2, #0
 8016f8e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8016f90:	69bb      	ldr	r3, [r7, #24]
 8016f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f98:	d019      	beq.n	8016fce <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016f9a:	69bb      	ldr	r3, [r7, #24]
 8016f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f9e:	331e      	adds	r3, #30
 8016fa0:	4a57      	ldr	r2, [pc, #348]	; (8017100 <dhcp_bind+0x1b0>)
 8016fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8016fa6:	095b      	lsrs	r3, r3, #5
 8016fa8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8016faa:	69fb      	ldr	r3, [r7, #28]
 8016fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016fb0:	d302      	bcc.n	8016fb8 <dhcp_bind+0x68>
      timeout = 0xffff;
 8016fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016fb6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8016fb8:	69fb      	ldr	r3, [r7, #28]
 8016fba:	b29a      	uxth	r2, r3
 8016fbc:	69bb      	ldr	r3, [r7, #24]
 8016fbe:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8016fc0:	69bb      	ldr	r3, [r7, #24]
 8016fc2:	8a9b      	ldrh	r3, [r3, #20]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d102      	bne.n	8016fce <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8016fc8:	69bb      	ldr	r3, [r7, #24]
 8016fca:	2201      	movs	r2, #1
 8016fcc:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8016fce:	69bb      	ldr	r3, [r7, #24]
 8016fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fd6:	d01d      	beq.n	8017014 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016fd8:	69bb      	ldr	r3, [r7, #24]
 8016fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fdc:	331e      	adds	r3, #30
 8016fde:	4a48      	ldr	r2, [pc, #288]	; (8017100 <dhcp_bind+0x1b0>)
 8016fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8016fe4:	095b      	lsrs	r3, r3, #5
 8016fe6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8016fe8:	69fb      	ldr	r3, [r7, #28]
 8016fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016fee:	d302      	bcc.n	8016ff6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8016ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016ff4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8016ff6:	69fb      	ldr	r3, [r7, #28]
 8016ff8:	b29a      	uxth	r2, r3
 8016ffa:	69bb      	ldr	r3, [r7, #24]
 8016ffc:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8016ffe:	69bb      	ldr	r3, [r7, #24]
 8017000:	895b      	ldrh	r3, [r3, #10]
 8017002:	2b00      	cmp	r3, #0
 8017004:	d102      	bne.n	801700c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8017006:	69bb      	ldr	r3, [r7, #24]
 8017008:	2201      	movs	r2, #1
 801700a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801700c:	69bb      	ldr	r3, [r7, #24]
 801700e:	895a      	ldrh	r2, [r3, #10]
 8017010:	69bb      	ldr	r3, [r7, #24]
 8017012:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8017014:	69bb      	ldr	r3, [r7, #24]
 8017016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017018:	f1b3 3fff 	cmp.w	r3, #4294967295
 801701c:	d01d      	beq.n	801705a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801701e:	69bb      	ldr	r3, [r7, #24]
 8017020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017022:	331e      	adds	r3, #30
 8017024:	4a36      	ldr	r2, [pc, #216]	; (8017100 <dhcp_bind+0x1b0>)
 8017026:	fba2 2303 	umull	r2, r3, r2, r3
 801702a:	095b      	lsrs	r3, r3, #5
 801702c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801702e:	69fb      	ldr	r3, [r7, #28]
 8017030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017034:	d302      	bcc.n	801703c <dhcp_bind+0xec>
      timeout = 0xffff;
 8017036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801703a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801703c:	69fb      	ldr	r3, [r7, #28]
 801703e:	b29a      	uxth	r2, r3
 8017040:	69bb      	ldr	r3, [r7, #24]
 8017042:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8017044:	69bb      	ldr	r3, [r7, #24]
 8017046:	899b      	ldrh	r3, [r3, #12]
 8017048:	2b00      	cmp	r3, #0
 801704a:	d102      	bne.n	8017052 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801704c:	69bb      	ldr	r3, [r7, #24]
 801704e:	2201      	movs	r2, #1
 8017050:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8017052:	69bb      	ldr	r3, [r7, #24]
 8017054:	899a      	ldrh	r2, [r3, #12]
 8017056:	69bb      	ldr	r3, [r7, #24]
 8017058:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801705a:	69bb      	ldr	r3, [r7, #24]
 801705c:	895a      	ldrh	r2, [r3, #10]
 801705e:	69bb      	ldr	r3, [r7, #24]
 8017060:	899b      	ldrh	r3, [r3, #12]
 8017062:	429a      	cmp	r2, r3
 8017064:	d306      	bcc.n	8017074 <dhcp_bind+0x124>
 8017066:	69bb      	ldr	r3, [r7, #24]
 8017068:	899b      	ldrh	r3, [r3, #12]
 801706a:	2b00      	cmp	r3, #0
 801706c:	d002      	beq.n	8017074 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801706e:	69bb      	ldr	r3, [r7, #24]
 8017070:	2200      	movs	r2, #0
 8017072:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8017074:	69bb      	ldr	r3, [r7, #24]
 8017076:	79db      	ldrb	r3, [r3, #7]
 8017078:	2b00      	cmp	r3, #0
 801707a:	d003      	beq.n	8017084 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801707c:	69bb      	ldr	r3, [r7, #24]
 801707e:	6a1b      	ldr	r3, [r3, #32]
 8017080:	613b      	str	r3, [r7, #16]
 8017082:	e014      	b.n	80170ae <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8017084:	69bb      	ldr	r3, [r7, #24]
 8017086:	331c      	adds	r3, #28
 8017088:	781b      	ldrb	r3, [r3, #0]
 801708a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801708c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017090:	2b00      	cmp	r3, #0
 8017092:	db02      	blt.n	801709a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8017094:	23ff      	movs	r3, #255	; 0xff
 8017096:	613b      	str	r3, [r7, #16]
 8017098:	e009      	b.n	80170ae <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801709a:	7dfb      	ldrb	r3, [r7, #23]
 801709c:	2bbf      	cmp	r3, #191	; 0xbf
 801709e:	d903      	bls.n	80170a8 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80170a0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80170a4:	613b      	str	r3, [r7, #16]
 80170a6:	e002      	b.n	80170ae <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80170a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80170ac:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80170ae:	69bb      	ldr	r3, [r7, #24]
 80170b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170b2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d108      	bne.n	80170cc <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80170ba:	69bb      	ldr	r3, [r7, #24]
 80170bc:	69da      	ldr	r2, [r3, #28]
 80170be:	693b      	ldr	r3, [r7, #16]
 80170c0:	4013      	ands	r3, r2
 80170c2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80170ca:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80170cc:	210a      	movs	r1, #10
 80170ce:	69b8      	ldr	r0, [r7, #24]
 80170d0:	f000 faa0 	bl	8017614 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80170d4:	69bb      	ldr	r3, [r7, #24]
 80170d6:	f103 011c 	add.w	r1, r3, #28
 80170da:	f107 030c 	add.w	r3, r7, #12
 80170de:	f107 0210 	add.w	r2, r7, #16
 80170e2:	6878      	ldr	r0, [r7, #4]
 80170e4:	f7f8 fbea 	bl	800f8bc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80170e8:	3720      	adds	r7, #32
 80170ea:	46bd      	mov	sp, r7
 80170ec:	bd80      	pop	{r7, pc}
 80170ee:	bf00      	nop
 80170f0:	08022a60 	.word	0x08022a60
 80170f4:	08022bc0 	.word	0x08022bc0
 80170f8:	08022ac0 	.word	0x08022ac0
 80170fc:	08022bdc 	.word	0x08022bdc
 8017100:	88888889 	.word	0x88888889

08017104 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8017104:	b580      	push	{r7, lr}
 8017106:	b08a      	sub	sp, #40	; 0x28
 8017108:	af02      	add	r7, sp, #8
 801710a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017110:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8017112:	2105      	movs	r1, #5
 8017114:	69b8      	ldr	r0, [r7, #24]
 8017116:	f000 fa7d 	bl	8017614 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801711a:	f107 030c 	add.w	r3, r7, #12
 801711e:	2203      	movs	r2, #3
 8017120:	69b9      	ldr	r1, [r7, #24]
 8017122:	6878      	ldr	r0, [r7, #4]
 8017124:	f000 ff00 	bl	8017f28 <dhcp_create_msg>
 8017128:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801712a:	697b      	ldr	r3, [r7, #20]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d04e      	beq.n	80171ce <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017130:	697b      	ldr	r3, [r7, #20]
 8017132:	685b      	ldr	r3, [r3, #4]
 8017134:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017136:	89b8      	ldrh	r0, [r7, #12]
 8017138:	693b      	ldr	r3, [r7, #16]
 801713a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801713e:	2302      	movs	r3, #2
 8017140:	2239      	movs	r2, #57	; 0x39
 8017142:	f000 fa81 	bl	8017648 <dhcp_option>
 8017146:	4603      	mov	r3, r0
 8017148:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801714a:	89b8      	ldrh	r0, [r7, #12]
 801714c:	693b      	ldr	r3, [r7, #16]
 801714e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017156:	461a      	mov	r2, r3
 8017158:	f000 fad0 	bl	80176fc <dhcp_option_short>
 801715c:	4603      	mov	r3, r0
 801715e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017160:	89b8      	ldrh	r0, [r7, #12]
 8017162:	693b      	ldr	r3, [r7, #16]
 8017164:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017168:	2303      	movs	r3, #3
 801716a:	2237      	movs	r2, #55	; 0x37
 801716c:	f000 fa6c 	bl	8017648 <dhcp_option>
 8017170:	4603      	mov	r3, r0
 8017172:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017174:	2300      	movs	r3, #0
 8017176:	77bb      	strb	r3, [r7, #30]
 8017178:	e00e      	b.n	8017198 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801717a:	89b8      	ldrh	r0, [r7, #12]
 801717c:	693b      	ldr	r3, [r7, #16]
 801717e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017182:	7fbb      	ldrb	r3, [r7, #30]
 8017184:	4a2a      	ldr	r2, [pc, #168]	; (8017230 <dhcp_renew+0x12c>)
 8017186:	5cd3      	ldrb	r3, [r2, r3]
 8017188:	461a      	mov	r2, r3
 801718a:	f000 fa91 	bl	80176b0 <dhcp_option_byte>
 801718e:	4603      	mov	r3, r0
 8017190:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017192:	7fbb      	ldrb	r3, [r7, #30]
 8017194:	3301      	adds	r3, #1
 8017196:	77bb      	strb	r3, [r7, #30]
 8017198:	7fbb      	ldrb	r3, [r7, #30]
 801719a:	2b02      	cmp	r3, #2
 801719c:	d9ed      	bls.n	801717a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801719e:	89b8      	ldrh	r0, [r7, #12]
 80171a0:	693b      	ldr	r3, [r7, #16]
 80171a2:	33f0      	adds	r3, #240	; 0xf0
 80171a4:	697a      	ldr	r2, [r7, #20]
 80171a6:	4619      	mov	r1, r3
 80171a8:	f000 ff94 	bl	80180d4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80171ac:	4b21      	ldr	r3, [pc, #132]	; (8017234 <dhcp_renew+0x130>)
 80171ae:	6818      	ldr	r0, [r3, #0]
 80171b0:	69bb      	ldr	r3, [r7, #24]
 80171b2:	f103 0218 	add.w	r2, r3, #24
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	9300      	str	r3, [sp, #0]
 80171ba:	2343      	movs	r3, #67	; 0x43
 80171bc:	6979      	ldr	r1, [r7, #20]
 80171be:	f7fe fe8f 	bl	8015ee0 <udp_sendto_if>
 80171c2:	4603      	mov	r3, r0
 80171c4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80171c6:	6978      	ldr	r0, [r7, #20]
 80171c8:	f7f8 ffcc 	bl	8010164 <pbuf_free>
 80171cc:	e001      	b.n	80171d2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80171ce:	23ff      	movs	r3, #255	; 0xff
 80171d0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80171d2:	69bb      	ldr	r3, [r7, #24]
 80171d4:	799b      	ldrb	r3, [r3, #6]
 80171d6:	2bff      	cmp	r3, #255	; 0xff
 80171d8:	d005      	beq.n	80171e6 <dhcp_renew+0xe2>
    dhcp->tries++;
 80171da:	69bb      	ldr	r3, [r7, #24]
 80171dc:	799b      	ldrb	r3, [r3, #6]
 80171de:	3301      	adds	r3, #1
 80171e0:	b2da      	uxtb	r2, r3
 80171e2:	69bb      	ldr	r3, [r7, #24]
 80171e4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80171e6:	69bb      	ldr	r3, [r7, #24]
 80171e8:	799b      	ldrb	r3, [r3, #6]
 80171ea:	2b09      	cmp	r3, #9
 80171ec:	d80a      	bhi.n	8017204 <dhcp_renew+0x100>
 80171ee:	69bb      	ldr	r3, [r7, #24]
 80171f0:	799b      	ldrb	r3, [r3, #6]
 80171f2:	b29b      	uxth	r3, r3
 80171f4:	461a      	mov	r2, r3
 80171f6:	0152      	lsls	r2, r2, #5
 80171f8:	1ad2      	subs	r2, r2, r3
 80171fa:	0092      	lsls	r2, r2, #2
 80171fc:	4413      	add	r3, r2
 80171fe:	011b      	lsls	r3, r3, #4
 8017200:	b29b      	uxth	r3, r3
 8017202:	e001      	b.n	8017208 <dhcp_renew+0x104>
 8017204:	f644 6320 	movw	r3, #20000	; 0x4e20
 8017208:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801720a:	89fb      	ldrh	r3, [r7, #14]
 801720c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017210:	4a09      	ldr	r2, [pc, #36]	; (8017238 <dhcp_renew+0x134>)
 8017212:	fb82 1203 	smull	r1, r2, r2, r3
 8017216:	1152      	asrs	r2, r2, #5
 8017218:	17db      	asrs	r3, r3, #31
 801721a:	1ad3      	subs	r3, r2, r3
 801721c:	b29a      	uxth	r2, r3
 801721e:	69bb      	ldr	r3, [r7, #24]
 8017220:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017222:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017226:	4618      	mov	r0, r3
 8017228:	3720      	adds	r7, #32
 801722a:	46bd      	mov	sp, r7
 801722c:	bd80      	pop	{r7, pc}
 801722e:	bf00      	nop
 8017230:	20000080 	.word	0x20000080
 8017234:	20000518 	.word	0x20000518
 8017238:	10624dd3 	.word	0x10624dd3

0801723c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801723c:	b580      	push	{r7, lr}
 801723e:	b08a      	sub	sp, #40	; 0x28
 8017240:	af02      	add	r7, sp, #8
 8017242:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017248:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801724a:	2104      	movs	r1, #4
 801724c:	69b8      	ldr	r0, [r7, #24]
 801724e:	f000 f9e1 	bl	8017614 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8017252:	f107 030c 	add.w	r3, r7, #12
 8017256:	2203      	movs	r2, #3
 8017258:	69b9      	ldr	r1, [r7, #24]
 801725a:	6878      	ldr	r0, [r7, #4]
 801725c:	f000 fe64 	bl	8017f28 <dhcp_create_msg>
 8017260:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8017262:	697b      	ldr	r3, [r7, #20]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d04c      	beq.n	8017302 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017268:	697b      	ldr	r3, [r7, #20]
 801726a:	685b      	ldr	r3, [r3, #4]
 801726c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801726e:	89b8      	ldrh	r0, [r7, #12]
 8017270:	693b      	ldr	r3, [r7, #16]
 8017272:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017276:	2302      	movs	r3, #2
 8017278:	2239      	movs	r2, #57	; 0x39
 801727a:	f000 f9e5 	bl	8017648 <dhcp_option>
 801727e:	4603      	mov	r3, r0
 8017280:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017282:	89b8      	ldrh	r0, [r7, #12]
 8017284:	693b      	ldr	r3, [r7, #16]
 8017286:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801728e:	461a      	mov	r2, r3
 8017290:	f000 fa34 	bl	80176fc <dhcp_option_short>
 8017294:	4603      	mov	r3, r0
 8017296:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017298:	89b8      	ldrh	r0, [r7, #12]
 801729a:	693b      	ldr	r3, [r7, #16]
 801729c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80172a0:	2303      	movs	r3, #3
 80172a2:	2237      	movs	r2, #55	; 0x37
 80172a4:	f000 f9d0 	bl	8017648 <dhcp_option>
 80172a8:	4603      	mov	r3, r0
 80172aa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80172ac:	2300      	movs	r3, #0
 80172ae:	77bb      	strb	r3, [r7, #30]
 80172b0:	e00e      	b.n	80172d0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80172b2:	89b8      	ldrh	r0, [r7, #12]
 80172b4:	693b      	ldr	r3, [r7, #16]
 80172b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80172ba:	7fbb      	ldrb	r3, [r7, #30]
 80172bc:	4a29      	ldr	r2, [pc, #164]	; (8017364 <dhcp_rebind+0x128>)
 80172be:	5cd3      	ldrb	r3, [r2, r3]
 80172c0:	461a      	mov	r2, r3
 80172c2:	f000 f9f5 	bl	80176b0 <dhcp_option_byte>
 80172c6:	4603      	mov	r3, r0
 80172c8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80172ca:	7fbb      	ldrb	r3, [r7, #30]
 80172cc:	3301      	adds	r3, #1
 80172ce:	77bb      	strb	r3, [r7, #30]
 80172d0:	7fbb      	ldrb	r3, [r7, #30]
 80172d2:	2b02      	cmp	r3, #2
 80172d4:	d9ed      	bls.n	80172b2 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80172d6:	89b8      	ldrh	r0, [r7, #12]
 80172d8:	693b      	ldr	r3, [r7, #16]
 80172da:	33f0      	adds	r3, #240	; 0xf0
 80172dc:	697a      	ldr	r2, [r7, #20]
 80172de:	4619      	mov	r1, r3
 80172e0:	f000 fef8 	bl	80180d4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80172e4:	4b20      	ldr	r3, [pc, #128]	; (8017368 <dhcp_rebind+0x12c>)
 80172e6:	6818      	ldr	r0, [r3, #0]
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	9300      	str	r3, [sp, #0]
 80172ec:	2343      	movs	r3, #67	; 0x43
 80172ee:	4a1f      	ldr	r2, [pc, #124]	; (801736c <dhcp_rebind+0x130>)
 80172f0:	6979      	ldr	r1, [r7, #20]
 80172f2:	f7fe fdf5 	bl	8015ee0 <udp_sendto_if>
 80172f6:	4603      	mov	r3, r0
 80172f8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80172fa:	6978      	ldr	r0, [r7, #20]
 80172fc:	f7f8 ff32 	bl	8010164 <pbuf_free>
 8017300:	e001      	b.n	8017306 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017302:	23ff      	movs	r3, #255	; 0xff
 8017304:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017306:	69bb      	ldr	r3, [r7, #24]
 8017308:	799b      	ldrb	r3, [r3, #6]
 801730a:	2bff      	cmp	r3, #255	; 0xff
 801730c:	d005      	beq.n	801731a <dhcp_rebind+0xde>
    dhcp->tries++;
 801730e:	69bb      	ldr	r3, [r7, #24]
 8017310:	799b      	ldrb	r3, [r3, #6]
 8017312:	3301      	adds	r3, #1
 8017314:	b2da      	uxtb	r2, r3
 8017316:	69bb      	ldr	r3, [r7, #24]
 8017318:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801731a:	69bb      	ldr	r3, [r7, #24]
 801731c:	799b      	ldrb	r3, [r3, #6]
 801731e:	2b09      	cmp	r3, #9
 8017320:	d80a      	bhi.n	8017338 <dhcp_rebind+0xfc>
 8017322:	69bb      	ldr	r3, [r7, #24]
 8017324:	799b      	ldrb	r3, [r3, #6]
 8017326:	b29b      	uxth	r3, r3
 8017328:	461a      	mov	r2, r3
 801732a:	0152      	lsls	r2, r2, #5
 801732c:	1ad2      	subs	r2, r2, r3
 801732e:	0092      	lsls	r2, r2, #2
 8017330:	4413      	add	r3, r2
 8017332:	00db      	lsls	r3, r3, #3
 8017334:	b29b      	uxth	r3, r3
 8017336:	e001      	b.n	801733c <dhcp_rebind+0x100>
 8017338:	f242 7310 	movw	r3, #10000	; 0x2710
 801733c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801733e:	89fb      	ldrh	r3, [r7, #14]
 8017340:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017344:	4a0a      	ldr	r2, [pc, #40]	; (8017370 <dhcp_rebind+0x134>)
 8017346:	fb82 1203 	smull	r1, r2, r2, r3
 801734a:	1152      	asrs	r2, r2, #5
 801734c:	17db      	asrs	r3, r3, #31
 801734e:	1ad3      	subs	r3, r2, r3
 8017350:	b29a      	uxth	r2, r3
 8017352:	69bb      	ldr	r3, [r7, #24]
 8017354:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017356:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801735a:	4618      	mov	r0, r3
 801735c:	3720      	adds	r7, #32
 801735e:	46bd      	mov	sp, r7
 8017360:	bd80      	pop	{r7, pc}
 8017362:	bf00      	nop
 8017364:	20000080 	.word	0x20000080
 8017368:	20000518 	.word	0x20000518
 801736c:	08023b20 	.word	0x08023b20
 8017370:	10624dd3 	.word	0x10624dd3

08017374 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8017374:	b5b0      	push	{r4, r5, r7, lr}
 8017376:	b08a      	sub	sp, #40	; 0x28
 8017378:	af02      	add	r7, sp, #8
 801737a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017380:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8017382:	2103      	movs	r1, #3
 8017384:	69b8      	ldr	r0, [r7, #24]
 8017386:	f000 f945 	bl	8017614 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801738a:	f107 030c 	add.w	r3, r7, #12
 801738e:	2203      	movs	r2, #3
 8017390:	69b9      	ldr	r1, [r7, #24]
 8017392:	6878      	ldr	r0, [r7, #4]
 8017394:	f000 fdc8 	bl	8017f28 <dhcp_create_msg>
 8017398:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801739a:	697b      	ldr	r3, [r7, #20]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d066      	beq.n	801746e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80173a0:	697b      	ldr	r3, [r7, #20]
 80173a2:	685b      	ldr	r3, [r3, #4]
 80173a4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80173a6:	89b8      	ldrh	r0, [r7, #12]
 80173a8:	693b      	ldr	r3, [r7, #16]
 80173aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80173ae:	2302      	movs	r3, #2
 80173b0:	2239      	movs	r2, #57	; 0x39
 80173b2:	f000 f949 	bl	8017648 <dhcp_option>
 80173b6:	4603      	mov	r3, r0
 80173b8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80173ba:	89b8      	ldrh	r0, [r7, #12]
 80173bc:	693b      	ldr	r3, [r7, #16]
 80173be:	33f0      	adds	r3, #240	; 0xf0
 80173c0:	f44f 7210 	mov.w	r2, #576	; 0x240
 80173c4:	4619      	mov	r1, r3
 80173c6:	f000 f999 	bl	80176fc <dhcp_option_short>
 80173ca:	4603      	mov	r3, r0
 80173cc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80173ce:	89b8      	ldrh	r0, [r7, #12]
 80173d0:	693b      	ldr	r3, [r7, #16]
 80173d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80173d6:	2304      	movs	r3, #4
 80173d8:	2232      	movs	r2, #50	; 0x32
 80173da:	f000 f935 	bl	8017648 <dhcp_option>
 80173de:	4603      	mov	r3, r0
 80173e0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80173e2:	89bc      	ldrh	r4, [r7, #12]
 80173e4:	693b      	ldr	r3, [r7, #16]
 80173e6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80173ea:	69bb      	ldr	r3, [r7, #24]
 80173ec:	69db      	ldr	r3, [r3, #28]
 80173ee:	4618      	mov	r0, r3
 80173f0:	f7f7 fc35 	bl	800ec5e <lwip_htonl>
 80173f4:	4603      	mov	r3, r0
 80173f6:	461a      	mov	r2, r3
 80173f8:	4629      	mov	r1, r5
 80173fa:	4620      	mov	r0, r4
 80173fc:	f000 f9b0 	bl	8017760 <dhcp_option_long>
 8017400:	4603      	mov	r3, r0
 8017402:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017404:	89b8      	ldrh	r0, [r7, #12]
 8017406:	693b      	ldr	r3, [r7, #16]
 8017408:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801740c:	2303      	movs	r3, #3
 801740e:	2237      	movs	r2, #55	; 0x37
 8017410:	f000 f91a 	bl	8017648 <dhcp_option>
 8017414:	4603      	mov	r3, r0
 8017416:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017418:	2300      	movs	r3, #0
 801741a:	77bb      	strb	r3, [r7, #30]
 801741c:	e00e      	b.n	801743c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801741e:	89b8      	ldrh	r0, [r7, #12]
 8017420:	693b      	ldr	r3, [r7, #16]
 8017422:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017426:	7fbb      	ldrb	r3, [r7, #30]
 8017428:	4a29      	ldr	r2, [pc, #164]	; (80174d0 <dhcp_reboot+0x15c>)
 801742a:	5cd3      	ldrb	r3, [r2, r3]
 801742c:	461a      	mov	r2, r3
 801742e:	f000 f93f 	bl	80176b0 <dhcp_option_byte>
 8017432:	4603      	mov	r3, r0
 8017434:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017436:	7fbb      	ldrb	r3, [r7, #30]
 8017438:	3301      	adds	r3, #1
 801743a:	77bb      	strb	r3, [r7, #30]
 801743c:	7fbb      	ldrb	r3, [r7, #30]
 801743e:	2b02      	cmp	r3, #2
 8017440:	d9ed      	bls.n	801741e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017442:	89b8      	ldrh	r0, [r7, #12]
 8017444:	693b      	ldr	r3, [r7, #16]
 8017446:	33f0      	adds	r3, #240	; 0xf0
 8017448:	697a      	ldr	r2, [r7, #20]
 801744a:	4619      	mov	r1, r3
 801744c:	f000 fe42 	bl	80180d4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017450:	4b20      	ldr	r3, [pc, #128]	; (80174d4 <dhcp_reboot+0x160>)
 8017452:	6818      	ldr	r0, [r3, #0]
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	9300      	str	r3, [sp, #0]
 8017458:	2343      	movs	r3, #67	; 0x43
 801745a:	4a1f      	ldr	r2, [pc, #124]	; (80174d8 <dhcp_reboot+0x164>)
 801745c:	6979      	ldr	r1, [r7, #20]
 801745e:	f7fe fd3f 	bl	8015ee0 <udp_sendto_if>
 8017462:	4603      	mov	r3, r0
 8017464:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017466:	6978      	ldr	r0, [r7, #20]
 8017468:	f7f8 fe7c 	bl	8010164 <pbuf_free>
 801746c:	e001      	b.n	8017472 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801746e:	23ff      	movs	r3, #255	; 0xff
 8017470:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017472:	69bb      	ldr	r3, [r7, #24]
 8017474:	799b      	ldrb	r3, [r3, #6]
 8017476:	2bff      	cmp	r3, #255	; 0xff
 8017478:	d005      	beq.n	8017486 <dhcp_reboot+0x112>
    dhcp->tries++;
 801747a:	69bb      	ldr	r3, [r7, #24]
 801747c:	799b      	ldrb	r3, [r3, #6]
 801747e:	3301      	adds	r3, #1
 8017480:	b2da      	uxtb	r2, r3
 8017482:	69bb      	ldr	r3, [r7, #24]
 8017484:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8017486:	69bb      	ldr	r3, [r7, #24]
 8017488:	799b      	ldrb	r3, [r3, #6]
 801748a:	2b09      	cmp	r3, #9
 801748c:	d80a      	bhi.n	80174a4 <dhcp_reboot+0x130>
 801748e:	69bb      	ldr	r3, [r7, #24]
 8017490:	799b      	ldrb	r3, [r3, #6]
 8017492:	b29b      	uxth	r3, r3
 8017494:	461a      	mov	r2, r3
 8017496:	0152      	lsls	r2, r2, #5
 8017498:	1ad2      	subs	r2, r2, r3
 801749a:	0092      	lsls	r2, r2, #2
 801749c:	4413      	add	r3, r2
 801749e:	00db      	lsls	r3, r3, #3
 80174a0:	b29b      	uxth	r3, r3
 80174a2:	e001      	b.n	80174a8 <dhcp_reboot+0x134>
 80174a4:	f242 7310 	movw	r3, #10000	; 0x2710
 80174a8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80174aa:	89fb      	ldrh	r3, [r7, #14]
 80174ac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80174b0:	4a0a      	ldr	r2, [pc, #40]	; (80174dc <dhcp_reboot+0x168>)
 80174b2:	fb82 1203 	smull	r1, r2, r2, r3
 80174b6:	1152      	asrs	r2, r2, #5
 80174b8:	17db      	asrs	r3, r3, #31
 80174ba:	1ad3      	subs	r3, r2, r3
 80174bc:	b29a      	uxth	r2, r3
 80174be:	69bb      	ldr	r3, [r7, #24]
 80174c0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80174c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80174c6:	4618      	mov	r0, r3
 80174c8:	3720      	adds	r7, #32
 80174ca:	46bd      	mov	sp, r7
 80174cc:	bdb0      	pop	{r4, r5, r7, pc}
 80174ce:	bf00      	nop
 80174d0:	20000080 	.word	0x20000080
 80174d4:	20000518 	.word	0x20000518
 80174d8:	08023b20 	.word	0x08023b20
 80174dc:	10624dd3 	.word	0x10624dd3

080174e0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80174e0:	b5b0      	push	{r4, r5, r7, lr}
 80174e2:	b08a      	sub	sp, #40	; 0x28
 80174e4:	af02      	add	r7, sp, #8
 80174e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174ec:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80174ee:	69fb      	ldr	r3, [r7, #28]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	f000 8084 	beq.w	80175fe <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80174f6:	69fb      	ldr	r3, [r7, #28]
 80174f8:	795b      	ldrb	r3, [r3, #5]
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	f000 8081 	beq.w	8017602 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8017500:	69fb      	ldr	r3, [r7, #28]
 8017502:	699b      	ldr	r3, [r3, #24]
 8017504:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8017506:	69fb      	ldr	r3, [r7, #28]
 8017508:	2200      	movs	r2, #0
 801750a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801750c:	69fb      	ldr	r3, [r7, #28]
 801750e:	2200      	movs	r2, #0
 8017510:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8017512:	69fb      	ldr	r3, [r7, #28]
 8017514:	2200      	movs	r2, #0
 8017516:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8017518:	69fb      	ldr	r3, [r7, #28]
 801751a:	2200      	movs	r2, #0
 801751c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801751e:	69fb      	ldr	r3, [r7, #28]
 8017520:	2200      	movs	r2, #0
 8017522:	631a      	str	r2, [r3, #48]	; 0x30
 8017524:	69fb      	ldr	r3, [r7, #28]
 8017526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017528:	69fb      	ldr	r3, [r7, #28]
 801752a:	62da      	str	r2, [r3, #44]	; 0x2c
 801752c:	69fb      	ldr	r3, [r7, #28]
 801752e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017530:	69fb      	ldr	r3, [r7, #28]
 8017532:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8017534:	69fb      	ldr	r3, [r7, #28]
 8017536:	2200      	movs	r2, #0
 8017538:	829a      	strh	r2, [r3, #20]
 801753a:	69fb      	ldr	r3, [r7, #28]
 801753c:	8a9a      	ldrh	r2, [r3, #20]
 801753e:	69fb      	ldr	r3, [r7, #28]
 8017540:	825a      	strh	r2, [r3, #18]
 8017542:	69fb      	ldr	r3, [r7, #28]
 8017544:	8a5a      	ldrh	r2, [r3, #18]
 8017546:	69fb      	ldr	r3, [r7, #28]
 8017548:	821a      	strh	r2, [r3, #16]
 801754a:	69fb      	ldr	r3, [r7, #28]
 801754c:	8a1a      	ldrh	r2, [r3, #16]
 801754e:	69fb      	ldr	r3, [r7, #28]
 8017550:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8017552:	6878      	ldr	r0, [r7, #4]
 8017554:	f000 fdec 	bl	8018130 <dhcp_supplied_address>
 8017558:	4603      	mov	r3, r0
 801755a:	2b00      	cmp	r3, #0
 801755c:	d03b      	beq.n	80175d6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801755e:	f107 030e 	add.w	r3, r7, #14
 8017562:	2207      	movs	r2, #7
 8017564:	69f9      	ldr	r1, [r7, #28]
 8017566:	6878      	ldr	r0, [r7, #4]
 8017568:	f000 fcde 	bl	8017f28 <dhcp_create_msg>
 801756c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801756e:	69bb      	ldr	r3, [r7, #24]
 8017570:	2b00      	cmp	r3, #0
 8017572:	d030      	beq.n	80175d6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017574:	69bb      	ldr	r3, [r7, #24]
 8017576:	685b      	ldr	r3, [r3, #4]
 8017578:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801757a:	89f8      	ldrh	r0, [r7, #14]
 801757c:	697b      	ldr	r3, [r7, #20]
 801757e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017582:	2304      	movs	r3, #4
 8017584:	2236      	movs	r2, #54	; 0x36
 8017586:	f000 f85f 	bl	8017648 <dhcp_option>
 801758a:	4603      	mov	r3, r0
 801758c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801758e:	89fc      	ldrh	r4, [r7, #14]
 8017590:	697b      	ldr	r3, [r7, #20]
 8017592:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8017596:	693b      	ldr	r3, [r7, #16]
 8017598:	4618      	mov	r0, r3
 801759a:	f7f7 fb60 	bl	800ec5e <lwip_htonl>
 801759e:	4603      	mov	r3, r0
 80175a0:	461a      	mov	r2, r3
 80175a2:	4629      	mov	r1, r5
 80175a4:	4620      	mov	r0, r4
 80175a6:	f000 f8db 	bl	8017760 <dhcp_option_long>
 80175aa:	4603      	mov	r3, r0
 80175ac:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80175ae:	89f8      	ldrh	r0, [r7, #14]
 80175b0:	697b      	ldr	r3, [r7, #20]
 80175b2:	33f0      	adds	r3, #240	; 0xf0
 80175b4:	69ba      	ldr	r2, [r7, #24]
 80175b6:	4619      	mov	r1, r3
 80175b8:	f000 fd8c 	bl	80180d4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80175bc:	4b13      	ldr	r3, [pc, #76]	; (801760c <dhcp_release_and_stop+0x12c>)
 80175be:	6818      	ldr	r0, [r3, #0]
 80175c0:	f107 0210 	add.w	r2, r7, #16
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	9300      	str	r3, [sp, #0]
 80175c8:	2343      	movs	r3, #67	; 0x43
 80175ca:	69b9      	ldr	r1, [r7, #24]
 80175cc:	f7fe fc88 	bl	8015ee0 <udp_sendto_if>
      pbuf_free(p_out);
 80175d0:	69b8      	ldr	r0, [r7, #24]
 80175d2:	f7f8 fdc7 	bl	8010164 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80175d6:	4b0e      	ldr	r3, [pc, #56]	; (8017610 <dhcp_release_and_stop+0x130>)
 80175d8:	4a0d      	ldr	r2, [pc, #52]	; (8017610 <dhcp_release_and_stop+0x130>)
 80175da:	490d      	ldr	r1, [pc, #52]	; (8017610 <dhcp_release_and_stop+0x130>)
 80175dc:	6878      	ldr	r0, [r7, #4]
 80175de:	f7f8 f96d 	bl	800f8bc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80175e2:	2100      	movs	r1, #0
 80175e4:	69f8      	ldr	r0, [r7, #28]
 80175e6:	f000 f815 	bl	8017614 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80175ea:	69fb      	ldr	r3, [r7, #28]
 80175ec:	791b      	ldrb	r3, [r3, #4]
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d008      	beq.n	8017604 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80175f2:	f7fe ffc1 	bl	8016578 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80175f6:	69fb      	ldr	r3, [r7, #28]
 80175f8:	2200      	movs	r2, #0
 80175fa:	711a      	strb	r2, [r3, #4]
 80175fc:	e002      	b.n	8017604 <dhcp_release_and_stop+0x124>
    return;
 80175fe:	bf00      	nop
 8017600:	e000      	b.n	8017604 <dhcp_release_and_stop+0x124>
    return;
 8017602:	bf00      	nop
  }
}
 8017604:	3720      	adds	r7, #32
 8017606:	46bd      	mov	sp, r7
 8017608:	bdb0      	pop	{r4, r5, r7, pc}
 801760a:	bf00      	nop
 801760c:	20000518 	.word	0x20000518
 8017610:	08023b1c 	.word	0x08023b1c

08017614 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8017614:	b480      	push	{r7}
 8017616:	b083      	sub	sp, #12
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
 801761c:	460b      	mov	r3, r1
 801761e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	795b      	ldrb	r3, [r3, #5]
 8017624:	78fa      	ldrb	r2, [r7, #3]
 8017626:	429a      	cmp	r2, r3
 8017628:	d008      	beq.n	801763c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	78fa      	ldrb	r2, [r7, #3]
 801762e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	2200      	movs	r2, #0
 8017634:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	2200      	movs	r2, #0
 801763a:	811a      	strh	r2, [r3, #8]
  }
}
 801763c:	bf00      	nop
 801763e:	370c      	adds	r7, #12
 8017640:	46bd      	mov	sp, r7
 8017642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017646:	4770      	bx	lr

08017648 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8017648:	b580      	push	{r7, lr}
 801764a:	b082      	sub	sp, #8
 801764c:	af00      	add	r7, sp, #0
 801764e:	6039      	str	r1, [r7, #0]
 8017650:	4611      	mov	r1, r2
 8017652:	461a      	mov	r2, r3
 8017654:	4603      	mov	r3, r0
 8017656:	80fb      	strh	r3, [r7, #6]
 8017658:	460b      	mov	r3, r1
 801765a:	717b      	strb	r3, [r7, #5]
 801765c:	4613      	mov	r3, r2
 801765e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8017660:	88fa      	ldrh	r2, [r7, #6]
 8017662:	793b      	ldrb	r3, [r7, #4]
 8017664:	4413      	add	r3, r2
 8017666:	3302      	adds	r3, #2
 8017668:	2b44      	cmp	r3, #68	; 0x44
 801766a:	d906      	bls.n	801767a <dhcp_option+0x32>
 801766c:	4b0d      	ldr	r3, [pc, #52]	; (80176a4 <dhcp_option+0x5c>)
 801766e:	f240 529a 	movw	r2, #1434	; 0x59a
 8017672:	490d      	ldr	r1, [pc, #52]	; (80176a8 <dhcp_option+0x60>)
 8017674:	480d      	ldr	r0, [pc, #52]	; (80176ac <dhcp_option+0x64>)
 8017676:	f003 fdfd 	bl	801b274 <iprintf>
  options[options_out_len++] = option_type;
 801767a:	88fb      	ldrh	r3, [r7, #6]
 801767c:	1c5a      	adds	r2, r3, #1
 801767e:	80fa      	strh	r2, [r7, #6]
 8017680:	461a      	mov	r2, r3
 8017682:	683b      	ldr	r3, [r7, #0]
 8017684:	4413      	add	r3, r2
 8017686:	797a      	ldrb	r2, [r7, #5]
 8017688:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801768a:	88fb      	ldrh	r3, [r7, #6]
 801768c:	1c5a      	adds	r2, r3, #1
 801768e:	80fa      	strh	r2, [r7, #6]
 8017690:	461a      	mov	r2, r3
 8017692:	683b      	ldr	r3, [r7, #0]
 8017694:	4413      	add	r3, r2
 8017696:	793a      	ldrb	r2, [r7, #4]
 8017698:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801769a:	88fb      	ldrh	r3, [r7, #6]
}
 801769c:	4618      	mov	r0, r3
 801769e:	3708      	adds	r7, #8
 80176a0:	46bd      	mov	sp, r7
 80176a2:	bd80      	pop	{r7, pc}
 80176a4:	08022a60 	.word	0x08022a60
 80176a8:	08022bf4 	.word	0x08022bf4
 80176ac:	08022ac0 	.word	0x08022ac0

080176b0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b082      	sub	sp, #8
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	4603      	mov	r3, r0
 80176b8:	6039      	str	r1, [r7, #0]
 80176ba:	80fb      	strh	r3, [r7, #6]
 80176bc:	4613      	mov	r3, r2
 80176be:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80176c0:	88fb      	ldrh	r3, [r7, #6]
 80176c2:	2b43      	cmp	r3, #67	; 0x43
 80176c4:	d906      	bls.n	80176d4 <dhcp_option_byte+0x24>
 80176c6:	4b0a      	ldr	r3, [pc, #40]	; (80176f0 <dhcp_option_byte+0x40>)
 80176c8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80176cc:	4909      	ldr	r1, [pc, #36]	; (80176f4 <dhcp_option_byte+0x44>)
 80176ce:	480a      	ldr	r0, [pc, #40]	; (80176f8 <dhcp_option_byte+0x48>)
 80176d0:	f003 fdd0 	bl	801b274 <iprintf>
  options[options_out_len++] = value;
 80176d4:	88fb      	ldrh	r3, [r7, #6]
 80176d6:	1c5a      	adds	r2, r3, #1
 80176d8:	80fa      	strh	r2, [r7, #6]
 80176da:	461a      	mov	r2, r3
 80176dc:	683b      	ldr	r3, [r7, #0]
 80176de:	4413      	add	r3, r2
 80176e0:	797a      	ldrb	r2, [r7, #5]
 80176e2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80176e4:	88fb      	ldrh	r3, [r7, #6]
}
 80176e6:	4618      	mov	r0, r3
 80176e8:	3708      	adds	r7, #8
 80176ea:	46bd      	mov	sp, r7
 80176ec:	bd80      	pop	{r7, pc}
 80176ee:	bf00      	nop
 80176f0:	08022a60 	.word	0x08022a60
 80176f4:	08022c38 	.word	0x08022c38
 80176f8:	08022ac0 	.word	0x08022ac0

080176fc <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80176fc:	b580      	push	{r7, lr}
 80176fe:	b082      	sub	sp, #8
 8017700:	af00      	add	r7, sp, #0
 8017702:	4603      	mov	r3, r0
 8017704:	6039      	str	r1, [r7, #0]
 8017706:	80fb      	strh	r3, [r7, #6]
 8017708:	4613      	mov	r3, r2
 801770a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801770c:	88fb      	ldrh	r3, [r7, #6]
 801770e:	3302      	adds	r3, #2
 8017710:	2b44      	cmp	r3, #68	; 0x44
 8017712:	d906      	bls.n	8017722 <dhcp_option_short+0x26>
 8017714:	4b0f      	ldr	r3, [pc, #60]	; (8017754 <dhcp_option_short+0x58>)
 8017716:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801771a:	490f      	ldr	r1, [pc, #60]	; (8017758 <dhcp_option_short+0x5c>)
 801771c:	480f      	ldr	r0, [pc, #60]	; (801775c <dhcp_option_short+0x60>)
 801771e:	f003 fda9 	bl	801b274 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8017722:	88bb      	ldrh	r3, [r7, #4]
 8017724:	0a1b      	lsrs	r3, r3, #8
 8017726:	b29a      	uxth	r2, r3
 8017728:	88fb      	ldrh	r3, [r7, #6]
 801772a:	1c59      	adds	r1, r3, #1
 801772c:	80f9      	strh	r1, [r7, #6]
 801772e:	4619      	mov	r1, r3
 8017730:	683b      	ldr	r3, [r7, #0]
 8017732:	440b      	add	r3, r1
 8017734:	b2d2      	uxtb	r2, r2
 8017736:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8017738:	88fb      	ldrh	r3, [r7, #6]
 801773a:	1c5a      	adds	r2, r3, #1
 801773c:	80fa      	strh	r2, [r7, #6]
 801773e:	461a      	mov	r2, r3
 8017740:	683b      	ldr	r3, [r7, #0]
 8017742:	4413      	add	r3, r2
 8017744:	88ba      	ldrh	r2, [r7, #4]
 8017746:	b2d2      	uxtb	r2, r2
 8017748:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801774a:	88fb      	ldrh	r3, [r7, #6]
}
 801774c:	4618      	mov	r0, r3
 801774e:	3708      	adds	r7, #8
 8017750:	46bd      	mov	sp, r7
 8017752:	bd80      	pop	{r7, pc}
 8017754:	08022a60 	.word	0x08022a60
 8017758:	08022c70 	.word	0x08022c70
 801775c:	08022ac0 	.word	0x08022ac0

08017760 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8017760:	b580      	push	{r7, lr}
 8017762:	b084      	sub	sp, #16
 8017764:	af00      	add	r7, sp, #0
 8017766:	4603      	mov	r3, r0
 8017768:	60b9      	str	r1, [r7, #8]
 801776a:	607a      	str	r2, [r7, #4]
 801776c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801776e:	89fb      	ldrh	r3, [r7, #14]
 8017770:	3304      	adds	r3, #4
 8017772:	2b44      	cmp	r3, #68	; 0x44
 8017774:	d906      	bls.n	8017784 <dhcp_option_long+0x24>
 8017776:	4b19      	ldr	r3, [pc, #100]	; (80177dc <dhcp_option_long+0x7c>)
 8017778:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801777c:	4918      	ldr	r1, [pc, #96]	; (80177e0 <dhcp_option_long+0x80>)
 801777e:	4819      	ldr	r0, [pc, #100]	; (80177e4 <dhcp_option_long+0x84>)
 8017780:	f003 fd78 	bl	801b274 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	0e1a      	lsrs	r2, r3, #24
 8017788:	89fb      	ldrh	r3, [r7, #14]
 801778a:	1c59      	adds	r1, r3, #1
 801778c:	81f9      	strh	r1, [r7, #14]
 801778e:	4619      	mov	r1, r3
 8017790:	68bb      	ldr	r3, [r7, #8]
 8017792:	440b      	add	r3, r1
 8017794:	b2d2      	uxtb	r2, r2
 8017796:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	0c1a      	lsrs	r2, r3, #16
 801779c:	89fb      	ldrh	r3, [r7, #14]
 801779e:	1c59      	adds	r1, r3, #1
 80177a0:	81f9      	strh	r1, [r7, #14]
 80177a2:	4619      	mov	r1, r3
 80177a4:	68bb      	ldr	r3, [r7, #8]
 80177a6:	440b      	add	r3, r1
 80177a8:	b2d2      	uxtb	r2, r2
 80177aa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	0a1a      	lsrs	r2, r3, #8
 80177b0:	89fb      	ldrh	r3, [r7, #14]
 80177b2:	1c59      	adds	r1, r3, #1
 80177b4:	81f9      	strh	r1, [r7, #14]
 80177b6:	4619      	mov	r1, r3
 80177b8:	68bb      	ldr	r3, [r7, #8]
 80177ba:	440b      	add	r3, r1
 80177bc:	b2d2      	uxtb	r2, r2
 80177be:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80177c0:	89fb      	ldrh	r3, [r7, #14]
 80177c2:	1c5a      	adds	r2, r3, #1
 80177c4:	81fa      	strh	r2, [r7, #14]
 80177c6:	461a      	mov	r2, r3
 80177c8:	68bb      	ldr	r3, [r7, #8]
 80177ca:	4413      	add	r3, r2
 80177cc:	687a      	ldr	r2, [r7, #4]
 80177ce:	b2d2      	uxtb	r2, r2
 80177d0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80177d2:	89fb      	ldrh	r3, [r7, #14]
}
 80177d4:	4618      	mov	r0, r3
 80177d6:	3710      	adds	r7, #16
 80177d8:	46bd      	mov	sp, r7
 80177da:	bd80      	pop	{r7, pc}
 80177dc:	08022a60 	.word	0x08022a60
 80177e0:	08022cac 	.word	0x08022cac
 80177e4:	08022ac0 	.word	0x08022ac0

080177e8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80177e8:	b580      	push	{r7, lr}
 80177ea:	b090      	sub	sp, #64	; 0x40
 80177ec:	af00      	add	r7, sp, #0
 80177ee:	6078      	str	r0, [r7, #4]
 80177f0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80177f2:	2300      	movs	r3, #0
 80177f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80177f6:	2300      	movs	r3, #0
 80177f8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80177fa:	2208      	movs	r2, #8
 80177fc:	2100      	movs	r1, #0
 80177fe:	48be      	ldr	r0, [pc, #760]	; (8017af8 <dhcp_parse_reply+0x310>)
 8017800:	f003 f82b 	bl	801a85a <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	895b      	ldrh	r3, [r3, #10]
 8017808:	2b2b      	cmp	r3, #43	; 0x2b
 801780a:	d802      	bhi.n	8017812 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801780c:	f06f 0301 	mvn.w	r3, #1
 8017810:	e2a8      	b.n	8017d64 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	685b      	ldr	r3, [r3, #4]
 8017816:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8017818:	23f0      	movs	r3, #240	; 0xf0
 801781a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	891b      	ldrh	r3, [r3, #8]
 8017820:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8017826:	e00c      	b.n	8017842 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8017828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801782a:	895b      	ldrh	r3, [r3, #10]
 801782c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801782e:	1ad3      	subs	r3, r2, r3
 8017830:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8017832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017834:	895b      	ldrh	r3, [r3, #10]
 8017836:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8017838:	1ad3      	subs	r3, r2, r3
 801783a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8017842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017844:	2b00      	cmp	r3, #0
 8017846:	d004      	beq.n	8017852 <dhcp_parse_reply+0x6a>
 8017848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801784a:	895b      	ldrh	r3, [r3, #10]
 801784c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801784e:	429a      	cmp	r2, r3
 8017850:	d2ea      	bcs.n	8017828 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8017852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017854:	2b00      	cmp	r3, #0
 8017856:	d102      	bne.n	801785e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8017858:	f06f 0301 	mvn.w	r3, #1
 801785c:	e282      	b.n	8017d64 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 801785e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017860:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8017862:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017864:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8017866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017868:	685b      	ldr	r3, [r3, #4]
 801786a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801786c:	e23a      	b.n	8017ce4 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 801786e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017870:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017872:	4413      	add	r3, r2
 8017874:	781b      	ldrb	r3, [r3, #0]
 8017876:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8017878:	2300      	movs	r3, #0
 801787a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801787e:	f04f 33ff 	mov.w	r3, #4294967295
 8017882:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8017884:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017886:	3302      	adds	r3, #2
 8017888:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801788a:	8bfa      	ldrh	r2, [r7, #30]
 801788c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801788e:	429a      	cmp	r2, r3
 8017890:	d202      	bcs.n	8017898 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8017892:	f06f 0301 	mvn.w	r3, #1
 8017896:	e265      	b.n	8017d64 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8017898:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801789a:	3301      	adds	r3, #1
 801789c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801789e:	8952      	ldrh	r2, [r2, #10]
 80178a0:	4293      	cmp	r3, r2
 80178a2:	da07      	bge.n	80178b4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80178a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80178a6:	3301      	adds	r3, #1
 80178a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80178aa:	4413      	add	r3, r2
 80178ac:	781b      	ldrb	r3, [r3, #0]
 80178ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80178b2:	e00b      	b.n	80178cc <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80178b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d004      	beq.n	80178c6 <dhcp_parse_reply+0xde>
 80178bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	685b      	ldr	r3, [r3, #4]
 80178c2:	781b      	ldrb	r3, [r3, #0]
 80178c4:	e000      	b.n	80178c8 <dhcp_parse_reply+0xe0>
 80178c6:	2300      	movs	r3, #0
 80178c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80178cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80178d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80178d4:	7dfb      	ldrb	r3, [r7, #23]
 80178d6:	2b3b      	cmp	r3, #59	; 0x3b
 80178d8:	f200 812d 	bhi.w	8017b36 <dhcp_parse_reply+0x34e>
 80178dc:	a201      	add	r2, pc, #4	; (adr r2, 80178e4 <dhcp_parse_reply+0xfc>)
 80178de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80178e2:	bf00      	nop
 80178e4:	080179d5 	.word	0x080179d5
 80178e8:	080179e5 	.word	0x080179e5
 80178ec:	08017b37 	.word	0x08017b37
 80178f0:	08017a07 	.word	0x08017a07
 80178f4:	08017b37 	.word	0x08017b37
 80178f8:	08017b37 	.word	0x08017b37
 80178fc:	08017b37 	.word	0x08017b37
 8017900:	08017b37 	.word	0x08017b37
 8017904:	08017b37 	.word	0x08017b37
 8017908:	08017b37 	.word	0x08017b37
 801790c:	08017b37 	.word	0x08017b37
 8017910:	08017b37 	.word	0x08017b37
 8017914:	08017b37 	.word	0x08017b37
 8017918:	08017b37 	.word	0x08017b37
 801791c:	08017b37 	.word	0x08017b37
 8017920:	08017b37 	.word	0x08017b37
 8017924:	08017b37 	.word	0x08017b37
 8017928:	08017b37 	.word	0x08017b37
 801792c:	08017b37 	.word	0x08017b37
 8017930:	08017b37 	.word	0x08017b37
 8017934:	08017b37 	.word	0x08017b37
 8017938:	08017b37 	.word	0x08017b37
 801793c:	08017b37 	.word	0x08017b37
 8017940:	08017b37 	.word	0x08017b37
 8017944:	08017b37 	.word	0x08017b37
 8017948:	08017b37 	.word	0x08017b37
 801794c:	08017b37 	.word	0x08017b37
 8017950:	08017b37 	.word	0x08017b37
 8017954:	08017b37 	.word	0x08017b37
 8017958:	08017b37 	.word	0x08017b37
 801795c:	08017b37 	.word	0x08017b37
 8017960:	08017b37 	.word	0x08017b37
 8017964:	08017b37 	.word	0x08017b37
 8017968:	08017b37 	.word	0x08017b37
 801796c:	08017b37 	.word	0x08017b37
 8017970:	08017b37 	.word	0x08017b37
 8017974:	08017b37 	.word	0x08017b37
 8017978:	08017b37 	.word	0x08017b37
 801797c:	08017b37 	.word	0x08017b37
 8017980:	08017b37 	.word	0x08017b37
 8017984:	08017b37 	.word	0x08017b37
 8017988:	08017b37 	.word	0x08017b37
 801798c:	08017b37 	.word	0x08017b37
 8017990:	08017b37 	.word	0x08017b37
 8017994:	08017b37 	.word	0x08017b37
 8017998:	08017b37 	.word	0x08017b37
 801799c:	08017b37 	.word	0x08017b37
 80179a0:	08017b37 	.word	0x08017b37
 80179a4:	08017b37 	.word	0x08017b37
 80179a8:	08017b37 	.word	0x08017b37
 80179ac:	08017b37 	.word	0x08017b37
 80179b0:	08017a33 	.word	0x08017a33
 80179b4:	08017a55 	.word	0x08017a55
 80179b8:	08017a91 	.word	0x08017a91
 80179bc:	08017ab3 	.word	0x08017ab3
 80179c0:	08017b37 	.word	0x08017b37
 80179c4:	08017b37 	.word	0x08017b37
 80179c8:	08017b37 	.word	0x08017b37
 80179cc:	08017ad5 	.word	0x08017ad5
 80179d0:	08017b15 	.word	0x08017b15
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80179d4:	2300      	movs	r3, #0
 80179d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80179da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80179de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80179e2:	e0ac      	b.n	8017b3e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80179e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80179e8:	2b04      	cmp	r3, #4
 80179ea:	d009      	beq.n	8017a00 <dhcp_parse_reply+0x218>
 80179ec:	4b43      	ldr	r3, [pc, #268]	; (8017afc <dhcp_parse_reply+0x314>)
 80179ee:	f240 622e 	movw	r2, #1582	; 0x62e
 80179f2:	4943      	ldr	r1, [pc, #268]	; (8017b00 <dhcp_parse_reply+0x318>)
 80179f4:	4843      	ldr	r0, [pc, #268]	; (8017b04 <dhcp_parse_reply+0x31c>)
 80179f6:	f003 fc3d 	bl	801b274 <iprintf>
 80179fa:	f06f 0305 	mvn.w	r3, #5
 80179fe:	e1b1      	b.n	8017d64 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8017a00:	2306      	movs	r3, #6
 8017a02:	623b      	str	r3, [r7, #32]
        break;
 8017a04:	e09b      	b.n	8017b3e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8017a06:	2304      	movs	r3, #4
 8017a08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8017a0c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017a10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017a14:	429a      	cmp	r2, r3
 8017a16:	d209      	bcs.n	8017a2c <dhcp_parse_reply+0x244>
 8017a18:	4b38      	ldr	r3, [pc, #224]	; (8017afc <dhcp_parse_reply+0x314>)
 8017a1a:	f240 6233 	movw	r2, #1587	; 0x633
 8017a1e:	493a      	ldr	r1, [pc, #232]	; (8017b08 <dhcp_parse_reply+0x320>)
 8017a20:	4838      	ldr	r0, [pc, #224]	; (8017b04 <dhcp_parse_reply+0x31c>)
 8017a22:	f003 fc27 	bl	801b274 <iprintf>
 8017a26:	f06f 0305 	mvn.w	r3, #5
 8017a2a:	e19b      	b.n	8017d64 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8017a2c:	2307      	movs	r3, #7
 8017a2e:	623b      	str	r3, [r7, #32]
        break;
 8017a30:	e085      	b.n	8017b3e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017a32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a36:	2b04      	cmp	r3, #4
 8017a38:	d009      	beq.n	8017a4e <dhcp_parse_reply+0x266>
 8017a3a:	4b30      	ldr	r3, [pc, #192]	; (8017afc <dhcp_parse_reply+0x314>)
 8017a3c:	f240 6241 	movw	r2, #1601	; 0x641
 8017a40:	492f      	ldr	r1, [pc, #188]	; (8017b00 <dhcp_parse_reply+0x318>)
 8017a42:	4830      	ldr	r0, [pc, #192]	; (8017b04 <dhcp_parse_reply+0x31c>)
 8017a44:	f003 fc16 	bl	801b274 <iprintf>
 8017a48:	f06f 0305 	mvn.w	r3, #5
 8017a4c:	e18a      	b.n	8017d64 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8017a4e:	2303      	movs	r3, #3
 8017a50:	623b      	str	r3, [r7, #32]
        break;
 8017a52:	e074      	b.n	8017b3e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8017a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a58:	2b01      	cmp	r3, #1
 8017a5a:	d009      	beq.n	8017a70 <dhcp_parse_reply+0x288>
 8017a5c:	4b27      	ldr	r3, [pc, #156]	; (8017afc <dhcp_parse_reply+0x314>)
 8017a5e:	f240 624f 	movw	r2, #1615	; 0x64f
 8017a62:	492a      	ldr	r1, [pc, #168]	; (8017b0c <dhcp_parse_reply+0x324>)
 8017a64:	4827      	ldr	r0, [pc, #156]	; (8017b04 <dhcp_parse_reply+0x31c>)
 8017a66:	f003 fc05 	bl	801b274 <iprintf>
 8017a6a:	f06f 0305 	mvn.w	r3, #5
 8017a6e:	e179      	b.n	8017d64 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8017a70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017a72:	2bf0      	cmp	r3, #240	; 0xf0
 8017a74:	d009      	beq.n	8017a8a <dhcp_parse_reply+0x2a2>
 8017a76:	4b21      	ldr	r3, [pc, #132]	; (8017afc <dhcp_parse_reply+0x314>)
 8017a78:	f240 6251 	movw	r2, #1617	; 0x651
 8017a7c:	4924      	ldr	r1, [pc, #144]	; (8017b10 <dhcp_parse_reply+0x328>)
 8017a7e:	4821      	ldr	r0, [pc, #132]	; (8017b04 <dhcp_parse_reply+0x31c>)
 8017a80:	f003 fbf8 	bl	801b274 <iprintf>
 8017a84:	f06f 0305 	mvn.w	r3, #5
 8017a88:	e16c      	b.n	8017d64 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	623b      	str	r3, [r7, #32]
        break;
 8017a8e:	e056      	b.n	8017b3e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8017a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a94:	2b01      	cmp	r3, #1
 8017a96:	d009      	beq.n	8017aac <dhcp_parse_reply+0x2c4>
 8017a98:	4b18      	ldr	r3, [pc, #96]	; (8017afc <dhcp_parse_reply+0x314>)
 8017a9a:	f240 6255 	movw	r2, #1621	; 0x655
 8017a9e:	491b      	ldr	r1, [pc, #108]	; (8017b0c <dhcp_parse_reply+0x324>)
 8017aa0:	4818      	ldr	r0, [pc, #96]	; (8017b04 <dhcp_parse_reply+0x31c>)
 8017aa2:	f003 fbe7 	bl	801b274 <iprintf>
 8017aa6:	f06f 0305 	mvn.w	r3, #5
 8017aaa:	e15b      	b.n	8017d64 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8017aac:	2301      	movs	r3, #1
 8017aae:	623b      	str	r3, [r7, #32]
        break;
 8017ab0:	e045      	b.n	8017b3e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ab6:	2b04      	cmp	r3, #4
 8017ab8:	d009      	beq.n	8017ace <dhcp_parse_reply+0x2e6>
 8017aba:	4b10      	ldr	r3, [pc, #64]	; (8017afc <dhcp_parse_reply+0x314>)
 8017abc:	f240 6259 	movw	r2, #1625	; 0x659
 8017ac0:	490f      	ldr	r1, [pc, #60]	; (8017b00 <dhcp_parse_reply+0x318>)
 8017ac2:	4810      	ldr	r0, [pc, #64]	; (8017b04 <dhcp_parse_reply+0x31c>)
 8017ac4:	f003 fbd6 	bl	801b274 <iprintf>
 8017ac8:	f06f 0305 	mvn.w	r3, #5
 8017acc:	e14a      	b.n	8017d64 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8017ace:	2302      	movs	r3, #2
 8017ad0:	623b      	str	r3, [r7, #32]
        break;
 8017ad2:	e034      	b.n	8017b3e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ad8:	2b04      	cmp	r3, #4
 8017ada:	d009      	beq.n	8017af0 <dhcp_parse_reply+0x308>
 8017adc:	4b07      	ldr	r3, [pc, #28]	; (8017afc <dhcp_parse_reply+0x314>)
 8017ade:	f240 625d 	movw	r2, #1629	; 0x65d
 8017ae2:	4907      	ldr	r1, [pc, #28]	; (8017b00 <dhcp_parse_reply+0x318>)
 8017ae4:	4807      	ldr	r0, [pc, #28]	; (8017b04 <dhcp_parse_reply+0x31c>)
 8017ae6:	f003 fbc5 	bl	801b274 <iprintf>
 8017aea:	f06f 0305 	mvn.w	r3, #5
 8017aee:	e139      	b.n	8017d64 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8017af0:	2304      	movs	r3, #4
 8017af2:	623b      	str	r3, [r7, #32]
        break;
 8017af4:	e023      	b.n	8017b3e <dhcp_parse_reply+0x356>
 8017af6:	bf00      	nop
 8017af8:	20007644 	.word	0x20007644
 8017afc:	08022a60 	.word	0x08022a60
 8017b00:	08022ce8 	.word	0x08022ce8
 8017b04:	08022ac0 	.word	0x08022ac0
 8017b08:	08022cf4 	.word	0x08022cf4
 8017b0c:	08022d08 	.word	0x08022d08
 8017b10:	08022d14 	.word	0x08022d14
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b18:	2b04      	cmp	r3, #4
 8017b1a:	d009      	beq.n	8017b30 <dhcp_parse_reply+0x348>
 8017b1c:	4b93      	ldr	r3, [pc, #588]	; (8017d6c <dhcp_parse_reply+0x584>)
 8017b1e:	f240 6261 	movw	r2, #1633	; 0x661
 8017b22:	4993      	ldr	r1, [pc, #588]	; (8017d70 <dhcp_parse_reply+0x588>)
 8017b24:	4893      	ldr	r0, [pc, #588]	; (8017d74 <dhcp_parse_reply+0x58c>)
 8017b26:	f003 fba5 	bl	801b274 <iprintf>
 8017b2a:	f06f 0305 	mvn.w	r3, #5
 8017b2e:	e119      	b.n	8017d64 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8017b30:	2305      	movs	r3, #5
 8017b32:	623b      	str	r3, [r7, #32]
        break;
 8017b34:	e003      	b.n	8017b3e <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8017b36:	2300      	movs	r3, #0
 8017b38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8017b3c:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8017b3e:	7dfb      	ldrb	r3, [r7, #23]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d103      	bne.n	8017b4c <dhcp_parse_reply+0x364>
      offset++;
 8017b44:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017b46:	3301      	adds	r3, #1
 8017b48:	877b      	strh	r3, [r7, #58]	; 0x3a
 8017b4a:	e0a1      	b.n	8017c90 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8017b4c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b52:	4413      	add	r3, r2
 8017b54:	3302      	adds	r3, #2
 8017b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017b5a:	db02      	blt.n	8017b62 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8017b5c:	f06f 0301 	mvn.w	r3, #1
 8017b60:	e100      	b.n	8017d64 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8017b62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b66:	b29a      	uxth	r2, r3
 8017b68:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017b6a:	4413      	add	r3, r2
 8017b6c:	b29b      	uxth	r3, r3
 8017b6e:	3302      	adds	r3, #2
 8017b70:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8017b72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	f000 808a 	beq.w	8017c90 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8017b80:	6a3b      	ldr	r3, [r7, #32]
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	db02      	blt.n	8017b8c <dhcp_parse_reply+0x3a4>
 8017b86:	6a3b      	ldr	r3, [r7, #32]
 8017b88:	2b07      	cmp	r3, #7
 8017b8a:	dd06      	ble.n	8017b9a <dhcp_parse_reply+0x3b2>
 8017b8c:	4b77      	ldr	r3, [pc, #476]	; (8017d6c <dhcp_parse_reply+0x584>)
 8017b8e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8017b92:	4979      	ldr	r1, [pc, #484]	; (8017d78 <dhcp_parse_reply+0x590>)
 8017b94:	4877      	ldr	r0, [pc, #476]	; (8017d74 <dhcp_parse_reply+0x58c>)
 8017b96:	f003 fb6d 	bl	801b274 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8017b9a:	4a78      	ldr	r2, [pc, #480]	; (8017d7c <dhcp_parse_reply+0x594>)
 8017b9c:	6a3b      	ldr	r3, [r7, #32]
 8017b9e:	4413      	add	r3, r2
 8017ba0:	781b      	ldrb	r3, [r3, #0]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d174      	bne.n	8017c90 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8017ba6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017baa:	2b04      	cmp	r3, #4
 8017bac:	bf28      	it	cs
 8017bae:	2304      	movcs	r3, #4
 8017bb0:	b2db      	uxtb	r3, r3
 8017bb2:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8017bb4:	8bfb      	ldrh	r3, [r7, #30]
 8017bb6:	8aba      	ldrh	r2, [r7, #20]
 8017bb8:	f107 0108 	add.w	r1, r7, #8
 8017bbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017bbe:	f7f8 fccb 	bl	8010558 <pbuf_copy_partial>
 8017bc2:	4603      	mov	r3, r0
 8017bc4:	461a      	mov	r2, r3
 8017bc6:	8abb      	ldrh	r3, [r7, #20]
 8017bc8:	4293      	cmp	r3, r2
 8017bca:	d002      	beq.n	8017bd2 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8017bcc:	f06f 0301 	mvn.w	r3, #1
 8017bd0:	e0c8      	b.n	8017d64 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8017bd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017bd6:	2b04      	cmp	r3, #4
 8017bd8:	d933      	bls.n	8017c42 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8017bda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017bde:	f003 0303 	and.w	r3, r3, #3
 8017be2:	b2db      	uxtb	r3, r3
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d009      	beq.n	8017bfc <dhcp_parse_reply+0x414>
 8017be8:	4b60      	ldr	r3, [pc, #384]	; (8017d6c <dhcp_parse_reply+0x584>)
 8017bea:	f240 6281 	movw	r2, #1665	; 0x681
 8017bee:	4964      	ldr	r1, [pc, #400]	; (8017d80 <dhcp_parse_reply+0x598>)
 8017bf0:	4860      	ldr	r0, [pc, #384]	; (8017d74 <dhcp_parse_reply+0x58c>)
 8017bf2:	f003 fb3f 	bl	801b274 <iprintf>
 8017bf6:	f06f 0305 	mvn.w	r3, #5
 8017bfa:	e0b3      	b.n	8017d64 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8017bfc:	4a5f      	ldr	r2, [pc, #380]	; (8017d7c <dhcp_parse_reply+0x594>)
 8017bfe:	6a3b      	ldr	r3, [r7, #32]
 8017c00:	4413      	add	r3, r2
 8017c02:	2201      	movs	r2, #1
 8017c04:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8017c06:	68bb      	ldr	r3, [r7, #8]
 8017c08:	4618      	mov	r0, r3
 8017c0a:	f7f7 f828 	bl	800ec5e <lwip_htonl>
 8017c0e:	4601      	mov	r1, r0
 8017c10:	4a5c      	ldr	r2, [pc, #368]	; (8017d84 <dhcp_parse_reply+0x59c>)
 8017c12:	6a3b      	ldr	r3, [r7, #32]
 8017c14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8017c18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017c1c:	3b04      	subs	r3, #4
 8017c1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8017c22:	8bfb      	ldrh	r3, [r7, #30]
 8017c24:	3304      	adds	r3, #4
 8017c26:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8017c28:	8a7a      	ldrh	r2, [r7, #18]
 8017c2a:	8bfb      	ldrh	r3, [r7, #30]
 8017c2c:	429a      	cmp	r2, r3
 8017c2e:	d202      	bcs.n	8017c36 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8017c30:	f06f 0301 	mvn.w	r3, #1
 8017c34:	e096      	b.n	8017d64 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8017c36:	8a7b      	ldrh	r3, [r7, #18]
 8017c38:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8017c3a:	6a3b      	ldr	r3, [r7, #32]
 8017c3c:	3301      	adds	r3, #1
 8017c3e:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8017c40:	e79e      	b.n	8017b80 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8017c42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017c46:	2b04      	cmp	r3, #4
 8017c48:	d106      	bne.n	8017c58 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8017c4a:	68bb      	ldr	r3, [r7, #8]
 8017c4c:	4618      	mov	r0, r3
 8017c4e:	f7f7 f806 	bl	800ec5e <lwip_htonl>
 8017c52:	4603      	mov	r3, r0
 8017c54:	60bb      	str	r3, [r7, #8]
 8017c56:	e011      	b.n	8017c7c <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8017c58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017c5c:	2b01      	cmp	r3, #1
 8017c5e:	d009      	beq.n	8017c74 <dhcp_parse_reply+0x48c>
 8017c60:	4b42      	ldr	r3, [pc, #264]	; (8017d6c <dhcp_parse_reply+0x584>)
 8017c62:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8017c66:	4948      	ldr	r1, [pc, #288]	; (8017d88 <dhcp_parse_reply+0x5a0>)
 8017c68:	4842      	ldr	r0, [pc, #264]	; (8017d74 <dhcp_parse_reply+0x58c>)
 8017c6a:	f003 fb03 	bl	801b274 <iprintf>
 8017c6e:	f06f 0305 	mvn.w	r3, #5
 8017c72:	e077      	b.n	8017d64 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8017c74:	f107 0308 	add.w	r3, r7, #8
 8017c78:	781b      	ldrb	r3, [r3, #0]
 8017c7a:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8017c7c:	4a3f      	ldr	r2, [pc, #252]	; (8017d7c <dhcp_parse_reply+0x594>)
 8017c7e:	6a3b      	ldr	r3, [r7, #32]
 8017c80:	4413      	add	r3, r2
 8017c82:	2201      	movs	r2, #1
 8017c84:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8017c86:	68ba      	ldr	r2, [r7, #8]
 8017c88:	493e      	ldr	r1, [pc, #248]	; (8017d84 <dhcp_parse_reply+0x59c>)
 8017c8a:	6a3b      	ldr	r3, [r7, #32]
 8017c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8017c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c92:	895b      	ldrh	r3, [r3, #10]
 8017c94:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017c96:	429a      	cmp	r2, r3
 8017c98:	d324      	bcc.n	8017ce4 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8017c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c9c:	895b      	ldrh	r3, [r3, #10]
 8017c9e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017ca0:	1ad3      	subs	r3, r2, r3
 8017ca2:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8017ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ca6:	895b      	ldrh	r3, [r3, #10]
 8017ca8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8017caa:	1ad3      	subs	r3, r2, r3
 8017cac:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8017cae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017cb0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017cb2:	429a      	cmp	r2, r3
 8017cb4:	d213      	bcs.n	8017cde <dhcp_parse_reply+0x4f6>
        q = q->next;
 8017cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8017cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d109      	bne.n	8017cd6 <dhcp_parse_reply+0x4ee>
 8017cc2:	4b2a      	ldr	r3, [pc, #168]	; (8017d6c <dhcp_parse_reply+0x584>)
 8017cc4:	f240 629d 	movw	r2, #1693	; 0x69d
 8017cc8:	4930      	ldr	r1, [pc, #192]	; (8017d8c <dhcp_parse_reply+0x5a4>)
 8017cca:	482a      	ldr	r0, [pc, #168]	; (8017d74 <dhcp_parse_reply+0x58c>)
 8017ccc:	f003 fad2 	bl	801b274 <iprintf>
 8017cd0:	f06f 0305 	mvn.w	r3, #5
 8017cd4:	e046      	b.n	8017d64 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8017cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cd8:	685b      	ldr	r3, [r3, #4]
 8017cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017cdc:	e002      	b.n	8017ce4 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8017cde:	f06f 0301 	mvn.w	r3, #1
 8017ce2:	e03f      	b.n	8017d64 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8017ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d00a      	beq.n	8017d00 <dhcp_parse_reply+0x518>
 8017cea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017cec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017cee:	429a      	cmp	r2, r3
 8017cf0:	d206      	bcs.n	8017d00 <dhcp_parse_reply+0x518>
 8017cf2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017cf4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017cf6:	4413      	add	r3, r2
 8017cf8:	781b      	ldrb	r3, [r3, #0]
 8017cfa:	2bff      	cmp	r3, #255	; 0xff
 8017cfc:	f47f adb7 	bne.w	801786e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8017d00:	4b1e      	ldr	r3, [pc, #120]	; (8017d7c <dhcp_parse_reply+0x594>)
 8017d02:	781b      	ldrb	r3, [r3, #0]
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d018      	beq.n	8017d3a <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8017d08:	4b1e      	ldr	r3, [pc, #120]	; (8017d84 <dhcp_parse_reply+0x59c>)
 8017d0a:	681b      	ldr	r3, [r3, #0]
 8017d0c:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8017d0e:	4b1b      	ldr	r3, [pc, #108]	; (8017d7c <dhcp_parse_reply+0x594>)
 8017d10:	2200      	movs	r2, #0
 8017d12:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	2b01      	cmp	r3, #1
 8017d18:	d102      	bne.n	8017d20 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8017d1a:	2301      	movs	r3, #1
 8017d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017d1e:	e00c      	b.n	8017d3a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8017d20:	68fb      	ldr	r3, [r7, #12]
 8017d22:	2b02      	cmp	r3, #2
 8017d24:	d102      	bne.n	8017d2c <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8017d26:	2301      	movs	r3, #1
 8017d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d2a:	e006      	b.n	8017d3a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8017d2c:	68fb      	ldr	r3, [r7, #12]
 8017d2e:	2b03      	cmp	r3, #3
 8017d30:	d103      	bne.n	8017d3a <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8017d32:	2301      	movs	r3, #1
 8017d34:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8017d36:	2301      	movs	r3, #1
 8017d38:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8017d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d006      	beq.n	8017d4e <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8017d40:	2300      	movs	r3, #0
 8017d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8017d44:	236c      	movs	r3, #108	; 0x6c
 8017d46:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8017d48:	23ec      	movs	r3, #236	; 0xec
 8017d4a:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8017d4c:	e569      	b.n	8017822 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8017d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d006      	beq.n	8017d62 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8017d54:	2300      	movs	r3, #0
 8017d56:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8017d58:	232c      	movs	r3, #44	; 0x2c
 8017d5a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8017d5c:	236c      	movs	r3, #108	; 0x6c
 8017d5e:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8017d60:	e55f      	b.n	8017822 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8017d62:	2300      	movs	r3, #0
}
 8017d64:	4618      	mov	r0, r3
 8017d66:	3740      	adds	r7, #64	; 0x40
 8017d68:	46bd      	mov	sp, r7
 8017d6a:	bd80      	pop	{r7, pc}
 8017d6c:	08022a60 	.word	0x08022a60
 8017d70:	08022ce8 	.word	0x08022ce8
 8017d74:	08022ac0 	.word	0x08022ac0
 8017d78:	08022d2c 	.word	0x08022d2c
 8017d7c:	20007644 	.word	0x20007644
 8017d80:	08022d40 	.word	0x08022d40
 8017d84:	2000764c 	.word	0x2000764c
 8017d88:	08022d58 	.word	0x08022d58
 8017d8c:	08022d6c 	.word	0x08022d6c

08017d90 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b08a      	sub	sp, #40	; 0x28
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	60f8      	str	r0, [r7, #12]
 8017d98:	60b9      	str	r1, [r7, #8]
 8017d9a:	607a      	str	r2, [r7, #4]
 8017d9c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8017d9e:	4b5f      	ldr	r3, [pc, #380]	; (8017f1c <dhcp_recv+0x18c>)
 8017da0:	685b      	ldr	r3, [r3, #4]
 8017da2:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017da4:	6a3b      	ldr	r3, [r7, #32]
 8017da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017da8:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	685b      	ldr	r3, [r3, #4]
 8017dae:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8017db0:	69fb      	ldr	r3, [r7, #28]
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	f000 809d 	beq.w	8017ef2 <dhcp_recv+0x162>
 8017db8:	69fb      	ldr	r3, [r7, #28]
 8017dba:	791b      	ldrb	r3, [r3, #4]
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	f000 8098 	beq.w	8017ef2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	895b      	ldrh	r3, [r3, #10]
 8017dc6:	2b2b      	cmp	r3, #43	; 0x2b
 8017dc8:	f240 8095 	bls.w	8017ef6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8017dcc:	69bb      	ldr	r3, [r7, #24]
 8017dce:	781b      	ldrb	r3, [r3, #0]
 8017dd0:	2b02      	cmp	r3, #2
 8017dd2:	f040 8092 	bne.w	8017efa <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017ddc:	e012      	b.n	8017e04 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8017dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017de2:	6a3a      	ldr	r2, [r7, #32]
 8017de4:	4413      	add	r3, r2
 8017de6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8017dea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017dee:	69b9      	ldr	r1, [r7, #24]
 8017df0:	440b      	add	r3, r1
 8017df2:	7f1b      	ldrb	r3, [r3, #28]
 8017df4:	429a      	cmp	r2, r3
 8017df6:	f040 8082 	bne.w	8017efe <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017dfe:	3301      	adds	r3, #1
 8017e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017e04:	6a3b      	ldr	r3, [r7, #32]
 8017e06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017e0a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017e0e:	429a      	cmp	r2, r3
 8017e10:	d203      	bcs.n	8017e1a <dhcp_recv+0x8a>
 8017e12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e16:	2b05      	cmp	r3, #5
 8017e18:	d9e1      	bls.n	8017dde <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8017e1a:	69bb      	ldr	r3, [r7, #24]
 8017e1c:	685b      	ldr	r3, [r3, #4]
 8017e1e:	4618      	mov	r0, r3
 8017e20:	f7f6 ff1d 	bl	800ec5e <lwip_htonl>
 8017e24:	4602      	mov	r2, r0
 8017e26:	69fb      	ldr	r3, [r7, #28]
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	429a      	cmp	r2, r3
 8017e2c:	d169      	bne.n	8017f02 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8017e2e:	69f9      	ldr	r1, [r7, #28]
 8017e30:	6878      	ldr	r0, [r7, #4]
 8017e32:	f7ff fcd9 	bl	80177e8 <dhcp_parse_reply>
 8017e36:	4603      	mov	r3, r0
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d164      	bne.n	8017f06 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8017e3c:	4b38      	ldr	r3, [pc, #224]	; (8017f20 <dhcp_recv+0x190>)
 8017e3e:	785b      	ldrb	r3, [r3, #1]
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d062      	beq.n	8017f0a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	685b      	ldr	r3, [r3, #4]
 8017e48:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8017e4a:	4b36      	ldr	r3, [pc, #216]	; (8017f24 <dhcp_recv+0x194>)
 8017e4c:	685b      	ldr	r3, [r3, #4]
 8017e4e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8017e50:	7cfb      	ldrb	r3, [r7, #19]
 8017e52:	2b05      	cmp	r3, #5
 8017e54:	d12a      	bne.n	8017eac <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8017e56:	69fb      	ldr	r3, [r7, #28]
 8017e58:	795b      	ldrb	r3, [r3, #5]
 8017e5a:	2b01      	cmp	r3, #1
 8017e5c:	d112      	bne.n	8017e84 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8017e5e:	6979      	ldr	r1, [r7, #20]
 8017e60:	6a38      	ldr	r0, [r7, #32]
 8017e62:	f7fe fe53 	bl	8016b0c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8017e66:	6a3b      	ldr	r3, [r7, #32]
 8017e68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017e6c:	f003 0308 	and.w	r3, r3, #8
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d003      	beq.n	8017e7c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8017e74:	6a38      	ldr	r0, [r7, #32]
 8017e76:	f7fe fbc3 	bl	8016600 <dhcp_check>
 8017e7a:	e047      	b.n	8017f0c <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8017e7c:	6a38      	ldr	r0, [r7, #32]
 8017e7e:	f7ff f867 	bl	8016f50 <dhcp_bind>
 8017e82:	e043      	b.n	8017f0c <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8017e84:	69fb      	ldr	r3, [r7, #28]
 8017e86:	795b      	ldrb	r3, [r3, #5]
 8017e88:	2b03      	cmp	r3, #3
 8017e8a:	d007      	beq.n	8017e9c <dhcp_recv+0x10c>
 8017e8c:	69fb      	ldr	r3, [r7, #28]
 8017e8e:	795b      	ldrb	r3, [r3, #5]
 8017e90:	2b04      	cmp	r3, #4
 8017e92:	d003      	beq.n	8017e9c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8017e94:	69fb      	ldr	r3, [r7, #28]
 8017e96:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8017e98:	2b05      	cmp	r3, #5
 8017e9a:	d137      	bne.n	8017f0c <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8017e9c:	6979      	ldr	r1, [r7, #20]
 8017e9e:	6a38      	ldr	r0, [r7, #32]
 8017ea0:	f7fe fe34 	bl	8016b0c <dhcp_handle_ack>
      dhcp_bind(netif);
 8017ea4:	6a38      	ldr	r0, [r7, #32]
 8017ea6:	f7ff f853 	bl	8016f50 <dhcp_bind>
 8017eaa:	e02f      	b.n	8017f0c <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8017eac:	7cfb      	ldrb	r3, [r7, #19]
 8017eae:	2b06      	cmp	r3, #6
 8017eb0:	d113      	bne.n	8017eda <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017eb2:	69fb      	ldr	r3, [r7, #28]
 8017eb4:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8017eb6:	2b03      	cmp	r3, #3
 8017eb8:	d00b      	beq.n	8017ed2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017eba:	69fb      	ldr	r3, [r7, #28]
 8017ebc:	795b      	ldrb	r3, [r3, #5]
 8017ebe:	2b01      	cmp	r3, #1
 8017ec0:	d007      	beq.n	8017ed2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017ec2:	69fb      	ldr	r3, [r7, #28]
 8017ec4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017ec6:	2b04      	cmp	r3, #4
 8017ec8:	d003      	beq.n	8017ed2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017eca:	69fb      	ldr	r3, [r7, #28]
 8017ecc:	795b      	ldrb	r3, [r3, #5]
 8017ece:	2b05      	cmp	r3, #5
 8017ed0:	d103      	bne.n	8017eda <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8017ed2:	6a38      	ldr	r0, [r7, #32]
 8017ed4:	f7fe fb7a 	bl	80165cc <dhcp_handle_nak>
 8017ed8:	e018      	b.n	8017f0c <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8017eda:	7cfb      	ldrb	r3, [r7, #19]
 8017edc:	2b02      	cmp	r3, #2
 8017ede:	d108      	bne.n	8017ef2 <dhcp_recv+0x162>
 8017ee0:	69fb      	ldr	r3, [r7, #28]
 8017ee2:	795b      	ldrb	r3, [r3, #5]
 8017ee4:	2b06      	cmp	r3, #6
 8017ee6:	d104      	bne.n	8017ef2 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8017ee8:	6979      	ldr	r1, [r7, #20]
 8017eea:	6a38      	ldr	r0, [r7, #32]
 8017eec:	f7fe fbbc 	bl	8016668 <dhcp_handle_offer>
 8017ef0:	e00c      	b.n	8017f0c <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 8017ef2:	bf00      	nop
 8017ef4:	e00a      	b.n	8017f0c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8017ef6:	bf00      	nop
 8017ef8:	e008      	b.n	8017f0c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8017efa:	bf00      	nop
 8017efc:	e006      	b.n	8017f0c <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 8017efe:	bf00      	nop
 8017f00:	e004      	b.n	8017f0c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8017f02:	bf00      	nop
 8017f04:	e002      	b.n	8017f0c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8017f06:	bf00      	nop
 8017f08:	e000      	b.n	8017f0c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8017f0a:	bf00      	nop
  pbuf_free(p);
 8017f0c:	6878      	ldr	r0, [r7, #4]
 8017f0e:	f7f8 f929 	bl	8010164 <pbuf_free>
}
 8017f12:	bf00      	nop
 8017f14:	3728      	adds	r7, #40	; 0x28
 8017f16:	46bd      	mov	sp, r7
 8017f18:	bd80      	pop	{r7, pc}
 8017f1a:	bf00      	nop
 8017f1c:	20004504 	.word	0x20004504
 8017f20:	20007644 	.word	0x20007644
 8017f24:	2000764c 	.word	0x2000764c

08017f28 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8017f28:	b580      	push	{r7, lr}
 8017f2a:	b088      	sub	sp, #32
 8017f2c:	af00      	add	r7, sp, #0
 8017f2e:	60f8      	str	r0, [r7, #12]
 8017f30:	60b9      	str	r1, [r7, #8]
 8017f32:	603b      	str	r3, [r7, #0]
 8017f34:	4613      	mov	r3, r2
 8017f36:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8017f38:	68fb      	ldr	r3, [r7, #12]
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d108      	bne.n	8017f50 <dhcp_create_msg+0x28>
 8017f3e:	4b5f      	ldr	r3, [pc, #380]	; (80180bc <dhcp_create_msg+0x194>)
 8017f40:	f240 7269 	movw	r2, #1897	; 0x769
 8017f44:	495e      	ldr	r1, [pc, #376]	; (80180c0 <dhcp_create_msg+0x198>)
 8017f46:	485f      	ldr	r0, [pc, #380]	; (80180c4 <dhcp_create_msg+0x19c>)
 8017f48:	f003 f994 	bl	801b274 <iprintf>
 8017f4c:	2300      	movs	r3, #0
 8017f4e:	e0b1      	b.n	80180b4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8017f50:	68bb      	ldr	r3, [r7, #8]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d108      	bne.n	8017f68 <dhcp_create_msg+0x40>
 8017f56:	4b59      	ldr	r3, [pc, #356]	; (80180bc <dhcp_create_msg+0x194>)
 8017f58:	f240 726a 	movw	r2, #1898	; 0x76a
 8017f5c:	495a      	ldr	r1, [pc, #360]	; (80180c8 <dhcp_create_msg+0x1a0>)
 8017f5e:	4859      	ldr	r0, [pc, #356]	; (80180c4 <dhcp_create_msg+0x19c>)
 8017f60:	f003 f988 	bl	801b274 <iprintf>
 8017f64:	2300      	movs	r3, #0
 8017f66:	e0a5      	b.n	80180b4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8017f68:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017f6c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8017f70:	2036      	movs	r0, #54	; 0x36
 8017f72:	f7f7 fe17 	bl	800fba4 <pbuf_alloc>
 8017f76:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8017f78:	69bb      	ldr	r3, [r7, #24]
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d101      	bne.n	8017f82 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8017f7e:	2300      	movs	r3, #0
 8017f80:	e098      	b.n	80180b4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8017f82:	69bb      	ldr	r3, [r7, #24]
 8017f84:	895b      	ldrh	r3, [r3, #10]
 8017f86:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8017f8a:	d206      	bcs.n	8017f9a <dhcp_create_msg+0x72>
 8017f8c:	4b4b      	ldr	r3, [pc, #300]	; (80180bc <dhcp_create_msg+0x194>)
 8017f8e:	f240 7272 	movw	r2, #1906	; 0x772
 8017f92:	494e      	ldr	r1, [pc, #312]	; (80180cc <dhcp_create_msg+0x1a4>)
 8017f94:	484b      	ldr	r0, [pc, #300]	; (80180c4 <dhcp_create_msg+0x19c>)
 8017f96:	f003 f96d 	bl	801b274 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8017f9a:	79fb      	ldrb	r3, [r7, #7]
 8017f9c:	2b03      	cmp	r3, #3
 8017f9e:	d103      	bne.n	8017fa8 <dhcp_create_msg+0x80>
 8017fa0:	68bb      	ldr	r3, [r7, #8]
 8017fa2:	795b      	ldrb	r3, [r3, #5]
 8017fa4:	2b03      	cmp	r3, #3
 8017fa6:	d10d      	bne.n	8017fc4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8017fa8:	68bb      	ldr	r3, [r7, #8]
 8017faa:	799b      	ldrb	r3, [r3, #6]
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d105      	bne.n	8017fbc <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8017fb0:	f003 f978 	bl	801b2a4 <rand>
 8017fb4:	4603      	mov	r3, r0
 8017fb6:	461a      	mov	r2, r3
 8017fb8:	4b45      	ldr	r3, [pc, #276]	; (80180d0 <dhcp_create_msg+0x1a8>)
 8017fba:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8017fbc:	4b44      	ldr	r3, [pc, #272]	; (80180d0 <dhcp_create_msg+0x1a8>)
 8017fbe:	681a      	ldr	r2, [r3, #0]
 8017fc0:	68bb      	ldr	r3, [r7, #8]
 8017fc2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8017fc4:	69bb      	ldr	r3, [r7, #24]
 8017fc6:	685b      	ldr	r3, [r3, #4]
 8017fc8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8017fca:	f44f 729a 	mov.w	r2, #308	; 0x134
 8017fce:	2100      	movs	r1, #0
 8017fd0:	6978      	ldr	r0, [r7, #20]
 8017fd2:	f002 fc42 	bl	801a85a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8017fd6:	697b      	ldr	r3, [r7, #20]
 8017fd8:	2201      	movs	r2, #1
 8017fda:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8017fdc:	697b      	ldr	r3, [r7, #20]
 8017fde:	2201      	movs	r2, #1
 8017fe0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017fe8:	697b      	ldr	r3, [r7, #20]
 8017fea:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8017fec:	68bb      	ldr	r3, [r7, #8]
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	f7f6 fe34 	bl	800ec5e <lwip_htonl>
 8017ff6:	4602      	mov	r2, r0
 8017ff8:	697b      	ldr	r3, [r7, #20]
 8017ffa:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8017ffc:	79fb      	ldrb	r3, [r7, #7]
 8017ffe:	2b08      	cmp	r3, #8
 8018000:	d010      	beq.n	8018024 <dhcp_create_msg+0xfc>
 8018002:	79fb      	ldrb	r3, [r7, #7]
 8018004:	2b04      	cmp	r3, #4
 8018006:	d00d      	beq.n	8018024 <dhcp_create_msg+0xfc>
 8018008:	79fb      	ldrb	r3, [r7, #7]
 801800a:	2b07      	cmp	r3, #7
 801800c:	d00a      	beq.n	8018024 <dhcp_create_msg+0xfc>
 801800e:	79fb      	ldrb	r3, [r7, #7]
 8018010:	2b03      	cmp	r3, #3
 8018012:	d10c      	bne.n	801802e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8018014:	68bb      	ldr	r3, [r7, #8]
 8018016:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8018018:	2b05      	cmp	r3, #5
 801801a:	d003      	beq.n	8018024 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801801c:	68bb      	ldr	r3, [r7, #8]
 801801e:	795b      	ldrb	r3, [r3, #5]
 8018020:	2b04      	cmp	r3, #4
 8018022:	d104      	bne.n	801802e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	3304      	adds	r3, #4
 8018028:	681a      	ldr	r2, [r3, #0]
 801802a:	697b      	ldr	r3, [r7, #20]
 801802c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801802e:	2300      	movs	r3, #0
 8018030:	83fb      	strh	r3, [r7, #30]
 8018032:	e00c      	b.n	801804e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8018034:	8bfa      	ldrh	r2, [r7, #30]
 8018036:	8bfb      	ldrh	r3, [r7, #30]
 8018038:	68f9      	ldr	r1, [r7, #12]
 801803a:	440a      	add	r2, r1
 801803c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8018040:	697a      	ldr	r2, [r7, #20]
 8018042:	4413      	add	r3, r2
 8018044:	460a      	mov	r2, r1
 8018046:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018048:	8bfb      	ldrh	r3, [r7, #30]
 801804a:	3301      	adds	r3, #1
 801804c:	83fb      	strh	r3, [r7, #30]
 801804e:	8bfb      	ldrh	r3, [r7, #30]
 8018050:	2b05      	cmp	r3, #5
 8018052:	d9ef      	bls.n	8018034 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8018054:	697b      	ldr	r3, [r7, #20]
 8018056:	2200      	movs	r2, #0
 8018058:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801805c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8018060:	2200      	movs	r2, #0
 8018062:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8018066:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801806a:	2200      	movs	r2, #0
 801806c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8018070:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8018074:	2200      	movs	r2, #0
 8018076:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801807a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801807e:	697b      	ldr	r3, [r7, #20]
 8018080:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018084:	2301      	movs	r3, #1
 8018086:	2235      	movs	r2, #53	; 0x35
 8018088:	2000      	movs	r0, #0
 801808a:	f7ff fadd 	bl	8017648 <dhcp_option>
 801808e:	4603      	mov	r3, r0
 8018090:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8018092:	697b      	ldr	r3, [r7, #20]
 8018094:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018098:	79fa      	ldrb	r2, [r7, #7]
 801809a:	8a7b      	ldrh	r3, [r7, #18]
 801809c:	4618      	mov	r0, r3
 801809e:	f7ff fb07 	bl	80176b0 <dhcp_option_byte>
 80180a2:	4603      	mov	r3, r0
 80180a4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80180a6:	683b      	ldr	r3, [r7, #0]
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d002      	beq.n	80180b2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80180ac:	683b      	ldr	r3, [r7, #0]
 80180ae:	8a7a      	ldrh	r2, [r7, #18]
 80180b0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80180b2:	69bb      	ldr	r3, [r7, #24]
}
 80180b4:	4618      	mov	r0, r3
 80180b6:	3720      	adds	r7, #32
 80180b8:	46bd      	mov	sp, r7
 80180ba:	bd80      	pop	{r7, pc}
 80180bc:	08022a60 	.word	0x08022a60
 80180c0:	08022d80 	.word	0x08022d80
 80180c4:	08022ac0 	.word	0x08022ac0
 80180c8:	08022da0 	.word	0x08022da0
 80180cc:	08022dc0 	.word	0x08022dc0
 80180d0:	20000520 	.word	0x20000520

080180d4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80180d4:	b580      	push	{r7, lr}
 80180d6:	b084      	sub	sp, #16
 80180d8:	af00      	add	r7, sp, #0
 80180da:	4603      	mov	r3, r0
 80180dc:	60b9      	str	r1, [r7, #8]
 80180de:	607a      	str	r2, [r7, #4]
 80180e0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80180e2:	89fb      	ldrh	r3, [r7, #14]
 80180e4:	1c5a      	adds	r2, r3, #1
 80180e6:	81fa      	strh	r2, [r7, #14]
 80180e8:	461a      	mov	r2, r3
 80180ea:	68bb      	ldr	r3, [r7, #8]
 80180ec:	4413      	add	r3, r2
 80180ee:	22ff      	movs	r2, #255	; 0xff
 80180f0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80180f2:	e007      	b.n	8018104 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80180f4:	89fb      	ldrh	r3, [r7, #14]
 80180f6:	1c5a      	adds	r2, r3, #1
 80180f8:	81fa      	strh	r2, [r7, #14]
 80180fa:	461a      	mov	r2, r3
 80180fc:	68bb      	ldr	r3, [r7, #8]
 80180fe:	4413      	add	r3, r2
 8018100:	2200      	movs	r2, #0
 8018102:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8018104:	89fb      	ldrh	r3, [r7, #14]
 8018106:	2b43      	cmp	r3, #67	; 0x43
 8018108:	d904      	bls.n	8018114 <dhcp_option_trailer+0x40>
 801810a:	89fb      	ldrh	r3, [r7, #14]
 801810c:	f003 0303 	and.w	r3, r3, #3
 8018110:	2b00      	cmp	r3, #0
 8018112:	d002      	beq.n	801811a <dhcp_option_trailer+0x46>
 8018114:	89fb      	ldrh	r3, [r7, #14]
 8018116:	2b43      	cmp	r3, #67	; 0x43
 8018118:	d9ec      	bls.n	80180f4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801811a:	89fb      	ldrh	r3, [r7, #14]
 801811c:	33f0      	adds	r3, #240	; 0xf0
 801811e:	b29b      	uxth	r3, r3
 8018120:	4619      	mov	r1, r3
 8018122:	6878      	ldr	r0, [r7, #4]
 8018124:	f7f7 fe98 	bl	800fe58 <pbuf_realloc>
}
 8018128:	bf00      	nop
 801812a:	3710      	adds	r7, #16
 801812c:	46bd      	mov	sp, r7
 801812e:	bd80      	pop	{r7, pc}

08018130 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8018130:	b480      	push	{r7}
 8018132:	b085      	sub	sp, #20
 8018134:	af00      	add	r7, sp, #0
 8018136:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d017      	beq.n	801816e <dhcp_supplied_address+0x3e>
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018142:	2b00      	cmp	r3, #0
 8018144:	d013      	beq.n	801816e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801814a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	795b      	ldrb	r3, [r3, #5]
 8018150:	2b0a      	cmp	r3, #10
 8018152:	d007      	beq.n	8018164 <dhcp_supplied_address+0x34>
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	795b      	ldrb	r3, [r3, #5]
 8018158:	2b05      	cmp	r3, #5
 801815a:	d003      	beq.n	8018164 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8018160:	2b04      	cmp	r3, #4
 8018162:	d101      	bne.n	8018168 <dhcp_supplied_address+0x38>
 8018164:	2301      	movs	r3, #1
 8018166:	e000      	b.n	801816a <dhcp_supplied_address+0x3a>
 8018168:	2300      	movs	r3, #0
 801816a:	b2db      	uxtb	r3, r3
 801816c:	e000      	b.n	8018170 <dhcp_supplied_address+0x40>
  }
  return 0;
 801816e:	2300      	movs	r3, #0
}
 8018170:	4618      	mov	r0, r3
 8018172:	3714      	adds	r7, #20
 8018174:	46bd      	mov	sp, r7
 8018176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801817a:	4770      	bx	lr

0801817c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801817c:	b580      	push	{r7, lr}
 801817e:	b082      	sub	sp, #8
 8018180:	af00      	add	r7, sp, #0
 8018182:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018184:	4915      	ldr	r1, [pc, #84]	; (80181dc <etharp_free_entry+0x60>)
 8018186:	687a      	ldr	r2, [r7, #4]
 8018188:	4613      	mov	r3, r2
 801818a:	005b      	lsls	r3, r3, #1
 801818c:	4413      	add	r3, r2
 801818e:	00db      	lsls	r3, r3, #3
 8018190:	440b      	add	r3, r1
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	2b00      	cmp	r3, #0
 8018196:	d013      	beq.n	80181c0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018198:	4910      	ldr	r1, [pc, #64]	; (80181dc <etharp_free_entry+0x60>)
 801819a:	687a      	ldr	r2, [r7, #4]
 801819c:	4613      	mov	r3, r2
 801819e:	005b      	lsls	r3, r3, #1
 80181a0:	4413      	add	r3, r2
 80181a2:	00db      	lsls	r3, r3, #3
 80181a4:	440b      	add	r3, r1
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	4618      	mov	r0, r3
 80181aa:	f7f7 ffdb 	bl	8010164 <pbuf_free>
    arp_table[i].q = NULL;
 80181ae:	490b      	ldr	r1, [pc, #44]	; (80181dc <etharp_free_entry+0x60>)
 80181b0:	687a      	ldr	r2, [r7, #4]
 80181b2:	4613      	mov	r3, r2
 80181b4:	005b      	lsls	r3, r3, #1
 80181b6:	4413      	add	r3, r2
 80181b8:	00db      	lsls	r3, r3, #3
 80181ba:	440b      	add	r3, r1
 80181bc:	2200      	movs	r2, #0
 80181be:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80181c0:	4906      	ldr	r1, [pc, #24]	; (80181dc <etharp_free_entry+0x60>)
 80181c2:	687a      	ldr	r2, [r7, #4]
 80181c4:	4613      	mov	r3, r2
 80181c6:	005b      	lsls	r3, r3, #1
 80181c8:	4413      	add	r3, r2
 80181ca:	00db      	lsls	r3, r3, #3
 80181cc:	440b      	add	r3, r1
 80181ce:	3314      	adds	r3, #20
 80181d0:	2200      	movs	r2, #0
 80181d2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80181d4:	bf00      	nop
 80181d6:	3708      	adds	r7, #8
 80181d8:	46bd      	mov	sp, r7
 80181da:	bd80      	pop	{r7, pc}
 80181dc:	20000524 	.word	0x20000524

080181e0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80181e0:	b580      	push	{r7, lr}
 80181e2:	b082      	sub	sp, #8
 80181e4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80181e6:	2300      	movs	r3, #0
 80181e8:	607b      	str	r3, [r7, #4]
 80181ea:	e096      	b.n	801831a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80181ec:	494f      	ldr	r1, [pc, #316]	; (801832c <etharp_tmr+0x14c>)
 80181ee:	687a      	ldr	r2, [r7, #4]
 80181f0:	4613      	mov	r3, r2
 80181f2:	005b      	lsls	r3, r3, #1
 80181f4:	4413      	add	r3, r2
 80181f6:	00db      	lsls	r3, r3, #3
 80181f8:	440b      	add	r3, r1
 80181fa:	3314      	adds	r3, #20
 80181fc:	781b      	ldrb	r3, [r3, #0]
 80181fe:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018200:	78fb      	ldrb	r3, [r7, #3]
 8018202:	2b00      	cmp	r3, #0
 8018204:	f000 8086 	beq.w	8018314 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018208:	4948      	ldr	r1, [pc, #288]	; (801832c <etharp_tmr+0x14c>)
 801820a:	687a      	ldr	r2, [r7, #4]
 801820c:	4613      	mov	r3, r2
 801820e:	005b      	lsls	r3, r3, #1
 8018210:	4413      	add	r3, r2
 8018212:	00db      	lsls	r3, r3, #3
 8018214:	440b      	add	r3, r1
 8018216:	3312      	adds	r3, #18
 8018218:	881b      	ldrh	r3, [r3, #0]
 801821a:	3301      	adds	r3, #1
 801821c:	b298      	uxth	r0, r3
 801821e:	4943      	ldr	r1, [pc, #268]	; (801832c <etharp_tmr+0x14c>)
 8018220:	687a      	ldr	r2, [r7, #4]
 8018222:	4613      	mov	r3, r2
 8018224:	005b      	lsls	r3, r3, #1
 8018226:	4413      	add	r3, r2
 8018228:	00db      	lsls	r3, r3, #3
 801822a:	440b      	add	r3, r1
 801822c:	3312      	adds	r3, #18
 801822e:	4602      	mov	r2, r0
 8018230:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018232:	493e      	ldr	r1, [pc, #248]	; (801832c <etharp_tmr+0x14c>)
 8018234:	687a      	ldr	r2, [r7, #4]
 8018236:	4613      	mov	r3, r2
 8018238:	005b      	lsls	r3, r3, #1
 801823a:	4413      	add	r3, r2
 801823c:	00db      	lsls	r3, r3, #3
 801823e:	440b      	add	r3, r1
 8018240:	3312      	adds	r3, #18
 8018242:	881b      	ldrh	r3, [r3, #0]
 8018244:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018248:	d215      	bcs.n	8018276 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801824a:	4938      	ldr	r1, [pc, #224]	; (801832c <etharp_tmr+0x14c>)
 801824c:	687a      	ldr	r2, [r7, #4]
 801824e:	4613      	mov	r3, r2
 8018250:	005b      	lsls	r3, r3, #1
 8018252:	4413      	add	r3, r2
 8018254:	00db      	lsls	r3, r3, #3
 8018256:	440b      	add	r3, r1
 8018258:	3314      	adds	r3, #20
 801825a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801825c:	2b01      	cmp	r3, #1
 801825e:	d10e      	bne.n	801827e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018260:	4932      	ldr	r1, [pc, #200]	; (801832c <etharp_tmr+0x14c>)
 8018262:	687a      	ldr	r2, [r7, #4]
 8018264:	4613      	mov	r3, r2
 8018266:	005b      	lsls	r3, r3, #1
 8018268:	4413      	add	r3, r2
 801826a:	00db      	lsls	r3, r3, #3
 801826c:	440b      	add	r3, r1
 801826e:	3312      	adds	r3, #18
 8018270:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018272:	2b04      	cmp	r3, #4
 8018274:	d903      	bls.n	801827e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8018276:	6878      	ldr	r0, [r7, #4]
 8018278:	f7ff ff80 	bl	801817c <etharp_free_entry>
 801827c:	e04a      	b.n	8018314 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801827e:	492b      	ldr	r1, [pc, #172]	; (801832c <etharp_tmr+0x14c>)
 8018280:	687a      	ldr	r2, [r7, #4]
 8018282:	4613      	mov	r3, r2
 8018284:	005b      	lsls	r3, r3, #1
 8018286:	4413      	add	r3, r2
 8018288:	00db      	lsls	r3, r3, #3
 801828a:	440b      	add	r3, r1
 801828c:	3314      	adds	r3, #20
 801828e:	781b      	ldrb	r3, [r3, #0]
 8018290:	2b03      	cmp	r3, #3
 8018292:	d10a      	bne.n	80182aa <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018294:	4925      	ldr	r1, [pc, #148]	; (801832c <etharp_tmr+0x14c>)
 8018296:	687a      	ldr	r2, [r7, #4]
 8018298:	4613      	mov	r3, r2
 801829a:	005b      	lsls	r3, r3, #1
 801829c:	4413      	add	r3, r2
 801829e:	00db      	lsls	r3, r3, #3
 80182a0:	440b      	add	r3, r1
 80182a2:	3314      	adds	r3, #20
 80182a4:	2204      	movs	r2, #4
 80182a6:	701a      	strb	r2, [r3, #0]
 80182a8:	e034      	b.n	8018314 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80182aa:	4920      	ldr	r1, [pc, #128]	; (801832c <etharp_tmr+0x14c>)
 80182ac:	687a      	ldr	r2, [r7, #4]
 80182ae:	4613      	mov	r3, r2
 80182b0:	005b      	lsls	r3, r3, #1
 80182b2:	4413      	add	r3, r2
 80182b4:	00db      	lsls	r3, r3, #3
 80182b6:	440b      	add	r3, r1
 80182b8:	3314      	adds	r3, #20
 80182ba:	781b      	ldrb	r3, [r3, #0]
 80182bc:	2b04      	cmp	r3, #4
 80182be:	d10a      	bne.n	80182d6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80182c0:	491a      	ldr	r1, [pc, #104]	; (801832c <etharp_tmr+0x14c>)
 80182c2:	687a      	ldr	r2, [r7, #4]
 80182c4:	4613      	mov	r3, r2
 80182c6:	005b      	lsls	r3, r3, #1
 80182c8:	4413      	add	r3, r2
 80182ca:	00db      	lsls	r3, r3, #3
 80182cc:	440b      	add	r3, r1
 80182ce:	3314      	adds	r3, #20
 80182d0:	2202      	movs	r2, #2
 80182d2:	701a      	strb	r2, [r3, #0]
 80182d4:	e01e      	b.n	8018314 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80182d6:	4915      	ldr	r1, [pc, #84]	; (801832c <etharp_tmr+0x14c>)
 80182d8:	687a      	ldr	r2, [r7, #4]
 80182da:	4613      	mov	r3, r2
 80182dc:	005b      	lsls	r3, r3, #1
 80182de:	4413      	add	r3, r2
 80182e0:	00db      	lsls	r3, r3, #3
 80182e2:	440b      	add	r3, r1
 80182e4:	3314      	adds	r3, #20
 80182e6:	781b      	ldrb	r3, [r3, #0]
 80182e8:	2b01      	cmp	r3, #1
 80182ea:	d113      	bne.n	8018314 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80182ec:	490f      	ldr	r1, [pc, #60]	; (801832c <etharp_tmr+0x14c>)
 80182ee:	687a      	ldr	r2, [r7, #4]
 80182f0:	4613      	mov	r3, r2
 80182f2:	005b      	lsls	r3, r3, #1
 80182f4:	4413      	add	r3, r2
 80182f6:	00db      	lsls	r3, r3, #3
 80182f8:	440b      	add	r3, r1
 80182fa:	3308      	adds	r3, #8
 80182fc:	6818      	ldr	r0, [r3, #0]
 80182fe:	687a      	ldr	r2, [r7, #4]
 8018300:	4613      	mov	r3, r2
 8018302:	005b      	lsls	r3, r3, #1
 8018304:	4413      	add	r3, r2
 8018306:	00db      	lsls	r3, r3, #3
 8018308:	4a08      	ldr	r2, [pc, #32]	; (801832c <etharp_tmr+0x14c>)
 801830a:	4413      	add	r3, r2
 801830c:	3304      	adds	r3, #4
 801830e:	4619      	mov	r1, r3
 8018310:	f000 fe72 	bl	8018ff8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	3301      	adds	r3, #1
 8018318:	607b      	str	r3, [r7, #4]
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	2b09      	cmp	r3, #9
 801831e:	f77f af65 	ble.w	80181ec <etharp_tmr+0xc>
      }
    }
  }
}
 8018322:	bf00      	nop
 8018324:	3708      	adds	r7, #8
 8018326:	46bd      	mov	sp, r7
 8018328:	bd80      	pop	{r7, pc}
 801832a:	bf00      	nop
 801832c:	20000524 	.word	0x20000524

08018330 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018330:	b580      	push	{r7, lr}
 8018332:	b08a      	sub	sp, #40	; 0x28
 8018334:	af00      	add	r7, sp, #0
 8018336:	60f8      	str	r0, [r7, #12]
 8018338:	460b      	mov	r3, r1
 801833a:	607a      	str	r2, [r7, #4]
 801833c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801833e:	230a      	movs	r3, #10
 8018340:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018342:	230a      	movs	r3, #10
 8018344:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8018346:	230a      	movs	r3, #10
 8018348:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801834a:	2300      	movs	r3, #0
 801834c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801834e:	230a      	movs	r3, #10
 8018350:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018352:	2300      	movs	r3, #0
 8018354:	83bb      	strh	r3, [r7, #28]
 8018356:	2300      	movs	r3, #0
 8018358:	837b      	strh	r3, [r7, #26]
 801835a:	2300      	movs	r3, #0
 801835c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801835e:	2300      	movs	r3, #0
 8018360:	843b      	strh	r3, [r7, #32]
 8018362:	e0ae      	b.n	80184c2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8018364:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018368:	49a6      	ldr	r1, [pc, #664]	; (8018604 <etharp_find_entry+0x2d4>)
 801836a:	4613      	mov	r3, r2
 801836c:	005b      	lsls	r3, r3, #1
 801836e:	4413      	add	r3, r2
 8018370:	00db      	lsls	r3, r3, #3
 8018372:	440b      	add	r3, r1
 8018374:	3314      	adds	r3, #20
 8018376:	781b      	ldrb	r3, [r3, #0]
 8018378:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801837a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801837e:	2b0a      	cmp	r3, #10
 8018380:	d105      	bne.n	801838e <etharp_find_entry+0x5e>
 8018382:	7dfb      	ldrb	r3, [r7, #23]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d102      	bne.n	801838e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018388:	8c3b      	ldrh	r3, [r7, #32]
 801838a:	847b      	strh	r3, [r7, #34]	; 0x22
 801838c:	e095      	b.n	80184ba <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801838e:	7dfb      	ldrb	r3, [r7, #23]
 8018390:	2b00      	cmp	r3, #0
 8018392:	f000 8092 	beq.w	80184ba <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8018396:	7dfb      	ldrb	r3, [r7, #23]
 8018398:	2b01      	cmp	r3, #1
 801839a:	d009      	beq.n	80183b0 <etharp_find_entry+0x80>
 801839c:	7dfb      	ldrb	r3, [r7, #23]
 801839e:	2b01      	cmp	r3, #1
 80183a0:	d806      	bhi.n	80183b0 <etharp_find_entry+0x80>
 80183a2:	4b99      	ldr	r3, [pc, #612]	; (8018608 <etharp_find_entry+0x2d8>)
 80183a4:	f44f 7292 	mov.w	r2, #292	; 0x124
 80183a8:	4998      	ldr	r1, [pc, #608]	; (801860c <etharp_find_entry+0x2dc>)
 80183aa:	4899      	ldr	r0, [pc, #612]	; (8018610 <etharp_find_entry+0x2e0>)
 80183ac:	f002 ff62 	bl	801b274 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d020      	beq.n	80183f8 <etharp_find_entry+0xc8>
 80183b6:	68fb      	ldr	r3, [r7, #12]
 80183b8:	6819      	ldr	r1, [r3, #0]
 80183ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80183be:	4891      	ldr	r0, [pc, #580]	; (8018604 <etharp_find_entry+0x2d4>)
 80183c0:	4613      	mov	r3, r2
 80183c2:	005b      	lsls	r3, r3, #1
 80183c4:	4413      	add	r3, r2
 80183c6:	00db      	lsls	r3, r3, #3
 80183c8:	4403      	add	r3, r0
 80183ca:	3304      	adds	r3, #4
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	4299      	cmp	r1, r3
 80183d0:	d112      	bne.n	80183f8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d00c      	beq.n	80183f2 <etharp_find_entry+0xc2>
 80183d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80183dc:	4989      	ldr	r1, [pc, #548]	; (8018604 <etharp_find_entry+0x2d4>)
 80183de:	4613      	mov	r3, r2
 80183e0:	005b      	lsls	r3, r3, #1
 80183e2:	4413      	add	r3, r2
 80183e4:	00db      	lsls	r3, r3, #3
 80183e6:	440b      	add	r3, r1
 80183e8:	3308      	adds	r3, #8
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	687a      	ldr	r2, [r7, #4]
 80183ee:	429a      	cmp	r2, r3
 80183f0:	d102      	bne.n	80183f8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80183f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80183f6:	e100      	b.n	80185fa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80183f8:	7dfb      	ldrb	r3, [r7, #23]
 80183fa:	2b01      	cmp	r3, #1
 80183fc:	d140      	bne.n	8018480 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80183fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018402:	4980      	ldr	r1, [pc, #512]	; (8018604 <etharp_find_entry+0x2d4>)
 8018404:	4613      	mov	r3, r2
 8018406:	005b      	lsls	r3, r3, #1
 8018408:	4413      	add	r3, r2
 801840a:	00db      	lsls	r3, r3, #3
 801840c:	440b      	add	r3, r1
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	2b00      	cmp	r3, #0
 8018412:	d01a      	beq.n	801844a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018414:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018418:	497a      	ldr	r1, [pc, #488]	; (8018604 <etharp_find_entry+0x2d4>)
 801841a:	4613      	mov	r3, r2
 801841c:	005b      	lsls	r3, r3, #1
 801841e:	4413      	add	r3, r2
 8018420:	00db      	lsls	r3, r3, #3
 8018422:	440b      	add	r3, r1
 8018424:	3312      	adds	r3, #18
 8018426:	881b      	ldrh	r3, [r3, #0]
 8018428:	8bba      	ldrh	r2, [r7, #28]
 801842a:	429a      	cmp	r2, r3
 801842c:	d845      	bhi.n	80184ba <etharp_find_entry+0x18a>
            old_queue = i;
 801842e:	8c3b      	ldrh	r3, [r7, #32]
 8018430:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018432:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018436:	4973      	ldr	r1, [pc, #460]	; (8018604 <etharp_find_entry+0x2d4>)
 8018438:	4613      	mov	r3, r2
 801843a:	005b      	lsls	r3, r3, #1
 801843c:	4413      	add	r3, r2
 801843e:	00db      	lsls	r3, r3, #3
 8018440:	440b      	add	r3, r1
 8018442:	3312      	adds	r3, #18
 8018444:	881b      	ldrh	r3, [r3, #0]
 8018446:	83bb      	strh	r3, [r7, #28]
 8018448:	e037      	b.n	80184ba <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801844a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801844e:	496d      	ldr	r1, [pc, #436]	; (8018604 <etharp_find_entry+0x2d4>)
 8018450:	4613      	mov	r3, r2
 8018452:	005b      	lsls	r3, r3, #1
 8018454:	4413      	add	r3, r2
 8018456:	00db      	lsls	r3, r3, #3
 8018458:	440b      	add	r3, r1
 801845a:	3312      	adds	r3, #18
 801845c:	881b      	ldrh	r3, [r3, #0]
 801845e:	8b7a      	ldrh	r2, [r7, #26]
 8018460:	429a      	cmp	r2, r3
 8018462:	d82a      	bhi.n	80184ba <etharp_find_entry+0x18a>
            old_pending = i;
 8018464:	8c3b      	ldrh	r3, [r7, #32]
 8018466:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8018468:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801846c:	4965      	ldr	r1, [pc, #404]	; (8018604 <etharp_find_entry+0x2d4>)
 801846e:	4613      	mov	r3, r2
 8018470:	005b      	lsls	r3, r3, #1
 8018472:	4413      	add	r3, r2
 8018474:	00db      	lsls	r3, r3, #3
 8018476:	440b      	add	r3, r1
 8018478:	3312      	adds	r3, #18
 801847a:	881b      	ldrh	r3, [r3, #0]
 801847c:	837b      	strh	r3, [r7, #26]
 801847e:	e01c      	b.n	80184ba <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018480:	7dfb      	ldrb	r3, [r7, #23]
 8018482:	2b01      	cmp	r3, #1
 8018484:	d919      	bls.n	80184ba <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018486:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801848a:	495e      	ldr	r1, [pc, #376]	; (8018604 <etharp_find_entry+0x2d4>)
 801848c:	4613      	mov	r3, r2
 801848e:	005b      	lsls	r3, r3, #1
 8018490:	4413      	add	r3, r2
 8018492:	00db      	lsls	r3, r3, #3
 8018494:	440b      	add	r3, r1
 8018496:	3312      	adds	r3, #18
 8018498:	881b      	ldrh	r3, [r3, #0]
 801849a:	8b3a      	ldrh	r2, [r7, #24]
 801849c:	429a      	cmp	r2, r3
 801849e:	d80c      	bhi.n	80184ba <etharp_find_entry+0x18a>
            old_stable = i;
 80184a0:	8c3b      	ldrh	r3, [r7, #32]
 80184a2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80184a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80184a8:	4956      	ldr	r1, [pc, #344]	; (8018604 <etharp_find_entry+0x2d4>)
 80184aa:	4613      	mov	r3, r2
 80184ac:	005b      	lsls	r3, r3, #1
 80184ae:	4413      	add	r3, r2
 80184b0:	00db      	lsls	r3, r3, #3
 80184b2:	440b      	add	r3, r1
 80184b4:	3312      	adds	r3, #18
 80184b6:	881b      	ldrh	r3, [r3, #0]
 80184b8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80184ba:	8c3b      	ldrh	r3, [r7, #32]
 80184bc:	3301      	adds	r3, #1
 80184be:	b29b      	uxth	r3, r3
 80184c0:	843b      	strh	r3, [r7, #32]
 80184c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80184c6:	2b09      	cmp	r3, #9
 80184c8:	f77f af4c 	ble.w	8018364 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80184cc:	7afb      	ldrb	r3, [r7, #11]
 80184ce:	f003 0302 	and.w	r3, r3, #2
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d108      	bne.n	80184e8 <etharp_find_entry+0x1b8>
 80184d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80184da:	2b0a      	cmp	r3, #10
 80184dc:	d107      	bne.n	80184ee <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80184de:	7afb      	ldrb	r3, [r7, #11]
 80184e0:	f003 0301 	and.w	r3, r3, #1
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d102      	bne.n	80184ee <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80184e8:	f04f 33ff 	mov.w	r3, #4294967295
 80184ec:	e085      	b.n	80185fa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80184ee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80184f2:	2b09      	cmp	r3, #9
 80184f4:	dc02      	bgt.n	80184fc <etharp_find_entry+0x1cc>
    i = empty;
 80184f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80184f8:	843b      	strh	r3, [r7, #32]
 80184fa:	e039      	b.n	8018570 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80184fc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018500:	2b09      	cmp	r3, #9
 8018502:	dc14      	bgt.n	801852e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018504:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018506:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018508:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801850c:	493d      	ldr	r1, [pc, #244]	; (8018604 <etharp_find_entry+0x2d4>)
 801850e:	4613      	mov	r3, r2
 8018510:	005b      	lsls	r3, r3, #1
 8018512:	4413      	add	r3, r2
 8018514:	00db      	lsls	r3, r3, #3
 8018516:	440b      	add	r3, r1
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	2b00      	cmp	r3, #0
 801851c:	d018      	beq.n	8018550 <etharp_find_entry+0x220>
 801851e:	4b3a      	ldr	r3, [pc, #232]	; (8018608 <etharp_find_entry+0x2d8>)
 8018520:	f240 126d 	movw	r2, #365	; 0x16d
 8018524:	493b      	ldr	r1, [pc, #236]	; (8018614 <etharp_find_entry+0x2e4>)
 8018526:	483a      	ldr	r0, [pc, #232]	; (8018610 <etharp_find_entry+0x2e0>)
 8018528:	f002 fea4 	bl	801b274 <iprintf>
 801852c:	e010      	b.n	8018550 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801852e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018532:	2b09      	cmp	r3, #9
 8018534:	dc02      	bgt.n	801853c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8018536:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018538:	843b      	strh	r3, [r7, #32]
 801853a:	e009      	b.n	8018550 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801853c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018540:	2b09      	cmp	r3, #9
 8018542:	dc02      	bgt.n	801854a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018544:	8bfb      	ldrh	r3, [r7, #30]
 8018546:	843b      	strh	r3, [r7, #32]
 8018548:	e002      	b.n	8018550 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801854a:	f04f 33ff 	mov.w	r3, #4294967295
 801854e:	e054      	b.n	80185fa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018550:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018554:	2b09      	cmp	r3, #9
 8018556:	dd06      	ble.n	8018566 <etharp_find_entry+0x236>
 8018558:	4b2b      	ldr	r3, [pc, #172]	; (8018608 <etharp_find_entry+0x2d8>)
 801855a:	f240 127f 	movw	r2, #383	; 0x17f
 801855e:	492e      	ldr	r1, [pc, #184]	; (8018618 <etharp_find_entry+0x2e8>)
 8018560:	482b      	ldr	r0, [pc, #172]	; (8018610 <etharp_find_entry+0x2e0>)
 8018562:	f002 fe87 	bl	801b274 <iprintf>
    etharp_free_entry(i);
 8018566:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801856a:	4618      	mov	r0, r3
 801856c:	f7ff fe06 	bl	801817c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018570:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018574:	2b09      	cmp	r3, #9
 8018576:	dd06      	ble.n	8018586 <etharp_find_entry+0x256>
 8018578:	4b23      	ldr	r3, [pc, #140]	; (8018608 <etharp_find_entry+0x2d8>)
 801857a:	f240 1283 	movw	r2, #387	; 0x183
 801857e:	4926      	ldr	r1, [pc, #152]	; (8018618 <etharp_find_entry+0x2e8>)
 8018580:	4823      	ldr	r0, [pc, #140]	; (8018610 <etharp_find_entry+0x2e0>)
 8018582:	f002 fe77 	bl	801b274 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8018586:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801858a:	491e      	ldr	r1, [pc, #120]	; (8018604 <etharp_find_entry+0x2d4>)
 801858c:	4613      	mov	r3, r2
 801858e:	005b      	lsls	r3, r3, #1
 8018590:	4413      	add	r3, r2
 8018592:	00db      	lsls	r3, r3, #3
 8018594:	440b      	add	r3, r1
 8018596:	3314      	adds	r3, #20
 8018598:	781b      	ldrb	r3, [r3, #0]
 801859a:	2b00      	cmp	r3, #0
 801859c:	d006      	beq.n	80185ac <etharp_find_entry+0x27c>
 801859e:	4b1a      	ldr	r3, [pc, #104]	; (8018608 <etharp_find_entry+0x2d8>)
 80185a0:	f240 1285 	movw	r2, #389	; 0x185
 80185a4:	491d      	ldr	r1, [pc, #116]	; (801861c <etharp_find_entry+0x2ec>)
 80185a6:	481a      	ldr	r0, [pc, #104]	; (8018610 <etharp_find_entry+0x2e0>)
 80185a8:	f002 fe64 	bl	801b274 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d00b      	beq.n	80185ca <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80185b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	6819      	ldr	r1, [r3, #0]
 80185ba:	4812      	ldr	r0, [pc, #72]	; (8018604 <etharp_find_entry+0x2d4>)
 80185bc:	4613      	mov	r3, r2
 80185be:	005b      	lsls	r3, r3, #1
 80185c0:	4413      	add	r3, r2
 80185c2:	00db      	lsls	r3, r3, #3
 80185c4:	4403      	add	r3, r0
 80185c6:	3304      	adds	r3, #4
 80185c8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80185ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80185ce:	490d      	ldr	r1, [pc, #52]	; (8018604 <etharp_find_entry+0x2d4>)
 80185d0:	4613      	mov	r3, r2
 80185d2:	005b      	lsls	r3, r3, #1
 80185d4:	4413      	add	r3, r2
 80185d6:	00db      	lsls	r3, r3, #3
 80185d8:	440b      	add	r3, r1
 80185da:	3312      	adds	r3, #18
 80185dc:	2200      	movs	r2, #0
 80185de:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80185e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80185e4:	4907      	ldr	r1, [pc, #28]	; (8018604 <etharp_find_entry+0x2d4>)
 80185e6:	4613      	mov	r3, r2
 80185e8:	005b      	lsls	r3, r3, #1
 80185ea:	4413      	add	r3, r2
 80185ec:	00db      	lsls	r3, r3, #3
 80185ee:	440b      	add	r3, r1
 80185f0:	3308      	adds	r3, #8
 80185f2:	687a      	ldr	r2, [r7, #4]
 80185f4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80185f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80185fa:	4618      	mov	r0, r3
 80185fc:	3728      	adds	r7, #40	; 0x28
 80185fe:	46bd      	mov	sp, r7
 8018600:	bd80      	pop	{r7, pc}
 8018602:	bf00      	nop
 8018604:	20000524 	.word	0x20000524
 8018608:	08022e00 	.word	0x08022e00
 801860c:	08022e38 	.word	0x08022e38
 8018610:	08022e78 	.word	0x08022e78
 8018614:	08022ea0 	.word	0x08022ea0
 8018618:	08022eb8 	.word	0x08022eb8
 801861c:	08022ecc 	.word	0x08022ecc

08018620 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018620:	b580      	push	{r7, lr}
 8018622:	b088      	sub	sp, #32
 8018624:	af02      	add	r7, sp, #8
 8018626:	60f8      	str	r0, [r7, #12]
 8018628:	60b9      	str	r1, [r7, #8]
 801862a:	607a      	str	r2, [r7, #4]
 801862c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018634:	2b06      	cmp	r3, #6
 8018636:	d006      	beq.n	8018646 <etharp_update_arp_entry+0x26>
 8018638:	4b48      	ldr	r3, [pc, #288]	; (801875c <etharp_update_arp_entry+0x13c>)
 801863a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801863e:	4948      	ldr	r1, [pc, #288]	; (8018760 <etharp_update_arp_entry+0x140>)
 8018640:	4848      	ldr	r0, [pc, #288]	; (8018764 <etharp_update_arp_entry+0x144>)
 8018642:	f002 fe17 	bl	801b274 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8018646:	68bb      	ldr	r3, [r7, #8]
 8018648:	2b00      	cmp	r3, #0
 801864a:	d012      	beq.n	8018672 <etharp_update_arp_entry+0x52>
 801864c:	68bb      	ldr	r3, [r7, #8]
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	2b00      	cmp	r3, #0
 8018652:	d00e      	beq.n	8018672 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018654:	68bb      	ldr	r3, [r7, #8]
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	68f9      	ldr	r1, [r7, #12]
 801865a:	4618      	mov	r0, r3
 801865c:	f001 f91e 	bl	801989c <ip4_addr_isbroadcast_u32>
 8018660:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018662:	2b00      	cmp	r3, #0
 8018664:	d105      	bne.n	8018672 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8018666:	68bb      	ldr	r3, [r7, #8]
 8018668:	681b      	ldr	r3, [r3, #0]
 801866a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801866e:	2be0      	cmp	r3, #224	; 0xe0
 8018670:	d102      	bne.n	8018678 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018672:	f06f 030f 	mvn.w	r3, #15
 8018676:	e06c      	b.n	8018752 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018678:	78fb      	ldrb	r3, [r7, #3]
 801867a:	68fa      	ldr	r2, [r7, #12]
 801867c:	4619      	mov	r1, r3
 801867e:	68b8      	ldr	r0, [r7, #8]
 8018680:	f7ff fe56 	bl	8018330 <etharp_find_entry>
 8018684:	4603      	mov	r3, r0
 8018686:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018688:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801868c:	2b00      	cmp	r3, #0
 801868e:	da02      	bge.n	8018696 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018690:	8afb      	ldrh	r3, [r7, #22]
 8018692:	b25b      	sxtb	r3, r3
 8018694:	e05d      	b.n	8018752 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018696:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801869a:	4933      	ldr	r1, [pc, #204]	; (8018768 <etharp_update_arp_entry+0x148>)
 801869c:	4613      	mov	r3, r2
 801869e:	005b      	lsls	r3, r3, #1
 80186a0:	4413      	add	r3, r2
 80186a2:	00db      	lsls	r3, r3, #3
 80186a4:	440b      	add	r3, r1
 80186a6:	3314      	adds	r3, #20
 80186a8:	2202      	movs	r2, #2
 80186aa:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80186ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80186b0:	492d      	ldr	r1, [pc, #180]	; (8018768 <etharp_update_arp_entry+0x148>)
 80186b2:	4613      	mov	r3, r2
 80186b4:	005b      	lsls	r3, r3, #1
 80186b6:	4413      	add	r3, r2
 80186b8:	00db      	lsls	r3, r3, #3
 80186ba:	440b      	add	r3, r1
 80186bc:	3308      	adds	r3, #8
 80186be:	68fa      	ldr	r2, [r7, #12]
 80186c0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80186c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80186c6:	4613      	mov	r3, r2
 80186c8:	005b      	lsls	r3, r3, #1
 80186ca:	4413      	add	r3, r2
 80186cc:	00db      	lsls	r3, r3, #3
 80186ce:	3308      	adds	r3, #8
 80186d0:	4a25      	ldr	r2, [pc, #148]	; (8018768 <etharp_update_arp_entry+0x148>)
 80186d2:	4413      	add	r3, r2
 80186d4:	3304      	adds	r3, #4
 80186d6:	2206      	movs	r2, #6
 80186d8:	6879      	ldr	r1, [r7, #4]
 80186da:	4618      	mov	r0, r3
 80186dc:	f002 f899 	bl	801a812 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80186e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80186e4:	4920      	ldr	r1, [pc, #128]	; (8018768 <etharp_update_arp_entry+0x148>)
 80186e6:	4613      	mov	r3, r2
 80186e8:	005b      	lsls	r3, r3, #1
 80186ea:	4413      	add	r3, r2
 80186ec:	00db      	lsls	r3, r3, #3
 80186ee:	440b      	add	r3, r1
 80186f0:	3312      	adds	r3, #18
 80186f2:	2200      	movs	r2, #0
 80186f4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80186f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80186fa:	491b      	ldr	r1, [pc, #108]	; (8018768 <etharp_update_arp_entry+0x148>)
 80186fc:	4613      	mov	r3, r2
 80186fe:	005b      	lsls	r3, r3, #1
 8018700:	4413      	add	r3, r2
 8018702:	00db      	lsls	r3, r3, #3
 8018704:	440b      	add	r3, r1
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	2b00      	cmp	r3, #0
 801870a:	d021      	beq.n	8018750 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801870c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018710:	4915      	ldr	r1, [pc, #84]	; (8018768 <etharp_update_arp_entry+0x148>)
 8018712:	4613      	mov	r3, r2
 8018714:	005b      	lsls	r3, r3, #1
 8018716:	4413      	add	r3, r2
 8018718:	00db      	lsls	r3, r3, #3
 801871a:	440b      	add	r3, r1
 801871c:	681b      	ldr	r3, [r3, #0]
 801871e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018720:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018724:	4910      	ldr	r1, [pc, #64]	; (8018768 <etharp_update_arp_entry+0x148>)
 8018726:	4613      	mov	r3, r2
 8018728:	005b      	lsls	r3, r3, #1
 801872a:	4413      	add	r3, r2
 801872c:	00db      	lsls	r3, r3, #3
 801872e:	440b      	add	r3, r1
 8018730:	2200      	movs	r2, #0
 8018732:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801873a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801873e:	9300      	str	r3, [sp, #0]
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	6939      	ldr	r1, [r7, #16]
 8018744:	68f8      	ldr	r0, [r7, #12]
 8018746:	f001 ffad 	bl	801a6a4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801874a:	6938      	ldr	r0, [r7, #16]
 801874c:	f7f7 fd0a 	bl	8010164 <pbuf_free>
  }
  return ERR_OK;
 8018750:	2300      	movs	r3, #0
}
 8018752:	4618      	mov	r0, r3
 8018754:	3718      	adds	r7, #24
 8018756:	46bd      	mov	sp, r7
 8018758:	bd80      	pop	{r7, pc}
 801875a:	bf00      	nop
 801875c:	08022e00 	.word	0x08022e00
 8018760:	08022ef8 	.word	0x08022ef8
 8018764:	08022e78 	.word	0x08022e78
 8018768:	20000524 	.word	0x20000524

0801876c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801876c:	b580      	push	{r7, lr}
 801876e:	b084      	sub	sp, #16
 8018770:	af00      	add	r7, sp, #0
 8018772:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018774:	2300      	movs	r3, #0
 8018776:	60fb      	str	r3, [r7, #12]
 8018778:	e01e      	b.n	80187b8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801877a:	4913      	ldr	r1, [pc, #76]	; (80187c8 <etharp_cleanup_netif+0x5c>)
 801877c:	68fa      	ldr	r2, [r7, #12]
 801877e:	4613      	mov	r3, r2
 8018780:	005b      	lsls	r3, r3, #1
 8018782:	4413      	add	r3, r2
 8018784:	00db      	lsls	r3, r3, #3
 8018786:	440b      	add	r3, r1
 8018788:	3314      	adds	r3, #20
 801878a:	781b      	ldrb	r3, [r3, #0]
 801878c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801878e:	7afb      	ldrb	r3, [r7, #11]
 8018790:	2b00      	cmp	r3, #0
 8018792:	d00e      	beq.n	80187b2 <etharp_cleanup_netif+0x46>
 8018794:	490c      	ldr	r1, [pc, #48]	; (80187c8 <etharp_cleanup_netif+0x5c>)
 8018796:	68fa      	ldr	r2, [r7, #12]
 8018798:	4613      	mov	r3, r2
 801879a:	005b      	lsls	r3, r3, #1
 801879c:	4413      	add	r3, r2
 801879e:	00db      	lsls	r3, r3, #3
 80187a0:	440b      	add	r3, r1
 80187a2:	3308      	adds	r3, #8
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	687a      	ldr	r2, [r7, #4]
 80187a8:	429a      	cmp	r2, r3
 80187aa:	d102      	bne.n	80187b2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80187ac:	68f8      	ldr	r0, [r7, #12]
 80187ae:	f7ff fce5 	bl	801817c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	3301      	adds	r3, #1
 80187b6:	60fb      	str	r3, [r7, #12]
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	2b09      	cmp	r3, #9
 80187bc:	dddd      	ble.n	801877a <etharp_cleanup_netif+0xe>
    }
  }
}
 80187be:	bf00      	nop
 80187c0:	3710      	adds	r7, #16
 80187c2:	46bd      	mov	sp, r7
 80187c4:	bd80      	pop	{r7, pc}
 80187c6:	bf00      	nop
 80187c8:	20000524 	.word	0x20000524

080187cc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80187cc:	b5b0      	push	{r4, r5, r7, lr}
 80187ce:	b08a      	sub	sp, #40	; 0x28
 80187d0:	af04      	add	r7, sp, #16
 80187d2:	6078      	str	r0, [r7, #4]
 80187d4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80187d6:	683b      	ldr	r3, [r7, #0]
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d107      	bne.n	80187ec <etharp_input+0x20>
 80187dc:	4b3f      	ldr	r3, [pc, #252]	; (80188dc <etharp_input+0x110>)
 80187de:	f240 228a 	movw	r2, #650	; 0x28a
 80187e2:	493f      	ldr	r1, [pc, #252]	; (80188e0 <etharp_input+0x114>)
 80187e4:	483f      	ldr	r0, [pc, #252]	; (80188e4 <etharp_input+0x118>)
 80187e6:	f002 fd45 	bl	801b274 <iprintf>
 80187ea:	e074      	b.n	80188d6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	685b      	ldr	r3, [r3, #4]
 80187f0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80187f2:	693b      	ldr	r3, [r7, #16]
 80187f4:	881b      	ldrh	r3, [r3, #0]
 80187f6:	b29b      	uxth	r3, r3
 80187f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80187fc:	d10c      	bne.n	8018818 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80187fe:	693b      	ldr	r3, [r7, #16]
 8018800:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018802:	2b06      	cmp	r3, #6
 8018804:	d108      	bne.n	8018818 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018806:	693b      	ldr	r3, [r7, #16]
 8018808:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801880a:	2b04      	cmp	r3, #4
 801880c:	d104      	bne.n	8018818 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801880e:	693b      	ldr	r3, [r7, #16]
 8018810:	885b      	ldrh	r3, [r3, #2]
 8018812:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018814:	2b08      	cmp	r3, #8
 8018816:	d003      	beq.n	8018820 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018818:	6878      	ldr	r0, [r7, #4]
 801881a:	f7f7 fca3 	bl	8010164 <pbuf_free>
    return;
 801881e:	e05a      	b.n	80188d6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018820:	693b      	ldr	r3, [r7, #16]
 8018822:	330e      	adds	r3, #14
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018828:	693b      	ldr	r3, [r7, #16]
 801882a:	3318      	adds	r3, #24
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018830:	683b      	ldr	r3, [r7, #0]
 8018832:	3304      	adds	r3, #4
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	2b00      	cmp	r3, #0
 8018838:	d102      	bne.n	8018840 <etharp_input+0x74>
    for_us = 0;
 801883a:	2300      	movs	r3, #0
 801883c:	75fb      	strb	r3, [r7, #23]
 801883e:	e009      	b.n	8018854 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018840:	68ba      	ldr	r2, [r7, #8]
 8018842:	683b      	ldr	r3, [r7, #0]
 8018844:	3304      	adds	r3, #4
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	429a      	cmp	r2, r3
 801884a:	bf0c      	ite	eq
 801884c:	2301      	moveq	r3, #1
 801884e:	2300      	movne	r3, #0
 8018850:	b2db      	uxtb	r3, r3
 8018852:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018854:	693b      	ldr	r3, [r7, #16]
 8018856:	f103 0208 	add.w	r2, r3, #8
 801885a:	7dfb      	ldrb	r3, [r7, #23]
 801885c:	2b00      	cmp	r3, #0
 801885e:	d001      	beq.n	8018864 <etharp_input+0x98>
 8018860:	2301      	movs	r3, #1
 8018862:	e000      	b.n	8018866 <etharp_input+0x9a>
 8018864:	2302      	movs	r3, #2
 8018866:	f107 010c 	add.w	r1, r7, #12
 801886a:	6838      	ldr	r0, [r7, #0]
 801886c:	f7ff fed8 	bl	8018620 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018870:	693b      	ldr	r3, [r7, #16]
 8018872:	88db      	ldrh	r3, [r3, #6]
 8018874:	b29b      	uxth	r3, r3
 8018876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801887a:	d003      	beq.n	8018884 <etharp_input+0xb8>
 801887c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018880:	d01e      	beq.n	80188c0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018882:	e025      	b.n	80188d0 <etharp_input+0x104>
      if (for_us) {
 8018884:	7dfb      	ldrb	r3, [r7, #23]
 8018886:	2b00      	cmp	r3, #0
 8018888:	d021      	beq.n	80188ce <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801888a:	683b      	ldr	r3, [r7, #0]
 801888c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8018890:	693b      	ldr	r3, [r7, #16]
 8018892:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8018896:	683b      	ldr	r3, [r7, #0]
 8018898:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801889c:	683b      	ldr	r3, [r7, #0]
 801889e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80188a0:	693a      	ldr	r2, [r7, #16]
 80188a2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80188a4:	2102      	movs	r1, #2
 80188a6:	9103      	str	r1, [sp, #12]
 80188a8:	f107 010c 	add.w	r1, r7, #12
 80188ac:	9102      	str	r1, [sp, #8]
 80188ae:	9201      	str	r2, [sp, #4]
 80188b0:	9300      	str	r3, [sp, #0]
 80188b2:	462b      	mov	r3, r5
 80188b4:	4622      	mov	r2, r4
 80188b6:	4601      	mov	r1, r0
 80188b8:	6838      	ldr	r0, [r7, #0]
 80188ba:	f000 faef 	bl	8018e9c <etharp_raw>
      break;
 80188be:	e006      	b.n	80188ce <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80188c0:	f107 030c 	add.w	r3, r7, #12
 80188c4:	4619      	mov	r1, r3
 80188c6:	6838      	ldr	r0, [r7, #0]
 80188c8:	f7fe f9fe 	bl	8016cc8 <dhcp_arp_reply>
      break;
 80188cc:	e000      	b.n	80188d0 <etharp_input+0x104>
      break;
 80188ce:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80188d0:	6878      	ldr	r0, [r7, #4]
 80188d2:	f7f7 fc47 	bl	8010164 <pbuf_free>
}
 80188d6:	3718      	adds	r7, #24
 80188d8:	46bd      	mov	sp, r7
 80188da:	bdb0      	pop	{r4, r5, r7, pc}
 80188dc:	08022e00 	.word	0x08022e00
 80188e0:	08022f50 	.word	0x08022f50
 80188e4:	08022e78 	.word	0x08022e78

080188e8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80188e8:	b580      	push	{r7, lr}
 80188ea:	b086      	sub	sp, #24
 80188ec:	af02      	add	r7, sp, #8
 80188ee:	60f8      	str	r0, [r7, #12]
 80188f0:	60b9      	str	r1, [r7, #8]
 80188f2:	4613      	mov	r3, r2
 80188f4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80188f6:	79fa      	ldrb	r2, [r7, #7]
 80188f8:	4944      	ldr	r1, [pc, #272]	; (8018a0c <etharp_output_to_arp_index+0x124>)
 80188fa:	4613      	mov	r3, r2
 80188fc:	005b      	lsls	r3, r3, #1
 80188fe:	4413      	add	r3, r2
 8018900:	00db      	lsls	r3, r3, #3
 8018902:	440b      	add	r3, r1
 8018904:	3314      	adds	r3, #20
 8018906:	781b      	ldrb	r3, [r3, #0]
 8018908:	2b01      	cmp	r3, #1
 801890a:	d806      	bhi.n	801891a <etharp_output_to_arp_index+0x32>
 801890c:	4b40      	ldr	r3, [pc, #256]	; (8018a10 <etharp_output_to_arp_index+0x128>)
 801890e:	f240 22ef 	movw	r2, #751	; 0x2ef
 8018912:	4940      	ldr	r1, [pc, #256]	; (8018a14 <etharp_output_to_arp_index+0x12c>)
 8018914:	4840      	ldr	r0, [pc, #256]	; (8018a18 <etharp_output_to_arp_index+0x130>)
 8018916:	f002 fcad 	bl	801b274 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801891a:	79fa      	ldrb	r2, [r7, #7]
 801891c:	493b      	ldr	r1, [pc, #236]	; (8018a0c <etharp_output_to_arp_index+0x124>)
 801891e:	4613      	mov	r3, r2
 8018920:	005b      	lsls	r3, r3, #1
 8018922:	4413      	add	r3, r2
 8018924:	00db      	lsls	r3, r3, #3
 8018926:	440b      	add	r3, r1
 8018928:	3314      	adds	r3, #20
 801892a:	781b      	ldrb	r3, [r3, #0]
 801892c:	2b02      	cmp	r3, #2
 801892e:	d153      	bne.n	80189d8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018930:	79fa      	ldrb	r2, [r7, #7]
 8018932:	4936      	ldr	r1, [pc, #216]	; (8018a0c <etharp_output_to_arp_index+0x124>)
 8018934:	4613      	mov	r3, r2
 8018936:	005b      	lsls	r3, r3, #1
 8018938:	4413      	add	r3, r2
 801893a:	00db      	lsls	r3, r3, #3
 801893c:	440b      	add	r3, r1
 801893e:	3312      	adds	r3, #18
 8018940:	881b      	ldrh	r3, [r3, #0]
 8018942:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8018946:	d919      	bls.n	801897c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018948:	79fa      	ldrb	r2, [r7, #7]
 801894a:	4613      	mov	r3, r2
 801894c:	005b      	lsls	r3, r3, #1
 801894e:	4413      	add	r3, r2
 8018950:	00db      	lsls	r3, r3, #3
 8018952:	4a2e      	ldr	r2, [pc, #184]	; (8018a0c <etharp_output_to_arp_index+0x124>)
 8018954:	4413      	add	r3, r2
 8018956:	3304      	adds	r3, #4
 8018958:	4619      	mov	r1, r3
 801895a:	68f8      	ldr	r0, [r7, #12]
 801895c:	f000 fb4c 	bl	8018ff8 <etharp_request>
 8018960:	4603      	mov	r3, r0
 8018962:	2b00      	cmp	r3, #0
 8018964:	d138      	bne.n	80189d8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018966:	79fa      	ldrb	r2, [r7, #7]
 8018968:	4928      	ldr	r1, [pc, #160]	; (8018a0c <etharp_output_to_arp_index+0x124>)
 801896a:	4613      	mov	r3, r2
 801896c:	005b      	lsls	r3, r3, #1
 801896e:	4413      	add	r3, r2
 8018970:	00db      	lsls	r3, r3, #3
 8018972:	440b      	add	r3, r1
 8018974:	3314      	adds	r3, #20
 8018976:	2203      	movs	r2, #3
 8018978:	701a      	strb	r2, [r3, #0]
 801897a:	e02d      	b.n	80189d8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801897c:	79fa      	ldrb	r2, [r7, #7]
 801897e:	4923      	ldr	r1, [pc, #140]	; (8018a0c <etharp_output_to_arp_index+0x124>)
 8018980:	4613      	mov	r3, r2
 8018982:	005b      	lsls	r3, r3, #1
 8018984:	4413      	add	r3, r2
 8018986:	00db      	lsls	r3, r3, #3
 8018988:	440b      	add	r3, r1
 801898a:	3312      	adds	r3, #18
 801898c:	881b      	ldrh	r3, [r3, #0]
 801898e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8018992:	d321      	bcc.n	80189d8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018994:	79fa      	ldrb	r2, [r7, #7]
 8018996:	4613      	mov	r3, r2
 8018998:	005b      	lsls	r3, r3, #1
 801899a:	4413      	add	r3, r2
 801899c:	00db      	lsls	r3, r3, #3
 801899e:	4a1b      	ldr	r2, [pc, #108]	; (8018a0c <etharp_output_to_arp_index+0x124>)
 80189a0:	4413      	add	r3, r2
 80189a2:	1d19      	adds	r1, r3, #4
 80189a4:	79fa      	ldrb	r2, [r7, #7]
 80189a6:	4613      	mov	r3, r2
 80189a8:	005b      	lsls	r3, r3, #1
 80189aa:	4413      	add	r3, r2
 80189ac:	00db      	lsls	r3, r3, #3
 80189ae:	3308      	adds	r3, #8
 80189b0:	4a16      	ldr	r2, [pc, #88]	; (8018a0c <etharp_output_to_arp_index+0x124>)
 80189b2:	4413      	add	r3, r2
 80189b4:	3304      	adds	r3, #4
 80189b6:	461a      	mov	r2, r3
 80189b8:	68f8      	ldr	r0, [r7, #12]
 80189ba:	f000 fafb 	bl	8018fb4 <etharp_request_dst>
 80189be:	4603      	mov	r3, r0
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d109      	bne.n	80189d8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80189c4:	79fa      	ldrb	r2, [r7, #7]
 80189c6:	4911      	ldr	r1, [pc, #68]	; (8018a0c <etharp_output_to_arp_index+0x124>)
 80189c8:	4613      	mov	r3, r2
 80189ca:	005b      	lsls	r3, r3, #1
 80189cc:	4413      	add	r3, r2
 80189ce:	00db      	lsls	r3, r3, #3
 80189d0:	440b      	add	r3, r1
 80189d2:	3314      	adds	r3, #20
 80189d4:	2203      	movs	r2, #3
 80189d6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80189d8:	68fb      	ldr	r3, [r7, #12]
 80189da:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80189de:	79fa      	ldrb	r2, [r7, #7]
 80189e0:	4613      	mov	r3, r2
 80189e2:	005b      	lsls	r3, r3, #1
 80189e4:	4413      	add	r3, r2
 80189e6:	00db      	lsls	r3, r3, #3
 80189e8:	3308      	adds	r3, #8
 80189ea:	4a08      	ldr	r2, [pc, #32]	; (8018a0c <etharp_output_to_arp_index+0x124>)
 80189ec:	4413      	add	r3, r2
 80189ee:	1d1a      	adds	r2, r3, #4
 80189f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80189f4:	9300      	str	r3, [sp, #0]
 80189f6:	4613      	mov	r3, r2
 80189f8:	460a      	mov	r2, r1
 80189fa:	68b9      	ldr	r1, [r7, #8]
 80189fc:	68f8      	ldr	r0, [r7, #12]
 80189fe:	f001 fe51 	bl	801a6a4 <ethernet_output>
 8018a02:	4603      	mov	r3, r0
}
 8018a04:	4618      	mov	r0, r3
 8018a06:	3710      	adds	r7, #16
 8018a08:	46bd      	mov	sp, r7
 8018a0a:	bd80      	pop	{r7, pc}
 8018a0c:	20000524 	.word	0x20000524
 8018a10:	08022e00 	.word	0x08022e00
 8018a14:	08022f70 	.word	0x08022f70
 8018a18:	08022e78 	.word	0x08022e78

08018a1c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018a1c:	b580      	push	{r7, lr}
 8018a1e:	b08a      	sub	sp, #40	; 0x28
 8018a20:	af02      	add	r7, sp, #8
 8018a22:	60f8      	str	r0, [r7, #12]
 8018a24:	60b9      	str	r1, [r7, #8]
 8018a26:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d106      	bne.n	8018a40 <etharp_output+0x24>
 8018a32:	4b73      	ldr	r3, [pc, #460]	; (8018c00 <etharp_output+0x1e4>)
 8018a34:	f240 321e 	movw	r2, #798	; 0x31e
 8018a38:	4972      	ldr	r1, [pc, #456]	; (8018c04 <etharp_output+0x1e8>)
 8018a3a:	4873      	ldr	r0, [pc, #460]	; (8018c08 <etharp_output+0x1ec>)
 8018a3c:	f002 fc1a 	bl	801b274 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018a40:	68bb      	ldr	r3, [r7, #8]
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d106      	bne.n	8018a54 <etharp_output+0x38>
 8018a46:	4b6e      	ldr	r3, [pc, #440]	; (8018c00 <etharp_output+0x1e4>)
 8018a48:	f240 321f 	movw	r2, #799	; 0x31f
 8018a4c:	496f      	ldr	r1, [pc, #444]	; (8018c0c <etharp_output+0x1f0>)
 8018a4e:	486e      	ldr	r0, [pc, #440]	; (8018c08 <etharp_output+0x1ec>)
 8018a50:	f002 fc10 	bl	801b274 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d106      	bne.n	8018a68 <etharp_output+0x4c>
 8018a5a:	4b69      	ldr	r3, [pc, #420]	; (8018c00 <etharp_output+0x1e4>)
 8018a5c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018a60:	496b      	ldr	r1, [pc, #428]	; (8018c10 <etharp_output+0x1f4>)
 8018a62:	4869      	ldr	r0, [pc, #420]	; (8018c08 <etharp_output+0x1ec>)
 8018a64:	f002 fc06 	bl	801b274 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	68f9      	ldr	r1, [r7, #12]
 8018a6e:	4618      	mov	r0, r3
 8018a70:	f000 ff14 	bl	801989c <ip4_addr_isbroadcast_u32>
 8018a74:	4603      	mov	r3, r0
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d002      	beq.n	8018a80 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018a7a:	4b66      	ldr	r3, [pc, #408]	; (8018c14 <etharp_output+0x1f8>)
 8018a7c:	61fb      	str	r3, [r7, #28]
 8018a7e:	e0af      	b.n	8018be0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018a88:	2be0      	cmp	r3, #224	; 0xe0
 8018a8a:	d118      	bne.n	8018abe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018a8c:	2301      	movs	r3, #1
 8018a8e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018a90:	2300      	movs	r3, #0
 8018a92:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018a94:	235e      	movs	r3, #94	; 0x5e
 8018a96:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	3301      	adds	r3, #1
 8018a9c:	781b      	ldrb	r3, [r3, #0]
 8018a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018aa2:	b2db      	uxtb	r3, r3
 8018aa4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	3302      	adds	r3, #2
 8018aaa:	781b      	ldrb	r3, [r3, #0]
 8018aac:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	3303      	adds	r3, #3
 8018ab2:	781b      	ldrb	r3, [r3, #0]
 8018ab4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018ab6:	f107 0310 	add.w	r3, r7, #16
 8018aba:	61fb      	str	r3, [r7, #28]
 8018abc:	e090      	b.n	8018be0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	681a      	ldr	r2, [r3, #0]
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	3304      	adds	r3, #4
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	405a      	eors	r2, r3
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	3308      	adds	r3, #8
 8018ace:	681b      	ldr	r3, [r3, #0]
 8018ad0:	4013      	ands	r3, r2
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d012      	beq.n	8018afc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	681b      	ldr	r3, [r3, #0]
 8018ada:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018adc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018ae0:	4293      	cmp	r3, r2
 8018ae2:	d00b      	beq.n	8018afc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018ae4:	68fb      	ldr	r3, [r7, #12]
 8018ae6:	330c      	adds	r3, #12
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d003      	beq.n	8018af6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018aee:	68fb      	ldr	r3, [r7, #12]
 8018af0:	330c      	adds	r3, #12
 8018af2:	61bb      	str	r3, [r7, #24]
 8018af4:	e002      	b.n	8018afc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018af6:	f06f 0303 	mvn.w	r3, #3
 8018afa:	e07d      	b.n	8018bf8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018afc:	4b46      	ldr	r3, [pc, #280]	; (8018c18 <etharp_output+0x1fc>)
 8018afe:	781b      	ldrb	r3, [r3, #0]
 8018b00:	4619      	mov	r1, r3
 8018b02:	4a46      	ldr	r2, [pc, #280]	; (8018c1c <etharp_output+0x200>)
 8018b04:	460b      	mov	r3, r1
 8018b06:	005b      	lsls	r3, r3, #1
 8018b08:	440b      	add	r3, r1
 8018b0a:	00db      	lsls	r3, r3, #3
 8018b0c:	4413      	add	r3, r2
 8018b0e:	3314      	adds	r3, #20
 8018b10:	781b      	ldrb	r3, [r3, #0]
 8018b12:	2b01      	cmp	r3, #1
 8018b14:	d925      	bls.n	8018b62 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018b16:	4b40      	ldr	r3, [pc, #256]	; (8018c18 <etharp_output+0x1fc>)
 8018b18:	781b      	ldrb	r3, [r3, #0]
 8018b1a:	4619      	mov	r1, r3
 8018b1c:	4a3f      	ldr	r2, [pc, #252]	; (8018c1c <etharp_output+0x200>)
 8018b1e:	460b      	mov	r3, r1
 8018b20:	005b      	lsls	r3, r3, #1
 8018b22:	440b      	add	r3, r1
 8018b24:	00db      	lsls	r3, r3, #3
 8018b26:	4413      	add	r3, r2
 8018b28:	3308      	adds	r3, #8
 8018b2a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018b2c:	68fa      	ldr	r2, [r7, #12]
 8018b2e:	429a      	cmp	r2, r3
 8018b30:	d117      	bne.n	8018b62 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018b32:	69bb      	ldr	r3, [r7, #24]
 8018b34:	681a      	ldr	r2, [r3, #0]
 8018b36:	4b38      	ldr	r3, [pc, #224]	; (8018c18 <etharp_output+0x1fc>)
 8018b38:	781b      	ldrb	r3, [r3, #0]
 8018b3a:	4618      	mov	r0, r3
 8018b3c:	4937      	ldr	r1, [pc, #220]	; (8018c1c <etharp_output+0x200>)
 8018b3e:	4603      	mov	r3, r0
 8018b40:	005b      	lsls	r3, r3, #1
 8018b42:	4403      	add	r3, r0
 8018b44:	00db      	lsls	r3, r3, #3
 8018b46:	440b      	add	r3, r1
 8018b48:	3304      	adds	r3, #4
 8018b4a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018b4c:	429a      	cmp	r2, r3
 8018b4e:	d108      	bne.n	8018b62 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018b50:	4b31      	ldr	r3, [pc, #196]	; (8018c18 <etharp_output+0x1fc>)
 8018b52:	781b      	ldrb	r3, [r3, #0]
 8018b54:	461a      	mov	r2, r3
 8018b56:	68b9      	ldr	r1, [r7, #8]
 8018b58:	68f8      	ldr	r0, [r7, #12]
 8018b5a:	f7ff fec5 	bl	80188e8 <etharp_output_to_arp_index>
 8018b5e:	4603      	mov	r3, r0
 8018b60:	e04a      	b.n	8018bf8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018b62:	2300      	movs	r3, #0
 8018b64:	75fb      	strb	r3, [r7, #23]
 8018b66:	e031      	b.n	8018bcc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018b68:	7dfa      	ldrb	r2, [r7, #23]
 8018b6a:	492c      	ldr	r1, [pc, #176]	; (8018c1c <etharp_output+0x200>)
 8018b6c:	4613      	mov	r3, r2
 8018b6e:	005b      	lsls	r3, r3, #1
 8018b70:	4413      	add	r3, r2
 8018b72:	00db      	lsls	r3, r3, #3
 8018b74:	440b      	add	r3, r1
 8018b76:	3314      	adds	r3, #20
 8018b78:	781b      	ldrb	r3, [r3, #0]
 8018b7a:	2b01      	cmp	r3, #1
 8018b7c:	d923      	bls.n	8018bc6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018b7e:	7dfa      	ldrb	r2, [r7, #23]
 8018b80:	4926      	ldr	r1, [pc, #152]	; (8018c1c <etharp_output+0x200>)
 8018b82:	4613      	mov	r3, r2
 8018b84:	005b      	lsls	r3, r3, #1
 8018b86:	4413      	add	r3, r2
 8018b88:	00db      	lsls	r3, r3, #3
 8018b8a:	440b      	add	r3, r1
 8018b8c:	3308      	adds	r3, #8
 8018b8e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018b90:	68fa      	ldr	r2, [r7, #12]
 8018b92:	429a      	cmp	r2, r3
 8018b94:	d117      	bne.n	8018bc6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018b96:	69bb      	ldr	r3, [r7, #24]
 8018b98:	6819      	ldr	r1, [r3, #0]
 8018b9a:	7dfa      	ldrb	r2, [r7, #23]
 8018b9c:	481f      	ldr	r0, [pc, #124]	; (8018c1c <etharp_output+0x200>)
 8018b9e:	4613      	mov	r3, r2
 8018ba0:	005b      	lsls	r3, r3, #1
 8018ba2:	4413      	add	r3, r2
 8018ba4:	00db      	lsls	r3, r3, #3
 8018ba6:	4403      	add	r3, r0
 8018ba8:	3304      	adds	r3, #4
 8018baa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018bac:	4299      	cmp	r1, r3
 8018bae:	d10a      	bne.n	8018bc6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018bb0:	4a19      	ldr	r2, [pc, #100]	; (8018c18 <etharp_output+0x1fc>)
 8018bb2:	7dfb      	ldrb	r3, [r7, #23]
 8018bb4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018bb6:	7dfb      	ldrb	r3, [r7, #23]
 8018bb8:	461a      	mov	r2, r3
 8018bba:	68b9      	ldr	r1, [r7, #8]
 8018bbc:	68f8      	ldr	r0, [r7, #12]
 8018bbe:	f7ff fe93 	bl	80188e8 <etharp_output_to_arp_index>
 8018bc2:	4603      	mov	r3, r0
 8018bc4:	e018      	b.n	8018bf8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018bc6:	7dfb      	ldrb	r3, [r7, #23]
 8018bc8:	3301      	adds	r3, #1
 8018bca:	75fb      	strb	r3, [r7, #23]
 8018bcc:	7dfb      	ldrb	r3, [r7, #23]
 8018bce:	2b09      	cmp	r3, #9
 8018bd0:	d9ca      	bls.n	8018b68 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018bd2:	68ba      	ldr	r2, [r7, #8]
 8018bd4:	69b9      	ldr	r1, [r7, #24]
 8018bd6:	68f8      	ldr	r0, [r7, #12]
 8018bd8:	f000 f822 	bl	8018c20 <etharp_query>
 8018bdc:	4603      	mov	r3, r0
 8018bde:	e00b      	b.n	8018bf8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018be0:	68fb      	ldr	r3, [r7, #12]
 8018be2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8018be6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018bea:	9300      	str	r3, [sp, #0]
 8018bec:	69fb      	ldr	r3, [r7, #28]
 8018bee:	68b9      	ldr	r1, [r7, #8]
 8018bf0:	68f8      	ldr	r0, [r7, #12]
 8018bf2:	f001 fd57 	bl	801a6a4 <ethernet_output>
 8018bf6:	4603      	mov	r3, r0
}
 8018bf8:	4618      	mov	r0, r3
 8018bfa:	3720      	adds	r7, #32
 8018bfc:	46bd      	mov	sp, r7
 8018bfe:	bd80      	pop	{r7, pc}
 8018c00:	08022e00 	.word	0x08022e00
 8018c04:	08022f50 	.word	0x08022f50
 8018c08:	08022e78 	.word	0x08022e78
 8018c0c:	08022fa0 	.word	0x08022fa0
 8018c10:	08022f40 	.word	0x08022f40
 8018c14:	08023b24 	.word	0x08023b24
 8018c18:	20000614 	.word	0x20000614
 8018c1c:	20000524 	.word	0x20000524

08018c20 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018c20:	b580      	push	{r7, lr}
 8018c22:	b08c      	sub	sp, #48	; 0x30
 8018c24:	af02      	add	r7, sp, #8
 8018c26:	60f8      	str	r0, [r7, #12]
 8018c28:	60b9      	str	r1, [r7, #8]
 8018c2a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018c2c:	68fb      	ldr	r3, [r7, #12]
 8018c2e:	332a      	adds	r3, #42	; 0x2a
 8018c30:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018c32:	23ff      	movs	r3, #255	; 0xff
 8018c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018c38:	2300      	movs	r3, #0
 8018c3a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018c3c:	68bb      	ldr	r3, [r7, #8]
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	68f9      	ldr	r1, [r7, #12]
 8018c42:	4618      	mov	r0, r3
 8018c44:	f000 fe2a 	bl	801989c <ip4_addr_isbroadcast_u32>
 8018c48:	4603      	mov	r3, r0
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d10c      	bne.n	8018c68 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018c4e:	68bb      	ldr	r3, [r7, #8]
 8018c50:	681b      	ldr	r3, [r3, #0]
 8018c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018c56:	2be0      	cmp	r3, #224	; 0xe0
 8018c58:	d006      	beq.n	8018c68 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018c5a:	68bb      	ldr	r3, [r7, #8]
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d003      	beq.n	8018c68 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018c60:	68bb      	ldr	r3, [r7, #8]
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d102      	bne.n	8018c6e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018c68:	f06f 030f 	mvn.w	r3, #15
 8018c6c:	e102      	b.n	8018e74 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018c6e:	68fa      	ldr	r2, [r7, #12]
 8018c70:	2101      	movs	r1, #1
 8018c72:	68b8      	ldr	r0, [r7, #8]
 8018c74:	f7ff fb5c 	bl	8018330 <etharp_find_entry>
 8018c78:	4603      	mov	r3, r0
 8018c7a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018c7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	da02      	bge.n	8018c8a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018c84:	8a7b      	ldrh	r3, [r7, #18]
 8018c86:	b25b      	sxtb	r3, r3
 8018c88:	e0f4      	b.n	8018e74 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018c8a:	8a7b      	ldrh	r3, [r7, #18]
 8018c8c:	2b7e      	cmp	r3, #126	; 0x7e
 8018c8e:	d906      	bls.n	8018c9e <etharp_query+0x7e>
 8018c90:	4b7a      	ldr	r3, [pc, #488]	; (8018e7c <etharp_query+0x25c>)
 8018c92:	f240 32c1 	movw	r2, #961	; 0x3c1
 8018c96:	497a      	ldr	r1, [pc, #488]	; (8018e80 <etharp_query+0x260>)
 8018c98:	487a      	ldr	r0, [pc, #488]	; (8018e84 <etharp_query+0x264>)
 8018c9a:	f002 faeb 	bl	801b274 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018c9e:	8a7b      	ldrh	r3, [r7, #18]
 8018ca0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018ca2:	7c7a      	ldrb	r2, [r7, #17]
 8018ca4:	4978      	ldr	r1, [pc, #480]	; (8018e88 <etharp_query+0x268>)
 8018ca6:	4613      	mov	r3, r2
 8018ca8:	005b      	lsls	r3, r3, #1
 8018caa:	4413      	add	r3, r2
 8018cac:	00db      	lsls	r3, r3, #3
 8018cae:	440b      	add	r3, r1
 8018cb0:	3314      	adds	r3, #20
 8018cb2:	781b      	ldrb	r3, [r3, #0]
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d115      	bne.n	8018ce4 <etharp_query+0xc4>
    is_new_entry = 1;
 8018cb8:	2301      	movs	r3, #1
 8018cba:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018cbc:	7c7a      	ldrb	r2, [r7, #17]
 8018cbe:	4972      	ldr	r1, [pc, #456]	; (8018e88 <etharp_query+0x268>)
 8018cc0:	4613      	mov	r3, r2
 8018cc2:	005b      	lsls	r3, r3, #1
 8018cc4:	4413      	add	r3, r2
 8018cc6:	00db      	lsls	r3, r3, #3
 8018cc8:	440b      	add	r3, r1
 8018cca:	3314      	adds	r3, #20
 8018ccc:	2201      	movs	r2, #1
 8018cce:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018cd0:	7c7a      	ldrb	r2, [r7, #17]
 8018cd2:	496d      	ldr	r1, [pc, #436]	; (8018e88 <etharp_query+0x268>)
 8018cd4:	4613      	mov	r3, r2
 8018cd6:	005b      	lsls	r3, r3, #1
 8018cd8:	4413      	add	r3, r2
 8018cda:	00db      	lsls	r3, r3, #3
 8018cdc:	440b      	add	r3, r1
 8018cde:	3308      	adds	r3, #8
 8018ce0:	68fa      	ldr	r2, [r7, #12]
 8018ce2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018ce4:	7c7a      	ldrb	r2, [r7, #17]
 8018ce6:	4968      	ldr	r1, [pc, #416]	; (8018e88 <etharp_query+0x268>)
 8018ce8:	4613      	mov	r3, r2
 8018cea:	005b      	lsls	r3, r3, #1
 8018cec:	4413      	add	r3, r2
 8018cee:	00db      	lsls	r3, r3, #3
 8018cf0:	440b      	add	r3, r1
 8018cf2:	3314      	adds	r3, #20
 8018cf4:	781b      	ldrb	r3, [r3, #0]
 8018cf6:	2b01      	cmp	r3, #1
 8018cf8:	d011      	beq.n	8018d1e <etharp_query+0xfe>
 8018cfa:	7c7a      	ldrb	r2, [r7, #17]
 8018cfc:	4962      	ldr	r1, [pc, #392]	; (8018e88 <etharp_query+0x268>)
 8018cfe:	4613      	mov	r3, r2
 8018d00:	005b      	lsls	r3, r3, #1
 8018d02:	4413      	add	r3, r2
 8018d04:	00db      	lsls	r3, r3, #3
 8018d06:	440b      	add	r3, r1
 8018d08:	3314      	adds	r3, #20
 8018d0a:	781b      	ldrb	r3, [r3, #0]
 8018d0c:	2b01      	cmp	r3, #1
 8018d0e:	d806      	bhi.n	8018d1e <etharp_query+0xfe>
 8018d10:	4b5a      	ldr	r3, [pc, #360]	; (8018e7c <etharp_query+0x25c>)
 8018d12:	f240 32cf 	movw	r2, #975	; 0x3cf
 8018d16:	495d      	ldr	r1, [pc, #372]	; (8018e8c <etharp_query+0x26c>)
 8018d18:	485a      	ldr	r0, [pc, #360]	; (8018e84 <etharp_query+0x264>)
 8018d1a:	f002 faab 	bl	801b274 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018d1e:	6a3b      	ldr	r3, [r7, #32]
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d102      	bne.n	8018d2a <etharp_query+0x10a>
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d10c      	bne.n	8018d44 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018d2a:	68b9      	ldr	r1, [r7, #8]
 8018d2c:	68f8      	ldr	r0, [r7, #12]
 8018d2e:	f000 f963 	bl	8018ff8 <etharp_request>
 8018d32:	4603      	mov	r3, r0
 8018d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d102      	bne.n	8018d44 <etharp_query+0x124>
      return result;
 8018d3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018d42:	e097      	b.n	8018e74 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d106      	bne.n	8018d58 <etharp_query+0x138>
 8018d4a:	4b4c      	ldr	r3, [pc, #304]	; (8018e7c <etharp_query+0x25c>)
 8018d4c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018d50:	494f      	ldr	r1, [pc, #316]	; (8018e90 <etharp_query+0x270>)
 8018d52:	484c      	ldr	r0, [pc, #304]	; (8018e84 <etharp_query+0x264>)
 8018d54:	f002 fa8e 	bl	801b274 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018d58:	7c7a      	ldrb	r2, [r7, #17]
 8018d5a:	494b      	ldr	r1, [pc, #300]	; (8018e88 <etharp_query+0x268>)
 8018d5c:	4613      	mov	r3, r2
 8018d5e:	005b      	lsls	r3, r3, #1
 8018d60:	4413      	add	r3, r2
 8018d62:	00db      	lsls	r3, r3, #3
 8018d64:	440b      	add	r3, r1
 8018d66:	3314      	adds	r3, #20
 8018d68:	781b      	ldrb	r3, [r3, #0]
 8018d6a:	2b01      	cmp	r3, #1
 8018d6c:	d918      	bls.n	8018da0 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018d6e:	4a49      	ldr	r2, [pc, #292]	; (8018e94 <etharp_query+0x274>)
 8018d70:	7c7b      	ldrb	r3, [r7, #17]
 8018d72:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018d74:	7c7a      	ldrb	r2, [r7, #17]
 8018d76:	4613      	mov	r3, r2
 8018d78:	005b      	lsls	r3, r3, #1
 8018d7a:	4413      	add	r3, r2
 8018d7c:	00db      	lsls	r3, r3, #3
 8018d7e:	3308      	adds	r3, #8
 8018d80:	4a41      	ldr	r2, [pc, #260]	; (8018e88 <etharp_query+0x268>)
 8018d82:	4413      	add	r3, r2
 8018d84:	1d1a      	adds	r2, r3, #4
 8018d86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018d8a:	9300      	str	r3, [sp, #0]
 8018d8c:	4613      	mov	r3, r2
 8018d8e:	697a      	ldr	r2, [r7, #20]
 8018d90:	6879      	ldr	r1, [r7, #4]
 8018d92:	68f8      	ldr	r0, [r7, #12]
 8018d94:	f001 fc86 	bl	801a6a4 <ethernet_output>
 8018d98:	4603      	mov	r3, r0
 8018d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018d9e:	e067      	b.n	8018e70 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018da0:	7c7a      	ldrb	r2, [r7, #17]
 8018da2:	4939      	ldr	r1, [pc, #228]	; (8018e88 <etharp_query+0x268>)
 8018da4:	4613      	mov	r3, r2
 8018da6:	005b      	lsls	r3, r3, #1
 8018da8:	4413      	add	r3, r2
 8018daa:	00db      	lsls	r3, r3, #3
 8018dac:	440b      	add	r3, r1
 8018dae:	3314      	adds	r3, #20
 8018db0:	781b      	ldrb	r3, [r3, #0]
 8018db2:	2b01      	cmp	r3, #1
 8018db4:	d15c      	bne.n	8018e70 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018db6:	2300      	movs	r3, #0
 8018db8:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018dbe:	e01c      	b.n	8018dfa <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018dc0:	69fb      	ldr	r3, [r7, #28]
 8018dc2:	895a      	ldrh	r2, [r3, #10]
 8018dc4:	69fb      	ldr	r3, [r7, #28]
 8018dc6:	891b      	ldrh	r3, [r3, #8]
 8018dc8:	429a      	cmp	r2, r3
 8018dca:	d10a      	bne.n	8018de2 <etharp_query+0x1c2>
 8018dcc:	69fb      	ldr	r3, [r7, #28]
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d006      	beq.n	8018de2 <etharp_query+0x1c2>
 8018dd4:	4b29      	ldr	r3, [pc, #164]	; (8018e7c <etharp_query+0x25c>)
 8018dd6:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018dda:	492f      	ldr	r1, [pc, #188]	; (8018e98 <etharp_query+0x278>)
 8018ddc:	4829      	ldr	r0, [pc, #164]	; (8018e84 <etharp_query+0x264>)
 8018dde:	f002 fa49 	bl	801b274 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018de2:	69fb      	ldr	r3, [r7, #28]
 8018de4:	7b1b      	ldrb	r3, [r3, #12]
 8018de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d002      	beq.n	8018df4 <etharp_query+0x1d4>
        copy_needed = 1;
 8018dee:	2301      	movs	r3, #1
 8018df0:	61bb      	str	r3, [r7, #24]
        break;
 8018df2:	e005      	b.n	8018e00 <etharp_query+0x1e0>
      }
      p = p->next;
 8018df4:	69fb      	ldr	r3, [r7, #28]
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018dfa:	69fb      	ldr	r3, [r7, #28]
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d1df      	bne.n	8018dc0 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8018e00:	69bb      	ldr	r3, [r7, #24]
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d007      	beq.n	8018e16 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018e06:	687a      	ldr	r2, [r7, #4]
 8018e08:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018e0c:	200e      	movs	r0, #14
 8018e0e:	f7f7 fc15 	bl	801063c <pbuf_clone>
 8018e12:	61f8      	str	r0, [r7, #28]
 8018e14:	e004      	b.n	8018e20 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018e1a:	69f8      	ldr	r0, [r7, #28]
 8018e1c:	f7f7 fa42 	bl	80102a4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018e20:	69fb      	ldr	r3, [r7, #28]
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d021      	beq.n	8018e6a <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018e26:	7c7a      	ldrb	r2, [r7, #17]
 8018e28:	4917      	ldr	r1, [pc, #92]	; (8018e88 <etharp_query+0x268>)
 8018e2a:	4613      	mov	r3, r2
 8018e2c:	005b      	lsls	r3, r3, #1
 8018e2e:	4413      	add	r3, r2
 8018e30:	00db      	lsls	r3, r3, #3
 8018e32:	440b      	add	r3, r1
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	d00a      	beq.n	8018e50 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018e3a:	7c7a      	ldrb	r2, [r7, #17]
 8018e3c:	4912      	ldr	r1, [pc, #72]	; (8018e88 <etharp_query+0x268>)
 8018e3e:	4613      	mov	r3, r2
 8018e40:	005b      	lsls	r3, r3, #1
 8018e42:	4413      	add	r3, r2
 8018e44:	00db      	lsls	r3, r3, #3
 8018e46:	440b      	add	r3, r1
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	f7f7 f98a 	bl	8010164 <pbuf_free>
      }
      arp_table[i].q = p;
 8018e50:	7c7a      	ldrb	r2, [r7, #17]
 8018e52:	490d      	ldr	r1, [pc, #52]	; (8018e88 <etharp_query+0x268>)
 8018e54:	4613      	mov	r3, r2
 8018e56:	005b      	lsls	r3, r3, #1
 8018e58:	4413      	add	r3, r2
 8018e5a:	00db      	lsls	r3, r3, #3
 8018e5c:	440b      	add	r3, r1
 8018e5e:	69fa      	ldr	r2, [r7, #28]
 8018e60:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018e62:	2300      	movs	r3, #0
 8018e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018e68:	e002      	b.n	8018e70 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018e6a:	23ff      	movs	r3, #255	; 0xff
 8018e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018e70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8018e74:	4618      	mov	r0, r3
 8018e76:	3728      	adds	r7, #40	; 0x28
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	bd80      	pop	{r7, pc}
 8018e7c:	08022e00 	.word	0x08022e00
 8018e80:	08022fac 	.word	0x08022fac
 8018e84:	08022e78 	.word	0x08022e78
 8018e88:	20000524 	.word	0x20000524
 8018e8c:	08022fbc 	.word	0x08022fbc
 8018e90:	08022fa0 	.word	0x08022fa0
 8018e94:	20000614 	.word	0x20000614
 8018e98:	08022fe4 	.word	0x08022fe4

08018e9c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018e9c:	b580      	push	{r7, lr}
 8018e9e:	b08a      	sub	sp, #40	; 0x28
 8018ea0:	af02      	add	r7, sp, #8
 8018ea2:	60f8      	str	r0, [r7, #12]
 8018ea4:	60b9      	str	r1, [r7, #8]
 8018ea6:	607a      	str	r2, [r7, #4]
 8018ea8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018eaa:	2300      	movs	r3, #0
 8018eac:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018eae:	68fb      	ldr	r3, [r7, #12]
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d106      	bne.n	8018ec2 <etharp_raw+0x26>
 8018eb4:	4b3a      	ldr	r3, [pc, #232]	; (8018fa0 <etharp_raw+0x104>)
 8018eb6:	f240 4257 	movw	r2, #1111	; 0x457
 8018eba:	493a      	ldr	r1, [pc, #232]	; (8018fa4 <etharp_raw+0x108>)
 8018ebc:	483a      	ldr	r0, [pc, #232]	; (8018fa8 <etharp_raw+0x10c>)
 8018ebe:	f002 f9d9 	bl	801b274 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018ec2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018ec6:	211c      	movs	r1, #28
 8018ec8:	200e      	movs	r0, #14
 8018eca:	f7f6 fe6b 	bl	800fba4 <pbuf_alloc>
 8018ece:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018ed0:	69bb      	ldr	r3, [r7, #24]
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d102      	bne.n	8018edc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8018eda:	e05d      	b.n	8018f98 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018edc:	69bb      	ldr	r3, [r7, #24]
 8018ede:	895b      	ldrh	r3, [r3, #10]
 8018ee0:	2b1b      	cmp	r3, #27
 8018ee2:	d806      	bhi.n	8018ef2 <etharp_raw+0x56>
 8018ee4:	4b2e      	ldr	r3, [pc, #184]	; (8018fa0 <etharp_raw+0x104>)
 8018ee6:	f240 4263 	movw	r2, #1123	; 0x463
 8018eea:	4930      	ldr	r1, [pc, #192]	; (8018fac <etharp_raw+0x110>)
 8018eec:	482e      	ldr	r0, [pc, #184]	; (8018fa8 <etharp_raw+0x10c>)
 8018eee:	f002 f9c1 	bl	801b274 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018ef2:	69bb      	ldr	r3, [r7, #24]
 8018ef4:	685b      	ldr	r3, [r3, #4]
 8018ef6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018ef8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018efa:	4618      	mov	r0, r3
 8018efc:	f7f5 fe9a 	bl	800ec34 <lwip_htons>
 8018f00:	4603      	mov	r3, r0
 8018f02:	461a      	mov	r2, r3
 8018f04:	697b      	ldr	r3, [r7, #20]
 8018f06:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018f0e:	2b06      	cmp	r3, #6
 8018f10:	d006      	beq.n	8018f20 <etharp_raw+0x84>
 8018f12:	4b23      	ldr	r3, [pc, #140]	; (8018fa0 <etharp_raw+0x104>)
 8018f14:	f240 426a 	movw	r2, #1130	; 0x46a
 8018f18:	4925      	ldr	r1, [pc, #148]	; (8018fb0 <etharp_raw+0x114>)
 8018f1a:	4823      	ldr	r0, [pc, #140]	; (8018fa8 <etharp_raw+0x10c>)
 8018f1c:	f002 f9aa 	bl	801b274 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018f20:	697b      	ldr	r3, [r7, #20]
 8018f22:	3308      	adds	r3, #8
 8018f24:	2206      	movs	r2, #6
 8018f26:	6839      	ldr	r1, [r7, #0]
 8018f28:	4618      	mov	r0, r3
 8018f2a:	f001 fc72 	bl	801a812 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018f2e:	697b      	ldr	r3, [r7, #20]
 8018f30:	3312      	adds	r3, #18
 8018f32:	2206      	movs	r2, #6
 8018f34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018f36:	4618      	mov	r0, r3
 8018f38:	f001 fc6b 	bl	801a812 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018f3c:	697b      	ldr	r3, [r7, #20]
 8018f3e:	330e      	adds	r3, #14
 8018f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018f42:	6812      	ldr	r2, [r2, #0]
 8018f44:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8018f46:	697b      	ldr	r3, [r7, #20]
 8018f48:	3318      	adds	r3, #24
 8018f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018f4c:	6812      	ldr	r2, [r2, #0]
 8018f4e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018f50:	697b      	ldr	r3, [r7, #20]
 8018f52:	2200      	movs	r2, #0
 8018f54:	701a      	strb	r2, [r3, #0]
 8018f56:	2200      	movs	r2, #0
 8018f58:	f042 0201 	orr.w	r2, r2, #1
 8018f5c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018f5e:	697b      	ldr	r3, [r7, #20]
 8018f60:	2200      	movs	r2, #0
 8018f62:	f042 0208 	orr.w	r2, r2, #8
 8018f66:	709a      	strb	r2, [r3, #2]
 8018f68:	2200      	movs	r2, #0
 8018f6a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018f6c:	697b      	ldr	r3, [r7, #20]
 8018f6e:	2206      	movs	r2, #6
 8018f70:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8018f72:	697b      	ldr	r3, [r7, #20]
 8018f74:	2204      	movs	r2, #4
 8018f76:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018f78:	f640 0306 	movw	r3, #2054	; 0x806
 8018f7c:	9300      	str	r3, [sp, #0]
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	68ba      	ldr	r2, [r7, #8]
 8018f82:	69b9      	ldr	r1, [r7, #24]
 8018f84:	68f8      	ldr	r0, [r7, #12]
 8018f86:	f001 fb8d 	bl	801a6a4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018f8a:	69b8      	ldr	r0, [r7, #24]
 8018f8c:	f7f7 f8ea 	bl	8010164 <pbuf_free>
  p = NULL;
 8018f90:	2300      	movs	r3, #0
 8018f92:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018f94:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018f98:	4618      	mov	r0, r3
 8018f9a:	3720      	adds	r7, #32
 8018f9c:	46bd      	mov	sp, r7
 8018f9e:	bd80      	pop	{r7, pc}
 8018fa0:	08022e00 	.word	0x08022e00
 8018fa4:	08022f50 	.word	0x08022f50
 8018fa8:	08022e78 	.word	0x08022e78
 8018fac:	08023000 	.word	0x08023000
 8018fb0:	08023034 	.word	0x08023034

08018fb4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8018fb4:	b580      	push	{r7, lr}
 8018fb6:	b088      	sub	sp, #32
 8018fb8:	af04      	add	r7, sp, #16
 8018fba:	60f8      	str	r0, [r7, #12]
 8018fbc:	60b9      	str	r1, [r7, #8]
 8018fbe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018fc6:	68fb      	ldr	r3, [r7, #12]
 8018fc8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8018fcc:	68fb      	ldr	r3, [r7, #12]
 8018fce:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018fd0:	2201      	movs	r2, #1
 8018fd2:	9203      	str	r2, [sp, #12]
 8018fd4:	68ba      	ldr	r2, [r7, #8]
 8018fd6:	9202      	str	r2, [sp, #8]
 8018fd8:	4a06      	ldr	r2, [pc, #24]	; (8018ff4 <etharp_request_dst+0x40>)
 8018fda:	9201      	str	r2, [sp, #4]
 8018fdc:	9300      	str	r3, [sp, #0]
 8018fde:	4603      	mov	r3, r0
 8018fe0:	687a      	ldr	r2, [r7, #4]
 8018fe2:	68f8      	ldr	r0, [r7, #12]
 8018fe4:	f7ff ff5a 	bl	8018e9c <etharp_raw>
 8018fe8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018fea:	4618      	mov	r0, r3
 8018fec:	3710      	adds	r7, #16
 8018fee:	46bd      	mov	sp, r7
 8018ff0:	bd80      	pop	{r7, pc}
 8018ff2:	bf00      	nop
 8018ff4:	08023b2c 	.word	0x08023b2c

08018ff8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018ff8:	b580      	push	{r7, lr}
 8018ffa:	b082      	sub	sp, #8
 8018ffc:	af00      	add	r7, sp, #0
 8018ffe:	6078      	str	r0, [r7, #4]
 8019000:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8019002:	4a05      	ldr	r2, [pc, #20]	; (8019018 <etharp_request+0x20>)
 8019004:	6839      	ldr	r1, [r7, #0]
 8019006:	6878      	ldr	r0, [r7, #4]
 8019008:	f7ff ffd4 	bl	8018fb4 <etharp_request_dst>
 801900c:	4603      	mov	r3, r0
}
 801900e:	4618      	mov	r0, r3
 8019010:	3708      	adds	r7, #8
 8019012:	46bd      	mov	sp, r7
 8019014:	bd80      	pop	{r7, pc}
 8019016:	bf00      	nop
 8019018:	08023b24 	.word	0x08023b24

0801901c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801901c:	b580      	push	{r7, lr}
 801901e:	b08e      	sub	sp, #56	; 0x38
 8019020:	af04      	add	r7, sp, #16
 8019022:	6078      	str	r0, [r7, #4]
 8019024:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8019026:	4b79      	ldr	r3, [pc, #484]	; (801920c <icmp_input+0x1f0>)
 8019028:	689b      	ldr	r3, [r3, #8]
 801902a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801902e:	781b      	ldrb	r3, [r3, #0]
 8019030:	f003 030f 	and.w	r3, r3, #15
 8019034:	b2db      	uxtb	r3, r3
 8019036:	009b      	lsls	r3, r3, #2
 8019038:	b2db      	uxtb	r3, r3
 801903a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801903c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801903e:	2b13      	cmp	r3, #19
 8019040:	f240 80cd 	bls.w	80191de <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	895b      	ldrh	r3, [r3, #10]
 8019048:	2b03      	cmp	r3, #3
 801904a:	f240 80ca 	bls.w	80191e2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	685b      	ldr	r3, [r3, #4]
 8019052:	781b      	ldrb	r3, [r3, #0]
 8019054:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8019058:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801905c:	2b00      	cmp	r3, #0
 801905e:	f000 80b7 	beq.w	80191d0 <icmp_input+0x1b4>
 8019062:	2b08      	cmp	r3, #8
 8019064:	f040 80b7 	bne.w	80191d6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8019068:	4b69      	ldr	r3, [pc, #420]	; (8019210 <icmp_input+0x1f4>)
 801906a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801906c:	4b67      	ldr	r3, [pc, #412]	; (801920c <icmp_input+0x1f0>)
 801906e:	695b      	ldr	r3, [r3, #20]
 8019070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019074:	2be0      	cmp	r3, #224	; 0xe0
 8019076:	f000 80bb 	beq.w	80191f0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801907a:	4b64      	ldr	r3, [pc, #400]	; (801920c <icmp_input+0x1f0>)
 801907c:	695a      	ldr	r2, [r3, #20]
 801907e:	4b63      	ldr	r3, [pc, #396]	; (801920c <icmp_input+0x1f0>)
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	4619      	mov	r1, r3
 8019084:	4610      	mov	r0, r2
 8019086:	f000 fc09 	bl	801989c <ip4_addr_isbroadcast_u32>
 801908a:	4603      	mov	r3, r0
 801908c:	2b00      	cmp	r3, #0
 801908e:	f040 80b1 	bne.w	80191f4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	891b      	ldrh	r3, [r3, #8]
 8019096:	2b07      	cmp	r3, #7
 8019098:	f240 80a5 	bls.w	80191e6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801909c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801909e:	330e      	adds	r3, #14
 80190a0:	4619      	mov	r1, r3
 80190a2:	6878      	ldr	r0, [r7, #4]
 80190a4:	f7f6 ffc8 	bl	8010038 <pbuf_add_header>
 80190a8:	4603      	mov	r3, r0
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d04b      	beq.n	8019146 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	891a      	ldrh	r2, [r3, #8]
 80190b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80190b4:	4413      	add	r3, r2
 80190b6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	891b      	ldrh	r3, [r3, #8]
 80190bc:	8b7a      	ldrh	r2, [r7, #26]
 80190be:	429a      	cmp	r2, r3
 80190c0:	f0c0 809a 	bcc.w	80191f8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80190c4:	8b7b      	ldrh	r3, [r7, #26]
 80190c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80190ca:	4619      	mov	r1, r3
 80190cc:	200e      	movs	r0, #14
 80190ce:	f7f6 fd69 	bl	800fba4 <pbuf_alloc>
 80190d2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80190d4:	697b      	ldr	r3, [r7, #20]
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	f000 8090 	beq.w	80191fc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80190dc:	697b      	ldr	r3, [r7, #20]
 80190de:	895b      	ldrh	r3, [r3, #10]
 80190e0:	461a      	mov	r2, r3
 80190e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80190e4:	3308      	adds	r3, #8
 80190e6:	429a      	cmp	r2, r3
 80190e8:	d203      	bcs.n	80190f2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80190ea:	6978      	ldr	r0, [r7, #20]
 80190ec:	f7f7 f83a 	bl	8010164 <pbuf_free>
          goto icmperr;
 80190f0:	e085      	b.n	80191fe <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80190f2:	697b      	ldr	r3, [r7, #20]
 80190f4:	685b      	ldr	r3, [r3, #4]
 80190f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80190f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80190fa:	4618      	mov	r0, r3
 80190fc:	f001 fb89 	bl	801a812 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019100:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019102:	4619      	mov	r1, r3
 8019104:	6978      	ldr	r0, [r7, #20]
 8019106:	f7f6 ffa7 	bl	8010058 <pbuf_remove_header>
 801910a:	4603      	mov	r3, r0
 801910c:	2b00      	cmp	r3, #0
 801910e:	d009      	beq.n	8019124 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019110:	4b40      	ldr	r3, [pc, #256]	; (8019214 <icmp_input+0x1f8>)
 8019112:	22b6      	movs	r2, #182	; 0xb6
 8019114:	4940      	ldr	r1, [pc, #256]	; (8019218 <icmp_input+0x1fc>)
 8019116:	4841      	ldr	r0, [pc, #260]	; (801921c <icmp_input+0x200>)
 8019118:	f002 f8ac 	bl	801b274 <iprintf>
          pbuf_free(r);
 801911c:	6978      	ldr	r0, [r7, #20]
 801911e:	f7f7 f821 	bl	8010164 <pbuf_free>
          goto icmperr;
 8019122:	e06c      	b.n	80191fe <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019124:	6879      	ldr	r1, [r7, #4]
 8019126:	6978      	ldr	r0, [r7, #20]
 8019128:	f7f7 f944 	bl	80103b4 <pbuf_copy>
 801912c:	4603      	mov	r3, r0
 801912e:	2b00      	cmp	r3, #0
 8019130:	d003      	beq.n	801913a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019132:	6978      	ldr	r0, [r7, #20]
 8019134:	f7f7 f816 	bl	8010164 <pbuf_free>
          goto icmperr;
 8019138:	e061      	b.n	80191fe <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801913a:	6878      	ldr	r0, [r7, #4]
 801913c:	f7f7 f812 	bl	8010164 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019140:	697b      	ldr	r3, [r7, #20]
 8019142:	607b      	str	r3, [r7, #4]
 8019144:	e00f      	b.n	8019166 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019146:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019148:	330e      	adds	r3, #14
 801914a:	4619      	mov	r1, r3
 801914c:	6878      	ldr	r0, [r7, #4]
 801914e:	f7f6 ff83 	bl	8010058 <pbuf_remove_header>
 8019152:	4603      	mov	r3, r0
 8019154:	2b00      	cmp	r3, #0
 8019156:	d006      	beq.n	8019166 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019158:	4b2e      	ldr	r3, [pc, #184]	; (8019214 <icmp_input+0x1f8>)
 801915a:	22c7      	movs	r2, #199	; 0xc7
 801915c:	4930      	ldr	r1, [pc, #192]	; (8019220 <icmp_input+0x204>)
 801915e:	482f      	ldr	r0, [pc, #188]	; (801921c <icmp_input+0x200>)
 8019160:	f002 f888 	bl	801b274 <iprintf>
          goto icmperr;
 8019164:	e04b      	b.n	80191fe <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	685b      	ldr	r3, [r3, #4]
 801916a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801916c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801916e:	4619      	mov	r1, r3
 8019170:	6878      	ldr	r0, [r7, #4]
 8019172:	f7f6 ff61 	bl	8010038 <pbuf_add_header>
 8019176:	4603      	mov	r3, r0
 8019178:	2b00      	cmp	r3, #0
 801917a:	d12b      	bne.n	80191d4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	685b      	ldr	r3, [r3, #4]
 8019180:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019182:	69fb      	ldr	r3, [r7, #28]
 8019184:	681a      	ldr	r2, [r3, #0]
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801918a:	4b20      	ldr	r3, [pc, #128]	; (801920c <icmp_input+0x1f0>)
 801918c:	691a      	ldr	r2, [r3, #16]
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019192:	693b      	ldr	r3, [r7, #16]
 8019194:	2200      	movs	r2, #0
 8019196:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8019198:	693b      	ldr	r3, [r7, #16]
 801919a:	2200      	movs	r2, #0
 801919c:	709a      	strb	r2, [r3, #2]
 801919e:	2200      	movs	r2, #0
 80191a0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	22ff      	movs	r2, #255	; 0xff
 80191a6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80191a8:	68fb      	ldr	r3, [r7, #12]
 80191aa:	2200      	movs	r2, #0
 80191ac:	729a      	strb	r2, [r3, #10]
 80191ae:	2200      	movs	r2, #0
 80191b0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80191b2:	683b      	ldr	r3, [r7, #0]
 80191b4:	9302      	str	r3, [sp, #8]
 80191b6:	2301      	movs	r3, #1
 80191b8:	9301      	str	r3, [sp, #4]
 80191ba:	2300      	movs	r3, #0
 80191bc:	9300      	str	r3, [sp, #0]
 80191be:	23ff      	movs	r3, #255	; 0xff
 80191c0:	2200      	movs	r2, #0
 80191c2:	69f9      	ldr	r1, [r7, #28]
 80191c4:	6878      	ldr	r0, [r7, #4]
 80191c6:	f000 fa91 	bl	80196ec <ip4_output_if>
 80191ca:	4603      	mov	r3, r0
 80191cc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80191ce:	e001      	b.n	80191d4 <icmp_input+0x1b8>
      break;
 80191d0:	bf00      	nop
 80191d2:	e000      	b.n	80191d6 <icmp_input+0x1ba>
      break;
 80191d4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80191d6:	6878      	ldr	r0, [r7, #4]
 80191d8:	f7f6 ffc4 	bl	8010164 <pbuf_free>
  return;
 80191dc:	e013      	b.n	8019206 <icmp_input+0x1ea>
    goto lenerr;
 80191de:	bf00      	nop
 80191e0:	e002      	b.n	80191e8 <icmp_input+0x1cc>
    goto lenerr;
 80191e2:	bf00      	nop
 80191e4:	e000      	b.n	80191e8 <icmp_input+0x1cc>
        goto lenerr;
 80191e6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80191e8:	6878      	ldr	r0, [r7, #4]
 80191ea:	f7f6 ffbb 	bl	8010164 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80191ee:	e00a      	b.n	8019206 <icmp_input+0x1ea>
        goto icmperr;
 80191f0:	bf00      	nop
 80191f2:	e004      	b.n	80191fe <icmp_input+0x1e2>
        goto icmperr;
 80191f4:	bf00      	nop
 80191f6:	e002      	b.n	80191fe <icmp_input+0x1e2>
          goto icmperr;
 80191f8:	bf00      	nop
 80191fa:	e000      	b.n	80191fe <icmp_input+0x1e2>
          goto icmperr;
 80191fc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80191fe:	6878      	ldr	r0, [r7, #4]
 8019200:	f7f6 ffb0 	bl	8010164 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019204:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019206:	3728      	adds	r7, #40	; 0x28
 8019208:	46bd      	mov	sp, r7
 801920a:	bd80      	pop	{r7, pc}
 801920c:	20004504 	.word	0x20004504
 8019210:	20004518 	.word	0x20004518
 8019214:	08023078 	.word	0x08023078
 8019218:	080230b0 	.word	0x080230b0
 801921c:	080230e8 	.word	0x080230e8
 8019220:	08023110 	.word	0x08023110

08019224 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019224:	b580      	push	{r7, lr}
 8019226:	b082      	sub	sp, #8
 8019228:	af00      	add	r7, sp, #0
 801922a:	6078      	str	r0, [r7, #4]
 801922c:	460b      	mov	r3, r1
 801922e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8019230:	78fb      	ldrb	r3, [r7, #3]
 8019232:	461a      	mov	r2, r3
 8019234:	2103      	movs	r1, #3
 8019236:	6878      	ldr	r0, [r7, #4]
 8019238:	f000 f814 	bl	8019264 <icmp_send_response>
}
 801923c:	bf00      	nop
 801923e:	3708      	adds	r7, #8
 8019240:	46bd      	mov	sp, r7
 8019242:	bd80      	pop	{r7, pc}

08019244 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019244:	b580      	push	{r7, lr}
 8019246:	b082      	sub	sp, #8
 8019248:	af00      	add	r7, sp, #0
 801924a:	6078      	str	r0, [r7, #4]
 801924c:	460b      	mov	r3, r1
 801924e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8019250:	78fb      	ldrb	r3, [r7, #3]
 8019252:	461a      	mov	r2, r3
 8019254:	210b      	movs	r1, #11
 8019256:	6878      	ldr	r0, [r7, #4]
 8019258:	f000 f804 	bl	8019264 <icmp_send_response>
}
 801925c:	bf00      	nop
 801925e:	3708      	adds	r7, #8
 8019260:	46bd      	mov	sp, r7
 8019262:	bd80      	pop	{r7, pc}

08019264 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019264:	b580      	push	{r7, lr}
 8019266:	b08c      	sub	sp, #48	; 0x30
 8019268:	af04      	add	r7, sp, #16
 801926a:	6078      	str	r0, [r7, #4]
 801926c:	460b      	mov	r3, r1
 801926e:	70fb      	strb	r3, [r7, #3]
 8019270:	4613      	mov	r3, r2
 8019272:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019274:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019278:	2124      	movs	r1, #36	; 0x24
 801927a:	2022      	movs	r0, #34	; 0x22
 801927c:	f7f6 fc92 	bl	800fba4 <pbuf_alloc>
 8019280:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8019282:	69fb      	ldr	r3, [r7, #28]
 8019284:	2b00      	cmp	r3, #0
 8019286:	d04c      	beq.n	8019322 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019288:	69fb      	ldr	r3, [r7, #28]
 801928a:	895b      	ldrh	r3, [r3, #10]
 801928c:	2b23      	cmp	r3, #35	; 0x23
 801928e:	d806      	bhi.n	801929e <icmp_send_response+0x3a>
 8019290:	4b26      	ldr	r3, [pc, #152]	; (801932c <icmp_send_response+0xc8>)
 8019292:	f240 1269 	movw	r2, #361	; 0x169
 8019296:	4926      	ldr	r1, [pc, #152]	; (8019330 <icmp_send_response+0xcc>)
 8019298:	4826      	ldr	r0, [pc, #152]	; (8019334 <icmp_send_response+0xd0>)
 801929a:	f001 ffeb 	bl	801b274 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	685b      	ldr	r3, [r3, #4]
 80192a2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80192a4:	69fb      	ldr	r3, [r7, #28]
 80192a6:	685b      	ldr	r3, [r3, #4]
 80192a8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80192aa:	697b      	ldr	r3, [r7, #20]
 80192ac:	78fa      	ldrb	r2, [r7, #3]
 80192ae:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80192b0:	697b      	ldr	r3, [r7, #20]
 80192b2:	78ba      	ldrb	r2, [r7, #2]
 80192b4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80192b6:	697b      	ldr	r3, [r7, #20]
 80192b8:	2200      	movs	r2, #0
 80192ba:	711a      	strb	r2, [r3, #4]
 80192bc:	2200      	movs	r2, #0
 80192be:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80192c0:	697b      	ldr	r3, [r7, #20]
 80192c2:	2200      	movs	r2, #0
 80192c4:	719a      	strb	r2, [r3, #6]
 80192c6:	2200      	movs	r2, #0
 80192c8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80192ca:	69fb      	ldr	r3, [r7, #28]
 80192cc:	685b      	ldr	r3, [r3, #4]
 80192ce:	f103 0008 	add.w	r0, r3, #8
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	685b      	ldr	r3, [r3, #4]
 80192d6:	221c      	movs	r2, #28
 80192d8:	4619      	mov	r1, r3
 80192da:	f001 fa9a 	bl	801a812 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80192de:	69bb      	ldr	r3, [r7, #24]
 80192e0:	68db      	ldr	r3, [r3, #12]
 80192e2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80192e4:	f107 030c 	add.w	r3, r7, #12
 80192e8:	4618      	mov	r0, r3
 80192ea:	f000 f825 	bl	8019338 <ip4_route>
 80192ee:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80192f0:	693b      	ldr	r3, [r7, #16]
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d011      	beq.n	801931a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80192f6:	697b      	ldr	r3, [r7, #20]
 80192f8:	2200      	movs	r2, #0
 80192fa:	709a      	strb	r2, [r3, #2]
 80192fc:	2200      	movs	r2, #0
 80192fe:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019300:	f107 020c 	add.w	r2, r7, #12
 8019304:	693b      	ldr	r3, [r7, #16]
 8019306:	9302      	str	r3, [sp, #8]
 8019308:	2301      	movs	r3, #1
 801930a:	9301      	str	r3, [sp, #4]
 801930c:	2300      	movs	r3, #0
 801930e:	9300      	str	r3, [sp, #0]
 8019310:	23ff      	movs	r3, #255	; 0xff
 8019312:	2100      	movs	r1, #0
 8019314:	69f8      	ldr	r0, [r7, #28]
 8019316:	f000 f9e9 	bl	80196ec <ip4_output_if>
  }
  pbuf_free(q);
 801931a:	69f8      	ldr	r0, [r7, #28]
 801931c:	f7f6 ff22 	bl	8010164 <pbuf_free>
 8019320:	e000      	b.n	8019324 <icmp_send_response+0xc0>
    return;
 8019322:	bf00      	nop
}
 8019324:	3720      	adds	r7, #32
 8019326:	46bd      	mov	sp, r7
 8019328:	bd80      	pop	{r7, pc}
 801932a:	bf00      	nop
 801932c:	08023078 	.word	0x08023078
 8019330:	08023144 	.word	0x08023144
 8019334:	080230e8 	.word	0x080230e8

08019338 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019338:	b480      	push	{r7}
 801933a:	b085      	sub	sp, #20
 801933c:	af00      	add	r7, sp, #0
 801933e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019340:	4b33      	ldr	r3, [pc, #204]	; (8019410 <ip4_route+0xd8>)
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	60fb      	str	r3, [r7, #12]
 8019346:	e036      	b.n	80193b6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801934e:	f003 0301 	and.w	r3, r3, #1
 8019352:	b2db      	uxtb	r3, r3
 8019354:	2b00      	cmp	r3, #0
 8019356:	d02b      	beq.n	80193b0 <ip4_route+0x78>
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801935e:	089b      	lsrs	r3, r3, #2
 8019360:	f003 0301 	and.w	r3, r3, #1
 8019364:	b2db      	uxtb	r3, r3
 8019366:	2b00      	cmp	r3, #0
 8019368:	d022      	beq.n	80193b0 <ip4_route+0x78>
 801936a:	68fb      	ldr	r3, [r7, #12]
 801936c:	3304      	adds	r3, #4
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	2b00      	cmp	r3, #0
 8019372:	d01d      	beq.n	80193b0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	681a      	ldr	r2, [r3, #0]
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	3304      	adds	r3, #4
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	405a      	eors	r2, r3
 8019380:	68fb      	ldr	r3, [r7, #12]
 8019382:	3308      	adds	r3, #8
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	4013      	ands	r3, r2
 8019388:	2b00      	cmp	r3, #0
 801938a:	d101      	bne.n	8019390 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801938c:	68fb      	ldr	r3, [r7, #12]
 801938e:	e038      	b.n	8019402 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019390:	68fb      	ldr	r3, [r7, #12]
 8019392:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019396:	f003 0302 	and.w	r3, r3, #2
 801939a:	2b00      	cmp	r3, #0
 801939c:	d108      	bne.n	80193b0 <ip4_route+0x78>
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	681a      	ldr	r2, [r3, #0]
 80193a2:	68fb      	ldr	r3, [r7, #12]
 80193a4:	330c      	adds	r3, #12
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	429a      	cmp	r2, r3
 80193aa:	d101      	bne.n	80193b0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80193ac:	68fb      	ldr	r3, [r7, #12]
 80193ae:	e028      	b.n	8019402 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80193b0:	68fb      	ldr	r3, [r7, #12]
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	60fb      	str	r3, [r7, #12]
 80193b6:	68fb      	ldr	r3, [r7, #12]
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	d1c5      	bne.n	8019348 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80193bc:	4b15      	ldr	r3, [pc, #84]	; (8019414 <ip4_route+0xdc>)
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d01a      	beq.n	80193fa <ip4_route+0xc2>
 80193c4:	4b13      	ldr	r3, [pc, #76]	; (8019414 <ip4_route+0xdc>)
 80193c6:	681b      	ldr	r3, [r3, #0]
 80193c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80193cc:	f003 0301 	and.w	r3, r3, #1
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d012      	beq.n	80193fa <ip4_route+0xc2>
 80193d4:	4b0f      	ldr	r3, [pc, #60]	; (8019414 <ip4_route+0xdc>)
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80193dc:	f003 0304 	and.w	r3, r3, #4
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d00a      	beq.n	80193fa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80193e4:	4b0b      	ldr	r3, [pc, #44]	; (8019414 <ip4_route+0xdc>)
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	3304      	adds	r3, #4
 80193ea:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d004      	beq.n	80193fa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	b2db      	uxtb	r3, r3
 80193f6:	2b7f      	cmp	r3, #127	; 0x7f
 80193f8:	d101      	bne.n	80193fe <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80193fa:	2300      	movs	r3, #0
 80193fc:	e001      	b.n	8019402 <ip4_route+0xca>
  }

  return netif_default;
 80193fe:	4b05      	ldr	r3, [pc, #20]	; (8019414 <ip4_route+0xdc>)
 8019400:	681b      	ldr	r3, [r3, #0]
}
 8019402:	4618      	mov	r0, r3
 8019404:	3714      	adds	r7, #20
 8019406:	46bd      	mov	sp, r7
 8019408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801940c:	4770      	bx	lr
 801940e:	bf00      	nop
 8019410:	20007618 	.word	0x20007618
 8019414:	2000761c 	.word	0x2000761c

08019418 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019418:	b580      	push	{r7, lr}
 801941a:	b082      	sub	sp, #8
 801941c:	af00      	add	r7, sp, #0
 801941e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019426:	f003 0301 	and.w	r3, r3, #1
 801942a:	b2db      	uxtb	r3, r3
 801942c:	2b00      	cmp	r3, #0
 801942e:	d016      	beq.n	801945e <ip4_input_accept+0x46>
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	3304      	adds	r3, #4
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	2b00      	cmp	r3, #0
 8019438:	d011      	beq.n	801945e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801943a:	4b0b      	ldr	r3, [pc, #44]	; (8019468 <ip4_input_accept+0x50>)
 801943c:	695a      	ldr	r2, [r3, #20]
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	3304      	adds	r3, #4
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	429a      	cmp	r2, r3
 8019446:	d008      	beq.n	801945a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019448:	4b07      	ldr	r3, [pc, #28]	; (8019468 <ip4_input_accept+0x50>)
 801944a:	695b      	ldr	r3, [r3, #20]
 801944c:	6879      	ldr	r1, [r7, #4]
 801944e:	4618      	mov	r0, r3
 8019450:	f000 fa24 	bl	801989c <ip4_addr_isbroadcast_u32>
 8019454:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019456:	2b00      	cmp	r3, #0
 8019458:	d001      	beq.n	801945e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801945a:	2301      	movs	r3, #1
 801945c:	e000      	b.n	8019460 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801945e:	2300      	movs	r3, #0
}
 8019460:	4618      	mov	r0, r3
 8019462:	3708      	adds	r7, #8
 8019464:	46bd      	mov	sp, r7
 8019466:	bd80      	pop	{r7, pc}
 8019468:	20004504 	.word	0x20004504

0801946c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801946c:	b580      	push	{r7, lr}
 801946e:	b088      	sub	sp, #32
 8019470:	af00      	add	r7, sp, #0
 8019472:	6078      	str	r0, [r7, #4]
 8019474:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8019476:	2301      	movs	r3, #1
 8019478:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	685b      	ldr	r3, [r3, #4]
 801947e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8019480:	69fb      	ldr	r3, [r7, #28]
 8019482:	781b      	ldrb	r3, [r3, #0]
 8019484:	091b      	lsrs	r3, r3, #4
 8019486:	b2db      	uxtb	r3, r3
 8019488:	2b04      	cmp	r3, #4
 801948a:	d004      	beq.n	8019496 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801948c:	6878      	ldr	r0, [r7, #4]
 801948e:	f7f6 fe69 	bl	8010164 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019492:	2300      	movs	r3, #0
 8019494:	e121      	b.n	80196da <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019496:	69fb      	ldr	r3, [r7, #28]
 8019498:	781b      	ldrb	r3, [r3, #0]
 801949a:	f003 030f 	and.w	r3, r3, #15
 801949e:	b2db      	uxtb	r3, r3
 80194a0:	009b      	lsls	r3, r3, #2
 80194a2:	b2db      	uxtb	r3, r3
 80194a4:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80194a6:	69fb      	ldr	r3, [r7, #28]
 80194a8:	885b      	ldrh	r3, [r3, #2]
 80194aa:	b29b      	uxth	r3, r3
 80194ac:	4618      	mov	r0, r3
 80194ae:	f7f5 fbc1 	bl	800ec34 <lwip_htons>
 80194b2:	4603      	mov	r3, r0
 80194b4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	891b      	ldrh	r3, [r3, #8]
 80194ba:	8a3a      	ldrh	r2, [r7, #16]
 80194bc:	429a      	cmp	r2, r3
 80194be:	d204      	bcs.n	80194ca <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80194c0:	8a3b      	ldrh	r3, [r7, #16]
 80194c2:	4619      	mov	r1, r3
 80194c4:	6878      	ldr	r0, [r7, #4]
 80194c6:	f7f6 fcc7 	bl	800fe58 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	895b      	ldrh	r3, [r3, #10]
 80194ce:	8a7a      	ldrh	r2, [r7, #18]
 80194d0:	429a      	cmp	r2, r3
 80194d2:	d807      	bhi.n	80194e4 <ip4_input+0x78>
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	891b      	ldrh	r3, [r3, #8]
 80194d8:	8a3a      	ldrh	r2, [r7, #16]
 80194da:	429a      	cmp	r2, r3
 80194dc:	d802      	bhi.n	80194e4 <ip4_input+0x78>
 80194de:	8a7b      	ldrh	r3, [r7, #18]
 80194e0:	2b13      	cmp	r3, #19
 80194e2:	d804      	bhi.n	80194ee <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80194e4:	6878      	ldr	r0, [r7, #4]
 80194e6:	f7f6 fe3d 	bl	8010164 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80194ea:	2300      	movs	r3, #0
 80194ec:	e0f5      	b.n	80196da <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80194ee:	69fb      	ldr	r3, [r7, #28]
 80194f0:	691b      	ldr	r3, [r3, #16]
 80194f2:	4a7c      	ldr	r2, [pc, #496]	; (80196e4 <ip4_input+0x278>)
 80194f4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80194f6:	69fb      	ldr	r3, [r7, #28]
 80194f8:	68db      	ldr	r3, [r3, #12]
 80194fa:	4a7a      	ldr	r2, [pc, #488]	; (80196e4 <ip4_input+0x278>)
 80194fc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80194fe:	4b79      	ldr	r3, [pc, #484]	; (80196e4 <ip4_input+0x278>)
 8019500:	695b      	ldr	r3, [r3, #20]
 8019502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019506:	2be0      	cmp	r3, #224	; 0xe0
 8019508:	d112      	bne.n	8019530 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801950a:	683b      	ldr	r3, [r7, #0]
 801950c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019510:	f003 0301 	and.w	r3, r3, #1
 8019514:	b2db      	uxtb	r3, r3
 8019516:	2b00      	cmp	r3, #0
 8019518:	d007      	beq.n	801952a <ip4_input+0xbe>
 801951a:	683b      	ldr	r3, [r7, #0]
 801951c:	3304      	adds	r3, #4
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	2b00      	cmp	r3, #0
 8019522:	d002      	beq.n	801952a <ip4_input+0xbe>
      netif = inp;
 8019524:	683b      	ldr	r3, [r7, #0]
 8019526:	61bb      	str	r3, [r7, #24]
 8019528:	e02a      	b.n	8019580 <ip4_input+0x114>
    } else {
      netif = NULL;
 801952a:	2300      	movs	r3, #0
 801952c:	61bb      	str	r3, [r7, #24]
 801952e:	e027      	b.n	8019580 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019530:	6838      	ldr	r0, [r7, #0]
 8019532:	f7ff ff71 	bl	8019418 <ip4_input_accept>
 8019536:	4603      	mov	r3, r0
 8019538:	2b00      	cmp	r3, #0
 801953a:	d002      	beq.n	8019542 <ip4_input+0xd6>
      netif = inp;
 801953c:	683b      	ldr	r3, [r7, #0]
 801953e:	61bb      	str	r3, [r7, #24]
 8019540:	e01e      	b.n	8019580 <ip4_input+0x114>
    } else {
      netif = NULL;
 8019542:	2300      	movs	r3, #0
 8019544:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8019546:	4b67      	ldr	r3, [pc, #412]	; (80196e4 <ip4_input+0x278>)
 8019548:	695b      	ldr	r3, [r3, #20]
 801954a:	b2db      	uxtb	r3, r3
 801954c:	2b7f      	cmp	r3, #127	; 0x7f
 801954e:	d017      	beq.n	8019580 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019550:	4b65      	ldr	r3, [pc, #404]	; (80196e8 <ip4_input+0x27c>)
 8019552:	681b      	ldr	r3, [r3, #0]
 8019554:	61bb      	str	r3, [r7, #24]
 8019556:	e00e      	b.n	8019576 <ip4_input+0x10a>
          if (netif == inp) {
 8019558:	69ba      	ldr	r2, [r7, #24]
 801955a:	683b      	ldr	r3, [r7, #0]
 801955c:	429a      	cmp	r2, r3
 801955e:	d006      	beq.n	801956e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019560:	69b8      	ldr	r0, [r7, #24]
 8019562:	f7ff ff59 	bl	8019418 <ip4_input_accept>
 8019566:	4603      	mov	r3, r0
 8019568:	2b00      	cmp	r3, #0
 801956a:	d108      	bne.n	801957e <ip4_input+0x112>
 801956c:	e000      	b.n	8019570 <ip4_input+0x104>
            continue;
 801956e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8019570:	69bb      	ldr	r3, [r7, #24]
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	61bb      	str	r3, [r7, #24]
 8019576:	69bb      	ldr	r3, [r7, #24]
 8019578:	2b00      	cmp	r3, #0
 801957a:	d1ed      	bne.n	8019558 <ip4_input+0xec>
 801957c:	e000      	b.n	8019580 <ip4_input+0x114>
            break;
 801957e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8019580:	69bb      	ldr	r3, [r7, #24]
 8019582:	2b00      	cmp	r3, #0
 8019584:	d111      	bne.n	80195aa <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8019586:	69fb      	ldr	r3, [r7, #28]
 8019588:	7a5b      	ldrb	r3, [r3, #9]
 801958a:	2b11      	cmp	r3, #17
 801958c:	d10d      	bne.n	80195aa <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801958e:	8a7b      	ldrh	r3, [r7, #18]
 8019590:	69fa      	ldr	r2, [r7, #28]
 8019592:	4413      	add	r3, r2
 8019594:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8019596:	68fb      	ldr	r3, [r7, #12]
 8019598:	885b      	ldrh	r3, [r3, #2]
 801959a:	b29b      	uxth	r3, r3
 801959c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80195a0:	d103      	bne.n	80195aa <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80195a2:	683b      	ldr	r3, [r7, #0]
 80195a4:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80195a6:	2300      	movs	r3, #0
 80195a8:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80195aa:	697b      	ldr	r3, [r7, #20]
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d017      	beq.n	80195e0 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80195b0:	4b4c      	ldr	r3, [pc, #304]	; (80196e4 <ip4_input+0x278>)
 80195b2:	691b      	ldr	r3, [r3, #16]
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d013      	beq.n	80195e0 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80195b8:	4b4a      	ldr	r3, [pc, #296]	; (80196e4 <ip4_input+0x278>)
 80195ba:	691b      	ldr	r3, [r3, #16]
 80195bc:	6839      	ldr	r1, [r7, #0]
 80195be:	4618      	mov	r0, r3
 80195c0:	f000 f96c 	bl	801989c <ip4_addr_isbroadcast_u32>
 80195c4:	4603      	mov	r3, r0
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d105      	bne.n	80195d6 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80195ca:	4b46      	ldr	r3, [pc, #280]	; (80196e4 <ip4_input+0x278>)
 80195cc:	691b      	ldr	r3, [r3, #16]
 80195ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80195d2:	2be0      	cmp	r3, #224	; 0xe0
 80195d4:	d104      	bne.n	80195e0 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80195d6:	6878      	ldr	r0, [r7, #4]
 80195d8:	f7f6 fdc4 	bl	8010164 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80195dc:	2300      	movs	r3, #0
 80195de:	e07c      	b.n	80196da <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80195e0:	69bb      	ldr	r3, [r7, #24]
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	d104      	bne.n	80195f0 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80195e6:	6878      	ldr	r0, [r7, #4]
 80195e8:	f7f6 fdbc 	bl	8010164 <pbuf_free>
    return ERR_OK;
 80195ec:	2300      	movs	r3, #0
 80195ee:	e074      	b.n	80196da <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80195f0:	69fb      	ldr	r3, [r7, #28]
 80195f2:	88db      	ldrh	r3, [r3, #6]
 80195f4:	b29b      	uxth	r3, r3
 80195f6:	461a      	mov	r2, r3
 80195f8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80195fc:	4013      	ands	r3, r2
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d00b      	beq.n	801961a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019602:	6878      	ldr	r0, [r7, #4]
 8019604:	f000 fc90 	bl	8019f28 <ip4_reass>
 8019608:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	2b00      	cmp	r3, #0
 801960e:	d101      	bne.n	8019614 <ip4_input+0x1a8>
      return ERR_OK;
 8019610:	2300      	movs	r3, #0
 8019612:	e062      	b.n	80196da <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	685b      	ldr	r3, [r3, #4]
 8019618:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801961a:	4a32      	ldr	r2, [pc, #200]	; (80196e4 <ip4_input+0x278>)
 801961c:	69bb      	ldr	r3, [r7, #24]
 801961e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019620:	4a30      	ldr	r2, [pc, #192]	; (80196e4 <ip4_input+0x278>)
 8019622:	683b      	ldr	r3, [r7, #0]
 8019624:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019626:	4a2f      	ldr	r2, [pc, #188]	; (80196e4 <ip4_input+0x278>)
 8019628:	69fb      	ldr	r3, [r7, #28]
 801962a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801962c:	69fb      	ldr	r3, [r7, #28]
 801962e:	781b      	ldrb	r3, [r3, #0]
 8019630:	f003 030f 	and.w	r3, r3, #15
 8019634:	b2db      	uxtb	r3, r3
 8019636:	009b      	lsls	r3, r3, #2
 8019638:	b2db      	uxtb	r3, r3
 801963a:	b29a      	uxth	r2, r3
 801963c:	4b29      	ldr	r3, [pc, #164]	; (80196e4 <ip4_input+0x278>)
 801963e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019640:	8a7b      	ldrh	r3, [r7, #18]
 8019642:	4619      	mov	r1, r3
 8019644:	6878      	ldr	r0, [r7, #4]
 8019646:	f7f6 fd07 	bl	8010058 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801964a:	69fb      	ldr	r3, [r7, #28]
 801964c:	7a5b      	ldrb	r3, [r3, #9]
 801964e:	2b06      	cmp	r3, #6
 8019650:	d009      	beq.n	8019666 <ip4_input+0x1fa>
 8019652:	2b11      	cmp	r3, #17
 8019654:	d002      	beq.n	801965c <ip4_input+0x1f0>
 8019656:	2b01      	cmp	r3, #1
 8019658:	d00a      	beq.n	8019670 <ip4_input+0x204>
 801965a:	e00e      	b.n	801967a <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801965c:	6839      	ldr	r1, [r7, #0]
 801965e:	6878      	ldr	r0, [r7, #4]
 8019660:	f7fc fb2a 	bl	8015cb8 <udp_input>
        break;
 8019664:	e026      	b.n	80196b4 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019666:	6839      	ldr	r1, [r7, #0]
 8019668:	6878      	ldr	r0, [r7, #4]
 801966a:	f7f8 fba7 	bl	8011dbc <tcp_input>
        break;
 801966e:	e021      	b.n	80196b4 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019670:	6839      	ldr	r1, [r7, #0]
 8019672:	6878      	ldr	r0, [r7, #4]
 8019674:	f7ff fcd2 	bl	801901c <icmp_input>
        break;
 8019678:	e01c      	b.n	80196b4 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801967a:	4b1a      	ldr	r3, [pc, #104]	; (80196e4 <ip4_input+0x278>)
 801967c:	695b      	ldr	r3, [r3, #20]
 801967e:	69b9      	ldr	r1, [r7, #24]
 8019680:	4618      	mov	r0, r3
 8019682:	f000 f90b 	bl	801989c <ip4_addr_isbroadcast_u32>
 8019686:	4603      	mov	r3, r0
 8019688:	2b00      	cmp	r3, #0
 801968a:	d10f      	bne.n	80196ac <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801968c:	4b15      	ldr	r3, [pc, #84]	; (80196e4 <ip4_input+0x278>)
 801968e:	695b      	ldr	r3, [r3, #20]
 8019690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019694:	2be0      	cmp	r3, #224	; 0xe0
 8019696:	d009      	beq.n	80196ac <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019698:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801969c:	4619      	mov	r1, r3
 801969e:	6878      	ldr	r0, [r7, #4]
 80196a0:	f7f6 fd4d 	bl	801013e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80196a4:	2102      	movs	r1, #2
 80196a6:	6878      	ldr	r0, [r7, #4]
 80196a8:	f7ff fdbc 	bl	8019224 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80196ac:	6878      	ldr	r0, [r7, #4]
 80196ae:	f7f6 fd59 	bl	8010164 <pbuf_free>
        break;
 80196b2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80196b4:	4b0b      	ldr	r3, [pc, #44]	; (80196e4 <ip4_input+0x278>)
 80196b6:	2200      	movs	r2, #0
 80196b8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80196ba:	4b0a      	ldr	r3, [pc, #40]	; (80196e4 <ip4_input+0x278>)
 80196bc:	2200      	movs	r2, #0
 80196be:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80196c0:	4b08      	ldr	r3, [pc, #32]	; (80196e4 <ip4_input+0x278>)
 80196c2:	2200      	movs	r2, #0
 80196c4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80196c6:	4b07      	ldr	r3, [pc, #28]	; (80196e4 <ip4_input+0x278>)
 80196c8:	2200      	movs	r2, #0
 80196ca:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80196cc:	4b05      	ldr	r3, [pc, #20]	; (80196e4 <ip4_input+0x278>)
 80196ce:	2200      	movs	r2, #0
 80196d0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80196d2:	4b04      	ldr	r3, [pc, #16]	; (80196e4 <ip4_input+0x278>)
 80196d4:	2200      	movs	r2, #0
 80196d6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80196d8:	2300      	movs	r3, #0
}
 80196da:	4618      	mov	r0, r3
 80196dc:	3720      	adds	r7, #32
 80196de:	46bd      	mov	sp, r7
 80196e0:	bd80      	pop	{r7, pc}
 80196e2:	bf00      	nop
 80196e4:	20004504 	.word	0x20004504
 80196e8:	20007618 	.word	0x20007618

080196ec <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80196ec:	b580      	push	{r7, lr}
 80196ee:	b08a      	sub	sp, #40	; 0x28
 80196f0:	af04      	add	r7, sp, #16
 80196f2:	60f8      	str	r0, [r7, #12]
 80196f4:	60b9      	str	r1, [r7, #8]
 80196f6:	607a      	str	r2, [r7, #4]
 80196f8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80196fa:	68bb      	ldr	r3, [r7, #8]
 80196fc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	2b00      	cmp	r3, #0
 8019702:	d009      	beq.n	8019718 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019704:	68bb      	ldr	r3, [r7, #8]
 8019706:	2b00      	cmp	r3, #0
 8019708:	d003      	beq.n	8019712 <ip4_output_if+0x26>
 801970a:	68bb      	ldr	r3, [r7, #8]
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	2b00      	cmp	r3, #0
 8019710:	d102      	bne.n	8019718 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8019712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019714:	3304      	adds	r3, #4
 8019716:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019718:	78fa      	ldrb	r2, [r7, #3]
 801971a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801971c:	9302      	str	r3, [sp, #8]
 801971e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019722:	9301      	str	r3, [sp, #4]
 8019724:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019728:	9300      	str	r3, [sp, #0]
 801972a:	4613      	mov	r3, r2
 801972c:	687a      	ldr	r2, [r7, #4]
 801972e:	6979      	ldr	r1, [r7, #20]
 8019730:	68f8      	ldr	r0, [r7, #12]
 8019732:	f000 f805 	bl	8019740 <ip4_output_if_src>
 8019736:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019738:	4618      	mov	r0, r3
 801973a:	3718      	adds	r7, #24
 801973c:	46bd      	mov	sp, r7
 801973e:	bd80      	pop	{r7, pc}

08019740 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019740:	b580      	push	{r7, lr}
 8019742:	b088      	sub	sp, #32
 8019744:	af00      	add	r7, sp, #0
 8019746:	60f8      	str	r0, [r7, #12]
 8019748:	60b9      	str	r1, [r7, #8]
 801974a:	607a      	str	r2, [r7, #4]
 801974c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801974e:	68fb      	ldr	r3, [r7, #12]
 8019750:	7b9b      	ldrb	r3, [r3, #14]
 8019752:	2b01      	cmp	r3, #1
 8019754:	d006      	beq.n	8019764 <ip4_output_if_src+0x24>
 8019756:	4b4b      	ldr	r3, [pc, #300]	; (8019884 <ip4_output_if_src+0x144>)
 8019758:	f44f 7255 	mov.w	r2, #852	; 0x354
 801975c:	494a      	ldr	r1, [pc, #296]	; (8019888 <ip4_output_if_src+0x148>)
 801975e:	484b      	ldr	r0, [pc, #300]	; (801988c <ip4_output_if_src+0x14c>)
 8019760:	f001 fd88 	bl	801b274 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	2b00      	cmp	r3, #0
 8019768:	d060      	beq.n	801982c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801976a:	2314      	movs	r3, #20
 801976c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801976e:	2114      	movs	r1, #20
 8019770:	68f8      	ldr	r0, [r7, #12]
 8019772:	f7f6 fc61 	bl	8010038 <pbuf_add_header>
 8019776:	4603      	mov	r3, r0
 8019778:	2b00      	cmp	r3, #0
 801977a:	d002      	beq.n	8019782 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801977c:	f06f 0301 	mvn.w	r3, #1
 8019780:	e07c      	b.n	801987c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019782:	68fb      	ldr	r3, [r7, #12]
 8019784:	685b      	ldr	r3, [r3, #4]
 8019786:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019788:	68fb      	ldr	r3, [r7, #12]
 801978a:	895b      	ldrh	r3, [r3, #10]
 801978c:	2b13      	cmp	r3, #19
 801978e:	d806      	bhi.n	801979e <ip4_output_if_src+0x5e>
 8019790:	4b3c      	ldr	r3, [pc, #240]	; (8019884 <ip4_output_if_src+0x144>)
 8019792:	f240 3289 	movw	r2, #905	; 0x389
 8019796:	493e      	ldr	r1, [pc, #248]	; (8019890 <ip4_output_if_src+0x150>)
 8019798:	483c      	ldr	r0, [pc, #240]	; (801988c <ip4_output_if_src+0x14c>)
 801979a:	f001 fd6b 	bl	801b274 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801979e:	69fb      	ldr	r3, [r7, #28]
 80197a0:	78fa      	ldrb	r2, [r7, #3]
 80197a2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80197a4:	69fb      	ldr	r3, [r7, #28]
 80197a6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80197aa:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	681a      	ldr	r2, [r3, #0]
 80197b0:	69fb      	ldr	r3, [r7, #28]
 80197b2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80197b4:	8b7b      	ldrh	r3, [r7, #26]
 80197b6:	089b      	lsrs	r3, r3, #2
 80197b8:	b29b      	uxth	r3, r3
 80197ba:	b2db      	uxtb	r3, r3
 80197bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80197c0:	b2da      	uxtb	r2, r3
 80197c2:	69fb      	ldr	r3, [r7, #28]
 80197c4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80197c6:	69fb      	ldr	r3, [r7, #28]
 80197c8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80197cc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80197ce:	68fb      	ldr	r3, [r7, #12]
 80197d0:	891b      	ldrh	r3, [r3, #8]
 80197d2:	4618      	mov	r0, r3
 80197d4:	f7f5 fa2e 	bl	800ec34 <lwip_htons>
 80197d8:	4603      	mov	r3, r0
 80197da:	461a      	mov	r2, r3
 80197dc:	69fb      	ldr	r3, [r7, #28]
 80197de:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80197e0:	69fb      	ldr	r3, [r7, #28]
 80197e2:	2200      	movs	r2, #0
 80197e4:	719a      	strb	r2, [r3, #6]
 80197e6:	2200      	movs	r2, #0
 80197e8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80197ea:	4b2a      	ldr	r3, [pc, #168]	; (8019894 <ip4_output_if_src+0x154>)
 80197ec:	881b      	ldrh	r3, [r3, #0]
 80197ee:	4618      	mov	r0, r3
 80197f0:	f7f5 fa20 	bl	800ec34 <lwip_htons>
 80197f4:	4603      	mov	r3, r0
 80197f6:	461a      	mov	r2, r3
 80197f8:	69fb      	ldr	r3, [r7, #28]
 80197fa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80197fc:	4b25      	ldr	r3, [pc, #148]	; (8019894 <ip4_output_if_src+0x154>)
 80197fe:	881b      	ldrh	r3, [r3, #0]
 8019800:	3301      	adds	r3, #1
 8019802:	b29a      	uxth	r2, r3
 8019804:	4b23      	ldr	r3, [pc, #140]	; (8019894 <ip4_output_if_src+0x154>)
 8019806:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019808:	68bb      	ldr	r3, [r7, #8]
 801980a:	2b00      	cmp	r3, #0
 801980c:	d104      	bne.n	8019818 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801980e:	4b22      	ldr	r3, [pc, #136]	; (8019898 <ip4_output_if_src+0x158>)
 8019810:	681a      	ldr	r2, [r3, #0]
 8019812:	69fb      	ldr	r3, [r7, #28]
 8019814:	60da      	str	r2, [r3, #12]
 8019816:	e003      	b.n	8019820 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019818:	68bb      	ldr	r3, [r7, #8]
 801981a:	681a      	ldr	r2, [r3, #0]
 801981c:	69fb      	ldr	r3, [r7, #28]
 801981e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019820:	69fb      	ldr	r3, [r7, #28]
 8019822:	2200      	movs	r2, #0
 8019824:	729a      	strb	r2, [r3, #10]
 8019826:	2200      	movs	r2, #0
 8019828:	72da      	strb	r2, [r3, #11]
 801982a:	e00f      	b.n	801984c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801982c:	68fb      	ldr	r3, [r7, #12]
 801982e:	895b      	ldrh	r3, [r3, #10]
 8019830:	2b13      	cmp	r3, #19
 8019832:	d802      	bhi.n	801983a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019834:	f06f 0301 	mvn.w	r3, #1
 8019838:	e020      	b.n	801987c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801983a:	68fb      	ldr	r3, [r7, #12]
 801983c:	685b      	ldr	r3, [r3, #4]
 801983e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019840:	69fb      	ldr	r3, [r7, #28]
 8019842:	691b      	ldr	r3, [r3, #16]
 8019844:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019846:	f107 0314 	add.w	r3, r7, #20
 801984a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801984c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801984e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019850:	2b00      	cmp	r3, #0
 8019852:	d00c      	beq.n	801986e <ip4_output_if_src+0x12e>
 8019854:	68fb      	ldr	r3, [r7, #12]
 8019856:	891a      	ldrh	r2, [r3, #8]
 8019858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801985a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801985c:	429a      	cmp	r2, r3
 801985e:	d906      	bls.n	801986e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019860:	687a      	ldr	r2, [r7, #4]
 8019862:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019864:	68f8      	ldr	r0, [r7, #12]
 8019866:	f000 fd4b 	bl	801a300 <ip4_frag>
 801986a:	4603      	mov	r3, r0
 801986c:	e006      	b.n	801987c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801986e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019870:	695b      	ldr	r3, [r3, #20]
 8019872:	687a      	ldr	r2, [r7, #4]
 8019874:	68f9      	ldr	r1, [r7, #12]
 8019876:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019878:	4798      	blx	r3
 801987a:	4603      	mov	r3, r0
}
 801987c:	4618      	mov	r0, r3
 801987e:	3720      	adds	r7, #32
 8019880:	46bd      	mov	sp, r7
 8019882:	bd80      	pop	{r7, pc}
 8019884:	08023170 	.word	0x08023170
 8019888:	080231a4 	.word	0x080231a4
 801988c:	080231b0 	.word	0x080231b0
 8019890:	080231d8 	.word	0x080231d8
 8019894:	20000616 	.word	0x20000616
 8019898:	08023b1c 	.word	0x08023b1c

0801989c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801989c:	b480      	push	{r7}
 801989e:	b085      	sub	sp, #20
 80198a0:	af00      	add	r7, sp, #0
 80198a2:	6078      	str	r0, [r7, #4]
 80198a4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198b0:	d002      	beq.n	80198b8 <ip4_addr_isbroadcast_u32+0x1c>
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	d101      	bne.n	80198bc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80198b8:	2301      	movs	r3, #1
 80198ba:	e02a      	b.n	8019912 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80198bc:	683b      	ldr	r3, [r7, #0]
 80198be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80198c2:	f003 0302 	and.w	r3, r3, #2
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d101      	bne.n	80198ce <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80198ca:	2300      	movs	r3, #0
 80198cc:	e021      	b.n	8019912 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80198ce:	683b      	ldr	r3, [r7, #0]
 80198d0:	3304      	adds	r3, #4
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	687a      	ldr	r2, [r7, #4]
 80198d6:	429a      	cmp	r2, r3
 80198d8:	d101      	bne.n	80198de <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80198da:	2300      	movs	r3, #0
 80198dc:	e019      	b.n	8019912 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80198de:	68fa      	ldr	r2, [r7, #12]
 80198e0:	683b      	ldr	r3, [r7, #0]
 80198e2:	3304      	adds	r3, #4
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	405a      	eors	r2, r3
 80198e8:	683b      	ldr	r3, [r7, #0]
 80198ea:	3308      	adds	r3, #8
 80198ec:	681b      	ldr	r3, [r3, #0]
 80198ee:	4013      	ands	r3, r2
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d10d      	bne.n	8019910 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80198f4:	683b      	ldr	r3, [r7, #0]
 80198f6:	3308      	adds	r3, #8
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	43da      	mvns	r2, r3
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019900:	683b      	ldr	r3, [r7, #0]
 8019902:	3308      	adds	r3, #8
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019908:	429a      	cmp	r2, r3
 801990a:	d101      	bne.n	8019910 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801990c:	2301      	movs	r3, #1
 801990e:	e000      	b.n	8019912 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019910:	2300      	movs	r3, #0
  }
}
 8019912:	4618      	mov	r0, r3
 8019914:	3714      	adds	r7, #20
 8019916:	46bd      	mov	sp, r7
 8019918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801991c:	4770      	bx	lr
	...

08019920 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019920:	b580      	push	{r7, lr}
 8019922:	b084      	sub	sp, #16
 8019924:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019926:	2300      	movs	r3, #0
 8019928:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801992a:	4b12      	ldr	r3, [pc, #72]	; (8019974 <ip_reass_tmr+0x54>)
 801992c:	681b      	ldr	r3, [r3, #0]
 801992e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019930:	e018      	b.n	8019964 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019932:	68fb      	ldr	r3, [r7, #12]
 8019934:	7fdb      	ldrb	r3, [r3, #31]
 8019936:	2b00      	cmp	r3, #0
 8019938:	d00b      	beq.n	8019952 <ip_reass_tmr+0x32>
      r->timer--;
 801993a:	68fb      	ldr	r3, [r7, #12]
 801993c:	7fdb      	ldrb	r3, [r3, #31]
 801993e:	3b01      	subs	r3, #1
 8019940:	b2da      	uxtb	r2, r3
 8019942:	68fb      	ldr	r3, [r7, #12]
 8019944:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8019946:	68fb      	ldr	r3, [r7, #12]
 8019948:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801994a:	68fb      	ldr	r3, [r7, #12]
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	60fb      	str	r3, [r7, #12]
 8019950:	e008      	b.n	8019964 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019952:	68fb      	ldr	r3, [r7, #12]
 8019954:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8019956:	68fb      	ldr	r3, [r7, #12]
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801995c:	68b9      	ldr	r1, [r7, #8]
 801995e:	6878      	ldr	r0, [r7, #4]
 8019960:	f000 f80a 	bl	8019978 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019964:	68fb      	ldr	r3, [r7, #12]
 8019966:	2b00      	cmp	r3, #0
 8019968:	d1e3      	bne.n	8019932 <ip_reass_tmr+0x12>
    }
  }
}
 801996a:	bf00      	nop
 801996c:	3710      	adds	r7, #16
 801996e:	46bd      	mov	sp, r7
 8019970:	bd80      	pop	{r7, pc}
 8019972:	bf00      	nop
 8019974:	20000618 	.word	0x20000618

08019978 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019978:	b580      	push	{r7, lr}
 801997a:	b088      	sub	sp, #32
 801997c:	af00      	add	r7, sp, #0
 801997e:	6078      	str	r0, [r7, #4]
 8019980:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019982:	2300      	movs	r3, #0
 8019984:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019986:	683a      	ldr	r2, [r7, #0]
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	429a      	cmp	r2, r3
 801998c:	d105      	bne.n	801999a <ip_reass_free_complete_datagram+0x22>
 801998e:	4b45      	ldr	r3, [pc, #276]	; (8019aa4 <ip_reass_free_complete_datagram+0x12c>)
 8019990:	22ab      	movs	r2, #171	; 0xab
 8019992:	4945      	ldr	r1, [pc, #276]	; (8019aa8 <ip_reass_free_complete_datagram+0x130>)
 8019994:	4845      	ldr	r0, [pc, #276]	; (8019aac <ip_reass_free_complete_datagram+0x134>)
 8019996:	f001 fc6d 	bl	801b274 <iprintf>
  if (prev != NULL) {
 801999a:	683b      	ldr	r3, [r7, #0]
 801999c:	2b00      	cmp	r3, #0
 801999e:	d00a      	beq.n	80199b6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80199a0:	683b      	ldr	r3, [r7, #0]
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	687a      	ldr	r2, [r7, #4]
 80199a6:	429a      	cmp	r2, r3
 80199a8:	d005      	beq.n	80199b6 <ip_reass_free_complete_datagram+0x3e>
 80199aa:	4b3e      	ldr	r3, [pc, #248]	; (8019aa4 <ip_reass_free_complete_datagram+0x12c>)
 80199ac:	22ad      	movs	r2, #173	; 0xad
 80199ae:	4940      	ldr	r1, [pc, #256]	; (8019ab0 <ip_reass_free_complete_datagram+0x138>)
 80199b0:	483e      	ldr	r0, [pc, #248]	; (8019aac <ip_reass_free_complete_datagram+0x134>)
 80199b2:	f001 fc5f 	bl	801b274 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	685b      	ldr	r3, [r3, #4]
 80199ba:	685b      	ldr	r3, [r3, #4]
 80199bc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80199be:	697b      	ldr	r3, [r7, #20]
 80199c0:	889b      	ldrh	r3, [r3, #4]
 80199c2:	b29b      	uxth	r3, r3
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d12a      	bne.n	8019a1e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	685b      	ldr	r3, [r3, #4]
 80199cc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80199ce:	697b      	ldr	r3, [r7, #20]
 80199d0:	681a      	ldr	r2, [r3, #0]
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80199d6:	69bb      	ldr	r3, [r7, #24]
 80199d8:	6858      	ldr	r0, [r3, #4]
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	3308      	adds	r3, #8
 80199de:	2214      	movs	r2, #20
 80199e0:	4619      	mov	r1, r3
 80199e2:	f000 ff16 	bl	801a812 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80199e6:	2101      	movs	r1, #1
 80199e8:	69b8      	ldr	r0, [r7, #24]
 80199ea:	f7ff fc2b 	bl	8019244 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80199ee:	69b8      	ldr	r0, [r7, #24]
 80199f0:	f7f6 fc40 	bl	8010274 <pbuf_clen>
 80199f4:	4603      	mov	r3, r0
 80199f6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80199f8:	8bfa      	ldrh	r2, [r7, #30]
 80199fa:	8a7b      	ldrh	r3, [r7, #18]
 80199fc:	4413      	add	r3, r2
 80199fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019a02:	db05      	blt.n	8019a10 <ip_reass_free_complete_datagram+0x98>
 8019a04:	4b27      	ldr	r3, [pc, #156]	; (8019aa4 <ip_reass_free_complete_datagram+0x12c>)
 8019a06:	22bc      	movs	r2, #188	; 0xbc
 8019a08:	492a      	ldr	r1, [pc, #168]	; (8019ab4 <ip_reass_free_complete_datagram+0x13c>)
 8019a0a:	4828      	ldr	r0, [pc, #160]	; (8019aac <ip_reass_free_complete_datagram+0x134>)
 8019a0c:	f001 fc32 	bl	801b274 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019a10:	8bfa      	ldrh	r2, [r7, #30]
 8019a12:	8a7b      	ldrh	r3, [r7, #18]
 8019a14:	4413      	add	r3, r2
 8019a16:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019a18:	69b8      	ldr	r0, [r7, #24]
 8019a1a:	f7f6 fba3 	bl	8010164 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	685b      	ldr	r3, [r3, #4]
 8019a22:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019a24:	e01f      	b.n	8019a66 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019a26:	69bb      	ldr	r3, [r7, #24]
 8019a28:	685b      	ldr	r3, [r3, #4]
 8019a2a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019a2c:	69bb      	ldr	r3, [r7, #24]
 8019a2e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019a30:	697b      	ldr	r3, [r7, #20]
 8019a32:	681b      	ldr	r3, [r3, #0]
 8019a34:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019a36:	68f8      	ldr	r0, [r7, #12]
 8019a38:	f7f6 fc1c 	bl	8010274 <pbuf_clen>
 8019a3c:	4603      	mov	r3, r0
 8019a3e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019a40:	8bfa      	ldrh	r2, [r7, #30]
 8019a42:	8a7b      	ldrh	r3, [r7, #18]
 8019a44:	4413      	add	r3, r2
 8019a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019a4a:	db05      	blt.n	8019a58 <ip_reass_free_complete_datagram+0xe0>
 8019a4c:	4b15      	ldr	r3, [pc, #84]	; (8019aa4 <ip_reass_free_complete_datagram+0x12c>)
 8019a4e:	22cc      	movs	r2, #204	; 0xcc
 8019a50:	4918      	ldr	r1, [pc, #96]	; (8019ab4 <ip_reass_free_complete_datagram+0x13c>)
 8019a52:	4816      	ldr	r0, [pc, #88]	; (8019aac <ip_reass_free_complete_datagram+0x134>)
 8019a54:	f001 fc0e 	bl	801b274 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019a58:	8bfa      	ldrh	r2, [r7, #30]
 8019a5a:	8a7b      	ldrh	r3, [r7, #18]
 8019a5c:	4413      	add	r3, r2
 8019a5e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019a60:	68f8      	ldr	r0, [r7, #12]
 8019a62:	f7f6 fb7f 	bl	8010164 <pbuf_free>
  while (p != NULL) {
 8019a66:	69bb      	ldr	r3, [r7, #24]
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d1dc      	bne.n	8019a26 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019a6c:	6839      	ldr	r1, [r7, #0]
 8019a6e:	6878      	ldr	r0, [r7, #4]
 8019a70:	f000 f8c2 	bl	8019bf8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019a74:	4b10      	ldr	r3, [pc, #64]	; (8019ab8 <ip_reass_free_complete_datagram+0x140>)
 8019a76:	881b      	ldrh	r3, [r3, #0]
 8019a78:	8bfa      	ldrh	r2, [r7, #30]
 8019a7a:	429a      	cmp	r2, r3
 8019a7c:	d905      	bls.n	8019a8a <ip_reass_free_complete_datagram+0x112>
 8019a7e:	4b09      	ldr	r3, [pc, #36]	; (8019aa4 <ip_reass_free_complete_datagram+0x12c>)
 8019a80:	22d2      	movs	r2, #210	; 0xd2
 8019a82:	490e      	ldr	r1, [pc, #56]	; (8019abc <ip_reass_free_complete_datagram+0x144>)
 8019a84:	4809      	ldr	r0, [pc, #36]	; (8019aac <ip_reass_free_complete_datagram+0x134>)
 8019a86:	f001 fbf5 	bl	801b274 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019a8a:	4b0b      	ldr	r3, [pc, #44]	; (8019ab8 <ip_reass_free_complete_datagram+0x140>)
 8019a8c:	881a      	ldrh	r2, [r3, #0]
 8019a8e:	8bfb      	ldrh	r3, [r7, #30]
 8019a90:	1ad3      	subs	r3, r2, r3
 8019a92:	b29a      	uxth	r2, r3
 8019a94:	4b08      	ldr	r3, [pc, #32]	; (8019ab8 <ip_reass_free_complete_datagram+0x140>)
 8019a96:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019a98:	8bfb      	ldrh	r3, [r7, #30]
}
 8019a9a:	4618      	mov	r0, r3
 8019a9c:	3720      	adds	r7, #32
 8019a9e:	46bd      	mov	sp, r7
 8019aa0:	bd80      	pop	{r7, pc}
 8019aa2:	bf00      	nop
 8019aa4:	08023208 	.word	0x08023208
 8019aa8:	08023244 	.word	0x08023244
 8019aac:	08023250 	.word	0x08023250
 8019ab0:	08023278 	.word	0x08023278
 8019ab4:	0802328c 	.word	0x0802328c
 8019ab8:	2000061c 	.word	0x2000061c
 8019abc:	080232ac 	.word	0x080232ac

08019ac0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019ac0:	b580      	push	{r7, lr}
 8019ac2:	b08a      	sub	sp, #40	; 0x28
 8019ac4:	af00      	add	r7, sp, #0
 8019ac6:	6078      	str	r0, [r7, #4]
 8019ac8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019aca:	2300      	movs	r3, #0
 8019acc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019ace:	2300      	movs	r3, #0
 8019ad0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019ad2:	2300      	movs	r3, #0
 8019ad4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019ada:	2300      	movs	r3, #0
 8019adc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019ade:	4b28      	ldr	r3, [pc, #160]	; (8019b80 <ip_reass_remove_oldest_datagram+0xc0>)
 8019ae0:	681b      	ldr	r3, [r3, #0]
 8019ae2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019ae4:	e030      	b.n	8019b48 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ae8:	695a      	ldr	r2, [r3, #20]
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	68db      	ldr	r3, [r3, #12]
 8019aee:	429a      	cmp	r2, r3
 8019af0:	d10c      	bne.n	8019b0c <ip_reass_remove_oldest_datagram+0x4c>
 8019af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019af4:	699a      	ldr	r2, [r3, #24]
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	691b      	ldr	r3, [r3, #16]
 8019afa:	429a      	cmp	r2, r3
 8019afc:	d106      	bne.n	8019b0c <ip_reass_remove_oldest_datagram+0x4c>
 8019afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b00:	899a      	ldrh	r2, [r3, #12]
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	889b      	ldrh	r3, [r3, #4]
 8019b06:	b29b      	uxth	r3, r3
 8019b08:	429a      	cmp	r2, r3
 8019b0a:	d014      	beq.n	8019b36 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019b0c:	693b      	ldr	r3, [r7, #16]
 8019b0e:	3301      	adds	r3, #1
 8019b10:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019b12:	6a3b      	ldr	r3, [r7, #32]
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d104      	bne.n	8019b22 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b1a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019b1c:	69fb      	ldr	r3, [r7, #28]
 8019b1e:	61bb      	str	r3, [r7, #24]
 8019b20:	e009      	b.n	8019b36 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b24:	7fda      	ldrb	r2, [r3, #31]
 8019b26:	6a3b      	ldr	r3, [r7, #32]
 8019b28:	7fdb      	ldrb	r3, [r3, #31]
 8019b2a:	429a      	cmp	r2, r3
 8019b2c:	d803      	bhi.n	8019b36 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b30:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019b32:	69fb      	ldr	r3, [r7, #28]
 8019b34:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b38:	681b      	ldr	r3, [r3, #0]
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d001      	beq.n	8019b42 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b40:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d1cb      	bne.n	8019ae6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019b4e:	6a3b      	ldr	r3, [r7, #32]
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d008      	beq.n	8019b66 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019b54:	69b9      	ldr	r1, [r7, #24]
 8019b56:	6a38      	ldr	r0, [r7, #32]
 8019b58:	f7ff ff0e 	bl	8019978 <ip_reass_free_complete_datagram>
 8019b5c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019b5e:	697a      	ldr	r2, [r7, #20]
 8019b60:	68fb      	ldr	r3, [r7, #12]
 8019b62:	4413      	add	r3, r2
 8019b64:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019b66:	697a      	ldr	r2, [r7, #20]
 8019b68:	683b      	ldr	r3, [r7, #0]
 8019b6a:	429a      	cmp	r2, r3
 8019b6c:	da02      	bge.n	8019b74 <ip_reass_remove_oldest_datagram+0xb4>
 8019b6e:	693b      	ldr	r3, [r7, #16]
 8019b70:	2b01      	cmp	r3, #1
 8019b72:	dcac      	bgt.n	8019ace <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019b74:	697b      	ldr	r3, [r7, #20]
}
 8019b76:	4618      	mov	r0, r3
 8019b78:	3728      	adds	r7, #40	; 0x28
 8019b7a:	46bd      	mov	sp, r7
 8019b7c:	bd80      	pop	{r7, pc}
 8019b7e:	bf00      	nop
 8019b80:	20000618 	.word	0x20000618

08019b84 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019b84:	b580      	push	{r7, lr}
 8019b86:	b084      	sub	sp, #16
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	6078      	str	r0, [r7, #4]
 8019b8c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019b8e:	2004      	movs	r0, #4
 8019b90:	f7f5 fca6 	bl	800f4e0 <memp_malloc>
 8019b94:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019b96:	68fb      	ldr	r3, [r7, #12]
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d110      	bne.n	8019bbe <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019b9c:	6839      	ldr	r1, [r7, #0]
 8019b9e:	6878      	ldr	r0, [r7, #4]
 8019ba0:	f7ff ff8e 	bl	8019ac0 <ip_reass_remove_oldest_datagram>
 8019ba4:	4602      	mov	r2, r0
 8019ba6:	683b      	ldr	r3, [r7, #0]
 8019ba8:	4293      	cmp	r3, r2
 8019baa:	dc03      	bgt.n	8019bb4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019bac:	2004      	movs	r0, #4
 8019bae:	f7f5 fc97 	bl	800f4e0 <memp_malloc>
 8019bb2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019bb4:	68fb      	ldr	r3, [r7, #12]
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d101      	bne.n	8019bbe <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019bba:	2300      	movs	r3, #0
 8019bbc:	e016      	b.n	8019bec <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019bbe:	2220      	movs	r2, #32
 8019bc0:	2100      	movs	r1, #0
 8019bc2:	68f8      	ldr	r0, [r7, #12]
 8019bc4:	f000 fe49 	bl	801a85a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019bc8:	68fb      	ldr	r3, [r7, #12]
 8019bca:	220f      	movs	r2, #15
 8019bcc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019bce:	4b09      	ldr	r3, [pc, #36]	; (8019bf4 <ip_reass_enqueue_new_datagram+0x70>)
 8019bd0:	681a      	ldr	r2, [r3, #0]
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019bd6:	4a07      	ldr	r2, [pc, #28]	; (8019bf4 <ip_reass_enqueue_new_datagram+0x70>)
 8019bd8:	68fb      	ldr	r3, [r7, #12]
 8019bda:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019bdc:	68fb      	ldr	r3, [r7, #12]
 8019bde:	3308      	adds	r3, #8
 8019be0:	2214      	movs	r2, #20
 8019be2:	6879      	ldr	r1, [r7, #4]
 8019be4:	4618      	mov	r0, r3
 8019be6:	f000 fe14 	bl	801a812 <memcpy>
  return ipr;
 8019bea:	68fb      	ldr	r3, [r7, #12]
}
 8019bec:	4618      	mov	r0, r3
 8019bee:	3710      	adds	r7, #16
 8019bf0:	46bd      	mov	sp, r7
 8019bf2:	bd80      	pop	{r7, pc}
 8019bf4:	20000618 	.word	0x20000618

08019bf8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019bf8:	b580      	push	{r7, lr}
 8019bfa:	b082      	sub	sp, #8
 8019bfc:	af00      	add	r7, sp, #0
 8019bfe:	6078      	str	r0, [r7, #4]
 8019c00:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019c02:	4b10      	ldr	r3, [pc, #64]	; (8019c44 <ip_reass_dequeue_datagram+0x4c>)
 8019c04:	681b      	ldr	r3, [r3, #0]
 8019c06:	687a      	ldr	r2, [r7, #4]
 8019c08:	429a      	cmp	r2, r3
 8019c0a:	d104      	bne.n	8019c16 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	681b      	ldr	r3, [r3, #0]
 8019c10:	4a0c      	ldr	r2, [pc, #48]	; (8019c44 <ip_reass_dequeue_datagram+0x4c>)
 8019c12:	6013      	str	r3, [r2, #0]
 8019c14:	e00d      	b.n	8019c32 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8019c16:	683b      	ldr	r3, [r7, #0]
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d106      	bne.n	8019c2a <ip_reass_dequeue_datagram+0x32>
 8019c1c:	4b0a      	ldr	r3, [pc, #40]	; (8019c48 <ip_reass_dequeue_datagram+0x50>)
 8019c1e:	f240 1245 	movw	r2, #325	; 0x145
 8019c22:	490a      	ldr	r1, [pc, #40]	; (8019c4c <ip_reass_dequeue_datagram+0x54>)
 8019c24:	480a      	ldr	r0, [pc, #40]	; (8019c50 <ip_reass_dequeue_datagram+0x58>)
 8019c26:	f001 fb25 	bl	801b274 <iprintf>
    prev->next = ipr->next;
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	681a      	ldr	r2, [r3, #0]
 8019c2e:	683b      	ldr	r3, [r7, #0]
 8019c30:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019c32:	6879      	ldr	r1, [r7, #4]
 8019c34:	2004      	movs	r0, #4
 8019c36:	f7f5 fc9f 	bl	800f578 <memp_free>
}
 8019c3a:	bf00      	nop
 8019c3c:	3708      	adds	r7, #8
 8019c3e:	46bd      	mov	sp, r7
 8019c40:	bd80      	pop	{r7, pc}
 8019c42:	bf00      	nop
 8019c44:	20000618 	.word	0x20000618
 8019c48:	08023208 	.word	0x08023208
 8019c4c:	080232d0 	.word	0x080232d0
 8019c50:	08023250 	.word	0x08023250

08019c54 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019c54:	b580      	push	{r7, lr}
 8019c56:	b08c      	sub	sp, #48	; 0x30
 8019c58:	af00      	add	r7, sp, #0
 8019c5a:	60f8      	str	r0, [r7, #12]
 8019c5c:	60b9      	str	r1, [r7, #8]
 8019c5e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019c60:	2300      	movs	r3, #0
 8019c62:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019c64:	2301      	movs	r3, #1
 8019c66:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019c68:	68bb      	ldr	r3, [r7, #8]
 8019c6a:	685b      	ldr	r3, [r3, #4]
 8019c6c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019c6e:	69fb      	ldr	r3, [r7, #28]
 8019c70:	885b      	ldrh	r3, [r3, #2]
 8019c72:	b29b      	uxth	r3, r3
 8019c74:	4618      	mov	r0, r3
 8019c76:	f7f4 ffdd 	bl	800ec34 <lwip_htons>
 8019c7a:	4603      	mov	r3, r0
 8019c7c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019c7e:	69fb      	ldr	r3, [r7, #28]
 8019c80:	781b      	ldrb	r3, [r3, #0]
 8019c82:	f003 030f 	and.w	r3, r3, #15
 8019c86:	b2db      	uxtb	r3, r3
 8019c88:	009b      	lsls	r3, r3, #2
 8019c8a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019c8c:	7e7b      	ldrb	r3, [r7, #25]
 8019c8e:	b29b      	uxth	r3, r3
 8019c90:	8b7a      	ldrh	r2, [r7, #26]
 8019c92:	429a      	cmp	r2, r3
 8019c94:	d202      	bcs.n	8019c9c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019c96:	f04f 33ff 	mov.w	r3, #4294967295
 8019c9a:	e135      	b.n	8019f08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019c9c:	7e7b      	ldrb	r3, [r7, #25]
 8019c9e:	b29b      	uxth	r3, r3
 8019ca0:	8b7a      	ldrh	r2, [r7, #26]
 8019ca2:	1ad3      	subs	r3, r2, r3
 8019ca4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019ca6:	69fb      	ldr	r3, [r7, #28]
 8019ca8:	88db      	ldrh	r3, [r3, #6]
 8019caa:	b29b      	uxth	r3, r3
 8019cac:	4618      	mov	r0, r3
 8019cae:	f7f4 ffc1 	bl	800ec34 <lwip_htons>
 8019cb2:	4603      	mov	r3, r0
 8019cb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019cb8:	b29b      	uxth	r3, r3
 8019cba:	00db      	lsls	r3, r3, #3
 8019cbc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019cbe:	68bb      	ldr	r3, [r7, #8]
 8019cc0:	685b      	ldr	r3, [r3, #4]
 8019cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cc6:	2200      	movs	r2, #0
 8019cc8:	701a      	strb	r2, [r3, #0]
 8019cca:	2200      	movs	r2, #0
 8019ccc:	705a      	strb	r2, [r3, #1]
 8019cce:	2200      	movs	r2, #0
 8019cd0:	709a      	strb	r2, [r3, #2]
 8019cd2:	2200      	movs	r2, #0
 8019cd4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cd8:	8afa      	ldrh	r2, [r7, #22]
 8019cda:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019cdc:	8afa      	ldrh	r2, [r7, #22]
 8019cde:	8b7b      	ldrh	r3, [r7, #26]
 8019ce0:	4413      	add	r3, r2
 8019ce2:	b29a      	uxth	r2, r3
 8019ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ce6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cea:	88db      	ldrh	r3, [r3, #6]
 8019cec:	b29b      	uxth	r3, r3
 8019cee:	8afa      	ldrh	r2, [r7, #22]
 8019cf0:	429a      	cmp	r2, r3
 8019cf2:	d902      	bls.n	8019cfa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8019cf8:	e106      	b.n	8019f08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019cfa:	68fb      	ldr	r3, [r7, #12]
 8019cfc:	685b      	ldr	r3, [r3, #4]
 8019cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8019d00:	e068      	b.n	8019dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8019d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d04:	685b      	ldr	r3, [r3, #4]
 8019d06:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d0a:	889b      	ldrh	r3, [r3, #4]
 8019d0c:	b29a      	uxth	r2, r3
 8019d0e:	693b      	ldr	r3, [r7, #16]
 8019d10:	889b      	ldrh	r3, [r3, #4]
 8019d12:	b29b      	uxth	r3, r3
 8019d14:	429a      	cmp	r2, r3
 8019d16:	d235      	bcs.n	8019d84 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d1c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d20:	2b00      	cmp	r3, #0
 8019d22:	d020      	beq.n	8019d66 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d26:	889b      	ldrh	r3, [r3, #4]
 8019d28:	b29a      	uxth	r2, r3
 8019d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d2c:	88db      	ldrh	r3, [r3, #6]
 8019d2e:	b29b      	uxth	r3, r3
 8019d30:	429a      	cmp	r2, r3
 8019d32:	d307      	bcc.n	8019d44 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d36:	88db      	ldrh	r3, [r3, #6]
 8019d38:	b29a      	uxth	r2, r3
 8019d3a:	693b      	ldr	r3, [r7, #16]
 8019d3c:	889b      	ldrh	r3, [r3, #4]
 8019d3e:	b29b      	uxth	r3, r3
 8019d40:	429a      	cmp	r2, r3
 8019d42:	d902      	bls.n	8019d4a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019d44:	f04f 33ff 	mov.w	r3, #4294967295
 8019d48:	e0de      	b.n	8019f08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d4c:	68ba      	ldr	r2, [r7, #8]
 8019d4e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d52:	88db      	ldrh	r3, [r3, #6]
 8019d54:	b29a      	uxth	r2, r3
 8019d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d58:	889b      	ldrh	r3, [r3, #4]
 8019d5a:	b29b      	uxth	r3, r3
 8019d5c:	429a      	cmp	r2, r3
 8019d5e:	d03d      	beq.n	8019ddc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019d60:	2300      	movs	r3, #0
 8019d62:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019d64:	e03a      	b.n	8019ddc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d68:	88db      	ldrh	r3, [r3, #6]
 8019d6a:	b29a      	uxth	r2, r3
 8019d6c:	693b      	ldr	r3, [r7, #16]
 8019d6e:	889b      	ldrh	r3, [r3, #4]
 8019d70:	b29b      	uxth	r3, r3
 8019d72:	429a      	cmp	r2, r3
 8019d74:	d902      	bls.n	8019d7c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019d76:	f04f 33ff 	mov.w	r3, #4294967295
 8019d7a:	e0c5      	b.n	8019f08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019d7c:	68fb      	ldr	r3, [r7, #12]
 8019d7e:	68ba      	ldr	r2, [r7, #8]
 8019d80:	605a      	str	r2, [r3, #4]
      break;
 8019d82:	e02b      	b.n	8019ddc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d86:	889b      	ldrh	r3, [r3, #4]
 8019d88:	b29a      	uxth	r2, r3
 8019d8a:	693b      	ldr	r3, [r7, #16]
 8019d8c:	889b      	ldrh	r3, [r3, #4]
 8019d8e:	b29b      	uxth	r3, r3
 8019d90:	429a      	cmp	r2, r3
 8019d92:	d102      	bne.n	8019d9a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019d94:	f04f 33ff 	mov.w	r3, #4294967295
 8019d98:	e0b6      	b.n	8019f08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d9c:	889b      	ldrh	r3, [r3, #4]
 8019d9e:	b29a      	uxth	r2, r3
 8019da0:	693b      	ldr	r3, [r7, #16]
 8019da2:	88db      	ldrh	r3, [r3, #6]
 8019da4:	b29b      	uxth	r3, r3
 8019da6:	429a      	cmp	r2, r3
 8019da8:	d202      	bcs.n	8019db0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019daa:	f04f 33ff 	mov.w	r3, #4294967295
 8019dae:	e0ab      	b.n	8019f08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d009      	beq.n	8019dca <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019db8:	88db      	ldrh	r3, [r3, #6]
 8019dba:	b29a      	uxth	r2, r3
 8019dbc:	693b      	ldr	r3, [r7, #16]
 8019dbe:	889b      	ldrh	r3, [r3, #4]
 8019dc0:	b29b      	uxth	r3, r3
 8019dc2:	429a      	cmp	r2, r3
 8019dc4:	d001      	beq.n	8019dca <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019dc6:	2300      	movs	r3, #0
 8019dc8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019dca:	693b      	ldr	r3, [r7, #16]
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019dd0:	693b      	ldr	r3, [r7, #16]
 8019dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d193      	bne.n	8019d02 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019dda:	e000      	b.n	8019dde <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019ddc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d12d      	bne.n	8019e40 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d01c      	beq.n	8019e24 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019dec:	88db      	ldrh	r3, [r3, #6]
 8019dee:	b29a      	uxth	r2, r3
 8019df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019df2:	889b      	ldrh	r3, [r3, #4]
 8019df4:	b29b      	uxth	r3, r3
 8019df6:	429a      	cmp	r2, r3
 8019df8:	d906      	bls.n	8019e08 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019dfa:	4b45      	ldr	r3, [pc, #276]	; (8019f10 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019dfc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8019e00:	4944      	ldr	r1, [pc, #272]	; (8019f14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019e02:	4845      	ldr	r0, [pc, #276]	; (8019f18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019e04:	f001 fa36 	bl	801b274 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e0a:	68ba      	ldr	r2, [r7, #8]
 8019e0c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e10:	88db      	ldrh	r3, [r3, #6]
 8019e12:	b29a      	uxth	r2, r3
 8019e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e16:	889b      	ldrh	r3, [r3, #4]
 8019e18:	b29b      	uxth	r3, r3
 8019e1a:	429a      	cmp	r2, r3
 8019e1c:	d010      	beq.n	8019e40 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019e1e:	2300      	movs	r3, #0
 8019e20:	623b      	str	r3, [r7, #32]
 8019e22:	e00d      	b.n	8019e40 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	685b      	ldr	r3, [r3, #4]
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d006      	beq.n	8019e3a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019e2c:	4b38      	ldr	r3, [pc, #224]	; (8019f10 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019e2e:	f240 12bf 	movw	r2, #447	; 0x1bf
 8019e32:	493a      	ldr	r1, [pc, #232]	; (8019f1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019e34:	4838      	ldr	r0, [pc, #224]	; (8019f18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019e36:	f001 fa1d 	bl	801b274 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019e3a:	68fb      	ldr	r3, [r7, #12]
 8019e3c:	68ba      	ldr	r2, [r7, #8]
 8019e3e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d105      	bne.n	8019e52 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	7f9b      	ldrb	r3, [r3, #30]
 8019e4a:	f003 0301 	and.w	r3, r3, #1
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d059      	beq.n	8019f06 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8019e52:	6a3b      	ldr	r3, [r7, #32]
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d04f      	beq.n	8019ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019e58:	68fb      	ldr	r3, [r7, #12]
 8019e5a:	685b      	ldr	r3, [r3, #4]
 8019e5c:	2b00      	cmp	r3, #0
 8019e5e:	d006      	beq.n	8019e6e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8019e60:	68fb      	ldr	r3, [r7, #12]
 8019e62:	685b      	ldr	r3, [r3, #4]
 8019e64:	685b      	ldr	r3, [r3, #4]
 8019e66:	889b      	ldrh	r3, [r3, #4]
 8019e68:	b29b      	uxth	r3, r3
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d002      	beq.n	8019e74 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8019e6e:	2300      	movs	r3, #0
 8019e70:	623b      	str	r3, [r7, #32]
 8019e72:	e041      	b.n	8019ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e76:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019e7e:	e012      	b.n	8019ea6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e82:	685b      	ldr	r3, [r3, #4]
 8019e84:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e88:	88db      	ldrh	r3, [r3, #6]
 8019e8a:	b29a      	uxth	r2, r3
 8019e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e8e:	889b      	ldrh	r3, [r3, #4]
 8019e90:	b29b      	uxth	r3, r3
 8019e92:	429a      	cmp	r2, r3
 8019e94:	d002      	beq.n	8019e9c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8019e96:	2300      	movs	r3, #0
 8019e98:	623b      	str	r3, [r7, #32]
            break;
 8019e9a:	e007      	b.n	8019eac <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e9e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8019ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ea2:	681b      	ldr	r3, [r3, #0]
 8019ea4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d1e9      	bne.n	8019e80 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019eac:	6a3b      	ldr	r3, [r7, #32]
 8019eae:	2b00      	cmp	r3, #0
 8019eb0:	d022      	beq.n	8019ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8019eb2:	68fb      	ldr	r3, [r7, #12]
 8019eb4:	685b      	ldr	r3, [r3, #4]
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d106      	bne.n	8019ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019eba:	4b15      	ldr	r3, [pc, #84]	; (8019f10 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019ebc:	f240 12df 	movw	r2, #479	; 0x1df
 8019ec0:	4917      	ldr	r1, [pc, #92]	; (8019f20 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019ec2:	4815      	ldr	r0, [pc, #84]	; (8019f18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019ec4:	f001 f9d6 	bl	801b274 <iprintf>
          LWIP_ASSERT("sanity check",
 8019ec8:	68fb      	ldr	r3, [r7, #12]
 8019eca:	685b      	ldr	r3, [r3, #4]
 8019ecc:	685b      	ldr	r3, [r3, #4]
 8019ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019ed0:	429a      	cmp	r2, r3
 8019ed2:	d106      	bne.n	8019ee2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019ed4:	4b0e      	ldr	r3, [pc, #56]	; (8019f10 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019ed6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8019eda:	4911      	ldr	r1, [pc, #68]	; (8019f20 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019edc:	480e      	ldr	r0, [pc, #56]	; (8019f18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019ede:	f001 f9c9 	bl	801b274 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8019ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d006      	beq.n	8019ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8019eea:	4b09      	ldr	r3, [pc, #36]	; (8019f10 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019eec:	f240 12e3 	movw	r2, #483	; 0x1e3
 8019ef0:	490c      	ldr	r1, [pc, #48]	; (8019f24 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019ef2:	4809      	ldr	r0, [pc, #36]	; (8019f18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019ef4:	f001 f9be 	bl	801b274 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019ef8:	6a3b      	ldr	r3, [r7, #32]
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	bf14      	ite	ne
 8019efe:	2301      	movne	r3, #1
 8019f00:	2300      	moveq	r3, #0
 8019f02:	b2db      	uxtb	r3, r3
 8019f04:	e000      	b.n	8019f08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8019f06:	2300      	movs	r3, #0
}
 8019f08:	4618      	mov	r0, r3
 8019f0a:	3730      	adds	r7, #48	; 0x30
 8019f0c:	46bd      	mov	sp, r7
 8019f0e:	bd80      	pop	{r7, pc}
 8019f10:	08023208 	.word	0x08023208
 8019f14:	080232ec 	.word	0x080232ec
 8019f18:	08023250 	.word	0x08023250
 8019f1c:	0802330c 	.word	0x0802330c
 8019f20:	08023344 	.word	0x08023344
 8019f24:	08023354 	.word	0x08023354

08019f28 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019f28:	b580      	push	{r7, lr}
 8019f2a:	b08e      	sub	sp, #56	; 0x38
 8019f2c:	af00      	add	r7, sp, #0
 8019f2e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	685b      	ldr	r3, [r3, #4]
 8019f34:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8019f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f38:	781b      	ldrb	r3, [r3, #0]
 8019f3a:	f003 030f 	and.w	r3, r3, #15
 8019f3e:	b2db      	uxtb	r3, r3
 8019f40:	009b      	lsls	r3, r3, #2
 8019f42:	b2db      	uxtb	r3, r3
 8019f44:	2b14      	cmp	r3, #20
 8019f46:	f040 8167 	bne.w	801a218 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8019f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f4c:	88db      	ldrh	r3, [r3, #6]
 8019f4e:	b29b      	uxth	r3, r3
 8019f50:	4618      	mov	r0, r3
 8019f52:	f7f4 fe6f 	bl	800ec34 <lwip_htons>
 8019f56:	4603      	mov	r3, r0
 8019f58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019f5c:	b29b      	uxth	r3, r3
 8019f5e:	00db      	lsls	r3, r3, #3
 8019f60:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f64:	885b      	ldrh	r3, [r3, #2]
 8019f66:	b29b      	uxth	r3, r3
 8019f68:	4618      	mov	r0, r3
 8019f6a:	f7f4 fe63 	bl	800ec34 <lwip_htons>
 8019f6e:	4603      	mov	r3, r0
 8019f70:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8019f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f74:	781b      	ldrb	r3, [r3, #0]
 8019f76:	f003 030f 	and.w	r3, r3, #15
 8019f7a:	b2db      	uxtb	r3, r3
 8019f7c:	009b      	lsls	r3, r3, #2
 8019f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8019f82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019f86:	b29b      	uxth	r3, r3
 8019f88:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019f8a:	429a      	cmp	r2, r3
 8019f8c:	f0c0 8146 	bcc.w	801a21c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8019f90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019f94:	b29b      	uxth	r3, r3
 8019f96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019f98:	1ad3      	subs	r3, r2, r3
 8019f9a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019f9c:	6878      	ldr	r0, [r7, #4]
 8019f9e:	f7f6 f969 	bl	8010274 <pbuf_clen>
 8019fa2:	4603      	mov	r3, r0
 8019fa4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8019fa6:	4ba3      	ldr	r3, [pc, #652]	; (801a234 <ip4_reass+0x30c>)
 8019fa8:	881b      	ldrh	r3, [r3, #0]
 8019faa:	461a      	mov	r2, r3
 8019fac:	8c3b      	ldrh	r3, [r7, #32]
 8019fae:	4413      	add	r3, r2
 8019fb0:	2b0a      	cmp	r3, #10
 8019fb2:	dd10      	ble.n	8019fd6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019fb4:	8c3b      	ldrh	r3, [r7, #32]
 8019fb6:	4619      	mov	r1, r3
 8019fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019fba:	f7ff fd81 	bl	8019ac0 <ip_reass_remove_oldest_datagram>
 8019fbe:	4603      	mov	r3, r0
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	f000 812d 	beq.w	801a220 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8019fc6:	4b9b      	ldr	r3, [pc, #620]	; (801a234 <ip4_reass+0x30c>)
 8019fc8:	881b      	ldrh	r3, [r3, #0]
 8019fca:	461a      	mov	r2, r3
 8019fcc:	8c3b      	ldrh	r3, [r7, #32]
 8019fce:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019fd0:	2b0a      	cmp	r3, #10
 8019fd2:	f300 8125 	bgt.w	801a220 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019fd6:	4b98      	ldr	r3, [pc, #608]	; (801a238 <ip4_reass+0x310>)
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	633b      	str	r3, [r7, #48]	; 0x30
 8019fdc:	e015      	b.n	801a00a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8019fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fe0:	695a      	ldr	r2, [r3, #20]
 8019fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fe4:	68db      	ldr	r3, [r3, #12]
 8019fe6:	429a      	cmp	r2, r3
 8019fe8:	d10c      	bne.n	801a004 <ip4_reass+0xdc>
 8019fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fec:	699a      	ldr	r2, [r3, #24]
 8019fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ff0:	691b      	ldr	r3, [r3, #16]
 8019ff2:	429a      	cmp	r2, r3
 8019ff4:	d106      	bne.n	801a004 <ip4_reass+0xdc>
 8019ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ff8:	899a      	ldrh	r2, [r3, #12]
 8019ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ffc:	889b      	ldrh	r3, [r3, #4]
 8019ffe:	b29b      	uxth	r3, r3
 801a000:	429a      	cmp	r2, r3
 801a002:	d006      	beq.n	801a012 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	633b      	str	r3, [r7, #48]	; 0x30
 801a00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	d1e6      	bne.n	8019fde <ip4_reass+0xb6>
 801a010:	e000      	b.n	801a014 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a012:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a016:	2b00      	cmp	r3, #0
 801a018:	d109      	bne.n	801a02e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a01a:	8c3b      	ldrh	r3, [r7, #32]
 801a01c:	4619      	mov	r1, r3
 801a01e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a020:	f7ff fdb0 	bl	8019b84 <ip_reass_enqueue_new_datagram>
 801a024:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d11c      	bne.n	801a066 <ip4_reass+0x13e>
      goto nullreturn;
 801a02c:	e0f9      	b.n	801a222 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a030:	88db      	ldrh	r3, [r3, #6]
 801a032:	b29b      	uxth	r3, r3
 801a034:	4618      	mov	r0, r3
 801a036:	f7f4 fdfd 	bl	800ec34 <lwip_htons>
 801a03a:	4603      	mov	r3, r0
 801a03c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a040:	2b00      	cmp	r3, #0
 801a042:	d110      	bne.n	801a066 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a046:	89db      	ldrh	r3, [r3, #14]
 801a048:	4618      	mov	r0, r3
 801a04a:	f7f4 fdf3 	bl	800ec34 <lwip_htons>
 801a04e:	4603      	mov	r3, r0
 801a050:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a054:	2b00      	cmp	r3, #0
 801a056:	d006      	beq.n	801a066 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a05a:	3308      	adds	r3, #8
 801a05c:	2214      	movs	r2, #20
 801a05e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a060:	4618      	mov	r0, r3
 801a062:	f000 fbd6 	bl	801a812 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a068:	88db      	ldrh	r3, [r3, #6]
 801a06a:	b29b      	uxth	r3, r3
 801a06c:	f003 0320 	and.w	r3, r3, #32
 801a070:	2b00      	cmp	r3, #0
 801a072:	bf0c      	ite	eq
 801a074:	2301      	moveq	r3, #1
 801a076:	2300      	movne	r3, #0
 801a078:	b2db      	uxtb	r3, r3
 801a07a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a07c:	69fb      	ldr	r3, [r7, #28]
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d00e      	beq.n	801a0a0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a082:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a084:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a086:	4413      	add	r3, r2
 801a088:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a08a:	8b7a      	ldrh	r2, [r7, #26]
 801a08c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a08e:	429a      	cmp	r2, r3
 801a090:	f0c0 80a0 	bcc.w	801a1d4 <ip4_reass+0x2ac>
 801a094:	8b7b      	ldrh	r3, [r7, #26]
 801a096:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a09a:	4293      	cmp	r3, r2
 801a09c:	f200 809a 	bhi.w	801a1d4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a0a0:	69fa      	ldr	r2, [r7, #28]
 801a0a2:	6879      	ldr	r1, [r7, #4]
 801a0a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a0a6:	f7ff fdd5 	bl	8019c54 <ip_reass_chain_frag_into_datagram_and_validate>
 801a0aa:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a0ac:	697b      	ldr	r3, [r7, #20]
 801a0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0b2:	f000 8091 	beq.w	801a1d8 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a0b6:	4b5f      	ldr	r3, [pc, #380]	; (801a234 <ip4_reass+0x30c>)
 801a0b8:	881a      	ldrh	r2, [r3, #0]
 801a0ba:	8c3b      	ldrh	r3, [r7, #32]
 801a0bc:	4413      	add	r3, r2
 801a0be:	b29a      	uxth	r2, r3
 801a0c0:	4b5c      	ldr	r3, [pc, #368]	; (801a234 <ip4_reass+0x30c>)
 801a0c2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a0c4:	69fb      	ldr	r3, [r7, #28]
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	d00d      	beq.n	801a0e6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a0ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a0cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a0ce:	4413      	add	r3, r2
 801a0d0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0d4:	8a7a      	ldrh	r2, [r7, #18]
 801a0d6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0da:	7f9b      	ldrb	r3, [r3, #30]
 801a0dc:	f043 0301 	orr.w	r3, r3, #1
 801a0e0:	b2da      	uxtb	r2, r3
 801a0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0e4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a0e6:	697b      	ldr	r3, [r7, #20]
 801a0e8:	2b01      	cmp	r3, #1
 801a0ea:	d171      	bne.n	801a1d0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0ee:	8b9b      	ldrh	r3, [r3, #28]
 801a0f0:	3314      	adds	r3, #20
 801a0f2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0f6:	685b      	ldr	r3, [r3, #4]
 801a0f8:	685b      	ldr	r3, [r3, #4]
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a100:	685b      	ldr	r3, [r3, #4]
 801a102:	685b      	ldr	r3, [r3, #4]
 801a104:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a108:	3308      	adds	r3, #8
 801a10a:	2214      	movs	r2, #20
 801a10c:	4619      	mov	r1, r3
 801a10e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a110:	f000 fb7f 	bl	801a812 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a114:	8a3b      	ldrh	r3, [r7, #16]
 801a116:	4618      	mov	r0, r3
 801a118:	f7f4 fd8c 	bl	800ec34 <lwip_htons>
 801a11c:	4603      	mov	r3, r0
 801a11e:	461a      	mov	r2, r3
 801a120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a122:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a126:	2200      	movs	r2, #0
 801a128:	719a      	strb	r2, [r3, #6]
 801a12a:	2200      	movs	r2, #0
 801a12c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a130:	2200      	movs	r2, #0
 801a132:	729a      	strb	r2, [r3, #10]
 801a134:	2200      	movs	r2, #0
 801a136:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a13a:	685b      	ldr	r3, [r3, #4]
 801a13c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a13e:	e00d      	b.n	801a15c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a142:	685b      	ldr	r3, [r3, #4]
 801a144:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a146:	2114      	movs	r1, #20
 801a148:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a14a:	f7f5 ff85 	bl	8010058 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a14e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a150:	6878      	ldr	r0, [r7, #4]
 801a152:	f7f6 f8c9 	bl	80102e8 <pbuf_cat>
      r = iprh->next_pbuf;
 801a156:	68fb      	ldr	r3, [r7, #12]
 801a158:	681b      	ldr	r3, [r3, #0]
 801a15a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801a15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a15e:	2b00      	cmp	r3, #0
 801a160:	d1ee      	bne.n	801a140 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a162:	4b35      	ldr	r3, [pc, #212]	; (801a238 <ip4_reass+0x310>)
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a168:	429a      	cmp	r2, r3
 801a16a:	d102      	bne.n	801a172 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a16c:	2300      	movs	r3, #0
 801a16e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a170:	e010      	b.n	801a194 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a172:	4b31      	ldr	r3, [pc, #196]	; (801a238 <ip4_reass+0x310>)
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a178:	e007      	b.n	801a18a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a17c:	681b      	ldr	r3, [r3, #0]
 801a17e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a180:	429a      	cmp	r2, r3
 801a182:	d006      	beq.n	801a192 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d1f4      	bne.n	801a17a <ip4_reass+0x252>
 801a190:	e000      	b.n	801a194 <ip4_reass+0x26c>
          break;
 801a192:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a194:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a196:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a198:	f7ff fd2e 	bl	8019bf8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a19c:	6878      	ldr	r0, [r7, #4]
 801a19e:	f7f6 f869 	bl	8010274 <pbuf_clen>
 801a1a2:	4603      	mov	r3, r0
 801a1a4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a1a6:	4b23      	ldr	r3, [pc, #140]	; (801a234 <ip4_reass+0x30c>)
 801a1a8:	881b      	ldrh	r3, [r3, #0]
 801a1aa:	8c3a      	ldrh	r2, [r7, #32]
 801a1ac:	429a      	cmp	r2, r3
 801a1ae:	d906      	bls.n	801a1be <ip4_reass+0x296>
 801a1b0:	4b22      	ldr	r3, [pc, #136]	; (801a23c <ip4_reass+0x314>)
 801a1b2:	f240 229b 	movw	r2, #667	; 0x29b
 801a1b6:	4922      	ldr	r1, [pc, #136]	; (801a240 <ip4_reass+0x318>)
 801a1b8:	4822      	ldr	r0, [pc, #136]	; (801a244 <ip4_reass+0x31c>)
 801a1ba:	f001 f85b 	bl	801b274 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a1be:	4b1d      	ldr	r3, [pc, #116]	; (801a234 <ip4_reass+0x30c>)
 801a1c0:	881a      	ldrh	r2, [r3, #0]
 801a1c2:	8c3b      	ldrh	r3, [r7, #32]
 801a1c4:	1ad3      	subs	r3, r2, r3
 801a1c6:	b29a      	uxth	r2, r3
 801a1c8:	4b1a      	ldr	r3, [pc, #104]	; (801a234 <ip4_reass+0x30c>)
 801a1ca:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	e02c      	b.n	801a22a <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a1d0:	2300      	movs	r3, #0
 801a1d2:	e02a      	b.n	801a22a <ip4_reass+0x302>

nullreturn_ipr:
 801a1d4:	bf00      	nop
 801a1d6:	e000      	b.n	801a1da <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801a1d8:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	d106      	bne.n	801a1ee <ip4_reass+0x2c6>
 801a1e0:	4b16      	ldr	r3, [pc, #88]	; (801a23c <ip4_reass+0x314>)
 801a1e2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801a1e6:	4918      	ldr	r1, [pc, #96]	; (801a248 <ip4_reass+0x320>)
 801a1e8:	4816      	ldr	r0, [pc, #88]	; (801a244 <ip4_reass+0x31c>)
 801a1ea:	f001 f843 	bl	801b274 <iprintf>
  if (ipr->p == NULL) {
 801a1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1f0:	685b      	ldr	r3, [r3, #4]
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d114      	bne.n	801a220 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a1f6:	4b10      	ldr	r3, [pc, #64]	; (801a238 <ip4_reass+0x310>)
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a1fc:	429a      	cmp	r2, r3
 801a1fe:	d006      	beq.n	801a20e <ip4_reass+0x2e6>
 801a200:	4b0e      	ldr	r3, [pc, #56]	; (801a23c <ip4_reass+0x314>)
 801a202:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a206:	4911      	ldr	r1, [pc, #68]	; (801a24c <ip4_reass+0x324>)
 801a208:	480e      	ldr	r0, [pc, #56]	; (801a244 <ip4_reass+0x31c>)
 801a20a:	f001 f833 	bl	801b274 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a20e:	2100      	movs	r1, #0
 801a210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a212:	f7ff fcf1 	bl	8019bf8 <ip_reass_dequeue_datagram>
 801a216:	e004      	b.n	801a222 <ip4_reass+0x2fa>
    goto nullreturn;
 801a218:	bf00      	nop
 801a21a:	e002      	b.n	801a222 <ip4_reass+0x2fa>
    goto nullreturn;
 801a21c:	bf00      	nop
 801a21e:	e000      	b.n	801a222 <ip4_reass+0x2fa>
  }

nullreturn:
 801a220:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a222:	6878      	ldr	r0, [r7, #4]
 801a224:	f7f5 ff9e 	bl	8010164 <pbuf_free>
  return NULL;
 801a228:	2300      	movs	r3, #0
}
 801a22a:	4618      	mov	r0, r3
 801a22c:	3738      	adds	r7, #56	; 0x38
 801a22e:	46bd      	mov	sp, r7
 801a230:	bd80      	pop	{r7, pc}
 801a232:	bf00      	nop
 801a234:	2000061c 	.word	0x2000061c
 801a238:	20000618 	.word	0x20000618
 801a23c:	08023208 	.word	0x08023208
 801a240:	08023378 	.word	0x08023378
 801a244:	08023250 	.word	0x08023250
 801a248:	08023394 	.word	0x08023394
 801a24c:	080233a0 	.word	0x080233a0

0801a250 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a250:	b580      	push	{r7, lr}
 801a252:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a254:	2005      	movs	r0, #5
 801a256:	f7f5 f943 	bl	800f4e0 <memp_malloc>
 801a25a:	4603      	mov	r3, r0
}
 801a25c:	4618      	mov	r0, r3
 801a25e:	bd80      	pop	{r7, pc}

0801a260 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a260:	b580      	push	{r7, lr}
 801a262:	b082      	sub	sp, #8
 801a264:	af00      	add	r7, sp, #0
 801a266:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d106      	bne.n	801a27c <ip_frag_free_pbuf_custom_ref+0x1c>
 801a26e:	4b07      	ldr	r3, [pc, #28]	; (801a28c <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a270:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801a274:	4906      	ldr	r1, [pc, #24]	; (801a290 <ip_frag_free_pbuf_custom_ref+0x30>)
 801a276:	4807      	ldr	r0, [pc, #28]	; (801a294 <ip_frag_free_pbuf_custom_ref+0x34>)
 801a278:	f000 fffc 	bl	801b274 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a27c:	6879      	ldr	r1, [r7, #4]
 801a27e:	2005      	movs	r0, #5
 801a280:	f7f5 f97a 	bl	800f578 <memp_free>
}
 801a284:	bf00      	nop
 801a286:	3708      	adds	r7, #8
 801a288:	46bd      	mov	sp, r7
 801a28a:	bd80      	pop	{r7, pc}
 801a28c:	08023208 	.word	0x08023208
 801a290:	080233c0 	.word	0x080233c0
 801a294:	08023250 	.word	0x08023250

0801a298 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a298:	b580      	push	{r7, lr}
 801a29a:	b084      	sub	sp, #16
 801a29c:	af00      	add	r7, sp, #0
 801a29e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a2a4:	68fb      	ldr	r3, [r7, #12]
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	d106      	bne.n	801a2b8 <ipfrag_free_pbuf_custom+0x20>
 801a2aa:	4b11      	ldr	r3, [pc, #68]	; (801a2f0 <ipfrag_free_pbuf_custom+0x58>)
 801a2ac:	f240 22ce 	movw	r2, #718	; 0x2ce
 801a2b0:	4910      	ldr	r1, [pc, #64]	; (801a2f4 <ipfrag_free_pbuf_custom+0x5c>)
 801a2b2:	4811      	ldr	r0, [pc, #68]	; (801a2f8 <ipfrag_free_pbuf_custom+0x60>)
 801a2b4:	f000 ffde 	bl	801b274 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a2b8:	68fa      	ldr	r2, [r7, #12]
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	429a      	cmp	r2, r3
 801a2be:	d006      	beq.n	801a2ce <ipfrag_free_pbuf_custom+0x36>
 801a2c0:	4b0b      	ldr	r3, [pc, #44]	; (801a2f0 <ipfrag_free_pbuf_custom+0x58>)
 801a2c2:	f240 22cf 	movw	r2, #719	; 0x2cf
 801a2c6:	490d      	ldr	r1, [pc, #52]	; (801a2fc <ipfrag_free_pbuf_custom+0x64>)
 801a2c8:	480b      	ldr	r0, [pc, #44]	; (801a2f8 <ipfrag_free_pbuf_custom+0x60>)
 801a2ca:	f000 ffd3 	bl	801b274 <iprintf>
  if (pcr->original != NULL) {
 801a2ce:	68fb      	ldr	r3, [r7, #12]
 801a2d0:	695b      	ldr	r3, [r3, #20]
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	d004      	beq.n	801a2e0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a2d6:	68fb      	ldr	r3, [r7, #12]
 801a2d8:	695b      	ldr	r3, [r3, #20]
 801a2da:	4618      	mov	r0, r3
 801a2dc:	f7f5 ff42 	bl	8010164 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a2e0:	68f8      	ldr	r0, [r7, #12]
 801a2e2:	f7ff ffbd 	bl	801a260 <ip_frag_free_pbuf_custom_ref>
}
 801a2e6:	bf00      	nop
 801a2e8:	3710      	adds	r7, #16
 801a2ea:	46bd      	mov	sp, r7
 801a2ec:	bd80      	pop	{r7, pc}
 801a2ee:	bf00      	nop
 801a2f0:	08023208 	.word	0x08023208
 801a2f4:	080233cc 	.word	0x080233cc
 801a2f8:	08023250 	.word	0x08023250
 801a2fc:	080233d8 	.word	0x080233d8

0801a300 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a300:	b580      	push	{r7, lr}
 801a302:	b094      	sub	sp, #80	; 0x50
 801a304:	af02      	add	r7, sp, #8
 801a306:	60f8      	str	r0, [r7, #12]
 801a308:	60b9      	str	r1, [r7, #8]
 801a30a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a30c:	2300      	movs	r3, #0
 801a30e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a312:	68bb      	ldr	r3, [r7, #8]
 801a314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a316:	3b14      	subs	r3, #20
 801a318:	2b00      	cmp	r3, #0
 801a31a:	da00      	bge.n	801a31e <ip4_frag+0x1e>
 801a31c:	3307      	adds	r3, #7
 801a31e:	10db      	asrs	r3, r3, #3
 801a320:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a322:	2314      	movs	r3, #20
 801a324:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a326:	68fb      	ldr	r3, [r7, #12]
 801a328:	685b      	ldr	r3, [r3, #4]
 801a32a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801a32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a32e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a332:	781b      	ldrb	r3, [r3, #0]
 801a334:	f003 030f 	and.w	r3, r3, #15
 801a338:	b2db      	uxtb	r3, r3
 801a33a:	009b      	lsls	r3, r3, #2
 801a33c:	b2db      	uxtb	r3, r3
 801a33e:	2b14      	cmp	r3, #20
 801a340:	d002      	beq.n	801a348 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a342:	f06f 0305 	mvn.w	r3, #5
 801a346:	e10f      	b.n	801a568 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a348:	68fb      	ldr	r3, [r7, #12]
 801a34a:	895b      	ldrh	r3, [r3, #10]
 801a34c:	2b13      	cmp	r3, #19
 801a34e:	d809      	bhi.n	801a364 <ip4_frag+0x64>
 801a350:	4b87      	ldr	r3, [pc, #540]	; (801a570 <ip4_frag+0x270>)
 801a352:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801a356:	4987      	ldr	r1, [pc, #540]	; (801a574 <ip4_frag+0x274>)
 801a358:	4887      	ldr	r0, [pc, #540]	; (801a578 <ip4_frag+0x278>)
 801a35a:	f000 ff8b 	bl	801b274 <iprintf>
 801a35e:	f06f 0305 	mvn.w	r3, #5
 801a362:	e101      	b.n	801a568 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a366:	88db      	ldrh	r3, [r3, #6]
 801a368:	b29b      	uxth	r3, r3
 801a36a:	4618      	mov	r0, r3
 801a36c:	f7f4 fc62 	bl	800ec34 <lwip_htons>
 801a370:	4603      	mov	r3, r0
 801a372:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801a374:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a376:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a37a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a37e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a384:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a386:	68fb      	ldr	r3, [r7, #12]
 801a388:	891b      	ldrh	r3, [r3, #8]
 801a38a:	3b14      	subs	r3, #20
 801a38c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801a390:	e0e0      	b.n	801a554 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a392:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a394:	00db      	lsls	r3, r3, #3
 801a396:	b29b      	uxth	r3, r3
 801a398:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a39c:	4293      	cmp	r3, r2
 801a39e:	bf28      	it	cs
 801a3a0:	4613      	movcs	r3, r2
 801a3a2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a3a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a3a8:	2114      	movs	r1, #20
 801a3aa:	200e      	movs	r0, #14
 801a3ac:	f7f5 fbfa 	bl	800fba4 <pbuf_alloc>
 801a3b0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801a3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	f000 80d4 	beq.w	801a562 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3bc:	895b      	ldrh	r3, [r3, #10]
 801a3be:	2b13      	cmp	r3, #19
 801a3c0:	d806      	bhi.n	801a3d0 <ip4_frag+0xd0>
 801a3c2:	4b6b      	ldr	r3, [pc, #428]	; (801a570 <ip4_frag+0x270>)
 801a3c4:	f240 3225 	movw	r2, #805	; 0x325
 801a3c8:	496c      	ldr	r1, [pc, #432]	; (801a57c <ip4_frag+0x27c>)
 801a3ca:	486b      	ldr	r0, [pc, #428]	; (801a578 <ip4_frag+0x278>)
 801a3cc:	f000 ff52 	bl	801b274 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3d2:	685b      	ldr	r3, [r3, #4]
 801a3d4:	2214      	movs	r2, #20
 801a3d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a3d8:	4618      	mov	r0, r3
 801a3da:	f000 fa1a 	bl	801a812 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3e0:	685b      	ldr	r3, [r3, #4]
 801a3e2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801a3e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a3e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801a3ea:	e064      	b.n	801a4b6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801a3ec:	68fb      	ldr	r3, [r7, #12]
 801a3ee:	895a      	ldrh	r2, [r3, #10]
 801a3f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a3f2:	1ad3      	subs	r3, r2, r3
 801a3f4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	895b      	ldrh	r3, [r3, #10]
 801a3fa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a3fc:	429a      	cmp	r2, r3
 801a3fe:	d906      	bls.n	801a40e <ip4_frag+0x10e>
 801a400:	4b5b      	ldr	r3, [pc, #364]	; (801a570 <ip4_frag+0x270>)
 801a402:	f240 322d 	movw	r2, #813	; 0x32d
 801a406:	495e      	ldr	r1, [pc, #376]	; (801a580 <ip4_frag+0x280>)
 801a408:	485b      	ldr	r0, [pc, #364]	; (801a578 <ip4_frag+0x278>)
 801a40a:	f000 ff33 	bl	801b274 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a40e:	8bfa      	ldrh	r2, [r7, #30]
 801a410:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a414:	4293      	cmp	r3, r2
 801a416:	bf28      	it	cs
 801a418:	4613      	movcs	r3, r2
 801a41a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a41e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a422:	2b00      	cmp	r3, #0
 801a424:	d105      	bne.n	801a432 <ip4_frag+0x132>
        poff = 0;
 801a426:	2300      	movs	r3, #0
 801a428:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a42a:	68fb      	ldr	r3, [r7, #12]
 801a42c:	681b      	ldr	r3, [r3, #0]
 801a42e:	60fb      	str	r3, [r7, #12]
        continue;
 801a430:	e041      	b.n	801a4b6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a432:	f7ff ff0d 	bl	801a250 <ip_frag_alloc_pbuf_custom_ref>
 801a436:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a438:	69bb      	ldr	r3, [r7, #24]
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d103      	bne.n	801a446 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801a43e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a440:	f7f5 fe90 	bl	8010164 <pbuf_free>
        goto memerr;
 801a444:	e08e      	b.n	801a564 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a446:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a448:	68fb      	ldr	r3, [r7, #12]
 801a44a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a44c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a44e:	4413      	add	r3, r2
 801a450:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801a454:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a458:	9201      	str	r2, [sp, #4]
 801a45a:	9300      	str	r3, [sp, #0]
 801a45c:	4603      	mov	r3, r0
 801a45e:	2241      	movs	r2, #65	; 0x41
 801a460:	2000      	movs	r0, #0
 801a462:	f7f5 fcc5 	bl	800fdf0 <pbuf_alloced_custom>
 801a466:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a468:	697b      	ldr	r3, [r7, #20]
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d106      	bne.n	801a47c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a46e:	69b8      	ldr	r0, [r7, #24]
 801a470:	f7ff fef6 	bl	801a260 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a474:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a476:	f7f5 fe75 	bl	8010164 <pbuf_free>
        goto memerr;
 801a47a:	e073      	b.n	801a564 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 801a47c:	68f8      	ldr	r0, [r7, #12]
 801a47e:	f7f5 ff11 	bl	80102a4 <pbuf_ref>
      pcr->original = p;
 801a482:	69bb      	ldr	r3, [r7, #24]
 801a484:	68fa      	ldr	r2, [r7, #12]
 801a486:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a488:	69bb      	ldr	r3, [r7, #24]
 801a48a:	4a3e      	ldr	r2, [pc, #248]	; (801a584 <ip4_frag+0x284>)
 801a48c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a48e:	6979      	ldr	r1, [r7, #20]
 801a490:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a492:	f7f5 ff29 	bl	80102e8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a496:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801a49a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a49e:	1ad3      	subs	r3, r2, r3
 801a4a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801a4a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d004      	beq.n	801a4b6 <ip4_frag+0x1b6>
        poff = 0;
 801a4ac:	2300      	movs	r3, #0
 801a4ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a4b0:	68fb      	ldr	r3, [r7, #12]
 801a4b2:	681b      	ldr	r3, [r3, #0]
 801a4b4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a4b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	d196      	bne.n	801a3ec <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a4be:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a4c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a4c4:	4413      	add	r3, r2
 801a4c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a4c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a4cc:	68bb      	ldr	r3, [r7, #8]
 801a4ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a4d0:	3b14      	subs	r3, #20
 801a4d2:	429a      	cmp	r2, r3
 801a4d4:	bfd4      	ite	le
 801a4d6:	2301      	movle	r3, #1
 801a4d8:	2300      	movgt	r3, #0
 801a4da:	b2db      	uxtb	r3, r3
 801a4dc:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a4de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a4e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a4e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801a4e8:	6a3b      	ldr	r3, [r7, #32]
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	d002      	beq.n	801a4f4 <ip4_frag+0x1f4>
 801a4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	d003      	beq.n	801a4fc <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a4f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a4f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a4fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a4fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a4fe:	4618      	mov	r0, r3
 801a500:	f7f4 fb98 	bl	800ec34 <lwip_htons>
 801a504:	4603      	mov	r3, r0
 801a506:	461a      	mov	r2, r3
 801a508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a50a:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a50c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a50e:	3314      	adds	r3, #20
 801a510:	b29b      	uxth	r3, r3
 801a512:	4618      	mov	r0, r3
 801a514:	f7f4 fb8e 	bl	800ec34 <lwip_htons>
 801a518:	4603      	mov	r3, r0
 801a51a:	461a      	mov	r2, r3
 801a51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a51e:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a522:	2200      	movs	r2, #0
 801a524:	729a      	strb	r2, [r3, #10]
 801a526:	2200      	movs	r2, #0
 801a528:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a52a:	68bb      	ldr	r3, [r7, #8]
 801a52c:	695b      	ldr	r3, [r3, #20]
 801a52e:	687a      	ldr	r2, [r7, #4]
 801a530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a532:	68b8      	ldr	r0, [r7, #8]
 801a534:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a536:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a538:	f7f5 fe14 	bl	8010164 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a53c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a540:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a542:	1ad3      	subs	r3, r2, r3
 801a544:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801a548:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a54c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a54e:	4413      	add	r3, r2
 801a550:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801a554:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a558:	2b00      	cmp	r3, #0
 801a55a:	f47f af1a 	bne.w	801a392 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a55e:	2300      	movs	r3, #0
 801a560:	e002      	b.n	801a568 <ip4_frag+0x268>
      goto memerr;
 801a562:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a564:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a568:	4618      	mov	r0, r3
 801a56a:	3748      	adds	r7, #72	; 0x48
 801a56c:	46bd      	mov	sp, r7
 801a56e:	bd80      	pop	{r7, pc}
 801a570:	08023208 	.word	0x08023208
 801a574:	080233e4 	.word	0x080233e4
 801a578:	08023250 	.word	0x08023250
 801a57c:	08023400 	.word	0x08023400
 801a580:	08023420 	.word	0x08023420
 801a584:	0801a299 	.word	0x0801a299

0801a588 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a588:	b580      	push	{r7, lr}
 801a58a:	b086      	sub	sp, #24
 801a58c:	af00      	add	r7, sp, #0
 801a58e:	6078      	str	r0, [r7, #4]
 801a590:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a592:	230e      	movs	r3, #14
 801a594:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	895b      	ldrh	r3, [r3, #10]
 801a59a:	2b0e      	cmp	r3, #14
 801a59c:	d96e      	bls.n	801a67c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	7bdb      	ldrb	r3, [r3, #15]
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d106      	bne.n	801a5b4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801a5a6:	683b      	ldr	r3, [r7, #0]
 801a5a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a5ac:	3301      	adds	r3, #1
 801a5ae:	b2da      	uxtb	r2, r3
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	685b      	ldr	r3, [r3, #4]
 801a5b8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a5ba:	693b      	ldr	r3, [r7, #16]
 801a5bc:	7b1a      	ldrb	r2, [r3, #12]
 801a5be:	7b5b      	ldrb	r3, [r3, #13]
 801a5c0:	021b      	lsls	r3, r3, #8
 801a5c2:	4313      	orrs	r3, r2
 801a5c4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a5c6:	693b      	ldr	r3, [r7, #16]
 801a5c8:	781b      	ldrb	r3, [r3, #0]
 801a5ca:	f003 0301 	and.w	r3, r3, #1
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	d023      	beq.n	801a61a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a5d2:	693b      	ldr	r3, [r7, #16]
 801a5d4:	781b      	ldrb	r3, [r3, #0]
 801a5d6:	2b01      	cmp	r3, #1
 801a5d8:	d10f      	bne.n	801a5fa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a5da:	693b      	ldr	r3, [r7, #16]
 801a5dc:	785b      	ldrb	r3, [r3, #1]
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	d11b      	bne.n	801a61a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a5e2:	693b      	ldr	r3, [r7, #16]
 801a5e4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a5e6:	2b5e      	cmp	r3, #94	; 0x5e
 801a5e8:	d117      	bne.n	801a61a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	7b5b      	ldrb	r3, [r3, #13]
 801a5ee:	f043 0310 	orr.w	r3, r3, #16
 801a5f2:	b2da      	uxtb	r2, r3
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	735a      	strb	r2, [r3, #13]
 801a5f8:	e00f      	b.n	801a61a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a5fa:	693b      	ldr	r3, [r7, #16]
 801a5fc:	2206      	movs	r2, #6
 801a5fe:	4928      	ldr	r1, [pc, #160]	; (801a6a0 <ethernet_input+0x118>)
 801a600:	4618      	mov	r0, r3
 801a602:	f000 f8f7 	bl	801a7f4 <memcmp>
 801a606:	4603      	mov	r3, r0
 801a608:	2b00      	cmp	r3, #0
 801a60a:	d106      	bne.n	801a61a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	7b5b      	ldrb	r3, [r3, #13]
 801a610:	f043 0308 	orr.w	r3, r3, #8
 801a614:	b2da      	uxtb	r2, r3
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a61a:	89fb      	ldrh	r3, [r7, #14]
 801a61c:	2b08      	cmp	r3, #8
 801a61e:	d003      	beq.n	801a628 <ethernet_input+0xa0>
 801a620:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801a624:	d014      	beq.n	801a650 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a626:	e032      	b.n	801a68e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a628:	683b      	ldr	r3, [r7, #0]
 801a62a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a62e:	f003 0308 	and.w	r3, r3, #8
 801a632:	2b00      	cmp	r3, #0
 801a634:	d024      	beq.n	801a680 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a636:	8afb      	ldrh	r3, [r7, #22]
 801a638:	4619      	mov	r1, r3
 801a63a:	6878      	ldr	r0, [r7, #4]
 801a63c:	f7f5 fd0c 	bl	8010058 <pbuf_remove_header>
 801a640:	4603      	mov	r3, r0
 801a642:	2b00      	cmp	r3, #0
 801a644:	d11e      	bne.n	801a684 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801a646:	6839      	ldr	r1, [r7, #0]
 801a648:	6878      	ldr	r0, [r7, #4]
 801a64a:	f7fe ff0f 	bl	801946c <ip4_input>
      break;
 801a64e:	e013      	b.n	801a678 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a650:	683b      	ldr	r3, [r7, #0]
 801a652:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a656:	f003 0308 	and.w	r3, r3, #8
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	d014      	beq.n	801a688 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a65e:	8afb      	ldrh	r3, [r7, #22]
 801a660:	4619      	mov	r1, r3
 801a662:	6878      	ldr	r0, [r7, #4]
 801a664:	f7f5 fcf8 	bl	8010058 <pbuf_remove_header>
 801a668:	4603      	mov	r3, r0
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	d10e      	bne.n	801a68c <ethernet_input+0x104>
        etharp_input(p, netif);
 801a66e:	6839      	ldr	r1, [r7, #0]
 801a670:	6878      	ldr	r0, [r7, #4]
 801a672:	f7fe f8ab 	bl	80187cc <etharp_input>
      break;
 801a676:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a678:	2300      	movs	r3, #0
 801a67a:	e00c      	b.n	801a696 <ethernet_input+0x10e>
    goto free_and_return;
 801a67c:	bf00      	nop
 801a67e:	e006      	b.n	801a68e <ethernet_input+0x106>
        goto free_and_return;
 801a680:	bf00      	nop
 801a682:	e004      	b.n	801a68e <ethernet_input+0x106>
        goto free_and_return;
 801a684:	bf00      	nop
 801a686:	e002      	b.n	801a68e <ethernet_input+0x106>
        goto free_and_return;
 801a688:	bf00      	nop
 801a68a:	e000      	b.n	801a68e <ethernet_input+0x106>
        goto free_and_return;
 801a68c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a68e:	6878      	ldr	r0, [r7, #4]
 801a690:	f7f5 fd68 	bl	8010164 <pbuf_free>
  return ERR_OK;
 801a694:	2300      	movs	r3, #0
}
 801a696:	4618      	mov	r0, r3
 801a698:	3718      	adds	r7, #24
 801a69a:	46bd      	mov	sp, r7
 801a69c:	bd80      	pop	{r7, pc}
 801a69e:	bf00      	nop
 801a6a0:	08023b24 	.word	0x08023b24

0801a6a4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a6a4:	b580      	push	{r7, lr}
 801a6a6:	b086      	sub	sp, #24
 801a6a8:	af00      	add	r7, sp, #0
 801a6aa:	60f8      	str	r0, [r7, #12]
 801a6ac:	60b9      	str	r1, [r7, #8]
 801a6ae:	607a      	str	r2, [r7, #4]
 801a6b0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a6b2:	8c3b      	ldrh	r3, [r7, #32]
 801a6b4:	4618      	mov	r0, r3
 801a6b6:	f7f4 fabd 	bl	800ec34 <lwip_htons>
 801a6ba:	4603      	mov	r3, r0
 801a6bc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a6be:	210e      	movs	r1, #14
 801a6c0:	68b8      	ldr	r0, [r7, #8]
 801a6c2:	f7f5 fcb9 	bl	8010038 <pbuf_add_header>
 801a6c6:	4603      	mov	r3, r0
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	d125      	bne.n	801a718 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a6cc:	68bb      	ldr	r3, [r7, #8]
 801a6ce:	685b      	ldr	r3, [r3, #4]
 801a6d0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a6d2:	693b      	ldr	r3, [r7, #16]
 801a6d4:	8afa      	ldrh	r2, [r7, #22]
 801a6d6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a6d8:	693b      	ldr	r3, [r7, #16]
 801a6da:	2206      	movs	r2, #6
 801a6dc:	6839      	ldr	r1, [r7, #0]
 801a6de:	4618      	mov	r0, r3
 801a6e0:	f000 f897 	bl	801a812 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a6e4:	693b      	ldr	r3, [r7, #16]
 801a6e6:	3306      	adds	r3, #6
 801a6e8:	2206      	movs	r2, #6
 801a6ea:	6879      	ldr	r1, [r7, #4]
 801a6ec:	4618      	mov	r0, r3
 801a6ee:	f000 f890 	bl	801a812 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a6f2:	68fb      	ldr	r3, [r7, #12]
 801a6f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a6f8:	2b06      	cmp	r3, #6
 801a6fa:	d006      	beq.n	801a70a <ethernet_output+0x66>
 801a6fc:	4b0a      	ldr	r3, [pc, #40]	; (801a728 <ethernet_output+0x84>)
 801a6fe:	f240 1233 	movw	r2, #307	; 0x133
 801a702:	490a      	ldr	r1, [pc, #40]	; (801a72c <ethernet_output+0x88>)
 801a704:	480a      	ldr	r0, [pc, #40]	; (801a730 <ethernet_output+0x8c>)
 801a706:	f000 fdb5 	bl	801b274 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a70a:	68fb      	ldr	r3, [r7, #12]
 801a70c:	699b      	ldr	r3, [r3, #24]
 801a70e:	68b9      	ldr	r1, [r7, #8]
 801a710:	68f8      	ldr	r0, [r7, #12]
 801a712:	4798      	blx	r3
 801a714:	4603      	mov	r3, r0
 801a716:	e002      	b.n	801a71e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a718:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a71a:	f06f 0301 	mvn.w	r3, #1
}
 801a71e:	4618      	mov	r0, r3
 801a720:	3718      	adds	r7, #24
 801a722:	46bd      	mov	sp, r7
 801a724:	bd80      	pop	{r7, pc}
 801a726:	bf00      	nop
 801a728:	08023430 	.word	0x08023430
 801a72c:	08023468 	.word	0x08023468
 801a730:	0802349c 	.word	0x0802349c

0801a734 <atof>:
 801a734:	2100      	movs	r1, #0
 801a736:	f001 bc8b 	b.w	801c050 <strtod>

0801a73a <atoi>:
 801a73a:	220a      	movs	r2, #10
 801a73c:	2100      	movs	r1, #0
 801a73e:	f001 bd17 	b.w	801c170 <strtol>
	...

0801a744 <__libc_init_array>:
 801a744:	b570      	push	{r4, r5, r6, lr}
 801a746:	4e0d      	ldr	r6, [pc, #52]	; (801a77c <__libc_init_array+0x38>)
 801a748:	4c0d      	ldr	r4, [pc, #52]	; (801a780 <__libc_init_array+0x3c>)
 801a74a:	1ba4      	subs	r4, r4, r6
 801a74c:	10a4      	asrs	r4, r4, #2
 801a74e:	2500      	movs	r5, #0
 801a750:	42a5      	cmp	r5, r4
 801a752:	d109      	bne.n	801a768 <__libc_init_array+0x24>
 801a754:	4e0b      	ldr	r6, [pc, #44]	; (801a784 <__libc_init_array+0x40>)
 801a756:	4c0c      	ldr	r4, [pc, #48]	; (801a788 <__libc_init_array+0x44>)
 801a758:	f005 f91e 	bl	801f998 <_init>
 801a75c:	1ba4      	subs	r4, r4, r6
 801a75e:	10a4      	asrs	r4, r4, #2
 801a760:	2500      	movs	r5, #0
 801a762:	42a5      	cmp	r5, r4
 801a764:	d105      	bne.n	801a772 <__libc_init_array+0x2e>
 801a766:	bd70      	pop	{r4, r5, r6, pc}
 801a768:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a76c:	4798      	blx	r3
 801a76e:	3501      	adds	r5, #1
 801a770:	e7ee      	b.n	801a750 <__libc_init_array+0xc>
 801a772:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a776:	4798      	blx	r3
 801a778:	3501      	adds	r5, #1
 801a77a:	e7f2      	b.n	801a762 <__libc_init_array+0x1e>
 801a77c:	08023e98 	.word	0x08023e98
 801a780:	08023e98 	.word	0x08023e98
 801a784:	08023e98 	.word	0x08023e98
 801a788:	08023e9c 	.word	0x08023e9c

0801a78c <__locale_ctype_ptr_l>:
 801a78c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801a790:	4770      	bx	lr
	...

0801a794 <__locale_ctype_ptr>:
 801a794:	4b04      	ldr	r3, [pc, #16]	; (801a7a8 <__locale_ctype_ptr+0x14>)
 801a796:	4a05      	ldr	r2, [pc, #20]	; (801a7ac <__locale_ctype_ptr+0x18>)
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	6a1b      	ldr	r3, [r3, #32]
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	bf08      	it	eq
 801a7a0:	4613      	moveq	r3, r2
 801a7a2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801a7a6:	4770      	bx	lr
 801a7a8:	20000084 	.word	0x20000084
 801a7ac:	200000e8 	.word	0x200000e8

0801a7b0 <malloc>:
 801a7b0:	4b02      	ldr	r3, [pc, #8]	; (801a7bc <malloc+0xc>)
 801a7b2:	4601      	mov	r1, r0
 801a7b4:	6818      	ldr	r0, [r3, #0]
 801a7b6:	f000 b8a7 	b.w	801a908 <_malloc_r>
 801a7ba:	bf00      	nop
 801a7bc:	20000084 	.word	0x20000084

0801a7c0 <free>:
 801a7c0:	4b02      	ldr	r3, [pc, #8]	; (801a7cc <free+0xc>)
 801a7c2:	4601      	mov	r1, r0
 801a7c4:	6818      	ldr	r0, [r3, #0]
 801a7c6:	f000 b851 	b.w	801a86c <_free_r>
 801a7ca:	bf00      	nop
 801a7cc:	20000084 	.word	0x20000084

0801a7d0 <__ascii_mbtowc>:
 801a7d0:	b082      	sub	sp, #8
 801a7d2:	b901      	cbnz	r1, 801a7d6 <__ascii_mbtowc+0x6>
 801a7d4:	a901      	add	r1, sp, #4
 801a7d6:	b142      	cbz	r2, 801a7ea <__ascii_mbtowc+0x1a>
 801a7d8:	b14b      	cbz	r3, 801a7ee <__ascii_mbtowc+0x1e>
 801a7da:	7813      	ldrb	r3, [r2, #0]
 801a7dc:	600b      	str	r3, [r1, #0]
 801a7de:	7812      	ldrb	r2, [r2, #0]
 801a7e0:	1c10      	adds	r0, r2, #0
 801a7e2:	bf18      	it	ne
 801a7e4:	2001      	movne	r0, #1
 801a7e6:	b002      	add	sp, #8
 801a7e8:	4770      	bx	lr
 801a7ea:	4610      	mov	r0, r2
 801a7ec:	e7fb      	b.n	801a7e6 <__ascii_mbtowc+0x16>
 801a7ee:	f06f 0001 	mvn.w	r0, #1
 801a7f2:	e7f8      	b.n	801a7e6 <__ascii_mbtowc+0x16>

0801a7f4 <memcmp>:
 801a7f4:	b530      	push	{r4, r5, lr}
 801a7f6:	2400      	movs	r4, #0
 801a7f8:	42a2      	cmp	r2, r4
 801a7fa:	d101      	bne.n	801a800 <memcmp+0xc>
 801a7fc:	2000      	movs	r0, #0
 801a7fe:	e007      	b.n	801a810 <memcmp+0x1c>
 801a800:	5d03      	ldrb	r3, [r0, r4]
 801a802:	3401      	adds	r4, #1
 801a804:	190d      	adds	r5, r1, r4
 801a806:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801a80a:	42ab      	cmp	r3, r5
 801a80c:	d0f4      	beq.n	801a7f8 <memcmp+0x4>
 801a80e:	1b58      	subs	r0, r3, r5
 801a810:	bd30      	pop	{r4, r5, pc}

0801a812 <memcpy>:
 801a812:	b510      	push	{r4, lr}
 801a814:	1e43      	subs	r3, r0, #1
 801a816:	440a      	add	r2, r1
 801a818:	4291      	cmp	r1, r2
 801a81a:	d100      	bne.n	801a81e <memcpy+0xc>
 801a81c:	bd10      	pop	{r4, pc}
 801a81e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a822:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a826:	e7f7      	b.n	801a818 <memcpy+0x6>

0801a828 <memmove>:
 801a828:	4288      	cmp	r0, r1
 801a82a:	b510      	push	{r4, lr}
 801a82c:	eb01 0302 	add.w	r3, r1, r2
 801a830:	d807      	bhi.n	801a842 <memmove+0x1a>
 801a832:	1e42      	subs	r2, r0, #1
 801a834:	4299      	cmp	r1, r3
 801a836:	d00a      	beq.n	801a84e <memmove+0x26>
 801a838:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a83c:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a840:	e7f8      	b.n	801a834 <memmove+0xc>
 801a842:	4283      	cmp	r3, r0
 801a844:	d9f5      	bls.n	801a832 <memmove+0xa>
 801a846:	1881      	adds	r1, r0, r2
 801a848:	1ad2      	subs	r2, r2, r3
 801a84a:	42d3      	cmn	r3, r2
 801a84c:	d100      	bne.n	801a850 <memmove+0x28>
 801a84e:	bd10      	pop	{r4, pc}
 801a850:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a854:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a858:	e7f7      	b.n	801a84a <memmove+0x22>

0801a85a <memset>:
 801a85a:	4402      	add	r2, r0
 801a85c:	4603      	mov	r3, r0
 801a85e:	4293      	cmp	r3, r2
 801a860:	d100      	bne.n	801a864 <memset+0xa>
 801a862:	4770      	bx	lr
 801a864:	f803 1b01 	strb.w	r1, [r3], #1
 801a868:	e7f9      	b.n	801a85e <memset+0x4>
	...

0801a86c <_free_r>:
 801a86c:	b538      	push	{r3, r4, r5, lr}
 801a86e:	4605      	mov	r5, r0
 801a870:	2900      	cmp	r1, #0
 801a872:	d045      	beq.n	801a900 <_free_r+0x94>
 801a874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a878:	1f0c      	subs	r4, r1, #4
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	bfb8      	it	lt
 801a87e:	18e4      	addlt	r4, r4, r3
 801a880:	f002 fede 	bl	801d640 <__malloc_lock>
 801a884:	4a1f      	ldr	r2, [pc, #124]	; (801a904 <_free_r+0x98>)
 801a886:	6813      	ldr	r3, [r2, #0]
 801a888:	4610      	mov	r0, r2
 801a88a:	b933      	cbnz	r3, 801a89a <_free_r+0x2e>
 801a88c:	6063      	str	r3, [r4, #4]
 801a88e:	6014      	str	r4, [r2, #0]
 801a890:	4628      	mov	r0, r5
 801a892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a896:	f002 bed4 	b.w	801d642 <__malloc_unlock>
 801a89a:	42a3      	cmp	r3, r4
 801a89c:	d90c      	bls.n	801a8b8 <_free_r+0x4c>
 801a89e:	6821      	ldr	r1, [r4, #0]
 801a8a0:	1862      	adds	r2, r4, r1
 801a8a2:	4293      	cmp	r3, r2
 801a8a4:	bf04      	itt	eq
 801a8a6:	681a      	ldreq	r2, [r3, #0]
 801a8a8:	685b      	ldreq	r3, [r3, #4]
 801a8aa:	6063      	str	r3, [r4, #4]
 801a8ac:	bf04      	itt	eq
 801a8ae:	1852      	addeq	r2, r2, r1
 801a8b0:	6022      	streq	r2, [r4, #0]
 801a8b2:	6004      	str	r4, [r0, #0]
 801a8b4:	e7ec      	b.n	801a890 <_free_r+0x24>
 801a8b6:	4613      	mov	r3, r2
 801a8b8:	685a      	ldr	r2, [r3, #4]
 801a8ba:	b10a      	cbz	r2, 801a8c0 <_free_r+0x54>
 801a8bc:	42a2      	cmp	r2, r4
 801a8be:	d9fa      	bls.n	801a8b6 <_free_r+0x4a>
 801a8c0:	6819      	ldr	r1, [r3, #0]
 801a8c2:	1858      	adds	r0, r3, r1
 801a8c4:	42a0      	cmp	r0, r4
 801a8c6:	d10b      	bne.n	801a8e0 <_free_r+0x74>
 801a8c8:	6820      	ldr	r0, [r4, #0]
 801a8ca:	4401      	add	r1, r0
 801a8cc:	1858      	adds	r0, r3, r1
 801a8ce:	4282      	cmp	r2, r0
 801a8d0:	6019      	str	r1, [r3, #0]
 801a8d2:	d1dd      	bne.n	801a890 <_free_r+0x24>
 801a8d4:	6810      	ldr	r0, [r2, #0]
 801a8d6:	6852      	ldr	r2, [r2, #4]
 801a8d8:	605a      	str	r2, [r3, #4]
 801a8da:	4401      	add	r1, r0
 801a8dc:	6019      	str	r1, [r3, #0]
 801a8de:	e7d7      	b.n	801a890 <_free_r+0x24>
 801a8e0:	d902      	bls.n	801a8e8 <_free_r+0x7c>
 801a8e2:	230c      	movs	r3, #12
 801a8e4:	602b      	str	r3, [r5, #0]
 801a8e6:	e7d3      	b.n	801a890 <_free_r+0x24>
 801a8e8:	6820      	ldr	r0, [r4, #0]
 801a8ea:	1821      	adds	r1, r4, r0
 801a8ec:	428a      	cmp	r2, r1
 801a8ee:	bf04      	itt	eq
 801a8f0:	6811      	ldreq	r1, [r2, #0]
 801a8f2:	6852      	ldreq	r2, [r2, #4]
 801a8f4:	6062      	str	r2, [r4, #4]
 801a8f6:	bf04      	itt	eq
 801a8f8:	1809      	addeq	r1, r1, r0
 801a8fa:	6021      	streq	r1, [r4, #0]
 801a8fc:	605c      	str	r4, [r3, #4]
 801a8fe:	e7c7      	b.n	801a890 <_free_r+0x24>
 801a900:	bd38      	pop	{r3, r4, r5, pc}
 801a902:	bf00      	nop
 801a904:	20000620 	.word	0x20000620

0801a908 <_malloc_r>:
 801a908:	b570      	push	{r4, r5, r6, lr}
 801a90a:	1ccd      	adds	r5, r1, #3
 801a90c:	f025 0503 	bic.w	r5, r5, #3
 801a910:	3508      	adds	r5, #8
 801a912:	2d0c      	cmp	r5, #12
 801a914:	bf38      	it	cc
 801a916:	250c      	movcc	r5, #12
 801a918:	2d00      	cmp	r5, #0
 801a91a:	4606      	mov	r6, r0
 801a91c:	db01      	blt.n	801a922 <_malloc_r+0x1a>
 801a91e:	42a9      	cmp	r1, r5
 801a920:	d903      	bls.n	801a92a <_malloc_r+0x22>
 801a922:	230c      	movs	r3, #12
 801a924:	6033      	str	r3, [r6, #0]
 801a926:	2000      	movs	r0, #0
 801a928:	bd70      	pop	{r4, r5, r6, pc}
 801a92a:	f002 fe89 	bl	801d640 <__malloc_lock>
 801a92e:	4a21      	ldr	r2, [pc, #132]	; (801a9b4 <_malloc_r+0xac>)
 801a930:	6814      	ldr	r4, [r2, #0]
 801a932:	4621      	mov	r1, r4
 801a934:	b991      	cbnz	r1, 801a95c <_malloc_r+0x54>
 801a936:	4c20      	ldr	r4, [pc, #128]	; (801a9b8 <_malloc_r+0xb0>)
 801a938:	6823      	ldr	r3, [r4, #0]
 801a93a:	b91b      	cbnz	r3, 801a944 <_malloc_r+0x3c>
 801a93c:	4630      	mov	r0, r6
 801a93e:	f000 fce5 	bl	801b30c <_sbrk_r>
 801a942:	6020      	str	r0, [r4, #0]
 801a944:	4629      	mov	r1, r5
 801a946:	4630      	mov	r0, r6
 801a948:	f000 fce0 	bl	801b30c <_sbrk_r>
 801a94c:	1c43      	adds	r3, r0, #1
 801a94e:	d124      	bne.n	801a99a <_malloc_r+0x92>
 801a950:	230c      	movs	r3, #12
 801a952:	6033      	str	r3, [r6, #0]
 801a954:	4630      	mov	r0, r6
 801a956:	f002 fe74 	bl	801d642 <__malloc_unlock>
 801a95a:	e7e4      	b.n	801a926 <_malloc_r+0x1e>
 801a95c:	680b      	ldr	r3, [r1, #0]
 801a95e:	1b5b      	subs	r3, r3, r5
 801a960:	d418      	bmi.n	801a994 <_malloc_r+0x8c>
 801a962:	2b0b      	cmp	r3, #11
 801a964:	d90f      	bls.n	801a986 <_malloc_r+0x7e>
 801a966:	600b      	str	r3, [r1, #0]
 801a968:	50cd      	str	r5, [r1, r3]
 801a96a:	18cc      	adds	r4, r1, r3
 801a96c:	4630      	mov	r0, r6
 801a96e:	f002 fe68 	bl	801d642 <__malloc_unlock>
 801a972:	f104 000b 	add.w	r0, r4, #11
 801a976:	1d23      	adds	r3, r4, #4
 801a978:	f020 0007 	bic.w	r0, r0, #7
 801a97c:	1ac3      	subs	r3, r0, r3
 801a97e:	d0d3      	beq.n	801a928 <_malloc_r+0x20>
 801a980:	425a      	negs	r2, r3
 801a982:	50e2      	str	r2, [r4, r3]
 801a984:	e7d0      	b.n	801a928 <_malloc_r+0x20>
 801a986:	428c      	cmp	r4, r1
 801a988:	684b      	ldr	r3, [r1, #4]
 801a98a:	bf16      	itet	ne
 801a98c:	6063      	strne	r3, [r4, #4]
 801a98e:	6013      	streq	r3, [r2, #0]
 801a990:	460c      	movne	r4, r1
 801a992:	e7eb      	b.n	801a96c <_malloc_r+0x64>
 801a994:	460c      	mov	r4, r1
 801a996:	6849      	ldr	r1, [r1, #4]
 801a998:	e7cc      	b.n	801a934 <_malloc_r+0x2c>
 801a99a:	1cc4      	adds	r4, r0, #3
 801a99c:	f024 0403 	bic.w	r4, r4, #3
 801a9a0:	42a0      	cmp	r0, r4
 801a9a2:	d005      	beq.n	801a9b0 <_malloc_r+0xa8>
 801a9a4:	1a21      	subs	r1, r4, r0
 801a9a6:	4630      	mov	r0, r6
 801a9a8:	f000 fcb0 	bl	801b30c <_sbrk_r>
 801a9ac:	3001      	adds	r0, #1
 801a9ae:	d0cf      	beq.n	801a950 <_malloc_r+0x48>
 801a9b0:	6025      	str	r5, [r4, #0]
 801a9b2:	e7db      	b.n	801a96c <_malloc_r+0x64>
 801a9b4:	20000620 	.word	0x20000620
 801a9b8:	20000624 	.word	0x20000624

0801a9bc <__cvt>:
 801a9bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a9c0:	ec55 4b10 	vmov	r4, r5, d0
 801a9c4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801a9c6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a9ca:	2d00      	cmp	r5, #0
 801a9cc:	460e      	mov	r6, r1
 801a9ce:	4691      	mov	r9, r2
 801a9d0:	4619      	mov	r1, r3
 801a9d2:	bfb8      	it	lt
 801a9d4:	4622      	movlt	r2, r4
 801a9d6:	462b      	mov	r3, r5
 801a9d8:	f027 0720 	bic.w	r7, r7, #32
 801a9dc:	bfbb      	ittet	lt
 801a9de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a9e2:	461d      	movlt	r5, r3
 801a9e4:	2300      	movge	r3, #0
 801a9e6:	232d      	movlt	r3, #45	; 0x2d
 801a9e8:	bfb8      	it	lt
 801a9ea:	4614      	movlt	r4, r2
 801a9ec:	2f46      	cmp	r7, #70	; 0x46
 801a9ee:	700b      	strb	r3, [r1, #0]
 801a9f0:	d004      	beq.n	801a9fc <__cvt+0x40>
 801a9f2:	2f45      	cmp	r7, #69	; 0x45
 801a9f4:	d100      	bne.n	801a9f8 <__cvt+0x3c>
 801a9f6:	3601      	adds	r6, #1
 801a9f8:	2102      	movs	r1, #2
 801a9fa:	e000      	b.n	801a9fe <__cvt+0x42>
 801a9fc:	2103      	movs	r1, #3
 801a9fe:	ab03      	add	r3, sp, #12
 801aa00:	9301      	str	r3, [sp, #4]
 801aa02:	ab02      	add	r3, sp, #8
 801aa04:	9300      	str	r3, [sp, #0]
 801aa06:	4632      	mov	r2, r6
 801aa08:	4653      	mov	r3, sl
 801aa0a:	ec45 4b10 	vmov	d0, r4, r5
 801aa0e:	f001 fc5f 	bl	801c2d0 <_dtoa_r>
 801aa12:	2f47      	cmp	r7, #71	; 0x47
 801aa14:	4680      	mov	r8, r0
 801aa16:	d102      	bne.n	801aa1e <__cvt+0x62>
 801aa18:	f019 0f01 	tst.w	r9, #1
 801aa1c:	d026      	beq.n	801aa6c <__cvt+0xb0>
 801aa1e:	2f46      	cmp	r7, #70	; 0x46
 801aa20:	eb08 0906 	add.w	r9, r8, r6
 801aa24:	d111      	bne.n	801aa4a <__cvt+0x8e>
 801aa26:	f898 3000 	ldrb.w	r3, [r8]
 801aa2a:	2b30      	cmp	r3, #48	; 0x30
 801aa2c:	d10a      	bne.n	801aa44 <__cvt+0x88>
 801aa2e:	2200      	movs	r2, #0
 801aa30:	2300      	movs	r3, #0
 801aa32:	4620      	mov	r0, r4
 801aa34:	4629      	mov	r1, r5
 801aa36:	f7e6 f857 	bl	8000ae8 <__aeabi_dcmpeq>
 801aa3a:	b918      	cbnz	r0, 801aa44 <__cvt+0x88>
 801aa3c:	f1c6 0601 	rsb	r6, r6, #1
 801aa40:	f8ca 6000 	str.w	r6, [sl]
 801aa44:	f8da 3000 	ldr.w	r3, [sl]
 801aa48:	4499      	add	r9, r3
 801aa4a:	2200      	movs	r2, #0
 801aa4c:	2300      	movs	r3, #0
 801aa4e:	4620      	mov	r0, r4
 801aa50:	4629      	mov	r1, r5
 801aa52:	f7e6 f849 	bl	8000ae8 <__aeabi_dcmpeq>
 801aa56:	b938      	cbnz	r0, 801aa68 <__cvt+0xac>
 801aa58:	2230      	movs	r2, #48	; 0x30
 801aa5a:	9b03      	ldr	r3, [sp, #12]
 801aa5c:	454b      	cmp	r3, r9
 801aa5e:	d205      	bcs.n	801aa6c <__cvt+0xb0>
 801aa60:	1c59      	adds	r1, r3, #1
 801aa62:	9103      	str	r1, [sp, #12]
 801aa64:	701a      	strb	r2, [r3, #0]
 801aa66:	e7f8      	b.n	801aa5a <__cvt+0x9e>
 801aa68:	f8cd 900c 	str.w	r9, [sp, #12]
 801aa6c:	9b03      	ldr	r3, [sp, #12]
 801aa6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801aa70:	eba3 0308 	sub.w	r3, r3, r8
 801aa74:	4640      	mov	r0, r8
 801aa76:	6013      	str	r3, [r2, #0]
 801aa78:	b004      	add	sp, #16
 801aa7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801aa7e <__exponent>:
 801aa7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801aa80:	2900      	cmp	r1, #0
 801aa82:	4604      	mov	r4, r0
 801aa84:	bfba      	itte	lt
 801aa86:	4249      	neglt	r1, r1
 801aa88:	232d      	movlt	r3, #45	; 0x2d
 801aa8a:	232b      	movge	r3, #43	; 0x2b
 801aa8c:	2909      	cmp	r1, #9
 801aa8e:	f804 2b02 	strb.w	r2, [r4], #2
 801aa92:	7043      	strb	r3, [r0, #1]
 801aa94:	dd20      	ble.n	801aad8 <__exponent+0x5a>
 801aa96:	f10d 0307 	add.w	r3, sp, #7
 801aa9a:	461f      	mov	r7, r3
 801aa9c:	260a      	movs	r6, #10
 801aa9e:	fb91 f5f6 	sdiv	r5, r1, r6
 801aaa2:	fb06 1115 	mls	r1, r6, r5, r1
 801aaa6:	3130      	adds	r1, #48	; 0x30
 801aaa8:	2d09      	cmp	r5, #9
 801aaaa:	f803 1c01 	strb.w	r1, [r3, #-1]
 801aaae:	f103 32ff 	add.w	r2, r3, #4294967295
 801aab2:	4629      	mov	r1, r5
 801aab4:	dc09      	bgt.n	801aaca <__exponent+0x4c>
 801aab6:	3130      	adds	r1, #48	; 0x30
 801aab8:	3b02      	subs	r3, #2
 801aaba:	f802 1c01 	strb.w	r1, [r2, #-1]
 801aabe:	42bb      	cmp	r3, r7
 801aac0:	4622      	mov	r2, r4
 801aac2:	d304      	bcc.n	801aace <__exponent+0x50>
 801aac4:	1a10      	subs	r0, r2, r0
 801aac6:	b003      	add	sp, #12
 801aac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aaca:	4613      	mov	r3, r2
 801aacc:	e7e7      	b.n	801aa9e <__exponent+0x20>
 801aace:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aad2:	f804 2b01 	strb.w	r2, [r4], #1
 801aad6:	e7f2      	b.n	801aabe <__exponent+0x40>
 801aad8:	2330      	movs	r3, #48	; 0x30
 801aada:	4419      	add	r1, r3
 801aadc:	7083      	strb	r3, [r0, #2]
 801aade:	1d02      	adds	r2, r0, #4
 801aae0:	70c1      	strb	r1, [r0, #3]
 801aae2:	e7ef      	b.n	801aac4 <__exponent+0x46>

0801aae4 <_printf_float>:
 801aae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aae8:	b08d      	sub	sp, #52	; 0x34
 801aaea:	460c      	mov	r4, r1
 801aaec:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801aaf0:	4616      	mov	r6, r2
 801aaf2:	461f      	mov	r7, r3
 801aaf4:	4605      	mov	r5, r0
 801aaf6:	f002 fd95 	bl	801d624 <_localeconv_r>
 801aafa:	6803      	ldr	r3, [r0, #0]
 801aafc:	9304      	str	r3, [sp, #16]
 801aafe:	4618      	mov	r0, r3
 801ab00:	f7e5 fb70 	bl	80001e4 <strlen>
 801ab04:	2300      	movs	r3, #0
 801ab06:	930a      	str	r3, [sp, #40]	; 0x28
 801ab08:	f8d8 3000 	ldr.w	r3, [r8]
 801ab0c:	9005      	str	r0, [sp, #20]
 801ab0e:	3307      	adds	r3, #7
 801ab10:	f023 0307 	bic.w	r3, r3, #7
 801ab14:	f103 0208 	add.w	r2, r3, #8
 801ab18:	f894 a018 	ldrb.w	sl, [r4, #24]
 801ab1c:	f8d4 b000 	ldr.w	fp, [r4]
 801ab20:	f8c8 2000 	str.w	r2, [r8]
 801ab24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab28:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801ab2c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801ab30:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801ab34:	9307      	str	r3, [sp, #28]
 801ab36:	f8cd 8018 	str.w	r8, [sp, #24]
 801ab3a:	f04f 32ff 	mov.w	r2, #4294967295
 801ab3e:	4ba7      	ldr	r3, [pc, #668]	; (801addc <_printf_float+0x2f8>)
 801ab40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ab44:	f7e6 f802 	bl	8000b4c <__aeabi_dcmpun>
 801ab48:	bb70      	cbnz	r0, 801aba8 <_printf_float+0xc4>
 801ab4a:	f04f 32ff 	mov.w	r2, #4294967295
 801ab4e:	4ba3      	ldr	r3, [pc, #652]	; (801addc <_printf_float+0x2f8>)
 801ab50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ab54:	f7e5 ffdc 	bl	8000b10 <__aeabi_dcmple>
 801ab58:	bb30      	cbnz	r0, 801aba8 <_printf_float+0xc4>
 801ab5a:	2200      	movs	r2, #0
 801ab5c:	2300      	movs	r3, #0
 801ab5e:	4640      	mov	r0, r8
 801ab60:	4649      	mov	r1, r9
 801ab62:	f7e5 ffcb 	bl	8000afc <__aeabi_dcmplt>
 801ab66:	b110      	cbz	r0, 801ab6e <_printf_float+0x8a>
 801ab68:	232d      	movs	r3, #45	; 0x2d
 801ab6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ab6e:	4a9c      	ldr	r2, [pc, #624]	; (801ade0 <_printf_float+0x2fc>)
 801ab70:	4b9c      	ldr	r3, [pc, #624]	; (801ade4 <_printf_float+0x300>)
 801ab72:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801ab76:	bf8c      	ite	hi
 801ab78:	4690      	movhi	r8, r2
 801ab7a:	4698      	movls	r8, r3
 801ab7c:	2303      	movs	r3, #3
 801ab7e:	f02b 0204 	bic.w	r2, fp, #4
 801ab82:	6123      	str	r3, [r4, #16]
 801ab84:	6022      	str	r2, [r4, #0]
 801ab86:	f04f 0900 	mov.w	r9, #0
 801ab8a:	9700      	str	r7, [sp, #0]
 801ab8c:	4633      	mov	r3, r6
 801ab8e:	aa0b      	add	r2, sp, #44	; 0x2c
 801ab90:	4621      	mov	r1, r4
 801ab92:	4628      	mov	r0, r5
 801ab94:	f000 f9e6 	bl	801af64 <_printf_common>
 801ab98:	3001      	adds	r0, #1
 801ab9a:	f040 808d 	bne.w	801acb8 <_printf_float+0x1d4>
 801ab9e:	f04f 30ff 	mov.w	r0, #4294967295
 801aba2:	b00d      	add	sp, #52	; 0x34
 801aba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aba8:	4642      	mov	r2, r8
 801abaa:	464b      	mov	r3, r9
 801abac:	4640      	mov	r0, r8
 801abae:	4649      	mov	r1, r9
 801abb0:	f7e5 ffcc 	bl	8000b4c <__aeabi_dcmpun>
 801abb4:	b110      	cbz	r0, 801abbc <_printf_float+0xd8>
 801abb6:	4a8c      	ldr	r2, [pc, #560]	; (801ade8 <_printf_float+0x304>)
 801abb8:	4b8c      	ldr	r3, [pc, #560]	; (801adec <_printf_float+0x308>)
 801abba:	e7da      	b.n	801ab72 <_printf_float+0x8e>
 801abbc:	6861      	ldr	r1, [r4, #4]
 801abbe:	1c4b      	adds	r3, r1, #1
 801abc0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801abc4:	a80a      	add	r0, sp, #40	; 0x28
 801abc6:	d13e      	bne.n	801ac46 <_printf_float+0x162>
 801abc8:	2306      	movs	r3, #6
 801abca:	6063      	str	r3, [r4, #4]
 801abcc:	2300      	movs	r3, #0
 801abce:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801abd2:	ab09      	add	r3, sp, #36	; 0x24
 801abd4:	9300      	str	r3, [sp, #0]
 801abd6:	ec49 8b10 	vmov	d0, r8, r9
 801abda:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801abde:	6022      	str	r2, [r4, #0]
 801abe0:	f8cd a004 	str.w	sl, [sp, #4]
 801abe4:	6861      	ldr	r1, [r4, #4]
 801abe6:	4628      	mov	r0, r5
 801abe8:	f7ff fee8 	bl	801a9bc <__cvt>
 801abec:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801abf0:	2b47      	cmp	r3, #71	; 0x47
 801abf2:	4680      	mov	r8, r0
 801abf4:	d109      	bne.n	801ac0a <_printf_float+0x126>
 801abf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abf8:	1cd8      	adds	r0, r3, #3
 801abfa:	db02      	blt.n	801ac02 <_printf_float+0x11e>
 801abfc:	6862      	ldr	r2, [r4, #4]
 801abfe:	4293      	cmp	r3, r2
 801ac00:	dd47      	ble.n	801ac92 <_printf_float+0x1ae>
 801ac02:	f1aa 0a02 	sub.w	sl, sl, #2
 801ac06:	fa5f fa8a 	uxtb.w	sl, sl
 801ac0a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801ac0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ac10:	d824      	bhi.n	801ac5c <_printf_float+0x178>
 801ac12:	3901      	subs	r1, #1
 801ac14:	4652      	mov	r2, sl
 801ac16:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801ac1a:	9109      	str	r1, [sp, #36]	; 0x24
 801ac1c:	f7ff ff2f 	bl	801aa7e <__exponent>
 801ac20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ac22:	1813      	adds	r3, r2, r0
 801ac24:	2a01      	cmp	r2, #1
 801ac26:	4681      	mov	r9, r0
 801ac28:	6123      	str	r3, [r4, #16]
 801ac2a:	dc02      	bgt.n	801ac32 <_printf_float+0x14e>
 801ac2c:	6822      	ldr	r2, [r4, #0]
 801ac2e:	07d1      	lsls	r1, r2, #31
 801ac30:	d501      	bpl.n	801ac36 <_printf_float+0x152>
 801ac32:	3301      	adds	r3, #1
 801ac34:	6123      	str	r3, [r4, #16]
 801ac36:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d0a5      	beq.n	801ab8a <_printf_float+0xa6>
 801ac3e:	232d      	movs	r3, #45	; 0x2d
 801ac40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ac44:	e7a1      	b.n	801ab8a <_printf_float+0xa6>
 801ac46:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801ac4a:	f000 8177 	beq.w	801af3c <_printf_float+0x458>
 801ac4e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801ac52:	d1bb      	bne.n	801abcc <_printf_float+0xe8>
 801ac54:	2900      	cmp	r1, #0
 801ac56:	d1b9      	bne.n	801abcc <_printf_float+0xe8>
 801ac58:	2301      	movs	r3, #1
 801ac5a:	e7b6      	b.n	801abca <_printf_float+0xe6>
 801ac5c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801ac60:	d119      	bne.n	801ac96 <_printf_float+0x1b2>
 801ac62:	2900      	cmp	r1, #0
 801ac64:	6863      	ldr	r3, [r4, #4]
 801ac66:	dd0c      	ble.n	801ac82 <_printf_float+0x19e>
 801ac68:	6121      	str	r1, [r4, #16]
 801ac6a:	b913      	cbnz	r3, 801ac72 <_printf_float+0x18e>
 801ac6c:	6822      	ldr	r2, [r4, #0]
 801ac6e:	07d2      	lsls	r2, r2, #31
 801ac70:	d502      	bpl.n	801ac78 <_printf_float+0x194>
 801ac72:	3301      	adds	r3, #1
 801ac74:	440b      	add	r3, r1
 801ac76:	6123      	str	r3, [r4, #16]
 801ac78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac7a:	65a3      	str	r3, [r4, #88]	; 0x58
 801ac7c:	f04f 0900 	mov.w	r9, #0
 801ac80:	e7d9      	b.n	801ac36 <_printf_float+0x152>
 801ac82:	b913      	cbnz	r3, 801ac8a <_printf_float+0x1a6>
 801ac84:	6822      	ldr	r2, [r4, #0]
 801ac86:	07d0      	lsls	r0, r2, #31
 801ac88:	d501      	bpl.n	801ac8e <_printf_float+0x1aa>
 801ac8a:	3302      	adds	r3, #2
 801ac8c:	e7f3      	b.n	801ac76 <_printf_float+0x192>
 801ac8e:	2301      	movs	r3, #1
 801ac90:	e7f1      	b.n	801ac76 <_printf_float+0x192>
 801ac92:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801ac96:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801ac9a:	4293      	cmp	r3, r2
 801ac9c:	db05      	blt.n	801acaa <_printf_float+0x1c6>
 801ac9e:	6822      	ldr	r2, [r4, #0]
 801aca0:	6123      	str	r3, [r4, #16]
 801aca2:	07d1      	lsls	r1, r2, #31
 801aca4:	d5e8      	bpl.n	801ac78 <_printf_float+0x194>
 801aca6:	3301      	adds	r3, #1
 801aca8:	e7e5      	b.n	801ac76 <_printf_float+0x192>
 801acaa:	2b00      	cmp	r3, #0
 801acac:	bfd4      	ite	le
 801acae:	f1c3 0302 	rsble	r3, r3, #2
 801acb2:	2301      	movgt	r3, #1
 801acb4:	4413      	add	r3, r2
 801acb6:	e7de      	b.n	801ac76 <_printf_float+0x192>
 801acb8:	6823      	ldr	r3, [r4, #0]
 801acba:	055a      	lsls	r2, r3, #21
 801acbc:	d407      	bmi.n	801acce <_printf_float+0x1ea>
 801acbe:	6923      	ldr	r3, [r4, #16]
 801acc0:	4642      	mov	r2, r8
 801acc2:	4631      	mov	r1, r6
 801acc4:	4628      	mov	r0, r5
 801acc6:	47b8      	blx	r7
 801acc8:	3001      	adds	r0, #1
 801acca:	d12b      	bne.n	801ad24 <_printf_float+0x240>
 801accc:	e767      	b.n	801ab9e <_printf_float+0xba>
 801acce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801acd2:	f240 80dc 	bls.w	801ae8e <_printf_float+0x3aa>
 801acd6:	2200      	movs	r2, #0
 801acd8:	2300      	movs	r3, #0
 801acda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801acde:	f7e5 ff03 	bl	8000ae8 <__aeabi_dcmpeq>
 801ace2:	2800      	cmp	r0, #0
 801ace4:	d033      	beq.n	801ad4e <_printf_float+0x26a>
 801ace6:	2301      	movs	r3, #1
 801ace8:	4a41      	ldr	r2, [pc, #260]	; (801adf0 <_printf_float+0x30c>)
 801acea:	4631      	mov	r1, r6
 801acec:	4628      	mov	r0, r5
 801acee:	47b8      	blx	r7
 801acf0:	3001      	adds	r0, #1
 801acf2:	f43f af54 	beq.w	801ab9e <_printf_float+0xba>
 801acf6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801acfa:	429a      	cmp	r2, r3
 801acfc:	db02      	blt.n	801ad04 <_printf_float+0x220>
 801acfe:	6823      	ldr	r3, [r4, #0]
 801ad00:	07d8      	lsls	r0, r3, #31
 801ad02:	d50f      	bpl.n	801ad24 <_printf_float+0x240>
 801ad04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ad08:	4631      	mov	r1, r6
 801ad0a:	4628      	mov	r0, r5
 801ad0c:	47b8      	blx	r7
 801ad0e:	3001      	adds	r0, #1
 801ad10:	f43f af45 	beq.w	801ab9e <_printf_float+0xba>
 801ad14:	f04f 0800 	mov.w	r8, #0
 801ad18:	f104 091a 	add.w	r9, r4, #26
 801ad1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad1e:	3b01      	subs	r3, #1
 801ad20:	4543      	cmp	r3, r8
 801ad22:	dc09      	bgt.n	801ad38 <_printf_float+0x254>
 801ad24:	6823      	ldr	r3, [r4, #0]
 801ad26:	079b      	lsls	r3, r3, #30
 801ad28:	f100 8103 	bmi.w	801af32 <_printf_float+0x44e>
 801ad2c:	68e0      	ldr	r0, [r4, #12]
 801ad2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ad30:	4298      	cmp	r0, r3
 801ad32:	bfb8      	it	lt
 801ad34:	4618      	movlt	r0, r3
 801ad36:	e734      	b.n	801aba2 <_printf_float+0xbe>
 801ad38:	2301      	movs	r3, #1
 801ad3a:	464a      	mov	r2, r9
 801ad3c:	4631      	mov	r1, r6
 801ad3e:	4628      	mov	r0, r5
 801ad40:	47b8      	blx	r7
 801ad42:	3001      	adds	r0, #1
 801ad44:	f43f af2b 	beq.w	801ab9e <_printf_float+0xba>
 801ad48:	f108 0801 	add.w	r8, r8, #1
 801ad4c:	e7e6      	b.n	801ad1c <_printf_float+0x238>
 801ad4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	dc2b      	bgt.n	801adac <_printf_float+0x2c8>
 801ad54:	2301      	movs	r3, #1
 801ad56:	4a26      	ldr	r2, [pc, #152]	; (801adf0 <_printf_float+0x30c>)
 801ad58:	4631      	mov	r1, r6
 801ad5a:	4628      	mov	r0, r5
 801ad5c:	47b8      	blx	r7
 801ad5e:	3001      	adds	r0, #1
 801ad60:	f43f af1d 	beq.w	801ab9e <_printf_float+0xba>
 801ad64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad66:	b923      	cbnz	r3, 801ad72 <_printf_float+0x28e>
 801ad68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad6a:	b913      	cbnz	r3, 801ad72 <_printf_float+0x28e>
 801ad6c:	6823      	ldr	r3, [r4, #0]
 801ad6e:	07d9      	lsls	r1, r3, #31
 801ad70:	d5d8      	bpl.n	801ad24 <_printf_float+0x240>
 801ad72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ad76:	4631      	mov	r1, r6
 801ad78:	4628      	mov	r0, r5
 801ad7a:	47b8      	blx	r7
 801ad7c:	3001      	adds	r0, #1
 801ad7e:	f43f af0e 	beq.w	801ab9e <_printf_float+0xba>
 801ad82:	f04f 0900 	mov.w	r9, #0
 801ad86:	f104 0a1a 	add.w	sl, r4, #26
 801ad8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad8c:	425b      	negs	r3, r3
 801ad8e:	454b      	cmp	r3, r9
 801ad90:	dc01      	bgt.n	801ad96 <_printf_float+0x2b2>
 801ad92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad94:	e794      	b.n	801acc0 <_printf_float+0x1dc>
 801ad96:	2301      	movs	r3, #1
 801ad98:	4652      	mov	r2, sl
 801ad9a:	4631      	mov	r1, r6
 801ad9c:	4628      	mov	r0, r5
 801ad9e:	47b8      	blx	r7
 801ada0:	3001      	adds	r0, #1
 801ada2:	f43f aefc 	beq.w	801ab9e <_printf_float+0xba>
 801ada6:	f109 0901 	add.w	r9, r9, #1
 801adaa:	e7ee      	b.n	801ad8a <_printf_float+0x2a6>
 801adac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801adae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801adb0:	429a      	cmp	r2, r3
 801adb2:	bfa8      	it	ge
 801adb4:	461a      	movge	r2, r3
 801adb6:	2a00      	cmp	r2, #0
 801adb8:	4691      	mov	r9, r2
 801adba:	dd07      	ble.n	801adcc <_printf_float+0x2e8>
 801adbc:	4613      	mov	r3, r2
 801adbe:	4631      	mov	r1, r6
 801adc0:	4642      	mov	r2, r8
 801adc2:	4628      	mov	r0, r5
 801adc4:	47b8      	blx	r7
 801adc6:	3001      	adds	r0, #1
 801adc8:	f43f aee9 	beq.w	801ab9e <_printf_float+0xba>
 801adcc:	f104 031a 	add.w	r3, r4, #26
 801add0:	f04f 0b00 	mov.w	fp, #0
 801add4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801add8:	9306      	str	r3, [sp, #24]
 801adda:	e015      	b.n	801ae08 <_printf_float+0x324>
 801addc:	7fefffff 	.word	0x7fefffff
 801ade0:	08023b46 	.word	0x08023b46
 801ade4:	08023b42 	.word	0x08023b42
 801ade8:	08023b4e 	.word	0x08023b4e
 801adec:	08023b4a 	.word	0x08023b4a
 801adf0:	08023b52 	.word	0x08023b52
 801adf4:	2301      	movs	r3, #1
 801adf6:	9a06      	ldr	r2, [sp, #24]
 801adf8:	4631      	mov	r1, r6
 801adfa:	4628      	mov	r0, r5
 801adfc:	47b8      	blx	r7
 801adfe:	3001      	adds	r0, #1
 801ae00:	f43f aecd 	beq.w	801ab9e <_printf_float+0xba>
 801ae04:	f10b 0b01 	add.w	fp, fp, #1
 801ae08:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801ae0c:	ebaa 0309 	sub.w	r3, sl, r9
 801ae10:	455b      	cmp	r3, fp
 801ae12:	dcef      	bgt.n	801adf4 <_printf_float+0x310>
 801ae14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ae18:	429a      	cmp	r2, r3
 801ae1a:	44d0      	add	r8, sl
 801ae1c:	db15      	blt.n	801ae4a <_printf_float+0x366>
 801ae1e:	6823      	ldr	r3, [r4, #0]
 801ae20:	07da      	lsls	r2, r3, #31
 801ae22:	d412      	bmi.n	801ae4a <_printf_float+0x366>
 801ae24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae26:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ae28:	eba3 020a 	sub.w	r2, r3, sl
 801ae2c:	eba3 0a01 	sub.w	sl, r3, r1
 801ae30:	4592      	cmp	sl, r2
 801ae32:	bfa8      	it	ge
 801ae34:	4692      	movge	sl, r2
 801ae36:	f1ba 0f00 	cmp.w	sl, #0
 801ae3a:	dc0e      	bgt.n	801ae5a <_printf_float+0x376>
 801ae3c:	f04f 0800 	mov.w	r8, #0
 801ae40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ae44:	f104 091a 	add.w	r9, r4, #26
 801ae48:	e019      	b.n	801ae7e <_printf_float+0x39a>
 801ae4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ae4e:	4631      	mov	r1, r6
 801ae50:	4628      	mov	r0, r5
 801ae52:	47b8      	blx	r7
 801ae54:	3001      	adds	r0, #1
 801ae56:	d1e5      	bne.n	801ae24 <_printf_float+0x340>
 801ae58:	e6a1      	b.n	801ab9e <_printf_float+0xba>
 801ae5a:	4653      	mov	r3, sl
 801ae5c:	4642      	mov	r2, r8
 801ae5e:	4631      	mov	r1, r6
 801ae60:	4628      	mov	r0, r5
 801ae62:	47b8      	blx	r7
 801ae64:	3001      	adds	r0, #1
 801ae66:	d1e9      	bne.n	801ae3c <_printf_float+0x358>
 801ae68:	e699      	b.n	801ab9e <_printf_float+0xba>
 801ae6a:	2301      	movs	r3, #1
 801ae6c:	464a      	mov	r2, r9
 801ae6e:	4631      	mov	r1, r6
 801ae70:	4628      	mov	r0, r5
 801ae72:	47b8      	blx	r7
 801ae74:	3001      	adds	r0, #1
 801ae76:	f43f ae92 	beq.w	801ab9e <_printf_float+0xba>
 801ae7a:	f108 0801 	add.w	r8, r8, #1
 801ae7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ae82:	1a9b      	subs	r3, r3, r2
 801ae84:	eba3 030a 	sub.w	r3, r3, sl
 801ae88:	4543      	cmp	r3, r8
 801ae8a:	dcee      	bgt.n	801ae6a <_printf_float+0x386>
 801ae8c:	e74a      	b.n	801ad24 <_printf_float+0x240>
 801ae8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ae90:	2a01      	cmp	r2, #1
 801ae92:	dc01      	bgt.n	801ae98 <_printf_float+0x3b4>
 801ae94:	07db      	lsls	r3, r3, #31
 801ae96:	d53a      	bpl.n	801af0e <_printf_float+0x42a>
 801ae98:	2301      	movs	r3, #1
 801ae9a:	4642      	mov	r2, r8
 801ae9c:	4631      	mov	r1, r6
 801ae9e:	4628      	mov	r0, r5
 801aea0:	47b8      	blx	r7
 801aea2:	3001      	adds	r0, #1
 801aea4:	f43f ae7b 	beq.w	801ab9e <_printf_float+0xba>
 801aea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aeac:	4631      	mov	r1, r6
 801aeae:	4628      	mov	r0, r5
 801aeb0:	47b8      	blx	r7
 801aeb2:	3001      	adds	r0, #1
 801aeb4:	f108 0801 	add.w	r8, r8, #1
 801aeb8:	f43f ae71 	beq.w	801ab9e <_printf_float+0xba>
 801aebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aebe:	2200      	movs	r2, #0
 801aec0:	f103 3aff 	add.w	sl, r3, #4294967295
 801aec4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801aec8:	2300      	movs	r3, #0
 801aeca:	f7e5 fe0d 	bl	8000ae8 <__aeabi_dcmpeq>
 801aece:	b9c8      	cbnz	r0, 801af04 <_printf_float+0x420>
 801aed0:	4653      	mov	r3, sl
 801aed2:	4642      	mov	r2, r8
 801aed4:	4631      	mov	r1, r6
 801aed6:	4628      	mov	r0, r5
 801aed8:	47b8      	blx	r7
 801aeda:	3001      	adds	r0, #1
 801aedc:	d10e      	bne.n	801aefc <_printf_float+0x418>
 801aede:	e65e      	b.n	801ab9e <_printf_float+0xba>
 801aee0:	2301      	movs	r3, #1
 801aee2:	4652      	mov	r2, sl
 801aee4:	4631      	mov	r1, r6
 801aee6:	4628      	mov	r0, r5
 801aee8:	47b8      	blx	r7
 801aeea:	3001      	adds	r0, #1
 801aeec:	f43f ae57 	beq.w	801ab9e <_printf_float+0xba>
 801aef0:	f108 0801 	add.w	r8, r8, #1
 801aef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aef6:	3b01      	subs	r3, #1
 801aef8:	4543      	cmp	r3, r8
 801aefa:	dcf1      	bgt.n	801aee0 <_printf_float+0x3fc>
 801aefc:	464b      	mov	r3, r9
 801aefe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801af02:	e6de      	b.n	801acc2 <_printf_float+0x1de>
 801af04:	f04f 0800 	mov.w	r8, #0
 801af08:	f104 0a1a 	add.w	sl, r4, #26
 801af0c:	e7f2      	b.n	801aef4 <_printf_float+0x410>
 801af0e:	2301      	movs	r3, #1
 801af10:	e7df      	b.n	801aed2 <_printf_float+0x3ee>
 801af12:	2301      	movs	r3, #1
 801af14:	464a      	mov	r2, r9
 801af16:	4631      	mov	r1, r6
 801af18:	4628      	mov	r0, r5
 801af1a:	47b8      	blx	r7
 801af1c:	3001      	adds	r0, #1
 801af1e:	f43f ae3e 	beq.w	801ab9e <_printf_float+0xba>
 801af22:	f108 0801 	add.w	r8, r8, #1
 801af26:	68e3      	ldr	r3, [r4, #12]
 801af28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801af2a:	1a9b      	subs	r3, r3, r2
 801af2c:	4543      	cmp	r3, r8
 801af2e:	dcf0      	bgt.n	801af12 <_printf_float+0x42e>
 801af30:	e6fc      	b.n	801ad2c <_printf_float+0x248>
 801af32:	f04f 0800 	mov.w	r8, #0
 801af36:	f104 0919 	add.w	r9, r4, #25
 801af3a:	e7f4      	b.n	801af26 <_printf_float+0x442>
 801af3c:	2900      	cmp	r1, #0
 801af3e:	f43f ae8b 	beq.w	801ac58 <_printf_float+0x174>
 801af42:	2300      	movs	r3, #0
 801af44:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801af48:	ab09      	add	r3, sp, #36	; 0x24
 801af4a:	9300      	str	r3, [sp, #0]
 801af4c:	ec49 8b10 	vmov	d0, r8, r9
 801af50:	6022      	str	r2, [r4, #0]
 801af52:	f8cd a004 	str.w	sl, [sp, #4]
 801af56:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801af5a:	4628      	mov	r0, r5
 801af5c:	f7ff fd2e 	bl	801a9bc <__cvt>
 801af60:	4680      	mov	r8, r0
 801af62:	e648      	b.n	801abf6 <_printf_float+0x112>

0801af64 <_printf_common>:
 801af64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af68:	4691      	mov	r9, r2
 801af6a:	461f      	mov	r7, r3
 801af6c:	688a      	ldr	r2, [r1, #8]
 801af6e:	690b      	ldr	r3, [r1, #16]
 801af70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801af74:	4293      	cmp	r3, r2
 801af76:	bfb8      	it	lt
 801af78:	4613      	movlt	r3, r2
 801af7a:	f8c9 3000 	str.w	r3, [r9]
 801af7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801af82:	4606      	mov	r6, r0
 801af84:	460c      	mov	r4, r1
 801af86:	b112      	cbz	r2, 801af8e <_printf_common+0x2a>
 801af88:	3301      	adds	r3, #1
 801af8a:	f8c9 3000 	str.w	r3, [r9]
 801af8e:	6823      	ldr	r3, [r4, #0]
 801af90:	0699      	lsls	r1, r3, #26
 801af92:	bf42      	ittt	mi
 801af94:	f8d9 3000 	ldrmi.w	r3, [r9]
 801af98:	3302      	addmi	r3, #2
 801af9a:	f8c9 3000 	strmi.w	r3, [r9]
 801af9e:	6825      	ldr	r5, [r4, #0]
 801afa0:	f015 0506 	ands.w	r5, r5, #6
 801afa4:	d107      	bne.n	801afb6 <_printf_common+0x52>
 801afa6:	f104 0a19 	add.w	sl, r4, #25
 801afaa:	68e3      	ldr	r3, [r4, #12]
 801afac:	f8d9 2000 	ldr.w	r2, [r9]
 801afb0:	1a9b      	subs	r3, r3, r2
 801afb2:	42ab      	cmp	r3, r5
 801afb4:	dc28      	bgt.n	801b008 <_printf_common+0xa4>
 801afb6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801afba:	6822      	ldr	r2, [r4, #0]
 801afbc:	3300      	adds	r3, #0
 801afbe:	bf18      	it	ne
 801afc0:	2301      	movne	r3, #1
 801afc2:	0692      	lsls	r2, r2, #26
 801afc4:	d42d      	bmi.n	801b022 <_printf_common+0xbe>
 801afc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801afca:	4639      	mov	r1, r7
 801afcc:	4630      	mov	r0, r6
 801afce:	47c0      	blx	r8
 801afd0:	3001      	adds	r0, #1
 801afd2:	d020      	beq.n	801b016 <_printf_common+0xb2>
 801afd4:	6823      	ldr	r3, [r4, #0]
 801afd6:	68e5      	ldr	r5, [r4, #12]
 801afd8:	f8d9 2000 	ldr.w	r2, [r9]
 801afdc:	f003 0306 	and.w	r3, r3, #6
 801afe0:	2b04      	cmp	r3, #4
 801afe2:	bf08      	it	eq
 801afe4:	1aad      	subeq	r5, r5, r2
 801afe6:	68a3      	ldr	r3, [r4, #8]
 801afe8:	6922      	ldr	r2, [r4, #16]
 801afea:	bf0c      	ite	eq
 801afec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801aff0:	2500      	movne	r5, #0
 801aff2:	4293      	cmp	r3, r2
 801aff4:	bfc4      	itt	gt
 801aff6:	1a9b      	subgt	r3, r3, r2
 801aff8:	18ed      	addgt	r5, r5, r3
 801affa:	f04f 0900 	mov.w	r9, #0
 801affe:	341a      	adds	r4, #26
 801b000:	454d      	cmp	r5, r9
 801b002:	d11a      	bne.n	801b03a <_printf_common+0xd6>
 801b004:	2000      	movs	r0, #0
 801b006:	e008      	b.n	801b01a <_printf_common+0xb6>
 801b008:	2301      	movs	r3, #1
 801b00a:	4652      	mov	r2, sl
 801b00c:	4639      	mov	r1, r7
 801b00e:	4630      	mov	r0, r6
 801b010:	47c0      	blx	r8
 801b012:	3001      	adds	r0, #1
 801b014:	d103      	bne.n	801b01e <_printf_common+0xba>
 801b016:	f04f 30ff 	mov.w	r0, #4294967295
 801b01a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b01e:	3501      	adds	r5, #1
 801b020:	e7c3      	b.n	801afaa <_printf_common+0x46>
 801b022:	18e1      	adds	r1, r4, r3
 801b024:	1c5a      	adds	r2, r3, #1
 801b026:	2030      	movs	r0, #48	; 0x30
 801b028:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b02c:	4422      	add	r2, r4
 801b02e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b032:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b036:	3302      	adds	r3, #2
 801b038:	e7c5      	b.n	801afc6 <_printf_common+0x62>
 801b03a:	2301      	movs	r3, #1
 801b03c:	4622      	mov	r2, r4
 801b03e:	4639      	mov	r1, r7
 801b040:	4630      	mov	r0, r6
 801b042:	47c0      	blx	r8
 801b044:	3001      	adds	r0, #1
 801b046:	d0e6      	beq.n	801b016 <_printf_common+0xb2>
 801b048:	f109 0901 	add.w	r9, r9, #1
 801b04c:	e7d8      	b.n	801b000 <_printf_common+0x9c>
	...

0801b050 <_printf_i>:
 801b050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b054:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801b058:	460c      	mov	r4, r1
 801b05a:	7e09      	ldrb	r1, [r1, #24]
 801b05c:	b085      	sub	sp, #20
 801b05e:	296e      	cmp	r1, #110	; 0x6e
 801b060:	4617      	mov	r7, r2
 801b062:	4606      	mov	r6, r0
 801b064:	4698      	mov	r8, r3
 801b066:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b068:	f000 80b3 	beq.w	801b1d2 <_printf_i+0x182>
 801b06c:	d822      	bhi.n	801b0b4 <_printf_i+0x64>
 801b06e:	2963      	cmp	r1, #99	; 0x63
 801b070:	d036      	beq.n	801b0e0 <_printf_i+0x90>
 801b072:	d80a      	bhi.n	801b08a <_printf_i+0x3a>
 801b074:	2900      	cmp	r1, #0
 801b076:	f000 80b9 	beq.w	801b1ec <_printf_i+0x19c>
 801b07a:	2958      	cmp	r1, #88	; 0x58
 801b07c:	f000 8083 	beq.w	801b186 <_printf_i+0x136>
 801b080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b084:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801b088:	e032      	b.n	801b0f0 <_printf_i+0xa0>
 801b08a:	2964      	cmp	r1, #100	; 0x64
 801b08c:	d001      	beq.n	801b092 <_printf_i+0x42>
 801b08e:	2969      	cmp	r1, #105	; 0x69
 801b090:	d1f6      	bne.n	801b080 <_printf_i+0x30>
 801b092:	6820      	ldr	r0, [r4, #0]
 801b094:	6813      	ldr	r3, [r2, #0]
 801b096:	0605      	lsls	r5, r0, #24
 801b098:	f103 0104 	add.w	r1, r3, #4
 801b09c:	d52a      	bpl.n	801b0f4 <_printf_i+0xa4>
 801b09e:	681b      	ldr	r3, [r3, #0]
 801b0a0:	6011      	str	r1, [r2, #0]
 801b0a2:	2b00      	cmp	r3, #0
 801b0a4:	da03      	bge.n	801b0ae <_printf_i+0x5e>
 801b0a6:	222d      	movs	r2, #45	; 0x2d
 801b0a8:	425b      	negs	r3, r3
 801b0aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801b0ae:	486f      	ldr	r0, [pc, #444]	; (801b26c <_printf_i+0x21c>)
 801b0b0:	220a      	movs	r2, #10
 801b0b2:	e039      	b.n	801b128 <_printf_i+0xd8>
 801b0b4:	2973      	cmp	r1, #115	; 0x73
 801b0b6:	f000 809d 	beq.w	801b1f4 <_printf_i+0x1a4>
 801b0ba:	d808      	bhi.n	801b0ce <_printf_i+0x7e>
 801b0bc:	296f      	cmp	r1, #111	; 0x6f
 801b0be:	d020      	beq.n	801b102 <_printf_i+0xb2>
 801b0c0:	2970      	cmp	r1, #112	; 0x70
 801b0c2:	d1dd      	bne.n	801b080 <_printf_i+0x30>
 801b0c4:	6823      	ldr	r3, [r4, #0]
 801b0c6:	f043 0320 	orr.w	r3, r3, #32
 801b0ca:	6023      	str	r3, [r4, #0]
 801b0cc:	e003      	b.n	801b0d6 <_printf_i+0x86>
 801b0ce:	2975      	cmp	r1, #117	; 0x75
 801b0d0:	d017      	beq.n	801b102 <_printf_i+0xb2>
 801b0d2:	2978      	cmp	r1, #120	; 0x78
 801b0d4:	d1d4      	bne.n	801b080 <_printf_i+0x30>
 801b0d6:	2378      	movs	r3, #120	; 0x78
 801b0d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b0dc:	4864      	ldr	r0, [pc, #400]	; (801b270 <_printf_i+0x220>)
 801b0de:	e055      	b.n	801b18c <_printf_i+0x13c>
 801b0e0:	6813      	ldr	r3, [r2, #0]
 801b0e2:	1d19      	adds	r1, r3, #4
 801b0e4:	681b      	ldr	r3, [r3, #0]
 801b0e6:	6011      	str	r1, [r2, #0]
 801b0e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b0ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b0f0:	2301      	movs	r3, #1
 801b0f2:	e08c      	b.n	801b20e <_printf_i+0x1be>
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	6011      	str	r1, [r2, #0]
 801b0f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b0fc:	bf18      	it	ne
 801b0fe:	b21b      	sxthne	r3, r3
 801b100:	e7cf      	b.n	801b0a2 <_printf_i+0x52>
 801b102:	6813      	ldr	r3, [r2, #0]
 801b104:	6825      	ldr	r5, [r4, #0]
 801b106:	1d18      	adds	r0, r3, #4
 801b108:	6010      	str	r0, [r2, #0]
 801b10a:	0628      	lsls	r0, r5, #24
 801b10c:	d501      	bpl.n	801b112 <_printf_i+0xc2>
 801b10e:	681b      	ldr	r3, [r3, #0]
 801b110:	e002      	b.n	801b118 <_printf_i+0xc8>
 801b112:	0668      	lsls	r0, r5, #25
 801b114:	d5fb      	bpl.n	801b10e <_printf_i+0xbe>
 801b116:	881b      	ldrh	r3, [r3, #0]
 801b118:	4854      	ldr	r0, [pc, #336]	; (801b26c <_printf_i+0x21c>)
 801b11a:	296f      	cmp	r1, #111	; 0x6f
 801b11c:	bf14      	ite	ne
 801b11e:	220a      	movne	r2, #10
 801b120:	2208      	moveq	r2, #8
 801b122:	2100      	movs	r1, #0
 801b124:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b128:	6865      	ldr	r5, [r4, #4]
 801b12a:	60a5      	str	r5, [r4, #8]
 801b12c:	2d00      	cmp	r5, #0
 801b12e:	f2c0 8095 	blt.w	801b25c <_printf_i+0x20c>
 801b132:	6821      	ldr	r1, [r4, #0]
 801b134:	f021 0104 	bic.w	r1, r1, #4
 801b138:	6021      	str	r1, [r4, #0]
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d13d      	bne.n	801b1ba <_printf_i+0x16a>
 801b13e:	2d00      	cmp	r5, #0
 801b140:	f040 808e 	bne.w	801b260 <_printf_i+0x210>
 801b144:	4665      	mov	r5, ip
 801b146:	2a08      	cmp	r2, #8
 801b148:	d10b      	bne.n	801b162 <_printf_i+0x112>
 801b14a:	6823      	ldr	r3, [r4, #0]
 801b14c:	07db      	lsls	r3, r3, #31
 801b14e:	d508      	bpl.n	801b162 <_printf_i+0x112>
 801b150:	6923      	ldr	r3, [r4, #16]
 801b152:	6862      	ldr	r2, [r4, #4]
 801b154:	429a      	cmp	r2, r3
 801b156:	bfde      	ittt	le
 801b158:	2330      	movle	r3, #48	; 0x30
 801b15a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b15e:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b162:	ebac 0305 	sub.w	r3, ip, r5
 801b166:	6123      	str	r3, [r4, #16]
 801b168:	f8cd 8000 	str.w	r8, [sp]
 801b16c:	463b      	mov	r3, r7
 801b16e:	aa03      	add	r2, sp, #12
 801b170:	4621      	mov	r1, r4
 801b172:	4630      	mov	r0, r6
 801b174:	f7ff fef6 	bl	801af64 <_printf_common>
 801b178:	3001      	adds	r0, #1
 801b17a:	d14d      	bne.n	801b218 <_printf_i+0x1c8>
 801b17c:	f04f 30ff 	mov.w	r0, #4294967295
 801b180:	b005      	add	sp, #20
 801b182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b186:	4839      	ldr	r0, [pc, #228]	; (801b26c <_printf_i+0x21c>)
 801b188:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801b18c:	6813      	ldr	r3, [r2, #0]
 801b18e:	6821      	ldr	r1, [r4, #0]
 801b190:	1d1d      	adds	r5, r3, #4
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	6015      	str	r5, [r2, #0]
 801b196:	060a      	lsls	r2, r1, #24
 801b198:	d50b      	bpl.n	801b1b2 <_printf_i+0x162>
 801b19a:	07ca      	lsls	r2, r1, #31
 801b19c:	bf44      	itt	mi
 801b19e:	f041 0120 	orrmi.w	r1, r1, #32
 801b1a2:	6021      	strmi	r1, [r4, #0]
 801b1a4:	b91b      	cbnz	r3, 801b1ae <_printf_i+0x15e>
 801b1a6:	6822      	ldr	r2, [r4, #0]
 801b1a8:	f022 0220 	bic.w	r2, r2, #32
 801b1ac:	6022      	str	r2, [r4, #0]
 801b1ae:	2210      	movs	r2, #16
 801b1b0:	e7b7      	b.n	801b122 <_printf_i+0xd2>
 801b1b2:	064d      	lsls	r5, r1, #25
 801b1b4:	bf48      	it	mi
 801b1b6:	b29b      	uxthmi	r3, r3
 801b1b8:	e7ef      	b.n	801b19a <_printf_i+0x14a>
 801b1ba:	4665      	mov	r5, ip
 801b1bc:	fbb3 f1f2 	udiv	r1, r3, r2
 801b1c0:	fb02 3311 	mls	r3, r2, r1, r3
 801b1c4:	5cc3      	ldrb	r3, [r0, r3]
 801b1c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801b1ca:	460b      	mov	r3, r1
 801b1cc:	2900      	cmp	r1, #0
 801b1ce:	d1f5      	bne.n	801b1bc <_printf_i+0x16c>
 801b1d0:	e7b9      	b.n	801b146 <_printf_i+0xf6>
 801b1d2:	6813      	ldr	r3, [r2, #0]
 801b1d4:	6825      	ldr	r5, [r4, #0]
 801b1d6:	6961      	ldr	r1, [r4, #20]
 801b1d8:	1d18      	adds	r0, r3, #4
 801b1da:	6010      	str	r0, [r2, #0]
 801b1dc:	0628      	lsls	r0, r5, #24
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	d501      	bpl.n	801b1e6 <_printf_i+0x196>
 801b1e2:	6019      	str	r1, [r3, #0]
 801b1e4:	e002      	b.n	801b1ec <_printf_i+0x19c>
 801b1e6:	066a      	lsls	r2, r5, #25
 801b1e8:	d5fb      	bpl.n	801b1e2 <_printf_i+0x192>
 801b1ea:	8019      	strh	r1, [r3, #0]
 801b1ec:	2300      	movs	r3, #0
 801b1ee:	6123      	str	r3, [r4, #16]
 801b1f0:	4665      	mov	r5, ip
 801b1f2:	e7b9      	b.n	801b168 <_printf_i+0x118>
 801b1f4:	6813      	ldr	r3, [r2, #0]
 801b1f6:	1d19      	adds	r1, r3, #4
 801b1f8:	6011      	str	r1, [r2, #0]
 801b1fa:	681d      	ldr	r5, [r3, #0]
 801b1fc:	6862      	ldr	r2, [r4, #4]
 801b1fe:	2100      	movs	r1, #0
 801b200:	4628      	mov	r0, r5
 801b202:	f7e4 fffd 	bl	8000200 <memchr>
 801b206:	b108      	cbz	r0, 801b20c <_printf_i+0x1bc>
 801b208:	1b40      	subs	r0, r0, r5
 801b20a:	6060      	str	r0, [r4, #4]
 801b20c:	6863      	ldr	r3, [r4, #4]
 801b20e:	6123      	str	r3, [r4, #16]
 801b210:	2300      	movs	r3, #0
 801b212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b216:	e7a7      	b.n	801b168 <_printf_i+0x118>
 801b218:	6923      	ldr	r3, [r4, #16]
 801b21a:	462a      	mov	r2, r5
 801b21c:	4639      	mov	r1, r7
 801b21e:	4630      	mov	r0, r6
 801b220:	47c0      	blx	r8
 801b222:	3001      	adds	r0, #1
 801b224:	d0aa      	beq.n	801b17c <_printf_i+0x12c>
 801b226:	6823      	ldr	r3, [r4, #0]
 801b228:	079b      	lsls	r3, r3, #30
 801b22a:	d413      	bmi.n	801b254 <_printf_i+0x204>
 801b22c:	68e0      	ldr	r0, [r4, #12]
 801b22e:	9b03      	ldr	r3, [sp, #12]
 801b230:	4298      	cmp	r0, r3
 801b232:	bfb8      	it	lt
 801b234:	4618      	movlt	r0, r3
 801b236:	e7a3      	b.n	801b180 <_printf_i+0x130>
 801b238:	2301      	movs	r3, #1
 801b23a:	464a      	mov	r2, r9
 801b23c:	4639      	mov	r1, r7
 801b23e:	4630      	mov	r0, r6
 801b240:	47c0      	blx	r8
 801b242:	3001      	adds	r0, #1
 801b244:	d09a      	beq.n	801b17c <_printf_i+0x12c>
 801b246:	3501      	adds	r5, #1
 801b248:	68e3      	ldr	r3, [r4, #12]
 801b24a:	9a03      	ldr	r2, [sp, #12]
 801b24c:	1a9b      	subs	r3, r3, r2
 801b24e:	42ab      	cmp	r3, r5
 801b250:	dcf2      	bgt.n	801b238 <_printf_i+0x1e8>
 801b252:	e7eb      	b.n	801b22c <_printf_i+0x1dc>
 801b254:	2500      	movs	r5, #0
 801b256:	f104 0919 	add.w	r9, r4, #25
 801b25a:	e7f5      	b.n	801b248 <_printf_i+0x1f8>
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	d1ac      	bne.n	801b1ba <_printf_i+0x16a>
 801b260:	7803      	ldrb	r3, [r0, #0]
 801b262:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b266:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b26a:	e76c      	b.n	801b146 <_printf_i+0xf6>
 801b26c:	08023b54 	.word	0x08023b54
 801b270:	08023b65 	.word	0x08023b65

0801b274 <iprintf>:
 801b274:	b40f      	push	{r0, r1, r2, r3}
 801b276:	4b0a      	ldr	r3, [pc, #40]	; (801b2a0 <iprintf+0x2c>)
 801b278:	b513      	push	{r0, r1, r4, lr}
 801b27a:	681c      	ldr	r4, [r3, #0]
 801b27c:	b124      	cbz	r4, 801b288 <iprintf+0x14>
 801b27e:	69a3      	ldr	r3, [r4, #24]
 801b280:	b913      	cbnz	r3, 801b288 <iprintf+0x14>
 801b282:	4620      	mov	r0, r4
 801b284:	f001 fe1c 	bl	801cec0 <__sinit>
 801b288:	ab05      	add	r3, sp, #20
 801b28a:	9a04      	ldr	r2, [sp, #16]
 801b28c:	68a1      	ldr	r1, [r4, #8]
 801b28e:	9301      	str	r3, [sp, #4]
 801b290:	4620      	mov	r0, r4
 801b292:	f002 ff61 	bl	801e158 <_vfiprintf_r>
 801b296:	b002      	add	sp, #8
 801b298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b29c:	b004      	add	sp, #16
 801b29e:	4770      	bx	lr
 801b2a0:	20000084 	.word	0x20000084

0801b2a4 <rand>:
 801b2a4:	b538      	push	{r3, r4, r5, lr}
 801b2a6:	4b13      	ldr	r3, [pc, #76]	; (801b2f4 <rand+0x50>)
 801b2a8:	681c      	ldr	r4, [r3, #0]
 801b2aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b2ac:	b97b      	cbnz	r3, 801b2ce <rand+0x2a>
 801b2ae:	2018      	movs	r0, #24
 801b2b0:	f7ff fa7e 	bl	801a7b0 <malloc>
 801b2b4:	4a10      	ldr	r2, [pc, #64]	; (801b2f8 <rand+0x54>)
 801b2b6:	4b11      	ldr	r3, [pc, #68]	; (801b2fc <rand+0x58>)
 801b2b8:	63a0      	str	r0, [r4, #56]	; 0x38
 801b2ba:	e9c0 2300 	strd	r2, r3, [r0]
 801b2be:	4b10      	ldr	r3, [pc, #64]	; (801b300 <rand+0x5c>)
 801b2c0:	6083      	str	r3, [r0, #8]
 801b2c2:	230b      	movs	r3, #11
 801b2c4:	8183      	strh	r3, [r0, #12]
 801b2c6:	2201      	movs	r2, #1
 801b2c8:	2300      	movs	r3, #0
 801b2ca:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801b2ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b2d0:	480c      	ldr	r0, [pc, #48]	; (801b304 <rand+0x60>)
 801b2d2:	690a      	ldr	r2, [r1, #16]
 801b2d4:	694b      	ldr	r3, [r1, #20]
 801b2d6:	4c0c      	ldr	r4, [pc, #48]	; (801b308 <rand+0x64>)
 801b2d8:	4350      	muls	r0, r2
 801b2da:	fb04 0003 	mla	r0, r4, r3, r0
 801b2de:	fba2 2304 	umull	r2, r3, r2, r4
 801b2e2:	4403      	add	r3, r0
 801b2e4:	1c54      	adds	r4, r2, #1
 801b2e6:	f143 0500 	adc.w	r5, r3, #0
 801b2ea:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801b2ee:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801b2f2:	bd38      	pop	{r3, r4, r5, pc}
 801b2f4:	20000084 	.word	0x20000084
 801b2f8:	abcd330e 	.word	0xabcd330e
 801b2fc:	e66d1234 	.word	0xe66d1234
 801b300:	0005deec 	.word	0x0005deec
 801b304:	5851f42d 	.word	0x5851f42d
 801b308:	4c957f2d 	.word	0x4c957f2d

0801b30c <_sbrk_r>:
 801b30c:	b538      	push	{r3, r4, r5, lr}
 801b30e:	4c06      	ldr	r4, [pc, #24]	; (801b328 <_sbrk_r+0x1c>)
 801b310:	2300      	movs	r3, #0
 801b312:	4605      	mov	r5, r0
 801b314:	4608      	mov	r0, r1
 801b316:	6023      	str	r3, [r4, #0]
 801b318:	f7e8 fbea 	bl	8003af0 <_sbrk>
 801b31c:	1c43      	adds	r3, r0, #1
 801b31e:	d102      	bne.n	801b326 <_sbrk_r+0x1a>
 801b320:	6823      	ldr	r3, [r4, #0]
 801b322:	b103      	cbz	r3, 801b326 <_sbrk_r+0x1a>
 801b324:	602b      	str	r3, [r5, #0]
 801b326:	bd38      	pop	{r3, r4, r5, pc}
 801b328:	2000766c 	.word	0x2000766c

0801b32c <sniprintf>:
 801b32c:	b40c      	push	{r2, r3}
 801b32e:	b530      	push	{r4, r5, lr}
 801b330:	4b17      	ldr	r3, [pc, #92]	; (801b390 <sniprintf+0x64>)
 801b332:	1e0c      	subs	r4, r1, #0
 801b334:	b09d      	sub	sp, #116	; 0x74
 801b336:	681d      	ldr	r5, [r3, #0]
 801b338:	da08      	bge.n	801b34c <sniprintf+0x20>
 801b33a:	238b      	movs	r3, #139	; 0x8b
 801b33c:	602b      	str	r3, [r5, #0]
 801b33e:	f04f 30ff 	mov.w	r0, #4294967295
 801b342:	b01d      	add	sp, #116	; 0x74
 801b344:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b348:	b002      	add	sp, #8
 801b34a:	4770      	bx	lr
 801b34c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b350:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b354:	bf14      	ite	ne
 801b356:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b35a:	4623      	moveq	r3, r4
 801b35c:	9304      	str	r3, [sp, #16]
 801b35e:	9307      	str	r3, [sp, #28]
 801b360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b364:	9002      	str	r0, [sp, #8]
 801b366:	9006      	str	r0, [sp, #24]
 801b368:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b36c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b36e:	ab21      	add	r3, sp, #132	; 0x84
 801b370:	a902      	add	r1, sp, #8
 801b372:	4628      	mov	r0, r5
 801b374:	9301      	str	r3, [sp, #4]
 801b376:	f002 fdcd 	bl	801df14 <_svfiprintf_r>
 801b37a:	1c43      	adds	r3, r0, #1
 801b37c:	bfbc      	itt	lt
 801b37e:	238b      	movlt	r3, #139	; 0x8b
 801b380:	602b      	strlt	r3, [r5, #0]
 801b382:	2c00      	cmp	r4, #0
 801b384:	d0dd      	beq.n	801b342 <sniprintf+0x16>
 801b386:	9b02      	ldr	r3, [sp, #8]
 801b388:	2200      	movs	r2, #0
 801b38a:	701a      	strb	r2, [r3, #0]
 801b38c:	e7d9      	b.n	801b342 <sniprintf+0x16>
 801b38e:	bf00      	nop
 801b390:	20000084 	.word	0x20000084

0801b394 <siprintf>:
 801b394:	b40e      	push	{r1, r2, r3}
 801b396:	b500      	push	{lr}
 801b398:	b09c      	sub	sp, #112	; 0x70
 801b39a:	ab1d      	add	r3, sp, #116	; 0x74
 801b39c:	9002      	str	r0, [sp, #8]
 801b39e:	9006      	str	r0, [sp, #24]
 801b3a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b3a4:	4809      	ldr	r0, [pc, #36]	; (801b3cc <siprintf+0x38>)
 801b3a6:	9107      	str	r1, [sp, #28]
 801b3a8:	9104      	str	r1, [sp, #16]
 801b3aa:	4909      	ldr	r1, [pc, #36]	; (801b3d0 <siprintf+0x3c>)
 801b3ac:	f853 2b04 	ldr.w	r2, [r3], #4
 801b3b0:	9105      	str	r1, [sp, #20]
 801b3b2:	6800      	ldr	r0, [r0, #0]
 801b3b4:	9301      	str	r3, [sp, #4]
 801b3b6:	a902      	add	r1, sp, #8
 801b3b8:	f002 fdac 	bl	801df14 <_svfiprintf_r>
 801b3bc:	9b02      	ldr	r3, [sp, #8]
 801b3be:	2200      	movs	r2, #0
 801b3c0:	701a      	strb	r2, [r3, #0]
 801b3c2:	b01c      	add	sp, #112	; 0x70
 801b3c4:	f85d eb04 	ldr.w	lr, [sp], #4
 801b3c8:	b003      	add	sp, #12
 801b3ca:	4770      	bx	lr
 801b3cc:	20000084 	.word	0x20000084
 801b3d0:	ffff0208 	.word	0xffff0208

0801b3d4 <strncmp>:
 801b3d4:	b510      	push	{r4, lr}
 801b3d6:	b16a      	cbz	r2, 801b3f4 <strncmp+0x20>
 801b3d8:	3901      	subs	r1, #1
 801b3da:	1884      	adds	r4, r0, r2
 801b3dc:	f810 3b01 	ldrb.w	r3, [r0], #1
 801b3e0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801b3e4:	4293      	cmp	r3, r2
 801b3e6:	d103      	bne.n	801b3f0 <strncmp+0x1c>
 801b3e8:	42a0      	cmp	r0, r4
 801b3ea:	d001      	beq.n	801b3f0 <strncmp+0x1c>
 801b3ec:	2b00      	cmp	r3, #0
 801b3ee:	d1f5      	bne.n	801b3dc <strncmp+0x8>
 801b3f0:	1a98      	subs	r0, r3, r2
 801b3f2:	bd10      	pop	{r4, pc}
 801b3f4:	4610      	mov	r0, r2
 801b3f6:	e7fc      	b.n	801b3f2 <strncmp+0x1e>

0801b3f8 <strstr>:
 801b3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b3fa:	7803      	ldrb	r3, [r0, #0]
 801b3fc:	b17b      	cbz	r3, 801b41e <strstr+0x26>
 801b3fe:	4604      	mov	r4, r0
 801b400:	7823      	ldrb	r3, [r4, #0]
 801b402:	4620      	mov	r0, r4
 801b404:	1c66      	adds	r6, r4, #1
 801b406:	b17b      	cbz	r3, 801b428 <strstr+0x30>
 801b408:	1e4a      	subs	r2, r1, #1
 801b40a:	1e63      	subs	r3, r4, #1
 801b40c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801b410:	b14d      	cbz	r5, 801b426 <strstr+0x2e>
 801b412:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801b416:	42af      	cmp	r7, r5
 801b418:	4634      	mov	r4, r6
 801b41a:	d0f7      	beq.n	801b40c <strstr+0x14>
 801b41c:	e7f0      	b.n	801b400 <strstr+0x8>
 801b41e:	780b      	ldrb	r3, [r1, #0]
 801b420:	2b00      	cmp	r3, #0
 801b422:	bf18      	it	ne
 801b424:	2000      	movne	r0, #0
 801b426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b428:	4618      	mov	r0, r3
 801b42a:	e7fc      	b.n	801b426 <strstr+0x2e>

0801b42c <sulp>:
 801b42c:	b570      	push	{r4, r5, r6, lr}
 801b42e:	4604      	mov	r4, r0
 801b430:	460d      	mov	r5, r1
 801b432:	ec45 4b10 	vmov	d0, r4, r5
 801b436:	4616      	mov	r6, r2
 801b438:	f002 fbd0 	bl	801dbdc <__ulp>
 801b43c:	ec51 0b10 	vmov	r0, r1, d0
 801b440:	b17e      	cbz	r6, 801b462 <sulp+0x36>
 801b442:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801b446:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	dd09      	ble.n	801b462 <sulp+0x36>
 801b44e:	051b      	lsls	r3, r3, #20
 801b450:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801b454:	2400      	movs	r4, #0
 801b456:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801b45a:	4622      	mov	r2, r4
 801b45c:	462b      	mov	r3, r5
 801b45e:	f7e5 f8db 	bl	8000618 <__aeabi_dmul>
 801b462:	bd70      	pop	{r4, r5, r6, pc}
 801b464:	0000      	movs	r0, r0
	...

0801b468 <_strtod_l>:
 801b468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b46c:	461f      	mov	r7, r3
 801b46e:	b0a1      	sub	sp, #132	; 0x84
 801b470:	2300      	movs	r3, #0
 801b472:	4681      	mov	r9, r0
 801b474:	4638      	mov	r0, r7
 801b476:	460e      	mov	r6, r1
 801b478:	9217      	str	r2, [sp, #92]	; 0x5c
 801b47a:	931c      	str	r3, [sp, #112]	; 0x70
 801b47c:	f002 f8d0 	bl	801d620 <__localeconv_l>
 801b480:	4680      	mov	r8, r0
 801b482:	6800      	ldr	r0, [r0, #0]
 801b484:	f7e4 feae 	bl	80001e4 <strlen>
 801b488:	f04f 0a00 	mov.w	sl, #0
 801b48c:	4604      	mov	r4, r0
 801b48e:	f04f 0b00 	mov.w	fp, #0
 801b492:	961b      	str	r6, [sp, #108]	; 0x6c
 801b494:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b496:	781a      	ldrb	r2, [r3, #0]
 801b498:	2a0d      	cmp	r2, #13
 801b49a:	d832      	bhi.n	801b502 <_strtod_l+0x9a>
 801b49c:	2a09      	cmp	r2, #9
 801b49e:	d236      	bcs.n	801b50e <_strtod_l+0xa6>
 801b4a0:	2a00      	cmp	r2, #0
 801b4a2:	d03e      	beq.n	801b522 <_strtod_l+0xba>
 801b4a4:	2300      	movs	r3, #0
 801b4a6:	930d      	str	r3, [sp, #52]	; 0x34
 801b4a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801b4aa:	782b      	ldrb	r3, [r5, #0]
 801b4ac:	2b30      	cmp	r3, #48	; 0x30
 801b4ae:	f040 80ac 	bne.w	801b60a <_strtod_l+0x1a2>
 801b4b2:	786b      	ldrb	r3, [r5, #1]
 801b4b4:	2b58      	cmp	r3, #88	; 0x58
 801b4b6:	d001      	beq.n	801b4bc <_strtod_l+0x54>
 801b4b8:	2b78      	cmp	r3, #120	; 0x78
 801b4ba:	d167      	bne.n	801b58c <_strtod_l+0x124>
 801b4bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b4be:	9301      	str	r3, [sp, #4]
 801b4c0:	ab1c      	add	r3, sp, #112	; 0x70
 801b4c2:	9300      	str	r3, [sp, #0]
 801b4c4:	9702      	str	r7, [sp, #8]
 801b4c6:	ab1d      	add	r3, sp, #116	; 0x74
 801b4c8:	4a88      	ldr	r2, [pc, #544]	; (801b6ec <_strtod_l+0x284>)
 801b4ca:	a91b      	add	r1, sp, #108	; 0x6c
 801b4cc:	4648      	mov	r0, r9
 801b4ce:	f001 fdd0 	bl	801d072 <__gethex>
 801b4d2:	f010 0407 	ands.w	r4, r0, #7
 801b4d6:	4606      	mov	r6, r0
 801b4d8:	d005      	beq.n	801b4e6 <_strtod_l+0x7e>
 801b4da:	2c06      	cmp	r4, #6
 801b4dc:	d12b      	bne.n	801b536 <_strtod_l+0xce>
 801b4de:	3501      	adds	r5, #1
 801b4e0:	2300      	movs	r3, #0
 801b4e2:	951b      	str	r5, [sp, #108]	; 0x6c
 801b4e4:	930d      	str	r3, [sp, #52]	; 0x34
 801b4e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	f040 859a 	bne.w	801c022 <_strtod_l+0xbba>
 801b4ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b4f0:	b1e3      	cbz	r3, 801b52c <_strtod_l+0xc4>
 801b4f2:	4652      	mov	r2, sl
 801b4f4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b4f8:	ec43 2b10 	vmov	d0, r2, r3
 801b4fc:	b021      	add	sp, #132	; 0x84
 801b4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b502:	2a2b      	cmp	r2, #43	; 0x2b
 801b504:	d015      	beq.n	801b532 <_strtod_l+0xca>
 801b506:	2a2d      	cmp	r2, #45	; 0x2d
 801b508:	d004      	beq.n	801b514 <_strtod_l+0xac>
 801b50a:	2a20      	cmp	r2, #32
 801b50c:	d1ca      	bne.n	801b4a4 <_strtod_l+0x3c>
 801b50e:	3301      	adds	r3, #1
 801b510:	931b      	str	r3, [sp, #108]	; 0x6c
 801b512:	e7bf      	b.n	801b494 <_strtod_l+0x2c>
 801b514:	2201      	movs	r2, #1
 801b516:	920d      	str	r2, [sp, #52]	; 0x34
 801b518:	1c5a      	adds	r2, r3, #1
 801b51a:	921b      	str	r2, [sp, #108]	; 0x6c
 801b51c:	785b      	ldrb	r3, [r3, #1]
 801b51e:	2b00      	cmp	r3, #0
 801b520:	d1c2      	bne.n	801b4a8 <_strtod_l+0x40>
 801b522:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b524:	961b      	str	r6, [sp, #108]	; 0x6c
 801b526:	2b00      	cmp	r3, #0
 801b528:	f040 8579 	bne.w	801c01e <_strtod_l+0xbb6>
 801b52c:	4652      	mov	r2, sl
 801b52e:	465b      	mov	r3, fp
 801b530:	e7e2      	b.n	801b4f8 <_strtod_l+0x90>
 801b532:	2200      	movs	r2, #0
 801b534:	e7ef      	b.n	801b516 <_strtod_l+0xae>
 801b536:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b538:	b13a      	cbz	r2, 801b54a <_strtod_l+0xe2>
 801b53a:	2135      	movs	r1, #53	; 0x35
 801b53c:	a81e      	add	r0, sp, #120	; 0x78
 801b53e:	f002 fc45 	bl	801ddcc <__copybits>
 801b542:	991c      	ldr	r1, [sp, #112]	; 0x70
 801b544:	4648      	mov	r0, r9
 801b546:	f002 f8b1 	bl	801d6ac <_Bfree>
 801b54a:	3c01      	subs	r4, #1
 801b54c:	2c04      	cmp	r4, #4
 801b54e:	d806      	bhi.n	801b55e <_strtod_l+0xf6>
 801b550:	e8df f004 	tbb	[pc, r4]
 801b554:	1714030a 	.word	0x1714030a
 801b558:	0a          	.byte	0x0a
 801b559:	00          	.byte	0x00
 801b55a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801b55e:	0730      	lsls	r0, r6, #28
 801b560:	d5c1      	bpl.n	801b4e6 <_strtod_l+0x7e>
 801b562:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801b566:	e7be      	b.n	801b4e6 <_strtod_l+0x7e>
 801b568:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801b56c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b56e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801b572:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801b576:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801b57a:	e7f0      	b.n	801b55e <_strtod_l+0xf6>
 801b57c:	f8df b170 	ldr.w	fp, [pc, #368]	; 801b6f0 <_strtod_l+0x288>
 801b580:	e7ed      	b.n	801b55e <_strtod_l+0xf6>
 801b582:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801b586:	f04f 3aff 	mov.w	sl, #4294967295
 801b58a:	e7e8      	b.n	801b55e <_strtod_l+0xf6>
 801b58c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b58e:	1c5a      	adds	r2, r3, #1
 801b590:	921b      	str	r2, [sp, #108]	; 0x6c
 801b592:	785b      	ldrb	r3, [r3, #1]
 801b594:	2b30      	cmp	r3, #48	; 0x30
 801b596:	d0f9      	beq.n	801b58c <_strtod_l+0x124>
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d0a4      	beq.n	801b4e6 <_strtod_l+0x7e>
 801b59c:	2301      	movs	r3, #1
 801b59e:	2500      	movs	r5, #0
 801b5a0:	9306      	str	r3, [sp, #24]
 801b5a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b5a4:	9308      	str	r3, [sp, #32]
 801b5a6:	9507      	str	r5, [sp, #28]
 801b5a8:	9505      	str	r5, [sp, #20]
 801b5aa:	220a      	movs	r2, #10
 801b5ac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801b5ae:	7807      	ldrb	r7, [r0, #0]
 801b5b0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801b5b4:	b2d9      	uxtb	r1, r3
 801b5b6:	2909      	cmp	r1, #9
 801b5b8:	d929      	bls.n	801b60e <_strtod_l+0x1a6>
 801b5ba:	4622      	mov	r2, r4
 801b5bc:	f8d8 1000 	ldr.w	r1, [r8]
 801b5c0:	f7ff ff08 	bl	801b3d4 <strncmp>
 801b5c4:	2800      	cmp	r0, #0
 801b5c6:	d031      	beq.n	801b62c <_strtod_l+0x1c4>
 801b5c8:	2000      	movs	r0, #0
 801b5ca:	9c05      	ldr	r4, [sp, #20]
 801b5cc:	9004      	str	r0, [sp, #16]
 801b5ce:	463b      	mov	r3, r7
 801b5d0:	4602      	mov	r2, r0
 801b5d2:	2b65      	cmp	r3, #101	; 0x65
 801b5d4:	d001      	beq.n	801b5da <_strtod_l+0x172>
 801b5d6:	2b45      	cmp	r3, #69	; 0x45
 801b5d8:	d114      	bne.n	801b604 <_strtod_l+0x19c>
 801b5da:	b924      	cbnz	r4, 801b5e6 <_strtod_l+0x17e>
 801b5dc:	b910      	cbnz	r0, 801b5e4 <_strtod_l+0x17c>
 801b5de:	9b06      	ldr	r3, [sp, #24]
 801b5e0:	2b00      	cmp	r3, #0
 801b5e2:	d09e      	beq.n	801b522 <_strtod_l+0xba>
 801b5e4:	2400      	movs	r4, #0
 801b5e6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801b5e8:	1c73      	adds	r3, r6, #1
 801b5ea:	931b      	str	r3, [sp, #108]	; 0x6c
 801b5ec:	7873      	ldrb	r3, [r6, #1]
 801b5ee:	2b2b      	cmp	r3, #43	; 0x2b
 801b5f0:	d078      	beq.n	801b6e4 <_strtod_l+0x27c>
 801b5f2:	2b2d      	cmp	r3, #45	; 0x2d
 801b5f4:	d070      	beq.n	801b6d8 <_strtod_l+0x270>
 801b5f6:	f04f 0c00 	mov.w	ip, #0
 801b5fa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801b5fe:	2f09      	cmp	r7, #9
 801b600:	d97c      	bls.n	801b6fc <_strtod_l+0x294>
 801b602:	961b      	str	r6, [sp, #108]	; 0x6c
 801b604:	f04f 0e00 	mov.w	lr, #0
 801b608:	e09a      	b.n	801b740 <_strtod_l+0x2d8>
 801b60a:	2300      	movs	r3, #0
 801b60c:	e7c7      	b.n	801b59e <_strtod_l+0x136>
 801b60e:	9905      	ldr	r1, [sp, #20]
 801b610:	2908      	cmp	r1, #8
 801b612:	bfdd      	ittte	le
 801b614:	9907      	ldrle	r1, [sp, #28]
 801b616:	fb02 3301 	mlale	r3, r2, r1, r3
 801b61a:	9307      	strle	r3, [sp, #28]
 801b61c:	fb02 3505 	mlagt	r5, r2, r5, r3
 801b620:	9b05      	ldr	r3, [sp, #20]
 801b622:	3001      	adds	r0, #1
 801b624:	3301      	adds	r3, #1
 801b626:	9305      	str	r3, [sp, #20]
 801b628:	901b      	str	r0, [sp, #108]	; 0x6c
 801b62a:	e7bf      	b.n	801b5ac <_strtod_l+0x144>
 801b62c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b62e:	191a      	adds	r2, r3, r4
 801b630:	921b      	str	r2, [sp, #108]	; 0x6c
 801b632:	9a05      	ldr	r2, [sp, #20]
 801b634:	5d1b      	ldrb	r3, [r3, r4]
 801b636:	2a00      	cmp	r2, #0
 801b638:	d037      	beq.n	801b6aa <_strtod_l+0x242>
 801b63a:	9c05      	ldr	r4, [sp, #20]
 801b63c:	4602      	mov	r2, r0
 801b63e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801b642:	2909      	cmp	r1, #9
 801b644:	d913      	bls.n	801b66e <_strtod_l+0x206>
 801b646:	2101      	movs	r1, #1
 801b648:	9104      	str	r1, [sp, #16]
 801b64a:	e7c2      	b.n	801b5d2 <_strtod_l+0x16a>
 801b64c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b64e:	1c5a      	adds	r2, r3, #1
 801b650:	921b      	str	r2, [sp, #108]	; 0x6c
 801b652:	785b      	ldrb	r3, [r3, #1]
 801b654:	3001      	adds	r0, #1
 801b656:	2b30      	cmp	r3, #48	; 0x30
 801b658:	d0f8      	beq.n	801b64c <_strtod_l+0x1e4>
 801b65a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801b65e:	2a08      	cmp	r2, #8
 801b660:	f200 84e4 	bhi.w	801c02c <_strtod_l+0xbc4>
 801b664:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801b666:	9208      	str	r2, [sp, #32]
 801b668:	4602      	mov	r2, r0
 801b66a:	2000      	movs	r0, #0
 801b66c:	4604      	mov	r4, r0
 801b66e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801b672:	f100 0101 	add.w	r1, r0, #1
 801b676:	d012      	beq.n	801b69e <_strtod_l+0x236>
 801b678:	440a      	add	r2, r1
 801b67a:	eb00 0c04 	add.w	ip, r0, r4
 801b67e:	4621      	mov	r1, r4
 801b680:	270a      	movs	r7, #10
 801b682:	458c      	cmp	ip, r1
 801b684:	d113      	bne.n	801b6ae <_strtod_l+0x246>
 801b686:	1821      	adds	r1, r4, r0
 801b688:	2908      	cmp	r1, #8
 801b68a:	f104 0401 	add.w	r4, r4, #1
 801b68e:	4404      	add	r4, r0
 801b690:	dc19      	bgt.n	801b6c6 <_strtod_l+0x25e>
 801b692:	9b07      	ldr	r3, [sp, #28]
 801b694:	210a      	movs	r1, #10
 801b696:	fb01 e303 	mla	r3, r1, r3, lr
 801b69a:	9307      	str	r3, [sp, #28]
 801b69c:	2100      	movs	r1, #0
 801b69e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b6a0:	1c58      	adds	r0, r3, #1
 801b6a2:	901b      	str	r0, [sp, #108]	; 0x6c
 801b6a4:	785b      	ldrb	r3, [r3, #1]
 801b6a6:	4608      	mov	r0, r1
 801b6a8:	e7c9      	b.n	801b63e <_strtod_l+0x1d6>
 801b6aa:	9805      	ldr	r0, [sp, #20]
 801b6ac:	e7d3      	b.n	801b656 <_strtod_l+0x1ee>
 801b6ae:	2908      	cmp	r1, #8
 801b6b0:	f101 0101 	add.w	r1, r1, #1
 801b6b4:	dc03      	bgt.n	801b6be <_strtod_l+0x256>
 801b6b6:	9b07      	ldr	r3, [sp, #28]
 801b6b8:	437b      	muls	r3, r7
 801b6ba:	9307      	str	r3, [sp, #28]
 801b6bc:	e7e1      	b.n	801b682 <_strtod_l+0x21a>
 801b6be:	2910      	cmp	r1, #16
 801b6c0:	bfd8      	it	le
 801b6c2:	437d      	mulle	r5, r7
 801b6c4:	e7dd      	b.n	801b682 <_strtod_l+0x21a>
 801b6c6:	2c10      	cmp	r4, #16
 801b6c8:	bfdc      	itt	le
 801b6ca:	210a      	movle	r1, #10
 801b6cc:	fb01 e505 	mlale	r5, r1, r5, lr
 801b6d0:	e7e4      	b.n	801b69c <_strtod_l+0x234>
 801b6d2:	2301      	movs	r3, #1
 801b6d4:	9304      	str	r3, [sp, #16]
 801b6d6:	e781      	b.n	801b5dc <_strtod_l+0x174>
 801b6d8:	f04f 0c01 	mov.w	ip, #1
 801b6dc:	1cb3      	adds	r3, r6, #2
 801b6de:	931b      	str	r3, [sp, #108]	; 0x6c
 801b6e0:	78b3      	ldrb	r3, [r6, #2]
 801b6e2:	e78a      	b.n	801b5fa <_strtod_l+0x192>
 801b6e4:	f04f 0c00 	mov.w	ip, #0
 801b6e8:	e7f8      	b.n	801b6dc <_strtod_l+0x274>
 801b6ea:	bf00      	nop
 801b6ec:	08023b78 	.word	0x08023b78
 801b6f0:	7ff00000 	.word	0x7ff00000
 801b6f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b6f6:	1c5f      	adds	r7, r3, #1
 801b6f8:	971b      	str	r7, [sp, #108]	; 0x6c
 801b6fa:	785b      	ldrb	r3, [r3, #1]
 801b6fc:	2b30      	cmp	r3, #48	; 0x30
 801b6fe:	d0f9      	beq.n	801b6f4 <_strtod_l+0x28c>
 801b700:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801b704:	2f08      	cmp	r7, #8
 801b706:	f63f af7d 	bhi.w	801b604 <_strtod_l+0x19c>
 801b70a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801b70e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b710:	930a      	str	r3, [sp, #40]	; 0x28
 801b712:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b714:	1c5f      	adds	r7, r3, #1
 801b716:	971b      	str	r7, [sp, #108]	; 0x6c
 801b718:	785b      	ldrb	r3, [r3, #1]
 801b71a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801b71e:	f1b8 0f09 	cmp.w	r8, #9
 801b722:	d937      	bls.n	801b794 <_strtod_l+0x32c>
 801b724:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b726:	1a7f      	subs	r7, r7, r1
 801b728:	2f08      	cmp	r7, #8
 801b72a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801b72e:	dc37      	bgt.n	801b7a0 <_strtod_l+0x338>
 801b730:	45be      	cmp	lr, r7
 801b732:	bfa8      	it	ge
 801b734:	46be      	movge	lr, r7
 801b736:	f1bc 0f00 	cmp.w	ip, #0
 801b73a:	d001      	beq.n	801b740 <_strtod_l+0x2d8>
 801b73c:	f1ce 0e00 	rsb	lr, lr, #0
 801b740:	2c00      	cmp	r4, #0
 801b742:	d151      	bne.n	801b7e8 <_strtod_l+0x380>
 801b744:	2800      	cmp	r0, #0
 801b746:	f47f aece 	bne.w	801b4e6 <_strtod_l+0x7e>
 801b74a:	9a06      	ldr	r2, [sp, #24]
 801b74c:	2a00      	cmp	r2, #0
 801b74e:	f47f aeca 	bne.w	801b4e6 <_strtod_l+0x7e>
 801b752:	9a04      	ldr	r2, [sp, #16]
 801b754:	2a00      	cmp	r2, #0
 801b756:	f47f aee4 	bne.w	801b522 <_strtod_l+0xba>
 801b75a:	2b4e      	cmp	r3, #78	; 0x4e
 801b75c:	d027      	beq.n	801b7ae <_strtod_l+0x346>
 801b75e:	dc21      	bgt.n	801b7a4 <_strtod_l+0x33c>
 801b760:	2b49      	cmp	r3, #73	; 0x49
 801b762:	f47f aede 	bne.w	801b522 <_strtod_l+0xba>
 801b766:	49a0      	ldr	r1, [pc, #640]	; (801b9e8 <_strtod_l+0x580>)
 801b768:	a81b      	add	r0, sp, #108	; 0x6c
 801b76a:	f001 feb5 	bl	801d4d8 <__match>
 801b76e:	2800      	cmp	r0, #0
 801b770:	f43f aed7 	beq.w	801b522 <_strtod_l+0xba>
 801b774:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b776:	499d      	ldr	r1, [pc, #628]	; (801b9ec <_strtod_l+0x584>)
 801b778:	3b01      	subs	r3, #1
 801b77a:	a81b      	add	r0, sp, #108	; 0x6c
 801b77c:	931b      	str	r3, [sp, #108]	; 0x6c
 801b77e:	f001 feab 	bl	801d4d8 <__match>
 801b782:	b910      	cbnz	r0, 801b78a <_strtod_l+0x322>
 801b784:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b786:	3301      	adds	r3, #1
 801b788:	931b      	str	r3, [sp, #108]	; 0x6c
 801b78a:	f8df b274 	ldr.w	fp, [pc, #628]	; 801ba00 <_strtod_l+0x598>
 801b78e:	f04f 0a00 	mov.w	sl, #0
 801b792:	e6a8      	b.n	801b4e6 <_strtod_l+0x7e>
 801b794:	210a      	movs	r1, #10
 801b796:	fb01 3e0e 	mla	lr, r1, lr, r3
 801b79a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801b79e:	e7b8      	b.n	801b712 <_strtod_l+0x2aa>
 801b7a0:	46be      	mov	lr, r7
 801b7a2:	e7c8      	b.n	801b736 <_strtod_l+0x2ce>
 801b7a4:	2b69      	cmp	r3, #105	; 0x69
 801b7a6:	d0de      	beq.n	801b766 <_strtod_l+0x2fe>
 801b7a8:	2b6e      	cmp	r3, #110	; 0x6e
 801b7aa:	f47f aeba 	bne.w	801b522 <_strtod_l+0xba>
 801b7ae:	4990      	ldr	r1, [pc, #576]	; (801b9f0 <_strtod_l+0x588>)
 801b7b0:	a81b      	add	r0, sp, #108	; 0x6c
 801b7b2:	f001 fe91 	bl	801d4d8 <__match>
 801b7b6:	2800      	cmp	r0, #0
 801b7b8:	f43f aeb3 	beq.w	801b522 <_strtod_l+0xba>
 801b7bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b7be:	781b      	ldrb	r3, [r3, #0]
 801b7c0:	2b28      	cmp	r3, #40	; 0x28
 801b7c2:	d10e      	bne.n	801b7e2 <_strtod_l+0x37a>
 801b7c4:	aa1e      	add	r2, sp, #120	; 0x78
 801b7c6:	498b      	ldr	r1, [pc, #556]	; (801b9f4 <_strtod_l+0x58c>)
 801b7c8:	a81b      	add	r0, sp, #108	; 0x6c
 801b7ca:	f001 fe99 	bl	801d500 <__hexnan>
 801b7ce:	2805      	cmp	r0, #5
 801b7d0:	d107      	bne.n	801b7e2 <_strtod_l+0x37a>
 801b7d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b7d4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801b7d8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801b7dc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801b7e0:	e681      	b.n	801b4e6 <_strtod_l+0x7e>
 801b7e2:	f8df b224 	ldr.w	fp, [pc, #548]	; 801ba08 <_strtod_l+0x5a0>
 801b7e6:	e7d2      	b.n	801b78e <_strtod_l+0x326>
 801b7e8:	ebae 0302 	sub.w	r3, lr, r2
 801b7ec:	9306      	str	r3, [sp, #24]
 801b7ee:	9b05      	ldr	r3, [sp, #20]
 801b7f0:	9807      	ldr	r0, [sp, #28]
 801b7f2:	2b00      	cmp	r3, #0
 801b7f4:	bf08      	it	eq
 801b7f6:	4623      	moveq	r3, r4
 801b7f8:	2c10      	cmp	r4, #16
 801b7fa:	9305      	str	r3, [sp, #20]
 801b7fc:	46a0      	mov	r8, r4
 801b7fe:	bfa8      	it	ge
 801b800:	f04f 0810 	movge.w	r8, #16
 801b804:	f7e4 fe8e 	bl	8000524 <__aeabi_ui2d>
 801b808:	2c09      	cmp	r4, #9
 801b80a:	4682      	mov	sl, r0
 801b80c:	468b      	mov	fp, r1
 801b80e:	dc13      	bgt.n	801b838 <_strtod_l+0x3d0>
 801b810:	9b06      	ldr	r3, [sp, #24]
 801b812:	2b00      	cmp	r3, #0
 801b814:	f43f ae67 	beq.w	801b4e6 <_strtod_l+0x7e>
 801b818:	9b06      	ldr	r3, [sp, #24]
 801b81a:	dd7a      	ble.n	801b912 <_strtod_l+0x4aa>
 801b81c:	2b16      	cmp	r3, #22
 801b81e:	dc61      	bgt.n	801b8e4 <_strtod_l+0x47c>
 801b820:	4a75      	ldr	r2, [pc, #468]	; (801b9f8 <_strtod_l+0x590>)
 801b822:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801b826:	e9de 0100 	ldrd	r0, r1, [lr]
 801b82a:	4652      	mov	r2, sl
 801b82c:	465b      	mov	r3, fp
 801b82e:	f7e4 fef3 	bl	8000618 <__aeabi_dmul>
 801b832:	4682      	mov	sl, r0
 801b834:	468b      	mov	fp, r1
 801b836:	e656      	b.n	801b4e6 <_strtod_l+0x7e>
 801b838:	4b6f      	ldr	r3, [pc, #444]	; (801b9f8 <_strtod_l+0x590>)
 801b83a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b83e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801b842:	f7e4 fee9 	bl	8000618 <__aeabi_dmul>
 801b846:	4606      	mov	r6, r0
 801b848:	4628      	mov	r0, r5
 801b84a:	460f      	mov	r7, r1
 801b84c:	f7e4 fe6a 	bl	8000524 <__aeabi_ui2d>
 801b850:	4602      	mov	r2, r0
 801b852:	460b      	mov	r3, r1
 801b854:	4630      	mov	r0, r6
 801b856:	4639      	mov	r1, r7
 801b858:	f7e4 fd28 	bl	80002ac <__adddf3>
 801b85c:	2c0f      	cmp	r4, #15
 801b85e:	4682      	mov	sl, r0
 801b860:	468b      	mov	fp, r1
 801b862:	ddd5      	ble.n	801b810 <_strtod_l+0x3a8>
 801b864:	9b06      	ldr	r3, [sp, #24]
 801b866:	eba4 0808 	sub.w	r8, r4, r8
 801b86a:	4498      	add	r8, r3
 801b86c:	f1b8 0f00 	cmp.w	r8, #0
 801b870:	f340 8096 	ble.w	801b9a0 <_strtod_l+0x538>
 801b874:	f018 030f 	ands.w	r3, r8, #15
 801b878:	d00a      	beq.n	801b890 <_strtod_l+0x428>
 801b87a:	495f      	ldr	r1, [pc, #380]	; (801b9f8 <_strtod_l+0x590>)
 801b87c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b880:	4652      	mov	r2, sl
 801b882:	465b      	mov	r3, fp
 801b884:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b888:	f7e4 fec6 	bl	8000618 <__aeabi_dmul>
 801b88c:	4682      	mov	sl, r0
 801b88e:	468b      	mov	fp, r1
 801b890:	f038 080f 	bics.w	r8, r8, #15
 801b894:	d073      	beq.n	801b97e <_strtod_l+0x516>
 801b896:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801b89a:	dd47      	ble.n	801b92c <_strtod_l+0x4c4>
 801b89c:	2400      	movs	r4, #0
 801b89e:	46a0      	mov	r8, r4
 801b8a0:	9407      	str	r4, [sp, #28]
 801b8a2:	9405      	str	r4, [sp, #20]
 801b8a4:	2322      	movs	r3, #34	; 0x22
 801b8a6:	f8df b158 	ldr.w	fp, [pc, #344]	; 801ba00 <_strtod_l+0x598>
 801b8aa:	f8c9 3000 	str.w	r3, [r9]
 801b8ae:	f04f 0a00 	mov.w	sl, #0
 801b8b2:	9b07      	ldr	r3, [sp, #28]
 801b8b4:	2b00      	cmp	r3, #0
 801b8b6:	f43f ae16 	beq.w	801b4e6 <_strtod_l+0x7e>
 801b8ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 801b8bc:	4648      	mov	r0, r9
 801b8be:	f001 fef5 	bl	801d6ac <_Bfree>
 801b8c2:	9905      	ldr	r1, [sp, #20]
 801b8c4:	4648      	mov	r0, r9
 801b8c6:	f001 fef1 	bl	801d6ac <_Bfree>
 801b8ca:	4641      	mov	r1, r8
 801b8cc:	4648      	mov	r0, r9
 801b8ce:	f001 feed 	bl	801d6ac <_Bfree>
 801b8d2:	9907      	ldr	r1, [sp, #28]
 801b8d4:	4648      	mov	r0, r9
 801b8d6:	f001 fee9 	bl	801d6ac <_Bfree>
 801b8da:	4621      	mov	r1, r4
 801b8dc:	4648      	mov	r0, r9
 801b8de:	f001 fee5 	bl	801d6ac <_Bfree>
 801b8e2:	e600      	b.n	801b4e6 <_strtod_l+0x7e>
 801b8e4:	9a06      	ldr	r2, [sp, #24]
 801b8e6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801b8ea:	4293      	cmp	r3, r2
 801b8ec:	dbba      	blt.n	801b864 <_strtod_l+0x3fc>
 801b8ee:	4d42      	ldr	r5, [pc, #264]	; (801b9f8 <_strtod_l+0x590>)
 801b8f0:	f1c4 040f 	rsb	r4, r4, #15
 801b8f4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 801b8f8:	4652      	mov	r2, sl
 801b8fa:	465b      	mov	r3, fp
 801b8fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b900:	f7e4 fe8a 	bl	8000618 <__aeabi_dmul>
 801b904:	9b06      	ldr	r3, [sp, #24]
 801b906:	1b1c      	subs	r4, r3, r4
 801b908:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801b90c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b910:	e78d      	b.n	801b82e <_strtod_l+0x3c6>
 801b912:	f113 0f16 	cmn.w	r3, #22
 801b916:	dba5      	blt.n	801b864 <_strtod_l+0x3fc>
 801b918:	4a37      	ldr	r2, [pc, #220]	; (801b9f8 <_strtod_l+0x590>)
 801b91a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801b91e:	e9d2 2300 	ldrd	r2, r3, [r2]
 801b922:	4650      	mov	r0, sl
 801b924:	4659      	mov	r1, fp
 801b926:	f7e4 ffa1 	bl	800086c <__aeabi_ddiv>
 801b92a:	e782      	b.n	801b832 <_strtod_l+0x3ca>
 801b92c:	2300      	movs	r3, #0
 801b92e:	4e33      	ldr	r6, [pc, #204]	; (801b9fc <_strtod_l+0x594>)
 801b930:	ea4f 1828 	mov.w	r8, r8, asr #4
 801b934:	4650      	mov	r0, sl
 801b936:	4659      	mov	r1, fp
 801b938:	461d      	mov	r5, r3
 801b93a:	f1b8 0f01 	cmp.w	r8, #1
 801b93e:	dc21      	bgt.n	801b984 <_strtod_l+0x51c>
 801b940:	b10b      	cbz	r3, 801b946 <_strtod_l+0x4de>
 801b942:	4682      	mov	sl, r0
 801b944:	468b      	mov	fp, r1
 801b946:	4b2d      	ldr	r3, [pc, #180]	; (801b9fc <_strtod_l+0x594>)
 801b948:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801b94c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801b950:	4652      	mov	r2, sl
 801b952:	465b      	mov	r3, fp
 801b954:	e9d5 0100 	ldrd	r0, r1, [r5]
 801b958:	f7e4 fe5e 	bl	8000618 <__aeabi_dmul>
 801b95c:	4b28      	ldr	r3, [pc, #160]	; (801ba00 <_strtod_l+0x598>)
 801b95e:	460a      	mov	r2, r1
 801b960:	400b      	ands	r3, r1
 801b962:	4928      	ldr	r1, [pc, #160]	; (801ba04 <_strtod_l+0x59c>)
 801b964:	428b      	cmp	r3, r1
 801b966:	4682      	mov	sl, r0
 801b968:	d898      	bhi.n	801b89c <_strtod_l+0x434>
 801b96a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801b96e:	428b      	cmp	r3, r1
 801b970:	bf86      	itte	hi
 801b972:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801ba0c <_strtod_l+0x5a4>
 801b976:	f04f 3aff 	movhi.w	sl, #4294967295
 801b97a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801b97e:	2300      	movs	r3, #0
 801b980:	9304      	str	r3, [sp, #16]
 801b982:	e077      	b.n	801ba74 <_strtod_l+0x60c>
 801b984:	f018 0f01 	tst.w	r8, #1
 801b988:	d006      	beq.n	801b998 <_strtod_l+0x530>
 801b98a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801b98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b992:	f7e4 fe41 	bl	8000618 <__aeabi_dmul>
 801b996:	2301      	movs	r3, #1
 801b998:	3501      	adds	r5, #1
 801b99a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b99e:	e7cc      	b.n	801b93a <_strtod_l+0x4d2>
 801b9a0:	d0ed      	beq.n	801b97e <_strtod_l+0x516>
 801b9a2:	f1c8 0800 	rsb	r8, r8, #0
 801b9a6:	f018 020f 	ands.w	r2, r8, #15
 801b9aa:	d00a      	beq.n	801b9c2 <_strtod_l+0x55a>
 801b9ac:	4b12      	ldr	r3, [pc, #72]	; (801b9f8 <_strtod_l+0x590>)
 801b9ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b9b2:	4650      	mov	r0, sl
 801b9b4:	4659      	mov	r1, fp
 801b9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9ba:	f7e4 ff57 	bl	800086c <__aeabi_ddiv>
 801b9be:	4682      	mov	sl, r0
 801b9c0:	468b      	mov	fp, r1
 801b9c2:	ea5f 1828 	movs.w	r8, r8, asr #4
 801b9c6:	d0da      	beq.n	801b97e <_strtod_l+0x516>
 801b9c8:	f1b8 0f1f 	cmp.w	r8, #31
 801b9cc:	dd20      	ble.n	801ba10 <_strtod_l+0x5a8>
 801b9ce:	2400      	movs	r4, #0
 801b9d0:	46a0      	mov	r8, r4
 801b9d2:	9407      	str	r4, [sp, #28]
 801b9d4:	9405      	str	r4, [sp, #20]
 801b9d6:	2322      	movs	r3, #34	; 0x22
 801b9d8:	f04f 0a00 	mov.w	sl, #0
 801b9dc:	f04f 0b00 	mov.w	fp, #0
 801b9e0:	f8c9 3000 	str.w	r3, [r9]
 801b9e4:	e765      	b.n	801b8b2 <_strtod_l+0x44a>
 801b9e6:	bf00      	nop
 801b9e8:	08023b47 	.word	0x08023b47
 801b9ec:	08023ccc 	.word	0x08023ccc
 801b9f0:	08023b4f 	.word	0x08023b4f
 801b9f4:	08023b8c 	.word	0x08023b8c
 801b9f8:	08023d60 	.word	0x08023d60
 801b9fc:	08023d38 	.word	0x08023d38
 801ba00:	7ff00000 	.word	0x7ff00000
 801ba04:	7ca00000 	.word	0x7ca00000
 801ba08:	fff80000 	.word	0xfff80000
 801ba0c:	7fefffff 	.word	0x7fefffff
 801ba10:	f018 0310 	ands.w	r3, r8, #16
 801ba14:	bf18      	it	ne
 801ba16:	236a      	movne	r3, #106	; 0x6a
 801ba18:	4da0      	ldr	r5, [pc, #640]	; (801bc9c <_strtod_l+0x834>)
 801ba1a:	9304      	str	r3, [sp, #16]
 801ba1c:	4650      	mov	r0, sl
 801ba1e:	4659      	mov	r1, fp
 801ba20:	2300      	movs	r3, #0
 801ba22:	f1b8 0f00 	cmp.w	r8, #0
 801ba26:	f300 810a 	bgt.w	801bc3e <_strtod_l+0x7d6>
 801ba2a:	b10b      	cbz	r3, 801ba30 <_strtod_l+0x5c8>
 801ba2c:	4682      	mov	sl, r0
 801ba2e:	468b      	mov	fp, r1
 801ba30:	9b04      	ldr	r3, [sp, #16]
 801ba32:	b1bb      	cbz	r3, 801ba64 <_strtod_l+0x5fc>
 801ba34:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801ba38:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ba3c:	2b00      	cmp	r3, #0
 801ba3e:	4659      	mov	r1, fp
 801ba40:	dd10      	ble.n	801ba64 <_strtod_l+0x5fc>
 801ba42:	2b1f      	cmp	r3, #31
 801ba44:	f340 8107 	ble.w	801bc56 <_strtod_l+0x7ee>
 801ba48:	2b34      	cmp	r3, #52	; 0x34
 801ba4a:	bfde      	ittt	le
 801ba4c:	3b20      	suble	r3, #32
 801ba4e:	f04f 32ff 	movle.w	r2, #4294967295
 801ba52:	fa02 f303 	lslle.w	r3, r2, r3
 801ba56:	f04f 0a00 	mov.w	sl, #0
 801ba5a:	bfcc      	ite	gt
 801ba5c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801ba60:	ea03 0b01 	andle.w	fp, r3, r1
 801ba64:	2200      	movs	r2, #0
 801ba66:	2300      	movs	r3, #0
 801ba68:	4650      	mov	r0, sl
 801ba6a:	4659      	mov	r1, fp
 801ba6c:	f7e5 f83c 	bl	8000ae8 <__aeabi_dcmpeq>
 801ba70:	2800      	cmp	r0, #0
 801ba72:	d1ac      	bne.n	801b9ce <_strtod_l+0x566>
 801ba74:	9b07      	ldr	r3, [sp, #28]
 801ba76:	9300      	str	r3, [sp, #0]
 801ba78:	9a05      	ldr	r2, [sp, #20]
 801ba7a:	9908      	ldr	r1, [sp, #32]
 801ba7c:	4623      	mov	r3, r4
 801ba7e:	4648      	mov	r0, r9
 801ba80:	f001 fe66 	bl	801d750 <__s2b>
 801ba84:	9007      	str	r0, [sp, #28]
 801ba86:	2800      	cmp	r0, #0
 801ba88:	f43f af08 	beq.w	801b89c <_strtod_l+0x434>
 801ba8c:	9a06      	ldr	r2, [sp, #24]
 801ba8e:	9b06      	ldr	r3, [sp, #24]
 801ba90:	2a00      	cmp	r2, #0
 801ba92:	f1c3 0300 	rsb	r3, r3, #0
 801ba96:	bfa8      	it	ge
 801ba98:	2300      	movge	r3, #0
 801ba9a:	930e      	str	r3, [sp, #56]	; 0x38
 801ba9c:	2400      	movs	r4, #0
 801ba9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801baa2:	9316      	str	r3, [sp, #88]	; 0x58
 801baa4:	46a0      	mov	r8, r4
 801baa6:	9b07      	ldr	r3, [sp, #28]
 801baa8:	4648      	mov	r0, r9
 801baaa:	6859      	ldr	r1, [r3, #4]
 801baac:	f001 fdca 	bl	801d644 <_Balloc>
 801bab0:	9005      	str	r0, [sp, #20]
 801bab2:	2800      	cmp	r0, #0
 801bab4:	f43f aef6 	beq.w	801b8a4 <_strtod_l+0x43c>
 801bab8:	9b07      	ldr	r3, [sp, #28]
 801baba:	691a      	ldr	r2, [r3, #16]
 801babc:	3202      	adds	r2, #2
 801babe:	f103 010c 	add.w	r1, r3, #12
 801bac2:	0092      	lsls	r2, r2, #2
 801bac4:	300c      	adds	r0, #12
 801bac6:	f7fe fea4 	bl	801a812 <memcpy>
 801baca:	aa1e      	add	r2, sp, #120	; 0x78
 801bacc:	a91d      	add	r1, sp, #116	; 0x74
 801bace:	ec4b ab10 	vmov	d0, sl, fp
 801bad2:	4648      	mov	r0, r9
 801bad4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801bad8:	f002 f8f6 	bl	801dcc8 <__d2b>
 801badc:	901c      	str	r0, [sp, #112]	; 0x70
 801bade:	2800      	cmp	r0, #0
 801bae0:	f43f aee0 	beq.w	801b8a4 <_strtod_l+0x43c>
 801bae4:	2101      	movs	r1, #1
 801bae6:	4648      	mov	r0, r9
 801bae8:	f001 febe 	bl	801d868 <__i2b>
 801baec:	4680      	mov	r8, r0
 801baee:	2800      	cmp	r0, #0
 801baf0:	f43f aed8 	beq.w	801b8a4 <_strtod_l+0x43c>
 801baf4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801baf6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801baf8:	2e00      	cmp	r6, #0
 801bafa:	bfab      	itete	ge
 801bafc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801bafe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 801bb00:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801bb02:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801bb04:	bfac      	ite	ge
 801bb06:	18f7      	addge	r7, r6, r3
 801bb08:	1b9d      	sublt	r5, r3, r6
 801bb0a:	9b04      	ldr	r3, [sp, #16]
 801bb0c:	1af6      	subs	r6, r6, r3
 801bb0e:	4416      	add	r6, r2
 801bb10:	4b63      	ldr	r3, [pc, #396]	; (801bca0 <_strtod_l+0x838>)
 801bb12:	3e01      	subs	r6, #1
 801bb14:	429e      	cmp	r6, r3
 801bb16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801bb1a:	f280 80af 	bge.w	801bc7c <_strtod_l+0x814>
 801bb1e:	1b9b      	subs	r3, r3, r6
 801bb20:	2b1f      	cmp	r3, #31
 801bb22:	eba2 0203 	sub.w	r2, r2, r3
 801bb26:	f04f 0101 	mov.w	r1, #1
 801bb2a:	f300 809b 	bgt.w	801bc64 <_strtod_l+0x7fc>
 801bb2e:	fa01 f303 	lsl.w	r3, r1, r3
 801bb32:	930f      	str	r3, [sp, #60]	; 0x3c
 801bb34:	2300      	movs	r3, #0
 801bb36:	930a      	str	r3, [sp, #40]	; 0x28
 801bb38:	18be      	adds	r6, r7, r2
 801bb3a:	9b04      	ldr	r3, [sp, #16]
 801bb3c:	42b7      	cmp	r7, r6
 801bb3e:	4415      	add	r5, r2
 801bb40:	441d      	add	r5, r3
 801bb42:	463b      	mov	r3, r7
 801bb44:	bfa8      	it	ge
 801bb46:	4633      	movge	r3, r6
 801bb48:	42ab      	cmp	r3, r5
 801bb4a:	bfa8      	it	ge
 801bb4c:	462b      	movge	r3, r5
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	bfc2      	ittt	gt
 801bb52:	1af6      	subgt	r6, r6, r3
 801bb54:	1aed      	subgt	r5, r5, r3
 801bb56:	1aff      	subgt	r7, r7, r3
 801bb58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bb5a:	b1bb      	cbz	r3, 801bb8c <_strtod_l+0x724>
 801bb5c:	4641      	mov	r1, r8
 801bb5e:	461a      	mov	r2, r3
 801bb60:	4648      	mov	r0, r9
 801bb62:	f001 ff21 	bl	801d9a8 <__pow5mult>
 801bb66:	4680      	mov	r8, r0
 801bb68:	2800      	cmp	r0, #0
 801bb6a:	f43f ae9b 	beq.w	801b8a4 <_strtod_l+0x43c>
 801bb6e:	4601      	mov	r1, r0
 801bb70:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801bb72:	4648      	mov	r0, r9
 801bb74:	f001 fe81 	bl	801d87a <__multiply>
 801bb78:	900c      	str	r0, [sp, #48]	; 0x30
 801bb7a:	2800      	cmp	r0, #0
 801bb7c:	f43f ae92 	beq.w	801b8a4 <_strtod_l+0x43c>
 801bb80:	991c      	ldr	r1, [sp, #112]	; 0x70
 801bb82:	4648      	mov	r0, r9
 801bb84:	f001 fd92 	bl	801d6ac <_Bfree>
 801bb88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bb8a:	931c      	str	r3, [sp, #112]	; 0x70
 801bb8c:	2e00      	cmp	r6, #0
 801bb8e:	dc7a      	bgt.n	801bc86 <_strtod_l+0x81e>
 801bb90:	9b06      	ldr	r3, [sp, #24]
 801bb92:	2b00      	cmp	r3, #0
 801bb94:	dd08      	ble.n	801bba8 <_strtod_l+0x740>
 801bb96:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801bb98:	9905      	ldr	r1, [sp, #20]
 801bb9a:	4648      	mov	r0, r9
 801bb9c:	f001 ff04 	bl	801d9a8 <__pow5mult>
 801bba0:	9005      	str	r0, [sp, #20]
 801bba2:	2800      	cmp	r0, #0
 801bba4:	f43f ae7e 	beq.w	801b8a4 <_strtod_l+0x43c>
 801bba8:	2d00      	cmp	r5, #0
 801bbaa:	dd08      	ble.n	801bbbe <_strtod_l+0x756>
 801bbac:	462a      	mov	r2, r5
 801bbae:	9905      	ldr	r1, [sp, #20]
 801bbb0:	4648      	mov	r0, r9
 801bbb2:	f001 ff47 	bl	801da44 <__lshift>
 801bbb6:	9005      	str	r0, [sp, #20]
 801bbb8:	2800      	cmp	r0, #0
 801bbba:	f43f ae73 	beq.w	801b8a4 <_strtod_l+0x43c>
 801bbbe:	2f00      	cmp	r7, #0
 801bbc0:	dd08      	ble.n	801bbd4 <_strtod_l+0x76c>
 801bbc2:	4641      	mov	r1, r8
 801bbc4:	463a      	mov	r2, r7
 801bbc6:	4648      	mov	r0, r9
 801bbc8:	f001 ff3c 	bl	801da44 <__lshift>
 801bbcc:	4680      	mov	r8, r0
 801bbce:	2800      	cmp	r0, #0
 801bbd0:	f43f ae68 	beq.w	801b8a4 <_strtod_l+0x43c>
 801bbd4:	9a05      	ldr	r2, [sp, #20]
 801bbd6:	991c      	ldr	r1, [sp, #112]	; 0x70
 801bbd8:	4648      	mov	r0, r9
 801bbda:	f001 ffa1 	bl	801db20 <__mdiff>
 801bbde:	4604      	mov	r4, r0
 801bbe0:	2800      	cmp	r0, #0
 801bbe2:	f43f ae5f 	beq.w	801b8a4 <_strtod_l+0x43c>
 801bbe6:	68c3      	ldr	r3, [r0, #12]
 801bbe8:	930c      	str	r3, [sp, #48]	; 0x30
 801bbea:	2300      	movs	r3, #0
 801bbec:	60c3      	str	r3, [r0, #12]
 801bbee:	4641      	mov	r1, r8
 801bbf0:	f001 ff7c 	bl	801daec <__mcmp>
 801bbf4:	2800      	cmp	r0, #0
 801bbf6:	da55      	bge.n	801bca4 <_strtod_l+0x83c>
 801bbf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bbfa:	b9e3      	cbnz	r3, 801bc36 <_strtod_l+0x7ce>
 801bbfc:	f1ba 0f00 	cmp.w	sl, #0
 801bc00:	d119      	bne.n	801bc36 <_strtod_l+0x7ce>
 801bc02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bc06:	b9b3      	cbnz	r3, 801bc36 <_strtod_l+0x7ce>
 801bc08:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bc0c:	0d1b      	lsrs	r3, r3, #20
 801bc0e:	051b      	lsls	r3, r3, #20
 801bc10:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801bc14:	d90f      	bls.n	801bc36 <_strtod_l+0x7ce>
 801bc16:	6963      	ldr	r3, [r4, #20]
 801bc18:	b913      	cbnz	r3, 801bc20 <_strtod_l+0x7b8>
 801bc1a:	6923      	ldr	r3, [r4, #16]
 801bc1c:	2b01      	cmp	r3, #1
 801bc1e:	dd0a      	ble.n	801bc36 <_strtod_l+0x7ce>
 801bc20:	4621      	mov	r1, r4
 801bc22:	2201      	movs	r2, #1
 801bc24:	4648      	mov	r0, r9
 801bc26:	f001 ff0d 	bl	801da44 <__lshift>
 801bc2a:	4641      	mov	r1, r8
 801bc2c:	4604      	mov	r4, r0
 801bc2e:	f001 ff5d 	bl	801daec <__mcmp>
 801bc32:	2800      	cmp	r0, #0
 801bc34:	dc67      	bgt.n	801bd06 <_strtod_l+0x89e>
 801bc36:	9b04      	ldr	r3, [sp, #16]
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d171      	bne.n	801bd20 <_strtod_l+0x8b8>
 801bc3c:	e63d      	b.n	801b8ba <_strtod_l+0x452>
 801bc3e:	f018 0f01 	tst.w	r8, #1
 801bc42:	d004      	beq.n	801bc4e <_strtod_l+0x7e6>
 801bc44:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bc48:	f7e4 fce6 	bl	8000618 <__aeabi_dmul>
 801bc4c:	2301      	movs	r3, #1
 801bc4e:	ea4f 0868 	mov.w	r8, r8, asr #1
 801bc52:	3508      	adds	r5, #8
 801bc54:	e6e5      	b.n	801ba22 <_strtod_l+0x5ba>
 801bc56:	f04f 32ff 	mov.w	r2, #4294967295
 801bc5a:	fa02 f303 	lsl.w	r3, r2, r3
 801bc5e:	ea03 0a0a 	and.w	sl, r3, sl
 801bc62:	e6ff      	b.n	801ba64 <_strtod_l+0x5fc>
 801bc64:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801bc68:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801bc6c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801bc70:	36e2      	adds	r6, #226	; 0xe2
 801bc72:	fa01 f306 	lsl.w	r3, r1, r6
 801bc76:	930a      	str	r3, [sp, #40]	; 0x28
 801bc78:	910f      	str	r1, [sp, #60]	; 0x3c
 801bc7a:	e75d      	b.n	801bb38 <_strtod_l+0x6d0>
 801bc7c:	2300      	movs	r3, #0
 801bc7e:	930a      	str	r3, [sp, #40]	; 0x28
 801bc80:	2301      	movs	r3, #1
 801bc82:	930f      	str	r3, [sp, #60]	; 0x3c
 801bc84:	e758      	b.n	801bb38 <_strtod_l+0x6d0>
 801bc86:	4632      	mov	r2, r6
 801bc88:	991c      	ldr	r1, [sp, #112]	; 0x70
 801bc8a:	4648      	mov	r0, r9
 801bc8c:	f001 feda 	bl	801da44 <__lshift>
 801bc90:	901c      	str	r0, [sp, #112]	; 0x70
 801bc92:	2800      	cmp	r0, #0
 801bc94:	f47f af7c 	bne.w	801bb90 <_strtod_l+0x728>
 801bc98:	e604      	b.n	801b8a4 <_strtod_l+0x43c>
 801bc9a:	bf00      	nop
 801bc9c:	08023ba0 	.word	0x08023ba0
 801bca0:	fffffc02 	.word	0xfffffc02
 801bca4:	465d      	mov	r5, fp
 801bca6:	f040 8086 	bne.w	801bdb6 <_strtod_l+0x94e>
 801bcaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bcac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bcb0:	b32a      	cbz	r2, 801bcfe <_strtod_l+0x896>
 801bcb2:	4aaf      	ldr	r2, [pc, #700]	; (801bf70 <_strtod_l+0xb08>)
 801bcb4:	4293      	cmp	r3, r2
 801bcb6:	d153      	bne.n	801bd60 <_strtod_l+0x8f8>
 801bcb8:	9b04      	ldr	r3, [sp, #16]
 801bcba:	4650      	mov	r0, sl
 801bcbc:	b1d3      	cbz	r3, 801bcf4 <_strtod_l+0x88c>
 801bcbe:	4aad      	ldr	r2, [pc, #692]	; (801bf74 <_strtod_l+0xb0c>)
 801bcc0:	402a      	ands	r2, r5
 801bcc2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801bcc6:	f04f 31ff 	mov.w	r1, #4294967295
 801bcca:	d816      	bhi.n	801bcfa <_strtod_l+0x892>
 801bccc:	0d12      	lsrs	r2, r2, #20
 801bcce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801bcd2:	fa01 f303 	lsl.w	r3, r1, r3
 801bcd6:	4298      	cmp	r0, r3
 801bcd8:	d142      	bne.n	801bd60 <_strtod_l+0x8f8>
 801bcda:	4ba7      	ldr	r3, [pc, #668]	; (801bf78 <_strtod_l+0xb10>)
 801bcdc:	429d      	cmp	r5, r3
 801bcde:	d102      	bne.n	801bce6 <_strtod_l+0x87e>
 801bce0:	3001      	adds	r0, #1
 801bce2:	f43f addf 	beq.w	801b8a4 <_strtod_l+0x43c>
 801bce6:	4ba3      	ldr	r3, [pc, #652]	; (801bf74 <_strtod_l+0xb0c>)
 801bce8:	402b      	ands	r3, r5
 801bcea:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801bcee:	f04f 0a00 	mov.w	sl, #0
 801bcf2:	e7a0      	b.n	801bc36 <_strtod_l+0x7ce>
 801bcf4:	f04f 33ff 	mov.w	r3, #4294967295
 801bcf8:	e7ed      	b.n	801bcd6 <_strtod_l+0x86e>
 801bcfa:	460b      	mov	r3, r1
 801bcfc:	e7eb      	b.n	801bcd6 <_strtod_l+0x86e>
 801bcfe:	bb7b      	cbnz	r3, 801bd60 <_strtod_l+0x8f8>
 801bd00:	f1ba 0f00 	cmp.w	sl, #0
 801bd04:	d12c      	bne.n	801bd60 <_strtod_l+0x8f8>
 801bd06:	9904      	ldr	r1, [sp, #16]
 801bd08:	4a9a      	ldr	r2, [pc, #616]	; (801bf74 <_strtod_l+0xb0c>)
 801bd0a:	465b      	mov	r3, fp
 801bd0c:	b1f1      	cbz	r1, 801bd4c <_strtod_l+0x8e4>
 801bd0e:	ea02 010b 	and.w	r1, r2, fp
 801bd12:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801bd16:	dc19      	bgt.n	801bd4c <_strtod_l+0x8e4>
 801bd18:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801bd1c:	f77f ae5b 	ble.w	801b9d6 <_strtod_l+0x56e>
 801bd20:	4a96      	ldr	r2, [pc, #600]	; (801bf7c <_strtod_l+0xb14>)
 801bd22:	2300      	movs	r3, #0
 801bd24:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 801bd28:	4650      	mov	r0, sl
 801bd2a:	4659      	mov	r1, fp
 801bd2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801bd30:	f7e4 fc72 	bl	8000618 <__aeabi_dmul>
 801bd34:	4682      	mov	sl, r0
 801bd36:	468b      	mov	fp, r1
 801bd38:	2900      	cmp	r1, #0
 801bd3a:	f47f adbe 	bne.w	801b8ba <_strtod_l+0x452>
 801bd3e:	2800      	cmp	r0, #0
 801bd40:	f47f adbb 	bne.w	801b8ba <_strtod_l+0x452>
 801bd44:	2322      	movs	r3, #34	; 0x22
 801bd46:	f8c9 3000 	str.w	r3, [r9]
 801bd4a:	e5b6      	b.n	801b8ba <_strtod_l+0x452>
 801bd4c:	4013      	ands	r3, r2
 801bd4e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801bd52:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801bd56:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801bd5a:	f04f 3aff 	mov.w	sl, #4294967295
 801bd5e:	e76a      	b.n	801bc36 <_strtod_l+0x7ce>
 801bd60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd62:	b193      	cbz	r3, 801bd8a <_strtod_l+0x922>
 801bd64:	422b      	tst	r3, r5
 801bd66:	f43f af66 	beq.w	801bc36 <_strtod_l+0x7ce>
 801bd6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bd6c:	9a04      	ldr	r2, [sp, #16]
 801bd6e:	4650      	mov	r0, sl
 801bd70:	4659      	mov	r1, fp
 801bd72:	b173      	cbz	r3, 801bd92 <_strtod_l+0x92a>
 801bd74:	f7ff fb5a 	bl	801b42c <sulp>
 801bd78:	4602      	mov	r2, r0
 801bd7a:	460b      	mov	r3, r1
 801bd7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801bd80:	f7e4 fa94 	bl	80002ac <__adddf3>
 801bd84:	4682      	mov	sl, r0
 801bd86:	468b      	mov	fp, r1
 801bd88:	e755      	b.n	801bc36 <_strtod_l+0x7ce>
 801bd8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bd8c:	ea13 0f0a 	tst.w	r3, sl
 801bd90:	e7e9      	b.n	801bd66 <_strtod_l+0x8fe>
 801bd92:	f7ff fb4b 	bl	801b42c <sulp>
 801bd96:	4602      	mov	r2, r0
 801bd98:	460b      	mov	r3, r1
 801bd9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801bd9e:	f7e4 fa83 	bl	80002a8 <__aeabi_dsub>
 801bda2:	2200      	movs	r2, #0
 801bda4:	2300      	movs	r3, #0
 801bda6:	4682      	mov	sl, r0
 801bda8:	468b      	mov	fp, r1
 801bdaa:	f7e4 fe9d 	bl	8000ae8 <__aeabi_dcmpeq>
 801bdae:	2800      	cmp	r0, #0
 801bdb0:	f47f ae11 	bne.w	801b9d6 <_strtod_l+0x56e>
 801bdb4:	e73f      	b.n	801bc36 <_strtod_l+0x7ce>
 801bdb6:	4641      	mov	r1, r8
 801bdb8:	4620      	mov	r0, r4
 801bdba:	f001 ffd4 	bl	801dd66 <__ratio>
 801bdbe:	ec57 6b10 	vmov	r6, r7, d0
 801bdc2:	2200      	movs	r2, #0
 801bdc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801bdc8:	ee10 0a10 	vmov	r0, s0
 801bdcc:	4639      	mov	r1, r7
 801bdce:	f7e4 fe9f 	bl	8000b10 <__aeabi_dcmple>
 801bdd2:	2800      	cmp	r0, #0
 801bdd4:	d077      	beq.n	801bec6 <_strtod_l+0xa5e>
 801bdd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bdd8:	2b00      	cmp	r3, #0
 801bdda:	d04a      	beq.n	801be72 <_strtod_l+0xa0a>
 801bddc:	4b68      	ldr	r3, [pc, #416]	; (801bf80 <_strtod_l+0xb18>)
 801bdde:	2200      	movs	r2, #0
 801bde0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801bde4:	4f66      	ldr	r7, [pc, #408]	; (801bf80 <_strtod_l+0xb18>)
 801bde6:	2600      	movs	r6, #0
 801bde8:	4b62      	ldr	r3, [pc, #392]	; (801bf74 <_strtod_l+0xb0c>)
 801bdea:	402b      	ands	r3, r5
 801bdec:	930f      	str	r3, [sp, #60]	; 0x3c
 801bdee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bdf0:	4b64      	ldr	r3, [pc, #400]	; (801bf84 <_strtod_l+0xb1c>)
 801bdf2:	429a      	cmp	r2, r3
 801bdf4:	f040 80ce 	bne.w	801bf94 <_strtod_l+0xb2c>
 801bdf8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801bdfc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801be00:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801be04:	ec4b ab10 	vmov	d0, sl, fp
 801be08:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801be0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801be10:	f001 fee4 	bl	801dbdc <__ulp>
 801be14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801be18:	ec53 2b10 	vmov	r2, r3, d0
 801be1c:	f7e4 fbfc 	bl	8000618 <__aeabi_dmul>
 801be20:	4652      	mov	r2, sl
 801be22:	465b      	mov	r3, fp
 801be24:	f7e4 fa42 	bl	80002ac <__adddf3>
 801be28:	460b      	mov	r3, r1
 801be2a:	4952      	ldr	r1, [pc, #328]	; (801bf74 <_strtod_l+0xb0c>)
 801be2c:	4a56      	ldr	r2, [pc, #344]	; (801bf88 <_strtod_l+0xb20>)
 801be2e:	4019      	ands	r1, r3
 801be30:	4291      	cmp	r1, r2
 801be32:	4682      	mov	sl, r0
 801be34:	d95b      	bls.n	801beee <_strtod_l+0xa86>
 801be36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be38:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801be3c:	4293      	cmp	r3, r2
 801be3e:	d103      	bne.n	801be48 <_strtod_l+0x9e0>
 801be40:	9b08      	ldr	r3, [sp, #32]
 801be42:	3301      	adds	r3, #1
 801be44:	f43f ad2e 	beq.w	801b8a4 <_strtod_l+0x43c>
 801be48:	f8df b12c 	ldr.w	fp, [pc, #300]	; 801bf78 <_strtod_l+0xb10>
 801be4c:	f04f 3aff 	mov.w	sl, #4294967295
 801be50:	991c      	ldr	r1, [sp, #112]	; 0x70
 801be52:	4648      	mov	r0, r9
 801be54:	f001 fc2a 	bl	801d6ac <_Bfree>
 801be58:	9905      	ldr	r1, [sp, #20]
 801be5a:	4648      	mov	r0, r9
 801be5c:	f001 fc26 	bl	801d6ac <_Bfree>
 801be60:	4641      	mov	r1, r8
 801be62:	4648      	mov	r0, r9
 801be64:	f001 fc22 	bl	801d6ac <_Bfree>
 801be68:	4621      	mov	r1, r4
 801be6a:	4648      	mov	r0, r9
 801be6c:	f001 fc1e 	bl	801d6ac <_Bfree>
 801be70:	e619      	b.n	801baa6 <_strtod_l+0x63e>
 801be72:	f1ba 0f00 	cmp.w	sl, #0
 801be76:	d11a      	bne.n	801beae <_strtod_l+0xa46>
 801be78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801be7c:	b9eb      	cbnz	r3, 801beba <_strtod_l+0xa52>
 801be7e:	2200      	movs	r2, #0
 801be80:	4b3f      	ldr	r3, [pc, #252]	; (801bf80 <_strtod_l+0xb18>)
 801be82:	4630      	mov	r0, r6
 801be84:	4639      	mov	r1, r7
 801be86:	f7e4 fe39 	bl	8000afc <__aeabi_dcmplt>
 801be8a:	b9c8      	cbnz	r0, 801bec0 <_strtod_l+0xa58>
 801be8c:	4630      	mov	r0, r6
 801be8e:	4639      	mov	r1, r7
 801be90:	2200      	movs	r2, #0
 801be92:	4b3e      	ldr	r3, [pc, #248]	; (801bf8c <_strtod_l+0xb24>)
 801be94:	f7e4 fbc0 	bl	8000618 <__aeabi_dmul>
 801be98:	4606      	mov	r6, r0
 801be9a:	460f      	mov	r7, r1
 801be9c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801bea0:	9618      	str	r6, [sp, #96]	; 0x60
 801bea2:	9319      	str	r3, [sp, #100]	; 0x64
 801bea4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 801bea8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801beac:	e79c      	b.n	801bde8 <_strtod_l+0x980>
 801beae:	f1ba 0f01 	cmp.w	sl, #1
 801beb2:	d102      	bne.n	801beba <_strtod_l+0xa52>
 801beb4:	2d00      	cmp	r5, #0
 801beb6:	f43f ad8e 	beq.w	801b9d6 <_strtod_l+0x56e>
 801beba:	2200      	movs	r2, #0
 801bebc:	4b34      	ldr	r3, [pc, #208]	; (801bf90 <_strtod_l+0xb28>)
 801bebe:	e78f      	b.n	801bde0 <_strtod_l+0x978>
 801bec0:	2600      	movs	r6, #0
 801bec2:	4f32      	ldr	r7, [pc, #200]	; (801bf8c <_strtod_l+0xb24>)
 801bec4:	e7ea      	b.n	801be9c <_strtod_l+0xa34>
 801bec6:	4b31      	ldr	r3, [pc, #196]	; (801bf8c <_strtod_l+0xb24>)
 801bec8:	4630      	mov	r0, r6
 801beca:	4639      	mov	r1, r7
 801becc:	2200      	movs	r2, #0
 801bece:	f7e4 fba3 	bl	8000618 <__aeabi_dmul>
 801bed2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bed4:	4606      	mov	r6, r0
 801bed6:	460f      	mov	r7, r1
 801bed8:	b933      	cbnz	r3, 801bee8 <_strtod_l+0xa80>
 801beda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bede:	9010      	str	r0, [sp, #64]	; 0x40
 801bee0:	9311      	str	r3, [sp, #68]	; 0x44
 801bee2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801bee6:	e7df      	b.n	801bea8 <_strtod_l+0xa40>
 801bee8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801beec:	e7f9      	b.n	801bee2 <_strtod_l+0xa7a>
 801beee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801bef2:	9b04      	ldr	r3, [sp, #16]
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d1ab      	bne.n	801be50 <_strtod_l+0x9e8>
 801bef8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801befc:	0d1b      	lsrs	r3, r3, #20
 801befe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bf00:	051b      	lsls	r3, r3, #20
 801bf02:	429a      	cmp	r2, r3
 801bf04:	465d      	mov	r5, fp
 801bf06:	d1a3      	bne.n	801be50 <_strtod_l+0x9e8>
 801bf08:	4639      	mov	r1, r7
 801bf0a:	4630      	mov	r0, r6
 801bf0c:	f7e4 fe34 	bl	8000b78 <__aeabi_d2iz>
 801bf10:	f7e4 fb18 	bl	8000544 <__aeabi_i2d>
 801bf14:	460b      	mov	r3, r1
 801bf16:	4602      	mov	r2, r0
 801bf18:	4639      	mov	r1, r7
 801bf1a:	4630      	mov	r0, r6
 801bf1c:	f7e4 f9c4 	bl	80002a8 <__aeabi_dsub>
 801bf20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bf22:	4606      	mov	r6, r0
 801bf24:	460f      	mov	r7, r1
 801bf26:	b933      	cbnz	r3, 801bf36 <_strtod_l+0xace>
 801bf28:	f1ba 0f00 	cmp.w	sl, #0
 801bf2c:	d103      	bne.n	801bf36 <_strtod_l+0xace>
 801bf2e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801bf32:	2d00      	cmp	r5, #0
 801bf34:	d06d      	beq.n	801c012 <_strtod_l+0xbaa>
 801bf36:	a30a      	add	r3, pc, #40	; (adr r3, 801bf60 <_strtod_l+0xaf8>)
 801bf38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf3c:	4630      	mov	r0, r6
 801bf3e:	4639      	mov	r1, r7
 801bf40:	f7e4 fddc 	bl	8000afc <__aeabi_dcmplt>
 801bf44:	2800      	cmp	r0, #0
 801bf46:	f47f acb8 	bne.w	801b8ba <_strtod_l+0x452>
 801bf4a:	a307      	add	r3, pc, #28	; (adr r3, 801bf68 <_strtod_l+0xb00>)
 801bf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf50:	4630      	mov	r0, r6
 801bf52:	4639      	mov	r1, r7
 801bf54:	f7e4 fdf0 	bl	8000b38 <__aeabi_dcmpgt>
 801bf58:	2800      	cmp	r0, #0
 801bf5a:	f43f af79 	beq.w	801be50 <_strtod_l+0x9e8>
 801bf5e:	e4ac      	b.n	801b8ba <_strtod_l+0x452>
 801bf60:	94a03595 	.word	0x94a03595
 801bf64:	3fdfffff 	.word	0x3fdfffff
 801bf68:	35afe535 	.word	0x35afe535
 801bf6c:	3fe00000 	.word	0x3fe00000
 801bf70:	000fffff 	.word	0x000fffff
 801bf74:	7ff00000 	.word	0x7ff00000
 801bf78:	7fefffff 	.word	0x7fefffff
 801bf7c:	39500000 	.word	0x39500000
 801bf80:	3ff00000 	.word	0x3ff00000
 801bf84:	7fe00000 	.word	0x7fe00000
 801bf88:	7c9fffff 	.word	0x7c9fffff
 801bf8c:	3fe00000 	.word	0x3fe00000
 801bf90:	bff00000 	.word	0xbff00000
 801bf94:	9b04      	ldr	r3, [sp, #16]
 801bf96:	b333      	cbz	r3, 801bfe6 <_strtod_l+0xb7e>
 801bf98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bf9a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801bf9e:	d822      	bhi.n	801bfe6 <_strtod_l+0xb7e>
 801bfa0:	a327      	add	r3, pc, #156	; (adr r3, 801c040 <_strtod_l+0xbd8>)
 801bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfa6:	4630      	mov	r0, r6
 801bfa8:	4639      	mov	r1, r7
 801bfaa:	f7e4 fdb1 	bl	8000b10 <__aeabi_dcmple>
 801bfae:	b1a0      	cbz	r0, 801bfda <_strtod_l+0xb72>
 801bfb0:	4639      	mov	r1, r7
 801bfb2:	4630      	mov	r0, r6
 801bfb4:	f7e4 fe08 	bl	8000bc8 <__aeabi_d2uiz>
 801bfb8:	2800      	cmp	r0, #0
 801bfba:	bf08      	it	eq
 801bfbc:	2001      	moveq	r0, #1
 801bfbe:	f7e4 fab1 	bl	8000524 <__aeabi_ui2d>
 801bfc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bfc4:	4606      	mov	r6, r0
 801bfc6:	460f      	mov	r7, r1
 801bfc8:	bb03      	cbnz	r3, 801c00c <_strtod_l+0xba4>
 801bfca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bfce:	9012      	str	r0, [sp, #72]	; 0x48
 801bfd0:	9313      	str	r3, [sp, #76]	; 0x4c
 801bfd2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801bfd6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801bfda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bfdc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bfde:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801bfe2:	1a9b      	subs	r3, r3, r2
 801bfe4:	930b      	str	r3, [sp, #44]	; 0x2c
 801bfe6:	ed9d 0b08 	vldr	d0, [sp, #32]
 801bfea:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801bfee:	f001 fdf5 	bl	801dbdc <__ulp>
 801bff2:	4650      	mov	r0, sl
 801bff4:	ec53 2b10 	vmov	r2, r3, d0
 801bff8:	4659      	mov	r1, fp
 801bffa:	f7e4 fb0d 	bl	8000618 <__aeabi_dmul>
 801bffe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c002:	f7e4 f953 	bl	80002ac <__adddf3>
 801c006:	4682      	mov	sl, r0
 801c008:	468b      	mov	fp, r1
 801c00a:	e772      	b.n	801bef2 <_strtod_l+0xa8a>
 801c00c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 801c010:	e7df      	b.n	801bfd2 <_strtod_l+0xb6a>
 801c012:	a30d      	add	r3, pc, #52	; (adr r3, 801c048 <_strtod_l+0xbe0>)
 801c014:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c018:	f7e4 fd70 	bl	8000afc <__aeabi_dcmplt>
 801c01c:	e79c      	b.n	801bf58 <_strtod_l+0xaf0>
 801c01e:	2300      	movs	r3, #0
 801c020:	930d      	str	r3, [sp, #52]	; 0x34
 801c022:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c024:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c026:	6013      	str	r3, [r2, #0]
 801c028:	f7ff ba61 	b.w	801b4ee <_strtod_l+0x86>
 801c02c:	2b65      	cmp	r3, #101	; 0x65
 801c02e:	f04f 0200 	mov.w	r2, #0
 801c032:	f43f ab4e 	beq.w	801b6d2 <_strtod_l+0x26a>
 801c036:	2101      	movs	r1, #1
 801c038:	4614      	mov	r4, r2
 801c03a:	9104      	str	r1, [sp, #16]
 801c03c:	f7ff bacb 	b.w	801b5d6 <_strtod_l+0x16e>
 801c040:	ffc00000 	.word	0xffc00000
 801c044:	41dfffff 	.word	0x41dfffff
 801c048:	94a03595 	.word	0x94a03595
 801c04c:	3fcfffff 	.word	0x3fcfffff

0801c050 <strtod>:
 801c050:	4b07      	ldr	r3, [pc, #28]	; (801c070 <strtod+0x20>)
 801c052:	4a08      	ldr	r2, [pc, #32]	; (801c074 <strtod+0x24>)
 801c054:	b410      	push	{r4}
 801c056:	681c      	ldr	r4, [r3, #0]
 801c058:	6a23      	ldr	r3, [r4, #32]
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	bf08      	it	eq
 801c05e:	4613      	moveq	r3, r2
 801c060:	460a      	mov	r2, r1
 801c062:	4601      	mov	r1, r0
 801c064:	4620      	mov	r0, r4
 801c066:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c06a:	f7ff b9fd 	b.w	801b468 <_strtod_l>
 801c06e:	bf00      	nop
 801c070:	20000084 	.word	0x20000084
 801c074:	200000e8 	.word	0x200000e8

0801c078 <_strtol_l.isra.0>:
 801c078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c07c:	4680      	mov	r8, r0
 801c07e:	4689      	mov	r9, r1
 801c080:	4692      	mov	sl, r2
 801c082:	461e      	mov	r6, r3
 801c084:	460f      	mov	r7, r1
 801c086:	463d      	mov	r5, r7
 801c088:	9808      	ldr	r0, [sp, #32]
 801c08a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c08e:	f7fe fb7d 	bl	801a78c <__locale_ctype_ptr_l>
 801c092:	4420      	add	r0, r4
 801c094:	7843      	ldrb	r3, [r0, #1]
 801c096:	f013 0308 	ands.w	r3, r3, #8
 801c09a:	d132      	bne.n	801c102 <_strtol_l.isra.0+0x8a>
 801c09c:	2c2d      	cmp	r4, #45	; 0x2d
 801c09e:	d132      	bne.n	801c106 <_strtol_l.isra.0+0x8e>
 801c0a0:	787c      	ldrb	r4, [r7, #1]
 801c0a2:	1cbd      	adds	r5, r7, #2
 801c0a4:	2201      	movs	r2, #1
 801c0a6:	2e00      	cmp	r6, #0
 801c0a8:	d05d      	beq.n	801c166 <_strtol_l.isra.0+0xee>
 801c0aa:	2e10      	cmp	r6, #16
 801c0ac:	d109      	bne.n	801c0c2 <_strtol_l.isra.0+0x4a>
 801c0ae:	2c30      	cmp	r4, #48	; 0x30
 801c0b0:	d107      	bne.n	801c0c2 <_strtol_l.isra.0+0x4a>
 801c0b2:	782b      	ldrb	r3, [r5, #0]
 801c0b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c0b8:	2b58      	cmp	r3, #88	; 0x58
 801c0ba:	d14f      	bne.n	801c15c <_strtol_l.isra.0+0xe4>
 801c0bc:	786c      	ldrb	r4, [r5, #1]
 801c0be:	2610      	movs	r6, #16
 801c0c0:	3502      	adds	r5, #2
 801c0c2:	2a00      	cmp	r2, #0
 801c0c4:	bf14      	ite	ne
 801c0c6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801c0ca:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801c0ce:	2700      	movs	r7, #0
 801c0d0:	fbb1 fcf6 	udiv	ip, r1, r6
 801c0d4:	4638      	mov	r0, r7
 801c0d6:	fb06 1e1c 	mls	lr, r6, ip, r1
 801c0da:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801c0de:	2b09      	cmp	r3, #9
 801c0e0:	d817      	bhi.n	801c112 <_strtol_l.isra.0+0x9a>
 801c0e2:	461c      	mov	r4, r3
 801c0e4:	42a6      	cmp	r6, r4
 801c0e6:	dd23      	ble.n	801c130 <_strtol_l.isra.0+0xb8>
 801c0e8:	1c7b      	adds	r3, r7, #1
 801c0ea:	d007      	beq.n	801c0fc <_strtol_l.isra.0+0x84>
 801c0ec:	4584      	cmp	ip, r0
 801c0ee:	d31c      	bcc.n	801c12a <_strtol_l.isra.0+0xb2>
 801c0f0:	d101      	bne.n	801c0f6 <_strtol_l.isra.0+0x7e>
 801c0f2:	45a6      	cmp	lr, r4
 801c0f4:	db19      	blt.n	801c12a <_strtol_l.isra.0+0xb2>
 801c0f6:	fb00 4006 	mla	r0, r0, r6, r4
 801c0fa:	2701      	movs	r7, #1
 801c0fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c100:	e7eb      	b.n	801c0da <_strtol_l.isra.0+0x62>
 801c102:	462f      	mov	r7, r5
 801c104:	e7bf      	b.n	801c086 <_strtol_l.isra.0+0xe>
 801c106:	2c2b      	cmp	r4, #43	; 0x2b
 801c108:	bf04      	itt	eq
 801c10a:	1cbd      	addeq	r5, r7, #2
 801c10c:	787c      	ldrbeq	r4, [r7, #1]
 801c10e:	461a      	mov	r2, r3
 801c110:	e7c9      	b.n	801c0a6 <_strtol_l.isra.0+0x2e>
 801c112:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801c116:	2b19      	cmp	r3, #25
 801c118:	d801      	bhi.n	801c11e <_strtol_l.isra.0+0xa6>
 801c11a:	3c37      	subs	r4, #55	; 0x37
 801c11c:	e7e2      	b.n	801c0e4 <_strtol_l.isra.0+0x6c>
 801c11e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801c122:	2b19      	cmp	r3, #25
 801c124:	d804      	bhi.n	801c130 <_strtol_l.isra.0+0xb8>
 801c126:	3c57      	subs	r4, #87	; 0x57
 801c128:	e7dc      	b.n	801c0e4 <_strtol_l.isra.0+0x6c>
 801c12a:	f04f 37ff 	mov.w	r7, #4294967295
 801c12e:	e7e5      	b.n	801c0fc <_strtol_l.isra.0+0x84>
 801c130:	1c7b      	adds	r3, r7, #1
 801c132:	d108      	bne.n	801c146 <_strtol_l.isra.0+0xce>
 801c134:	2322      	movs	r3, #34	; 0x22
 801c136:	f8c8 3000 	str.w	r3, [r8]
 801c13a:	4608      	mov	r0, r1
 801c13c:	f1ba 0f00 	cmp.w	sl, #0
 801c140:	d107      	bne.n	801c152 <_strtol_l.isra.0+0xda>
 801c142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c146:	b102      	cbz	r2, 801c14a <_strtol_l.isra.0+0xd2>
 801c148:	4240      	negs	r0, r0
 801c14a:	f1ba 0f00 	cmp.w	sl, #0
 801c14e:	d0f8      	beq.n	801c142 <_strtol_l.isra.0+0xca>
 801c150:	b10f      	cbz	r7, 801c156 <_strtol_l.isra.0+0xde>
 801c152:	f105 39ff 	add.w	r9, r5, #4294967295
 801c156:	f8ca 9000 	str.w	r9, [sl]
 801c15a:	e7f2      	b.n	801c142 <_strtol_l.isra.0+0xca>
 801c15c:	2430      	movs	r4, #48	; 0x30
 801c15e:	2e00      	cmp	r6, #0
 801c160:	d1af      	bne.n	801c0c2 <_strtol_l.isra.0+0x4a>
 801c162:	2608      	movs	r6, #8
 801c164:	e7ad      	b.n	801c0c2 <_strtol_l.isra.0+0x4a>
 801c166:	2c30      	cmp	r4, #48	; 0x30
 801c168:	d0a3      	beq.n	801c0b2 <_strtol_l.isra.0+0x3a>
 801c16a:	260a      	movs	r6, #10
 801c16c:	e7a9      	b.n	801c0c2 <_strtol_l.isra.0+0x4a>
	...

0801c170 <strtol>:
 801c170:	4b08      	ldr	r3, [pc, #32]	; (801c194 <strtol+0x24>)
 801c172:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c174:	681c      	ldr	r4, [r3, #0]
 801c176:	4d08      	ldr	r5, [pc, #32]	; (801c198 <strtol+0x28>)
 801c178:	6a23      	ldr	r3, [r4, #32]
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	bf08      	it	eq
 801c17e:	462b      	moveq	r3, r5
 801c180:	9300      	str	r3, [sp, #0]
 801c182:	4613      	mov	r3, r2
 801c184:	460a      	mov	r2, r1
 801c186:	4601      	mov	r1, r0
 801c188:	4620      	mov	r0, r4
 801c18a:	f7ff ff75 	bl	801c078 <_strtol_l.isra.0>
 801c18e:	b003      	add	sp, #12
 801c190:	bd30      	pop	{r4, r5, pc}
 801c192:	bf00      	nop
 801c194:	20000084 	.word	0x20000084
 801c198:	200000e8 	.word	0x200000e8

0801c19c <__ascii_wctomb>:
 801c19c:	b149      	cbz	r1, 801c1b2 <__ascii_wctomb+0x16>
 801c19e:	2aff      	cmp	r2, #255	; 0xff
 801c1a0:	bf85      	ittet	hi
 801c1a2:	238a      	movhi	r3, #138	; 0x8a
 801c1a4:	6003      	strhi	r3, [r0, #0]
 801c1a6:	700a      	strbls	r2, [r1, #0]
 801c1a8:	f04f 30ff 	movhi.w	r0, #4294967295
 801c1ac:	bf98      	it	ls
 801c1ae:	2001      	movls	r0, #1
 801c1b0:	4770      	bx	lr
 801c1b2:	4608      	mov	r0, r1
 801c1b4:	4770      	bx	lr

0801c1b6 <quorem>:
 801c1b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1ba:	6903      	ldr	r3, [r0, #16]
 801c1bc:	690c      	ldr	r4, [r1, #16]
 801c1be:	42a3      	cmp	r3, r4
 801c1c0:	4680      	mov	r8, r0
 801c1c2:	f2c0 8082 	blt.w	801c2ca <quorem+0x114>
 801c1c6:	3c01      	subs	r4, #1
 801c1c8:	f101 0714 	add.w	r7, r1, #20
 801c1cc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801c1d0:	f100 0614 	add.w	r6, r0, #20
 801c1d4:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801c1d8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801c1dc:	eb06 030c 	add.w	r3, r6, ip
 801c1e0:	3501      	adds	r5, #1
 801c1e2:	eb07 090c 	add.w	r9, r7, ip
 801c1e6:	9301      	str	r3, [sp, #4]
 801c1e8:	fbb0 f5f5 	udiv	r5, r0, r5
 801c1ec:	b395      	cbz	r5, 801c254 <quorem+0x9e>
 801c1ee:	f04f 0a00 	mov.w	sl, #0
 801c1f2:	4638      	mov	r0, r7
 801c1f4:	46b6      	mov	lr, r6
 801c1f6:	46d3      	mov	fp, sl
 801c1f8:	f850 2b04 	ldr.w	r2, [r0], #4
 801c1fc:	b293      	uxth	r3, r2
 801c1fe:	fb05 a303 	mla	r3, r5, r3, sl
 801c202:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c206:	b29b      	uxth	r3, r3
 801c208:	ebab 0303 	sub.w	r3, fp, r3
 801c20c:	0c12      	lsrs	r2, r2, #16
 801c20e:	f8de b000 	ldr.w	fp, [lr]
 801c212:	fb05 a202 	mla	r2, r5, r2, sl
 801c216:	fa13 f38b 	uxtah	r3, r3, fp
 801c21a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801c21e:	fa1f fb82 	uxth.w	fp, r2
 801c222:	f8de 2000 	ldr.w	r2, [lr]
 801c226:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801c22a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c22e:	b29b      	uxth	r3, r3
 801c230:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c234:	4581      	cmp	r9, r0
 801c236:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801c23a:	f84e 3b04 	str.w	r3, [lr], #4
 801c23e:	d2db      	bcs.n	801c1f8 <quorem+0x42>
 801c240:	f856 300c 	ldr.w	r3, [r6, ip]
 801c244:	b933      	cbnz	r3, 801c254 <quorem+0x9e>
 801c246:	9b01      	ldr	r3, [sp, #4]
 801c248:	3b04      	subs	r3, #4
 801c24a:	429e      	cmp	r6, r3
 801c24c:	461a      	mov	r2, r3
 801c24e:	d330      	bcc.n	801c2b2 <quorem+0xfc>
 801c250:	f8c8 4010 	str.w	r4, [r8, #16]
 801c254:	4640      	mov	r0, r8
 801c256:	f001 fc49 	bl	801daec <__mcmp>
 801c25a:	2800      	cmp	r0, #0
 801c25c:	db25      	blt.n	801c2aa <quorem+0xf4>
 801c25e:	3501      	adds	r5, #1
 801c260:	4630      	mov	r0, r6
 801c262:	f04f 0c00 	mov.w	ip, #0
 801c266:	f857 2b04 	ldr.w	r2, [r7], #4
 801c26a:	f8d0 e000 	ldr.w	lr, [r0]
 801c26e:	b293      	uxth	r3, r2
 801c270:	ebac 0303 	sub.w	r3, ip, r3
 801c274:	0c12      	lsrs	r2, r2, #16
 801c276:	fa13 f38e 	uxtah	r3, r3, lr
 801c27a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c27e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c282:	b29b      	uxth	r3, r3
 801c284:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c288:	45b9      	cmp	r9, r7
 801c28a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c28e:	f840 3b04 	str.w	r3, [r0], #4
 801c292:	d2e8      	bcs.n	801c266 <quorem+0xb0>
 801c294:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801c298:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801c29c:	b92a      	cbnz	r2, 801c2aa <quorem+0xf4>
 801c29e:	3b04      	subs	r3, #4
 801c2a0:	429e      	cmp	r6, r3
 801c2a2:	461a      	mov	r2, r3
 801c2a4:	d30b      	bcc.n	801c2be <quorem+0x108>
 801c2a6:	f8c8 4010 	str.w	r4, [r8, #16]
 801c2aa:	4628      	mov	r0, r5
 801c2ac:	b003      	add	sp, #12
 801c2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2b2:	6812      	ldr	r2, [r2, #0]
 801c2b4:	3b04      	subs	r3, #4
 801c2b6:	2a00      	cmp	r2, #0
 801c2b8:	d1ca      	bne.n	801c250 <quorem+0x9a>
 801c2ba:	3c01      	subs	r4, #1
 801c2bc:	e7c5      	b.n	801c24a <quorem+0x94>
 801c2be:	6812      	ldr	r2, [r2, #0]
 801c2c0:	3b04      	subs	r3, #4
 801c2c2:	2a00      	cmp	r2, #0
 801c2c4:	d1ef      	bne.n	801c2a6 <quorem+0xf0>
 801c2c6:	3c01      	subs	r4, #1
 801c2c8:	e7ea      	b.n	801c2a0 <quorem+0xea>
 801c2ca:	2000      	movs	r0, #0
 801c2cc:	e7ee      	b.n	801c2ac <quorem+0xf6>
	...

0801c2d0 <_dtoa_r>:
 801c2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2d4:	ec57 6b10 	vmov	r6, r7, d0
 801c2d8:	b097      	sub	sp, #92	; 0x5c
 801c2da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c2dc:	9106      	str	r1, [sp, #24]
 801c2de:	4604      	mov	r4, r0
 801c2e0:	920b      	str	r2, [sp, #44]	; 0x2c
 801c2e2:	9312      	str	r3, [sp, #72]	; 0x48
 801c2e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801c2e8:	e9cd 6700 	strd	r6, r7, [sp]
 801c2ec:	b93d      	cbnz	r5, 801c2fe <_dtoa_r+0x2e>
 801c2ee:	2010      	movs	r0, #16
 801c2f0:	f7fe fa5e 	bl	801a7b0 <malloc>
 801c2f4:	6260      	str	r0, [r4, #36]	; 0x24
 801c2f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c2fa:	6005      	str	r5, [r0, #0]
 801c2fc:	60c5      	str	r5, [r0, #12]
 801c2fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c300:	6819      	ldr	r1, [r3, #0]
 801c302:	b151      	cbz	r1, 801c31a <_dtoa_r+0x4a>
 801c304:	685a      	ldr	r2, [r3, #4]
 801c306:	604a      	str	r2, [r1, #4]
 801c308:	2301      	movs	r3, #1
 801c30a:	4093      	lsls	r3, r2
 801c30c:	608b      	str	r3, [r1, #8]
 801c30e:	4620      	mov	r0, r4
 801c310:	f001 f9cc 	bl	801d6ac <_Bfree>
 801c314:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c316:	2200      	movs	r2, #0
 801c318:	601a      	str	r2, [r3, #0]
 801c31a:	1e3b      	subs	r3, r7, #0
 801c31c:	bfbb      	ittet	lt
 801c31e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c322:	9301      	strlt	r3, [sp, #4]
 801c324:	2300      	movge	r3, #0
 801c326:	2201      	movlt	r2, #1
 801c328:	bfac      	ite	ge
 801c32a:	f8c8 3000 	strge.w	r3, [r8]
 801c32e:	f8c8 2000 	strlt.w	r2, [r8]
 801c332:	4baf      	ldr	r3, [pc, #700]	; (801c5f0 <_dtoa_r+0x320>)
 801c334:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c338:	ea33 0308 	bics.w	r3, r3, r8
 801c33c:	d114      	bne.n	801c368 <_dtoa_r+0x98>
 801c33e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c340:	f242 730f 	movw	r3, #9999	; 0x270f
 801c344:	6013      	str	r3, [r2, #0]
 801c346:	9b00      	ldr	r3, [sp, #0]
 801c348:	b923      	cbnz	r3, 801c354 <_dtoa_r+0x84>
 801c34a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801c34e:	2800      	cmp	r0, #0
 801c350:	f000 8542 	beq.w	801cdd8 <_dtoa_r+0xb08>
 801c354:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c356:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801c604 <_dtoa_r+0x334>
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	f000 8544 	beq.w	801cde8 <_dtoa_r+0xb18>
 801c360:	f10b 0303 	add.w	r3, fp, #3
 801c364:	f000 bd3e 	b.w	801cde4 <_dtoa_r+0xb14>
 801c368:	e9dd 6700 	ldrd	r6, r7, [sp]
 801c36c:	2200      	movs	r2, #0
 801c36e:	2300      	movs	r3, #0
 801c370:	4630      	mov	r0, r6
 801c372:	4639      	mov	r1, r7
 801c374:	f7e4 fbb8 	bl	8000ae8 <__aeabi_dcmpeq>
 801c378:	4681      	mov	r9, r0
 801c37a:	b168      	cbz	r0, 801c398 <_dtoa_r+0xc8>
 801c37c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c37e:	2301      	movs	r3, #1
 801c380:	6013      	str	r3, [r2, #0]
 801c382:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c384:	2b00      	cmp	r3, #0
 801c386:	f000 8524 	beq.w	801cdd2 <_dtoa_r+0xb02>
 801c38a:	4b9a      	ldr	r3, [pc, #616]	; (801c5f4 <_dtoa_r+0x324>)
 801c38c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c38e:	f103 3bff 	add.w	fp, r3, #4294967295
 801c392:	6013      	str	r3, [r2, #0]
 801c394:	f000 bd28 	b.w	801cde8 <_dtoa_r+0xb18>
 801c398:	aa14      	add	r2, sp, #80	; 0x50
 801c39a:	a915      	add	r1, sp, #84	; 0x54
 801c39c:	ec47 6b10 	vmov	d0, r6, r7
 801c3a0:	4620      	mov	r0, r4
 801c3a2:	f001 fc91 	bl	801dcc8 <__d2b>
 801c3a6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801c3aa:	9004      	str	r0, [sp, #16]
 801c3ac:	2d00      	cmp	r5, #0
 801c3ae:	d07c      	beq.n	801c4aa <_dtoa_r+0x1da>
 801c3b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801c3b4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 801c3b8:	46b2      	mov	sl, r6
 801c3ba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801c3be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801c3c2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801c3c6:	2200      	movs	r2, #0
 801c3c8:	4b8b      	ldr	r3, [pc, #556]	; (801c5f8 <_dtoa_r+0x328>)
 801c3ca:	4650      	mov	r0, sl
 801c3cc:	4659      	mov	r1, fp
 801c3ce:	f7e3 ff6b 	bl	80002a8 <__aeabi_dsub>
 801c3d2:	a381      	add	r3, pc, #516	; (adr r3, 801c5d8 <_dtoa_r+0x308>)
 801c3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3d8:	f7e4 f91e 	bl	8000618 <__aeabi_dmul>
 801c3dc:	a380      	add	r3, pc, #512	; (adr r3, 801c5e0 <_dtoa_r+0x310>)
 801c3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3e2:	f7e3 ff63 	bl	80002ac <__adddf3>
 801c3e6:	4606      	mov	r6, r0
 801c3e8:	4628      	mov	r0, r5
 801c3ea:	460f      	mov	r7, r1
 801c3ec:	f7e4 f8aa 	bl	8000544 <__aeabi_i2d>
 801c3f0:	a37d      	add	r3, pc, #500	; (adr r3, 801c5e8 <_dtoa_r+0x318>)
 801c3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3f6:	f7e4 f90f 	bl	8000618 <__aeabi_dmul>
 801c3fa:	4602      	mov	r2, r0
 801c3fc:	460b      	mov	r3, r1
 801c3fe:	4630      	mov	r0, r6
 801c400:	4639      	mov	r1, r7
 801c402:	f7e3 ff53 	bl	80002ac <__adddf3>
 801c406:	4606      	mov	r6, r0
 801c408:	460f      	mov	r7, r1
 801c40a:	f7e4 fbb5 	bl	8000b78 <__aeabi_d2iz>
 801c40e:	2200      	movs	r2, #0
 801c410:	4682      	mov	sl, r0
 801c412:	2300      	movs	r3, #0
 801c414:	4630      	mov	r0, r6
 801c416:	4639      	mov	r1, r7
 801c418:	f7e4 fb70 	bl	8000afc <__aeabi_dcmplt>
 801c41c:	b148      	cbz	r0, 801c432 <_dtoa_r+0x162>
 801c41e:	4650      	mov	r0, sl
 801c420:	f7e4 f890 	bl	8000544 <__aeabi_i2d>
 801c424:	4632      	mov	r2, r6
 801c426:	463b      	mov	r3, r7
 801c428:	f7e4 fb5e 	bl	8000ae8 <__aeabi_dcmpeq>
 801c42c:	b908      	cbnz	r0, 801c432 <_dtoa_r+0x162>
 801c42e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c432:	f1ba 0f16 	cmp.w	sl, #22
 801c436:	d859      	bhi.n	801c4ec <_dtoa_r+0x21c>
 801c438:	4970      	ldr	r1, [pc, #448]	; (801c5fc <_dtoa_r+0x32c>)
 801c43a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801c43e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c442:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c446:	f7e4 fb77 	bl	8000b38 <__aeabi_dcmpgt>
 801c44a:	2800      	cmp	r0, #0
 801c44c:	d050      	beq.n	801c4f0 <_dtoa_r+0x220>
 801c44e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c452:	2300      	movs	r3, #0
 801c454:	930f      	str	r3, [sp, #60]	; 0x3c
 801c456:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c458:	1b5d      	subs	r5, r3, r5
 801c45a:	f1b5 0801 	subs.w	r8, r5, #1
 801c45e:	bf49      	itett	mi
 801c460:	f1c5 0301 	rsbmi	r3, r5, #1
 801c464:	2300      	movpl	r3, #0
 801c466:	9305      	strmi	r3, [sp, #20]
 801c468:	f04f 0800 	movmi.w	r8, #0
 801c46c:	bf58      	it	pl
 801c46e:	9305      	strpl	r3, [sp, #20]
 801c470:	f1ba 0f00 	cmp.w	sl, #0
 801c474:	db3e      	blt.n	801c4f4 <_dtoa_r+0x224>
 801c476:	2300      	movs	r3, #0
 801c478:	44d0      	add	r8, sl
 801c47a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801c47e:	9307      	str	r3, [sp, #28]
 801c480:	9b06      	ldr	r3, [sp, #24]
 801c482:	2b09      	cmp	r3, #9
 801c484:	f200 8090 	bhi.w	801c5a8 <_dtoa_r+0x2d8>
 801c488:	2b05      	cmp	r3, #5
 801c48a:	bfc4      	itt	gt
 801c48c:	3b04      	subgt	r3, #4
 801c48e:	9306      	strgt	r3, [sp, #24]
 801c490:	9b06      	ldr	r3, [sp, #24]
 801c492:	f1a3 0302 	sub.w	r3, r3, #2
 801c496:	bfcc      	ite	gt
 801c498:	2500      	movgt	r5, #0
 801c49a:	2501      	movle	r5, #1
 801c49c:	2b03      	cmp	r3, #3
 801c49e:	f200 808f 	bhi.w	801c5c0 <_dtoa_r+0x2f0>
 801c4a2:	e8df f003 	tbb	[pc, r3]
 801c4a6:	7f7d      	.short	0x7f7d
 801c4a8:	7131      	.short	0x7131
 801c4aa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801c4ae:	441d      	add	r5, r3
 801c4b0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801c4b4:	2820      	cmp	r0, #32
 801c4b6:	dd13      	ble.n	801c4e0 <_dtoa_r+0x210>
 801c4b8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801c4bc:	9b00      	ldr	r3, [sp, #0]
 801c4be:	fa08 f800 	lsl.w	r8, r8, r0
 801c4c2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801c4c6:	fa23 f000 	lsr.w	r0, r3, r0
 801c4ca:	ea48 0000 	orr.w	r0, r8, r0
 801c4ce:	f7e4 f829 	bl	8000524 <__aeabi_ui2d>
 801c4d2:	2301      	movs	r3, #1
 801c4d4:	4682      	mov	sl, r0
 801c4d6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801c4da:	3d01      	subs	r5, #1
 801c4dc:	9313      	str	r3, [sp, #76]	; 0x4c
 801c4de:	e772      	b.n	801c3c6 <_dtoa_r+0xf6>
 801c4e0:	9b00      	ldr	r3, [sp, #0]
 801c4e2:	f1c0 0020 	rsb	r0, r0, #32
 801c4e6:	fa03 f000 	lsl.w	r0, r3, r0
 801c4ea:	e7f0      	b.n	801c4ce <_dtoa_r+0x1fe>
 801c4ec:	2301      	movs	r3, #1
 801c4ee:	e7b1      	b.n	801c454 <_dtoa_r+0x184>
 801c4f0:	900f      	str	r0, [sp, #60]	; 0x3c
 801c4f2:	e7b0      	b.n	801c456 <_dtoa_r+0x186>
 801c4f4:	9b05      	ldr	r3, [sp, #20]
 801c4f6:	eba3 030a 	sub.w	r3, r3, sl
 801c4fa:	9305      	str	r3, [sp, #20]
 801c4fc:	f1ca 0300 	rsb	r3, sl, #0
 801c500:	9307      	str	r3, [sp, #28]
 801c502:	2300      	movs	r3, #0
 801c504:	930e      	str	r3, [sp, #56]	; 0x38
 801c506:	e7bb      	b.n	801c480 <_dtoa_r+0x1b0>
 801c508:	2301      	movs	r3, #1
 801c50a:	930a      	str	r3, [sp, #40]	; 0x28
 801c50c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c50e:	2b00      	cmp	r3, #0
 801c510:	dd59      	ble.n	801c5c6 <_dtoa_r+0x2f6>
 801c512:	9302      	str	r3, [sp, #8]
 801c514:	4699      	mov	r9, r3
 801c516:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c518:	2200      	movs	r2, #0
 801c51a:	6072      	str	r2, [r6, #4]
 801c51c:	2204      	movs	r2, #4
 801c51e:	f102 0014 	add.w	r0, r2, #20
 801c522:	4298      	cmp	r0, r3
 801c524:	6871      	ldr	r1, [r6, #4]
 801c526:	d953      	bls.n	801c5d0 <_dtoa_r+0x300>
 801c528:	4620      	mov	r0, r4
 801c52a:	f001 f88b 	bl	801d644 <_Balloc>
 801c52e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c530:	6030      	str	r0, [r6, #0]
 801c532:	f1b9 0f0e 	cmp.w	r9, #14
 801c536:	f8d3 b000 	ldr.w	fp, [r3]
 801c53a:	f200 80e6 	bhi.w	801c70a <_dtoa_r+0x43a>
 801c53e:	2d00      	cmp	r5, #0
 801c540:	f000 80e3 	beq.w	801c70a <_dtoa_r+0x43a>
 801c544:	ed9d 7b00 	vldr	d7, [sp]
 801c548:	f1ba 0f00 	cmp.w	sl, #0
 801c54c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 801c550:	dd74      	ble.n	801c63c <_dtoa_r+0x36c>
 801c552:	4a2a      	ldr	r2, [pc, #168]	; (801c5fc <_dtoa_r+0x32c>)
 801c554:	f00a 030f 	and.w	r3, sl, #15
 801c558:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801c55c:	ed93 7b00 	vldr	d7, [r3]
 801c560:	ea4f 162a 	mov.w	r6, sl, asr #4
 801c564:	06f0      	lsls	r0, r6, #27
 801c566:	ed8d 7b08 	vstr	d7, [sp, #32]
 801c56a:	d565      	bpl.n	801c638 <_dtoa_r+0x368>
 801c56c:	4b24      	ldr	r3, [pc, #144]	; (801c600 <_dtoa_r+0x330>)
 801c56e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801c572:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c576:	f7e4 f979 	bl	800086c <__aeabi_ddiv>
 801c57a:	e9cd 0100 	strd	r0, r1, [sp]
 801c57e:	f006 060f 	and.w	r6, r6, #15
 801c582:	2503      	movs	r5, #3
 801c584:	4f1e      	ldr	r7, [pc, #120]	; (801c600 <_dtoa_r+0x330>)
 801c586:	e04c      	b.n	801c622 <_dtoa_r+0x352>
 801c588:	2301      	movs	r3, #1
 801c58a:	930a      	str	r3, [sp, #40]	; 0x28
 801c58c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c58e:	4453      	add	r3, sl
 801c590:	f103 0901 	add.w	r9, r3, #1
 801c594:	9302      	str	r3, [sp, #8]
 801c596:	464b      	mov	r3, r9
 801c598:	2b01      	cmp	r3, #1
 801c59a:	bfb8      	it	lt
 801c59c:	2301      	movlt	r3, #1
 801c59e:	e7ba      	b.n	801c516 <_dtoa_r+0x246>
 801c5a0:	2300      	movs	r3, #0
 801c5a2:	e7b2      	b.n	801c50a <_dtoa_r+0x23a>
 801c5a4:	2300      	movs	r3, #0
 801c5a6:	e7f0      	b.n	801c58a <_dtoa_r+0x2ba>
 801c5a8:	2501      	movs	r5, #1
 801c5aa:	2300      	movs	r3, #0
 801c5ac:	9306      	str	r3, [sp, #24]
 801c5ae:	950a      	str	r5, [sp, #40]	; 0x28
 801c5b0:	f04f 33ff 	mov.w	r3, #4294967295
 801c5b4:	9302      	str	r3, [sp, #8]
 801c5b6:	4699      	mov	r9, r3
 801c5b8:	2200      	movs	r2, #0
 801c5ba:	2312      	movs	r3, #18
 801c5bc:	920b      	str	r2, [sp, #44]	; 0x2c
 801c5be:	e7aa      	b.n	801c516 <_dtoa_r+0x246>
 801c5c0:	2301      	movs	r3, #1
 801c5c2:	930a      	str	r3, [sp, #40]	; 0x28
 801c5c4:	e7f4      	b.n	801c5b0 <_dtoa_r+0x2e0>
 801c5c6:	2301      	movs	r3, #1
 801c5c8:	9302      	str	r3, [sp, #8]
 801c5ca:	4699      	mov	r9, r3
 801c5cc:	461a      	mov	r2, r3
 801c5ce:	e7f5      	b.n	801c5bc <_dtoa_r+0x2ec>
 801c5d0:	3101      	adds	r1, #1
 801c5d2:	6071      	str	r1, [r6, #4]
 801c5d4:	0052      	lsls	r2, r2, #1
 801c5d6:	e7a2      	b.n	801c51e <_dtoa_r+0x24e>
 801c5d8:	636f4361 	.word	0x636f4361
 801c5dc:	3fd287a7 	.word	0x3fd287a7
 801c5e0:	8b60c8b3 	.word	0x8b60c8b3
 801c5e4:	3fc68a28 	.word	0x3fc68a28
 801c5e8:	509f79fb 	.word	0x509f79fb
 801c5ec:	3fd34413 	.word	0x3fd34413
 801c5f0:	7ff00000 	.word	0x7ff00000
 801c5f4:	08023b53 	.word	0x08023b53
 801c5f8:	3ff80000 	.word	0x3ff80000
 801c5fc:	08023d60 	.word	0x08023d60
 801c600:	08023d38 	.word	0x08023d38
 801c604:	08023cd2 	.word	0x08023cd2
 801c608:	07f1      	lsls	r1, r6, #31
 801c60a:	d508      	bpl.n	801c61e <_dtoa_r+0x34e>
 801c60c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c610:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c614:	f7e4 f800 	bl	8000618 <__aeabi_dmul>
 801c618:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c61c:	3501      	adds	r5, #1
 801c61e:	1076      	asrs	r6, r6, #1
 801c620:	3708      	adds	r7, #8
 801c622:	2e00      	cmp	r6, #0
 801c624:	d1f0      	bne.n	801c608 <_dtoa_r+0x338>
 801c626:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c62a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c62e:	f7e4 f91d 	bl	800086c <__aeabi_ddiv>
 801c632:	e9cd 0100 	strd	r0, r1, [sp]
 801c636:	e01a      	b.n	801c66e <_dtoa_r+0x39e>
 801c638:	2502      	movs	r5, #2
 801c63a:	e7a3      	b.n	801c584 <_dtoa_r+0x2b4>
 801c63c:	f000 80a0 	beq.w	801c780 <_dtoa_r+0x4b0>
 801c640:	f1ca 0600 	rsb	r6, sl, #0
 801c644:	4b9f      	ldr	r3, [pc, #636]	; (801c8c4 <_dtoa_r+0x5f4>)
 801c646:	4fa0      	ldr	r7, [pc, #640]	; (801c8c8 <_dtoa_r+0x5f8>)
 801c648:	f006 020f 	and.w	r2, r6, #15
 801c64c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c650:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c654:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801c658:	f7e3 ffde 	bl	8000618 <__aeabi_dmul>
 801c65c:	e9cd 0100 	strd	r0, r1, [sp]
 801c660:	1136      	asrs	r6, r6, #4
 801c662:	2300      	movs	r3, #0
 801c664:	2502      	movs	r5, #2
 801c666:	2e00      	cmp	r6, #0
 801c668:	d17f      	bne.n	801c76a <_dtoa_r+0x49a>
 801c66a:	2b00      	cmp	r3, #0
 801c66c:	d1e1      	bne.n	801c632 <_dtoa_r+0x362>
 801c66e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c670:	2b00      	cmp	r3, #0
 801c672:	f000 8087 	beq.w	801c784 <_dtoa_r+0x4b4>
 801c676:	e9dd 6700 	ldrd	r6, r7, [sp]
 801c67a:	2200      	movs	r2, #0
 801c67c:	4b93      	ldr	r3, [pc, #588]	; (801c8cc <_dtoa_r+0x5fc>)
 801c67e:	4630      	mov	r0, r6
 801c680:	4639      	mov	r1, r7
 801c682:	f7e4 fa3b 	bl	8000afc <__aeabi_dcmplt>
 801c686:	2800      	cmp	r0, #0
 801c688:	d07c      	beq.n	801c784 <_dtoa_r+0x4b4>
 801c68a:	f1b9 0f00 	cmp.w	r9, #0
 801c68e:	d079      	beq.n	801c784 <_dtoa_r+0x4b4>
 801c690:	9b02      	ldr	r3, [sp, #8]
 801c692:	2b00      	cmp	r3, #0
 801c694:	dd35      	ble.n	801c702 <_dtoa_r+0x432>
 801c696:	f10a 33ff 	add.w	r3, sl, #4294967295
 801c69a:	9308      	str	r3, [sp, #32]
 801c69c:	4639      	mov	r1, r7
 801c69e:	2200      	movs	r2, #0
 801c6a0:	4b8b      	ldr	r3, [pc, #556]	; (801c8d0 <_dtoa_r+0x600>)
 801c6a2:	4630      	mov	r0, r6
 801c6a4:	f7e3 ffb8 	bl	8000618 <__aeabi_dmul>
 801c6a8:	e9cd 0100 	strd	r0, r1, [sp]
 801c6ac:	9f02      	ldr	r7, [sp, #8]
 801c6ae:	3501      	adds	r5, #1
 801c6b0:	4628      	mov	r0, r5
 801c6b2:	f7e3 ff47 	bl	8000544 <__aeabi_i2d>
 801c6b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c6ba:	f7e3 ffad 	bl	8000618 <__aeabi_dmul>
 801c6be:	2200      	movs	r2, #0
 801c6c0:	4b84      	ldr	r3, [pc, #528]	; (801c8d4 <_dtoa_r+0x604>)
 801c6c2:	f7e3 fdf3 	bl	80002ac <__adddf3>
 801c6c6:	4605      	mov	r5, r0
 801c6c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801c6cc:	2f00      	cmp	r7, #0
 801c6ce:	d15d      	bne.n	801c78c <_dtoa_r+0x4bc>
 801c6d0:	2200      	movs	r2, #0
 801c6d2:	4b81      	ldr	r3, [pc, #516]	; (801c8d8 <_dtoa_r+0x608>)
 801c6d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c6d8:	f7e3 fde6 	bl	80002a8 <__aeabi_dsub>
 801c6dc:	462a      	mov	r2, r5
 801c6de:	4633      	mov	r3, r6
 801c6e0:	e9cd 0100 	strd	r0, r1, [sp]
 801c6e4:	f7e4 fa28 	bl	8000b38 <__aeabi_dcmpgt>
 801c6e8:	2800      	cmp	r0, #0
 801c6ea:	f040 8288 	bne.w	801cbfe <_dtoa_r+0x92e>
 801c6ee:	462a      	mov	r2, r5
 801c6f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801c6f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c6f8:	f7e4 fa00 	bl	8000afc <__aeabi_dcmplt>
 801c6fc:	2800      	cmp	r0, #0
 801c6fe:	f040 827c 	bne.w	801cbfa <_dtoa_r+0x92a>
 801c702:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801c706:	e9cd 2300 	strd	r2, r3, [sp]
 801c70a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	f2c0 8150 	blt.w	801c9b2 <_dtoa_r+0x6e2>
 801c712:	f1ba 0f0e 	cmp.w	sl, #14
 801c716:	f300 814c 	bgt.w	801c9b2 <_dtoa_r+0x6e2>
 801c71a:	4b6a      	ldr	r3, [pc, #424]	; (801c8c4 <_dtoa_r+0x5f4>)
 801c71c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c720:	ed93 7b00 	vldr	d7, [r3]
 801c724:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c726:	2b00      	cmp	r3, #0
 801c728:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c72c:	f280 80d8 	bge.w	801c8e0 <_dtoa_r+0x610>
 801c730:	f1b9 0f00 	cmp.w	r9, #0
 801c734:	f300 80d4 	bgt.w	801c8e0 <_dtoa_r+0x610>
 801c738:	f040 825e 	bne.w	801cbf8 <_dtoa_r+0x928>
 801c73c:	2200      	movs	r2, #0
 801c73e:	4b66      	ldr	r3, [pc, #408]	; (801c8d8 <_dtoa_r+0x608>)
 801c740:	ec51 0b17 	vmov	r0, r1, d7
 801c744:	f7e3 ff68 	bl	8000618 <__aeabi_dmul>
 801c748:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c74c:	f7e4 f9ea 	bl	8000b24 <__aeabi_dcmpge>
 801c750:	464f      	mov	r7, r9
 801c752:	464e      	mov	r6, r9
 801c754:	2800      	cmp	r0, #0
 801c756:	f040 8234 	bne.w	801cbc2 <_dtoa_r+0x8f2>
 801c75a:	2331      	movs	r3, #49	; 0x31
 801c75c:	f10b 0501 	add.w	r5, fp, #1
 801c760:	f88b 3000 	strb.w	r3, [fp]
 801c764:	f10a 0a01 	add.w	sl, sl, #1
 801c768:	e22f      	b.n	801cbca <_dtoa_r+0x8fa>
 801c76a:	07f2      	lsls	r2, r6, #31
 801c76c:	d505      	bpl.n	801c77a <_dtoa_r+0x4aa>
 801c76e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c772:	f7e3 ff51 	bl	8000618 <__aeabi_dmul>
 801c776:	3501      	adds	r5, #1
 801c778:	2301      	movs	r3, #1
 801c77a:	1076      	asrs	r6, r6, #1
 801c77c:	3708      	adds	r7, #8
 801c77e:	e772      	b.n	801c666 <_dtoa_r+0x396>
 801c780:	2502      	movs	r5, #2
 801c782:	e774      	b.n	801c66e <_dtoa_r+0x39e>
 801c784:	f8cd a020 	str.w	sl, [sp, #32]
 801c788:	464f      	mov	r7, r9
 801c78a:	e791      	b.n	801c6b0 <_dtoa_r+0x3e0>
 801c78c:	4b4d      	ldr	r3, [pc, #308]	; (801c8c4 <_dtoa_r+0x5f4>)
 801c78e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801c792:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801c796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c798:	2b00      	cmp	r3, #0
 801c79a:	d047      	beq.n	801c82c <_dtoa_r+0x55c>
 801c79c:	4602      	mov	r2, r0
 801c79e:	460b      	mov	r3, r1
 801c7a0:	2000      	movs	r0, #0
 801c7a2:	494e      	ldr	r1, [pc, #312]	; (801c8dc <_dtoa_r+0x60c>)
 801c7a4:	f7e4 f862 	bl	800086c <__aeabi_ddiv>
 801c7a8:	462a      	mov	r2, r5
 801c7aa:	4633      	mov	r3, r6
 801c7ac:	f7e3 fd7c 	bl	80002a8 <__aeabi_dsub>
 801c7b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c7b4:	465d      	mov	r5, fp
 801c7b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c7ba:	f7e4 f9dd 	bl	8000b78 <__aeabi_d2iz>
 801c7be:	4606      	mov	r6, r0
 801c7c0:	f7e3 fec0 	bl	8000544 <__aeabi_i2d>
 801c7c4:	4602      	mov	r2, r0
 801c7c6:	460b      	mov	r3, r1
 801c7c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c7cc:	f7e3 fd6c 	bl	80002a8 <__aeabi_dsub>
 801c7d0:	3630      	adds	r6, #48	; 0x30
 801c7d2:	f805 6b01 	strb.w	r6, [r5], #1
 801c7d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801c7da:	e9cd 0100 	strd	r0, r1, [sp]
 801c7de:	f7e4 f98d 	bl	8000afc <__aeabi_dcmplt>
 801c7e2:	2800      	cmp	r0, #0
 801c7e4:	d163      	bne.n	801c8ae <_dtoa_r+0x5de>
 801c7e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c7ea:	2000      	movs	r0, #0
 801c7ec:	4937      	ldr	r1, [pc, #220]	; (801c8cc <_dtoa_r+0x5fc>)
 801c7ee:	f7e3 fd5b 	bl	80002a8 <__aeabi_dsub>
 801c7f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801c7f6:	f7e4 f981 	bl	8000afc <__aeabi_dcmplt>
 801c7fa:	2800      	cmp	r0, #0
 801c7fc:	f040 80b7 	bne.w	801c96e <_dtoa_r+0x69e>
 801c800:	eba5 030b 	sub.w	r3, r5, fp
 801c804:	429f      	cmp	r7, r3
 801c806:	f77f af7c 	ble.w	801c702 <_dtoa_r+0x432>
 801c80a:	2200      	movs	r2, #0
 801c80c:	4b30      	ldr	r3, [pc, #192]	; (801c8d0 <_dtoa_r+0x600>)
 801c80e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c812:	f7e3 ff01 	bl	8000618 <__aeabi_dmul>
 801c816:	2200      	movs	r2, #0
 801c818:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c81c:	4b2c      	ldr	r3, [pc, #176]	; (801c8d0 <_dtoa_r+0x600>)
 801c81e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c822:	f7e3 fef9 	bl	8000618 <__aeabi_dmul>
 801c826:	e9cd 0100 	strd	r0, r1, [sp]
 801c82a:	e7c4      	b.n	801c7b6 <_dtoa_r+0x4e6>
 801c82c:	462a      	mov	r2, r5
 801c82e:	4633      	mov	r3, r6
 801c830:	f7e3 fef2 	bl	8000618 <__aeabi_dmul>
 801c834:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c838:	eb0b 0507 	add.w	r5, fp, r7
 801c83c:	465e      	mov	r6, fp
 801c83e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c842:	f7e4 f999 	bl	8000b78 <__aeabi_d2iz>
 801c846:	4607      	mov	r7, r0
 801c848:	f7e3 fe7c 	bl	8000544 <__aeabi_i2d>
 801c84c:	3730      	adds	r7, #48	; 0x30
 801c84e:	4602      	mov	r2, r0
 801c850:	460b      	mov	r3, r1
 801c852:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c856:	f7e3 fd27 	bl	80002a8 <__aeabi_dsub>
 801c85a:	f806 7b01 	strb.w	r7, [r6], #1
 801c85e:	42ae      	cmp	r6, r5
 801c860:	e9cd 0100 	strd	r0, r1, [sp]
 801c864:	f04f 0200 	mov.w	r2, #0
 801c868:	d126      	bne.n	801c8b8 <_dtoa_r+0x5e8>
 801c86a:	4b1c      	ldr	r3, [pc, #112]	; (801c8dc <_dtoa_r+0x60c>)
 801c86c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c870:	f7e3 fd1c 	bl	80002ac <__adddf3>
 801c874:	4602      	mov	r2, r0
 801c876:	460b      	mov	r3, r1
 801c878:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c87c:	f7e4 f95c 	bl	8000b38 <__aeabi_dcmpgt>
 801c880:	2800      	cmp	r0, #0
 801c882:	d174      	bne.n	801c96e <_dtoa_r+0x69e>
 801c884:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801c888:	2000      	movs	r0, #0
 801c88a:	4914      	ldr	r1, [pc, #80]	; (801c8dc <_dtoa_r+0x60c>)
 801c88c:	f7e3 fd0c 	bl	80002a8 <__aeabi_dsub>
 801c890:	4602      	mov	r2, r0
 801c892:	460b      	mov	r3, r1
 801c894:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c898:	f7e4 f930 	bl	8000afc <__aeabi_dcmplt>
 801c89c:	2800      	cmp	r0, #0
 801c89e:	f43f af30 	beq.w	801c702 <_dtoa_r+0x432>
 801c8a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c8a6:	2b30      	cmp	r3, #48	; 0x30
 801c8a8:	f105 32ff 	add.w	r2, r5, #4294967295
 801c8ac:	d002      	beq.n	801c8b4 <_dtoa_r+0x5e4>
 801c8ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 801c8b2:	e04a      	b.n	801c94a <_dtoa_r+0x67a>
 801c8b4:	4615      	mov	r5, r2
 801c8b6:	e7f4      	b.n	801c8a2 <_dtoa_r+0x5d2>
 801c8b8:	4b05      	ldr	r3, [pc, #20]	; (801c8d0 <_dtoa_r+0x600>)
 801c8ba:	f7e3 fead 	bl	8000618 <__aeabi_dmul>
 801c8be:	e9cd 0100 	strd	r0, r1, [sp]
 801c8c2:	e7bc      	b.n	801c83e <_dtoa_r+0x56e>
 801c8c4:	08023d60 	.word	0x08023d60
 801c8c8:	08023d38 	.word	0x08023d38
 801c8cc:	3ff00000 	.word	0x3ff00000
 801c8d0:	40240000 	.word	0x40240000
 801c8d4:	401c0000 	.word	0x401c0000
 801c8d8:	40140000 	.word	0x40140000
 801c8dc:	3fe00000 	.word	0x3fe00000
 801c8e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 801c8e4:	465d      	mov	r5, fp
 801c8e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c8ea:	4630      	mov	r0, r6
 801c8ec:	4639      	mov	r1, r7
 801c8ee:	f7e3 ffbd 	bl	800086c <__aeabi_ddiv>
 801c8f2:	f7e4 f941 	bl	8000b78 <__aeabi_d2iz>
 801c8f6:	4680      	mov	r8, r0
 801c8f8:	f7e3 fe24 	bl	8000544 <__aeabi_i2d>
 801c8fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c900:	f7e3 fe8a 	bl	8000618 <__aeabi_dmul>
 801c904:	4602      	mov	r2, r0
 801c906:	460b      	mov	r3, r1
 801c908:	4630      	mov	r0, r6
 801c90a:	4639      	mov	r1, r7
 801c90c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 801c910:	f7e3 fcca 	bl	80002a8 <__aeabi_dsub>
 801c914:	f805 6b01 	strb.w	r6, [r5], #1
 801c918:	eba5 060b 	sub.w	r6, r5, fp
 801c91c:	45b1      	cmp	r9, r6
 801c91e:	4602      	mov	r2, r0
 801c920:	460b      	mov	r3, r1
 801c922:	d139      	bne.n	801c998 <_dtoa_r+0x6c8>
 801c924:	f7e3 fcc2 	bl	80002ac <__adddf3>
 801c928:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c92c:	4606      	mov	r6, r0
 801c92e:	460f      	mov	r7, r1
 801c930:	f7e4 f902 	bl	8000b38 <__aeabi_dcmpgt>
 801c934:	b9c8      	cbnz	r0, 801c96a <_dtoa_r+0x69a>
 801c936:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c93a:	4630      	mov	r0, r6
 801c93c:	4639      	mov	r1, r7
 801c93e:	f7e4 f8d3 	bl	8000ae8 <__aeabi_dcmpeq>
 801c942:	b110      	cbz	r0, 801c94a <_dtoa_r+0x67a>
 801c944:	f018 0f01 	tst.w	r8, #1
 801c948:	d10f      	bne.n	801c96a <_dtoa_r+0x69a>
 801c94a:	9904      	ldr	r1, [sp, #16]
 801c94c:	4620      	mov	r0, r4
 801c94e:	f000 fead 	bl	801d6ac <_Bfree>
 801c952:	2300      	movs	r3, #0
 801c954:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c956:	702b      	strb	r3, [r5, #0]
 801c958:	f10a 0301 	add.w	r3, sl, #1
 801c95c:	6013      	str	r3, [r2, #0]
 801c95e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c960:	2b00      	cmp	r3, #0
 801c962:	f000 8241 	beq.w	801cde8 <_dtoa_r+0xb18>
 801c966:	601d      	str	r5, [r3, #0]
 801c968:	e23e      	b.n	801cde8 <_dtoa_r+0xb18>
 801c96a:	f8cd a020 	str.w	sl, [sp, #32]
 801c96e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c972:	2a39      	cmp	r2, #57	; 0x39
 801c974:	f105 33ff 	add.w	r3, r5, #4294967295
 801c978:	d108      	bne.n	801c98c <_dtoa_r+0x6bc>
 801c97a:	459b      	cmp	fp, r3
 801c97c:	d10a      	bne.n	801c994 <_dtoa_r+0x6c4>
 801c97e:	9b08      	ldr	r3, [sp, #32]
 801c980:	3301      	adds	r3, #1
 801c982:	9308      	str	r3, [sp, #32]
 801c984:	2330      	movs	r3, #48	; 0x30
 801c986:	f88b 3000 	strb.w	r3, [fp]
 801c98a:	465b      	mov	r3, fp
 801c98c:	781a      	ldrb	r2, [r3, #0]
 801c98e:	3201      	adds	r2, #1
 801c990:	701a      	strb	r2, [r3, #0]
 801c992:	e78c      	b.n	801c8ae <_dtoa_r+0x5de>
 801c994:	461d      	mov	r5, r3
 801c996:	e7ea      	b.n	801c96e <_dtoa_r+0x69e>
 801c998:	2200      	movs	r2, #0
 801c99a:	4b9b      	ldr	r3, [pc, #620]	; (801cc08 <_dtoa_r+0x938>)
 801c99c:	f7e3 fe3c 	bl	8000618 <__aeabi_dmul>
 801c9a0:	2200      	movs	r2, #0
 801c9a2:	2300      	movs	r3, #0
 801c9a4:	4606      	mov	r6, r0
 801c9a6:	460f      	mov	r7, r1
 801c9a8:	f7e4 f89e 	bl	8000ae8 <__aeabi_dcmpeq>
 801c9ac:	2800      	cmp	r0, #0
 801c9ae:	d09a      	beq.n	801c8e6 <_dtoa_r+0x616>
 801c9b0:	e7cb      	b.n	801c94a <_dtoa_r+0x67a>
 801c9b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c9b4:	2a00      	cmp	r2, #0
 801c9b6:	f000 808b 	beq.w	801cad0 <_dtoa_r+0x800>
 801c9ba:	9a06      	ldr	r2, [sp, #24]
 801c9bc:	2a01      	cmp	r2, #1
 801c9be:	dc6e      	bgt.n	801ca9e <_dtoa_r+0x7ce>
 801c9c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c9c2:	2a00      	cmp	r2, #0
 801c9c4:	d067      	beq.n	801ca96 <_dtoa_r+0x7c6>
 801c9c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c9ca:	9f07      	ldr	r7, [sp, #28]
 801c9cc:	9d05      	ldr	r5, [sp, #20]
 801c9ce:	9a05      	ldr	r2, [sp, #20]
 801c9d0:	2101      	movs	r1, #1
 801c9d2:	441a      	add	r2, r3
 801c9d4:	4620      	mov	r0, r4
 801c9d6:	9205      	str	r2, [sp, #20]
 801c9d8:	4498      	add	r8, r3
 801c9da:	f000 ff45 	bl	801d868 <__i2b>
 801c9de:	4606      	mov	r6, r0
 801c9e0:	2d00      	cmp	r5, #0
 801c9e2:	dd0c      	ble.n	801c9fe <_dtoa_r+0x72e>
 801c9e4:	f1b8 0f00 	cmp.w	r8, #0
 801c9e8:	dd09      	ble.n	801c9fe <_dtoa_r+0x72e>
 801c9ea:	4545      	cmp	r5, r8
 801c9ec:	9a05      	ldr	r2, [sp, #20]
 801c9ee:	462b      	mov	r3, r5
 801c9f0:	bfa8      	it	ge
 801c9f2:	4643      	movge	r3, r8
 801c9f4:	1ad2      	subs	r2, r2, r3
 801c9f6:	9205      	str	r2, [sp, #20]
 801c9f8:	1aed      	subs	r5, r5, r3
 801c9fa:	eba8 0803 	sub.w	r8, r8, r3
 801c9fe:	9b07      	ldr	r3, [sp, #28]
 801ca00:	b1eb      	cbz	r3, 801ca3e <_dtoa_r+0x76e>
 801ca02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ca04:	2b00      	cmp	r3, #0
 801ca06:	d067      	beq.n	801cad8 <_dtoa_r+0x808>
 801ca08:	b18f      	cbz	r7, 801ca2e <_dtoa_r+0x75e>
 801ca0a:	4631      	mov	r1, r6
 801ca0c:	463a      	mov	r2, r7
 801ca0e:	4620      	mov	r0, r4
 801ca10:	f000 ffca 	bl	801d9a8 <__pow5mult>
 801ca14:	9a04      	ldr	r2, [sp, #16]
 801ca16:	4601      	mov	r1, r0
 801ca18:	4606      	mov	r6, r0
 801ca1a:	4620      	mov	r0, r4
 801ca1c:	f000 ff2d 	bl	801d87a <__multiply>
 801ca20:	9904      	ldr	r1, [sp, #16]
 801ca22:	9008      	str	r0, [sp, #32]
 801ca24:	4620      	mov	r0, r4
 801ca26:	f000 fe41 	bl	801d6ac <_Bfree>
 801ca2a:	9b08      	ldr	r3, [sp, #32]
 801ca2c:	9304      	str	r3, [sp, #16]
 801ca2e:	9b07      	ldr	r3, [sp, #28]
 801ca30:	1bda      	subs	r2, r3, r7
 801ca32:	d004      	beq.n	801ca3e <_dtoa_r+0x76e>
 801ca34:	9904      	ldr	r1, [sp, #16]
 801ca36:	4620      	mov	r0, r4
 801ca38:	f000 ffb6 	bl	801d9a8 <__pow5mult>
 801ca3c:	9004      	str	r0, [sp, #16]
 801ca3e:	2101      	movs	r1, #1
 801ca40:	4620      	mov	r0, r4
 801ca42:	f000 ff11 	bl	801d868 <__i2b>
 801ca46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ca48:	4607      	mov	r7, r0
 801ca4a:	2b00      	cmp	r3, #0
 801ca4c:	f000 81d0 	beq.w	801cdf0 <_dtoa_r+0xb20>
 801ca50:	461a      	mov	r2, r3
 801ca52:	4601      	mov	r1, r0
 801ca54:	4620      	mov	r0, r4
 801ca56:	f000 ffa7 	bl	801d9a8 <__pow5mult>
 801ca5a:	9b06      	ldr	r3, [sp, #24]
 801ca5c:	2b01      	cmp	r3, #1
 801ca5e:	4607      	mov	r7, r0
 801ca60:	dc40      	bgt.n	801cae4 <_dtoa_r+0x814>
 801ca62:	9b00      	ldr	r3, [sp, #0]
 801ca64:	2b00      	cmp	r3, #0
 801ca66:	d139      	bne.n	801cadc <_dtoa_r+0x80c>
 801ca68:	9b01      	ldr	r3, [sp, #4]
 801ca6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d136      	bne.n	801cae0 <_dtoa_r+0x810>
 801ca72:	9b01      	ldr	r3, [sp, #4]
 801ca74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ca78:	0d1b      	lsrs	r3, r3, #20
 801ca7a:	051b      	lsls	r3, r3, #20
 801ca7c:	b12b      	cbz	r3, 801ca8a <_dtoa_r+0x7ba>
 801ca7e:	9b05      	ldr	r3, [sp, #20]
 801ca80:	3301      	adds	r3, #1
 801ca82:	9305      	str	r3, [sp, #20]
 801ca84:	f108 0801 	add.w	r8, r8, #1
 801ca88:	2301      	movs	r3, #1
 801ca8a:	9307      	str	r3, [sp, #28]
 801ca8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	d12a      	bne.n	801cae8 <_dtoa_r+0x818>
 801ca92:	2001      	movs	r0, #1
 801ca94:	e030      	b.n	801caf8 <_dtoa_r+0x828>
 801ca96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ca98:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801ca9c:	e795      	b.n	801c9ca <_dtoa_r+0x6fa>
 801ca9e:	9b07      	ldr	r3, [sp, #28]
 801caa0:	f109 37ff 	add.w	r7, r9, #4294967295
 801caa4:	42bb      	cmp	r3, r7
 801caa6:	bfbf      	itttt	lt
 801caa8:	9b07      	ldrlt	r3, [sp, #28]
 801caaa:	9707      	strlt	r7, [sp, #28]
 801caac:	1afa      	sublt	r2, r7, r3
 801caae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801cab0:	bfbb      	ittet	lt
 801cab2:	189b      	addlt	r3, r3, r2
 801cab4:	930e      	strlt	r3, [sp, #56]	; 0x38
 801cab6:	1bdf      	subge	r7, r3, r7
 801cab8:	2700      	movlt	r7, #0
 801caba:	f1b9 0f00 	cmp.w	r9, #0
 801cabe:	bfb5      	itete	lt
 801cac0:	9b05      	ldrlt	r3, [sp, #20]
 801cac2:	9d05      	ldrge	r5, [sp, #20]
 801cac4:	eba3 0509 	sublt.w	r5, r3, r9
 801cac8:	464b      	movge	r3, r9
 801caca:	bfb8      	it	lt
 801cacc:	2300      	movlt	r3, #0
 801cace:	e77e      	b.n	801c9ce <_dtoa_r+0x6fe>
 801cad0:	9f07      	ldr	r7, [sp, #28]
 801cad2:	9d05      	ldr	r5, [sp, #20]
 801cad4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801cad6:	e783      	b.n	801c9e0 <_dtoa_r+0x710>
 801cad8:	9a07      	ldr	r2, [sp, #28]
 801cada:	e7ab      	b.n	801ca34 <_dtoa_r+0x764>
 801cadc:	2300      	movs	r3, #0
 801cade:	e7d4      	b.n	801ca8a <_dtoa_r+0x7ba>
 801cae0:	9b00      	ldr	r3, [sp, #0]
 801cae2:	e7d2      	b.n	801ca8a <_dtoa_r+0x7ba>
 801cae4:	2300      	movs	r3, #0
 801cae6:	9307      	str	r3, [sp, #28]
 801cae8:	693b      	ldr	r3, [r7, #16]
 801caea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801caee:	6918      	ldr	r0, [r3, #16]
 801caf0:	f000 fe6c 	bl	801d7cc <__hi0bits>
 801caf4:	f1c0 0020 	rsb	r0, r0, #32
 801caf8:	4440      	add	r0, r8
 801cafa:	f010 001f 	ands.w	r0, r0, #31
 801cafe:	d047      	beq.n	801cb90 <_dtoa_r+0x8c0>
 801cb00:	f1c0 0320 	rsb	r3, r0, #32
 801cb04:	2b04      	cmp	r3, #4
 801cb06:	dd3b      	ble.n	801cb80 <_dtoa_r+0x8b0>
 801cb08:	9b05      	ldr	r3, [sp, #20]
 801cb0a:	f1c0 001c 	rsb	r0, r0, #28
 801cb0e:	4403      	add	r3, r0
 801cb10:	9305      	str	r3, [sp, #20]
 801cb12:	4405      	add	r5, r0
 801cb14:	4480      	add	r8, r0
 801cb16:	9b05      	ldr	r3, [sp, #20]
 801cb18:	2b00      	cmp	r3, #0
 801cb1a:	dd05      	ble.n	801cb28 <_dtoa_r+0x858>
 801cb1c:	461a      	mov	r2, r3
 801cb1e:	9904      	ldr	r1, [sp, #16]
 801cb20:	4620      	mov	r0, r4
 801cb22:	f000 ff8f 	bl	801da44 <__lshift>
 801cb26:	9004      	str	r0, [sp, #16]
 801cb28:	f1b8 0f00 	cmp.w	r8, #0
 801cb2c:	dd05      	ble.n	801cb3a <_dtoa_r+0x86a>
 801cb2e:	4639      	mov	r1, r7
 801cb30:	4642      	mov	r2, r8
 801cb32:	4620      	mov	r0, r4
 801cb34:	f000 ff86 	bl	801da44 <__lshift>
 801cb38:	4607      	mov	r7, r0
 801cb3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cb3c:	b353      	cbz	r3, 801cb94 <_dtoa_r+0x8c4>
 801cb3e:	4639      	mov	r1, r7
 801cb40:	9804      	ldr	r0, [sp, #16]
 801cb42:	f000 ffd3 	bl	801daec <__mcmp>
 801cb46:	2800      	cmp	r0, #0
 801cb48:	da24      	bge.n	801cb94 <_dtoa_r+0x8c4>
 801cb4a:	2300      	movs	r3, #0
 801cb4c:	220a      	movs	r2, #10
 801cb4e:	9904      	ldr	r1, [sp, #16]
 801cb50:	4620      	mov	r0, r4
 801cb52:	f000 fdc2 	bl	801d6da <__multadd>
 801cb56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb58:	9004      	str	r0, [sp, #16]
 801cb5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cb5e:	2b00      	cmp	r3, #0
 801cb60:	f000 814d 	beq.w	801cdfe <_dtoa_r+0xb2e>
 801cb64:	2300      	movs	r3, #0
 801cb66:	4631      	mov	r1, r6
 801cb68:	220a      	movs	r2, #10
 801cb6a:	4620      	mov	r0, r4
 801cb6c:	f000 fdb5 	bl	801d6da <__multadd>
 801cb70:	9b02      	ldr	r3, [sp, #8]
 801cb72:	2b00      	cmp	r3, #0
 801cb74:	4606      	mov	r6, r0
 801cb76:	dc4f      	bgt.n	801cc18 <_dtoa_r+0x948>
 801cb78:	9b06      	ldr	r3, [sp, #24]
 801cb7a:	2b02      	cmp	r3, #2
 801cb7c:	dd4c      	ble.n	801cc18 <_dtoa_r+0x948>
 801cb7e:	e011      	b.n	801cba4 <_dtoa_r+0x8d4>
 801cb80:	d0c9      	beq.n	801cb16 <_dtoa_r+0x846>
 801cb82:	9a05      	ldr	r2, [sp, #20]
 801cb84:	331c      	adds	r3, #28
 801cb86:	441a      	add	r2, r3
 801cb88:	9205      	str	r2, [sp, #20]
 801cb8a:	441d      	add	r5, r3
 801cb8c:	4498      	add	r8, r3
 801cb8e:	e7c2      	b.n	801cb16 <_dtoa_r+0x846>
 801cb90:	4603      	mov	r3, r0
 801cb92:	e7f6      	b.n	801cb82 <_dtoa_r+0x8b2>
 801cb94:	f1b9 0f00 	cmp.w	r9, #0
 801cb98:	dc38      	bgt.n	801cc0c <_dtoa_r+0x93c>
 801cb9a:	9b06      	ldr	r3, [sp, #24]
 801cb9c:	2b02      	cmp	r3, #2
 801cb9e:	dd35      	ble.n	801cc0c <_dtoa_r+0x93c>
 801cba0:	f8cd 9008 	str.w	r9, [sp, #8]
 801cba4:	9b02      	ldr	r3, [sp, #8]
 801cba6:	b963      	cbnz	r3, 801cbc2 <_dtoa_r+0x8f2>
 801cba8:	4639      	mov	r1, r7
 801cbaa:	2205      	movs	r2, #5
 801cbac:	4620      	mov	r0, r4
 801cbae:	f000 fd94 	bl	801d6da <__multadd>
 801cbb2:	4601      	mov	r1, r0
 801cbb4:	4607      	mov	r7, r0
 801cbb6:	9804      	ldr	r0, [sp, #16]
 801cbb8:	f000 ff98 	bl	801daec <__mcmp>
 801cbbc:	2800      	cmp	r0, #0
 801cbbe:	f73f adcc 	bgt.w	801c75a <_dtoa_r+0x48a>
 801cbc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cbc4:	465d      	mov	r5, fp
 801cbc6:	ea6f 0a03 	mvn.w	sl, r3
 801cbca:	f04f 0900 	mov.w	r9, #0
 801cbce:	4639      	mov	r1, r7
 801cbd0:	4620      	mov	r0, r4
 801cbd2:	f000 fd6b 	bl	801d6ac <_Bfree>
 801cbd6:	2e00      	cmp	r6, #0
 801cbd8:	f43f aeb7 	beq.w	801c94a <_dtoa_r+0x67a>
 801cbdc:	f1b9 0f00 	cmp.w	r9, #0
 801cbe0:	d005      	beq.n	801cbee <_dtoa_r+0x91e>
 801cbe2:	45b1      	cmp	r9, r6
 801cbe4:	d003      	beq.n	801cbee <_dtoa_r+0x91e>
 801cbe6:	4649      	mov	r1, r9
 801cbe8:	4620      	mov	r0, r4
 801cbea:	f000 fd5f 	bl	801d6ac <_Bfree>
 801cbee:	4631      	mov	r1, r6
 801cbf0:	4620      	mov	r0, r4
 801cbf2:	f000 fd5b 	bl	801d6ac <_Bfree>
 801cbf6:	e6a8      	b.n	801c94a <_dtoa_r+0x67a>
 801cbf8:	2700      	movs	r7, #0
 801cbfa:	463e      	mov	r6, r7
 801cbfc:	e7e1      	b.n	801cbc2 <_dtoa_r+0x8f2>
 801cbfe:	f8dd a020 	ldr.w	sl, [sp, #32]
 801cc02:	463e      	mov	r6, r7
 801cc04:	e5a9      	b.n	801c75a <_dtoa_r+0x48a>
 801cc06:	bf00      	nop
 801cc08:	40240000 	.word	0x40240000
 801cc0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc0e:	f8cd 9008 	str.w	r9, [sp, #8]
 801cc12:	2b00      	cmp	r3, #0
 801cc14:	f000 80fa 	beq.w	801ce0c <_dtoa_r+0xb3c>
 801cc18:	2d00      	cmp	r5, #0
 801cc1a:	dd05      	ble.n	801cc28 <_dtoa_r+0x958>
 801cc1c:	4631      	mov	r1, r6
 801cc1e:	462a      	mov	r2, r5
 801cc20:	4620      	mov	r0, r4
 801cc22:	f000 ff0f 	bl	801da44 <__lshift>
 801cc26:	4606      	mov	r6, r0
 801cc28:	9b07      	ldr	r3, [sp, #28]
 801cc2a:	2b00      	cmp	r3, #0
 801cc2c:	d04c      	beq.n	801ccc8 <_dtoa_r+0x9f8>
 801cc2e:	6871      	ldr	r1, [r6, #4]
 801cc30:	4620      	mov	r0, r4
 801cc32:	f000 fd07 	bl	801d644 <_Balloc>
 801cc36:	6932      	ldr	r2, [r6, #16]
 801cc38:	3202      	adds	r2, #2
 801cc3a:	4605      	mov	r5, r0
 801cc3c:	0092      	lsls	r2, r2, #2
 801cc3e:	f106 010c 	add.w	r1, r6, #12
 801cc42:	300c      	adds	r0, #12
 801cc44:	f7fd fde5 	bl	801a812 <memcpy>
 801cc48:	2201      	movs	r2, #1
 801cc4a:	4629      	mov	r1, r5
 801cc4c:	4620      	mov	r0, r4
 801cc4e:	f000 fef9 	bl	801da44 <__lshift>
 801cc52:	9b00      	ldr	r3, [sp, #0]
 801cc54:	f8cd b014 	str.w	fp, [sp, #20]
 801cc58:	f003 0301 	and.w	r3, r3, #1
 801cc5c:	46b1      	mov	r9, r6
 801cc5e:	9307      	str	r3, [sp, #28]
 801cc60:	4606      	mov	r6, r0
 801cc62:	4639      	mov	r1, r7
 801cc64:	9804      	ldr	r0, [sp, #16]
 801cc66:	f7ff faa6 	bl	801c1b6 <quorem>
 801cc6a:	4649      	mov	r1, r9
 801cc6c:	4605      	mov	r5, r0
 801cc6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801cc72:	9804      	ldr	r0, [sp, #16]
 801cc74:	f000 ff3a 	bl	801daec <__mcmp>
 801cc78:	4632      	mov	r2, r6
 801cc7a:	9000      	str	r0, [sp, #0]
 801cc7c:	4639      	mov	r1, r7
 801cc7e:	4620      	mov	r0, r4
 801cc80:	f000 ff4e 	bl	801db20 <__mdiff>
 801cc84:	68c3      	ldr	r3, [r0, #12]
 801cc86:	4602      	mov	r2, r0
 801cc88:	bb03      	cbnz	r3, 801cccc <_dtoa_r+0x9fc>
 801cc8a:	4601      	mov	r1, r0
 801cc8c:	9008      	str	r0, [sp, #32]
 801cc8e:	9804      	ldr	r0, [sp, #16]
 801cc90:	f000 ff2c 	bl	801daec <__mcmp>
 801cc94:	9a08      	ldr	r2, [sp, #32]
 801cc96:	4603      	mov	r3, r0
 801cc98:	4611      	mov	r1, r2
 801cc9a:	4620      	mov	r0, r4
 801cc9c:	9308      	str	r3, [sp, #32]
 801cc9e:	f000 fd05 	bl	801d6ac <_Bfree>
 801cca2:	9b08      	ldr	r3, [sp, #32]
 801cca4:	b9a3      	cbnz	r3, 801ccd0 <_dtoa_r+0xa00>
 801cca6:	9a06      	ldr	r2, [sp, #24]
 801cca8:	b992      	cbnz	r2, 801ccd0 <_dtoa_r+0xa00>
 801ccaa:	9a07      	ldr	r2, [sp, #28]
 801ccac:	b982      	cbnz	r2, 801ccd0 <_dtoa_r+0xa00>
 801ccae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801ccb2:	d029      	beq.n	801cd08 <_dtoa_r+0xa38>
 801ccb4:	9b00      	ldr	r3, [sp, #0]
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	dd01      	ble.n	801ccbe <_dtoa_r+0x9ee>
 801ccba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801ccbe:	9b05      	ldr	r3, [sp, #20]
 801ccc0:	1c5d      	adds	r5, r3, #1
 801ccc2:	f883 8000 	strb.w	r8, [r3]
 801ccc6:	e782      	b.n	801cbce <_dtoa_r+0x8fe>
 801ccc8:	4630      	mov	r0, r6
 801ccca:	e7c2      	b.n	801cc52 <_dtoa_r+0x982>
 801cccc:	2301      	movs	r3, #1
 801ccce:	e7e3      	b.n	801cc98 <_dtoa_r+0x9c8>
 801ccd0:	9a00      	ldr	r2, [sp, #0]
 801ccd2:	2a00      	cmp	r2, #0
 801ccd4:	db04      	blt.n	801cce0 <_dtoa_r+0xa10>
 801ccd6:	d125      	bne.n	801cd24 <_dtoa_r+0xa54>
 801ccd8:	9a06      	ldr	r2, [sp, #24]
 801ccda:	bb1a      	cbnz	r2, 801cd24 <_dtoa_r+0xa54>
 801ccdc:	9a07      	ldr	r2, [sp, #28]
 801ccde:	bb0a      	cbnz	r2, 801cd24 <_dtoa_r+0xa54>
 801cce0:	2b00      	cmp	r3, #0
 801cce2:	ddec      	ble.n	801ccbe <_dtoa_r+0x9ee>
 801cce4:	2201      	movs	r2, #1
 801cce6:	9904      	ldr	r1, [sp, #16]
 801cce8:	4620      	mov	r0, r4
 801ccea:	f000 feab 	bl	801da44 <__lshift>
 801ccee:	4639      	mov	r1, r7
 801ccf0:	9004      	str	r0, [sp, #16]
 801ccf2:	f000 fefb 	bl	801daec <__mcmp>
 801ccf6:	2800      	cmp	r0, #0
 801ccf8:	dc03      	bgt.n	801cd02 <_dtoa_r+0xa32>
 801ccfa:	d1e0      	bne.n	801ccbe <_dtoa_r+0x9ee>
 801ccfc:	f018 0f01 	tst.w	r8, #1
 801cd00:	d0dd      	beq.n	801ccbe <_dtoa_r+0x9ee>
 801cd02:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801cd06:	d1d8      	bne.n	801ccba <_dtoa_r+0x9ea>
 801cd08:	9b05      	ldr	r3, [sp, #20]
 801cd0a:	9a05      	ldr	r2, [sp, #20]
 801cd0c:	1c5d      	adds	r5, r3, #1
 801cd0e:	2339      	movs	r3, #57	; 0x39
 801cd10:	7013      	strb	r3, [r2, #0]
 801cd12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801cd16:	2b39      	cmp	r3, #57	; 0x39
 801cd18:	f105 32ff 	add.w	r2, r5, #4294967295
 801cd1c:	d04f      	beq.n	801cdbe <_dtoa_r+0xaee>
 801cd1e:	3301      	adds	r3, #1
 801cd20:	7013      	strb	r3, [r2, #0]
 801cd22:	e754      	b.n	801cbce <_dtoa_r+0x8fe>
 801cd24:	9a05      	ldr	r2, [sp, #20]
 801cd26:	2b00      	cmp	r3, #0
 801cd28:	f102 0501 	add.w	r5, r2, #1
 801cd2c:	dd06      	ble.n	801cd3c <_dtoa_r+0xa6c>
 801cd2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801cd32:	d0e9      	beq.n	801cd08 <_dtoa_r+0xa38>
 801cd34:	f108 0801 	add.w	r8, r8, #1
 801cd38:	9b05      	ldr	r3, [sp, #20]
 801cd3a:	e7c2      	b.n	801ccc2 <_dtoa_r+0x9f2>
 801cd3c:	9a02      	ldr	r2, [sp, #8]
 801cd3e:	f805 8c01 	strb.w	r8, [r5, #-1]
 801cd42:	eba5 030b 	sub.w	r3, r5, fp
 801cd46:	4293      	cmp	r3, r2
 801cd48:	d021      	beq.n	801cd8e <_dtoa_r+0xabe>
 801cd4a:	2300      	movs	r3, #0
 801cd4c:	220a      	movs	r2, #10
 801cd4e:	9904      	ldr	r1, [sp, #16]
 801cd50:	4620      	mov	r0, r4
 801cd52:	f000 fcc2 	bl	801d6da <__multadd>
 801cd56:	45b1      	cmp	r9, r6
 801cd58:	9004      	str	r0, [sp, #16]
 801cd5a:	f04f 0300 	mov.w	r3, #0
 801cd5e:	f04f 020a 	mov.w	r2, #10
 801cd62:	4649      	mov	r1, r9
 801cd64:	4620      	mov	r0, r4
 801cd66:	d105      	bne.n	801cd74 <_dtoa_r+0xaa4>
 801cd68:	f000 fcb7 	bl	801d6da <__multadd>
 801cd6c:	4681      	mov	r9, r0
 801cd6e:	4606      	mov	r6, r0
 801cd70:	9505      	str	r5, [sp, #20]
 801cd72:	e776      	b.n	801cc62 <_dtoa_r+0x992>
 801cd74:	f000 fcb1 	bl	801d6da <__multadd>
 801cd78:	4631      	mov	r1, r6
 801cd7a:	4681      	mov	r9, r0
 801cd7c:	2300      	movs	r3, #0
 801cd7e:	220a      	movs	r2, #10
 801cd80:	4620      	mov	r0, r4
 801cd82:	f000 fcaa 	bl	801d6da <__multadd>
 801cd86:	4606      	mov	r6, r0
 801cd88:	e7f2      	b.n	801cd70 <_dtoa_r+0xaa0>
 801cd8a:	f04f 0900 	mov.w	r9, #0
 801cd8e:	2201      	movs	r2, #1
 801cd90:	9904      	ldr	r1, [sp, #16]
 801cd92:	4620      	mov	r0, r4
 801cd94:	f000 fe56 	bl	801da44 <__lshift>
 801cd98:	4639      	mov	r1, r7
 801cd9a:	9004      	str	r0, [sp, #16]
 801cd9c:	f000 fea6 	bl	801daec <__mcmp>
 801cda0:	2800      	cmp	r0, #0
 801cda2:	dcb6      	bgt.n	801cd12 <_dtoa_r+0xa42>
 801cda4:	d102      	bne.n	801cdac <_dtoa_r+0xadc>
 801cda6:	f018 0f01 	tst.w	r8, #1
 801cdaa:	d1b2      	bne.n	801cd12 <_dtoa_r+0xa42>
 801cdac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801cdb0:	2b30      	cmp	r3, #48	; 0x30
 801cdb2:	f105 32ff 	add.w	r2, r5, #4294967295
 801cdb6:	f47f af0a 	bne.w	801cbce <_dtoa_r+0x8fe>
 801cdba:	4615      	mov	r5, r2
 801cdbc:	e7f6      	b.n	801cdac <_dtoa_r+0xadc>
 801cdbe:	4593      	cmp	fp, r2
 801cdc0:	d105      	bne.n	801cdce <_dtoa_r+0xafe>
 801cdc2:	2331      	movs	r3, #49	; 0x31
 801cdc4:	f10a 0a01 	add.w	sl, sl, #1
 801cdc8:	f88b 3000 	strb.w	r3, [fp]
 801cdcc:	e6ff      	b.n	801cbce <_dtoa_r+0x8fe>
 801cdce:	4615      	mov	r5, r2
 801cdd0:	e79f      	b.n	801cd12 <_dtoa_r+0xa42>
 801cdd2:	f8df b064 	ldr.w	fp, [pc, #100]	; 801ce38 <_dtoa_r+0xb68>
 801cdd6:	e007      	b.n	801cde8 <_dtoa_r+0xb18>
 801cdd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cdda:	f8df b060 	ldr.w	fp, [pc, #96]	; 801ce3c <_dtoa_r+0xb6c>
 801cdde:	b11b      	cbz	r3, 801cde8 <_dtoa_r+0xb18>
 801cde0:	f10b 0308 	add.w	r3, fp, #8
 801cde4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801cde6:	6013      	str	r3, [r2, #0]
 801cde8:	4658      	mov	r0, fp
 801cdea:	b017      	add	sp, #92	; 0x5c
 801cdec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdf0:	9b06      	ldr	r3, [sp, #24]
 801cdf2:	2b01      	cmp	r3, #1
 801cdf4:	f77f ae35 	ble.w	801ca62 <_dtoa_r+0x792>
 801cdf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cdfa:	9307      	str	r3, [sp, #28]
 801cdfc:	e649      	b.n	801ca92 <_dtoa_r+0x7c2>
 801cdfe:	9b02      	ldr	r3, [sp, #8]
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	dc03      	bgt.n	801ce0c <_dtoa_r+0xb3c>
 801ce04:	9b06      	ldr	r3, [sp, #24]
 801ce06:	2b02      	cmp	r3, #2
 801ce08:	f73f aecc 	bgt.w	801cba4 <_dtoa_r+0x8d4>
 801ce0c:	465d      	mov	r5, fp
 801ce0e:	4639      	mov	r1, r7
 801ce10:	9804      	ldr	r0, [sp, #16]
 801ce12:	f7ff f9d0 	bl	801c1b6 <quorem>
 801ce16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801ce1a:	f805 8b01 	strb.w	r8, [r5], #1
 801ce1e:	9a02      	ldr	r2, [sp, #8]
 801ce20:	eba5 030b 	sub.w	r3, r5, fp
 801ce24:	429a      	cmp	r2, r3
 801ce26:	ddb0      	ble.n	801cd8a <_dtoa_r+0xaba>
 801ce28:	2300      	movs	r3, #0
 801ce2a:	220a      	movs	r2, #10
 801ce2c:	9904      	ldr	r1, [sp, #16]
 801ce2e:	4620      	mov	r0, r4
 801ce30:	f000 fc53 	bl	801d6da <__multadd>
 801ce34:	9004      	str	r0, [sp, #16]
 801ce36:	e7ea      	b.n	801ce0e <_dtoa_r+0xb3e>
 801ce38:	08023b52 	.word	0x08023b52
 801ce3c:	08023cc9 	.word	0x08023cc9

0801ce40 <std>:
 801ce40:	2300      	movs	r3, #0
 801ce42:	b510      	push	{r4, lr}
 801ce44:	4604      	mov	r4, r0
 801ce46:	e9c0 3300 	strd	r3, r3, [r0]
 801ce4a:	6083      	str	r3, [r0, #8]
 801ce4c:	8181      	strh	r1, [r0, #12]
 801ce4e:	6643      	str	r3, [r0, #100]	; 0x64
 801ce50:	81c2      	strh	r2, [r0, #14]
 801ce52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ce56:	6183      	str	r3, [r0, #24]
 801ce58:	4619      	mov	r1, r3
 801ce5a:	2208      	movs	r2, #8
 801ce5c:	305c      	adds	r0, #92	; 0x5c
 801ce5e:	f7fd fcfc 	bl	801a85a <memset>
 801ce62:	4b05      	ldr	r3, [pc, #20]	; (801ce78 <std+0x38>)
 801ce64:	6263      	str	r3, [r4, #36]	; 0x24
 801ce66:	4b05      	ldr	r3, [pc, #20]	; (801ce7c <std+0x3c>)
 801ce68:	62a3      	str	r3, [r4, #40]	; 0x28
 801ce6a:	4b05      	ldr	r3, [pc, #20]	; (801ce80 <std+0x40>)
 801ce6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ce6e:	4b05      	ldr	r3, [pc, #20]	; (801ce84 <std+0x44>)
 801ce70:	6224      	str	r4, [r4, #32]
 801ce72:	6323      	str	r3, [r4, #48]	; 0x30
 801ce74:	bd10      	pop	{r4, pc}
 801ce76:	bf00      	nop
 801ce78:	0801e385 	.word	0x0801e385
 801ce7c:	0801e3a7 	.word	0x0801e3a7
 801ce80:	0801e3df 	.word	0x0801e3df
 801ce84:	0801e403 	.word	0x0801e403

0801ce88 <_cleanup_r>:
 801ce88:	4901      	ldr	r1, [pc, #4]	; (801ce90 <_cleanup_r+0x8>)
 801ce8a:	f000 b885 	b.w	801cf98 <_fwalk_reent>
 801ce8e:	bf00      	nop
 801ce90:	0801e6dd 	.word	0x0801e6dd

0801ce94 <__sfmoreglue>:
 801ce94:	b570      	push	{r4, r5, r6, lr}
 801ce96:	1e4a      	subs	r2, r1, #1
 801ce98:	2568      	movs	r5, #104	; 0x68
 801ce9a:	4355      	muls	r5, r2
 801ce9c:	460e      	mov	r6, r1
 801ce9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801cea2:	f7fd fd31 	bl	801a908 <_malloc_r>
 801cea6:	4604      	mov	r4, r0
 801cea8:	b140      	cbz	r0, 801cebc <__sfmoreglue+0x28>
 801ceaa:	2100      	movs	r1, #0
 801ceac:	e9c0 1600 	strd	r1, r6, [r0]
 801ceb0:	300c      	adds	r0, #12
 801ceb2:	60a0      	str	r0, [r4, #8]
 801ceb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ceb8:	f7fd fccf 	bl	801a85a <memset>
 801cebc:	4620      	mov	r0, r4
 801cebe:	bd70      	pop	{r4, r5, r6, pc}

0801cec0 <__sinit>:
 801cec0:	6983      	ldr	r3, [r0, #24]
 801cec2:	b510      	push	{r4, lr}
 801cec4:	4604      	mov	r4, r0
 801cec6:	bb33      	cbnz	r3, 801cf16 <__sinit+0x56>
 801cec8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801cecc:	6503      	str	r3, [r0, #80]	; 0x50
 801cece:	4b12      	ldr	r3, [pc, #72]	; (801cf18 <__sinit+0x58>)
 801ced0:	4a12      	ldr	r2, [pc, #72]	; (801cf1c <__sinit+0x5c>)
 801ced2:	681b      	ldr	r3, [r3, #0]
 801ced4:	6282      	str	r2, [r0, #40]	; 0x28
 801ced6:	4298      	cmp	r0, r3
 801ced8:	bf04      	itt	eq
 801ceda:	2301      	moveq	r3, #1
 801cedc:	6183      	streq	r3, [r0, #24]
 801cede:	f000 f81f 	bl	801cf20 <__sfp>
 801cee2:	6060      	str	r0, [r4, #4]
 801cee4:	4620      	mov	r0, r4
 801cee6:	f000 f81b 	bl	801cf20 <__sfp>
 801ceea:	60a0      	str	r0, [r4, #8]
 801ceec:	4620      	mov	r0, r4
 801ceee:	f000 f817 	bl	801cf20 <__sfp>
 801cef2:	2200      	movs	r2, #0
 801cef4:	60e0      	str	r0, [r4, #12]
 801cef6:	2104      	movs	r1, #4
 801cef8:	6860      	ldr	r0, [r4, #4]
 801cefa:	f7ff ffa1 	bl	801ce40 <std>
 801cefe:	2201      	movs	r2, #1
 801cf00:	2109      	movs	r1, #9
 801cf02:	68a0      	ldr	r0, [r4, #8]
 801cf04:	f7ff ff9c 	bl	801ce40 <std>
 801cf08:	2202      	movs	r2, #2
 801cf0a:	2112      	movs	r1, #18
 801cf0c:	68e0      	ldr	r0, [r4, #12]
 801cf0e:	f7ff ff97 	bl	801ce40 <std>
 801cf12:	2301      	movs	r3, #1
 801cf14:	61a3      	str	r3, [r4, #24]
 801cf16:	bd10      	pop	{r4, pc}
 801cf18:	08023b34 	.word	0x08023b34
 801cf1c:	0801ce89 	.word	0x0801ce89

0801cf20 <__sfp>:
 801cf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf22:	4b1b      	ldr	r3, [pc, #108]	; (801cf90 <__sfp+0x70>)
 801cf24:	681e      	ldr	r6, [r3, #0]
 801cf26:	69b3      	ldr	r3, [r6, #24]
 801cf28:	4607      	mov	r7, r0
 801cf2a:	b913      	cbnz	r3, 801cf32 <__sfp+0x12>
 801cf2c:	4630      	mov	r0, r6
 801cf2e:	f7ff ffc7 	bl	801cec0 <__sinit>
 801cf32:	3648      	adds	r6, #72	; 0x48
 801cf34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801cf38:	3b01      	subs	r3, #1
 801cf3a:	d503      	bpl.n	801cf44 <__sfp+0x24>
 801cf3c:	6833      	ldr	r3, [r6, #0]
 801cf3e:	b133      	cbz	r3, 801cf4e <__sfp+0x2e>
 801cf40:	6836      	ldr	r6, [r6, #0]
 801cf42:	e7f7      	b.n	801cf34 <__sfp+0x14>
 801cf44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801cf48:	b16d      	cbz	r5, 801cf66 <__sfp+0x46>
 801cf4a:	3468      	adds	r4, #104	; 0x68
 801cf4c:	e7f4      	b.n	801cf38 <__sfp+0x18>
 801cf4e:	2104      	movs	r1, #4
 801cf50:	4638      	mov	r0, r7
 801cf52:	f7ff ff9f 	bl	801ce94 <__sfmoreglue>
 801cf56:	6030      	str	r0, [r6, #0]
 801cf58:	2800      	cmp	r0, #0
 801cf5a:	d1f1      	bne.n	801cf40 <__sfp+0x20>
 801cf5c:	230c      	movs	r3, #12
 801cf5e:	603b      	str	r3, [r7, #0]
 801cf60:	4604      	mov	r4, r0
 801cf62:	4620      	mov	r0, r4
 801cf64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf66:	4b0b      	ldr	r3, [pc, #44]	; (801cf94 <__sfp+0x74>)
 801cf68:	6665      	str	r5, [r4, #100]	; 0x64
 801cf6a:	e9c4 5500 	strd	r5, r5, [r4]
 801cf6e:	60a5      	str	r5, [r4, #8]
 801cf70:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801cf74:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801cf78:	2208      	movs	r2, #8
 801cf7a:	4629      	mov	r1, r5
 801cf7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801cf80:	f7fd fc6b 	bl	801a85a <memset>
 801cf84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801cf88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801cf8c:	e7e9      	b.n	801cf62 <__sfp+0x42>
 801cf8e:	bf00      	nop
 801cf90:	08023b34 	.word	0x08023b34
 801cf94:	ffff0001 	.word	0xffff0001

0801cf98 <_fwalk_reent>:
 801cf98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cf9c:	4680      	mov	r8, r0
 801cf9e:	4689      	mov	r9, r1
 801cfa0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801cfa4:	2600      	movs	r6, #0
 801cfa6:	b914      	cbnz	r4, 801cfae <_fwalk_reent+0x16>
 801cfa8:	4630      	mov	r0, r6
 801cfaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cfae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801cfb2:	3f01      	subs	r7, #1
 801cfb4:	d501      	bpl.n	801cfba <_fwalk_reent+0x22>
 801cfb6:	6824      	ldr	r4, [r4, #0]
 801cfb8:	e7f5      	b.n	801cfa6 <_fwalk_reent+0xe>
 801cfba:	89ab      	ldrh	r3, [r5, #12]
 801cfbc:	2b01      	cmp	r3, #1
 801cfbe:	d907      	bls.n	801cfd0 <_fwalk_reent+0x38>
 801cfc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cfc4:	3301      	adds	r3, #1
 801cfc6:	d003      	beq.n	801cfd0 <_fwalk_reent+0x38>
 801cfc8:	4629      	mov	r1, r5
 801cfca:	4640      	mov	r0, r8
 801cfcc:	47c8      	blx	r9
 801cfce:	4306      	orrs	r6, r0
 801cfd0:	3568      	adds	r5, #104	; 0x68
 801cfd2:	e7ee      	b.n	801cfb2 <_fwalk_reent+0x1a>

0801cfd4 <rshift>:
 801cfd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cfd6:	6906      	ldr	r6, [r0, #16]
 801cfd8:	114b      	asrs	r3, r1, #5
 801cfda:	429e      	cmp	r6, r3
 801cfdc:	f100 0414 	add.w	r4, r0, #20
 801cfe0:	dd30      	ble.n	801d044 <rshift+0x70>
 801cfe2:	f011 011f 	ands.w	r1, r1, #31
 801cfe6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801cfea:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801cfee:	d108      	bne.n	801d002 <rshift+0x2e>
 801cff0:	4621      	mov	r1, r4
 801cff2:	42b2      	cmp	r2, r6
 801cff4:	460b      	mov	r3, r1
 801cff6:	d211      	bcs.n	801d01c <rshift+0x48>
 801cff8:	f852 3b04 	ldr.w	r3, [r2], #4
 801cffc:	f841 3b04 	str.w	r3, [r1], #4
 801d000:	e7f7      	b.n	801cff2 <rshift+0x1e>
 801d002:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801d006:	f1c1 0c20 	rsb	ip, r1, #32
 801d00a:	40cd      	lsrs	r5, r1
 801d00c:	3204      	adds	r2, #4
 801d00e:	4623      	mov	r3, r4
 801d010:	42b2      	cmp	r2, r6
 801d012:	4617      	mov	r7, r2
 801d014:	d30c      	bcc.n	801d030 <rshift+0x5c>
 801d016:	601d      	str	r5, [r3, #0]
 801d018:	b105      	cbz	r5, 801d01c <rshift+0x48>
 801d01a:	3304      	adds	r3, #4
 801d01c:	1b1a      	subs	r2, r3, r4
 801d01e:	42a3      	cmp	r3, r4
 801d020:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d024:	bf08      	it	eq
 801d026:	2300      	moveq	r3, #0
 801d028:	6102      	str	r2, [r0, #16]
 801d02a:	bf08      	it	eq
 801d02c:	6143      	streq	r3, [r0, #20]
 801d02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d030:	683f      	ldr	r7, [r7, #0]
 801d032:	fa07 f70c 	lsl.w	r7, r7, ip
 801d036:	433d      	orrs	r5, r7
 801d038:	f843 5b04 	str.w	r5, [r3], #4
 801d03c:	f852 5b04 	ldr.w	r5, [r2], #4
 801d040:	40cd      	lsrs	r5, r1
 801d042:	e7e5      	b.n	801d010 <rshift+0x3c>
 801d044:	4623      	mov	r3, r4
 801d046:	e7e9      	b.n	801d01c <rshift+0x48>

0801d048 <__hexdig_fun>:
 801d048:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801d04c:	2b09      	cmp	r3, #9
 801d04e:	d802      	bhi.n	801d056 <__hexdig_fun+0xe>
 801d050:	3820      	subs	r0, #32
 801d052:	b2c0      	uxtb	r0, r0
 801d054:	4770      	bx	lr
 801d056:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801d05a:	2b05      	cmp	r3, #5
 801d05c:	d801      	bhi.n	801d062 <__hexdig_fun+0x1a>
 801d05e:	3847      	subs	r0, #71	; 0x47
 801d060:	e7f7      	b.n	801d052 <__hexdig_fun+0xa>
 801d062:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801d066:	2b05      	cmp	r3, #5
 801d068:	d801      	bhi.n	801d06e <__hexdig_fun+0x26>
 801d06a:	3827      	subs	r0, #39	; 0x27
 801d06c:	e7f1      	b.n	801d052 <__hexdig_fun+0xa>
 801d06e:	2000      	movs	r0, #0
 801d070:	4770      	bx	lr

0801d072 <__gethex>:
 801d072:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d076:	b08b      	sub	sp, #44	; 0x2c
 801d078:	468a      	mov	sl, r1
 801d07a:	9002      	str	r0, [sp, #8]
 801d07c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801d07e:	9306      	str	r3, [sp, #24]
 801d080:	4690      	mov	r8, r2
 801d082:	f000 facd 	bl	801d620 <__localeconv_l>
 801d086:	6803      	ldr	r3, [r0, #0]
 801d088:	9303      	str	r3, [sp, #12]
 801d08a:	4618      	mov	r0, r3
 801d08c:	f7e3 f8aa 	bl	80001e4 <strlen>
 801d090:	9b03      	ldr	r3, [sp, #12]
 801d092:	9001      	str	r0, [sp, #4]
 801d094:	4403      	add	r3, r0
 801d096:	f04f 0b00 	mov.w	fp, #0
 801d09a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801d09e:	9307      	str	r3, [sp, #28]
 801d0a0:	f8da 3000 	ldr.w	r3, [sl]
 801d0a4:	3302      	adds	r3, #2
 801d0a6:	461f      	mov	r7, r3
 801d0a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d0ac:	2830      	cmp	r0, #48	; 0x30
 801d0ae:	d06c      	beq.n	801d18a <__gethex+0x118>
 801d0b0:	f7ff ffca 	bl	801d048 <__hexdig_fun>
 801d0b4:	4604      	mov	r4, r0
 801d0b6:	2800      	cmp	r0, #0
 801d0b8:	d16a      	bne.n	801d190 <__gethex+0x11e>
 801d0ba:	9a01      	ldr	r2, [sp, #4]
 801d0bc:	9903      	ldr	r1, [sp, #12]
 801d0be:	4638      	mov	r0, r7
 801d0c0:	f7fe f988 	bl	801b3d4 <strncmp>
 801d0c4:	2800      	cmp	r0, #0
 801d0c6:	d166      	bne.n	801d196 <__gethex+0x124>
 801d0c8:	9b01      	ldr	r3, [sp, #4]
 801d0ca:	5cf8      	ldrb	r0, [r7, r3]
 801d0cc:	18fe      	adds	r6, r7, r3
 801d0ce:	f7ff ffbb 	bl	801d048 <__hexdig_fun>
 801d0d2:	2800      	cmp	r0, #0
 801d0d4:	d062      	beq.n	801d19c <__gethex+0x12a>
 801d0d6:	4633      	mov	r3, r6
 801d0d8:	7818      	ldrb	r0, [r3, #0]
 801d0da:	2830      	cmp	r0, #48	; 0x30
 801d0dc:	461f      	mov	r7, r3
 801d0de:	f103 0301 	add.w	r3, r3, #1
 801d0e2:	d0f9      	beq.n	801d0d8 <__gethex+0x66>
 801d0e4:	f7ff ffb0 	bl	801d048 <__hexdig_fun>
 801d0e8:	fab0 f580 	clz	r5, r0
 801d0ec:	096d      	lsrs	r5, r5, #5
 801d0ee:	4634      	mov	r4, r6
 801d0f0:	f04f 0b01 	mov.w	fp, #1
 801d0f4:	463a      	mov	r2, r7
 801d0f6:	4616      	mov	r6, r2
 801d0f8:	3201      	adds	r2, #1
 801d0fa:	7830      	ldrb	r0, [r6, #0]
 801d0fc:	f7ff ffa4 	bl	801d048 <__hexdig_fun>
 801d100:	2800      	cmp	r0, #0
 801d102:	d1f8      	bne.n	801d0f6 <__gethex+0x84>
 801d104:	9a01      	ldr	r2, [sp, #4]
 801d106:	9903      	ldr	r1, [sp, #12]
 801d108:	4630      	mov	r0, r6
 801d10a:	f7fe f963 	bl	801b3d4 <strncmp>
 801d10e:	b950      	cbnz	r0, 801d126 <__gethex+0xb4>
 801d110:	b954      	cbnz	r4, 801d128 <__gethex+0xb6>
 801d112:	9b01      	ldr	r3, [sp, #4]
 801d114:	18f4      	adds	r4, r6, r3
 801d116:	4622      	mov	r2, r4
 801d118:	4616      	mov	r6, r2
 801d11a:	3201      	adds	r2, #1
 801d11c:	7830      	ldrb	r0, [r6, #0]
 801d11e:	f7ff ff93 	bl	801d048 <__hexdig_fun>
 801d122:	2800      	cmp	r0, #0
 801d124:	d1f8      	bne.n	801d118 <__gethex+0xa6>
 801d126:	b10c      	cbz	r4, 801d12c <__gethex+0xba>
 801d128:	1ba4      	subs	r4, r4, r6
 801d12a:	00a4      	lsls	r4, r4, #2
 801d12c:	7833      	ldrb	r3, [r6, #0]
 801d12e:	2b50      	cmp	r3, #80	; 0x50
 801d130:	d001      	beq.n	801d136 <__gethex+0xc4>
 801d132:	2b70      	cmp	r3, #112	; 0x70
 801d134:	d140      	bne.n	801d1b8 <__gethex+0x146>
 801d136:	7873      	ldrb	r3, [r6, #1]
 801d138:	2b2b      	cmp	r3, #43	; 0x2b
 801d13a:	d031      	beq.n	801d1a0 <__gethex+0x12e>
 801d13c:	2b2d      	cmp	r3, #45	; 0x2d
 801d13e:	d033      	beq.n	801d1a8 <__gethex+0x136>
 801d140:	1c71      	adds	r1, r6, #1
 801d142:	f04f 0900 	mov.w	r9, #0
 801d146:	7808      	ldrb	r0, [r1, #0]
 801d148:	f7ff ff7e 	bl	801d048 <__hexdig_fun>
 801d14c:	1e43      	subs	r3, r0, #1
 801d14e:	b2db      	uxtb	r3, r3
 801d150:	2b18      	cmp	r3, #24
 801d152:	d831      	bhi.n	801d1b8 <__gethex+0x146>
 801d154:	f1a0 0210 	sub.w	r2, r0, #16
 801d158:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d15c:	f7ff ff74 	bl	801d048 <__hexdig_fun>
 801d160:	1e43      	subs	r3, r0, #1
 801d162:	b2db      	uxtb	r3, r3
 801d164:	2b18      	cmp	r3, #24
 801d166:	d922      	bls.n	801d1ae <__gethex+0x13c>
 801d168:	f1b9 0f00 	cmp.w	r9, #0
 801d16c:	d000      	beq.n	801d170 <__gethex+0xfe>
 801d16e:	4252      	negs	r2, r2
 801d170:	4414      	add	r4, r2
 801d172:	f8ca 1000 	str.w	r1, [sl]
 801d176:	b30d      	cbz	r5, 801d1bc <__gethex+0x14a>
 801d178:	f1bb 0f00 	cmp.w	fp, #0
 801d17c:	bf0c      	ite	eq
 801d17e:	2706      	moveq	r7, #6
 801d180:	2700      	movne	r7, #0
 801d182:	4638      	mov	r0, r7
 801d184:	b00b      	add	sp, #44	; 0x2c
 801d186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d18a:	f10b 0b01 	add.w	fp, fp, #1
 801d18e:	e78a      	b.n	801d0a6 <__gethex+0x34>
 801d190:	2500      	movs	r5, #0
 801d192:	462c      	mov	r4, r5
 801d194:	e7ae      	b.n	801d0f4 <__gethex+0x82>
 801d196:	463e      	mov	r6, r7
 801d198:	2501      	movs	r5, #1
 801d19a:	e7c7      	b.n	801d12c <__gethex+0xba>
 801d19c:	4604      	mov	r4, r0
 801d19e:	e7fb      	b.n	801d198 <__gethex+0x126>
 801d1a0:	f04f 0900 	mov.w	r9, #0
 801d1a4:	1cb1      	adds	r1, r6, #2
 801d1a6:	e7ce      	b.n	801d146 <__gethex+0xd4>
 801d1a8:	f04f 0901 	mov.w	r9, #1
 801d1ac:	e7fa      	b.n	801d1a4 <__gethex+0x132>
 801d1ae:	230a      	movs	r3, #10
 801d1b0:	fb03 0202 	mla	r2, r3, r2, r0
 801d1b4:	3a10      	subs	r2, #16
 801d1b6:	e7cf      	b.n	801d158 <__gethex+0xe6>
 801d1b8:	4631      	mov	r1, r6
 801d1ba:	e7da      	b.n	801d172 <__gethex+0x100>
 801d1bc:	1bf3      	subs	r3, r6, r7
 801d1be:	3b01      	subs	r3, #1
 801d1c0:	4629      	mov	r1, r5
 801d1c2:	2b07      	cmp	r3, #7
 801d1c4:	dc49      	bgt.n	801d25a <__gethex+0x1e8>
 801d1c6:	9802      	ldr	r0, [sp, #8]
 801d1c8:	f000 fa3c 	bl	801d644 <_Balloc>
 801d1cc:	9b01      	ldr	r3, [sp, #4]
 801d1ce:	f100 0914 	add.w	r9, r0, #20
 801d1d2:	f04f 0b00 	mov.w	fp, #0
 801d1d6:	f1c3 0301 	rsb	r3, r3, #1
 801d1da:	4605      	mov	r5, r0
 801d1dc:	f8cd 9010 	str.w	r9, [sp, #16]
 801d1e0:	46da      	mov	sl, fp
 801d1e2:	9308      	str	r3, [sp, #32]
 801d1e4:	42b7      	cmp	r7, r6
 801d1e6:	d33b      	bcc.n	801d260 <__gethex+0x1ee>
 801d1e8:	9804      	ldr	r0, [sp, #16]
 801d1ea:	f840 ab04 	str.w	sl, [r0], #4
 801d1ee:	eba0 0009 	sub.w	r0, r0, r9
 801d1f2:	1080      	asrs	r0, r0, #2
 801d1f4:	6128      	str	r0, [r5, #16]
 801d1f6:	0147      	lsls	r7, r0, #5
 801d1f8:	4650      	mov	r0, sl
 801d1fa:	f000 fae7 	bl	801d7cc <__hi0bits>
 801d1fe:	f8d8 6000 	ldr.w	r6, [r8]
 801d202:	1a3f      	subs	r7, r7, r0
 801d204:	42b7      	cmp	r7, r6
 801d206:	dd64      	ble.n	801d2d2 <__gethex+0x260>
 801d208:	1bbf      	subs	r7, r7, r6
 801d20a:	4639      	mov	r1, r7
 801d20c:	4628      	mov	r0, r5
 801d20e:	f000 fdf7 	bl	801de00 <__any_on>
 801d212:	4682      	mov	sl, r0
 801d214:	b178      	cbz	r0, 801d236 <__gethex+0x1c4>
 801d216:	1e7b      	subs	r3, r7, #1
 801d218:	1159      	asrs	r1, r3, #5
 801d21a:	f003 021f 	and.w	r2, r3, #31
 801d21e:	f04f 0a01 	mov.w	sl, #1
 801d222:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801d226:	fa0a f202 	lsl.w	r2, sl, r2
 801d22a:	420a      	tst	r2, r1
 801d22c:	d003      	beq.n	801d236 <__gethex+0x1c4>
 801d22e:	4553      	cmp	r3, sl
 801d230:	dc46      	bgt.n	801d2c0 <__gethex+0x24e>
 801d232:	f04f 0a02 	mov.w	sl, #2
 801d236:	4639      	mov	r1, r7
 801d238:	4628      	mov	r0, r5
 801d23a:	f7ff fecb 	bl	801cfd4 <rshift>
 801d23e:	443c      	add	r4, r7
 801d240:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d244:	42a3      	cmp	r3, r4
 801d246:	da52      	bge.n	801d2ee <__gethex+0x27c>
 801d248:	4629      	mov	r1, r5
 801d24a:	9802      	ldr	r0, [sp, #8]
 801d24c:	f000 fa2e 	bl	801d6ac <_Bfree>
 801d250:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d252:	2300      	movs	r3, #0
 801d254:	6013      	str	r3, [r2, #0]
 801d256:	27a3      	movs	r7, #163	; 0xa3
 801d258:	e793      	b.n	801d182 <__gethex+0x110>
 801d25a:	3101      	adds	r1, #1
 801d25c:	105b      	asrs	r3, r3, #1
 801d25e:	e7b0      	b.n	801d1c2 <__gethex+0x150>
 801d260:	1e73      	subs	r3, r6, #1
 801d262:	9305      	str	r3, [sp, #20]
 801d264:	9a07      	ldr	r2, [sp, #28]
 801d266:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d26a:	4293      	cmp	r3, r2
 801d26c:	d018      	beq.n	801d2a0 <__gethex+0x22e>
 801d26e:	f1bb 0f20 	cmp.w	fp, #32
 801d272:	d107      	bne.n	801d284 <__gethex+0x212>
 801d274:	9b04      	ldr	r3, [sp, #16]
 801d276:	f8c3 a000 	str.w	sl, [r3]
 801d27a:	3304      	adds	r3, #4
 801d27c:	f04f 0a00 	mov.w	sl, #0
 801d280:	9304      	str	r3, [sp, #16]
 801d282:	46d3      	mov	fp, sl
 801d284:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801d288:	f7ff fede 	bl	801d048 <__hexdig_fun>
 801d28c:	f000 000f 	and.w	r0, r0, #15
 801d290:	fa00 f00b 	lsl.w	r0, r0, fp
 801d294:	ea4a 0a00 	orr.w	sl, sl, r0
 801d298:	f10b 0b04 	add.w	fp, fp, #4
 801d29c:	9b05      	ldr	r3, [sp, #20]
 801d29e:	e00d      	b.n	801d2bc <__gethex+0x24a>
 801d2a0:	9b05      	ldr	r3, [sp, #20]
 801d2a2:	9a08      	ldr	r2, [sp, #32]
 801d2a4:	4413      	add	r3, r2
 801d2a6:	42bb      	cmp	r3, r7
 801d2a8:	d3e1      	bcc.n	801d26e <__gethex+0x1fc>
 801d2aa:	4618      	mov	r0, r3
 801d2ac:	9a01      	ldr	r2, [sp, #4]
 801d2ae:	9903      	ldr	r1, [sp, #12]
 801d2b0:	9309      	str	r3, [sp, #36]	; 0x24
 801d2b2:	f7fe f88f 	bl	801b3d4 <strncmp>
 801d2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2b8:	2800      	cmp	r0, #0
 801d2ba:	d1d8      	bne.n	801d26e <__gethex+0x1fc>
 801d2bc:	461e      	mov	r6, r3
 801d2be:	e791      	b.n	801d1e4 <__gethex+0x172>
 801d2c0:	1eb9      	subs	r1, r7, #2
 801d2c2:	4628      	mov	r0, r5
 801d2c4:	f000 fd9c 	bl	801de00 <__any_on>
 801d2c8:	2800      	cmp	r0, #0
 801d2ca:	d0b2      	beq.n	801d232 <__gethex+0x1c0>
 801d2cc:	f04f 0a03 	mov.w	sl, #3
 801d2d0:	e7b1      	b.n	801d236 <__gethex+0x1c4>
 801d2d2:	da09      	bge.n	801d2e8 <__gethex+0x276>
 801d2d4:	1bf7      	subs	r7, r6, r7
 801d2d6:	4629      	mov	r1, r5
 801d2d8:	463a      	mov	r2, r7
 801d2da:	9802      	ldr	r0, [sp, #8]
 801d2dc:	f000 fbb2 	bl	801da44 <__lshift>
 801d2e0:	1be4      	subs	r4, r4, r7
 801d2e2:	4605      	mov	r5, r0
 801d2e4:	f100 0914 	add.w	r9, r0, #20
 801d2e8:	f04f 0a00 	mov.w	sl, #0
 801d2ec:	e7a8      	b.n	801d240 <__gethex+0x1ce>
 801d2ee:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d2f2:	42a0      	cmp	r0, r4
 801d2f4:	dd6a      	ble.n	801d3cc <__gethex+0x35a>
 801d2f6:	1b04      	subs	r4, r0, r4
 801d2f8:	42a6      	cmp	r6, r4
 801d2fa:	dc2e      	bgt.n	801d35a <__gethex+0x2e8>
 801d2fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d300:	2b02      	cmp	r3, #2
 801d302:	d022      	beq.n	801d34a <__gethex+0x2d8>
 801d304:	2b03      	cmp	r3, #3
 801d306:	d024      	beq.n	801d352 <__gethex+0x2e0>
 801d308:	2b01      	cmp	r3, #1
 801d30a:	d115      	bne.n	801d338 <__gethex+0x2c6>
 801d30c:	42a6      	cmp	r6, r4
 801d30e:	d113      	bne.n	801d338 <__gethex+0x2c6>
 801d310:	2e01      	cmp	r6, #1
 801d312:	dc0b      	bgt.n	801d32c <__gethex+0x2ba>
 801d314:	9a06      	ldr	r2, [sp, #24]
 801d316:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d31a:	6013      	str	r3, [r2, #0]
 801d31c:	2301      	movs	r3, #1
 801d31e:	612b      	str	r3, [r5, #16]
 801d320:	f8c9 3000 	str.w	r3, [r9]
 801d324:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d326:	2762      	movs	r7, #98	; 0x62
 801d328:	601d      	str	r5, [r3, #0]
 801d32a:	e72a      	b.n	801d182 <__gethex+0x110>
 801d32c:	1e71      	subs	r1, r6, #1
 801d32e:	4628      	mov	r0, r5
 801d330:	f000 fd66 	bl	801de00 <__any_on>
 801d334:	2800      	cmp	r0, #0
 801d336:	d1ed      	bne.n	801d314 <__gethex+0x2a2>
 801d338:	4629      	mov	r1, r5
 801d33a:	9802      	ldr	r0, [sp, #8]
 801d33c:	f000 f9b6 	bl	801d6ac <_Bfree>
 801d340:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d342:	2300      	movs	r3, #0
 801d344:	6013      	str	r3, [r2, #0]
 801d346:	2750      	movs	r7, #80	; 0x50
 801d348:	e71b      	b.n	801d182 <__gethex+0x110>
 801d34a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d34c:	2b00      	cmp	r3, #0
 801d34e:	d0e1      	beq.n	801d314 <__gethex+0x2a2>
 801d350:	e7f2      	b.n	801d338 <__gethex+0x2c6>
 801d352:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d354:	2b00      	cmp	r3, #0
 801d356:	d1dd      	bne.n	801d314 <__gethex+0x2a2>
 801d358:	e7ee      	b.n	801d338 <__gethex+0x2c6>
 801d35a:	1e67      	subs	r7, r4, #1
 801d35c:	f1ba 0f00 	cmp.w	sl, #0
 801d360:	d131      	bne.n	801d3c6 <__gethex+0x354>
 801d362:	b127      	cbz	r7, 801d36e <__gethex+0x2fc>
 801d364:	4639      	mov	r1, r7
 801d366:	4628      	mov	r0, r5
 801d368:	f000 fd4a 	bl	801de00 <__any_on>
 801d36c:	4682      	mov	sl, r0
 801d36e:	117a      	asrs	r2, r7, #5
 801d370:	2301      	movs	r3, #1
 801d372:	f007 071f 	and.w	r7, r7, #31
 801d376:	fa03 f707 	lsl.w	r7, r3, r7
 801d37a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801d37e:	4621      	mov	r1, r4
 801d380:	421f      	tst	r7, r3
 801d382:	4628      	mov	r0, r5
 801d384:	bf18      	it	ne
 801d386:	f04a 0a02 	orrne.w	sl, sl, #2
 801d38a:	1b36      	subs	r6, r6, r4
 801d38c:	f7ff fe22 	bl	801cfd4 <rshift>
 801d390:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801d394:	2702      	movs	r7, #2
 801d396:	f1ba 0f00 	cmp.w	sl, #0
 801d39a:	d048      	beq.n	801d42e <__gethex+0x3bc>
 801d39c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d3a0:	2b02      	cmp	r3, #2
 801d3a2:	d015      	beq.n	801d3d0 <__gethex+0x35e>
 801d3a4:	2b03      	cmp	r3, #3
 801d3a6:	d017      	beq.n	801d3d8 <__gethex+0x366>
 801d3a8:	2b01      	cmp	r3, #1
 801d3aa:	d109      	bne.n	801d3c0 <__gethex+0x34e>
 801d3ac:	f01a 0f02 	tst.w	sl, #2
 801d3b0:	d006      	beq.n	801d3c0 <__gethex+0x34e>
 801d3b2:	f8d9 3000 	ldr.w	r3, [r9]
 801d3b6:	ea4a 0a03 	orr.w	sl, sl, r3
 801d3ba:	f01a 0f01 	tst.w	sl, #1
 801d3be:	d10e      	bne.n	801d3de <__gethex+0x36c>
 801d3c0:	f047 0710 	orr.w	r7, r7, #16
 801d3c4:	e033      	b.n	801d42e <__gethex+0x3bc>
 801d3c6:	f04f 0a01 	mov.w	sl, #1
 801d3ca:	e7d0      	b.n	801d36e <__gethex+0x2fc>
 801d3cc:	2701      	movs	r7, #1
 801d3ce:	e7e2      	b.n	801d396 <__gethex+0x324>
 801d3d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d3d2:	f1c3 0301 	rsb	r3, r3, #1
 801d3d6:	9315      	str	r3, [sp, #84]	; 0x54
 801d3d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	d0f0      	beq.n	801d3c0 <__gethex+0x34e>
 801d3de:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801d3e2:	f105 0314 	add.w	r3, r5, #20
 801d3e6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801d3ea:	eb03 010a 	add.w	r1, r3, sl
 801d3ee:	f04f 0c00 	mov.w	ip, #0
 801d3f2:	4618      	mov	r0, r3
 801d3f4:	f853 2b04 	ldr.w	r2, [r3], #4
 801d3f8:	f1b2 3fff 	cmp.w	r2, #4294967295
 801d3fc:	d01c      	beq.n	801d438 <__gethex+0x3c6>
 801d3fe:	3201      	adds	r2, #1
 801d400:	6002      	str	r2, [r0, #0]
 801d402:	2f02      	cmp	r7, #2
 801d404:	f105 0314 	add.w	r3, r5, #20
 801d408:	d138      	bne.n	801d47c <__gethex+0x40a>
 801d40a:	f8d8 2000 	ldr.w	r2, [r8]
 801d40e:	3a01      	subs	r2, #1
 801d410:	42b2      	cmp	r2, r6
 801d412:	d10a      	bne.n	801d42a <__gethex+0x3b8>
 801d414:	1171      	asrs	r1, r6, #5
 801d416:	2201      	movs	r2, #1
 801d418:	f006 061f 	and.w	r6, r6, #31
 801d41c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d420:	fa02 f606 	lsl.w	r6, r2, r6
 801d424:	421e      	tst	r6, r3
 801d426:	bf18      	it	ne
 801d428:	4617      	movne	r7, r2
 801d42a:	f047 0720 	orr.w	r7, r7, #32
 801d42e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d430:	601d      	str	r5, [r3, #0]
 801d432:	9b06      	ldr	r3, [sp, #24]
 801d434:	601c      	str	r4, [r3, #0]
 801d436:	e6a4      	b.n	801d182 <__gethex+0x110>
 801d438:	4299      	cmp	r1, r3
 801d43a:	f843 cc04 	str.w	ip, [r3, #-4]
 801d43e:	d8d8      	bhi.n	801d3f2 <__gethex+0x380>
 801d440:	68ab      	ldr	r3, [r5, #8]
 801d442:	4599      	cmp	r9, r3
 801d444:	db12      	blt.n	801d46c <__gethex+0x3fa>
 801d446:	6869      	ldr	r1, [r5, #4]
 801d448:	9802      	ldr	r0, [sp, #8]
 801d44a:	3101      	adds	r1, #1
 801d44c:	f000 f8fa 	bl	801d644 <_Balloc>
 801d450:	692a      	ldr	r2, [r5, #16]
 801d452:	3202      	adds	r2, #2
 801d454:	f105 010c 	add.w	r1, r5, #12
 801d458:	4683      	mov	fp, r0
 801d45a:	0092      	lsls	r2, r2, #2
 801d45c:	300c      	adds	r0, #12
 801d45e:	f7fd f9d8 	bl	801a812 <memcpy>
 801d462:	4629      	mov	r1, r5
 801d464:	9802      	ldr	r0, [sp, #8]
 801d466:	f000 f921 	bl	801d6ac <_Bfree>
 801d46a:	465d      	mov	r5, fp
 801d46c:	692b      	ldr	r3, [r5, #16]
 801d46e:	1c5a      	adds	r2, r3, #1
 801d470:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801d474:	612a      	str	r2, [r5, #16]
 801d476:	2201      	movs	r2, #1
 801d478:	615a      	str	r2, [r3, #20]
 801d47a:	e7c2      	b.n	801d402 <__gethex+0x390>
 801d47c:	692a      	ldr	r2, [r5, #16]
 801d47e:	454a      	cmp	r2, r9
 801d480:	dd0b      	ble.n	801d49a <__gethex+0x428>
 801d482:	2101      	movs	r1, #1
 801d484:	4628      	mov	r0, r5
 801d486:	f7ff fda5 	bl	801cfd4 <rshift>
 801d48a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d48e:	3401      	adds	r4, #1
 801d490:	42a3      	cmp	r3, r4
 801d492:	f6ff aed9 	blt.w	801d248 <__gethex+0x1d6>
 801d496:	2701      	movs	r7, #1
 801d498:	e7c7      	b.n	801d42a <__gethex+0x3b8>
 801d49a:	f016 061f 	ands.w	r6, r6, #31
 801d49e:	d0fa      	beq.n	801d496 <__gethex+0x424>
 801d4a0:	449a      	add	sl, r3
 801d4a2:	f1c6 0620 	rsb	r6, r6, #32
 801d4a6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801d4aa:	f000 f98f 	bl	801d7cc <__hi0bits>
 801d4ae:	42b0      	cmp	r0, r6
 801d4b0:	dbe7      	blt.n	801d482 <__gethex+0x410>
 801d4b2:	e7f0      	b.n	801d496 <__gethex+0x424>

0801d4b4 <L_shift>:
 801d4b4:	f1c2 0208 	rsb	r2, r2, #8
 801d4b8:	0092      	lsls	r2, r2, #2
 801d4ba:	b570      	push	{r4, r5, r6, lr}
 801d4bc:	f1c2 0620 	rsb	r6, r2, #32
 801d4c0:	6843      	ldr	r3, [r0, #4]
 801d4c2:	6804      	ldr	r4, [r0, #0]
 801d4c4:	fa03 f506 	lsl.w	r5, r3, r6
 801d4c8:	432c      	orrs	r4, r5
 801d4ca:	40d3      	lsrs	r3, r2
 801d4cc:	6004      	str	r4, [r0, #0]
 801d4ce:	f840 3f04 	str.w	r3, [r0, #4]!
 801d4d2:	4288      	cmp	r0, r1
 801d4d4:	d3f4      	bcc.n	801d4c0 <L_shift+0xc>
 801d4d6:	bd70      	pop	{r4, r5, r6, pc}

0801d4d8 <__match>:
 801d4d8:	b530      	push	{r4, r5, lr}
 801d4da:	6803      	ldr	r3, [r0, #0]
 801d4dc:	3301      	adds	r3, #1
 801d4de:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d4e2:	b914      	cbnz	r4, 801d4ea <__match+0x12>
 801d4e4:	6003      	str	r3, [r0, #0]
 801d4e6:	2001      	movs	r0, #1
 801d4e8:	bd30      	pop	{r4, r5, pc}
 801d4ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d4ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801d4f2:	2d19      	cmp	r5, #25
 801d4f4:	bf98      	it	ls
 801d4f6:	3220      	addls	r2, #32
 801d4f8:	42a2      	cmp	r2, r4
 801d4fa:	d0f0      	beq.n	801d4de <__match+0x6>
 801d4fc:	2000      	movs	r0, #0
 801d4fe:	e7f3      	b.n	801d4e8 <__match+0x10>

0801d500 <__hexnan>:
 801d500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d504:	680b      	ldr	r3, [r1, #0]
 801d506:	6801      	ldr	r1, [r0, #0]
 801d508:	115f      	asrs	r7, r3, #5
 801d50a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801d50e:	f013 031f 	ands.w	r3, r3, #31
 801d512:	b087      	sub	sp, #28
 801d514:	bf18      	it	ne
 801d516:	3704      	addne	r7, #4
 801d518:	2500      	movs	r5, #0
 801d51a:	1f3e      	subs	r6, r7, #4
 801d51c:	4682      	mov	sl, r0
 801d51e:	4690      	mov	r8, r2
 801d520:	9301      	str	r3, [sp, #4]
 801d522:	f847 5c04 	str.w	r5, [r7, #-4]
 801d526:	46b1      	mov	r9, r6
 801d528:	4634      	mov	r4, r6
 801d52a:	9502      	str	r5, [sp, #8]
 801d52c:	46ab      	mov	fp, r5
 801d52e:	784a      	ldrb	r2, [r1, #1]
 801d530:	1c4b      	adds	r3, r1, #1
 801d532:	9303      	str	r3, [sp, #12]
 801d534:	b342      	cbz	r2, 801d588 <__hexnan+0x88>
 801d536:	4610      	mov	r0, r2
 801d538:	9105      	str	r1, [sp, #20]
 801d53a:	9204      	str	r2, [sp, #16]
 801d53c:	f7ff fd84 	bl	801d048 <__hexdig_fun>
 801d540:	2800      	cmp	r0, #0
 801d542:	d143      	bne.n	801d5cc <__hexnan+0xcc>
 801d544:	9a04      	ldr	r2, [sp, #16]
 801d546:	9905      	ldr	r1, [sp, #20]
 801d548:	2a20      	cmp	r2, #32
 801d54a:	d818      	bhi.n	801d57e <__hexnan+0x7e>
 801d54c:	9b02      	ldr	r3, [sp, #8]
 801d54e:	459b      	cmp	fp, r3
 801d550:	dd13      	ble.n	801d57a <__hexnan+0x7a>
 801d552:	454c      	cmp	r4, r9
 801d554:	d206      	bcs.n	801d564 <__hexnan+0x64>
 801d556:	2d07      	cmp	r5, #7
 801d558:	dc04      	bgt.n	801d564 <__hexnan+0x64>
 801d55a:	462a      	mov	r2, r5
 801d55c:	4649      	mov	r1, r9
 801d55e:	4620      	mov	r0, r4
 801d560:	f7ff ffa8 	bl	801d4b4 <L_shift>
 801d564:	4544      	cmp	r4, r8
 801d566:	d944      	bls.n	801d5f2 <__hexnan+0xf2>
 801d568:	2300      	movs	r3, #0
 801d56a:	f1a4 0904 	sub.w	r9, r4, #4
 801d56e:	f844 3c04 	str.w	r3, [r4, #-4]
 801d572:	f8cd b008 	str.w	fp, [sp, #8]
 801d576:	464c      	mov	r4, r9
 801d578:	461d      	mov	r5, r3
 801d57a:	9903      	ldr	r1, [sp, #12]
 801d57c:	e7d7      	b.n	801d52e <__hexnan+0x2e>
 801d57e:	2a29      	cmp	r2, #41	; 0x29
 801d580:	d14a      	bne.n	801d618 <__hexnan+0x118>
 801d582:	3102      	adds	r1, #2
 801d584:	f8ca 1000 	str.w	r1, [sl]
 801d588:	f1bb 0f00 	cmp.w	fp, #0
 801d58c:	d044      	beq.n	801d618 <__hexnan+0x118>
 801d58e:	454c      	cmp	r4, r9
 801d590:	d206      	bcs.n	801d5a0 <__hexnan+0xa0>
 801d592:	2d07      	cmp	r5, #7
 801d594:	dc04      	bgt.n	801d5a0 <__hexnan+0xa0>
 801d596:	462a      	mov	r2, r5
 801d598:	4649      	mov	r1, r9
 801d59a:	4620      	mov	r0, r4
 801d59c:	f7ff ff8a 	bl	801d4b4 <L_shift>
 801d5a0:	4544      	cmp	r4, r8
 801d5a2:	d928      	bls.n	801d5f6 <__hexnan+0xf6>
 801d5a4:	4643      	mov	r3, r8
 801d5a6:	f854 2b04 	ldr.w	r2, [r4], #4
 801d5aa:	f843 2b04 	str.w	r2, [r3], #4
 801d5ae:	42a6      	cmp	r6, r4
 801d5b0:	d2f9      	bcs.n	801d5a6 <__hexnan+0xa6>
 801d5b2:	2200      	movs	r2, #0
 801d5b4:	f843 2b04 	str.w	r2, [r3], #4
 801d5b8:	429e      	cmp	r6, r3
 801d5ba:	d2fb      	bcs.n	801d5b4 <__hexnan+0xb4>
 801d5bc:	6833      	ldr	r3, [r6, #0]
 801d5be:	b91b      	cbnz	r3, 801d5c8 <__hexnan+0xc8>
 801d5c0:	4546      	cmp	r6, r8
 801d5c2:	d127      	bne.n	801d614 <__hexnan+0x114>
 801d5c4:	2301      	movs	r3, #1
 801d5c6:	6033      	str	r3, [r6, #0]
 801d5c8:	2005      	movs	r0, #5
 801d5ca:	e026      	b.n	801d61a <__hexnan+0x11a>
 801d5cc:	3501      	adds	r5, #1
 801d5ce:	2d08      	cmp	r5, #8
 801d5d0:	f10b 0b01 	add.w	fp, fp, #1
 801d5d4:	dd06      	ble.n	801d5e4 <__hexnan+0xe4>
 801d5d6:	4544      	cmp	r4, r8
 801d5d8:	d9cf      	bls.n	801d57a <__hexnan+0x7a>
 801d5da:	2300      	movs	r3, #0
 801d5dc:	f844 3c04 	str.w	r3, [r4, #-4]
 801d5e0:	2501      	movs	r5, #1
 801d5e2:	3c04      	subs	r4, #4
 801d5e4:	6822      	ldr	r2, [r4, #0]
 801d5e6:	f000 000f 	and.w	r0, r0, #15
 801d5ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801d5ee:	6020      	str	r0, [r4, #0]
 801d5f0:	e7c3      	b.n	801d57a <__hexnan+0x7a>
 801d5f2:	2508      	movs	r5, #8
 801d5f4:	e7c1      	b.n	801d57a <__hexnan+0x7a>
 801d5f6:	9b01      	ldr	r3, [sp, #4]
 801d5f8:	2b00      	cmp	r3, #0
 801d5fa:	d0df      	beq.n	801d5bc <__hexnan+0xbc>
 801d5fc:	f04f 32ff 	mov.w	r2, #4294967295
 801d600:	f1c3 0320 	rsb	r3, r3, #32
 801d604:	fa22 f303 	lsr.w	r3, r2, r3
 801d608:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801d60c:	401a      	ands	r2, r3
 801d60e:	f847 2c04 	str.w	r2, [r7, #-4]
 801d612:	e7d3      	b.n	801d5bc <__hexnan+0xbc>
 801d614:	3e04      	subs	r6, #4
 801d616:	e7d1      	b.n	801d5bc <__hexnan+0xbc>
 801d618:	2004      	movs	r0, #4
 801d61a:	b007      	add	sp, #28
 801d61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d620 <__localeconv_l>:
 801d620:	30f0      	adds	r0, #240	; 0xf0
 801d622:	4770      	bx	lr

0801d624 <_localeconv_r>:
 801d624:	4b04      	ldr	r3, [pc, #16]	; (801d638 <_localeconv_r+0x14>)
 801d626:	681b      	ldr	r3, [r3, #0]
 801d628:	6a18      	ldr	r0, [r3, #32]
 801d62a:	4b04      	ldr	r3, [pc, #16]	; (801d63c <_localeconv_r+0x18>)
 801d62c:	2800      	cmp	r0, #0
 801d62e:	bf08      	it	eq
 801d630:	4618      	moveq	r0, r3
 801d632:	30f0      	adds	r0, #240	; 0xf0
 801d634:	4770      	bx	lr
 801d636:	bf00      	nop
 801d638:	20000084 	.word	0x20000084
 801d63c:	200000e8 	.word	0x200000e8

0801d640 <__malloc_lock>:
 801d640:	4770      	bx	lr

0801d642 <__malloc_unlock>:
 801d642:	4770      	bx	lr

0801d644 <_Balloc>:
 801d644:	b570      	push	{r4, r5, r6, lr}
 801d646:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d648:	4604      	mov	r4, r0
 801d64a:	460e      	mov	r6, r1
 801d64c:	b93d      	cbnz	r5, 801d65e <_Balloc+0x1a>
 801d64e:	2010      	movs	r0, #16
 801d650:	f7fd f8ae 	bl	801a7b0 <malloc>
 801d654:	6260      	str	r0, [r4, #36]	; 0x24
 801d656:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d65a:	6005      	str	r5, [r0, #0]
 801d65c:	60c5      	str	r5, [r0, #12]
 801d65e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801d660:	68eb      	ldr	r3, [r5, #12]
 801d662:	b183      	cbz	r3, 801d686 <_Balloc+0x42>
 801d664:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d666:	68db      	ldr	r3, [r3, #12]
 801d668:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801d66c:	b9b8      	cbnz	r0, 801d69e <_Balloc+0x5a>
 801d66e:	2101      	movs	r1, #1
 801d670:	fa01 f506 	lsl.w	r5, r1, r6
 801d674:	1d6a      	adds	r2, r5, #5
 801d676:	0092      	lsls	r2, r2, #2
 801d678:	4620      	mov	r0, r4
 801d67a:	f000 fbe2 	bl	801de42 <_calloc_r>
 801d67e:	b160      	cbz	r0, 801d69a <_Balloc+0x56>
 801d680:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801d684:	e00e      	b.n	801d6a4 <_Balloc+0x60>
 801d686:	2221      	movs	r2, #33	; 0x21
 801d688:	2104      	movs	r1, #4
 801d68a:	4620      	mov	r0, r4
 801d68c:	f000 fbd9 	bl	801de42 <_calloc_r>
 801d690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d692:	60e8      	str	r0, [r5, #12]
 801d694:	68db      	ldr	r3, [r3, #12]
 801d696:	2b00      	cmp	r3, #0
 801d698:	d1e4      	bne.n	801d664 <_Balloc+0x20>
 801d69a:	2000      	movs	r0, #0
 801d69c:	bd70      	pop	{r4, r5, r6, pc}
 801d69e:	6802      	ldr	r2, [r0, #0]
 801d6a0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801d6a4:	2300      	movs	r3, #0
 801d6a6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d6aa:	e7f7      	b.n	801d69c <_Balloc+0x58>

0801d6ac <_Bfree>:
 801d6ac:	b570      	push	{r4, r5, r6, lr}
 801d6ae:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801d6b0:	4606      	mov	r6, r0
 801d6b2:	460d      	mov	r5, r1
 801d6b4:	b93c      	cbnz	r4, 801d6c6 <_Bfree+0x1a>
 801d6b6:	2010      	movs	r0, #16
 801d6b8:	f7fd f87a 	bl	801a7b0 <malloc>
 801d6bc:	6270      	str	r0, [r6, #36]	; 0x24
 801d6be:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d6c2:	6004      	str	r4, [r0, #0]
 801d6c4:	60c4      	str	r4, [r0, #12]
 801d6c6:	b13d      	cbz	r5, 801d6d8 <_Bfree+0x2c>
 801d6c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801d6ca:	686a      	ldr	r2, [r5, #4]
 801d6cc:	68db      	ldr	r3, [r3, #12]
 801d6ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d6d2:	6029      	str	r1, [r5, #0]
 801d6d4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801d6d8:	bd70      	pop	{r4, r5, r6, pc}

0801d6da <__multadd>:
 801d6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d6de:	690d      	ldr	r5, [r1, #16]
 801d6e0:	461f      	mov	r7, r3
 801d6e2:	4606      	mov	r6, r0
 801d6e4:	460c      	mov	r4, r1
 801d6e6:	f101 0c14 	add.w	ip, r1, #20
 801d6ea:	2300      	movs	r3, #0
 801d6ec:	f8dc 0000 	ldr.w	r0, [ip]
 801d6f0:	b281      	uxth	r1, r0
 801d6f2:	fb02 7101 	mla	r1, r2, r1, r7
 801d6f6:	0c0f      	lsrs	r7, r1, #16
 801d6f8:	0c00      	lsrs	r0, r0, #16
 801d6fa:	fb02 7000 	mla	r0, r2, r0, r7
 801d6fe:	b289      	uxth	r1, r1
 801d700:	3301      	adds	r3, #1
 801d702:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801d706:	429d      	cmp	r5, r3
 801d708:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801d70c:	f84c 1b04 	str.w	r1, [ip], #4
 801d710:	dcec      	bgt.n	801d6ec <__multadd+0x12>
 801d712:	b1d7      	cbz	r7, 801d74a <__multadd+0x70>
 801d714:	68a3      	ldr	r3, [r4, #8]
 801d716:	42ab      	cmp	r3, r5
 801d718:	dc12      	bgt.n	801d740 <__multadd+0x66>
 801d71a:	6861      	ldr	r1, [r4, #4]
 801d71c:	4630      	mov	r0, r6
 801d71e:	3101      	adds	r1, #1
 801d720:	f7ff ff90 	bl	801d644 <_Balloc>
 801d724:	6922      	ldr	r2, [r4, #16]
 801d726:	3202      	adds	r2, #2
 801d728:	f104 010c 	add.w	r1, r4, #12
 801d72c:	4680      	mov	r8, r0
 801d72e:	0092      	lsls	r2, r2, #2
 801d730:	300c      	adds	r0, #12
 801d732:	f7fd f86e 	bl	801a812 <memcpy>
 801d736:	4621      	mov	r1, r4
 801d738:	4630      	mov	r0, r6
 801d73a:	f7ff ffb7 	bl	801d6ac <_Bfree>
 801d73e:	4644      	mov	r4, r8
 801d740:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d744:	3501      	adds	r5, #1
 801d746:	615f      	str	r7, [r3, #20]
 801d748:	6125      	str	r5, [r4, #16]
 801d74a:	4620      	mov	r0, r4
 801d74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d750 <__s2b>:
 801d750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d754:	460c      	mov	r4, r1
 801d756:	4615      	mov	r5, r2
 801d758:	461f      	mov	r7, r3
 801d75a:	2209      	movs	r2, #9
 801d75c:	3308      	adds	r3, #8
 801d75e:	4606      	mov	r6, r0
 801d760:	fb93 f3f2 	sdiv	r3, r3, r2
 801d764:	2100      	movs	r1, #0
 801d766:	2201      	movs	r2, #1
 801d768:	429a      	cmp	r2, r3
 801d76a:	db20      	blt.n	801d7ae <__s2b+0x5e>
 801d76c:	4630      	mov	r0, r6
 801d76e:	f7ff ff69 	bl	801d644 <_Balloc>
 801d772:	9b08      	ldr	r3, [sp, #32]
 801d774:	6143      	str	r3, [r0, #20]
 801d776:	2d09      	cmp	r5, #9
 801d778:	f04f 0301 	mov.w	r3, #1
 801d77c:	6103      	str	r3, [r0, #16]
 801d77e:	dd19      	ble.n	801d7b4 <__s2b+0x64>
 801d780:	f104 0809 	add.w	r8, r4, #9
 801d784:	46c1      	mov	r9, r8
 801d786:	442c      	add	r4, r5
 801d788:	f819 3b01 	ldrb.w	r3, [r9], #1
 801d78c:	4601      	mov	r1, r0
 801d78e:	3b30      	subs	r3, #48	; 0x30
 801d790:	220a      	movs	r2, #10
 801d792:	4630      	mov	r0, r6
 801d794:	f7ff ffa1 	bl	801d6da <__multadd>
 801d798:	45a1      	cmp	r9, r4
 801d79a:	d1f5      	bne.n	801d788 <__s2b+0x38>
 801d79c:	eb08 0405 	add.w	r4, r8, r5
 801d7a0:	3c08      	subs	r4, #8
 801d7a2:	1b2d      	subs	r5, r5, r4
 801d7a4:	1963      	adds	r3, r4, r5
 801d7a6:	42bb      	cmp	r3, r7
 801d7a8:	db07      	blt.n	801d7ba <__s2b+0x6a>
 801d7aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d7ae:	0052      	lsls	r2, r2, #1
 801d7b0:	3101      	adds	r1, #1
 801d7b2:	e7d9      	b.n	801d768 <__s2b+0x18>
 801d7b4:	340a      	adds	r4, #10
 801d7b6:	2509      	movs	r5, #9
 801d7b8:	e7f3      	b.n	801d7a2 <__s2b+0x52>
 801d7ba:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d7be:	4601      	mov	r1, r0
 801d7c0:	3b30      	subs	r3, #48	; 0x30
 801d7c2:	220a      	movs	r2, #10
 801d7c4:	4630      	mov	r0, r6
 801d7c6:	f7ff ff88 	bl	801d6da <__multadd>
 801d7ca:	e7eb      	b.n	801d7a4 <__s2b+0x54>

0801d7cc <__hi0bits>:
 801d7cc:	0c02      	lsrs	r2, r0, #16
 801d7ce:	0412      	lsls	r2, r2, #16
 801d7d0:	4603      	mov	r3, r0
 801d7d2:	b9b2      	cbnz	r2, 801d802 <__hi0bits+0x36>
 801d7d4:	0403      	lsls	r3, r0, #16
 801d7d6:	2010      	movs	r0, #16
 801d7d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801d7dc:	bf04      	itt	eq
 801d7de:	021b      	lsleq	r3, r3, #8
 801d7e0:	3008      	addeq	r0, #8
 801d7e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801d7e6:	bf04      	itt	eq
 801d7e8:	011b      	lsleq	r3, r3, #4
 801d7ea:	3004      	addeq	r0, #4
 801d7ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801d7f0:	bf04      	itt	eq
 801d7f2:	009b      	lsleq	r3, r3, #2
 801d7f4:	3002      	addeq	r0, #2
 801d7f6:	2b00      	cmp	r3, #0
 801d7f8:	db06      	blt.n	801d808 <__hi0bits+0x3c>
 801d7fa:	005b      	lsls	r3, r3, #1
 801d7fc:	d503      	bpl.n	801d806 <__hi0bits+0x3a>
 801d7fe:	3001      	adds	r0, #1
 801d800:	4770      	bx	lr
 801d802:	2000      	movs	r0, #0
 801d804:	e7e8      	b.n	801d7d8 <__hi0bits+0xc>
 801d806:	2020      	movs	r0, #32
 801d808:	4770      	bx	lr

0801d80a <__lo0bits>:
 801d80a:	6803      	ldr	r3, [r0, #0]
 801d80c:	f013 0207 	ands.w	r2, r3, #7
 801d810:	4601      	mov	r1, r0
 801d812:	d00b      	beq.n	801d82c <__lo0bits+0x22>
 801d814:	07da      	lsls	r2, r3, #31
 801d816:	d423      	bmi.n	801d860 <__lo0bits+0x56>
 801d818:	0798      	lsls	r0, r3, #30
 801d81a:	bf49      	itett	mi
 801d81c:	085b      	lsrmi	r3, r3, #1
 801d81e:	089b      	lsrpl	r3, r3, #2
 801d820:	2001      	movmi	r0, #1
 801d822:	600b      	strmi	r3, [r1, #0]
 801d824:	bf5c      	itt	pl
 801d826:	600b      	strpl	r3, [r1, #0]
 801d828:	2002      	movpl	r0, #2
 801d82a:	4770      	bx	lr
 801d82c:	b298      	uxth	r0, r3
 801d82e:	b9a8      	cbnz	r0, 801d85c <__lo0bits+0x52>
 801d830:	0c1b      	lsrs	r3, r3, #16
 801d832:	2010      	movs	r0, #16
 801d834:	f013 0fff 	tst.w	r3, #255	; 0xff
 801d838:	bf04      	itt	eq
 801d83a:	0a1b      	lsreq	r3, r3, #8
 801d83c:	3008      	addeq	r0, #8
 801d83e:	071a      	lsls	r2, r3, #28
 801d840:	bf04      	itt	eq
 801d842:	091b      	lsreq	r3, r3, #4
 801d844:	3004      	addeq	r0, #4
 801d846:	079a      	lsls	r2, r3, #30
 801d848:	bf04      	itt	eq
 801d84a:	089b      	lsreq	r3, r3, #2
 801d84c:	3002      	addeq	r0, #2
 801d84e:	07da      	lsls	r2, r3, #31
 801d850:	d402      	bmi.n	801d858 <__lo0bits+0x4e>
 801d852:	085b      	lsrs	r3, r3, #1
 801d854:	d006      	beq.n	801d864 <__lo0bits+0x5a>
 801d856:	3001      	adds	r0, #1
 801d858:	600b      	str	r3, [r1, #0]
 801d85a:	4770      	bx	lr
 801d85c:	4610      	mov	r0, r2
 801d85e:	e7e9      	b.n	801d834 <__lo0bits+0x2a>
 801d860:	2000      	movs	r0, #0
 801d862:	4770      	bx	lr
 801d864:	2020      	movs	r0, #32
 801d866:	4770      	bx	lr

0801d868 <__i2b>:
 801d868:	b510      	push	{r4, lr}
 801d86a:	460c      	mov	r4, r1
 801d86c:	2101      	movs	r1, #1
 801d86e:	f7ff fee9 	bl	801d644 <_Balloc>
 801d872:	2201      	movs	r2, #1
 801d874:	6144      	str	r4, [r0, #20]
 801d876:	6102      	str	r2, [r0, #16]
 801d878:	bd10      	pop	{r4, pc}

0801d87a <__multiply>:
 801d87a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d87e:	4614      	mov	r4, r2
 801d880:	690a      	ldr	r2, [r1, #16]
 801d882:	6923      	ldr	r3, [r4, #16]
 801d884:	429a      	cmp	r2, r3
 801d886:	bfb8      	it	lt
 801d888:	460b      	movlt	r3, r1
 801d88a:	4688      	mov	r8, r1
 801d88c:	bfbc      	itt	lt
 801d88e:	46a0      	movlt	r8, r4
 801d890:	461c      	movlt	r4, r3
 801d892:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d896:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801d89a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d89e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d8a2:	eb07 0609 	add.w	r6, r7, r9
 801d8a6:	42b3      	cmp	r3, r6
 801d8a8:	bfb8      	it	lt
 801d8aa:	3101      	addlt	r1, #1
 801d8ac:	f7ff feca 	bl	801d644 <_Balloc>
 801d8b0:	f100 0514 	add.w	r5, r0, #20
 801d8b4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801d8b8:	462b      	mov	r3, r5
 801d8ba:	2200      	movs	r2, #0
 801d8bc:	4573      	cmp	r3, lr
 801d8be:	d316      	bcc.n	801d8ee <__multiply+0x74>
 801d8c0:	f104 0214 	add.w	r2, r4, #20
 801d8c4:	f108 0114 	add.w	r1, r8, #20
 801d8c8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801d8cc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801d8d0:	9300      	str	r3, [sp, #0]
 801d8d2:	9b00      	ldr	r3, [sp, #0]
 801d8d4:	9201      	str	r2, [sp, #4]
 801d8d6:	4293      	cmp	r3, r2
 801d8d8:	d80c      	bhi.n	801d8f4 <__multiply+0x7a>
 801d8da:	2e00      	cmp	r6, #0
 801d8dc:	dd03      	ble.n	801d8e6 <__multiply+0x6c>
 801d8de:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	d05d      	beq.n	801d9a2 <__multiply+0x128>
 801d8e6:	6106      	str	r6, [r0, #16]
 801d8e8:	b003      	add	sp, #12
 801d8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8ee:	f843 2b04 	str.w	r2, [r3], #4
 801d8f2:	e7e3      	b.n	801d8bc <__multiply+0x42>
 801d8f4:	f8b2 b000 	ldrh.w	fp, [r2]
 801d8f8:	f1bb 0f00 	cmp.w	fp, #0
 801d8fc:	d023      	beq.n	801d946 <__multiply+0xcc>
 801d8fe:	4689      	mov	r9, r1
 801d900:	46ac      	mov	ip, r5
 801d902:	f04f 0800 	mov.w	r8, #0
 801d906:	f859 4b04 	ldr.w	r4, [r9], #4
 801d90a:	f8dc a000 	ldr.w	sl, [ip]
 801d90e:	b2a3      	uxth	r3, r4
 801d910:	fa1f fa8a 	uxth.w	sl, sl
 801d914:	fb0b a303 	mla	r3, fp, r3, sl
 801d918:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801d91c:	f8dc 4000 	ldr.w	r4, [ip]
 801d920:	4443      	add	r3, r8
 801d922:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801d926:	fb0b 840a 	mla	r4, fp, sl, r8
 801d92a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801d92e:	46e2      	mov	sl, ip
 801d930:	b29b      	uxth	r3, r3
 801d932:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801d936:	454f      	cmp	r7, r9
 801d938:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801d93c:	f84a 3b04 	str.w	r3, [sl], #4
 801d940:	d82b      	bhi.n	801d99a <__multiply+0x120>
 801d942:	f8cc 8004 	str.w	r8, [ip, #4]
 801d946:	9b01      	ldr	r3, [sp, #4]
 801d948:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801d94c:	3204      	adds	r2, #4
 801d94e:	f1ba 0f00 	cmp.w	sl, #0
 801d952:	d020      	beq.n	801d996 <__multiply+0x11c>
 801d954:	682b      	ldr	r3, [r5, #0]
 801d956:	4689      	mov	r9, r1
 801d958:	46a8      	mov	r8, r5
 801d95a:	f04f 0b00 	mov.w	fp, #0
 801d95e:	f8b9 c000 	ldrh.w	ip, [r9]
 801d962:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801d966:	fb0a 440c 	mla	r4, sl, ip, r4
 801d96a:	445c      	add	r4, fp
 801d96c:	46c4      	mov	ip, r8
 801d96e:	b29b      	uxth	r3, r3
 801d970:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801d974:	f84c 3b04 	str.w	r3, [ip], #4
 801d978:	f859 3b04 	ldr.w	r3, [r9], #4
 801d97c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801d980:	0c1b      	lsrs	r3, r3, #16
 801d982:	fb0a b303 	mla	r3, sl, r3, fp
 801d986:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801d98a:	454f      	cmp	r7, r9
 801d98c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801d990:	d805      	bhi.n	801d99e <__multiply+0x124>
 801d992:	f8c8 3004 	str.w	r3, [r8, #4]
 801d996:	3504      	adds	r5, #4
 801d998:	e79b      	b.n	801d8d2 <__multiply+0x58>
 801d99a:	46d4      	mov	ip, sl
 801d99c:	e7b3      	b.n	801d906 <__multiply+0x8c>
 801d99e:	46e0      	mov	r8, ip
 801d9a0:	e7dd      	b.n	801d95e <__multiply+0xe4>
 801d9a2:	3e01      	subs	r6, #1
 801d9a4:	e799      	b.n	801d8da <__multiply+0x60>
	...

0801d9a8 <__pow5mult>:
 801d9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d9ac:	4615      	mov	r5, r2
 801d9ae:	f012 0203 	ands.w	r2, r2, #3
 801d9b2:	4606      	mov	r6, r0
 801d9b4:	460f      	mov	r7, r1
 801d9b6:	d007      	beq.n	801d9c8 <__pow5mult+0x20>
 801d9b8:	3a01      	subs	r2, #1
 801d9ba:	4c21      	ldr	r4, [pc, #132]	; (801da40 <__pow5mult+0x98>)
 801d9bc:	2300      	movs	r3, #0
 801d9be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d9c2:	f7ff fe8a 	bl	801d6da <__multadd>
 801d9c6:	4607      	mov	r7, r0
 801d9c8:	10ad      	asrs	r5, r5, #2
 801d9ca:	d035      	beq.n	801da38 <__pow5mult+0x90>
 801d9cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d9ce:	b93c      	cbnz	r4, 801d9e0 <__pow5mult+0x38>
 801d9d0:	2010      	movs	r0, #16
 801d9d2:	f7fc feed 	bl	801a7b0 <malloc>
 801d9d6:	6270      	str	r0, [r6, #36]	; 0x24
 801d9d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d9dc:	6004      	str	r4, [r0, #0]
 801d9de:	60c4      	str	r4, [r0, #12]
 801d9e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d9e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d9e8:	b94c      	cbnz	r4, 801d9fe <__pow5mult+0x56>
 801d9ea:	f240 2171 	movw	r1, #625	; 0x271
 801d9ee:	4630      	mov	r0, r6
 801d9f0:	f7ff ff3a 	bl	801d868 <__i2b>
 801d9f4:	2300      	movs	r3, #0
 801d9f6:	f8c8 0008 	str.w	r0, [r8, #8]
 801d9fa:	4604      	mov	r4, r0
 801d9fc:	6003      	str	r3, [r0, #0]
 801d9fe:	f04f 0800 	mov.w	r8, #0
 801da02:	07eb      	lsls	r3, r5, #31
 801da04:	d50a      	bpl.n	801da1c <__pow5mult+0x74>
 801da06:	4639      	mov	r1, r7
 801da08:	4622      	mov	r2, r4
 801da0a:	4630      	mov	r0, r6
 801da0c:	f7ff ff35 	bl	801d87a <__multiply>
 801da10:	4639      	mov	r1, r7
 801da12:	4681      	mov	r9, r0
 801da14:	4630      	mov	r0, r6
 801da16:	f7ff fe49 	bl	801d6ac <_Bfree>
 801da1a:	464f      	mov	r7, r9
 801da1c:	106d      	asrs	r5, r5, #1
 801da1e:	d00b      	beq.n	801da38 <__pow5mult+0x90>
 801da20:	6820      	ldr	r0, [r4, #0]
 801da22:	b938      	cbnz	r0, 801da34 <__pow5mult+0x8c>
 801da24:	4622      	mov	r2, r4
 801da26:	4621      	mov	r1, r4
 801da28:	4630      	mov	r0, r6
 801da2a:	f7ff ff26 	bl	801d87a <__multiply>
 801da2e:	6020      	str	r0, [r4, #0]
 801da30:	f8c0 8000 	str.w	r8, [r0]
 801da34:	4604      	mov	r4, r0
 801da36:	e7e4      	b.n	801da02 <__pow5mult+0x5a>
 801da38:	4638      	mov	r0, r7
 801da3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801da3e:	bf00      	nop
 801da40:	08023e28 	.word	0x08023e28

0801da44 <__lshift>:
 801da44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801da48:	460c      	mov	r4, r1
 801da4a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801da4e:	6923      	ldr	r3, [r4, #16]
 801da50:	6849      	ldr	r1, [r1, #4]
 801da52:	eb0a 0903 	add.w	r9, sl, r3
 801da56:	68a3      	ldr	r3, [r4, #8]
 801da58:	4607      	mov	r7, r0
 801da5a:	4616      	mov	r6, r2
 801da5c:	f109 0501 	add.w	r5, r9, #1
 801da60:	42ab      	cmp	r3, r5
 801da62:	db32      	blt.n	801daca <__lshift+0x86>
 801da64:	4638      	mov	r0, r7
 801da66:	f7ff fded 	bl	801d644 <_Balloc>
 801da6a:	2300      	movs	r3, #0
 801da6c:	4680      	mov	r8, r0
 801da6e:	f100 0114 	add.w	r1, r0, #20
 801da72:	461a      	mov	r2, r3
 801da74:	4553      	cmp	r3, sl
 801da76:	db2b      	blt.n	801dad0 <__lshift+0x8c>
 801da78:	6920      	ldr	r0, [r4, #16]
 801da7a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801da7e:	f104 0314 	add.w	r3, r4, #20
 801da82:	f016 021f 	ands.w	r2, r6, #31
 801da86:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801da8a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801da8e:	d025      	beq.n	801dadc <__lshift+0x98>
 801da90:	f1c2 0e20 	rsb	lr, r2, #32
 801da94:	2000      	movs	r0, #0
 801da96:	681e      	ldr	r6, [r3, #0]
 801da98:	468a      	mov	sl, r1
 801da9a:	4096      	lsls	r6, r2
 801da9c:	4330      	orrs	r0, r6
 801da9e:	f84a 0b04 	str.w	r0, [sl], #4
 801daa2:	f853 0b04 	ldr.w	r0, [r3], #4
 801daa6:	459c      	cmp	ip, r3
 801daa8:	fa20 f00e 	lsr.w	r0, r0, lr
 801daac:	d814      	bhi.n	801dad8 <__lshift+0x94>
 801daae:	6048      	str	r0, [r1, #4]
 801dab0:	b108      	cbz	r0, 801dab6 <__lshift+0x72>
 801dab2:	f109 0502 	add.w	r5, r9, #2
 801dab6:	3d01      	subs	r5, #1
 801dab8:	4638      	mov	r0, r7
 801daba:	f8c8 5010 	str.w	r5, [r8, #16]
 801dabe:	4621      	mov	r1, r4
 801dac0:	f7ff fdf4 	bl	801d6ac <_Bfree>
 801dac4:	4640      	mov	r0, r8
 801dac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801daca:	3101      	adds	r1, #1
 801dacc:	005b      	lsls	r3, r3, #1
 801dace:	e7c7      	b.n	801da60 <__lshift+0x1c>
 801dad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801dad4:	3301      	adds	r3, #1
 801dad6:	e7cd      	b.n	801da74 <__lshift+0x30>
 801dad8:	4651      	mov	r1, sl
 801dada:	e7dc      	b.n	801da96 <__lshift+0x52>
 801dadc:	3904      	subs	r1, #4
 801dade:	f853 2b04 	ldr.w	r2, [r3], #4
 801dae2:	f841 2f04 	str.w	r2, [r1, #4]!
 801dae6:	459c      	cmp	ip, r3
 801dae8:	d8f9      	bhi.n	801dade <__lshift+0x9a>
 801daea:	e7e4      	b.n	801dab6 <__lshift+0x72>

0801daec <__mcmp>:
 801daec:	6903      	ldr	r3, [r0, #16]
 801daee:	690a      	ldr	r2, [r1, #16]
 801daf0:	1a9b      	subs	r3, r3, r2
 801daf2:	b530      	push	{r4, r5, lr}
 801daf4:	d10c      	bne.n	801db10 <__mcmp+0x24>
 801daf6:	0092      	lsls	r2, r2, #2
 801daf8:	3014      	adds	r0, #20
 801dafa:	3114      	adds	r1, #20
 801dafc:	1884      	adds	r4, r0, r2
 801dafe:	4411      	add	r1, r2
 801db00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801db04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801db08:	4295      	cmp	r5, r2
 801db0a:	d003      	beq.n	801db14 <__mcmp+0x28>
 801db0c:	d305      	bcc.n	801db1a <__mcmp+0x2e>
 801db0e:	2301      	movs	r3, #1
 801db10:	4618      	mov	r0, r3
 801db12:	bd30      	pop	{r4, r5, pc}
 801db14:	42a0      	cmp	r0, r4
 801db16:	d3f3      	bcc.n	801db00 <__mcmp+0x14>
 801db18:	e7fa      	b.n	801db10 <__mcmp+0x24>
 801db1a:	f04f 33ff 	mov.w	r3, #4294967295
 801db1e:	e7f7      	b.n	801db10 <__mcmp+0x24>

0801db20 <__mdiff>:
 801db20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801db24:	460d      	mov	r5, r1
 801db26:	4607      	mov	r7, r0
 801db28:	4611      	mov	r1, r2
 801db2a:	4628      	mov	r0, r5
 801db2c:	4614      	mov	r4, r2
 801db2e:	f7ff ffdd 	bl	801daec <__mcmp>
 801db32:	1e06      	subs	r6, r0, #0
 801db34:	d108      	bne.n	801db48 <__mdiff+0x28>
 801db36:	4631      	mov	r1, r6
 801db38:	4638      	mov	r0, r7
 801db3a:	f7ff fd83 	bl	801d644 <_Balloc>
 801db3e:	2301      	movs	r3, #1
 801db40:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801db44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801db48:	bfa4      	itt	ge
 801db4a:	4623      	movge	r3, r4
 801db4c:	462c      	movge	r4, r5
 801db4e:	4638      	mov	r0, r7
 801db50:	6861      	ldr	r1, [r4, #4]
 801db52:	bfa6      	itte	ge
 801db54:	461d      	movge	r5, r3
 801db56:	2600      	movge	r6, #0
 801db58:	2601      	movlt	r6, #1
 801db5a:	f7ff fd73 	bl	801d644 <_Balloc>
 801db5e:	692b      	ldr	r3, [r5, #16]
 801db60:	60c6      	str	r6, [r0, #12]
 801db62:	6926      	ldr	r6, [r4, #16]
 801db64:	f105 0914 	add.w	r9, r5, #20
 801db68:	f104 0214 	add.w	r2, r4, #20
 801db6c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801db70:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801db74:	f100 0514 	add.w	r5, r0, #20
 801db78:	f04f 0e00 	mov.w	lr, #0
 801db7c:	f852 ab04 	ldr.w	sl, [r2], #4
 801db80:	f859 4b04 	ldr.w	r4, [r9], #4
 801db84:	fa1e f18a 	uxtah	r1, lr, sl
 801db88:	b2a3      	uxth	r3, r4
 801db8a:	1ac9      	subs	r1, r1, r3
 801db8c:	0c23      	lsrs	r3, r4, #16
 801db8e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801db92:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801db96:	b289      	uxth	r1, r1
 801db98:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801db9c:	45c8      	cmp	r8, r9
 801db9e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801dba2:	4694      	mov	ip, r2
 801dba4:	f845 3b04 	str.w	r3, [r5], #4
 801dba8:	d8e8      	bhi.n	801db7c <__mdiff+0x5c>
 801dbaa:	45bc      	cmp	ip, r7
 801dbac:	d304      	bcc.n	801dbb8 <__mdiff+0x98>
 801dbae:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801dbb2:	b183      	cbz	r3, 801dbd6 <__mdiff+0xb6>
 801dbb4:	6106      	str	r6, [r0, #16]
 801dbb6:	e7c5      	b.n	801db44 <__mdiff+0x24>
 801dbb8:	f85c 1b04 	ldr.w	r1, [ip], #4
 801dbbc:	fa1e f381 	uxtah	r3, lr, r1
 801dbc0:	141a      	asrs	r2, r3, #16
 801dbc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801dbc6:	b29b      	uxth	r3, r3
 801dbc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801dbcc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801dbd0:	f845 3b04 	str.w	r3, [r5], #4
 801dbd4:	e7e9      	b.n	801dbaa <__mdiff+0x8a>
 801dbd6:	3e01      	subs	r6, #1
 801dbd8:	e7e9      	b.n	801dbae <__mdiff+0x8e>
	...

0801dbdc <__ulp>:
 801dbdc:	4b12      	ldr	r3, [pc, #72]	; (801dc28 <__ulp+0x4c>)
 801dbde:	ee10 2a90 	vmov	r2, s1
 801dbe2:	401a      	ands	r2, r3
 801dbe4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801dbe8:	2b00      	cmp	r3, #0
 801dbea:	dd04      	ble.n	801dbf6 <__ulp+0x1a>
 801dbec:	2000      	movs	r0, #0
 801dbee:	4619      	mov	r1, r3
 801dbf0:	ec41 0b10 	vmov	d0, r0, r1
 801dbf4:	4770      	bx	lr
 801dbf6:	425b      	negs	r3, r3
 801dbf8:	151b      	asrs	r3, r3, #20
 801dbfa:	2b13      	cmp	r3, #19
 801dbfc:	f04f 0000 	mov.w	r0, #0
 801dc00:	f04f 0100 	mov.w	r1, #0
 801dc04:	dc04      	bgt.n	801dc10 <__ulp+0x34>
 801dc06:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801dc0a:	fa42 f103 	asr.w	r1, r2, r3
 801dc0e:	e7ef      	b.n	801dbf0 <__ulp+0x14>
 801dc10:	3b14      	subs	r3, #20
 801dc12:	2b1e      	cmp	r3, #30
 801dc14:	f04f 0201 	mov.w	r2, #1
 801dc18:	bfda      	itte	le
 801dc1a:	f1c3 031f 	rsble	r3, r3, #31
 801dc1e:	fa02 f303 	lslle.w	r3, r2, r3
 801dc22:	4613      	movgt	r3, r2
 801dc24:	4618      	mov	r0, r3
 801dc26:	e7e3      	b.n	801dbf0 <__ulp+0x14>
 801dc28:	7ff00000 	.word	0x7ff00000

0801dc2c <__b2d>:
 801dc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc2e:	6905      	ldr	r5, [r0, #16]
 801dc30:	f100 0714 	add.w	r7, r0, #20
 801dc34:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801dc38:	1f2e      	subs	r6, r5, #4
 801dc3a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801dc3e:	4620      	mov	r0, r4
 801dc40:	f7ff fdc4 	bl	801d7cc <__hi0bits>
 801dc44:	f1c0 0320 	rsb	r3, r0, #32
 801dc48:	280a      	cmp	r0, #10
 801dc4a:	600b      	str	r3, [r1, #0]
 801dc4c:	f8df c074 	ldr.w	ip, [pc, #116]	; 801dcc4 <__b2d+0x98>
 801dc50:	dc14      	bgt.n	801dc7c <__b2d+0x50>
 801dc52:	f1c0 0e0b 	rsb	lr, r0, #11
 801dc56:	fa24 f10e 	lsr.w	r1, r4, lr
 801dc5a:	42b7      	cmp	r7, r6
 801dc5c:	ea41 030c 	orr.w	r3, r1, ip
 801dc60:	bf34      	ite	cc
 801dc62:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801dc66:	2100      	movcs	r1, #0
 801dc68:	3015      	adds	r0, #21
 801dc6a:	fa04 f000 	lsl.w	r0, r4, r0
 801dc6e:	fa21 f10e 	lsr.w	r1, r1, lr
 801dc72:	ea40 0201 	orr.w	r2, r0, r1
 801dc76:	ec43 2b10 	vmov	d0, r2, r3
 801dc7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc7c:	42b7      	cmp	r7, r6
 801dc7e:	bf3a      	itte	cc
 801dc80:	f1a5 0608 	subcc.w	r6, r5, #8
 801dc84:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801dc88:	2100      	movcs	r1, #0
 801dc8a:	380b      	subs	r0, #11
 801dc8c:	d015      	beq.n	801dcba <__b2d+0x8e>
 801dc8e:	4084      	lsls	r4, r0
 801dc90:	f1c0 0520 	rsb	r5, r0, #32
 801dc94:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801dc98:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801dc9c:	42be      	cmp	r6, r7
 801dc9e:	fa21 fc05 	lsr.w	ip, r1, r5
 801dca2:	ea44 030c 	orr.w	r3, r4, ip
 801dca6:	bf8c      	ite	hi
 801dca8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801dcac:	2400      	movls	r4, #0
 801dcae:	fa01 f000 	lsl.w	r0, r1, r0
 801dcb2:	40ec      	lsrs	r4, r5
 801dcb4:	ea40 0204 	orr.w	r2, r0, r4
 801dcb8:	e7dd      	b.n	801dc76 <__b2d+0x4a>
 801dcba:	ea44 030c 	orr.w	r3, r4, ip
 801dcbe:	460a      	mov	r2, r1
 801dcc0:	e7d9      	b.n	801dc76 <__b2d+0x4a>
 801dcc2:	bf00      	nop
 801dcc4:	3ff00000 	.word	0x3ff00000

0801dcc8 <__d2b>:
 801dcc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801dccc:	460e      	mov	r6, r1
 801dcce:	2101      	movs	r1, #1
 801dcd0:	ec59 8b10 	vmov	r8, r9, d0
 801dcd4:	4615      	mov	r5, r2
 801dcd6:	f7ff fcb5 	bl	801d644 <_Balloc>
 801dcda:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801dcde:	4607      	mov	r7, r0
 801dce0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801dce4:	bb34      	cbnz	r4, 801dd34 <__d2b+0x6c>
 801dce6:	9301      	str	r3, [sp, #4]
 801dce8:	f1b8 0300 	subs.w	r3, r8, #0
 801dcec:	d027      	beq.n	801dd3e <__d2b+0x76>
 801dcee:	a802      	add	r0, sp, #8
 801dcf0:	f840 3d08 	str.w	r3, [r0, #-8]!
 801dcf4:	f7ff fd89 	bl	801d80a <__lo0bits>
 801dcf8:	9900      	ldr	r1, [sp, #0]
 801dcfa:	b1f0      	cbz	r0, 801dd3a <__d2b+0x72>
 801dcfc:	9a01      	ldr	r2, [sp, #4]
 801dcfe:	f1c0 0320 	rsb	r3, r0, #32
 801dd02:	fa02 f303 	lsl.w	r3, r2, r3
 801dd06:	430b      	orrs	r3, r1
 801dd08:	40c2      	lsrs	r2, r0
 801dd0a:	617b      	str	r3, [r7, #20]
 801dd0c:	9201      	str	r2, [sp, #4]
 801dd0e:	9b01      	ldr	r3, [sp, #4]
 801dd10:	61bb      	str	r3, [r7, #24]
 801dd12:	2b00      	cmp	r3, #0
 801dd14:	bf14      	ite	ne
 801dd16:	2102      	movne	r1, #2
 801dd18:	2101      	moveq	r1, #1
 801dd1a:	6139      	str	r1, [r7, #16]
 801dd1c:	b1c4      	cbz	r4, 801dd50 <__d2b+0x88>
 801dd1e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801dd22:	4404      	add	r4, r0
 801dd24:	6034      	str	r4, [r6, #0]
 801dd26:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801dd2a:	6028      	str	r0, [r5, #0]
 801dd2c:	4638      	mov	r0, r7
 801dd2e:	b003      	add	sp, #12
 801dd30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dd34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801dd38:	e7d5      	b.n	801dce6 <__d2b+0x1e>
 801dd3a:	6179      	str	r1, [r7, #20]
 801dd3c:	e7e7      	b.n	801dd0e <__d2b+0x46>
 801dd3e:	a801      	add	r0, sp, #4
 801dd40:	f7ff fd63 	bl	801d80a <__lo0bits>
 801dd44:	9b01      	ldr	r3, [sp, #4]
 801dd46:	617b      	str	r3, [r7, #20]
 801dd48:	2101      	movs	r1, #1
 801dd4a:	6139      	str	r1, [r7, #16]
 801dd4c:	3020      	adds	r0, #32
 801dd4e:	e7e5      	b.n	801dd1c <__d2b+0x54>
 801dd50:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801dd54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801dd58:	6030      	str	r0, [r6, #0]
 801dd5a:	6918      	ldr	r0, [r3, #16]
 801dd5c:	f7ff fd36 	bl	801d7cc <__hi0bits>
 801dd60:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801dd64:	e7e1      	b.n	801dd2a <__d2b+0x62>

0801dd66 <__ratio>:
 801dd66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd6a:	4688      	mov	r8, r1
 801dd6c:	4669      	mov	r1, sp
 801dd6e:	4681      	mov	r9, r0
 801dd70:	f7ff ff5c 	bl	801dc2c <__b2d>
 801dd74:	a901      	add	r1, sp, #4
 801dd76:	4640      	mov	r0, r8
 801dd78:	ec57 6b10 	vmov	r6, r7, d0
 801dd7c:	f7ff ff56 	bl	801dc2c <__b2d>
 801dd80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801dd84:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801dd88:	eba3 0c02 	sub.w	ip, r3, r2
 801dd8c:	e9dd 3200 	ldrd	r3, r2, [sp]
 801dd90:	1a9b      	subs	r3, r3, r2
 801dd92:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801dd96:	ec5b ab10 	vmov	sl, fp, d0
 801dd9a:	2b00      	cmp	r3, #0
 801dd9c:	bfce      	itee	gt
 801dd9e:	463a      	movgt	r2, r7
 801dda0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801dda4:	465a      	movle	r2, fp
 801dda6:	4659      	mov	r1, fp
 801dda8:	463d      	mov	r5, r7
 801ddaa:	bfd4      	ite	le
 801ddac:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801ddb0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801ddb4:	4630      	mov	r0, r6
 801ddb6:	ee10 2a10 	vmov	r2, s0
 801ddba:	460b      	mov	r3, r1
 801ddbc:	4629      	mov	r1, r5
 801ddbe:	f7e2 fd55 	bl	800086c <__aeabi_ddiv>
 801ddc2:	ec41 0b10 	vmov	d0, r0, r1
 801ddc6:	b003      	add	sp, #12
 801ddc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ddcc <__copybits>:
 801ddcc:	3901      	subs	r1, #1
 801ddce:	b510      	push	{r4, lr}
 801ddd0:	1149      	asrs	r1, r1, #5
 801ddd2:	6914      	ldr	r4, [r2, #16]
 801ddd4:	3101      	adds	r1, #1
 801ddd6:	f102 0314 	add.w	r3, r2, #20
 801ddda:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801ddde:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801dde2:	42a3      	cmp	r3, r4
 801dde4:	4602      	mov	r2, r0
 801dde6:	d303      	bcc.n	801ddf0 <__copybits+0x24>
 801dde8:	2300      	movs	r3, #0
 801ddea:	428a      	cmp	r2, r1
 801ddec:	d305      	bcc.n	801ddfa <__copybits+0x2e>
 801ddee:	bd10      	pop	{r4, pc}
 801ddf0:	f853 2b04 	ldr.w	r2, [r3], #4
 801ddf4:	f840 2b04 	str.w	r2, [r0], #4
 801ddf8:	e7f3      	b.n	801dde2 <__copybits+0x16>
 801ddfa:	f842 3b04 	str.w	r3, [r2], #4
 801ddfe:	e7f4      	b.n	801ddea <__copybits+0x1e>

0801de00 <__any_on>:
 801de00:	f100 0214 	add.w	r2, r0, #20
 801de04:	6900      	ldr	r0, [r0, #16]
 801de06:	114b      	asrs	r3, r1, #5
 801de08:	4298      	cmp	r0, r3
 801de0a:	b510      	push	{r4, lr}
 801de0c:	db11      	blt.n	801de32 <__any_on+0x32>
 801de0e:	dd0a      	ble.n	801de26 <__any_on+0x26>
 801de10:	f011 011f 	ands.w	r1, r1, #31
 801de14:	d007      	beq.n	801de26 <__any_on+0x26>
 801de16:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801de1a:	fa24 f001 	lsr.w	r0, r4, r1
 801de1e:	fa00 f101 	lsl.w	r1, r0, r1
 801de22:	428c      	cmp	r4, r1
 801de24:	d10b      	bne.n	801de3e <__any_on+0x3e>
 801de26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801de2a:	4293      	cmp	r3, r2
 801de2c:	d803      	bhi.n	801de36 <__any_on+0x36>
 801de2e:	2000      	movs	r0, #0
 801de30:	bd10      	pop	{r4, pc}
 801de32:	4603      	mov	r3, r0
 801de34:	e7f7      	b.n	801de26 <__any_on+0x26>
 801de36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801de3a:	2900      	cmp	r1, #0
 801de3c:	d0f5      	beq.n	801de2a <__any_on+0x2a>
 801de3e:	2001      	movs	r0, #1
 801de40:	e7f6      	b.n	801de30 <__any_on+0x30>

0801de42 <_calloc_r>:
 801de42:	b538      	push	{r3, r4, r5, lr}
 801de44:	fb02 f401 	mul.w	r4, r2, r1
 801de48:	4621      	mov	r1, r4
 801de4a:	f7fc fd5d 	bl	801a908 <_malloc_r>
 801de4e:	4605      	mov	r5, r0
 801de50:	b118      	cbz	r0, 801de5a <_calloc_r+0x18>
 801de52:	4622      	mov	r2, r4
 801de54:	2100      	movs	r1, #0
 801de56:	f7fc fd00 	bl	801a85a <memset>
 801de5a:	4628      	mov	r0, r5
 801de5c:	bd38      	pop	{r3, r4, r5, pc}

0801de5e <__ssputs_r>:
 801de5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801de62:	688e      	ldr	r6, [r1, #8]
 801de64:	429e      	cmp	r6, r3
 801de66:	4682      	mov	sl, r0
 801de68:	460c      	mov	r4, r1
 801de6a:	4690      	mov	r8, r2
 801de6c:	4699      	mov	r9, r3
 801de6e:	d837      	bhi.n	801dee0 <__ssputs_r+0x82>
 801de70:	898a      	ldrh	r2, [r1, #12]
 801de72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801de76:	d031      	beq.n	801dedc <__ssputs_r+0x7e>
 801de78:	6825      	ldr	r5, [r4, #0]
 801de7a:	6909      	ldr	r1, [r1, #16]
 801de7c:	1a6f      	subs	r7, r5, r1
 801de7e:	6965      	ldr	r5, [r4, #20]
 801de80:	2302      	movs	r3, #2
 801de82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801de86:	fb95 f5f3 	sdiv	r5, r5, r3
 801de8a:	f109 0301 	add.w	r3, r9, #1
 801de8e:	443b      	add	r3, r7
 801de90:	429d      	cmp	r5, r3
 801de92:	bf38      	it	cc
 801de94:	461d      	movcc	r5, r3
 801de96:	0553      	lsls	r3, r2, #21
 801de98:	d530      	bpl.n	801defc <__ssputs_r+0x9e>
 801de9a:	4629      	mov	r1, r5
 801de9c:	f7fc fd34 	bl	801a908 <_malloc_r>
 801dea0:	4606      	mov	r6, r0
 801dea2:	b950      	cbnz	r0, 801deba <__ssputs_r+0x5c>
 801dea4:	230c      	movs	r3, #12
 801dea6:	f8ca 3000 	str.w	r3, [sl]
 801deaa:	89a3      	ldrh	r3, [r4, #12]
 801deac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801deb0:	81a3      	strh	r3, [r4, #12]
 801deb2:	f04f 30ff 	mov.w	r0, #4294967295
 801deb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801deba:	463a      	mov	r2, r7
 801debc:	6921      	ldr	r1, [r4, #16]
 801debe:	f7fc fca8 	bl	801a812 <memcpy>
 801dec2:	89a3      	ldrh	r3, [r4, #12]
 801dec4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801dec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801decc:	81a3      	strh	r3, [r4, #12]
 801dece:	6126      	str	r6, [r4, #16]
 801ded0:	6165      	str	r5, [r4, #20]
 801ded2:	443e      	add	r6, r7
 801ded4:	1bed      	subs	r5, r5, r7
 801ded6:	6026      	str	r6, [r4, #0]
 801ded8:	60a5      	str	r5, [r4, #8]
 801deda:	464e      	mov	r6, r9
 801dedc:	454e      	cmp	r6, r9
 801dede:	d900      	bls.n	801dee2 <__ssputs_r+0x84>
 801dee0:	464e      	mov	r6, r9
 801dee2:	4632      	mov	r2, r6
 801dee4:	4641      	mov	r1, r8
 801dee6:	6820      	ldr	r0, [r4, #0]
 801dee8:	f7fc fc9e 	bl	801a828 <memmove>
 801deec:	68a3      	ldr	r3, [r4, #8]
 801deee:	1b9b      	subs	r3, r3, r6
 801def0:	60a3      	str	r3, [r4, #8]
 801def2:	6823      	ldr	r3, [r4, #0]
 801def4:	441e      	add	r6, r3
 801def6:	6026      	str	r6, [r4, #0]
 801def8:	2000      	movs	r0, #0
 801defa:	e7dc      	b.n	801deb6 <__ssputs_r+0x58>
 801defc:	462a      	mov	r2, r5
 801defe:	f000 fc8d 	bl	801e81c <_realloc_r>
 801df02:	4606      	mov	r6, r0
 801df04:	2800      	cmp	r0, #0
 801df06:	d1e2      	bne.n	801dece <__ssputs_r+0x70>
 801df08:	6921      	ldr	r1, [r4, #16]
 801df0a:	4650      	mov	r0, sl
 801df0c:	f7fc fcae 	bl	801a86c <_free_r>
 801df10:	e7c8      	b.n	801dea4 <__ssputs_r+0x46>
	...

0801df14 <_svfiprintf_r>:
 801df14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df18:	461d      	mov	r5, r3
 801df1a:	898b      	ldrh	r3, [r1, #12]
 801df1c:	061f      	lsls	r7, r3, #24
 801df1e:	b09d      	sub	sp, #116	; 0x74
 801df20:	4680      	mov	r8, r0
 801df22:	460c      	mov	r4, r1
 801df24:	4616      	mov	r6, r2
 801df26:	d50f      	bpl.n	801df48 <_svfiprintf_r+0x34>
 801df28:	690b      	ldr	r3, [r1, #16]
 801df2a:	b96b      	cbnz	r3, 801df48 <_svfiprintf_r+0x34>
 801df2c:	2140      	movs	r1, #64	; 0x40
 801df2e:	f7fc fceb 	bl	801a908 <_malloc_r>
 801df32:	6020      	str	r0, [r4, #0]
 801df34:	6120      	str	r0, [r4, #16]
 801df36:	b928      	cbnz	r0, 801df44 <_svfiprintf_r+0x30>
 801df38:	230c      	movs	r3, #12
 801df3a:	f8c8 3000 	str.w	r3, [r8]
 801df3e:	f04f 30ff 	mov.w	r0, #4294967295
 801df42:	e0c8      	b.n	801e0d6 <_svfiprintf_r+0x1c2>
 801df44:	2340      	movs	r3, #64	; 0x40
 801df46:	6163      	str	r3, [r4, #20]
 801df48:	2300      	movs	r3, #0
 801df4a:	9309      	str	r3, [sp, #36]	; 0x24
 801df4c:	2320      	movs	r3, #32
 801df4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801df52:	2330      	movs	r3, #48	; 0x30
 801df54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801df58:	9503      	str	r5, [sp, #12]
 801df5a:	f04f 0b01 	mov.w	fp, #1
 801df5e:	4637      	mov	r7, r6
 801df60:	463d      	mov	r5, r7
 801df62:	f815 3b01 	ldrb.w	r3, [r5], #1
 801df66:	b10b      	cbz	r3, 801df6c <_svfiprintf_r+0x58>
 801df68:	2b25      	cmp	r3, #37	; 0x25
 801df6a:	d13e      	bne.n	801dfea <_svfiprintf_r+0xd6>
 801df6c:	ebb7 0a06 	subs.w	sl, r7, r6
 801df70:	d00b      	beq.n	801df8a <_svfiprintf_r+0x76>
 801df72:	4653      	mov	r3, sl
 801df74:	4632      	mov	r2, r6
 801df76:	4621      	mov	r1, r4
 801df78:	4640      	mov	r0, r8
 801df7a:	f7ff ff70 	bl	801de5e <__ssputs_r>
 801df7e:	3001      	adds	r0, #1
 801df80:	f000 80a4 	beq.w	801e0cc <_svfiprintf_r+0x1b8>
 801df84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df86:	4453      	add	r3, sl
 801df88:	9309      	str	r3, [sp, #36]	; 0x24
 801df8a:	783b      	ldrb	r3, [r7, #0]
 801df8c:	2b00      	cmp	r3, #0
 801df8e:	f000 809d 	beq.w	801e0cc <_svfiprintf_r+0x1b8>
 801df92:	2300      	movs	r3, #0
 801df94:	f04f 32ff 	mov.w	r2, #4294967295
 801df98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801df9c:	9304      	str	r3, [sp, #16]
 801df9e:	9307      	str	r3, [sp, #28]
 801dfa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dfa4:	931a      	str	r3, [sp, #104]	; 0x68
 801dfa6:	462f      	mov	r7, r5
 801dfa8:	2205      	movs	r2, #5
 801dfaa:	f817 1b01 	ldrb.w	r1, [r7], #1
 801dfae:	4850      	ldr	r0, [pc, #320]	; (801e0f0 <_svfiprintf_r+0x1dc>)
 801dfb0:	f7e2 f926 	bl	8000200 <memchr>
 801dfb4:	9b04      	ldr	r3, [sp, #16]
 801dfb6:	b9d0      	cbnz	r0, 801dfee <_svfiprintf_r+0xda>
 801dfb8:	06d9      	lsls	r1, r3, #27
 801dfba:	bf44      	itt	mi
 801dfbc:	2220      	movmi	r2, #32
 801dfbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801dfc2:	071a      	lsls	r2, r3, #28
 801dfc4:	bf44      	itt	mi
 801dfc6:	222b      	movmi	r2, #43	; 0x2b
 801dfc8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801dfcc:	782a      	ldrb	r2, [r5, #0]
 801dfce:	2a2a      	cmp	r2, #42	; 0x2a
 801dfd0:	d015      	beq.n	801dffe <_svfiprintf_r+0xea>
 801dfd2:	9a07      	ldr	r2, [sp, #28]
 801dfd4:	462f      	mov	r7, r5
 801dfd6:	2000      	movs	r0, #0
 801dfd8:	250a      	movs	r5, #10
 801dfda:	4639      	mov	r1, r7
 801dfdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dfe0:	3b30      	subs	r3, #48	; 0x30
 801dfe2:	2b09      	cmp	r3, #9
 801dfe4:	d94d      	bls.n	801e082 <_svfiprintf_r+0x16e>
 801dfe6:	b1b8      	cbz	r0, 801e018 <_svfiprintf_r+0x104>
 801dfe8:	e00f      	b.n	801e00a <_svfiprintf_r+0xf6>
 801dfea:	462f      	mov	r7, r5
 801dfec:	e7b8      	b.n	801df60 <_svfiprintf_r+0x4c>
 801dfee:	4a40      	ldr	r2, [pc, #256]	; (801e0f0 <_svfiprintf_r+0x1dc>)
 801dff0:	1a80      	subs	r0, r0, r2
 801dff2:	fa0b f000 	lsl.w	r0, fp, r0
 801dff6:	4318      	orrs	r0, r3
 801dff8:	9004      	str	r0, [sp, #16]
 801dffa:	463d      	mov	r5, r7
 801dffc:	e7d3      	b.n	801dfa6 <_svfiprintf_r+0x92>
 801dffe:	9a03      	ldr	r2, [sp, #12]
 801e000:	1d11      	adds	r1, r2, #4
 801e002:	6812      	ldr	r2, [r2, #0]
 801e004:	9103      	str	r1, [sp, #12]
 801e006:	2a00      	cmp	r2, #0
 801e008:	db01      	blt.n	801e00e <_svfiprintf_r+0xfa>
 801e00a:	9207      	str	r2, [sp, #28]
 801e00c:	e004      	b.n	801e018 <_svfiprintf_r+0x104>
 801e00e:	4252      	negs	r2, r2
 801e010:	f043 0302 	orr.w	r3, r3, #2
 801e014:	9207      	str	r2, [sp, #28]
 801e016:	9304      	str	r3, [sp, #16]
 801e018:	783b      	ldrb	r3, [r7, #0]
 801e01a:	2b2e      	cmp	r3, #46	; 0x2e
 801e01c:	d10c      	bne.n	801e038 <_svfiprintf_r+0x124>
 801e01e:	787b      	ldrb	r3, [r7, #1]
 801e020:	2b2a      	cmp	r3, #42	; 0x2a
 801e022:	d133      	bne.n	801e08c <_svfiprintf_r+0x178>
 801e024:	9b03      	ldr	r3, [sp, #12]
 801e026:	1d1a      	adds	r2, r3, #4
 801e028:	681b      	ldr	r3, [r3, #0]
 801e02a:	9203      	str	r2, [sp, #12]
 801e02c:	2b00      	cmp	r3, #0
 801e02e:	bfb8      	it	lt
 801e030:	f04f 33ff 	movlt.w	r3, #4294967295
 801e034:	3702      	adds	r7, #2
 801e036:	9305      	str	r3, [sp, #20]
 801e038:	4d2e      	ldr	r5, [pc, #184]	; (801e0f4 <_svfiprintf_r+0x1e0>)
 801e03a:	7839      	ldrb	r1, [r7, #0]
 801e03c:	2203      	movs	r2, #3
 801e03e:	4628      	mov	r0, r5
 801e040:	f7e2 f8de 	bl	8000200 <memchr>
 801e044:	b138      	cbz	r0, 801e056 <_svfiprintf_r+0x142>
 801e046:	2340      	movs	r3, #64	; 0x40
 801e048:	1b40      	subs	r0, r0, r5
 801e04a:	fa03 f000 	lsl.w	r0, r3, r0
 801e04e:	9b04      	ldr	r3, [sp, #16]
 801e050:	4303      	orrs	r3, r0
 801e052:	3701      	adds	r7, #1
 801e054:	9304      	str	r3, [sp, #16]
 801e056:	7839      	ldrb	r1, [r7, #0]
 801e058:	4827      	ldr	r0, [pc, #156]	; (801e0f8 <_svfiprintf_r+0x1e4>)
 801e05a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e05e:	2206      	movs	r2, #6
 801e060:	1c7e      	adds	r6, r7, #1
 801e062:	f7e2 f8cd 	bl	8000200 <memchr>
 801e066:	2800      	cmp	r0, #0
 801e068:	d038      	beq.n	801e0dc <_svfiprintf_r+0x1c8>
 801e06a:	4b24      	ldr	r3, [pc, #144]	; (801e0fc <_svfiprintf_r+0x1e8>)
 801e06c:	bb13      	cbnz	r3, 801e0b4 <_svfiprintf_r+0x1a0>
 801e06e:	9b03      	ldr	r3, [sp, #12]
 801e070:	3307      	adds	r3, #7
 801e072:	f023 0307 	bic.w	r3, r3, #7
 801e076:	3308      	adds	r3, #8
 801e078:	9303      	str	r3, [sp, #12]
 801e07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e07c:	444b      	add	r3, r9
 801e07e:	9309      	str	r3, [sp, #36]	; 0x24
 801e080:	e76d      	b.n	801df5e <_svfiprintf_r+0x4a>
 801e082:	fb05 3202 	mla	r2, r5, r2, r3
 801e086:	2001      	movs	r0, #1
 801e088:	460f      	mov	r7, r1
 801e08a:	e7a6      	b.n	801dfda <_svfiprintf_r+0xc6>
 801e08c:	2300      	movs	r3, #0
 801e08e:	3701      	adds	r7, #1
 801e090:	9305      	str	r3, [sp, #20]
 801e092:	4619      	mov	r1, r3
 801e094:	250a      	movs	r5, #10
 801e096:	4638      	mov	r0, r7
 801e098:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e09c:	3a30      	subs	r2, #48	; 0x30
 801e09e:	2a09      	cmp	r2, #9
 801e0a0:	d903      	bls.n	801e0aa <_svfiprintf_r+0x196>
 801e0a2:	2b00      	cmp	r3, #0
 801e0a4:	d0c8      	beq.n	801e038 <_svfiprintf_r+0x124>
 801e0a6:	9105      	str	r1, [sp, #20]
 801e0a8:	e7c6      	b.n	801e038 <_svfiprintf_r+0x124>
 801e0aa:	fb05 2101 	mla	r1, r5, r1, r2
 801e0ae:	2301      	movs	r3, #1
 801e0b0:	4607      	mov	r7, r0
 801e0b2:	e7f0      	b.n	801e096 <_svfiprintf_r+0x182>
 801e0b4:	ab03      	add	r3, sp, #12
 801e0b6:	9300      	str	r3, [sp, #0]
 801e0b8:	4622      	mov	r2, r4
 801e0ba:	4b11      	ldr	r3, [pc, #68]	; (801e100 <_svfiprintf_r+0x1ec>)
 801e0bc:	a904      	add	r1, sp, #16
 801e0be:	4640      	mov	r0, r8
 801e0c0:	f7fc fd10 	bl	801aae4 <_printf_float>
 801e0c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 801e0c8:	4681      	mov	r9, r0
 801e0ca:	d1d6      	bne.n	801e07a <_svfiprintf_r+0x166>
 801e0cc:	89a3      	ldrh	r3, [r4, #12]
 801e0ce:	065b      	lsls	r3, r3, #25
 801e0d0:	f53f af35 	bmi.w	801df3e <_svfiprintf_r+0x2a>
 801e0d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e0d6:	b01d      	add	sp, #116	; 0x74
 801e0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0dc:	ab03      	add	r3, sp, #12
 801e0de:	9300      	str	r3, [sp, #0]
 801e0e0:	4622      	mov	r2, r4
 801e0e2:	4b07      	ldr	r3, [pc, #28]	; (801e100 <_svfiprintf_r+0x1ec>)
 801e0e4:	a904      	add	r1, sp, #16
 801e0e6:	4640      	mov	r0, r8
 801e0e8:	f7fc ffb2 	bl	801b050 <_printf_i>
 801e0ec:	e7ea      	b.n	801e0c4 <_svfiprintf_r+0x1b0>
 801e0ee:	bf00      	nop
 801e0f0:	08023e34 	.word	0x08023e34
 801e0f4:	08023e3a 	.word	0x08023e3a
 801e0f8:	08023e3e 	.word	0x08023e3e
 801e0fc:	0801aae5 	.word	0x0801aae5
 801e100:	0801de5f 	.word	0x0801de5f

0801e104 <__sfputc_r>:
 801e104:	6893      	ldr	r3, [r2, #8]
 801e106:	3b01      	subs	r3, #1
 801e108:	2b00      	cmp	r3, #0
 801e10a:	b410      	push	{r4}
 801e10c:	6093      	str	r3, [r2, #8]
 801e10e:	da08      	bge.n	801e122 <__sfputc_r+0x1e>
 801e110:	6994      	ldr	r4, [r2, #24]
 801e112:	42a3      	cmp	r3, r4
 801e114:	db01      	blt.n	801e11a <__sfputc_r+0x16>
 801e116:	290a      	cmp	r1, #10
 801e118:	d103      	bne.n	801e122 <__sfputc_r+0x1e>
 801e11a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e11e:	f000 b975 	b.w	801e40c <__swbuf_r>
 801e122:	6813      	ldr	r3, [r2, #0]
 801e124:	1c58      	adds	r0, r3, #1
 801e126:	6010      	str	r0, [r2, #0]
 801e128:	7019      	strb	r1, [r3, #0]
 801e12a:	4608      	mov	r0, r1
 801e12c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e130:	4770      	bx	lr

0801e132 <__sfputs_r>:
 801e132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e134:	4606      	mov	r6, r0
 801e136:	460f      	mov	r7, r1
 801e138:	4614      	mov	r4, r2
 801e13a:	18d5      	adds	r5, r2, r3
 801e13c:	42ac      	cmp	r4, r5
 801e13e:	d101      	bne.n	801e144 <__sfputs_r+0x12>
 801e140:	2000      	movs	r0, #0
 801e142:	e007      	b.n	801e154 <__sfputs_r+0x22>
 801e144:	463a      	mov	r2, r7
 801e146:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e14a:	4630      	mov	r0, r6
 801e14c:	f7ff ffda 	bl	801e104 <__sfputc_r>
 801e150:	1c43      	adds	r3, r0, #1
 801e152:	d1f3      	bne.n	801e13c <__sfputs_r+0xa>
 801e154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e158 <_vfiprintf_r>:
 801e158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e15c:	460c      	mov	r4, r1
 801e15e:	b09d      	sub	sp, #116	; 0x74
 801e160:	4617      	mov	r7, r2
 801e162:	461d      	mov	r5, r3
 801e164:	4606      	mov	r6, r0
 801e166:	b118      	cbz	r0, 801e170 <_vfiprintf_r+0x18>
 801e168:	6983      	ldr	r3, [r0, #24]
 801e16a:	b90b      	cbnz	r3, 801e170 <_vfiprintf_r+0x18>
 801e16c:	f7fe fea8 	bl	801cec0 <__sinit>
 801e170:	4b7c      	ldr	r3, [pc, #496]	; (801e364 <_vfiprintf_r+0x20c>)
 801e172:	429c      	cmp	r4, r3
 801e174:	d158      	bne.n	801e228 <_vfiprintf_r+0xd0>
 801e176:	6874      	ldr	r4, [r6, #4]
 801e178:	89a3      	ldrh	r3, [r4, #12]
 801e17a:	0718      	lsls	r0, r3, #28
 801e17c:	d55e      	bpl.n	801e23c <_vfiprintf_r+0xe4>
 801e17e:	6923      	ldr	r3, [r4, #16]
 801e180:	2b00      	cmp	r3, #0
 801e182:	d05b      	beq.n	801e23c <_vfiprintf_r+0xe4>
 801e184:	2300      	movs	r3, #0
 801e186:	9309      	str	r3, [sp, #36]	; 0x24
 801e188:	2320      	movs	r3, #32
 801e18a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e18e:	2330      	movs	r3, #48	; 0x30
 801e190:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e194:	9503      	str	r5, [sp, #12]
 801e196:	f04f 0b01 	mov.w	fp, #1
 801e19a:	46b8      	mov	r8, r7
 801e19c:	4645      	mov	r5, r8
 801e19e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e1a2:	b10b      	cbz	r3, 801e1a8 <_vfiprintf_r+0x50>
 801e1a4:	2b25      	cmp	r3, #37	; 0x25
 801e1a6:	d154      	bne.n	801e252 <_vfiprintf_r+0xfa>
 801e1a8:	ebb8 0a07 	subs.w	sl, r8, r7
 801e1ac:	d00b      	beq.n	801e1c6 <_vfiprintf_r+0x6e>
 801e1ae:	4653      	mov	r3, sl
 801e1b0:	463a      	mov	r2, r7
 801e1b2:	4621      	mov	r1, r4
 801e1b4:	4630      	mov	r0, r6
 801e1b6:	f7ff ffbc 	bl	801e132 <__sfputs_r>
 801e1ba:	3001      	adds	r0, #1
 801e1bc:	f000 80c2 	beq.w	801e344 <_vfiprintf_r+0x1ec>
 801e1c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1c2:	4453      	add	r3, sl
 801e1c4:	9309      	str	r3, [sp, #36]	; 0x24
 801e1c6:	f898 3000 	ldrb.w	r3, [r8]
 801e1ca:	2b00      	cmp	r3, #0
 801e1cc:	f000 80ba 	beq.w	801e344 <_vfiprintf_r+0x1ec>
 801e1d0:	2300      	movs	r3, #0
 801e1d2:	f04f 32ff 	mov.w	r2, #4294967295
 801e1d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e1da:	9304      	str	r3, [sp, #16]
 801e1dc:	9307      	str	r3, [sp, #28]
 801e1de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e1e2:	931a      	str	r3, [sp, #104]	; 0x68
 801e1e4:	46a8      	mov	r8, r5
 801e1e6:	2205      	movs	r2, #5
 801e1e8:	f818 1b01 	ldrb.w	r1, [r8], #1
 801e1ec:	485e      	ldr	r0, [pc, #376]	; (801e368 <_vfiprintf_r+0x210>)
 801e1ee:	f7e2 f807 	bl	8000200 <memchr>
 801e1f2:	9b04      	ldr	r3, [sp, #16]
 801e1f4:	bb78      	cbnz	r0, 801e256 <_vfiprintf_r+0xfe>
 801e1f6:	06d9      	lsls	r1, r3, #27
 801e1f8:	bf44      	itt	mi
 801e1fa:	2220      	movmi	r2, #32
 801e1fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801e200:	071a      	lsls	r2, r3, #28
 801e202:	bf44      	itt	mi
 801e204:	222b      	movmi	r2, #43	; 0x2b
 801e206:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801e20a:	782a      	ldrb	r2, [r5, #0]
 801e20c:	2a2a      	cmp	r2, #42	; 0x2a
 801e20e:	d02a      	beq.n	801e266 <_vfiprintf_r+0x10e>
 801e210:	9a07      	ldr	r2, [sp, #28]
 801e212:	46a8      	mov	r8, r5
 801e214:	2000      	movs	r0, #0
 801e216:	250a      	movs	r5, #10
 801e218:	4641      	mov	r1, r8
 801e21a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e21e:	3b30      	subs	r3, #48	; 0x30
 801e220:	2b09      	cmp	r3, #9
 801e222:	d969      	bls.n	801e2f8 <_vfiprintf_r+0x1a0>
 801e224:	b360      	cbz	r0, 801e280 <_vfiprintf_r+0x128>
 801e226:	e024      	b.n	801e272 <_vfiprintf_r+0x11a>
 801e228:	4b50      	ldr	r3, [pc, #320]	; (801e36c <_vfiprintf_r+0x214>)
 801e22a:	429c      	cmp	r4, r3
 801e22c:	d101      	bne.n	801e232 <_vfiprintf_r+0xda>
 801e22e:	68b4      	ldr	r4, [r6, #8]
 801e230:	e7a2      	b.n	801e178 <_vfiprintf_r+0x20>
 801e232:	4b4f      	ldr	r3, [pc, #316]	; (801e370 <_vfiprintf_r+0x218>)
 801e234:	429c      	cmp	r4, r3
 801e236:	bf08      	it	eq
 801e238:	68f4      	ldreq	r4, [r6, #12]
 801e23a:	e79d      	b.n	801e178 <_vfiprintf_r+0x20>
 801e23c:	4621      	mov	r1, r4
 801e23e:	4630      	mov	r0, r6
 801e240:	f000 f948 	bl	801e4d4 <__swsetup_r>
 801e244:	2800      	cmp	r0, #0
 801e246:	d09d      	beq.n	801e184 <_vfiprintf_r+0x2c>
 801e248:	f04f 30ff 	mov.w	r0, #4294967295
 801e24c:	b01d      	add	sp, #116	; 0x74
 801e24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e252:	46a8      	mov	r8, r5
 801e254:	e7a2      	b.n	801e19c <_vfiprintf_r+0x44>
 801e256:	4a44      	ldr	r2, [pc, #272]	; (801e368 <_vfiprintf_r+0x210>)
 801e258:	1a80      	subs	r0, r0, r2
 801e25a:	fa0b f000 	lsl.w	r0, fp, r0
 801e25e:	4318      	orrs	r0, r3
 801e260:	9004      	str	r0, [sp, #16]
 801e262:	4645      	mov	r5, r8
 801e264:	e7be      	b.n	801e1e4 <_vfiprintf_r+0x8c>
 801e266:	9a03      	ldr	r2, [sp, #12]
 801e268:	1d11      	adds	r1, r2, #4
 801e26a:	6812      	ldr	r2, [r2, #0]
 801e26c:	9103      	str	r1, [sp, #12]
 801e26e:	2a00      	cmp	r2, #0
 801e270:	db01      	blt.n	801e276 <_vfiprintf_r+0x11e>
 801e272:	9207      	str	r2, [sp, #28]
 801e274:	e004      	b.n	801e280 <_vfiprintf_r+0x128>
 801e276:	4252      	negs	r2, r2
 801e278:	f043 0302 	orr.w	r3, r3, #2
 801e27c:	9207      	str	r2, [sp, #28]
 801e27e:	9304      	str	r3, [sp, #16]
 801e280:	f898 3000 	ldrb.w	r3, [r8]
 801e284:	2b2e      	cmp	r3, #46	; 0x2e
 801e286:	d10e      	bne.n	801e2a6 <_vfiprintf_r+0x14e>
 801e288:	f898 3001 	ldrb.w	r3, [r8, #1]
 801e28c:	2b2a      	cmp	r3, #42	; 0x2a
 801e28e:	d138      	bne.n	801e302 <_vfiprintf_r+0x1aa>
 801e290:	9b03      	ldr	r3, [sp, #12]
 801e292:	1d1a      	adds	r2, r3, #4
 801e294:	681b      	ldr	r3, [r3, #0]
 801e296:	9203      	str	r2, [sp, #12]
 801e298:	2b00      	cmp	r3, #0
 801e29a:	bfb8      	it	lt
 801e29c:	f04f 33ff 	movlt.w	r3, #4294967295
 801e2a0:	f108 0802 	add.w	r8, r8, #2
 801e2a4:	9305      	str	r3, [sp, #20]
 801e2a6:	4d33      	ldr	r5, [pc, #204]	; (801e374 <_vfiprintf_r+0x21c>)
 801e2a8:	f898 1000 	ldrb.w	r1, [r8]
 801e2ac:	2203      	movs	r2, #3
 801e2ae:	4628      	mov	r0, r5
 801e2b0:	f7e1 ffa6 	bl	8000200 <memchr>
 801e2b4:	b140      	cbz	r0, 801e2c8 <_vfiprintf_r+0x170>
 801e2b6:	2340      	movs	r3, #64	; 0x40
 801e2b8:	1b40      	subs	r0, r0, r5
 801e2ba:	fa03 f000 	lsl.w	r0, r3, r0
 801e2be:	9b04      	ldr	r3, [sp, #16]
 801e2c0:	4303      	orrs	r3, r0
 801e2c2:	f108 0801 	add.w	r8, r8, #1
 801e2c6:	9304      	str	r3, [sp, #16]
 801e2c8:	f898 1000 	ldrb.w	r1, [r8]
 801e2cc:	482a      	ldr	r0, [pc, #168]	; (801e378 <_vfiprintf_r+0x220>)
 801e2ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e2d2:	2206      	movs	r2, #6
 801e2d4:	f108 0701 	add.w	r7, r8, #1
 801e2d8:	f7e1 ff92 	bl	8000200 <memchr>
 801e2dc:	2800      	cmp	r0, #0
 801e2de:	d037      	beq.n	801e350 <_vfiprintf_r+0x1f8>
 801e2e0:	4b26      	ldr	r3, [pc, #152]	; (801e37c <_vfiprintf_r+0x224>)
 801e2e2:	bb1b      	cbnz	r3, 801e32c <_vfiprintf_r+0x1d4>
 801e2e4:	9b03      	ldr	r3, [sp, #12]
 801e2e6:	3307      	adds	r3, #7
 801e2e8:	f023 0307 	bic.w	r3, r3, #7
 801e2ec:	3308      	adds	r3, #8
 801e2ee:	9303      	str	r3, [sp, #12]
 801e2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e2f2:	444b      	add	r3, r9
 801e2f4:	9309      	str	r3, [sp, #36]	; 0x24
 801e2f6:	e750      	b.n	801e19a <_vfiprintf_r+0x42>
 801e2f8:	fb05 3202 	mla	r2, r5, r2, r3
 801e2fc:	2001      	movs	r0, #1
 801e2fe:	4688      	mov	r8, r1
 801e300:	e78a      	b.n	801e218 <_vfiprintf_r+0xc0>
 801e302:	2300      	movs	r3, #0
 801e304:	f108 0801 	add.w	r8, r8, #1
 801e308:	9305      	str	r3, [sp, #20]
 801e30a:	4619      	mov	r1, r3
 801e30c:	250a      	movs	r5, #10
 801e30e:	4640      	mov	r0, r8
 801e310:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e314:	3a30      	subs	r2, #48	; 0x30
 801e316:	2a09      	cmp	r2, #9
 801e318:	d903      	bls.n	801e322 <_vfiprintf_r+0x1ca>
 801e31a:	2b00      	cmp	r3, #0
 801e31c:	d0c3      	beq.n	801e2a6 <_vfiprintf_r+0x14e>
 801e31e:	9105      	str	r1, [sp, #20]
 801e320:	e7c1      	b.n	801e2a6 <_vfiprintf_r+0x14e>
 801e322:	fb05 2101 	mla	r1, r5, r1, r2
 801e326:	2301      	movs	r3, #1
 801e328:	4680      	mov	r8, r0
 801e32a:	e7f0      	b.n	801e30e <_vfiprintf_r+0x1b6>
 801e32c:	ab03      	add	r3, sp, #12
 801e32e:	9300      	str	r3, [sp, #0]
 801e330:	4622      	mov	r2, r4
 801e332:	4b13      	ldr	r3, [pc, #76]	; (801e380 <_vfiprintf_r+0x228>)
 801e334:	a904      	add	r1, sp, #16
 801e336:	4630      	mov	r0, r6
 801e338:	f7fc fbd4 	bl	801aae4 <_printf_float>
 801e33c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801e340:	4681      	mov	r9, r0
 801e342:	d1d5      	bne.n	801e2f0 <_vfiprintf_r+0x198>
 801e344:	89a3      	ldrh	r3, [r4, #12]
 801e346:	065b      	lsls	r3, r3, #25
 801e348:	f53f af7e 	bmi.w	801e248 <_vfiprintf_r+0xf0>
 801e34c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e34e:	e77d      	b.n	801e24c <_vfiprintf_r+0xf4>
 801e350:	ab03      	add	r3, sp, #12
 801e352:	9300      	str	r3, [sp, #0]
 801e354:	4622      	mov	r2, r4
 801e356:	4b0a      	ldr	r3, [pc, #40]	; (801e380 <_vfiprintf_r+0x228>)
 801e358:	a904      	add	r1, sp, #16
 801e35a:	4630      	mov	r0, r6
 801e35c:	f7fc fe78 	bl	801b050 <_printf_i>
 801e360:	e7ec      	b.n	801e33c <_vfiprintf_r+0x1e4>
 801e362:	bf00      	nop
 801e364:	08023cf8 	.word	0x08023cf8
 801e368:	08023e34 	.word	0x08023e34
 801e36c:	08023d18 	.word	0x08023d18
 801e370:	08023cd8 	.word	0x08023cd8
 801e374:	08023e3a 	.word	0x08023e3a
 801e378:	08023e3e 	.word	0x08023e3e
 801e37c:	0801aae5 	.word	0x0801aae5
 801e380:	0801e133 	.word	0x0801e133

0801e384 <__sread>:
 801e384:	b510      	push	{r4, lr}
 801e386:	460c      	mov	r4, r1
 801e388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e38c:	f000 fa6c 	bl	801e868 <_read_r>
 801e390:	2800      	cmp	r0, #0
 801e392:	bfab      	itete	ge
 801e394:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e396:	89a3      	ldrhlt	r3, [r4, #12]
 801e398:	181b      	addge	r3, r3, r0
 801e39a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e39e:	bfac      	ite	ge
 801e3a0:	6563      	strge	r3, [r4, #84]	; 0x54
 801e3a2:	81a3      	strhlt	r3, [r4, #12]
 801e3a4:	bd10      	pop	{r4, pc}

0801e3a6 <__swrite>:
 801e3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e3aa:	461f      	mov	r7, r3
 801e3ac:	898b      	ldrh	r3, [r1, #12]
 801e3ae:	05db      	lsls	r3, r3, #23
 801e3b0:	4605      	mov	r5, r0
 801e3b2:	460c      	mov	r4, r1
 801e3b4:	4616      	mov	r6, r2
 801e3b6:	d505      	bpl.n	801e3c4 <__swrite+0x1e>
 801e3b8:	2302      	movs	r3, #2
 801e3ba:	2200      	movs	r2, #0
 801e3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e3c0:	f000 f9b6 	bl	801e730 <_lseek_r>
 801e3c4:	89a3      	ldrh	r3, [r4, #12]
 801e3c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e3ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e3ce:	81a3      	strh	r3, [r4, #12]
 801e3d0:	4632      	mov	r2, r6
 801e3d2:	463b      	mov	r3, r7
 801e3d4:	4628      	mov	r0, r5
 801e3d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e3da:	f000 b869 	b.w	801e4b0 <_write_r>

0801e3de <__sseek>:
 801e3de:	b510      	push	{r4, lr}
 801e3e0:	460c      	mov	r4, r1
 801e3e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e3e6:	f000 f9a3 	bl	801e730 <_lseek_r>
 801e3ea:	1c43      	adds	r3, r0, #1
 801e3ec:	89a3      	ldrh	r3, [r4, #12]
 801e3ee:	bf15      	itete	ne
 801e3f0:	6560      	strne	r0, [r4, #84]	; 0x54
 801e3f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e3f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e3fa:	81a3      	strheq	r3, [r4, #12]
 801e3fc:	bf18      	it	ne
 801e3fe:	81a3      	strhne	r3, [r4, #12]
 801e400:	bd10      	pop	{r4, pc}

0801e402 <__sclose>:
 801e402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e406:	f000 b8d3 	b.w	801e5b0 <_close_r>
	...

0801e40c <__swbuf_r>:
 801e40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e40e:	460e      	mov	r6, r1
 801e410:	4614      	mov	r4, r2
 801e412:	4605      	mov	r5, r0
 801e414:	b118      	cbz	r0, 801e41e <__swbuf_r+0x12>
 801e416:	6983      	ldr	r3, [r0, #24]
 801e418:	b90b      	cbnz	r3, 801e41e <__swbuf_r+0x12>
 801e41a:	f7fe fd51 	bl	801cec0 <__sinit>
 801e41e:	4b21      	ldr	r3, [pc, #132]	; (801e4a4 <__swbuf_r+0x98>)
 801e420:	429c      	cmp	r4, r3
 801e422:	d12a      	bne.n	801e47a <__swbuf_r+0x6e>
 801e424:	686c      	ldr	r4, [r5, #4]
 801e426:	69a3      	ldr	r3, [r4, #24]
 801e428:	60a3      	str	r3, [r4, #8]
 801e42a:	89a3      	ldrh	r3, [r4, #12]
 801e42c:	071a      	lsls	r2, r3, #28
 801e42e:	d52e      	bpl.n	801e48e <__swbuf_r+0x82>
 801e430:	6923      	ldr	r3, [r4, #16]
 801e432:	b363      	cbz	r3, 801e48e <__swbuf_r+0x82>
 801e434:	6923      	ldr	r3, [r4, #16]
 801e436:	6820      	ldr	r0, [r4, #0]
 801e438:	1ac0      	subs	r0, r0, r3
 801e43a:	6963      	ldr	r3, [r4, #20]
 801e43c:	b2f6      	uxtb	r6, r6
 801e43e:	4283      	cmp	r3, r0
 801e440:	4637      	mov	r7, r6
 801e442:	dc04      	bgt.n	801e44e <__swbuf_r+0x42>
 801e444:	4621      	mov	r1, r4
 801e446:	4628      	mov	r0, r5
 801e448:	f000 f948 	bl	801e6dc <_fflush_r>
 801e44c:	bb28      	cbnz	r0, 801e49a <__swbuf_r+0x8e>
 801e44e:	68a3      	ldr	r3, [r4, #8]
 801e450:	3b01      	subs	r3, #1
 801e452:	60a3      	str	r3, [r4, #8]
 801e454:	6823      	ldr	r3, [r4, #0]
 801e456:	1c5a      	adds	r2, r3, #1
 801e458:	6022      	str	r2, [r4, #0]
 801e45a:	701e      	strb	r6, [r3, #0]
 801e45c:	6963      	ldr	r3, [r4, #20]
 801e45e:	3001      	adds	r0, #1
 801e460:	4283      	cmp	r3, r0
 801e462:	d004      	beq.n	801e46e <__swbuf_r+0x62>
 801e464:	89a3      	ldrh	r3, [r4, #12]
 801e466:	07db      	lsls	r3, r3, #31
 801e468:	d519      	bpl.n	801e49e <__swbuf_r+0x92>
 801e46a:	2e0a      	cmp	r6, #10
 801e46c:	d117      	bne.n	801e49e <__swbuf_r+0x92>
 801e46e:	4621      	mov	r1, r4
 801e470:	4628      	mov	r0, r5
 801e472:	f000 f933 	bl	801e6dc <_fflush_r>
 801e476:	b190      	cbz	r0, 801e49e <__swbuf_r+0x92>
 801e478:	e00f      	b.n	801e49a <__swbuf_r+0x8e>
 801e47a:	4b0b      	ldr	r3, [pc, #44]	; (801e4a8 <__swbuf_r+0x9c>)
 801e47c:	429c      	cmp	r4, r3
 801e47e:	d101      	bne.n	801e484 <__swbuf_r+0x78>
 801e480:	68ac      	ldr	r4, [r5, #8]
 801e482:	e7d0      	b.n	801e426 <__swbuf_r+0x1a>
 801e484:	4b09      	ldr	r3, [pc, #36]	; (801e4ac <__swbuf_r+0xa0>)
 801e486:	429c      	cmp	r4, r3
 801e488:	bf08      	it	eq
 801e48a:	68ec      	ldreq	r4, [r5, #12]
 801e48c:	e7cb      	b.n	801e426 <__swbuf_r+0x1a>
 801e48e:	4621      	mov	r1, r4
 801e490:	4628      	mov	r0, r5
 801e492:	f000 f81f 	bl	801e4d4 <__swsetup_r>
 801e496:	2800      	cmp	r0, #0
 801e498:	d0cc      	beq.n	801e434 <__swbuf_r+0x28>
 801e49a:	f04f 37ff 	mov.w	r7, #4294967295
 801e49e:	4638      	mov	r0, r7
 801e4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e4a2:	bf00      	nop
 801e4a4:	08023cf8 	.word	0x08023cf8
 801e4a8:	08023d18 	.word	0x08023d18
 801e4ac:	08023cd8 	.word	0x08023cd8

0801e4b0 <_write_r>:
 801e4b0:	b538      	push	{r3, r4, r5, lr}
 801e4b2:	4c07      	ldr	r4, [pc, #28]	; (801e4d0 <_write_r+0x20>)
 801e4b4:	4605      	mov	r5, r0
 801e4b6:	4608      	mov	r0, r1
 801e4b8:	4611      	mov	r1, r2
 801e4ba:	2200      	movs	r2, #0
 801e4bc:	6022      	str	r2, [r4, #0]
 801e4be:	461a      	mov	r2, r3
 801e4c0:	f7e5 fac5 	bl	8003a4e <_write>
 801e4c4:	1c43      	adds	r3, r0, #1
 801e4c6:	d102      	bne.n	801e4ce <_write_r+0x1e>
 801e4c8:	6823      	ldr	r3, [r4, #0]
 801e4ca:	b103      	cbz	r3, 801e4ce <_write_r+0x1e>
 801e4cc:	602b      	str	r3, [r5, #0]
 801e4ce:	bd38      	pop	{r3, r4, r5, pc}
 801e4d0:	2000766c 	.word	0x2000766c

0801e4d4 <__swsetup_r>:
 801e4d4:	4b32      	ldr	r3, [pc, #200]	; (801e5a0 <__swsetup_r+0xcc>)
 801e4d6:	b570      	push	{r4, r5, r6, lr}
 801e4d8:	681d      	ldr	r5, [r3, #0]
 801e4da:	4606      	mov	r6, r0
 801e4dc:	460c      	mov	r4, r1
 801e4de:	b125      	cbz	r5, 801e4ea <__swsetup_r+0x16>
 801e4e0:	69ab      	ldr	r3, [r5, #24]
 801e4e2:	b913      	cbnz	r3, 801e4ea <__swsetup_r+0x16>
 801e4e4:	4628      	mov	r0, r5
 801e4e6:	f7fe fceb 	bl	801cec0 <__sinit>
 801e4ea:	4b2e      	ldr	r3, [pc, #184]	; (801e5a4 <__swsetup_r+0xd0>)
 801e4ec:	429c      	cmp	r4, r3
 801e4ee:	d10f      	bne.n	801e510 <__swsetup_r+0x3c>
 801e4f0:	686c      	ldr	r4, [r5, #4]
 801e4f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e4f6:	b29a      	uxth	r2, r3
 801e4f8:	0715      	lsls	r5, r2, #28
 801e4fa:	d42c      	bmi.n	801e556 <__swsetup_r+0x82>
 801e4fc:	06d0      	lsls	r0, r2, #27
 801e4fe:	d411      	bmi.n	801e524 <__swsetup_r+0x50>
 801e500:	2209      	movs	r2, #9
 801e502:	6032      	str	r2, [r6, #0]
 801e504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e508:	81a3      	strh	r3, [r4, #12]
 801e50a:	f04f 30ff 	mov.w	r0, #4294967295
 801e50e:	e03e      	b.n	801e58e <__swsetup_r+0xba>
 801e510:	4b25      	ldr	r3, [pc, #148]	; (801e5a8 <__swsetup_r+0xd4>)
 801e512:	429c      	cmp	r4, r3
 801e514:	d101      	bne.n	801e51a <__swsetup_r+0x46>
 801e516:	68ac      	ldr	r4, [r5, #8]
 801e518:	e7eb      	b.n	801e4f2 <__swsetup_r+0x1e>
 801e51a:	4b24      	ldr	r3, [pc, #144]	; (801e5ac <__swsetup_r+0xd8>)
 801e51c:	429c      	cmp	r4, r3
 801e51e:	bf08      	it	eq
 801e520:	68ec      	ldreq	r4, [r5, #12]
 801e522:	e7e6      	b.n	801e4f2 <__swsetup_r+0x1e>
 801e524:	0751      	lsls	r1, r2, #29
 801e526:	d512      	bpl.n	801e54e <__swsetup_r+0x7a>
 801e528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e52a:	b141      	cbz	r1, 801e53e <__swsetup_r+0x6a>
 801e52c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e530:	4299      	cmp	r1, r3
 801e532:	d002      	beq.n	801e53a <__swsetup_r+0x66>
 801e534:	4630      	mov	r0, r6
 801e536:	f7fc f999 	bl	801a86c <_free_r>
 801e53a:	2300      	movs	r3, #0
 801e53c:	6363      	str	r3, [r4, #52]	; 0x34
 801e53e:	89a3      	ldrh	r3, [r4, #12]
 801e540:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e544:	81a3      	strh	r3, [r4, #12]
 801e546:	2300      	movs	r3, #0
 801e548:	6063      	str	r3, [r4, #4]
 801e54a:	6923      	ldr	r3, [r4, #16]
 801e54c:	6023      	str	r3, [r4, #0]
 801e54e:	89a3      	ldrh	r3, [r4, #12]
 801e550:	f043 0308 	orr.w	r3, r3, #8
 801e554:	81a3      	strh	r3, [r4, #12]
 801e556:	6923      	ldr	r3, [r4, #16]
 801e558:	b94b      	cbnz	r3, 801e56e <__swsetup_r+0x9a>
 801e55a:	89a3      	ldrh	r3, [r4, #12]
 801e55c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e564:	d003      	beq.n	801e56e <__swsetup_r+0x9a>
 801e566:	4621      	mov	r1, r4
 801e568:	4630      	mov	r0, r6
 801e56a:	f000 f917 	bl	801e79c <__smakebuf_r>
 801e56e:	89a2      	ldrh	r2, [r4, #12]
 801e570:	f012 0301 	ands.w	r3, r2, #1
 801e574:	d00c      	beq.n	801e590 <__swsetup_r+0xbc>
 801e576:	2300      	movs	r3, #0
 801e578:	60a3      	str	r3, [r4, #8]
 801e57a:	6963      	ldr	r3, [r4, #20]
 801e57c:	425b      	negs	r3, r3
 801e57e:	61a3      	str	r3, [r4, #24]
 801e580:	6923      	ldr	r3, [r4, #16]
 801e582:	b953      	cbnz	r3, 801e59a <__swsetup_r+0xc6>
 801e584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e588:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801e58c:	d1ba      	bne.n	801e504 <__swsetup_r+0x30>
 801e58e:	bd70      	pop	{r4, r5, r6, pc}
 801e590:	0792      	lsls	r2, r2, #30
 801e592:	bf58      	it	pl
 801e594:	6963      	ldrpl	r3, [r4, #20]
 801e596:	60a3      	str	r3, [r4, #8]
 801e598:	e7f2      	b.n	801e580 <__swsetup_r+0xac>
 801e59a:	2000      	movs	r0, #0
 801e59c:	e7f7      	b.n	801e58e <__swsetup_r+0xba>
 801e59e:	bf00      	nop
 801e5a0:	20000084 	.word	0x20000084
 801e5a4:	08023cf8 	.word	0x08023cf8
 801e5a8:	08023d18 	.word	0x08023d18
 801e5ac:	08023cd8 	.word	0x08023cd8

0801e5b0 <_close_r>:
 801e5b0:	b538      	push	{r3, r4, r5, lr}
 801e5b2:	4c06      	ldr	r4, [pc, #24]	; (801e5cc <_close_r+0x1c>)
 801e5b4:	2300      	movs	r3, #0
 801e5b6:	4605      	mov	r5, r0
 801e5b8:	4608      	mov	r0, r1
 801e5ba:	6023      	str	r3, [r4, #0]
 801e5bc:	f7e5 fa63 	bl	8003a86 <_close>
 801e5c0:	1c43      	adds	r3, r0, #1
 801e5c2:	d102      	bne.n	801e5ca <_close_r+0x1a>
 801e5c4:	6823      	ldr	r3, [r4, #0]
 801e5c6:	b103      	cbz	r3, 801e5ca <_close_r+0x1a>
 801e5c8:	602b      	str	r3, [r5, #0]
 801e5ca:	bd38      	pop	{r3, r4, r5, pc}
 801e5cc:	2000766c 	.word	0x2000766c

0801e5d0 <__sflush_r>:
 801e5d0:	898a      	ldrh	r2, [r1, #12]
 801e5d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5d6:	4605      	mov	r5, r0
 801e5d8:	0710      	lsls	r0, r2, #28
 801e5da:	460c      	mov	r4, r1
 801e5dc:	d458      	bmi.n	801e690 <__sflush_r+0xc0>
 801e5de:	684b      	ldr	r3, [r1, #4]
 801e5e0:	2b00      	cmp	r3, #0
 801e5e2:	dc05      	bgt.n	801e5f0 <__sflush_r+0x20>
 801e5e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e5e6:	2b00      	cmp	r3, #0
 801e5e8:	dc02      	bgt.n	801e5f0 <__sflush_r+0x20>
 801e5ea:	2000      	movs	r0, #0
 801e5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e5f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e5f2:	2e00      	cmp	r6, #0
 801e5f4:	d0f9      	beq.n	801e5ea <__sflush_r+0x1a>
 801e5f6:	2300      	movs	r3, #0
 801e5f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e5fc:	682f      	ldr	r7, [r5, #0]
 801e5fe:	6a21      	ldr	r1, [r4, #32]
 801e600:	602b      	str	r3, [r5, #0]
 801e602:	d032      	beq.n	801e66a <__sflush_r+0x9a>
 801e604:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e606:	89a3      	ldrh	r3, [r4, #12]
 801e608:	075a      	lsls	r2, r3, #29
 801e60a:	d505      	bpl.n	801e618 <__sflush_r+0x48>
 801e60c:	6863      	ldr	r3, [r4, #4]
 801e60e:	1ac0      	subs	r0, r0, r3
 801e610:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e612:	b10b      	cbz	r3, 801e618 <__sflush_r+0x48>
 801e614:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e616:	1ac0      	subs	r0, r0, r3
 801e618:	2300      	movs	r3, #0
 801e61a:	4602      	mov	r2, r0
 801e61c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e61e:	6a21      	ldr	r1, [r4, #32]
 801e620:	4628      	mov	r0, r5
 801e622:	47b0      	blx	r6
 801e624:	1c43      	adds	r3, r0, #1
 801e626:	89a3      	ldrh	r3, [r4, #12]
 801e628:	d106      	bne.n	801e638 <__sflush_r+0x68>
 801e62a:	6829      	ldr	r1, [r5, #0]
 801e62c:	291d      	cmp	r1, #29
 801e62e:	d848      	bhi.n	801e6c2 <__sflush_r+0xf2>
 801e630:	4a29      	ldr	r2, [pc, #164]	; (801e6d8 <__sflush_r+0x108>)
 801e632:	40ca      	lsrs	r2, r1
 801e634:	07d6      	lsls	r6, r2, #31
 801e636:	d544      	bpl.n	801e6c2 <__sflush_r+0xf2>
 801e638:	2200      	movs	r2, #0
 801e63a:	6062      	str	r2, [r4, #4]
 801e63c:	04d9      	lsls	r1, r3, #19
 801e63e:	6922      	ldr	r2, [r4, #16]
 801e640:	6022      	str	r2, [r4, #0]
 801e642:	d504      	bpl.n	801e64e <__sflush_r+0x7e>
 801e644:	1c42      	adds	r2, r0, #1
 801e646:	d101      	bne.n	801e64c <__sflush_r+0x7c>
 801e648:	682b      	ldr	r3, [r5, #0]
 801e64a:	b903      	cbnz	r3, 801e64e <__sflush_r+0x7e>
 801e64c:	6560      	str	r0, [r4, #84]	; 0x54
 801e64e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e650:	602f      	str	r7, [r5, #0]
 801e652:	2900      	cmp	r1, #0
 801e654:	d0c9      	beq.n	801e5ea <__sflush_r+0x1a>
 801e656:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e65a:	4299      	cmp	r1, r3
 801e65c:	d002      	beq.n	801e664 <__sflush_r+0x94>
 801e65e:	4628      	mov	r0, r5
 801e660:	f7fc f904 	bl	801a86c <_free_r>
 801e664:	2000      	movs	r0, #0
 801e666:	6360      	str	r0, [r4, #52]	; 0x34
 801e668:	e7c0      	b.n	801e5ec <__sflush_r+0x1c>
 801e66a:	2301      	movs	r3, #1
 801e66c:	4628      	mov	r0, r5
 801e66e:	47b0      	blx	r6
 801e670:	1c41      	adds	r1, r0, #1
 801e672:	d1c8      	bne.n	801e606 <__sflush_r+0x36>
 801e674:	682b      	ldr	r3, [r5, #0]
 801e676:	2b00      	cmp	r3, #0
 801e678:	d0c5      	beq.n	801e606 <__sflush_r+0x36>
 801e67a:	2b1d      	cmp	r3, #29
 801e67c:	d001      	beq.n	801e682 <__sflush_r+0xb2>
 801e67e:	2b16      	cmp	r3, #22
 801e680:	d101      	bne.n	801e686 <__sflush_r+0xb6>
 801e682:	602f      	str	r7, [r5, #0]
 801e684:	e7b1      	b.n	801e5ea <__sflush_r+0x1a>
 801e686:	89a3      	ldrh	r3, [r4, #12]
 801e688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e68c:	81a3      	strh	r3, [r4, #12]
 801e68e:	e7ad      	b.n	801e5ec <__sflush_r+0x1c>
 801e690:	690f      	ldr	r7, [r1, #16]
 801e692:	2f00      	cmp	r7, #0
 801e694:	d0a9      	beq.n	801e5ea <__sflush_r+0x1a>
 801e696:	0793      	lsls	r3, r2, #30
 801e698:	680e      	ldr	r6, [r1, #0]
 801e69a:	bf08      	it	eq
 801e69c:	694b      	ldreq	r3, [r1, #20]
 801e69e:	600f      	str	r7, [r1, #0]
 801e6a0:	bf18      	it	ne
 801e6a2:	2300      	movne	r3, #0
 801e6a4:	eba6 0807 	sub.w	r8, r6, r7
 801e6a8:	608b      	str	r3, [r1, #8]
 801e6aa:	f1b8 0f00 	cmp.w	r8, #0
 801e6ae:	dd9c      	ble.n	801e5ea <__sflush_r+0x1a>
 801e6b0:	4643      	mov	r3, r8
 801e6b2:	463a      	mov	r2, r7
 801e6b4:	6a21      	ldr	r1, [r4, #32]
 801e6b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e6b8:	4628      	mov	r0, r5
 801e6ba:	47b0      	blx	r6
 801e6bc:	2800      	cmp	r0, #0
 801e6be:	dc06      	bgt.n	801e6ce <__sflush_r+0xfe>
 801e6c0:	89a3      	ldrh	r3, [r4, #12]
 801e6c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e6c6:	81a3      	strh	r3, [r4, #12]
 801e6c8:	f04f 30ff 	mov.w	r0, #4294967295
 801e6cc:	e78e      	b.n	801e5ec <__sflush_r+0x1c>
 801e6ce:	4407      	add	r7, r0
 801e6d0:	eba8 0800 	sub.w	r8, r8, r0
 801e6d4:	e7e9      	b.n	801e6aa <__sflush_r+0xda>
 801e6d6:	bf00      	nop
 801e6d8:	20400001 	.word	0x20400001

0801e6dc <_fflush_r>:
 801e6dc:	b538      	push	{r3, r4, r5, lr}
 801e6de:	690b      	ldr	r3, [r1, #16]
 801e6e0:	4605      	mov	r5, r0
 801e6e2:	460c      	mov	r4, r1
 801e6e4:	b1db      	cbz	r3, 801e71e <_fflush_r+0x42>
 801e6e6:	b118      	cbz	r0, 801e6f0 <_fflush_r+0x14>
 801e6e8:	6983      	ldr	r3, [r0, #24]
 801e6ea:	b90b      	cbnz	r3, 801e6f0 <_fflush_r+0x14>
 801e6ec:	f7fe fbe8 	bl	801cec0 <__sinit>
 801e6f0:	4b0c      	ldr	r3, [pc, #48]	; (801e724 <_fflush_r+0x48>)
 801e6f2:	429c      	cmp	r4, r3
 801e6f4:	d109      	bne.n	801e70a <_fflush_r+0x2e>
 801e6f6:	686c      	ldr	r4, [r5, #4]
 801e6f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e6fc:	b17b      	cbz	r3, 801e71e <_fflush_r+0x42>
 801e6fe:	4621      	mov	r1, r4
 801e700:	4628      	mov	r0, r5
 801e702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e706:	f7ff bf63 	b.w	801e5d0 <__sflush_r>
 801e70a:	4b07      	ldr	r3, [pc, #28]	; (801e728 <_fflush_r+0x4c>)
 801e70c:	429c      	cmp	r4, r3
 801e70e:	d101      	bne.n	801e714 <_fflush_r+0x38>
 801e710:	68ac      	ldr	r4, [r5, #8]
 801e712:	e7f1      	b.n	801e6f8 <_fflush_r+0x1c>
 801e714:	4b05      	ldr	r3, [pc, #20]	; (801e72c <_fflush_r+0x50>)
 801e716:	429c      	cmp	r4, r3
 801e718:	bf08      	it	eq
 801e71a:	68ec      	ldreq	r4, [r5, #12]
 801e71c:	e7ec      	b.n	801e6f8 <_fflush_r+0x1c>
 801e71e:	2000      	movs	r0, #0
 801e720:	bd38      	pop	{r3, r4, r5, pc}
 801e722:	bf00      	nop
 801e724:	08023cf8 	.word	0x08023cf8
 801e728:	08023d18 	.word	0x08023d18
 801e72c:	08023cd8 	.word	0x08023cd8

0801e730 <_lseek_r>:
 801e730:	b538      	push	{r3, r4, r5, lr}
 801e732:	4c07      	ldr	r4, [pc, #28]	; (801e750 <_lseek_r+0x20>)
 801e734:	4605      	mov	r5, r0
 801e736:	4608      	mov	r0, r1
 801e738:	4611      	mov	r1, r2
 801e73a:	2200      	movs	r2, #0
 801e73c:	6022      	str	r2, [r4, #0]
 801e73e:	461a      	mov	r2, r3
 801e740:	f7e5 f9c8 	bl	8003ad4 <_lseek>
 801e744:	1c43      	adds	r3, r0, #1
 801e746:	d102      	bne.n	801e74e <_lseek_r+0x1e>
 801e748:	6823      	ldr	r3, [r4, #0]
 801e74a:	b103      	cbz	r3, 801e74e <_lseek_r+0x1e>
 801e74c:	602b      	str	r3, [r5, #0]
 801e74e:	bd38      	pop	{r3, r4, r5, pc}
 801e750:	2000766c 	.word	0x2000766c

0801e754 <__swhatbuf_r>:
 801e754:	b570      	push	{r4, r5, r6, lr}
 801e756:	460e      	mov	r6, r1
 801e758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e75c:	2900      	cmp	r1, #0
 801e75e:	b096      	sub	sp, #88	; 0x58
 801e760:	4614      	mov	r4, r2
 801e762:	461d      	mov	r5, r3
 801e764:	da07      	bge.n	801e776 <__swhatbuf_r+0x22>
 801e766:	2300      	movs	r3, #0
 801e768:	602b      	str	r3, [r5, #0]
 801e76a:	89b3      	ldrh	r3, [r6, #12]
 801e76c:	061a      	lsls	r2, r3, #24
 801e76e:	d410      	bmi.n	801e792 <__swhatbuf_r+0x3e>
 801e770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e774:	e00e      	b.n	801e794 <__swhatbuf_r+0x40>
 801e776:	466a      	mov	r2, sp
 801e778:	f000 f888 	bl	801e88c <_fstat_r>
 801e77c:	2800      	cmp	r0, #0
 801e77e:	dbf2      	blt.n	801e766 <__swhatbuf_r+0x12>
 801e780:	9a01      	ldr	r2, [sp, #4]
 801e782:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e786:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e78a:	425a      	negs	r2, r3
 801e78c:	415a      	adcs	r2, r3
 801e78e:	602a      	str	r2, [r5, #0]
 801e790:	e7ee      	b.n	801e770 <__swhatbuf_r+0x1c>
 801e792:	2340      	movs	r3, #64	; 0x40
 801e794:	2000      	movs	r0, #0
 801e796:	6023      	str	r3, [r4, #0]
 801e798:	b016      	add	sp, #88	; 0x58
 801e79a:	bd70      	pop	{r4, r5, r6, pc}

0801e79c <__smakebuf_r>:
 801e79c:	898b      	ldrh	r3, [r1, #12]
 801e79e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e7a0:	079d      	lsls	r5, r3, #30
 801e7a2:	4606      	mov	r6, r0
 801e7a4:	460c      	mov	r4, r1
 801e7a6:	d507      	bpl.n	801e7b8 <__smakebuf_r+0x1c>
 801e7a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e7ac:	6023      	str	r3, [r4, #0]
 801e7ae:	6123      	str	r3, [r4, #16]
 801e7b0:	2301      	movs	r3, #1
 801e7b2:	6163      	str	r3, [r4, #20]
 801e7b4:	b002      	add	sp, #8
 801e7b6:	bd70      	pop	{r4, r5, r6, pc}
 801e7b8:	ab01      	add	r3, sp, #4
 801e7ba:	466a      	mov	r2, sp
 801e7bc:	f7ff ffca 	bl	801e754 <__swhatbuf_r>
 801e7c0:	9900      	ldr	r1, [sp, #0]
 801e7c2:	4605      	mov	r5, r0
 801e7c4:	4630      	mov	r0, r6
 801e7c6:	f7fc f89f 	bl	801a908 <_malloc_r>
 801e7ca:	b948      	cbnz	r0, 801e7e0 <__smakebuf_r+0x44>
 801e7cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e7d0:	059a      	lsls	r2, r3, #22
 801e7d2:	d4ef      	bmi.n	801e7b4 <__smakebuf_r+0x18>
 801e7d4:	f023 0303 	bic.w	r3, r3, #3
 801e7d8:	f043 0302 	orr.w	r3, r3, #2
 801e7dc:	81a3      	strh	r3, [r4, #12]
 801e7de:	e7e3      	b.n	801e7a8 <__smakebuf_r+0xc>
 801e7e0:	4b0d      	ldr	r3, [pc, #52]	; (801e818 <__smakebuf_r+0x7c>)
 801e7e2:	62b3      	str	r3, [r6, #40]	; 0x28
 801e7e4:	89a3      	ldrh	r3, [r4, #12]
 801e7e6:	6020      	str	r0, [r4, #0]
 801e7e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e7ec:	81a3      	strh	r3, [r4, #12]
 801e7ee:	9b00      	ldr	r3, [sp, #0]
 801e7f0:	6163      	str	r3, [r4, #20]
 801e7f2:	9b01      	ldr	r3, [sp, #4]
 801e7f4:	6120      	str	r0, [r4, #16]
 801e7f6:	b15b      	cbz	r3, 801e810 <__smakebuf_r+0x74>
 801e7f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e7fc:	4630      	mov	r0, r6
 801e7fe:	f000 f857 	bl	801e8b0 <_isatty_r>
 801e802:	b128      	cbz	r0, 801e810 <__smakebuf_r+0x74>
 801e804:	89a3      	ldrh	r3, [r4, #12]
 801e806:	f023 0303 	bic.w	r3, r3, #3
 801e80a:	f043 0301 	orr.w	r3, r3, #1
 801e80e:	81a3      	strh	r3, [r4, #12]
 801e810:	89a3      	ldrh	r3, [r4, #12]
 801e812:	431d      	orrs	r5, r3
 801e814:	81a5      	strh	r5, [r4, #12]
 801e816:	e7cd      	b.n	801e7b4 <__smakebuf_r+0x18>
 801e818:	0801ce89 	.word	0x0801ce89

0801e81c <_realloc_r>:
 801e81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e81e:	4607      	mov	r7, r0
 801e820:	4614      	mov	r4, r2
 801e822:	460e      	mov	r6, r1
 801e824:	b921      	cbnz	r1, 801e830 <_realloc_r+0x14>
 801e826:	4611      	mov	r1, r2
 801e828:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e82c:	f7fc b86c 	b.w	801a908 <_malloc_r>
 801e830:	b922      	cbnz	r2, 801e83c <_realloc_r+0x20>
 801e832:	f7fc f81b 	bl	801a86c <_free_r>
 801e836:	4625      	mov	r5, r4
 801e838:	4628      	mov	r0, r5
 801e83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e83c:	f000 f848 	bl	801e8d0 <_malloc_usable_size_r>
 801e840:	42a0      	cmp	r0, r4
 801e842:	d20f      	bcs.n	801e864 <_realloc_r+0x48>
 801e844:	4621      	mov	r1, r4
 801e846:	4638      	mov	r0, r7
 801e848:	f7fc f85e 	bl	801a908 <_malloc_r>
 801e84c:	4605      	mov	r5, r0
 801e84e:	2800      	cmp	r0, #0
 801e850:	d0f2      	beq.n	801e838 <_realloc_r+0x1c>
 801e852:	4631      	mov	r1, r6
 801e854:	4622      	mov	r2, r4
 801e856:	f7fb ffdc 	bl	801a812 <memcpy>
 801e85a:	4631      	mov	r1, r6
 801e85c:	4638      	mov	r0, r7
 801e85e:	f7fc f805 	bl	801a86c <_free_r>
 801e862:	e7e9      	b.n	801e838 <_realloc_r+0x1c>
 801e864:	4635      	mov	r5, r6
 801e866:	e7e7      	b.n	801e838 <_realloc_r+0x1c>

0801e868 <_read_r>:
 801e868:	b538      	push	{r3, r4, r5, lr}
 801e86a:	4c07      	ldr	r4, [pc, #28]	; (801e888 <_read_r+0x20>)
 801e86c:	4605      	mov	r5, r0
 801e86e:	4608      	mov	r0, r1
 801e870:	4611      	mov	r1, r2
 801e872:	2200      	movs	r2, #0
 801e874:	6022      	str	r2, [r4, #0]
 801e876:	461a      	mov	r2, r3
 801e878:	f7e5 f8cc 	bl	8003a14 <_read>
 801e87c:	1c43      	adds	r3, r0, #1
 801e87e:	d102      	bne.n	801e886 <_read_r+0x1e>
 801e880:	6823      	ldr	r3, [r4, #0]
 801e882:	b103      	cbz	r3, 801e886 <_read_r+0x1e>
 801e884:	602b      	str	r3, [r5, #0]
 801e886:	bd38      	pop	{r3, r4, r5, pc}
 801e888:	2000766c 	.word	0x2000766c

0801e88c <_fstat_r>:
 801e88c:	b538      	push	{r3, r4, r5, lr}
 801e88e:	4c07      	ldr	r4, [pc, #28]	; (801e8ac <_fstat_r+0x20>)
 801e890:	2300      	movs	r3, #0
 801e892:	4605      	mov	r5, r0
 801e894:	4608      	mov	r0, r1
 801e896:	4611      	mov	r1, r2
 801e898:	6023      	str	r3, [r4, #0]
 801e89a:	f7e5 f900 	bl	8003a9e <_fstat>
 801e89e:	1c43      	adds	r3, r0, #1
 801e8a0:	d102      	bne.n	801e8a8 <_fstat_r+0x1c>
 801e8a2:	6823      	ldr	r3, [r4, #0]
 801e8a4:	b103      	cbz	r3, 801e8a8 <_fstat_r+0x1c>
 801e8a6:	602b      	str	r3, [r5, #0]
 801e8a8:	bd38      	pop	{r3, r4, r5, pc}
 801e8aa:	bf00      	nop
 801e8ac:	2000766c 	.word	0x2000766c

0801e8b0 <_isatty_r>:
 801e8b0:	b538      	push	{r3, r4, r5, lr}
 801e8b2:	4c06      	ldr	r4, [pc, #24]	; (801e8cc <_isatty_r+0x1c>)
 801e8b4:	2300      	movs	r3, #0
 801e8b6:	4605      	mov	r5, r0
 801e8b8:	4608      	mov	r0, r1
 801e8ba:	6023      	str	r3, [r4, #0]
 801e8bc:	f7e5 f8ff 	bl	8003abe <_isatty>
 801e8c0:	1c43      	adds	r3, r0, #1
 801e8c2:	d102      	bne.n	801e8ca <_isatty_r+0x1a>
 801e8c4:	6823      	ldr	r3, [r4, #0]
 801e8c6:	b103      	cbz	r3, 801e8ca <_isatty_r+0x1a>
 801e8c8:	602b      	str	r3, [r5, #0]
 801e8ca:	bd38      	pop	{r3, r4, r5, pc}
 801e8cc:	2000766c 	.word	0x2000766c

0801e8d0 <_malloc_usable_size_r>:
 801e8d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e8d4:	1f18      	subs	r0, r3, #4
 801e8d6:	2b00      	cmp	r3, #0
 801e8d8:	bfbc      	itt	lt
 801e8da:	580b      	ldrlt	r3, [r1, r0]
 801e8dc:	18c0      	addlt	r0, r0, r3
 801e8de:	4770      	bx	lr

0801e8e0 <pow>:
 801e8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8e4:	ed2d 8b04 	vpush	{d8-d9}
 801e8e8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801ebbc <pow+0x2dc>
 801e8ec:	b08d      	sub	sp, #52	; 0x34
 801e8ee:	ec57 6b10 	vmov	r6, r7, d0
 801e8f2:	ec55 4b11 	vmov	r4, r5, d1
 801e8f6:	f000 f963 	bl	801ebc0 <__ieee754_pow>
 801e8fa:	f999 3000 	ldrsb.w	r3, [r9]
 801e8fe:	9300      	str	r3, [sp, #0]
 801e900:	3301      	adds	r3, #1
 801e902:	eeb0 8a40 	vmov.f32	s16, s0
 801e906:	eef0 8a60 	vmov.f32	s17, s1
 801e90a:	46c8      	mov	r8, r9
 801e90c:	d05f      	beq.n	801e9ce <pow+0xee>
 801e90e:	4622      	mov	r2, r4
 801e910:	462b      	mov	r3, r5
 801e912:	4620      	mov	r0, r4
 801e914:	4629      	mov	r1, r5
 801e916:	f7e2 f919 	bl	8000b4c <__aeabi_dcmpun>
 801e91a:	4683      	mov	fp, r0
 801e91c:	2800      	cmp	r0, #0
 801e91e:	d156      	bne.n	801e9ce <pow+0xee>
 801e920:	4632      	mov	r2, r6
 801e922:	463b      	mov	r3, r7
 801e924:	4630      	mov	r0, r6
 801e926:	4639      	mov	r1, r7
 801e928:	f7e2 f910 	bl	8000b4c <__aeabi_dcmpun>
 801e92c:	9001      	str	r0, [sp, #4]
 801e92e:	b1e8      	cbz	r0, 801e96c <pow+0x8c>
 801e930:	2200      	movs	r2, #0
 801e932:	2300      	movs	r3, #0
 801e934:	4620      	mov	r0, r4
 801e936:	4629      	mov	r1, r5
 801e938:	f7e2 f8d6 	bl	8000ae8 <__aeabi_dcmpeq>
 801e93c:	2800      	cmp	r0, #0
 801e93e:	d046      	beq.n	801e9ce <pow+0xee>
 801e940:	2301      	movs	r3, #1
 801e942:	9302      	str	r3, [sp, #8]
 801e944:	4b96      	ldr	r3, [pc, #600]	; (801eba0 <pow+0x2c0>)
 801e946:	9303      	str	r3, [sp, #12]
 801e948:	4b96      	ldr	r3, [pc, #600]	; (801eba4 <pow+0x2c4>)
 801e94a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801e94e:	2200      	movs	r2, #0
 801e950:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801e954:	9b00      	ldr	r3, [sp, #0]
 801e956:	2b02      	cmp	r3, #2
 801e958:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801e95c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801e960:	d033      	beq.n	801e9ca <pow+0xea>
 801e962:	a802      	add	r0, sp, #8
 801e964:	f000 fefb 	bl	801f75e <matherr>
 801e968:	bb48      	cbnz	r0, 801e9be <pow+0xde>
 801e96a:	e05d      	b.n	801ea28 <pow+0x148>
 801e96c:	f04f 0a00 	mov.w	sl, #0
 801e970:	f04f 0b00 	mov.w	fp, #0
 801e974:	4652      	mov	r2, sl
 801e976:	465b      	mov	r3, fp
 801e978:	4630      	mov	r0, r6
 801e97a:	4639      	mov	r1, r7
 801e97c:	f7e2 f8b4 	bl	8000ae8 <__aeabi_dcmpeq>
 801e980:	ec4b ab19 	vmov	d9, sl, fp
 801e984:	2800      	cmp	r0, #0
 801e986:	d054      	beq.n	801ea32 <pow+0x152>
 801e988:	4652      	mov	r2, sl
 801e98a:	465b      	mov	r3, fp
 801e98c:	4620      	mov	r0, r4
 801e98e:	4629      	mov	r1, r5
 801e990:	f7e2 f8aa 	bl	8000ae8 <__aeabi_dcmpeq>
 801e994:	4680      	mov	r8, r0
 801e996:	b318      	cbz	r0, 801e9e0 <pow+0x100>
 801e998:	2301      	movs	r3, #1
 801e99a:	9302      	str	r3, [sp, #8]
 801e99c:	4b80      	ldr	r3, [pc, #512]	; (801eba0 <pow+0x2c0>)
 801e99e:	9303      	str	r3, [sp, #12]
 801e9a0:	9b01      	ldr	r3, [sp, #4]
 801e9a2:	930a      	str	r3, [sp, #40]	; 0x28
 801e9a4:	9b00      	ldr	r3, [sp, #0]
 801e9a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801e9aa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801e9ae:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801e9b2:	2b00      	cmp	r3, #0
 801e9b4:	d0d5      	beq.n	801e962 <pow+0x82>
 801e9b6:	4b7b      	ldr	r3, [pc, #492]	; (801eba4 <pow+0x2c4>)
 801e9b8:	2200      	movs	r2, #0
 801e9ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801e9be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e9c0:	b11b      	cbz	r3, 801e9ca <pow+0xea>
 801e9c2:	f000 ffe3 	bl	801f98c <__errno>
 801e9c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e9c8:	6003      	str	r3, [r0, #0]
 801e9ca:	ed9d 8b08 	vldr	d8, [sp, #32]
 801e9ce:	eeb0 0a48 	vmov.f32	s0, s16
 801e9d2:	eef0 0a68 	vmov.f32	s1, s17
 801e9d6:	b00d      	add	sp, #52	; 0x34
 801e9d8:	ecbd 8b04 	vpop	{d8-d9}
 801e9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9e0:	ec45 4b10 	vmov	d0, r4, r5
 801e9e4:	f000 feb3 	bl	801f74e <finite>
 801e9e8:	2800      	cmp	r0, #0
 801e9ea:	d0f0      	beq.n	801e9ce <pow+0xee>
 801e9ec:	4652      	mov	r2, sl
 801e9ee:	465b      	mov	r3, fp
 801e9f0:	4620      	mov	r0, r4
 801e9f2:	4629      	mov	r1, r5
 801e9f4:	f7e2 f882 	bl	8000afc <__aeabi_dcmplt>
 801e9f8:	2800      	cmp	r0, #0
 801e9fa:	d0e8      	beq.n	801e9ce <pow+0xee>
 801e9fc:	2301      	movs	r3, #1
 801e9fe:	9302      	str	r3, [sp, #8]
 801ea00:	4b67      	ldr	r3, [pc, #412]	; (801eba0 <pow+0x2c0>)
 801ea02:	9303      	str	r3, [sp, #12]
 801ea04:	f999 3000 	ldrsb.w	r3, [r9]
 801ea08:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801ea0c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801ea10:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801ea14:	b913      	cbnz	r3, 801ea1c <pow+0x13c>
 801ea16:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801ea1a:	e7a2      	b.n	801e962 <pow+0x82>
 801ea1c:	4962      	ldr	r1, [pc, #392]	; (801eba8 <pow+0x2c8>)
 801ea1e:	2000      	movs	r0, #0
 801ea20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801ea24:	2b02      	cmp	r3, #2
 801ea26:	d19c      	bne.n	801e962 <pow+0x82>
 801ea28:	f000 ffb0 	bl	801f98c <__errno>
 801ea2c:	2321      	movs	r3, #33	; 0x21
 801ea2e:	6003      	str	r3, [r0, #0]
 801ea30:	e7c5      	b.n	801e9be <pow+0xde>
 801ea32:	eeb0 0a48 	vmov.f32	s0, s16
 801ea36:	eef0 0a68 	vmov.f32	s1, s17
 801ea3a:	f000 fe88 	bl	801f74e <finite>
 801ea3e:	9000      	str	r0, [sp, #0]
 801ea40:	2800      	cmp	r0, #0
 801ea42:	f040 8081 	bne.w	801eb48 <pow+0x268>
 801ea46:	ec47 6b10 	vmov	d0, r6, r7
 801ea4a:	f000 fe80 	bl	801f74e <finite>
 801ea4e:	2800      	cmp	r0, #0
 801ea50:	d07a      	beq.n	801eb48 <pow+0x268>
 801ea52:	ec45 4b10 	vmov	d0, r4, r5
 801ea56:	f000 fe7a 	bl	801f74e <finite>
 801ea5a:	2800      	cmp	r0, #0
 801ea5c:	d074      	beq.n	801eb48 <pow+0x268>
 801ea5e:	ec53 2b18 	vmov	r2, r3, d8
 801ea62:	ee18 0a10 	vmov	r0, s16
 801ea66:	4619      	mov	r1, r3
 801ea68:	f7e2 f870 	bl	8000b4c <__aeabi_dcmpun>
 801ea6c:	f999 9000 	ldrsb.w	r9, [r9]
 801ea70:	4b4b      	ldr	r3, [pc, #300]	; (801eba0 <pow+0x2c0>)
 801ea72:	b1b0      	cbz	r0, 801eaa2 <pow+0x1c2>
 801ea74:	2201      	movs	r2, #1
 801ea76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ea7a:	9b00      	ldr	r3, [sp, #0]
 801ea7c:	930a      	str	r3, [sp, #40]	; 0x28
 801ea7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801ea82:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801ea86:	f1b9 0f00 	cmp.w	r9, #0
 801ea8a:	d0c4      	beq.n	801ea16 <pow+0x136>
 801ea8c:	4652      	mov	r2, sl
 801ea8e:	465b      	mov	r3, fp
 801ea90:	4650      	mov	r0, sl
 801ea92:	4659      	mov	r1, fp
 801ea94:	f7e1 feea 	bl	800086c <__aeabi_ddiv>
 801ea98:	f1b9 0f02 	cmp.w	r9, #2
 801ea9c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801eaa0:	e7c1      	b.n	801ea26 <pow+0x146>
 801eaa2:	2203      	movs	r2, #3
 801eaa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801eaa8:	900a      	str	r0, [sp, #40]	; 0x28
 801eaaa:	4629      	mov	r1, r5
 801eaac:	4620      	mov	r0, r4
 801eaae:	2200      	movs	r2, #0
 801eab0:	4b3e      	ldr	r3, [pc, #248]	; (801ebac <pow+0x2cc>)
 801eab2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801eab6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801eaba:	f7e1 fdad 	bl	8000618 <__aeabi_dmul>
 801eabe:	4604      	mov	r4, r0
 801eac0:	460d      	mov	r5, r1
 801eac2:	f1b9 0f00 	cmp.w	r9, #0
 801eac6:	d124      	bne.n	801eb12 <pow+0x232>
 801eac8:	4b39      	ldr	r3, [pc, #228]	; (801ebb0 <pow+0x2d0>)
 801eaca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801eace:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ead2:	4630      	mov	r0, r6
 801ead4:	4652      	mov	r2, sl
 801ead6:	465b      	mov	r3, fp
 801ead8:	4639      	mov	r1, r7
 801eada:	f7e2 f80f 	bl	8000afc <__aeabi_dcmplt>
 801eade:	2800      	cmp	r0, #0
 801eae0:	d056      	beq.n	801eb90 <pow+0x2b0>
 801eae2:	ec45 4b10 	vmov	d0, r4, r5
 801eae6:	f000 fe47 	bl	801f778 <rint>
 801eaea:	4622      	mov	r2, r4
 801eaec:	462b      	mov	r3, r5
 801eaee:	ec51 0b10 	vmov	r0, r1, d0
 801eaf2:	f7e1 fff9 	bl	8000ae8 <__aeabi_dcmpeq>
 801eaf6:	b920      	cbnz	r0, 801eb02 <pow+0x222>
 801eaf8:	4b2e      	ldr	r3, [pc, #184]	; (801ebb4 <pow+0x2d4>)
 801eafa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801eafe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801eb02:	f998 3000 	ldrsb.w	r3, [r8]
 801eb06:	2b02      	cmp	r3, #2
 801eb08:	d142      	bne.n	801eb90 <pow+0x2b0>
 801eb0a:	f000 ff3f 	bl	801f98c <__errno>
 801eb0e:	2322      	movs	r3, #34	; 0x22
 801eb10:	e78d      	b.n	801ea2e <pow+0x14e>
 801eb12:	4b29      	ldr	r3, [pc, #164]	; (801ebb8 <pow+0x2d8>)
 801eb14:	2200      	movs	r2, #0
 801eb16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801eb1a:	4630      	mov	r0, r6
 801eb1c:	4652      	mov	r2, sl
 801eb1e:	465b      	mov	r3, fp
 801eb20:	4639      	mov	r1, r7
 801eb22:	f7e1 ffeb 	bl	8000afc <__aeabi_dcmplt>
 801eb26:	2800      	cmp	r0, #0
 801eb28:	d0eb      	beq.n	801eb02 <pow+0x222>
 801eb2a:	ec45 4b10 	vmov	d0, r4, r5
 801eb2e:	f000 fe23 	bl	801f778 <rint>
 801eb32:	4622      	mov	r2, r4
 801eb34:	462b      	mov	r3, r5
 801eb36:	ec51 0b10 	vmov	r0, r1, d0
 801eb3a:	f7e1 ffd5 	bl	8000ae8 <__aeabi_dcmpeq>
 801eb3e:	2800      	cmp	r0, #0
 801eb40:	d1df      	bne.n	801eb02 <pow+0x222>
 801eb42:	2200      	movs	r2, #0
 801eb44:	4b18      	ldr	r3, [pc, #96]	; (801eba8 <pow+0x2c8>)
 801eb46:	e7da      	b.n	801eafe <pow+0x21e>
 801eb48:	2200      	movs	r2, #0
 801eb4a:	2300      	movs	r3, #0
 801eb4c:	ec51 0b18 	vmov	r0, r1, d8
 801eb50:	f7e1 ffca 	bl	8000ae8 <__aeabi_dcmpeq>
 801eb54:	2800      	cmp	r0, #0
 801eb56:	f43f af3a 	beq.w	801e9ce <pow+0xee>
 801eb5a:	ec47 6b10 	vmov	d0, r6, r7
 801eb5e:	f000 fdf6 	bl	801f74e <finite>
 801eb62:	2800      	cmp	r0, #0
 801eb64:	f43f af33 	beq.w	801e9ce <pow+0xee>
 801eb68:	ec45 4b10 	vmov	d0, r4, r5
 801eb6c:	f000 fdef 	bl	801f74e <finite>
 801eb70:	2800      	cmp	r0, #0
 801eb72:	f43f af2c 	beq.w	801e9ce <pow+0xee>
 801eb76:	2304      	movs	r3, #4
 801eb78:	9302      	str	r3, [sp, #8]
 801eb7a:	4b09      	ldr	r3, [pc, #36]	; (801eba0 <pow+0x2c0>)
 801eb7c:	9303      	str	r3, [sp, #12]
 801eb7e:	2300      	movs	r3, #0
 801eb80:	930a      	str	r3, [sp, #40]	; 0x28
 801eb82:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801eb86:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801eb8a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801eb8e:	e7b8      	b.n	801eb02 <pow+0x222>
 801eb90:	a802      	add	r0, sp, #8
 801eb92:	f000 fde4 	bl	801f75e <matherr>
 801eb96:	2800      	cmp	r0, #0
 801eb98:	f47f af11 	bne.w	801e9be <pow+0xde>
 801eb9c:	e7b5      	b.n	801eb0a <pow+0x22a>
 801eb9e:	bf00      	nop
 801eba0:	08023e45 	.word	0x08023e45
 801eba4:	3ff00000 	.word	0x3ff00000
 801eba8:	fff00000 	.word	0xfff00000
 801ebac:	3fe00000 	.word	0x3fe00000
 801ebb0:	47efffff 	.word	0x47efffff
 801ebb4:	c7efffff 	.word	0xc7efffff
 801ebb8:	7ff00000 	.word	0x7ff00000
 801ebbc:	20000254 	.word	0x20000254

0801ebc0 <__ieee754_pow>:
 801ebc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebc4:	b091      	sub	sp, #68	; 0x44
 801ebc6:	ed8d 1b00 	vstr	d1, [sp]
 801ebca:	e9dd 2900 	ldrd	r2, r9, [sp]
 801ebce:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801ebd2:	ea58 0302 	orrs.w	r3, r8, r2
 801ebd6:	ec57 6b10 	vmov	r6, r7, d0
 801ebda:	f000 84be 	beq.w	801f55a <__ieee754_pow+0x99a>
 801ebde:	4b7a      	ldr	r3, [pc, #488]	; (801edc8 <__ieee754_pow+0x208>)
 801ebe0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801ebe4:	429c      	cmp	r4, r3
 801ebe6:	463d      	mov	r5, r7
 801ebe8:	ee10 aa10 	vmov	sl, s0
 801ebec:	dc09      	bgt.n	801ec02 <__ieee754_pow+0x42>
 801ebee:	d103      	bne.n	801ebf8 <__ieee754_pow+0x38>
 801ebf0:	b93e      	cbnz	r6, 801ec02 <__ieee754_pow+0x42>
 801ebf2:	45a0      	cmp	r8, r4
 801ebf4:	dc0d      	bgt.n	801ec12 <__ieee754_pow+0x52>
 801ebf6:	e001      	b.n	801ebfc <__ieee754_pow+0x3c>
 801ebf8:	4598      	cmp	r8, r3
 801ebfa:	dc02      	bgt.n	801ec02 <__ieee754_pow+0x42>
 801ebfc:	4598      	cmp	r8, r3
 801ebfe:	d10e      	bne.n	801ec1e <__ieee754_pow+0x5e>
 801ec00:	b16a      	cbz	r2, 801ec1e <__ieee754_pow+0x5e>
 801ec02:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801ec06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801ec0a:	ea54 030a 	orrs.w	r3, r4, sl
 801ec0e:	f000 84a4 	beq.w	801f55a <__ieee754_pow+0x99a>
 801ec12:	486e      	ldr	r0, [pc, #440]	; (801edcc <__ieee754_pow+0x20c>)
 801ec14:	b011      	add	sp, #68	; 0x44
 801ec16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec1a:	f000 bda5 	b.w	801f768 <nan>
 801ec1e:	2d00      	cmp	r5, #0
 801ec20:	da53      	bge.n	801ecca <__ieee754_pow+0x10a>
 801ec22:	4b6b      	ldr	r3, [pc, #428]	; (801edd0 <__ieee754_pow+0x210>)
 801ec24:	4598      	cmp	r8, r3
 801ec26:	dc4d      	bgt.n	801ecc4 <__ieee754_pow+0x104>
 801ec28:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801ec2c:	4598      	cmp	r8, r3
 801ec2e:	dd4c      	ble.n	801ecca <__ieee754_pow+0x10a>
 801ec30:	ea4f 5328 	mov.w	r3, r8, asr #20
 801ec34:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ec38:	2b14      	cmp	r3, #20
 801ec3a:	dd26      	ble.n	801ec8a <__ieee754_pow+0xca>
 801ec3c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801ec40:	fa22 f103 	lsr.w	r1, r2, r3
 801ec44:	fa01 f303 	lsl.w	r3, r1, r3
 801ec48:	4293      	cmp	r3, r2
 801ec4a:	d13e      	bne.n	801ecca <__ieee754_pow+0x10a>
 801ec4c:	f001 0101 	and.w	r1, r1, #1
 801ec50:	f1c1 0b02 	rsb	fp, r1, #2
 801ec54:	2a00      	cmp	r2, #0
 801ec56:	d15b      	bne.n	801ed10 <__ieee754_pow+0x150>
 801ec58:	4b5b      	ldr	r3, [pc, #364]	; (801edc8 <__ieee754_pow+0x208>)
 801ec5a:	4598      	cmp	r8, r3
 801ec5c:	d124      	bne.n	801eca8 <__ieee754_pow+0xe8>
 801ec5e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801ec62:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801ec66:	ea53 030a 	orrs.w	r3, r3, sl
 801ec6a:	f000 8476 	beq.w	801f55a <__ieee754_pow+0x99a>
 801ec6e:	4b59      	ldr	r3, [pc, #356]	; (801edd4 <__ieee754_pow+0x214>)
 801ec70:	429c      	cmp	r4, r3
 801ec72:	dd2d      	ble.n	801ecd0 <__ieee754_pow+0x110>
 801ec74:	f1b9 0f00 	cmp.w	r9, #0
 801ec78:	f280 8473 	bge.w	801f562 <__ieee754_pow+0x9a2>
 801ec7c:	2000      	movs	r0, #0
 801ec7e:	2100      	movs	r1, #0
 801ec80:	ec41 0b10 	vmov	d0, r0, r1
 801ec84:	b011      	add	sp, #68	; 0x44
 801ec86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec8a:	2a00      	cmp	r2, #0
 801ec8c:	d13e      	bne.n	801ed0c <__ieee754_pow+0x14c>
 801ec8e:	f1c3 0314 	rsb	r3, r3, #20
 801ec92:	fa48 f103 	asr.w	r1, r8, r3
 801ec96:	fa01 f303 	lsl.w	r3, r1, r3
 801ec9a:	4543      	cmp	r3, r8
 801ec9c:	f040 8469 	bne.w	801f572 <__ieee754_pow+0x9b2>
 801eca0:	f001 0101 	and.w	r1, r1, #1
 801eca4:	f1c1 0b02 	rsb	fp, r1, #2
 801eca8:	4b4b      	ldr	r3, [pc, #300]	; (801edd8 <__ieee754_pow+0x218>)
 801ecaa:	4598      	cmp	r8, r3
 801ecac:	d118      	bne.n	801ece0 <__ieee754_pow+0x120>
 801ecae:	f1b9 0f00 	cmp.w	r9, #0
 801ecb2:	f280 845a 	bge.w	801f56a <__ieee754_pow+0x9aa>
 801ecb6:	4948      	ldr	r1, [pc, #288]	; (801edd8 <__ieee754_pow+0x218>)
 801ecb8:	4632      	mov	r2, r6
 801ecba:	463b      	mov	r3, r7
 801ecbc:	2000      	movs	r0, #0
 801ecbe:	f7e1 fdd5 	bl	800086c <__aeabi_ddiv>
 801ecc2:	e7dd      	b.n	801ec80 <__ieee754_pow+0xc0>
 801ecc4:	f04f 0b02 	mov.w	fp, #2
 801ecc8:	e7c4      	b.n	801ec54 <__ieee754_pow+0x94>
 801ecca:	f04f 0b00 	mov.w	fp, #0
 801ecce:	e7c1      	b.n	801ec54 <__ieee754_pow+0x94>
 801ecd0:	f1b9 0f00 	cmp.w	r9, #0
 801ecd4:	dad2      	bge.n	801ec7c <__ieee754_pow+0xbc>
 801ecd6:	e9dd 0300 	ldrd	r0, r3, [sp]
 801ecda:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801ecde:	e7cf      	b.n	801ec80 <__ieee754_pow+0xc0>
 801ece0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801ece4:	d106      	bne.n	801ecf4 <__ieee754_pow+0x134>
 801ece6:	4632      	mov	r2, r6
 801ece8:	463b      	mov	r3, r7
 801ecea:	4610      	mov	r0, r2
 801ecec:	4619      	mov	r1, r3
 801ecee:	f7e1 fc93 	bl	8000618 <__aeabi_dmul>
 801ecf2:	e7c5      	b.n	801ec80 <__ieee754_pow+0xc0>
 801ecf4:	4b39      	ldr	r3, [pc, #228]	; (801eddc <__ieee754_pow+0x21c>)
 801ecf6:	4599      	cmp	r9, r3
 801ecf8:	d10a      	bne.n	801ed10 <__ieee754_pow+0x150>
 801ecfa:	2d00      	cmp	r5, #0
 801ecfc:	db08      	blt.n	801ed10 <__ieee754_pow+0x150>
 801ecfe:	ec47 6b10 	vmov	d0, r6, r7
 801ed02:	b011      	add	sp, #68	; 0x44
 801ed04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed08:	f000 bc68 	b.w	801f5dc <__ieee754_sqrt>
 801ed0c:	f04f 0b00 	mov.w	fp, #0
 801ed10:	ec47 6b10 	vmov	d0, r6, r7
 801ed14:	f000 fd12 	bl	801f73c <fabs>
 801ed18:	ec51 0b10 	vmov	r0, r1, d0
 801ed1c:	f1ba 0f00 	cmp.w	sl, #0
 801ed20:	d127      	bne.n	801ed72 <__ieee754_pow+0x1b2>
 801ed22:	b124      	cbz	r4, 801ed2e <__ieee754_pow+0x16e>
 801ed24:	4b2c      	ldr	r3, [pc, #176]	; (801edd8 <__ieee754_pow+0x218>)
 801ed26:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801ed2a:	429a      	cmp	r2, r3
 801ed2c:	d121      	bne.n	801ed72 <__ieee754_pow+0x1b2>
 801ed2e:	f1b9 0f00 	cmp.w	r9, #0
 801ed32:	da05      	bge.n	801ed40 <__ieee754_pow+0x180>
 801ed34:	4602      	mov	r2, r0
 801ed36:	460b      	mov	r3, r1
 801ed38:	2000      	movs	r0, #0
 801ed3a:	4927      	ldr	r1, [pc, #156]	; (801edd8 <__ieee754_pow+0x218>)
 801ed3c:	f7e1 fd96 	bl	800086c <__aeabi_ddiv>
 801ed40:	2d00      	cmp	r5, #0
 801ed42:	da9d      	bge.n	801ec80 <__ieee754_pow+0xc0>
 801ed44:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801ed48:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801ed4c:	ea54 030b 	orrs.w	r3, r4, fp
 801ed50:	d108      	bne.n	801ed64 <__ieee754_pow+0x1a4>
 801ed52:	4602      	mov	r2, r0
 801ed54:	460b      	mov	r3, r1
 801ed56:	4610      	mov	r0, r2
 801ed58:	4619      	mov	r1, r3
 801ed5a:	f7e1 faa5 	bl	80002a8 <__aeabi_dsub>
 801ed5e:	4602      	mov	r2, r0
 801ed60:	460b      	mov	r3, r1
 801ed62:	e7ac      	b.n	801ecbe <__ieee754_pow+0xfe>
 801ed64:	f1bb 0f01 	cmp.w	fp, #1
 801ed68:	d18a      	bne.n	801ec80 <__ieee754_pow+0xc0>
 801ed6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ed6e:	4619      	mov	r1, r3
 801ed70:	e786      	b.n	801ec80 <__ieee754_pow+0xc0>
 801ed72:	0fed      	lsrs	r5, r5, #31
 801ed74:	1e6b      	subs	r3, r5, #1
 801ed76:	930d      	str	r3, [sp, #52]	; 0x34
 801ed78:	ea5b 0303 	orrs.w	r3, fp, r3
 801ed7c:	d102      	bne.n	801ed84 <__ieee754_pow+0x1c4>
 801ed7e:	4632      	mov	r2, r6
 801ed80:	463b      	mov	r3, r7
 801ed82:	e7e8      	b.n	801ed56 <__ieee754_pow+0x196>
 801ed84:	4b16      	ldr	r3, [pc, #88]	; (801ede0 <__ieee754_pow+0x220>)
 801ed86:	4598      	cmp	r8, r3
 801ed88:	f340 80fe 	ble.w	801ef88 <__ieee754_pow+0x3c8>
 801ed8c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801ed90:	4598      	cmp	r8, r3
 801ed92:	dd0a      	ble.n	801edaa <__ieee754_pow+0x1ea>
 801ed94:	4b0f      	ldr	r3, [pc, #60]	; (801edd4 <__ieee754_pow+0x214>)
 801ed96:	429c      	cmp	r4, r3
 801ed98:	dc0d      	bgt.n	801edb6 <__ieee754_pow+0x1f6>
 801ed9a:	f1b9 0f00 	cmp.w	r9, #0
 801ed9e:	f6bf af6d 	bge.w	801ec7c <__ieee754_pow+0xbc>
 801eda2:	a307      	add	r3, pc, #28	; (adr r3, 801edc0 <__ieee754_pow+0x200>)
 801eda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eda8:	e79f      	b.n	801ecea <__ieee754_pow+0x12a>
 801edaa:	4b0e      	ldr	r3, [pc, #56]	; (801ede4 <__ieee754_pow+0x224>)
 801edac:	429c      	cmp	r4, r3
 801edae:	ddf4      	ble.n	801ed9a <__ieee754_pow+0x1da>
 801edb0:	4b09      	ldr	r3, [pc, #36]	; (801edd8 <__ieee754_pow+0x218>)
 801edb2:	429c      	cmp	r4, r3
 801edb4:	dd18      	ble.n	801ede8 <__ieee754_pow+0x228>
 801edb6:	f1b9 0f00 	cmp.w	r9, #0
 801edba:	dcf2      	bgt.n	801eda2 <__ieee754_pow+0x1e2>
 801edbc:	e75e      	b.n	801ec7c <__ieee754_pow+0xbc>
 801edbe:	bf00      	nop
 801edc0:	8800759c 	.word	0x8800759c
 801edc4:	7e37e43c 	.word	0x7e37e43c
 801edc8:	7ff00000 	.word	0x7ff00000
 801edcc:	08023e39 	.word	0x08023e39
 801edd0:	433fffff 	.word	0x433fffff
 801edd4:	3fefffff 	.word	0x3fefffff
 801edd8:	3ff00000 	.word	0x3ff00000
 801eddc:	3fe00000 	.word	0x3fe00000
 801ede0:	41e00000 	.word	0x41e00000
 801ede4:	3feffffe 	.word	0x3feffffe
 801ede8:	2200      	movs	r2, #0
 801edea:	4b63      	ldr	r3, [pc, #396]	; (801ef78 <__ieee754_pow+0x3b8>)
 801edec:	f7e1 fa5c 	bl	80002a8 <__aeabi_dsub>
 801edf0:	a355      	add	r3, pc, #340	; (adr r3, 801ef48 <__ieee754_pow+0x388>)
 801edf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edf6:	4604      	mov	r4, r0
 801edf8:	460d      	mov	r5, r1
 801edfa:	f7e1 fc0d 	bl	8000618 <__aeabi_dmul>
 801edfe:	a354      	add	r3, pc, #336	; (adr r3, 801ef50 <__ieee754_pow+0x390>)
 801ee00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee04:	4606      	mov	r6, r0
 801ee06:	460f      	mov	r7, r1
 801ee08:	4620      	mov	r0, r4
 801ee0a:	4629      	mov	r1, r5
 801ee0c:	f7e1 fc04 	bl	8000618 <__aeabi_dmul>
 801ee10:	2200      	movs	r2, #0
 801ee12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ee16:	4b59      	ldr	r3, [pc, #356]	; (801ef7c <__ieee754_pow+0x3bc>)
 801ee18:	4620      	mov	r0, r4
 801ee1a:	4629      	mov	r1, r5
 801ee1c:	f7e1 fbfc 	bl	8000618 <__aeabi_dmul>
 801ee20:	4602      	mov	r2, r0
 801ee22:	460b      	mov	r3, r1
 801ee24:	a14c      	add	r1, pc, #304	; (adr r1, 801ef58 <__ieee754_pow+0x398>)
 801ee26:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ee2a:	f7e1 fa3d 	bl	80002a8 <__aeabi_dsub>
 801ee2e:	4622      	mov	r2, r4
 801ee30:	462b      	mov	r3, r5
 801ee32:	f7e1 fbf1 	bl	8000618 <__aeabi_dmul>
 801ee36:	4602      	mov	r2, r0
 801ee38:	460b      	mov	r3, r1
 801ee3a:	2000      	movs	r0, #0
 801ee3c:	4950      	ldr	r1, [pc, #320]	; (801ef80 <__ieee754_pow+0x3c0>)
 801ee3e:	f7e1 fa33 	bl	80002a8 <__aeabi_dsub>
 801ee42:	4622      	mov	r2, r4
 801ee44:	462b      	mov	r3, r5
 801ee46:	4680      	mov	r8, r0
 801ee48:	4689      	mov	r9, r1
 801ee4a:	4620      	mov	r0, r4
 801ee4c:	4629      	mov	r1, r5
 801ee4e:	f7e1 fbe3 	bl	8000618 <__aeabi_dmul>
 801ee52:	4602      	mov	r2, r0
 801ee54:	460b      	mov	r3, r1
 801ee56:	4640      	mov	r0, r8
 801ee58:	4649      	mov	r1, r9
 801ee5a:	f7e1 fbdd 	bl	8000618 <__aeabi_dmul>
 801ee5e:	a340      	add	r3, pc, #256	; (adr r3, 801ef60 <__ieee754_pow+0x3a0>)
 801ee60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee64:	f7e1 fbd8 	bl	8000618 <__aeabi_dmul>
 801ee68:	4602      	mov	r2, r0
 801ee6a:	460b      	mov	r3, r1
 801ee6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ee70:	f7e1 fa1a 	bl	80002a8 <__aeabi_dsub>
 801ee74:	4602      	mov	r2, r0
 801ee76:	460b      	mov	r3, r1
 801ee78:	4604      	mov	r4, r0
 801ee7a:	460d      	mov	r5, r1
 801ee7c:	4630      	mov	r0, r6
 801ee7e:	4639      	mov	r1, r7
 801ee80:	f7e1 fa14 	bl	80002ac <__adddf3>
 801ee84:	2000      	movs	r0, #0
 801ee86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ee8a:	4632      	mov	r2, r6
 801ee8c:	463b      	mov	r3, r7
 801ee8e:	f7e1 fa0b 	bl	80002a8 <__aeabi_dsub>
 801ee92:	4602      	mov	r2, r0
 801ee94:	460b      	mov	r3, r1
 801ee96:	4620      	mov	r0, r4
 801ee98:	4629      	mov	r1, r5
 801ee9a:	f7e1 fa05 	bl	80002a8 <__aeabi_dsub>
 801ee9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801eea0:	f10b 33ff 	add.w	r3, fp, #4294967295
 801eea4:	4313      	orrs	r3, r2
 801eea6:	4606      	mov	r6, r0
 801eea8:	460f      	mov	r7, r1
 801eeaa:	f040 81eb 	bne.w	801f284 <__ieee754_pow+0x6c4>
 801eeae:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801ef68 <__ieee754_pow+0x3a8>
 801eeb2:	e9dd 4500 	ldrd	r4, r5, [sp]
 801eeb6:	2400      	movs	r4, #0
 801eeb8:	4622      	mov	r2, r4
 801eeba:	462b      	mov	r3, r5
 801eebc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801eec0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801eec4:	f7e1 f9f0 	bl	80002a8 <__aeabi_dsub>
 801eec8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801eecc:	f7e1 fba4 	bl	8000618 <__aeabi_dmul>
 801eed0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801eed4:	4680      	mov	r8, r0
 801eed6:	4689      	mov	r9, r1
 801eed8:	4630      	mov	r0, r6
 801eeda:	4639      	mov	r1, r7
 801eedc:	f7e1 fb9c 	bl	8000618 <__aeabi_dmul>
 801eee0:	4602      	mov	r2, r0
 801eee2:	460b      	mov	r3, r1
 801eee4:	4640      	mov	r0, r8
 801eee6:	4649      	mov	r1, r9
 801eee8:	f7e1 f9e0 	bl	80002ac <__adddf3>
 801eeec:	4622      	mov	r2, r4
 801eeee:	462b      	mov	r3, r5
 801eef0:	4680      	mov	r8, r0
 801eef2:	4689      	mov	r9, r1
 801eef4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801eef8:	f7e1 fb8e 	bl	8000618 <__aeabi_dmul>
 801eefc:	460b      	mov	r3, r1
 801eefe:	4604      	mov	r4, r0
 801ef00:	460d      	mov	r5, r1
 801ef02:	4602      	mov	r2, r0
 801ef04:	4649      	mov	r1, r9
 801ef06:	4640      	mov	r0, r8
 801ef08:	e9cd 4500 	strd	r4, r5, [sp]
 801ef0c:	f7e1 f9ce 	bl	80002ac <__adddf3>
 801ef10:	4b1c      	ldr	r3, [pc, #112]	; (801ef84 <__ieee754_pow+0x3c4>)
 801ef12:	4299      	cmp	r1, r3
 801ef14:	4606      	mov	r6, r0
 801ef16:	460f      	mov	r7, r1
 801ef18:	468b      	mov	fp, r1
 801ef1a:	f340 82f7 	ble.w	801f50c <__ieee754_pow+0x94c>
 801ef1e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801ef22:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801ef26:	4303      	orrs	r3, r0
 801ef28:	f000 81ea 	beq.w	801f300 <__ieee754_pow+0x740>
 801ef2c:	a310      	add	r3, pc, #64	; (adr r3, 801ef70 <__ieee754_pow+0x3b0>)
 801ef2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ef36:	f7e1 fb6f 	bl	8000618 <__aeabi_dmul>
 801ef3a:	a30d      	add	r3, pc, #52	; (adr r3, 801ef70 <__ieee754_pow+0x3b0>)
 801ef3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef40:	e6d5      	b.n	801ecee <__ieee754_pow+0x12e>
 801ef42:	bf00      	nop
 801ef44:	f3af 8000 	nop.w
 801ef48:	60000000 	.word	0x60000000
 801ef4c:	3ff71547 	.word	0x3ff71547
 801ef50:	f85ddf44 	.word	0xf85ddf44
 801ef54:	3e54ae0b 	.word	0x3e54ae0b
 801ef58:	55555555 	.word	0x55555555
 801ef5c:	3fd55555 	.word	0x3fd55555
 801ef60:	652b82fe 	.word	0x652b82fe
 801ef64:	3ff71547 	.word	0x3ff71547
 801ef68:	00000000 	.word	0x00000000
 801ef6c:	bff00000 	.word	0xbff00000
 801ef70:	8800759c 	.word	0x8800759c
 801ef74:	7e37e43c 	.word	0x7e37e43c
 801ef78:	3ff00000 	.word	0x3ff00000
 801ef7c:	3fd00000 	.word	0x3fd00000
 801ef80:	3fe00000 	.word	0x3fe00000
 801ef84:	408fffff 	.word	0x408fffff
 801ef88:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801ef8c:	f04f 0200 	mov.w	r2, #0
 801ef90:	da05      	bge.n	801ef9e <__ieee754_pow+0x3de>
 801ef92:	4bd3      	ldr	r3, [pc, #844]	; (801f2e0 <__ieee754_pow+0x720>)
 801ef94:	f7e1 fb40 	bl	8000618 <__aeabi_dmul>
 801ef98:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801ef9c:	460c      	mov	r4, r1
 801ef9e:	1523      	asrs	r3, r4, #20
 801efa0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801efa4:	4413      	add	r3, r2
 801efa6:	9309      	str	r3, [sp, #36]	; 0x24
 801efa8:	4bce      	ldr	r3, [pc, #824]	; (801f2e4 <__ieee754_pow+0x724>)
 801efaa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801efae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801efb2:	429c      	cmp	r4, r3
 801efb4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801efb8:	dd08      	ble.n	801efcc <__ieee754_pow+0x40c>
 801efba:	4bcb      	ldr	r3, [pc, #812]	; (801f2e8 <__ieee754_pow+0x728>)
 801efbc:	429c      	cmp	r4, r3
 801efbe:	f340 815e 	ble.w	801f27e <__ieee754_pow+0x6be>
 801efc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801efc4:	3301      	adds	r3, #1
 801efc6:	9309      	str	r3, [sp, #36]	; 0x24
 801efc8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801efcc:	f04f 0a00 	mov.w	sl, #0
 801efd0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801efd4:	930c      	str	r3, [sp, #48]	; 0x30
 801efd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801efd8:	4bc4      	ldr	r3, [pc, #784]	; (801f2ec <__ieee754_pow+0x72c>)
 801efda:	4413      	add	r3, r2
 801efdc:	ed93 7b00 	vldr	d7, [r3]
 801efe0:	4629      	mov	r1, r5
 801efe2:	ec53 2b17 	vmov	r2, r3, d7
 801efe6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801efea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801efee:	f7e1 f95b 	bl	80002a8 <__aeabi_dsub>
 801eff2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801eff6:	4606      	mov	r6, r0
 801eff8:	460f      	mov	r7, r1
 801effa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801effe:	f7e1 f955 	bl	80002ac <__adddf3>
 801f002:	4602      	mov	r2, r0
 801f004:	460b      	mov	r3, r1
 801f006:	2000      	movs	r0, #0
 801f008:	49b9      	ldr	r1, [pc, #740]	; (801f2f0 <__ieee754_pow+0x730>)
 801f00a:	f7e1 fc2f 	bl	800086c <__aeabi_ddiv>
 801f00e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801f012:	4602      	mov	r2, r0
 801f014:	460b      	mov	r3, r1
 801f016:	4630      	mov	r0, r6
 801f018:	4639      	mov	r1, r7
 801f01a:	f7e1 fafd 	bl	8000618 <__aeabi_dmul>
 801f01e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f022:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801f026:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801f02a:	2300      	movs	r3, #0
 801f02c:	9302      	str	r3, [sp, #8]
 801f02e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801f032:	106d      	asrs	r5, r5, #1
 801f034:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801f038:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801f03c:	2200      	movs	r2, #0
 801f03e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801f042:	4640      	mov	r0, r8
 801f044:	4649      	mov	r1, r9
 801f046:	4614      	mov	r4, r2
 801f048:	461d      	mov	r5, r3
 801f04a:	f7e1 fae5 	bl	8000618 <__aeabi_dmul>
 801f04e:	4602      	mov	r2, r0
 801f050:	460b      	mov	r3, r1
 801f052:	4630      	mov	r0, r6
 801f054:	4639      	mov	r1, r7
 801f056:	f7e1 f927 	bl	80002a8 <__aeabi_dsub>
 801f05a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f05e:	4606      	mov	r6, r0
 801f060:	460f      	mov	r7, r1
 801f062:	4620      	mov	r0, r4
 801f064:	4629      	mov	r1, r5
 801f066:	f7e1 f91f 	bl	80002a8 <__aeabi_dsub>
 801f06a:	4602      	mov	r2, r0
 801f06c:	460b      	mov	r3, r1
 801f06e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f072:	f7e1 f919 	bl	80002a8 <__aeabi_dsub>
 801f076:	4642      	mov	r2, r8
 801f078:	464b      	mov	r3, r9
 801f07a:	f7e1 facd 	bl	8000618 <__aeabi_dmul>
 801f07e:	4602      	mov	r2, r0
 801f080:	460b      	mov	r3, r1
 801f082:	4630      	mov	r0, r6
 801f084:	4639      	mov	r1, r7
 801f086:	f7e1 f90f 	bl	80002a8 <__aeabi_dsub>
 801f08a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801f08e:	f7e1 fac3 	bl	8000618 <__aeabi_dmul>
 801f092:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f096:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801f09a:	4610      	mov	r0, r2
 801f09c:	4619      	mov	r1, r3
 801f09e:	f7e1 fabb 	bl	8000618 <__aeabi_dmul>
 801f0a2:	a37b      	add	r3, pc, #492	; (adr r3, 801f290 <__ieee754_pow+0x6d0>)
 801f0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0a8:	4604      	mov	r4, r0
 801f0aa:	460d      	mov	r5, r1
 801f0ac:	f7e1 fab4 	bl	8000618 <__aeabi_dmul>
 801f0b0:	a379      	add	r3, pc, #484	; (adr r3, 801f298 <__ieee754_pow+0x6d8>)
 801f0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0b6:	f7e1 f8f9 	bl	80002ac <__adddf3>
 801f0ba:	4622      	mov	r2, r4
 801f0bc:	462b      	mov	r3, r5
 801f0be:	f7e1 faab 	bl	8000618 <__aeabi_dmul>
 801f0c2:	a377      	add	r3, pc, #476	; (adr r3, 801f2a0 <__ieee754_pow+0x6e0>)
 801f0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0c8:	f7e1 f8f0 	bl	80002ac <__adddf3>
 801f0cc:	4622      	mov	r2, r4
 801f0ce:	462b      	mov	r3, r5
 801f0d0:	f7e1 faa2 	bl	8000618 <__aeabi_dmul>
 801f0d4:	a374      	add	r3, pc, #464	; (adr r3, 801f2a8 <__ieee754_pow+0x6e8>)
 801f0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0da:	f7e1 f8e7 	bl	80002ac <__adddf3>
 801f0de:	4622      	mov	r2, r4
 801f0e0:	462b      	mov	r3, r5
 801f0e2:	f7e1 fa99 	bl	8000618 <__aeabi_dmul>
 801f0e6:	a372      	add	r3, pc, #456	; (adr r3, 801f2b0 <__ieee754_pow+0x6f0>)
 801f0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0ec:	f7e1 f8de 	bl	80002ac <__adddf3>
 801f0f0:	4622      	mov	r2, r4
 801f0f2:	462b      	mov	r3, r5
 801f0f4:	f7e1 fa90 	bl	8000618 <__aeabi_dmul>
 801f0f8:	a36f      	add	r3, pc, #444	; (adr r3, 801f2b8 <__ieee754_pow+0x6f8>)
 801f0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0fe:	f7e1 f8d5 	bl	80002ac <__adddf3>
 801f102:	4622      	mov	r2, r4
 801f104:	4606      	mov	r6, r0
 801f106:	460f      	mov	r7, r1
 801f108:	462b      	mov	r3, r5
 801f10a:	4620      	mov	r0, r4
 801f10c:	4629      	mov	r1, r5
 801f10e:	f7e1 fa83 	bl	8000618 <__aeabi_dmul>
 801f112:	4602      	mov	r2, r0
 801f114:	460b      	mov	r3, r1
 801f116:	4630      	mov	r0, r6
 801f118:	4639      	mov	r1, r7
 801f11a:	f7e1 fa7d 	bl	8000618 <__aeabi_dmul>
 801f11e:	4642      	mov	r2, r8
 801f120:	4604      	mov	r4, r0
 801f122:	460d      	mov	r5, r1
 801f124:	464b      	mov	r3, r9
 801f126:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f12a:	f7e1 f8bf 	bl	80002ac <__adddf3>
 801f12e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f132:	f7e1 fa71 	bl	8000618 <__aeabi_dmul>
 801f136:	4622      	mov	r2, r4
 801f138:	462b      	mov	r3, r5
 801f13a:	f7e1 f8b7 	bl	80002ac <__adddf3>
 801f13e:	4642      	mov	r2, r8
 801f140:	4606      	mov	r6, r0
 801f142:	460f      	mov	r7, r1
 801f144:	464b      	mov	r3, r9
 801f146:	4640      	mov	r0, r8
 801f148:	4649      	mov	r1, r9
 801f14a:	f7e1 fa65 	bl	8000618 <__aeabi_dmul>
 801f14e:	2200      	movs	r2, #0
 801f150:	4b68      	ldr	r3, [pc, #416]	; (801f2f4 <__ieee754_pow+0x734>)
 801f152:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801f156:	f7e1 f8a9 	bl	80002ac <__adddf3>
 801f15a:	4632      	mov	r2, r6
 801f15c:	463b      	mov	r3, r7
 801f15e:	f7e1 f8a5 	bl	80002ac <__adddf3>
 801f162:	9802      	ldr	r0, [sp, #8]
 801f164:	460d      	mov	r5, r1
 801f166:	4604      	mov	r4, r0
 801f168:	4602      	mov	r2, r0
 801f16a:	460b      	mov	r3, r1
 801f16c:	4640      	mov	r0, r8
 801f16e:	4649      	mov	r1, r9
 801f170:	f7e1 fa52 	bl	8000618 <__aeabi_dmul>
 801f174:	2200      	movs	r2, #0
 801f176:	4680      	mov	r8, r0
 801f178:	4689      	mov	r9, r1
 801f17a:	4b5e      	ldr	r3, [pc, #376]	; (801f2f4 <__ieee754_pow+0x734>)
 801f17c:	4620      	mov	r0, r4
 801f17e:	4629      	mov	r1, r5
 801f180:	f7e1 f892 	bl	80002a8 <__aeabi_dsub>
 801f184:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801f188:	f7e1 f88e 	bl	80002a8 <__aeabi_dsub>
 801f18c:	4602      	mov	r2, r0
 801f18e:	460b      	mov	r3, r1
 801f190:	4630      	mov	r0, r6
 801f192:	4639      	mov	r1, r7
 801f194:	f7e1 f888 	bl	80002a8 <__aeabi_dsub>
 801f198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f19c:	f7e1 fa3c 	bl	8000618 <__aeabi_dmul>
 801f1a0:	4622      	mov	r2, r4
 801f1a2:	4606      	mov	r6, r0
 801f1a4:	460f      	mov	r7, r1
 801f1a6:	462b      	mov	r3, r5
 801f1a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f1ac:	f7e1 fa34 	bl	8000618 <__aeabi_dmul>
 801f1b0:	4602      	mov	r2, r0
 801f1b2:	460b      	mov	r3, r1
 801f1b4:	4630      	mov	r0, r6
 801f1b6:	4639      	mov	r1, r7
 801f1b8:	f7e1 f878 	bl	80002ac <__adddf3>
 801f1bc:	4606      	mov	r6, r0
 801f1be:	460f      	mov	r7, r1
 801f1c0:	4602      	mov	r2, r0
 801f1c2:	460b      	mov	r3, r1
 801f1c4:	4640      	mov	r0, r8
 801f1c6:	4649      	mov	r1, r9
 801f1c8:	f7e1 f870 	bl	80002ac <__adddf3>
 801f1cc:	9802      	ldr	r0, [sp, #8]
 801f1ce:	a33c      	add	r3, pc, #240	; (adr r3, 801f2c0 <__ieee754_pow+0x700>)
 801f1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1d4:	4604      	mov	r4, r0
 801f1d6:	460d      	mov	r5, r1
 801f1d8:	f7e1 fa1e 	bl	8000618 <__aeabi_dmul>
 801f1dc:	4642      	mov	r2, r8
 801f1de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801f1e2:	464b      	mov	r3, r9
 801f1e4:	4620      	mov	r0, r4
 801f1e6:	4629      	mov	r1, r5
 801f1e8:	f7e1 f85e 	bl	80002a8 <__aeabi_dsub>
 801f1ec:	4602      	mov	r2, r0
 801f1ee:	460b      	mov	r3, r1
 801f1f0:	4630      	mov	r0, r6
 801f1f2:	4639      	mov	r1, r7
 801f1f4:	f7e1 f858 	bl	80002a8 <__aeabi_dsub>
 801f1f8:	a333      	add	r3, pc, #204	; (adr r3, 801f2c8 <__ieee754_pow+0x708>)
 801f1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1fe:	f7e1 fa0b 	bl	8000618 <__aeabi_dmul>
 801f202:	a333      	add	r3, pc, #204	; (adr r3, 801f2d0 <__ieee754_pow+0x710>)
 801f204:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f208:	4606      	mov	r6, r0
 801f20a:	460f      	mov	r7, r1
 801f20c:	4620      	mov	r0, r4
 801f20e:	4629      	mov	r1, r5
 801f210:	f7e1 fa02 	bl	8000618 <__aeabi_dmul>
 801f214:	4602      	mov	r2, r0
 801f216:	460b      	mov	r3, r1
 801f218:	4630      	mov	r0, r6
 801f21a:	4639      	mov	r1, r7
 801f21c:	f7e1 f846 	bl	80002ac <__adddf3>
 801f220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f222:	4b35      	ldr	r3, [pc, #212]	; (801f2f8 <__ieee754_pow+0x738>)
 801f224:	4413      	add	r3, r2
 801f226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f22a:	f7e1 f83f 	bl	80002ac <__adddf3>
 801f22e:	4604      	mov	r4, r0
 801f230:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f232:	460d      	mov	r5, r1
 801f234:	f7e1 f986 	bl	8000544 <__aeabi_i2d>
 801f238:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f23a:	4b30      	ldr	r3, [pc, #192]	; (801f2fc <__ieee754_pow+0x73c>)
 801f23c:	4413      	add	r3, r2
 801f23e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f242:	4606      	mov	r6, r0
 801f244:	460f      	mov	r7, r1
 801f246:	4622      	mov	r2, r4
 801f248:	462b      	mov	r3, r5
 801f24a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f24e:	f7e1 f82d 	bl	80002ac <__adddf3>
 801f252:	4642      	mov	r2, r8
 801f254:	464b      	mov	r3, r9
 801f256:	f7e1 f829 	bl	80002ac <__adddf3>
 801f25a:	4632      	mov	r2, r6
 801f25c:	463b      	mov	r3, r7
 801f25e:	f7e1 f825 	bl	80002ac <__adddf3>
 801f262:	9802      	ldr	r0, [sp, #8]
 801f264:	4632      	mov	r2, r6
 801f266:	463b      	mov	r3, r7
 801f268:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f26c:	f7e1 f81c 	bl	80002a8 <__aeabi_dsub>
 801f270:	4642      	mov	r2, r8
 801f272:	464b      	mov	r3, r9
 801f274:	f7e1 f818 	bl	80002a8 <__aeabi_dsub>
 801f278:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f27c:	e607      	b.n	801ee8e <__ieee754_pow+0x2ce>
 801f27e:	f04f 0a01 	mov.w	sl, #1
 801f282:	e6a5      	b.n	801efd0 <__ieee754_pow+0x410>
 801f284:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801f2d8 <__ieee754_pow+0x718>
 801f288:	e613      	b.n	801eeb2 <__ieee754_pow+0x2f2>
 801f28a:	bf00      	nop
 801f28c:	f3af 8000 	nop.w
 801f290:	4a454eef 	.word	0x4a454eef
 801f294:	3fca7e28 	.word	0x3fca7e28
 801f298:	93c9db65 	.word	0x93c9db65
 801f29c:	3fcd864a 	.word	0x3fcd864a
 801f2a0:	a91d4101 	.word	0xa91d4101
 801f2a4:	3fd17460 	.word	0x3fd17460
 801f2a8:	518f264d 	.word	0x518f264d
 801f2ac:	3fd55555 	.word	0x3fd55555
 801f2b0:	db6fabff 	.word	0xdb6fabff
 801f2b4:	3fdb6db6 	.word	0x3fdb6db6
 801f2b8:	33333303 	.word	0x33333303
 801f2bc:	3fe33333 	.word	0x3fe33333
 801f2c0:	e0000000 	.word	0xe0000000
 801f2c4:	3feec709 	.word	0x3feec709
 801f2c8:	dc3a03fd 	.word	0xdc3a03fd
 801f2cc:	3feec709 	.word	0x3feec709
 801f2d0:	145b01f5 	.word	0x145b01f5
 801f2d4:	be3e2fe0 	.word	0xbe3e2fe0
 801f2d8:	00000000 	.word	0x00000000
 801f2dc:	3ff00000 	.word	0x3ff00000
 801f2e0:	43400000 	.word	0x43400000
 801f2e4:	0003988e 	.word	0x0003988e
 801f2e8:	000bb679 	.word	0x000bb679
 801f2ec:	08023e50 	.word	0x08023e50
 801f2f0:	3ff00000 	.word	0x3ff00000
 801f2f4:	40080000 	.word	0x40080000
 801f2f8:	08023e70 	.word	0x08023e70
 801f2fc:	08023e60 	.word	0x08023e60
 801f300:	a3b4      	add	r3, pc, #720	; (adr r3, 801f5d4 <__ieee754_pow+0xa14>)
 801f302:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f306:	4640      	mov	r0, r8
 801f308:	4649      	mov	r1, r9
 801f30a:	f7e0 ffcf 	bl	80002ac <__adddf3>
 801f30e:	4622      	mov	r2, r4
 801f310:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f314:	462b      	mov	r3, r5
 801f316:	4630      	mov	r0, r6
 801f318:	4639      	mov	r1, r7
 801f31a:	f7e0 ffc5 	bl	80002a8 <__aeabi_dsub>
 801f31e:	4602      	mov	r2, r0
 801f320:	460b      	mov	r3, r1
 801f322:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f326:	f7e1 fc07 	bl	8000b38 <__aeabi_dcmpgt>
 801f32a:	2800      	cmp	r0, #0
 801f32c:	f47f adfe 	bne.w	801ef2c <__ieee754_pow+0x36c>
 801f330:	4aa3      	ldr	r2, [pc, #652]	; (801f5c0 <__ieee754_pow+0xa00>)
 801f332:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801f336:	4293      	cmp	r3, r2
 801f338:	f340 810a 	ble.w	801f550 <__ieee754_pow+0x990>
 801f33c:	151b      	asrs	r3, r3, #20
 801f33e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801f342:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801f346:	fa4a f303 	asr.w	r3, sl, r3
 801f34a:	445b      	add	r3, fp
 801f34c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801f350:	4e9c      	ldr	r6, [pc, #624]	; (801f5c4 <__ieee754_pow+0xa04>)
 801f352:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801f356:	4116      	asrs	r6, r2
 801f358:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801f35c:	2000      	movs	r0, #0
 801f35e:	ea23 0106 	bic.w	r1, r3, r6
 801f362:	f1c2 0214 	rsb	r2, r2, #20
 801f366:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801f36a:	fa4a fa02 	asr.w	sl, sl, r2
 801f36e:	f1bb 0f00 	cmp.w	fp, #0
 801f372:	4602      	mov	r2, r0
 801f374:	460b      	mov	r3, r1
 801f376:	4620      	mov	r0, r4
 801f378:	4629      	mov	r1, r5
 801f37a:	bfb8      	it	lt
 801f37c:	f1ca 0a00 	rsblt	sl, sl, #0
 801f380:	f7e0 ff92 	bl	80002a8 <__aeabi_dsub>
 801f384:	e9cd 0100 	strd	r0, r1, [sp]
 801f388:	4642      	mov	r2, r8
 801f38a:	464b      	mov	r3, r9
 801f38c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f390:	f7e0 ff8c 	bl	80002ac <__adddf3>
 801f394:	2000      	movs	r0, #0
 801f396:	a378      	add	r3, pc, #480	; (adr r3, 801f578 <__ieee754_pow+0x9b8>)
 801f398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f39c:	4604      	mov	r4, r0
 801f39e:	460d      	mov	r5, r1
 801f3a0:	f7e1 f93a 	bl	8000618 <__aeabi_dmul>
 801f3a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f3a8:	4606      	mov	r6, r0
 801f3aa:	460f      	mov	r7, r1
 801f3ac:	4620      	mov	r0, r4
 801f3ae:	4629      	mov	r1, r5
 801f3b0:	f7e0 ff7a 	bl	80002a8 <__aeabi_dsub>
 801f3b4:	4602      	mov	r2, r0
 801f3b6:	460b      	mov	r3, r1
 801f3b8:	4640      	mov	r0, r8
 801f3ba:	4649      	mov	r1, r9
 801f3bc:	f7e0 ff74 	bl	80002a8 <__aeabi_dsub>
 801f3c0:	a36f      	add	r3, pc, #444	; (adr r3, 801f580 <__ieee754_pow+0x9c0>)
 801f3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3c6:	f7e1 f927 	bl	8000618 <__aeabi_dmul>
 801f3ca:	a36f      	add	r3, pc, #444	; (adr r3, 801f588 <__ieee754_pow+0x9c8>)
 801f3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3d0:	4680      	mov	r8, r0
 801f3d2:	4689      	mov	r9, r1
 801f3d4:	4620      	mov	r0, r4
 801f3d6:	4629      	mov	r1, r5
 801f3d8:	f7e1 f91e 	bl	8000618 <__aeabi_dmul>
 801f3dc:	4602      	mov	r2, r0
 801f3de:	460b      	mov	r3, r1
 801f3e0:	4640      	mov	r0, r8
 801f3e2:	4649      	mov	r1, r9
 801f3e4:	f7e0 ff62 	bl	80002ac <__adddf3>
 801f3e8:	4604      	mov	r4, r0
 801f3ea:	460d      	mov	r5, r1
 801f3ec:	4602      	mov	r2, r0
 801f3ee:	460b      	mov	r3, r1
 801f3f0:	4630      	mov	r0, r6
 801f3f2:	4639      	mov	r1, r7
 801f3f4:	f7e0 ff5a 	bl	80002ac <__adddf3>
 801f3f8:	4632      	mov	r2, r6
 801f3fa:	463b      	mov	r3, r7
 801f3fc:	4680      	mov	r8, r0
 801f3fe:	4689      	mov	r9, r1
 801f400:	f7e0 ff52 	bl	80002a8 <__aeabi_dsub>
 801f404:	4602      	mov	r2, r0
 801f406:	460b      	mov	r3, r1
 801f408:	4620      	mov	r0, r4
 801f40a:	4629      	mov	r1, r5
 801f40c:	f7e0 ff4c 	bl	80002a8 <__aeabi_dsub>
 801f410:	4642      	mov	r2, r8
 801f412:	4606      	mov	r6, r0
 801f414:	460f      	mov	r7, r1
 801f416:	464b      	mov	r3, r9
 801f418:	4640      	mov	r0, r8
 801f41a:	4649      	mov	r1, r9
 801f41c:	f7e1 f8fc 	bl	8000618 <__aeabi_dmul>
 801f420:	a35b      	add	r3, pc, #364	; (adr r3, 801f590 <__ieee754_pow+0x9d0>)
 801f422:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f426:	4604      	mov	r4, r0
 801f428:	460d      	mov	r5, r1
 801f42a:	f7e1 f8f5 	bl	8000618 <__aeabi_dmul>
 801f42e:	a35a      	add	r3, pc, #360	; (adr r3, 801f598 <__ieee754_pow+0x9d8>)
 801f430:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f434:	f7e0 ff38 	bl	80002a8 <__aeabi_dsub>
 801f438:	4622      	mov	r2, r4
 801f43a:	462b      	mov	r3, r5
 801f43c:	f7e1 f8ec 	bl	8000618 <__aeabi_dmul>
 801f440:	a357      	add	r3, pc, #348	; (adr r3, 801f5a0 <__ieee754_pow+0x9e0>)
 801f442:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f446:	f7e0 ff31 	bl	80002ac <__adddf3>
 801f44a:	4622      	mov	r2, r4
 801f44c:	462b      	mov	r3, r5
 801f44e:	f7e1 f8e3 	bl	8000618 <__aeabi_dmul>
 801f452:	a355      	add	r3, pc, #340	; (adr r3, 801f5a8 <__ieee754_pow+0x9e8>)
 801f454:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f458:	f7e0 ff26 	bl	80002a8 <__aeabi_dsub>
 801f45c:	4622      	mov	r2, r4
 801f45e:	462b      	mov	r3, r5
 801f460:	f7e1 f8da 	bl	8000618 <__aeabi_dmul>
 801f464:	a352      	add	r3, pc, #328	; (adr r3, 801f5b0 <__ieee754_pow+0x9f0>)
 801f466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f46a:	f7e0 ff1f 	bl	80002ac <__adddf3>
 801f46e:	4622      	mov	r2, r4
 801f470:	462b      	mov	r3, r5
 801f472:	f7e1 f8d1 	bl	8000618 <__aeabi_dmul>
 801f476:	4602      	mov	r2, r0
 801f478:	460b      	mov	r3, r1
 801f47a:	4640      	mov	r0, r8
 801f47c:	4649      	mov	r1, r9
 801f47e:	f7e0 ff13 	bl	80002a8 <__aeabi_dsub>
 801f482:	4604      	mov	r4, r0
 801f484:	460d      	mov	r5, r1
 801f486:	4602      	mov	r2, r0
 801f488:	460b      	mov	r3, r1
 801f48a:	4640      	mov	r0, r8
 801f48c:	4649      	mov	r1, r9
 801f48e:	f7e1 f8c3 	bl	8000618 <__aeabi_dmul>
 801f492:	2200      	movs	r2, #0
 801f494:	e9cd 0100 	strd	r0, r1, [sp]
 801f498:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f49c:	4620      	mov	r0, r4
 801f49e:	4629      	mov	r1, r5
 801f4a0:	f7e0 ff02 	bl	80002a8 <__aeabi_dsub>
 801f4a4:	4602      	mov	r2, r0
 801f4a6:	460b      	mov	r3, r1
 801f4a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f4ac:	f7e1 f9de 	bl	800086c <__aeabi_ddiv>
 801f4b0:	4632      	mov	r2, r6
 801f4b2:	4604      	mov	r4, r0
 801f4b4:	460d      	mov	r5, r1
 801f4b6:	463b      	mov	r3, r7
 801f4b8:	4640      	mov	r0, r8
 801f4ba:	4649      	mov	r1, r9
 801f4bc:	f7e1 f8ac 	bl	8000618 <__aeabi_dmul>
 801f4c0:	4632      	mov	r2, r6
 801f4c2:	463b      	mov	r3, r7
 801f4c4:	f7e0 fef2 	bl	80002ac <__adddf3>
 801f4c8:	4602      	mov	r2, r0
 801f4ca:	460b      	mov	r3, r1
 801f4cc:	4620      	mov	r0, r4
 801f4ce:	4629      	mov	r1, r5
 801f4d0:	f7e0 feea 	bl	80002a8 <__aeabi_dsub>
 801f4d4:	4642      	mov	r2, r8
 801f4d6:	464b      	mov	r3, r9
 801f4d8:	f7e0 fee6 	bl	80002a8 <__aeabi_dsub>
 801f4dc:	4602      	mov	r2, r0
 801f4de:	460b      	mov	r3, r1
 801f4e0:	2000      	movs	r0, #0
 801f4e2:	4939      	ldr	r1, [pc, #228]	; (801f5c8 <__ieee754_pow+0xa08>)
 801f4e4:	f7e0 fee0 	bl	80002a8 <__aeabi_dsub>
 801f4e8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801f4ec:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801f4f0:	4602      	mov	r2, r0
 801f4f2:	460b      	mov	r3, r1
 801f4f4:	da2f      	bge.n	801f556 <__ieee754_pow+0x996>
 801f4f6:	4650      	mov	r0, sl
 801f4f8:	ec43 2b10 	vmov	d0, r2, r3
 801f4fc:	f000 f9c0 	bl	801f880 <scalbn>
 801f500:	ec51 0b10 	vmov	r0, r1, d0
 801f504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f508:	f7ff bbf1 	b.w	801ecee <__ieee754_pow+0x12e>
 801f50c:	4b2f      	ldr	r3, [pc, #188]	; (801f5cc <__ieee754_pow+0xa0c>)
 801f50e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801f512:	429e      	cmp	r6, r3
 801f514:	f77f af0c 	ble.w	801f330 <__ieee754_pow+0x770>
 801f518:	4b2d      	ldr	r3, [pc, #180]	; (801f5d0 <__ieee754_pow+0xa10>)
 801f51a:	440b      	add	r3, r1
 801f51c:	4303      	orrs	r3, r0
 801f51e:	d00b      	beq.n	801f538 <__ieee754_pow+0x978>
 801f520:	a325      	add	r3, pc, #148	; (adr r3, 801f5b8 <__ieee754_pow+0x9f8>)
 801f522:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f52a:	f7e1 f875 	bl	8000618 <__aeabi_dmul>
 801f52e:	a322      	add	r3, pc, #136	; (adr r3, 801f5b8 <__ieee754_pow+0x9f8>)
 801f530:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f534:	f7ff bbdb 	b.w	801ecee <__ieee754_pow+0x12e>
 801f538:	4622      	mov	r2, r4
 801f53a:	462b      	mov	r3, r5
 801f53c:	f7e0 feb4 	bl	80002a8 <__aeabi_dsub>
 801f540:	4642      	mov	r2, r8
 801f542:	464b      	mov	r3, r9
 801f544:	f7e1 faee 	bl	8000b24 <__aeabi_dcmpge>
 801f548:	2800      	cmp	r0, #0
 801f54a:	f43f aef1 	beq.w	801f330 <__ieee754_pow+0x770>
 801f54e:	e7e7      	b.n	801f520 <__ieee754_pow+0x960>
 801f550:	f04f 0a00 	mov.w	sl, #0
 801f554:	e718      	b.n	801f388 <__ieee754_pow+0x7c8>
 801f556:	4621      	mov	r1, r4
 801f558:	e7d4      	b.n	801f504 <__ieee754_pow+0x944>
 801f55a:	2000      	movs	r0, #0
 801f55c:	491a      	ldr	r1, [pc, #104]	; (801f5c8 <__ieee754_pow+0xa08>)
 801f55e:	f7ff bb8f 	b.w	801ec80 <__ieee754_pow+0xc0>
 801f562:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f566:	f7ff bb8b 	b.w	801ec80 <__ieee754_pow+0xc0>
 801f56a:	4630      	mov	r0, r6
 801f56c:	4639      	mov	r1, r7
 801f56e:	f7ff bb87 	b.w	801ec80 <__ieee754_pow+0xc0>
 801f572:	4693      	mov	fp, r2
 801f574:	f7ff bb98 	b.w	801eca8 <__ieee754_pow+0xe8>
 801f578:	00000000 	.word	0x00000000
 801f57c:	3fe62e43 	.word	0x3fe62e43
 801f580:	fefa39ef 	.word	0xfefa39ef
 801f584:	3fe62e42 	.word	0x3fe62e42
 801f588:	0ca86c39 	.word	0x0ca86c39
 801f58c:	be205c61 	.word	0xbe205c61
 801f590:	72bea4d0 	.word	0x72bea4d0
 801f594:	3e663769 	.word	0x3e663769
 801f598:	c5d26bf1 	.word	0xc5d26bf1
 801f59c:	3ebbbd41 	.word	0x3ebbbd41
 801f5a0:	af25de2c 	.word	0xaf25de2c
 801f5a4:	3f11566a 	.word	0x3f11566a
 801f5a8:	16bebd93 	.word	0x16bebd93
 801f5ac:	3f66c16c 	.word	0x3f66c16c
 801f5b0:	5555553e 	.word	0x5555553e
 801f5b4:	3fc55555 	.word	0x3fc55555
 801f5b8:	c2f8f359 	.word	0xc2f8f359
 801f5bc:	01a56e1f 	.word	0x01a56e1f
 801f5c0:	3fe00000 	.word	0x3fe00000
 801f5c4:	000fffff 	.word	0x000fffff
 801f5c8:	3ff00000 	.word	0x3ff00000
 801f5cc:	4090cbff 	.word	0x4090cbff
 801f5d0:	3f6f3400 	.word	0x3f6f3400
 801f5d4:	652b82fe 	.word	0x652b82fe
 801f5d8:	3c971547 	.word	0x3c971547

0801f5dc <__ieee754_sqrt>:
 801f5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f5e0:	4955      	ldr	r1, [pc, #340]	; (801f738 <__ieee754_sqrt+0x15c>)
 801f5e2:	ec55 4b10 	vmov	r4, r5, d0
 801f5e6:	43a9      	bics	r1, r5
 801f5e8:	462b      	mov	r3, r5
 801f5ea:	462a      	mov	r2, r5
 801f5ec:	d112      	bne.n	801f614 <__ieee754_sqrt+0x38>
 801f5ee:	ee10 2a10 	vmov	r2, s0
 801f5f2:	ee10 0a10 	vmov	r0, s0
 801f5f6:	4629      	mov	r1, r5
 801f5f8:	f7e1 f80e 	bl	8000618 <__aeabi_dmul>
 801f5fc:	4602      	mov	r2, r0
 801f5fe:	460b      	mov	r3, r1
 801f600:	4620      	mov	r0, r4
 801f602:	4629      	mov	r1, r5
 801f604:	f7e0 fe52 	bl	80002ac <__adddf3>
 801f608:	4604      	mov	r4, r0
 801f60a:	460d      	mov	r5, r1
 801f60c:	ec45 4b10 	vmov	d0, r4, r5
 801f610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f614:	2d00      	cmp	r5, #0
 801f616:	ee10 0a10 	vmov	r0, s0
 801f61a:	4621      	mov	r1, r4
 801f61c:	dc0f      	bgt.n	801f63e <__ieee754_sqrt+0x62>
 801f61e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801f622:	4330      	orrs	r0, r6
 801f624:	d0f2      	beq.n	801f60c <__ieee754_sqrt+0x30>
 801f626:	b155      	cbz	r5, 801f63e <__ieee754_sqrt+0x62>
 801f628:	ee10 2a10 	vmov	r2, s0
 801f62c:	4620      	mov	r0, r4
 801f62e:	4629      	mov	r1, r5
 801f630:	f7e0 fe3a 	bl	80002a8 <__aeabi_dsub>
 801f634:	4602      	mov	r2, r0
 801f636:	460b      	mov	r3, r1
 801f638:	f7e1 f918 	bl	800086c <__aeabi_ddiv>
 801f63c:	e7e4      	b.n	801f608 <__ieee754_sqrt+0x2c>
 801f63e:	151b      	asrs	r3, r3, #20
 801f640:	d073      	beq.n	801f72a <__ieee754_sqrt+0x14e>
 801f642:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801f646:	07dd      	lsls	r5, r3, #31
 801f648:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801f64c:	bf48      	it	mi
 801f64e:	0fc8      	lsrmi	r0, r1, #31
 801f650:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801f654:	bf44      	itt	mi
 801f656:	0049      	lslmi	r1, r1, #1
 801f658:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801f65c:	2500      	movs	r5, #0
 801f65e:	1058      	asrs	r0, r3, #1
 801f660:	0fcb      	lsrs	r3, r1, #31
 801f662:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801f666:	0049      	lsls	r1, r1, #1
 801f668:	2316      	movs	r3, #22
 801f66a:	462c      	mov	r4, r5
 801f66c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801f670:	19a7      	adds	r7, r4, r6
 801f672:	4297      	cmp	r7, r2
 801f674:	bfde      	ittt	le
 801f676:	19bc      	addle	r4, r7, r6
 801f678:	1bd2      	suble	r2, r2, r7
 801f67a:	19ad      	addle	r5, r5, r6
 801f67c:	0fcf      	lsrs	r7, r1, #31
 801f67e:	3b01      	subs	r3, #1
 801f680:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801f684:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801f688:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801f68c:	d1f0      	bne.n	801f670 <__ieee754_sqrt+0x94>
 801f68e:	f04f 0c20 	mov.w	ip, #32
 801f692:	469e      	mov	lr, r3
 801f694:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801f698:	42a2      	cmp	r2, r4
 801f69a:	eb06 070e 	add.w	r7, r6, lr
 801f69e:	dc02      	bgt.n	801f6a6 <__ieee754_sqrt+0xca>
 801f6a0:	d112      	bne.n	801f6c8 <__ieee754_sqrt+0xec>
 801f6a2:	428f      	cmp	r7, r1
 801f6a4:	d810      	bhi.n	801f6c8 <__ieee754_sqrt+0xec>
 801f6a6:	2f00      	cmp	r7, #0
 801f6a8:	eb07 0e06 	add.w	lr, r7, r6
 801f6ac:	da42      	bge.n	801f734 <__ieee754_sqrt+0x158>
 801f6ae:	f1be 0f00 	cmp.w	lr, #0
 801f6b2:	db3f      	blt.n	801f734 <__ieee754_sqrt+0x158>
 801f6b4:	f104 0801 	add.w	r8, r4, #1
 801f6b8:	1b12      	subs	r2, r2, r4
 801f6ba:	428f      	cmp	r7, r1
 801f6bc:	bf88      	it	hi
 801f6be:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801f6c2:	1bc9      	subs	r1, r1, r7
 801f6c4:	4433      	add	r3, r6
 801f6c6:	4644      	mov	r4, r8
 801f6c8:	0052      	lsls	r2, r2, #1
 801f6ca:	f1bc 0c01 	subs.w	ip, ip, #1
 801f6ce:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801f6d2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801f6d6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801f6da:	d1dd      	bne.n	801f698 <__ieee754_sqrt+0xbc>
 801f6dc:	430a      	orrs	r2, r1
 801f6de:	d006      	beq.n	801f6ee <__ieee754_sqrt+0x112>
 801f6e0:	1c5c      	adds	r4, r3, #1
 801f6e2:	bf13      	iteet	ne
 801f6e4:	3301      	addne	r3, #1
 801f6e6:	3501      	addeq	r5, #1
 801f6e8:	4663      	moveq	r3, ip
 801f6ea:	f023 0301 	bicne.w	r3, r3, #1
 801f6ee:	106a      	asrs	r2, r5, #1
 801f6f0:	085b      	lsrs	r3, r3, #1
 801f6f2:	07e9      	lsls	r1, r5, #31
 801f6f4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801f6f8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801f6fc:	bf48      	it	mi
 801f6fe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801f702:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801f706:	461c      	mov	r4, r3
 801f708:	e780      	b.n	801f60c <__ieee754_sqrt+0x30>
 801f70a:	0aca      	lsrs	r2, r1, #11
 801f70c:	3815      	subs	r0, #21
 801f70e:	0549      	lsls	r1, r1, #21
 801f710:	2a00      	cmp	r2, #0
 801f712:	d0fa      	beq.n	801f70a <__ieee754_sqrt+0x12e>
 801f714:	02d6      	lsls	r6, r2, #11
 801f716:	d50a      	bpl.n	801f72e <__ieee754_sqrt+0x152>
 801f718:	f1c3 0420 	rsb	r4, r3, #32
 801f71c:	fa21 f404 	lsr.w	r4, r1, r4
 801f720:	1e5d      	subs	r5, r3, #1
 801f722:	4099      	lsls	r1, r3
 801f724:	4322      	orrs	r2, r4
 801f726:	1b43      	subs	r3, r0, r5
 801f728:	e78b      	b.n	801f642 <__ieee754_sqrt+0x66>
 801f72a:	4618      	mov	r0, r3
 801f72c:	e7f0      	b.n	801f710 <__ieee754_sqrt+0x134>
 801f72e:	0052      	lsls	r2, r2, #1
 801f730:	3301      	adds	r3, #1
 801f732:	e7ef      	b.n	801f714 <__ieee754_sqrt+0x138>
 801f734:	46a0      	mov	r8, r4
 801f736:	e7bf      	b.n	801f6b8 <__ieee754_sqrt+0xdc>
 801f738:	7ff00000 	.word	0x7ff00000

0801f73c <fabs>:
 801f73c:	ec51 0b10 	vmov	r0, r1, d0
 801f740:	ee10 2a10 	vmov	r2, s0
 801f744:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f748:	ec43 2b10 	vmov	d0, r2, r3
 801f74c:	4770      	bx	lr

0801f74e <finite>:
 801f74e:	ee10 3a90 	vmov	r3, s1
 801f752:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801f756:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801f75a:	0fc0      	lsrs	r0, r0, #31
 801f75c:	4770      	bx	lr

0801f75e <matherr>:
 801f75e:	2000      	movs	r0, #0
 801f760:	4770      	bx	lr
 801f762:	0000      	movs	r0, r0
 801f764:	0000      	movs	r0, r0
	...

0801f768 <nan>:
 801f768:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801f770 <nan+0x8>
 801f76c:	4770      	bx	lr
 801f76e:	bf00      	nop
 801f770:	00000000 	.word	0x00000000
 801f774:	7ff80000 	.word	0x7ff80000

0801f778 <rint>:
 801f778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f77a:	ec51 0b10 	vmov	r0, r1, d0
 801f77e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f782:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801f786:	2e13      	cmp	r6, #19
 801f788:	460b      	mov	r3, r1
 801f78a:	ee10 4a10 	vmov	r4, s0
 801f78e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801f792:	dc56      	bgt.n	801f842 <rint+0xca>
 801f794:	2e00      	cmp	r6, #0
 801f796:	da2b      	bge.n	801f7f0 <rint+0x78>
 801f798:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801f79c:	4302      	orrs	r2, r0
 801f79e:	d023      	beq.n	801f7e8 <rint+0x70>
 801f7a0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801f7a4:	4302      	orrs	r2, r0
 801f7a6:	4254      	negs	r4, r2
 801f7a8:	4314      	orrs	r4, r2
 801f7aa:	0c4b      	lsrs	r3, r1, #17
 801f7ac:	0b24      	lsrs	r4, r4, #12
 801f7ae:	045b      	lsls	r3, r3, #17
 801f7b0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801f7b4:	ea44 0103 	orr.w	r1, r4, r3
 801f7b8:	460b      	mov	r3, r1
 801f7ba:	492f      	ldr	r1, [pc, #188]	; (801f878 <rint+0x100>)
 801f7bc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801f7c0:	e9d1 6700 	ldrd	r6, r7, [r1]
 801f7c4:	4602      	mov	r2, r0
 801f7c6:	4639      	mov	r1, r7
 801f7c8:	4630      	mov	r0, r6
 801f7ca:	f7e0 fd6f 	bl	80002ac <__adddf3>
 801f7ce:	e9cd 0100 	strd	r0, r1, [sp]
 801f7d2:	463b      	mov	r3, r7
 801f7d4:	4632      	mov	r2, r6
 801f7d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f7da:	f7e0 fd65 	bl	80002a8 <__aeabi_dsub>
 801f7de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f7e2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801f7e6:	4639      	mov	r1, r7
 801f7e8:	ec41 0b10 	vmov	d0, r0, r1
 801f7ec:	b003      	add	sp, #12
 801f7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f7f0:	4a22      	ldr	r2, [pc, #136]	; (801f87c <rint+0x104>)
 801f7f2:	4132      	asrs	r2, r6
 801f7f4:	ea01 0702 	and.w	r7, r1, r2
 801f7f8:	4307      	orrs	r7, r0
 801f7fa:	d0f5      	beq.n	801f7e8 <rint+0x70>
 801f7fc:	0852      	lsrs	r2, r2, #1
 801f7fe:	4011      	ands	r1, r2
 801f800:	430c      	orrs	r4, r1
 801f802:	d00b      	beq.n	801f81c <rint+0xa4>
 801f804:	ea23 0202 	bic.w	r2, r3, r2
 801f808:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801f80c:	2e13      	cmp	r6, #19
 801f80e:	fa43 f306 	asr.w	r3, r3, r6
 801f812:	bf0c      	ite	eq
 801f814:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801f818:	2400      	movne	r4, #0
 801f81a:	4313      	orrs	r3, r2
 801f81c:	4916      	ldr	r1, [pc, #88]	; (801f878 <rint+0x100>)
 801f81e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801f822:	4622      	mov	r2, r4
 801f824:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f828:	4620      	mov	r0, r4
 801f82a:	4629      	mov	r1, r5
 801f82c:	f7e0 fd3e 	bl	80002ac <__adddf3>
 801f830:	e9cd 0100 	strd	r0, r1, [sp]
 801f834:	4622      	mov	r2, r4
 801f836:	462b      	mov	r3, r5
 801f838:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f83c:	f7e0 fd34 	bl	80002a8 <__aeabi_dsub>
 801f840:	e7d2      	b.n	801f7e8 <rint+0x70>
 801f842:	2e33      	cmp	r6, #51	; 0x33
 801f844:	dd07      	ble.n	801f856 <rint+0xde>
 801f846:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801f84a:	d1cd      	bne.n	801f7e8 <rint+0x70>
 801f84c:	ee10 2a10 	vmov	r2, s0
 801f850:	f7e0 fd2c 	bl	80002ac <__adddf3>
 801f854:	e7c8      	b.n	801f7e8 <rint+0x70>
 801f856:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801f85a:	f04f 32ff 	mov.w	r2, #4294967295
 801f85e:	40f2      	lsrs	r2, r6
 801f860:	4210      	tst	r0, r2
 801f862:	d0c1      	beq.n	801f7e8 <rint+0x70>
 801f864:	0852      	lsrs	r2, r2, #1
 801f866:	4210      	tst	r0, r2
 801f868:	bf1f      	itttt	ne
 801f86a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801f86e:	ea20 0202 	bicne.w	r2, r0, r2
 801f872:	4134      	asrne	r4, r6
 801f874:	4314      	orrne	r4, r2
 801f876:	e7d1      	b.n	801f81c <rint+0xa4>
 801f878:	08023e80 	.word	0x08023e80
 801f87c:	000fffff 	.word	0x000fffff

0801f880 <scalbn>:
 801f880:	b570      	push	{r4, r5, r6, lr}
 801f882:	ec55 4b10 	vmov	r4, r5, d0
 801f886:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801f88a:	4606      	mov	r6, r0
 801f88c:	462b      	mov	r3, r5
 801f88e:	b9aa      	cbnz	r2, 801f8bc <scalbn+0x3c>
 801f890:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801f894:	4323      	orrs	r3, r4
 801f896:	d03b      	beq.n	801f910 <scalbn+0x90>
 801f898:	4b31      	ldr	r3, [pc, #196]	; (801f960 <scalbn+0xe0>)
 801f89a:	4629      	mov	r1, r5
 801f89c:	2200      	movs	r2, #0
 801f89e:	ee10 0a10 	vmov	r0, s0
 801f8a2:	f7e0 feb9 	bl	8000618 <__aeabi_dmul>
 801f8a6:	4b2f      	ldr	r3, [pc, #188]	; (801f964 <scalbn+0xe4>)
 801f8a8:	429e      	cmp	r6, r3
 801f8aa:	4604      	mov	r4, r0
 801f8ac:	460d      	mov	r5, r1
 801f8ae:	da12      	bge.n	801f8d6 <scalbn+0x56>
 801f8b0:	a327      	add	r3, pc, #156	; (adr r3, 801f950 <scalbn+0xd0>)
 801f8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8b6:	f7e0 feaf 	bl	8000618 <__aeabi_dmul>
 801f8ba:	e009      	b.n	801f8d0 <scalbn+0x50>
 801f8bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801f8c0:	428a      	cmp	r2, r1
 801f8c2:	d10c      	bne.n	801f8de <scalbn+0x5e>
 801f8c4:	ee10 2a10 	vmov	r2, s0
 801f8c8:	4620      	mov	r0, r4
 801f8ca:	4629      	mov	r1, r5
 801f8cc:	f7e0 fcee 	bl	80002ac <__adddf3>
 801f8d0:	4604      	mov	r4, r0
 801f8d2:	460d      	mov	r5, r1
 801f8d4:	e01c      	b.n	801f910 <scalbn+0x90>
 801f8d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f8da:	460b      	mov	r3, r1
 801f8dc:	3a36      	subs	r2, #54	; 0x36
 801f8de:	4432      	add	r2, r6
 801f8e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801f8e4:	428a      	cmp	r2, r1
 801f8e6:	dd0b      	ble.n	801f900 <scalbn+0x80>
 801f8e8:	ec45 4b11 	vmov	d1, r4, r5
 801f8ec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801f958 <scalbn+0xd8>
 801f8f0:	f000 f83c 	bl	801f96c <copysign>
 801f8f4:	a318      	add	r3, pc, #96	; (adr r3, 801f958 <scalbn+0xd8>)
 801f8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8fa:	ec51 0b10 	vmov	r0, r1, d0
 801f8fe:	e7da      	b.n	801f8b6 <scalbn+0x36>
 801f900:	2a00      	cmp	r2, #0
 801f902:	dd08      	ble.n	801f916 <scalbn+0x96>
 801f904:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f908:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f90c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f910:	ec45 4b10 	vmov	d0, r4, r5
 801f914:	bd70      	pop	{r4, r5, r6, pc}
 801f916:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801f91a:	da0d      	bge.n	801f938 <scalbn+0xb8>
 801f91c:	f24c 3350 	movw	r3, #50000	; 0xc350
 801f920:	429e      	cmp	r6, r3
 801f922:	ec45 4b11 	vmov	d1, r4, r5
 801f926:	dce1      	bgt.n	801f8ec <scalbn+0x6c>
 801f928:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801f950 <scalbn+0xd0>
 801f92c:	f000 f81e 	bl	801f96c <copysign>
 801f930:	a307      	add	r3, pc, #28	; (adr r3, 801f950 <scalbn+0xd0>)
 801f932:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f936:	e7e0      	b.n	801f8fa <scalbn+0x7a>
 801f938:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f93c:	3236      	adds	r2, #54	; 0x36
 801f93e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f942:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f946:	4620      	mov	r0, r4
 801f948:	4629      	mov	r1, r5
 801f94a:	2200      	movs	r2, #0
 801f94c:	4b06      	ldr	r3, [pc, #24]	; (801f968 <scalbn+0xe8>)
 801f94e:	e7b2      	b.n	801f8b6 <scalbn+0x36>
 801f950:	c2f8f359 	.word	0xc2f8f359
 801f954:	01a56e1f 	.word	0x01a56e1f
 801f958:	8800759c 	.word	0x8800759c
 801f95c:	7e37e43c 	.word	0x7e37e43c
 801f960:	43500000 	.word	0x43500000
 801f964:	ffff3cb0 	.word	0xffff3cb0
 801f968:	3c900000 	.word	0x3c900000

0801f96c <copysign>:
 801f96c:	ec51 0b10 	vmov	r0, r1, d0
 801f970:	ee11 0a90 	vmov	r0, s3
 801f974:	ee10 2a10 	vmov	r2, s0
 801f978:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801f97c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801f980:	ea41 0300 	orr.w	r3, r1, r0
 801f984:	ec43 2b10 	vmov	d0, r2, r3
 801f988:	4770      	bx	lr
	...

0801f98c <__errno>:
 801f98c:	4b01      	ldr	r3, [pc, #4]	; (801f994 <__errno+0x8>)
 801f98e:	6818      	ldr	r0, [r3, #0]
 801f990:	4770      	bx	lr
 801f992:	bf00      	nop
 801f994:	20000084 	.word	0x20000084

0801f998 <_init>:
 801f998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f99a:	bf00      	nop
 801f99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f99e:	bc08      	pop	{r3}
 801f9a0:	469e      	mov	lr, r3
 801f9a2:	4770      	bx	lr

0801f9a4 <_fini>:
 801f9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f9a6:	bf00      	nop
 801f9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f9aa:	bc08      	pop	{r3}
 801f9ac:	469e      	mov	lr, r3
 801f9ae:	4770      	bx	lr
