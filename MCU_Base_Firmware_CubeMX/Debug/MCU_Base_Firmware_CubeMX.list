
MCU_Base_Firmware_CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c144  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d48  0801c2d8  0801c2d8  0002c2d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020020  08020020  0004024c  2**0
                  CONTENTS
  4 .ARM          00000008  08020020  08020020  00030020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020028  08020028  0004024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020028  08020028  00030028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802002c  0802002c  0003002c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  08020030  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006c40  20000250  0802027c  00040250  2**3
                  ALLOC
 10 ._user_heap_stack 00006000  20006e90  0802027c  00046e90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00070987  00000000  00000000  0004027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009478  00000000  00000000  000b0c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021d0  00000000  00000000  000ba080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002090  00000000  00000000  000bc250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000363a3  00000000  00000000  000be2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003cbc6  00000000  00000000  000f4683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f316b  00000000  00000000  00131249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002243b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a034  00000000  00000000  00224408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000250 	.word	0x20000250
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801c2bc 	.word	0x0801c2bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000254 	.word	0x20000254
 80001cc:	0801c2bc 	.word	0x0801c2bc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b9a4 	b.w	8000f68 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f83c 	bl	8000ca4 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff5b 	bl	8000afc <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fcd1 	bl	8000618 <__aeabi_dmul>
 8000c76:	f7ff ffa7 	bl	8000bc8 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc52 	bl	8000524 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fcc8 	bl	8000618 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fb0a 	bl	80002a8 <__aeabi_dsub>
 8000c94:	f7ff ff98 	bl	8000bc8 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <__udivmoddi4>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	9d08      	ldr	r5, [sp, #32]
 8000caa:	4604      	mov	r4, r0
 8000cac:	468c      	mov	ip, r1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f040 8083 	bne.w	8000dba <__udivmoddi4+0x116>
 8000cb4:	428a      	cmp	r2, r1
 8000cb6:	4617      	mov	r7, r2
 8000cb8:	d947      	bls.n	8000d4a <__udivmoddi4+0xa6>
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	b142      	cbz	r2, 8000cd2 <__udivmoddi4+0x2e>
 8000cc0:	f1c2 0020 	rsb	r0, r2, #32
 8000cc4:	fa24 f000 	lsr.w	r0, r4, r0
 8000cc8:	4091      	lsls	r1, r2
 8000cca:	4097      	lsls	r7, r2
 8000ccc:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd6:	0c23      	lsrs	r3, r4, #16
 8000cd8:	fbbc f6f8 	udiv	r6, ip, r8
 8000cdc:	fa1f fe87 	uxth.w	lr, r7
 8000ce0:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce8:	fb06 f10e 	mul.w	r1, r6, lr
 8000cec:	4299      	cmp	r1, r3
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x60>
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cf6:	f080 8119 	bcs.w	8000f2c <__udivmoddi4+0x288>
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	f240 8116 	bls.w	8000f2c <__udivmoddi4+0x288>
 8000d00:	3e02      	subs	r6, #2
 8000d02:	443b      	add	r3, r7
 8000d04:	1a5b      	subs	r3, r3, r1
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d0c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d909      	bls.n	8000d30 <__udivmoddi4+0x8c>
 8000d1c:	193c      	adds	r4, r7, r4
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d22:	f080 8105 	bcs.w	8000f30 <__udivmoddi4+0x28c>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f240 8102 	bls.w	8000f30 <__udivmoddi4+0x28c>
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	443c      	add	r4, r7
 8000d30:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d34:	eba4 040e 	sub.w	r4, r4, lr
 8000d38:	2600      	movs	r6, #0
 8000d3a:	b11d      	cbz	r5, 8000d44 <__udivmoddi4+0xa0>
 8000d3c:	40d4      	lsrs	r4, r2
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e9c5 4300 	strd	r4, r3, [r5]
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	b902      	cbnz	r2, 8000d4e <__udivmoddi4+0xaa>
 8000d4c:	deff      	udf	#255	; 0xff
 8000d4e:	fab2 f282 	clz	r2, r2
 8000d52:	2a00      	cmp	r2, #0
 8000d54:	d150      	bne.n	8000df8 <__udivmoddi4+0x154>
 8000d56:	1bcb      	subs	r3, r1, r7
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	fa1f f887 	uxth.w	r8, r7
 8000d60:	2601      	movs	r6, #1
 8000d62:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d66:	0c21      	lsrs	r1, r4, #16
 8000d68:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d70:	fb08 f30c 	mul.w	r3, r8, ip
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0xe4>
 8000d78:	1879      	adds	r1, r7, r1
 8000d7a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0xe2>
 8000d80:	428b      	cmp	r3, r1
 8000d82:	f200 80e9 	bhi.w	8000f58 <__udivmoddi4+0x2b4>
 8000d86:	4684      	mov	ip, r0
 8000d88:	1ac9      	subs	r1, r1, r3
 8000d8a:	b2a3      	uxth	r3, r4
 8000d8c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d90:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d94:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d98:	fb08 f800 	mul.w	r8, r8, r0
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	d907      	bls.n	8000db0 <__udivmoddi4+0x10c>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x10a>
 8000da8:	45a0      	cmp	r8, r4
 8000daa:	f200 80d9 	bhi.w	8000f60 <__udivmoddi4+0x2bc>
 8000dae:	4618      	mov	r0, r3
 8000db0:	eba4 0408 	sub.w	r4, r4, r8
 8000db4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db8:	e7bf      	b.n	8000d3a <__udivmoddi4+0x96>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x12e>
 8000dbe:	2d00      	cmp	r5, #0
 8000dc0:	f000 80b1 	beq.w	8000f26 <__udivmoddi4+0x282>
 8000dc4:	2600      	movs	r6, #0
 8000dc6:	e9c5 0100 	strd	r0, r1, [r5]
 8000dca:	4630      	mov	r0, r6
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	fab3 f683 	clz	r6, r3
 8000dd6:	2e00      	cmp	r6, #0
 8000dd8:	d14a      	bne.n	8000e70 <__udivmoddi4+0x1cc>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d302      	bcc.n	8000de4 <__udivmoddi4+0x140>
 8000dde:	4282      	cmp	r2, r0
 8000de0:	f200 80b8 	bhi.w	8000f54 <__udivmoddi4+0x2b0>
 8000de4:	1a84      	subs	r4, r0, r2
 8000de6:	eb61 0103 	sbc.w	r1, r1, r3
 8000dea:	2001      	movs	r0, #1
 8000dec:	468c      	mov	ip, r1
 8000dee:	2d00      	cmp	r5, #0
 8000df0:	d0a8      	beq.n	8000d44 <__udivmoddi4+0xa0>
 8000df2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f603 	lsr.w	r6, r0, r3
 8000e00:	4097      	lsls	r7, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0a:	40d9      	lsrs	r1, r3
 8000e0c:	4330      	orrs	r0, r6
 8000e0e:	0c03      	lsrs	r3, r0, #16
 8000e10:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e14:	fa1f f887 	uxth.w	r8, r7
 8000e18:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e20:	fb06 f108 	mul.w	r1, r6, r8
 8000e24:	4299      	cmp	r1, r3
 8000e26:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2a:	d909      	bls.n	8000e40 <__udivmoddi4+0x19c>
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e32:	f080 808d 	bcs.w	8000f50 <__udivmoddi4+0x2ac>
 8000e36:	4299      	cmp	r1, r3
 8000e38:	f240 808a 	bls.w	8000f50 <__udivmoddi4+0x2ac>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	443b      	add	r3, r7
 8000e40:	1a5b      	subs	r3, r3, r1
 8000e42:	b281      	uxth	r1, r0
 8000e44:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e48:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e50:	fb00 f308 	mul.w	r3, r0, r8
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x1c4>
 8000e58:	1879      	adds	r1, r7, r1
 8000e5a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5e:	d273      	bcs.n	8000f48 <__udivmoddi4+0x2a4>
 8000e60:	428b      	cmp	r3, r1
 8000e62:	d971      	bls.n	8000f48 <__udivmoddi4+0x2a4>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4439      	add	r1, r7
 8000e68:	1acb      	subs	r3, r1, r3
 8000e6a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e6e:	e778      	b.n	8000d62 <__udivmoddi4+0xbe>
 8000e70:	f1c6 0c20 	rsb	ip, r6, #32
 8000e74:	fa03 f406 	lsl.w	r4, r3, r6
 8000e78:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e7c:	431c      	orrs	r4, r3
 8000e7e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e82:	fa01 f306 	lsl.w	r3, r1, r6
 8000e86:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	0c3b      	lsrs	r3, r7, #16
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fa1f f884 	uxth.w	r8, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea2:	fb09 fa08 	mul.w	sl, r9, r8
 8000ea6:	458a      	cmp	sl, r1
 8000ea8:	fa02 f206 	lsl.w	r2, r2, r6
 8000eac:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x220>
 8000eb2:	1861      	adds	r1, r4, r1
 8000eb4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb8:	d248      	bcs.n	8000f4c <__udivmoddi4+0x2a8>
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	d946      	bls.n	8000f4c <__udivmoddi4+0x2a8>
 8000ebe:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec2:	4421      	add	r1, r4
 8000ec4:	eba1 010a 	sub.w	r1, r1, sl
 8000ec8:	b2bf      	uxth	r7, r7
 8000eca:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ece:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ed6:	fb00 f808 	mul.w	r8, r0, r8
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x24a>
 8000ede:	19e7      	adds	r7, r4, r7
 8000ee0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee4:	d22e      	bcs.n	8000f44 <__udivmoddi4+0x2a0>
 8000ee6:	45b8      	cmp	r8, r7
 8000ee8:	d92c      	bls.n	8000f44 <__udivmoddi4+0x2a0>
 8000eea:	3802      	subs	r0, #2
 8000eec:	4427      	add	r7, r4
 8000eee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef2:	eba7 0708 	sub.w	r7, r7, r8
 8000ef6:	fba0 8902 	umull	r8, r9, r0, r2
 8000efa:	454f      	cmp	r7, r9
 8000efc:	46c6      	mov	lr, r8
 8000efe:	4649      	mov	r1, r9
 8000f00:	d31a      	bcc.n	8000f38 <__udivmoddi4+0x294>
 8000f02:	d017      	beq.n	8000f34 <__udivmoddi4+0x290>
 8000f04:	b15d      	cbz	r5, 8000f1e <__udivmoddi4+0x27a>
 8000f06:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f0e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f12:	40f2      	lsrs	r2, r6
 8000f14:	ea4c 0202 	orr.w	r2, ip, r2
 8000f18:	40f7      	lsrs	r7, r6
 8000f1a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f1e:	2600      	movs	r6, #0
 8000f20:	4631      	mov	r1, r6
 8000f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f26:	462e      	mov	r6, r5
 8000f28:	4628      	mov	r0, r5
 8000f2a:	e70b      	b.n	8000d44 <__udivmoddi4+0xa0>
 8000f2c:	4606      	mov	r6, r0
 8000f2e:	e6e9      	b.n	8000d04 <__udivmoddi4+0x60>
 8000f30:	4618      	mov	r0, r3
 8000f32:	e6fd      	b.n	8000d30 <__udivmoddi4+0x8c>
 8000f34:	4543      	cmp	r3, r8
 8000f36:	d2e5      	bcs.n	8000f04 <__udivmoddi4+0x260>
 8000f38:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f3c:	eb69 0104 	sbc.w	r1, r9, r4
 8000f40:	3801      	subs	r0, #1
 8000f42:	e7df      	b.n	8000f04 <__udivmoddi4+0x260>
 8000f44:	4608      	mov	r0, r1
 8000f46:	e7d2      	b.n	8000eee <__udivmoddi4+0x24a>
 8000f48:	4660      	mov	r0, ip
 8000f4a:	e78d      	b.n	8000e68 <__udivmoddi4+0x1c4>
 8000f4c:	4681      	mov	r9, r0
 8000f4e:	e7b9      	b.n	8000ec4 <__udivmoddi4+0x220>
 8000f50:	4666      	mov	r6, ip
 8000f52:	e775      	b.n	8000e40 <__udivmoddi4+0x19c>
 8000f54:	4630      	mov	r0, r6
 8000f56:	e74a      	b.n	8000dee <__udivmoddi4+0x14a>
 8000f58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f5c:	4439      	add	r1, r7
 8000f5e:	e713      	b.n	8000d88 <__udivmoddi4+0xe4>
 8000f60:	3802      	subs	r0, #2
 8000f62:	443c      	add	r4, r7
 8000f64:	e724      	b.n	8000db0 <__udivmoddi4+0x10c>
 8000f66:	bf00      	nop

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f72:	463b      	mov	r3, r7
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f7e:	4b37      	ldr	r3, [pc, #220]	; (800105c <MX_ADC1_Init+0xf0>)
 8000f80:	4a37      	ldr	r2, [pc, #220]	; (8001060 <MX_ADC1_Init+0xf4>)
 8000f82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f84:	4b35      	ldr	r3, [pc, #212]	; (800105c <MX_ADC1_Init+0xf0>)
 8000f86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f8c:	4b33      	ldr	r3, [pc, #204]	; (800105c <MX_ADC1_Init+0xf0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f92:	4b32      	ldr	r3, [pc, #200]	; (800105c <MX_ADC1_Init+0xf0>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f98:	4b30      	ldr	r3, [pc, #192]	; (800105c <MX_ADC1_Init+0xf0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8000fae:	4b2b      	ldr	r3, [pc, #172]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fb0:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb6:	4b29      	ldr	r3, [pc, #164]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000fbc:	4b27      	ldr	r3, [pc, #156]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fca:	4b24      	ldr	r3, [pc, #144]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fd0:	4822      	ldr	r0, [pc, #136]	; (800105c <MX_ADC1_Init+0xf0>)
 8000fd2:	f004 fb89 	bl	80056e8 <HAL_ADC_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000fdc:	f002 fdc2 	bl	8003b64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	481a      	ldr	r0, [pc, #104]	; (800105c <MX_ADC1_Init+0xf0>)
 8000ff2:	f004 fcc3 	bl	800597c <HAL_ADC_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000ffc:	f002 fdb2 	bl	8003b64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001000:	2304      	movs	r3, #4
 8001002:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001004:	2302      	movs	r3, #2
 8001006:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	4813      	ldr	r0, [pc, #76]	; (800105c <MX_ADC1_Init+0xf0>)
 800100e:	f004 fcb5 	bl	800597c <HAL_ADC_ConfigChannel>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001018:	f002 fda4 	bl	8003b64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800101c:	2305      	movs	r3, #5
 800101e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001020:	2303      	movs	r3, #3
 8001022:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	4619      	mov	r1, r3
 8001028:	480c      	ldr	r0, [pc, #48]	; (800105c <MX_ADC1_Init+0xf0>)
 800102a:	f004 fca7 	bl	800597c <HAL_ADC_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001034:	f002 fd96 	bl	8003b64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001038:	2306      	movs	r3, #6
 800103a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800103c:	2304      	movs	r3, #4
 800103e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001040:	463b      	mov	r3, r7
 8001042:	4619      	mov	r1, r3
 8001044:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_ADC1_Init+0xf0>)
 8001046:	f004 fc99 	bl	800597c <HAL_ADC_ConfigChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001050:	f002 fd88 	bl	8003b64 <Error_Handler>
  }

}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200005a8 	.word	0x200005a8
 8001060:	40012000 	.word	0x40012000

08001064 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a2f      	ldr	r2, [pc, #188]	; (8001140 <HAL_ADC_MspInit+0xdc>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d157      	bne.n	8001136 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a2d      	ldr	r2, [pc, #180]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 8001090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b27      	ldr	r3, [pc, #156]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a26      	ldr	r2, [pc, #152]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b24      	ldr	r3, [pc, #144]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = AIN0_Pin|AIN1_Pin|AIN2_Pin|AIN3_Pin;
 80010be:	2378      	movs	r3, #120	; 0x78
 80010c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c2:	2303      	movs	r3, #3
 80010c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	481d      	ldr	r0, [pc, #116]	; (8001148 <HAL_ADC_MspInit+0xe4>)
 80010d2:	f006 fc09 	bl	80078e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010d8:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <HAL_ADC_MspInit+0xec>)
 80010da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <HAL_ADC_MspInit+0xe8>)
 8001100:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001104:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_ADC_MspInit+0xe8>)
 8001108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800110c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <HAL_ADC_MspInit+0xe8>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <HAL_ADC_MspInit+0xe8>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800111a:	480c      	ldr	r0, [pc, #48]	; (800114c <HAL_ADC_MspInit+0xe8>)
 800111c:	f004 ffb0 	bl	8006080 <HAL_DMA_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001126:	f002 fd1d 	bl	8003b64 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a07      	ldr	r2, [pc, #28]	; (800114c <HAL_ADC_MspInit+0xe8>)
 800112e:	639a      	str	r2, [r3, #56]	; 0x38
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_ADC_MspInit+0xe8>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001136:	bf00      	nop
 8001138:	3728      	adds	r7, #40	; 0x28
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40012000 	.word	0x40012000
 8001144:	40023800 	.word	0x40023800
 8001148:	40020000 	.word	0x40020000
 800114c:	200005f0 	.word	0x200005f0
 8001150:	40026410 	.word	0x40026410
 8001154:	00000000 	.word	0x00000000

08001158 <Conversion_ADC1>:
//	Value = (Value / 60);		//Ток

	return Value;
}
double Conversion_ADC1(uint16_t ADC_value)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
	double Value = 0;
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	const double Resolution = 0.0008056640625;
 800116e:	a314      	add	r3, pc, #80	; (adr r3, 80011c0 <Conversion_ADC1+0x68>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	e9c7 2302 	strd	r2, r3, [r7, #8]

	Value = (ADC_value * Resolution);
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f9e2 	bl	8000544 <__aeabi_i2d>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001188:	f7ff fa46 	bl	8000618 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	e9c7 2304 	strd	r2, r3, [r7, #16]
	Value = (Value * 3.2323232323232);	//Напряжение
 8001194:	a30c      	add	r3, pc, #48	; (adr r3, 80011c8 <Conversion_ADC1+0x70>)
 8001196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800119e:	f7ff fa3b 	bl	8000618 <__aeabi_dmul>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return Value;
 80011aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011ae:	ec43 2b17 	vmov	d7, r2, r3
}
 80011b2:	eeb0 0a47 	vmov.f32	s0, s14
 80011b6:	eef0 0a67 	vmov.f32	s1, s15
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	66666666 	.word	0x66666666
 80011c4:	3f4a6666 	.word	0x3f4a6666
 80011c8:	48676ee8 	.word	0x48676ee8
 80011cc:	4009dbcc 	.word	0x4009dbcc

080011d0 <cJSON_strcasecmp>:
static const char *ep;

const char *cJSON_GetErrorPtr(void) {return ep;}

static int cJSON_strcasecmp(const char *s1,const char *s2)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
	if (!s1) return (s1==s2)?0:1;if (!s2) return 1;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d107      	bne.n	80011f0 <cJSON_strcasecmp+0x20>
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	bf14      	ite	ne
 80011e8:	2301      	movne	r3, #1
 80011ea:	2300      	moveq	r3, #0
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	e055      	b.n	800129c <cJSON_strcasecmp+0xcc>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10d      	bne.n	8001212 <cJSON_strcasecmp+0x42>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e050      	b.n	800129c <cJSON_strcasecmp+0xcc>
	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)	if(*s1 == 0)	return 0;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <cJSON_strcasecmp+0x36>
 8001202:	2300      	movs	r3, #0
 8001204:	e04a      	b.n	800129c <cJSON_strcasecmp+0xcc>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3301      	adds	r3, #1
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	73fb      	strb	r3, [r7, #15]
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	3301      	adds	r3, #1
 800121c:	4a22      	ldr	r2, [pc, #136]	; (80012a8 <cJSON_strcasecmp+0xd8>)
 800121e:	4413      	add	r3, r2
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	2b01      	cmp	r3, #1
 8001228:	d103      	bne.n	8001232 <cJSON_strcasecmp+0x62>
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	f103 0220 	add.w	r2, r3, #32
 8001230:	e000      	b.n	8001234 <cJSON_strcasecmp+0x64>
 8001232:	7bfa      	ldrb	r2, [r7, #15]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	73bb      	strb	r3, [r7, #14]
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	3301      	adds	r3, #1
 800123e:	491a      	ldr	r1, [pc, #104]	; (80012a8 <cJSON_strcasecmp+0xd8>)
 8001240:	440b      	add	r3, r1
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b01      	cmp	r3, #1
 800124a:	d102      	bne.n	8001252 <cJSON_strcasecmp+0x82>
 800124c:	7bbb      	ldrb	r3, [r7, #14]
 800124e:	3320      	adds	r3, #32
 8001250:	e000      	b.n	8001254 <cJSON_strcasecmp+0x84>
 8001252:	7bbb      	ldrb	r3, [r7, #14]
 8001254:	429a      	cmp	r2, r3
 8001256:	d0d0      	beq.n	80011fa <cJSON_strcasecmp+0x2a>
	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	737b      	strb	r3, [r7, #13]
 800125e:	7b7b      	ldrb	r3, [r7, #13]
 8001260:	3301      	adds	r3, #1
 8001262:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <cJSON_strcasecmp+0xd8>)
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b01      	cmp	r3, #1
 800126e:	d103      	bne.n	8001278 <cJSON_strcasecmp+0xa8>
 8001270:	7b7b      	ldrb	r3, [r7, #13]
 8001272:	f103 0220 	add.w	r2, r3, #32
 8001276:	e000      	b.n	800127a <cJSON_strcasecmp+0xaa>
 8001278:	7b7a      	ldrb	r2, [r7, #13]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	733b      	strb	r3, [r7, #12]
 8001280:	7b3b      	ldrb	r3, [r7, #12]
 8001282:	3301      	adds	r3, #1
 8001284:	4908      	ldr	r1, [pc, #32]	; (80012a8 <cJSON_strcasecmp+0xd8>)
 8001286:	440b      	add	r3, r1
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	2b01      	cmp	r3, #1
 8001290:	d102      	bne.n	8001298 <cJSON_strcasecmp+0xc8>
 8001292:	7b3b      	ldrb	r3, [r7, #12]
 8001294:	3320      	adds	r3, #32
 8001296:	e000      	b.n	800129a <cJSON_strcasecmp+0xca>
 8001298:	7b3b      	ldrb	r3, [r7, #12]
 800129a:	1ad3      	subs	r3, r2, r3
}
 800129c:	4618      	mov	r0, r3
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	0801face 	.word	0x0801face

080012ac <cJSON_New_Item>:
	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:free;
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <cJSON_New_Item+0x2c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2028      	movs	r0, #40	; 0x28
 80012b8:	4798      	blx	r3
 80012ba:	6078      	str	r0, [r7, #4]
	if (node) memset(node,0,sizeof(cJSON));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d004      	beq.n	80012cc <cJSON_New_Item+0x20>
 80012c2:	2228      	movs	r2, #40	; 0x28
 80012c4:	2100      	movs	r1, #0
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f015 fdae 	bl	8016e28 <memset>
	return node;
 80012cc:	687b      	ldr	r3, [r7, #4]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000000 	.word	0x20000000

080012dc <cJSON_Delete>:

/* Delete a cJSON structure. */
void cJSON_Delete(cJSON *c)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	cJSON *next;
	while (c)
 80012e4:	e037      	b.n	8001356 <cJSON_Delete+0x7a>
	{
		next=c->next;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	60fb      	str	r3, [r7, #12]
		if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d108      	bne.n	800130a <cJSON_Delete+0x2e>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d004      	beq.n	800130a <cJSON_Delete+0x2e>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ffe9 	bl	80012dc <cJSON_Delete>
		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001312:	2b00      	cmp	r3, #0
 8001314:	d109      	bne.n	800132a <cJSON_Delete+0x4e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <cJSON_Delete+0x4e>
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <cJSON_Delete+0x8c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6912      	ldr	r2, [r2, #16]
 8001326:	4610      	mov	r0, r2
 8001328:	4798      	blx	r3
		if (!(c->type&cJSON_StringIsConst) && c->string) cJSON_free(c->string);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001332:	2b00      	cmp	r3, #0
 8001334:	d109      	bne.n	800134a <cJSON_Delete+0x6e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d005      	beq.n	800134a <cJSON_Delete+0x6e>
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <cJSON_Delete+0x8c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6a12      	ldr	r2, [r2, #32]
 8001346:	4610      	mov	r0, r2
 8001348:	4798      	blx	r3
		cJSON_free(c);
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <cJSON_Delete+0x8c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	4798      	blx	r3
		c=next;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	607b      	str	r3, [r7, #4]
	while (c)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1c4      	bne.n	80012e6 <cJSON_Delete+0xa>
	}
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000004 	.word	0x20000004
 800136c:	00000000 	.word	0x00000000

08001370 <parse_number>:

/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item,const char *num)
{
 8001370:	b5b0      	push	{r4, r5, r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	4b83      	ldr	r3, [pc, #524]	; (8001598 <parse_number+0x228>)
 800138c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	2301      	movs	r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]

	if (*num=='-') sign=-1,num++;	/* Has sign? */
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b2d      	cmp	r3, #45	; 0x2d
 80013aa:	d107      	bne.n	80013bc <parse_number+0x4c>
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b7a      	ldr	r3, [pc, #488]	; (800159c <parse_number+0x22c>)
 80013b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	603b      	str	r3, [r7, #0]
	if (*num=='0') num++;			/* is zero */
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b30      	cmp	r3, #48	; 0x30
 80013c2:	d102      	bne.n	80013ca <parse_number+0x5a>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	603b      	str	r3, [r7, #0]
	if (*num>='1' && *num<='9')	do	n=(n*10.0)+(*num++ -'0');	while (*num>='0' && *num<='9');	/* Number? */
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b30      	cmp	r3, #48	; 0x30
 80013d0:	d928      	bls.n	8001424 <parse_number+0xb4>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b39      	cmp	r3, #57	; 0x39
 80013d8:	d824      	bhi.n	8001424 <parse_number+0xb4>
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	4b70      	ldr	r3, [pc, #448]	; (80015a0 <parse_number+0x230>)
 80013e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013e4:	f7ff f918 	bl	8000618 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4614      	mov	r4, r2
 80013ee:	461d      	mov	r5, r3
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	603a      	str	r2, [r7, #0]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	3b30      	subs	r3, #48	; 0x30
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f8a2 	bl	8000544 <__aeabi_i2d>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4620      	mov	r0, r4
 8001406:	4629      	mov	r1, r5
 8001408:	f7fe ff50 	bl	80002ac <__adddf3>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b2f      	cmp	r3, #47	; 0x2f
 800141a:	d903      	bls.n	8001424 <parse_number+0xb4>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b39      	cmp	r3, #57	; 0x39
 8001422:	d9da      	bls.n	80013da <parse_number+0x6a>
	if (*num=='.' && num[1]>='0' && num[1]<='9') {num++;		do	n=(n*10.0)+(*num++ -'0'),scale--; while (*num>='0' && *num<='9');}	/* Fractional part? */
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b2e      	cmp	r3, #46	; 0x2e
 800142a:	d13c      	bne.n	80014a6 <parse_number+0x136>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	3301      	adds	r3, #1
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b2f      	cmp	r3, #47	; 0x2f
 8001434:	d937      	bls.n	80014a6 <parse_number+0x136>
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b39      	cmp	r3, #57	; 0x39
 800143e:	d832      	bhi.n	80014a6 <parse_number+0x136>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	4b55      	ldr	r3, [pc, #340]	; (80015a0 <parse_number+0x230>)
 800144c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001450:	f7ff f8e2 	bl	8000618 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4614      	mov	r4, r2
 800145a:	461d      	mov	r5, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	603a      	str	r2, [r7, #0]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	3b30      	subs	r3, #48	; 0x30
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f86c 	bl	8000544 <__aeabi_i2d>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4620      	mov	r0, r4
 8001472:	4629      	mov	r1, r5
 8001474:	f7fe ff1a 	bl	80002ac <__adddf3>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	4b44      	ldr	r3, [pc, #272]	; (8001598 <parse_number+0x228>)
 8001486:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800148a:	f7fe ff0d 	bl	80002a8 <__aeabi_dsub>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b2f      	cmp	r3, #47	; 0x2f
 800149c:	d903      	bls.n	80014a6 <parse_number+0x136>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b39      	cmp	r3, #57	; 0x39
 80014a4:	d9cf      	bls.n	8001446 <parse_number+0xd6>
	if (*num=='e' || *num=='E')		/* Exponent? */
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b65      	cmp	r3, #101	; 0x65
 80014ac:	d003      	beq.n	80014b6 <parse_number+0x146>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b45      	cmp	r3, #69	; 0x45
 80014b4:	d12a      	bne.n	800150c <parse_number+0x19c>
	{	num++;if (*num=='+') num++;	else if (*num=='-') signsubscale=-1,num++;		/* With sign? */
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	3301      	adds	r3, #1
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b2b      	cmp	r3, #43	; 0x2b
 80014c2:	d103      	bne.n	80014cc <parse_number+0x15c>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	e017      	b.n	80014fc <parse_number+0x18c>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b2d      	cmp	r3, #45	; 0x2d
 80014d2:	d113      	bne.n	80014fc <parse_number+0x18c>
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	603b      	str	r3, [r7, #0]
		while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
 80014e0:	e00c      	b.n	80014fc <parse_number+0x18c>
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4619      	mov	r1, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	603a      	str	r2, [r7, #0]
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	3b30      	subs	r3, #48	; 0x30
 80014f8:	440b      	add	r3, r1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b2f      	cmp	r3, #47	; 0x2f
 8001502:	d903      	bls.n	800150c <parse_number+0x19c>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b39      	cmp	r3, #57	; 0x39
 800150a:	d9ea      	bls.n	80014e2 <parse_number+0x172>
	}

	n=sign*n*pow(10.0,(scale+subscale*signsubscale));	/* number = +/- number.fraction * 10^+/- exponent */
 800150c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001510:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001514:	f7ff f880 	bl	8000618 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4614      	mov	r4, r2
 800151e:	461d      	mov	r5, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	fb02 f303 	mul.w	r3, r2, r3
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff f80b 	bl	8000544 <__aeabi_i2d>
 800152e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001532:	f7fe febb 	bl	80002ac <__adddf3>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	ec43 2b17 	vmov	d7, r2, r3
 800153e:	eeb0 1a47 	vmov.f32	s2, s14
 8001542:	eef0 1a67 	vmov.f32	s3, s15
 8001546:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001590 <parse_number+0x220>
 800154a:	f019 ff0f 	bl	801b36c <pow>
 800154e:	ec53 2b10 	vmov	r2, r3, d0
 8001552:	4620      	mov	r0, r4
 8001554:	4629      	mov	r1, r5
 8001556:	f7ff f85f 	bl	8000618 <__aeabi_dmul>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	item->valuedouble=n;
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001568:	e9c1 2306 	strd	r2, r3, [r1, #24]
	item->valueint=(int)n;
 800156c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001570:	f7ff fb02 	bl	8000b78 <__aeabi_d2iz>
 8001574:	4602      	mov	r2, r0
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	615a      	str	r2, [r3, #20]
	item->type=cJSON_Number;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2203      	movs	r2, #3
 800157e:	60da      	str	r2, [r3, #12]
	return num;
 8001580:	683b      	ldr	r3, [r7, #0]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3728      	adds	r7, #40	; 0x28
 8001586:	46bd      	mov	sp, r7
 8001588:	bdb0      	pop	{r4, r5, r7, pc}
 800158a:	bf00      	nop
 800158c:	f3af 8000 	nop.w
 8001590:	00000000 	.word	0x00000000
 8001594:	40240000 	.word	0x40240000
 8001598:	3ff00000 	.word	0x3ff00000
 800159c:	bff00000 	.word	0xbff00000
 80015a0:	40240000 	.word	0x40240000

080015a4 <parse_hex4>:
	}
	return str;
}

static unsigned parse_hex4(const char *str)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	unsigned h=0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b2f      	cmp	r3, #47	; 0x2f
 80015b6:	d90b      	bls.n	80015d0 <parse_hex4+0x2c>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b39      	cmp	r3, #57	; 0x39
 80015be:	d807      	bhi.n	80015d0 <parse_hex4+0x2c>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4413      	add	r3, r2
 80015ca:	3b30      	subs	r3, #48	; 0x30
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	e021      	b.n	8001614 <parse_hex4+0x70>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b40      	cmp	r3, #64	; 0x40
 80015d6:	d90b      	bls.n	80015f0 <parse_hex4+0x4c>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b46      	cmp	r3, #70	; 0x46
 80015de:	d807      	bhi.n	80015f0 <parse_hex4+0x4c>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4413      	add	r3, r2
 80015ea:	3b37      	subs	r3, #55	; 0x37
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	e011      	b.n	8001614 <parse_hex4+0x70>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b60      	cmp	r3, #96	; 0x60
 80015f6:	d90b      	bls.n	8001610 <parse_hex4+0x6c>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b66      	cmp	r3, #102	; 0x66
 80015fe:	d807      	bhi.n	8001610 <parse_hex4+0x6c>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4413      	add	r3, r2
 800160a:	3b57      	subs	r3, #87	; 0x57
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	e001      	b.n	8001614 <parse_hex4+0x70>
 8001610:	2300      	movs	r3, #0
 8001612:	e0a8      	b.n	8001766 <parse_hex4+0x1c2>
	h=h<<4;str++;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3301      	adds	r3, #1
 800161e:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b2f      	cmp	r3, #47	; 0x2f
 8001626:	d90b      	bls.n	8001640 <parse_hex4+0x9c>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b39      	cmp	r3, #57	; 0x39
 800162e:	d807      	bhi.n	8001640 <parse_hex4+0x9c>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4413      	add	r3, r2
 800163a:	3b30      	subs	r3, #48	; 0x30
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	e021      	b.n	8001684 <parse_hex4+0xe0>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b40      	cmp	r3, #64	; 0x40
 8001646:	d90b      	bls.n	8001660 <parse_hex4+0xbc>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b46      	cmp	r3, #70	; 0x46
 800164e:	d807      	bhi.n	8001660 <parse_hex4+0xbc>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4413      	add	r3, r2
 800165a:	3b37      	subs	r3, #55	; 0x37
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	e011      	b.n	8001684 <parse_hex4+0xe0>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b60      	cmp	r3, #96	; 0x60
 8001666:	d90b      	bls.n	8001680 <parse_hex4+0xdc>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b66      	cmp	r3, #102	; 0x66
 800166e:	d807      	bhi.n	8001680 <parse_hex4+0xdc>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4413      	add	r3, r2
 800167a:	3b57      	subs	r3, #87	; 0x57
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	e001      	b.n	8001684 <parse_hex4+0xe0>
 8001680:	2300      	movs	r3, #0
 8001682:	e070      	b.n	8001766 <parse_hex4+0x1c2>
	h=h<<4;str++;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3301      	adds	r3, #1
 800168e:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b2f      	cmp	r3, #47	; 0x2f
 8001696:	d90b      	bls.n	80016b0 <parse_hex4+0x10c>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b39      	cmp	r3, #57	; 0x39
 800169e:	d807      	bhi.n	80016b0 <parse_hex4+0x10c>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4413      	add	r3, r2
 80016aa:	3b30      	subs	r3, #48	; 0x30
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	e021      	b.n	80016f4 <parse_hex4+0x150>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b40      	cmp	r3, #64	; 0x40
 80016b6:	d90b      	bls.n	80016d0 <parse_hex4+0x12c>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b46      	cmp	r3, #70	; 0x46
 80016be:	d807      	bhi.n	80016d0 <parse_hex4+0x12c>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4413      	add	r3, r2
 80016ca:	3b37      	subs	r3, #55	; 0x37
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	e011      	b.n	80016f4 <parse_hex4+0x150>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b60      	cmp	r3, #96	; 0x60
 80016d6:	d90b      	bls.n	80016f0 <parse_hex4+0x14c>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b66      	cmp	r3, #102	; 0x66
 80016de:	d807      	bhi.n	80016f0 <parse_hex4+0x14c>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4413      	add	r3, r2
 80016ea:	3b57      	subs	r3, #87	; 0x57
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	e001      	b.n	80016f4 <parse_hex4+0x150>
 80016f0:	2300      	movs	r3, #0
 80016f2:	e038      	b.n	8001766 <parse_hex4+0x1c2>
	h=h<<4;str++;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3301      	adds	r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b2f      	cmp	r3, #47	; 0x2f
 8001706:	d90b      	bls.n	8001720 <parse_hex4+0x17c>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b39      	cmp	r3, #57	; 0x39
 800170e:	d807      	bhi.n	8001720 <parse_hex4+0x17c>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4413      	add	r3, r2
 800171a:	3b30      	subs	r3, #48	; 0x30
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	e021      	b.n	8001764 <parse_hex4+0x1c0>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b40      	cmp	r3, #64	; 0x40
 8001726:	d90b      	bls.n	8001740 <parse_hex4+0x19c>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b46      	cmp	r3, #70	; 0x46
 800172e:	d807      	bhi.n	8001740 <parse_hex4+0x19c>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4413      	add	r3, r2
 800173a:	3b37      	subs	r3, #55	; 0x37
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	e011      	b.n	8001764 <parse_hex4+0x1c0>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b60      	cmp	r3, #96	; 0x60
 8001746:	d90b      	bls.n	8001760 <parse_hex4+0x1bc>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b66      	cmp	r3, #102	; 0x66
 800174e:	d807      	bhi.n	8001760 <parse_hex4+0x1bc>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4413      	add	r3, r2
 800175a:	3b57      	subs	r3, #87	; 0x57
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	e001      	b.n	8001764 <parse_hex4+0x1c0>
 8001760:	2300      	movs	r3, #0
 8001762:	e000      	b.n	8001766 <parse_hex4+0x1c2>
	return h;
 8001764:	68fb      	ldr	r3, [r7, #12]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <parse_string>:

/* Parse the input text into an unescaped cstring, and populate item. */
static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
static const char *parse_string(cJSON *item,const char *str)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	61fb      	str	r3, [r7, #28]
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
	if (*str!='\"') {ep=str;return 0;}	/* not a string! */
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b22      	cmp	r3, #34	; 0x22
 800178e:	d00d      	beq.n	80017ac <parse_string+0x38>
 8001790:	4aa3      	ldr	r2, [pc, #652]	; (8001a20 <parse_string+0x2ac>)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	2300      	movs	r3, #0
 8001798:	e168      	b.n	8001a6c <parse_string+0x2f8>
	
	while (*ptr!='\"' && *ptr && ++len) if (*ptr++ == '\\') ptr++;	/* Skip escaped quotes. */
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	61fa      	str	r2, [r7, #28]
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b5c      	cmp	r3, #92	; 0x5c
 80017a4:	d102      	bne.n	80017ac <parse_string+0x38>
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3301      	adds	r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b22      	cmp	r3, #34	; 0x22
 80017b2:	d009      	beq.n	80017c8 <parse_string+0x54>
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <parse_string+0x54>
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1e8      	bne.n	800179a <parse_string+0x26>
	
	out=(char*)cJSON_malloc(len+1);	/* This is how long we need for the string, roughly. */
 80017c8:	4b96      	ldr	r3, [pc, #600]	; (8001a24 <parse_string+0x2b0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	3201      	adds	r2, #1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4798      	blx	r3
 80017d4:	60f8      	str	r0, [r7, #12]
	if (!out) return 0;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <parse_string+0x6c>
 80017dc:	2300      	movs	r3, #0
 80017de:	e145      	b.n	8001a6c <parse_string+0x2f8>
	
	ptr=str+1;ptr2=out;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	3301      	adds	r3, #1
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	61bb      	str	r3, [r7, #24]
	while (*ptr!='\"' && *ptr)
 80017ea:	e125      	b.n	8001a38 <parse_string+0x2c4>
	{
		if (*ptr!='\\') *ptr2++=*ptr++;
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b5c      	cmp	r3, #92	; 0x5c
 80017f2:	d008      	beq.n	8001806 <parse_string+0x92>
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	1c53      	adds	r3, r2, #1
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	1c59      	adds	r1, r3, #1
 80017fe:	61b9      	str	r1, [r7, #24]
 8001800:	7812      	ldrb	r2, [r2, #0]
 8001802:	701a      	strb	r2, [r3, #0]
 8001804:	e118      	b.n	8001a38 <parse_string+0x2c4>
		else
		{
			ptr++;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3301      	adds	r3, #1
 800180a:	61fb      	str	r3, [r7, #28]
			switch (*ptr)
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	3b62      	subs	r3, #98	; 0x62
 8001812:	2b13      	cmp	r3, #19
 8001814:	f200 80fc 	bhi.w	8001a10 <parse_string+0x29c>
 8001818:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <parse_string+0xac>)
 800181a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181e:	bf00      	nop
 8001820:	08001871 	.word	0x08001871
 8001824:	08001a11 	.word	0x08001a11
 8001828:	08001a11 	.word	0x08001a11
 800182c:	08001a11 	.word	0x08001a11
 8001830:	0800187d 	.word	0x0800187d
 8001834:	08001a11 	.word	0x08001a11
 8001838:	08001a11 	.word	0x08001a11
 800183c:	08001a11 	.word	0x08001a11
 8001840:	08001a11 	.word	0x08001a11
 8001844:	08001a11 	.word	0x08001a11
 8001848:	08001a11 	.word	0x08001a11
 800184c:	08001a11 	.word	0x08001a11
 8001850:	08001889 	.word	0x08001889
 8001854:	08001a11 	.word	0x08001a11
 8001858:	08001a11 	.word	0x08001a11
 800185c:	08001a11 	.word	0x08001a11
 8001860:	08001895 	.word	0x08001895
 8001864:	08001a11 	.word	0x08001a11
 8001868:	080018a1 	.word	0x080018a1
 800186c:	080018ad 	.word	0x080018ad
			{
				case 'b': *ptr2++='\b';	break;
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	61ba      	str	r2, [r7, #24]
 8001876:	2208      	movs	r2, #8
 8001878:	701a      	strb	r2, [r3, #0]
 800187a:	e0da      	b.n	8001a32 <parse_string+0x2be>
				case 'f': *ptr2++='\f';	break;
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	61ba      	str	r2, [r7, #24]
 8001882:	220c      	movs	r2, #12
 8001884:	701a      	strb	r2, [r3, #0]
 8001886:	e0d4      	b.n	8001a32 <parse_string+0x2be>
				case 'n': *ptr2++='\n';	break;
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	61ba      	str	r2, [r7, #24]
 800188e:	220a      	movs	r2, #10
 8001890:	701a      	strb	r2, [r3, #0]
 8001892:	e0ce      	b.n	8001a32 <parse_string+0x2be>
				case 'r': *ptr2++='\r';	break;
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	61ba      	str	r2, [r7, #24]
 800189a:	220d      	movs	r2, #13
 800189c:	701a      	strb	r2, [r3, #0]
 800189e:	e0c8      	b.n	8001a32 <parse_string+0x2be>
				case 't': *ptr2++='\t';	break;
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	61ba      	str	r2, [r7, #24]
 80018a6:	2209      	movs	r2, #9
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	e0c2      	b.n	8001a32 <parse_string+0x2be>
				case 'u':	 /* transcode utf16 to utf8. */
					uc=parse_hex4(ptr+1);ptr+=4;	/* get the unicode char. */
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	3301      	adds	r3, #1
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fe77 	bl	80015a4 <parse_hex4>
 80018b6:	6138      	str	r0, [r7, #16]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	3304      	adds	r3, #4
 80018bc:	61fb      	str	r3, [r7, #28]

					if ((uc>=0xDC00 && uc<=0xDFFF) || uc==0)	break;	/* check for invalid.	*/
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80018c4:	d304      	bcc.n	80018d0 <parse_string+0x15c>
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80018cc:	f0c0 80b0 	bcc.w	8001a30 <parse_string+0x2bc>
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80ac 	beq.w	8001a30 <parse_string+0x2bc>

					if (uc>=0xD800 && uc<=0xDBFF)	/* UTF16 surrogate pairs.	*/
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80018de:	d32d      	bcc.n	800193c <parse_string+0x1c8>
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80018e6:	d229      	bcs.n	800193c <parse_string+0x1c8>
					{
						if (ptr[1]!='\\' || ptr[2]!='u')	break;	/* missing second-half of surrogate.	*/
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	3301      	adds	r3, #1
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b5c      	cmp	r3, #92	; 0x5c
 80018f0:	f040 809e 	bne.w	8001a30 <parse_string+0x2bc>
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	3302      	adds	r3, #2
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b75      	cmp	r3, #117	; 0x75
 80018fc:	f040 8098 	bne.w	8001a30 <parse_string+0x2bc>
						uc2=parse_hex4(ptr+3);ptr+=6;
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	3303      	adds	r3, #3
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fe4d 	bl	80015a4 <parse_hex4>
 800190a:	60b8      	str	r0, [r7, #8]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	3306      	adds	r3, #6
 8001910:	61fb      	str	r3, [r7, #28]
						if (uc2<0xDC00 || uc2>0xDFFF)		break;	/* invalid second-half of surrogate.	*/
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001918:	f0c0 808a 	bcc.w	8001a30 <parse_string+0x2bc>
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001922:	f080 8085 	bcs.w	8001a30 <parse_string+0x2bc>
						uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	029a      	lsls	r2, r3, #10
 800192a:	4b3f      	ldr	r3, [pc, #252]	; (8001a28 <parse_string+0x2b4>)
 800192c:	4013      	ands	r3, r2
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001934:	4313      	orrs	r3, r2
 8001936:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800193a:	613b      	str	r3, [r7, #16]
					}

					len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;
 800193c:	2304      	movs	r3, #4
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	2b7f      	cmp	r3, #127	; 0x7f
 8001944:	d802      	bhi.n	800194c <parse_string+0x1d8>
 8001946:	2301      	movs	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	e00c      	b.n	8001966 <parse_string+0x1f2>
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001952:	d202      	bcs.n	800195a <parse_string+0x1e6>
 8001954:	2302      	movs	r3, #2
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	e005      	b.n	8001966 <parse_string+0x1f2>
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001960:	d201      	bcs.n	8001966 <parse_string+0x1f2>
 8001962:	2303      	movs	r3, #3
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4413      	add	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3b01      	subs	r3, #1
 8001972:	2b03      	cmp	r3, #3
 8001974:	d847      	bhi.n	8001a06 <parse_string+0x292>
 8001976:	a201      	add	r2, pc, #4	; (adr r2, 800197c <parse_string+0x208>)
 8001978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197c:	080019ed 	.word	0x080019ed
 8001980:	080019cd 	.word	0x080019cd
 8001984:	080019ad 	.word	0x080019ad
 8001988:	0800198d 	.word	0x0800198d
					
					switch (len) {
						case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001994:	b2db      	uxtb	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	3a01      	subs	r2, #1
 800199a:	61ba      	str	r2, [r7, #24]
 800199c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	099b      	lsrs	r3, r3, #6
 80019aa:	613b      	str	r3, [r7, #16]
						case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	3a01      	subs	r2, #1
 80019ba:	61ba      	str	r2, [r7, #24]
 80019bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	701a      	strb	r2, [r3, #0]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	099b      	lsrs	r3, r3, #6
 80019ca:	613b      	str	r3, [r7, #16]
						case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	3a01      	subs	r2, #1
 80019da:	61ba      	str	r2, [r7, #24]
 80019dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	099b      	lsrs	r3, r3, #6
 80019ea:	613b      	str	r3, [r7, #16]
						case 1: *--ptr2 =(uc | firstByteMark[len]);
 80019ec:	4a0f      	ldr	r2, [pc, #60]	; (8001a2c <parse_string+0x2b8>)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	4413      	add	r3, r2
 80019f2:	781a      	ldrb	r2, [r3, #0]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	69b9      	ldr	r1, [r7, #24]
 80019fa:	3901      	subs	r1, #1
 80019fc:	61b9      	str	r1, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	701a      	strb	r2, [r3, #0]
					}
					ptr2+=len;
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
					break;
 8001a0e:	e010      	b.n	8001a32 <parse_string+0x2be>
				default:  *ptr2++=*ptr; break;
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	61ba      	str	r2, [r7, #24]
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	7812      	ldrb	r2, [r2, #0]
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	e009      	b.n	8001a32 <parse_string+0x2be>
 8001a1e:	bf00      	nop
 8001a20:	2000026c 	.word	0x2000026c
 8001a24:	20000000 	.word	0x20000000
 8001a28:	000ffc00 	.word	0x000ffc00
 8001a2c:	0801f9b0 	.word	0x0801f9b0
			}
			ptr++;
 8001a30:	bf00      	nop
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3301      	adds	r3, #1
 8001a36:	61fb      	str	r3, [r7, #28]
	while (*ptr!='\"' && *ptr)
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b22      	cmp	r3, #34	; 0x22
 8001a3e:	d004      	beq.n	8001a4a <parse_string+0x2d6>
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f47f aed1 	bne.w	80017ec <parse_string+0x78>
		}
	}
	*ptr2=0;
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
	if (*ptr=='\"') ptr++;
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b22      	cmp	r3, #34	; 0x22
 8001a56:	d102      	bne.n	8001a5e <parse_string+0x2ea>
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	61fb      	str	r3, [r7, #28]
	item->valuestring=out;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	611a      	str	r2, [r3, #16]
	item->type=cJSON_String;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2204      	movs	r2, #4
 8001a68:	60da      	str	r2, [r3, #12]
	return ptr;
 8001a6a:	69fb      	ldr	r3, [r7, #28]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3720      	adds	r7, #32
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <skip>:
static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p);
static const char *parse_object(cJSON *item,const char *value);
static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p);

/* Utility to jump whitespace and cr/lf */
static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	e002      	b.n	8001a84 <skip+0x10>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3301      	adds	r3, #1
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d007      	beq.n	8001a9a <skip+0x26>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <skip+0x26>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b20      	cmp	r3, #32
 8001a98:	d9f1      	bls.n	8001a7e <skip+0xa>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <cJSON_ParseWithOpts>:

/* Parse an object - create a new root, and populate. */
cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
	const char *end=0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
	cJSON *c=cJSON_New_Item();
 8001ab8:	f7ff fbf8 	bl	80012ac <cJSON_New_Item>
 8001abc:	6138      	str	r0, [r7, #16]
	ep=0;
 8001abe:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <cJSON_ParseWithOpts+0x84>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
	if (!c) return 0;       /* memory fail */
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <cJSON_ParseWithOpts+0x26>
 8001aca:	2300      	movs	r3, #0
 8001acc:	e02a      	b.n	8001b24 <cJSON_ParseWithOpts+0x7c>

	end=parse_value(c,skip(value));
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f7ff ffd0 	bl	8001a74 <skip>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	6938      	ldr	r0, [r7, #16]
 8001ada:	f000 f837 	bl	8001b4c <parse_value>
 8001ade:	6178      	str	r0, [r7, #20]
	if (!end)	{cJSON_Delete(c);return 0;}	/* parse failure. ep is set. */
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d104      	bne.n	8001af0 <cJSON_ParseWithOpts+0x48>
 8001ae6:	6938      	ldr	r0, [r7, #16]
 8001ae8:	f7ff fbf8 	bl	80012dc <cJSON_Delete>
 8001aec:	2300      	movs	r3, #0
 8001aee:	e019      	b.n	8001b24 <cJSON_ParseWithOpts+0x7c>

	/* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
	if (require_null_terminated) {end=skip(end);if (*end) {cJSON_Delete(c);ep=end;return 0;}}
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00f      	beq.n	8001b16 <cJSON_ParseWithOpts+0x6e>
 8001af6:	6978      	ldr	r0, [r7, #20]
 8001af8:	f7ff ffbc 	bl	8001a74 <skip>
 8001afc:	6178      	str	r0, [r7, #20]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d007      	beq.n	8001b16 <cJSON_ParseWithOpts+0x6e>
 8001b06:	6938      	ldr	r0, [r7, #16]
 8001b08:	f7ff fbe8 	bl	80012dc <cJSON_Delete>
 8001b0c:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <cJSON_ParseWithOpts+0x84>)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	2300      	movs	r3, #0
 8001b14:	e006      	b.n	8001b24 <cJSON_ParseWithOpts+0x7c>
	if (return_parse_end) *return_parse_end=end;
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <cJSON_ParseWithOpts+0x7a>
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	601a      	str	r2, [r3, #0]
	return c;
 8001b22:	693b      	ldr	r3, [r7, #16]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	2000026c 	.word	0x2000026c

08001b30 <cJSON_Parse>:
/* Default options for cJSON_Parse */
cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ffb3 	bl	8001aa8 <cJSON_ParseWithOpts>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <parse_value>:
}


/* Parser core - when encountering text, process appropriately. */
static const char *parse_value(cJSON *item,const char *value)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
	if (!value)						return 0;	/* Fail on null. */
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <parse_value+0x14>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e060      	b.n	8001c22 <parse_value+0xd6>
	if (!strncmp(value,"null",4))	{ item->type=cJSON_NULL;  return value+4; }
 8001b60:	2204      	movs	r2, #4
 8001b62:	4932      	ldr	r1, [pc, #200]	; (8001c2c <parse_value+0xe0>)
 8001b64:	6838      	ldr	r0, [r7, #0]
 8001b66:	f015 ff37 	bl	80179d8 <strncmp>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d105      	bne.n	8001b7c <parse_value+0x30>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	e052      	b.n	8001c22 <parse_value+0xd6>
	if (!strncmp(value,"false",5))	{ item->type=cJSON_False; return value+5; }
 8001b7c:	2205      	movs	r2, #5
 8001b7e:	492c      	ldr	r1, [pc, #176]	; (8001c30 <parse_value+0xe4>)
 8001b80:	6838      	ldr	r0, [r7, #0]
 8001b82:	f015 ff29 	bl	80179d8 <strncmp>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d105      	bne.n	8001b98 <parse_value+0x4c>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	3305      	adds	r3, #5
 8001b96:	e044      	b.n	8001c22 <parse_value+0xd6>
	if (!strncmp(value,"true",4))	{ item->type=cJSON_True; item->valueint=1;	return value+4; }
 8001b98:	2204      	movs	r2, #4
 8001b9a:	4926      	ldr	r1, [pc, #152]	; (8001c34 <parse_value+0xe8>)
 8001b9c:	6838      	ldr	r0, [r7, #0]
 8001b9e:	f015 ff1b 	bl	80179d8 <strncmp>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d108      	bne.n	8001bba <parse_value+0x6e>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	615a      	str	r2, [r3, #20]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	e033      	b.n	8001c22 <parse_value+0xd6>
	if (*value=='\"')				{ return parse_string(item,value); }
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b22      	cmp	r3, #34	; 0x22
 8001bc0:	d105      	bne.n	8001bce <parse_value+0x82>
 8001bc2:	6839      	ldr	r1, [r7, #0]
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff fdd5 	bl	8001774 <parse_string>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	e029      	b.n	8001c22 <parse_value+0xd6>
	if (*value=='-' || (*value>='0' && *value<='9'))	{ return parse_number(item,value); }
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b2d      	cmp	r3, #45	; 0x2d
 8001bd4:	d007      	beq.n	8001be6 <parse_value+0x9a>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b2f      	cmp	r3, #47	; 0x2f
 8001bdc:	d909      	bls.n	8001bf2 <parse_value+0xa6>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b39      	cmp	r3, #57	; 0x39
 8001be4:	d805      	bhi.n	8001bf2 <parse_value+0xa6>
 8001be6:	6839      	ldr	r1, [r7, #0]
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff fbc1 	bl	8001370 <parse_number>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	e017      	b.n	8001c22 <parse_value+0xd6>
	if (*value=='[')				{ return parse_array(item,value); }
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b5b      	cmp	r3, #91	; 0x5b
 8001bf8:	d105      	bne.n	8001c06 <parse_value+0xba>
 8001bfa:	6839      	ldr	r1, [r7, #0]
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f81d 	bl	8001c3c <parse_array>
 8001c02:	4603      	mov	r3, r0
 8001c04:	e00d      	b.n	8001c22 <parse_value+0xd6>
	if (*value=='{')				{ return parse_object(item,value); }
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b7b      	cmp	r3, #123	; 0x7b
 8001c0c:	d105      	bne.n	8001c1a <parse_value+0xce>
 8001c0e:	6839      	ldr	r1, [r7, #0]
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f889 	bl	8001d28 <parse_object>
 8001c16:	4603      	mov	r3, r0
 8001c18:	e003      	b.n	8001c22 <parse_value+0xd6>

	ep=value;return 0;	/* failure. */
 8001c1a:	4a07      	ldr	r2, [pc, #28]	; (8001c38 <parse_value+0xec>)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	0801c304 	.word	0x0801c304
 8001c30:	0801c30c 	.word	0x0801c30c
 8001c34:	0801c314 	.word	0x0801c314
 8001c38:	2000026c 	.word	0x2000026c

08001c3c <parse_array>:
	return out;
}

/* Build an array from input text. */
static const char *parse_array(cJSON *item,const char *value)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='[')	{ep=value;return 0;}	/* not an array! */
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b5b      	cmp	r3, #91	; 0x5b
 8001c4c:	d004      	beq.n	8001c58 <parse_array+0x1c>
 8001c4e:	4a35      	ldr	r2, [pc, #212]	; (8001d24 <parse_array+0xe8>)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	2300      	movs	r3, #0
 8001c56:	e060      	b.n	8001d1a <parse_array+0xde>

	item->type=cJSON_Array;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2205      	movs	r2, #5
 8001c5c:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	3301      	adds	r3, #1
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff06 	bl	8001a74 <skip>
 8001c68:	6038      	str	r0, [r7, #0]
	if (*value==']') return value+1;	/* empty array. */
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b5d      	cmp	r3, #93	; 0x5d
 8001c70:	d102      	bne.n	8001c78 <parse_array+0x3c>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	3301      	adds	r3, #1
 8001c76:	e050      	b.n	8001d1a <parse_array+0xde>

	item->child=child=cJSON_New_Item();
 8001c78:	f7ff fb18 	bl	80012ac <cJSON_New_Item>
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;		 /* memory fail */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <parse_array+0x54>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e044      	b.n	8001d1a <parse_array+0xde>
	value=skip(parse_value(child,skip(value)));	/* skip any spacing, get the value. */
 8001c90:	6838      	ldr	r0, [r7, #0]
 8001c92:	f7ff feef 	bl	8001a74 <skip>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4619      	mov	r1, r3
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f7ff ff56 	bl	8001b4c <parse_value>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fee6 	bl	8001a74 <skip>
 8001ca8:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d125      	bne.n	8001cfc <parse_array+0xc0>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e032      	b.n	8001d1a <parse_array+0xde>

	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item())) return 0; 	/* memory fail */
 8001cb4:	f7ff fafa 	bl	80012ac <cJSON_New_Item>
 8001cb8:	60b8      	str	r0, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <parse_array+0x88>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	e02a      	b.n	8001d1a <parse_array+0xde>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	60fb      	str	r3, [r7, #12]
		value=skip(parse_value(child,skip(value+1)));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fecb 	bl	8001a74 <skip>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f7ff ff32 	bl	8001b4c <parse_value>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fec2 	bl	8001a74 <skip>
 8001cf0:	6038      	str	r0, [r7, #0]
		if (!value) return 0;	/* memory fail */
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <parse_array+0xc0>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e00e      	b.n	8001d1a <parse_array+0xde>
	while (*value==',')
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b2c      	cmp	r3, #44	; 0x2c
 8001d02:	d0d7      	beq.n	8001cb4 <parse_array+0x78>
	}

	if (*value==']') return value+1;	/* end of array */
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b5d      	cmp	r3, #93	; 0x5d
 8001d0a:	d102      	bne.n	8001d12 <parse_array+0xd6>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	e003      	b.n	8001d1a <parse_array+0xde>
	ep=value;return 0;	/* malformed. */
 8001d12:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <parse_array+0xe8>)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000026c 	.word	0x2000026c

08001d28 <parse_object>:
	return out;	
}

/* Build an object from the text. */
static const char *parse_object(cJSON *item,const char *value)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='{')	{ep=value;return 0;}	/* not an object! */
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b7b      	cmp	r3, #123	; 0x7b
 8001d38:	d004      	beq.n	8001d44 <parse_object+0x1c>
 8001d3a:	4a59      	ldr	r2, [pc, #356]	; (8001ea0 <parse_object+0x178>)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	2300      	movs	r3, #0
 8001d42:	e0a8      	b.n	8001e96 <parse_object+0x16e>
	
	item->type=cJSON_Object;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2206      	movs	r2, #6
 8001d48:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fe90 	bl	8001a74 <skip>
 8001d54:	6038      	str	r0, [r7, #0]
	if (*value=='}') return value+1;	/* empty array. */
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b7d      	cmp	r3, #125	; 0x7d
 8001d5c:	d102      	bne.n	8001d64 <parse_object+0x3c>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	3301      	adds	r3, #1
 8001d62:	e098      	b.n	8001e96 <parse_object+0x16e>
	
	item->child=child=cJSON_New_Item();
 8001d64:	f7ff faa2 	bl	80012ac <cJSON_New_Item>
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <parse_object+0x54>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e08c      	b.n	8001e96 <parse_object+0x16e>
	value=skip(parse_string(child,skip(value)));
 8001d7c:	6838      	ldr	r0, [r7, #0]
 8001d7e:	f7ff fe79 	bl	8001a74 <skip>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4619      	mov	r1, r3
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f7ff fcf4 	bl	8001774 <parse_string>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fe70 	bl	8001a74 <skip>
 8001d94:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <parse_object+0x78>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	e07a      	b.n	8001e96 <parse_object+0x16e>
	child->string=child->valuestring;child->valuestring=0;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	621a      	str	r2, [r3, #32]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
	if (*value!=':') {ep=value;return 0;}	/* fail! */
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b3a      	cmp	r3, #58	; 0x3a
 8001db4:	d004      	beq.n	8001dc0 <parse_object+0x98>
 8001db6:	4a3a      	ldr	r2, [pc, #232]	; (8001ea0 <parse_object+0x178>)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	e06a      	b.n	8001e96 <parse_object+0x16e>
	value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fe55 	bl	8001a74 <skip>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4619      	mov	r1, r3
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f7ff febc 	bl	8001b4c <parse_value>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fe4c 	bl	8001a74 <skip>
 8001ddc:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d149      	bne.n	8001e78 <parse_object+0x150>
 8001de4:	2300      	movs	r3, #0
 8001de6:	e056      	b.n	8001e96 <parse_object+0x16e>
	
	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item()))	return 0; /* memory fail */
 8001de8:	f7ff fa60 	bl	80012ac <cJSON_New_Item>
 8001dec:	60b8      	str	r0, [r7, #8]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <parse_object+0xd0>
 8001df4:	2300      	movs	r3, #0
 8001df6:	e04e      	b.n	8001e96 <parse_object+0x16e>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	60fb      	str	r3, [r7, #12]
		value=skip(parse_string(child,skip(value+1)));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fe31 	bl	8001a74 <skip>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4619      	mov	r1, r3
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f7ff fcac 	bl	8001774 <parse_string>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fe28 	bl	8001a74 <skip>
 8001e24:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <parse_object+0x108>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	e032      	b.n	8001e96 <parse_object+0x16e>
		child->string=child->valuestring;child->valuestring=0;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	621a      	str	r2, [r3, #32]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	611a      	str	r2, [r3, #16]
		if (*value!=':') {ep=value;return 0;}	/* fail! */
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b3a      	cmp	r3, #58	; 0x3a
 8001e44:	d004      	beq.n	8001e50 <parse_object+0x128>
 8001e46:	4a16      	ldr	r2, [pc, #88]	; (8001ea0 <parse_object+0x178>)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	e022      	b.n	8001e96 <parse_object+0x16e>
		value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	3301      	adds	r3, #1
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fe0d 	bl	8001a74 <skip>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7ff fe74 	bl	8001b4c <parse_value>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fe04 	bl	8001a74 <skip>
 8001e6c:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <parse_object+0x150>
 8001e74:	2300      	movs	r3, #0
 8001e76:	e00e      	b.n	8001e96 <parse_object+0x16e>
	while (*value==',')
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b2c      	cmp	r3, #44	; 0x2c
 8001e7e:	d0b3      	beq.n	8001de8 <parse_object+0xc0>
	}
	
	if (*value=='}') return value+1;	/* end of array */
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b7d      	cmp	r3, #125	; 0x7d
 8001e86:	d102      	bne.n	8001e8e <parse_object+0x166>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	e003      	b.n	8001e96 <parse_object+0x16e>
	ep=value;return 0;	/* malformed. */
 8001e8e:	4a04      	ldr	r2, [pc, #16]	; (8001ea0 <parse_object+0x178>)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000026c 	.word	0x2000026c

08001ea4 <cJSON_GetObjectItem>:
}

/* Get Array size/item / object item. */
int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}
cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}
cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e002      	b.n	8001ebc <cJSON_GetObjectItem+0x18>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d008      	beq.n	8001ed4 <cJSON_GetObjectItem+0x30>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	6839      	ldr	r1, [r7, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff f981 	bl	80011d0 <cJSON_strcasecmp>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f0      	bne.n	8001eb6 <cJSON_GetObjectItem+0x12>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <USART_Tx>:
char DBG_buf[DBG_RX_BUFFER_SIZE] = {0,};
char DBG_str[DBG_RX_BUFFER_SIZE] = {0,};

//Функция передачи байта по USART3
void USART_Tx(unsigned char Data)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
	while(!(USART3->SR & USART_SR_TC));
 8001eea:	bf00      	nop
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <USART_Tx+0x2c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f9      	beq.n	8001eec <USART_Tx+0xc>
	USART3->DR = Data;
 8001ef8:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <USART_Tx+0x2c>)
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	6053      	str	r3, [r2, #4]
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40004800 	.word	0x40004800

08001f10 <SEND_str>:
//Функция отправки сткроки
//Принимает строку для отправки
void SEND_str(char * string)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8001f1c:	e009      	b.n	8001f32 <SEND_str+0x22>
	{
		USART_Tx(string[i]);
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	4413      	add	r3, r2
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ffda 	bl	8001ee0 <USART_Tx>
		i++;
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	4413      	add	r3, r2
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1ef      	bne.n	8001f1e <SEND_str+0xe>
	}
}
 8001f3e:	bf00      	nop
 8001f40:	bf00      	nop
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <DEBUG_main>:
void DEBUG_main(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
	if(dbg_available()) //если послали в терминал какую-то команду, то она перенаправиться в модем
 8001f4e:	f003 facb 	bl	80054e8 <dbg_available>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80bf 	beq.w	80020d8 <DEBUG_main+0x190>
	{
		uint16_t i = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	80fb      	strh	r3, [r7, #6]
		uint8_t fdbg = 1;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	717b      	strb	r3, [r7, #5]
		memset(DBG_buf, 0, DBG_RX_BUFFER_SIZE);
 8001f62:	2240      	movs	r2, #64	; 0x40
 8001f64:	2100      	movs	r1, #0
 8001f66:	485e      	ldr	r0, [pc, #376]	; (80020e0 <DEBUG_main+0x198>)
 8001f68:	f014 ff5e 	bl	8016e28 <memset>
		HAL_Delay(50);
 8001f6c:	2032      	movs	r0, #50	; 0x32
 8001f6e:	f003 fb97 	bl	80056a0 <HAL_Delay>

		while(dbg_available())
 8001f72:	e010      	b.n	8001f96 <DEBUG_main+0x4e>
		{
			DBG_buf[i++] = dbg_read();
 8001f74:	f003 fad4 	bl	8005520 <dbg_read>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	80fa      	strh	r2, [r7, #6]
 8001f82:	461a      	mov	r2, r3
 8001f84:	b2c9      	uxtb	r1, r1
 8001f86:	4b56      	ldr	r3, [pc, #344]	; (80020e0 <DEBUG_main+0x198>)
 8001f88:	5499      	strb	r1, [r3, r2]
			if(i > DBG_RX_BUFFER_SIZE - 1)
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	2b3f      	cmp	r3, #63	; 0x3f
 8001f8e:	d808      	bhi.n	8001fa2 <DEBUG_main+0x5a>
				break;
			HAL_Delay(1);
 8001f90:	2001      	movs	r0, #1
 8001f92:	f003 fb85 	bl	80056a0 <HAL_Delay>
		while(dbg_available())
 8001f96:	f003 faa7 	bl	80054e8 <dbg_available>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1e9      	bne.n	8001f74 <DEBUG_main+0x2c>
 8001fa0:	e000      	b.n	8001fa4 <DEBUG_main+0x5c>
				break;
 8001fa2:	bf00      	nop
		}
		clear_string(DBG_buf);
 8001fa4:	484e      	ldr	r0, [pc, #312]	; (80020e0 <DEBUG_main+0x198>)
 8001fa6:	f000 fa39 	bl	800241c <clear_string>
		if(strstr(DBG_buf, "test") != NULL)
 8001faa:	494e      	ldr	r1, [pc, #312]	; (80020e4 <DEBUG_main+0x19c>)
 8001fac:	484c      	ldr	r0, [pc, #304]	; (80020e0 <DEBUG_main+0x198>)
 8001fae:	f015 fd25 	bl	80179fc <strstr>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <DEBUG_main+0x78>
		{
			SEND_str("respone\n");
 8001fb8:	484b      	ldr	r0, [pc, #300]	; (80020e8 <DEBUG_main+0x1a0>)
 8001fba:	f7ff ffa9 	bl	8001f10 <SEND_str>
 8001fbe:	e082      	b.n	80020c6 <DEBUG_main+0x17e>
//		clear_string(DBG_buf);
//		snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s\r\n", DBG_buf);
//		c = strchr(DBG_str, '.') - DBG_str;
//		HAL_UART_Transmit(&huart2, (uint8_t*)DBG_str, c, 1000);	//strlen(DBG_str)

		else if(strstr(DBG_buf, "AIN") != NULL)
 8001fc0:	494a      	ldr	r1, [pc, #296]	; (80020ec <DEBUG_main+0x1a4>)
 8001fc2:	4847      	ldr	r0, [pc, #284]	; (80020e0 <DEBUG_main+0x198>)
 8001fc4:	f015 fd1a 	bl	80179fc <strstr>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <DEBUG_main+0x8e>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"ANALOG\",\"SET\":\"[1,1,0,0,1,1,0,0]\"},\"TIME\":\"1122334455\"}");
 8001fce:	4848      	ldr	r0, [pc, #288]	; (80020f0 <DEBUG_main+0x1a8>)
 8001fd0:	f000 fa92 	bl	80024f8 <json_input>
 8001fd4:	e077      	b.n	80020c6 <DEBUG_main+0x17e>
		}
		else if(strstr(DBG_buf, "DIN") != NULL)
 8001fd6:	4947      	ldr	r1, [pc, #284]	; (80020f4 <DEBUG_main+0x1ac>)
 8001fd8:	4841      	ldr	r0, [pc, #260]	; (80020e0 <DEBUG_main+0x198>)
 8001fda:	f015 fd0f 	bl	80179fc <strstr>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <DEBUG_main+0xa4>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"DIGITAL\",\"SET\":\"[0,0,1,1,0,0,1,1]\"},\"TIME\":\"1122334455\"}");
 8001fe4:	4844      	ldr	r0, [pc, #272]	; (80020f8 <DEBUG_main+0x1b0>)
 8001fe6:	f000 fa87 	bl	80024f8 <json_input>
 8001fea:	e06c      	b.n	80020c6 <DEBUG_main+0x17e>
		}
		else if(strstr(DBG_buf, "OCD") != NULL)
 8001fec:	4943      	ldr	r1, [pc, #268]	; (80020fc <DEBUG_main+0x1b4>)
 8001fee:	483c      	ldr	r0, [pc, #240]	; (80020e0 <DEBUG_main+0x198>)
 8001ff0:	f015 fd04 	bl	80179fc <strstr>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <DEBUG_main+0xba>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"OCD\",\"SET\":\"[0,1,1,0,0,1,1,0]\"},\"TIME\":\"1122334455\"}");
 8001ffa:	4841      	ldr	r0, [pc, #260]	; (8002100 <DEBUG_main+0x1b8>)
 8001ffc:	f000 fa7c 	bl	80024f8 <json_input>
 8002000:	e061      	b.n	80020c6 <DEBUG_main+0x17e>
		}
		//------------------------------------------------Digital-----------------------------------------------
		else if(strstr(DBG_buf, "SP1") != NULL)
 8002002:	4940      	ldr	r1, [pc, #256]	; (8002104 <DEBUG_main+0x1bc>)
 8002004:	4836      	ldr	r0, [pc, #216]	; (80020e0 <DEBUG_main+0x198>)
 8002006:	f015 fcf9 	bl	80179fc <strstr>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <DEBUG_main+0xd0>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_DIDO\",\"D_IN\":\"VHOD1\",\"VAR_IN\":\"0\",\"D_OUT\":\"VIHOD1\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002010:	483d      	ldr	r0, [pc, #244]	; (8002108 <DEBUG_main+0x1c0>)
 8002012:	f000 fa71 	bl	80024f8 <json_input>
 8002016:	e056      	b.n	80020c6 <DEBUG_main+0x17e>
		}
		else if(strstr(DBG_buf, "SP2") != NULL)
 8002018:	493c      	ldr	r1, [pc, #240]	; (800210c <DEBUG_main+0x1c4>)
 800201a:	4831      	ldr	r0, [pc, #196]	; (80020e0 <DEBUG_main+0x198>)
 800201c:	f015 fcee 	bl	80179fc <strstr>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <DEBUG_main+0xe6>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_DIDO\",\"D_IN\":\"VHOD1\",\"VAR_IN\":\"0\",\"D_OUT\":\"VIHOD8\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002026:	483a      	ldr	r0, [pc, #232]	; (8002110 <DEBUG_main+0x1c8>)
 8002028:	f000 fa66 	bl	80024f8 <json_input>
 800202c:	e04b      	b.n	80020c6 <DEBUG_main+0x17e>
		}
		//----------------------------------------------End_Digital---------------------------------------------
		//------------------------------------------------Analog------------------------------------------------
		else if(strstr(DBG_buf, "SP3") != NULL)
 800202e:	4939      	ldr	r1, [pc, #228]	; (8002114 <DEBUG_main+0x1cc>)
 8002030:	482b      	ldr	r0, [pc, #172]	; (80020e0 <DEBUG_main+0x198>)
 8002032:	f015 fce3 	bl	80179fc <strstr>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <DEBUG_main+0xfc>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_VAIDO\",\"A_IN\":\"VHOD1\",\"RANGE_LOW\":\"2.5\",\"RANGE_HIGH\":\"3.5\",\"D_OUT\":\"VIHOD3\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 800203c:	4836      	ldr	r0, [pc, #216]	; (8002118 <DEBUG_main+0x1d0>)
 800203e:	f000 fa5b 	bl	80024f8 <json_input>
 8002042:	e040      	b.n	80020c6 <DEBUG_main+0x17e>
		}
		else if(strstr(DBG_buf, "SP4") != NULL)
 8002044:	4935      	ldr	r1, [pc, #212]	; (800211c <DEBUG_main+0x1d4>)
 8002046:	4826      	ldr	r0, [pc, #152]	; (80020e0 <DEBUG_main+0x198>)
 8002048:	f015 fcd8 	bl	80179fc <strstr>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <DEBUG_main+0x112>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_VAIDO\",\"A_IN\":\"VHOD1\",\"RANGE_LOW\":\"0\",\"RANGE_HIGH\":\"1\",\"D_OUT\":\"VIHOD4\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8002052:	4833      	ldr	r0, [pc, #204]	; (8002120 <DEBUG_main+0x1d8>)
 8002054:	f000 fa50 	bl	80024f8 <json_input>
 8002058:	e035      	b.n	80020c6 <DEBUG_main+0x17e>
		}
		//----------------------------------------------End_Analog----------------------------------------------
		//--------------------------------------------------PWM-------------------------------------------------
		else if(strstr(DBG_buf, "SP5") != NULL)
 800205a:	4932      	ldr	r1, [pc, #200]	; (8002124 <DEBUG_main+0x1dc>)
 800205c:	4820      	ldr	r0, [pc, #128]	; (80020e0 <DEBUG_main+0x198>)
 800205e:	f015 fccd 	bl	80179fc <strstr>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <DEBUG_main+0x128>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM1\",\"D_CYCLE\":\"10\"},\"TIME\":\"1122334455\"}");
 8002068:	482f      	ldr	r0, [pc, #188]	; (8002128 <DEBUG_main+0x1e0>)
 800206a:	f000 fa45 	bl	80024f8 <json_input>
 800206e:	e02a      	b.n	80020c6 <DEBUG_main+0x17e>
		}
		else if(strstr(DBG_buf, "SP6") != NULL)
 8002070:	492e      	ldr	r1, [pc, #184]	; (800212c <DEBUG_main+0x1e4>)
 8002072:	481b      	ldr	r0, [pc, #108]	; (80020e0 <DEBUG_main+0x198>)
 8002074:	f015 fcc2 	bl	80179fc <strstr>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <DEBUG_main+0x13e>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM2\",\"D_CYCLE\":\"25\"},\"TIME\":\"1122334455\"}");
 800207e:	482c      	ldr	r0, [pc, #176]	; (8002130 <DEBUG_main+0x1e8>)
 8002080:	f000 fa3a 	bl	80024f8 <json_input>
 8002084:	e01f      	b.n	80020c6 <DEBUG_main+0x17e>
		}
		else if(strstr(DBG_buf, "SP7") != NULL)
 8002086:	492b      	ldr	r1, [pc, #172]	; (8002134 <DEBUG_main+0x1ec>)
 8002088:	4815      	ldr	r0, [pc, #84]	; (80020e0 <DEBUG_main+0x198>)
 800208a:	f015 fcb7 	bl	80179fc <strstr>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <DEBUG_main+0x154>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM3\",\"D_CYCLE\":\"50\"},\"TIME\":\"1122334455\"}");
 8002094:	4828      	ldr	r0, [pc, #160]	; (8002138 <DEBUG_main+0x1f0>)
 8002096:	f000 fa2f 	bl	80024f8 <json_input>
 800209a:	e014      	b.n	80020c6 <DEBUG_main+0x17e>
		}
		else if(strstr(DBG_buf, "SP8") != NULL)
 800209c:	4927      	ldr	r1, [pc, #156]	; (800213c <DEBUG_main+0x1f4>)
 800209e:	4810      	ldr	r0, [pc, #64]	; (80020e0 <DEBUG_main+0x198>)
 80020a0:	f015 fcac 	bl	80179fc <strstr>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <DEBUG_main+0x16a>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM4\",\"D_CYCLE\":\"90\"},\"TIME\":\"1122334455\"}");
 80020aa:	4825      	ldr	r0, [pc, #148]	; (8002140 <DEBUG_main+0x1f8>)
 80020ac:	f000 fa24 	bl	80024f8 <json_input>
 80020b0:	e009      	b.n	80020c6 <DEBUG_main+0x17e>
		}
		else if(strstr(DBG_buf, "SP9") != NULL)
 80020b2:	4924      	ldr	r1, [pc, #144]	; (8002144 <DEBUG_main+0x1fc>)
 80020b4:	480a      	ldr	r0, [pc, #40]	; (80020e0 <DEBUG_main+0x198>)
 80020b6:	f015 fca1 	bl	80179fc <strstr>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <DEBUG_main+0x17e>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_PWM\",\"PWM_OUT\":\"PWM1\",\"D_CYCLE\":\"50\"},\"TIME\":\"1122334455\"}");
 80020c0:	4821      	ldr	r0, [pc, #132]	; (8002148 <DEBUG_main+0x200>)
 80020c2:	f000 fa19 	bl	80024f8 <json_input>
		}
		//------------------------------------------------End_PWM-----------------------------------------------
		if(fdbg)
 80020c6:	797b      	ldrb	r3, [r7, #5]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <DEBUG_main+0x190>
		{
			snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s\n", DBG_buf);
 80020cc:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <DEBUG_main+0x198>)
 80020ce:	4a1f      	ldr	r2, [pc, #124]	; (800214c <DEBUG_main+0x204>)
 80020d0:	2140      	movs	r1, #64	; 0x40
 80020d2:	481f      	ldr	r0, [pc, #124]	; (8002150 <DEBUG_main+0x208>)
 80020d4:	f015 fc2c 	bl	8017930 <sniprintf>

			//json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"DIGITAL\",\"SET\":\"[0,1,1,0,0,0,0,1]\"},\"TIME\":\"1122334455\"}");
		}
	}
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000270 	.word	0x20000270
 80020e4:	0801c320 	.word	0x0801c320
 80020e8:	0801c328 	.word	0x0801c328
 80020ec:	0801c334 	.word	0x0801c334
 80020f0:	0801c338 	.word	0x0801c338
 80020f4:	0801c3a4 	.word	0x0801c3a4
 80020f8:	0801c3a8 	.word	0x0801c3a8
 80020fc:	0801c418 	.word	0x0801c418
 8002100:	0801c41c 	.word	0x0801c41c
 8002104:	0801c488 	.word	0x0801c488
 8002108:	0801c48c 	.word	0x0801c48c
 800210c:	0801c518 	.word	0x0801c518
 8002110:	0801c51c 	.word	0x0801c51c
 8002114:	0801c5a8 	.word	0x0801c5a8
 8002118:	0801c5ac 	.word	0x0801c5ac
 800211c:	0801c654 	.word	0x0801c654
 8002120:	0801c658 	.word	0x0801c658
 8002124:	0801c6fc 	.word	0x0801c6fc
 8002128:	0801c700 	.word	0x0801c700
 800212c:	0801c770 	.word	0x0801c770
 8002130:	0801c774 	.word	0x0801c774
 8002134:	0801c7e4 	.word	0x0801c7e4
 8002138:	0801c7e8 	.word	0x0801c7e8
 800213c:	0801c858 	.word	0x0801c858
 8002140:	0801c85c 	.word	0x0801c85c
 8002144:	0801c8cc 	.word	0x0801c8cc
 8002148:	0801c8d0 	.word	0x0801c8d0
 800214c:	0801c940 	.word	0x0801c940
 8002150:	200002b0 	.word	0x200002b0

08002154 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	4b23      	ldr	r3, [pc, #140]	; (80021ec <MX_DMA_Init+0x98>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a22      	ldr	r2, [pc, #136]	; (80021ec <MX_DMA_Init+0x98>)
 8002164:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <MX_DMA_Init+0x98>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	603b      	str	r3, [r7, #0]
 800217a:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <MX_DMA_Init+0x98>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a1b      	ldr	r2, [pc, #108]	; (80021ec <MX_DMA_Init+0x98>)
 8002180:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b19      	ldr	r3, [pc, #100]	; (80021ec <MX_DMA_Init+0x98>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	2100      	movs	r1, #0
 8002196:	200d      	movs	r0, #13
 8002198:	f003 ff48 	bl	800602c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800219c:	200d      	movs	r0, #13
 800219e:	f003 ff61 	bl	8006064 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	200f      	movs	r0, #15
 80021a8:	f003 ff40 	bl	800602c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80021ac:	200f      	movs	r0, #15
 80021ae:	f003 ff59 	bl	8006064 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2100      	movs	r1, #0
 80021b6:	2010      	movs	r0, #16
 80021b8:	f003 ff38 	bl	800602c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80021bc:	2010      	movs	r0, #16
 80021be:	f003 ff51 	bl	8006064 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2100      	movs	r1, #0
 80021c6:	202f      	movs	r0, #47	; 0x2f
 80021c8:	f003 ff30 	bl	800602c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80021cc:	202f      	movs	r0, #47	; 0x2f
 80021ce:	f003 ff49 	bl	8006064 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2100      	movs	r1, #0
 80021d6:	2038      	movs	r0, #56	; 0x38
 80021d8:	f003 ff28 	bl	800602c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021dc:	2038      	movs	r0, #56	; 0x38
 80021de:	f003 ff41 	bl	8006064 <HAL_NVIC_EnableIRQ>

}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800

080021f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08c      	sub	sp, #48	; 0x30
 80021f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f6:	f107 031c 	add.w	r3, r7, #28
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]
 8002204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	4b7d      	ldr	r3, [pc, #500]	; (8002400 <MX_GPIO_Init+0x210>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a7c      	ldr	r2, [pc, #496]	; (8002400 <MX_GPIO_Init+0x210>)
 8002210:	f043 0310 	orr.w	r3, r3, #16
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b7a      	ldr	r3, [pc, #488]	; (8002400 <MX_GPIO_Init+0x210>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	61bb      	str	r3, [r7, #24]
 8002220:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	4b76      	ldr	r3, [pc, #472]	; (8002400 <MX_GPIO_Init+0x210>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a75      	ldr	r2, [pc, #468]	; (8002400 <MX_GPIO_Init+0x210>)
 800222c:	f043 0304 	orr.w	r3, r3, #4
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b73      	ldr	r3, [pc, #460]	; (8002400 <MX_GPIO_Init+0x210>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	4b6f      	ldr	r3, [pc, #444]	; (8002400 <MX_GPIO_Init+0x210>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4a6e      	ldr	r2, [pc, #440]	; (8002400 <MX_GPIO_Init+0x210>)
 8002248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4b6c      	ldr	r3, [pc, #432]	; (8002400 <MX_GPIO_Init+0x210>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b68      	ldr	r3, [pc, #416]	; (8002400 <MX_GPIO_Init+0x210>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a67      	ldr	r2, [pc, #412]	; (8002400 <MX_GPIO_Init+0x210>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b65      	ldr	r3, [pc, #404]	; (8002400 <MX_GPIO_Init+0x210>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	4b61      	ldr	r3, [pc, #388]	; (8002400 <MX_GPIO_Init+0x210>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4a60      	ldr	r2, [pc, #384]	; (8002400 <MX_GPIO_Init+0x210>)
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4b5e      	ldr	r3, [pc, #376]	; (8002400 <MX_GPIO_Init+0x210>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	4b5a      	ldr	r3, [pc, #360]	; (8002400 <MX_GPIO_Init+0x210>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a59      	ldr	r2, [pc, #356]	; (8002400 <MX_GPIO_Init+0x210>)
 800229c:	f043 0308 	orr.w	r3, r3, #8
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b57      	ldr	r3, [pc, #348]	; (8002400 <MX_GPIO_Init+0x210>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLAG_MCU_GPIO_Port, FLAG_MCU_Pin, GPIO_PIN_SET);
 80022ae:	2201      	movs	r2, #1
 80022b0:	2140      	movs	r1, #64	; 0x40
 80022b2:	4854      	ldr	r0, [pc, #336]	; (8002404 <MX_GPIO_Init+0x214>)
 80022b4:	f005 fccc 	bl	8007c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRON_GPIO_Port, PWRON_Pin, GPIO_PIN_RESET);
 80022b8:	2200      	movs	r2, #0
 80022ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022be:	4852      	ldr	r0, [pc, #328]	; (8002408 <MX_GPIO_Init+0x218>)
 80022c0:	f005 fcc6 	bl	8007c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, GPIO_PIN_RESET);
 80022c4:	2200      	movs	r2, #0
 80022c6:	2101      	movs	r1, #1
 80022c8:	4850      	ldr	r0, [pc, #320]	; (800240c <MX_GPIO_Init+0x21c>)
 80022ca:	f005 fcc1 	bl	8007c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, O1_Pin|O2_Pin|CS1__Pin, GPIO_PIN_RESET);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2143      	movs	r1, #67	; 0x43
 80022d2:	484f      	ldr	r0, [pc, #316]	; (8002410 <MX_GPIO_Init+0x220>)
 80022d4:	f005 fcbc 	bl	8007c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, O3_Pin|O4_Pin|O5_Pin|O6_Pin
 80022d8:	2200      	movs	r2, #0
 80022da:	f64f 7183 	movw	r1, #65411	; 0xff83
 80022de:	4849      	ldr	r0, [pc, #292]	; (8002404 <MX_GPIO_Init+0x214>)
 80022e0:	f005 fcb6 	bl	8007c50 <HAL_GPIO_WritePin>
                          |O7_Pin|S2_Pin|S3_Pin|S4_Pin
                          |S1_Pin|WP__Pin|CS2__Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PKEY_GPIO_Port, PKEY_Pin, GPIO_PIN_SET);
 80022e4:	2201      	movs	r2, #1
 80022e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ea:	4848      	ldr	r0, [pc, #288]	; (800240c <MX_GPIO_Init+0x21c>)
 80022ec:	f005 fcb0 	bl	8007c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WR0_Pin|WR1_Pin|PWR0_Pin|PWR1_Pin
 80022f0:	2200      	movs	r2, #0
 80022f2:	219f      	movs	r1, #159	; 0x9f
 80022f4:	4847      	ldr	r0, [pc, #284]	; (8002414 <MX_GPIO_Init+0x224>)
 80022f6:	f005 fcab 	bl	8007c50 <HAL_GPIO_WritePin>
                          |RS485_DE_Pin|RS485_RE__Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FLAG_MCU_Pin|O3_Pin|O4_Pin|O5_Pin
 80022fa:	f64f 73c3 	movw	r3, #65475	; 0xffc3
 80022fe:	61fb      	str	r3, [r7, #28]
                          |O6_Pin|O7_Pin|S2_Pin|S3_Pin
                          |S4_Pin|S1_Pin|WP__Pin|CS2__Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002300:	2301      	movs	r3, #1
 8002302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002308:	2303      	movs	r3, #3
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	4619      	mov	r1, r3
 8002312:	483c      	ldr	r0, [pc, #240]	; (8002404 <MX_GPIO_Init+0x214>)
 8002314:	f005 fae8 	bl	80078e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWRON_Pin;
 8002318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800231c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231e:	2301      	movs	r3, #1
 8002320:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002326:	2300      	movs	r3, #0
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PWRON_GPIO_Port, &GPIO_InitStruct);
 800232a:	f107 031c 	add.w	r3, r7, #28
 800232e:	4619      	mov	r1, r3
 8002330:	4835      	ldr	r0, [pc, #212]	; (8002408 <MX_GPIO_Init+0x218>)
 8002332:	f005 fad9 	bl	80078e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS__M_Pin;
 8002336:	2301      	movs	r3, #1
 8002338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CS__M_GPIO_Port, &GPIO_InitStruct);
 8002342:	f107 031c 	add.w	r3, r7, #28
 8002346:	4619      	mov	r1, r3
 8002348:	482f      	ldr	r0, [pc, #188]	; (8002408 <MX_GPIO_Init+0x218>)
 800234a:	f005 facd 	bl	80078e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = O0_Pin|PKEY_Pin;
 800234e:	f640 0301 	movw	r3, #2049	; 0x801
 8002352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002354:	2301      	movs	r3, #1
 8002356:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235c:	2303      	movs	r3, #3
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002360:	f107 031c 	add.w	r3, r7, #28
 8002364:	4619      	mov	r1, r3
 8002366:	4829      	ldr	r0, [pc, #164]	; (800240c <MX_GPIO_Init+0x21c>)
 8002368:	f005 fabe 	bl	80078e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = O1_Pin|O2_Pin|CS1__Pin;
 800236c:	2343      	movs	r3, #67	; 0x43
 800236e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002370:	2301      	movs	r3, #1
 8002372:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002378:	2303      	movs	r3, #3
 800237a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237c:	f107 031c 	add.w	r3, r7, #28
 8002380:	4619      	mov	r1, r3
 8002382:	4823      	ldr	r0, [pc, #140]	; (8002410 <MX_GPIO_Init+0x220>)
 8002384:	f005 fab0 	bl	80078e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = IN7_Pin|IN6_Pin|IN5_Pin|IN4_Pin
 8002388:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800238c:	61fb      	str	r3, [r7, #28]
                          |IN3_Pin|IN2_Pin|IN1_Pin|IN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800238e:	4b22      	ldr	r3, [pc, #136]	; (8002418 <MX_GPIO_Init+0x228>)
 8002390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002396:	f107 031c 	add.w	r3, r7, #28
 800239a:	4619      	mov	r1, r3
 800239c:	481d      	ldr	r0, [pc, #116]	; (8002414 <MX_GPIO_Init+0x224>)
 800239e:	f005 faa3 	bl	80078e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = WR0_Pin|WR1_Pin|PWR0_Pin|PWR1_Pin
 80023a2:	239f      	movs	r3, #159	; 0x9f
 80023a4:	61fb      	str	r3, [r7, #28]
                          |RS485_DE_Pin|RS485_RE__Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a6:	2301      	movs	r3, #1
 80023a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ae:	2303      	movs	r3, #3
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023b2:	f107 031c 	add.w	r3, r7, #28
 80023b6:	4619      	mov	r1, r3
 80023b8:	4816      	ldr	r0, [pc, #88]	; (8002414 <MX_GPIO_Init+0x224>)
 80023ba:	f005 fa95 	bl	80078e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CD_Pin;
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c2:	2300      	movs	r3, #0
 80023c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 80023ca:	f107 031c 	add.w	r3, r7, #28
 80023ce:	4619      	mov	r1, r3
 80023d0:	480f      	ldr	r0, [pc, #60]	; (8002410 <MX_GPIO_Init+0x220>)
 80023d2:	f005 fa89 	bl	80078e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2100      	movs	r1, #0
 80023da:	2017      	movs	r0, #23
 80023dc:	f003 fe26 	bl	800602c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80023e0:	2017      	movs	r0, #23
 80023e2:	f003 fe3f 	bl	8006064 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	2028      	movs	r0, #40	; 0x28
 80023ec:	f003 fe1e 	bl	800602c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023f0:	2028      	movs	r0, #40	; 0x28
 80023f2:	f003 fe37 	bl	8006064 <HAL_NVIC_EnableIRQ>

}
 80023f6:	bf00      	nop
 80023f8:	3730      	adds	r7, #48	; 0x30
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40023800 	.word	0x40023800
 8002404:	40021000 	.word	0x40021000
 8002408:	40020800 	.word	0x40020800
 800240c:	40020000 	.word	0x40020000
 8002410:	40020400 	.word	0x40020400
 8002414:	40020c00 	.word	0x40020c00
 8002418:	10310000 	.word	0x10310000

0800241c <clear_string>:
	  }
  }
}
//Функция удаления символов \r и \n из строки
void clear_string(char *src)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
	char *dst = NULL;
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
	if(!src) return;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d02f      	beq.n	800248e <clear_string+0x72>
	uint8_t i = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	72fb      	strb	r3, [r7, #11]

	for(dst = src; *src; src++)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	e022      	b.n	800247e <clear_string+0x62>
	{
		if(i < 2 && (*src == '\n' || *src == '\r'))
 8002438:	7afb      	ldrb	r3, [r7, #11]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d80b      	bhi.n	8002456 <clear_string+0x3a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b0a      	cmp	r3, #10
 8002444:	d003      	beq.n	800244e <clear_string+0x32>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b0d      	cmp	r3, #13
 800244c:	d103      	bne.n	8002456 <clear_string+0x3a>
		{
			i++;
 800244e:	7afb      	ldrb	r3, [r7, #11]
 8002450:	3301      	adds	r3, #1
 8002452:	72fb      	strb	r3, [r7, #11]
			continue;
 8002454:	e010      	b.n	8002478 <clear_string+0x5c>
		}
		else if(*src == '\n' || *src == '\r') *src = ' ';
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b0a      	cmp	r3, #10
 800245c:	d003      	beq.n	8002466 <clear_string+0x4a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b0d      	cmp	r3, #13
 8002464:	d102      	bne.n	800246c <clear_string+0x50>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2220      	movs	r2, #32
 800246a:	701a      	strb	r2, [r3, #0]

		*dst++ = *src;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	60fa      	str	r2, [r7, #12]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	7812      	ldrb	r2, [r2, #0]
 8002476:	701a      	strb	r2, [r3, #0]
	for(dst = src; *src; src++)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3301      	adds	r3, #1
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1d8      	bne.n	8002438 <clear_string+0x1c>
	}

	*dst = 0;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
 800248c:	e000      	b.n	8002490 <clear_string+0x74>
	if(!src) return;
 800248e:	bf00      	nop
}
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <parseValue>:

//Функция разбора подстроки значений параметра
//Принимает указатель на массив символов со значениями параметра
//Ворзвращает указатель на разобранный массив символов со значениями параметра
char *parseValue(char *value)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	char *tmp;
	for(int i = 1, j = 0; i < strlen(value); i++)
 80024a4:	2301      	movs	r3, #1
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	2300      	movs	r3, #0
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	e013      	b.n	80024d6 <parseValue+0x3a>
	{
		if(i % 2)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00b      	beq.n	80024d0 <parseValue+0x34>
		{
			paramValue[j] = value[i];
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	7819      	ldrb	r1, [r3, #0]
 80024c0:	4a0c      	ldr	r2, [pc, #48]	; (80024f4 <parseValue+0x58>)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4413      	add	r3, r2
 80024c6:	460a      	mov	r2, r1
 80024c8:	701a      	strb	r2, [r3, #0]
			j++;
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	3301      	adds	r3, #1
 80024ce:	613b      	str	r3, [r7, #16]
	for(int i = 1, j = 0; i < strlen(value); i++)
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	3301      	adds	r3, #1
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7fd fe84 	bl	80001e4 <strlen>
 80024dc:	4602      	mov	r2, r0
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d8e4      	bhi.n	80024ae <parseValue+0x12>
		}
	}
	tmp = paramValue;
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <parseValue+0x58>)
 80024e6:	60fb      	str	r3, [r7, #12]

	return tmp;
 80024e8:	68fb      	ldr	r3, [r7, #12]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200007e4 	.word	0x200007e4

080024f8 <json_input>:
//Функция разбора полученной строки
void json_input(char *text)
{
 80024f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024fa:	ed2d 8b04 	vpush	{d8-d9}
 80024fe:	b09f      	sub	sp, #124	; 0x7c
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	cJSON *json = cJSON_Parse(text);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff fb13 	bl	8001b30 <cJSON_Parse>
 800250a:	66b8      	str	r0, [r7, #104]	; 0x68

	cJSON *stime = cJSON_GetObjectItem(json, "TIME");
 800250c:	49a4      	ldr	r1, [pc, #656]	; (80027a0 <json_input+0x2a8>)
 800250e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002510:	f7ff fcc8 	bl	8001ea4 <cJSON_GetObjectItem>
 8002514:	6678      	str	r0, [r7, #100]	; 0x64
	TIME = stime->valuestring;
 8002516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	4aa2      	ldr	r2, [pc, #648]	; (80027a4 <json_input+0x2ac>)
 800251c:	6013      	str	r3, [r2, #0]
	Time_Server = atoi(TIME);
 800251e:	4ba1      	ldr	r3, [pc, #644]	; (80027a4 <json_input+0x2ac>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f014 fc11 	bl	8016d4a <atoi>
 8002528:	4603      	mov	r3, r0
 800252a:	4a9f      	ldr	r2, [pc, #636]	; (80027a8 <json_input+0x2b0>)
 800252c:	6013      	str	r3, [r2, #0]
	if(Time_Server > Time_Client)
 800252e:	4b9e      	ldr	r3, [pc, #632]	; (80027a8 <json_input+0x2b0>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	4b9e      	ldr	r3, [pc, #632]	; (80027ac <json_input+0x2b4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	f340 8478 	ble.w	8002e2c <json_input+0x934>
	{
		cJSON *sInstruction = cJSON_GetObjectItem(json, "INSTRUCTION");
 800253c:	499c      	ldr	r1, [pc, #624]	; (80027b0 <json_input+0x2b8>)
 800253e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002540:	f7ff fcb0 	bl	8001ea4 <cJSON_GetObjectItem>
 8002544:	6638      	str	r0, [r7, #96]	; 0x60
		INSTRUCTION = sInstruction->valuestring;
 8002546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	4a9a      	ldr	r2, [pc, #616]	; (80027b4 <json_input+0x2bc>)
 800254c:	6013      	str	r3, [r2, #0]

		if(strcmp(INSTRUCTION, "SET_PROGRAMM") == 0)
 800254e:	4b99      	ldr	r3, [pc, #612]	; (80027b4 <json_input+0x2bc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4999      	ldr	r1, [pc, #612]	; (80027b8 <json_input+0x2c0>)
 8002554:	4618      	mov	r0, r3
 8002556:	f7fd fe3b 	bl	80001d0 <strcmp>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	f040 8331 	bne.w	8002bc4 <json_input+0x6cc>
		{
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 8002562:	4996      	ldr	r1, [pc, #600]	; (80027bc <json_input+0x2c4>)
 8002564:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002566:	f7ff fc9d 	bl	8001ea4 <cJSON_GetObjectItem>
 800256a:	4603      	mov	r3, r0
 800256c:	4994      	ldr	r1, [pc, #592]	; (80027c0 <json_input+0x2c8>)
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fc98 	bl	8001ea4 <cJSON_GetObjectItem>
 8002574:	64f8      	str	r0, [r7, #76]	; 0x4c
			TYPE = sType->valuestring;
 8002576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	4a92      	ldr	r2, [pc, #584]	; (80027c4 <json_input+0x2cc>)
 800257c:	6013      	str	r3, [r2, #0]

			if(strcmp(TYPE, "SET_DIDO") == 0)	//Включить/выключить цифровой выход если цифровой вход = значение(уровень)
 800257e:	4b91      	ldr	r3, [pc, #580]	; (80027c4 <json_input+0x2cc>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4991      	ldr	r1, [pc, #580]	; (80027c8 <json_input+0x2d0>)
 8002584:	4618      	mov	r0, r3
 8002586:	f7fd fe23 	bl	80001d0 <strcmp>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	f040 80a7 	bne.w	80026e0 <json_input+0x1e8>
			{
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_IN");
 8002592:	498a      	ldr	r1, [pc, #552]	; (80027bc <json_input+0x2c4>)
 8002594:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002596:	f7ff fc85 	bl	8001ea4 <cJSON_GetObjectItem>
 800259a:	4603      	mov	r3, r0
 800259c:	498b      	ldr	r1, [pc, #556]	; (80027cc <json_input+0x2d4>)
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fc80 	bl	8001ea4 <cJSON_GetObjectItem>
 80025a4:	61b8      	str	r0, [r7, #24]
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_IN");
 80025a6:	4985      	ldr	r1, [pc, #532]	; (80027bc <json_input+0x2c4>)
 80025a8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80025aa:	f7ff fc7b 	bl	8001ea4 <cJSON_GetObjectItem>
 80025ae:	4603      	mov	r3, r0
 80025b0:	4987      	ldr	r1, [pc, #540]	; (80027d0 <json_input+0x2d8>)
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fc76 	bl	8001ea4 <cJSON_GetObjectItem>
 80025b8:	6178      	str	r0, [r7, #20]
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 80025ba:	4980      	ldr	r1, [pc, #512]	; (80027bc <json_input+0x2c4>)
 80025bc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80025be:	f7ff fc71 	bl	8001ea4 <cJSON_GetObjectItem>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4983      	ldr	r1, [pc, #524]	; (80027d4 <json_input+0x2dc>)
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fc6c 	bl	8001ea4 <cJSON_GetObjectItem>
 80025cc:	6138      	str	r0, [r7, #16]
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 80025ce:	497b      	ldr	r1, [pc, #492]	; (80027bc <json_input+0x2c4>)
 80025d0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80025d2:	f7ff fc67 	bl	8001ea4 <cJSON_GetObjectItem>
 80025d6:	4603      	mov	r3, r0
 80025d8:	497f      	ldr	r1, [pc, #508]	; (80027d8 <json_input+0x2e0>)
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fc62 	bl	8001ea4 <cJSON_GetObjectItem>
 80025e0:	60f8      	str	r0, [r7, #12]

				D_IN = s1->valuestring;
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	4a7d      	ldr	r2, [pc, #500]	; (80027dc <json_input+0x2e4>)
 80025e8:	6013      	str	r3, [r2, #0]
				VAR_IN = s2->valuestring;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	4a7c      	ldr	r2, [pc, #496]	; (80027e0 <json_input+0x2e8>)
 80025f0:	6013      	str	r3, [r2, #0]
				D_OUT = s3->valuestring;
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	4a7b      	ldr	r2, [pc, #492]	; (80027e4 <json_input+0x2ec>)
 80025f8:	6013      	str	r3, [r2, #0]
				VAR_OUT = s4->valuestring;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	4a7a      	ldr	r2, [pc, #488]	; (80027e8 <json_input+0x2f0>)
 8002600:	6013      	str	r3, [r2, #0]

				set_dido(D_IN, (uint8_t)(atoi(VAR_IN)), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 8002602:	4b76      	ldr	r3, [pc, #472]	; (80027dc <json_input+0x2e4>)
 8002604:	681c      	ldr	r4, [r3, #0]
 8002606:	4b76      	ldr	r3, [pc, #472]	; (80027e0 <json_input+0x2e8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f014 fb9d 	bl	8016d4a <atoi>
 8002610:	4603      	mov	r3, r0
 8002612:	b2dd      	uxtb	r5, r3
 8002614:	4b73      	ldr	r3, [pc, #460]	; (80027e4 <json_input+0x2ec>)
 8002616:	681e      	ldr	r6, [r3, #0]
 8002618:	4b73      	ldr	r3, [pc, #460]	; (80027e8 <json_input+0x2f0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f014 fb94 	bl	8016d4a <atoi>
 8002622:	4603      	mov	r3, r0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	4632      	mov	r2, r6
 8002628:	4629      	mov	r1, r5
 800262a:	4620      	mov	r0, r4
 800262c:	f000 fd6a 	bl	8003104 <set_dido>

				//---------------------------------QA---------------------------------
				SEND_str("\n");
 8002630:	486e      	ldr	r0, [pc, #440]	; (80027ec <json_input+0x2f4>)
 8002632:	f7ff fc6d 	bl	8001f10 <SEND_str>
				SEND_str(TYPE);
 8002636:	4b63      	ldr	r3, [pc, #396]	; (80027c4 <json_input+0x2cc>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fc68 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002640:	486a      	ldr	r0, [pc, #424]	; (80027ec <json_input+0x2f4>)
 8002642:	f7ff fc65 	bl	8001f10 <SEND_str>
				SEND_str(D_IN);
 8002646:	4b65      	ldr	r3, [pc, #404]	; (80027dc <json_input+0x2e4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fc60 	bl	8001f10 <SEND_str>
				SEND_str(": ");
 8002650:	4867      	ldr	r0, [pc, #412]	; (80027f0 <json_input+0x2f8>)
 8002652:	f7ff fc5d 	bl	8001f10 <SEND_str>
				USART_Tx(D_IN[4]);
 8002656:	4b61      	ldr	r3, [pc, #388]	; (80027dc <json_input+0x2e4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	3304      	adds	r3, #4
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fc3e 	bl	8001ee0 <USART_Tx>
				SEND_str("\n");
 8002664:	4861      	ldr	r0, [pc, #388]	; (80027ec <json_input+0x2f4>)
 8002666:	f7ff fc53 	bl	8001f10 <SEND_str>
				SEND_str(VAR_IN);
 800266a:	4b5d      	ldr	r3, [pc, #372]	; (80027e0 <json_input+0x2e8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fc4e 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002674:	485d      	ldr	r0, [pc, #372]	; (80027ec <json_input+0x2f4>)
 8002676:	f7ff fc4b 	bl	8001f10 <SEND_str>
				SEND_str(D_OUT);
 800267a:	4b5a      	ldr	r3, [pc, #360]	; (80027e4 <json_input+0x2ec>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fc46 	bl	8001f10 <SEND_str>
				SEND_str(": ");
 8002684:	485a      	ldr	r0, [pc, #360]	; (80027f0 <json_input+0x2f8>)
 8002686:	f7ff fc43 	bl	8001f10 <SEND_str>
				USART_Tx(D_OUT[5]);
 800268a:	4b56      	ldr	r3, [pc, #344]	; (80027e4 <json_input+0x2ec>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	3305      	adds	r3, #5
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fc24 	bl	8001ee0 <USART_Tx>
				SEND_str("\n");
 8002698:	4854      	ldr	r0, [pc, #336]	; (80027ec <json_input+0x2f4>)
 800269a:	f7ff fc39 	bl	8001f10 <SEND_str>
				SEND_str(VAR_OUT);
 800269e:	4b52      	ldr	r3, [pc, #328]	; (80027e8 <json_input+0x2f0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fc34 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 80026a8:	4850      	ldr	r0, [pc, #320]	; (80027ec <json_input+0x2f4>)
 80026aa:	f7ff fc31 	bl	8001f10 <SEND_str>
				//------------------------------------------------------------------

				cJSON_Delete(json);
 80026ae:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80026b0:	f7fe fe14 	bl	80012dc <cJSON_Delete>
				free(stime);
 80026b4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80026b6:	f014 fb79 	bl	8016dac <free>
				free(sInstruction);
 80026ba:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80026bc:	f014 fb76 	bl	8016dac <free>
				free(sType);
 80026c0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80026c2:	f014 fb73 	bl	8016dac <free>
				free(s1);
 80026c6:	69b8      	ldr	r0, [r7, #24]
 80026c8:	f014 fb70 	bl	8016dac <free>
				free(s2);
 80026cc:	6978      	ldr	r0, [r7, #20]
 80026ce:	f014 fb6d 	bl	8016dac <free>
				free(s3);
 80026d2:	6938      	ldr	r0, [r7, #16]
 80026d4:	f014 fb6a 	bl	8016dac <free>
				free(s4);
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f014 fb67 	bl	8016dac <free>
	else
	{
		cJSON_Delete(json);
		free(stime);
	}
}
 80026de:	e3ab      	b.n	8002e38 <json_input+0x940>
			else if(strcmp(TYPE, "SET_VAIDO") == 0)	//Включить/выключить один цифровой выход если аналоговый вход в интервале значений
 80026e0:	4b38      	ldr	r3, [pc, #224]	; (80027c4 <json_input+0x2cc>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4943      	ldr	r1, [pc, #268]	; (80027f4 <json_input+0x2fc>)
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fd fd72 	bl	80001d0 <strcmp>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f040 813a 	bne.w	8002968 <json_input+0x470>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_IN");
 80026f4:	4931      	ldr	r1, [pc, #196]	; (80027bc <json_input+0x2c4>)
 80026f6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80026f8:	f7ff fbd4 	bl	8001ea4 <cJSON_GetObjectItem>
 80026fc:	4603      	mov	r3, r0
 80026fe:	493e      	ldr	r1, [pc, #248]	; (80027f8 <json_input+0x300>)
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fbcf 	bl	8001ea4 <cJSON_GetObjectItem>
 8002706:	62f8      	str	r0, [r7, #44]	; 0x2c
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_LOW");
 8002708:	492c      	ldr	r1, [pc, #176]	; (80027bc <json_input+0x2c4>)
 800270a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800270c:	f7ff fbca 	bl	8001ea4 <cJSON_GetObjectItem>
 8002710:	4603      	mov	r3, r0
 8002712:	493a      	ldr	r1, [pc, #232]	; (80027fc <json_input+0x304>)
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fbc5 	bl	8001ea4 <cJSON_GetObjectItem>
 800271a:	62b8      	str	r0, [r7, #40]	; 0x28
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_HIGH");
 800271c:	4927      	ldr	r1, [pc, #156]	; (80027bc <json_input+0x2c4>)
 800271e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002720:	f7ff fbc0 	bl	8001ea4 <cJSON_GetObjectItem>
 8002724:	4603      	mov	r3, r0
 8002726:	4936      	ldr	r1, [pc, #216]	; (8002800 <json_input+0x308>)
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fbbb 	bl	8001ea4 <cJSON_GetObjectItem>
 800272e:	6278      	str	r0, [r7, #36]	; 0x24
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 8002730:	4922      	ldr	r1, [pc, #136]	; (80027bc <json_input+0x2c4>)
 8002732:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002734:	f7ff fbb6 	bl	8001ea4 <cJSON_GetObjectItem>
 8002738:	4603      	mov	r3, r0
 800273a:	4926      	ldr	r1, [pc, #152]	; (80027d4 <json_input+0x2dc>)
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fbb1 	bl	8001ea4 <cJSON_GetObjectItem>
 8002742:	6238      	str	r0, [r7, #32]
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8002744:	491d      	ldr	r1, [pc, #116]	; (80027bc <json_input+0x2c4>)
 8002746:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002748:	f7ff fbac 	bl	8001ea4 <cJSON_GetObjectItem>
 800274c:	4603      	mov	r3, r0
 800274e:	4922      	ldr	r1, [pc, #136]	; (80027d8 <json_input+0x2e0>)
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fba7 	bl	8001ea4 <cJSON_GetObjectItem>
 8002756:	61f8      	str	r0, [r7, #28]
				A_IN = s1->valuestring;
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	4a29      	ldr	r2, [pc, #164]	; (8002804 <json_input+0x30c>)
 800275e:	6013      	str	r3, [r2, #0]
				RANGE_LOW = s2->valuestring;
 8002760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	4a28      	ldr	r2, [pc, #160]	; (8002808 <json_input+0x310>)
 8002766:	6013      	str	r3, [r2, #0]
				RANGE_HIGH = s3->valuestring;
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	4a27      	ldr	r2, [pc, #156]	; (800280c <json_input+0x314>)
 800276e:	6013      	str	r3, [r2, #0]
				D_OUT = s4->valuestring;
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	4a1b      	ldr	r2, [pc, #108]	; (80027e4 <json_input+0x2ec>)
 8002776:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	4a1a      	ldr	r2, [pc, #104]	; (80027e8 <json_input+0x2f0>)
 800277e:	6013      	str	r3, [r2, #0]
				if(strcmp(A_IN, "VHOD1") == 0)
 8002780:	4b20      	ldr	r3, [pc, #128]	; (8002804 <json_input+0x30c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4922      	ldr	r1, [pc, #136]	; (8002810 <json_input+0x318>)
 8002786:	4618      	mov	r0, r3
 8002788:	f7fd fd22 	bl	80001d0 <strcmp>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d142      	bne.n	8002818 <json_input+0x320>
					SelectChannelOne;
 8002792:	2201      	movs	r2, #1
 8002794:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002798:	481e      	ldr	r0, [pc, #120]	; (8002814 <json_input+0x31c>)
 800279a:	f005 fa59 	bl	8007c50 <HAL_GPIO_WritePin>
 800279e:	e06a      	b.n	8002876 <json_input+0x37e>
 80027a0:	0801c944 	.word	0x0801c944
 80027a4:	200007bc 	.word	0x200007bc
 80027a8:	200002f0 	.word	0x200002f0
 80027ac:	200002f4 	.word	0x200002f4
 80027b0:	0801c94c 	.word	0x0801c94c
 80027b4:	2000080c 	.word	0x2000080c
 80027b8:	0801c958 	.word	0x0801c958
 80027bc:	0801c968 	.word	0x0801c968
 80027c0:	0801c970 	.word	0x0801c970
 80027c4:	200007b0 	.word	0x200007b0
 80027c8:	0801c978 	.word	0x0801c978
 80027cc:	0801c984 	.word	0x0801c984
 80027d0:	0801c98c 	.word	0x0801c98c
 80027d4:	0801c994 	.word	0x0801c994
 80027d8:	0801c99c 	.word	0x0801c99c
 80027dc:	20000800 	.word	0x20000800
 80027e0:	200007c4 	.word	0x200007c4
 80027e4:	200007f0 	.word	0x200007f0
 80027e8:	200007d0 	.word	0x200007d0
 80027ec:	0801c9a4 	.word	0x0801c9a4
 80027f0:	0801c9a8 	.word	0x0801c9a8
 80027f4:	0801c9ac 	.word	0x0801c9ac
 80027f8:	0801c9b8 	.word	0x0801c9b8
 80027fc:	0801c9c0 	.word	0x0801c9c0
 8002800:	0801c9cc 	.word	0x0801c9cc
 8002804:	20000808 	.word	0x20000808
 8002808:	200007d4 	.word	0x200007d4
 800280c:	200007f4 	.word	0x200007f4
 8002810:	0801c9d8 	.word	0x0801c9d8
 8002814:	40021000 	.word	0x40021000
				else if(strcmp(A_IN, "VHOD2") == 0)
 8002818:	4b83      	ldr	r3, [pc, #524]	; (8002a28 <json_input+0x530>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4983      	ldr	r1, [pc, #524]	; (8002a2c <json_input+0x534>)
 800281e:	4618      	mov	r0, r3
 8002820:	f7fd fcd6 	bl	80001d0 <strcmp>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <json_input+0x340>
					SelectChannelTwo;
 800282a:	2201      	movs	r2, #1
 800282c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002830:	487f      	ldr	r0, [pc, #508]	; (8002a30 <json_input+0x538>)
 8002832:	f005 fa0d 	bl	8007c50 <HAL_GPIO_WritePin>
 8002836:	e01e      	b.n	8002876 <json_input+0x37e>
				else if(strcmp(A_IN, "VHOD3") == 0)
 8002838:	4b7b      	ldr	r3, [pc, #492]	; (8002a28 <json_input+0x530>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	497d      	ldr	r1, [pc, #500]	; (8002a34 <json_input+0x53c>)
 800283e:	4618      	mov	r0, r3
 8002840:	f7fd fcc6 	bl	80001d0 <strcmp>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <json_input+0x360>
					SelectChannelThree;
 800284a:	2201      	movs	r2, #1
 800284c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002850:	4877      	ldr	r0, [pc, #476]	; (8002a30 <json_input+0x538>)
 8002852:	f005 f9fd 	bl	8007c50 <HAL_GPIO_WritePin>
 8002856:	e00e      	b.n	8002876 <json_input+0x37e>
				else if(strcmp(A_IN, "VHOD4") == 0)
 8002858:	4b73      	ldr	r3, [pc, #460]	; (8002a28 <json_input+0x530>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4976      	ldr	r1, [pc, #472]	; (8002a38 <json_input+0x540>)
 800285e:	4618      	mov	r0, r3
 8002860:	f7fd fcb6 	bl	80001d0 <strcmp>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d105      	bne.n	8002876 <json_input+0x37e>
					SelectChannelFour;
 800286a:	2201      	movs	r2, #1
 800286c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002870:	486f      	ldr	r0, [pc, #444]	; (8002a30 <json_input+0x538>)
 8002872:	f005 f9ed 	bl	8007c50 <HAL_GPIO_WritePin>
				set_vaido(A_IN, atof(RANGE_LOW), atof(RANGE_HIGH), D_OUT, (uint8_t)(atoi(VAR_OUT)));
 8002876:	4b6c      	ldr	r3, [pc, #432]	; (8002a28 <json_input+0x530>)
 8002878:	681c      	ldr	r4, [r3, #0]
 800287a:	4b70      	ldr	r3, [pc, #448]	; (8002a3c <json_input+0x544>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f014 fa60 	bl	8016d44 <atof>
 8002884:	eeb0 8a40 	vmov.f32	s16, s0
 8002888:	eef0 8a60 	vmov.f32	s17, s1
 800288c:	4b6c      	ldr	r3, [pc, #432]	; (8002a40 <json_input+0x548>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f014 fa57 	bl	8016d44 <atof>
 8002896:	eeb0 9a40 	vmov.f32	s18, s0
 800289a:	eef0 9a60 	vmov.f32	s19, s1
 800289e:	4b69      	ldr	r3, [pc, #420]	; (8002a44 <json_input+0x54c>)
 80028a0:	681d      	ldr	r5, [r3, #0]
 80028a2:	4b69      	ldr	r3, [pc, #420]	; (8002a48 <json_input+0x550>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f014 fa4f 	bl	8016d4a <atoi>
 80028ac:	4603      	mov	r3, r0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	4629      	mov	r1, r5
 80028b4:	eeb0 1a49 	vmov.f32	s2, s18
 80028b8:	eef0 1a69 	vmov.f32	s3, s19
 80028bc:	eeb0 0a48 	vmov.f32	s0, s16
 80028c0:	eef0 0a68 	vmov.f32	s1, s17
 80028c4:	4620      	mov	r0, r4
 80028c6:	f000 fdef 	bl	80034a8 <set_vaido>
				SEND_str("\n");
 80028ca:	4860      	ldr	r0, [pc, #384]	; (8002a4c <json_input+0x554>)
 80028cc:	f7ff fb20 	bl	8001f10 <SEND_str>
				SEND_str(TYPE);
 80028d0:	4b5f      	ldr	r3, [pc, #380]	; (8002a50 <json_input+0x558>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fb1b 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 80028da:	485c      	ldr	r0, [pc, #368]	; (8002a4c <json_input+0x554>)
 80028dc:	f7ff fb18 	bl	8001f10 <SEND_str>
				SEND_str(A_IN);
 80028e0:	4b51      	ldr	r3, [pc, #324]	; (8002a28 <json_input+0x530>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff fb13 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 80028ea:	4858      	ldr	r0, [pc, #352]	; (8002a4c <json_input+0x554>)
 80028ec:	f7ff fb10 	bl	8001f10 <SEND_str>
				SEND_str(RANGE_LOW);
 80028f0:	4b52      	ldr	r3, [pc, #328]	; (8002a3c <json_input+0x544>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fb0b 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 80028fa:	4854      	ldr	r0, [pc, #336]	; (8002a4c <json_input+0x554>)
 80028fc:	f7ff fb08 	bl	8001f10 <SEND_str>
				SEND_str(RANGE_HIGH);
 8002900:	4b4f      	ldr	r3, [pc, #316]	; (8002a40 <json_input+0x548>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fb03 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 800290a:	4850      	ldr	r0, [pc, #320]	; (8002a4c <json_input+0x554>)
 800290c:	f7ff fb00 	bl	8001f10 <SEND_str>
				SEND_str(D_OUT);
 8002910:	4b4c      	ldr	r3, [pc, #304]	; (8002a44 <json_input+0x54c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fafb 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 800291a:	484c      	ldr	r0, [pc, #304]	; (8002a4c <json_input+0x554>)
 800291c:	f7ff faf8 	bl	8001f10 <SEND_str>
				SEND_str(VAR_OUT);
 8002920:	4b49      	ldr	r3, [pc, #292]	; (8002a48 <json_input+0x550>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff faf3 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 800292a:	4848      	ldr	r0, [pc, #288]	; (8002a4c <json_input+0x554>)
 800292c:	f7ff faf0 	bl	8001f10 <SEND_str>
				cJSON_Delete(json);
 8002930:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002932:	f7fe fcd3 	bl	80012dc <cJSON_Delete>
				free(stime);
 8002936:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002938:	f014 fa38 	bl	8016dac <free>
				free(sInstruction);
 800293c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800293e:	f014 fa35 	bl	8016dac <free>
				free(sType);
 8002942:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002944:	f014 fa32 	bl	8016dac <free>
				free(s1);
 8002948:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800294a:	f014 fa2f 	bl	8016dac <free>
				free(s2);
 800294e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002950:	f014 fa2c 	bl	8016dac <free>
				free(s3);
 8002954:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002956:	f014 fa29 	bl	8016dac <free>
				free(s4);
 800295a:	6a38      	ldr	r0, [r7, #32]
 800295c:	f014 fa26 	bl	8016dac <free>
				free(s5);
 8002960:	69f8      	ldr	r0, [r7, #28]
 8002962:	f014 fa23 	bl	8016dac <free>
}
 8002966:	e267      	b.n	8002e38 <json_input+0x940>
			else if(strcmp(TYPE, "SET_PWM") == 0)	//Выставить коэффициент заполнения на ШИМ
 8002968:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <json_input+0x558>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4939      	ldr	r1, [pc, #228]	; (8002a54 <json_input+0x55c>)
 800296e:	4618      	mov	r0, r3
 8002970:	f7fd fc2e 	bl	80001d0 <strcmp>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d178      	bne.n	8002a6c <json_input+0x574>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "PWM_OUT");
 800297a:	4937      	ldr	r1, [pc, #220]	; (8002a58 <json_input+0x560>)
 800297c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800297e:	f7ff fa91 	bl	8001ea4 <cJSON_GetObjectItem>
 8002982:	4603      	mov	r3, r0
 8002984:	4935      	ldr	r1, [pc, #212]	; (8002a5c <json_input+0x564>)
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fa8c 	bl	8001ea4 <cJSON_GetObjectItem>
 800298c:	6378      	str	r0, [r7, #52]	; 0x34
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_CYCLE");
 800298e:	4932      	ldr	r1, [pc, #200]	; (8002a58 <json_input+0x560>)
 8002990:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002992:	f7ff fa87 	bl	8001ea4 <cJSON_GetObjectItem>
 8002996:	4603      	mov	r3, r0
 8002998:	4931      	ldr	r1, [pc, #196]	; (8002a60 <json_input+0x568>)
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fa82 	bl	8001ea4 <cJSON_GetObjectItem>
 80029a0:	6338      	str	r0, [r7, #48]	; 0x30
				PWM_OUT = s1->valuestring;
 80029a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	4a2f      	ldr	r2, [pc, #188]	; (8002a64 <json_input+0x56c>)
 80029a8:	6013      	str	r3, [r2, #0]
				D_CYCLE = s2->valuestring;
 80029aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	4a2e      	ldr	r2, [pc, #184]	; (8002a68 <json_input+0x570>)
 80029b0:	6013      	str	r3, [r2, #0]
				set_pwm(PWM_OUT, (uint32_t)(atoi(D_CYCLE)));
 80029b2:	4b2c      	ldr	r3, [pc, #176]	; (8002a64 <json_input+0x56c>)
 80029b4:	681c      	ldr	r4, [r3, #0]
 80029b6:	4b2c      	ldr	r3, [pc, #176]	; (8002a68 <json_input+0x570>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f014 f9c5 	bl	8016d4a <atoi>
 80029c0:	4603      	mov	r3, r0
 80029c2:	4619      	mov	r1, r3
 80029c4:	4620      	mov	r0, r4
 80029c6:	f000 feb9 	bl	800373c <set_pwm>
				SEND_str("\n");
 80029ca:	4820      	ldr	r0, [pc, #128]	; (8002a4c <json_input+0x554>)
 80029cc:	f7ff faa0 	bl	8001f10 <SEND_str>
				SEND_str(TYPE);
 80029d0:	4b1f      	ldr	r3, [pc, #124]	; (8002a50 <json_input+0x558>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fa9b 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 80029da:	481c      	ldr	r0, [pc, #112]	; (8002a4c <json_input+0x554>)
 80029dc:	f7ff fa98 	bl	8001f10 <SEND_str>
				SEND_str(PWM_OUT);
 80029e0:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <json_input+0x56c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fa93 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 80029ea:	4818      	ldr	r0, [pc, #96]	; (8002a4c <json_input+0x554>)
 80029ec:	f7ff fa90 	bl	8001f10 <SEND_str>
				SEND_str(D_CYCLE);
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <json_input+0x570>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fa8b 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 80029fa:	4814      	ldr	r0, [pc, #80]	; (8002a4c <json_input+0x554>)
 80029fc:	f7ff fa88 	bl	8001f10 <SEND_str>
				cJSON_Delete(json);
 8002a00:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002a02:	f7fe fc6b 	bl	80012dc <cJSON_Delete>
				free(stime);
 8002a06:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002a08:	f014 f9d0 	bl	8016dac <free>
				free(sInstruction);
 8002a0c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002a0e:	f014 f9cd 	bl	8016dac <free>
				free(sType);
 8002a12:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002a14:	f014 f9ca 	bl	8016dac <free>
				free(s1);
 8002a18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a1a:	f014 f9c7 	bl	8016dac <free>
				free(s2);
 8002a1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a20:	f014 f9c4 	bl	8016dac <free>
}
 8002a24:	e208      	b.n	8002e38 <json_input+0x940>
 8002a26:	bf00      	nop
 8002a28:	20000808 	.word	0x20000808
 8002a2c:	0801c9e0 	.word	0x0801c9e0
 8002a30:	40021000 	.word	0x40021000
 8002a34:	0801c9e8 	.word	0x0801c9e8
 8002a38:	0801c9f0 	.word	0x0801c9f0
 8002a3c:	200007d4 	.word	0x200007d4
 8002a40:	200007f4 	.word	0x200007f4
 8002a44:	200007f0 	.word	0x200007f0
 8002a48:	200007d0 	.word	0x200007d0
 8002a4c:	0801c9a4 	.word	0x0801c9a4
 8002a50:	200007b0 	.word	0x200007b0
 8002a54:	0801c9f8 	.word	0x0801c9f8
 8002a58:	0801c968 	.word	0x0801c968
 8002a5c:	0801ca00 	.word	0x0801ca00
 8002a60:	0801ca08 	.word	0x0801ca08
 8002a64:	200007b8 	.word	0x200007b8
 8002a68:	200007f8 	.word	0x200007f8
			else if(strcmp(TYPE, "SET_AIAO") == 0)	//Установить значение в аналоговый выход если аналоговый вход = значение
 8002a6c:	4b9a      	ldr	r3, [pc, #616]	; (8002cd8 <json_input+0x7e0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	499a      	ldr	r1, [pc, #616]	; (8002cdc <json_input+0x7e4>)
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fd fbac 	bl	80001d0 <strcmp>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f040 8095 	bne.w	8002baa <json_input+0x6b2>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_IN");
 8002a80:	4997      	ldr	r1, [pc, #604]	; (8002ce0 <json_input+0x7e8>)
 8002a82:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002a84:	f7ff fa0e 	bl	8001ea4 <cJSON_GetObjectItem>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4996      	ldr	r1, [pc, #600]	; (8002ce4 <json_input+0x7ec>)
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fa09 	bl	8001ea4 <cJSON_GetObjectItem>
 8002a92:	64b8      	str	r0, [r7, #72]	; 0x48
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_LOW");
 8002a94:	4992      	ldr	r1, [pc, #584]	; (8002ce0 <json_input+0x7e8>)
 8002a96:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002a98:	f7ff fa04 	bl	8001ea4 <cJSON_GetObjectItem>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4992      	ldr	r1, [pc, #584]	; (8002ce8 <json_input+0x7f0>)
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff f9ff 	bl	8001ea4 <cJSON_GetObjectItem>
 8002aa6:	6478      	str	r0, [r7, #68]	; 0x44
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_HIGH");
 8002aa8:	498d      	ldr	r1, [pc, #564]	; (8002ce0 <json_input+0x7e8>)
 8002aaa:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002aac:	f7ff f9fa 	bl	8001ea4 <cJSON_GetObjectItem>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	498e      	ldr	r1, [pc, #568]	; (8002cec <json_input+0x7f4>)
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff f9f5 	bl	8001ea4 <cJSON_GetObjectItem>
 8002aba:	6438      	str	r0, [r7, #64]	; 0x40
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_OUT");
 8002abc:	4988      	ldr	r1, [pc, #544]	; (8002ce0 <json_input+0x7e8>)
 8002abe:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002ac0:	f7ff f9f0 	bl	8001ea4 <cJSON_GetObjectItem>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	498a      	ldr	r1, [pc, #552]	; (8002cf0 <json_input+0x7f8>)
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff f9eb 	bl	8001ea4 <cJSON_GetObjectItem>
 8002ace:	63f8      	str	r0, [r7, #60]	; 0x3c
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8002ad0:	4983      	ldr	r1, [pc, #524]	; (8002ce0 <json_input+0x7e8>)
 8002ad2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002ad4:	f7ff f9e6 	bl	8001ea4 <cJSON_GetObjectItem>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4986      	ldr	r1, [pc, #536]	; (8002cf4 <json_input+0x7fc>)
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff f9e1 	bl	8001ea4 <cJSON_GetObjectItem>
 8002ae2:	63b8      	str	r0, [r7, #56]	; 0x38
				A_IN = s1->valuestring;
 8002ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	4a83      	ldr	r2, [pc, #524]	; (8002cf8 <json_input+0x800>)
 8002aea:	6013      	str	r3, [r2, #0]
				RANGE_LOW = s2->valuestring;
 8002aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	4a82      	ldr	r2, [pc, #520]	; (8002cfc <json_input+0x804>)
 8002af2:	6013      	str	r3, [r2, #0]
				RANGE_HIGH = s3->valuestring;
 8002af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	4a81      	ldr	r2, [pc, #516]	; (8002d00 <json_input+0x808>)
 8002afa:	6013      	str	r3, [r2, #0]
				A_OUT = s4->valuestring;
 8002afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	4a80      	ldr	r2, [pc, #512]	; (8002d04 <json_input+0x80c>)
 8002b02:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 8002b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	4a7f      	ldr	r2, [pc, #508]	; (8002d08 <json_input+0x810>)
 8002b0a:	6013      	str	r3, [r2, #0]
				SEND_str("\n");
 8002b0c:	487f      	ldr	r0, [pc, #508]	; (8002d0c <json_input+0x814>)
 8002b0e:	f7ff f9ff 	bl	8001f10 <SEND_str>
				SEND_str(TYPE);
 8002b12:	4b71      	ldr	r3, [pc, #452]	; (8002cd8 <json_input+0x7e0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff f9fa 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002b1c:	487b      	ldr	r0, [pc, #492]	; (8002d0c <json_input+0x814>)
 8002b1e:	f7ff f9f7 	bl	8001f10 <SEND_str>
				SEND_str(A_IN);
 8002b22:	4b75      	ldr	r3, [pc, #468]	; (8002cf8 <json_input+0x800>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff f9f2 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002b2c:	4877      	ldr	r0, [pc, #476]	; (8002d0c <json_input+0x814>)
 8002b2e:	f7ff f9ef 	bl	8001f10 <SEND_str>
				SEND_str(RANGE_LOW);
 8002b32:	4b72      	ldr	r3, [pc, #456]	; (8002cfc <json_input+0x804>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff f9ea 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002b3c:	4873      	ldr	r0, [pc, #460]	; (8002d0c <json_input+0x814>)
 8002b3e:	f7ff f9e7 	bl	8001f10 <SEND_str>
				SEND_str(RANGE_HIGH);
 8002b42:	4b6f      	ldr	r3, [pc, #444]	; (8002d00 <json_input+0x808>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff f9e2 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002b4c:	486f      	ldr	r0, [pc, #444]	; (8002d0c <json_input+0x814>)
 8002b4e:	f7ff f9df 	bl	8001f10 <SEND_str>
				SEND_str(A_OUT);
 8002b52:	4b6c      	ldr	r3, [pc, #432]	; (8002d04 <json_input+0x80c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff f9da 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002b5c:	486b      	ldr	r0, [pc, #428]	; (8002d0c <json_input+0x814>)
 8002b5e:	f7ff f9d7 	bl	8001f10 <SEND_str>
				SEND_str(VAR_OUT);
 8002b62:	4b69      	ldr	r3, [pc, #420]	; (8002d08 <json_input+0x810>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff f9d2 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002b6c:	4867      	ldr	r0, [pc, #412]	; (8002d0c <json_input+0x814>)
 8002b6e:	f7ff f9cf 	bl	8001f10 <SEND_str>
				cJSON_Delete(json);
 8002b72:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002b74:	f7fe fbb2 	bl	80012dc <cJSON_Delete>
				free(stime);
 8002b78:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002b7a:	f014 f917 	bl	8016dac <free>
				free(sInstruction);
 8002b7e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002b80:	f014 f914 	bl	8016dac <free>
				free(sType);
 8002b84:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002b86:	f014 f911 	bl	8016dac <free>
				free(s1);
 8002b8a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002b8c:	f014 f90e 	bl	8016dac <free>
				free(s2);
 8002b90:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002b92:	f014 f90b 	bl	8016dac <free>
				free(s3);
 8002b96:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002b98:	f014 f908 	bl	8016dac <free>
				free(s4);
 8002b9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002b9e:	f014 f905 	bl	8016dac <free>
				free(s5);
 8002ba2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002ba4:	f014 f902 	bl	8016dac <free>
}
 8002ba8:	e146      	b.n	8002e38 <json_input+0x940>
				cJSON_Delete(json);
 8002baa:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002bac:	f7fe fb96 	bl	80012dc <cJSON_Delete>
				free(stime);
 8002bb0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002bb2:	f014 f8fb 	bl	8016dac <free>
				free(sInstruction);
 8002bb6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002bb8:	f014 f8f8 	bl	8016dac <free>
				free(sType);
 8002bbc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002bbe:	f014 f8f5 	bl	8016dac <free>
}
 8002bc2:	e139      	b.n	8002e38 <json_input+0x940>
		else if(strcmp(INSTRUCTION, "SET_PERIPHERALS") == 0)
 8002bc4:	4b52      	ldr	r3, [pc, #328]	; (8002d10 <json_input+0x818>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4952      	ldr	r1, [pc, #328]	; (8002d14 <json_input+0x81c>)
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd fb00 	bl	80001d0 <strcmp>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f040 8123 	bne.w	8002e1e <json_input+0x926>
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 8002bd8:	4941      	ldr	r1, [pc, #260]	; (8002ce0 <json_input+0x7e8>)
 8002bda:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002bdc:	f7ff f962 	bl	8001ea4 <cJSON_GetObjectItem>
 8002be0:	4603      	mov	r3, r0
 8002be2:	494d      	ldr	r1, [pc, #308]	; (8002d18 <json_input+0x820>)
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff f95d 	bl	8001ea4 <cJSON_GetObjectItem>
 8002bea:	65f8      	str	r0, [r7, #92]	; 0x5c
			TYPE = sType->valuestring;
 8002bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	4a39      	ldr	r2, [pc, #228]	; (8002cd8 <json_input+0x7e0>)
 8002bf2:	6013      	str	r3, [r2, #0]
			if(strcmp(TYPE, "DIGITAL") == 0)
 8002bf4:	4b38      	ldr	r3, [pc, #224]	; (8002cd8 <json_input+0x7e0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4948      	ldr	r1, [pc, #288]	; (8002d1c <json_input+0x824>)
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd fae8 	bl	80001d0 <strcmp>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d145      	bne.n	8002c92 <json_input+0x79a>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 8002c06:	4936      	ldr	r1, [pc, #216]	; (8002ce0 <json_input+0x7e8>)
 8002c08:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002c0a:	f7ff f94b 	bl	8001ea4 <cJSON_GetObjectItem>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4943      	ldr	r1, [pc, #268]	; (8002d20 <json_input+0x828>)
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff f946 	bl	8001ea4 <cJSON_GetObjectItem>
 8002c18:	6538      	str	r0, [r7, #80]	; 0x50
				DigitalParamMass = s1->valuestring;
 8002c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	4a41      	ldr	r2, [pc, #260]	; (8002d24 <json_input+0x82c>)
 8002c20:	6013      	str	r3, [r2, #0]
				test = parseValue(DigitalParamMass);
 8002c22:	4b40      	ldr	r3, [pc, #256]	; (8002d24 <json_input+0x82c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fc38 	bl	800249c <parseValue>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4a3e      	ldr	r2, [pc, #248]	; (8002d28 <json_input+0x830>)
 8002c30:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < 8; i++)
 8002c32:	2300      	movs	r3, #0
 8002c34:	677b      	str	r3, [r7, #116]	; 0x74
 8002c36:	e00e      	b.n	8002c56 <json_input+0x75e>
					Status_DIN[i] = (test[i] - 0x30);
 8002c38:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <json_input+0x830>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c3e:	4413      	add	r3, r2
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	3b30      	subs	r3, #48	; 0x30
 8002c44:	b2d9      	uxtb	r1, r3
 8002c46:	4a39      	ldr	r2, [pc, #228]	; (8002d2c <json_input+0x834>)
 8002c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c4a:	4413      	add	r3, r2
 8002c4c:	460a      	mov	r2, r1
 8002c4e:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c52:	3301      	adds	r3, #1
 8002c54:	677b      	str	r3, [r7, #116]	; 0x74
 8002c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c58:	2b07      	cmp	r3, #7
 8002c5a:	dded      	ble.n	8002c38 <json_input+0x740>
				SEND_str("\n");
 8002c5c:	482b      	ldr	r0, [pc, #172]	; (8002d0c <json_input+0x814>)
 8002c5e:	f7ff f957 	bl	8001f10 <SEND_str>
				SEND_str(TYPE);
 8002c62:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <json_input+0x7e0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff f952 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002c6c:	4827      	ldr	r0, [pc, #156]	; (8002d0c <json_input+0x814>)
 8002c6e:	f7ff f94f 	bl	8001f10 <SEND_str>
				cJSON_Delete(json);
 8002c72:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002c74:	f7fe fb32 	bl	80012dc <cJSON_Delete>
				free(stime);
 8002c78:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002c7a:	f014 f897 	bl	8016dac <free>
				free(sInstruction);
 8002c7e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002c80:	f014 f894 	bl	8016dac <free>
				free(sType);
 8002c84:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002c86:	f014 f891 	bl	8016dac <free>
				free(s1);
 8002c8a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002c8c:	f014 f88e 	bl	8016dac <free>
}
 8002c90:	e0d2      	b.n	8002e38 <json_input+0x940>
			else if(strcmp(TYPE, "ANALOG") == 0)
 8002c92:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <json_input+0x7e0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4926      	ldr	r1, [pc, #152]	; (8002d30 <json_input+0x838>)
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fd fa99 	bl	80001d0 <strcmp>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d176      	bne.n	8002d92 <json_input+0x89a>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 8002ca4:	490e      	ldr	r1, [pc, #56]	; (8002ce0 <json_input+0x7e8>)
 8002ca6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002ca8:	f7ff f8fc 	bl	8001ea4 <cJSON_GetObjectItem>
 8002cac:	4603      	mov	r3, r0
 8002cae:	491c      	ldr	r1, [pc, #112]	; (8002d20 <json_input+0x828>)
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff f8f7 	bl	8001ea4 <cJSON_GetObjectItem>
 8002cb6:	6578      	str	r0, [r7, #84]	; 0x54
				AnalogParamMass = s1->valuestring;
 8002cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	4a1d      	ldr	r2, [pc, #116]	; (8002d34 <json_input+0x83c>)
 8002cbe:	6013      	str	r3, [r2, #0]
				test = parseValue(AnalogParamMass);
 8002cc0:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <json_input+0x83c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fbe9 	bl	800249c <parseValue>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4a16      	ldr	r2, [pc, #88]	; (8002d28 <json_input+0x830>)
 8002cce:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < 8; i++)
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	673b      	str	r3, [r7, #112]	; 0x70
 8002cd4:	e03f      	b.n	8002d56 <json_input+0x85e>
 8002cd6:	bf00      	nop
 8002cd8:	200007b0 	.word	0x200007b0
 8002cdc:	0801ca10 	.word	0x0801ca10
 8002ce0:	0801c968 	.word	0x0801c968
 8002ce4:	0801c9b8 	.word	0x0801c9b8
 8002ce8:	0801c9c0 	.word	0x0801c9c0
 8002cec:	0801c9cc 	.word	0x0801c9cc
 8002cf0:	0801ca1c 	.word	0x0801ca1c
 8002cf4:	0801c99c 	.word	0x0801c99c
 8002cf8:	20000808 	.word	0x20000808
 8002cfc:	200007d4 	.word	0x200007d4
 8002d00:	200007f4 	.word	0x200007f4
 8002d04:	200007ec 	.word	0x200007ec
 8002d08:	200007d0 	.word	0x200007d0
 8002d0c:	0801c9a4 	.word	0x0801c9a4
 8002d10:	2000080c 	.word	0x2000080c
 8002d14:	0801ca24 	.word	0x0801ca24
 8002d18:	0801c970 	.word	0x0801c970
 8002d1c:	0801ca34 	.word	0x0801ca34
 8002d20:	0801ca3c 	.word	0x0801ca3c
 8002d24:	200007b4 	.word	0x200007b4
 8002d28:	20000804 	.word	0x20000804
 8002d2c:	20000328 	.word	0x20000328
 8002d30:	0801ca40 	.word	0x0801ca40
 8002d34:	200007e0 	.word	0x200007e0
					Status_AIN[i] = (test[i] - 0x30);
 8002d38:	4b42      	ldr	r3, [pc, #264]	; (8002e44 <json_input+0x94c>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d3e:	4413      	add	r3, r2
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	3b30      	subs	r3, #48	; 0x30
 8002d44:	b2d9      	uxtb	r1, r3
 8002d46:	4a40      	ldr	r2, [pc, #256]	; (8002e48 <json_input+0x950>)
 8002d48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d4a:	4413      	add	r3, r2
 8002d4c:	460a      	mov	r2, r1
 8002d4e:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002d50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d52:	3301      	adds	r3, #1
 8002d54:	673b      	str	r3, [r7, #112]	; 0x70
 8002d56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d58:	2b07      	cmp	r3, #7
 8002d5a:	dded      	ble.n	8002d38 <json_input+0x840>
				SEND_str("\n");
 8002d5c:	483b      	ldr	r0, [pc, #236]	; (8002e4c <json_input+0x954>)
 8002d5e:	f7ff f8d7 	bl	8001f10 <SEND_str>
				SEND_str(TYPE);
 8002d62:	4b3b      	ldr	r3, [pc, #236]	; (8002e50 <json_input+0x958>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff f8d2 	bl	8001f10 <SEND_str>
				SEND_str("\n");
 8002d6c:	4837      	ldr	r0, [pc, #220]	; (8002e4c <json_input+0x954>)
 8002d6e:	f7ff f8cf 	bl	8001f10 <SEND_str>
				cJSON_Delete(json);
 8002d72:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002d74:	f7fe fab2 	bl	80012dc <cJSON_Delete>
				free(stime);
 8002d78:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002d7a:	f014 f817 	bl	8016dac <free>
				free(sInstruction);
 8002d7e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002d80:	f014 f814 	bl	8016dac <free>
				free(sType);
 8002d84:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002d86:	f014 f811 	bl	8016dac <free>
				free(s1);
 8002d8a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002d8c:	f014 f80e 	bl	8016dac <free>
}
 8002d90:	e052      	b.n	8002e38 <json_input+0x940>
			else if(strcmp(TYPE, "OCD") == 0)
 8002d92:	4b2f      	ldr	r3, [pc, #188]	; (8002e50 <json_input+0x958>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	492f      	ldr	r1, [pc, #188]	; (8002e54 <json_input+0x95c>)
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd fa19 	bl	80001d0 <strcmp>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d149      	bne.n	8002e38 <json_input+0x940>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 8002da4:	492c      	ldr	r1, [pc, #176]	; (8002e58 <json_input+0x960>)
 8002da6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002da8:	f7ff f87c 	bl	8001ea4 <cJSON_GetObjectItem>
 8002dac:	4603      	mov	r3, r0
 8002dae:	492b      	ldr	r1, [pc, #172]	; (8002e5c <json_input+0x964>)
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff f877 	bl	8001ea4 <cJSON_GetObjectItem>
 8002db6:	65b8      	str	r0, [r7, #88]	; 0x58
				OpenCollectorDrainParamMass = s1->valuestring;
 8002db8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	4a28      	ldr	r2, [pc, #160]	; (8002e60 <json_input+0x968>)
 8002dbe:	6013      	str	r3, [r2, #0]
				test = parseValue(OpenCollectorDrainParamMass);
 8002dc0:	4b27      	ldr	r3, [pc, #156]	; (8002e60 <json_input+0x968>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fb69 	bl	800249c <parseValue>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4a1d      	ldr	r2, [pc, #116]	; (8002e44 <json_input+0x94c>)
 8002dce:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < 8; i++)
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dd4:	e00e      	b.n	8002df4 <json_input+0x8fc>
					Status_OCD[i] = (test[i] - 0x30);
 8002dd6:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <json_input+0x94c>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ddc:	4413      	add	r3, r2
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	3b30      	subs	r3, #48	; 0x30
 8002de2:	b2d9      	uxtb	r1, r3
 8002de4:	4a1f      	ldr	r2, [pc, #124]	; (8002e64 <json_input+0x96c>)
 8002de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de8:	4413      	add	r3, r2
 8002dea:	460a      	mov	r2, r1
 8002dec:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df0:	3301      	adds	r3, #1
 8002df2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df6:	2b07      	cmp	r3, #7
 8002df8:	dded      	ble.n	8002dd6 <json_input+0x8de>
				ReWriteOCD();
 8002dfa:	f001 f837 	bl	8003e6c <ReWriteOCD>
				cJSON_Delete(json);
 8002dfe:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002e00:	f7fe fa6c 	bl	80012dc <cJSON_Delete>
				free(stime);
 8002e04:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002e06:	f013 ffd1 	bl	8016dac <free>
				free(sInstruction);
 8002e0a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002e0c:	f013 ffce 	bl	8016dac <free>
				free(sType);
 8002e10:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002e12:	f013 ffcb 	bl	8016dac <free>
				free(s1);
 8002e16:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002e18:	f013 ffc8 	bl	8016dac <free>
}
 8002e1c:	e00c      	b.n	8002e38 <json_input+0x940>
			free(stime);
 8002e1e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002e20:	f013 ffc4 	bl	8016dac <free>
			free(sInstruction);
 8002e24:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002e26:	f013 ffc1 	bl	8016dac <free>
}
 8002e2a:	e005      	b.n	8002e38 <json_input+0x940>
		cJSON_Delete(json);
 8002e2c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002e2e:	f7fe fa55 	bl	80012dc <cJSON_Delete>
		free(stime);
 8002e32:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002e34:	f013 ffba 	bl	8016dac <free>
}
 8002e38:	bf00      	nop
 8002e3a:	377c      	adds	r7, #124	; 0x7c
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	ecbd 8b04 	vpop	{d8-d9}
 8002e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e44:	20000804 	.word	0x20000804
 8002e48:	20000320 	.word	0x20000320
 8002e4c:	0801c9a4 	.word	0x0801c9a4
 8002e50:	200007b0 	.word	0x200007b0
 8002e54:	0801ca48 	.word	0x0801ca48
 8002e58:	0801c968 	.word	0x0801c968
 8002e5c:	0801ca3c 	.word	0x0801ca3c
 8002e60:	20000814 	.word	0x20000814
 8002e64:	20000338 	.word	0x20000338

08002e68 <CheckReWriteDiDo>:
GPIO_TypeDef *pVHOD[8] = {VHOD1, VHOD2, VHOD3, VHOD4, VHOD5, VHOD6, VHOD7, VHOD8};				//Входы дискретных сигналов
GPIO_TypeDef *pVIHOD[8] = {VIHOD1, VIHOD2, VIHOD3, VIHOD4, VIHOD5, VIHOD6, VIHOD7, VIHOD8};		//Выходы открытый коллектор
uint16_t OCD_Pin[8] = {O0_Pin, O1_Pin, O2_Pin, O3_Pin, O4_Pin, O5_Pin, O6_Pin, O7_Pin};

void CheckReWriteDiDo(void)
{
 8002e68:	b590      	push	{r4, r7, lr}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++)
 8002e6e:	2300      	movs	r3, #0
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	e0a8      	b.n	8002fc6 <CheckReWriteDiDo+0x15e>
	{
		if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) != DiDo[i].VAR_IN)	//(Если Вход1 == 0 то Выход3 = 1) Инверсная логика на входах оптопар
 8002e74:	4958      	ldr	r1, [pc, #352]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	4954      	ldr	r1, [pc, #336]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	3306      	adds	r3, #6
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	4619      	mov	r1, r3
 8002e98:	f004 fec2 	bl	8007c20 <HAL_GPIO_ReadPin>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	494d      	ldr	r1, [pc, #308]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	3304      	adds	r3, #4
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	4298      	cmp	r0, r3
 8002eb4:	d02c      	beq.n	8002f10 <CheckReWriteDiDo+0xa8>
		{
			//Status_OCD[i] = DiDo[i].VAR_OUT;									//нужно записать в массив актуальные данные!!!
			Status_OCD[i] = DiDo[i].VAR_OUT;
 8002eb6:	4948      	ldr	r1, [pc, #288]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	330c      	adds	r3, #12
 8002ec6:	7819      	ldrb	r1, [r3, #0]
 8002ec8:	4a44      	ldr	r2, [pc, #272]	; (8002fdc <CheckReWriteDiDo+0x174>)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4413      	add	r3, r2
 8002ece:	460a      	mov	r2, r1
 8002ed0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, DiDo[i].VAR_OUT);		//DiDo[i].VAR_OUT
 8002ed2:	4941      	ldr	r1, [pc, #260]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	3308      	adds	r3, #8
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	493c      	ldr	r1, [pc, #240]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	330e      	adds	r3, #14
 8002ef4:	8819      	ldrh	r1, [r3, #0]
 8002ef6:	4c38      	ldr	r4, [pc, #224]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4423      	add	r3, r4
 8002f04:	330c      	adds	r3, #12
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f004 fea1 	bl	8007c50 <HAL_GPIO_WritePin>
 8002f0e:	e057      	b.n	8002fc0 <CheckReWriteDiDo+0x158>
		}
		else if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) == DiDo[i].VAR_IN)
 8002f10:	4931      	ldr	r1, [pc, #196]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	492d      	ldr	r1, [pc, #180]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3306      	adds	r3, #6
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	4619      	mov	r1, r3
 8002f34:	f004 fe74 	bl	8007c20 <HAL_GPIO_ReadPin>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	4926      	ldr	r1, [pc, #152]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	4298      	cmp	r0, r3
 8002f50:	d136      	bne.n	8002fc0 <CheckReWriteDiDo+0x158>
		{
			//Status_OCD[i] = !DiDo[i].VAR_OUT;
			Status_OCD[i] = !DiDo[i].VAR_OUT;
 8002f52:	4921      	ldr	r1, [pc, #132]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	330c      	adds	r3, #12
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4a1a      	ldr	r2, [pc, #104]	; (8002fdc <CheckReWriteDiDo+0x174>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	460a      	mov	r2, r1
 8002f78:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, !DiDo[i].VAR_OUT);	//!DiDo[i].VAR_OUT
 8002f7a:	4917      	ldr	r1, [pc, #92]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	3308      	adds	r3, #8
 8002f8a:	6818      	ldr	r0, [r3, #0]
 8002f8c:	4912      	ldr	r1, [pc, #72]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	330e      	adds	r3, #14
 8002f9c:	8819      	ldrh	r1, [r3, #0]
 8002f9e:	4c0e      	ldr	r4, [pc, #56]	; (8002fd8 <CheckReWriteDiDo+0x170>)
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4423      	add	r3, r4
 8002fac:	330c      	adds	r3, #12
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f004 fe48 	bl	8007c50 <HAL_GPIO_WritePin>
	for(int i = 0; i < 8; i++)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b07      	cmp	r3, #7
 8002fca:	f77f af53 	ble.w	8002e74 <CheckReWriteDiDo+0xc>
		}
	}
}
 8002fce:	bf00      	nop
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd90      	pop	{r4, r7, pc}
 8002fd8:	20000710 	.word	0x20000710
 8002fdc:	20000338 	.word	0x20000338

08002fe0 <CheckReWriteVAiDo>:
void CheckReWriteVAiDo(void)
{
 8002fe0:	b590      	push	{r4, r7, lr}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	e07b      	b.n	80030e4 <CheckReWriteVAiDo+0x104>
	{
		for(int j = 0; j < 8; j++)
 8002fec:	2300      	movs	r3, #0
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	e072      	b.n	80030d8 <CheckReWriteVAiDo+0xf8>
		{
			//if(strcmp(VAiDo[i].D_OUT, pVIHOD[j]) == 0)
			if(VAiDo[i].D_OUT == pVIHOD[j])
 8002ff2:	4940      	ldr	r1, [pc, #256]	; (80030f4 <CheckReWriteVAiDo+0x114>)
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	440b      	add	r3, r1
 8003000:	3318      	adds	r3, #24
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	493c      	ldr	r1, [pc, #240]	; (80030f8 <CheckReWriteVAiDo+0x118>)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800300c:	429a      	cmp	r2, r3
 800300e:	d160      	bne.n	80030d2 <CheckReWriteVAiDo+0xf2>
			{
				if((adcValue[i] >= VAiDo[i].RANGE_LOW) && (VAiDo[i].RANGE_HIGH >= adcValue[i]))
 8003010:	4a3a      	ldr	r2, [pc, #232]	; (80030fc <CheckReWriteVAiDo+0x11c>)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4413      	add	r3, r2
 8003018:	e9d3 0100 	ldrd	r0, r1, [r3]
 800301c:	4c35      	ldr	r4, [pc, #212]	; (80030f4 <CheckReWriteVAiDo+0x114>)
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4423      	add	r3, r4
 800302a:	3308      	adds	r3, #8
 800302c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003030:	f7fd fd78 	bl	8000b24 <__aeabi_dcmpge>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d030      	beq.n	800309c <CheckReWriteVAiDo+0xbc>
 800303a:	492e      	ldr	r1, [pc, #184]	; (80030f4 <CheckReWriteVAiDo+0x114>)
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	440b      	add	r3, r1
 8003048:	3310      	adds	r3, #16
 800304a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800304e:	4a2b      	ldr	r2, [pc, #172]	; (80030fc <CheckReWriteVAiDo+0x11c>)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4413      	add	r3, r2
 8003056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305a:	f7fd fd63 	bl	8000b24 <__aeabi_dcmpge>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01b      	beq.n	800309c <CheckReWriteVAiDo+0xbc>
				{
					Status_OCD[j] = 1;
 8003064:	4a26      	ldr	r2, [pc, #152]	; (8003100 <CheckReWriteVAiDo+0x120>)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	4413      	add	r3, r2
 800306a:	2201      	movs	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(VAiDo[i].D_OUT, VAiDo[i].OCD_Pin, SET);
 800306e:	4921      	ldr	r1, [pc, #132]	; (80030f4 <CheckReWriteVAiDo+0x114>)
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	440b      	add	r3, r1
 800307c:	3318      	adds	r3, #24
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	491c      	ldr	r1, [pc, #112]	; (80030f4 <CheckReWriteVAiDo+0x114>)
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	440b      	add	r3, r1
 800308e:	331e      	adds	r3, #30
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	2201      	movs	r2, #1
 8003094:	4619      	mov	r1, r3
 8003096:	f004 fddb 	bl	8007c50 <HAL_GPIO_WritePin>
 800309a:	e01a      	b.n	80030d2 <CheckReWriteVAiDo+0xf2>
				}
				else
				{
					Status_OCD[j] = 0;
 800309c:	4a18      	ldr	r2, [pc, #96]	; (8003100 <CheckReWriteVAiDo+0x120>)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	4413      	add	r3, r2
 80030a2:	2200      	movs	r2, #0
 80030a4:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(VAiDo[i].D_OUT, VAiDo[i].OCD_Pin, RESET);
 80030a6:	4913      	ldr	r1, [pc, #76]	; (80030f4 <CheckReWriteVAiDo+0x114>)
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	440b      	add	r3, r1
 80030b4:	3318      	adds	r3, #24
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	490e      	ldr	r1, [pc, #56]	; (80030f4 <CheckReWriteVAiDo+0x114>)
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	440b      	add	r3, r1
 80030c6:	331e      	adds	r3, #30
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	2200      	movs	r2, #0
 80030cc:	4619      	mov	r1, r3
 80030ce:	f004 fdbf 	bl	8007c50 <HAL_GPIO_WritePin>
		for(int j = 0; j < 8; j++)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	3301      	adds	r3, #1
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b07      	cmp	r3, #7
 80030dc:	dd89      	ble.n	8002ff2 <CheckReWriteVAiDo+0x12>
	for(int i = 0; i < 4; i++)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3301      	adds	r3, #1
 80030e2:	607b      	str	r3, [r7, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	dd80      	ble.n	8002fec <CheckReWriteVAiDo+0xc>
				}
			}
		}
	}
}
 80030ea:	bf00      	nop
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd90      	pop	{r4, r7, pc}
 80030f4:	20000670 	.word	0x20000670
 80030f8:	20000028 	.word	0x20000028
 80030fc:	20000300 	.word	0x20000300
 8003100:	20000338 	.word	0x20000338

08003104 <set_dido>:
//Принимает "D_IN" - строку с номером цифрового входа
//Принимает "VAR_IN" - переменная состояния входа
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_dido(char *D_IN, uint8_t VAR_IN, char *D_OUT, uint8_t VAR_OUT)
{
 8003104:	b590      	push	{r4, r7, lr}
 8003106:	b0b3      	sub	sp, #204	; 0xcc
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	461a      	mov	r2, r3
 8003110:	460b      	mov	r3, r1
 8003112:	72fb      	strb	r3, [r7, #11]
 8003114:	4613      	mov	r3, r2
 8003116:	72bb      	strb	r3, [r7, #10]
	char VHOD[8][10] = {"VHOD1", "VHOD2", "VHOD3", "VHOD4", "VHOD5", "VHOD6", "VHOD7", "VHOD8"};
 8003118:	4acb      	ldr	r2, [pc, #812]	; (8003448 <set_dido+0x344>)
 800311a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800311e:	4611      	mov	r1, r2
 8003120:	2250      	movs	r2, #80	; 0x50
 8003122:	4618      	mov	r0, r3
 8003124:	f013 fe58 	bl	8016dd8 <memcpy>
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 8003128:	4ac8      	ldr	r2, [pc, #800]	; (800344c <set_dido+0x348>)
 800312a:	f107 0320 	add.w	r3, r7, #32
 800312e:	4611      	mov	r1, r2
 8003130:	2250      	movs	r2, #80	; 0x50
 8003132:	4618      	mov	r0, r3
 8003134:	f013 fe50 	bl	8016dd8 <memcpy>

	uint16_t DIN_Pin[8] = {IN0_Pin, IN1_Pin, IN2_Pin, IN3_Pin, IN4_Pin, IN5_Pin, IN6_Pin, IN7_Pin};
 8003138:	4bc5      	ldr	r3, [pc, #788]	; (8003450 <set_dido+0x34c>)
 800313a:	f107 0410 	add.w	r4, r7, #16
 800313e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003140:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for(int i = 0; i < 8; i++)
 8003144:	2300      	movs	r3, #0
 8003146:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800314a:	e1a2      	b.n	8003492 <set_dido+0x38e>
	{
		if(strcmp(D_IN, VHOD[i]) == 0)
 800314c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8003150:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	440b      	add	r3, r1
 800315e:	4619      	mov	r1, r3
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f7fd f835 	bl	80001d0 <strcmp>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	f040 818d 	bne.w	8003488 <set_dido+0x384>
		{
			if(DiDo[i].clrFlag != false)
 800316e:	49b9      	ldr	r1, [pc, #740]	; (8003454 <set_dido+0x350>)
 8003170:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	3310      	adds	r3, #16
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d017      	beq.n	80031b6 <set_dido+0xb2>
				HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, RESET);
 8003186:	49b3      	ldr	r1, [pc, #716]	; (8003454 <set_dido+0x350>)
 8003188:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	3308      	adds	r3, #8
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	49ae      	ldr	r1, [pc, #696]	; (8003454 <set_dido+0x350>)
 800319c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	330e      	adds	r3, #14
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	2200      	movs	r2, #0
 80031b0:	4619      	mov	r1, r3
 80031b2:	f004 fd4d 	bl	8007c50 <HAL_GPIO_WritePin>

			DiDo[i].clrFlag = true;
 80031b6:	49a7      	ldr	r1, [pc, #668]	; (8003454 <set_dido+0x350>)
 80031b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	3310      	adds	r3, #16
 80031c8:	2201      	movs	r2, #1
 80031ca:	701a      	strb	r2, [r3, #0]
			DiDo[i].D_IN = pVHOD[i];
 80031cc:	4aa2      	ldr	r2, [pc, #648]	; (8003458 <set_dido+0x354>)
 80031ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80031d6:	489f      	ldr	r0, [pc, #636]	; (8003454 <set_dido+0x350>)
 80031d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4403      	add	r3, r0
 80031e6:	6019      	str	r1, [r3, #0]
			DiDo[i].VAR_IN = VAR_IN;
 80031e8:	499a      	ldr	r1, [pc, #616]	; (8003454 <set_dido+0x350>)
 80031ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	3304      	adds	r3, #4
 80031fa:	7afa      	ldrb	r2, [r7, #11]
 80031fc:	701a      	strb	r2, [r3, #0]
			DiDo[i].DIN_Pin = DIN_Pin[i];
 80031fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8003208:	4413      	add	r3, r2
 800320a:	f833 0cb8 	ldrh.w	r0, [r3, #-184]
 800320e:	4991      	ldr	r1, [pc, #580]	; (8003454 <set_dido+0x350>)
 8003210:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	3306      	adds	r3, #6
 8003220:	4602      	mov	r2, r0
 8003222:	801a      	strh	r2, [r3, #0]
			for(int j = 0; j < 8; j++)
 8003224:	2300      	movs	r3, #0
 8003226:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800322a:	e104      	b.n	8003436 <set_dido+0x332>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 800322c:	f107 0120 	add.w	r1, r7, #32
 8003230:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	440b      	add	r3, r1
 800323e:	4619      	mov	r1, r3
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7fc ffc5 	bl	80001d0 <strcmp>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	f040 80ef 	bne.w	800342c <set_dido+0x328>
				{
					DiDo[i].D_OUT = pVIHOD[j];
 800324e:	4a83      	ldr	r2, [pc, #524]	; (800345c <set_dido+0x358>)
 8003250:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003254:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003258:	487e      	ldr	r0, [pc, #504]	; (8003454 <set_dido+0x350>)
 800325a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4403      	add	r3, r0
 8003268:	3308      	adds	r3, #8
 800326a:	6019      	str	r1, [r3, #0]
					DiDo[i].VAR_OUT = VAR_OUT;
 800326c:	4979      	ldr	r1, [pc, #484]	; (8003454 <set_dido+0x350>)
 800326e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	330c      	adds	r3, #12
 800327e:	7aba      	ldrb	r2, [r7, #10]
 8003280:	701a      	strb	r2, [r3, #0]
					DiDo[i].OCD_Pin = OCD_Pin[j];
 8003282:	4a77      	ldr	r2, [pc, #476]	; (8003460 <set_dido+0x35c>)
 8003284:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003288:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800328c:	4971      	ldr	r1, [pc, #452]	; (8003454 <set_dido+0x350>)
 800328e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	330e      	adds	r3, #14
 800329e:	4602      	mov	r2, r0
 80032a0:	801a      	strh	r2, [r3, #0]

					if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) != VAR_IN)	//(Если Вход1 == 0 то Выход3 = 1) Инверсная логика на входах оптопар
 80032a2:	496c      	ldr	r1, [pc, #432]	; (8003454 <set_dido+0x350>)
 80032a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	4967      	ldr	r1, [pc, #412]	; (8003454 <set_dido+0x350>)
 80032b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	3306      	adds	r3, #6
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	4619      	mov	r1, r3
 80032ca:	f004 fca9 	bl	8007c20 <HAL_GPIO_ReadPin>
 80032ce:	4603      	mov	r3, r0
 80032d0:	461a      	mov	r2, r3
 80032d2:	7afb      	ldrb	r3, [r7, #11]
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d021      	beq.n	800331c <set_dido+0x218>
					{
						Status_OCD[j] = VAR_OUT;
 80032d8:	4a62      	ldr	r2, [pc, #392]	; (8003464 <set_dido+0x360>)
 80032da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032de:	4413      	add	r3, r2
 80032e0:	7aba      	ldrb	r2, [r7, #10]
 80032e2:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, VAR_OUT);
 80032e4:	495b      	ldr	r1, [pc, #364]	; (8003454 <set_dido+0x350>)
 80032e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	3308      	adds	r3, #8
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	4956      	ldr	r1, [pc, #344]	; (8003454 <set_dido+0x350>)
 80032fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	330e      	adds	r3, #14
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	7aba      	ldrb	r2, [r7, #10]
 800330e:	4619      	mov	r1, r3
 8003310:	f004 fc9e 	bl	8007c50 <HAL_GPIO_WritePin>
						SEND_str("success...\n");
 8003314:	4854      	ldr	r0, [pc, #336]	; (8003468 <set_dido+0x364>)
 8003316:	f7fe fdfb 	bl	8001f10 <SEND_str>
 800331a:	e047      	b.n	80033ac <set_dido+0x2a8>
					}
					else if(HAL_GPIO_ReadPin(DiDo[i].D_IN, DiDo[i].DIN_Pin) == VAR_IN)
 800331c:	494d      	ldr	r1, [pc, #308]	; (8003454 <set_dido+0x350>)
 800331e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	4949      	ldr	r1, [pc, #292]	; (8003454 <set_dido+0x350>)
 8003330:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	3306      	adds	r3, #6
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	4619      	mov	r1, r3
 8003344:	f004 fc6c 	bl	8007c20 <HAL_GPIO_ReadPin>
 8003348:	4603      	mov	r3, r0
 800334a:	461a      	mov	r2, r3
 800334c:	7afb      	ldrb	r3, [r7, #11]
 800334e:	4293      	cmp	r3, r2
 8003350:	d12c      	bne.n	80033ac <set_dido+0x2a8>
					{
						Status_OCD[j] = !VAR_OUT;
 8003352:	7abb      	ldrb	r3, [r7, #10]
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	4619      	mov	r1, r3
 8003360:	4a40      	ldr	r2, [pc, #256]	; (8003464 <set_dido+0x360>)
 8003362:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003366:	4413      	add	r3, r2
 8003368:	460a      	mov	r2, r1
 800336a:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(DiDo[i].D_OUT, DiDo[i].OCD_Pin, !VAR_OUT);
 800336c:	4939      	ldr	r1, [pc, #228]	; (8003454 <set_dido+0x350>)
 800336e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	3308      	adds	r3, #8
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	4934      	ldr	r1, [pc, #208]	; (8003454 <set_dido+0x350>)
 8003382:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	330e      	adds	r3, #14
 8003392:	8819      	ldrh	r1, [r3, #0]
 8003394:	7abb      	ldrb	r3, [r7, #10]
 8003396:	2b00      	cmp	r3, #0
 8003398:	bf0c      	ite	eq
 800339a:	2301      	moveq	r3, #1
 800339c:	2300      	movne	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	f004 fc55 	bl	8007c50 <HAL_GPIO_WritePin>
						SEND_str("miss...\n");
 80033a6:	4831      	ldr	r0, [pc, #196]	; (800346c <set_dido+0x368>)
 80033a8:	f7fe fdb2 	bl	8001f10 <SEND_str>
					}

					//----------------------------------For debuging----------------------------------
					if(DiDo[i].D_IN == VHOD1)
 80033ac:	4929      	ldr	r1, [pc, #164]	; (8003454 <set_dido+0x350>)
 80033ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a2c      	ldr	r2, [pc, #176]	; (8003470 <set_dido+0x36c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d102      	bne.n	80033ca <set_dido+0x2c6>
						SEND_str("1 - success...\n");
 80033c4:	482b      	ldr	r0, [pc, #172]	; (8003474 <set_dido+0x370>)
 80033c6:	f7fe fda3 	bl	8001f10 <SEND_str>
					if(DiDo[i].VAR_IN == VAR_IN)
 80033ca:	4922      	ldr	r1, [pc, #136]	; (8003454 <set_dido+0x350>)
 80033cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	3304      	adds	r3, #4
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	7afa      	ldrb	r2, [r7, #11]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d102      	bne.n	80033ea <set_dido+0x2e6>
						SEND_str("2 - success...\n");
 80033e4:	4824      	ldr	r0, [pc, #144]	; (8003478 <set_dido+0x374>)
 80033e6:	f7fe fd93 	bl	8001f10 <SEND_str>
					if(DiDo[i].D_OUT == VIHOD3)
 80033ea:	491a      	ldr	r1, [pc, #104]	; (8003454 <set_dido+0x350>)
 80033ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	3308      	adds	r3, #8
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1f      	ldr	r2, [pc, #124]	; (800347c <set_dido+0x378>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d102      	bne.n	800340a <set_dido+0x306>
						SEND_str("3 - success...\n");
 8003404:	481e      	ldr	r0, [pc, #120]	; (8003480 <set_dido+0x37c>)
 8003406:	f7fe fd83 	bl	8001f10 <SEND_str>
					if(DiDo[i].VAR_OUT == VAR_OUT)
 800340a:	4912      	ldr	r1, [pc, #72]	; (8003454 <set_dido+0x350>)
 800340c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	330c      	adds	r3, #12
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	7aba      	ldrb	r2, [r7, #10]
 8003420:	429a      	cmp	r2, r3
 8003422:	d10e      	bne.n	8003442 <set_dido+0x33e>
						SEND_str("4 - success...\n");
 8003424:	4817      	ldr	r0, [pc, #92]	; (8003484 <set_dido+0x380>)
 8003426:	f7fe fd73 	bl	8001f10 <SEND_str>
					//--------------------------------------------------------------------------------

					break;
 800342a:	e00a      	b.n	8003442 <set_dido+0x33e>
			for(int j = 0; j < 8; j++)
 800342c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003430:	3301      	adds	r3, #1
 8003432:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003436:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800343a:	2b07      	cmp	r3, #7
 800343c:	f77f aef6 	ble.w	800322c <set_dido+0x128>
				}
			}
			break;
 8003440:	e02d      	b.n	800349e <set_dido+0x39a>
					break;
 8003442:	bf00      	nop
			break;
 8003444:	e02b      	b.n	800349e <set_dido+0x39a>
 8003446:	bf00      	nop
 8003448:	0801caa4 	.word	0x0801caa4
 800344c:	0801caf4 	.word	0x0801caf4
 8003450:	0801cb44 	.word	0x0801cb44
 8003454:	20000710 	.word	0x20000710
 8003458:	20000008 	.word	0x20000008
 800345c:	20000028 	.word	0x20000028
 8003460:	20000048 	.word	0x20000048
 8003464:	20000338 	.word	0x20000338
 8003468:	0801ca4c 	.word	0x0801ca4c
 800346c:	0801ca58 	.word	0x0801ca58
 8003470:	40020c00 	.word	0x40020c00
 8003474:	0801ca64 	.word	0x0801ca64
 8003478:	0801ca74 	.word	0x0801ca74
 800347c:	40020400 	.word	0x40020400
 8003480:	0801ca84 	.word	0x0801ca84
 8003484:	0801ca94 	.word	0x0801ca94
	for(int i = 0; i < 8; i++)
 8003488:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800348c:	3301      	adds	r3, #1
 800348e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003492:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003496:	2b07      	cmp	r3, #7
 8003498:	f77f ae58 	ble.w	800314c <set_dido+0x48>
		}
	}
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	37cc      	adds	r7, #204	; 0xcc
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd90      	pop	{r4, r7, pc}
 80034a6:	bf00      	nop

080034a8 <set_vaido>:
//Принимает "RANGE_LOW" - нижний предел значений
//Принимает "RANGE_HIGH" - верхний предел значений
//Принимает "D_OUT" - строку с номером цифрового выхода
//Принимает "VAR_OUT" - переменная состояния выхода
void set_vaido(char *A_IN, double RANGE_LOW, double RANGE_HIGH, char *D_OUT, uint8_t VAR_OUT)
{
 80034a8:	b5b0      	push	{r4, r5, r7, lr}
 80034aa:	b0b2      	sub	sp, #200	; 0xc8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	61f8      	str	r0, [r7, #28]
 80034b0:	ed87 0b04 	vstr	d0, [r7, #16]
 80034b4:	ed87 1b02 	vstr	d1, [r7, #8]
 80034b8:	61b9      	str	r1, [r7, #24]
 80034ba:	4613      	mov	r3, r2
 80034bc:	71fb      	strb	r3, [r7, #7]
	char VHOD[4][10] = {"VHOD1", "VHOD2", "VHOD3", "VHOD4"};
 80034be:	4b93      	ldr	r3, [pc, #588]	; (800370c <set_vaido+0x264>)
 80034c0:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80034c4:	461d      	mov	r5, r3
 80034c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80034d2:	e884 0003 	stmia.w	r4, {r0, r1}
	char VIHOD[8][10] = {"VIHOD1", "VIHOD2", "VIHOD3", "VIHOD4", "VIHOD5", "VIHOD6", "VIHOD7", "VIHOD8"};
 80034d6:	4a8e      	ldr	r2, [pc, #568]	; (8003710 <set_vaido+0x268>)
 80034d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034dc:	4611      	mov	r1, r2
 80034de:	2250      	movs	r2, #80	; 0x50
 80034e0:	4618      	mov	r0, r3
 80034e2:	f013 fc79 	bl	8016dd8 <memcpy>

	uint8_t pVHOD[4] = {ADC1_IN3, ADC1_IN4, ADC1_IN5, ADC1_IN6};
 80034e6:	4b8b      	ldr	r3, [pc, #556]	; (8003714 <set_vaido+0x26c>)
 80034e8:	647b      	str	r3, [r7, #68]	; 0x44

	for(int i = 0; i < 4; i++)
 80034ea:	2300      	movs	r3, #0
 80034ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034f0:	e102      	b.n	80036f8 <set_vaido+0x250>
	{
		if(strcmp(A_IN, VHOD[i]) == 0)
 80034f2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80034f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	440b      	add	r3, r1
 8003504:	4619      	mov	r1, r3
 8003506:	69f8      	ldr	r0, [r7, #28]
 8003508:	f7fc fe62 	bl	80001d0 <strcmp>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	f040 80ed 	bne.w	80036ee <set_vaido+0x246>
		{
			if(VAiDo[i].clrFlag != false)
 8003514:	4980      	ldr	r1, [pc, #512]	; (8003718 <set_vaido+0x270>)
 8003516:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	440b      	add	r3, r1
 8003524:	3320      	adds	r3, #32
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d017      	beq.n	800355c <set_vaido+0xb4>
				HAL_GPIO_WritePin(VAiDo[i].D_OUT, VAiDo[i].OCD_Pin, RESET);
 800352c:	497a      	ldr	r1, [pc, #488]	; (8003718 <set_vaido+0x270>)
 800352e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	440b      	add	r3, r1
 800353c:	3318      	adds	r3, #24
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	4975      	ldr	r1, [pc, #468]	; (8003718 <set_vaido+0x270>)
 8003542:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	440b      	add	r3, r1
 8003550:	331e      	adds	r3, #30
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	2200      	movs	r2, #0
 8003556:	4619      	mov	r1, r3
 8003558:	f004 fb7a 	bl	8007c50 <HAL_GPIO_WritePin>

			VAiDo[i].clrFlag = true;
 800355c:	496e      	ldr	r1, [pc, #440]	; (8003718 <set_vaido+0x270>)
 800355e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	440b      	add	r3, r1
 800356c:	3320      	adds	r3, #32
 800356e:	2201      	movs	r2, #1
 8003570:	701a      	strb	r2, [r3, #0]
			VAiDo[i].A_IN = pVHOD[i];
 8003572:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8003576:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800357a:	4413      	add	r3, r2
 800357c:	7818      	ldrb	r0, [r3, #0]
 800357e:	4966      	ldr	r1, [pc, #408]	; (8003718 <set_vaido+0x270>)
 8003580:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	440b      	add	r3, r1
 800358e:	4602      	mov	r2, r0
 8003590:	701a      	strb	r2, [r3, #0]
			VAiDo[i].RANGE_LOW = RANGE_LOW;
 8003592:	4961      	ldr	r1, [pc, #388]	; (8003718 <set_vaido+0x270>)
 8003594:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	440b      	add	r3, r1
 80035a2:	f103 0108 	add.w	r1, r3, #8
 80035a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035aa:	e9c1 2300 	strd	r2, r3, [r1]
			VAiDo[i].RANGE_HIGH = RANGE_HIGH;
 80035ae:	495a      	ldr	r1, [pc, #360]	; (8003718 <set_vaido+0x270>)
 80035b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	440b      	add	r3, r1
 80035be:	f103 0110 	add.w	r1, r3, #16
 80035c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035c6:	e9c1 2300 	strd	r2, r3, [r1]
			//DiDo[i].DIN_Pin = DIN_Pin[i];
			for(int j = 0; j < 8; j++)
 80035ca:	2300      	movs	r3, #0
 80035cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035d0:	e087      	b.n	80036e2 <set_vaido+0x23a>
			{
				if(strcmp(D_OUT, VIHOD[j]) == 0)
 80035d2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80035d6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	440b      	add	r3, r1
 80035e4:	4619      	mov	r1, r3
 80035e6:	69b8      	ldr	r0, [r7, #24]
 80035e8:	f7fc fdf2 	bl	80001d0 <strcmp>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d172      	bne.n	80036d8 <set_vaido+0x230>
				{
					VAiDo[i].D_OUT = pVIHOD[j];
 80035f2:	4a4a      	ldr	r2, [pc, #296]	; (800371c <set_vaido+0x274>)
 80035f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80035fc:	4846      	ldr	r0, [pc, #280]	; (8003718 <set_vaido+0x270>)
 80035fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4403      	add	r3, r0
 800360c:	3318      	adds	r3, #24
 800360e:	6019      	str	r1, [r3, #0]
					VAiDo[i].VAR_OUT = VAR_OUT;
 8003610:	4941      	ldr	r1, [pc, #260]	; (8003718 <set_vaido+0x270>)
 8003612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	440b      	add	r3, r1
 8003620:	331c      	adds	r3, #28
 8003622:	79fa      	ldrb	r2, [r7, #7]
 8003624:	701a      	strb	r2, [r3, #0]
					VAiDo[i].OCD_Pin = OCD_Pin[j];
 8003626:	4a3e      	ldr	r2, [pc, #248]	; (8003720 <set_vaido+0x278>)
 8003628:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800362c:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8003630:	4939      	ldr	r1, [pc, #228]	; (8003718 <set_vaido+0x270>)
 8003632:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	440b      	add	r3, r1
 8003640:	331e      	adds	r3, #30
 8003642:	4602      	mov	r2, r0
 8003644:	801a      	strh	r2, [r3, #0]

					//------------------------------------------------
					char Buff[32];
					SEND_str("SET VALUE: ");
 8003646:	4837      	ldr	r0, [pc, #220]	; (8003724 <set_vaido+0x27c>)
 8003648:	f7fe fc62 	bl	8001f10 <SEND_str>
					sprintf(Buff, "%.3f", adcValue[i]);
 800364c:	4a36      	ldr	r2, [pc, #216]	; (8003728 <set_vaido+0x280>)
 800364e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4413      	add	r3, r2
 8003656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800365e:	4933      	ldr	r1, [pc, #204]	; (800372c <set_vaido+0x284>)
 8003660:	f014 f99a 	bl	8017998 <siprintf>
					SEND_str(Buff);
 8003664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003668:	4618      	mov	r0, r3
 800366a:	f7fe fc51 	bl	8001f10 <SEND_str>
					SEND_str("\nRANGE_LOW: ");
 800366e:	4830      	ldr	r0, [pc, #192]	; (8003730 <set_vaido+0x288>)
 8003670:	f7fe fc4e 	bl	8001f10 <SEND_str>
					sprintf(Buff, "%.3f", VAiDo[i].RANGE_LOW);
 8003674:	4928      	ldr	r1, [pc, #160]	; (8003718 <set_vaido+0x270>)
 8003676:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	440b      	add	r3, r1
 8003684:	3308      	adds	r3, #8
 8003686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800368e:	4927      	ldr	r1, [pc, #156]	; (800372c <set_vaido+0x284>)
 8003690:	f014 f982 	bl	8017998 <siprintf>
					SEND_str(Buff);
 8003694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003698:	4618      	mov	r0, r3
 800369a:	f7fe fc39 	bl	8001f10 <SEND_str>
					SEND_str("\nRANGE_HIGH: ");
 800369e:	4825      	ldr	r0, [pc, #148]	; (8003734 <set_vaido+0x28c>)
 80036a0:	f7fe fc36 	bl	8001f10 <SEND_str>
					sprintf(Buff, "%.3f", VAiDo[i].RANGE_HIGH);
 80036a4:	491c      	ldr	r1, [pc, #112]	; (8003718 <set_vaido+0x270>)
 80036a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	440b      	add	r3, r1
 80036b4:	3310      	adds	r3, #16
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80036be:	491b      	ldr	r1, [pc, #108]	; (800372c <set_vaido+0x284>)
 80036c0:	f014 f96a 	bl	8017998 <siprintf>
					SEND_str(Buff);
 80036c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fe fc21 	bl	8001f10 <SEND_str>
					SEND_str("\n");
 80036ce:	481a      	ldr	r0, [pc, #104]	; (8003738 <set_vaido+0x290>)
 80036d0:	f7fe fc1e 	bl	8001f10 <SEND_str>
					//------------------------------------------------

					break;
 80036d4:	bf00      	nop
				}
			}
			break;
 80036d6:	e015      	b.n	8003704 <set_vaido+0x25c>
			for(int j = 0; j < 8; j++)
 80036d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036dc:	3301      	adds	r3, #1
 80036de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036e6:	2b07      	cmp	r3, #7
 80036e8:	f77f af73 	ble.w	80035d2 <set_vaido+0x12a>
			break;
 80036ec:	e00a      	b.n	8003704 <set_vaido+0x25c>
	for(int i = 0; i < 4; i++)
 80036ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036f2:	3301      	adds	r3, #1
 80036f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	f77f aef8 	ble.w	80034f2 <set_vaido+0x4a>
		}
	}
}
 8003702:	bf00      	nop
 8003704:	bf00      	nop
 8003706:	37c8      	adds	r7, #200	; 0xc8
 8003708:	46bd      	mov	sp, r7
 800370a:	bdb0      	pop	{r4, r5, r7, pc}
 800370c:	0801cb8c 	.word	0x0801cb8c
 8003710:	0801caf4 	.word	0x0801caf4
 8003714:	04030201 	.word	0x04030201
 8003718:	20000670 	.word	0x20000670
 800371c:	20000028 	.word	0x20000028
 8003720:	20000048 	.word	0x20000048
 8003724:	0801cb54 	.word	0x0801cb54
 8003728:	20000300 	.word	0x20000300
 800372c:	0801cb60 	.word	0x0801cb60
 8003730:	0801cb68 	.word	0x0801cb68
 8003734:	0801cb78 	.word	0x0801cb78
 8003738:	0801cb88 	.word	0x0801cb88

0800373c <set_pwm>:
//Задать сигнал ШИМ на одном выходе
//Принимает "PWM_OUT" - строку с номером ШИМ выхода
//Принимает "D_CYCLE" - коэффициент заполнения ШИМ
void set_pwm(char *PWM_OUT, uint32_t D_CYCLE)
{
 800373c:	b5b0      	push	{r4, r5, r7, lr}
 800373e:	b094      	sub	sp, #80	; 0x50
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
	char PVIHOD[4][5] = {"PWM1", "PWM2", "PWM3", "PWM4"};
 8003746:	4b4b      	ldr	r3, [pc, #300]	; (8003874 <set_pwm+0x138>)
 8003748:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800374c:	461d      	mov	r5, r3
 800374e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003752:	682b      	ldr	r3, [r5, #0]
 8003754:	6023      	str	r3, [r4, #0]
	uint32_t PWM_Channel[4] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4};
 8003756:	4b48      	ldr	r3, [pc, #288]	; (8003878 <set_pwm+0x13c>)
 8003758:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800375c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800375e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for(int i = 0; i < 4; i++)
 8003762:	2300      	movs	r3, #0
 8003764:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003766:	e07c      	b.n	8003862 <set_pwm+0x126>
	{
		if(strcmp(PWM_OUT, PVIHOD[i]) == 0)
 8003768:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800376c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	440b      	add	r3, r1
 8003776:	4619      	mov	r1, r3
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7fc fd29 	bl	80001d0 <strcmp>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d16b      	bne.n	800385c <set_pwm+0x120>
		{
			if(PWM[i].clrFlag != false)
 8003784:	4a3d      	ldr	r2, [pc, #244]	; (800387c <set_pwm+0x140>)
 8003786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4413      	add	r3, r2
 800378c:	799b      	ldrb	r3, [r3, #6]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00b      	beq.n	80037aa <set_pwm+0x6e>
				HAL_TIM_PWM_Start_DMA(&htim3, PWM_Channel[i], 0, 1);
 8003792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800379a:	4413      	add	r3, r2
 800379c:	f853 1c28 	ldr.w	r1, [r3, #-40]
 80037a0:	2301      	movs	r3, #1
 80037a2:	2200      	movs	r2, #0
 80037a4:	4836      	ldr	r0, [pc, #216]	; (8003880 <set_pwm+0x144>)
 80037a6:	f005 ff5d 	bl	8009664 <HAL_TIM_PWM_Start_DMA>

			PWM[i].clrFlag = true;
 80037aa:	4a34      	ldr	r2, [pc, #208]	; (800387c <set_pwm+0x140>)
 80037ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	4413      	add	r3, r2
 80037b2:	2201      	movs	r2, #1
 80037b4:	719a      	strb	r2, [r3, #6]
			PWM[i].PWM_Channel = PWM_Channel[i];
 80037b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80037be:	4413      	add	r3, r2
 80037c0:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80037c4:	492d      	ldr	r1, [pc, #180]	; (800387c <set_pwm+0x140>)
 80037c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			PWM[i].D_CYCLE[0] = (D_CYCLE * 100);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	0092      	lsls	r2, r2, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	461a      	mov	r2, r3
 80037d8:	0091      	lsls	r1, r2, #2
 80037da:	461a      	mov	r2, r3
 80037dc:	460b      	mov	r3, r1
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	b299      	uxth	r1, r3
 80037e4:	4a25      	ldr	r2, [pc, #148]	; (800387c <set_pwm+0x140>)
 80037e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	4413      	add	r3, r2
 80037ec:	460a      	mov	r2, r1
 80037ee:	809a      	strh	r2, [r3, #4]
			HAL_TIM_PWM_Start_DMA(&htim3, PWM_Channel[i], (uint32_t*)PWM[i].D_CYCLE, 1);
 80037f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80037f8:	4413      	add	r3, r2
 80037fa:	f853 1c28 	ldr.w	r1, [r3, #-40]
 80037fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	4a1e      	ldr	r2, [pc, #120]	; (800387c <set_pwm+0x140>)
 8003804:	4413      	add	r3, r2
 8003806:	1d1a      	adds	r2, r3, #4
 8003808:	2301      	movs	r3, #1
 800380a:	481d      	ldr	r0, [pc, #116]	; (8003880 <set_pwm+0x144>)
 800380c:	f005 ff2a 	bl	8009664 <HAL_TIM_PWM_Start_DMA>

			//------------------------------------------------
			char Buff[32];
			SEND_str("PWM_OUT: ");
 8003810:	481c      	ldr	r0, [pc, #112]	; (8003884 <set_pwm+0x148>)
 8003812:	f7fe fb7d 	bl	8001f10 <SEND_str>
			SEND_str(PVIHOD[i]);
 8003816:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800381a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	440b      	add	r3, r1
 8003824:	4618      	mov	r0, r3
 8003826:	f7fe fb73 	bl	8001f10 <SEND_str>
			SEND_str("\n");
 800382a:	4817      	ldr	r0, [pc, #92]	; (8003888 <set_pwm+0x14c>)
 800382c:	f7fe fb70 	bl	8001f10 <SEND_str>
			SEND_str("DUTY_CYCLE: ");
 8003830:	4816      	ldr	r0, [pc, #88]	; (800388c <set_pwm+0x150>)
 8003832:	f7fe fb6d 	bl	8001f10 <SEND_str>
			sprintf(Buff, "%d", D_CYCLE);
 8003836:	f107 0308 	add.w	r3, r7, #8
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	4914      	ldr	r1, [pc, #80]	; (8003890 <set_pwm+0x154>)
 800383e:	4618      	mov	r0, r3
 8003840:	f014 f8aa 	bl	8017998 <siprintf>
			SEND_str(Buff);
 8003844:	f107 0308 	add.w	r3, r7, #8
 8003848:	4618      	mov	r0, r3
 800384a:	f7fe fb61 	bl	8001f10 <SEND_str>
			SEND_str("%");
 800384e:	4811      	ldr	r0, [pc, #68]	; (8003894 <set_pwm+0x158>)
 8003850:	f7fe fb5e 	bl	8001f10 <SEND_str>
			SEND_str("\n");
 8003854:	480c      	ldr	r0, [pc, #48]	; (8003888 <set_pwm+0x14c>)
 8003856:	f7fe fb5b 	bl	8001f10 <SEND_str>
			//------------------------------------------------

			break;
 800385a:	e007      	b.n	800386c <set_pwm+0x130>
	for(int i = 0; i < 4; i++)
 800385c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385e:	3301      	adds	r3, #1
 8003860:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003864:	2b03      	cmp	r3, #3
 8003866:	f77f af7f 	ble.w	8003768 <set_pwm+0x2c>
		}
	}
}
 800386a:	bf00      	nop
 800386c:	bf00      	nop
 800386e:	3750      	adds	r7, #80	; 0x50
 8003870:	46bd      	mov	sp, r7
 8003872:	bdb0      	pop	{r4, r5, r7, pc}
 8003874:	0801cbd8 	.word	0x0801cbd8
 8003878:	0801cbec 	.word	0x0801cbec
 800387c:	20000650 	.word	0x20000650
 8003880:	200009c8 	.word	0x200009c8
 8003884:	0801cbb4 	.word	0x0801cbb4
 8003888:	0801cb88 	.word	0x0801cb88
 800388c:	0801cbc0 	.word	0x0801cbc0
 8003890:	0801cbd0 	.word	0x0801cbd0
 8003894:	0801cbd4 	.word	0x0801cbd4

08003898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800389c:	f001 febe 	bl	800561c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038a0:	f000 f85a 	bl	8003958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038a4:	f7fe fca4 	bl	80021f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80038a8:	f7fe fc54 	bl	8002154 <MX_DMA_Init>
  MX_ADC1_Init();
 80038ac:	f7fd fb5e 	bl	8000f6c <MX_ADC1_Init>
  MX_SPI1_Init();
 80038b0:	f000 f9d0 	bl	8003c54 <MX_SPI1_Init>
  MX_SPI2_Init();
 80038b4:	f000 fa04 	bl	8003cc0 <MX_SPI2_Init>
  MX_TIM3_Init();
 80038b8:	f001 fa9c 	bl	8004df4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80038bc:	f001 fcc8 	bl	8005250 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80038c0:	f001 fcf0 	bl	80052a4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80038c4:	f001 fd18 	bl	80052f8 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 80038c8:	f007 f9ba 	bl	800ac40 <MX_LWIP_Init>
  MX_TIM4_Init();
 80038cc:	f001 fb0e 	bl	8004eec <MX_TIM4_Init>
  MX_RTC_Init();
 80038d0:	f000 f950 	bl	8003b74 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

	HAL_Delay(5000);
 80038d4:	f241 3088 	movw	r0, #5000	; 0x1388
 80038d8:	f001 fee2 	bl	80056a0 <HAL_Delay>

	EN_Interrupt();	//Для дебага по USART3
 80038dc:	f001 fe4e 	bl	800557c <EN_Interrupt>
	//Для организации обмена данными по ethernet нужно включить:
	//net_ini(); MX_LWIP_Process();(Вкл в main) также закоментить в файле stm32f4xx_it.c строчки для отладки через DEBUG_main();


	//----------------ADC_test----------------
	HAL_GPIO_WritePin(GPIOE, S1_Pin, RESET);												//Вход аналогового комутатора - выход линии 1
 80038e0:	2200      	movs	r2, #0
 80038e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038e6:	4815      	ldr	r0, [pc, #84]	; (800393c <main+0xa4>)
 80038e8:	f004 f9b2 	bl	8007c50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, S2_Pin, RESET);
 80038ec:	2200      	movs	r2, #0
 80038ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038f2:	4812      	ldr	r0, [pc, #72]	; (800393c <main+0xa4>)
 80038f4:	f004 f9ac 	bl	8007c50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, S3_Pin, RESET);
 80038f8:	2200      	movs	r2, #0
 80038fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038fe:	480f      	ldr	r0, [pc, #60]	; (800393c <main+0xa4>)
 8003900:	f004 f9a6 	bl	8007c50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, S4_Pin, RESET);
 8003904:	2200      	movs	r2, #0
 8003906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800390a:	480c      	ldr	r0, [pc, #48]	; (800393c <main+0xa4>)
 800390c:	f004 f9a0 	bl	8007c50 <HAL_GPIO_WritePin>

	//HAL_ADCEx_Calibration_Start(&hadc1);
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 4); // стартуем АЦП
 8003910:	2204      	movs	r2, #4
 8003912:	490b      	ldr	r1, [pc, #44]	; (8003940 <main+0xa8>)
 8003914:	480b      	ldr	r0, [pc, #44]	; (8003944 <main+0xac>)
 8003916:	f001 ff2b 	bl	8005770 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_4);
 800391a:	210c      	movs	r1, #12
 800391c:	480a      	ldr	r0, [pc, #40]	; (8003948 <main+0xb0>)
 800391e:	f005 fe37 	bl	8009590 <HAL_TIM_OC_Start>
	//----------------------------------------


//	HAL_UART_Receive_IT(&huart3,(uint8_t*)str_ethernet,1);								//Настройка прерывания COM для отладки ETH (!?)

	HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);	//Настройка прерывания по spi для МК
 8003922:	2301      	movs	r3, #1
 8003924:	4a09      	ldr	r2, [pc, #36]	; (800394c <main+0xb4>)
 8003926:	490a      	ldr	r1, [pc, #40]	; (8003950 <main+0xb8>)
 8003928:	480a      	ldr	r0, [pc, #40]	; (8003954 <main+0xbc>)
 800392a:	f005 fa0f 	bl	8008d4c <HAL_SPI_TransmitReceive_IT>
		//----------------------------------------
		 */

		///*
		//--------------SPI_test_MK---------------
		SPI_available();	//Необходимо переделать так чтобы на дисплее был только статус вывода.
 800392e:	f000 fb29 	bl	8003f84 <SPI_available>
//		  }



		//------------------DEBUG-----------------
		DEBUG_main();
 8003932:	f7fe fb09 	bl	8001f48 <DEBUG_main>
//			HAL_Delay(250);
//			ReInitFlag = 0;
//			CheckReWrite();
//			SEND_str("interrupt...");
//			SEND_str("\n");
		CheckReWriteVAiDo();
 8003936:	f7ff fb53 	bl	8002fe0 <CheckReWriteVAiDo>
		SPI_available();	//Необходимо переделать так чтобы на дисплее был только статус вывода.
 800393a:	e7f8      	b.n	800392e <main+0x96>
 800393c:	40021000 	.word	0x40021000
 8003940:	200002f8 	.word	0x200002f8
 8003944:	200005a8 	.word	0x200005a8
 8003948:	20000928 	.word	0x20000928
 800394c:	20000348 	.word	0x20000348
 8003950:	2000034c 	.word	0x2000034c
 8003954:	20000838 	.word	0x20000838

08003958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b098      	sub	sp, #96	; 0x60
 800395c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800395e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003962:	2230      	movs	r2, #48	; 0x30
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f013 fa5e 	bl	8016e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800396c:	f107 031c 	add.w	r3, r7, #28
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	60da      	str	r2, [r3, #12]
 800397a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800397c:	f107 030c 	add.w	r3, r7, #12
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	609a      	str	r2, [r3, #8]
 8003988:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	60bb      	str	r3, [r7, #8]
 800398e:	4b31      	ldr	r3, [pc, #196]	; (8003a54 <SystemClock_Config+0xfc>)
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	4a30      	ldr	r2, [pc, #192]	; (8003a54 <SystemClock_Config+0xfc>)
 8003994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003998:	6413      	str	r3, [r2, #64]	; 0x40
 800399a:	4b2e      	ldr	r3, [pc, #184]	; (8003a54 <SystemClock_Config+0xfc>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039a6:	2300      	movs	r3, #0
 80039a8:	607b      	str	r3, [r7, #4]
 80039aa:	4b2b      	ldr	r3, [pc, #172]	; (8003a58 <SystemClock_Config+0x100>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a2a      	ldr	r2, [pc, #168]	; (8003a58 <SystemClock_Config+0x100>)
 80039b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b28      	ldr	r3, [pc, #160]	; (8003a58 <SystemClock_Config+0x100>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039be:	607b      	str	r3, [r7, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80039c2:	2305      	movs	r3, #5
 80039c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80039cc:	2301      	movs	r3, #1
 80039ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039d0:	2302      	movs	r3, #2
 80039d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80039da:	2304      	movs	r3, #4
 80039dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80039de:	23a8      	movs	r3, #168	; 0xa8
 80039e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039e2:	2302      	movs	r3, #2
 80039e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80039e6:	2304      	movs	r3, #4
 80039e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039ee:	4618      	mov	r0, r3
 80039f0:	f004 f960 	bl	8007cb4 <HAL_RCC_OscConfig>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80039fa:	f000 f8b3 	bl	8003b64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039fe:	230f      	movs	r3, #15
 8003a00:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a02:	2302      	movs	r3, #2
 8003a04:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a06:	2300      	movs	r3, #0
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a14:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003a16:	f107 031c 	add.w	r3, r7, #28
 8003a1a:	2105      	movs	r1, #5
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f004 fbb9 	bl	8008194 <HAL_RCC_ClockConfig>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003a28:	f000 f89c 	bl	8003b64 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003a30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a34:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a36:	f107 030c 	add.w	r3, r7, #12
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f004 fdd8 	bl	80085f0 <HAL_RCCEx_PeriphCLKConfig>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8003a46:	f000 f88d 	bl	8003b64 <Error_Handler>
  }
}
 8003a4a:	bf00      	nop
 8003a4c:	3760      	adds	r7, #96	; 0x60
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40023800 	.word	0x40023800
 8003a58:	40007000 	.word	0x40007000

08003a5c <HAL_GPIO_EXTI_Callback>:
//	{
//		UART3_RxCpltCallback();
//	}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	80fb      	strh	r3, [r7, #6]
//			VCP_send_buffer_new("START\n",6);
//		delay(2000);
//	}
//	if(!ReInitFlag)
//		ReInitFlag = 1;
	CheckReWriteDiDo();
 8003a66:	f7ff f9ff 	bl	8002e68 <CheckReWriteDiDo>
//	else
//	{
//		__NOP();
//	}
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]

	  //Написать обработчик сообщенй по SPI от MCU

	if(hspi == &hspi2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <HAL_SPI_TxRxCpltCallback+0x34>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d10b      	bne.n	8003a9c <HAL_SPI_TxRxCpltCallback+0x28>
	{
	    if(!hspi2.TxXferCount && !flag_iput_spi2)
 8003a84:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <HAL_SPI_TxRxCpltCallback+0x34>)
 8003a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <HAL_SPI_TxRxCpltCallback+0x28>
 8003a8e:	4b07      	ldr	r3, [pc, #28]	; (8003aac <HAL_SPI_TxRxCpltCallback+0x38>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d102      	bne.n	8003a9c <HAL_SPI_TxRxCpltCallback+0x28>
	    {
	    	flag_iput_spi2 = 1;
 8003a96:	4b05      	ldr	r3, [pc, #20]	; (8003aac <HAL_SPI_TxRxCpltCallback+0x38>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	701a      	strb	r2, [r3, #0]
	    }
	}
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	20000838 	.word	0x20000838
 8003aac:	2000034d 	.word	0x2000034d

08003ab0 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1d      	ldr	r2, [pc, #116]	; (8003b34 <HAL_ADC_ConvCpltCallback+0x84>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d133      	bne.n	8003b2a <HAL_ADC_ConvCpltCallback+0x7a>
//    	flag = 1;
//        snprintf(trans_str, 63, "ADC %.3f %.3f %.3f %.3f\n", Conversion_ADC1((uint16_t)adc[0]), Conversion_ADC1((uint16_t)adc[1]),
//        											 Conversion_ADC1((uint16_t)adc[2]), Conversion_ADC1((uint16_t)adc[3]));
        //HAL_UART_Transmit(&huart3, (uint8_t*)trans_str, strlen(trans_str), 1000);

        adcValue[0] = Conversion_ADC1((uint16_t)adc[0]);
 8003ac2:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <HAL_ADC_ConvCpltCallback+0x88>)
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fd fb45 	bl	8001158 <Conversion_ADC1>
 8003ace:	eeb0 7a40 	vmov.f32	s14, s0
 8003ad2:	eef0 7a60 	vmov.f32	s15, s1
 8003ad6:	4b19      	ldr	r3, [pc, #100]	; (8003b3c <HAL_ADC_ConvCpltCallback+0x8c>)
 8003ad8:	ed83 7b00 	vstr	d7, [r3]
        adcValue[1] = Conversion_ADC1((uint16_t)adc[1]);
 8003adc:	4b16      	ldr	r3, [pc, #88]	; (8003b38 <HAL_ADC_ConvCpltCallback+0x88>)
 8003ade:	885b      	ldrh	r3, [r3, #2]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fd fb38 	bl	8001158 <Conversion_ADC1>
 8003ae8:	eeb0 7a40 	vmov.f32	s14, s0
 8003aec:	eef0 7a60 	vmov.f32	s15, s1
 8003af0:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <HAL_ADC_ConvCpltCallback+0x8c>)
 8003af2:	ed83 7b02 	vstr	d7, [r3, #8]
        adcValue[2] = Conversion_ADC1((uint16_t)adc[2]);
 8003af6:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <HAL_ADC_ConvCpltCallback+0x88>)
 8003af8:	889b      	ldrh	r3, [r3, #4]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fd fb2b 	bl	8001158 <Conversion_ADC1>
 8003b02:	eeb0 7a40 	vmov.f32	s14, s0
 8003b06:	eef0 7a60 	vmov.f32	s15, s1
 8003b0a:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <HAL_ADC_ConvCpltCallback+0x8c>)
 8003b0c:	ed83 7b04 	vstr	d7, [r3, #16]
        adcValue[3] = Conversion_ADC1((uint16_t)adc[3]);
 8003b10:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <HAL_ADC_ConvCpltCallback+0x88>)
 8003b12:	88db      	ldrh	r3, [r3, #6]
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fd fb1e 	bl	8001158 <Conversion_ADC1>
 8003b1c:	eeb0 7a40 	vmov.f32	s14, s0
 8003b20:	eef0 7a60 	vmov.f32	s15, s1
 8003b24:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <HAL_ADC_ConvCpltCallback+0x8c>)
 8003b26:	ed83 7b06 	vstr	d7, [r3, #24]
    }
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40012000 	.word	0x40012000
 8003b38:	200002f8 	.word	0x200002f8
 8003b3c:	20000300 	.word	0x20000300

08003b40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a04      	ldr	r2, [pc, #16]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d101      	bne.n	8003b56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003b52:	f001 fd85 	bl	8005660 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40010000 	.word	0x40010000

08003b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003b68:	bf00      	nop
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
	...

08003b74 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8003b7a:	1d3b      	adds	r3, r7, #4
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	60da      	str	r2, [r3, #12]
 8003b86:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003b88:	2300      	movs	r3, #0
 8003b8a:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003b8c:	4b24      	ldr	r3, [pc, #144]	; (8003c20 <MX_RTC_Init+0xac>)
 8003b8e:	4a25      	ldr	r2, [pc, #148]	; (8003c24 <MX_RTC_Init+0xb0>)
 8003b90:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003b92:	4b23      	ldr	r3, [pc, #140]	; (8003c20 <MX_RTC_Init+0xac>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003b98:	4b21      	ldr	r3, [pc, #132]	; (8003c20 <MX_RTC_Init+0xac>)
 8003b9a:	227f      	movs	r2, #127	; 0x7f
 8003b9c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003b9e:	4b20      	ldr	r3, [pc, #128]	; (8003c20 <MX_RTC_Init+0xac>)
 8003ba0:	22ff      	movs	r2, #255	; 0xff
 8003ba2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003ba4:	4b1e      	ldr	r3, [pc, #120]	; (8003c20 <MX_RTC_Init+0xac>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003baa:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <MX_RTC_Init+0xac>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003bb0:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <MX_RTC_Init+0xac>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003bb6:	481a      	ldr	r0, [pc, #104]	; (8003c20 <MX_RTC_Init+0xac>)
 8003bb8:	f004 fdfc 	bl	80087b4 <HAL_RTC_Init>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003bc2:	f7ff ffcf 	bl	8003b64 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 8003bc6:	230a      	movs	r3, #10
 8003bc8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 34;
 8003bca:	2322      	movs	r3, #34	; 0x22
 8003bcc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003bda:	1d3b      	adds	r3, r7, #4
 8003bdc:	2200      	movs	r2, #0
 8003bde:	4619      	mov	r1, r3
 8003be0:	480f      	ldr	r0, [pc, #60]	; (8003c20 <MX_RTC_Init+0xac>)
 8003be2:	f004 fe78 	bl	80088d6 <HAL_RTC_SetTime>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8003bec:	f7ff ffba 	bl	8003b64 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 20;
 8003bf8:	2314      	movs	r3, #20
 8003bfa:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 21;
 8003bfc:	2315      	movs	r3, #21
 8003bfe:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003c00:	463b      	mov	r3, r7
 8003c02:	2200      	movs	r2, #0
 8003c04:	4619      	mov	r1, r3
 8003c06:	4806      	ldr	r0, [pc, #24]	; (8003c20 <MX_RTC_Init+0xac>)
 8003c08:	f004 ff22 	bl	8008a50 <HAL_RTC_SetDate>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8003c12:	f7ff ffa7 	bl	8003b64 <Error_Handler>
  }

}
 8003c16:	bf00      	nop
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000818 	.word	0x20000818
 8003c24:	40002800 	.word	0x40002800

08003c28 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a05      	ldr	r2, [pc, #20]	; (8003c4c <HAL_RTC_MspInit+0x24>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d102      	bne.n	8003c40 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003c3a:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <HAL_RTC_MspInit+0x28>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	40002800 	.word	0x40002800
 8003c50:	42470e3c 	.word	0x42470e3c

08003c54 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003c58:	4b17      	ldr	r3, [pc, #92]	; (8003cb8 <MX_SPI1_Init+0x64>)
 8003c5a:	4a18      	ldr	r2, [pc, #96]	; (8003cbc <MX_SPI1_Init+0x68>)
 8003c5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c5e:	4b16      	ldr	r3, [pc, #88]	; (8003cb8 <MX_SPI1_Init+0x64>)
 8003c60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003c66:	4b14      	ldr	r3, [pc, #80]	; (8003cb8 <MX_SPI1_Init+0x64>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c6c:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <MX_SPI1_Init+0x64>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c72:	4b11      	ldr	r3, [pc, #68]	; (8003cb8 <MX_SPI1_Init+0x64>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c78:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <MX_SPI1_Init+0x64>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c7e:	4b0e      	ldr	r3, [pc, #56]	; (8003cb8 <MX_SPI1_Init+0x64>)
 8003c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c86:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <MX_SPI1_Init+0x64>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <MX_SPI1_Init+0x64>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c92:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <MX_SPI1_Init+0x64>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c98:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <MX_SPI1_Init+0x64>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003c9e:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <MX_SPI1_Init+0x64>)
 8003ca0:	220a      	movs	r2, #10
 8003ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ca4:	4804      	ldr	r0, [pc, #16]	; (8003cb8 <MX_SPI1_Init+0x64>)
 8003ca6:	f004 ffec 	bl	8008c82 <HAL_SPI_Init>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003cb0:	f7ff ff58 	bl	8003b64 <Error_Handler>
  }

}
 8003cb4:	bf00      	nop
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20000890 	.word	0x20000890
 8003cbc:	40013000 	.word	0x40013000

08003cc0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8003cc4:	4b15      	ldr	r3, [pc, #84]	; (8003d1c <MX_SPI2_Init+0x5c>)
 8003cc6:	4a16      	ldr	r2, [pc, #88]	; (8003d20 <MX_SPI2_Init+0x60>)
 8003cc8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8003cca:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <MX_SPI2_Init+0x5c>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003cd0:	4b12      	ldr	r3, [pc, #72]	; (8003d1c <MX_SPI2_Init+0x5c>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cd6:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <MX_SPI2_Init+0x5c>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cdc:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <MX_SPI2_Init+0x5c>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ce2:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <MX_SPI2_Init+0x5c>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <MX_SPI2_Init+0x5c>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cee:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <MX_SPI2_Init+0x5c>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cf4:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <MX_SPI2_Init+0x5c>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <MX_SPI2_Init+0x5c>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003d00:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <MX_SPI2_Init+0x5c>)
 8003d02:	220a      	movs	r2, #10
 8003d04:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003d06:	4805      	ldr	r0, [pc, #20]	; (8003d1c <MX_SPI2_Init+0x5c>)
 8003d08:	f004 ffbb 	bl	8008c82 <HAL_SPI_Init>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 8003d12:	f7ff ff27 	bl	8003b64 <Error_Handler>
  }

}
 8003d16:	bf00      	nop
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000838 	.word	0x20000838
 8003d20:	40003800 	.word	0x40003800

08003d24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08c      	sub	sp, #48	; 0x30
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d2c:	f107 031c 	add.w	r3, r7, #28
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	60da      	str	r2, [r3, #12]
 8003d3a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a45      	ldr	r2, [pc, #276]	; (8003e58 <HAL_SPI_MspInit+0x134>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d12c      	bne.n	8003da0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	61bb      	str	r3, [r7, #24]
 8003d4a:	4b44      	ldr	r3, [pc, #272]	; (8003e5c <HAL_SPI_MspInit+0x138>)
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4e:	4a43      	ldr	r2, [pc, #268]	; (8003e5c <HAL_SPI_MspInit+0x138>)
 8003d50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d54:	6453      	str	r3, [r2, #68]	; 0x44
 8003d56:	4b41      	ldr	r3, [pc, #260]	; (8003e5c <HAL_SPI_MspInit+0x138>)
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d5e:	61bb      	str	r3, [r7, #24]
 8003d60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	4b3d      	ldr	r3, [pc, #244]	; (8003e5c <HAL_SPI_MspInit+0x138>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	4a3c      	ldr	r2, [pc, #240]	; (8003e5c <HAL_SPI_MspInit+0x138>)
 8003d6c:	f043 0302 	orr.w	r3, r3, #2
 8003d70:	6313      	str	r3, [r2, #48]	; 0x30
 8003d72:	4b3a      	ldr	r3, [pc, #232]	; (8003e5c <HAL_SPI_MspInit+0x138>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8003d7e:	2338      	movs	r3, #56	; 0x38
 8003d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d82:	2302      	movs	r3, #2
 8003d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d8e:	2305      	movs	r3, #5
 8003d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d92:	f107 031c 	add.w	r3, r7, #28
 8003d96:	4619      	mov	r1, r3
 8003d98:	4831      	ldr	r0, [pc, #196]	; (8003e60 <HAL_SPI_MspInit+0x13c>)
 8003d9a:	f003 fda5 	bl	80078e8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003d9e:	e057      	b.n	8003e50 <HAL_SPI_MspInit+0x12c>
  else if(spiHandle->Instance==SPI2)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a2f      	ldr	r2, [pc, #188]	; (8003e64 <HAL_SPI_MspInit+0x140>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d152      	bne.n	8003e50 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	4b2b      	ldr	r3, [pc, #172]	; (8003e5c <HAL_SPI_MspInit+0x138>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	4a2a      	ldr	r2, [pc, #168]	; (8003e5c <HAL_SPI_MspInit+0x138>)
 8003db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003db8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dba:	4b28      	ldr	r3, [pc, #160]	; (8003e5c <HAL_SPI_MspInit+0x138>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	4b24      	ldr	r3, [pc, #144]	; (8003e5c <HAL_SPI_MspInit+0x138>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	4a23      	ldr	r2, [pc, #140]	; (8003e5c <HAL_SPI_MspInit+0x138>)
 8003dd0:	f043 0304 	orr.w	r3, r3, #4
 8003dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd6:	4b21      	ldr	r3, [pc, #132]	; (8003e5c <HAL_SPI_MspInit+0x138>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	60bb      	str	r3, [r7, #8]
 8003de6:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <HAL_SPI_MspInit+0x138>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	4a1c      	ldr	r2, [pc, #112]	; (8003e5c <HAL_SPI_MspInit+0x138>)
 8003dec:	f043 0302 	orr.w	r3, r3, #2
 8003df0:	6313      	str	r3, [r2, #48]	; 0x30
 8003df2:	4b1a      	ldr	r3, [pc, #104]	; (8003e5c <HAL_SPI_MspInit+0x138>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	60bb      	str	r3, [r7, #8]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MISO_M_Pin|MOSI_M_Pin;
 8003dfe:	230c      	movs	r3, #12
 8003e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e02:	2302      	movs	r3, #2
 8003e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e0e:	2305      	movs	r3, #5
 8003e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e12:	f107 031c 	add.w	r3, r7, #28
 8003e16:	4619      	mov	r1, r3
 8003e18:	4813      	ldr	r0, [pc, #76]	; (8003e68 <HAL_SPI_MspInit+0x144>)
 8003e1a:	f003 fd65 	bl	80078e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCK_M_Pin|GPIO_PIN_9;
 8003e1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e24:	2302      	movs	r3, #2
 8003e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e30:	2305      	movs	r3, #5
 8003e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e34:	f107 031c 	add.w	r3, r7, #28
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4809      	ldr	r0, [pc, #36]	; (8003e60 <HAL_SPI_MspInit+0x13c>)
 8003e3c:	f003 fd54 	bl	80078e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003e40:	2200      	movs	r2, #0
 8003e42:	2100      	movs	r1, #0
 8003e44:	2024      	movs	r0, #36	; 0x24
 8003e46:	f002 f8f1 	bl	800602c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003e4a:	2024      	movs	r0, #36	; 0x24
 8003e4c:	f002 f90a 	bl	8006064 <HAL_NVIC_EnableIRQ>
}
 8003e50:	bf00      	nop
 8003e52:	3730      	adds	r7, #48	; 0x30
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40013000 	.word	0x40013000
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	40020400 	.word	0x40020400
 8003e64:	40003800 	.word	0x40003800
 8003e68:	40020800 	.word	0x40020800

08003e6c <ReWriteOCD>:
//char trans_str[64] = {0,};


//Функция обновления значений в массиве данных коллекторных выходов
void ReWriteOCD(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
	if(Status_OCD[0])
 8003e70:	4b40      	ldr	r3, [pc, #256]	; (8003f74 <ReWriteOCD+0x108>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <ReWriteOCD+0x18>
		HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, SET);
 8003e78:	2201      	movs	r2, #1
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	483e      	ldr	r0, [pc, #248]	; (8003f78 <ReWriteOCD+0x10c>)
 8003e7e:	f003 fee7 	bl	8007c50 <HAL_GPIO_WritePin>
 8003e82:	e004      	b.n	8003e8e <ReWriteOCD+0x22>
	else
		HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, RESET);
 8003e84:	2200      	movs	r2, #0
 8003e86:	2101      	movs	r1, #1
 8003e88:	483b      	ldr	r0, [pc, #236]	; (8003f78 <ReWriteOCD+0x10c>)
 8003e8a:	f003 fee1 	bl	8007c50 <HAL_GPIO_WritePin>
	if(Status_OCD[1])
 8003e8e:	4b39      	ldr	r3, [pc, #228]	; (8003f74 <ReWriteOCD+0x108>)
 8003e90:	785b      	ldrb	r3, [r3, #1]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d005      	beq.n	8003ea2 <ReWriteOCD+0x36>
		HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, SET);
 8003e96:	2201      	movs	r2, #1
 8003e98:	2101      	movs	r1, #1
 8003e9a:	4838      	ldr	r0, [pc, #224]	; (8003f7c <ReWriteOCD+0x110>)
 8003e9c:	f003 fed8 	bl	8007c50 <HAL_GPIO_WritePin>
 8003ea0:	e004      	b.n	8003eac <ReWriteOCD+0x40>
	else
		HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, RESET);
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	4835      	ldr	r0, [pc, #212]	; (8003f7c <ReWriteOCD+0x110>)
 8003ea8:	f003 fed2 	bl	8007c50 <HAL_GPIO_WritePin>
	if(Status_OCD[2])
 8003eac:	4b31      	ldr	r3, [pc, #196]	; (8003f74 <ReWriteOCD+0x108>)
 8003eae:	789b      	ldrb	r3, [r3, #2]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <ReWriteOCD+0x54>
		HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, SET);
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	2102      	movs	r1, #2
 8003eb8:	4830      	ldr	r0, [pc, #192]	; (8003f7c <ReWriteOCD+0x110>)
 8003eba:	f003 fec9 	bl	8007c50 <HAL_GPIO_WritePin>
 8003ebe:	e004      	b.n	8003eca <ReWriteOCD+0x5e>
	else
		HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, RESET);
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2102      	movs	r1, #2
 8003ec4:	482d      	ldr	r0, [pc, #180]	; (8003f7c <ReWriteOCD+0x110>)
 8003ec6:	f003 fec3 	bl	8007c50 <HAL_GPIO_WritePin>
	if(Status_OCD[3])
 8003eca:	4b2a      	ldr	r3, [pc, #168]	; (8003f74 <ReWriteOCD+0x108>)
 8003ecc:	78db      	ldrb	r3, [r3, #3]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d005      	beq.n	8003ede <ReWriteOCD+0x72>
		HAL_GPIO_WritePin(O3_GPIO_Port, O3_Pin, SET);
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	2180      	movs	r1, #128	; 0x80
 8003ed6:	482a      	ldr	r0, [pc, #168]	; (8003f80 <ReWriteOCD+0x114>)
 8003ed8:	f003 feba 	bl	8007c50 <HAL_GPIO_WritePin>
 8003edc:	e004      	b.n	8003ee8 <ReWriteOCD+0x7c>
	else
		HAL_GPIO_WritePin(O3_GPIO_Port, O3_Pin, RESET);
 8003ede:	2200      	movs	r2, #0
 8003ee0:	2180      	movs	r1, #128	; 0x80
 8003ee2:	4827      	ldr	r0, [pc, #156]	; (8003f80 <ReWriteOCD+0x114>)
 8003ee4:	f003 feb4 	bl	8007c50 <HAL_GPIO_WritePin>
	if(Status_OCD[4])
 8003ee8:	4b22      	ldr	r3, [pc, #136]	; (8003f74 <ReWriteOCD+0x108>)
 8003eea:	791b      	ldrb	r3, [r3, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d006      	beq.n	8003efe <ReWriteOCD+0x92>
		HAL_GPIO_WritePin(O4_GPIO_Port, O4_Pin, SET);
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ef6:	4822      	ldr	r0, [pc, #136]	; (8003f80 <ReWriteOCD+0x114>)
 8003ef8:	f003 feaa 	bl	8007c50 <HAL_GPIO_WritePin>
 8003efc:	e005      	b.n	8003f0a <ReWriteOCD+0x9e>
	else
		HAL_GPIO_WritePin(O4_GPIO_Port, O4_Pin, RESET);
 8003efe:	2200      	movs	r2, #0
 8003f00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f04:	481e      	ldr	r0, [pc, #120]	; (8003f80 <ReWriteOCD+0x114>)
 8003f06:	f003 fea3 	bl	8007c50 <HAL_GPIO_WritePin>
	if(Status_OCD[5])
 8003f0a:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <ReWriteOCD+0x108>)
 8003f0c:	795b      	ldrb	r3, [r3, #5]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d006      	beq.n	8003f20 <ReWriteOCD+0xb4>
		HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, SET);
 8003f12:	2201      	movs	r2, #1
 8003f14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f18:	4819      	ldr	r0, [pc, #100]	; (8003f80 <ReWriteOCD+0x114>)
 8003f1a:	f003 fe99 	bl	8007c50 <HAL_GPIO_WritePin>
 8003f1e:	e005      	b.n	8003f2c <ReWriteOCD+0xc0>
	else
		HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, RESET);
 8003f20:	2200      	movs	r2, #0
 8003f22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f26:	4816      	ldr	r0, [pc, #88]	; (8003f80 <ReWriteOCD+0x114>)
 8003f28:	f003 fe92 	bl	8007c50 <HAL_GPIO_WritePin>
	if(Status_OCD[6])
 8003f2c:	4b11      	ldr	r3, [pc, #68]	; (8003f74 <ReWriteOCD+0x108>)
 8003f2e:	799b      	ldrb	r3, [r3, #6]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d006      	beq.n	8003f42 <ReWriteOCD+0xd6>
		HAL_GPIO_WritePin(O6_GPIO_Port, O6_Pin, SET);
 8003f34:	2201      	movs	r2, #1
 8003f36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f3a:	4811      	ldr	r0, [pc, #68]	; (8003f80 <ReWriteOCD+0x114>)
 8003f3c:	f003 fe88 	bl	8007c50 <HAL_GPIO_WritePin>
 8003f40:	e005      	b.n	8003f4e <ReWriteOCD+0xe2>
	else
		HAL_GPIO_WritePin(O6_GPIO_Port, O6_Pin, RESET);
 8003f42:	2200      	movs	r2, #0
 8003f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f48:	480d      	ldr	r0, [pc, #52]	; (8003f80 <ReWriteOCD+0x114>)
 8003f4a:	f003 fe81 	bl	8007c50 <HAL_GPIO_WritePin>
	if(Status_OCD[7])
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <ReWriteOCD+0x108>)
 8003f50:	79db      	ldrb	r3, [r3, #7]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d006      	beq.n	8003f64 <ReWriteOCD+0xf8>
		HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, SET);
 8003f56:	2201      	movs	r2, #1
 8003f58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f5c:	4808      	ldr	r0, [pc, #32]	; (8003f80 <ReWriteOCD+0x114>)
 8003f5e:	f003 fe77 	bl	8007c50 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, RESET);
}
 8003f62:	e005      	b.n	8003f70 <ReWriteOCD+0x104>
		HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, RESET);
 8003f64:	2200      	movs	r2, #0
 8003f66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f6a:	4805      	ldr	r0, [pc, #20]	; (8003f80 <ReWriteOCD+0x114>)
 8003f6c:	f003 fe70 	bl	8007c50 <HAL_GPIO_WritePin>
}
 8003f70:	bf00      	nop
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	20000338 	.word	0x20000338
 8003f78:	40020000 	.word	0x40020000
 8003f7c:	40020400 	.word	0x40020400
 8003f80:	40021000 	.word	0x40021000

08003f84 <SPI_available>:
		HAL_GPIO_WritePin(WR1_GPIO_Port, WR1_Pin, RESET);
}
//Функция обработки посылок от интрефейсного МК
//Обновляет значения в массивах данных входов/выходов
void SPI_available(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
	if(flag_iput_spi2)
 8003f88:	4bd6      	ldr	r3, [pc, #856]	; (80042e4 <SPI_available+0x360>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 8470 	beq.w	8004872 <SPI_available+0x8ee>
	{
		switch(SPI_rx_buf[0])	//Избаиться от постоянной проверки кейс условий!
 8003f92:	4bd5      	ldr	r3, [pc, #852]	; (80042e8 <SPI_available+0x364>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	2b65      	cmp	r3, #101	; 0x65
 8003f9a:	f200 82de 	bhi.w	800455a <SPI_available+0x5d6>
 8003f9e:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <SPI_available+0x20>)
 8003fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa4:	0800413d 	.word	0x0800413d
 8003fa8:	0800414f 	.word	0x0800414f
 8003fac:	08004161 	.word	0x08004161
 8003fb0:	08004173 	.word	0x08004173
 8003fb4:	08004185 	.word	0x08004185
 8003fb8:	08004197 	.word	0x08004197
 8003fbc:	080041a9 	.word	0x080041a9
 8003fc0:	080041bb 	.word	0x080041bb
 8003fc4:	080041cd 	.word	0x080041cd
 8003fc8:	0800455b 	.word	0x0800455b
 8003fcc:	0800455b 	.word	0x0800455b
 8003fd0:	0800455b 	.word	0x0800455b
 8003fd4:	0800455b 	.word	0x0800455b
 8003fd8:	0800455b 	.word	0x0800455b
 8003fdc:	0800455b 	.word	0x0800455b
 8003fe0:	080041e1 	.word	0x080041e1
 8003fe4:	080041f5 	.word	0x080041f5
 8003fe8:	08004209 	.word	0x08004209
 8003fec:	0800421d 	.word	0x0800421d
 8003ff0:	08004231 	.word	0x08004231
 8003ff4:	08004245 	.word	0x08004245
 8003ff8:	08004259 	.word	0x08004259
 8003ffc:	0800426d 	.word	0x0800426d
 8004000:	08004281 	.word	0x08004281
 8004004:	08004295 	.word	0x08004295
 8004008:	0800455b 	.word	0x0800455b
 800400c:	0800455b 	.word	0x0800455b
 8004010:	0800455b 	.word	0x0800455b
 8004014:	0800455b 	.word	0x0800455b
 8004018:	0800455b 	.word	0x0800455b
 800401c:	0800455b 	.word	0x0800455b
 8004020:	080042a9 	.word	0x080042a9
 8004024:	080042bd 	.word	0x080042bd
 8004028:	080042d1 	.word	0x080042d1
 800402c:	08004305 	.word	0x08004305
 8004030:	08004319 	.word	0x08004319
 8004034:	0800432d 	.word	0x0800432d
 8004038:	08004341 	.word	0x08004341
 800403c:	08004355 	.word	0x08004355
 8004040:	08004369 	.word	0x08004369
 8004044:	0800437d 	.word	0x0800437d
 8004048:	0800455b 	.word	0x0800455b
 800404c:	0800455b 	.word	0x0800455b
 8004050:	0800455b 	.word	0x0800455b
 8004054:	0800455b 	.word	0x0800455b
 8004058:	0800455b 	.word	0x0800455b
 800405c:	0800455b 	.word	0x0800455b
 8004060:	08004391 	.word	0x08004391
 8004064:	080043a5 	.word	0x080043a5
 8004068:	080043b9 	.word	0x080043b9
 800406c:	080043cd 	.word	0x080043cd
 8004070:	080043df 	.word	0x080043df
 8004074:	080043f1 	.word	0x080043f1
 8004078:	08004403 	.word	0x08004403
 800407c:	08004415 	.word	0x08004415
 8004080:	08004427 	.word	0x08004427
 8004084:	08004439 	.word	0x08004439
 8004088:	0800455b 	.word	0x0800455b
 800408c:	0800455b 	.word	0x0800455b
 8004090:	0800455b 	.word	0x0800455b
 8004094:	0800455b 	.word	0x0800455b
 8004098:	0800455b 	.word	0x0800455b
 800409c:	0800455b 	.word	0x0800455b
 80040a0:	0800444b 	.word	0x0800444b
 80040a4:	0800455b 	.word	0x0800455b
 80040a8:	0800455b 	.word	0x0800455b
 80040ac:	0800455b 	.word	0x0800455b
 80040b0:	0800455b 	.word	0x0800455b
 80040b4:	0800455b 	.word	0x0800455b
 80040b8:	0800455b 	.word	0x0800455b
 80040bc:	0800455b 	.word	0x0800455b
 80040c0:	0800455b 	.word	0x0800455b
 80040c4:	0800445d 	.word	0x0800445d
 80040c8:	0800455b 	.word	0x0800455b
 80040cc:	0800455b 	.word	0x0800455b
 80040d0:	0800455b 	.word	0x0800455b
 80040d4:	0800455b 	.word	0x0800455b
 80040d8:	0800455b 	.word	0x0800455b
 80040dc:	0800455b 	.word	0x0800455b
 80040e0:	0800446f 	.word	0x0800446f
 80040e4:	08004481 	.word	0x08004481
 80040e8:	08004493 	.word	0x08004493
 80040ec:	080044a5 	.word	0x080044a5
 80040f0:	080044b9 	.word	0x080044b9
 80040f4:	080044cd 	.word	0x080044cd
 80040f8:	080044e1 	.word	0x080044e1
 80040fc:	080044f5 	.word	0x080044f5
 8004100:	08004507 	.word	0x08004507
 8004104:	08004519 	.word	0x08004519
 8004108:	0800455b 	.word	0x0800455b
 800410c:	0800455b 	.word	0x0800455b
 8004110:	0800455b 	.word	0x0800455b
 8004114:	0800455b 	.word	0x0800455b
 8004118:	0800455b 	.word	0x0800455b
 800411c:	0800455b 	.word	0x0800455b
 8004120:	08004549 	.word	0x08004549
 8004124:	0800455b 	.word	0x0800455b
 8004128:	0800455b 	.word	0x0800455b
 800412c:	0800455b 	.word	0x0800455b
 8004130:	0800455b 	.word	0x0800455b
 8004134:	0800455b 	.word	0x0800455b
 8004138:	0800455b 	.word	0x0800455b
		{
				//------------------------Открытый коллектор------------------------
			case OC0_ON:
				Status_OCD[0] = 1;
 800413c:	4b6b      	ldr	r3, [pc, #428]	; (80042ec <SPI_available+0x368>)
 800413e:	2201      	movs	r2, #1
 8004140:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, SET);
 8004142:	2201      	movs	r2, #1
 8004144:	2101      	movs	r1, #1
 8004146:	486a      	ldr	r0, [pc, #424]	; (80042f0 <SPI_available+0x36c>)
 8004148:	f003 fd82 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 800414c:	e205      	b.n	800455a <SPI_available+0x5d6>
			case OC0_OFF:
				Status_OCD[0] = 0;
 800414e:	4b67      	ldr	r3, [pc, #412]	; (80042ec <SPI_available+0x368>)
 8004150:	2200      	movs	r2, #0
 8004152:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, RESET);
 8004154:	2200      	movs	r2, #0
 8004156:	2101      	movs	r1, #1
 8004158:	4865      	ldr	r0, [pc, #404]	; (80042f0 <SPI_available+0x36c>)
 800415a:	f003 fd79 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 800415e:	e1fc      	b.n	800455a <SPI_available+0x5d6>
			case OC1_ON:
				Status_OCD[1] = 1;
 8004160:	4b62      	ldr	r3, [pc, #392]	; (80042ec <SPI_available+0x368>)
 8004162:	2201      	movs	r2, #1
 8004164:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, SET);
 8004166:	2201      	movs	r2, #1
 8004168:	2101      	movs	r1, #1
 800416a:	4862      	ldr	r0, [pc, #392]	; (80042f4 <SPI_available+0x370>)
 800416c:	f003 fd70 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 8004170:	e1f3      	b.n	800455a <SPI_available+0x5d6>
			case OC1_OFF:
				Status_OCD[1] = 0;
 8004172:	4b5e      	ldr	r3, [pc, #376]	; (80042ec <SPI_available+0x368>)
 8004174:	2200      	movs	r2, #0
 8004176:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, RESET);
 8004178:	2200      	movs	r2, #0
 800417a:	2101      	movs	r1, #1
 800417c:	485d      	ldr	r0, [pc, #372]	; (80042f4 <SPI_available+0x370>)
 800417e:	f003 fd67 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 8004182:	e1ea      	b.n	800455a <SPI_available+0x5d6>
			case OC2_ON:
				Status_OCD[2] = 1;
 8004184:	4b59      	ldr	r3, [pc, #356]	; (80042ec <SPI_available+0x368>)
 8004186:	2201      	movs	r2, #1
 8004188:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, SET);
 800418a:	2201      	movs	r2, #1
 800418c:	2102      	movs	r1, #2
 800418e:	4859      	ldr	r0, [pc, #356]	; (80042f4 <SPI_available+0x370>)
 8004190:	f003 fd5e 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 8004194:	e1e1      	b.n	800455a <SPI_available+0x5d6>
			case OC2_OFF:
				Status_OCD[2] = 0;
 8004196:	4b55      	ldr	r3, [pc, #340]	; (80042ec <SPI_available+0x368>)
 8004198:	2200      	movs	r2, #0
 800419a:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, RESET);
 800419c:	2200      	movs	r2, #0
 800419e:	2102      	movs	r1, #2
 80041a0:	4854      	ldr	r0, [pc, #336]	; (80042f4 <SPI_available+0x370>)
 80041a2:	f003 fd55 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 80041a6:	e1d8      	b.n	800455a <SPI_available+0x5d6>
			case OC3_ON:
				Status_OCD[3] = 1;
 80041a8:	4b50      	ldr	r3, [pc, #320]	; (80042ec <SPI_available+0x368>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(O3_GPIO_Port, O3_Pin, SET);
 80041ae:	2201      	movs	r2, #1
 80041b0:	2180      	movs	r1, #128	; 0x80
 80041b2:	4851      	ldr	r0, [pc, #324]	; (80042f8 <SPI_available+0x374>)
 80041b4:	f003 fd4c 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 80041b8:	e1cf      	b.n	800455a <SPI_available+0x5d6>
			case OC3_OFF:
				Status_OCD[3] = 0;
 80041ba:	4b4c      	ldr	r3, [pc, #304]	; (80042ec <SPI_available+0x368>)
 80041bc:	2200      	movs	r2, #0
 80041be:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(O3_GPIO_Port, O3_Pin, RESET);
 80041c0:	2200      	movs	r2, #0
 80041c2:	2180      	movs	r1, #128	; 0x80
 80041c4:	484c      	ldr	r0, [pc, #304]	; (80042f8 <SPI_available+0x374>)
 80041c6:	f003 fd43 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 80041ca:	e1c6      	b.n	800455a <SPI_available+0x5d6>
			case OC4_ON:
				Status_OCD[4] = 1;
 80041cc:	4b47      	ldr	r3, [pc, #284]	; (80042ec <SPI_available+0x368>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	711a      	strb	r2, [r3, #4]
				HAL_GPIO_WritePin(O4_GPIO_Port, O4_Pin, SET);
 80041d2:	2201      	movs	r2, #1
 80041d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041d8:	4847      	ldr	r0, [pc, #284]	; (80042f8 <SPI_available+0x374>)
 80041da:	f003 fd39 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 80041de:	e1bc      	b.n	800455a <SPI_available+0x5d6>
			case OC4_OFF:
				Status_OCD[4] = 0;
 80041e0:	4b42      	ldr	r3, [pc, #264]	; (80042ec <SPI_available+0x368>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	711a      	strb	r2, [r3, #4]
				HAL_GPIO_WritePin(O4_GPIO_Port, O4_Pin, RESET);
 80041e6:	2200      	movs	r2, #0
 80041e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041ec:	4842      	ldr	r0, [pc, #264]	; (80042f8 <SPI_available+0x374>)
 80041ee:	f003 fd2f 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 80041f2:	e1b2      	b.n	800455a <SPI_available+0x5d6>
			case OC5_ON:
				Status_OCD[5] = 1;
 80041f4:	4b3d      	ldr	r3, [pc, #244]	; (80042ec <SPI_available+0x368>)
 80041f6:	2201      	movs	r2, #1
 80041f8:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, SET);
 80041fa:	2201      	movs	r2, #1
 80041fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004200:	483d      	ldr	r0, [pc, #244]	; (80042f8 <SPI_available+0x374>)
 8004202:	f003 fd25 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 8004206:	e1a8      	b.n	800455a <SPI_available+0x5d6>
			case OC5_OFF:
				Status_OCD[5] = 0;
 8004208:	4b38      	ldr	r3, [pc, #224]	; (80042ec <SPI_available+0x368>)
 800420a:	2200      	movs	r2, #0
 800420c:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, RESET);
 800420e:	2200      	movs	r2, #0
 8004210:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004214:	4838      	ldr	r0, [pc, #224]	; (80042f8 <SPI_available+0x374>)
 8004216:	f003 fd1b 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 800421a:	e19e      	b.n	800455a <SPI_available+0x5d6>
			case OC6_ON:
				Status_OCD[6] = 1;
 800421c:	4b33      	ldr	r3, [pc, #204]	; (80042ec <SPI_available+0x368>)
 800421e:	2201      	movs	r2, #1
 8004220:	719a      	strb	r2, [r3, #6]
				HAL_GPIO_WritePin(O6_GPIO_Port, O6_Pin, SET);
 8004222:	2201      	movs	r2, #1
 8004224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004228:	4833      	ldr	r0, [pc, #204]	; (80042f8 <SPI_available+0x374>)
 800422a:	f003 fd11 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 800422e:	e194      	b.n	800455a <SPI_available+0x5d6>
			case OC6_OFF:
				Status_OCD[6] = 0;
 8004230:	4b2e      	ldr	r3, [pc, #184]	; (80042ec <SPI_available+0x368>)
 8004232:	2200      	movs	r2, #0
 8004234:	719a      	strb	r2, [r3, #6]
				HAL_GPIO_WritePin(O6_GPIO_Port, O6_Pin, RESET);
 8004236:	2200      	movs	r2, #0
 8004238:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800423c:	482e      	ldr	r0, [pc, #184]	; (80042f8 <SPI_available+0x374>)
 800423e:	f003 fd07 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 8004242:	e18a      	b.n	800455a <SPI_available+0x5d6>
			case OC7_ON:
				Status_OCD[7] = 1;
 8004244:	4b29      	ldr	r3, [pc, #164]	; (80042ec <SPI_available+0x368>)
 8004246:	2201      	movs	r2, #1
 8004248:	71da      	strb	r2, [r3, #7]
				HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, SET);
 800424a:	2201      	movs	r2, #1
 800424c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004250:	4829      	ldr	r0, [pc, #164]	; (80042f8 <SPI_available+0x374>)
 8004252:	f003 fcfd 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 8004256:	e180      	b.n	800455a <SPI_available+0x5d6>
			case OC7_OFF:
				Status_OCD[7] = 0;
 8004258:	4b24      	ldr	r3, [pc, #144]	; (80042ec <SPI_available+0x368>)
 800425a:	2200      	movs	r2, #0
 800425c:	71da      	strb	r2, [r3, #7]
				HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, RESET);
 800425e:	2200      	movs	r2, #0
 8004260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004264:	4824      	ldr	r0, [pc, #144]	; (80042f8 <SPI_available+0x374>)
 8004266:	f003 fcf3 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 800426a:	e176      	b.n	800455a <SPI_available+0x5d6>
				//------------------------------------------------------------------
				//--------------------------Цифровые входы--------------------------
			case DIN0_R:
				Status_DIN[0] = 1;
 800426c:	4b23      	ldr	r3, [pc, #140]	; (80042fc <SPI_available+0x378>)
 800426e:	2201      	movs	r2, #1
 8004270:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(IN0_GPIO_Port, IN0_Pin, SET);
 8004272:	2201      	movs	r2, #1
 8004274:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004278:	4821      	ldr	r0, [pc, #132]	; (8004300 <SPI_available+0x37c>)
 800427a:	f003 fce9 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 800427e:	e16c      	b.n	800455a <SPI_available+0x5d6>
			case DIN0_F:
				Status_DIN[0] = 0;
 8004280:	4b1e      	ldr	r3, [pc, #120]	; (80042fc <SPI_available+0x378>)
 8004282:	2200      	movs	r2, #0
 8004284:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(IN0_GPIO_Port, IN0_Pin, RESET);
 8004286:	2200      	movs	r2, #0
 8004288:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800428c:	481c      	ldr	r0, [pc, #112]	; (8004300 <SPI_available+0x37c>)
 800428e:	f003 fcdf 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 8004292:	e162      	b.n	800455a <SPI_available+0x5d6>
			case DIN1_R:
				Status_DIN[1] = 1;
 8004294:	4b19      	ldr	r3, [pc, #100]	; (80042fc <SPI_available+0x378>)
 8004296:	2201      	movs	r2, #1
 8004298:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, SET);
 800429a:	2201      	movs	r2, #1
 800429c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80042a0:	4817      	ldr	r0, [pc, #92]	; (8004300 <SPI_available+0x37c>)
 80042a2:	f003 fcd5 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 80042a6:	e158      	b.n	800455a <SPI_available+0x5d6>
			case DIN1_F:
				Status_DIN[1] = 0;
 80042a8:	4b14      	ldr	r3, [pc, #80]	; (80042fc <SPI_available+0x378>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, RESET);
 80042ae:	2200      	movs	r2, #0
 80042b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80042b4:	4812      	ldr	r0, [pc, #72]	; (8004300 <SPI_available+0x37c>)
 80042b6:	f003 fccb 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 80042ba:	e14e      	b.n	800455a <SPI_available+0x5d6>
			case DIN2_R:
				Status_DIN[2] = 1;
 80042bc:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <SPI_available+0x378>)
 80042be:	2201      	movs	r2, #1
 80042c0:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, SET);
 80042c2:	2201      	movs	r2, #1
 80042c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80042c8:	480d      	ldr	r0, [pc, #52]	; (8004300 <SPI_available+0x37c>)
 80042ca:	f003 fcc1 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 80042ce:	e144      	b.n	800455a <SPI_available+0x5d6>
			case DIN2_F:
				Status_DIN[2] = 0;
 80042d0:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <SPI_available+0x378>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, RESET);
 80042d6:	2200      	movs	r2, #0
 80042d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80042dc:	4808      	ldr	r0, [pc, #32]	; (8004300 <SPI_available+0x37c>)
 80042de:	f003 fcb7 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 80042e2:	e13a      	b.n	800455a <SPI_available+0x5d6>
 80042e4:	2000034d 	.word	0x2000034d
 80042e8:	20000348 	.word	0x20000348
 80042ec:	20000338 	.word	0x20000338
 80042f0:	40020000 	.word	0x40020000
 80042f4:	40020400 	.word	0x40020400
 80042f8:	40021000 	.word	0x40021000
 80042fc:	20000328 	.word	0x20000328
 8004300:	40020c00 	.word	0x40020c00
			case DIN3_R:
				Status_DIN[3] = 1;
 8004304:	4b89      	ldr	r3, [pc, #548]	; (800452c <SPI_available+0x5a8>)
 8004306:	2201      	movs	r2, #1
 8004308:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, SET);
 800430a:	2201      	movs	r2, #1
 800430c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004310:	4887      	ldr	r0, [pc, #540]	; (8004530 <SPI_available+0x5ac>)
 8004312:	f003 fc9d 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 8004316:	e120      	b.n	800455a <SPI_available+0x5d6>
			case DIN3_F:
				Status_DIN[3] = 0;
 8004318:	4b84      	ldr	r3, [pc, #528]	; (800452c <SPI_available+0x5a8>)
 800431a:	2200      	movs	r2, #0
 800431c:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, RESET);
 800431e:	2200      	movs	r2, #0
 8004320:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004324:	4882      	ldr	r0, [pc, #520]	; (8004530 <SPI_available+0x5ac>)
 8004326:	f003 fc93 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 800432a:	e116      	b.n	800455a <SPI_available+0x5d6>
			case DIN4_R:
				Status_DIN[4] = 1;
 800432c:	4b7f      	ldr	r3, [pc, #508]	; (800452c <SPI_available+0x5a8>)
 800432e:	2201      	movs	r2, #1
 8004330:	711a      	strb	r2, [r3, #4]
				HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, SET);
 8004332:	2201      	movs	r2, #1
 8004334:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004338:	487d      	ldr	r0, [pc, #500]	; (8004530 <SPI_available+0x5ac>)
 800433a:	f003 fc89 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 800433e:	e10c      	b.n	800455a <SPI_available+0x5d6>
			case DIN4_F:
				Status_DIN[4] = 0;
 8004340:	4b7a      	ldr	r3, [pc, #488]	; (800452c <SPI_available+0x5a8>)
 8004342:	2200      	movs	r2, #0
 8004344:	711a      	strb	r2, [r3, #4]
				HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, RESET);
 8004346:	2200      	movs	r2, #0
 8004348:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800434c:	4878      	ldr	r0, [pc, #480]	; (8004530 <SPI_available+0x5ac>)
 800434e:	f003 fc7f 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 8004352:	e102      	b.n	800455a <SPI_available+0x5d6>
			case DIN5_R:
				Status_DIN[5] = 1;
 8004354:	4b75      	ldr	r3, [pc, #468]	; (800452c <SPI_available+0x5a8>)
 8004356:	2201      	movs	r2, #1
 8004358:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(IN5_GPIO_Port, IN5_Pin, SET);
 800435a:	2201      	movs	r2, #1
 800435c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004360:	4873      	ldr	r0, [pc, #460]	; (8004530 <SPI_available+0x5ac>)
 8004362:	f003 fc75 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 8004366:	e0f8      	b.n	800455a <SPI_available+0x5d6>
			case DIN5_F:
				Status_DIN[5] = 0;
 8004368:	4b70      	ldr	r3, [pc, #448]	; (800452c <SPI_available+0x5a8>)
 800436a:	2200      	movs	r2, #0
 800436c:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(IN5_GPIO_Port, IN5_Pin, RESET);
 800436e:	2200      	movs	r2, #0
 8004370:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004374:	486e      	ldr	r0, [pc, #440]	; (8004530 <SPI_available+0x5ac>)
 8004376:	f003 fc6b 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 800437a:	e0ee      	b.n	800455a <SPI_available+0x5d6>
			case DIN6_R:
				Status_DIN[6] = 1;
 800437c:	4b6b      	ldr	r3, [pc, #428]	; (800452c <SPI_available+0x5a8>)
 800437e:	2201      	movs	r2, #1
 8004380:	719a      	strb	r2, [r3, #6]
				HAL_GPIO_WritePin(IN6_GPIO_Port, IN6_Pin, SET);
 8004382:	2201      	movs	r2, #1
 8004384:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004388:	4869      	ldr	r0, [pc, #420]	; (8004530 <SPI_available+0x5ac>)
 800438a:	f003 fc61 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 800438e:	e0e4      	b.n	800455a <SPI_available+0x5d6>
			case DIN6_F:
				Status_DIN[6] = 0;
 8004390:	4b66      	ldr	r3, [pc, #408]	; (800452c <SPI_available+0x5a8>)
 8004392:	2200      	movs	r2, #0
 8004394:	719a      	strb	r2, [r3, #6]
				HAL_GPIO_WritePin(IN6_GPIO_Port, IN6_Pin, RESET);
 8004396:	2200      	movs	r2, #0
 8004398:	f44f 7100 	mov.w	r1, #512	; 0x200
 800439c:	4864      	ldr	r0, [pc, #400]	; (8004530 <SPI_available+0x5ac>)
 800439e:	f003 fc57 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 80043a2:	e0da      	b.n	800455a <SPI_available+0x5d6>
			case DIN7_R:
				Status_DIN[7] = 1;
 80043a4:	4b61      	ldr	r3, [pc, #388]	; (800452c <SPI_available+0x5a8>)
 80043a6:	2201      	movs	r2, #1
 80043a8:	71da      	strb	r2, [r3, #7]
				HAL_GPIO_WritePin(IN7_GPIO_Port, IN7_Pin, SET);
 80043aa:	2201      	movs	r2, #1
 80043ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043b0:	485f      	ldr	r0, [pc, #380]	; (8004530 <SPI_available+0x5ac>)
 80043b2:	f003 fc4d 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 80043b6:	e0d0      	b.n	800455a <SPI_available+0x5d6>
			case DIN7_F:
				Status_DIN[7] = 0;
 80043b8:	4b5c      	ldr	r3, [pc, #368]	; (800452c <SPI_available+0x5a8>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	71da      	strb	r2, [r3, #7]
				HAL_GPIO_WritePin(IN7_GPIO_Port, IN7_Pin, RESET);
 80043be:	2200      	movs	r2, #0
 80043c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043c4:	485a      	ldr	r0, [pc, #360]	; (8004530 <SPI_available+0x5ac>)
 80043c6:	f003 fc43 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 80043ca:	e0c6      	b.n	800455a <SPI_available+0x5d6>
				//------------------------------------------------------------------
				//-------------------------Аналоговые входы-------------------------
			case AIN0_ON:
				Status_AIN[0] = 1;
 80043cc:	4b59      	ldr	r3, [pc, #356]	; (8004534 <SPI_available+0x5b0>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(AIN0_GPIO_Port, AIN0_Pin, SET);
 80043d2:	2201      	movs	r2, #1
 80043d4:	2108      	movs	r1, #8
 80043d6:	4858      	ldr	r0, [pc, #352]	; (8004538 <SPI_available+0x5b4>)
 80043d8:	f003 fc3a 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 80043dc:	e0bd      	b.n	800455a <SPI_available+0x5d6>
			case AIN0_OFF:
				Status_AIN[0] = 0;
 80043de:	4b55      	ldr	r3, [pc, #340]	; (8004534 <SPI_available+0x5b0>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(AIN0_GPIO_Port, AIN0_Pin, RESET);
 80043e4:	2200      	movs	r2, #0
 80043e6:	2108      	movs	r1, #8
 80043e8:	4853      	ldr	r0, [pc, #332]	; (8004538 <SPI_available+0x5b4>)
 80043ea:	f003 fc31 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 80043ee:	e0b4      	b.n	800455a <SPI_available+0x5d6>
			case AIN1_ON:
				Status_AIN[1] = 1;
 80043f0:	4b50      	ldr	r3, [pc, #320]	; (8004534 <SPI_available+0x5b0>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, SET);
 80043f6:	2201      	movs	r2, #1
 80043f8:	2110      	movs	r1, #16
 80043fa:	484f      	ldr	r0, [pc, #316]	; (8004538 <SPI_available+0x5b4>)
 80043fc:	f003 fc28 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 8004400:	e0ab      	b.n	800455a <SPI_available+0x5d6>
			case AIN1_OFF:
				Status_AIN[1] = 0;
 8004402:	4b4c      	ldr	r3, [pc, #304]	; (8004534 <SPI_available+0x5b0>)
 8004404:	2200      	movs	r2, #0
 8004406:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, RESET);
 8004408:	2200      	movs	r2, #0
 800440a:	2110      	movs	r1, #16
 800440c:	484a      	ldr	r0, [pc, #296]	; (8004538 <SPI_available+0x5b4>)
 800440e:	f003 fc1f 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 8004412:	e0a2      	b.n	800455a <SPI_available+0x5d6>
			case AIN2_ON:
				Status_AIN[2] = 1;
 8004414:	4b47      	ldr	r3, [pc, #284]	; (8004534 <SPI_available+0x5b0>)
 8004416:	2201      	movs	r2, #1
 8004418:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, SET);
 800441a:	2201      	movs	r2, #1
 800441c:	2120      	movs	r1, #32
 800441e:	4846      	ldr	r0, [pc, #280]	; (8004538 <SPI_available+0x5b4>)
 8004420:	f003 fc16 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 8004424:	e099      	b.n	800455a <SPI_available+0x5d6>
			case AIN2_OFF:
				Status_AIN[2] = 0;
 8004426:	4b43      	ldr	r3, [pc, #268]	; (8004534 <SPI_available+0x5b0>)
 8004428:	2200      	movs	r2, #0
 800442a:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, RESET);
 800442c:	2200      	movs	r2, #0
 800442e:	2120      	movs	r1, #32
 8004430:	4841      	ldr	r0, [pc, #260]	; (8004538 <SPI_available+0x5b4>)
 8004432:	f003 fc0d 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 8004436:	e090      	b.n	800455a <SPI_available+0x5d6>
			case AIN3_ON:
				Status_AIN[3] = 1;
 8004438:	4b3e      	ldr	r3, [pc, #248]	; (8004534 <SPI_available+0x5b0>)
 800443a:	2201      	movs	r2, #1
 800443c:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(AIN3_GPIO_Port, AIN3_Pin, SET);
 800443e:	2201      	movs	r2, #1
 8004440:	2140      	movs	r1, #64	; 0x40
 8004442:	483d      	ldr	r0, [pc, #244]	; (8004538 <SPI_available+0x5b4>)
 8004444:	f003 fc04 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 8004448:	e087      	b.n	800455a <SPI_available+0x5d6>
			case AIN3_OFF:
				Status_AIN[3] = 0;
 800444a:	4b3a      	ldr	r3, [pc, #232]	; (8004534 <SPI_available+0x5b0>)
 800444c:	2200      	movs	r2, #0
 800444e:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(AIN3_GPIO_Port, AIN3_Pin, RESET);
 8004450:	2200      	movs	r2, #0
 8004452:	2140      	movs	r1, #64	; 0x40
 8004454:	4838      	ldr	r0, [pc, #224]	; (8004538 <SPI_available+0x5b4>)
 8004456:	f003 fbfb 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 800445a:	e07e      	b.n	800455a <SPI_available+0x5d6>
				//------------------------------------------------------------------
				//----------------------------Выходы ШИМ----------------------------
			case PWM0_ON:
				Status_PWM[0] = 1;
 800445c:	4b37      	ldr	r3, [pc, #220]	; (800453c <SPI_available+0x5b8>)
 800445e:	2201      	movs	r2, #1
 8004460:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(PWM0_GPIO_Port, PWM0_Pin, SET);
 8004462:	2201      	movs	r2, #1
 8004464:	2140      	movs	r1, #64	; 0x40
 8004466:	4836      	ldr	r0, [pc, #216]	; (8004540 <SPI_available+0x5bc>)
 8004468:	f003 fbf2 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 800446c:	e075      	b.n	800455a <SPI_available+0x5d6>
			case PWM0_OFF:
				Status_PWM[0] = 0;
 800446e:	4b33      	ldr	r3, [pc, #204]	; (800453c <SPI_available+0x5b8>)
 8004470:	2200      	movs	r2, #0
 8004472:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(PWM0_GPIO_Port, PWM0_Pin, RESET);
 8004474:	2200      	movs	r2, #0
 8004476:	2140      	movs	r1, #64	; 0x40
 8004478:	4831      	ldr	r0, [pc, #196]	; (8004540 <SPI_available+0x5bc>)
 800447a:	f003 fbe9 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 800447e:	e06c      	b.n	800455a <SPI_available+0x5d6>
			case PWM1_ON:
				Status_PWM[1] = 1;
 8004480:	4b2e      	ldr	r3, [pc, #184]	; (800453c <SPI_available+0x5b8>)
 8004482:	2201      	movs	r2, #1
 8004484:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(PWM1_GPIO_Port, PWM1_Pin, SET);
 8004486:	2201      	movs	r2, #1
 8004488:	2180      	movs	r1, #128	; 0x80
 800448a:	482d      	ldr	r0, [pc, #180]	; (8004540 <SPI_available+0x5bc>)
 800448c:	f003 fbe0 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 8004490:	e063      	b.n	800455a <SPI_available+0x5d6>
			case PWM1_OFF:
				Status_PWM[1] = 0;
 8004492:	4b2a      	ldr	r3, [pc, #168]	; (800453c <SPI_available+0x5b8>)
 8004494:	2200      	movs	r2, #0
 8004496:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(PWM1_GPIO_Port, PWM1_Pin, RESET);
 8004498:	2200      	movs	r2, #0
 800449a:	2180      	movs	r1, #128	; 0x80
 800449c:	4828      	ldr	r0, [pc, #160]	; (8004540 <SPI_available+0x5bc>)
 800449e:	f003 fbd7 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 80044a2:	e05a      	b.n	800455a <SPI_available+0x5d6>
			case PWM2_ON:
				Status_PWM[2] = 1;
 80044a4:	4b25      	ldr	r3, [pc, #148]	; (800453c <SPI_available+0x5b8>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(PWM2_GPIO_Port, PWM2_Pin, SET);
 80044aa:	2201      	movs	r2, #1
 80044ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044b0:	4823      	ldr	r0, [pc, #140]	; (8004540 <SPI_available+0x5bc>)
 80044b2:	f003 fbcd 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 80044b6:	e050      	b.n	800455a <SPI_available+0x5d6>
			case PWM2_OFF:
				Status_PWM[2] = 0;
 80044b8:	4b20      	ldr	r3, [pc, #128]	; (800453c <SPI_available+0x5b8>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(PWM2_GPIO_Port, PWM2_Pin, RESET);
 80044be:	2200      	movs	r2, #0
 80044c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044c4:	481e      	ldr	r0, [pc, #120]	; (8004540 <SPI_available+0x5bc>)
 80044c6:	f003 fbc3 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 80044ca:	e046      	b.n	800455a <SPI_available+0x5d6>
			case PWM3_ON:
				Status_PWM[3] = 1;
 80044cc:	4b1b      	ldr	r3, [pc, #108]	; (800453c <SPI_available+0x5b8>)
 80044ce:	2201      	movs	r2, #1
 80044d0:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(PWM3_GPIO_Port, PWM3_Pin, SET);
 80044d2:	2201      	movs	r2, #1
 80044d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044d8:	4819      	ldr	r0, [pc, #100]	; (8004540 <SPI_available+0x5bc>)
 80044da:	f003 fbb9 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 80044de:	e03c      	b.n	800455a <SPI_available+0x5d6>
			case PWM3_OFF:
				Status_PWM[3] = 0;
 80044e0:	4b16      	ldr	r3, [pc, #88]	; (800453c <SPI_available+0x5b8>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(PWM3_GPIO_Port, PWM3_Pin, RESET);
 80044e6:	2200      	movs	r2, #0
 80044e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044ec:	4814      	ldr	r0, [pc, #80]	; (8004540 <SPI_available+0x5bc>)
 80044ee:	f003 fbaf 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 80044f2:	e032      	b.n	800455a <SPI_available+0x5d6>
				//------------------------------------------------------------------
				//--------------------------Выходы 1-Wire---------------------------
			case WR0_ON:
				Status_1WR[0] = 1;
 80044f4:	4b13      	ldr	r3, [pc, #76]	; (8004544 <SPI_available+0x5c0>)
 80044f6:	2201      	movs	r2, #1
 80044f8:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(WR0_GPIO_Port, WR0_Pin, SET);
 80044fa:	2201      	movs	r2, #1
 80044fc:	2101      	movs	r1, #1
 80044fe:	480c      	ldr	r0, [pc, #48]	; (8004530 <SPI_available+0x5ac>)
 8004500:	f003 fba6 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 8004504:	e029      	b.n	800455a <SPI_available+0x5d6>
			case WR0_OFF:
				Status_1WR[0] = 0;
 8004506:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <SPI_available+0x5c0>)
 8004508:	2200      	movs	r2, #0
 800450a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(WR0_GPIO_Port, WR0_Pin, RESET);
 800450c:	2200      	movs	r2, #0
 800450e:	2101      	movs	r1, #1
 8004510:	4807      	ldr	r0, [pc, #28]	; (8004530 <SPI_available+0x5ac>)
 8004512:	f003 fb9d 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 8004516:	e020      	b.n	800455a <SPI_available+0x5d6>
			case WR1_ON:
				Status_1WR[1] = 1;
 8004518:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <SPI_available+0x5c0>)
 800451a:	2201      	movs	r2, #1
 800451c:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(WR1_GPIO_Port, WR1_Pin, SET);
 800451e:	2201      	movs	r2, #1
 8004520:	2102      	movs	r1, #2
 8004522:	4803      	ldr	r0, [pc, #12]	; (8004530 <SPI_available+0x5ac>)
 8004524:	f003 fb94 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 8004528:	e017      	b.n	800455a <SPI_available+0x5d6>
 800452a:	bf00      	nop
 800452c:	20000328 	.word	0x20000328
 8004530:	40020c00 	.word	0x40020c00
 8004534:	20000320 	.word	0x20000320
 8004538:	40020000 	.word	0x40020000
 800453c:	20000330 	.word	0x20000330
 8004540:	40020800 	.word	0x40020800
 8004544:	20000340 	.word	0x20000340
			case WR1_OFF:
				Status_1WR[1] = 0;
 8004548:	4ba1      	ldr	r3, [pc, #644]	; (80047d0 <SPI_available+0x84c>)
 800454a:	2200      	movs	r2, #0
 800454c:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(WR1_GPIO_Port, WR1_Pin, RESET);
 800454e:	2200      	movs	r2, #0
 8004550:	2102      	movs	r1, #2
 8004552:	48a0      	ldr	r0, [pc, #640]	; (80047d4 <SPI_available+0x850>)
 8004554:	f003 fb7c 	bl	8007c50 <HAL_GPIO_WritePin>
				break;
 8004558:	bf00      	nop
				break;
			case INTERFACE_TEST:
				break;
				//------------------------------------------------------------------
		}
		if(SPI_rx_buf[0] == MCU_OUTPUT)
 800455a:	4b9f      	ldr	r3, [pc, #636]	; (80047d8 <SPI_available+0x854>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2bc0      	cmp	r3, #192	; 0xc0
 8004560:	d136      	bne.n	80045d0 <SPI_available+0x64c>
		{
			tp = 1;
 8004562:	4b9e      	ldr	r3, [pc, #632]	; (80047dc <SPI_available+0x858>)
 8004564:	2201      	movs	r2, #1
 8004566:	701a      	strb	r2, [r3, #0]
			tp1 = 1;
 8004568:	4b9d      	ldr	r3, [pc, #628]	; (80047e0 <SPI_available+0x85c>)
 800456a:	2201      	movs	r2, #1
 800456c:	701a      	strb	r2, [r3, #0]
			SEND_str("start\n");
 800456e:	489d      	ldr	r0, [pc, #628]	; (80047e4 <SPI_available+0x860>)
 8004570:	f7fd fcce 	bl	8001f10 <SEND_str>
			SEND_str("status_OCD ");
 8004574:	489c      	ldr	r0, [pc, #624]	; (80047e8 <SPI_available+0x864>)
 8004576:	f7fd fccb 	bl	8001f10 <SEND_str>
			USART_Tx(Status_OCD[0]);
 800457a:	4b9c      	ldr	r3, [pc, #624]	; (80047ec <SPI_available+0x868>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f7fd fcae 	bl	8001ee0 <USART_Tx>
			USART_Tx(Status_OCD[1]);
 8004584:	4b99      	ldr	r3, [pc, #612]	; (80047ec <SPI_available+0x868>)
 8004586:	785b      	ldrb	r3, [r3, #1]
 8004588:	4618      	mov	r0, r3
 800458a:	f7fd fca9 	bl	8001ee0 <USART_Tx>
			USART_Tx(Status_OCD[2]);
 800458e:	4b97      	ldr	r3, [pc, #604]	; (80047ec <SPI_available+0x868>)
 8004590:	789b      	ldrb	r3, [r3, #2]
 8004592:	4618      	mov	r0, r3
 8004594:	f7fd fca4 	bl	8001ee0 <USART_Tx>
			USART_Tx(Status_OCD[3]);
 8004598:	4b94      	ldr	r3, [pc, #592]	; (80047ec <SPI_available+0x868>)
 800459a:	78db      	ldrb	r3, [r3, #3]
 800459c:	4618      	mov	r0, r3
 800459e:	f7fd fc9f 	bl	8001ee0 <USART_Tx>
			USART_Tx(Status_OCD[4]);
 80045a2:	4b92      	ldr	r3, [pc, #584]	; (80047ec <SPI_available+0x868>)
 80045a4:	791b      	ldrb	r3, [r3, #4]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fd fc9a 	bl	8001ee0 <USART_Tx>
			USART_Tx(Status_OCD[5]);
 80045ac:	4b8f      	ldr	r3, [pc, #572]	; (80047ec <SPI_available+0x868>)
 80045ae:	795b      	ldrb	r3, [r3, #5]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fd fc95 	bl	8001ee0 <USART_Tx>
			USART_Tx(Status_OCD[6]);
 80045b6:	4b8d      	ldr	r3, [pc, #564]	; (80047ec <SPI_available+0x868>)
 80045b8:	799b      	ldrb	r3, [r3, #6]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fd fc90 	bl	8001ee0 <USART_Tx>
			USART_Tx(Status_OCD[7]);
 80045c0:	4b8a      	ldr	r3, [pc, #552]	; (80047ec <SPI_available+0x868>)
 80045c2:	79db      	ldrb	r3, [r3, #7]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fd fc8b 	bl	8001ee0 <USART_Tx>
			SEND_str(" END_status_OCD\n");
 80045ca:	4889      	ldr	r0, [pc, #548]	; (80047f0 <SPI_available+0x86c>)
 80045cc:	f7fd fca0 	bl	8001f10 <SEND_str>
//			else
//				HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, RESET);
			//-------------------------------------------------------

		}
		if(tp)
 80045d0:	4b82      	ldr	r3, [pc, #520]	; (80047dc <SPI_available+0x858>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 811f 	beq.w	8004818 <SPI_available+0x894>
		{
			if(i == 0)
 80045da:	4b86      	ldr	r3, [pc, #536]	; (80047f4 <SPI_available+0x870>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d128      	bne.n	8004634 <SPI_available+0x6b0>
			{
				SPI_tx_buf[0] = Status_AIN[j];
 80045e2:	4b85      	ldr	r3, [pc, #532]	; (80047f8 <SPI_available+0x874>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	4b84      	ldr	r3, [pc, #528]	; (80047fc <SPI_available+0x878>)
 80045ea:	5c9a      	ldrb	r2, [r3, r2]
 80045ec:	4b84      	ldr	r3, [pc, #528]	; (8004800 <SPI_available+0x87c>)
 80045ee:	701a      	strb	r2, [r3, #0]
				j++;
 80045f0:	4b81      	ldr	r3, [pc, #516]	; (80047f8 <SPI_available+0x874>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	3301      	adds	r3, #1
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	4b7f      	ldr	r3, [pc, #508]	; (80047f8 <SPI_available+0x874>)
 80045fa:	701a      	strb	r2, [r3, #0]
				if(j > 7)
 80045fc:	4b7e      	ldr	r3, [pc, #504]	; (80047f8 <SPI_available+0x874>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b07      	cmp	r3, #7
 8004602:	d908      	bls.n	8004616 <SPI_available+0x692>
				{
					j = 0;
 8004604:	4b7c      	ldr	r3, [pc, #496]	; (80047f8 <SPI_available+0x874>)
 8004606:	2200      	movs	r2, #0
 8004608:	701a      	strb	r2, [r3, #0]
					i++;
 800460a:	4b7a      	ldr	r3, [pc, #488]	; (80047f4 <SPI_available+0x870>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	3301      	adds	r3, #1
 8004610:	b2da      	uxtb	r2, r3
 8004612:	4b78      	ldr	r3, [pc, #480]	; (80047f4 <SPI_available+0x870>)
 8004614:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 8004616:	4b7b      	ldr	r3, [pc, #492]	; (8004804 <SPI_available+0x880>)
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 800461c:	2301      	movs	r3, #1
 800461e:	4a6e      	ldr	r2, [pc, #440]	; (80047d8 <SPI_available+0x854>)
 8004620:	4977      	ldr	r1, [pc, #476]	; (8004800 <SPI_available+0x87c>)
 8004622:	4879      	ldr	r0, [pc, #484]	; (8004808 <SPI_available+0x884>)
 8004624:	f004 fb92 	bl	8008d4c <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 8004628:	bf00      	nop
 800462a:	4b76      	ldr	r3, [pc, #472]	; (8004804 <SPI_available+0x880>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0fb      	beq.n	800462a <SPI_available+0x6a6>
 8004632:	e10c      	b.n	800484e <SPI_available+0x8ca>
			}
			else if(i == 1)
 8004634:	4b6f      	ldr	r3, [pc, #444]	; (80047f4 <SPI_available+0x870>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d128      	bne.n	800468e <SPI_available+0x70a>
			{
				SPI_tx_buf[0] = Status_DIN[j];
 800463c:	4b6e      	ldr	r3, [pc, #440]	; (80047f8 <SPI_available+0x874>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	461a      	mov	r2, r3
 8004642:	4b72      	ldr	r3, [pc, #456]	; (800480c <SPI_available+0x888>)
 8004644:	5c9a      	ldrb	r2, [r3, r2]
 8004646:	4b6e      	ldr	r3, [pc, #440]	; (8004800 <SPI_available+0x87c>)
 8004648:	701a      	strb	r2, [r3, #0]
				j++;
 800464a:	4b6b      	ldr	r3, [pc, #428]	; (80047f8 <SPI_available+0x874>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	3301      	adds	r3, #1
 8004650:	b2da      	uxtb	r2, r3
 8004652:	4b69      	ldr	r3, [pc, #420]	; (80047f8 <SPI_available+0x874>)
 8004654:	701a      	strb	r2, [r3, #0]
				if(j > 7)
 8004656:	4b68      	ldr	r3, [pc, #416]	; (80047f8 <SPI_available+0x874>)
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b07      	cmp	r3, #7
 800465c:	d908      	bls.n	8004670 <SPI_available+0x6ec>
				{
					j = 0;
 800465e:	4b66      	ldr	r3, [pc, #408]	; (80047f8 <SPI_available+0x874>)
 8004660:	2200      	movs	r2, #0
 8004662:	701a      	strb	r2, [r3, #0]
					i++;
 8004664:	4b63      	ldr	r3, [pc, #396]	; (80047f4 <SPI_available+0x870>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	3301      	adds	r3, #1
 800466a:	b2da      	uxtb	r2, r3
 800466c:	4b61      	ldr	r3, [pc, #388]	; (80047f4 <SPI_available+0x870>)
 800466e:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 8004670:	4b64      	ldr	r3, [pc, #400]	; (8004804 <SPI_available+0x880>)
 8004672:	2200      	movs	r2, #0
 8004674:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8004676:	2301      	movs	r3, #1
 8004678:	4a57      	ldr	r2, [pc, #348]	; (80047d8 <SPI_available+0x854>)
 800467a:	4961      	ldr	r1, [pc, #388]	; (8004800 <SPI_available+0x87c>)
 800467c:	4862      	ldr	r0, [pc, #392]	; (8004808 <SPI_available+0x884>)
 800467e:	f004 fb65 	bl	8008d4c <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 8004682:	bf00      	nop
 8004684:	4b5f      	ldr	r3, [pc, #380]	; (8004804 <SPI_available+0x880>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0fb      	beq.n	8004684 <SPI_available+0x700>
 800468c:	e0df      	b.n	800484e <SPI_available+0x8ca>
			}
			else if(i == 2)
 800468e:	4b59      	ldr	r3, [pc, #356]	; (80047f4 <SPI_available+0x870>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d128      	bne.n	80046e8 <SPI_available+0x764>
			{
				SPI_tx_buf[0] = Status_PWM[j];
 8004696:	4b58      	ldr	r3, [pc, #352]	; (80047f8 <SPI_available+0x874>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	4b5c      	ldr	r3, [pc, #368]	; (8004810 <SPI_available+0x88c>)
 800469e:	5c9a      	ldrb	r2, [r3, r2]
 80046a0:	4b57      	ldr	r3, [pc, #348]	; (8004800 <SPI_available+0x87c>)
 80046a2:	701a      	strb	r2, [r3, #0]
				j++;
 80046a4:	4b54      	ldr	r3, [pc, #336]	; (80047f8 <SPI_available+0x874>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	3301      	adds	r3, #1
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	4b52      	ldr	r3, [pc, #328]	; (80047f8 <SPI_available+0x874>)
 80046ae:	701a      	strb	r2, [r3, #0]
				if(j > 7)
 80046b0:	4b51      	ldr	r3, [pc, #324]	; (80047f8 <SPI_available+0x874>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b07      	cmp	r3, #7
 80046b6:	d908      	bls.n	80046ca <SPI_available+0x746>
				{
					j = 0;
 80046b8:	4b4f      	ldr	r3, [pc, #316]	; (80047f8 <SPI_available+0x874>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	701a      	strb	r2, [r3, #0]
					i++;
 80046be:	4b4d      	ldr	r3, [pc, #308]	; (80047f4 <SPI_available+0x870>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	3301      	adds	r3, #1
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	4b4b      	ldr	r3, [pc, #300]	; (80047f4 <SPI_available+0x870>)
 80046c8:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 80046ca:	4b4e      	ldr	r3, [pc, #312]	; (8004804 <SPI_available+0x880>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 80046d0:	2301      	movs	r3, #1
 80046d2:	4a41      	ldr	r2, [pc, #260]	; (80047d8 <SPI_available+0x854>)
 80046d4:	494a      	ldr	r1, [pc, #296]	; (8004800 <SPI_available+0x87c>)
 80046d6:	484c      	ldr	r0, [pc, #304]	; (8004808 <SPI_available+0x884>)
 80046d8:	f004 fb38 	bl	8008d4c <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 80046dc:	bf00      	nop
 80046de:	4b49      	ldr	r3, [pc, #292]	; (8004804 <SPI_available+0x880>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0fb      	beq.n	80046de <SPI_available+0x75a>
 80046e6:	e0b2      	b.n	800484e <SPI_available+0x8ca>
			}
			else if(i == 3)
 80046e8:	4b42      	ldr	r3, [pc, #264]	; (80047f4 <SPI_available+0x870>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d128      	bne.n	8004742 <SPI_available+0x7be>
			{
				SPI_tx_buf[0] = Status_OCD[j];
 80046f0:	4b41      	ldr	r3, [pc, #260]	; (80047f8 <SPI_available+0x874>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	4b3d      	ldr	r3, [pc, #244]	; (80047ec <SPI_available+0x868>)
 80046f8:	5c9a      	ldrb	r2, [r3, r2]
 80046fa:	4b41      	ldr	r3, [pc, #260]	; (8004800 <SPI_available+0x87c>)
 80046fc:	701a      	strb	r2, [r3, #0]
				j++;
 80046fe:	4b3e      	ldr	r3, [pc, #248]	; (80047f8 <SPI_available+0x874>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	3301      	adds	r3, #1
 8004704:	b2da      	uxtb	r2, r3
 8004706:	4b3c      	ldr	r3, [pc, #240]	; (80047f8 <SPI_available+0x874>)
 8004708:	701a      	strb	r2, [r3, #0]
				if(j > 7)
 800470a:	4b3b      	ldr	r3, [pc, #236]	; (80047f8 <SPI_available+0x874>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	2b07      	cmp	r3, #7
 8004710:	d908      	bls.n	8004724 <SPI_available+0x7a0>
				{
					j = 0;
 8004712:	4b39      	ldr	r3, [pc, #228]	; (80047f8 <SPI_available+0x874>)
 8004714:	2200      	movs	r2, #0
 8004716:	701a      	strb	r2, [r3, #0]
					i++;
 8004718:	4b36      	ldr	r3, [pc, #216]	; (80047f4 <SPI_available+0x870>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	3301      	adds	r3, #1
 800471e:	b2da      	uxtb	r2, r3
 8004720:	4b34      	ldr	r3, [pc, #208]	; (80047f4 <SPI_available+0x870>)
 8004722:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 8004724:	4b37      	ldr	r3, [pc, #220]	; (8004804 <SPI_available+0x880>)
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 800472a:	2301      	movs	r3, #1
 800472c:	4a2a      	ldr	r2, [pc, #168]	; (80047d8 <SPI_available+0x854>)
 800472e:	4934      	ldr	r1, [pc, #208]	; (8004800 <SPI_available+0x87c>)
 8004730:	4835      	ldr	r0, [pc, #212]	; (8004808 <SPI_available+0x884>)
 8004732:	f004 fb0b 	bl	8008d4c <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 8004736:	bf00      	nop
 8004738:	4b32      	ldr	r3, [pc, #200]	; (8004804 <SPI_available+0x880>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0fb      	beq.n	8004738 <SPI_available+0x7b4>
 8004740:	e085      	b.n	800484e <SPI_available+0x8ca>
			}
			else if(i == 4)
 8004742:	4b2c      	ldr	r3, [pc, #176]	; (80047f4 <SPI_available+0x870>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2b04      	cmp	r3, #4
 8004748:	d128      	bne.n	800479c <SPI_available+0x818>
			{
				SPI_tx_buf[0] = Status_1WR[j];
 800474a:	4b2b      	ldr	r3, [pc, #172]	; (80047f8 <SPI_available+0x874>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	4b1f      	ldr	r3, [pc, #124]	; (80047d0 <SPI_available+0x84c>)
 8004752:	5c9a      	ldrb	r2, [r3, r2]
 8004754:	4b2a      	ldr	r3, [pc, #168]	; (8004800 <SPI_available+0x87c>)
 8004756:	701a      	strb	r2, [r3, #0]
				j++;
 8004758:	4b27      	ldr	r3, [pc, #156]	; (80047f8 <SPI_available+0x874>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	3301      	adds	r3, #1
 800475e:	b2da      	uxtb	r2, r3
 8004760:	4b25      	ldr	r3, [pc, #148]	; (80047f8 <SPI_available+0x874>)
 8004762:	701a      	strb	r2, [r3, #0]
				if(j > 7)
 8004764:	4b24      	ldr	r3, [pc, #144]	; (80047f8 <SPI_available+0x874>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b07      	cmp	r3, #7
 800476a:	d908      	bls.n	800477e <SPI_available+0x7fa>
				{
					j = 0;
 800476c:	4b22      	ldr	r3, [pc, #136]	; (80047f8 <SPI_available+0x874>)
 800476e:	2200      	movs	r2, #0
 8004770:	701a      	strb	r2, [r3, #0]
					i++;
 8004772:	4b20      	ldr	r3, [pc, #128]	; (80047f4 <SPI_available+0x870>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	3301      	adds	r3, #1
 8004778:	b2da      	uxtb	r2, r3
 800477a:	4b1e      	ldr	r3, [pc, #120]	; (80047f4 <SPI_available+0x870>)
 800477c:	701a      	strb	r2, [r3, #0]
				}
//				else
//				{
					flag_iput_spi2 = 0;
 800477e:	4b21      	ldr	r3, [pc, #132]	; (8004804 <SPI_available+0x880>)
 8004780:	2200      	movs	r2, #0
 8004782:	701a      	strb	r2, [r3, #0]
					HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8004784:	2301      	movs	r3, #1
 8004786:	4a14      	ldr	r2, [pc, #80]	; (80047d8 <SPI_available+0x854>)
 8004788:	491d      	ldr	r1, [pc, #116]	; (8004800 <SPI_available+0x87c>)
 800478a:	481f      	ldr	r0, [pc, #124]	; (8004808 <SPI_available+0x884>)
 800478c:	f004 fade 	bl	8008d4c <HAL_SPI_TransmitReceive_IT>
					while(!flag_iput_spi2) {;}
 8004790:	bf00      	nop
 8004792:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <SPI_available+0x880>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0fb      	beq.n	8004792 <SPI_available+0x80e>
 800479a:	e058      	b.n	800484e <SPI_available+0x8ca>
//				}
			}
			else if(i == 5)
 800479c:	4b15      	ldr	r3, [pc, #84]	; (80047f4 <SPI_available+0x870>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b05      	cmp	r3, #5
 80047a2:	d154      	bne.n	800484e <SPI_available+0x8ca>
			{
				i = 0;
 80047a4:	4b13      	ldr	r3, [pc, #76]	; (80047f4 <SPI_available+0x870>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	701a      	strb	r2, [r3, #0]
				j = 0;
 80047aa:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <SPI_available+0x874>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	701a      	strb	r2, [r3, #0]
				tp = 0;
 80047b0:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <SPI_available+0x858>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	701a      	strb	r2, [r3, #0]
				SEND_str("the_end\n");
 80047b6:	4817      	ldr	r0, [pc, #92]	; (8004814 <SPI_available+0x890>)
 80047b8:	f7fd fbaa 	bl	8001f10 <SEND_str>
				flag_iput_spi2 = 0;
 80047bc:	4b11      	ldr	r3, [pc, #68]	; (8004804 <SPI_available+0x880>)
 80047be:	2200      	movs	r2, #0
 80047c0:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 80047c2:	2301      	movs	r3, #1
 80047c4:	4a04      	ldr	r2, [pc, #16]	; (80047d8 <SPI_available+0x854>)
 80047c6:	490e      	ldr	r1, [pc, #56]	; (8004800 <SPI_available+0x87c>)
 80047c8:	480f      	ldr	r0, [pc, #60]	; (8004808 <SPI_available+0x884>)
 80047ca:	f004 fabf 	bl	8008d4c <HAL_SPI_TransmitReceive_IT>
 80047ce:	e03e      	b.n	800484e <SPI_available+0x8ca>
 80047d0:	20000340 	.word	0x20000340
 80047d4:	40020c00 	.word	0x40020c00
 80047d8:	20000348 	.word	0x20000348
 80047dc:	20000350 	.word	0x20000350
 80047e0:	20000058 	.word	0x20000058
 80047e4:	0801cbfc 	.word	0x0801cbfc
 80047e8:	0801cc04 	.word	0x0801cc04
 80047ec:	20000338 	.word	0x20000338
 80047f0:	0801cc10 	.word	0x0801cc10
 80047f4:	2000034e 	.word	0x2000034e
 80047f8:	2000034f 	.word	0x2000034f
 80047fc:	20000320 	.word	0x20000320
 8004800:	2000034c 	.word	0x2000034c
 8004804:	2000034d 	.word	0x2000034d
 8004808:	20000838 	.word	0x20000838
 800480c:	20000328 	.word	0x20000328
 8004810:	20000330 	.word	0x20000330
 8004814:	0801cc24 	.word	0x0801cc24
			}
		}
		else if(SPI_rx_buf[0] == MCU_RELAY_CNT)
 8004818:	4b17      	ldr	r3, [pc, #92]	; (8004878 <SPI_available+0x8f4>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2ba1      	cmp	r3, #161	; 0xa1
 800481e:	d016      	beq.n	800484e <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения РЕЛЕ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_DIGITAL_CNT)
 8004820:	4b15      	ldr	r3, [pc, #84]	; (8004878 <SPI_available+0x8f4>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2ba2      	cmp	r3, #162	; 0xa2
 8004826:	d012      	beq.n	800484e <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения ЦИФРОВЫХ ВХОДОВ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_DIMMING_CNT)
 8004828:	4b13      	ldr	r3, [pc, #76]	; (8004878 <SPI_available+0x8f4>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2ba3      	cmp	r3, #163	; 0xa3
 800482e:	d00e      	beq.n	800484e <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения ДИММИРОВАНИЯ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_INTERFACE_CNT)
 8004830:	4b11      	ldr	r3, [pc, #68]	; (8004878 <SPI_available+0x8f4>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2ba4      	cmp	r3, #164	; 0xa4
 8004836:	d00a      	beq.n	800484e <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения ИНТЕРФЕЙСОВ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_RELAY_ADR)
 8004838:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <SPI_available+0x8f4>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2bb1      	cmp	r3, #177	; 0xb1
 800483e:	d006      	beq.n	800484e <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать АДРЕСА подключенных блоков расширения РЕЛЕ (от 2 до 11)
		}
		else if(SPI_rx_buf[0] == MCU_DIGITAL_ADR)
 8004840:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <SPI_available+0x8f4>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2bb2      	cmp	r3, #178	; 0xb2
 8004846:	d002      	beq.n	800484e <SPI_available+0x8ca>
		{
			//По этой комманде надо прислать АДРЕСА подключенных блоков расширения ЦИФРОВЫХ ВХОДОВ (от 12 до 21)
		}
		else if(SPI_rx_buf[0] == MCU_DIMMING_ADR)
 8004848:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <SPI_available+0x8f4>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2bb3      	cmp	r3, #179	; 0xb3
		}
		else if(SPI_rx_buf[0] == MCU_INTERFACE_ADR)
		{
			//По этой комманде надо прислать АДРЕСА подключенных блоков расширения ИНТЕРФЕЙСОВ (от 32 до 41)
		}
		if(!tp)
 800484e:	4b0b      	ldr	r3, [pc, #44]	; (800487c <SPI_available+0x8f8>)
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10d      	bne.n	8004872 <SPI_available+0x8ee>
//			{
//				tp1 = 0;
//			}
//			else
//			{
				flag_iput_spi2 = 1;		//Fix bag! so so
 8004856:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <SPI_available+0x8fc>)
 8004858:	2201      	movs	r2, #1
 800485a:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 800485c:	2301      	movs	r3, #1
 800485e:	4a06      	ldr	r2, [pc, #24]	; (8004878 <SPI_available+0x8f4>)
 8004860:	4908      	ldr	r1, [pc, #32]	; (8004884 <SPI_available+0x900>)
 8004862:	4809      	ldr	r0, [pc, #36]	; (8004888 <SPI_available+0x904>)
 8004864:	f004 fa72 	bl	8008d4c <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 8004868:	bf00      	nop
 800486a:	4b05      	ldr	r3, [pc, #20]	; (8004880 <SPI_available+0x8fc>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0fb      	beq.n	800486a <SPI_available+0x8e6>
		//				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
		//				while(!flag_iput_spi2) {;}
		//			}
		//		}
	}
}
 8004872:	bf00      	nop
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000348 	.word	0x20000348
 800487c:	20000350 	.word	0x20000350
 8004880:	2000034d 	.word	0x2000034d
 8004884:	2000034c 	.word	0x2000034c
 8004888:	20000838 	.word	0x20000838

0800488c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004892:	2300      	movs	r3, #0
 8004894:	607b      	str	r3, [r7, #4]
 8004896:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <HAL_MspInit+0x4c>)
 8004898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489a:	4a0f      	ldr	r2, [pc, #60]	; (80048d8 <HAL_MspInit+0x4c>)
 800489c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048a0:	6453      	str	r3, [r2, #68]	; 0x44
 80048a2:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <HAL_MspInit+0x4c>)
 80048a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048aa:	607b      	str	r3, [r7, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048ae:	2300      	movs	r3, #0
 80048b0:	603b      	str	r3, [r7, #0]
 80048b2:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <HAL_MspInit+0x4c>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	4a08      	ldr	r2, [pc, #32]	; (80048d8 <HAL_MspInit+0x4c>)
 80048b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048bc:	6413      	str	r3, [r2, #64]	; 0x40
 80048be:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <HAL_MspInit+0x4c>)
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c6:	603b      	str	r3, [r7, #0]
 80048c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40023800 	.word	0x40023800

080048dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08c      	sub	sp, #48	; 0x30
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80048e4:	2300      	movs	r3, #0
 80048e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80048ec:	2200      	movs	r2, #0
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	2019      	movs	r0, #25
 80048f2:	f001 fb9b 	bl	800602c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80048f6:	2019      	movs	r0, #25
 80048f8:	f001 fbb4 	bl	8006064 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80048fc:	2300      	movs	r3, #0
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	4b1f      	ldr	r3, [pc, #124]	; (8004980 <HAL_InitTick+0xa4>)
 8004902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004904:	4a1e      	ldr	r2, [pc, #120]	; (8004980 <HAL_InitTick+0xa4>)
 8004906:	f043 0301 	orr.w	r3, r3, #1
 800490a:	6453      	str	r3, [r2, #68]	; 0x44
 800490c:	4b1c      	ldr	r3, [pc, #112]	; (8004980 <HAL_InitTick+0xa4>)
 800490e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004918:	f107 0210 	add.w	r2, r7, #16
 800491c:	f107 0314 	add.w	r3, r7, #20
 8004920:	4611      	mov	r1, r2
 8004922:	4618      	mov	r0, r3
 8004924:	f003 fe32 	bl	800858c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004928:	f003 fe1c 	bl	8008564 <HAL_RCC_GetPCLK2Freq>
 800492c:	4603      	mov	r3, r0
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004934:	4a13      	ldr	r2, [pc, #76]	; (8004984 <HAL_InitTick+0xa8>)
 8004936:	fba2 2303 	umull	r2, r3, r2, r3
 800493a:	0c9b      	lsrs	r3, r3, #18
 800493c:	3b01      	subs	r3, #1
 800493e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004940:	4b11      	ldr	r3, [pc, #68]	; (8004988 <HAL_InitTick+0xac>)
 8004942:	4a12      	ldr	r2, [pc, #72]	; (800498c <HAL_InitTick+0xb0>)
 8004944:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8004946:	4b10      	ldr	r3, [pc, #64]	; (8004988 <HAL_InitTick+0xac>)
 8004948:	f240 32e7 	movw	r2, #999	; 0x3e7
 800494c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800494e:	4a0e      	ldr	r2, [pc, #56]	; (8004988 <HAL_InitTick+0xac>)
 8004950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004952:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004954:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <HAL_InitTick+0xac>)
 8004956:	2200      	movs	r2, #0
 8004958:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800495a:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <HAL_InitTick+0xac>)
 800495c:	2200      	movs	r2, #0
 800495e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004960:	4809      	ldr	r0, [pc, #36]	; (8004988 <HAL_InitTick+0xac>)
 8004962:	f004 fd91 	bl	8009488 <HAL_TIM_Base_Init>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d104      	bne.n	8004976 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800496c:	4806      	ldr	r0, [pc, #24]	; (8004988 <HAL_InitTick+0xac>)
 800496e:	f004 fdc0 	bl	80094f2 <HAL_TIM_Base_Start_IT>
 8004972:	4603      	mov	r3, r0
 8004974:	e000      	b.n	8004978 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
}
 8004978:	4618      	mov	r0, r3
 800497a:	3730      	adds	r7, #48	; 0x30
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40023800 	.word	0x40023800
 8004984:	431bde83 	.word	0x431bde83
 8004988:	200008e8 	.word	0x200008e8
 800498c:	40010000 	.word	0x40010000

08004990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800499e:	b480      	push	{r7}
 80049a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049a2:	e7fe      	b.n	80049a2 <HardFault_Handler+0x4>

080049a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049a8:	e7fe      	b.n	80049a8 <MemManage_Handler+0x4>

080049aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049aa:	b480      	push	{r7}
 80049ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049ae:	e7fe      	b.n	80049ae <BusFault_Handler+0x4>

080049b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049b4:	e7fe      	b.n	80049b4 <UsageFault_Handler+0x4>

080049b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049b6:	b480      	push	{r7}
 80049b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049ba:	bf00      	nop
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049c8:	bf00      	nop
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049d2:	b480      	push	{r7}
 80049d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049d6:	bf00      	nop
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
	...

080049f0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80049f4:	4802      	ldr	r0, [pc, #8]	; (8004a00 <DMA1_Stream2_IRQHandler+0x10>)
 80049f6:	f001 fc6b 	bl	80062d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80049fa:	bf00      	nop
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000ac8 	.word	0x20000ac8

08004a04 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8004a08:	4802      	ldr	r0, [pc, #8]	; (8004a14 <DMA1_Stream4_IRQHandler+0x10>)
 8004a0a:	f001 fc61 	bl	80062d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004a0e:	bf00      	nop
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000a08 	.word	0x20000a08

08004a18 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8004a1c:	4802      	ldr	r0, [pc, #8]	; (8004a28 <DMA1_Stream5_IRQHandler+0x10>)
 8004a1e:	f001 fc57 	bl	80062d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004a22:	bf00      	nop
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20000a68 	.word	0x20000a68

08004a2c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004a30:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004a34:	f003 f926 	bl	8007c84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004a38:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004a3c:	f003 f922 	bl	8007c84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004a40:	bf00      	nop
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a48:	4802      	ldr	r0, [pc, #8]	; (8004a54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004a4a:	f004 ff1d 	bl	8009888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004a4e:	bf00      	nop
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	200008e8 	.word	0x200008e8

08004a58 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004a5c:	4802      	ldr	r0, [pc, #8]	; (8004a68 <SPI2_IRQHandler+0x10>)
 8004a5e:	f004 fa09 	bl	8008e74 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004a62:	bf00      	nop
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000838 	.word	0x20000838

08004a6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(((huart1.Instance->SR & USART_SR_RXNE) != RESET) && ((huart1.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8004a72:	4b18      	ldr	r3, [pc, #96]	; (8004ad4 <USART1_IRQHandler+0x68>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0320 	and.w	r3, r3, #32
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d022      	beq.n	8004ac6 <USART1_IRQHandler+0x5a>
 8004a80:	4b14      	ldr	r3, [pc, #80]	; (8004ad4 <USART1_IRQHandler+0x68>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d01b      	beq.n	8004ac6 <USART1_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8004a8e:	4b11      	ldr	r3, [pc, #68]	; (8004ad4 <USART1_IRQHandler+0x68>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	71fb      	strb	r3, [r7, #7]
		gsm_rx_buffer_index_t i = (uint16_t)(gsm_rx_buffer_head + 1) % GSM_RX_BUFFER_SIZE;
 8004a96:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <USART1_IRQHandler+0x6c>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aa4:	71bb      	strb	r3, [r7, #6]

		if(i != gsm_rx_buffer_tail)
 8004aa6:	4b0d      	ldr	r3, [pc, #52]	; (8004adc <USART1_IRQHandler+0x70>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	79ba      	ldrb	r2, [r7, #6]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d009      	beq.n	8004ac6 <USART1_IRQHandler+0x5a>
		{
			gsm_rx_buffer[gsm_rx_buffer_head] = rbyte;
 8004ab2:	4b09      	ldr	r3, [pc, #36]	; (8004ad8 <USART1_IRQHandler+0x6c>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4a09      	ldr	r2, [pc, #36]	; (8004ae0 <USART1_IRQHandler+0x74>)
 8004abc:	79fb      	ldrb	r3, [r7, #7]
 8004abe:	5453      	strb	r3, [r2, r1]
			gsm_rx_buffer_head = i;
 8004ac0:	4a05      	ldr	r2, [pc, #20]	; (8004ad8 <USART1_IRQHandler+0x6c>)
 8004ac2:	79bb      	ldrb	r3, [r7, #6]
 8004ac4:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 8004ac6:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	20000b68 	.word	0x20000b68
 8004ad8:	20000358 	.word	0x20000358
 8004adc:	20000359 	.word	0x20000359
 8004ae0:	2000035c 	.word	0x2000035c

08004ae4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(((huart2.Instance->SR & USART_SR_RXNE) != RESET) && ((huart2.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8004aea:	4b18      	ldr	r3, [pc, #96]	; (8004b4c <USART2_IRQHandler+0x68>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d022      	beq.n	8004b3e <USART2_IRQHandler+0x5a>
 8004af8:	4b14      	ldr	r3, [pc, #80]	; (8004b4c <USART2_IRQHandler+0x68>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d01b      	beq.n	8004b3e <USART2_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8004b06:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <USART2_IRQHandler+0x68>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	71fb      	strb	r3, [r7, #7]
		rs485_rx_buffer_index_t i = (uint16_t)(rs485_rx_buffer_head + 1) % RS485_RX_BUFFER_SIZE;
 8004b0e:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <USART2_IRQHandler+0x6c>)
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	3301      	adds	r3, #1
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b1c:	71bb      	strb	r3, [r7, #6]

		if(i != rs485_rx_buffer_tail)
 8004b1e:	4b0d      	ldr	r3, [pc, #52]	; (8004b54 <USART2_IRQHandler+0x70>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	79ba      	ldrb	r2, [r7, #6]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d009      	beq.n	8004b3e <USART2_IRQHandler+0x5a>
		{
			rs485_rx_buffer[rs485_rx_buffer_head] = rbyte;
 8004b2a:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <USART2_IRQHandler+0x6c>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	4619      	mov	r1, r3
 8004b32:	4a09      	ldr	r2, [pc, #36]	; (8004b58 <USART2_IRQHandler+0x74>)
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	5453      	strb	r3, [r2, r1]
			rs485_rx_buffer_head = i;
 8004b38:	4a05      	ldr	r2, [pc, #20]	; (8004b50 <USART2_IRQHandler+0x6c>)
 8004b3a:	79bb      	ldrb	r3, [r7, #6]
 8004b3c:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 8004b3e:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	20000ba8 	.word	0x20000ba8
 8004b50:	200003e0 	.word	0x200003e0
 8004b54:	200003e1 	.word	0x200003e1
 8004b58:	200003e4 	.word	0x200003e4

08004b5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
//Раскоментить для дебага по USART(кроме отладки по Ethernet)

	if(((huart3.Instance->SR & USART_SR_RXNE) != RESET) && ((huart3.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8004b62:	4b18      	ldr	r3, [pc, #96]	; (8004bc4 <USART3_IRQHandler+0x68>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d022      	beq.n	8004bb6 <USART3_IRQHandler+0x5a>
 8004b70:	4b14      	ldr	r3, [pc, #80]	; (8004bc4 <USART3_IRQHandler+0x68>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f003 0320 	and.w	r3, r3, #32
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d01b      	beq.n	8004bb6 <USART3_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart3.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8004b7e:	4b11      	ldr	r3, [pc, #68]	; (8004bc4 <USART3_IRQHandler+0x68>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 8004b86:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <USART3_IRQHandler+0x6c>)
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b94:	71bb      	strb	r3, [r7, #6]

		if(i != dbg_rx_buffer_tail)
 8004b96:	4b0d      	ldr	r3, [pc, #52]	; (8004bcc <USART3_IRQHandler+0x70>)
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	79ba      	ldrb	r2, [r7, #6]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d009      	beq.n	8004bb6 <USART3_IRQHandler+0x5a>
		{
			dbg_rx_buffer[dbg_rx_buffer_head] = rbyte;
 8004ba2:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <USART3_IRQHandler+0x6c>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4a09      	ldr	r2, [pc, #36]	; (8004bd0 <USART3_IRQHandler+0x74>)
 8004bac:	79fb      	ldrb	r3, [r7, #7]
 8004bae:	5453      	strb	r3, [r2, r1]
			dbg_rx_buffer_head = i;
 8004bb0:	4a05      	ldr	r2, [pc, #20]	; (8004bc8 <USART3_IRQHandler+0x6c>)
 8004bb2:	79bb      	ldrb	r3, [r7, #6]
 8004bb4:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 8004bb6:	bf00      	nop
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20000b28 	.word	0x20000b28
 8004bc8:	2000039c 	.word	0x2000039c
 8004bcc:	2000039d 	.word	0x2000039d
 8004bd0:	200003a0 	.word	0x200003a0

08004bd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004bd8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004bdc:	f003 f852 	bl	8007c84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004be0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004be4:	f003 f84e 	bl	8007c84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004be8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004bec:	f003 f84a 	bl	8007c84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004bf0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004bf4:	f003 f846 	bl	8007c84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004bf8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004bfc:	f003 f842 	bl	8007c84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004c00:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004c04:	f003 f83e 	bl	8007c84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004c08:	bf00      	nop
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8004c10:	4802      	ldr	r0, [pc, #8]	; (8004c1c <DMA1_Stream7_IRQHandler+0x10>)
 8004c12:	f001 fb5d 	bl	80062d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004c16:	bf00      	nop
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000968 	.word	0x20000968

08004c20 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004c24:	4802      	ldr	r0, [pc, #8]	; (8004c30 <DMA2_Stream0_IRQHandler+0x10>)
 8004c26:	f001 fb53 	bl	80062d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004c2a:	bf00      	nop
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	200005f0 	.word	0x200005f0

08004c34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
	return 1;
 8004c38:	2301      	movs	r3, #1
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <_kill>:

int _kill(int pid, int sig)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004c4e:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <_kill+0x20>)
 8004c50:	2216      	movs	r2, #22
 8004c52:	601a      	str	r2, [r3, #0]
	return -1;
 8004c54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	20006e80 	.word	0x20006e80

08004c68 <_exit>:

void _exit (int status)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004c70:	f04f 31ff 	mov.w	r1, #4294967295
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff ffe5 	bl	8004c44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004c7a:	e7fe      	b.n	8004c7a <_exit+0x12>

08004c7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	e00a      	b.n	8004ca4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004c8e:	f3af 8000 	nop.w
 8004c92:	4601      	mov	r1, r0
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	60ba      	str	r2, [r7, #8]
 8004c9a:	b2ca      	uxtb	r2, r1
 8004c9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	dbf0      	blt.n	8004c8e <_read+0x12>
	}

return len;
 8004cac:	687b      	ldr	r3, [r7, #4]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b086      	sub	sp, #24
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	e009      	b.n	8004cdc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	60ba      	str	r2, [r7, #8]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	dbf1      	blt.n	8004cc8 <_write+0x12>
	}
	return len;
 8004ce4:	687b      	ldr	r3, [r7, #4]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <_close>:

int _close(int file)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
	return -1;
 8004cf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d16:	605a      	str	r2, [r3, #4]
	return 0;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <_isatty>:

int _isatty(int file)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
	return 1;
 8004d2e:	2301      	movs	r3, #1
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
	return 0;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
	...

08004d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d60:	4a14      	ldr	r2, [pc, #80]	; (8004db4 <_sbrk+0x5c>)
 8004d62:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <_sbrk+0x60>)
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d6c:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <_sbrk+0x64>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d102      	bne.n	8004d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d74:	4b11      	ldr	r3, [pc, #68]	; (8004dbc <_sbrk+0x64>)
 8004d76:	4a12      	ldr	r2, [pc, #72]	; (8004dc0 <_sbrk+0x68>)
 8004d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d7a:	4b10      	ldr	r3, [pc, #64]	; (8004dbc <_sbrk+0x64>)
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4413      	add	r3, r2
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d205      	bcs.n	8004d94 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8004d88:	4b0e      	ldr	r3, [pc, #56]	; (8004dc4 <_sbrk+0x6c>)
 8004d8a:	220c      	movs	r2, #12
 8004d8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d92:	e009      	b.n	8004da8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d94:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <_sbrk+0x64>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d9a:	4b08      	ldr	r3, [pc, #32]	; (8004dbc <_sbrk+0x64>)
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4413      	add	r3, r2
 8004da2:	4a06      	ldr	r2, [pc, #24]	; (8004dbc <_sbrk+0x64>)
 8004da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004da6:	68fb      	ldr	r3, [r7, #12]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	371c      	adds	r7, #28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	20020000 	.word	0x20020000
 8004db8:	00004000 	.word	0x00004000
 8004dbc:	20000354 	.word	0x20000354
 8004dc0:	20006e90 	.word	0x20006e90
 8004dc4:	20006e80 	.word	0x20006e80

08004dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004dcc:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <SystemInit+0x28>)
 8004dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd2:	4a07      	ldr	r2, [pc, #28]	; (8004df0 <SystemInit+0x28>)
 8004dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004ddc:	4b04      	ldr	r3, [pc, #16]	; (8004df0 <SystemInit+0x28>)
 8004dde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004de2:	609a      	str	r2, [r3, #8]
#endif
}
 8004de4:	bf00      	nop
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	e000ed00 	.word	0xe000ed00

08004df4 <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch3;
DMA_HandleTypeDef hdma_tim3_ch4_up;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08a      	sub	sp, #40	; 0x28
 8004df8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dfa:	f107 0320 	add.w	r3, r7, #32
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e04:	1d3b      	adds	r3, r7, #4
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	605a      	str	r2, [r3, #4]
 8004e0c:	609a      	str	r2, [r3, #8]
 8004e0e:	60da      	str	r2, [r3, #12]
 8004e10:	611a      	str	r2, [r3, #16]
 8004e12:	615a      	str	r2, [r3, #20]
 8004e14:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8004e16:	4b33      	ldr	r3, [pc, #204]	; (8004ee4 <MX_TIM3_Init+0xf0>)
 8004e18:	4a33      	ldr	r2, [pc, #204]	; (8004ee8 <MX_TIM3_Init+0xf4>)
 8004e1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8004e1c:	4b31      	ldr	r3, [pc, #196]	; (8004ee4 <MX_TIM3_Init+0xf0>)
 8004e1e:	2203      	movs	r2, #3
 8004e20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e22:	4b30      	ldr	r3, [pc, #192]	; (8004ee4 <MX_TIM3_Init+0xf0>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8004e28:	4b2e      	ldr	r3, [pc, #184]	; (8004ee4 <MX_TIM3_Init+0xf0>)
 8004e2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e30:	4b2c      	ldr	r3, [pc, #176]	; (8004ee4 <MX_TIM3_Init+0xf0>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e36:	4b2b      	ldr	r3, [pc, #172]	; (8004ee4 <MX_TIM3_Init+0xf0>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004e3c:	4829      	ldr	r0, [pc, #164]	; (8004ee4 <MX_TIM3_Init+0xf0>)
 8004e3e:	f004 fbe5 	bl	800960c <HAL_TIM_PWM_Init>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004e48:	f7fe fe8c 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e50:	2300      	movs	r3, #0
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004e54:	f107 0320 	add.w	r3, r7, #32
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4822      	ldr	r0, [pc, #136]	; (8004ee4 <MX_TIM3_Init+0xf0>)
 8004e5c:	f005 fa76 	bl	800a34c <HAL_TIMEx_MasterConfigSynchronization>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004e66:	f7fe fe7d 	bl	8003b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e6a:	2360      	movs	r3, #96	; 0x60
 8004e6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8004e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004e78:	2304      	movs	r3, #4
 8004e7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e7c:	1d3b      	adds	r3, r7, #4
 8004e7e:	2200      	movs	r2, #0
 8004e80:	4619      	mov	r1, r3
 8004e82:	4818      	ldr	r0, [pc, #96]	; (8004ee4 <MX_TIM3_Init+0xf0>)
 8004e84:	f004 fe68 	bl	8009b58 <HAL_TIM_PWM_ConfigChannel>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8004e8e:	f7fe fe69 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004e92:	1d3b      	adds	r3, r7, #4
 8004e94:	2204      	movs	r2, #4
 8004e96:	4619      	mov	r1, r3
 8004e98:	4812      	ldr	r0, [pc, #72]	; (8004ee4 <MX_TIM3_Init+0xf0>)
 8004e9a:	f004 fe5d 	bl	8009b58 <HAL_TIM_PWM_ConfigChannel>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8004ea4:	f7fe fe5e 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004ea8:	1d3b      	adds	r3, r7, #4
 8004eaa:	2208      	movs	r2, #8
 8004eac:	4619      	mov	r1, r3
 8004eae:	480d      	ldr	r0, [pc, #52]	; (8004ee4 <MX_TIM3_Init+0xf0>)
 8004eb0:	f004 fe52 	bl	8009b58 <HAL_TIM_PWM_ConfigChannel>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8004eba:	f7fe fe53 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004ebe:	1d3b      	adds	r3, r7, #4
 8004ec0:	220c      	movs	r2, #12
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4807      	ldr	r0, [pc, #28]	; (8004ee4 <MX_TIM3_Init+0xf0>)
 8004ec6:	f004 fe47 	bl	8009b58 <HAL_TIM_PWM_ConfigChannel>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8004ed0:	f7fe fe48 	bl	8003b64 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8004ed4:	4803      	ldr	r0, [pc, #12]	; (8004ee4 <MX_TIM3_Init+0xf0>)
 8004ed6:	f000 f981 	bl	80051dc <HAL_TIM_MspPostInit>

}
 8004eda:	bf00      	nop
 8004edc:	3728      	adds	r7, #40	; 0x28
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	200009c8 	.word	0x200009c8
 8004ee8:	40000400 	.word	0x40000400

08004eec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08a      	sub	sp, #40	; 0x28
 8004ef0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ef2:	f107 0320 	add.w	r3, r7, #32
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004efc:	1d3b      	adds	r3, r7, #4
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	605a      	str	r2, [r3, #4]
 8004f04:	609a      	str	r2, [r3, #8]
 8004f06:	60da      	str	r2, [r3, #12]
 8004f08:	611a      	str	r2, [r3, #16]
 8004f0a:	615a      	str	r2, [r3, #20]
 8004f0c:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8004f0e:	4b20      	ldr	r3, [pc, #128]	; (8004f90 <MX_TIM4_Init+0xa4>)
 8004f10:	4a20      	ldr	r2, [pc, #128]	; (8004f94 <MX_TIM4_Init+0xa8>)
 8004f12:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004f14:	4b1e      	ldr	r3, [pc, #120]	; (8004f90 <MX_TIM4_Init+0xa4>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f1a:	4b1d      	ldr	r3, [pc, #116]	; (8004f90 <MX_TIM4_Init+0xa4>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000;
 8004f20:	4b1b      	ldr	r3, [pc, #108]	; (8004f90 <MX_TIM4_Init+0xa4>)
 8004f22:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8004f26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f28:	4b19      	ldr	r3, [pc, #100]	; (8004f90 <MX_TIM4_Init+0xa4>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f2e:	4b18      	ldr	r3, [pc, #96]	; (8004f90 <MX_TIM4_Init+0xa4>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8004f34:	4816      	ldr	r0, [pc, #88]	; (8004f90 <MX_TIM4_Init+0xa4>)
 8004f36:	f004 fb00 	bl	800953a <HAL_TIM_OC_Init>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8004f40:	f7fe fe10 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f44:	2300      	movs	r3, #0
 8004f46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004f4c:	f107 0320 	add.w	r3, r7, #32
 8004f50:	4619      	mov	r1, r3
 8004f52:	480f      	ldr	r0, [pc, #60]	; (8004f90 <MX_TIM4_Init+0xa4>)
 8004f54:	f005 f9fa 	bl	800a34c <HAL_TIMEx_MasterConfigSynchronization>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8004f5e:	f7fe fe01 	bl	8003b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8004f62:	2330      	movs	r3, #48	; 0x30
 8004f64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004f72:	1d3b      	adds	r3, r7, #4
 8004f74:	220c      	movs	r2, #12
 8004f76:	4619      	mov	r1, r3
 8004f78:	4805      	ldr	r0, [pc, #20]	; (8004f90 <MX_TIM4_Init+0xa4>)
 8004f7a:	f004 fd8d 	bl	8009a98 <HAL_TIM_OC_ConfigChannel>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004f84:	f7fe fdee 	bl	8003b64 <Error_Handler>
  }

}
 8004f88:	bf00      	nop
 8004f8a:	3728      	adds	r7, #40	; 0x28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	20000928 	.word	0x20000928
 8004f94:	40000800 	.word	0x40000800

08004f98 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a72      	ldr	r2, [pc, #456]	; (8005170 <HAL_TIM_PWM_MspInit+0x1d8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	f040 80de 	bne.w	8005168 <HAL_TIM_PWM_MspInit+0x1d0>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004fac:	2300      	movs	r3, #0
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	4b70      	ldr	r3, [pc, #448]	; (8005174 <HAL_TIM_PWM_MspInit+0x1dc>)
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	4a6f      	ldr	r2, [pc, #444]	; (8005174 <HAL_TIM_PWM_MspInit+0x1dc>)
 8004fb6:	f043 0302 	orr.w	r3, r3, #2
 8004fba:	6413      	str	r3, [r2, #64]	; 0x40
 8004fbc:	4b6d      	ldr	r3, [pc, #436]	; (8005174 <HAL_TIM_PWM_MspInit+0x1dc>)
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8004fc8:	4b6b      	ldr	r3, [pc, #428]	; (8005178 <HAL_TIM_PWM_MspInit+0x1e0>)
 8004fca:	4a6c      	ldr	r2, [pc, #432]	; (800517c <HAL_TIM_PWM_MspInit+0x1e4>)
 8004fcc:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8004fce:	4b6a      	ldr	r3, [pc, #424]	; (8005178 <HAL_TIM_PWM_MspInit+0x1e0>)
 8004fd0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004fd4:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004fd6:	4b68      	ldr	r3, [pc, #416]	; (8005178 <HAL_TIM_PWM_MspInit+0x1e0>)
 8004fd8:	2240      	movs	r2, #64	; 0x40
 8004fda:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fdc:	4b66      	ldr	r3, [pc, #408]	; (8005178 <HAL_TIM_PWM_MspInit+0x1e0>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8004fe2:	4b65      	ldr	r3, [pc, #404]	; (8005178 <HAL_TIM_PWM_MspInit+0x1e0>)
 8004fe4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fe8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004fea:	4b63      	ldr	r3, [pc, #396]	; (8005178 <HAL_TIM_PWM_MspInit+0x1e0>)
 8004fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ff0:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004ff2:	4b61      	ldr	r3, [pc, #388]	; (8005178 <HAL_TIM_PWM_MspInit+0x1e0>)
 8004ff4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ff8:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8004ffa:	4b5f      	ldr	r3, [pc, #380]	; (8005178 <HAL_TIM_PWM_MspInit+0x1e0>)
 8004ffc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005000:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8005002:	4b5d      	ldr	r3, [pc, #372]	; (8005178 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005004:	2200      	movs	r2, #0
 8005006:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005008:	4b5b      	ldr	r3, [pc, #364]	; (8005178 <HAL_TIM_PWM_MspInit+0x1e0>)
 800500a:	2200      	movs	r2, #0
 800500c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800500e:	485a      	ldr	r0, [pc, #360]	; (8005178 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005010:	f001 f836 	bl	8006080 <HAL_DMA_Init>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 800501a:	f7fe fda3 	bl	8003b64 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a55      	ldr	r2, [pc, #340]	; (8005178 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005022:	625a      	str	r2, [r3, #36]	; 0x24
 8005024:	4a54      	ldr	r2, [pc, #336]	; (8005178 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a52      	ldr	r2, [pc, #328]	; (8005178 <HAL_TIM_PWM_MspInit+0x1e0>)
 800502e:	639a      	str	r2, [r3, #56]	; 0x38
 8005030:	4a51      	ldr	r2, [pc, #324]	; (8005178 <HAL_TIM_PWM_MspInit+0x1e0>)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 8005036:	4b52      	ldr	r3, [pc, #328]	; (8005180 <HAL_TIM_PWM_MspInit+0x1e8>)
 8005038:	4a52      	ldr	r2, [pc, #328]	; (8005184 <HAL_TIM_PWM_MspInit+0x1ec>)
 800503a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 800503c:	4b50      	ldr	r3, [pc, #320]	; (8005180 <HAL_TIM_PWM_MspInit+0x1e8>)
 800503e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005042:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005044:	4b4e      	ldr	r3, [pc, #312]	; (8005180 <HAL_TIM_PWM_MspInit+0x1e8>)
 8005046:	2240      	movs	r2, #64	; 0x40
 8005048:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800504a:	4b4d      	ldr	r3, [pc, #308]	; (8005180 <HAL_TIM_PWM_MspInit+0x1e8>)
 800504c:	2200      	movs	r2, #0
 800504e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8005050:	4b4b      	ldr	r3, [pc, #300]	; (8005180 <HAL_TIM_PWM_MspInit+0x1e8>)
 8005052:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005056:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005058:	4b49      	ldr	r3, [pc, #292]	; (8005180 <HAL_TIM_PWM_MspInit+0x1e8>)
 800505a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800505e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005060:	4b47      	ldr	r3, [pc, #284]	; (8005180 <HAL_TIM_PWM_MspInit+0x1e8>)
 8005062:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005066:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8005068:	4b45      	ldr	r3, [pc, #276]	; (8005180 <HAL_TIM_PWM_MspInit+0x1e8>)
 800506a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800506e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8005070:	4b43      	ldr	r3, [pc, #268]	; (8005180 <HAL_TIM_PWM_MspInit+0x1e8>)
 8005072:	2200      	movs	r2, #0
 8005074:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005076:	4b42      	ldr	r3, [pc, #264]	; (8005180 <HAL_TIM_PWM_MspInit+0x1e8>)
 8005078:	2200      	movs	r2, #0
 800507a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800507c:	4840      	ldr	r0, [pc, #256]	; (8005180 <HAL_TIM_PWM_MspInit+0x1e8>)
 800507e:	f000 ffff 	bl	8006080 <HAL_DMA_Init>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <HAL_TIM_PWM_MspInit+0xf4>
    {
      Error_Handler();
 8005088:	f7fe fd6c 	bl	8003b64 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a3c      	ldr	r2, [pc, #240]	; (8005180 <HAL_TIM_PWM_MspInit+0x1e8>)
 8005090:	629a      	str	r2, [r3, #40]	; 0x28
 8005092:	4a3b      	ldr	r2, [pc, #236]	; (8005180 <HAL_TIM_PWM_MspInit+0x1e8>)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 8005098:	4b3b      	ldr	r3, [pc, #236]	; (8005188 <HAL_TIM_PWM_MspInit+0x1f0>)
 800509a:	4a3c      	ldr	r2, [pc, #240]	; (800518c <HAL_TIM_PWM_MspInit+0x1f4>)
 800509c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 800509e:	4b3a      	ldr	r3, [pc, #232]	; (8005188 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050a0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80050a4:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050a6:	4b38      	ldr	r3, [pc, #224]	; (8005188 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050a8:	2240      	movs	r2, #64	; 0x40
 80050aa:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80050ac:	4b36      	ldr	r3, [pc, #216]	; (8005188 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80050b2:	4b35      	ldr	r3, [pc, #212]	; (8005188 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050b8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80050ba:	4b33      	ldr	r3, [pc, #204]	; (8005188 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050c0:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80050c2:	4b31      	ldr	r3, [pc, #196]	; (8005188 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050c8:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 80050ca:	4b2f      	ldr	r3, [pc, #188]	; (8005188 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050d0:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80050d2:	4b2d      	ldr	r3, [pc, #180]	; (8005188 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050d8:	4b2b      	ldr	r3, [pc, #172]	; (8005188 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050da:	2200      	movs	r2, #0
 80050dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 80050de:	482a      	ldr	r0, [pc, #168]	; (8005188 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050e0:	f000 ffce 	bl	8006080 <HAL_DMA_Init>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <HAL_TIM_PWM_MspInit+0x156>
    {
      Error_Handler();
 80050ea:	f7fe fd3b 	bl	8003b64 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a25      	ldr	r2, [pc, #148]	; (8005188 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80050f4:	4a24      	ldr	r2, [pc, #144]	; (8005188 <HAL_TIM_PWM_MspInit+0x1f0>)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 80050fa:	4b25      	ldr	r3, [pc, #148]	; (8005190 <HAL_TIM_PWM_MspInit+0x1f8>)
 80050fc:	4a25      	ldr	r2, [pc, #148]	; (8005194 <HAL_TIM_PWM_MspInit+0x1fc>)
 80050fe:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8005100:	4b23      	ldr	r3, [pc, #140]	; (8005190 <HAL_TIM_PWM_MspInit+0x1f8>)
 8005102:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005106:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005108:	4b21      	ldr	r3, [pc, #132]	; (8005190 <HAL_TIM_PWM_MspInit+0x1f8>)
 800510a:	2240      	movs	r2, #64	; 0x40
 800510c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800510e:	4b20      	ldr	r3, [pc, #128]	; (8005190 <HAL_TIM_PWM_MspInit+0x1f8>)
 8005110:	2200      	movs	r2, #0
 8005112:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8005114:	4b1e      	ldr	r3, [pc, #120]	; (8005190 <HAL_TIM_PWM_MspInit+0x1f8>)
 8005116:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800511a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800511c:	4b1c      	ldr	r3, [pc, #112]	; (8005190 <HAL_TIM_PWM_MspInit+0x1f8>)
 800511e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005122:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005124:	4b1a      	ldr	r3, [pc, #104]	; (8005190 <HAL_TIM_PWM_MspInit+0x1f8>)
 8005126:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800512a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 800512c:	4b18      	ldr	r3, [pc, #96]	; (8005190 <HAL_TIM_PWM_MspInit+0x1f8>)
 800512e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005132:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8005134:	4b16      	ldr	r3, [pc, #88]	; (8005190 <HAL_TIM_PWM_MspInit+0x1f8>)
 8005136:	2200      	movs	r2, #0
 8005138:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800513a:	4b15      	ldr	r3, [pc, #84]	; (8005190 <HAL_TIM_PWM_MspInit+0x1f8>)
 800513c:	2200      	movs	r2, #0
 800513e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8005140:	4813      	ldr	r0, [pc, #76]	; (8005190 <HAL_TIM_PWM_MspInit+0x1f8>)
 8005142:	f000 ff9d 	bl	8006080 <HAL_DMA_Init>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <HAL_TIM_PWM_MspInit+0x1b8>
    {
      Error_Handler();
 800514c:	f7fe fd0a 	bl	8003b64 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a0f      	ldr	r2, [pc, #60]	; (8005190 <HAL_TIM_PWM_MspInit+0x1f8>)
 8005154:	631a      	str	r2, [r3, #48]	; 0x30
 8005156:	4a0e      	ldr	r2, [pc, #56]	; (8005190 <HAL_TIM_PWM_MspInit+0x1f8>)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a0c      	ldr	r2, [pc, #48]	; (8005190 <HAL_TIM_PWM_MspInit+0x1f8>)
 8005160:	621a      	str	r2, [r3, #32]
 8005162:	4a0b      	ldr	r2, [pc, #44]	; (8005190 <HAL_TIM_PWM_MspInit+0x1f8>)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005168:	bf00      	nop
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40000400 	.word	0x40000400
 8005174:	40023800 	.word	0x40023800
 8005178:	20000a08 	.word	0x20000a08
 800517c:	40026070 	.word	0x40026070
 8005180:	20000a68 	.word	0x20000a68
 8005184:	40026088 	.word	0x40026088
 8005188:	20000968 	.word	0x20000968
 800518c:	400260b8 	.word	0x400260b8
 8005190:	20000ac8 	.word	0x20000ac8
 8005194:	40026040 	.word	0x40026040

08005198 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM4)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a0b      	ldr	r2, [pc, #44]	; (80051d4 <HAL_TIM_OC_MspInit+0x3c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d10d      	bne.n	80051c6 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80051aa:	2300      	movs	r3, #0
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <HAL_TIM_OC_MspInit+0x40>)
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	4a09      	ldr	r2, [pc, #36]	; (80051d8 <HAL_TIM_OC_MspInit+0x40>)
 80051b4:	f043 0304 	orr.w	r3, r3, #4
 80051b8:	6413      	str	r3, [r2, #64]	; 0x40
 80051ba:	4b07      	ldr	r3, [pc, #28]	; (80051d8 <HAL_TIM_OC_MspInit+0x40>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f003 0304 	and.w	r3, r3, #4
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80051c6:	bf00      	nop
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40000800 	.word	0x40000800
 80051d8:	40023800 	.word	0x40023800

080051dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b088      	sub	sp, #32
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051e4:	f107 030c 	add.w	r3, r7, #12
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	605a      	str	r2, [r3, #4]
 80051ee:	609a      	str	r2, [r3, #8]
 80051f0:	60da      	str	r2, [r3, #12]
 80051f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a12      	ldr	r2, [pc, #72]	; (8005244 <HAL_TIM_MspPostInit+0x68>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d11e      	bne.n	800523c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051fe:	2300      	movs	r3, #0
 8005200:	60bb      	str	r3, [r7, #8]
 8005202:	4b11      	ldr	r3, [pc, #68]	; (8005248 <HAL_TIM_MspPostInit+0x6c>)
 8005204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005206:	4a10      	ldr	r2, [pc, #64]	; (8005248 <HAL_TIM_MspPostInit+0x6c>)
 8005208:	f043 0304 	orr.w	r3, r3, #4
 800520c:	6313      	str	r3, [r2, #48]	; 0x30
 800520e:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <HAL_TIM_MspPostInit+0x6c>)
 8005210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	60bb      	str	r3, [r7, #8]
 8005218:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM0_Pin|PWM1_Pin|PWM2_Pin|PWM3_Pin;
 800521a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800521e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005220:	2302      	movs	r3, #2
 8005222:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005224:	2300      	movs	r3, #0
 8005226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005228:	2303      	movs	r3, #3
 800522a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800522c:	2302      	movs	r3, #2
 800522e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005230:	f107 030c 	add.w	r3, r7, #12
 8005234:	4619      	mov	r1, r3
 8005236:	4805      	ldr	r0, [pc, #20]	; (800524c <HAL_TIM_MspPostInit+0x70>)
 8005238:	f002 fb56 	bl	80078e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800523c:	bf00      	nop
 800523e:	3720      	adds	r7, #32
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40000400 	.word	0x40000400
 8005248:	40023800 	.word	0x40023800
 800524c:	40020800 	.word	0x40020800

08005250 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8005254:	4b11      	ldr	r3, [pc, #68]	; (800529c <MX_USART1_UART_Init+0x4c>)
 8005256:	4a12      	ldr	r2, [pc, #72]	; (80052a0 <MX_USART1_UART_Init+0x50>)
 8005258:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800525a:	4b10      	ldr	r3, [pc, #64]	; (800529c <MX_USART1_UART_Init+0x4c>)
 800525c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8005260:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005262:	4b0e      	ldr	r3, [pc, #56]	; (800529c <MX_USART1_UART_Init+0x4c>)
 8005264:	2200      	movs	r2, #0
 8005266:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005268:	4b0c      	ldr	r3, [pc, #48]	; (800529c <MX_USART1_UART_Init+0x4c>)
 800526a:	2200      	movs	r2, #0
 800526c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800526e:	4b0b      	ldr	r3, [pc, #44]	; (800529c <MX_USART1_UART_Init+0x4c>)
 8005270:	2200      	movs	r2, #0
 8005272:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005274:	4b09      	ldr	r3, [pc, #36]	; (800529c <MX_USART1_UART_Init+0x4c>)
 8005276:	220c      	movs	r2, #12
 8005278:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800527a:	4b08      	ldr	r3, [pc, #32]	; (800529c <MX_USART1_UART_Init+0x4c>)
 800527c:	2200      	movs	r2, #0
 800527e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005280:	4b06      	ldr	r3, [pc, #24]	; (800529c <MX_USART1_UART_Init+0x4c>)
 8005282:	2200      	movs	r2, #0
 8005284:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005286:	4805      	ldr	r0, [pc, #20]	; (800529c <MX_USART1_UART_Init+0x4c>)
 8005288:	f005 f8f0 	bl	800a46c <HAL_UART_Init>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005292:	f7fe fc67 	bl	8003b64 <Error_Handler>
  }

}
 8005296:	bf00      	nop
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20000b68 	.word	0x20000b68
 80052a0:	40011000 	.word	0x40011000

080052a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80052a8:	4b11      	ldr	r3, [pc, #68]	; (80052f0 <MX_USART2_UART_Init+0x4c>)
 80052aa:	4a12      	ldr	r2, [pc, #72]	; (80052f4 <MX_USART2_UART_Init+0x50>)
 80052ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80052ae:	4b10      	ldr	r3, [pc, #64]	; (80052f0 <MX_USART2_UART_Init+0x4c>)
 80052b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80052b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80052b6:	4b0e      	ldr	r3, [pc, #56]	; (80052f0 <MX_USART2_UART_Init+0x4c>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80052bc:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <MX_USART2_UART_Init+0x4c>)
 80052be:	2200      	movs	r2, #0
 80052c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80052c2:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <MX_USART2_UART_Init+0x4c>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80052c8:	4b09      	ldr	r3, [pc, #36]	; (80052f0 <MX_USART2_UART_Init+0x4c>)
 80052ca:	220c      	movs	r2, #12
 80052cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052ce:	4b08      	ldr	r3, [pc, #32]	; (80052f0 <MX_USART2_UART_Init+0x4c>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80052d4:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <MX_USART2_UART_Init+0x4c>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80052da:	4805      	ldr	r0, [pc, #20]	; (80052f0 <MX_USART2_UART_Init+0x4c>)
 80052dc:	f005 f8c6 	bl	800a46c <HAL_UART_Init>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80052e6:	f7fe fc3d 	bl	8003b64 <Error_Handler>
  }

}
 80052ea:	bf00      	nop
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000ba8 	.word	0x20000ba8
 80052f4:	40004400 	.word	0x40004400

080052f8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80052fc:	4b11      	ldr	r3, [pc, #68]	; (8005344 <MX_USART3_UART_Init+0x4c>)
 80052fe:	4a12      	ldr	r2, [pc, #72]	; (8005348 <MX_USART3_UART_Init+0x50>)
 8005300:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8005302:	4b10      	ldr	r3, [pc, #64]	; (8005344 <MX_USART3_UART_Init+0x4c>)
 8005304:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8005308:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800530a:	4b0e      	ldr	r3, [pc, #56]	; (8005344 <MX_USART3_UART_Init+0x4c>)
 800530c:	2200      	movs	r2, #0
 800530e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005310:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <MX_USART3_UART_Init+0x4c>)
 8005312:	2200      	movs	r2, #0
 8005314:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005316:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <MX_USART3_UART_Init+0x4c>)
 8005318:	2200      	movs	r2, #0
 800531a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800531c:	4b09      	ldr	r3, [pc, #36]	; (8005344 <MX_USART3_UART_Init+0x4c>)
 800531e:	220c      	movs	r2, #12
 8005320:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005322:	4b08      	ldr	r3, [pc, #32]	; (8005344 <MX_USART3_UART_Init+0x4c>)
 8005324:	2200      	movs	r2, #0
 8005326:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005328:	4b06      	ldr	r3, [pc, #24]	; (8005344 <MX_USART3_UART_Init+0x4c>)
 800532a:	2200      	movs	r2, #0
 800532c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800532e:	4805      	ldr	r0, [pc, #20]	; (8005344 <MX_USART3_UART_Init+0x4c>)
 8005330:	f005 f89c 	bl	800a46c <HAL_UART_Init>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800533a:	f7fe fc13 	bl	8003b64 <Error_Handler>
  }

}
 800533e:	bf00      	nop
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20000b28 	.word	0x20000b28
 8005348:	40004800 	.word	0x40004800

0800534c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08e      	sub	sp, #56	; 0x38
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	605a      	str	r2, [r3, #4]
 800535e:	609a      	str	r2, [r3, #8]
 8005360:	60da      	str	r2, [r3, #12]
 8005362:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a58      	ldr	r2, [pc, #352]	; (80054cc <HAL_UART_MspInit+0x180>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d135      	bne.n	80053da <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800536e:	2300      	movs	r3, #0
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	4b57      	ldr	r3, [pc, #348]	; (80054d0 <HAL_UART_MspInit+0x184>)
 8005374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005376:	4a56      	ldr	r2, [pc, #344]	; (80054d0 <HAL_UART_MspInit+0x184>)
 8005378:	f043 0310 	orr.w	r3, r3, #16
 800537c:	6453      	str	r3, [r2, #68]	; 0x44
 800537e:	4b54      	ldr	r3, [pc, #336]	; (80054d0 <HAL_UART_MspInit+0x184>)
 8005380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005382:	f003 0310 	and.w	r3, r3, #16
 8005386:	623b      	str	r3, [r7, #32]
 8005388:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800538a:	2300      	movs	r3, #0
 800538c:	61fb      	str	r3, [r7, #28]
 800538e:	4b50      	ldr	r3, [pc, #320]	; (80054d0 <HAL_UART_MspInit+0x184>)
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	4a4f      	ldr	r2, [pc, #316]	; (80054d0 <HAL_UART_MspInit+0x184>)
 8005394:	f043 0301 	orr.w	r3, r3, #1
 8005398:	6313      	str	r3, [r2, #48]	; 0x30
 800539a:	4b4d      	ldr	r3, [pc, #308]	; (80054d0 <HAL_UART_MspInit+0x184>)
 800539c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	61fb      	str	r3, [r7, #28]
 80053a4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM_RxD_Pin|SIM_TxD_Pin;
 80053a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ac:	2302      	movs	r3, #2
 80053ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b0:	2300      	movs	r3, #0
 80053b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053b4:	2303      	movs	r3, #3
 80053b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053b8:	2307      	movs	r3, #7
 80053ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053c0:	4619      	mov	r1, r3
 80053c2:	4844      	ldr	r0, [pc, #272]	; (80054d4 <HAL_UART_MspInit+0x188>)
 80053c4:	f002 fa90 	bl	80078e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80053c8:	2200      	movs	r2, #0
 80053ca:	2100      	movs	r1, #0
 80053cc:	2025      	movs	r0, #37	; 0x25
 80053ce:	f000 fe2d 	bl	800602c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80053d2:	2025      	movs	r0, #37	; 0x25
 80053d4:	f000 fe46 	bl	8006064 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80053d8:	e073      	b.n	80054c2 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART2)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a3e      	ldr	r2, [pc, #248]	; (80054d8 <HAL_UART_MspInit+0x18c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d134      	bne.n	800544e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80053e4:	2300      	movs	r3, #0
 80053e6:	61bb      	str	r3, [r7, #24]
 80053e8:	4b39      	ldr	r3, [pc, #228]	; (80054d0 <HAL_UART_MspInit+0x184>)
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	4a38      	ldr	r2, [pc, #224]	; (80054d0 <HAL_UART_MspInit+0x184>)
 80053ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053f2:	6413      	str	r3, [r2, #64]	; 0x40
 80053f4:	4b36      	ldr	r3, [pc, #216]	; (80054d0 <HAL_UART_MspInit+0x184>)
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005400:	2300      	movs	r3, #0
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	4b32      	ldr	r3, [pc, #200]	; (80054d0 <HAL_UART_MspInit+0x184>)
 8005406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005408:	4a31      	ldr	r2, [pc, #196]	; (80054d0 <HAL_UART_MspInit+0x184>)
 800540a:	f043 0308 	orr.w	r3, r3, #8
 800540e:	6313      	str	r3, [r2, #48]	; 0x30
 8005410:	4b2f      	ldr	r3, [pc, #188]	; (80054d0 <HAL_UART_MspInit+0x184>)
 8005412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005414:	f003 0308 	and.w	r3, r3, #8
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RS485_RxD_Pin|RS485_TxD_Pin;
 800541c:	2360      	movs	r3, #96	; 0x60
 800541e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005420:	2302      	movs	r3, #2
 8005422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005424:	2300      	movs	r3, #0
 8005426:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005428:	2303      	movs	r3, #3
 800542a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800542c:	2307      	movs	r3, #7
 800542e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005434:	4619      	mov	r1, r3
 8005436:	4829      	ldr	r0, [pc, #164]	; (80054dc <HAL_UART_MspInit+0x190>)
 8005438:	f002 fa56 	bl	80078e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800543c:	2200      	movs	r2, #0
 800543e:	2100      	movs	r1, #0
 8005440:	2026      	movs	r0, #38	; 0x26
 8005442:	f000 fdf3 	bl	800602c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005446:	2026      	movs	r0, #38	; 0x26
 8005448:	f000 fe0c 	bl	8006064 <HAL_NVIC_EnableIRQ>
}
 800544c:	e039      	b.n	80054c2 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART3)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a23      	ldr	r2, [pc, #140]	; (80054e0 <HAL_UART_MspInit+0x194>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d134      	bne.n	80054c2 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005458:	2300      	movs	r3, #0
 800545a:	613b      	str	r3, [r7, #16]
 800545c:	4b1c      	ldr	r3, [pc, #112]	; (80054d0 <HAL_UART_MspInit+0x184>)
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	4a1b      	ldr	r2, [pc, #108]	; (80054d0 <HAL_UART_MspInit+0x184>)
 8005462:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005466:	6413      	str	r3, [r2, #64]	; 0x40
 8005468:	4b19      	ldr	r3, [pc, #100]	; (80054d0 <HAL_UART_MspInit+0x184>)
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	4b15      	ldr	r3, [pc, #84]	; (80054d0 <HAL_UART_MspInit+0x184>)
 800547a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547c:	4a14      	ldr	r2, [pc, #80]	; (80054d0 <HAL_UART_MspInit+0x184>)
 800547e:	f043 0304 	orr.w	r3, r3, #4
 8005482:	6313      	str	r3, [r2, #48]	; 0x30
 8005484:	4b12      	ldr	r3, [pc, #72]	; (80054d0 <HAL_UART_MspInit+0x184>)
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = COM_RxD_Pin|COM_TxD_Pin;
 8005490:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005494:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005496:	2302      	movs	r3, #2
 8005498:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800549a:	2300      	movs	r3, #0
 800549c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800549e:	2303      	movs	r3, #3
 80054a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80054a2:	2307      	movs	r3, #7
 80054a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054aa:	4619      	mov	r1, r3
 80054ac:	480d      	ldr	r0, [pc, #52]	; (80054e4 <HAL_UART_MspInit+0x198>)
 80054ae:	f002 fa1b 	bl	80078e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80054b2:	2200      	movs	r2, #0
 80054b4:	2100      	movs	r1, #0
 80054b6:	2027      	movs	r0, #39	; 0x27
 80054b8:	f000 fdb8 	bl	800602c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80054bc:	2027      	movs	r0, #39	; 0x27
 80054be:	f000 fdd1 	bl	8006064 <HAL_NVIC_EnableIRQ>
}
 80054c2:	bf00      	nop
 80054c4:	3738      	adds	r7, #56	; 0x38
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	40011000 	.word	0x40011000
 80054d0:	40023800 	.word	0x40023800
 80054d4:	40020000 	.word	0x40020000
 80054d8:	40004400 	.word	0x40004400
 80054dc:	40020c00 	.word	0x40020c00
 80054e0:	40004800 	.word	0x40004800
 80054e4:	40020800 	.word	0x40020800

080054e8 <dbg_available>:
volatile dbg_rx_buffer_index_t dbg_rx_buffer_head = 0;
volatile dbg_rx_buffer_index_t dbg_rx_buffer_tail = 0;
uint8_t dbg_rx_buffer[DBG_RX_BUFFER_SIZE] = {0,};

int16_t dbg_available(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
	return ((uint16_t)(DBG_RX_BUFFER_SIZE + dbg_rx_buffer_head - dbg_rx_buffer_tail)) % DBG_RX_BUFFER_SIZE;
 80054ec:	4b0a      	ldr	r3, [pc, #40]	; (8005518 <dbg_available+0x30>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	4b09      	ldr	r3, [pc, #36]	; (800551c <dbg_available+0x34>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3340      	adds	r3, #64	; 0x40
 8005502:	b29b      	uxth	r3, r3
 8005504:	b21b      	sxth	r3, r3
 8005506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800550a:	b21b      	sxth	r3, r3
}
 800550c:	4618      	mov	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	2000039c 	.word	0x2000039c
 800551c:	2000039d 	.word	0x2000039d

08005520 <dbg_read>:

int16_t dbg_read(void)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
	if(dbg_rx_buffer_head == dbg_rx_buffer_tail)
 8005526:	4b12      	ldr	r3, [pc, #72]	; (8005570 <dbg_read+0x50>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	b2da      	uxtb	r2, r3
 800552c:	4b11      	ldr	r3, [pc, #68]	; (8005574 <dbg_read+0x54>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	b2db      	uxtb	r3, r3
 8005532:	429a      	cmp	r2, r3
 8005534:	d102      	bne.n	800553c <dbg_read+0x1c>
	{
		return -1;
 8005536:	f04f 33ff 	mov.w	r3, #4294967295
 800553a:	e012      	b.n	8005562 <dbg_read+0x42>
	}
	else
	{
		uint8_t c = dbg_rx_buffer[dbg_rx_buffer_tail];
 800553c:	4b0d      	ldr	r3, [pc, #52]	; (8005574 <dbg_read+0x54>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	b2db      	uxtb	r3, r3
 8005542:	461a      	mov	r2, r3
 8005544:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <dbg_read+0x58>)
 8005546:	5c9b      	ldrb	r3, [r3, r2]
 8005548:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_tail = (dbg_rx_buffer_index_t)(dbg_rx_buffer_tail + 1) % DBG_RX_BUFFER_SIZE;
 800554a:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <dbg_read+0x54>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	b2db      	uxtb	r3, r3
 8005550:	3301      	adds	r3, #1
 8005552:	b2db      	uxtb	r3, r3
 8005554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005558:	b2da      	uxtb	r2, r3
 800555a:	4b06      	ldr	r3, [pc, #24]	; (8005574 <dbg_read+0x54>)
 800555c:	701a      	strb	r2, [r3, #0]
		return c;
 800555e:	79fb      	ldrb	r3, [r7, #7]
 8005560:	b21b      	sxth	r3, r3
	}
}
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	2000039c 	.word	0x2000039c
 8005574:	2000039d 	.word	0x2000039d
 8005578:	200003a0 	.word	0x200003a0

0800557c <EN_Interrupt>:
		return c;
	}
}
//-----------------------------------------------------------------------------------------------------------------
void EN_Interrupt(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8005580:	4b0e      	ldr	r3, [pc, #56]	; (80055bc <EN_Interrupt+0x40>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	4b0d      	ldr	r3, [pc, #52]	; (80055bc <EN_Interrupt+0x40>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0220 	orr.w	r2, r2, #32
 800558e:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8005590:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <EN_Interrupt+0x44>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <EN_Interrupt+0x44>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0220 	orr.w	r2, r2, #32
 800559e:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80055a0:	4b08      	ldr	r3, [pc, #32]	; (80055c4 <EN_Interrupt+0x48>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	4b07      	ldr	r3, [pc, #28]	; (80055c4 <EN_Interrupt+0x48>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0220 	orr.w	r2, r2, #32
 80055ae:	60da      	str	r2, [r3, #12]

	//__HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_RXNE);
}
 80055b0:	bf00      	nop
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	20000b68 	.word	0x20000b68
 80055c0:	20000b28 	.word	0x20000b28
 80055c4:	20000ba8 	.word	0x20000ba8

080055c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80055c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005600 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80055cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80055ce:	e003      	b.n	80055d8 <LoopCopyDataInit>

080055d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80055d0:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80055d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80055d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80055d6:	3104      	adds	r1, #4

080055d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80055d8:	480b      	ldr	r0, [pc, #44]	; (8005608 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80055da:	4b0c      	ldr	r3, [pc, #48]	; (800560c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80055dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80055de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80055e0:	d3f6      	bcc.n	80055d0 <CopyDataInit>
  ldr  r2, =_sbss
 80055e2:	4a0b      	ldr	r2, [pc, #44]	; (8005610 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80055e4:	e002      	b.n	80055ec <LoopFillZerobss>

080055e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80055e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80055e8:	f842 3b04 	str.w	r3, [r2], #4

080055ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80055ec:	4b09      	ldr	r3, [pc, #36]	; (8005614 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80055ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80055f0:	d3f9      	bcc.n	80055e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80055f2:	f7ff fbe9 	bl	8004dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055f6:	f011 fbad 	bl	8016d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80055fa:	f7fe f94d 	bl	8003898 <main>
  bx  lr    
 80055fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005600:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005604:	08020030 	.word	0x08020030
  ldr  r0, =_sdata
 8005608:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800560c:	2000024c 	.word	0x2000024c
  ldr  r2, =_sbss
 8005610:	20000250 	.word	0x20000250
  ldr  r3, = _ebss
 8005614:	20006e90 	.word	0x20006e90

08005618 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005618:	e7fe      	b.n	8005618 <ADC_IRQHandler>
	...

0800561c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005620:	4b0e      	ldr	r3, [pc, #56]	; (800565c <HAL_Init+0x40>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a0d      	ldr	r2, [pc, #52]	; (800565c <HAL_Init+0x40>)
 8005626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800562a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800562c:	4b0b      	ldr	r3, [pc, #44]	; (800565c <HAL_Init+0x40>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a0a      	ldr	r2, [pc, #40]	; (800565c <HAL_Init+0x40>)
 8005632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005636:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005638:	4b08      	ldr	r3, [pc, #32]	; (800565c <HAL_Init+0x40>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a07      	ldr	r2, [pc, #28]	; (800565c <HAL_Init+0x40>)
 800563e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005642:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005644:	2003      	movs	r0, #3
 8005646:	f000 fce6 	bl	8006016 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800564a:	2000      	movs	r0, #0
 800564c:	f7ff f946 	bl	80048dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005650:	f7ff f91c 	bl	800488c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	40023c00 	.word	0x40023c00

08005660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005664:	4b06      	ldr	r3, [pc, #24]	; (8005680 <HAL_IncTick+0x20>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	4b06      	ldr	r3, [pc, #24]	; (8005684 <HAL_IncTick+0x24>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4413      	add	r3, r2
 8005670:	4a04      	ldr	r2, [pc, #16]	; (8005684 <HAL_IncTick+0x24>)
 8005672:	6013      	str	r3, [r2, #0]
}
 8005674:	bf00      	nop
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	20000064 	.word	0x20000064
 8005684:	20000be8 	.word	0x20000be8

08005688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
  return uwTick;
 800568c:	4b03      	ldr	r3, [pc, #12]	; (800569c <HAL_GetTick+0x14>)
 800568e:	681b      	ldr	r3, [r3, #0]
}
 8005690:	4618      	mov	r0, r3
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	20000be8 	.word	0x20000be8

080056a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056a8:	f7ff ffee 	bl	8005688 <HAL_GetTick>
 80056ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b8:	d005      	beq.n	80056c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056ba:	4b0a      	ldr	r3, [pc, #40]	; (80056e4 <HAL_Delay+0x44>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4413      	add	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80056c6:	bf00      	nop
 80056c8:	f7ff ffde 	bl	8005688 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d8f7      	bhi.n	80056c8 <HAL_Delay+0x28>
  {
  }
}
 80056d8:	bf00      	nop
 80056da:	bf00      	nop
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	20000064 	.word	0x20000064

080056e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056f0:	2300      	movs	r3, #0
 80056f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e033      	b.n	8005766 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	2b00      	cmp	r3, #0
 8005704:	d109      	bne.n	800571a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fb fcac 	bl	8001064 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	f003 0310 	and.w	r3, r3, #16
 8005722:	2b00      	cmp	r3, #0
 8005724:	d118      	bne.n	8005758 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800572e:	f023 0302 	bic.w	r3, r3, #2
 8005732:	f043 0202 	orr.w	r2, r3, #2
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fa40 	bl	8005bc0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	f023 0303 	bic.w	r3, r3, #3
 800574e:	f043 0201 	orr.w	r2, r3, #1
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	641a      	str	r2, [r3, #64]	; 0x40
 8005756:	e001      	b.n	800575c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005764:	7bfb      	ldrb	r3, [r7, #15]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005786:	2b01      	cmp	r3, #1
 8005788:	d101      	bne.n	800578e <HAL_ADC_Start_DMA+0x1e>
 800578a:	2302      	movs	r3, #2
 800578c:	e0cc      	b.n	8005928 <HAL_ADC_Start_DMA+0x1b8>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d018      	beq.n	80057d6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0201 	orr.w	r2, r2, #1
 80057b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80057b4:	4b5e      	ldr	r3, [pc, #376]	; (8005930 <HAL_ADC_Start_DMA+0x1c0>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a5e      	ldr	r2, [pc, #376]	; (8005934 <HAL_ADC_Start_DMA+0x1c4>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	0c9a      	lsrs	r2, r3, #18
 80057c0:	4613      	mov	r3, r2
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	4413      	add	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80057c8:	e002      	b.n	80057d0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	3b01      	subs	r3, #1
 80057ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1f9      	bne.n	80057ca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	f040 80a0 	bne.w	8005926 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80057ee:	f023 0301 	bic.w	r3, r3, #1
 80057f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005804:	2b00      	cmp	r3, #0
 8005806:	d007      	beq.n	8005818 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005810:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005824:	d106      	bne.n	8005834 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582a:	f023 0206 	bic.w	r2, r3, #6
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	645a      	str	r2, [r3, #68]	; 0x44
 8005832:	e002      	b.n	800583a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005842:	4b3d      	ldr	r3, [pc, #244]	; (8005938 <HAL_ADC_Start_DMA+0x1c8>)
 8005844:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584a:	4a3c      	ldr	r2, [pc, #240]	; (800593c <HAL_ADC_Start_DMA+0x1cc>)
 800584c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	4a3b      	ldr	r2, [pc, #236]	; (8005940 <HAL_ADC_Start_DMA+0x1d0>)
 8005854:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	4a3a      	ldr	r2, [pc, #232]	; (8005944 <HAL_ADC_Start_DMA+0x1d4>)
 800585c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005866:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005876:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005886:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	334c      	adds	r3, #76	; 0x4c
 8005892:	4619      	mov	r1, r3
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f000 fca0 	bl	80061dc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f003 031f 	and.w	r3, r3, #31
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d12a      	bne.n	80058fe <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a26      	ldr	r2, [pc, #152]	; (8005948 <HAL_ADC_Start_DMA+0x1d8>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d015      	beq.n	80058de <HAL_ADC_Start_DMA+0x16e>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a25      	ldr	r2, [pc, #148]	; (800594c <HAL_ADC_Start_DMA+0x1dc>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d105      	bne.n	80058c8 <HAL_ADC_Start_DMA+0x158>
 80058bc:	4b1e      	ldr	r3, [pc, #120]	; (8005938 <HAL_ADC_Start_DMA+0x1c8>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f003 031f 	and.w	r3, r3, #31
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00a      	beq.n	80058de <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a20      	ldr	r2, [pc, #128]	; (8005950 <HAL_ADC_Start_DMA+0x1e0>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d129      	bne.n	8005926 <HAL_ADC_Start_DMA+0x1b6>
 80058d2:	4b19      	ldr	r3, [pc, #100]	; (8005938 <HAL_ADC_Start_DMA+0x1c8>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f003 0310 	and.w	r3, r3, #16
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d123      	bne.n	8005926 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d11c      	bne.n	8005926 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689a      	ldr	r2, [r3, #8]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80058fa:	609a      	str	r2, [r3, #8]
 80058fc:	e013      	b.n	8005926 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a11      	ldr	r2, [pc, #68]	; (8005948 <HAL_ADC_Start_DMA+0x1d8>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d10e      	bne.n	8005926 <HAL_ADC_Start_DMA+0x1b6>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d107      	bne.n	8005926 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005924:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	2000005c 	.word	0x2000005c
 8005934:	431bde83 	.word	0x431bde83
 8005938:	40012300 	.word	0x40012300
 800593c:	08005db9 	.word	0x08005db9
 8005940:	08005e73 	.word	0x08005e73
 8005944:	08005e8f 	.word	0x08005e8f
 8005948:	40012000 	.word	0x40012000
 800594c:	40012100 	.word	0x40012100
 8005950:	40012200 	.word	0x40012200

08005954 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005990:	2b01      	cmp	r3, #1
 8005992:	d101      	bne.n	8005998 <HAL_ADC_ConfigChannel+0x1c>
 8005994:	2302      	movs	r3, #2
 8005996:	e105      	b.n	8005ba4 <HAL_ADC_ConfigChannel+0x228>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b09      	cmp	r3, #9
 80059a6:	d925      	bls.n	80059f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68d9      	ldr	r1, [r3, #12]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	461a      	mov	r2, r3
 80059b6:	4613      	mov	r3, r2
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	4413      	add	r3, r2
 80059bc:	3b1e      	subs	r3, #30
 80059be:	2207      	movs	r2, #7
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	43da      	mvns	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	400a      	ands	r2, r1
 80059cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68d9      	ldr	r1, [r3, #12]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	b29b      	uxth	r3, r3
 80059de:	4618      	mov	r0, r3
 80059e0:	4603      	mov	r3, r0
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	4403      	add	r3, r0
 80059e6:	3b1e      	subs	r3, #30
 80059e8:	409a      	lsls	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	60da      	str	r2, [r3, #12]
 80059f2:	e022      	b.n	8005a3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6919      	ldr	r1, [r3, #16]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	461a      	mov	r2, r3
 8005a02:	4613      	mov	r3, r2
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	4413      	add	r3, r2
 8005a08:	2207      	movs	r2, #7
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	43da      	mvns	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	400a      	ands	r2, r1
 8005a16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6919      	ldr	r1, [r3, #16]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	4618      	mov	r0, r3
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	4403      	add	r3, r0
 8005a30:	409a      	lsls	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2b06      	cmp	r3, #6
 8005a40:	d824      	bhi.n	8005a8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	3b05      	subs	r3, #5
 8005a54:	221f      	movs	r2, #31
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	43da      	mvns	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	400a      	ands	r2, r1
 8005a62:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	4618      	mov	r0, r3
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	4613      	mov	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	3b05      	subs	r3, #5
 8005a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	635a      	str	r2, [r3, #52]	; 0x34
 8005a8a:	e04c      	b.n	8005b26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b0c      	cmp	r3, #12
 8005a92:	d824      	bhi.n	8005ade <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	3b23      	subs	r3, #35	; 0x23
 8005aa6:	221f      	movs	r2, #31
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	43da      	mvns	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	400a      	ands	r2, r1
 8005ab4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	3b23      	subs	r3, #35	; 0x23
 8005ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	631a      	str	r2, [r3, #48]	; 0x30
 8005adc:	e023      	b.n	8005b26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	3b41      	subs	r3, #65	; 0x41
 8005af0:	221f      	movs	r2, #31
 8005af2:	fa02 f303 	lsl.w	r3, r2, r3
 8005af6:	43da      	mvns	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	400a      	ands	r2, r1
 8005afe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	3b41      	subs	r3, #65	; 0x41
 8005b1a:	fa00 f203 	lsl.w	r2, r0, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b26:	4b22      	ldr	r3, [pc, #136]	; (8005bb0 <HAL_ADC_ConfigChannel+0x234>)
 8005b28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a21      	ldr	r2, [pc, #132]	; (8005bb4 <HAL_ADC_ConfigChannel+0x238>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d109      	bne.n	8005b48 <HAL_ADC_ConfigChannel+0x1cc>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b12      	cmp	r3, #18
 8005b3a:	d105      	bne.n	8005b48 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a19      	ldr	r2, [pc, #100]	; (8005bb4 <HAL_ADC_ConfigChannel+0x238>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d123      	bne.n	8005b9a <HAL_ADC_ConfigChannel+0x21e>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b10      	cmp	r3, #16
 8005b58:	d003      	beq.n	8005b62 <HAL_ADC_ConfigChannel+0x1e6>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b11      	cmp	r3, #17
 8005b60:	d11b      	bne.n	8005b9a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b10      	cmp	r3, #16
 8005b74:	d111      	bne.n	8005b9a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005b76:	4b10      	ldr	r3, [pc, #64]	; (8005bb8 <HAL_ADC_ConfigChannel+0x23c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a10      	ldr	r2, [pc, #64]	; (8005bbc <HAL_ADC_ConfigChannel+0x240>)
 8005b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b80:	0c9a      	lsrs	r2, r3, #18
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005b8c:	e002      	b.n	8005b94 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	3b01      	subs	r3, #1
 8005b92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1f9      	bne.n	8005b8e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	40012300 	.word	0x40012300
 8005bb4:	40012000 	.word	0x40012000
 8005bb8:	2000005c 	.word	0x2000005c
 8005bbc:	431bde83 	.word	0x431bde83

08005bc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005bc8:	4b79      	ldr	r3, [pc, #484]	; (8005db0 <ADC_Init+0x1f0>)
 8005bca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	431a      	orrs	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6859      	ldr	r1, [r3, #4]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	021a      	lsls	r2, r3, #8
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005c18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6859      	ldr	r1, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689a      	ldr	r2, [r3, #8]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6899      	ldr	r1, [r3, #8]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c52:	4a58      	ldr	r2, [pc, #352]	; (8005db4 <ADC_Init+0x1f4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d022      	beq.n	8005c9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6899      	ldr	r1, [r3, #8]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005c88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6899      	ldr	r1, [r3, #8]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	609a      	str	r2, [r3, #8]
 8005c9c:	e00f      	b.n	8005cbe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005cac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005cbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0202 	bic.w	r2, r2, #2
 8005ccc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6899      	ldr	r1, [r3, #8]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	7e1b      	ldrb	r3, [r3, #24]
 8005cd8:	005a      	lsls	r2, r3, #1
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01b      	beq.n	8005d24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cfa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005d0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6859      	ldr	r1, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	3b01      	subs	r3, #1
 8005d18:	035a      	lsls	r2, r3, #13
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]
 8005d22:	e007      	b.n	8005d34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	051a      	lsls	r2, r3, #20
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005d68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6899      	ldr	r1, [r3, #8]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d76:	025a      	lsls	r2, r3, #9
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689a      	ldr	r2, [r3, #8]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6899      	ldr	r1, [r3, #8]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	029a      	lsls	r2, r3, #10
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	609a      	str	r2, [r3, #8]
}
 8005da4:	bf00      	nop
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	40012300 	.word	0x40012300
 8005db4:	0f000001 	.word	0x0f000001

08005db8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d13c      	bne.n	8005e4c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d12b      	bne.n	8005e44 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d127      	bne.n	8005e44 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d006      	beq.n	8005e10 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d119      	bne.n	8005e44 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0220 	bic.w	r2, r2, #32
 8005e1e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d105      	bne.n	8005e44 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	f043 0201 	orr.w	r2, r3, #1
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f7fd fe33 	bl	8003ab0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005e4a:	e00e      	b.n	8005e6a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	f003 0310 	and.w	r3, r3, #16
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d003      	beq.n	8005e60 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f7ff fd85 	bl	8005968 <HAL_ADC_ErrorCallback>
}
 8005e5e:	e004      	b.n	8005e6a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	4798      	blx	r3
}
 8005e6a:	bf00      	nop
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b084      	sub	sp, #16
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f7ff fd67 	bl	8005954 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e86:	bf00      	nop
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2240      	movs	r2, #64	; 0x40
 8005ea0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea6:	f043 0204 	orr.w	r2, r3, #4
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f7ff fd5a 	bl	8005968 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005eb4:	bf00      	nop
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ecc:	4b0c      	ldr	r3, [pc, #48]	; (8005f00 <__NVIC_SetPriorityGrouping+0x44>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ed8:	4013      	ands	r3, r2
 8005eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005eee:	4a04      	ldr	r2, [pc, #16]	; (8005f00 <__NVIC_SetPriorityGrouping+0x44>)
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	60d3      	str	r3, [r2, #12]
}
 8005ef4:	bf00      	nop
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	e000ed00 	.word	0xe000ed00

08005f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f08:	4b04      	ldr	r3, [pc, #16]	; (8005f1c <__NVIC_GetPriorityGrouping+0x18>)
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	0a1b      	lsrs	r3, r3, #8
 8005f0e:	f003 0307 	and.w	r3, r3, #7
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	e000ed00 	.word	0xe000ed00

08005f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	4603      	mov	r3, r0
 8005f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	db0b      	blt.n	8005f4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f32:	79fb      	ldrb	r3, [r7, #7]
 8005f34:	f003 021f 	and.w	r2, r3, #31
 8005f38:	4907      	ldr	r1, [pc, #28]	; (8005f58 <__NVIC_EnableIRQ+0x38>)
 8005f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f3e:	095b      	lsrs	r3, r3, #5
 8005f40:	2001      	movs	r0, #1
 8005f42:	fa00 f202 	lsl.w	r2, r0, r2
 8005f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	e000e100 	.word	0xe000e100

08005f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	4603      	mov	r3, r0
 8005f64:	6039      	str	r1, [r7, #0]
 8005f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	db0a      	blt.n	8005f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	490c      	ldr	r1, [pc, #48]	; (8005fa8 <__NVIC_SetPriority+0x4c>)
 8005f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f7a:	0112      	lsls	r2, r2, #4
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	440b      	add	r3, r1
 8005f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f84:	e00a      	b.n	8005f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	4908      	ldr	r1, [pc, #32]	; (8005fac <__NVIC_SetPriority+0x50>)
 8005f8c:	79fb      	ldrb	r3, [r7, #7]
 8005f8e:	f003 030f 	and.w	r3, r3, #15
 8005f92:	3b04      	subs	r3, #4
 8005f94:	0112      	lsls	r2, r2, #4
 8005f96:	b2d2      	uxtb	r2, r2
 8005f98:	440b      	add	r3, r1
 8005f9a:	761a      	strb	r2, [r3, #24]
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	e000e100 	.word	0xe000e100
 8005fac:	e000ed00 	.word	0xe000ed00

08005fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b089      	sub	sp, #36	; 0x24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f1c3 0307 	rsb	r3, r3, #7
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	bf28      	it	cs
 8005fce:	2304      	movcs	r3, #4
 8005fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	2b06      	cmp	r3, #6
 8005fd8:	d902      	bls.n	8005fe0 <NVIC_EncodePriority+0x30>
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	3b03      	subs	r3, #3
 8005fde:	e000      	b.n	8005fe2 <NVIC_EncodePriority+0x32>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	fa02 f303 	lsl.w	r3, r2, r3
 8005fee:	43da      	mvns	r2, r3
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	401a      	ands	r2, r3
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8006002:	43d9      	mvns	r1, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006008:	4313      	orrs	r3, r2
         );
}
 800600a:	4618      	mov	r0, r3
 800600c:	3724      	adds	r7, #36	; 0x24
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7ff ff4c 	bl	8005ebc <__NVIC_SetPriorityGrouping>
}
 8006024:	bf00      	nop
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	4603      	mov	r3, r0
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
 8006038:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800603a:	2300      	movs	r3, #0
 800603c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800603e:	f7ff ff61 	bl	8005f04 <__NVIC_GetPriorityGrouping>
 8006042:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	68b9      	ldr	r1, [r7, #8]
 8006048:	6978      	ldr	r0, [r7, #20]
 800604a:	f7ff ffb1 	bl	8005fb0 <NVIC_EncodePriority>
 800604e:	4602      	mov	r2, r0
 8006050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006054:	4611      	mov	r1, r2
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff ff80 	bl	8005f5c <__NVIC_SetPriority>
}
 800605c:	bf00      	nop
 800605e:	3718      	adds	r7, #24
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	4603      	mov	r3, r0
 800606c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800606e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006072:	4618      	mov	r0, r3
 8006074:	f7ff ff54 	bl	8005f20 <__NVIC_EnableIRQ>
}
 8006078:	bf00      	nop
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800608c:	f7ff fafc 	bl	8005688 <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e099      	b.n	80061d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2202      	movs	r2, #2
 80060a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0201 	bic.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060bc:	e00f      	b.n	80060de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060be:	f7ff fae3 	bl	8005688 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b05      	cmp	r3, #5
 80060ca:	d908      	bls.n	80060de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2220      	movs	r2, #32
 80060d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2203      	movs	r2, #3
 80060d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e078      	b.n	80061d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1e8      	bne.n	80060be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	4b38      	ldr	r3, [pc, #224]	; (80061d8 <HAL_DMA_Init+0x158>)
 80060f8:	4013      	ands	r3, r2
 80060fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800610a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006116:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006122:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	4313      	orrs	r3, r2
 800612e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006134:	2b04      	cmp	r3, #4
 8006136:	d107      	bne.n	8006148 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006140:	4313      	orrs	r3, r2
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	4313      	orrs	r3, r2
 8006146:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f023 0307 	bic.w	r3, r3, #7
 800615e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	4313      	orrs	r3, r2
 8006168:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	2b04      	cmp	r3, #4
 8006170:	d117      	bne.n	80061a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	4313      	orrs	r3, r2
 800617a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00e      	beq.n	80061a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fa91 	bl	80066ac <DMA_CheckFifoParam>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d008      	beq.n	80061a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2240      	movs	r2, #64	; 0x40
 8006194:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800619e:	2301      	movs	r3, #1
 80061a0:	e016      	b.n	80061d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fa48 	bl	8006640 <DMA_CalcBaseAndBitshift>
 80061b0:	4603      	mov	r3, r0
 80061b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b8:	223f      	movs	r2, #63	; 0x3f
 80061ba:	409a      	lsls	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	f010803f 	.word	0xf010803f

080061dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
 80061e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d101      	bne.n	8006202 <HAL_DMA_Start_IT+0x26>
 80061fe:	2302      	movs	r3, #2
 8006200:	e040      	b.n	8006284 <HAL_DMA_Start_IT+0xa8>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b01      	cmp	r3, #1
 8006214:	d12f      	bne.n	8006276 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2202      	movs	r2, #2
 800621a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	68b9      	ldr	r1, [r7, #8]
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 f9da 	bl	80065e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006234:	223f      	movs	r2, #63	; 0x3f
 8006236:	409a      	lsls	r2, r3
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f042 0216 	orr.w	r2, r2, #22
 800624a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006250:	2b00      	cmp	r3, #0
 8006252:	d007      	beq.n	8006264 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f042 0208 	orr.w	r2, r2, #8
 8006262:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0201 	orr.w	r2, r2, #1
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	e005      	b.n	8006282 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800627e:	2302      	movs	r3, #2
 8006280:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006282:	7dfb      	ldrb	r3, [r7, #23]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3718      	adds	r7, #24
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d004      	beq.n	80062aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2280      	movs	r2, #128	; 0x80
 80062a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e00c      	b.n	80062c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2205      	movs	r2, #5
 80062ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f022 0201 	bic.w	r2, r2, #1
 80062c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80062dc:	4b92      	ldr	r3, [pc, #584]	; (8006528 <HAL_DMA_IRQHandler+0x258>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a92      	ldr	r2, [pc, #584]	; (800652c <HAL_DMA_IRQHandler+0x25c>)
 80062e2:	fba2 2303 	umull	r2, r3, r2, r3
 80062e6:	0a9b      	lsrs	r3, r3, #10
 80062e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062fa:	2208      	movs	r2, #8
 80062fc:	409a      	lsls	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4013      	ands	r3, r2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d01a      	beq.n	800633c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0304 	and.w	r3, r3, #4
 8006310:	2b00      	cmp	r3, #0
 8006312:	d013      	beq.n	800633c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 0204 	bic.w	r2, r2, #4
 8006322:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006328:	2208      	movs	r2, #8
 800632a:	409a      	lsls	r2, r3
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006334:	f043 0201 	orr.w	r2, r3, #1
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006340:	2201      	movs	r2, #1
 8006342:	409a      	lsls	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4013      	ands	r3, r2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d012      	beq.n	8006372 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00b      	beq.n	8006372 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800635e:	2201      	movs	r2, #1
 8006360:	409a      	lsls	r2, r3
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636a:	f043 0202 	orr.w	r2, r3, #2
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006376:	2204      	movs	r2, #4
 8006378:	409a      	lsls	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	4013      	ands	r3, r2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d012      	beq.n	80063a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00b      	beq.n	80063a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006394:	2204      	movs	r2, #4
 8006396:	409a      	lsls	r2, r3
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a0:	f043 0204 	orr.w	r2, r3, #4
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ac:	2210      	movs	r2, #16
 80063ae:	409a      	lsls	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4013      	ands	r3, r2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d043      	beq.n	8006440 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0308 	and.w	r3, r3, #8
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d03c      	beq.n	8006440 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ca:	2210      	movs	r2, #16
 80063cc:	409a      	lsls	r2, r3
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d018      	beq.n	8006412 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d108      	bne.n	8006400 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d024      	beq.n	8006440 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	4798      	blx	r3
 80063fe:	e01f      	b.n	8006440 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006404:	2b00      	cmp	r3, #0
 8006406:	d01b      	beq.n	8006440 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	4798      	blx	r3
 8006410:	e016      	b.n	8006440 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800641c:	2b00      	cmp	r3, #0
 800641e:	d107      	bne.n	8006430 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 0208 	bic.w	r2, r2, #8
 800642e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006434:	2b00      	cmp	r3, #0
 8006436:	d003      	beq.n	8006440 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006444:	2220      	movs	r2, #32
 8006446:	409a      	lsls	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4013      	ands	r3, r2
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 808e 	beq.w	800656e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0310 	and.w	r3, r3, #16
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 8086 	beq.w	800656e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006466:	2220      	movs	r2, #32
 8006468:	409a      	lsls	r2, r3
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b05      	cmp	r3, #5
 8006478:	d136      	bne.n	80064e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 0216 	bic.w	r2, r2, #22
 8006488:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	695a      	ldr	r2, [r3, #20]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006498:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d103      	bne.n	80064aa <HAL_DMA_IRQHandler+0x1da>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d007      	beq.n	80064ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 0208 	bic.w	r2, r2, #8
 80064b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064be:	223f      	movs	r2, #63	; 0x3f
 80064c0:	409a      	lsls	r2, r3
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d07d      	beq.n	80065da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	4798      	blx	r3
        }
        return;
 80064e6:	e078      	b.n	80065da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d01c      	beq.n	8006530 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d108      	bne.n	8006516 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006508:	2b00      	cmp	r3, #0
 800650a:	d030      	beq.n	800656e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	4798      	blx	r3
 8006514:	e02b      	b.n	800656e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651a:	2b00      	cmp	r3, #0
 800651c:	d027      	beq.n	800656e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	4798      	blx	r3
 8006526:	e022      	b.n	800656e <HAL_DMA_IRQHandler+0x29e>
 8006528:	2000005c 	.word	0x2000005c
 800652c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10f      	bne.n	800655e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f022 0210 	bic.w	r2, r2, #16
 800654c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006572:	2b00      	cmp	r3, #0
 8006574:	d032      	beq.n	80065dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d022      	beq.n	80065c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2205      	movs	r2, #5
 8006586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 0201 	bic.w	r2, r2, #1
 8006598:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	3301      	adds	r3, #1
 800659e:	60bb      	str	r3, [r7, #8]
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d307      	bcc.n	80065b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1f2      	bne.n	800659a <HAL_DMA_IRQHandler+0x2ca>
 80065b4:	e000      	b.n	80065b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80065b6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	4798      	blx	r3
 80065d8:	e000      	b.n	80065dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80065da:	bf00      	nop
    }
  }
}
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop

080065e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006600:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	2b40      	cmp	r3, #64	; 0x40
 8006610:	d108      	bne.n	8006624 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006622:	e007      	b.n	8006634 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	60da      	str	r2, [r3, #12]
}
 8006634:	bf00      	nop
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	b2db      	uxtb	r3, r3
 800664e:	3b10      	subs	r3, #16
 8006650:	4a14      	ldr	r2, [pc, #80]	; (80066a4 <DMA_CalcBaseAndBitshift+0x64>)
 8006652:	fba2 2303 	umull	r2, r3, r2, r3
 8006656:	091b      	lsrs	r3, r3, #4
 8006658:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800665a:	4a13      	ldr	r2, [pc, #76]	; (80066a8 <DMA_CalcBaseAndBitshift+0x68>)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b03      	cmp	r3, #3
 800666c:	d909      	bls.n	8006682 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006676:	f023 0303 	bic.w	r3, r3, #3
 800667a:	1d1a      	adds	r2, r3, #4
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	659a      	str	r2, [r3, #88]	; 0x58
 8006680:	e007      	b.n	8006692 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800668a:	f023 0303 	bic.w	r3, r3, #3
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006696:	4618      	mov	r0, r3
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	aaaaaaab 	.word	0xaaaaaaab
 80066a8:	0801f9d0 	.word	0x0801f9d0

080066ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d11f      	bne.n	8006706 <DMA_CheckFifoParam+0x5a>
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b03      	cmp	r3, #3
 80066ca:	d856      	bhi.n	800677a <DMA_CheckFifoParam+0xce>
 80066cc:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <DMA_CheckFifoParam+0x28>)
 80066ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d2:	bf00      	nop
 80066d4:	080066e5 	.word	0x080066e5
 80066d8:	080066f7 	.word	0x080066f7
 80066dc:	080066e5 	.word	0x080066e5
 80066e0:	0800677b 	.word	0x0800677b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d046      	beq.n	800677e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066f4:	e043      	b.n	800677e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80066fe:	d140      	bne.n	8006782 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006704:	e03d      	b.n	8006782 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800670e:	d121      	bne.n	8006754 <DMA_CheckFifoParam+0xa8>
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2b03      	cmp	r3, #3
 8006714:	d837      	bhi.n	8006786 <DMA_CheckFifoParam+0xda>
 8006716:	a201      	add	r2, pc, #4	; (adr r2, 800671c <DMA_CheckFifoParam+0x70>)
 8006718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671c:	0800672d 	.word	0x0800672d
 8006720:	08006733 	.word	0x08006733
 8006724:	0800672d 	.word	0x0800672d
 8006728:	08006745 	.word	0x08006745
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	73fb      	strb	r3, [r7, #15]
      break;
 8006730:	e030      	b.n	8006794 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006736:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d025      	beq.n	800678a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006742:	e022      	b.n	800678a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800674c:	d11f      	bne.n	800678e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006752:	e01c      	b.n	800678e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2b02      	cmp	r3, #2
 8006758:	d903      	bls.n	8006762 <DMA_CheckFifoParam+0xb6>
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b03      	cmp	r3, #3
 800675e:	d003      	beq.n	8006768 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006760:	e018      	b.n	8006794 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	73fb      	strb	r3, [r7, #15]
      break;
 8006766:	e015      	b.n	8006794 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00e      	beq.n	8006792 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	73fb      	strb	r3, [r7, #15]
      break;
 8006778:	e00b      	b.n	8006792 <DMA_CheckFifoParam+0xe6>
      break;
 800677a:	bf00      	nop
 800677c:	e00a      	b.n	8006794 <DMA_CheckFifoParam+0xe8>
      break;
 800677e:	bf00      	nop
 8006780:	e008      	b.n	8006794 <DMA_CheckFifoParam+0xe8>
      break;
 8006782:	bf00      	nop
 8006784:	e006      	b.n	8006794 <DMA_CheckFifoParam+0xe8>
      break;
 8006786:	bf00      	nop
 8006788:	e004      	b.n	8006794 <DMA_CheckFifoParam+0xe8>
      break;
 800678a:	bf00      	nop
 800678c:	e002      	b.n	8006794 <DMA_CheckFifoParam+0xe8>
      break;   
 800678e:	bf00      	nop
 8006790:	e000      	b.n	8006794 <DMA_CheckFifoParam+0xe8>
      break;
 8006792:	bf00      	nop
    }
  } 
  
  return status; 
 8006794:	7bfb      	ldrb	r3, [r7, #15]
}
 8006796:	4618      	mov	r0, r3
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop

080067a4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b088      	sub	sp, #32
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	61fb      	str	r3, [r7, #28]
 80067b0:	2300      	movs	r3, #0
 80067b2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80067b4:	4baa      	ldr	r3, [pc, #680]	; (8006a60 <HAL_ETH_Init+0x2bc>)
 80067b6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80067b8:	2300      	movs	r3, #0
 80067ba:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80067bc:	2300      	movs	r3, #0
 80067be:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e183      	b.n	8006ad2 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d106      	bne.n	80067e4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f004 fa74 	bl	800accc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067e4:	2300      	movs	r3, #0
 80067e6:	60bb      	str	r3, [r7, #8]
 80067e8:	4b9e      	ldr	r3, [pc, #632]	; (8006a64 <HAL_ETH_Init+0x2c0>)
 80067ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ec:	4a9d      	ldr	r2, [pc, #628]	; (8006a64 <HAL_ETH_Init+0x2c0>)
 80067ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067f2:	6453      	str	r3, [r2, #68]	; 0x44
 80067f4:	4b9b      	ldr	r3, [pc, #620]	; (8006a64 <HAL_ETH_Init+0x2c0>)
 80067f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067fc:	60bb      	str	r3, [r7, #8]
 80067fe:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8006800:	4b99      	ldr	r3, [pc, #612]	; (8006a68 <HAL_ETH_Init+0x2c4>)
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	4a98      	ldr	r2, [pc, #608]	; (8006a68 <HAL_ETH_Init+0x2c4>)
 8006806:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800680a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800680c:	4b96      	ldr	r3, [pc, #600]	; (8006a68 <HAL_ETH_Init+0x2c4>)
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	4994      	ldr	r1, [pc, #592]	; (8006a68 <HAL_ETH_Init+0x2c4>)
 8006816:	4313      	orrs	r3, r2
 8006818:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f042 0201 	orr.w	r2, r2, #1
 800682c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006830:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8006832:	f7fe ff29 	bl	8005688 <HAL_GetTick>
 8006836:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8006838:	e011      	b.n	800685e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800683a:	f7fe ff25 	bl	8005688 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006848:	d909      	bls.n	800685e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2203      	movs	r2, #3
 800684e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e139      	b.n	8006ad2 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1e4      	bne.n	800683a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	f023 031c 	bic.w	r3, r3, #28
 800687e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006880:	f001 fe50 	bl	8008524 <HAL_RCC_GetHCLKFreq>
 8006884:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	4a78      	ldr	r2, [pc, #480]	; (8006a6c <HAL_ETH_Init+0x2c8>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d908      	bls.n	80068a0 <HAL_ETH_Init+0xfc>
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	4a77      	ldr	r2, [pc, #476]	; (8006a70 <HAL_ETH_Init+0x2cc>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d804      	bhi.n	80068a0 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	f043 0308 	orr.w	r3, r3, #8
 800689c:	61fb      	str	r3, [r7, #28]
 800689e:	e027      	b.n	80068f0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	4a73      	ldr	r2, [pc, #460]	; (8006a70 <HAL_ETH_Init+0x2cc>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d908      	bls.n	80068ba <HAL_ETH_Init+0x116>
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	4a6d      	ldr	r2, [pc, #436]	; (8006a60 <HAL_ETH_Init+0x2bc>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d204      	bcs.n	80068ba <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	f043 030c 	orr.w	r3, r3, #12
 80068b6:	61fb      	str	r3, [r7, #28]
 80068b8:	e01a      	b.n	80068f0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	4a68      	ldr	r2, [pc, #416]	; (8006a60 <HAL_ETH_Init+0x2bc>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d303      	bcc.n	80068ca <HAL_ETH_Init+0x126>
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	4a6b      	ldr	r2, [pc, #428]	; (8006a74 <HAL_ETH_Init+0x2d0>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d911      	bls.n	80068ee <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	4a69      	ldr	r2, [pc, #420]	; (8006a74 <HAL_ETH_Init+0x2d0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d908      	bls.n	80068e4 <HAL_ETH_Init+0x140>
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	4a68      	ldr	r2, [pc, #416]	; (8006a78 <HAL_ETH_Init+0x2d4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d804      	bhi.n	80068e4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	f043 0304 	orr.w	r3, r3, #4
 80068e0:	61fb      	str	r3, [r7, #28]
 80068e2:	e005      	b.n	80068f0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	f043 0310 	orr.w	r3, r3, #16
 80068ea:	61fb      	str	r3, [r7, #28]
 80068ec:	e000      	b.n	80068f0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80068ee:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69fa      	ldr	r2, [r7, #28]
 80068f6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80068f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80068fc:	2100      	movs	r1, #0
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fb14 	bl	8006f2c <HAL_ETH_WritePHYRegister>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00b      	beq.n	8006922 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800690e:	6939      	ldr	r1, [r7, #16]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fcc9 	bl	80072a8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e0d7      	b.n	8006ad2 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8006922:	20ff      	movs	r0, #255	; 0xff
 8006924:	f7fe febc 	bl	80056a0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 80a5 	beq.w	8006a7c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006932:	f7fe fea9 	bl	8005688 <HAL_GetTick>
 8006936:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8006938:	f107 030c 	add.w	r3, r7, #12
 800693c:	461a      	mov	r2, r3
 800693e:	2101      	movs	r1, #1
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fa8b 	bl	8006e5c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8006946:	f7fe fe9f 	bl	8005688 <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	f241 3288 	movw	r2, #5000	; 0x1388
 8006954:	4293      	cmp	r3, r2
 8006956:	d90f      	bls.n	8006978 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800695c:	6939      	ldr	r1, [r7, #16]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fca2 	bl	80072a8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e0ac      	b.n	8006ad2 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f003 0304 	and.w	r3, r3, #4
 800697e:	2b00      	cmp	r3, #0
 8006980:	d0da      	beq.n	8006938 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8006982:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006986:	2100      	movs	r1, #0
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 facf 	bl	8006f2c <HAL_ETH_WritePHYRegister>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00b      	beq.n	80069ac <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8006998:	6939      	ldr	r1, [r7, #16]
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fc84 	bl	80072a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80069a8:	2301      	movs	r3, #1
 80069aa:	e092      	b.n	8006ad2 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80069ac:	f7fe fe6c 	bl	8005688 <HAL_GetTick>
 80069b0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80069b2:	f107 030c 	add.w	r3, r7, #12
 80069b6:	461a      	mov	r2, r3
 80069b8:	2101      	movs	r1, #1
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fa4e 	bl	8006e5c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80069c0:	f7fe fe62 	bl	8005688 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d90f      	bls.n	80069f2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80069d6:	6939      	ldr	r1, [r7, #16]
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fc65 	bl	80072a8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e06f      	b.n	8006ad2 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f003 0320 	and.w	r3, r3, #32
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d0da      	beq.n	80069b2 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80069fc:	f107 030c 	add.w	r3, r7, #12
 8006a00:	461a      	mov	r2, r3
 8006a02:	211f      	movs	r1, #31
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fa29 	bl	8006e5c <HAL_ETH_ReadPHYRegister>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00b      	beq.n	8006a28 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8006a14:	6939      	ldr	r1, [r7, #16]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fc46 	bl	80072a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8006a24:	2301      	movs	r3, #1
 8006a26:	e054      	b.n	8006ad2 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f003 0310 	and.w	r3, r3, #16
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d004      	beq.n	8006a3c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a38:	60da      	str	r2, [r3, #12]
 8006a3a:	e002      	b.n	8006a42 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	609a      	str	r2, [r3, #8]
 8006a52:	e035      	b.n	8006ac0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006a5a:	609a      	str	r2, [r3, #8]
 8006a5c:	e030      	b.n	8006ac0 <HAL_ETH_Init+0x31c>
 8006a5e:	bf00      	nop
 8006a60:	03938700 	.word	0x03938700
 8006a64:	40023800 	.word	0x40023800
 8006a68:	40013800 	.word	0x40013800
 8006a6c:	01312cff 	.word	0x01312cff
 8006a70:	02160ebf 	.word	0x02160ebf
 8006a74:	05f5e0ff 	.word	0x05f5e0ff
 8006a78:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	08db      	lsrs	r3, r3, #3
 8006a82:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	085b      	lsrs	r3, r3, #1
 8006a8a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	461a      	mov	r2, r3
 8006a92:	2100      	movs	r1, #0
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fa49 	bl	8006f2c <HAL_ETH_WritePHYRegister>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00b      	beq.n	8006ab8 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8006aa4:	6939      	ldr	r1, [r7, #16]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fbfe 	bl	80072a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e00c      	b.n	8006ad2 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8006ab8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8006abc:	f7fe fdf0 	bl	80056a0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8006ac0:	6939      	ldr	r1, [r7, #16]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fbf0 	bl	80072a8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3720      	adds	r7, #32
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop

08006adc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d101      	bne.n	8006afc <HAL_ETH_DMATxDescListInit+0x20>
 8006af8:	2302      	movs	r3, #2
 8006afa:	e052      	b.n	8006ba2 <HAL_ETH_DMATxDescListInit+0xc6>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8006b12:	2300      	movs	r3, #0
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	e030      	b.n	8006b7a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	015b      	lsls	r3, r3, #5
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	4413      	add	r3, r2
 8006b20:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b28:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006b30:	fb02 f303 	mul.w	r3, r2, r3
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	4413      	add	r3, r2
 8006b38:	461a      	mov	r2, r3
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d105      	bne.n	8006b52 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d208      	bcs.n	8006b6e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	015b      	lsls	r3, r3, #5
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	4413      	add	r3, r2
 8006b66:	461a      	mov	r2, r3
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	60da      	str	r2, [r3, #12]
 8006b6c:	e002      	b.n	8006b74 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	3301      	adds	r3, #1
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d3ca      	bcc.n	8006b18 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b8c:	3310      	adds	r3, #16
 8006b8e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b087      	sub	sp, #28
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	60f8      	str	r0, [r7, #12]
 8006bb6:	60b9      	str	r1, [r7, #8]
 8006bb8:	607a      	str	r2, [r7, #4]
 8006bba:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d101      	bne.n	8006bce <HAL_ETH_DMARxDescListInit+0x20>
 8006bca:	2302      	movs	r3, #2
 8006bcc:	e056      	b.n	8006c7c <HAL_ETH_DMARxDescListInit+0xce>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8006be4:	2300      	movs	r3, #0
 8006be6:	617b      	str	r3, [r7, #20]
 8006be8:	e034      	b.n	8006c54 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	015b      	lsls	r3, r3, #5
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006bfa:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8006c02:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006c0a:	fb02 f303 	mul.w	r3, r2, r3
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	4413      	add	r3, r2
 8006c12:	461a      	mov	r2, r3
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d105      	bne.n	8006c2c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d208      	bcs.n	8006c48 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	015b      	lsls	r3, r3, #5
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	4413      	add	r3, r2
 8006c40:	461a      	mov	r2, r3
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	60da      	str	r2, [r3, #12]
 8006c46:	e002      	b.n	8006c4e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	3301      	adds	r3, #1
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d3c6      	bcc.n	8006bea <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c66:	330c      	adds	r3, #12
 8006c68:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	371c      	adds	r7, #28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	617b      	str	r3, [r7, #20]
 8006c96:	2300      	movs	r3, #0
 8006c98:	60fb      	str	r3, [r7, #12]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d101      	bne.n	8006cac <HAL_ETH_TransmitFrame+0x24>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e0cd      	b.n	8006e48 <HAL_ETH_TransmitFrame+0x1c0>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d109      	bne.n	8006cd6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e0b8      	b.n	8006e48 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	da09      	bge.n	8006cf4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2212      	movs	r2, #18
 8006ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e0a9      	b.n	8006e48 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d915      	bls.n	8006d2a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	4a54      	ldr	r2, [pc, #336]	; (8006e54 <HAL_ETH_TransmitFrame+0x1cc>)
 8006d02:	fba2 2303 	umull	r2, r3, r2, r3
 8006d06:	0a9b      	lsrs	r3, r3, #10
 8006d08:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	4b51      	ldr	r3, [pc, #324]	; (8006e54 <HAL_ETH_TransmitFrame+0x1cc>)
 8006d0e:	fba3 1302 	umull	r1, r3, r3, r2
 8006d12:	0a9b      	lsrs	r3, r3, #10
 8006d14:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8006d18:	fb01 f303 	mul.w	r3, r1, r3
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d005      	beq.n	8006d2e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	3301      	adds	r3, #1
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	e001      	b.n	8006d2e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d11c      	bne.n	8006d6e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8006d42:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8006d4e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006d5e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	461a      	mov	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d6c:	e04b      	b.n	8006e06 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8006d6e:	2300      	movs	r3, #0
 8006d70:	613b      	str	r3, [r7, #16]
 8006d72:	e044      	b.n	8006dfe <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006d82:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d107      	bne.n	8006d9a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006d98:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006da2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d116      	bne.n	8006ddc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006dbc:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	4a25      	ldr	r2, [pc, #148]	; (8006e58 <HAL_ETH_TransmitFrame+0x1d0>)
 8006dc2:	fb02 f203 	mul.w	r2, r2, r3
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006dce:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8006dda:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006dea:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	461a      	mov	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	613b      	str	r3, [r7, #16]
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d3b6      	bcc.n	8006d74 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e0e:	3314      	adds	r3, #20
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0304 	and.w	r3, r3, #4
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00d      	beq.n	8006e36 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e22:	3314      	adds	r3, #20
 8006e24:	2204      	movs	r2, #4
 8006e26:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e30:	3304      	adds	r3, #4
 8006e32:	2200      	movs	r2, #0
 8006e34:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	371c      	adds	r7, #28
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr
 8006e54:	ac02b00b 	.word	0xac02b00b
 8006e58:	fffffa0c 	.word	0xfffffa0c

08006e5c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	460b      	mov	r3, r1
 8006e66:	607a      	str	r2, [r7, #4]
 8006e68:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b82      	cmp	r3, #130	; 0x82
 8006e7c:	d101      	bne.n	8006e82 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8006e7e:	2302      	movs	r3, #2
 8006e80:	e050      	b.n	8006f24 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2282      	movs	r2, #130	; 0x82
 8006e86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f003 031c 	and.w	r3, r3, #28
 8006e98:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	8a1b      	ldrh	r3, [r3, #16]
 8006e9e:	02db      	lsls	r3, r3, #11
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8006ea8:	897b      	ldrh	r3, [r7, #10]
 8006eaa:	019b      	lsls	r3, r3, #6
 8006eac:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f023 0302 	bic.w	r3, r3, #2
 8006ebc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f043 0301 	orr.w	r3, r3, #1
 8006ec4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8006ece:	f7fe fbdb 	bl	8005688 <HAL_GetTick>
 8006ed2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006ed4:	e015      	b.n	8006f02 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8006ed6:	f7fe fbd7 	bl	8005688 <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee4:	d309      	bcc.n	8006efa <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e014      	b.n	8006f24 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e4      	bne.n	8006ed6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	461a      	mov	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	460b      	mov	r3, r1
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b42      	cmp	r3, #66	; 0x42
 8006f4c:	d101      	bne.n	8006f52 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e04e      	b.n	8006ff0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2242      	movs	r2, #66	; 0x42
 8006f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f003 031c 	and.w	r3, r3, #28
 8006f68:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8a1b      	ldrh	r3, [r3, #16]
 8006f6e:	02db      	lsls	r3, r3, #11
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8006f78:	897b      	ldrh	r3, [r7, #10]
 8006f7a:	019b      	lsls	r3, r3, #6
 8006f7c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f043 0302 	orr.w	r3, r3, #2
 8006f8c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f043 0301 	orr.w	r3, r3, #1
 8006f94:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8006fa8:	f7fe fb6e 	bl	8005688 <HAL_GetTick>
 8006fac:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006fae:	e015      	b.n	8006fdc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8006fb0:	f7fe fb6a 	bl	8005688 <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fbe:	d309      	bcc.n	8006fd4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e00d      	b.n	8006ff0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e4      	bne.n	8006fb0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007006:	2b01      	cmp	r3, #1
 8007008:	d101      	bne.n	800700e <HAL_ETH_Start+0x16>
 800700a:	2302      	movs	r3, #2
 800700c:	e01f      	b.n	800704e <HAL_ETH_Start+0x56>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2202      	movs	r2, #2
 800701a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fb44 	bl	80076ac <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fb7b 	bl	8007720 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fc12 	bl	8007854 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fbaf 	bl	8007794 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fbdc 	bl	80077f4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8007056:	b580      	push	{r7, lr}
 8007058:	b082      	sub	sp, #8
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007064:	2b01      	cmp	r3, #1
 8007066:	d101      	bne.n	800706c <HAL_ETH_Stop+0x16>
 8007068:	2302      	movs	r3, #2
 800706a:	e01f      	b.n	80070ac <HAL_ETH_Stop+0x56>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fba1 	bl	80077c4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fbce 	bl	8007824 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fb66 	bl	800775a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fbe0 	bl	8007854 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fb26 	bl	80076e6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80070be:	2300      	movs	r3, #0
 80070c0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d101      	bne.n	80070d0 <HAL_ETH_ConfigMAC+0x1c>
 80070cc:	2302      	movs	r3, #2
 80070ce:	e0e4      	b.n	800729a <HAL_ETH_ConfigMAC+0x1e6>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 80b1 	beq.w	800724a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	4b6c      	ldr	r3, [pc, #432]	; (80072a4 <HAL_ETH_ConfigMAC+0x1f0>)
 80070f4:	4013      	ands	r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8007100:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8007106:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800710c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8007112:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8007118:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800711e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8007124:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800712a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8007130:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8007136:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800713c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8007142:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	4313      	orrs	r3, r2
 8007148:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800715a:	2001      	movs	r0, #1
 800715c:	f7fe faa0 	bl	80056a0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8007170:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8007176:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800717c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8007182:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8007188:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800718e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800719a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800719c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80071a6:	2001      	movs	r0, #1
 80071a8:	f7fe fa7a 	bl	80056a0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80071bc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80071c6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80071d6:	4013      	ands	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071de:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80071e4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80071ea:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80071f0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80071f6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80071fc:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	4313      	orrs	r3, r2
 8007202:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8007214:	2001      	movs	r0, #1
 8007216:	f7fe fa43 	bl	80056a0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800723a:	2001      	movs	r0, #1
 800723c:	f7fe fa30 	bl	80056a0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	61da      	str	r2, [r3, #28]
 8007248:	e01e      	b.n	8007288 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007258:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	689a      	ldr	r2, [r3, #8]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	4313      	orrs	r3, r2
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	4313      	orrs	r3, r2
 8007268:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800727a:	2001      	movs	r0, #1
 800727c:	f7fe fa10 	bl	80056a0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	ff20810f 	.word	0xff20810f

080072a8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b0b0      	sub	sp, #192	; 0xc0
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80072b2:	2300      	movs	r3, #0
 80072b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d007      	beq.n	80072ce <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072c4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80072cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80072ce:	2300      	movs	r3, #0
 80072d0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80072d2:	2300      	movs	r3, #0
 80072d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80072d6:	2300      	movs	r3, #0
 80072d8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80072da:	2300      	movs	r3, #0
 80072dc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80072de:	2300      	movs	r3, #0
 80072e0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80072e2:	2300      	movs	r3, #0
 80072e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d103      	bne.n	80072f6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80072ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072f2:	663b      	str	r3, [r7, #96]	; 0x60
 80072f4:	e001      	b.n	80072fa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80072f6:	2300      	movs	r3, #0
 80072f8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80072fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072fe:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8007300:	2300      	movs	r3, #0
 8007302:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007304:	2300      	movs	r3, #0
 8007306:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8007308:	2300      	movs	r3, #0
 800730a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800730c:	2300      	movs	r3, #0
 800730e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8007310:	2300      	movs	r3, #0
 8007312:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8007314:	2340      	movs	r3, #64	; 0x40
 8007316:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8007318:	2300      	movs	r3, #0
 800731a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800731e:	2300      	movs	r3, #0
 8007320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8007324:	2300      	movs	r3, #0
 8007326:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800732a:	2300      	movs	r3, #0
 800732c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8007330:	2300      	movs	r3, #0
 8007332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8007336:	2300      	movs	r3, #0
 8007338:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800733c:	2300      	movs	r3, #0
 800733e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8007342:	2300      	movs	r3, #0
 8007344:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8007348:	2380      	movs	r3, #128	; 0x80
 800734a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800734e:	2300      	movs	r3, #0
 8007350:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8007354:	2300      	movs	r3, #0
 8007356:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800735a:	2300      	movs	r3, #0
 800735c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8007360:	2300      	movs	r3, #0
 8007362:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8007366:	2300      	movs	r3, #0
 8007368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800736c:	2300      	movs	r3, #0
 800736e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800737c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007380:	4bac      	ldr	r3, [pc, #688]	; (8007634 <ETH_MACDMAConfig+0x38c>)
 8007382:	4013      	ands	r3, r2
 8007384:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8007388:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800738a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800738c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800738e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8007390:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8007392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8007394:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800739a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800739c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800739e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80073a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80073a2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80073a8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80073aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80073ac:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80073ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80073b0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80073b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80073b4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80073b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80073b8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80073ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80073bc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80073be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80073c2:	4313      	orrs	r3, r2
 80073c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80073d0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80073dc:	2001      	movs	r0, #1
 80073de:	f7fe f95f 	bl	80056a0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80073ea:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80073ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80073ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80073f0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80073f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80073f4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80073f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80073fa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80073fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8007400:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8007402:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8007406:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8007408:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800740c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8007410:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8007418:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800741a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8007426:	2001      	movs	r0, #1
 8007428:	f7fe f93a 	bl	80056a0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007434:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800743e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007448:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007454:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007458:	f64f 7341 	movw	r3, #65345	; 0xff41
 800745c:	4013      	ands	r3, r2
 800745e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8007462:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007466:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8007468:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800746c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800746e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8007472:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8007474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8007478:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800747a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800747e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8007480:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8007484:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8007486:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800748a:	4313      	orrs	r3, r2
 800748c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007498:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80074a4:	2001      	movs	r0, #1
 80074a6:	f7fe f8fb 	bl	80056a0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80074b2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80074b4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80074b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80074ce:	2001      	movs	r0, #1
 80074d0:	f7fe f8e6 	bl	80056a0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80074dc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80074de:	2300      	movs	r3, #0
 80074e0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80074e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074e6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80074e8:	2300      	movs	r3, #0
 80074ea:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80074ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80074f0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80074f2:	2300      	movs	r3, #0
 80074f4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80074f6:	2300      	movs	r3, #0
 80074f8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80074fa:	2300      	movs	r3, #0
 80074fc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80074fe:	2300      	movs	r3, #0
 8007500:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8007502:	2304      	movs	r3, #4
 8007504:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8007506:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800750a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800750c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007510:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007512:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007516:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007518:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800751c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800751e:	2380      	movs	r3, #128	; 0x80
 8007520:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8007522:	2300      	movs	r3, #0
 8007524:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8007526:	2300      	movs	r3, #0
 8007528:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007532:	3318      	adds	r3, #24
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800753a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800753e:	4b3e      	ldr	r3, [pc, #248]	; (8007638 <ETH_MACDMAConfig+0x390>)
 8007540:	4013      	ands	r3, r2
 8007542:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8007546:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8007548:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800754a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800754c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800754e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8007550:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8007552:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8007554:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8007556:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8007558:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800755a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800755c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800755e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8007562:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8007564:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8007566:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8007568:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800756c:	4313      	orrs	r3, r2
 800756e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800757a:	3318      	adds	r3, #24
 800757c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007580:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800758a:	3318      	adds	r3, #24
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007592:	2001      	movs	r0, #1
 8007594:	f7fe f884 	bl	80056a0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075a0:	3318      	adds	r3, #24
 80075a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80075a6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80075a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80075aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80075ac:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80075ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80075b0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80075b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80075b4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80075b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80075b8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80075ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075bc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80075be:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80075c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80075c2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80075cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075d0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80075e0:	2001      	movs	r0, #1
 80075e2:	f7fe f85d 	bl	80056a0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80075f2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d10f      	bne.n	800761c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007604:	331c      	adds	r3, #28
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007618:	331c      	adds	r3, #28
 800761a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	695b      	ldr	r3, [r3, #20]
 8007620:	461a      	mov	r2, r3
 8007622:	2100      	movs	r1, #0
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f809 	bl	800763c <ETH_MACAddressConfig>
}
 800762a:	bf00      	nop
 800762c:	37c0      	adds	r7, #192	; 0xc0
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	ff20810f 	.word	0xff20810f
 8007638:	f8de3f23 	.word	0xf8de3f23

0800763c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	3305      	adds	r3, #5
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	021b      	lsls	r3, r3, #8
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	3204      	adds	r2, #4
 8007654:	7812      	ldrb	r2, [r2, #0]
 8007656:	4313      	orrs	r3, r2
 8007658:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	4b11      	ldr	r3, [pc, #68]	; (80076a4 <ETH_MACAddressConfig+0x68>)
 800765e:	4413      	add	r3, r2
 8007660:	461a      	mov	r2, r3
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3303      	adds	r3, #3
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	061a      	lsls	r2, r3, #24
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	3302      	adds	r3, #2
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	041b      	lsls	r3, r3, #16
 8007676:	431a      	orrs	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	3301      	adds	r3, #1
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	021b      	lsls	r3, r3, #8
 8007680:	4313      	orrs	r3, r2
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	7812      	ldrb	r2, [r2, #0]
 8007686:	4313      	orrs	r3, r2
 8007688:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	4b06      	ldr	r3, [pc, #24]	; (80076a8 <ETH_MACAddressConfig+0x6c>)
 800768e:	4413      	add	r3, r2
 8007690:	461a      	mov	r2, r3
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	6013      	str	r3, [r2, #0]
}
 8007696:	bf00      	nop
 8007698:	371c      	adds	r7, #28
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	40028040 	.word	0x40028040
 80076a8:	40028044 	.word	0x40028044

080076ac <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0208 	orr.w	r2, r2, #8
 80076c6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80076d0:	2001      	movs	r0, #1
 80076d2:	f000 f8e9 	bl	80078a8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	601a      	str	r2, [r3, #0]
}
 80076de:	bf00      	nop
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b084      	sub	sp, #16
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 0208 	bic.w	r2, r2, #8
 8007700:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800770a:	2001      	movs	r0, #1
 800770c:	f000 f8cc 	bl	80078a8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	601a      	str	r2, [r3, #0]
}
 8007718:	bf00      	nop
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f042 0204 	orr.w	r2, r2, #4
 800773a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8007744:	2001      	movs	r0, #1
 8007746:	f000 f8af 	bl	80078a8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	601a      	str	r2, [r3, #0]
}
 8007752:	bf00      	nop
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800775a:	b580      	push	{r7, lr}
 800775c:	b084      	sub	sp, #16
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8007762:	2300      	movs	r3, #0
 8007764:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f022 0204 	bic.w	r2, r2, #4
 8007774:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800777e:	2001      	movs	r0, #1
 8007780:	f000 f892 	bl	80078a8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	601a      	str	r2, [r3, #0]
}
 800778c:	bf00      	nop
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077a4:	3318      	adds	r3, #24
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077b4:	3318      	adds	r3, #24
 80077b6:	601a      	str	r2, [r3, #0]
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077d4:	3318      	adds	r3, #24
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077e4:	3318      	adds	r3, #24
 80077e6:	601a      	str	r2, [r3, #0]
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007804:	3318      	adds	r3, #24
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f042 0202 	orr.w	r2, r2, #2
 8007810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007814:	3318      	adds	r3, #24
 8007816:	601a      	str	r2, [r3, #0]
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007834:	3318      	adds	r3, #24
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f022 0202 	bic.w	r2, r2, #2
 8007840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007844:	3318      	adds	r3, #24
 8007846:	601a      	str	r2, [r3, #0]
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800785c:	2300      	movs	r3, #0
 800785e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007868:	3318      	adds	r3, #24
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007878:	3318      	adds	r3, #24
 800787a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007884:	3318      	adds	r3, #24
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800788a:	2001      	movs	r0, #1
 800788c:	f000 f80c 	bl	80078a8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800789a:	3318      	adds	r3, #24
 800789c:	601a      	str	r2, [r3, #0]
}
 800789e:	bf00      	nop
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
	...

080078a8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80078b0:	4b0b      	ldr	r3, [pc, #44]	; (80078e0 <ETH_Delay+0x38>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a0b      	ldr	r2, [pc, #44]	; (80078e4 <ETH_Delay+0x3c>)
 80078b6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ba:	0a5b      	lsrs	r3, r3, #9
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	fb02 f303 	mul.w	r3, r2, r3
 80078c2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80078c4:	bf00      	nop
  } 
  while (Delay --);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	1e5a      	subs	r2, r3, #1
 80078ca:	60fa      	str	r2, [r7, #12]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1f9      	bne.n	80078c4 <ETH_Delay+0x1c>
}
 80078d0:	bf00      	nop
 80078d2:	bf00      	nop
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	2000005c 	.word	0x2000005c
 80078e4:	10624dd3 	.word	0x10624dd3

080078e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b089      	sub	sp, #36	; 0x24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80078f2:	2300      	movs	r3, #0
 80078f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80078fa:	2300      	movs	r3, #0
 80078fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80078fe:	2300      	movs	r3, #0
 8007900:	61fb      	str	r3, [r7, #28]
 8007902:	e16b      	b.n	8007bdc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007904:	2201      	movs	r2, #1
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	fa02 f303 	lsl.w	r3, r2, r3
 800790c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	4013      	ands	r3, r2
 8007916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	429a      	cmp	r2, r3
 800791e:	f040 815a 	bne.w	8007bd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d00b      	beq.n	8007942 <HAL_GPIO_Init+0x5a>
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	2b02      	cmp	r3, #2
 8007930:	d007      	beq.n	8007942 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007936:	2b11      	cmp	r3, #17
 8007938:	d003      	beq.n	8007942 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	2b12      	cmp	r3, #18
 8007940:	d130      	bne.n	80079a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	005b      	lsls	r3, r3, #1
 800794c:	2203      	movs	r2, #3
 800794e:	fa02 f303 	lsl.w	r3, r2, r3
 8007952:	43db      	mvns	r3, r3
 8007954:	69ba      	ldr	r2, [r7, #24]
 8007956:	4013      	ands	r3, r2
 8007958:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68da      	ldr	r2, [r3, #12]
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	005b      	lsls	r3, r3, #1
 8007962:	fa02 f303 	lsl.w	r3, r2, r3
 8007966:	69ba      	ldr	r2, [r7, #24]
 8007968:	4313      	orrs	r3, r2
 800796a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	69ba      	ldr	r2, [r7, #24]
 8007970:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007978:	2201      	movs	r2, #1
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	fa02 f303 	lsl.w	r3, r2, r3
 8007980:	43db      	mvns	r3, r3
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	4013      	ands	r3, r2
 8007986:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	091b      	lsrs	r3, r3, #4
 800798e:	f003 0201 	and.w	r2, r3, #1
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	fa02 f303 	lsl.w	r3, r2, r3
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	4313      	orrs	r3, r2
 800799c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	005b      	lsls	r3, r3, #1
 80079ae:	2203      	movs	r2, #3
 80079b0:	fa02 f303 	lsl.w	r3, r2, r3
 80079b4:	43db      	mvns	r3, r3
 80079b6:	69ba      	ldr	r2, [r7, #24]
 80079b8:	4013      	ands	r3, r2
 80079ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	689a      	ldr	r2, [r3, #8]
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	fa02 f303 	lsl.w	r3, r2, r3
 80079c8:	69ba      	ldr	r2, [r7, #24]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	69ba      	ldr	r2, [r7, #24]
 80079d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d003      	beq.n	80079e4 <HAL_GPIO_Init+0xfc>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	2b12      	cmp	r3, #18
 80079e2:	d123      	bne.n	8007a2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	08da      	lsrs	r2, r3, #3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3208      	adds	r2, #8
 80079ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	f003 0307 	and.w	r3, r3, #7
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	220f      	movs	r2, #15
 80079fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007a00:	43db      	mvns	r3, r3
 8007a02:	69ba      	ldr	r2, [r7, #24]
 8007a04:	4013      	ands	r3, r2
 8007a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	691a      	ldr	r2, [r3, #16]
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	f003 0307 	and.w	r3, r3, #7
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	fa02 f303 	lsl.w	r3, r2, r3
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	08da      	lsrs	r2, r3, #3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	3208      	adds	r2, #8
 8007a26:	69b9      	ldr	r1, [r7, #24]
 8007a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	005b      	lsls	r3, r3, #1
 8007a36:	2203      	movs	r2, #3
 8007a38:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3c:	43db      	mvns	r3, r3
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	4013      	ands	r3, r2
 8007a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f003 0203 	and.w	r2, r3, #3
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	005b      	lsls	r3, r3, #1
 8007a50:	fa02 f303 	lsl.w	r3, r2, r3
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	69ba      	ldr	r2, [r7, #24]
 8007a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 80b4 	beq.w	8007bd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60fb      	str	r3, [r7, #12]
 8007a72:	4b60      	ldr	r3, [pc, #384]	; (8007bf4 <HAL_GPIO_Init+0x30c>)
 8007a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a76:	4a5f      	ldr	r2, [pc, #380]	; (8007bf4 <HAL_GPIO_Init+0x30c>)
 8007a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8007a7e:	4b5d      	ldr	r3, [pc, #372]	; (8007bf4 <HAL_GPIO_Init+0x30c>)
 8007a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a86:	60fb      	str	r3, [r7, #12]
 8007a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a8a:	4a5b      	ldr	r2, [pc, #364]	; (8007bf8 <HAL_GPIO_Init+0x310>)
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	089b      	lsrs	r3, r3, #2
 8007a90:	3302      	adds	r3, #2
 8007a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	f003 0303 	and.w	r3, r3, #3
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	220f      	movs	r2, #15
 8007aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa6:	43db      	mvns	r3, r3
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a52      	ldr	r2, [pc, #328]	; (8007bfc <HAL_GPIO_Init+0x314>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d02b      	beq.n	8007b0e <HAL_GPIO_Init+0x226>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a51      	ldr	r2, [pc, #324]	; (8007c00 <HAL_GPIO_Init+0x318>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d025      	beq.n	8007b0a <HAL_GPIO_Init+0x222>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a50      	ldr	r2, [pc, #320]	; (8007c04 <HAL_GPIO_Init+0x31c>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d01f      	beq.n	8007b06 <HAL_GPIO_Init+0x21e>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a4f      	ldr	r2, [pc, #316]	; (8007c08 <HAL_GPIO_Init+0x320>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d019      	beq.n	8007b02 <HAL_GPIO_Init+0x21a>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a4e      	ldr	r2, [pc, #312]	; (8007c0c <HAL_GPIO_Init+0x324>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d013      	beq.n	8007afe <HAL_GPIO_Init+0x216>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a4d      	ldr	r2, [pc, #308]	; (8007c10 <HAL_GPIO_Init+0x328>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d00d      	beq.n	8007afa <HAL_GPIO_Init+0x212>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a4c      	ldr	r2, [pc, #304]	; (8007c14 <HAL_GPIO_Init+0x32c>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d007      	beq.n	8007af6 <HAL_GPIO_Init+0x20e>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a4b      	ldr	r2, [pc, #300]	; (8007c18 <HAL_GPIO_Init+0x330>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d101      	bne.n	8007af2 <HAL_GPIO_Init+0x20a>
 8007aee:	2307      	movs	r3, #7
 8007af0:	e00e      	b.n	8007b10 <HAL_GPIO_Init+0x228>
 8007af2:	2308      	movs	r3, #8
 8007af4:	e00c      	b.n	8007b10 <HAL_GPIO_Init+0x228>
 8007af6:	2306      	movs	r3, #6
 8007af8:	e00a      	b.n	8007b10 <HAL_GPIO_Init+0x228>
 8007afa:	2305      	movs	r3, #5
 8007afc:	e008      	b.n	8007b10 <HAL_GPIO_Init+0x228>
 8007afe:	2304      	movs	r3, #4
 8007b00:	e006      	b.n	8007b10 <HAL_GPIO_Init+0x228>
 8007b02:	2303      	movs	r3, #3
 8007b04:	e004      	b.n	8007b10 <HAL_GPIO_Init+0x228>
 8007b06:	2302      	movs	r3, #2
 8007b08:	e002      	b.n	8007b10 <HAL_GPIO_Init+0x228>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e000      	b.n	8007b10 <HAL_GPIO_Init+0x228>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	69fa      	ldr	r2, [r7, #28]
 8007b12:	f002 0203 	and.w	r2, r2, #3
 8007b16:	0092      	lsls	r2, r2, #2
 8007b18:	4093      	lsls	r3, r2
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b20:	4935      	ldr	r1, [pc, #212]	; (8007bf8 <HAL_GPIO_Init+0x310>)
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	089b      	lsrs	r3, r3, #2
 8007b26:	3302      	adds	r3, #2
 8007b28:	69ba      	ldr	r2, [r7, #24]
 8007b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007b2e:	4b3b      	ldr	r3, [pc, #236]	; (8007c1c <HAL_GPIO_Init+0x334>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	43db      	mvns	r3, r3
 8007b38:	69ba      	ldr	r2, [r7, #24]
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d003      	beq.n	8007b52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007b4a:	69ba      	ldr	r2, [r7, #24]
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007b52:	4a32      	ldr	r2, [pc, #200]	; (8007c1c <HAL_GPIO_Init+0x334>)
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007b58:	4b30      	ldr	r3, [pc, #192]	; (8007c1c <HAL_GPIO_Init+0x334>)
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	43db      	mvns	r3, r3
 8007b62:	69ba      	ldr	r2, [r7, #24]
 8007b64:	4013      	ands	r3, r2
 8007b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d003      	beq.n	8007b7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007b7c:	4a27      	ldr	r2, [pc, #156]	; (8007c1c <HAL_GPIO_Init+0x334>)
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007b82:	4b26      	ldr	r3, [pc, #152]	; (8007c1c <HAL_GPIO_Init+0x334>)
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	43db      	mvns	r3, r3
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	4013      	ands	r3, r2
 8007b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d003      	beq.n	8007ba6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007ba6:	4a1d      	ldr	r2, [pc, #116]	; (8007c1c <HAL_GPIO_Init+0x334>)
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007bac:	4b1b      	ldr	r3, [pc, #108]	; (8007c1c <HAL_GPIO_Init+0x334>)
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	43db      	mvns	r3, r3
 8007bb6:	69ba      	ldr	r2, [r7, #24]
 8007bb8:	4013      	ands	r3, r2
 8007bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d003      	beq.n	8007bd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007bc8:	69ba      	ldr	r2, [r7, #24]
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007bd0:	4a12      	ldr	r2, [pc, #72]	; (8007c1c <HAL_GPIO_Init+0x334>)
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	61fb      	str	r3, [r7, #28]
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	2b0f      	cmp	r3, #15
 8007be0:	f67f ae90 	bls.w	8007904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007be4:	bf00      	nop
 8007be6:	bf00      	nop
 8007be8:	3724      	adds	r7, #36	; 0x24
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	40023800 	.word	0x40023800
 8007bf8:	40013800 	.word	0x40013800
 8007bfc:	40020000 	.word	0x40020000
 8007c00:	40020400 	.word	0x40020400
 8007c04:	40020800 	.word	0x40020800
 8007c08:	40020c00 	.word	0x40020c00
 8007c0c:	40021000 	.word	0x40021000
 8007c10:	40021400 	.word	0x40021400
 8007c14:	40021800 	.word	0x40021800
 8007c18:	40021c00 	.word	0x40021c00
 8007c1c:	40013c00 	.word	0x40013c00

08007c20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	691a      	ldr	r2, [r3, #16]
 8007c30:	887b      	ldrh	r3, [r7, #2]
 8007c32:	4013      	ands	r3, r2
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	73fb      	strb	r3, [r7, #15]
 8007c3c:	e001      	b.n	8007c42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	807b      	strh	r3, [r7, #2]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007c60:	787b      	ldrb	r3, [r7, #1]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d003      	beq.n	8007c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c66:	887a      	ldrh	r2, [r7, #2]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007c6c:	e003      	b.n	8007c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007c6e:	887b      	ldrh	r3, [r7, #2]
 8007c70:	041a      	lsls	r2, r3, #16
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	619a      	str	r2, [r3, #24]
}
 8007c76:	bf00      	nop
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
	...

08007c84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007c8e:	4b08      	ldr	r3, [pc, #32]	; (8007cb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c90:	695a      	ldr	r2, [r3, #20]
 8007c92:	88fb      	ldrh	r3, [r7, #6]
 8007c94:	4013      	ands	r3, r2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d006      	beq.n	8007ca8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c9a:	4a05      	ldr	r2, [pc, #20]	; (8007cb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c9c:	88fb      	ldrh	r3, [r7, #6]
 8007c9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007ca0:	88fb      	ldrh	r3, [r7, #6]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fb feda 	bl	8003a5c <HAL_GPIO_EXTI_Callback>
  }
}
 8007ca8:	bf00      	nop
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	40013c00 	.word	0x40013c00

08007cb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e25b      	b.n	800817e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d075      	beq.n	8007dbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cd2:	4ba3      	ldr	r3, [pc, #652]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f003 030c 	and.w	r3, r3, #12
 8007cda:	2b04      	cmp	r3, #4
 8007cdc:	d00c      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cde:	4ba0      	ldr	r3, [pc, #640]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ce6:	2b08      	cmp	r3, #8
 8007ce8:	d112      	bne.n	8007d10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cea:	4b9d      	ldr	r3, [pc, #628]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cf6:	d10b      	bne.n	8007d10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cf8:	4b99      	ldr	r3, [pc, #612]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d05b      	beq.n	8007dbc <HAL_RCC_OscConfig+0x108>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d157      	bne.n	8007dbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e236      	b.n	800817e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d18:	d106      	bne.n	8007d28 <HAL_RCC_OscConfig+0x74>
 8007d1a:	4b91      	ldr	r3, [pc, #580]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a90      	ldr	r2, [pc, #576]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	e01d      	b.n	8007d64 <HAL_RCC_OscConfig+0xb0>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d30:	d10c      	bne.n	8007d4c <HAL_RCC_OscConfig+0x98>
 8007d32:	4b8b      	ldr	r3, [pc, #556]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a8a      	ldr	r2, [pc, #552]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	4b88      	ldr	r3, [pc, #544]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a87      	ldr	r2, [pc, #540]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d48:	6013      	str	r3, [r2, #0]
 8007d4a:	e00b      	b.n	8007d64 <HAL_RCC_OscConfig+0xb0>
 8007d4c:	4b84      	ldr	r3, [pc, #528]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a83      	ldr	r2, [pc, #524]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d56:	6013      	str	r3, [r2, #0]
 8007d58:	4b81      	ldr	r3, [pc, #516]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a80      	ldr	r2, [pc, #512]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d013      	beq.n	8007d94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d6c:	f7fd fc8c 	bl	8005688 <HAL_GetTick>
 8007d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d72:	e008      	b.n	8007d86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d74:	f7fd fc88 	bl	8005688 <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	2b64      	cmp	r3, #100	; 0x64
 8007d80:	d901      	bls.n	8007d86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e1fb      	b.n	800817e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d86:	4b76      	ldr	r3, [pc, #472]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d0f0      	beq.n	8007d74 <HAL_RCC_OscConfig+0xc0>
 8007d92:	e014      	b.n	8007dbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d94:	f7fd fc78 	bl	8005688 <HAL_GetTick>
 8007d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d9a:	e008      	b.n	8007dae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d9c:	f7fd fc74 	bl	8005688 <HAL_GetTick>
 8007da0:	4602      	mov	r2, r0
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	2b64      	cmp	r3, #100	; 0x64
 8007da8:	d901      	bls.n	8007dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e1e7      	b.n	800817e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dae:	4b6c      	ldr	r3, [pc, #432]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1f0      	bne.n	8007d9c <HAL_RCC_OscConfig+0xe8>
 8007dba:	e000      	b.n	8007dbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d063      	beq.n	8007e92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dca:	4b65      	ldr	r3, [pc, #404]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f003 030c 	and.w	r3, r3, #12
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00b      	beq.n	8007dee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dd6:	4b62      	ldr	r3, [pc, #392]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dde:	2b08      	cmp	r3, #8
 8007de0:	d11c      	bne.n	8007e1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007de2:	4b5f      	ldr	r3, [pc, #380]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d116      	bne.n	8007e1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dee:	4b5c      	ldr	r3, [pc, #368]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d005      	beq.n	8007e06 <HAL_RCC_OscConfig+0x152>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d001      	beq.n	8007e06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e1bb      	b.n	800817e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e06:	4b56      	ldr	r3, [pc, #344]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	00db      	lsls	r3, r3, #3
 8007e14:	4952      	ldr	r1, [pc, #328]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e1a:	e03a      	b.n	8007e92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d020      	beq.n	8007e66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e24:	4b4f      	ldr	r3, [pc, #316]	; (8007f64 <HAL_RCC_OscConfig+0x2b0>)
 8007e26:	2201      	movs	r2, #1
 8007e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e2a:	f7fd fc2d 	bl	8005688 <HAL_GetTick>
 8007e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e30:	e008      	b.n	8007e44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e32:	f7fd fc29 	bl	8005688 <HAL_GetTick>
 8007e36:	4602      	mov	r2, r0
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d901      	bls.n	8007e44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e19c      	b.n	800817e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e44:	4b46      	ldr	r3, [pc, #280]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0302 	and.w	r3, r3, #2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d0f0      	beq.n	8007e32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e50:	4b43      	ldr	r3, [pc, #268]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	00db      	lsls	r3, r3, #3
 8007e5e:	4940      	ldr	r1, [pc, #256]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	600b      	str	r3, [r1, #0]
 8007e64:	e015      	b.n	8007e92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e66:	4b3f      	ldr	r3, [pc, #252]	; (8007f64 <HAL_RCC_OscConfig+0x2b0>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e6c:	f7fd fc0c 	bl	8005688 <HAL_GetTick>
 8007e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e72:	e008      	b.n	8007e86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e74:	f7fd fc08 	bl	8005688 <HAL_GetTick>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d901      	bls.n	8007e86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e17b      	b.n	800817e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e86:	4b36      	ldr	r3, [pc, #216]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0302 	and.w	r3, r3, #2
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1f0      	bne.n	8007e74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0308 	and.w	r3, r3, #8
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d030      	beq.n	8007f00 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d016      	beq.n	8007ed4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ea6:	4b30      	ldr	r3, [pc, #192]	; (8007f68 <HAL_RCC_OscConfig+0x2b4>)
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eac:	f7fd fbec 	bl	8005688 <HAL_GetTick>
 8007eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eb2:	e008      	b.n	8007ec6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007eb4:	f7fd fbe8 	bl	8005688 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d901      	bls.n	8007ec6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e15b      	b.n	800817e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ec6:	4b26      	ldr	r3, [pc, #152]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eca:	f003 0302 	and.w	r3, r3, #2
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d0f0      	beq.n	8007eb4 <HAL_RCC_OscConfig+0x200>
 8007ed2:	e015      	b.n	8007f00 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ed4:	4b24      	ldr	r3, [pc, #144]	; (8007f68 <HAL_RCC_OscConfig+0x2b4>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eda:	f7fd fbd5 	bl	8005688 <HAL_GetTick>
 8007ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ee0:	e008      	b.n	8007ef4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ee2:	f7fd fbd1 	bl	8005688 <HAL_GetTick>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d901      	bls.n	8007ef4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e144      	b.n	800817e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ef4:	4b1a      	ldr	r3, [pc, #104]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ef8:	f003 0302 	and.w	r3, r3, #2
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1f0      	bne.n	8007ee2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0304 	and.w	r3, r3, #4
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 80a0 	beq.w	800804e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f12:	4b13      	ldr	r3, [pc, #76]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10f      	bne.n	8007f3e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60bb      	str	r3, [r7, #8]
 8007f22:	4b0f      	ldr	r3, [pc, #60]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f26:	4a0e      	ldr	r2, [pc, #56]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8007f2e:	4b0c      	ldr	r3, [pc, #48]	; (8007f60 <HAL_RCC_OscConfig+0x2ac>)
 8007f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f36:	60bb      	str	r3, [r7, #8]
 8007f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f3e:	4b0b      	ldr	r3, [pc, #44]	; (8007f6c <HAL_RCC_OscConfig+0x2b8>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d121      	bne.n	8007f8e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f4a:	4b08      	ldr	r3, [pc, #32]	; (8007f6c <HAL_RCC_OscConfig+0x2b8>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a07      	ldr	r2, [pc, #28]	; (8007f6c <HAL_RCC_OscConfig+0x2b8>)
 8007f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f56:	f7fd fb97 	bl	8005688 <HAL_GetTick>
 8007f5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f5c:	e011      	b.n	8007f82 <HAL_RCC_OscConfig+0x2ce>
 8007f5e:	bf00      	nop
 8007f60:	40023800 	.word	0x40023800
 8007f64:	42470000 	.word	0x42470000
 8007f68:	42470e80 	.word	0x42470e80
 8007f6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f70:	f7fd fb8a 	bl	8005688 <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d901      	bls.n	8007f82 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e0fd      	b.n	800817e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f82:	4b81      	ldr	r3, [pc, #516]	; (8008188 <HAL_RCC_OscConfig+0x4d4>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d0f0      	beq.n	8007f70 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d106      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x2f0>
 8007f96:	4b7d      	ldr	r3, [pc, #500]	; (800818c <HAL_RCC_OscConfig+0x4d8>)
 8007f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f9a:	4a7c      	ldr	r2, [pc, #496]	; (800818c <HAL_RCC_OscConfig+0x4d8>)
 8007f9c:	f043 0301 	orr.w	r3, r3, #1
 8007fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8007fa2:	e01c      	b.n	8007fde <HAL_RCC_OscConfig+0x32a>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	2b05      	cmp	r3, #5
 8007faa:	d10c      	bne.n	8007fc6 <HAL_RCC_OscConfig+0x312>
 8007fac:	4b77      	ldr	r3, [pc, #476]	; (800818c <HAL_RCC_OscConfig+0x4d8>)
 8007fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb0:	4a76      	ldr	r2, [pc, #472]	; (800818c <HAL_RCC_OscConfig+0x4d8>)
 8007fb2:	f043 0304 	orr.w	r3, r3, #4
 8007fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8007fb8:	4b74      	ldr	r3, [pc, #464]	; (800818c <HAL_RCC_OscConfig+0x4d8>)
 8007fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fbc:	4a73      	ldr	r2, [pc, #460]	; (800818c <HAL_RCC_OscConfig+0x4d8>)
 8007fbe:	f043 0301 	orr.w	r3, r3, #1
 8007fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8007fc4:	e00b      	b.n	8007fde <HAL_RCC_OscConfig+0x32a>
 8007fc6:	4b71      	ldr	r3, [pc, #452]	; (800818c <HAL_RCC_OscConfig+0x4d8>)
 8007fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fca:	4a70      	ldr	r2, [pc, #448]	; (800818c <HAL_RCC_OscConfig+0x4d8>)
 8007fcc:	f023 0301 	bic.w	r3, r3, #1
 8007fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8007fd2:	4b6e      	ldr	r3, [pc, #440]	; (800818c <HAL_RCC_OscConfig+0x4d8>)
 8007fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd6:	4a6d      	ldr	r2, [pc, #436]	; (800818c <HAL_RCC_OscConfig+0x4d8>)
 8007fd8:	f023 0304 	bic.w	r3, r3, #4
 8007fdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d015      	beq.n	8008012 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fe6:	f7fd fb4f 	bl	8005688 <HAL_GetTick>
 8007fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fec:	e00a      	b.n	8008004 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fee:	f7fd fb4b 	bl	8005688 <HAL_GetTick>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d901      	bls.n	8008004 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	e0bc      	b.n	800817e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008004:	4b61      	ldr	r3, [pc, #388]	; (800818c <HAL_RCC_OscConfig+0x4d8>)
 8008006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008008:	f003 0302 	and.w	r3, r3, #2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d0ee      	beq.n	8007fee <HAL_RCC_OscConfig+0x33a>
 8008010:	e014      	b.n	800803c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008012:	f7fd fb39 	bl	8005688 <HAL_GetTick>
 8008016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008018:	e00a      	b.n	8008030 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800801a:	f7fd fb35 	bl	8005688 <HAL_GetTick>
 800801e:	4602      	mov	r2, r0
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	f241 3288 	movw	r2, #5000	; 0x1388
 8008028:	4293      	cmp	r3, r2
 800802a:	d901      	bls.n	8008030 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e0a6      	b.n	800817e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008030:	4b56      	ldr	r3, [pc, #344]	; (800818c <HAL_RCC_OscConfig+0x4d8>)
 8008032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008034:	f003 0302 	and.w	r3, r3, #2
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1ee      	bne.n	800801a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800803c:	7dfb      	ldrb	r3, [r7, #23]
 800803e:	2b01      	cmp	r3, #1
 8008040:	d105      	bne.n	800804e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008042:	4b52      	ldr	r3, [pc, #328]	; (800818c <HAL_RCC_OscConfig+0x4d8>)
 8008044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008046:	4a51      	ldr	r2, [pc, #324]	; (800818c <HAL_RCC_OscConfig+0x4d8>)
 8008048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800804c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 8092 	beq.w	800817c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008058:	4b4c      	ldr	r3, [pc, #304]	; (800818c <HAL_RCC_OscConfig+0x4d8>)
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f003 030c 	and.w	r3, r3, #12
 8008060:	2b08      	cmp	r3, #8
 8008062:	d05c      	beq.n	800811e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	2b02      	cmp	r3, #2
 800806a:	d141      	bne.n	80080f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800806c:	4b48      	ldr	r3, [pc, #288]	; (8008190 <HAL_RCC_OscConfig+0x4dc>)
 800806e:	2200      	movs	r2, #0
 8008070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008072:	f7fd fb09 	bl	8005688 <HAL_GetTick>
 8008076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008078:	e008      	b.n	800808c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800807a:	f7fd fb05 	bl	8005688 <HAL_GetTick>
 800807e:	4602      	mov	r2, r0
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	2b02      	cmp	r3, #2
 8008086:	d901      	bls.n	800808c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e078      	b.n	800817e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800808c:	4b3f      	ldr	r3, [pc, #252]	; (800818c <HAL_RCC_OscConfig+0x4d8>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1f0      	bne.n	800807a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	69da      	ldr	r2, [r3, #28]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a1b      	ldr	r3, [r3, #32]
 80080a0:	431a      	orrs	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	019b      	lsls	r3, r3, #6
 80080a8:	431a      	orrs	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ae:	085b      	lsrs	r3, r3, #1
 80080b0:	3b01      	subs	r3, #1
 80080b2:	041b      	lsls	r3, r3, #16
 80080b4:	431a      	orrs	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ba:	061b      	lsls	r3, r3, #24
 80080bc:	4933      	ldr	r1, [pc, #204]	; (800818c <HAL_RCC_OscConfig+0x4d8>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080c2:	4b33      	ldr	r3, [pc, #204]	; (8008190 <HAL_RCC_OscConfig+0x4dc>)
 80080c4:	2201      	movs	r2, #1
 80080c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080c8:	f7fd fade 	bl	8005688 <HAL_GetTick>
 80080cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080ce:	e008      	b.n	80080e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080d0:	f7fd fada 	bl	8005688 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d901      	bls.n	80080e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e04d      	b.n	800817e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080e2:	4b2a      	ldr	r3, [pc, #168]	; (800818c <HAL_RCC_OscConfig+0x4d8>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d0f0      	beq.n	80080d0 <HAL_RCC_OscConfig+0x41c>
 80080ee:	e045      	b.n	800817c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080f0:	4b27      	ldr	r3, [pc, #156]	; (8008190 <HAL_RCC_OscConfig+0x4dc>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080f6:	f7fd fac7 	bl	8005688 <HAL_GetTick>
 80080fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080fc:	e008      	b.n	8008110 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080fe:	f7fd fac3 	bl	8005688 <HAL_GetTick>
 8008102:	4602      	mov	r2, r0
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	2b02      	cmp	r3, #2
 800810a:	d901      	bls.n	8008110 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e036      	b.n	800817e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008110:	4b1e      	ldr	r3, [pc, #120]	; (800818c <HAL_RCC_OscConfig+0x4d8>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1f0      	bne.n	80080fe <HAL_RCC_OscConfig+0x44a>
 800811c:	e02e      	b.n	800817c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d101      	bne.n	800812a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e029      	b.n	800817e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800812a:	4b18      	ldr	r3, [pc, #96]	; (800818c <HAL_RCC_OscConfig+0x4d8>)
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	429a      	cmp	r2, r3
 800813c:	d11c      	bne.n	8008178 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008148:	429a      	cmp	r2, r3
 800814a:	d115      	bne.n	8008178 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008152:	4013      	ands	r3, r2
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008158:	4293      	cmp	r3, r2
 800815a:	d10d      	bne.n	8008178 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008166:	429a      	cmp	r2, r3
 8008168:	d106      	bne.n	8008178 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008174:	429a      	cmp	r2, r3
 8008176:	d001      	beq.n	800817c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	e000      	b.n	800817e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3718      	adds	r7, #24
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	40007000 	.word	0x40007000
 800818c:	40023800 	.word	0x40023800
 8008190:	42470060 	.word	0x42470060

08008194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d101      	bne.n	80081a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e0cc      	b.n	8008342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081a8:	4b68      	ldr	r3, [pc, #416]	; (800834c <HAL_RCC_ClockConfig+0x1b8>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 030f 	and.w	r3, r3, #15
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d90c      	bls.n	80081d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081b6:	4b65      	ldr	r3, [pc, #404]	; (800834c <HAL_RCC_ClockConfig+0x1b8>)
 80081b8:	683a      	ldr	r2, [r7, #0]
 80081ba:	b2d2      	uxtb	r2, r2
 80081bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081be:	4b63      	ldr	r3, [pc, #396]	; (800834c <HAL_RCC_ClockConfig+0x1b8>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 030f 	and.w	r3, r3, #15
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d001      	beq.n	80081d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e0b8      	b.n	8008342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 0302 	and.w	r3, r3, #2
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d020      	beq.n	800821e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0304 	and.w	r3, r3, #4
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d005      	beq.n	80081f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081e8:	4b59      	ldr	r3, [pc, #356]	; (8008350 <HAL_RCC_ClockConfig+0x1bc>)
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	4a58      	ldr	r2, [pc, #352]	; (8008350 <HAL_RCC_ClockConfig+0x1bc>)
 80081ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80081f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 0308 	and.w	r3, r3, #8
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d005      	beq.n	800820c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008200:	4b53      	ldr	r3, [pc, #332]	; (8008350 <HAL_RCC_ClockConfig+0x1bc>)
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	4a52      	ldr	r2, [pc, #328]	; (8008350 <HAL_RCC_ClockConfig+0x1bc>)
 8008206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800820a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800820c:	4b50      	ldr	r3, [pc, #320]	; (8008350 <HAL_RCC_ClockConfig+0x1bc>)
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	494d      	ldr	r1, [pc, #308]	; (8008350 <HAL_RCC_ClockConfig+0x1bc>)
 800821a:	4313      	orrs	r3, r2
 800821c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	2b00      	cmp	r3, #0
 8008228:	d044      	beq.n	80082b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d107      	bne.n	8008242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008232:	4b47      	ldr	r3, [pc, #284]	; (8008350 <HAL_RCC_ClockConfig+0x1bc>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d119      	bne.n	8008272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e07f      	b.n	8008342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	2b02      	cmp	r3, #2
 8008248:	d003      	beq.n	8008252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800824e:	2b03      	cmp	r3, #3
 8008250:	d107      	bne.n	8008262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008252:	4b3f      	ldr	r3, [pc, #252]	; (8008350 <HAL_RCC_ClockConfig+0x1bc>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d109      	bne.n	8008272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e06f      	b.n	8008342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008262:	4b3b      	ldr	r3, [pc, #236]	; (8008350 <HAL_RCC_ClockConfig+0x1bc>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0302 	and.w	r3, r3, #2
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e067      	b.n	8008342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008272:	4b37      	ldr	r3, [pc, #220]	; (8008350 <HAL_RCC_ClockConfig+0x1bc>)
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f023 0203 	bic.w	r2, r3, #3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	4934      	ldr	r1, [pc, #208]	; (8008350 <HAL_RCC_ClockConfig+0x1bc>)
 8008280:	4313      	orrs	r3, r2
 8008282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008284:	f7fd fa00 	bl	8005688 <HAL_GetTick>
 8008288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800828a:	e00a      	b.n	80082a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800828c:	f7fd f9fc 	bl	8005688 <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	f241 3288 	movw	r2, #5000	; 0x1388
 800829a:	4293      	cmp	r3, r2
 800829c:	d901      	bls.n	80082a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800829e:	2303      	movs	r3, #3
 80082a0:	e04f      	b.n	8008342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082a2:	4b2b      	ldr	r3, [pc, #172]	; (8008350 <HAL_RCC_ClockConfig+0x1bc>)
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f003 020c 	and.w	r2, r3, #12
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d1eb      	bne.n	800828c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082b4:	4b25      	ldr	r3, [pc, #148]	; (800834c <HAL_RCC_ClockConfig+0x1b8>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 030f 	and.w	r3, r3, #15
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d20c      	bcs.n	80082dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082c2:	4b22      	ldr	r3, [pc, #136]	; (800834c <HAL_RCC_ClockConfig+0x1b8>)
 80082c4:	683a      	ldr	r2, [r7, #0]
 80082c6:	b2d2      	uxtb	r2, r2
 80082c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ca:	4b20      	ldr	r3, [pc, #128]	; (800834c <HAL_RCC_ClockConfig+0x1b8>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 030f 	and.w	r3, r3, #15
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d001      	beq.n	80082dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	e032      	b.n	8008342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0304 	and.w	r3, r3, #4
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d008      	beq.n	80082fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082e8:	4b19      	ldr	r3, [pc, #100]	; (8008350 <HAL_RCC_ClockConfig+0x1bc>)
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	4916      	ldr	r1, [pc, #88]	; (8008350 <HAL_RCC_ClockConfig+0x1bc>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0308 	and.w	r3, r3, #8
 8008302:	2b00      	cmp	r3, #0
 8008304:	d009      	beq.n	800831a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008306:	4b12      	ldr	r3, [pc, #72]	; (8008350 <HAL_RCC_ClockConfig+0x1bc>)
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	00db      	lsls	r3, r3, #3
 8008314:	490e      	ldr	r1, [pc, #56]	; (8008350 <HAL_RCC_ClockConfig+0x1bc>)
 8008316:	4313      	orrs	r3, r2
 8008318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800831a:	f000 f821 	bl	8008360 <HAL_RCC_GetSysClockFreq>
 800831e:	4602      	mov	r2, r0
 8008320:	4b0b      	ldr	r3, [pc, #44]	; (8008350 <HAL_RCC_ClockConfig+0x1bc>)
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	091b      	lsrs	r3, r3, #4
 8008326:	f003 030f 	and.w	r3, r3, #15
 800832a:	490a      	ldr	r1, [pc, #40]	; (8008354 <HAL_RCC_ClockConfig+0x1c0>)
 800832c:	5ccb      	ldrb	r3, [r1, r3]
 800832e:	fa22 f303 	lsr.w	r3, r2, r3
 8008332:	4a09      	ldr	r2, [pc, #36]	; (8008358 <HAL_RCC_ClockConfig+0x1c4>)
 8008334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008336:	4b09      	ldr	r3, [pc, #36]	; (800835c <HAL_RCC_ClockConfig+0x1c8>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4618      	mov	r0, r3
 800833c:	f7fc face 	bl	80048dc <HAL_InitTick>

  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	40023c00 	.word	0x40023c00
 8008350:	40023800 	.word	0x40023800
 8008354:	0801f9b8 	.word	0x0801f9b8
 8008358:	2000005c 	.word	0x2000005c
 800835c:	20000060 	.word	0x20000060

08008360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008360:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008368:	2300      	movs	r3, #0
 800836a:	607b      	str	r3, [r7, #4]
 800836c:	2300      	movs	r3, #0
 800836e:	60fb      	str	r3, [r7, #12]
 8008370:	2300      	movs	r3, #0
 8008372:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008374:	2300      	movs	r3, #0
 8008376:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008378:	4b67      	ldr	r3, [pc, #412]	; (8008518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f003 030c 	and.w	r3, r3, #12
 8008380:	2b08      	cmp	r3, #8
 8008382:	d00d      	beq.n	80083a0 <HAL_RCC_GetSysClockFreq+0x40>
 8008384:	2b08      	cmp	r3, #8
 8008386:	f200 80bd 	bhi.w	8008504 <HAL_RCC_GetSysClockFreq+0x1a4>
 800838a:	2b00      	cmp	r3, #0
 800838c:	d002      	beq.n	8008394 <HAL_RCC_GetSysClockFreq+0x34>
 800838e:	2b04      	cmp	r3, #4
 8008390:	d003      	beq.n	800839a <HAL_RCC_GetSysClockFreq+0x3a>
 8008392:	e0b7      	b.n	8008504 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008394:	4b61      	ldr	r3, [pc, #388]	; (800851c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008396:	60bb      	str	r3, [r7, #8]
       break;
 8008398:	e0b7      	b.n	800850a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800839a:	4b61      	ldr	r3, [pc, #388]	; (8008520 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800839c:	60bb      	str	r3, [r7, #8]
      break;
 800839e:	e0b4      	b.n	800850a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80083a0:	4b5d      	ldr	r3, [pc, #372]	; (8008518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80083aa:	4b5b      	ldr	r3, [pc, #364]	; (8008518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d04d      	beq.n	8008452 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083b6:	4b58      	ldr	r3, [pc, #352]	; (8008518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	099b      	lsrs	r3, r3, #6
 80083bc:	461a      	mov	r2, r3
 80083be:	f04f 0300 	mov.w	r3, #0
 80083c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80083c6:	f04f 0100 	mov.w	r1, #0
 80083ca:	ea02 0800 	and.w	r8, r2, r0
 80083ce:	ea03 0901 	and.w	r9, r3, r1
 80083d2:	4640      	mov	r0, r8
 80083d4:	4649      	mov	r1, r9
 80083d6:	f04f 0200 	mov.w	r2, #0
 80083da:	f04f 0300 	mov.w	r3, #0
 80083de:	014b      	lsls	r3, r1, #5
 80083e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80083e4:	0142      	lsls	r2, r0, #5
 80083e6:	4610      	mov	r0, r2
 80083e8:	4619      	mov	r1, r3
 80083ea:	ebb0 0008 	subs.w	r0, r0, r8
 80083ee:	eb61 0109 	sbc.w	r1, r1, r9
 80083f2:	f04f 0200 	mov.w	r2, #0
 80083f6:	f04f 0300 	mov.w	r3, #0
 80083fa:	018b      	lsls	r3, r1, #6
 80083fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008400:	0182      	lsls	r2, r0, #6
 8008402:	1a12      	subs	r2, r2, r0
 8008404:	eb63 0301 	sbc.w	r3, r3, r1
 8008408:	f04f 0000 	mov.w	r0, #0
 800840c:	f04f 0100 	mov.w	r1, #0
 8008410:	00d9      	lsls	r1, r3, #3
 8008412:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008416:	00d0      	lsls	r0, r2, #3
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	eb12 0208 	adds.w	r2, r2, r8
 8008420:	eb43 0309 	adc.w	r3, r3, r9
 8008424:	f04f 0000 	mov.w	r0, #0
 8008428:	f04f 0100 	mov.w	r1, #0
 800842c:	0259      	lsls	r1, r3, #9
 800842e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008432:	0250      	lsls	r0, r2, #9
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	4610      	mov	r0, r2
 800843a:	4619      	mov	r1, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	461a      	mov	r2, r3
 8008440:	f04f 0300 	mov.w	r3, #0
 8008444:	f7f8 fbe0 	bl	8000c08 <__aeabi_uldivmod>
 8008448:	4602      	mov	r2, r0
 800844a:	460b      	mov	r3, r1
 800844c:	4613      	mov	r3, r2
 800844e:	60fb      	str	r3, [r7, #12]
 8008450:	e04a      	b.n	80084e8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008452:	4b31      	ldr	r3, [pc, #196]	; (8008518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	099b      	lsrs	r3, r3, #6
 8008458:	461a      	mov	r2, r3
 800845a:	f04f 0300 	mov.w	r3, #0
 800845e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008462:	f04f 0100 	mov.w	r1, #0
 8008466:	ea02 0400 	and.w	r4, r2, r0
 800846a:	ea03 0501 	and.w	r5, r3, r1
 800846e:	4620      	mov	r0, r4
 8008470:	4629      	mov	r1, r5
 8008472:	f04f 0200 	mov.w	r2, #0
 8008476:	f04f 0300 	mov.w	r3, #0
 800847a:	014b      	lsls	r3, r1, #5
 800847c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008480:	0142      	lsls	r2, r0, #5
 8008482:	4610      	mov	r0, r2
 8008484:	4619      	mov	r1, r3
 8008486:	1b00      	subs	r0, r0, r4
 8008488:	eb61 0105 	sbc.w	r1, r1, r5
 800848c:	f04f 0200 	mov.w	r2, #0
 8008490:	f04f 0300 	mov.w	r3, #0
 8008494:	018b      	lsls	r3, r1, #6
 8008496:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800849a:	0182      	lsls	r2, r0, #6
 800849c:	1a12      	subs	r2, r2, r0
 800849e:	eb63 0301 	sbc.w	r3, r3, r1
 80084a2:	f04f 0000 	mov.w	r0, #0
 80084a6:	f04f 0100 	mov.w	r1, #0
 80084aa:	00d9      	lsls	r1, r3, #3
 80084ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80084b0:	00d0      	lsls	r0, r2, #3
 80084b2:	4602      	mov	r2, r0
 80084b4:	460b      	mov	r3, r1
 80084b6:	1912      	adds	r2, r2, r4
 80084b8:	eb45 0303 	adc.w	r3, r5, r3
 80084bc:	f04f 0000 	mov.w	r0, #0
 80084c0:	f04f 0100 	mov.w	r1, #0
 80084c4:	0299      	lsls	r1, r3, #10
 80084c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80084ca:	0290      	lsls	r0, r2, #10
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	4610      	mov	r0, r2
 80084d2:	4619      	mov	r1, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	461a      	mov	r2, r3
 80084d8:	f04f 0300 	mov.w	r3, #0
 80084dc:	f7f8 fb94 	bl	8000c08 <__aeabi_uldivmod>
 80084e0:	4602      	mov	r2, r0
 80084e2:	460b      	mov	r3, r1
 80084e4:	4613      	mov	r3, r2
 80084e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80084e8:	4b0b      	ldr	r3, [pc, #44]	; (8008518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	0c1b      	lsrs	r3, r3, #16
 80084ee:	f003 0303 	and.w	r3, r3, #3
 80084f2:	3301      	adds	r3, #1
 80084f4:	005b      	lsls	r3, r3, #1
 80084f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008500:	60bb      	str	r3, [r7, #8]
      break;
 8008502:	e002      	b.n	800850a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008504:	4b05      	ldr	r3, [pc, #20]	; (800851c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008506:	60bb      	str	r3, [r7, #8]
      break;
 8008508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800850a:	68bb      	ldr	r3, [r7, #8]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008516:	bf00      	nop
 8008518:	40023800 	.word	0x40023800
 800851c:	00f42400 	.word	0x00f42400
 8008520:	007a1200 	.word	0x007a1200

08008524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008524:	b480      	push	{r7}
 8008526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008528:	4b03      	ldr	r3, [pc, #12]	; (8008538 <HAL_RCC_GetHCLKFreq+0x14>)
 800852a:	681b      	ldr	r3, [r3, #0]
}
 800852c:	4618      	mov	r0, r3
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	2000005c 	.word	0x2000005c

0800853c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008540:	f7ff fff0 	bl	8008524 <HAL_RCC_GetHCLKFreq>
 8008544:	4602      	mov	r2, r0
 8008546:	4b05      	ldr	r3, [pc, #20]	; (800855c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	0a9b      	lsrs	r3, r3, #10
 800854c:	f003 0307 	and.w	r3, r3, #7
 8008550:	4903      	ldr	r1, [pc, #12]	; (8008560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008552:	5ccb      	ldrb	r3, [r1, r3]
 8008554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008558:	4618      	mov	r0, r3
 800855a:	bd80      	pop	{r7, pc}
 800855c:	40023800 	.word	0x40023800
 8008560:	0801f9c8 	.word	0x0801f9c8

08008564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008568:	f7ff ffdc 	bl	8008524 <HAL_RCC_GetHCLKFreq>
 800856c:	4602      	mov	r2, r0
 800856e:	4b05      	ldr	r3, [pc, #20]	; (8008584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	0b5b      	lsrs	r3, r3, #13
 8008574:	f003 0307 	and.w	r3, r3, #7
 8008578:	4903      	ldr	r1, [pc, #12]	; (8008588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800857a:	5ccb      	ldrb	r3, [r1, r3]
 800857c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008580:	4618      	mov	r0, r3
 8008582:	bd80      	pop	{r7, pc}
 8008584:	40023800 	.word	0x40023800
 8008588:	0801f9c8 	.word	0x0801f9c8

0800858c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	220f      	movs	r2, #15
 800859a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800859c:	4b12      	ldr	r3, [pc, #72]	; (80085e8 <HAL_RCC_GetClockConfig+0x5c>)
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	f003 0203 	and.w	r2, r3, #3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80085a8:	4b0f      	ldr	r3, [pc, #60]	; (80085e8 <HAL_RCC_GetClockConfig+0x5c>)
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80085b4:	4b0c      	ldr	r3, [pc, #48]	; (80085e8 <HAL_RCC_GetClockConfig+0x5c>)
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80085c0:	4b09      	ldr	r3, [pc, #36]	; (80085e8 <HAL_RCC_GetClockConfig+0x5c>)
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	08db      	lsrs	r3, r3, #3
 80085c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80085ce:	4b07      	ldr	r3, [pc, #28]	; (80085ec <HAL_RCC_GetClockConfig+0x60>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 020f 	and.w	r2, r3, #15
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	601a      	str	r2, [r3, #0]
}
 80085da:	bf00      	nop
 80085dc:	370c      	adds	r7, #12
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	40023800 	.word	0x40023800
 80085ec:	40023c00 	.word	0x40023c00

080085f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80085f8:	2300      	movs	r3, #0
 80085fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0301 	and.w	r3, r3, #1
 8008608:	2b00      	cmp	r3, #0
 800860a:	d105      	bne.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008614:	2b00      	cmp	r3, #0
 8008616:	d035      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008618:	4b62      	ldr	r3, [pc, #392]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800861a:	2200      	movs	r2, #0
 800861c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800861e:	f7fd f833 	bl	8005688 <HAL_GetTick>
 8008622:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008624:	e008      	b.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008626:	f7fd f82f 	bl	8005688 <HAL_GetTick>
 800862a:	4602      	mov	r2, r0
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	2b02      	cmp	r3, #2
 8008632:	d901      	bls.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	e0b0      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008638:	4b5b      	ldr	r3, [pc, #364]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1f0      	bne.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	019a      	lsls	r2, r3, #6
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	071b      	lsls	r3, r3, #28
 8008650:	4955      	ldr	r1, [pc, #340]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008652:	4313      	orrs	r3, r2
 8008654:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008658:	4b52      	ldr	r3, [pc, #328]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800865a:	2201      	movs	r2, #1
 800865c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800865e:	f7fd f813 	bl	8005688 <HAL_GetTick>
 8008662:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008664:	e008      	b.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008666:	f7fd f80f 	bl	8005688 <HAL_GetTick>
 800866a:	4602      	mov	r2, r0
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	2b02      	cmp	r3, #2
 8008672:	d901      	bls.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e090      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008678:	4b4b      	ldr	r3, [pc, #300]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d0f0      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 0302 	and.w	r3, r3, #2
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 8083 	beq.w	8008798 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008692:	2300      	movs	r3, #0
 8008694:	60fb      	str	r3, [r7, #12]
 8008696:	4b44      	ldr	r3, [pc, #272]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869a:	4a43      	ldr	r2, [pc, #268]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800869c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086a0:	6413      	str	r3, [r2, #64]	; 0x40
 80086a2:	4b41      	ldr	r3, [pc, #260]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80086ae:	4b3f      	ldr	r3, [pc, #252]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a3e      	ldr	r2, [pc, #248]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80086b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80086ba:	f7fc ffe5 	bl	8005688 <HAL_GetTick>
 80086be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80086c0:	e008      	b.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80086c2:	f7fc ffe1 	bl	8005688 <HAL_GetTick>
 80086c6:	4602      	mov	r2, r0
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d901      	bls.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e062      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80086d4:	4b35      	ldr	r3, [pc, #212]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d0f0      	beq.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80086e0:	4b31      	ldr	r3, [pc, #196]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d02f      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d028      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086fe:	4b2a      	ldr	r3, [pc, #168]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008706:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008708:	4b29      	ldr	r3, [pc, #164]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800870a:	2201      	movs	r2, #1
 800870c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800870e:	4b28      	ldr	r3, [pc, #160]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008710:	2200      	movs	r2, #0
 8008712:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008714:	4a24      	ldr	r2, [pc, #144]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800871a:	4b23      	ldr	r3, [pc, #140]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800871c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	2b01      	cmp	r3, #1
 8008724:	d114      	bne.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008726:	f7fc ffaf 	bl	8005688 <HAL_GetTick>
 800872a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800872c:	e00a      	b.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800872e:	f7fc ffab 	bl	8005688 <HAL_GetTick>
 8008732:	4602      	mov	r2, r0
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	f241 3288 	movw	r2, #5000	; 0x1388
 800873c:	4293      	cmp	r3, r2
 800873e:	d901      	bls.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e02a      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008744:	4b18      	ldr	r3, [pc, #96]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008748:	f003 0302 	and.w	r3, r3, #2
 800874c:	2b00      	cmp	r3, #0
 800874e:	d0ee      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008758:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800875c:	d10d      	bne.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800875e:	4b12      	ldr	r3, [pc, #72]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800876e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008772:	490d      	ldr	r1, [pc, #52]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008774:	4313      	orrs	r3, r2
 8008776:	608b      	str	r3, [r1, #8]
 8008778:	e005      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800877a:	4b0b      	ldr	r3, [pc, #44]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	4a0a      	ldr	r2, [pc, #40]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008780:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008784:	6093      	str	r3, [r2, #8]
 8008786:	4b08      	ldr	r3, [pc, #32]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008788:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008792:	4905      	ldr	r1, [pc, #20]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008794:	4313      	orrs	r3, r2
 8008796:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3718      	adds	r7, #24
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	42470068 	.word	0x42470068
 80087a8:	40023800 	.word	0x40023800
 80087ac:	40007000 	.word	0x40007000
 80087b0:	42470e40 	.word	0x42470e40

080087b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d101      	bne.n	80087c6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e083      	b.n	80088ce <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	7f5b      	ldrb	r3, [r3, #29]
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d105      	bne.n	80087dc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f7fb fa26 	bl	8003c28 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2202      	movs	r2, #2
 80087e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	22ca      	movs	r2, #202	; 0xca
 80087e8:	625a      	str	r2, [r3, #36]	; 0x24
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2253      	movs	r2, #83	; 0x53
 80087f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f9fb 	bl	8008bee <RTC_EnterInitMode>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d008      	beq.n	8008810 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	22ff      	movs	r2, #255	; 0xff
 8008804:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2204      	movs	r2, #4
 800880a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	e05e      	b.n	80088ce <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	6812      	ldr	r2, [r2, #0]
 800881a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800881e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008822:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	6899      	ldr	r1, [r3, #8]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	431a      	orrs	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	695b      	ldr	r3, [r3, #20]
 8008838:	431a      	orrs	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	430a      	orrs	r2, r1
 8008840:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	68d2      	ldr	r2, [r2, #12]
 800884a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6919      	ldr	r1, [r3, #16]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	041a      	lsls	r2, r3, #16
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	430a      	orrs	r2, r1
 800885e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68da      	ldr	r2, [r3, #12]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800886e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f003 0320 	and.w	r3, r3, #32
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10e      	bne.n	800889c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f98d 	bl	8008b9e <HAL_RTC_WaitForSynchro>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d008      	beq.n	800889c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	22ff      	movs	r2, #255	; 0xff
 8008890:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2204      	movs	r2, #4
 8008896:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e018      	b.n	80088ce <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80088aa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	699a      	ldr	r2, [r3, #24]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	430a      	orrs	r2, r1
 80088bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	22ff      	movs	r2, #255	; 0xff
 80088c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80088cc:	2300      	movs	r3, #0
  }
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80088d6:	b590      	push	{r4, r7, lr}
 80088d8:	b087      	sub	sp, #28
 80088da:	af00      	add	r7, sp, #0
 80088dc:	60f8      	str	r0, [r7, #12]
 80088de:	60b9      	str	r1, [r7, #8]
 80088e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	7f1b      	ldrb	r3, [r3, #28]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d101      	bne.n	80088f2 <HAL_RTC_SetTime+0x1c>
 80088ee:	2302      	movs	r3, #2
 80088f0:	e0aa      	b.n	8008a48 <HAL_RTC_SetTime+0x172>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2201      	movs	r2, #1
 80088f6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2202      	movs	r2, #2
 80088fc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d126      	bne.n	8008952 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800890e:	2b00      	cmp	r3, #0
 8008910:	d102      	bne.n	8008918 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	2200      	movs	r2, #0
 8008916:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	4618      	mov	r0, r3
 800891e:	f000 f992 	bl	8008c46 <RTC_ByteToBcd2>
 8008922:	4603      	mov	r3, r0
 8008924:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	785b      	ldrb	r3, [r3, #1]
 800892a:	4618      	mov	r0, r3
 800892c:	f000 f98b 	bl	8008c46 <RTC_ByteToBcd2>
 8008930:	4603      	mov	r3, r0
 8008932:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008934:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	789b      	ldrb	r3, [r3, #2]
 800893a:	4618      	mov	r0, r3
 800893c:	f000 f983 	bl	8008c46 <RTC_ByteToBcd2>
 8008940:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008942:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	78db      	ldrb	r3, [r3, #3]
 800894a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800894c:	4313      	orrs	r3, r2
 800894e:	617b      	str	r3, [r7, #20]
 8008950:	e018      	b.n	8008984 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800895c:	2b00      	cmp	r3, #0
 800895e:	d102      	bne.n	8008966 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	2200      	movs	r2, #0
 8008964:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	785b      	ldrb	r3, [r3, #1]
 8008970:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008972:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008974:	68ba      	ldr	r2, [r7, #8]
 8008976:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008978:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	78db      	ldrb	r3, [r3, #3]
 800897e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008980:	4313      	orrs	r3, r2
 8008982:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	22ca      	movs	r2, #202	; 0xca
 800898a:	625a      	str	r2, [r3, #36]	; 0x24
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2253      	movs	r2, #83	; 0x53
 8008992:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f000 f92a 	bl	8008bee <RTC_EnterInitMode>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00b      	beq.n	80089b8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	22ff      	movs	r2, #255	; 0xff
 80089a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2204      	movs	r2, #4
 80089ac:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e047      	b.n	8008a48 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80089c2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80089c6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	689a      	ldr	r2, [r3, #8]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80089d6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6899      	ldr	r1, [r3, #8]
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	68da      	ldr	r2, [r3, #12]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	431a      	orrs	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	430a      	orrs	r2, r1
 80089ee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68da      	ldr	r2, [r3, #12]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089fe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	f003 0320 	and.w	r3, r3, #32
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d111      	bne.n	8008a32 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f000 f8c5 	bl	8008b9e <HAL_RTC_WaitForSynchro>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00b      	beq.n	8008a32 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	22ff      	movs	r2, #255	; 0xff
 8008a20:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2204      	movs	r2, #4
 8008a26:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e00a      	b.n	8008a48 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	22ff      	movs	r2, #255	; 0xff
 8008a38:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008a46:	2300      	movs	r3, #0
  }
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	371c      	adds	r7, #28
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd90      	pop	{r4, r7, pc}

08008a50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008a50:	b590      	push	{r4, r7, lr}
 8008a52:	b087      	sub	sp, #28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	7f1b      	ldrb	r3, [r3, #28]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d101      	bne.n	8008a6c <HAL_RTC_SetDate+0x1c>
 8008a68:	2302      	movs	r3, #2
 8008a6a:	e094      	b.n	8008b96 <HAL_RTC_SetDate+0x146>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2202      	movs	r2, #2
 8008a76:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10e      	bne.n	8008a9c <HAL_RTC_SetDate+0x4c>
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	785b      	ldrb	r3, [r3, #1]
 8008a82:	f003 0310 	and.w	r3, r3, #16
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d008      	beq.n	8008a9c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	785b      	ldrb	r3, [r3, #1]
 8008a8e:	f023 0310 	bic.w	r3, r3, #16
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	330a      	adds	r3, #10
 8008a96:	b2da      	uxtb	r2, r3
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d11c      	bne.n	8008adc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	78db      	ldrb	r3, [r3, #3]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f000 f8cd 	bl	8008c46 <RTC_ByteToBcd2>
 8008aac:	4603      	mov	r3, r0
 8008aae:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	785b      	ldrb	r3, [r3, #1]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 f8c6 	bl	8008c46 <RTC_ByteToBcd2>
 8008aba:	4603      	mov	r3, r0
 8008abc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008abe:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	789b      	ldrb	r3, [r3, #2]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 f8be 	bl	8008c46 <RTC_ByteToBcd2>
 8008aca:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008acc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	617b      	str	r3, [r7, #20]
 8008ada:	e00e      	b.n	8008afa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	78db      	ldrb	r3, [r3, #3]
 8008ae0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	785b      	ldrb	r3, [r3, #1]
 8008ae6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008ae8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008aee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008af6:	4313      	orrs	r3, r2
 8008af8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	22ca      	movs	r2, #202	; 0xca
 8008b00:	625a      	str	r2, [r3, #36]	; 0x24
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2253      	movs	r2, #83	; 0x53
 8008b08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f000 f86f 	bl	8008bee <RTC_EnterInitMode>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00b      	beq.n	8008b2e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	22ff      	movs	r2, #255	; 0xff
 8008b1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2204      	movs	r2, #4
 8008b22:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2200      	movs	r2, #0
 8008b28:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e033      	b.n	8008b96 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008b38:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008b3c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68da      	ldr	r2, [r3, #12]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b4c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	f003 0320 	and.w	r3, r3, #32
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d111      	bne.n	8008b80 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 f81e 	bl	8008b9e <HAL_RTC_WaitForSynchro>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00b      	beq.n	8008b80 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	22ff      	movs	r2, #255	; 0xff
 8008b6e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2204      	movs	r2, #4
 8008b74:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e00a      	b.n	8008b96 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	22ff      	movs	r2, #255	; 0xff
 8008b86:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008b94:	2300      	movs	r3, #0
  }
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	371c      	adds	r7, #28
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd90      	pop	{r4, r7, pc}

08008b9e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b084      	sub	sp, #16
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68da      	ldr	r2, [r3, #12]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008bb8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008bba:	f7fc fd65 	bl	8005688 <HAL_GetTick>
 8008bbe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008bc0:	e009      	b.n	8008bd6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008bc2:	f7fc fd61 	bl	8005688 <HAL_GetTick>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	1ad3      	subs	r3, r2, r3
 8008bcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bd0:	d901      	bls.n	8008bd6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	e007      	b.n	8008be6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	f003 0320 	and.w	r3, r3, #32
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d0ee      	beq.n	8008bc2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b084      	sub	sp, #16
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d119      	bne.n	8008c3c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c10:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c12:	f7fc fd39 	bl	8005688 <HAL_GetTick>
 8008c16:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008c18:	e009      	b.n	8008c2e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008c1a:	f7fc fd35 	bl	8005688 <HAL_GetTick>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c28:	d901      	bls.n	8008c2e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e007      	b.n	8008c3e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d0ee      	beq.n	8008c1a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b085      	sub	sp, #20
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008c50:	2300      	movs	r3, #0
 8008c52:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008c54:	e005      	b.n	8008c62 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008c5c:	79fb      	ldrb	r3, [r7, #7]
 8008c5e:	3b0a      	subs	r3, #10
 8008c60:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008c62:	79fb      	ldrb	r3, [r7, #7]
 8008c64:	2b09      	cmp	r3, #9
 8008c66:	d8f6      	bhi.n	8008c56 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	011b      	lsls	r3, r3, #4
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	79fb      	ldrb	r3, [r7, #7]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	b2db      	uxtb	r3, r3
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr

08008c82 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b082      	sub	sp, #8
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d101      	bne.n	8008c94 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e056      	b.n	8008d42 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d106      	bne.n	8008cb4 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f7fb f838 	bl	8003d24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2202      	movs	r2, #2
 8008cb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685a      	ldr	r2, [r3, #4]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	431a      	orrs	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	431a      	orrs	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	431a      	orrs	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	431a      	orrs	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cf0:	431a      	orrs	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	69db      	ldr	r3, [r3, #28]
 8008cf6:	431a      	orrs	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a1b      	ldr	r3, [r3, #32]
 8008cfc:	ea42 0103 	orr.w	r1, r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	0c1b      	lsrs	r3, r3, #16
 8008d12:	f003 0104 	and.w	r1, r3, #4
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	69da      	ldr	r2, [r3, #28]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
	...

08008d4c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b087      	sub	sp, #28
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
 8008d58:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d101      	bne.n	8008d6c <HAL_SPI_TransmitReceive_IT+0x20>
 8008d68:	2302      	movs	r3, #2
 8008d6a:	e075      	b.n	8008e58 <HAL_SPI_TransmitReceive_IT+0x10c>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d7a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d82:	7dbb      	ldrb	r3, [r7, #22]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d00d      	beq.n	8008da4 <HAL_SPI_TransmitReceive_IT+0x58>
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d8e:	d106      	bne.n	8008d9e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d102      	bne.n	8008d9e <HAL_SPI_TransmitReceive_IT+0x52>
 8008d98:	7dbb      	ldrb	r3, [r7, #22]
 8008d9a:	2b04      	cmp	r3, #4
 8008d9c:	d002      	beq.n	8008da4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8008d9e:	2302      	movs	r3, #2
 8008da0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008da2:	e054      	b.n	8008e4e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d005      	beq.n	8008db6 <HAL_SPI_TransmitReceive_IT+0x6a>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <HAL_SPI_TransmitReceive_IT+0x6a>
 8008db0:	887b      	ldrh	r3, [r7, #2]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d102      	bne.n	8008dbc <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008dba:	e048      	b.n	8008e4e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	2b04      	cmp	r3, #4
 8008dc6:	d003      	beq.n	8008dd0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2205      	movs	r2, #5
 8008dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	68ba      	ldr	r2, [r7, #8]
 8008dda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	887a      	ldrh	r2, [r7, #2]
 8008de0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	887a      	ldrh	r2, [r7, #2]
 8008de6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	887a      	ldrh	r2, [r7, #2]
 8008df2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	887a      	ldrh	r2, [r7, #2]
 8008df8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d006      	beq.n	8008e10 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	4a17      	ldr	r2, [pc, #92]	; (8008e64 <HAL_SPI_TransmitReceive_IT+0x118>)
 8008e06:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	4a17      	ldr	r2, [pc, #92]	; (8008e68 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8008e0c:	645a      	str	r2, [r3, #68]	; 0x44
 8008e0e:	e005      	b.n	8008e1c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	4a16      	ldr	r2, [pc, #88]	; (8008e6c <HAL_SPI_TransmitReceive_IT+0x120>)
 8008e14:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	4a15      	ldr	r2, [pc, #84]	; (8008e70 <HAL_SPI_TransmitReceive_IT+0x124>)
 8008e1a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8008e2a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e36:	2b40      	cmp	r3, #64	; 0x40
 8008e38:	d008      	beq.n	8008e4c <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e48:	601a      	str	r2, [r3, #0]
 8008e4a:	e000      	b.n	8008e4e <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8008e4c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	371c      	adds	r7, #28
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	08009189 	.word	0x08009189
 8008e68:	080091e9 	.word	0x080091e9
 8008e6c:	080090c5 	.word	0x080090c5
 8008e70:	08009129 	.word	0x08009129

08008e74 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b088      	sub	sp, #32
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	099b      	lsrs	r3, r3, #6
 8008e90:	f003 0301 	and.w	r3, r3, #1
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d10f      	bne.n	8008eb8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00a      	beq.n	8008eb8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	099b      	lsrs	r3, r3, #6
 8008ea6:	f003 0301 	and.w	r3, r3, #1
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d004      	beq.n	8008eb8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	4798      	blx	r3
    return;
 8008eb6:	e0d7      	b.n	8009068 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	085b      	lsrs	r3, r3, #1
 8008ebc:	f003 0301 	and.w	r3, r3, #1
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00a      	beq.n	8008eda <HAL_SPI_IRQHandler+0x66>
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	09db      	lsrs	r3, r3, #7
 8008ec8:	f003 0301 	and.w	r3, r3, #1
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d004      	beq.n	8008eda <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	4798      	blx	r3
    return;
 8008ed8:	e0c6      	b.n	8009068 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	095b      	lsrs	r3, r3, #5
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10c      	bne.n	8008f00 <HAL_SPI_IRQHandler+0x8c>
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	099b      	lsrs	r3, r3, #6
 8008eea:	f003 0301 	and.w	r3, r3, #1
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d106      	bne.n	8008f00 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	0a1b      	lsrs	r3, r3, #8
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 80b4 	beq.w	8009068 <HAL_SPI_IRQHandler+0x1f4>
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	095b      	lsrs	r3, r3, #5
 8008f04:	f003 0301 	and.w	r3, r3, #1
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f000 80ad 	beq.w	8009068 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	099b      	lsrs	r3, r3, #6
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d023      	beq.n	8008f62 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b03      	cmp	r3, #3
 8008f24:	d011      	beq.n	8008f4a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f2a:	f043 0204 	orr.w	r2, r3, #4
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f32:	2300      	movs	r3, #0
 8008f34:	617b      	str	r3, [r7, #20]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	617b      	str	r3, [r7, #20]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	617b      	str	r3, [r7, #20]
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	e00b      	b.n	8008f62 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	613b      	str	r3, [r7, #16]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	613b      	str	r3, [r7, #16]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	613b      	str	r3, [r7, #16]
 8008f5e:	693b      	ldr	r3, [r7, #16]
        return;
 8008f60:	e082      	b.n	8009068 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	095b      	lsrs	r3, r3, #5
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d014      	beq.n	8008f98 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f72:	f043 0201 	orr.w	r2, r3, #1
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	60fb      	str	r3, [r7, #12]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	60fb      	str	r3, [r7, #12]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	0a1b      	lsrs	r3, r3, #8
 8008f9c:	f003 0301 	and.w	r3, r3, #1
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00c      	beq.n	8008fbe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa8:	f043 0208 	orr.w	r2, r3, #8
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	60bb      	str	r3, [r7, #8]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	60bb      	str	r3, [r7, #8]
 8008fbc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d04f      	beq.n	8009066 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008fd4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	f003 0302 	and.w	r3, r3, #2
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d104      	bne.n	8008ff2 <HAL_SPI_IRQHandler+0x17e>
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d034      	beq.n	800905c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f022 0203 	bic.w	r2, r2, #3
 8009000:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009006:	2b00      	cmp	r3, #0
 8009008:	d011      	beq.n	800902e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800900e:	4a18      	ldr	r2, [pc, #96]	; (8009070 <HAL_SPI_IRQHandler+0x1fc>)
 8009010:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009016:	4618      	mov	r0, r3
 8009018:	f7fd f938 	bl	800628c <HAL_DMA_Abort_IT>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d005      	beq.n	800902e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009026:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009032:	2b00      	cmp	r3, #0
 8009034:	d016      	beq.n	8009064 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800903a:	4a0d      	ldr	r2, [pc, #52]	; (8009070 <HAL_SPI_IRQHandler+0x1fc>)
 800903c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009042:	4618      	mov	r0, r3
 8009044:	f7fd f922 	bl	800628c <HAL_DMA_Abort_IT>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00a      	beq.n	8009064 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009052:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800905a:	e003      	b.n	8009064 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f813 	bl	8009088 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009062:	e000      	b.n	8009066 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009064:	bf00      	nop
    return;
 8009066:	bf00      	nop
  }
}
 8009068:	3720      	adds	r7, #32
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	0800909d 	.word	0x0800909d

08009074 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009090:	bf00      	nop
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f7ff ffe6 	bl	8009088 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80090bc:	bf00      	nop
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f103 020c 	add.w	r2, r3, #12
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d8:	7812      	ldrb	r2, [r2, #0]
 80090da:	b2d2      	uxtb	r2, r2
 80090dc:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e2:	1c5a      	adds	r2, r3, #1
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	3b01      	subs	r3, #1
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10f      	bne.n	8009120 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	685a      	ldr	r2, [r3, #4]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800910e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009114:	b29b      	uxth	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d102      	bne.n	8009120 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f940 	bl	80093a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009120:	bf00      	nop
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	330c      	adds	r3, #12
 800913a:	7812      	ldrb	r2, [r2, #0]
 800913c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009142:	1c5a      	adds	r2, r3, #1
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800914c:	b29b      	uxth	r3, r3
 800914e:	3b01      	subs	r3, #1
 8009150:	b29a      	uxth	r2, r3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800915a:	b29b      	uxth	r3, r3
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10f      	bne.n	8009180 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	685a      	ldr	r2, [r3, #4]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800916e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009174:	b29b      	uxth	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d102      	bne.n	8009180 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f910 	bl	80093a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009180:	bf00      	nop
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	68da      	ldr	r2, [r3, #12]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800919a:	b292      	uxth	r2, r2
 800919c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a2:	1c9a      	adds	r2, r3, #2
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	3b01      	subs	r3, #1
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10f      	bne.n	80091e0 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	685a      	ldr	r2, [r3, #4]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091ce:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d102      	bne.n	80091e0 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f8e0 	bl	80093a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80091e0:	bf00      	nop
 80091e2:	3708      	adds	r7, #8
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f4:	881a      	ldrh	r2, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009200:	1c9a      	adds	r2, r3, #2
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800920a:	b29b      	uxth	r3, r3
 800920c:	3b01      	subs	r3, #1
 800920e:	b29a      	uxth	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009218:	b29b      	uxth	r3, r3
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10f      	bne.n	800923e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800922c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009232:	b29b      	uxth	r3, r3
 8009234:	2b00      	cmp	r3, #0
 8009236:	d102      	bne.n	800923e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f8b1 	bl	80093a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800923e:	bf00      	nop
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b084      	sub	sp, #16
 800924a:	af00      	add	r7, sp, #0
 800924c:	60f8      	str	r0, [r7, #12]
 800924e:	60b9      	str	r1, [r7, #8]
 8009250:	603b      	str	r3, [r7, #0]
 8009252:	4613      	mov	r3, r2
 8009254:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009256:	e04c      	b.n	80092f2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800925e:	d048      	beq.n	80092f2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009260:	f7fc fa12 	bl	8005688 <HAL_GetTick>
 8009264:	4602      	mov	r2, r0
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	429a      	cmp	r2, r3
 800926e:	d902      	bls.n	8009276 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d13d      	bne.n	80092f2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009284:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800928e:	d111      	bne.n	80092b4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009298:	d004      	beq.n	80092a4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092a2:	d107      	bne.n	80092b4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092bc:	d10f      	bne.n	80092de <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092cc:	601a      	str	r2, [r3, #0]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80092ee:	2303      	movs	r3, #3
 80092f0:	e00f      	b.n	8009312 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	689a      	ldr	r2, [r3, #8]
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	4013      	ands	r3, r2
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	429a      	cmp	r2, r3
 8009300:	bf0c      	ite	eq
 8009302:	2301      	moveq	r3, #1
 8009304:	2300      	movne	r3, #0
 8009306:	b2db      	uxtb	r3, r3
 8009308:	461a      	mov	r2, r3
 800930a:	79fb      	ldrb	r3, [r7, #7]
 800930c:	429a      	cmp	r2, r3
 800930e:	d1a3      	bne.n	8009258 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
	...

0800931c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b088      	sub	sp, #32
 8009320:	af02      	add	r7, sp, #8
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009328:	4b1b      	ldr	r3, [pc, #108]	; (8009398 <SPI_EndRxTxTransaction+0x7c>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a1b      	ldr	r2, [pc, #108]	; (800939c <SPI_EndRxTxTransaction+0x80>)
 800932e:	fba2 2303 	umull	r2, r3, r2, r3
 8009332:	0d5b      	lsrs	r3, r3, #21
 8009334:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009338:	fb02 f303 	mul.w	r3, r2, r3
 800933c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009346:	d112      	bne.n	800936e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	2200      	movs	r2, #0
 8009350:	2180      	movs	r1, #128	; 0x80
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f7ff ff77 	bl	8009246 <SPI_WaitFlagStateUntilTimeout>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d016      	beq.n	800938c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009362:	f043 0220 	orr.w	r2, r3, #32
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	e00f      	b.n	800938e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00a      	beq.n	800938a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	3b01      	subs	r3, #1
 8009378:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009384:	2b80      	cmp	r3, #128	; 0x80
 8009386:	d0f2      	beq.n	800936e <SPI_EndRxTxTransaction+0x52>
 8009388:	e000      	b.n	800938c <SPI_EndRxTxTransaction+0x70>
        break;
 800938a:	bf00      	nop
  }

  return HAL_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3718      	adds	r7, #24
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	2000005c 	.word	0x2000005c
 800939c:	165e9f81 	.word	0x165e9f81

080093a0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b086      	sub	sp, #24
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80093a8:	4b35      	ldr	r3, [pc, #212]	; (8009480 <SPI_CloseRxTx_ISR+0xe0>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a35      	ldr	r2, [pc, #212]	; (8009484 <SPI_CloseRxTx_ISR+0xe4>)
 80093ae:	fba2 2303 	umull	r2, r3, r2, r3
 80093b2:	0a5b      	lsrs	r3, r3, #9
 80093b4:	2264      	movs	r2, #100	; 0x64
 80093b6:	fb02 f303 	mul.w	r3, r2, r3
 80093ba:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80093bc:	f7fc f964 	bl	8005688 <HAL_GetTick>
 80093c0:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	685a      	ldr	r2, [r3, #4]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f022 0220 	bic.w	r2, r2, #32
 80093d0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d106      	bne.n	80093e6 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093dc:	f043 0220 	orr.w	r2, r3, #32
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80093e4:	e009      	b.n	80093fa <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	3b01      	subs	r3, #1
 80093ea:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	f003 0302 	and.w	r3, r3, #2
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d0eb      	beq.n	80093d2 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	2164      	movs	r1, #100	; 0x64
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7ff ff8c 	bl	800931c <SPI_EndRxTxTransaction>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d005      	beq.n	8009416 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800940e:	f043 0220 	orr.w	r2, r3, #32
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10a      	bne.n	8009434 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800941e:	2300      	movs	r3, #0
 8009420:	60fb      	str	r3, [r7, #12]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	60fb      	str	r3, [r7, #12]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	60fb      	str	r3, [r7, #12]
 8009432:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009438:	2b00      	cmp	r3, #0
 800943a:	d115      	bne.n	8009468 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009442:	b2db      	uxtb	r3, r3
 8009444:	2b04      	cmp	r3, #4
 8009446:	d107      	bne.n	8009458 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f7ff fe0f 	bl	8009074 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8009456:	e00e      	b.n	8009476 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7fa fb07 	bl	8003a74 <HAL_SPI_TxRxCpltCallback>
}
 8009466:	e006      	b.n	8009476 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7ff fe09 	bl	8009088 <HAL_SPI_ErrorCallback>
}
 8009476:	bf00      	nop
 8009478:	3718      	adds	r7, #24
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	2000005c 	.word	0x2000005c
 8009484:	057619f1 	.word	0x057619f1

08009488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d101      	bne.n	800949a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	e01d      	b.n	80094d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d106      	bne.n	80094b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f815 	bl	80094de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2202      	movs	r2, #2
 80094b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	3304      	adds	r3, #4
 80094c4:	4619      	mov	r1, r3
 80094c6:	4610      	mov	r0, r2
 80094c8:	f000 fcca 	bl	8009e60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80094de:	b480      	push	{r7}
 80094e0:	b083      	sub	sp, #12
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80094e6:	bf00      	nop
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr

080094f2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80094f2:	b480      	push	{r7}
 80094f4:	b085      	sub	sp, #20
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	68da      	ldr	r2, [r3, #12]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f042 0201 	orr.w	r2, r2, #1
 8009508:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	f003 0307 	and.w	r3, r3, #7
 8009514:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2b06      	cmp	r3, #6
 800951a:	d007      	beq.n	800952c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f042 0201 	orr.w	r2, r2, #1
 800952a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3714      	adds	r7, #20
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr

0800953a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b082      	sub	sp, #8
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d101      	bne.n	800954c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	e01d      	b.n	8009588 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2b00      	cmp	r3, #0
 8009556:	d106      	bne.n	8009566 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f7fb fe19 	bl	8005198 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2202      	movs	r2, #2
 800956a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	3304      	adds	r3, #4
 8009576:	4619      	mov	r1, r3
 8009578:	4610      	mov	r0, r2
 800957a:	f000 fc71 	bl	8009e60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2201      	movs	r2, #1
 8009582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2201      	movs	r2, #1
 80095a0:	6839      	ldr	r1, [r7, #0]
 80095a2:	4618      	mov	r0, r3
 80095a4:	f000 feac 	bl	800a300 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a15      	ldr	r2, [pc, #84]	; (8009604 <HAL_TIM_OC_Start+0x74>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d004      	beq.n	80095bc <HAL_TIM_OC_Start+0x2c>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a14      	ldr	r2, [pc, #80]	; (8009608 <HAL_TIM_OC_Start+0x78>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d101      	bne.n	80095c0 <HAL_TIM_OC_Start+0x30>
 80095bc:	2301      	movs	r3, #1
 80095be:	e000      	b.n	80095c2 <HAL_TIM_OC_Start+0x32>
 80095c0:	2300      	movs	r3, #0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d007      	beq.n	80095d6 <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80095d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	f003 0307 	and.w	r3, r3, #7
 80095e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2b06      	cmp	r3, #6
 80095e6:	d007      	beq.n	80095f8 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f042 0201 	orr.w	r2, r2, #1
 80095f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	40010000 	.word	0x40010000
 8009608:	40010400 	.word	0x40010400

0800960c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e01d      	b.n	800965a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009624:	b2db      	uxtb	r3, r3
 8009626:	2b00      	cmp	r3, #0
 8009628:	d106      	bne.n	8009638 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f7fb fcb0 	bl	8004f98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2202      	movs	r2, #2
 800963c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	3304      	adds	r3, #4
 8009648:	4619      	mov	r1, r3
 800964a:	4610      	mov	r0, r2
 800964c:	f000 fc08 	bl	8009e60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2201      	movs	r2, #1
 8009654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
	...

08009664 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b086      	sub	sp, #24
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
 8009670:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b02      	cmp	r3, #2
 800967c:	d101      	bne.n	8009682 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800967e:	2302      	movs	r3, #2
 8009680:	e0f3      	b.n	800986a <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b01      	cmp	r3, #1
 800968c:	d10b      	bne.n	80096a6 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d104      	bne.n	800969e <HAL_TIM_PWM_Start_DMA+0x3a>
 8009694:	887b      	ldrh	r3, [r7, #2]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d001      	beq.n	800969e <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e0e5      	b.n	800986a <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2202      	movs	r2, #2
 80096a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	2b0c      	cmp	r3, #12
 80096aa:	f200 80ad 	bhi.w	8009808 <HAL_TIM_PWM_Start_DMA+0x1a4>
 80096ae:	a201      	add	r2, pc, #4	; (adr r2, 80096b4 <HAL_TIM_PWM_Start_DMA+0x50>)
 80096b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b4:	080096e9 	.word	0x080096e9
 80096b8:	08009809 	.word	0x08009809
 80096bc:	08009809 	.word	0x08009809
 80096c0:	08009809 	.word	0x08009809
 80096c4:	08009731 	.word	0x08009731
 80096c8:	08009809 	.word	0x08009809
 80096cc:	08009809 	.word	0x08009809
 80096d0:	08009809 	.word	0x08009809
 80096d4:	08009779 	.word	0x08009779
 80096d8:	08009809 	.word	0x08009809
 80096dc:	08009809 	.word	0x08009809
 80096e0:	08009809 	.word	0x08009809
 80096e4:	080097c1 	.word	0x080097c1
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ec:	4a61      	ldr	r2, [pc, #388]	; (8009874 <HAL_TIM_PWM_Start_DMA+0x210>)
 80096ee:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f4:	4a60      	ldr	r2, [pc, #384]	; (8009878 <HAL_TIM_PWM_Start_DMA+0x214>)
 80096f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fc:	4a5f      	ldr	r2, [pc, #380]	; (800987c <HAL_TIM_PWM_Start_DMA+0x218>)
 80096fe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009704:	6879      	ldr	r1, [r7, #4]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	3334      	adds	r3, #52	; 0x34
 800970c:	461a      	mov	r2, r3
 800970e:	887b      	ldrh	r3, [r7, #2]
 8009710:	f7fc fd64 	bl	80061dc <HAL_DMA_Start_IT>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e0a5      	b.n	800986a <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68da      	ldr	r2, [r3, #12]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800972c:	60da      	str	r2, [r3, #12]
      break;
 800972e:	e06c      	b.n	800980a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009734:	4a4f      	ldr	r2, [pc, #316]	; (8009874 <HAL_TIM_PWM_Start_DMA+0x210>)
 8009736:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800973c:	4a4e      	ldr	r2, [pc, #312]	; (8009878 <HAL_TIM_PWM_Start_DMA+0x214>)
 800973e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009744:	4a4d      	ldr	r2, [pc, #308]	; (800987c <HAL_TIM_PWM_Start_DMA+0x218>)
 8009746:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800974c:	6879      	ldr	r1, [r7, #4]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	3338      	adds	r3, #56	; 0x38
 8009754:	461a      	mov	r2, r3
 8009756:	887b      	ldrh	r3, [r7, #2]
 8009758:	f7fc fd40 	bl	80061dc <HAL_DMA_Start_IT>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	e081      	b.n	800986a <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68da      	ldr	r2, [r3, #12]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009774:	60da      	str	r2, [r3, #12]
      break;
 8009776:	e048      	b.n	800980a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800977c:	4a3d      	ldr	r2, [pc, #244]	; (8009874 <HAL_TIM_PWM_Start_DMA+0x210>)
 800977e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009784:	4a3c      	ldr	r2, [pc, #240]	; (8009878 <HAL_TIM_PWM_Start_DMA+0x214>)
 8009786:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978c:	4a3b      	ldr	r2, [pc, #236]	; (800987c <HAL_TIM_PWM_Start_DMA+0x218>)
 800978e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009794:	6879      	ldr	r1, [r7, #4]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	333c      	adds	r3, #60	; 0x3c
 800979c:	461a      	mov	r2, r3
 800979e:	887b      	ldrh	r3, [r7, #2]
 80097a0:	f7fc fd1c 	bl	80061dc <HAL_DMA_Start_IT>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d001      	beq.n	80097ae <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	e05d      	b.n	800986a <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	68da      	ldr	r2, [r3, #12]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097bc:	60da      	str	r2, [r3, #12]
      break;
 80097be:	e024      	b.n	800980a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c4:	4a2b      	ldr	r2, [pc, #172]	; (8009874 <HAL_TIM_PWM_Start_DMA+0x210>)
 80097c6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097cc:	4a2a      	ldr	r2, [pc, #168]	; (8009878 <HAL_TIM_PWM_Start_DMA+0x214>)
 80097ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d4:	4a29      	ldr	r2, [pc, #164]	; (800987c <HAL_TIM_PWM_Start_DMA+0x218>)
 80097d6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80097dc:	6879      	ldr	r1, [r7, #4]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	3340      	adds	r3, #64	; 0x40
 80097e4:	461a      	mov	r2, r3
 80097e6:	887b      	ldrh	r3, [r7, #2]
 80097e8:	f7fc fcf8 	bl	80061dc <HAL_DMA_Start_IT>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d001      	beq.n	80097f6 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e039      	b.n	800986a <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68da      	ldr	r2, [r3, #12]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009804:	60da      	str	r2, [r3, #12]
      break;
 8009806:	e000      	b.n	800980a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8009808:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2201      	movs	r2, #1
 8009810:	68b9      	ldr	r1, [r7, #8]
 8009812:	4618      	mov	r0, r3
 8009814:	f000 fd74 	bl	800a300 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a18      	ldr	r2, [pc, #96]	; (8009880 <HAL_TIM_PWM_Start_DMA+0x21c>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d004      	beq.n	800982c <HAL_TIM_PWM_Start_DMA+0x1c8>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a17      	ldr	r2, [pc, #92]	; (8009884 <HAL_TIM_PWM_Start_DMA+0x220>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d101      	bne.n	8009830 <HAL_TIM_PWM_Start_DMA+0x1cc>
 800982c:	2301      	movs	r3, #1
 800982e:	e000      	b.n	8009832 <HAL_TIM_PWM_Start_DMA+0x1ce>
 8009830:	2300      	movs	r3, #0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d007      	beq.n	8009846 <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009844:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	f003 0307 	and.w	r3, r3, #7
 8009850:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	2b06      	cmp	r3, #6
 8009856:	d007      	beq.n	8009868 <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f042 0201 	orr.w	r2, r2, #1
 8009866:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3718      	adds	r7, #24
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	08009d81 	.word	0x08009d81
 8009878:	08009df1 	.word	0x08009df1
 800987c:	08009d5d 	.word	0x08009d5d
 8009880:	40010000 	.word	0x40010000
 8009884:	40010400 	.word	0x40010400

08009888 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	f003 0302 	and.w	r3, r3, #2
 800989a:	2b02      	cmp	r3, #2
 800989c:	d122      	bne.n	80098e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	f003 0302 	and.w	r3, r3, #2
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d11b      	bne.n	80098e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f06f 0202 	mvn.w	r2, #2
 80098b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	f003 0303 	and.w	r3, r3, #3
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fa14 	bl	8009cf8 <HAL_TIM_IC_CaptureCallback>
 80098d0:	e005      	b.n	80098de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fa06 	bl	8009ce4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fa17 	bl	8009d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	f003 0304 	and.w	r3, r3, #4
 80098ee:	2b04      	cmp	r3, #4
 80098f0:	d122      	bne.n	8009938 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	f003 0304 	and.w	r3, r3, #4
 80098fc:	2b04      	cmp	r3, #4
 80098fe:	d11b      	bne.n	8009938 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f06f 0204 	mvn.w	r2, #4
 8009908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2202      	movs	r2, #2
 800990e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	699b      	ldr	r3, [r3, #24]
 8009916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800991a:	2b00      	cmp	r3, #0
 800991c:	d003      	beq.n	8009926 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f9ea 	bl	8009cf8 <HAL_TIM_IC_CaptureCallback>
 8009924:	e005      	b.n	8009932 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f9dc 	bl	8009ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f9ed 	bl	8009d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	f003 0308 	and.w	r3, r3, #8
 8009942:	2b08      	cmp	r3, #8
 8009944:	d122      	bne.n	800998c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	f003 0308 	and.w	r3, r3, #8
 8009950:	2b08      	cmp	r3, #8
 8009952:	d11b      	bne.n	800998c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f06f 0208 	mvn.w	r2, #8
 800995c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2204      	movs	r2, #4
 8009962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	69db      	ldr	r3, [r3, #28]
 800996a:	f003 0303 	and.w	r3, r3, #3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d003      	beq.n	800997a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 f9c0 	bl	8009cf8 <HAL_TIM_IC_CaptureCallback>
 8009978:	e005      	b.n	8009986 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 f9b2 	bl	8009ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f9c3 	bl	8009d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	f003 0310 	and.w	r3, r3, #16
 8009996:	2b10      	cmp	r3, #16
 8009998:	d122      	bne.n	80099e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	f003 0310 	and.w	r3, r3, #16
 80099a4:	2b10      	cmp	r3, #16
 80099a6:	d11b      	bne.n	80099e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f06f 0210 	mvn.w	r2, #16
 80099b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2208      	movs	r2, #8
 80099b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	69db      	ldr	r3, [r3, #28]
 80099be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d003      	beq.n	80099ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 f996 	bl	8009cf8 <HAL_TIM_IC_CaptureCallback>
 80099cc:	e005      	b.n	80099da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f988 	bl	8009ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 f999 	bl	8009d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	f003 0301 	and.w	r3, r3, #1
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d10e      	bne.n	8009a0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	f003 0301 	and.w	r3, r3, #1
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d107      	bne.n	8009a0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f06f 0201 	mvn.w	r2, #1
 8009a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f7fa f89a 	bl	8003b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a16:	2b80      	cmp	r3, #128	; 0x80
 8009a18:	d10e      	bne.n	8009a38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a24:	2b80      	cmp	r3, #128	; 0x80
 8009a26:	d107      	bne.n	8009a38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fd10 	bl	800a458 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a42:	2b40      	cmp	r3, #64	; 0x40
 8009a44:	d10e      	bne.n	8009a64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a50:	2b40      	cmp	r3, #64	; 0x40
 8009a52:	d107      	bne.n	8009a64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 f968 	bl	8009d34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	f003 0320 	and.w	r3, r3, #32
 8009a6e:	2b20      	cmp	r3, #32
 8009a70:	d10e      	bne.n	8009a90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	f003 0320 	and.w	r3, r3, #32
 8009a7c:	2b20      	cmp	r3, #32
 8009a7e:	d107      	bne.n	8009a90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f06f 0220 	mvn.w	r2, #32
 8009a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fcda 	bl	800a444 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a90:	bf00      	nop
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d101      	bne.n	8009ab2 <HAL_TIM_OC_ConfigChannel+0x1a>
 8009aae:	2302      	movs	r3, #2
 8009ab0:	e04e      	b.n	8009b50 <HAL_TIM_OC_ConfigChannel+0xb8>
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2202      	movs	r2, #2
 8009abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b0c      	cmp	r3, #12
 8009ac6:	d839      	bhi.n	8009b3c <HAL_TIM_OC_ConfigChannel+0xa4>
 8009ac8:	a201      	add	r2, pc, #4	; (adr r2, 8009ad0 <HAL_TIM_OC_ConfigChannel+0x38>)
 8009aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ace:	bf00      	nop
 8009ad0:	08009b05 	.word	0x08009b05
 8009ad4:	08009b3d 	.word	0x08009b3d
 8009ad8:	08009b3d 	.word	0x08009b3d
 8009adc:	08009b3d 	.word	0x08009b3d
 8009ae0:	08009b13 	.word	0x08009b13
 8009ae4:	08009b3d 	.word	0x08009b3d
 8009ae8:	08009b3d 	.word	0x08009b3d
 8009aec:	08009b3d 	.word	0x08009b3d
 8009af0:	08009b21 	.word	0x08009b21
 8009af4:	08009b3d 	.word	0x08009b3d
 8009af8:	08009b3d 	.word	0x08009b3d
 8009afc:	08009b3d 	.word	0x08009b3d
 8009b00:	08009b2f 	.word	0x08009b2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68b9      	ldr	r1, [r7, #8]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f000 fa48 	bl	8009fa0 <TIM_OC1_SetConfig>
      break;
 8009b10:	e015      	b.n	8009b3e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68b9      	ldr	r1, [r7, #8]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f000 fab1 	bl	800a080 <TIM_OC2_SetConfig>
      break;
 8009b1e:	e00e      	b.n	8009b3e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68b9      	ldr	r1, [r7, #8]
 8009b26:	4618      	mov	r0, r3
 8009b28:	f000 fb20 	bl	800a16c <TIM_OC3_SetConfig>
      break;
 8009b2c:	e007      	b.n	8009b3e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68b9      	ldr	r1, [r7, #8]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f000 fb8d 	bl	800a254 <TIM_OC4_SetConfig>
      break;
 8009b3a:	e000      	b.n	8009b3e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8009b3c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d101      	bne.n	8009b72 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009b6e:	2302      	movs	r3, #2
 8009b70:	e0b4      	b.n	8009cdc <HAL_TIM_PWM_ConfigChannel+0x184>
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2201      	movs	r2, #1
 8009b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2202      	movs	r2, #2
 8009b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2b0c      	cmp	r3, #12
 8009b86:	f200 809f 	bhi.w	8009cc8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009b8a:	a201      	add	r2, pc, #4	; (adr r2, 8009b90 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b90:	08009bc5 	.word	0x08009bc5
 8009b94:	08009cc9 	.word	0x08009cc9
 8009b98:	08009cc9 	.word	0x08009cc9
 8009b9c:	08009cc9 	.word	0x08009cc9
 8009ba0:	08009c05 	.word	0x08009c05
 8009ba4:	08009cc9 	.word	0x08009cc9
 8009ba8:	08009cc9 	.word	0x08009cc9
 8009bac:	08009cc9 	.word	0x08009cc9
 8009bb0:	08009c47 	.word	0x08009c47
 8009bb4:	08009cc9 	.word	0x08009cc9
 8009bb8:	08009cc9 	.word	0x08009cc9
 8009bbc:	08009cc9 	.word	0x08009cc9
 8009bc0:	08009c87 	.word	0x08009c87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68b9      	ldr	r1, [r7, #8]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 f9e8 	bl	8009fa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	699a      	ldr	r2, [r3, #24]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f042 0208 	orr.w	r2, r2, #8
 8009bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	699a      	ldr	r2, [r3, #24]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f022 0204 	bic.w	r2, r2, #4
 8009bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	6999      	ldr	r1, [r3, #24]
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	691a      	ldr	r2, [r3, #16]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	430a      	orrs	r2, r1
 8009c00:	619a      	str	r2, [r3, #24]
      break;
 8009c02:	e062      	b.n	8009cca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68b9      	ldr	r1, [r7, #8]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f000 fa38 	bl	800a080 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	699a      	ldr	r2, [r3, #24]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	699a      	ldr	r2, [r3, #24]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	6999      	ldr	r1, [r3, #24]
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	691b      	ldr	r3, [r3, #16]
 8009c3a:	021a      	lsls	r2, r3, #8
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	430a      	orrs	r2, r1
 8009c42:	619a      	str	r2, [r3, #24]
      break;
 8009c44:	e041      	b.n	8009cca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68b9      	ldr	r1, [r7, #8]
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f000 fa8d 	bl	800a16c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	69da      	ldr	r2, [r3, #28]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f042 0208 	orr.w	r2, r2, #8
 8009c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	69da      	ldr	r2, [r3, #28]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f022 0204 	bic.w	r2, r2, #4
 8009c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	69d9      	ldr	r1, [r3, #28]
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	691a      	ldr	r2, [r3, #16]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	430a      	orrs	r2, r1
 8009c82:	61da      	str	r2, [r3, #28]
      break;
 8009c84:	e021      	b.n	8009cca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	68b9      	ldr	r1, [r7, #8]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f000 fae1 	bl	800a254 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	69da      	ldr	r2, [r3, #28]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	69da      	ldr	r2, [r3, #28]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	69d9      	ldr	r1, [r3, #28]
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	021a      	lsls	r2, r3, #8
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	430a      	orrs	r2, r1
 8009cc4:	61da      	str	r2, [r3, #28]
      break;
 8009cc6:	e000      	b.n	8009cca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009cc8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009cec:	bf00      	nop
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d00:	bf00      	nop
 8009d02:	370c      	adds	r7, #12
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d14:	bf00      	nop
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009d28:	bf00      	nop
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d68:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f7ff ffe8 	bl	8009d48 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8009d78:	bf00      	nop
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d8c:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2201      	movs	r2, #1
 8009d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d103      	bne.n	8009da8 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2201      	movs	r2, #1
 8009da4:	771a      	strb	r2, [r3, #28]
 8009da6:	e019      	b.n	8009ddc <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d103      	bne.n	8009dba <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2202      	movs	r2, #2
 8009db6:	771a      	strb	r2, [r3, #28]
 8009db8:	e010      	b.n	8009ddc <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d103      	bne.n	8009dcc <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2204      	movs	r2, #4
 8009dc8:	771a      	strb	r2, [r3, #28]
 8009dca:	e007      	b.n	8009ddc <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d102      	bne.n	8009ddc <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2208      	movs	r2, #8
 8009dda:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f7ff ff95 	bl	8009d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	771a      	strb	r2, [r3, #28]
}
 8009de8:	bf00      	nop
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dfc:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2201      	movs	r2, #1
 8009e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d103      	bne.n	8009e18 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2201      	movs	r2, #1
 8009e14:	771a      	strb	r2, [r3, #28]
 8009e16:	e019      	b.n	8009e4c <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d103      	bne.n	8009e2a <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2202      	movs	r2, #2
 8009e26:	771a      	strb	r2, [r3, #28]
 8009e28:	e010      	b.n	8009e4c <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d103      	bne.n	8009e3c <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2204      	movs	r2, #4
 8009e38:	771a      	strb	r2, [r3, #28]
 8009e3a:	e007      	b.n	8009e4c <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d102      	bne.n	8009e4c <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2208      	movs	r2, #8
 8009e4a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f7ff ff67 	bl	8009d20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2200      	movs	r2, #0
 8009e56:	771a      	strb	r2, [r3, #28]
}
 8009e58:	bf00      	nop
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4a40      	ldr	r2, [pc, #256]	; (8009f74 <TIM_Base_SetConfig+0x114>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d013      	beq.n	8009ea0 <TIM_Base_SetConfig+0x40>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e7e:	d00f      	beq.n	8009ea0 <TIM_Base_SetConfig+0x40>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a3d      	ldr	r2, [pc, #244]	; (8009f78 <TIM_Base_SetConfig+0x118>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d00b      	beq.n	8009ea0 <TIM_Base_SetConfig+0x40>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a3c      	ldr	r2, [pc, #240]	; (8009f7c <TIM_Base_SetConfig+0x11c>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d007      	beq.n	8009ea0 <TIM_Base_SetConfig+0x40>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4a3b      	ldr	r2, [pc, #236]	; (8009f80 <TIM_Base_SetConfig+0x120>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d003      	beq.n	8009ea0 <TIM_Base_SetConfig+0x40>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a3a      	ldr	r2, [pc, #232]	; (8009f84 <TIM_Base_SetConfig+0x124>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d108      	bne.n	8009eb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4a2f      	ldr	r2, [pc, #188]	; (8009f74 <TIM_Base_SetConfig+0x114>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d02b      	beq.n	8009f12 <TIM_Base_SetConfig+0xb2>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ec0:	d027      	beq.n	8009f12 <TIM_Base_SetConfig+0xb2>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	4a2c      	ldr	r2, [pc, #176]	; (8009f78 <TIM_Base_SetConfig+0x118>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d023      	beq.n	8009f12 <TIM_Base_SetConfig+0xb2>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4a2b      	ldr	r2, [pc, #172]	; (8009f7c <TIM_Base_SetConfig+0x11c>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d01f      	beq.n	8009f12 <TIM_Base_SetConfig+0xb2>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4a2a      	ldr	r2, [pc, #168]	; (8009f80 <TIM_Base_SetConfig+0x120>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d01b      	beq.n	8009f12 <TIM_Base_SetConfig+0xb2>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4a29      	ldr	r2, [pc, #164]	; (8009f84 <TIM_Base_SetConfig+0x124>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d017      	beq.n	8009f12 <TIM_Base_SetConfig+0xb2>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	4a28      	ldr	r2, [pc, #160]	; (8009f88 <TIM_Base_SetConfig+0x128>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d013      	beq.n	8009f12 <TIM_Base_SetConfig+0xb2>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4a27      	ldr	r2, [pc, #156]	; (8009f8c <TIM_Base_SetConfig+0x12c>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d00f      	beq.n	8009f12 <TIM_Base_SetConfig+0xb2>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	4a26      	ldr	r2, [pc, #152]	; (8009f90 <TIM_Base_SetConfig+0x130>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d00b      	beq.n	8009f12 <TIM_Base_SetConfig+0xb2>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4a25      	ldr	r2, [pc, #148]	; (8009f94 <TIM_Base_SetConfig+0x134>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d007      	beq.n	8009f12 <TIM_Base_SetConfig+0xb2>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a24      	ldr	r2, [pc, #144]	; (8009f98 <TIM_Base_SetConfig+0x138>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d003      	beq.n	8009f12 <TIM_Base_SetConfig+0xb2>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4a23      	ldr	r2, [pc, #140]	; (8009f9c <TIM_Base_SetConfig+0x13c>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d108      	bne.n	8009f24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	695b      	ldr	r3, [r3, #20]
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	689a      	ldr	r2, [r3, #8]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a0a      	ldr	r2, [pc, #40]	; (8009f74 <TIM_Base_SetConfig+0x114>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d003      	beq.n	8009f58 <TIM_Base_SetConfig+0xf8>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a0c      	ldr	r2, [pc, #48]	; (8009f84 <TIM_Base_SetConfig+0x124>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d103      	bne.n	8009f60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	691a      	ldr	r2, [r3, #16]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	615a      	str	r2, [r3, #20]
}
 8009f66:	bf00      	nop
 8009f68:	3714      	adds	r7, #20
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	40010000 	.word	0x40010000
 8009f78:	40000400 	.word	0x40000400
 8009f7c:	40000800 	.word	0x40000800
 8009f80:	40000c00 	.word	0x40000c00
 8009f84:	40010400 	.word	0x40010400
 8009f88:	40014000 	.word	0x40014000
 8009f8c:	40014400 	.word	0x40014400
 8009f90:	40014800 	.word	0x40014800
 8009f94:	40001800 	.word	0x40001800
 8009f98:	40001c00 	.word	0x40001c00
 8009f9c:	40002000 	.word	0x40002000

08009fa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b087      	sub	sp, #28
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a1b      	ldr	r3, [r3, #32]
 8009fae:	f023 0201 	bic.w	r2, r3, #1
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a1b      	ldr	r3, [r3, #32]
 8009fba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	699b      	ldr	r3, [r3, #24]
 8009fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f023 0303 	bic.w	r3, r3, #3
 8009fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	f023 0302 	bic.w	r3, r3, #2
 8009fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	697a      	ldr	r2, [r7, #20]
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a20      	ldr	r2, [pc, #128]	; (800a078 <TIM_OC1_SetConfig+0xd8>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d003      	beq.n	800a004 <TIM_OC1_SetConfig+0x64>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a1f      	ldr	r2, [pc, #124]	; (800a07c <TIM_OC1_SetConfig+0xdc>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d10c      	bne.n	800a01e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	f023 0308 	bic.w	r3, r3, #8
 800a00a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	697a      	ldr	r2, [r7, #20]
 800a012:	4313      	orrs	r3, r2
 800a014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	f023 0304 	bic.w	r3, r3, #4
 800a01c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a15      	ldr	r2, [pc, #84]	; (800a078 <TIM_OC1_SetConfig+0xd8>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d003      	beq.n	800a02e <TIM_OC1_SetConfig+0x8e>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a14      	ldr	r2, [pc, #80]	; (800a07c <TIM_OC1_SetConfig+0xdc>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d111      	bne.n	800a052 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a03c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	695b      	ldr	r3, [r3, #20]
 800a042:	693a      	ldr	r2, [r7, #16]
 800a044:	4313      	orrs	r3, r2
 800a046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	699b      	ldr	r3, [r3, #24]
 800a04c:	693a      	ldr	r2, [r7, #16]
 800a04e:	4313      	orrs	r3, r2
 800a050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	693a      	ldr	r2, [r7, #16]
 800a056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	685a      	ldr	r2, [r3, #4]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	697a      	ldr	r2, [r7, #20]
 800a06a:	621a      	str	r2, [r3, #32]
}
 800a06c:	bf00      	nop
 800a06e:	371c      	adds	r7, #28
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr
 800a078:	40010000 	.word	0x40010000
 800a07c:	40010400 	.word	0x40010400

0800a080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a080:	b480      	push	{r7}
 800a082:	b087      	sub	sp, #28
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a1b      	ldr	r3, [r3, #32]
 800a08e:	f023 0210 	bic.w	r2, r3, #16
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a1b      	ldr	r3, [r3, #32]
 800a09a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	021b      	lsls	r3, r3, #8
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	f023 0320 	bic.w	r3, r3, #32
 800a0ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	011b      	lsls	r3, r3, #4
 800a0d2:	697a      	ldr	r2, [r7, #20]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4a22      	ldr	r2, [pc, #136]	; (800a164 <TIM_OC2_SetConfig+0xe4>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d003      	beq.n	800a0e8 <TIM_OC2_SetConfig+0x68>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a21      	ldr	r2, [pc, #132]	; (800a168 <TIM_OC2_SetConfig+0xe8>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d10d      	bne.n	800a104 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	011b      	lsls	r3, r3, #4
 800a0f6:	697a      	ldr	r2, [r7, #20]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a102:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a17      	ldr	r2, [pc, #92]	; (800a164 <TIM_OC2_SetConfig+0xe4>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d003      	beq.n	800a114 <TIM_OC2_SetConfig+0x94>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a16      	ldr	r2, [pc, #88]	; (800a168 <TIM_OC2_SetConfig+0xe8>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d113      	bne.n	800a13c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a11a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	695b      	ldr	r3, [r3, #20]
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	693a      	ldr	r2, [r7, #16]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	699b      	ldr	r3, [r3, #24]
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	693a      	ldr	r2, [r7, #16]
 800a138:	4313      	orrs	r3, r2
 800a13a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	693a      	ldr	r2, [r7, #16]
 800a140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	685a      	ldr	r2, [r3, #4]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	697a      	ldr	r2, [r7, #20]
 800a154:	621a      	str	r2, [r3, #32]
}
 800a156:	bf00      	nop
 800a158:	371c      	adds	r7, #28
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	40010000 	.word	0x40010000
 800a168:	40010400 	.word	0x40010400

0800a16c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b087      	sub	sp, #28
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6a1b      	ldr	r3, [r3, #32]
 800a17a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a1b      	ldr	r3, [r3, #32]
 800a186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	69db      	ldr	r3, [r3, #28]
 800a192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a19a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f023 0303 	bic.w	r3, r3, #3
 800a1a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	021b      	lsls	r3, r3, #8
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a21      	ldr	r2, [pc, #132]	; (800a24c <TIM_OC3_SetConfig+0xe0>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d003      	beq.n	800a1d2 <TIM_OC3_SetConfig+0x66>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a20      	ldr	r2, [pc, #128]	; (800a250 <TIM_OC3_SetConfig+0xe4>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d10d      	bne.n	800a1ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	021b      	lsls	r3, r3, #8
 800a1e0:	697a      	ldr	r2, [r7, #20]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a16      	ldr	r2, [pc, #88]	; (800a24c <TIM_OC3_SetConfig+0xe0>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d003      	beq.n	800a1fe <TIM_OC3_SetConfig+0x92>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	4a15      	ldr	r2, [pc, #84]	; (800a250 <TIM_OC3_SetConfig+0xe4>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d113      	bne.n	800a226 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a20c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	695b      	ldr	r3, [r3, #20]
 800a212:	011b      	lsls	r3, r3, #4
 800a214:	693a      	ldr	r2, [r7, #16]
 800a216:	4313      	orrs	r3, r2
 800a218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	011b      	lsls	r3, r3, #4
 800a220:	693a      	ldr	r2, [r7, #16]
 800a222:	4313      	orrs	r3, r2
 800a224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	693a      	ldr	r2, [r7, #16]
 800a22a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	68fa      	ldr	r2, [r7, #12]
 800a230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	685a      	ldr	r2, [r3, #4]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	697a      	ldr	r2, [r7, #20]
 800a23e:	621a      	str	r2, [r3, #32]
}
 800a240:	bf00      	nop
 800a242:	371c      	adds	r7, #28
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr
 800a24c:	40010000 	.word	0x40010000
 800a250:	40010400 	.word	0x40010400

0800a254 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a254:	b480      	push	{r7}
 800a256:	b087      	sub	sp, #28
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6a1b      	ldr	r3, [r3, #32]
 800a262:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a1b      	ldr	r3, [r3, #32]
 800a26e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	69db      	ldr	r3, [r3, #28]
 800a27a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a28a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	021b      	lsls	r3, r3, #8
 800a292:	68fa      	ldr	r2, [r7, #12]
 800a294:	4313      	orrs	r3, r2
 800a296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a29e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	031b      	lsls	r3, r3, #12
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a12      	ldr	r2, [pc, #72]	; (800a2f8 <TIM_OC4_SetConfig+0xa4>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d003      	beq.n	800a2bc <TIM_OC4_SetConfig+0x68>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a11      	ldr	r2, [pc, #68]	; (800a2fc <TIM_OC4_SetConfig+0xa8>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d109      	bne.n	800a2d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	695b      	ldr	r3, [r3, #20]
 800a2c8:	019b      	lsls	r3, r3, #6
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	697a      	ldr	r2, [r7, #20]
 800a2d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	685a      	ldr	r2, [r3, #4]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	621a      	str	r2, [r3, #32]
}
 800a2ea:	bf00      	nop
 800a2ec:	371c      	adds	r7, #28
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	40010000 	.word	0x40010000
 800a2fc:	40010400 	.word	0x40010400

0800a300 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a300:	b480      	push	{r7}
 800a302:	b087      	sub	sp, #28
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	f003 031f 	and.w	r3, r3, #31
 800a312:	2201      	movs	r2, #1
 800a314:	fa02 f303 	lsl.w	r3, r2, r3
 800a318:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6a1a      	ldr	r2, [r3, #32]
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	43db      	mvns	r3, r3
 800a322:	401a      	ands	r2, r3
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6a1a      	ldr	r2, [r3, #32]
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	f003 031f 	and.w	r3, r3, #31
 800a332:	6879      	ldr	r1, [r7, #4]
 800a334:	fa01 f303 	lsl.w	r3, r1, r3
 800a338:	431a      	orrs	r2, r3
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	621a      	str	r2, [r3, #32]
}
 800a33e:	bf00      	nop
 800a340:	371c      	adds	r7, #28
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
	...

0800a34c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d101      	bne.n	800a364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a360:	2302      	movs	r3, #2
 800a362:	e05a      	b.n	800a41a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2202      	movs	r2, #2
 800a370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a38a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	4313      	orrs	r3, r2
 800a394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a21      	ldr	r2, [pc, #132]	; (800a428 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d022      	beq.n	800a3ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3b0:	d01d      	beq.n	800a3ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a1d      	ldr	r2, [pc, #116]	; (800a42c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d018      	beq.n	800a3ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a1b      	ldr	r2, [pc, #108]	; (800a430 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d013      	beq.n	800a3ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a1a      	ldr	r2, [pc, #104]	; (800a434 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d00e      	beq.n	800a3ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a18      	ldr	r2, [pc, #96]	; (800a438 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d009      	beq.n	800a3ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a17      	ldr	r2, [pc, #92]	; (800a43c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d004      	beq.n	800a3ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a15      	ldr	r2, [pc, #84]	; (800a440 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d10c      	bne.n	800a408 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	68ba      	ldr	r2, [r7, #8]
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3714      	adds	r7, #20
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	40010000 	.word	0x40010000
 800a42c:	40000400 	.word	0x40000400
 800a430:	40000800 	.word	0x40000800
 800a434:	40000c00 	.word	0x40000c00
 800a438:	40010400 	.word	0x40010400
 800a43c:	40014000 	.word	0x40014000
 800a440:	40001800 	.word	0x40001800

0800a444 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a44c:	bf00      	nop
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a460:	bf00      	nop
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d101      	bne.n	800a47e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a47a:	2301      	movs	r3, #1
 800a47c:	e03f      	b.n	800a4fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a484:	b2db      	uxtb	r3, r3
 800a486:	2b00      	cmp	r3, #0
 800a488:	d106      	bne.n	800a498 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f7fa ff5a 	bl	800534c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2224      	movs	r2, #36	; 0x24
 800a49c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	68da      	ldr	r2, [r3, #12]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a4ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 f829 	bl	800a508 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	691a      	ldr	r2, [r3, #16]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	695a      	ldr	r2, [r3, #20]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	68da      	ldr	r2, [r3, #12]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2220      	movs	r2, #32
 800a4f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2220      	movs	r2, #32
 800a4f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
	...

0800a508 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a50c:	b0bd      	sub	sp, #244	; 0xf4
 800a50e:	af00      	add	r7, sp, #0
 800a510:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a524:	68d9      	ldr	r1, [r3, #12]
 800a526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	ea40 0301 	orr.w	r3, r0, r1
 800a530:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a536:	689a      	ldr	r2, [r3, #8]
 800a538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	431a      	orrs	r2, r3
 800a540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a544:	695b      	ldr	r3, [r3, #20]
 800a546:	431a      	orrs	r2, r3
 800a548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a54c:	69db      	ldr	r3, [r3, #28]
 800a54e:	4313      	orrs	r3, r2
 800a550:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800a554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a560:	f021 010c 	bic.w	r1, r1, #12
 800a564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a56e:	430b      	orrs	r3, r1
 800a570:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	695b      	ldr	r3, [r3, #20]
 800a57a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a57e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a582:	6999      	ldr	r1, [r3, #24]
 800a584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	ea40 0301 	orr.w	r3, r0, r1
 800a58e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a594:	69db      	ldr	r3, [r3, #28]
 800a596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a59a:	f040 81a5 	bne.w	800a8e8 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a59e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	4bcd      	ldr	r3, [pc, #820]	; (800a8dc <UART_SetConfig+0x3d4>)
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d006      	beq.n	800a5b8 <UART_SetConfig+0xb0>
 800a5aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	4bcb      	ldr	r3, [pc, #812]	; (800a8e0 <UART_SetConfig+0x3d8>)
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	f040 80cb 	bne.w	800a74e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a5b8:	f7fd ffd4 	bl	8008564 <HAL_RCC_GetPCLK2Freq>
 800a5bc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a5c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a5c4:	461c      	mov	r4, r3
 800a5c6:	f04f 0500 	mov.w	r5, #0
 800a5ca:	4622      	mov	r2, r4
 800a5cc:	462b      	mov	r3, r5
 800a5ce:	1891      	adds	r1, r2, r2
 800a5d0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800a5d4:	415b      	adcs	r3, r3
 800a5d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a5da:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800a5de:	1912      	adds	r2, r2, r4
 800a5e0:	eb45 0303 	adc.w	r3, r5, r3
 800a5e4:	f04f 0000 	mov.w	r0, #0
 800a5e8:	f04f 0100 	mov.w	r1, #0
 800a5ec:	00d9      	lsls	r1, r3, #3
 800a5ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a5f2:	00d0      	lsls	r0, r2, #3
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	1911      	adds	r1, r2, r4
 800a5fa:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800a5fe:	416b      	adcs	r3, r5
 800a600:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	461a      	mov	r2, r3
 800a60c:	f04f 0300 	mov.w	r3, #0
 800a610:	1891      	adds	r1, r2, r2
 800a612:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800a616:	415b      	adcs	r3, r3
 800a618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a61c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800a620:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800a624:	f7f6 faf0 	bl	8000c08 <__aeabi_uldivmod>
 800a628:	4602      	mov	r2, r0
 800a62a:	460b      	mov	r3, r1
 800a62c:	4bad      	ldr	r3, [pc, #692]	; (800a8e4 <UART_SetConfig+0x3dc>)
 800a62e:	fba3 2302 	umull	r2, r3, r3, r2
 800a632:	095b      	lsrs	r3, r3, #5
 800a634:	011e      	lsls	r6, r3, #4
 800a636:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a63a:	461c      	mov	r4, r3
 800a63c:	f04f 0500 	mov.w	r5, #0
 800a640:	4622      	mov	r2, r4
 800a642:	462b      	mov	r3, r5
 800a644:	1891      	adds	r1, r2, r2
 800a646:	67b9      	str	r1, [r7, #120]	; 0x78
 800a648:	415b      	adcs	r3, r3
 800a64a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a64c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800a650:	1912      	adds	r2, r2, r4
 800a652:	eb45 0303 	adc.w	r3, r5, r3
 800a656:	f04f 0000 	mov.w	r0, #0
 800a65a:	f04f 0100 	mov.w	r1, #0
 800a65e:	00d9      	lsls	r1, r3, #3
 800a660:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a664:	00d0      	lsls	r0, r2, #3
 800a666:	4602      	mov	r2, r0
 800a668:	460b      	mov	r3, r1
 800a66a:	1911      	adds	r1, r2, r4
 800a66c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800a670:	416b      	adcs	r3, r5
 800a672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	461a      	mov	r2, r3
 800a67e:	f04f 0300 	mov.w	r3, #0
 800a682:	1891      	adds	r1, r2, r2
 800a684:	6739      	str	r1, [r7, #112]	; 0x70
 800a686:	415b      	adcs	r3, r3
 800a688:	677b      	str	r3, [r7, #116]	; 0x74
 800a68a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800a68e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800a692:	f7f6 fab9 	bl	8000c08 <__aeabi_uldivmod>
 800a696:	4602      	mov	r2, r0
 800a698:	460b      	mov	r3, r1
 800a69a:	4b92      	ldr	r3, [pc, #584]	; (800a8e4 <UART_SetConfig+0x3dc>)
 800a69c:	fba3 1302 	umull	r1, r3, r3, r2
 800a6a0:	095b      	lsrs	r3, r3, #5
 800a6a2:	2164      	movs	r1, #100	; 0x64
 800a6a4:	fb01 f303 	mul.w	r3, r1, r3
 800a6a8:	1ad3      	subs	r3, r2, r3
 800a6aa:	00db      	lsls	r3, r3, #3
 800a6ac:	3332      	adds	r3, #50	; 0x32
 800a6ae:	4a8d      	ldr	r2, [pc, #564]	; (800a8e4 <UART_SetConfig+0x3dc>)
 800a6b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a6b4:	095b      	lsrs	r3, r3, #5
 800a6b6:	005b      	lsls	r3, r3, #1
 800a6b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a6bc:	441e      	add	r6, r3
 800a6be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f04f 0100 	mov.w	r1, #0
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	1894      	adds	r4, r2, r2
 800a6ce:	66bc      	str	r4, [r7, #104]	; 0x68
 800a6d0:	415b      	adcs	r3, r3
 800a6d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a6d4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a6d8:	1812      	adds	r2, r2, r0
 800a6da:	eb41 0303 	adc.w	r3, r1, r3
 800a6de:	f04f 0400 	mov.w	r4, #0
 800a6e2:	f04f 0500 	mov.w	r5, #0
 800a6e6:	00dd      	lsls	r5, r3, #3
 800a6e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a6ec:	00d4      	lsls	r4, r2, #3
 800a6ee:	4622      	mov	r2, r4
 800a6f0:	462b      	mov	r3, r5
 800a6f2:	1814      	adds	r4, r2, r0
 800a6f4:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800a6f8:	414b      	adcs	r3, r1
 800a6fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a6fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	461a      	mov	r2, r3
 800a706:	f04f 0300 	mov.w	r3, #0
 800a70a:	1891      	adds	r1, r2, r2
 800a70c:	6639      	str	r1, [r7, #96]	; 0x60
 800a70e:	415b      	adcs	r3, r3
 800a710:	667b      	str	r3, [r7, #100]	; 0x64
 800a712:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800a716:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a71a:	f7f6 fa75 	bl	8000c08 <__aeabi_uldivmod>
 800a71e:	4602      	mov	r2, r0
 800a720:	460b      	mov	r3, r1
 800a722:	4b70      	ldr	r3, [pc, #448]	; (800a8e4 <UART_SetConfig+0x3dc>)
 800a724:	fba3 1302 	umull	r1, r3, r3, r2
 800a728:	095b      	lsrs	r3, r3, #5
 800a72a:	2164      	movs	r1, #100	; 0x64
 800a72c:	fb01 f303 	mul.w	r3, r1, r3
 800a730:	1ad3      	subs	r3, r2, r3
 800a732:	00db      	lsls	r3, r3, #3
 800a734:	3332      	adds	r3, #50	; 0x32
 800a736:	4a6b      	ldr	r2, [pc, #428]	; (800a8e4 <UART_SetConfig+0x3dc>)
 800a738:	fba2 2303 	umull	r2, r3, r2, r3
 800a73c:	095b      	lsrs	r3, r3, #5
 800a73e:	f003 0207 	and.w	r2, r3, #7
 800a742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4432      	add	r2, r6
 800a74a:	609a      	str	r2, [r3, #8]
 800a74c:	e26d      	b.n	800ac2a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a74e:	f7fd fef5 	bl	800853c <HAL_RCC_GetPCLK1Freq>
 800a752:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a756:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a75a:	461c      	mov	r4, r3
 800a75c:	f04f 0500 	mov.w	r5, #0
 800a760:	4622      	mov	r2, r4
 800a762:	462b      	mov	r3, r5
 800a764:	1891      	adds	r1, r2, r2
 800a766:	65b9      	str	r1, [r7, #88]	; 0x58
 800a768:	415b      	adcs	r3, r3
 800a76a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a76c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a770:	1912      	adds	r2, r2, r4
 800a772:	eb45 0303 	adc.w	r3, r5, r3
 800a776:	f04f 0000 	mov.w	r0, #0
 800a77a:	f04f 0100 	mov.w	r1, #0
 800a77e:	00d9      	lsls	r1, r3, #3
 800a780:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a784:	00d0      	lsls	r0, r2, #3
 800a786:	4602      	mov	r2, r0
 800a788:	460b      	mov	r3, r1
 800a78a:	1911      	adds	r1, r2, r4
 800a78c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800a790:	416b      	adcs	r3, r5
 800a792:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	461a      	mov	r2, r3
 800a79e:	f04f 0300 	mov.w	r3, #0
 800a7a2:	1891      	adds	r1, r2, r2
 800a7a4:	6539      	str	r1, [r7, #80]	; 0x50
 800a7a6:	415b      	adcs	r3, r3
 800a7a8:	657b      	str	r3, [r7, #84]	; 0x54
 800a7aa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a7ae:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800a7b2:	f7f6 fa29 	bl	8000c08 <__aeabi_uldivmod>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	4b4a      	ldr	r3, [pc, #296]	; (800a8e4 <UART_SetConfig+0x3dc>)
 800a7bc:	fba3 2302 	umull	r2, r3, r3, r2
 800a7c0:	095b      	lsrs	r3, r3, #5
 800a7c2:	011e      	lsls	r6, r3, #4
 800a7c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a7c8:	461c      	mov	r4, r3
 800a7ca:	f04f 0500 	mov.w	r5, #0
 800a7ce:	4622      	mov	r2, r4
 800a7d0:	462b      	mov	r3, r5
 800a7d2:	1891      	adds	r1, r2, r2
 800a7d4:	64b9      	str	r1, [r7, #72]	; 0x48
 800a7d6:	415b      	adcs	r3, r3
 800a7d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a7de:	1912      	adds	r2, r2, r4
 800a7e0:	eb45 0303 	adc.w	r3, r5, r3
 800a7e4:	f04f 0000 	mov.w	r0, #0
 800a7e8:	f04f 0100 	mov.w	r1, #0
 800a7ec:	00d9      	lsls	r1, r3, #3
 800a7ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a7f2:	00d0      	lsls	r0, r2, #3
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	1911      	adds	r1, r2, r4
 800a7fa:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800a7fe:	416b      	adcs	r3, r5
 800a800:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	461a      	mov	r2, r3
 800a80c:	f04f 0300 	mov.w	r3, #0
 800a810:	1891      	adds	r1, r2, r2
 800a812:	6439      	str	r1, [r7, #64]	; 0x40
 800a814:	415b      	adcs	r3, r3
 800a816:	647b      	str	r3, [r7, #68]	; 0x44
 800a818:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a81c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800a820:	f7f6 f9f2 	bl	8000c08 <__aeabi_uldivmod>
 800a824:	4602      	mov	r2, r0
 800a826:	460b      	mov	r3, r1
 800a828:	4b2e      	ldr	r3, [pc, #184]	; (800a8e4 <UART_SetConfig+0x3dc>)
 800a82a:	fba3 1302 	umull	r1, r3, r3, r2
 800a82e:	095b      	lsrs	r3, r3, #5
 800a830:	2164      	movs	r1, #100	; 0x64
 800a832:	fb01 f303 	mul.w	r3, r1, r3
 800a836:	1ad3      	subs	r3, r2, r3
 800a838:	00db      	lsls	r3, r3, #3
 800a83a:	3332      	adds	r3, #50	; 0x32
 800a83c:	4a29      	ldr	r2, [pc, #164]	; (800a8e4 <UART_SetConfig+0x3dc>)
 800a83e:	fba2 2303 	umull	r2, r3, r2, r3
 800a842:	095b      	lsrs	r3, r3, #5
 800a844:	005b      	lsls	r3, r3, #1
 800a846:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a84a:	441e      	add	r6, r3
 800a84c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a850:	4618      	mov	r0, r3
 800a852:	f04f 0100 	mov.w	r1, #0
 800a856:	4602      	mov	r2, r0
 800a858:	460b      	mov	r3, r1
 800a85a:	1894      	adds	r4, r2, r2
 800a85c:	63bc      	str	r4, [r7, #56]	; 0x38
 800a85e:	415b      	adcs	r3, r3
 800a860:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a862:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a866:	1812      	adds	r2, r2, r0
 800a868:	eb41 0303 	adc.w	r3, r1, r3
 800a86c:	f04f 0400 	mov.w	r4, #0
 800a870:	f04f 0500 	mov.w	r5, #0
 800a874:	00dd      	lsls	r5, r3, #3
 800a876:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a87a:	00d4      	lsls	r4, r2, #3
 800a87c:	4622      	mov	r2, r4
 800a87e:	462b      	mov	r3, r5
 800a880:	1814      	adds	r4, r2, r0
 800a882:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800a886:	414b      	adcs	r3, r1
 800a888:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a88c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	461a      	mov	r2, r3
 800a894:	f04f 0300 	mov.w	r3, #0
 800a898:	1891      	adds	r1, r2, r2
 800a89a:	6339      	str	r1, [r7, #48]	; 0x30
 800a89c:	415b      	adcs	r3, r3
 800a89e:	637b      	str	r3, [r7, #52]	; 0x34
 800a8a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a8a4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a8a8:	f7f6 f9ae 	bl	8000c08 <__aeabi_uldivmod>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	4b0c      	ldr	r3, [pc, #48]	; (800a8e4 <UART_SetConfig+0x3dc>)
 800a8b2:	fba3 1302 	umull	r1, r3, r3, r2
 800a8b6:	095b      	lsrs	r3, r3, #5
 800a8b8:	2164      	movs	r1, #100	; 0x64
 800a8ba:	fb01 f303 	mul.w	r3, r1, r3
 800a8be:	1ad3      	subs	r3, r2, r3
 800a8c0:	00db      	lsls	r3, r3, #3
 800a8c2:	3332      	adds	r3, #50	; 0x32
 800a8c4:	4a07      	ldr	r2, [pc, #28]	; (800a8e4 <UART_SetConfig+0x3dc>)
 800a8c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ca:	095b      	lsrs	r3, r3, #5
 800a8cc:	f003 0207 	and.w	r2, r3, #7
 800a8d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4432      	add	r2, r6
 800a8d8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a8da:	e1a6      	b.n	800ac2a <UART_SetConfig+0x722>
 800a8dc:	40011000 	.word	0x40011000
 800a8e0:	40011400 	.word	0x40011400
 800a8e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a8e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	4bd1      	ldr	r3, [pc, #836]	; (800ac34 <UART_SetConfig+0x72c>)
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d006      	beq.n	800a902 <UART_SetConfig+0x3fa>
 800a8f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	4bcf      	ldr	r3, [pc, #828]	; (800ac38 <UART_SetConfig+0x730>)
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	f040 80ca 	bne.w	800aa96 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a902:	f7fd fe2f 	bl	8008564 <HAL_RCC_GetPCLK2Freq>
 800a906:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a90a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a90e:	461c      	mov	r4, r3
 800a910:	f04f 0500 	mov.w	r5, #0
 800a914:	4622      	mov	r2, r4
 800a916:	462b      	mov	r3, r5
 800a918:	1891      	adds	r1, r2, r2
 800a91a:	62b9      	str	r1, [r7, #40]	; 0x28
 800a91c:	415b      	adcs	r3, r3
 800a91e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a920:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a924:	1912      	adds	r2, r2, r4
 800a926:	eb45 0303 	adc.w	r3, r5, r3
 800a92a:	f04f 0000 	mov.w	r0, #0
 800a92e:	f04f 0100 	mov.w	r1, #0
 800a932:	00d9      	lsls	r1, r3, #3
 800a934:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a938:	00d0      	lsls	r0, r2, #3
 800a93a:	4602      	mov	r2, r0
 800a93c:	460b      	mov	r3, r1
 800a93e:	eb12 0a04 	adds.w	sl, r2, r4
 800a942:	eb43 0b05 	adc.w	fp, r3, r5
 800a946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	4618      	mov	r0, r3
 800a94e:	f04f 0100 	mov.w	r1, #0
 800a952:	f04f 0200 	mov.w	r2, #0
 800a956:	f04f 0300 	mov.w	r3, #0
 800a95a:	008b      	lsls	r3, r1, #2
 800a95c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a960:	0082      	lsls	r2, r0, #2
 800a962:	4650      	mov	r0, sl
 800a964:	4659      	mov	r1, fp
 800a966:	f7f6 f94f 	bl	8000c08 <__aeabi_uldivmod>
 800a96a:	4602      	mov	r2, r0
 800a96c:	460b      	mov	r3, r1
 800a96e:	4bb3      	ldr	r3, [pc, #716]	; (800ac3c <UART_SetConfig+0x734>)
 800a970:	fba3 2302 	umull	r2, r3, r3, r2
 800a974:	095b      	lsrs	r3, r3, #5
 800a976:	011e      	lsls	r6, r3, #4
 800a978:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a97c:	4618      	mov	r0, r3
 800a97e:	f04f 0100 	mov.w	r1, #0
 800a982:	4602      	mov	r2, r0
 800a984:	460b      	mov	r3, r1
 800a986:	1894      	adds	r4, r2, r2
 800a988:	623c      	str	r4, [r7, #32]
 800a98a:	415b      	adcs	r3, r3
 800a98c:	627b      	str	r3, [r7, #36]	; 0x24
 800a98e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a992:	1812      	adds	r2, r2, r0
 800a994:	eb41 0303 	adc.w	r3, r1, r3
 800a998:	f04f 0400 	mov.w	r4, #0
 800a99c:	f04f 0500 	mov.w	r5, #0
 800a9a0:	00dd      	lsls	r5, r3, #3
 800a9a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a9a6:	00d4      	lsls	r4, r2, #3
 800a9a8:	4622      	mov	r2, r4
 800a9aa:	462b      	mov	r3, r5
 800a9ac:	1814      	adds	r4, r2, r0
 800a9ae:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800a9b2:	414b      	adcs	r3, r1
 800a9b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a9b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f04f 0100 	mov.w	r1, #0
 800a9c4:	f04f 0200 	mov.w	r2, #0
 800a9c8:	f04f 0300 	mov.w	r3, #0
 800a9cc:	008b      	lsls	r3, r1, #2
 800a9ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a9d2:	0082      	lsls	r2, r0, #2
 800a9d4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800a9d8:	f7f6 f916 	bl	8000c08 <__aeabi_uldivmod>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	460b      	mov	r3, r1
 800a9e0:	4b96      	ldr	r3, [pc, #600]	; (800ac3c <UART_SetConfig+0x734>)
 800a9e2:	fba3 1302 	umull	r1, r3, r3, r2
 800a9e6:	095b      	lsrs	r3, r3, #5
 800a9e8:	2164      	movs	r1, #100	; 0x64
 800a9ea:	fb01 f303 	mul.w	r3, r1, r3
 800a9ee:	1ad3      	subs	r3, r2, r3
 800a9f0:	011b      	lsls	r3, r3, #4
 800a9f2:	3332      	adds	r3, #50	; 0x32
 800a9f4:	4a91      	ldr	r2, [pc, #580]	; (800ac3c <UART_SetConfig+0x734>)
 800a9f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9fa:	095b      	lsrs	r3, r3, #5
 800a9fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa00:	441e      	add	r6, r3
 800aa02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aa06:	4618      	mov	r0, r3
 800aa08:	f04f 0100 	mov.w	r1, #0
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	460b      	mov	r3, r1
 800aa10:	1894      	adds	r4, r2, r2
 800aa12:	61bc      	str	r4, [r7, #24]
 800aa14:	415b      	adcs	r3, r3
 800aa16:	61fb      	str	r3, [r7, #28]
 800aa18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aa1c:	1812      	adds	r2, r2, r0
 800aa1e:	eb41 0303 	adc.w	r3, r1, r3
 800aa22:	f04f 0400 	mov.w	r4, #0
 800aa26:	f04f 0500 	mov.w	r5, #0
 800aa2a:	00dd      	lsls	r5, r3, #3
 800aa2c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aa30:	00d4      	lsls	r4, r2, #3
 800aa32:	4622      	mov	r2, r4
 800aa34:	462b      	mov	r3, r5
 800aa36:	1814      	adds	r4, r2, r0
 800aa38:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800aa3c:	414b      	adcs	r3, r1
 800aa3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800aa42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f04f 0100 	mov.w	r1, #0
 800aa4e:	f04f 0200 	mov.w	r2, #0
 800aa52:	f04f 0300 	mov.w	r3, #0
 800aa56:	008b      	lsls	r3, r1, #2
 800aa58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800aa5c:	0082      	lsls	r2, r0, #2
 800aa5e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800aa62:	f7f6 f8d1 	bl	8000c08 <__aeabi_uldivmod>
 800aa66:	4602      	mov	r2, r0
 800aa68:	460b      	mov	r3, r1
 800aa6a:	4b74      	ldr	r3, [pc, #464]	; (800ac3c <UART_SetConfig+0x734>)
 800aa6c:	fba3 1302 	umull	r1, r3, r3, r2
 800aa70:	095b      	lsrs	r3, r3, #5
 800aa72:	2164      	movs	r1, #100	; 0x64
 800aa74:	fb01 f303 	mul.w	r3, r1, r3
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	011b      	lsls	r3, r3, #4
 800aa7c:	3332      	adds	r3, #50	; 0x32
 800aa7e:	4a6f      	ldr	r2, [pc, #444]	; (800ac3c <UART_SetConfig+0x734>)
 800aa80:	fba2 2303 	umull	r2, r3, r2, r3
 800aa84:	095b      	lsrs	r3, r3, #5
 800aa86:	f003 020f 	and.w	r2, r3, #15
 800aa8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4432      	add	r2, r6
 800aa92:	609a      	str	r2, [r3, #8]
 800aa94:	e0c9      	b.n	800ac2a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800aa96:	f7fd fd51 	bl	800853c <HAL_RCC_GetPCLK1Freq>
 800aa9a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aaa2:	461c      	mov	r4, r3
 800aaa4:	f04f 0500 	mov.w	r5, #0
 800aaa8:	4622      	mov	r2, r4
 800aaaa:	462b      	mov	r3, r5
 800aaac:	1891      	adds	r1, r2, r2
 800aaae:	6139      	str	r1, [r7, #16]
 800aab0:	415b      	adcs	r3, r3
 800aab2:	617b      	str	r3, [r7, #20]
 800aab4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aab8:	1912      	adds	r2, r2, r4
 800aaba:	eb45 0303 	adc.w	r3, r5, r3
 800aabe:	f04f 0000 	mov.w	r0, #0
 800aac2:	f04f 0100 	mov.w	r1, #0
 800aac6:	00d9      	lsls	r1, r3, #3
 800aac8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aacc:	00d0      	lsls	r0, r2, #3
 800aace:	4602      	mov	r2, r0
 800aad0:	460b      	mov	r3, r1
 800aad2:	eb12 0804 	adds.w	r8, r2, r4
 800aad6:	eb43 0905 	adc.w	r9, r3, r5
 800aada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	4618      	mov	r0, r3
 800aae2:	f04f 0100 	mov.w	r1, #0
 800aae6:	f04f 0200 	mov.w	r2, #0
 800aaea:	f04f 0300 	mov.w	r3, #0
 800aaee:	008b      	lsls	r3, r1, #2
 800aaf0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800aaf4:	0082      	lsls	r2, r0, #2
 800aaf6:	4640      	mov	r0, r8
 800aaf8:	4649      	mov	r1, r9
 800aafa:	f7f6 f885 	bl	8000c08 <__aeabi_uldivmod>
 800aafe:	4602      	mov	r2, r0
 800ab00:	460b      	mov	r3, r1
 800ab02:	4b4e      	ldr	r3, [pc, #312]	; (800ac3c <UART_SetConfig+0x734>)
 800ab04:	fba3 2302 	umull	r2, r3, r3, r2
 800ab08:	095b      	lsrs	r3, r3, #5
 800ab0a:	011e      	lsls	r6, r3, #4
 800ab0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ab10:	4618      	mov	r0, r3
 800ab12:	f04f 0100 	mov.w	r1, #0
 800ab16:	4602      	mov	r2, r0
 800ab18:	460b      	mov	r3, r1
 800ab1a:	1894      	adds	r4, r2, r2
 800ab1c:	60bc      	str	r4, [r7, #8]
 800ab1e:	415b      	adcs	r3, r3
 800ab20:	60fb      	str	r3, [r7, #12]
 800ab22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ab26:	1812      	adds	r2, r2, r0
 800ab28:	eb41 0303 	adc.w	r3, r1, r3
 800ab2c:	f04f 0400 	mov.w	r4, #0
 800ab30:	f04f 0500 	mov.w	r5, #0
 800ab34:	00dd      	lsls	r5, r3, #3
 800ab36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ab3a:	00d4      	lsls	r4, r2, #3
 800ab3c:	4622      	mov	r2, r4
 800ab3e:	462b      	mov	r3, r5
 800ab40:	1814      	adds	r4, r2, r0
 800ab42:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800ab46:	414b      	adcs	r3, r1
 800ab48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ab4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	4618      	mov	r0, r3
 800ab54:	f04f 0100 	mov.w	r1, #0
 800ab58:	f04f 0200 	mov.w	r2, #0
 800ab5c:	f04f 0300 	mov.w	r3, #0
 800ab60:	008b      	lsls	r3, r1, #2
 800ab62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ab66:	0082      	lsls	r2, r0, #2
 800ab68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ab6c:	f7f6 f84c 	bl	8000c08 <__aeabi_uldivmod>
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	4b31      	ldr	r3, [pc, #196]	; (800ac3c <UART_SetConfig+0x734>)
 800ab76:	fba3 1302 	umull	r1, r3, r3, r2
 800ab7a:	095b      	lsrs	r3, r3, #5
 800ab7c:	2164      	movs	r1, #100	; 0x64
 800ab7e:	fb01 f303 	mul.w	r3, r1, r3
 800ab82:	1ad3      	subs	r3, r2, r3
 800ab84:	011b      	lsls	r3, r3, #4
 800ab86:	3332      	adds	r3, #50	; 0x32
 800ab88:	4a2c      	ldr	r2, [pc, #176]	; (800ac3c <UART_SetConfig+0x734>)
 800ab8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab8e:	095b      	lsrs	r3, r3, #5
 800ab90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab94:	441e      	add	r6, r3
 800ab96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f04f 0100 	mov.w	r1, #0
 800aba0:	4602      	mov	r2, r0
 800aba2:	460b      	mov	r3, r1
 800aba4:	1894      	adds	r4, r2, r2
 800aba6:	603c      	str	r4, [r7, #0]
 800aba8:	415b      	adcs	r3, r3
 800abaa:	607b      	str	r3, [r7, #4]
 800abac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abb0:	1812      	adds	r2, r2, r0
 800abb2:	eb41 0303 	adc.w	r3, r1, r3
 800abb6:	f04f 0400 	mov.w	r4, #0
 800abba:	f04f 0500 	mov.w	r5, #0
 800abbe:	00dd      	lsls	r5, r3, #3
 800abc0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800abc4:	00d4      	lsls	r4, r2, #3
 800abc6:	4622      	mov	r2, r4
 800abc8:	462b      	mov	r3, r5
 800abca:	1814      	adds	r4, r2, r0
 800abcc:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800abd0:	414b      	adcs	r3, r1
 800abd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800abd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	4618      	mov	r0, r3
 800abde:	f04f 0100 	mov.w	r1, #0
 800abe2:	f04f 0200 	mov.w	r2, #0
 800abe6:	f04f 0300 	mov.w	r3, #0
 800abea:	008b      	lsls	r3, r1, #2
 800abec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800abf0:	0082      	lsls	r2, r0, #2
 800abf2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800abf6:	f7f6 f807 	bl	8000c08 <__aeabi_uldivmod>
 800abfa:	4602      	mov	r2, r0
 800abfc:	460b      	mov	r3, r1
 800abfe:	4b0f      	ldr	r3, [pc, #60]	; (800ac3c <UART_SetConfig+0x734>)
 800ac00:	fba3 1302 	umull	r1, r3, r3, r2
 800ac04:	095b      	lsrs	r3, r3, #5
 800ac06:	2164      	movs	r1, #100	; 0x64
 800ac08:	fb01 f303 	mul.w	r3, r1, r3
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	011b      	lsls	r3, r3, #4
 800ac10:	3332      	adds	r3, #50	; 0x32
 800ac12:	4a0a      	ldr	r2, [pc, #40]	; (800ac3c <UART_SetConfig+0x734>)
 800ac14:	fba2 2303 	umull	r2, r3, r2, r3
 800ac18:	095b      	lsrs	r3, r3, #5
 800ac1a:	f003 020f 	and.w	r2, r3, #15
 800ac1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4432      	add	r2, r6
 800ac26:	609a      	str	r2, [r3, #8]
}
 800ac28:	e7ff      	b.n	800ac2a <UART_SetConfig+0x722>
 800ac2a:	bf00      	nop
 800ac2c:	37f4      	adds	r7, #244	; 0xf4
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac34:	40011000 	.word	0x40011000
 800ac38:	40011400 	.word	0x40011400
 800ac3c:	51eb851f 	.word	0x51eb851f

0800ac40 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800ac46:	f000 fb1f 	bl	800b288 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800ac4a:	4b19      	ldr	r3, [pc, #100]	; (800acb0 <MX_LWIP_Init+0x70>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800ac50:	4b18      	ldr	r3, [pc, #96]	; (800acb4 <MX_LWIP_Init+0x74>)
 800ac52:	2200      	movs	r2, #0
 800ac54:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800ac56:	4b18      	ldr	r3, [pc, #96]	; (800acb8 <MX_LWIP_Init+0x78>)
 800ac58:	2200      	movs	r2, #0
 800ac5a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800ac5c:	4b17      	ldr	r3, [pc, #92]	; (800acbc <MX_LWIP_Init+0x7c>)
 800ac5e:	9302      	str	r3, [sp, #8]
 800ac60:	4b17      	ldr	r3, [pc, #92]	; (800acc0 <MX_LWIP_Init+0x80>)
 800ac62:	9301      	str	r3, [sp, #4]
 800ac64:	2300      	movs	r3, #0
 800ac66:	9300      	str	r3, [sp, #0]
 800ac68:	4b13      	ldr	r3, [pc, #76]	; (800acb8 <MX_LWIP_Init+0x78>)
 800ac6a:	4a12      	ldr	r2, [pc, #72]	; (800acb4 <MX_LWIP_Init+0x74>)
 800ac6c:	4910      	ldr	r1, [pc, #64]	; (800acb0 <MX_LWIP_Init+0x70>)
 800ac6e:	4815      	ldr	r0, [pc, #84]	; (800acc4 <MX_LWIP_Init+0x84>)
 800ac70:	f000 ffb0 	bl	800bbd4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800ac74:	4813      	ldr	r0, [pc, #76]	; (800acc4 <MX_LWIP_Init+0x84>)
 800ac76:	f001 f967 	bl	800bf48 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800ac7a:	4b12      	ldr	r3, [pc, #72]	; (800acc4 <MX_LWIP_Init+0x84>)
 800ac7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac80:	089b      	lsrs	r3, r3, #2
 800ac82:	f003 0301 	and.w	r3, r3, #1
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d003      	beq.n	800ac94 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800ac8c:	480d      	ldr	r0, [pc, #52]	; (800acc4 <MX_LWIP_Init+0x84>)
 800ac8e:	f001 f96b 	bl	800bf68 <netif_set_up>
 800ac92:	e002      	b.n	800ac9a <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800ac94:	480b      	ldr	r0, [pc, #44]	; (800acc4 <MX_LWIP_Init+0x84>)
 800ac96:	f001 f9d3 	bl	800c040 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800ac9a:	490b      	ldr	r1, [pc, #44]	; (800acc8 <MX_LWIP_Init+0x88>)
 800ac9c:	4809      	ldr	r0, [pc, #36]	; (800acc4 <MX_LWIP_Init+0x84>)
 800ac9e:	f001 fa01 	bl	800c0a4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800aca2:	4808      	ldr	r0, [pc, #32]	; (800acc4 <MX_LWIP_Init+0x84>)
 800aca4:	f008 fa92 	bl	80131cc <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800aca8:	bf00      	nop
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	20000c24 	.word	0x20000c24
 800acb4:	20000c28 	.word	0x20000c28
 800acb8:	20000c2c 	.word	0x20000c2c
 800acbc:	08016b99 	.word	0x08016b99
 800acc0:	0800b0b5 	.word	0x0800b0b5
 800acc4:	20000bec 	.word	0x20000bec
 800acc8:	0800b121 	.word	0x0800b121

0800accc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b08e      	sub	sp, #56	; 0x38
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acd8:	2200      	movs	r2, #0
 800acda:	601a      	str	r2, [r3, #0]
 800acdc:	605a      	str	r2, [r3, #4]
 800acde:	609a      	str	r2, [r3, #8]
 800ace0:	60da      	str	r2, [r3, #12]
 800ace2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a46      	ldr	r2, [pc, #280]	; (800ae04 <HAL_ETH_MspInit+0x138>)
 800acea:	4293      	cmp	r3, r2
 800acec:	f040 8085 	bne.w	800adfa <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800acf0:	2300      	movs	r3, #0
 800acf2:	623b      	str	r3, [r7, #32]
 800acf4:	4b44      	ldr	r3, [pc, #272]	; (800ae08 <HAL_ETH_MspInit+0x13c>)
 800acf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acf8:	4a43      	ldr	r2, [pc, #268]	; (800ae08 <HAL_ETH_MspInit+0x13c>)
 800acfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800acfe:	6313      	str	r3, [r2, #48]	; 0x30
 800ad00:	4b41      	ldr	r3, [pc, #260]	; (800ae08 <HAL_ETH_MspInit+0x13c>)
 800ad02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad08:	623b      	str	r3, [r7, #32]
 800ad0a:	6a3b      	ldr	r3, [r7, #32]
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	61fb      	str	r3, [r7, #28]
 800ad10:	4b3d      	ldr	r3, [pc, #244]	; (800ae08 <HAL_ETH_MspInit+0x13c>)
 800ad12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad14:	4a3c      	ldr	r2, [pc, #240]	; (800ae08 <HAL_ETH_MspInit+0x13c>)
 800ad16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ad1a:	6313      	str	r3, [r2, #48]	; 0x30
 800ad1c:	4b3a      	ldr	r3, [pc, #232]	; (800ae08 <HAL_ETH_MspInit+0x13c>)
 800ad1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ad24:	61fb      	str	r3, [r7, #28]
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	2300      	movs	r3, #0
 800ad2a:	61bb      	str	r3, [r7, #24]
 800ad2c:	4b36      	ldr	r3, [pc, #216]	; (800ae08 <HAL_ETH_MspInit+0x13c>)
 800ad2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad30:	4a35      	ldr	r2, [pc, #212]	; (800ae08 <HAL_ETH_MspInit+0x13c>)
 800ad32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ad36:	6313      	str	r3, [r2, #48]	; 0x30
 800ad38:	4b33      	ldr	r3, [pc, #204]	; (800ae08 <HAL_ETH_MspInit+0x13c>)
 800ad3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad40:	61bb      	str	r3, [r7, #24]
 800ad42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ad44:	2300      	movs	r3, #0
 800ad46:	617b      	str	r3, [r7, #20]
 800ad48:	4b2f      	ldr	r3, [pc, #188]	; (800ae08 <HAL_ETH_MspInit+0x13c>)
 800ad4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad4c:	4a2e      	ldr	r2, [pc, #184]	; (800ae08 <HAL_ETH_MspInit+0x13c>)
 800ad4e:	f043 0304 	orr.w	r3, r3, #4
 800ad52:	6313      	str	r3, [r2, #48]	; 0x30
 800ad54:	4b2c      	ldr	r3, [pc, #176]	; (800ae08 <HAL_ETH_MspInit+0x13c>)
 800ad56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad58:	f003 0304 	and.w	r3, r3, #4
 800ad5c:	617b      	str	r3, [r7, #20]
 800ad5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad60:	2300      	movs	r3, #0
 800ad62:	613b      	str	r3, [r7, #16]
 800ad64:	4b28      	ldr	r3, [pc, #160]	; (800ae08 <HAL_ETH_MspInit+0x13c>)
 800ad66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad68:	4a27      	ldr	r2, [pc, #156]	; (800ae08 <HAL_ETH_MspInit+0x13c>)
 800ad6a:	f043 0301 	orr.w	r3, r3, #1
 800ad6e:	6313      	str	r3, [r2, #48]	; 0x30
 800ad70:	4b25      	ldr	r3, [pc, #148]	; (800ae08 <HAL_ETH_MspInit+0x13c>)
 800ad72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad74:	f003 0301 	and.w	r3, r3, #1
 800ad78:	613b      	str	r3, [r7, #16]
 800ad7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	60fb      	str	r3, [r7, #12]
 800ad80:	4b21      	ldr	r3, [pc, #132]	; (800ae08 <HAL_ETH_MspInit+0x13c>)
 800ad82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad84:	4a20      	ldr	r2, [pc, #128]	; (800ae08 <HAL_ETH_MspInit+0x13c>)
 800ad86:	f043 0302 	orr.w	r3, r3, #2
 800ad8a:	6313      	str	r3, [r2, #48]	; 0x30
 800ad8c:	4b1e      	ldr	r3, [pc, #120]	; (800ae08 <HAL_ETH_MspInit+0x13c>)
 800ad8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad90:	f003 0302 	and.w	r3, r3, #2
 800ad94:	60fb      	str	r3, [r7, #12]
 800ad96:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800ad98:	2332      	movs	r3, #50	; 0x32
 800ad9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad9c:	2302      	movs	r3, #2
 800ad9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ada0:	2300      	movs	r3, #0
 800ada2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ada4:	2303      	movs	r3, #3
 800ada6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ada8:	230b      	movs	r3, #11
 800adaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800adac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adb0:	4619      	mov	r1, r3
 800adb2:	4816      	ldr	r0, [pc, #88]	; (800ae0c <HAL_ETH_MspInit+0x140>)
 800adb4:	f7fc fd98 	bl	80078e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800adb8:	2386      	movs	r3, #134	; 0x86
 800adba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adbc:	2302      	movs	r3, #2
 800adbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adc0:	2300      	movs	r3, #0
 800adc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800adc4:	2303      	movs	r3, #3
 800adc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800adc8:	230b      	movs	r3, #11
 800adca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800adcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800add0:	4619      	mov	r1, r3
 800add2:	480f      	ldr	r0, [pc, #60]	; (800ae10 <HAL_ETH_MspInit+0x144>)
 800add4:	f7fc fd88 	bl	80078e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800add8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800addc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adde:	2302      	movs	r3, #2
 800ade0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ade2:	2300      	movs	r3, #0
 800ade4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ade6:	2303      	movs	r3, #3
 800ade8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800adea:	230b      	movs	r3, #11
 800adec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800adee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adf2:	4619      	mov	r1, r3
 800adf4:	4807      	ldr	r0, [pc, #28]	; (800ae14 <HAL_ETH_MspInit+0x148>)
 800adf6:	f7fc fd77 	bl	80078e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800adfa:	bf00      	nop
 800adfc:	3738      	adds	r7, #56	; 0x38
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	40028000 	.word	0x40028000
 800ae08:	40023800 	.word	0x40023800
 800ae0c:	40020800 	.word	0x40020800
 800ae10:	40020000 	.word	0x40020000
 800ae14:	40020400 	.word	0x40020400

0800ae18 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b086      	sub	sp, #24
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800ae20:	2300      	movs	r3, #0
 800ae22:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800ae24:	4b4e      	ldr	r3, [pc, #312]	; (800af60 <low_level_init+0x148>)
 800ae26:	4a4f      	ldr	r2, [pc, #316]	; (800af64 <low_level_init+0x14c>)
 800ae28:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800ae2a:	4b4d      	ldr	r3, [pc, #308]	; (800af60 <low_level_init+0x148>)
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 800ae30:	4b4b      	ldr	r3, [pc, #300]	; (800af60 <low_level_init+0x148>)
 800ae32:	2201      	movs	r2, #1
 800ae34:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x02;
 800ae36:	2302      	movs	r3, #2
 800ae38:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x00;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x00;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800ae42:	2300      	movs	r3, #0
 800ae44:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800ae46:	2300      	movs	r3, #0
 800ae48:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800ae4e:	4a44      	ldr	r2, [pc, #272]	; (800af60 <low_level_init+0x148>)
 800ae50:	f107 0308 	add.w	r3, r7, #8
 800ae54:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800ae56:	4b42      	ldr	r3, [pc, #264]	; (800af60 <low_level_init+0x148>)
 800ae58:	2200      	movs	r2, #0
 800ae5a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800ae5c:	4b40      	ldr	r3, [pc, #256]	; (800af60 <low_level_init+0x148>)
 800ae5e:	2200      	movs	r2, #0
 800ae60:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800ae62:	4b3f      	ldr	r3, [pc, #252]	; (800af60 <low_level_init+0x148>)
 800ae64:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800ae68:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ae6a:	483d      	ldr	r0, [pc, #244]	; (800af60 <low_level_init+0x148>)
 800ae6c:	f7fb fc9a 	bl	80067a4 <HAL_ETH_Init>
 800ae70:	4603      	mov	r3, r0
 800ae72:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800ae74:	7dfb      	ldrb	r3, [r7, #23]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d108      	bne.n	800ae8c <low_level_init+0x74>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ae80:	f043 0304 	orr.w	r3, r3, #4
 800ae84:	b2da      	uxtb	r2, r3
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800ae8c:	2304      	movs	r3, #4
 800ae8e:	4a36      	ldr	r2, [pc, #216]	; (800af68 <low_level_init+0x150>)
 800ae90:	4936      	ldr	r1, [pc, #216]	; (800af6c <low_level_init+0x154>)
 800ae92:	4833      	ldr	r0, [pc, #204]	; (800af60 <low_level_init+0x148>)
 800ae94:	f7fb fe22 	bl	8006adc <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800ae98:	2304      	movs	r3, #4
 800ae9a:	4a35      	ldr	r2, [pc, #212]	; (800af70 <low_level_init+0x158>)
 800ae9c:	4935      	ldr	r1, [pc, #212]	; (800af74 <low_level_init+0x15c>)
 800ae9e:	4830      	ldr	r0, [pc, #192]	; (800af60 <low_level_init+0x148>)
 800aea0:	f7fb fe85 	bl	8006bae <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2206      	movs	r2, #6
 800aea8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800aeac:	4b2c      	ldr	r3, [pc, #176]	; (800af60 <low_level_init+0x148>)
 800aeae:	695b      	ldr	r3, [r3, #20]
 800aeb0:	781a      	ldrb	r2, [r3, #0]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800aeb8:	4b29      	ldr	r3, [pc, #164]	; (800af60 <low_level_init+0x148>)
 800aeba:	695b      	ldr	r3, [r3, #20]
 800aebc:	785a      	ldrb	r2, [r3, #1]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800aec4:	4b26      	ldr	r3, [pc, #152]	; (800af60 <low_level_init+0x148>)
 800aec6:	695b      	ldr	r3, [r3, #20]
 800aec8:	789a      	ldrb	r2, [r3, #2]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800aed0:	4b23      	ldr	r3, [pc, #140]	; (800af60 <low_level_init+0x148>)
 800aed2:	695b      	ldr	r3, [r3, #20]
 800aed4:	78da      	ldrb	r2, [r3, #3]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800aedc:	4b20      	ldr	r3, [pc, #128]	; (800af60 <low_level_init+0x148>)
 800aede:	695b      	ldr	r3, [r3, #20]
 800aee0:	791a      	ldrb	r2, [r3, #4]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800aee8:	4b1d      	ldr	r3, [pc, #116]	; (800af60 <low_level_init+0x148>)
 800aeea:	695b      	ldr	r3, [r3, #20]
 800aeec:	795a      	ldrb	r2, [r3, #5]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800aefa:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800af02:	f043 030a 	orr.w	r3, r3, #10
 800af06:	b2da      	uxtb	r2, r3
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800af0e:	4814      	ldr	r0, [pc, #80]	; (800af60 <low_level_init+0x148>)
 800af10:	f7fc f872 	bl	8006ff8 <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 800af14:	f107 0310 	add.w	r3, r7, #16
 800af18:	461a      	mov	r2, r3
 800af1a:	2111      	movs	r1, #17
 800af1c:	4810      	ldr	r0, [pc, #64]	; (800af60 <low_level_init+0x148>)
 800af1e:	f7fb ff9d 	bl	8006e5c <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	f043 0303 	orr.w	r3, r3, #3
 800af28:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	461a      	mov	r2, r3
 800af2e:	2111      	movs	r1, #17
 800af30:	480b      	ldr	r0, [pc, #44]	; (800af60 <low_level_init+0x148>)
 800af32:	f7fb fffb 	bl	8006f2c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 800af36:	f107 0310 	add.w	r3, r7, #16
 800af3a:	461a      	mov	r2, r3
 800af3c:	2112      	movs	r1, #18
 800af3e:	4808      	ldr	r0, [pc, #32]	; (800af60 <low_level_init+0x148>)
 800af40:	f7fb ff8c 	bl	8006e5c <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	f043 0320 	orr.w	r3, r3, #32
 800af4a:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	461a      	mov	r2, r3
 800af50:	2112      	movs	r1, #18
 800af52:	4803      	ldr	r0, [pc, #12]	; (800af60 <low_level_init+0x148>)
 800af54:	f7fb ffea 	bl	8006f2c <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800af58:	bf00      	nop
 800af5a:	3718      	adds	r7, #24
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	20002500 	.word	0x20002500
 800af64:	40028000 	.word	0x40028000
 800af68:	20002548 	.word	0x20002548
 800af6c:	20000c30 	.word	0x20000c30
 800af70:	20000cb0 	.word	0x20000cb0
 800af74:	20002480 	.word	0x20002480

0800af78 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b08a      	sub	sp, #40	; 0x28
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800af82:	4b4b      	ldr	r3, [pc, #300]	; (800b0b0 <low_level_output+0x138>)
 800af84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800af8a:	2300      	movs	r3, #0
 800af8c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800af8e:	2300      	movs	r3, #0
 800af90:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800af92:	2300      	movs	r3, #0
 800af94:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800af96:	2300      	movs	r3, #0
 800af98:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800af9a:	4b45      	ldr	r3, [pc, #276]	; (800b0b0 <low_level_output+0x138>)
 800af9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af9e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	623b      	str	r3, [r7, #32]
 800afa8:	e05a      	b.n	800b060 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800afaa:	69bb      	ldr	r3, [r7, #24]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	da03      	bge.n	800afba <low_level_output+0x42>
      {
        errval = ERR_USE;
 800afb2:	23f8      	movs	r3, #248	; 0xf8
 800afb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800afb8:	e05c      	b.n	800b074 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800afba:	6a3b      	ldr	r3, [r7, #32]
 800afbc:	895b      	ldrh	r3, [r3, #10]
 800afbe:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800afc0:	2300      	movs	r3, #0
 800afc2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800afc4:	e02f      	b.n	800b026 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800afc6:	69fa      	ldr	r2, [r7, #28]
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	18d0      	adds	r0, r2, r3
 800afcc:	6a3b      	ldr	r3, [r7, #32]
 800afce:	685a      	ldr	r2, [r3, #4]
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	18d1      	adds	r1, r2, r3
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800afda:	3304      	adds	r3, #4
 800afdc:	461a      	mov	r2, r3
 800afde:	f00b fefb 	bl	8016dd8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	da03      	bge.n	800aff8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800aff0:	23f8      	movs	r3, #248	; 0xf8
 800aff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800aff6:	e03d      	b.n	800b074 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800affe:	693a      	ldr	r2, [r7, #16]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	4413      	add	r3, r2
 800b004:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800b008:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800b00a:	68ba      	ldr	r2, [r7, #8]
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	1ad3      	subs	r3, r2, r3
 800b010:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b014:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800b016:	697a      	ldr	r2, [r7, #20]
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	1ad3      	subs	r3, r2, r3
 800b01c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b020:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800b022:	2300      	movs	r3, #0
 800b024:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b026:	68fa      	ldr	r2, [r7, #12]
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	4413      	add	r3, r2
 800b02c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b030:	4293      	cmp	r3, r2
 800b032:	d8c8      	bhi.n	800afc6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800b034:	69fa      	ldr	r2, [r7, #28]
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	18d0      	adds	r0, r2, r3
 800b03a:	6a3b      	ldr	r3, [r7, #32]
 800b03c:	685a      	ldr	r2, [r3, #4]
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	4413      	add	r3, r2
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	4619      	mov	r1, r3
 800b046:	f00b fec7 	bl	8016dd8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800b04a:	693a      	ldr	r2, [r7, #16]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	4413      	add	r3, r2
 800b050:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800b052:	697a      	ldr	r2, [r7, #20]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	4413      	add	r3, r2
 800b058:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800b05a:	6a3b      	ldr	r3, [r7, #32]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	623b      	str	r3, [r7, #32]
 800b060:	6a3b      	ldr	r3, [r7, #32]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d1a1      	bne.n	800afaa <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800b066:	6979      	ldr	r1, [r7, #20]
 800b068:	4811      	ldr	r0, [pc, #68]	; (800b0b0 <low_level_output+0x138>)
 800b06a:	f7fb fe0d 	bl	8006c88 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800b06e:	2300      	movs	r3, #0
 800b070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800b074:	4b0e      	ldr	r3, [pc, #56]	; (800b0b0 <low_level_output+0x138>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b07c:	3314      	adds	r3, #20
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f003 0320 	and.w	r3, r3, #32
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00d      	beq.n	800b0a4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800b088:	4b09      	ldr	r3, [pc, #36]	; (800b0b0 <low_level_output+0x138>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b090:	3314      	adds	r3, #20
 800b092:	2220      	movs	r2, #32
 800b094:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800b096:	4b06      	ldr	r3, [pc, #24]	; (800b0b0 <low_level_output+0x138>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b09e:	3304      	adds	r3, #4
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800b0a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3728      	adds	r7, #40	; 0x28
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	20002500 	.word	0x20002500

0800b0b4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d106      	bne.n	800b0d0 <ethernetif_init+0x1c>
 800b0c2:	4b0e      	ldr	r3, [pc, #56]	; (800b0fc <ethernetif_init+0x48>)
 800b0c4:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800b0c8:	490d      	ldr	r1, [pc, #52]	; (800b100 <ethernetif_init+0x4c>)
 800b0ca:	480e      	ldr	r0, [pc, #56]	; (800b104 <ethernetif_init+0x50>)
 800b0cc:	f00c fbc8 	bl	8017860 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2273      	movs	r2, #115	; 0x73
 800b0d4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2274      	movs	r2, #116	; 0x74
 800b0dc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	4a09      	ldr	r2, [pc, #36]	; (800b108 <ethernetif_init+0x54>)
 800b0e4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	4a08      	ldr	r2, [pc, #32]	; (800b10c <ethernetif_init+0x58>)
 800b0ea:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f7ff fe93 	bl	800ae18 <low_level_init>

  return ERR_OK;
 800b0f2:	2300      	movs	r3, #0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	0801cc30 	.word	0x0801cc30
 800b100:	0801cc4c 	.word	0x0801cc4c
 800b104:	0801cc5c 	.word	0x0801cc5c
 800b108:	08015021 	.word	0x08015021
 800b10c:	0800af79 	.word	0x0800af79

0800b110 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b114:	f7fa fab8 	bl	8005688 <HAL_GetTick>
 800b118:	4603      	mov	r3, r0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	bd80      	pop	{r7, pc}
	...

0800b120 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800b128:	2300      	movs	r3, #0
 800b12a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800b12c:	2300      	movs	r3, #0
 800b12e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b136:	089b      	lsrs	r3, r3, #2
 800b138:	f003 0301 	and.w	r3, r3, #1
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d05d      	beq.n	800b1fe <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b142:	4b34      	ldr	r3, [pc, #208]	; (800b214 <ethernetif_update_config+0xf4>)
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d03f      	beq.n	800b1ca <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800b14a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b14e:	2100      	movs	r1, #0
 800b150:	4830      	ldr	r0, [pc, #192]	; (800b214 <ethernetif_update_config+0xf4>)
 800b152:	f7fb feeb 	bl	8006f2c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800b156:	f7fa fa97 	bl	8005688 <HAL_GetTick>
 800b15a:	4603      	mov	r3, r0
 800b15c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800b15e:	f107 0308 	add.w	r3, r7, #8
 800b162:	461a      	mov	r2, r3
 800b164:	2101      	movs	r1, #1
 800b166:	482b      	ldr	r0, [pc, #172]	; (800b214 <ethernetif_update_config+0xf4>)
 800b168:	f7fb fe78 	bl	8006e5c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800b16c:	f7fa fa8c 	bl	8005688 <HAL_GetTick>
 800b170:	4602      	mov	r2, r0
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	1ad3      	subs	r3, r2, r3
 800b176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b17a:	d828      	bhi.n	800b1ce <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	f003 0320 	and.w	r3, r3, #32
 800b182:	2b00      	cmp	r3, #0
 800b184:	d0eb      	beq.n	800b15e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800b186:	f107 0308 	add.w	r3, r7, #8
 800b18a:	461a      	mov	r2, r3
 800b18c:	211f      	movs	r1, #31
 800b18e:	4821      	ldr	r0, [pc, #132]	; (800b214 <ethernetif_update_config+0xf4>)
 800b190:	f7fb fe64 	bl	8006e5c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	f003 0310 	and.w	r3, r3, #16
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d004      	beq.n	800b1a8 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800b19e:	4b1d      	ldr	r3, [pc, #116]	; (800b214 <ethernetif_update_config+0xf4>)
 800b1a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b1a4:	60da      	str	r2, [r3, #12]
 800b1a6:	e002      	b.n	800b1ae <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800b1a8:	4b1a      	ldr	r3, [pc, #104]	; (800b214 <ethernetif_update_config+0xf4>)
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	f003 0304 	and.w	r3, r3, #4
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d003      	beq.n	800b1c0 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800b1b8:	4b16      	ldr	r3, [pc, #88]	; (800b214 <ethernetif_update_config+0xf4>)
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	609a      	str	r2, [r3, #8]
 800b1be:	e016      	b.n	800b1ee <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800b1c0:	4b14      	ldr	r3, [pc, #80]	; (800b214 <ethernetif_update_config+0xf4>)
 800b1c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b1c6:	609a      	str	r2, [r3, #8]
 800b1c8:	e011      	b.n	800b1ee <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800b1ca:	bf00      	nop
 800b1cc:	e000      	b.n	800b1d0 <ethernetif_update_config+0xb0>
          goto error;
 800b1ce:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b1d0:	4b10      	ldr	r3, [pc, #64]	; (800b214 <ethernetif_update_config+0xf4>)
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	08db      	lsrs	r3, r3, #3
 800b1d6:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800b1d8:	4b0e      	ldr	r3, [pc, #56]	; (800b214 <ethernetif_update_config+0xf4>)
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	085b      	lsrs	r3, r3, #1
 800b1de:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	2100      	movs	r1, #0
 800b1e8:	480a      	ldr	r0, [pc, #40]	; (800b214 <ethernetif_update_config+0xf4>)
 800b1ea:	f7fb fe9f 	bl	8006f2c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800b1ee:	2100      	movs	r1, #0
 800b1f0:	4808      	ldr	r0, [pc, #32]	; (800b214 <ethernetif_update_config+0xf4>)
 800b1f2:	f7fb ff5f 	bl	80070b4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800b1f6:	4807      	ldr	r0, [pc, #28]	; (800b214 <ethernetif_update_config+0xf4>)
 800b1f8:	f7fb fefe 	bl	8006ff8 <HAL_ETH_Start>
 800b1fc:	e002      	b.n	800b204 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800b1fe:	4805      	ldr	r0, [pc, #20]	; (800b214 <ethernetif_update_config+0xf4>)
 800b200:	f7fb ff29 	bl	8007056 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 f807 	bl	800b218 <ethernetif_notify_conn_changed>
}
 800b20a:	bf00      	nop
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	20002500 	.word	0x20002500

0800b218 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800b220:	bf00      	nop
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	4603      	mov	r3, r0
 800b234:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b236:	88fb      	ldrh	r3, [r7, #6]
 800b238:	021b      	lsls	r3, r3, #8
 800b23a:	b21a      	sxth	r2, r3
 800b23c:	88fb      	ldrh	r3, [r7, #6]
 800b23e:	0a1b      	lsrs	r3, r3, #8
 800b240:	b29b      	uxth	r3, r3
 800b242:	b21b      	sxth	r3, r3
 800b244:	4313      	orrs	r3, r2
 800b246:	b21b      	sxth	r3, r3
 800b248:	b29b      	uxth	r3, r3
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	370c      	adds	r7, #12
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr

0800b256 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b256:	b480      	push	{r7}
 800b258:	b083      	sub	sp, #12
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	061a      	lsls	r2, r3, #24
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	021b      	lsls	r3, r3, #8
 800b266:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b26a:	431a      	orrs	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	0a1b      	lsrs	r3, r3, #8
 800b270:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b274:	431a      	orrs	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	0e1b      	lsrs	r3, r3, #24
 800b27a:	4313      	orrs	r3, r2
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b28e:	2300      	movs	r3, #0
 800b290:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800b292:	f000 f8d5 	bl	800b440 <mem_init>
  memp_init();
 800b296:	f000 fbdb 	bl	800ba50 <memp_init>
  pbuf_init();
  netif_init();
 800b29a:	f000 fc93 	bl	800bbc4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b29e:	f006 ff5d 	bl	801215c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b2a2:	f001 fcfd 	bl	800cca0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b2a6:	f006 ff11 	bl	80120cc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b2aa:	bf00      	nop
 800b2ac:	3708      	adds	r7, #8
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
	...

0800b2b4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b2be:	4b05      	ldr	r3, [pc, #20]	; (800b2d4 <ptr_to_mem+0x20>)
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	88fb      	ldrh	r3, [r7, #6]
 800b2c4:	4413      	add	r3, r2
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	370c      	adds	r7, #12
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop
 800b2d4:	20000424 	.word	0x20000424

0800b2d8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b2e0:	4b05      	ldr	r3, [pc, #20]	; (800b2f8 <mem_to_ptr+0x20>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	1ad3      	subs	r3, r2, r3
 800b2e8:	b29b      	uxth	r3, r3
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	370c      	adds	r7, #12
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop
 800b2f8:	20000424 	.word	0x20000424

0800b2fc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b2fc:	b590      	push	{r4, r7, lr}
 800b2fe:	b085      	sub	sp, #20
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b304:	4b45      	ldr	r3, [pc, #276]	; (800b41c <plug_holes+0x120>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d206      	bcs.n	800b31c <plug_holes+0x20>
 800b30e:	4b44      	ldr	r3, [pc, #272]	; (800b420 <plug_holes+0x124>)
 800b310:	f240 12df 	movw	r2, #479	; 0x1df
 800b314:	4943      	ldr	r1, [pc, #268]	; (800b424 <plug_holes+0x128>)
 800b316:	4844      	ldr	r0, [pc, #272]	; (800b428 <plug_holes+0x12c>)
 800b318:	f00c faa2 	bl	8017860 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b31c:	4b43      	ldr	r3, [pc, #268]	; (800b42c <plug_holes+0x130>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	429a      	cmp	r2, r3
 800b324:	d306      	bcc.n	800b334 <plug_holes+0x38>
 800b326:	4b3e      	ldr	r3, [pc, #248]	; (800b420 <plug_holes+0x124>)
 800b328:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b32c:	4940      	ldr	r1, [pc, #256]	; (800b430 <plug_holes+0x134>)
 800b32e:	483e      	ldr	r0, [pc, #248]	; (800b428 <plug_holes+0x12c>)
 800b330:	f00c fa96 	bl	8017860 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	791b      	ldrb	r3, [r3, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d006      	beq.n	800b34a <plug_holes+0x4e>
 800b33c:	4b38      	ldr	r3, [pc, #224]	; (800b420 <plug_holes+0x124>)
 800b33e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b342:	493c      	ldr	r1, [pc, #240]	; (800b434 <plug_holes+0x138>)
 800b344:	4838      	ldr	r0, [pc, #224]	; (800b428 <plug_holes+0x12c>)
 800b346:	f00c fa8b 	bl	8017860 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	881b      	ldrh	r3, [r3, #0]
 800b34e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b352:	d906      	bls.n	800b362 <plug_holes+0x66>
 800b354:	4b32      	ldr	r3, [pc, #200]	; (800b420 <plug_holes+0x124>)
 800b356:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b35a:	4937      	ldr	r1, [pc, #220]	; (800b438 <plug_holes+0x13c>)
 800b35c:	4832      	ldr	r0, [pc, #200]	; (800b428 <plug_holes+0x12c>)
 800b35e:	f00c fa7f 	bl	8017860 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	881b      	ldrh	r3, [r3, #0]
 800b366:	4618      	mov	r0, r3
 800b368:	f7ff ffa4 	bl	800b2b4 <ptr_to_mem>
 800b36c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	429a      	cmp	r2, r3
 800b374:	d024      	beq.n	800b3c0 <plug_holes+0xc4>
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	791b      	ldrb	r3, [r3, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d120      	bne.n	800b3c0 <plug_holes+0xc4>
 800b37e:	4b2b      	ldr	r3, [pc, #172]	; (800b42c <plug_holes+0x130>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	68fa      	ldr	r2, [r7, #12]
 800b384:	429a      	cmp	r2, r3
 800b386:	d01b      	beq.n	800b3c0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b388:	4b2c      	ldr	r3, [pc, #176]	; (800b43c <plug_holes+0x140>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	68fa      	ldr	r2, [r7, #12]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d102      	bne.n	800b398 <plug_holes+0x9c>
      lfree = mem;
 800b392:	4a2a      	ldr	r2, [pc, #168]	; (800b43c <plug_holes+0x140>)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	881a      	ldrh	r2, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	881b      	ldrh	r3, [r3, #0]
 800b3a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b3a8:	d00a      	beq.n	800b3c0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	881b      	ldrh	r3, [r3, #0]
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7ff ff80 	bl	800b2b4 <ptr_to_mem>
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f7ff ff8e 	bl	800b2d8 <mem_to_ptr>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	885b      	ldrh	r3, [r3, #2]
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7ff ff75 	bl	800b2b4 <ptr_to_mem>
 800b3ca:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b3cc:	68ba      	ldr	r2, [r7, #8]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d01f      	beq.n	800b414 <plug_holes+0x118>
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	791b      	ldrb	r3, [r3, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d11b      	bne.n	800b414 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b3dc:	4b17      	ldr	r3, [pc, #92]	; (800b43c <plug_holes+0x140>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d102      	bne.n	800b3ec <plug_holes+0xf0>
      lfree = pmem;
 800b3e6:	4a15      	ldr	r2, [pc, #84]	; (800b43c <plug_holes+0x140>)
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	881a      	ldrh	r2, [r3, #0]
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	881b      	ldrh	r3, [r3, #0]
 800b3f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b3fc:	d00a      	beq.n	800b414 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	881b      	ldrh	r3, [r3, #0]
 800b402:	4618      	mov	r0, r3
 800b404:	f7ff ff56 	bl	800b2b4 <ptr_to_mem>
 800b408:	4604      	mov	r4, r0
 800b40a:	68b8      	ldr	r0, [r7, #8]
 800b40c:	f7ff ff64 	bl	800b2d8 <mem_to_ptr>
 800b410:	4603      	mov	r3, r0
 800b412:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b414:	bf00      	nop
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd90      	pop	{r4, r7, pc}
 800b41c:	20000424 	.word	0x20000424
 800b420:	0801cc84 	.word	0x0801cc84
 800b424:	0801ccb4 	.word	0x0801ccb4
 800b428:	0801cccc 	.word	0x0801cccc
 800b42c:	20000428 	.word	0x20000428
 800b430:	0801ccf4 	.word	0x0801ccf4
 800b434:	0801cd10 	.word	0x0801cd10
 800b438:	0801cd2c 	.word	0x0801cd2c
 800b43c:	2000042c 	.word	0x2000042c

0800b440 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b446:	4b18      	ldr	r3, [pc, #96]	; (800b4a8 <mem_init+0x68>)
 800b448:	3303      	adds	r3, #3
 800b44a:	f023 0303 	bic.w	r3, r3, #3
 800b44e:	461a      	mov	r2, r3
 800b450:	4b16      	ldr	r3, [pc, #88]	; (800b4ac <mem_init+0x6c>)
 800b452:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b454:	4b15      	ldr	r3, [pc, #84]	; (800b4ac <mem_init+0x6c>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b460:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b46e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b472:	f7ff ff1f 	bl	800b2b4 <ptr_to_mem>
 800b476:	4603      	mov	r3, r0
 800b478:	4a0d      	ldr	r2, [pc, #52]	; (800b4b0 <mem_init+0x70>)
 800b47a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b47c:	4b0c      	ldr	r3, [pc, #48]	; (800b4b0 <mem_init+0x70>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2201      	movs	r2, #1
 800b482:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b484:	4b0a      	ldr	r3, [pc, #40]	; (800b4b0 <mem_init+0x70>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b48c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b48e:	4b08      	ldr	r3, [pc, #32]	; (800b4b0 <mem_init+0x70>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b496:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b498:	4b04      	ldr	r3, [pc, #16]	; (800b4ac <mem_init+0x6c>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a05      	ldr	r2, [pc, #20]	; (800b4b4 <mem_init+0x74>)
 800b49e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800b4a0:	bf00      	nop
 800b4a2:	3708      	adds	r7, #8
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	20003d30 	.word	0x20003d30
 800b4ac:	20000424 	.word	0x20000424
 800b4b0:	20000428 	.word	0x20000428
 800b4b4:	2000042c 	.word	0x2000042c

0800b4b8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b086      	sub	sp, #24
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f7ff ff09 	bl	800b2d8 <mem_to_ptr>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	881b      	ldrh	r3, [r3, #0]
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7ff fef0 	bl	800b2b4 <ptr_to_mem>
 800b4d4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	885b      	ldrh	r3, [r3, #2]
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7ff feea 	bl	800b2b4 <ptr_to_mem>
 800b4e0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	881b      	ldrh	r3, [r3, #0]
 800b4e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b4ea:	d818      	bhi.n	800b51e <mem_link_valid+0x66>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	885b      	ldrh	r3, [r3, #2]
 800b4f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b4f4:	d813      	bhi.n	800b51e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b4fa:	8afa      	ldrh	r2, [r7, #22]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d004      	beq.n	800b50a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	881b      	ldrh	r3, [r3, #0]
 800b504:	8afa      	ldrh	r2, [r7, #22]
 800b506:	429a      	cmp	r2, r3
 800b508:	d109      	bne.n	800b51e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b50a:	4b08      	ldr	r3, [pc, #32]	; (800b52c <mem_link_valid+0x74>)
 800b50c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b50e:	693a      	ldr	r2, [r7, #16]
 800b510:	429a      	cmp	r2, r3
 800b512:	d006      	beq.n	800b522 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	885b      	ldrh	r3, [r3, #2]
 800b518:	8afa      	ldrh	r2, [r7, #22]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d001      	beq.n	800b522 <mem_link_valid+0x6a>
    return 0;
 800b51e:	2300      	movs	r3, #0
 800b520:	e000      	b.n	800b524 <mem_link_valid+0x6c>
  }
  return 1;
 800b522:	2301      	movs	r3, #1
}
 800b524:	4618      	mov	r0, r3
 800b526:	3718      	adds	r7, #24
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	20000428 	.word	0x20000428

0800b530 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d04c      	beq.n	800b5d8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f003 0303 	and.w	r3, r3, #3
 800b544:	2b00      	cmp	r3, #0
 800b546:	d007      	beq.n	800b558 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b548:	4b25      	ldr	r3, [pc, #148]	; (800b5e0 <mem_free+0xb0>)
 800b54a:	f240 2273 	movw	r2, #627	; 0x273
 800b54e:	4925      	ldr	r1, [pc, #148]	; (800b5e4 <mem_free+0xb4>)
 800b550:	4825      	ldr	r0, [pc, #148]	; (800b5e8 <mem_free+0xb8>)
 800b552:	f00c f985 	bl	8017860 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b556:	e040      	b.n	800b5da <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	3b08      	subs	r3, #8
 800b55c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b55e:	4b23      	ldr	r3, [pc, #140]	; (800b5ec <mem_free+0xbc>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	68fa      	ldr	r2, [r7, #12]
 800b564:	429a      	cmp	r2, r3
 800b566:	d306      	bcc.n	800b576 <mem_free+0x46>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f103 020c 	add.w	r2, r3, #12
 800b56e:	4b20      	ldr	r3, [pc, #128]	; (800b5f0 <mem_free+0xc0>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	429a      	cmp	r2, r3
 800b574:	d907      	bls.n	800b586 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b576:	4b1a      	ldr	r3, [pc, #104]	; (800b5e0 <mem_free+0xb0>)
 800b578:	f240 227f 	movw	r2, #639	; 0x27f
 800b57c:	491d      	ldr	r1, [pc, #116]	; (800b5f4 <mem_free+0xc4>)
 800b57e:	481a      	ldr	r0, [pc, #104]	; (800b5e8 <mem_free+0xb8>)
 800b580:	f00c f96e 	bl	8017860 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b584:	e029      	b.n	800b5da <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	791b      	ldrb	r3, [r3, #4]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d107      	bne.n	800b59e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b58e:	4b14      	ldr	r3, [pc, #80]	; (800b5e0 <mem_free+0xb0>)
 800b590:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b594:	4918      	ldr	r1, [pc, #96]	; (800b5f8 <mem_free+0xc8>)
 800b596:	4814      	ldr	r0, [pc, #80]	; (800b5e8 <mem_free+0xb8>)
 800b598:	f00c f962 	bl	8017860 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b59c:	e01d      	b.n	800b5da <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f7ff ff8a 	bl	800b4b8 <mem_link_valid>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d107      	bne.n	800b5ba <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b5aa:	4b0d      	ldr	r3, [pc, #52]	; (800b5e0 <mem_free+0xb0>)
 800b5ac:	f240 2295 	movw	r2, #661	; 0x295
 800b5b0:	4912      	ldr	r1, [pc, #72]	; (800b5fc <mem_free+0xcc>)
 800b5b2:	480d      	ldr	r0, [pc, #52]	; (800b5e8 <mem_free+0xb8>)
 800b5b4:	f00c f954 	bl	8017860 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b5b8:	e00f      	b.n	800b5da <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b5c0:	4b0f      	ldr	r3, [pc, #60]	; (800b600 <mem_free+0xd0>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d202      	bcs.n	800b5d0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b5ca:	4a0d      	ldr	r2, [pc, #52]	; (800b600 <mem_free+0xd0>)
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f7ff fe93 	bl	800b2fc <plug_holes>
 800b5d6:	e000      	b.n	800b5da <mem_free+0xaa>
    return;
 800b5d8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800b5da:	3710      	adds	r7, #16
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	0801cc84 	.word	0x0801cc84
 800b5e4:	0801cd58 	.word	0x0801cd58
 800b5e8:	0801cccc 	.word	0x0801cccc
 800b5ec:	20000424 	.word	0x20000424
 800b5f0:	20000428 	.word	0x20000428
 800b5f4:	0801cd7c 	.word	0x0801cd7c
 800b5f8:	0801cd98 	.word	0x0801cd98
 800b5fc:	0801cdc0 	.word	0x0801cdc0
 800b600:	2000042c 	.word	0x2000042c

0800b604 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b088      	sub	sp, #32
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	460b      	mov	r3, r1
 800b60e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b610:	887b      	ldrh	r3, [r7, #2]
 800b612:	3303      	adds	r3, #3
 800b614:	b29b      	uxth	r3, r3
 800b616:	f023 0303 	bic.w	r3, r3, #3
 800b61a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b61c:	8bfb      	ldrh	r3, [r7, #30]
 800b61e:	2b0b      	cmp	r3, #11
 800b620:	d801      	bhi.n	800b626 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b622:	230c      	movs	r3, #12
 800b624:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b626:	8bfb      	ldrh	r3, [r7, #30]
 800b628:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b62c:	d803      	bhi.n	800b636 <mem_trim+0x32>
 800b62e:	8bfa      	ldrh	r2, [r7, #30]
 800b630:	887b      	ldrh	r3, [r7, #2]
 800b632:	429a      	cmp	r2, r3
 800b634:	d201      	bcs.n	800b63a <mem_trim+0x36>
    return NULL;
 800b636:	2300      	movs	r3, #0
 800b638:	e0cc      	b.n	800b7d4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b63a:	4b68      	ldr	r3, [pc, #416]	; (800b7dc <mem_trim+0x1d8>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	429a      	cmp	r2, r3
 800b642:	d304      	bcc.n	800b64e <mem_trim+0x4a>
 800b644:	4b66      	ldr	r3, [pc, #408]	; (800b7e0 <mem_trim+0x1dc>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d306      	bcc.n	800b65c <mem_trim+0x58>
 800b64e:	4b65      	ldr	r3, [pc, #404]	; (800b7e4 <mem_trim+0x1e0>)
 800b650:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b654:	4964      	ldr	r1, [pc, #400]	; (800b7e8 <mem_trim+0x1e4>)
 800b656:	4865      	ldr	r0, [pc, #404]	; (800b7ec <mem_trim+0x1e8>)
 800b658:	f00c f902 	bl	8017860 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b65c:	4b5f      	ldr	r3, [pc, #380]	; (800b7dc <mem_trim+0x1d8>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	429a      	cmp	r2, r3
 800b664:	d304      	bcc.n	800b670 <mem_trim+0x6c>
 800b666:	4b5e      	ldr	r3, [pc, #376]	; (800b7e0 <mem_trim+0x1dc>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d301      	bcc.n	800b674 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	e0af      	b.n	800b7d4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	3b08      	subs	r3, #8
 800b678:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b67a:	69b8      	ldr	r0, [r7, #24]
 800b67c:	f7ff fe2c 	bl	800b2d8 <mem_to_ptr>
 800b680:	4603      	mov	r3, r0
 800b682:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b684:	69bb      	ldr	r3, [r7, #24]
 800b686:	881a      	ldrh	r2, [r3, #0]
 800b688:	8afb      	ldrh	r3, [r7, #22]
 800b68a:	1ad3      	subs	r3, r2, r3
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	3b08      	subs	r3, #8
 800b690:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b692:	8bfa      	ldrh	r2, [r7, #30]
 800b694:	8abb      	ldrh	r3, [r7, #20]
 800b696:	429a      	cmp	r2, r3
 800b698:	d906      	bls.n	800b6a8 <mem_trim+0xa4>
 800b69a:	4b52      	ldr	r3, [pc, #328]	; (800b7e4 <mem_trim+0x1e0>)
 800b69c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b6a0:	4953      	ldr	r1, [pc, #332]	; (800b7f0 <mem_trim+0x1ec>)
 800b6a2:	4852      	ldr	r0, [pc, #328]	; (800b7ec <mem_trim+0x1e8>)
 800b6a4:	f00c f8dc 	bl	8017860 <iprintf>
  if (newsize > size) {
 800b6a8:	8bfa      	ldrh	r2, [r7, #30]
 800b6aa:	8abb      	ldrh	r3, [r7, #20]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d901      	bls.n	800b6b4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	e08f      	b.n	800b7d4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800b6b4:	8bfa      	ldrh	r2, [r7, #30]
 800b6b6:	8abb      	ldrh	r3, [r7, #20]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d101      	bne.n	800b6c0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	e089      	b.n	800b7d4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	881b      	ldrh	r3, [r3, #0]
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7ff fdf5 	bl	800b2b4 <ptr_to_mem>
 800b6ca:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	791b      	ldrb	r3, [r3, #4]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d13f      	bne.n	800b754 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	881b      	ldrh	r3, [r3, #0]
 800b6d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b6dc:	d106      	bne.n	800b6ec <mem_trim+0xe8>
 800b6de:	4b41      	ldr	r3, [pc, #260]	; (800b7e4 <mem_trim+0x1e0>)
 800b6e0:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b6e4:	4943      	ldr	r1, [pc, #268]	; (800b7f4 <mem_trim+0x1f0>)
 800b6e6:	4841      	ldr	r0, [pc, #260]	; (800b7ec <mem_trim+0x1e8>)
 800b6e8:	f00c f8ba 	bl	8017860 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	881b      	ldrh	r3, [r3, #0]
 800b6f0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b6f2:	8afa      	ldrh	r2, [r7, #22]
 800b6f4:	8bfb      	ldrh	r3, [r7, #30]
 800b6f6:	4413      	add	r3, r2
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	3308      	adds	r3, #8
 800b6fc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b6fe:	4b3e      	ldr	r3, [pc, #248]	; (800b7f8 <mem_trim+0x1f4>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	693a      	ldr	r2, [r7, #16]
 800b704:	429a      	cmp	r2, r3
 800b706:	d106      	bne.n	800b716 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800b708:	89fb      	ldrh	r3, [r7, #14]
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7ff fdd2 	bl	800b2b4 <ptr_to_mem>
 800b710:	4603      	mov	r3, r0
 800b712:	4a39      	ldr	r2, [pc, #228]	; (800b7f8 <mem_trim+0x1f4>)
 800b714:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b716:	89fb      	ldrh	r3, [r7, #14]
 800b718:	4618      	mov	r0, r3
 800b71a:	f7ff fdcb 	bl	800b2b4 <ptr_to_mem>
 800b71e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	2200      	movs	r2, #0
 800b724:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	89ba      	ldrh	r2, [r7, #12]
 800b72a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	8afa      	ldrh	r2, [r7, #22]
 800b730:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b732:	69bb      	ldr	r3, [r7, #24]
 800b734:	89fa      	ldrh	r2, [r7, #14]
 800b736:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	881b      	ldrh	r3, [r3, #0]
 800b73c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b740:	d047      	beq.n	800b7d2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	881b      	ldrh	r3, [r3, #0]
 800b746:	4618      	mov	r0, r3
 800b748:	f7ff fdb4 	bl	800b2b4 <ptr_to_mem>
 800b74c:	4602      	mov	r2, r0
 800b74e:	89fb      	ldrh	r3, [r7, #14]
 800b750:	8053      	strh	r3, [r2, #2]
 800b752:	e03e      	b.n	800b7d2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b754:	8bfb      	ldrh	r3, [r7, #30]
 800b756:	f103 0214 	add.w	r2, r3, #20
 800b75a:	8abb      	ldrh	r3, [r7, #20]
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d838      	bhi.n	800b7d2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b760:	8afa      	ldrh	r2, [r7, #22]
 800b762:	8bfb      	ldrh	r3, [r7, #30]
 800b764:	4413      	add	r3, r2
 800b766:	b29b      	uxth	r3, r3
 800b768:	3308      	adds	r3, #8
 800b76a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b76c:	69bb      	ldr	r3, [r7, #24]
 800b76e:	881b      	ldrh	r3, [r3, #0]
 800b770:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b774:	d106      	bne.n	800b784 <mem_trim+0x180>
 800b776:	4b1b      	ldr	r3, [pc, #108]	; (800b7e4 <mem_trim+0x1e0>)
 800b778:	f240 3216 	movw	r2, #790	; 0x316
 800b77c:	491d      	ldr	r1, [pc, #116]	; (800b7f4 <mem_trim+0x1f0>)
 800b77e:	481b      	ldr	r0, [pc, #108]	; (800b7ec <mem_trim+0x1e8>)
 800b780:	f00c f86e 	bl	8017860 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b784:	89fb      	ldrh	r3, [r7, #14]
 800b786:	4618      	mov	r0, r3
 800b788:	f7ff fd94 	bl	800b2b4 <ptr_to_mem>
 800b78c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b78e:	4b1a      	ldr	r3, [pc, #104]	; (800b7f8 <mem_trim+0x1f4>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	693a      	ldr	r2, [r7, #16]
 800b794:	429a      	cmp	r2, r3
 800b796:	d202      	bcs.n	800b79e <mem_trim+0x19a>
      lfree = mem2;
 800b798:	4a17      	ldr	r2, [pc, #92]	; (800b7f8 <mem_trim+0x1f4>)
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	881a      	ldrh	r2, [r3, #0]
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	8afa      	ldrh	r2, [r7, #22]
 800b7b0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	89fa      	ldrh	r2, [r7, #14]
 800b7b6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	881b      	ldrh	r3, [r3, #0]
 800b7bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b7c0:	d007      	beq.n	800b7d2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	881b      	ldrh	r3, [r3, #0]
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7ff fd74 	bl	800b2b4 <ptr_to_mem>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	89fb      	ldrh	r3, [r7, #14]
 800b7d0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800b7d2:	687b      	ldr	r3, [r7, #4]
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3720      	adds	r7, #32
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	20000424 	.word	0x20000424
 800b7e0:	20000428 	.word	0x20000428
 800b7e4:	0801cc84 	.word	0x0801cc84
 800b7e8:	0801cdf4 	.word	0x0801cdf4
 800b7ec:	0801cccc 	.word	0x0801cccc
 800b7f0:	0801ce0c 	.word	0x0801ce0c
 800b7f4:	0801ce2c 	.word	0x0801ce2c
 800b7f8:	2000042c 	.word	0x2000042c

0800b7fc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b088      	sub	sp, #32
 800b800:	af00      	add	r7, sp, #0
 800b802:	4603      	mov	r3, r0
 800b804:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b806:	88fb      	ldrh	r3, [r7, #6]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d101      	bne.n	800b810 <mem_malloc+0x14>
    return NULL;
 800b80c:	2300      	movs	r3, #0
 800b80e:	e0d9      	b.n	800b9c4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b810:	88fb      	ldrh	r3, [r7, #6]
 800b812:	3303      	adds	r3, #3
 800b814:	b29b      	uxth	r3, r3
 800b816:	f023 0303 	bic.w	r3, r3, #3
 800b81a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b81c:	8bbb      	ldrh	r3, [r7, #28]
 800b81e:	2b0b      	cmp	r3, #11
 800b820:	d801      	bhi.n	800b826 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b822:	230c      	movs	r3, #12
 800b824:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b826:	8bbb      	ldrh	r3, [r7, #28]
 800b828:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b82c:	d803      	bhi.n	800b836 <mem_malloc+0x3a>
 800b82e:	8bba      	ldrh	r2, [r7, #28]
 800b830:	88fb      	ldrh	r3, [r7, #6]
 800b832:	429a      	cmp	r2, r3
 800b834:	d201      	bcs.n	800b83a <mem_malloc+0x3e>
    return NULL;
 800b836:	2300      	movs	r3, #0
 800b838:	e0c4      	b.n	800b9c4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b83a:	4b64      	ldr	r3, [pc, #400]	; (800b9cc <mem_malloc+0x1d0>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4618      	mov	r0, r3
 800b840:	f7ff fd4a 	bl	800b2d8 <mem_to_ptr>
 800b844:	4603      	mov	r3, r0
 800b846:	83fb      	strh	r3, [r7, #30]
 800b848:	e0b4      	b.n	800b9b4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b84a:	8bfb      	ldrh	r3, [r7, #30]
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7ff fd31 	bl	800b2b4 <ptr_to_mem>
 800b852:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	791b      	ldrb	r3, [r3, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	f040 80a4 	bne.w	800b9a6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	881b      	ldrh	r3, [r3, #0]
 800b862:	461a      	mov	r2, r3
 800b864:	8bfb      	ldrh	r3, [r7, #30]
 800b866:	1ad3      	subs	r3, r2, r3
 800b868:	f1a3 0208 	sub.w	r2, r3, #8
 800b86c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b86e:	429a      	cmp	r2, r3
 800b870:	f0c0 8099 	bcc.w	800b9a6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	881b      	ldrh	r3, [r3, #0]
 800b878:	461a      	mov	r2, r3
 800b87a:	8bfb      	ldrh	r3, [r7, #30]
 800b87c:	1ad3      	subs	r3, r2, r3
 800b87e:	f1a3 0208 	sub.w	r2, r3, #8
 800b882:	8bbb      	ldrh	r3, [r7, #28]
 800b884:	3314      	adds	r3, #20
 800b886:	429a      	cmp	r2, r3
 800b888:	d333      	bcc.n	800b8f2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b88a:	8bfa      	ldrh	r2, [r7, #30]
 800b88c:	8bbb      	ldrh	r3, [r7, #28]
 800b88e:	4413      	add	r3, r2
 800b890:	b29b      	uxth	r3, r3
 800b892:	3308      	adds	r3, #8
 800b894:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b896:	8a7b      	ldrh	r3, [r7, #18]
 800b898:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b89c:	d106      	bne.n	800b8ac <mem_malloc+0xb0>
 800b89e:	4b4c      	ldr	r3, [pc, #304]	; (800b9d0 <mem_malloc+0x1d4>)
 800b8a0:	f240 3287 	movw	r2, #903	; 0x387
 800b8a4:	494b      	ldr	r1, [pc, #300]	; (800b9d4 <mem_malloc+0x1d8>)
 800b8a6:	484c      	ldr	r0, [pc, #304]	; (800b9d8 <mem_malloc+0x1dc>)
 800b8a8:	f00b ffda 	bl	8017860 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b8ac:	8a7b      	ldrh	r3, [r7, #18]
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7ff fd00 	bl	800b2b4 <ptr_to_mem>
 800b8b4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	881a      	ldrh	r2, [r3, #0]
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	8bfa      	ldrh	r2, [r7, #30]
 800b8c8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	8a7a      	ldrh	r2, [r7, #18]
 800b8ce:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	881b      	ldrh	r3, [r3, #0]
 800b8da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8de:	d00b      	beq.n	800b8f8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	881b      	ldrh	r3, [r3, #0]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7ff fce5 	bl	800b2b4 <ptr_to_mem>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	8a7b      	ldrh	r3, [r7, #18]
 800b8ee:	8053      	strh	r3, [r2, #2]
 800b8f0:	e002      	b.n	800b8f8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b8f8:	4b34      	ldr	r3, [pc, #208]	; (800b9cc <mem_malloc+0x1d0>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	697a      	ldr	r2, [r7, #20]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d127      	bne.n	800b952 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800b902:	4b32      	ldr	r3, [pc, #200]	; (800b9cc <mem_malloc+0x1d0>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b908:	e005      	b.n	800b916 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	881b      	ldrh	r3, [r3, #0]
 800b90e:	4618      	mov	r0, r3
 800b910:	f7ff fcd0 	bl	800b2b4 <ptr_to_mem>
 800b914:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	791b      	ldrb	r3, [r3, #4]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d004      	beq.n	800b928 <mem_malloc+0x12c>
 800b91e:	4b2f      	ldr	r3, [pc, #188]	; (800b9dc <mem_malloc+0x1e0>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	69ba      	ldr	r2, [r7, #24]
 800b924:	429a      	cmp	r2, r3
 800b926:	d1f0      	bne.n	800b90a <mem_malloc+0x10e>
          }
          lfree = cur;
 800b928:	4a28      	ldr	r2, [pc, #160]	; (800b9cc <mem_malloc+0x1d0>)
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b92e:	4b27      	ldr	r3, [pc, #156]	; (800b9cc <mem_malloc+0x1d0>)
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	4b2a      	ldr	r3, [pc, #168]	; (800b9dc <mem_malloc+0x1e0>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	429a      	cmp	r2, r3
 800b938:	d00b      	beq.n	800b952 <mem_malloc+0x156>
 800b93a:	4b24      	ldr	r3, [pc, #144]	; (800b9cc <mem_malloc+0x1d0>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	791b      	ldrb	r3, [r3, #4]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d006      	beq.n	800b952 <mem_malloc+0x156>
 800b944:	4b22      	ldr	r3, [pc, #136]	; (800b9d0 <mem_malloc+0x1d4>)
 800b946:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b94a:	4925      	ldr	r1, [pc, #148]	; (800b9e0 <mem_malloc+0x1e4>)
 800b94c:	4822      	ldr	r0, [pc, #136]	; (800b9d8 <mem_malloc+0x1dc>)
 800b94e:	f00b ff87 	bl	8017860 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b952:	8bba      	ldrh	r2, [r7, #28]
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	4413      	add	r3, r2
 800b958:	3308      	adds	r3, #8
 800b95a:	4a20      	ldr	r2, [pc, #128]	; (800b9dc <mem_malloc+0x1e0>)
 800b95c:	6812      	ldr	r2, [r2, #0]
 800b95e:	4293      	cmp	r3, r2
 800b960:	d906      	bls.n	800b970 <mem_malloc+0x174>
 800b962:	4b1b      	ldr	r3, [pc, #108]	; (800b9d0 <mem_malloc+0x1d4>)
 800b964:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b968:	491e      	ldr	r1, [pc, #120]	; (800b9e4 <mem_malloc+0x1e8>)
 800b96a:	481b      	ldr	r0, [pc, #108]	; (800b9d8 <mem_malloc+0x1dc>)
 800b96c:	f00b ff78 	bl	8017860 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	f003 0303 	and.w	r3, r3, #3
 800b976:	2b00      	cmp	r3, #0
 800b978:	d006      	beq.n	800b988 <mem_malloc+0x18c>
 800b97a:	4b15      	ldr	r3, [pc, #84]	; (800b9d0 <mem_malloc+0x1d4>)
 800b97c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b980:	4919      	ldr	r1, [pc, #100]	; (800b9e8 <mem_malloc+0x1ec>)
 800b982:	4815      	ldr	r0, [pc, #84]	; (800b9d8 <mem_malloc+0x1dc>)
 800b984:	f00b ff6c 	bl	8017860 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	f003 0303 	and.w	r3, r3, #3
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d006      	beq.n	800b9a0 <mem_malloc+0x1a4>
 800b992:	4b0f      	ldr	r3, [pc, #60]	; (800b9d0 <mem_malloc+0x1d4>)
 800b994:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b998:	4914      	ldr	r1, [pc, #80]	; (800b9ec <mem_malloc+0x1f0>)
 800b99a:	480f      	ldr	r0, [pc, #60]	; (800b9d8 <mem_malloc+0x1dc>)
 800b99c:	f00b ff60 	bl	8017860 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	3308      	adds	r3, #8
 800b9a4:	e00e      	b.n	800b9c4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800b9a6:	8bfb      	ldrh	r3, [r7, #30]
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7ff fc83 	bl	800b2b4 <ptr_to_mem>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	881b      	ldrh	r3, [r3, #0]
 800b9b2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b9b4:	8bfa      	ldrh	r2, [r7, #30]
 800b9b6:	8bbb      	ldrh	r3, [r7, #28]
 800b9b8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	f4ff af44 	bcc.w	800b84a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b9c2:	2300      	movs	r3, #0
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3720      	adds	r7, #32
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}
 800b9cc:	2000042c 	.word	0x2000042c
 800b9d0:	0801cc84 	.word	0x0801cc84
 800b9d4:	0801ce2c 	.word	0x0801ce2c
 800b9d8:	0801cccc 	.word	0x0801cccc
 800b9dc:	20000428 	.word	0x20000428
 800b9e0:	0801ce40 	.word	0x0801ce40
 800b9e4:	0801ce5c 	.word	0x0801ce5c
 800b9e8:	0801ce8c 	.word	0x0801ce8c
 800b9ec:	0801cebc 	.word	0x0801cebc

0800b9f0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b085      	sub	sp, #20
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	689b      	ldr	r3, [r3, #8]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	3303      	adds	r3, #3
 800ba06:	f023 0303 	bic.w	r3, r3, #3
 800ba0a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	60fb      	str	r3, [r7, #12]
 800ba10:	e011      	b.n	800ba36 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	689b      	ldr	r3, [r3, #8]
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	68ba      	ldr	r2, [r7, #8]
 800ba22:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	881b      	ldrh	r3, [r3, #0]
 800ba28:	461a      	mov	r2, r3
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	4413      	add	r3, r2
 800ba2e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	3301      	adds	r3, #1
 800ba34:	60fb      	str	r3, [r7, #12]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	885b      	ldrh	r3, [r3, #2]
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	dbe7      	blt.n	800ba12 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ba42:	bf00      	nop
 800ba44:	bf00      	nop
 800ba46:	3714      	adds	r7, #20
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr

0800ba50 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ba56:	2300      	movs	r3, #0
 800ba58:	80fb      	strh	r3, [r7, #6]
 800ba5a:	e009      	b.n	800ba70 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ba5c:	88fb      	ldrh	r3, [r7, #6]
 800ba5e:	4a08      	ldr	r2, [pc, #32]	; (800ba80 <memp_init+0x30>)
 800ba60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7ff ffc3 	bl	800b9f0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ba6a:	88fb      	ldrh	r3, [r7, #6]
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	80fb      	strh	r3, [r7, #6]
 800ba70:	88fb      	ldrh	r3, [r7, #6]
 800ba72:	2b08      	cmp	r3, #8
 800ba74:	d9f2      	bls.n	800ba5c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ba76:	bf00      	nop
 800ba78:	bf00      	nop
 800ba7a:	3708      	adds	r7, #8
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	0801fa44 	.word	0x0801fa44

0800ba84 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d012      	beq.n	800bac0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	6812      	ldr	r2, [r2, #0]
 800baa2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f003 0303 	and.w	r3, r3, #3
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d006      	beq.n	800babc <do_memp_malloc_pool+0x38>
 800baae:	4b07      	ldr	r3, [pc, #28]	; (800bacc <do_memp_malloc_pool+0x48>)
 800bab0:	f44f 728c 	mov.w	r2, #280	; 0x118
 800bab4:	4906      	ldr	r1, [pc, #24]	; (800bad0 <do_memp_malloc_pool+0x4c>)
 800bab6:	4807      	ldr	r0, [pc, #28]	; (800bad4 <do_memp_malloc_pool+0x50>)
 800bab8:	f00b fed2 	bl	8017860 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	e000      	b.n	800bac2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800bac0:	2300      	movs	r3, #0
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	0801cee0 	.word	0x0801cee0
 800bad0:	0801cf10 	.word	0x0801cf10
 800bad4:	0801cf34 	.word	0x0801cf34

0800bad8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	4603      	mov	r3, r0
 800bae0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800bae2:	79fb      	ldrb	r3, [r7, #7]
 800bae4:	2b08      	cmp	r3, #8
 800bae6:	d908      	bls.n	800bafa <memp_malloc+0x22>
 800bae8:	4b0a      	ldr	r3, [pc, #40]	; (800bb14 <memp_malloc+0x3c>)
 800baea:	f240 1257 	movw	r2, #343	; 0x157
 800baee:	490a      	ldr	r1, [pc, #40]	; (800bb18 <memp_malloc+0x40>)
 800baf0:	480a      	ldr	r0, [pc, #40]	; (800bb1c <memp_malloc+0x44>)
 800baf2:	f00b feb5 	bl	8017860 <iprintf>
 800baf6:	2300      	movs	r3, #0
 800baf8:	e008      	b.n	800bb0c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800bafa:	79fb      	ldrb	r3, [r7, #7]
 800bafc:	4a08      	ldr	r2, [pc, #32]	; (800bb20 <memp_malloc+0x48>)
 800bafe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7ff ffbe 	bl	800ba84 <do_memp_malloc_pool>
 800bb08:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3710      	adds	r7, #16
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	0801cee0 	.word	0x0801cee0
 800bb18:	0801cf70 	.word	0x0801cf70
 800bb1c:	0801cf34 	.word	0x0801cf34
 800bb20:	0801fa44 	.word	0x0801fa44

0800bb24 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b084      	sub	sp, #16
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	f003 0303 	and.w	r3, r3, #3
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d006      	beq.n	800bb46 <do_memp_free_pool+0x22>
 800bb38:	4b0a      	ldr	r3, [pc, #40]	; (800bb64 <do_memp_free_pool+0x40>)
 800bb3a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800bb3e:	490a      	ldr	r1, [pc, #40]	; (800bb68 <do_memp_free_pool+0x44>)
 800bb40:	480a      	ldr	r0, [pc, #40]	; (800bb6c <do_memp_free_pool+0x48>)
 800bb42:	f00b fe8d 	bl	8017860 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800bb5c:	bf00      	nop
 800bb5e:	3710      	adds	r7, #16
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	0801cee0 	.word	0x0801cee0
 800bb68:	0801cf90 	.word	0x0801cf90
 800bb6c:	0801cf34 	.word	0x0801cf34

0800bb70 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	4603      	mov	r3, r0
 800bb78:	6039      	str	r1, [r7, #0]
 800bb7a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800bb7c:	79fb      	ldrb	r3, [r7, #7]
 800bb7e:	2b08      	cmp	r3, #8
 800bb80:	d907      	bls.n	800bb92 <memp_free+0x22>
 800bb82:	4b0c      	ldr	r3, [pc, #48]	; (800bbb4 <memp_free+0x44>)
 800bb84:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800bb88:	490b      	ldr	r1, [pc, #44]	; (800bbb8 <memp_free+0x48>)
 800bb8a:	480c      	ldr	r0, [pc, #48]	; (800bbbc <memp_free+0x4c>)
 800bb8c:	f00b fe68 	bl	8017860 <iprintf>
 800bb90:	e00c      	b.n	800bbac <memp_free+0x3c>

  if (mem == NULL) {
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d008      	beq.n	800bbaa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800bb98:	79fb      	ldrb	r3, [r7, #7]
 800bb9a:	4a09      	ldr	r2, [pc, #36]	; (800bbc0 <memp_free+0x50>)
 800bb9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bba0:	6839      	ldr	r1, [r7, #0]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7ff ffbe 	bl	800bb24 <do_memp_free_pool>
 800bba8:	e000      	b.n	800bbac <memp_free+0x3c>
    return;
 800bbaa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800bbac:	3708      	adds	r7, #8
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	0801cee0 	.word	0x0801cee0
 800bbb8:	0801cfb0 	.word	0x0801cfb0
 800bbbc:	0801cf34 	.word	0x0801cf34
 800bbc0:	0801fa44 	.word	0x0801fa44

0800bbc4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800bbc8:	bf00      	nop
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr
	...

0800bbd4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	607a      	str	r2, [r7, #4]
 800bbe0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d108      	bne.n	800bbfa <netif_add+0x26>
 800bbe8:	4b5b      	ldr	r3, [pc, #364]	; (800bd58 <netif_add+0x184>)
 800bbea:	f240 1227 	movw	r2, #295	; 0x127
 800bbee:	495b      	ldr	r1, [pc, #364]	; (800bd5c <netif_add+0x188>)
 800bbf0:	485b      	ldr	r0, [pc, #364]	; (800bd60 <netif_add+0x18c>)
 800bbf2:	f00b fe35 	bl	8017860 <iprintf>
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	e0a9      	b.n	800bd4e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800bbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d108      	bne.n	800bc12 <netif_add+0x3e>
 800bc00:	4b55      	ldr	r3, [pc, #340]	; (800bd58 <netif_add+0x184>)
 800bc02:	f44f 7294 	mov.w	r2, #296	; 0x128
 800bc06:	4957      	ldr	r1, [pc, #348]	; (800bd64 <netif_add+0x190>)
 800bc08:	4855      	ldr	r0, [pc, #340]	; (800bd60 <netif_add+0x18c>)
 800bc0a:	f00b fe29 	bl	8017860 <iprintf>
 800bc0e:	2300      	movs	r3, #0
 800bc10:	e09d      	b.n	800bd4e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d101      	bne.n	800bc1c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800bc18:	4b53      	ldr	r3, [pc, #332]	; (800bd68 <netif_add+0x194>)
 800bc1a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d101      	bne.n	800bc26 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800bc22:	4b51      	ldr	r3, [pc, #324]	; (800bd68 <netif_add+0x194>)
 800bc24:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d101      	bne.n	800bc30 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800bc2c:	4b4e      	ldr	r3, [pc, #312]	; (800bd68 <netif_add+0x194>)
 800bc2e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2200      	movs	r2, #0
 800bc34:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	4a49      	ldr	r2, [pc, #292]	; (800bd6c <netif_add+0x198>)
 800bc46:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2200      	movs	r2, #0
 800bc52:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	3324      	adds	r3, #36	; 0x24
 800bc5a:	2204      	movs	r2, #4
 800bc5c:	2100      	movs	r1, #0
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f00b f8e2 	bl	8016e28 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	6a3a      	ldr	r2, [r7, #32]
 800bc6e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800bc70:	4b3f      	ldr	r3, [pc, #252]	; (800bd70 <netif_add+0x19c>)
 800bc72:	781a      	ldrb	r2, [r3, #0]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc7e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	68b9      	ldr	r1, [r7, #8]
 800bc86:	68f8      	ldr	r0, [r7, #12]
 800bc88:	f000 f914 	bl	800beb4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800bc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8e:	68f8      	ldr	r0, [r7, #12]
 800bc90:	4798      	blx	r3
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d001      	beq.n	800bc9c <netif_add+0xc8>
    return NULL;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	e058      	b.n	800bd4e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bca2:	2bff      	cmp	r3, #255	; 0xff
 800bca4:	d103      	bne.n	800bcae <netif_add+0xda>
        netif->num = 0;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bcb2:	4b30      	ldr	r3, [pc, #192]	; (800bd74 <netif_add+0x1a0>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	617b      	str	r3, [r7, #20]
 800bcb8:	e02b      	b.n	800bd12 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800bcba:	697a      	ldr	r2, [r7, #20]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d106      	bne.n	800bcd0 <netif_add+0xfc>
 800bcc2:	4b25      	ldr	r3, [pc, #148]	; (800bd58 <netif_add+0x184>)
 800bcc4:	f240 128b 	movw	r2, #395	; 0x18b
 800bcc8:	492b      	ldr	r1, [pc, #172]	; (800bd78 <netif_add+0x1a4>)
 800bcca:	4825      	ldr	r0, [pc, #148]	; (800bd60 <netif_add+0x18c>)
 800bccc:	f00b fdc8 	bl	8017860 <iprintf>
        num_netifs++;
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	2bff      	cmp	r3, #255	; 0xff
 800bcda:	dd06      	ble.n	800bcea <netif_add+0x116>
 800bcdc:	4b1e      	ldr	r3, [pc, #120]	; (800bd58 <netif_add+0x184>)
 800bcde:	f240 128d 	movw	r2, #397	; 0x18d
 800bce2:	4926      	ldr	r1, [pc, #152]	; (800bd7c <netif_add+0x1a8>)
 800bce4:	481e      	ldr	r0, [pc, #120]	; (800bd60 <netif_add+0x18c>)
 800bce6:	f00b fdbb 	bl	8017860 <iprintf>
        if (netif2->num == netif->num) {
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d108      	bne.n	800bd0c <netif_add+0x138>
          netif->num++;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bd00:	3301      	adds	r3, #1
 800bd02:	b2da      	uxtb	r2, r3
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800bd0a:	e005      	b.n	800bd18 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	617b      	str	r3, [r7, #20]
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d1d0      	bne.n	800bcba <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d1be      	bne.n	800bc9c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bd24:	2bfe      	cmp	r3, #254	; 0xfe
 800bd26:	d103      	bne.n	800bd30 <netif_add+0x15c>
    netif_num = 0;
 800bd28:	4b11      	ldr	r3, [pc, #68]	; (800bd70 <netif_add+0x19c>)
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	701a      	strb	r2, [r3, #0]
 800bd2e:	e006      	b.n	800bd3e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bd36:	3301      	adds	r3, #1
 800bd38:	b2da      	uxtb	r2, r3
 800bd3a:	4b0d      	ldr	r3, [pc, #52]	; (800bd70 <netif_add+0x19c>)
 800bd3c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800bd3e:	4b0d      	ldr	r3, [pc, #52]	; (800bd74 <netif_add+0x1a0>)
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800bd46:	4a0b      	ldr	r2, [pc, #44]	; (800bd74 <netif_add+0x1a0>)
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3718      	adds	r7, #24
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	0801cfcc 	.word	0x0801cfcc
 800bd5c:	0801d060 	.word	0x0801d060
 800bd60:	0801d01c 	.word	0x0801d01c
 800bd64:	0801d07c 	.word	0x0801d07c
 800bd68:	0801fab8 	.word	0x0801fab8
 800bd6c:	0800c0c7 	.word	0x0800c0c7
 800bd70:	20000454 	.word	0x20000454
 800bd74:	20006e2c 	.word	0x20006e2c
 800bd78:	0801d0a0 	.word	0x0801d0a0
 800bd7c:	0801d0b4 	.word	0x0801d0b4

0800bd80 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bd8a:	6839      	ldr	r1, [r7, #0]
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f002 facf 	bl	800e330 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800bd92:	6839      	ldr	r1, [r7, #0]
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f006 fe6d 	bl	8012a74 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800bd9a:	bf00      	nop
 800bd9c:	3708      	adds	r7, #8
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
	...

0800bda4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b086      	sub	sp, #24
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d106      	bne.n	800bdc4 <netif_do_set_ipaddr+0x20>
 800bdb6:	4b1d      	ldr	r3, [pc, #116]	; (800be2c <netif_do_set_ipaddr+0x88>)
 800bdb8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800bdbc:	491c      	ldr	r1, [pc, #112]	; (800be30 <netif_do_set_ipaddr+0x8c>)
 800bdbe:	481d      	ldr	r0, [pc, #116]	; (800be34 <netif_do_set_ipaddr+0x90>)
 800bdc0:	f00b fd4e 	bl	8017860 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d106      	bne.n	800bdd8 <netif_do_set_ipaddr+0x34>
 800bdca:	4b18      	ldr	r3, [pc, #96]	; (800be2c <netif_do_set_ipaddr+0x88>)
 800bdcc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800bdd0:	4917      	ldr	r1, [pc, #92]	; (800be30 <netif_do_set_ipaddr+0x8c>)
 800bdd2:	4818      	ldr	r0, [pc, #96]	; (800be34 <netif_do_set_ipaddr+0x90>)
 800bdd4:	f00b fd44 	bl	8017860 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	3304      	adds	r3, #4
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d01c      	beq.n	800be20 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	3304      	adds	r3, #4
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800bdf6:	f107 0314 	add.w	r3, r7, #20
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f7ff ffbf 	bl	800bd80 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d002      	beq.n	800be0e <netif_do_set_ipaddr+0x6a>
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	e000      	b.n	800be10 <netif_do_set_ipaddr+0x6c>
 800be0e:	2300      	movs	r3, #0
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800be14:	2101      	movs	r1, #1
 800be16:	68f8      	ldr	r0, [r7, #12]
 800be18:	f000 f8d2 	bl	800bfc0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800be1c:	2301      	movs	r3, #1
 800be1e:	e000      	b.n	800be22 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800be20:	2300      	movs	r3, #0
}
 800be22:	4618      	mov	r0, r3
 800be24:	3718      	adds	r7, #24
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	bf00      	nop
 800be2c:	0801cfcc 	.word	0x0801cfcc
 800be30:	0801d0e4 	.word	0x0801d0e4
 800be34:	0801d01c 	.word	0x0801d01c

0800be38 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800be38:	b480      	push	{r7}
 800be3a:	b085      	sub	sp, #20
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	3308      	adds	r3, #8
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	429a      	cmp	r2, r3
 800be50:	d00a      	beq.n	800be68 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d002      	beq.n	800be5e <netif_do_set_netmask+0x26>
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	e000      	b.n	800be60 <netif_do_set_netmask+0x28>
 800be5e:	2300      	movs	r3, #0
 800be60:	68fa      	ldr	r2, [r7, #12]
 800be62:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800be64:	2301      	movs	r3, #1
 800be66:	e000      	b.n	800be6a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3714      	adds	r7, #20
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800be76:	b480      	push	{r7}
 800be78:	b085      	sub	sp, #20
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	60f8      	str	r0, [r7, #12]
 800be7e:	60b9      	str	r1, [r7, #8]
 800be80:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	681a      	ldr	r2, [r3, #0]
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	330c      	adds	r3, #12
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d00a      	beq.n	800bea6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d002      	beq.n	800be9c <netif_do_set_gw+0x26>
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	e000      	b.n	800be9e <netif_do_set_gw+0x28>
 800be9c:	2300      	movs	r3, #0
 800be9e:	68fa      	ldr	r2, [r7, #12]
 800bea0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800bea2:	2301      	movs	r3, #1
 800bea4:	e000      	b.n	800bea8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800bea6:	2300      	movs	r3, #0
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3714      	adds	r7, #20
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b088      	sub	sp, #32
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	607a      	str	r2, [r7, #4]
 800bec0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800bec2:	2300      	movs	r3, #0
 800bec4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800bec6:	2300      	movs	r3, #0
 800bec8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d101      	bne.n	800bed4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800bed0:	4b1c      	ldr	r3, [pc, #112]	; (800bf44 <netif_set_addr+0x90>)
 800bed2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d101      	bne.n	800bede <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800beda:	4b1a      	ldr	r3, [pc, #104]	; (800bf44 <netif_set_addr+0x90>)
 800bedc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d101      	bne.n	800bee8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800bee4:	4b17      	ldr	r3, [pc, #92]	; (800bf44 <netif_set_addr+0x90>)
 800bee6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d003      	beq.n	800bef6 <netif_set_addr+0x42>
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d101      	bne.n	800befa <netif_set_addr+0x46>
 800bef6:	2301      	movs	r3, #1
 800bef8:	e000      	b.n	800befc <netif_set_addr+0x48>
 800befa:	2300      	movs	r3, #0
 800befc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d006      	beq.n	800bf12 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bf04:	f107 0310 	add.w	r3, r7, #16
 800bf08:	461a      	mov	r2, r3
 800bf0a:	68b9      	ldr	r1, [r7, #8]
 800bf0c:	68f8      	ldr	r0, [r7, #12]
 800bf0e:	f7ff ff49 	bl	800bda4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800bf12:	69fa      	ldr	r2, [r7, #28]
 800bf14:	6879      	ldr	r1, [r7, #4]
 800bf16:	68f8      	ldr	r0, [r7, #12]
 800bf18:	f7ff ff8e 	bl	800be38 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800bf1c:	69ba      	ldr	r2, [r7, #24]
 800bf1e:	6839      	ldr	r1, [r7, #0]
 800bf20:	68f8      	ldr	r0, [r7, #12]
 800bf22:	f7ff ffa8 	bl	800be76 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d106      	bne.n	800bf3a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bf2c:	f107 0310 	add.w	r3, r7, #16
 800bf30:	461a      	mov	r2, r3
 800bf32:	68b9      	ldr	r1, [r7, #8]
 800bf34:	68f8      	ldr	r0, [r7, #12]
 800bf36:	f7ff ff35 	bl	800bda4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800bf3a:	bf00      	nop
 800bf3c:	3720      	adds	r7, #32
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	0801fab8 	.word	0x0801fab8

0800bf48 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800bf50:	4a04      	ldr	r2, [pc, #16]	; (800bf64 <netif_set_default+0x1c>)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800bf56:	bf00      	nop
 800bf58:	370c      	adds	r7, #12
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr
 800bf62:	bf00      	nop
 800bf64:	20006e30 	.word	0x20006e30

0800bf68 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b082      	sub	sp, #8
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d107      	bne.n	800bf86 <netif_set_up+0x1e>
 800bf76:	4b0f      	ldr	r3, [pc, #60]	; (800bfb4 <netif_set_up+0x4c>)
 800bf78:	f44f 7254 	mov.w	r2, #848	; 0x350
 800bf7c:	490e      	ldr	r1, [pc, #56]	; (800bfb8 <netif_set_up+0x50>)
 800bf7e:	480f      	ldr	r0, [pc, #60]	; (800bfbc <netif_set_up+0x54>)
 800bf80:	f00b fc6e 	bl	8017860 <iprintf>
 800bf84:	e013      	b.n	800bfae <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bf8c:	f003 0301 	and.w	r3, r3, #1
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d10c      	bne.n	800bfae <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bf9a:	f043 0301 	orr.w	r3, r3, #1
 800bf9e:	b2da      	uxtb	r2, r3
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bfa6:	2103      	movs	r1, #3
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 f809 	bl	800bfc0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800bfae:	3708      	adds	r7, #8
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	0801cfcc 	.word	0x0801cfcc
 800bfb8:	0801d154 	.word	0x0801d154
 800bfbc:	0801d01c 	.word	0x0801d01c

0800bfc0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	460b      	mov	r3, r1
 800bfca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d106      	bne.n	800bfe0 <netif_issue_reports+0x20>
 800bfd2:	4b18      	ldr	r3, [pc, #96]	; (800c034 <netif_issue_reports+0x74>)
 800bfd4:	f240 326d 	movw	r2, #877	; 0x36d
 800bfd8:	4917      	ldr	r1, [pc, #92]	; (800c038 <netif_issue_reports+0x78>)
 800bfda:	4818      	ldr	r0, [pc, #96]	; (800c03c <netif_issue_reports+0x7c>)
 800bfdc:	f00b fc40 	bl	8017860 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bfe6:	f003 0304 	and.w	r3, r3, #4
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d01e      	beq.n	800c02c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bff4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d017      	beq.n	800c02c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bffc:	78fb      	ldrb	r3, [r7, #3]
 800bffe:	f003 0301 	and.w	r3, r3, #1
 800c002:	2b00      	cmp	r3, #0
 800c004:	d013      	beq.n	800c02e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	3304      	adds	r3, #4
 800c00a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d00e      	beq.n	800c02e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c016:	f003 0308 	and.w	r3, r3, #8
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d007      	beq.n	800c02e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	3304      	adds	r3, #4
 800c022:	4619      	mov	r1, r3
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f009 fae9 	bl	80155fc <etharp_request>
 800c02a:	e000      	b.n	800c02e <netif_issue_reports+0x6e>
    return;
 800c02c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	0801cfcc 	.word	0x0801cfcc
 800c038:	0801d170 	.word	0x0801d170
 800c03c:	0801d01c 	.word	0x0801d01c

0800c040 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b082      	sub	sp, #8
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d107      	bne.n	800c05e <netif_set_down+0x1e>
 800c04e:	4b12      	ldr	r3, [pc, #72]	; (800c098 <netif_set_down+0x58>)
 800c050:	f240 329b 	movw	r2, #923	; 0x39b
 800c054:	4911      	ldr	r1, [pc, #68]	; (800c09c <netif_set_down+0x5c>)
 800c056:	4812      	ldr	r0, [pc, #72]	; (800c0a0 <netif_set_down+0x60>)
 800c058:	f00b fc02 	bl	8017860 <iprintf>
 800c05c:	e019      	b.n	800c092 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c064:	f003 0301 	and.w	r3, r3, #1
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d012      	beq.n	800c092 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c072:	f023 0301 	bic.w	r3, r3, #1
 800c076:	b2da      	uxtb	r2, r3
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c084:	f003 0308 	and.w	r3, r3, #8
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d002      	beq.n	800c092 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f008 fe6f 	bl	8014d70 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c092:	3708      	adds	r7, #8
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	0801cfcc 	.word	0x0801cfcc
 800c09c:	0801d194 	.word	0x0801d194
 800c0a0:	0801d01c 	.word	0x0801d01c

0800c0a4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d002      	beq.n	800c0ba <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	683a      	ldr	r2, [r7, #0]
 800c0b8:	61da      	str	r2, [r3, #28]
  }
}
 800c0ba:	bf00      	nop
 800c0bc:	370c      	adds	r7, #12
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr

0800c0c6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c0c6:	b480      	push	{r7}
 800c0c8:	b085      	sub	sp, #20
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	60f8      	str	r0, [r7, #12]
 800c0ce:	60b9      	str	r1, [r7, #8]
 800c0d0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c0d2:	f06f 030b 	mvn.w	r3, #11
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3714      	adds	r7, #20
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
	...

0800c0e4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b085      	sub	sp, #20
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c0ee:	79fb      	ldrb	r3, [r7, #7]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d013      	beq.n	800c11c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c0f4:	4b0d      	ldr	r3, [pc, #52]	; (800c12c <netif_get_by_index+0x48>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	60fb      	str	r3, [r7, #12]
 800c0fa:	e00c      	b.n	800c116 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c102:	3301      	adds	r3, #1
 800c104:	b2db      	uxtb	r3, r3
 800c106:	79fa      	ldrb	r2, [r7, #7]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d101      	bne.n	800c110 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	e006      	b.n	800c11e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	60fb      	str	r3, [r7, #12]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d1ef      	bne.n	800c0fc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c11c:	2300      	movs	r3, #0
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3714      	adds	r7, #20
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop
 800c12c:	20006e2c 	.word	0x20006e2c

0800c130 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c130:	b480      	push	{r7}
 800c132:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800c134:	4b03      	ldr	r3, [pc, #12]	; (800c144 <pbuf_pool_is_empty+0x14>)
 800c136:	2201      	movs	r2, #1
 800c138:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c13a:	bf00      	nop
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr
 800c144:	20006e34 	.word	0x20006e34

0800c148 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c148:	b480      	push	{r7}
 800c14a:	b085      	sub	sp, #20
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	60f8      	str	r0, [r7, #12]
 800c150:	60b9      	str	r1, [r7, #8]
 800c152:	4611      	mov	r1, r2
 800c154:	461a      	mov	r2, r3
 800c156:	460b      	mov	r3, r1
 800c158:	80fb      	strh	r3, [r7, #6]
 800c15a:	4613      	mov	r3, r2
 800c15c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2200      	movs	r2, #0
 800c162:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	68ba      	ldr	r2, [r7, #8]
 800c168:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	88fa      	ldrh	r2, [r7, #6]
 800c16e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	88ba      	ldrh	r2, [r7, #4]
 800c174:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c176:	8b3b      	ldrh	r3, [r7, #24]
 800c178:	b2da      	uxtb	r2, r3
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	7f3a      	ldrb	r2, [r7, #28]
 800c182:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2201      	movs	r2, #1
 800c188:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2200      	movs	r2, #0
 800c18e:	73da      	strb	r2, [r3, #15]
}
 800c190:	bf00      	nop
 800c192:	3714      	adds	r7, #20
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr

0800c19c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b08c      	sub	sp, #48	; 0x30
 800c1a0:	af02      	add	r7, sp, #8
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	71fb      	strb	r3, [r7, #7]
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	80bb      	strh	r3, [r7, #4]
 800c1aa:	4613      	mov	r3, r2
 800c1ac:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c1ae:	79fb      	ldrb	r3, [r7, #7]
 800c1b0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c1b2:	887b      	ldrh	r3, [r7, #2]
 800c1b4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c1b8:	d07f      	beq.n	800c2ba <pbuf_alloc+0x11e>
 800c1ba:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c1be:	f300 80c8 	bgt.w	800c352 <pbuf_alloc+0x1b6>
 800c1c2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c1c6:	d010      	beq.n	800c1ea <pbuf_alloc+0x4e>
 800c1c8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c1cc:	f300 80c1 	bgt.w	800c352 <pbuf_alloc+0x1b6>
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d002      	beq.n	800c1da <pbuf_alloc+0x3e>
 800c1d4:	2b41      	cmp	r3, #65	; 0x41
 800c1d6:	f040 80bc 	bne.w	800c352 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c1da:	887a      	ldrh	r2, [r7, #2]
 800c1dc:	88bb      	ldrh	r3, [r7, #4]
 800c1de:	4619      	mov	r1, r3
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	f000 f8d1 	bl	800c388 <pbuf_alloc_reference>
 800c1e6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c1e8:	e0bd      	b.n	800c366 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c1f2:	88bb      	ldrh	r3, [r7, #4]
 800c1f4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c1f6:	2008      	movs	r0, #8
 800c1f8:	f7ff fc6e 	bl	800bad8 <memp_malloc>
 800c1fc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d109      	bne.n	800c218 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c204:	f7ff ff94 	bl	800c130 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d002      	beq.n	800c214 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c20e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c210:	f000 faa8 	bl	800c764 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c214:	2300      	movs	r3, #0
 800c216:	e0a7      	b.n	800c368 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c218:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c21a:	3303      	adds	r3, #3
 800c21c:	b29b      	uxth	r3, r3
 800c21e:	f023 0303 	bic.w	r3, r3, #3
 800c222:	b29b      	uxth	r3, r3
 800c224:	f5c3 7301 	rsb	r3, r3, #516	; 0x204
 800c228:	b29b      	uxth	r3, r3
 800c22a:	8b7a      	ldrh	r2, [r7, #26]
 800c22c:	4293      	cmp	r3, r2
 800c22e:	bf28      	it	cs
 800c230:	4613      	movcs	r3, r2
 800c232:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c234:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c236:	3310      	adds	r3, #16
 800c238:	693a      	ldr	r2, [r7, #16]
 800c23a:	4413      	add	r3, r2
 800c23c:	3303      	adds	r3, #3
 800c23e:	f023 0303 	bic.w	r3, r3, #3
 800c242:	4618      	mov	r0, r3
 800c244:	89f9      	ldrh	r1, [r7, #14]
 800c246:	8b7a      	ldrh	r2, [r7, #26]
 800c248:	2300      	movs	r3, #0
 800c24a:	9301      	str	r3, [sp, #4]
 800c24c:	887b      	ldrh	r3, [r7, #2]
 800c24e:	9300      	str	r3, [sp, #0]
 800c250:	460b      	mov	r3, r1
 800c252:	4601      	mov	r1, r0
 800c254:	6938      	ldr	r0, [r7, #16]
 800c256:	f7ff ff77 	bl	800c148 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	f003 0303 	and.w	r3, r3, #3
 800c262:	2b00      	cmp	r3, #0
 800c264:	d006      	beq.n	800c274 <pbuf_alloc+0xd8>
 800c266:	4b42      	ldr	r3, [pc, #264]	; (800c370 <pbuf_alloc+0x1d4>)
 800c268:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c26c:	4941      	ldr	r1, [pc, #260]	; (800c374 <pbuf_alloc+0x1d8>)
 800c26e:	4842      	ldr	r0, [pc, #264]	; (800c378 <pbuf_alloc+0x1dc>)
 800c270:	f00b faf6 	bl	8017860 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c274:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c276:	3303      	adds	r3, #3
 800c278:	f023 0303 	bic.w	r3, r3, #3
 800c27c:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800c280:	d106      	bne.n	800c290 <pbuf_alloc+0xf4>
 800c282:	4b3b      	ldr	r3, [pc, #236]	; (800c370 <pbuf_alloc+0x1d4>)
 800c284:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c288:	493c      	ldr	r1, [pc, #240]	; (800c37c <pbuf_alloc+0x1e0>)
 800c28a:	483b      	ldr	r0, [pc, #236]	; (800c378 <pbuf_alloc+0x1dc>)
 800c28c:	f00b fae8 	bl	8017860 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c292:	2b00      	cmp	r3, #0
 800c294:	d102      	bne.n	800c29c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	627b      	str	r3, [r7, #36]	; 0x24
 800c29a:	e002      	b.n	800c2a2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	693a      	ldr	r2, [r7, #16]
 800c2a0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c2a6:	8b7a      	ldrh	r2, [r7, #26]
 800c2a8:	89fb      	ldrh	r3, [r7, #14]
 800c2aa:	1ad3      	subs	r3, r2, r3
 800c2ac:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c2b2:	8b7b      	ldrh	r3, [r7, #26]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d19e      	bne.n	800c1f6 <pbuf_alloc+0x5a>
      break;
 800c2b8:	e055      	b.n	800c366 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c2ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c2bc:	3303      	adds	r3, #3
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	f023 0303 	bic.w	r3, r3, #3
 800c2c4:	b29a      	uxth	r2, r3
 800c2c6:	88bb      	ldrh	r3, [r7, #4]
 800c2c8:	3303      	adds	r3, #3
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	f023 0303 	bic.w	r3, r3, #3
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	4413      	add	r3, r2
 800c2d4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c2d6:	8b3b      	ldrh	r3, [r7, #24]
 800c2d8:	3310      	adds	r3, #16
 800c2da:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c2dc:	8b3a      	ldrh	r2, [r7, #24]
 800c2de:	88bb      	ldrh	r3, [r7, #4]
 800c2e0:	3303      	adds	r3, #3
 800c2e2:	f023 0303 	bic.w	r3, r3, #3
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d306      	bcc.n	800c2f8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c2ea:	8afa      	ldrh	r2, [r7, #22]
 800c2ec:	88bb      	ldrh	r3, [r7, #4]
 800c2ee:	3303      	adds	r3, #3
 800c2f0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d201      	bcs.n	800c2fc <pbuf_alloc+0x160>
        return NULL;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	e035      	b.n	800c368 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c2fc:	8afb      	ldrh	r3, [r7, #22]
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7ff fa7c 	bl	800b7fc <mem_malloc>
 800c304:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d101      	bne.n	800c310 <pbuf_alloc+0x174>
        return NULL;
 800c30c:	2300      	movs	r3, #0
 800c30e:	e02b      	b.n	800c368 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c310:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c312:	3310      	adds	r3, #16
 800c314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c316:	4413      	add	r3, r2
 800c318:	3303      	adds	r3, #3
 800c31a:	f023 0303 	bic.w	r3, r3, #3
 800c31e:	4618      	mov	r0, r3
 800c320:	88b9      	ldrh	r1, [r7, #4]
 800c322:	88ba      	ldrh	r2, [r7, #4]
 800c324:	2300      	movs	r3, #0
 800c326:	9301      	str	r3, [sp, #4]
 800c328:	887b      	ldrh	r3, [r7, #2]
 800c32a:	9300      	str	r3, [sp, #0]
 800c32c:	460b      	mov	r3, r1
 800c32e:	4601      	mov	r1, r0
 800c330:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c332:	f7ff ff09 	bl	800c148 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	f003 0303 	and.w	r3, r3, #3
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d010      	beq.n	800c364 <pbuf_alloc+0x1c8>
 800c342:	4b0b      	ldr	r3, [pc, #44]	; (800c370 <pbuf_alloc+0x1d4>)
 800c344:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c348:	490d      	ldr	r1, [pc, #52]	; (800c380 <pbuf_alloc+0x1e4>)
 800c34a:	480b      	ldr	r0, [pc, #44]	; (800c378 <pbuf_alloc+0x1dc>)
 800c34c:	f00b fa88 	bl	8017860 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c350:	e008      	b.n	800c364 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c352:	4b07      	ldr	r3, [pc, #28]	; (800c370 <pbuf_alloc+0x1d4>)
 800c354:	f240 1227 	movw	r2, #295	; 0x127
 800c358:	490a      	ldr	r1, [pc, #40]	; (800c384 <pbuf_alloc+0x1e8>)
 800c35a:	4807      	ldr	r0, [pc, #28]	; (800c378 <pbuf_alloc+0x1dc>)
 800c35c:	f00b fa80 	bl	8017860 <iprintf>
      return NULL;
 800c360:	2300      	movs	r3, #0
 800c362:	e001      	b.n	800c368 <pbuf_alloc+0x1cc>
      break;
 800c364:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3728      	adds	r7, #40	; 0x28
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	0801d1fc 	.word	0x0801d1fc
 800c374:	0801d22c 	.word	0x0801d22c
 800c378:	0801d25c 	.word	0x0801d25c
 800c37c:	0801d284 	.word	0x0801d284
 800c380:	0801d2b8 	.word	0x0801d2b8
 800c384:	0801d2e4 	.word	0x0801d2e4

0800c388 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b086      	sub	sp, #24
 800c38c:	af02      	add	r7, sp, #8
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	460b      	mov	r3, r1
 800c392:	807b      	strh	r3, [r7, #2]
 800c394:	4613      	mov	r3, r2
 800c396:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c398:	883b      	ldrh	r3, [r7, #0]
 800c39a:	2b41      	cmp	r3, #65	; 0x41
 800c39c:	d009      	beq.n	800c3b2 <pbuf_alloc_reference+0x2a>
 800c39e:	883b      	ldrh	r3, [r7, #0]
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d006      	beq.n	800c3b2 <pbuf_alloc_reference+0x2a>
 800c3a4:	4b0f      	ldr	r3, [pc, #60]	; (800c3e4 <pbuf_alloc_reference+0x5c>)
 800c3a6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c3aa:	490f      	ldr	r1, [pc, #60]	; (800c3e8 <pbuf_alloc_reference+0x60>)
 800c3ac:	480f      	ldr	r0, [pc, #60]	; (800c3ec <pbuf_alloc_reference+0x64>)
 800c3ae:	f00b fa57 	bl	8017860 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c3b2:	2007      	movs	r0, #7
 800c3b4:	f7ff fb90 	bl	800bad8 <memp_malloc>
 800c3b8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d101      	bne.n	800c3c4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	e00b      	b.n	800c3dc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c3c4:	8879      	ldrh	r1, [r7, #2]
 800c3c6:	887a      	ldrh	r2, [r7, #2]
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	9301      	str	r3, [sp, #4]
 800c3cc:	883b      	ldrh	r3, [r7, #0]
 800c3ce:	9300      	str	r3, [sp, #0]
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	6879      	ldr	r1, [r7, #4]
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f7ff feb7 	bl	800c148 <pbuf_init_alloced_pbuf>
  return p;
 800c3da:	68fb      	ldr	r3, [r7, #12]
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3710      	adds	r7, #16
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	0801d1fc 	.word	0x0801d1fc
 800c3e8:	0801d300 	.word	0x0801d300
 800c3ec:	0801d25c 	.word	0x0801d25c

0800c3f0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b088      	sub	sp, #32
 800c3f4:	af02      	add	r7, sp, #8
 800c3f6:	607b      	str	r3, [r7, #4]
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	73fb      	strb	r3, [r7, #15]
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	81bb      	strh	r3, [r7, #12]
 800c400:	4613      	mov	r3, r2
 800c402:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c404:	7bfb      	ldrb	r3, [r7, #15]
 800c406:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c408:	8a7b      	ldrh	r3, [r7, #18]
 800c40a:	3303      	adds	r3, #3
 800c40c:	f023 0203 	bic.w	r2, r3, #3
 800c410:	89bb      	ldrh	r3, [r7, #12]
 800c412:	441a      	add	r2, r3
 800c414:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c416:	429a      	cmp	r2, r3
 800c418:	d901      	bls.n	800c41e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c41a:	2300      	movs	r3, #0
 800c41c:	e018      	b.n	800c450 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c41e:	6a3b      	ldr	r3, [r7, #32]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d007      	beq.n	800c434 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c424:	8a7b      	ldrh	r3, [r7, #18]
 800c426:	3303      	adds	r3, #3
 800c428:	f023 0303 	bic.w	r3, r3, #3
 800c42c:	6a3a      	ldr	r2, [r7, #32]
 800c42e:	4413      	add	r3, r2
 800c430:	617b      	str	r3, [r7, #20]
 800c432:	e001      	b.n	800c438 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c434:	2300      	movs	r3, #0
 800c436:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	89b9      	ldrh	r1, [r7, #12]
 800c43c:	89ba      	ldrh	r2, [r7, #12]
 800c43e:	2302      	movs	r3, #2
 800c440:	9301      	str	r3, [sp, #4]
 800c442:	897b      	ldrh	r3, [r7, #10]
 800c444:	9300      	str	r3, [sp, #0]
 800c446:	460b      	mov	r3, r1
 800c448:	6979      	ldr	r1, [r7, #20]
 800c44a:	f7ff fe7d 	bl	800c148 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c44e:	687b      	ldr	r3, [r7, #4]
}
 800c450:	4618      	mov	r0, r3
 800c452:	3718      	adds	r7, #24
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	460b      	mov	r3, r1
 800c462:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d106      	bne.n	800c478 <pbuf_realloc+0x20>
 800c46a:	4b3a      	ldr	r3, [pc, #232]	; (800c554 <pbuf_realloc+0xfc>)
 800c46c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c470:	4939      	ldr	r1, [pc, #228]	; (800c558 <pbuf_realloc+0x100>)
 800c472:	483a      	ldr	r0, [pc, #232]	; (800c55c <pbuf_realloc+0x104>)
 800c474:	f00b f9f4 	bl	8017860 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	891b      	ldrh	r3, [r3, #8]
 800c47c:	887a      	ldrh	r2, [r7, #2]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d263      	bcs.n	800c54a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	891a      	ldrh	r2, [r3, #8]
 800c486:	887b      	ldrh	r3, [r7, #2]
 800c488:	1ad3      	subs	r3, r2, r3
 800c48a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c48c:	887b      	ldrh	r3, [r7, #2]
 800c48e:	817b      	strh	r3, [r7, #10]
  q = p;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c494:	e018      	b.n	800c4c8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	895b      	ldrh	r3, [r3, #10]
 800c49a:	897a      	ldrh	r2, [r7, #10]
 800c49c:	1ad3      	subs	r3, r2, r3
 800c49e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	891a      	ldrh	r2, [r3, #8]
 800c4a4:	893b      	ldrh	r3, [r7, #8]
 800c4a6:	1ad3      	subs	r3, r2, r3
 800c4a8:	b29a      	uxth	r2, r3
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d106      	bne.n	800c4c8 <pbuf_realloc+0x70>
 800c4ba:	4b26      	ldr	r3, [pc, #152]	; (800c554 <pbuf_realloc+0xfc>)
 800c4bc:	f240 12af 	movw	r2, #431	; 0x1af
 800c4c0:	4927      	ldr	r1, [pc, #156]	; (800c560 <pbuf_realloc+0x108>)
 800c4c2:	4826      	ldr	r0, [pc, #152]	; (800c55c <pbuf_realloc+0x104>)
 800c4c4:	f00b f9cc 	bl	8017860 <iprintf>
  while (rem_len > q->len) {
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	895b      	ldrh	r3, [r3, #10]
 800c4cc:	897a      	ldrh	r2, [r7, #10]
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d8e1      	bhi.n	800c496 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	7b1b      	ldrb	r3, [r3, #12]
 800c4d6:	f003 030f 	and.w	r3, r3, #15
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d121      	bne.n	800c522 <pbuf_realloc+0xca>
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	895b      	ldrh	r3, [r3, #10]
 800c4e2:	897a      	ldrh	r2, [r7, #10]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d01c      	beq.n	800c522 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	7b5b      	ldrb	r3, [r3, #13]
 800c4ec:	f003 0302 	and.w	r3, r3, #2
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d116      	bne.n	800c522 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	685a      	ldr	r2, [r3, #4]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	1ad3      	subs	r3, r2, r3
 800c4fc:	b29a      	uxth	r2, r3
 800c4fe:	897b      	ldrh	r3, [r7, #10]
 800c500:	4413      	add	r3, r2
 800c502:	b29b      	uxth	r3, r3
 800c504:	4619      	mov	r1, r3
 800c506:	68f8      	ldr	r0, [r7, #12]
 800c508:	f7ff f87c 	bl	800b604 <mem_trim>
 800c50c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d106      	bne.n	800c522 <pbuf_realloc+0xca>
 800c514:	4b0f      	ldr	r3, [pc, #60]	; (800c554 <pbuf_realloc+0xfc>)
 800c516:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c51a:	4912      	ldr	r1, [pc, #72]	; (800c564 <pbuf_realloc+0x10c>)
 800c51c:	480f      	ldr	r0, [pc, #60]	; (800c55c <pbuf_realloc+0x104>)
 800c51e:	f00b f99f 	bl	8017860 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	897a      	ldrh	r2, [r7, #10]
 800c526:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	895a      	ldrh	r2, [r3, #10]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d004      	beq.n	800c542 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f000 f911 	bl	800c764 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2200      	movs	r2, #0
 800c546:	601a      	str	r2, [r3, #0]
 800c548:	e000      	b.n	800c54c <pbuf_realloc+0xf4>
    return;
 800c54a:	bf00      	nop

}
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	0801d1fc 	.word	0x0801d1fc
 800c558:	0801d314 	.word	0x0801d314
 800c55c:	0801d25c 	.word	0x0801d25c
 800c560:	0801d32c 	.word	0x0801d32c
 800c564:	0801d344 	.word	0x0801d344

0800c568 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b086      	sub	sp, #24
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	4613      	mov	r3, r2
 800c574:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d106      	bne.n	800c58a <pbuf_add_header_impl+0x22>
 800c57c:	4b2b      	ldr	r3, [pc, #172]	; (800c62c <pbuf_add_header_impl+0xc4>)
 800c57e:	f240 12df 	movw	r2, #479	; 0x1df
 800c582:	492b      	ldr	r1, [pc, #172]	; (800c630 <pbuf_add_header_impl+0xc8>)
 800c584:	482b      	ldr	r0, [pc, #172]	; (800c634 <pbuf_add_header_impl+0xcc>)
 800c586:	f00b f96b 	bl	8017860 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d003      	beq.n	800c598 <pbuf_add_header_impl+0x30>
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c596:	d301      	bcc.n	800c59c <pbuf_add_header_impl+0x34>
    return 1;
 800c598:	2301      	movs	r3, #1
 800c59a:	e043      	b.n	800c624 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d101      	bne.n	800c5a6 <pbuf_add_header_impl+0x3e>
    return 0;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	e03e      	b.n	800c624 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	891a      	ldrh	r2, [r3, #8]
 800c5ae:	8a7b      	ldrh	r3, [r7, #18]
 800c5b0:	4413      	add	r3, r2
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	8a7a      	ldrh	r2, [r7, #18]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d901      	bls.n	800c5be <pbuf_add_header_impl+0x56>
    return 1;
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	e032      	b.n	800c624 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	7b1b      	ldrb	r3, [r3, #12]
 800c5c2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c5c4:	8a3b      	ldrh	r3, [r7, #16]
 800c5c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d00c      	beq.n	800c5e8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	685a      	ldr	r2, [r3, #4]
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	425b      	negs	r3, r3
 800c5d6:	4413      	add	r3, r2
 800c5d8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	3310      	adds	r3, #16
 800c5de:	697a      	ldr	r2, [r7, #20]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d20d      	bcs.n	800c600 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	e01d      	b.n	800c624 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c5e8:	79fb      	ldrb	r3, [r7, #7]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d006      	beq.n	800c5fc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	685a      	ldr	r2, [r3, #4]
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	425b      	negs	r3, r3
 800c5f6:	4413      	add	r3, r2
 800c5f8:	617b      	str	r3, [r7, #20]
 800c5fa:	e001      	b.n	800c600 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	e011      	b.n	800c624 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	697a      	ldr	r2, [r7, #20]
 800c604:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	895a      	ldrh	r2, [r3, #10]
 800c60a:	8a7b      	ldrh	r3, [r7, #18]
 800c60c:	4413      	add	r3, r2
 800c60e:	b29a      	uxth	r2, r3
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	891a      	ldrh	r2, [r3, #8]
 800c618:	8a7b      	ldrh	r3, [r7, #18]
 800c61a:	4413      	add	r3, r2
 800c61c:	b29a      	uxth	r2, r3
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	811a      	strh	r2, [r3, #8]


  return 0;
 800c622:	2300      	movs	r3, #0
}
 800c624:	4618      	mov	r0, r3
 800c626:	3718      	adds	r7, #24
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}
 800c62c:	0801d1fc 	.word	0x0801d1fc
 800c630:	0801d360 	.word	0x0801d360
 800c634:	0801d25c 	.word	0x0801d25c

0800c638 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c642:	2200      	movs	r2, #0
 800c644:	6839      	ldr	r1, [r7, #0]
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f7ff ff8e 	bl	800c568 <pbuf_add_header_impl>
 800c64c:	4603      	mov	r3, r0
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3708      	adds	r7, #8
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
	...

0800c658 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d106      	bne.n	800c676 <pbuf_remove_header+0x1e>
 800c668:	4b20      	ldr	r3, [pc, #128]	; (800c6ec <pbuf_remove_header+0x94>)
 800c66a:	f240 224b 	movw	r2, #587	; 0x24b
 800c66e:	4920      	ldr	r1, [pc, #128]	; (800c6f0 <pbuf_remove_header+0x98>)
 800c670:	4820      	ldr	r0, [pc, #128]	; (800c6f4 <pbuf_remove_header+0x9c>)
 800c672:	f00b f8f5 	bl	8017860 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d003      	beq.n	800c684 <pbuf_remove_header+0x2c>
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c682:	d301      	bcc.n	800c688 <pbuf_remove_header+0x30>
    return 1;
 800c684:	2301      	movs	r3, #1
 800c686:	e02c      	b.n	800c6e2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d101      	bne.n	800c692 <pbuf_remove_header+0x3a>
    return 0;
 800c68e:	2300      	movs	r3, #0
 800c690:	e027      	b.n	800c6e2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	895b      	ldrh	r3, [r3, #10]
 800c69a:	89fa      	ldrh	r2, [r7, #14]
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d908      	bls.n	800c6b2 <pbuf_remove_header+0x5a>
 800c6a0:	4b12      	ldr	r3, [pc, #72]	; (800c6ec <pbuf_remove_header+0x94>)
 800c6a2:	f240 2255 	movw	r2, #597	; 0x255
 800c6a6:	4914      	ldr	r1, [pc, #80]	; (800c6f8 <pbuf_remove_header+0xa0>)
 800c6a8:	4812      	ldr	r0, [pc, #72]	; (800c6f4 <pbuf_remove_header+0x9c>)
 800c6aa:	f00b f8d9 	bl	8017860 <iprintf>
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	e017      	b.n	800c6e2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	685a      	ldr	r2, [r3, #4]
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	441a      	add	r2, r3
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	895a      	ldrh	r2, [r3, #10]
 800c6c8:	89fb      	ldrh	r3, [r7, #14]
 800c6ca:	1ad3      	subs	r3, r2, r3
 800c6cc:	b29a      	uxth	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	891a      	ldrh	r2, [r3, #8]
 800c6d6:	89fb      	ldrh	r3, [r7, #14]
 800c6d8:	1ad3      	subs	r3, r2, r3
 800c6da:	b29a      	uxth	r2, r3
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c6e0:	2300      	movs	r3, #0
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3710      	adds	r7, #16
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	0801d1fc 	.word	0x0801d1fc
 800c6f0:	0801d360 	.word	0x0801d360
 800c6f4:	0801d25c 	.word	0x0801d25c
 800c6f8:	0801d36c 	.word	0x0801d36c

0800c6fc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	460b      	mov	r3, r1
 800c706:	807b      	strh	r3, [r7, #2]
 800c708:	4613      	mov	r3, r2
 800c70a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c70c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c710:	2b00      	cmp	r3, #0
 800c712:	da08      	bge.n	800c726 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c714:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c718:	425b      	negs	r3, r3
 800c71a:	4619      	mov	r1, r3
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f7ff ff9b 	bl	800c658 <pbuf_remove_header>
 800c722:	4603      	mov	r3, r0
 800c724:	e007      	b.n	800c736 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c726:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c72a:	787a      	ldrb	r2, [r7, #1]
 800c72c:	4619      	mov	r1, r3
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f7ff ff1a 	bl	800c568 <pbuf_add_header_impl>
 800c734:	4603      	mov	r3, r0
  }
}
 800c736:	4618      	mov	r0, r3
 800c738:	3708      	adds	r7, #8
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}

0800c73e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c73e:	b580      	push	{r7, lr}
 800c740:	b082      	sub	sp, #8
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
 800c746:	460b      	mov	r3, r1
 800c748:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c74a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c74e:	2201      	movs	r2, #1
 800c750:	4619      	mov	r1, r3
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f7ff ffd2 	bl	800c6fc <pbuf_header_impl>
 800c758:	4603      	mov	r3, r0
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3708      	adds	r7, #8
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
	...

0800c764 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b086      	sub	sp, #24
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d10b      	bne.n	800c78a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d106      	bne.n	800c786 <pbuf_free+0x22>
 800c778:	4b38      	ldr	r3, [pc, #224]	; (800c85c <pbuf_free+0xf8>)
 800c77a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c77e:	4938      	ldr	r1, [pc, #224]	; (800c860 <pbuf_free+0xfc>)
 800c780:	4838      	ldr	r0, [pc, #224]	; (800c864 <pbuf_free+0x100>)
 800c782:	f00b f86d 	bl	8017860 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c786:	2300      	movs	r3, #0
 800c788:	e063      	b.n	800c852 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c78a:	2300      	movs	r3, #0
 800c78c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c78e:	e05c      	b.n	800c84a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	7b9b      	ldrb	r3, [r3, #14]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d106      	bne.n	800c7a6 <pbuf_free+0x42>
 800c798:	4b30      	ldr	r3, [pc, #192]	; (800c85c <pbuf_free+0xf8>)
 800c79a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c79e:	4932      	ldr	r1, [pc, #200]	; (800c868 <pbuf_free+0x104>)
 800c7a0:	4830      	ldr	r0, [pc, #192]	; (800c864 <pbuf_free+0x100>)
 800c7a2:	f00b f85d 	bl	8017860 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	7b9b      	ldrb	r3, [r3, #14]
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	b2da      	uxtb	r2, r3
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	739a      	strb	r2, [r3, #14]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	7b9b      	ldrb	r3, [r3, #14]
 800c7b6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c7b8:	7dbb      	ldrb	r3, [r7, #22]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d143      	bne.n	800c846 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	7b1b      	ldrb	r3, [r3, #12]
 800c7c8:	f003 030f 	and.w	r3, r3, #15
 800c7cc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	7b5b      	ldrb	r3, [r3, #13]
 800c7d2:	f003 0302 	and.w	r3, r3, #2
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d011      	beq.n	800c7fe <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	691b      	ldr	r3, [r3, #16]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d106      	bne.n	800c7f4 <pbuf_free+0x90>
 800c7e6:	4b1d      	ldr	r3, [pc, #116]	; (800c85c <pbuf_free+0xf8>)
 800c7e8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c7ec:	491f      	ldr	r1, [pc, #124]	; (800c86c <pbuf_free+0x108>)
 800c7ee:	481d      	ldr	r0, [pc, #116]	; (800c864 <pbuf_free+0x100>)
 800c7f0:	f00b f836 	bl	8017860 <iprintf>
        pc->custom_free_function(p);
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	691b      	ldr	r3, [r3, #16]
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	4798      	blx	r3
 800c7fc:	e01d      	b.n	800c83a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c7fe:	7bfb      	ldrb	r3, [r7, #15]
 800c800:	2b02      	cmp	r3, #2
 800c802:	d104      	bne.n	800c80e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800c804:	6879      	ldr	r1, [r7, #4]
 800c806:	2008      	movs	r0, #8
 800c808:	f7ff f9b2 	bl	800bb70 <memp_free>
 800c80c:	e015      	b.n	800c83a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c80e:	7bfb      	ldrb	r3, [r7, #15]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d104      	bne.n	800c81e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800c814:	6879      	ldr	r1, [r7, #4]
 800c816:	2007      	movs	r0, #7
 800c818:	f7ff f9aa 	bl	800bb70 <memp_free>
 800c81c:	e00d      	b.n	800c83a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c81e:	7bfb      	ldrb	r3, [r7, #15]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d103      	bne.n	800c82c <pbuf_free+0xc8>
          mem_free(p);
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f7fe fe83 	bl	800b530 <mem_free>
 800c82a:	e006      	b.n	800c83a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c82c:	4b0b      	ldr	r3, [pc, #44]	; (800c85c <pbuf_free+0xf8>)
 800c82e:	f240 320f 	movw	r2, #783	; 0x30f
 800c832:	490f      	ldr	r1, [pc, #60]	; (800c870 <pbuf_free+0x10c>)
 800c834:	480b      	ldr	r0, [pc, #44]	; (800c864 <pbuf_free+0x100>)
 800c836:	f00b f813 	bl	8017860 <iprintf>
        }
      }
      count++;
 800c83a:	7dfb      	ldrb	r3, [r7, #23]
 800c83c:	3301      	adds	r3, #1
 800c83e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	607b      	str	r3, [r7, #4]
 800c844:	e001      	b.n	800c84a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c846:	2300      	movs	r3, #0
 800c848:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d19f      	bne.n	800c790 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c850:	7dfb      	ldrb	r3, [r7, #23]
}
 800c852:	4618      	mov	r0, r3
 800c854:	3718      	adds	r7, #24
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	0801d1fc 	.word	0x0801d1fc
 800c860:	0801d360 	.word	0x0801d360
 800c864:	0801d25c 	.word	0x0801d25c
 800c868:	0801d38c 	.word	0x0801d38c
 800c86c:	0801d3a4 	.word	0x0801d3a4
 800c870:	0801d3c8 	.word	0x0801d3c8

0800c874 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c874:	b480      	push	{r7}
 800c876:	b085      	sub	sp, #20
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c87c:	2300      	movs	r3, #0
 800c87e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c880:	e005      	b.n	800c88e <pbuf_clen+0x1a>
    ++len;
 800c882:	89fb      	ldrh	r3, [r7, #14]
 800c884:	3301      	adds	r3, #1
 800c886:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d1f6      	bne.n	800c882 <pbuf_clen+0xe>
  }
  return len;
 800c894:	89fb      	ldrh	r3, [r7, #14]
}
 800c896:	4618      	mov	r0, r3
 800c898:	3714      	adds	r7, #20
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr
	...

0800c8a4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d010      	beq.n	800c8d4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	7b9b      	ldrb	r3, [r3, #14]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	b2da      	uxtb	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	7b9b      	ldrb	r3, [r3, #14]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d106      	bne.n	800c8d4 <pbuf_ref+0x30>
 800c8c6:	4b05      	ldr	r3, [pc, #20]	; (800c8dc <pbuf_ref+0x38>)
 800c8c8:	f240 3242 	movw	r2, #834	; 0x342
 800c8cc:	4904      	ldr	r1, [pc, #16]	; (800c8e0 <pbuf_ref+0x3c>)
 800c8ce:	4805      	ldr	r0, [pc, #20]	; (800c8e4 <pbuf_ref+0x40>)
 800c8d0:	f00a ffc6 	bl	8017860 <iprintf>
  }
}
 800c8d4:	bf00      	nop
 800c8d6:	3708      	adds	r7, #8
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	0801d1fc 	.word	0x0801d1fc
 800c8e0:	0801d3dc 	.word	0x0801d3dc
 800c8e4:	0801d25c 	.word	0x0801d25c

0800c8e8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d002      	beq.n	800c8fe <pbuf_cat+0x16>
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d107      	bne.n	800c90e <pbuf_cat+0x26>
 800c8fe:	4b20      	ldr	r3, [pc, #128]	; (800c980 <pbuf_cat+0x98>)
 800c900:	f240 3259 	movw	r2, #857	; 0x359
 800c904:	491f      	ldr	r1, [pc, #124]	; (800c984 <pbuf_cat+0x9c>)
 800c906:	4820      	ldr	r0, [pc, #128]	; (800c988 <pbuf_cat+0xa0>)
 800c908:	f00a ffaa 	bl	8017860 <iprintf>
 800c90c:	e034      	b.n	800c978 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	60fb      	str	r3, [r7, #12]
 800c912:	e00a      	b.n	800c92a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	891a      	ldrh	r2, [r3, #8]
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	891b      	ldrh	r3, [r3, #8]
 800c91c:	4413      	add	r3, r2
 800c91e:	b29a      	uxth	r2, r3
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	60fb      	str	r3, [r7, #12]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d1f0      	bne.n	800c914 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	891a      	ldrh	r2, [r3, #8]
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	895b      	ldrh	r3, [r3, #10]
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d006      	beq.n	800c94c <pbuf_cat+0x64>
 800c93e:	4b10      	ldr	r3, [pc, #64]	; (800c980 <pbuf_cat+0x98>)
 800c940:	f240 3262 	movw	r2, #866	; 0x362
 800c944:	4911      	ldr	r1, [pc, #68]	; (800c98c <pbuf_cat+0xa4>)
 800c946:	4810      	ldr	r0, [pc, #64]	; (800c988 <pbuf_cat+0xa0>)
 800c948:	f00a ff8a 	bl	8017860 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d006      	beq.n	800c962 <pbuf_cat+0x7a>
 800c954:	4b0a      	ldr	r3, [pc, #40]	; (800c980 <pbuf_cat+0x98>)
 800c956:	f240 3263 	movw	r2, #867	; 0x363
 800c95a:	490d      	ldr	r1, [pc, #52]	; (800c990 <pbuf_cat+0xa8>)
 800c95c:	480a      	ldr	r0, [pc, #40]	; (800c988 <pbuf_cat+0xa0>)
 800c95e:	f00a ff7f 	bl	8017860 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	891a      	ldrh	r2, [r3, #8]
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	891b      	ldrh	r3, [r3, #8]
 800c96a:	4413      	add	r3, r2
 800c96c:	b29a      	uxth	r2, r3
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	683a      	ldr	r2, [r7, #0]
 800c976:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c978:	3710      	adds	r7, #16
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	0801d1fc 	.word	0x0801d1fc
 800c984:	0801d3f0 	.word	0x0801d3f0
 800c988:	0801d25c 	.word	0x0801d25c
 800c98c:	0801d428 	.word	0x0801d428
 800c990:	0801d458 	.word	0x0801d458

0800c994 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c99e:	6839      	ldr	r1, [r7, #0]
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f7ff ffa1 	bl	800c8e8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c9a6:	6838      	ldr	r0, [r7, #0]
 800c9a8:	f7ff ff7c 	bl	800c8a4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c9ac:	bf00      	nop
 800c9ae:	3708      	adds	r7, #8
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b086      	sub	sp, #24
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	617b      	str	r3, [r7, #20]
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d008      	beq.n	800c9de <pbuf_copy+0x2a>
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d005      	beq.n	800c9de <pbuf_copy+0x2a>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	891a      	ldrh	r2, [r3, #8]
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	891b      	ldrh	r3, [r3, #8]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d209      	bcs.n	800c9f2 <pbuf_copy+0x3e>
 800c9de:	4b57      	ldr	r3, [pc, #348]	; (800cb3c <pbuf_copy+0x188>)
 800c9e0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c9e4:	4956      	ldr	r1, [pc, #344]	; (800cb40 <pbuf_copy+0x18c>)
 800c9e6:	4857      	ldr	r0, [pc, #348]	; (800cb44 <pbuf_copy+0x190>)
 800c9e8:	f00a ff3a 	bl	8017860 <iprintf>
 800c9ec:	f06f 030f 	mvn.w	r3, #15
 800c9f0:	e09f      	b.n	800cb32 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	895b      	ldrh	r3, [r3, #10]
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	1ad2      	subs	r2, r2, r3
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	895b      	ldrh	r3, [r3, #10]
 800ca00:	4619      	mov	r1, r3
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	1acb      	subs	r3, r1, r3
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d306      	bcc.n	800ca18 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	895b      	ldrh	r3, [r3, #10]
 800ca0e:	461a      	mov	r2, r3
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	1ad3      	subs	r3, r2, r3
 800ca14:	60fb      	str	r3, [r7, #12]
 800ca16:	e005      	b.n	800ca24 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	895b      	ldrh	r3, [r3, #10]
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	1ad3      	subs	r3, r2, r3
 800ca22:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	685a      	ldr	r2, [r3, #4]
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	18d0      	adds	r0, r2, r3
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	685a      	ldr	r2, [r3, #4]
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	4413      	add	r3, r2
 800ca34:	68fa      	ldr	r2, [r7, #12]
 800ca36:	4619      	mov	r1, r3
 800ca38:	f00a f9ce 	bl	8016dd8 <memcpy>
    offset_to += len;
 800ca3c:	697a      	ldr	r2, [r7, #20]
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	4413      	add	r3, r2
 800ca42:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ca44:	693a      	ldr	r2, [r7, #16]
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	4413      	add	r3, r2
 800ca4a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	895b      	ldrh	r3, [r3, #10]
 800ca50:	461a      	mov	r2, r3
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d906      	bls.n	800ca66 <pbuf_copy+0xb2>
 800ca58:	4b38      	ldr	r3, [pc, #224]	; (800cb3c <pbuf_copy+0x188>)
 800ca5a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ca5e:	493a      	ldr	r1, [pc, #232]	; (800cb48 <pbuf_copy+0x194>)
 800ca60:	4838      	ldr	r0, [pc, #224]	; (800cb44 <pbuf_copy+0x190>)
 800ca62:	f00a fefd 	bl	8017860 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	895b      	ldrh	r3, [r3, #10]
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d906      	bls.n	800ca80 <pbuf_copy+0xcc>
 800ca72:	4b32      	ldr	r3, [pc, #200]	; (800cb3c <pbuf_copy+0x188>)
 800ca74:	f240 32da 	movw	r2, #986	; 0x3da
 800ca78:	4934      	ldr	r1, [pc, #208]	; (800cb4c <pbuf_copy+0x198>)
 800ca7a:	4832      	ldr	r0, [pc, #200]	; (800cb44 <pbuf_copy+0x190>)
 800ca7c:	f00a fef0 	bl	8017860 <iprintf>
    if (offset_from >= p_from->len) {
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	895b      	ldrh	r3, [r3, #10]
 800ca84:	461a      	mov	r2, r3
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d304      	bcc.n	800ca96 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	895b      	ldrh	r3, [r3, #10]
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d114      	bne.n	800cacc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800caa2:	2300      	movs	r3, #0
 800caa4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d10c      	bne.n	800cacc <pbuf_copy+0x118>
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d009      	beq.n	800cacc <pbuf_copy+0x118>
 800cab8:	4b20      	ldr	r3, [pc, #128]	; (800cb3c <pbuf_copy+0x188>)
 800caba:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800cabe:	4924      	ldr	r1, [pc, #144]	; (800cb50 <pbuf_copy+0x19c>)
 800cac0:	4820      	ldr	r0, [pc, #128]	; (800cb44 <pbuf_copy+0x190>)
 800cac2:	f00a fecd 	bl	8017860 <iprintf>
 800cac6:	f06f 030f 	mvn.w	r3, #15
 800caca:	e032      	b.n	800cb32 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d013      	beq.n	800cafa <pbuf_copy+0x146>
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	895a      	ldrh	r2, [r3, #10]
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	891b      	ldrh	r3, [r3, #8]
 800cada:	429a      	cmp	r2, r3
 800cadc:	d10d      	bne.n	800cafa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d009      	beq.n	800cafa <pbuf_copy+0x146>
 800cae6:	4b15      	ldr	r3, [pc, #84]	; (800cb3c <pbuf_copy+0x188>)
 800cae8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800caec:	4919      	ldr	r1, [pc, #100]	; (800cb54 <pbuf_copy+0x1a0>)
 800caee:	4815      	ldr	r0, [pc, #84]	; (800cb44 <pbuf_copy+0x190>)
 800caf0:	f00a feb6 	bl	8017860 <iprintf>
 800caf4:	f06f 0305 	mvn.w	r3, #5
 800caf8:	e01b      	b.n	800cb32 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d013      	beq.n	800cb28 <pbuf_copy+0x174>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	895a      	ldrh	r2, [r3, #10]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	891b      	ldrh	r3, [r3, #8]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d10d      	bne.n	800cb28 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d009      	beq.n	800cb28 <pbuf_copy+0x174>
 800cb14:	4b09      	ldr	r3, [pc, #36]	; (800cb3c <pbuf_copy+0x188>)
 800cb16:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800cb1a:	490e      	ldr	r1, [pc, #56]	; (800cb54 <pbuf_copy+0x1a0>)
 800cb1c:	4809      	ldr	r0, [pc, #36]	; (800cb44 <pbuf_copy+0x190>)
 800cb1e:	f00a fe9f 	bl	8017860 <iprintf>
 800cb22:	f06f 0305 	mvn.w	r3, #5
 800cb26:	e004      	b.n	800cb32 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	f47f af61 	bne.w	800c9f2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800cb30:	2300      	movs	r3, #0
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3718      	adds	r7, #24
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	0801d1fc 	.word	0x0801d1fc
 800cb40:	0801d4a4 	.word	0x0801d4a4
 800cb44:	0801d25c 	.word	0x0801d25c
 800cb48:	0801d4d4 	.word	0x0801d4d4
 800cb4c:	0801d4ec 	.word	0x0801d4ec
 800cb50:	0801d508 	.word	0x0801d508
 800cb54:	0801d518 	.word	0x0801d518

0800cb58 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b088      	sub	sp, #32
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	60f8      	str	r0, [r7, #12]
 800cb60:	60b9      	str	r1, [r7, #8]
 800cb62:	4611      	mov	r1, r2
 800cb64:	461a      	mov	r2, r3
 800cb66:	460b      	mov	r3, r1
 800cb68:	80fb      	strh	r3, [r7, #6]
 800cb6a:	4613      	mov	r3, r2
 800cb6c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800cb72:	2300      	movs	r3, #0
 800cb74:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d108      	bne.n	800cb8e <pbuf_copy_partial+0x36>
 800cb7c:	4b2b      	ldr	r3, [pc, #172]	; (800cc2c <pbuf_copy_partial+0xd4>)
 800cb7e:	f240 420a 	movw	r2, #1034	; 0x40a
 800cb82:	492b      	ldr	r1, [pc, #172]	; (800cc30 <pbuf_copy_partial+0xd8>)
 800cb84:	482b      	ldr	r0, [pc, #172]	; (800cc34 <pbuf_copy_partial+0xdc>)
 800cb86:	f00a fe6b 	bl	8017860 <iprintf>
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	e04a      	b.n	800cc24 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d108      	bne.n	800cba6 <pbuf_copy_partial+0x4e>
 800cb94:	4b25      	ldr	r3, [pc, #148]	; (800cc2c <pbuf_copy_partial+0xd4>)
 800cb96:	f240 420b 	movw	r2, #1035	; 0x40b
 800cb9a:	4927      	ldr	r1, [pc, #156]	; (800cc38 <pbuf_copy_partial+0xe0>)
 800cb9c:	4825      	ldr	r0, [pc, #148]	; (800cc34 <pbuf_copy_partial+0xdc>)
 800cb9e:	f00a fe5f 	bl	8017860 <iprintf>
 800cba2:	2300      	movs	r3, #0
 800cba4:	e03e      	b.n	800cc24 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	61fb      	str	r3, [r7, #28]
 800cbaa:	e034      	b.n	800cc16 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800cbac:	88bb      	ldrh	r3, [r7, #4]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d00a      	beq.n	800cbc8 <pbuf_copy_partial+0x70>
 800cbb2:	69fb      	ldr	r3, [r7, #28]
 800cbb4:	895b      	ldrh	r3, [r3, #10]
 800cbb6:	88ba      	ldrh	r2, [r7, #4]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d305      	bcc.n	800cbc8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	895b      	ldrh	r3, [r3, #10]
 800cbc0:	88ba      	ldrh	r2, [r7, #4]
 800cbc2:	1ad3      	subs	r3, r2, r3
 800cbc4:	80bb      	strh	r3, [r7, #4]
 800cbc6:	e023      	b.n	800cc10 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	895a      	ldrh	r2, [r3, #10]
 800cbcc:	88bb      	ldrh	r3, [r7, #4]
 800cbce:	1ad3      	subs	r3, r2, r3
 800cbd0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800cbd2:	8b3a      	ldrh	r2, [r7, #24]
 800cbd4:	88fb      	ldrh	r3, [r7, #6]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d901      	bls.n	800cbde <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800cbda:	88fb      	ldrh	r3, [r7, #6]
 800cbdc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800cbde:	8b7b      	ldrh	r3, [r7, #26]
 800cbe0:	68ba      	ldr	r2, [r7, #8]
 800cbe2:	18d0      	adds	r0, r2, r3
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	685a      	ldr	r2, [r3, #4]
 800cbe8:	88bb      	ldrh	r3, [r7, #4]
 800cbea:	4413      	add	r3, r2
 800cbec:	8b3a      	ldrh	r2, [r7, #24]
 800cbee:	4619      	mov	r1, r3
 800cbf0:	f00a f8f2 	bl	8016dd8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800cbf4:	8afa      	ldrh	r2, [r7, #22]
 800cbf6:	8b3b      	ldrh	r3, [r7, #24]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800cbfc:	8b7a      	ldrh	r2, [r7, #26]
 800cbfe:	8b3b      	ldrh	r3, [r7, #24]
 800cc00:	4413      	add	r3, r2
 800cc02:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800cc04:	88fa      	ldrh	r2, [r7, #6]
 800cc06:	8b3b      	ldrh	r3, [r7, #24]
 800cc08:	1ad3      	subs	r3, r2, r3
 800cc0a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	61fb      	str	r3, [r7, #28]
 800cc16:	88fb      	ldrh	r3, [r7, #6]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d002      	beq.n	800cc22 <pbuf_copy_partial+0xca>
 800cc1c:	69fb      	ldr	r3, [r7, #28]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d1c4      	bne.n	800cbac <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800cc22:	8afb      	ldrh	r3, [r7, #22]
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3720      	adds	r7, #32
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}
 800cc2c:	0801d1fc 	.word	0x0801d1fc
 800cc30:	0801d544 	.word	0x0801d544
 800cc34:	0801d25c 	.word	0x0801d25c
 800cc38:	0801d564 	.word	0x0801d564

0800cc3c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	4603      	mov	r3, r0
 800cc44:	603a      	str	r2, [r7, #0]
 800cc46:	71fb      	strb	r3, [r7, #7]
 800cc48:	460b      	mov	r3, r1
 800cc4a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	8919      	ldrh	r1, [r3, #8]
 800cc50:	88ba      	ldrh	r2, [r7, #4]
 800cc52:	79fb      	ldrb	r3, [r7, #7]
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7ff faa1 	bl	800c19c <pbuf_alloc>
 800cc5a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d101      	bne.n	800cc66 <pbuf_clone+0x2a>
    return NULL;
 800cc62:	2300      	movs	r3, #0
 800cc64:	e011      	b.n	800cc8a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800cc66:	6839      	ldr	r1, [r7, #0]
 800cc68:	68f8      	ldr	r0, [r7, #12]
 800cc6a:	f7ff fea3 	bl	800c9b4 <pbuf_copy>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800cc72:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d006      	beq.n	800cc88 <pbuf_clone+0x4c>
 800cc7a:	4b06      	ldr	r3, [pc, #24]	; (800cc94 <pbuf_clone+0x58>)
 800cc7c:	f240 5224 	movw	r2, #1316	; 0x524
 800cc80:	4905      	ldr	r1, [pc, #20]	; (800cc98 <pbuf_clone+0x5c>)
 800cc82:	4806      	ldr	r0, [pc, #24]	; (800cc9c <pbuf_clone+0x60>)
 800cc84:	f00a fdec 	bl	8017860 <iprintf>
  return q;
 800cc88:	68fb      	ldr	r3, [r7, #12]
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3710      	adds	r7, #16
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	0801d1fc 	.word	0x0801d1fc
 800cc98:	0801d670 	.word	0x0801d670
 800cc9c:	0801d25c 	.word	0x0801d25c

0800cca0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cca4:	f00a fdf4 	bl	8017890 <rand>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ccb0:	b29b      	uxth	r3, r3
 800ccb2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ccb6:	b29a      	uxth	r2, r3
 800ccb8:	4b01      	ldr	r3, [pc, #4]	; (800ccc0 <tcp_init+0x20>)
 800ccba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ccbc:	bf00      	nop
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	20000066 	.word	0x20000066

0800ccc4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	7d1b      	ldrb	r3, [r3, #20]
 800ccd0:	2b01      	cmp	r3, #1
 800ccd2:	d105      	bne.n	800cce0 <tcp_free+0x1c>
 800ccd4:	4b06      	ldr	r3, [pc, #24]	; (800ccf0 <tcp_free+0x2c>)
 800ccd6:	22d4      	movs	r2, #212	; 0xd4
 800ccd8:	4906      	ldr	r1, [pc, #24]	; (800ccf4 <tcp_free+0x30>)
 800ccda:	4807      	ldr	r0, [pc, #28]	; (800ccf8 <tcp_free+0x34>)
 800ccdc:	f00a fdc0 	bl	8017860 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800cce0:	6879      	ldr	r1, [r7, #4]
 800cce2:	2001      	movs	r0, #1
 800cce4:	f7fe ff44 	bl	800bb70 <memp_free>
}
 800cce8:	bf00      	nop
 800ccea:	3708      	adds	r7, #8
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	0801d6fc 	.word	0x0801d6fc
 800ccf4:	0801d72c 	.word	0x0801d72c
 800ccf8:	0801d740 	.word	0x0801d740

0800ccfc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	7d1b      	ldrb	r3, [r3, #20]
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d105      	bne.n	800cd18 <tcp_free_listen+0x1c>
 800cd0c:	4b06      	ldr	r3, [pc, #24]	; (800cd28 <tcp_free_listen+0x2c>)
 800cd0e:	22df      	movs	r2, #223	; 0xdf
 800cd10:	4906      	ldr	r1, [pc, #24]	; (800cd2c <tcp_free_listen+0x30>)
 800cd12:	4807      	ldr	r0, [pc, #28]	; (800cd30 <tcp_free_listen+0x34>)
 800cd14:	f00a fda4 	bl	8017860 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800cd18:	6879      	ldr	r1, [r7, #4]
 800cd1a:	2002      	movs	r0, #2
 800cd1c:	f7fe ff28 	bl	800bb70 <memp_free>
}
 800cd20:	bf00      	nop
 800cd22:	3708      	adds	r7, #8
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	0801d6fc 	.word	0x0801d6fc
 800cd2c:	0801d768 	.word	0x0801d768
 800cd30:	0801d740 	.word	0x0801d740

0800cd34 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800cd38:	f000 fea2 	bl	800da80 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800cd3c:	4b07      	ldr	r3, [pc, #28]	; (800cd5c <tcp_tmr+0x28>)
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	3301      	adds	r3, #1
 800cd42:	b2da      	uxtb	r2, r3
 800cd44:	4b05      	ldr	r3, [pc, #20]	; (800cd5c <tcp_tmr+0x28>)
 800cd46:	701a      	strb	r2, [r3, #0]
 800cd48:	4b04      	ldr	r3, [pc, #16]	; (800cd5c <tcp_tmr+0x28>)
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	f003 0301 	and.w	r3, r3, #1
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d001      	beq.n	800cd58 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800cd54:	f000 fb54 	bl	800d400 <tcp_slowtmr>
  }
}
 800cd58:	bf00      	nop
 800cd5a:	bd80      	pop	{r7, pc}
 800cd5c:	20000455 	.word	0x20000455

0800cd60 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d105      	bne.n	800cd7c <tcp_remove_listener+0x1c>
 800cd70:	4b0d      	ldr	r3, [pc, #52]	; (800cda8 <tcp_remove_listener+0x48>)
 800cd72:	22ff      	movs	r2, #255	; 0xff
 800cd74:	490d      	ldr	r1, [pc, #52]	; (800cdac <tcp_remove_listener+0x4c>)
 800cd76:	480e      	ldr	r0, [pc, #56]	; (800cdb0 <tcp_remove_listener+0x50>)
 800cd78:	f00a fd72 	bl	8017860 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	60fb      	str	r3, [r7, #12]
 800cd80:	e00a      	b.n	800cd98 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd86:	683a      	ldr	r2, [r7, #0]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d102      	bne.n	800cd92 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	60fb      	str	r3, [r7, #12]
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d1f1      	bne.n	800cd82 <tcp_remove_listener+0x22>
    }
  }
}
 800cd9e:	bf00      	nop
 800cda0:	bf00      	nop
 800cda2:	3710      	adds	r7, #16
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	0801d6fc 	.word	0x0801d6fc
 800cdac:	0801d784 	.word	0x0801d784
 800cdb0:	0801d740 	.word	0x0801d740

0800cdb4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d106      	bne.n	800cdd0 <tcp_listen_closed+0x1c>
 800cdc2:	4b14      	ldr	r3, [pc, #80]	; (800ce14 <tcp_listen_closed+0x60>)
 800cdc4:	f240 1211 	movw	r2, #273	; 0x111
 800cdc8:	4913      	ldr	r1, [pc, #76]	; (800ce18 <tcp_listen_closed+0x64>)
 800cdca:	4814      	ldr	r0, [pc, #80]	; (800ce1c <tcp_listen_closed+0x68>)
 800cdcc:	f00a fd48 	bl	8017860 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	7d1b      	ldrb	r3, [r3, #20]
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d006      	beq.n	800cde6 <tcp_listen_closed+0x32>
 800cdd8:	4b0e      	ldr	r3, [pc, #56]	; (800ce14 <tcp_listen_closed+0x60>)
 800cdda:	f44f 7289 	mov.w	r2, #274	; 0x112
 800cdde:	4910      	ldr	r1, [pc, #64]	; (800ce20 <tcp_listen_closed+0x6c>)
 800cde0:	480e      	ldr	r0, [pc, #56]	; (800ce1c <tcp_listen_closed+0x68>)
 800cde2:	f00a fd3d 	bl	8017860 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cde6:	2301      	movs	r3, #1
 800cde8:	60fb      	str	r3, [r7, #12]
 800cdea:	e00b      	b.n	800ce04 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800cdec:	4a0d      	ldr	r2, [pc, #52]	; (800ce24 <tcp_listen_closed+0x70>)
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	6879      	ldr	r1, [r7, #4]
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7ff ffb1 	bl	800cd60 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	3301      	adds	r3, #1
 800ce02:	60fb      	str	r3, [r7, #12]
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2b03      	cmp	r3, #3
 800ce08:	d9f0      	bls.n	800cdec <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ce0a:	bf00      	nop
 800ce0c:	bf00      	nop
 800ce0e:	3710      	adds	r7, #16
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	0801d6fc 	.word	0x0801d6fc
 800ce18:	0801d7ac 	.word	0x0801d7ac
 800ce1c:	0801d740 	.word	0x0801d740
 800ce20:	0801d7b8 	.word	0x0801d7b8
 800ce24:	0801fa80 	.word	0x0801fa80

0800ce28 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ce28:	b5b0      	push	{r4, r5, r7, lr}
 800ce2a:	b088      	sub	sp, #32
 800ce2c:	af04      	add	r7, sp, #16
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	460b      	mov	r3, r1
 800ce32:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d106      	bne.n	800ce48 <tcp_close_shutdown+0x20>
 800ce3a:	4b63      	ldr	r3, [pc, #396]	; (800cfc8 <tcp_close_shutdown+0x1a0>)
 800ce3c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ce40:	4962      	ldr	r1, [pc, #392]	; (800cfcc <tcp_close_shutdown+0x1a4>)
 800ce42:	4863      	ldr	r0, [pc, #396]	; (800cfd0 <tcp_close_shutdown+0x1a8>)
 800ce44:	f00a fd0c 	bl	8017860 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ce48:	78fb      	ldrb	r3, [r7, #3]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d066      	beq.n	800cf1c <tcp_close_shutdown+0xf4>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	7d1b      	ldrb	r3, [r3, #20]
 800ce52:	2b04      	cmp	r3, #4
 800ce54:	d003      	beq.n	800ce5e <tcp_close_shutdown+0x36>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	7d1b      	ldrb	r3, [r3, #20]
 800ce5a:	2b07      	cmp	r3, #7
 800ce5c:	d15e      	bne.n	800cf1c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d104      	bne.n	800ce70 <tcp_close_shutdown+0x48>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce6e:	d055      	beq.n	800cf1c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	8b5b      	ldrh	r3, [r3, #26]
 800ce74:	f003 0310 	and.w	r3, r3, #16
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d106      	bne.n	800ce8a <tcp_close_shutdown+0x62>
 800ce7c:	4b52      	ldr	r3, [pc, #328]	; (800cfc8 <tcp_close_shutdown+0x1a0>)
 800ce7e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ce82:	4954      	ldr	r1, [pc, #336]	; (800cfd4 <tcp_close_shutdown+0x1ac>)
 800ce84:	4852      	ldr	r0, [pc, #328]	; (800cfd0 <tcp_close_shutdown+0x1a8>)
 800ce86:	f00a fceb 	bl	8017860 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ce92:	687d      	ldr	r5, [r7, #4]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	3304      	adds	r3, #4
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	8ad2      	ldrh	r2, [r2, #22]
 800ce9c:	6879      	ldr	r1, [r7, #4]
 800ce9e:	8b09      	ldrh	r1, [r1, #24]
 800cea0:	9102      	str	r1, [sp, #8]
 800cea2:	9201      	str	r2, [sp, #4]
 800cea4:	9300      	str	r3, [sp, #0]
 800cea6:	462b      	mov	r3, r5
 800cea8:	4622      	mov	r2, r4
 800ceaa:	4601      	mov	r1, r0
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f004 fe8d 	bl	8011bcc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f001 f8c6 	bl	800e044 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ceb8:	4b47      	ldr	r3, [pc, #284]	; (800cfd8 <tcp_close_shutdown+0x1b0>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d105      	bne.n	800cece <tcp_close_shutdown+0xa6>
 800cec2:	4b45      	ldr	r3, [pc, #276]	; (800cfd8 <tcp_close_shutdown+0x1b0>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	68db      	ldr	r3, [r3, #12]
 800cec8:	4a43      	ldr	r2, [pc, #268]	; (800cfd8 <tcp_close_shutdown+0x1b0>)
 800ceca:	6013      	str	r3, [r2, #0]
 800cecc:	e013      	b.n	800cef6 <tcp_close_shutdown+0xce>
 800cece:	4b42      	ldr	r3, [pc, #264]	; (800cfd8 <tcp_close_shutdown+0x1b0>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	60fb      	str	r3, [r7, #12]
 800ced4:	e00c      	b.n	800cef0 <tcp_close_shutdown+0xc8>
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	429a      	cmp	r2, r3
 800cede:	d104      	bne.n	800ceea <tcp_close_shutdown+0xc2>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	68da      	ldr	r2, [r3, #12]
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	60da      	str	r2, [r3, #12]
 800cee8:	e005      	b.n	800cef6 <tcp_close_shutdown+0xce>
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	68db      	ldr	r3, [r3, #12]
 800ceee:	60fb      	str	r3, [r7, #12]
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d1ef      	bne.n	800ced6 <tcp_close_shutdown+0xae>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2200      	movs	r2, #0
 800cefa:	60da      	str	r2, [r3, #12]
 800cefc:	4b37      	ldr	r3, [pc, #220]	; (800cfdc <tcp_close_shutdown+0x1b4>)
 800cefe:	2201      	movs	r2, #1
 800cf00:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800cf02:	4b37      	ldr	r3, [pc, #220]	; (800cfe0 <tcp_close_shutdown+0x1b8>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d102      	bne.n	800cf12 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800cf0c:	f003 fd5a 	bl	80109c4 <tcp_trigger_input_pcb_close>
 800cf10:	e002      	b.n	800cf18 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f7ff fed6 	bl	800ccc4 <tcp_free>
      }
      return ERR_OK;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	e050      	b.n	800cfbe <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	7d1b      	ldrb	r3, [r3, #20]
 800cf20:	2b02      	cmp	r3, #2
 800cf22:	d03b      	beq.n	800cf9c <tcp_close_shutdown+0x174>
 800cf24:	2b02      	cmp	r3, #2
 800cf26:	dc44      	bgt.n	800cfb2 <tcp_close_shutdown+0x18a>
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d002      	beq.n	800cf32 <tcp_close_shutdown+0x10a>
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	d02a      	beq.n	800cf86 <tcp_close_shutdown+0x15e>
 800cf30:	e03f      	b.n	800cfb2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	8adb      	ldrh	r3, [r3, #22]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d021      	beq.n	800cf7e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cf3a:	4b2a      	ldr	r3, [pc, #168]	; (800cfe4 <tcp_close_shutdown+0x1bc>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d105      	bne.n	800cf50 <tcp_close_shutdown+0x128>
 800cf44:	4b27      	ldr	r3, [pc, #156]	; (800cfe4 <tcp_close_shutdown+0x1bc>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	68db      	ldr	r3, [r3, #12]
 800cf4a:	4a26      	ldr	r2, [pc, #152]	; (800cfe4 <tcp_close_shutdown+0x1bc>)
 800cf4c:	6013      	str	r3, [r2, #0]
 800cf4e:	e013      	b.n	800cf78 <tcp_close_shutdown+0x150>
 800cf50:	4b24      	ldr	r3, [pc, #144]	; (800cfe4 <tcp_close_shutdown+0x1bc>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	60bb      	str	r3, [r7, #8]
 800cf56:	e00c      	b.n	800cf72 <tcp_close_shutdown+0x14a>
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	68db      	ldr	r3, [r3, #12]
 800cf5c:	687a      	ldr	r2, [r7, #4]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d104      	bne.n	800cf6c <tcp_close_shutdown+0x144>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	68da      	ldr	r2, [r3, #12]
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	60da      	str	r2, [r3, #12]
 800cf6a:	e005      	b.n	800cf78 <tcp_close_shutdown+0x150>
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	60bb      	str	r3, [r7, #8]
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d1ef      	bne.n	800cf58 <tcp_close_shutdown+0x130>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f7ff fea0 	bl	800ccc4 <tcp_free>
      break;
 800cf84:	e01a      	b.n	800cfbc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f7ff ff14 	bl	800cdb4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800cf8c:	6879      	ldr	r1, [r7, #4]
 800cf8e:	4816      	ldr	r0, [pc, #88]	; (800cfe8 <tcp_close_shutdown+0x1c0>)
 800cf90:	f001 f8a8 	bl	800e0e4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f7ff feb1 	bl	800ccfc <tcp_free_listen>
      break;
 800cf9a:	e00f      	b.n	800cfbc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cf9c:	6879      	ldr	r1, [r7, #4]
 800cf9e:	480e      	ldr	r0, [pc, #56]	; (800cfd8 <tcp_close_shutdown+0x1b0>)
 800cfa0:	f001 f8a0 	bl	800e0e4 <tcp_pcb_remove>
 800cfa4:	4b0d      	ldr	r3, [pc, #52]	; (800cfdc <tcp_close_shutdown+0x1b4>)
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f7ff fe8a 	bl	800ccc4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800cfb0:	e004      	b.n	800cfbc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 f81a 	bl	800cfec <tcp_close_shutdown_fin>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	e000      	b.n	800cfbe <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bdb0      	pop	{r4, r5, r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	0801d6fc 	.word	0x0801d6fc
 800cfcc:	0801d7d0 	.word	0x0801d7d0
 800cfd0:	0801d740 	.word	0x0801d740
 800cfd4:	0801d7f0 	.word	0x0801d7f0
 800cfd8:	20006e3c 	.word	0x20006e3c
 800cfdc:	20006e38 	.word	0x20006e38
 800cfe0:	20006e50 	.word	0x20006e50
 800cfe4:	20006e48 	.word	0x20006e48
 800cfe8:	20006e44 	.word	0x20006e44

0800cfec <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b084      	sub	sp, #16
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d106      	bne.n	800d008 <tcp_close_shutdown_fin+0x1c>
 800cffa:	4b2e      	ldr	r3, [pc, #184]	; (800d0b4 <tcp_close_shutdown_fin+0xc8>)
 800cffc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d000:	492d      	ldr	r1, [pc, #180]	; (800d0b8 <tcp_close_shutdown_fin+0xcc>)
 800d002:	482e      	ldr	r0, [pc, #184]	; (800d0bc <tcp_close_shutdown_fin+0xd0>)
 800d004:	f00a fc2c 	bl	8017860 <iprintf>

  switch (pcb->state) {
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	7d1b      	ldrb	r3, [r3, #20]
 800d00c:	2b07      	cmp	r3, #7
 800d00e:	d020      	beq.n	800d052 <tcp_close_shutdown_fin+0x66>
 800d010:	2b07      	cmp	r3, #7
 800d012:	dc2b      	bgt.n	800d06c <tcp_close_shutdown_fin+0x80>
 800d014:	2b03      	cmp	r3, #3
 800d016:	d002      	beq.n	800d01e <tcp_close_shutdown_fin+0x32>
 800d018:	2b04      	cmp	r3, #4
 800d01a:	d00d      	beq.n	800d038 <tcp_close_shutdown_fin+0x4c>
 800d01c:	e026      	b.n	800d06c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f003 fee2 	bl	8010de8 <tcp_send_fin>
 800d024:	4603      	mov	r3, r0
 800d026:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d11f      	bne.n	800d070 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2205      	movs	r2, #5
 800d034:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d036:	e01b      	b.n	800d070 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f003 fed5 	bl	8010de8 <tcp_send_fin>
 800d03e:	4603      	mov	r3, r0
 800d040:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d114      	bne.n	800d074 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2205      	movs	r2, #5
 800d04e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d050:	e010      	b.n	800d074 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f003 fec8 	bl	8010de8 <tcp_send_fin>
 800d058:	4603      	mov	r3, r0
 800d05a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d05c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d109      	bne.n	800d078 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2209      	movs	r2, #9
 800d068:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d06a:	e005      	b.n	800d078 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d06c:	2300      	movs	r3, #0
 800d06e:	e01c      	b.n	800d0aa <tcp_close_shutdown_fin+0xbe>
      break;
 800d070:	bf00      	nop
 800d072:	e002      	b.n	800d07a <tcp_close_shutdown_fin+0x8e>
      break;
 800d074:	bf00      	nop
 800d076:	e000      	b.n	800d07a <tcp_close_shutdown_fin+0x8e>
      break;
 800d078:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d07a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d103      	bne.n	800d08a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f003 ffee 	bl	8011064 <tcp_output>
 800d088:	e00d      	b.n	800d0a6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d08a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d092:	d108      	bne.n	800d0a6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	8b5b      	ldrh	r3, [r3, #26]
 800d098:	f043 0308 	orr.w	r3, r3, #8
 800d09c:	b29a      	uxth	r2, r3
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	e001      	b.n	800d0aa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d0a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3710      	adds	r7, #16
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	0801d6fc 	.word	0x0801d6fc
 800d0b8:	0801d7ac 	.word	0x0801d7ac
 800d0bc:	0801d740 	.word	0x0801d740

0800d0c0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d109      	bne.n	800d0e2 <tcp_close+0x22>
 800d0ce:	4b0f      	ldr	r3, [pc, #60]	; (800d10c <tcp_close+0x4c>)
 800d0d0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d0d4:	490e      	ldr	r1, [pc, #56]	; (800d110 <tcp_close+0x50>)
 800d0d6:	480f      	ldr	r0, [pc, #60]	; (800d114 <tcp_close+0x54>)
 800d0d8:	f00a fbc2 	bl	8017860 <iprintf>
 800d0dc:	f06f 030f 	mvn.w	r3, #15
 800d0e0:	e00f      	b.n	800d102 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	7d1b      	ldrb	r3, [r3, #20]
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	d006      	beq.n	800d0f8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	8b5b      	ldrh	r3, [r3, #26]
 800d0ee:	f043 0310 	orr.w	r3, r3, #16
 800d0f2:	b29a      	uxth	r2, r3
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d0f8:	2101      	movs	r1, #1
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7ff fe94 	bl	800ce28 <tcp_close_shutdown>
 800d100:	4603      	mov	r3, r0
}
 800d102:	4618      	mov	r0, r3
 800d104:	3708      	adds	r7, #8
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	0801d6fc 	.word	0x0801d6fc
 800d110:	0801d80c 	.word	0x0801d80c
 800d114:	0801d740 	.word	0x0801d740

0800d118 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b08e      	sub	sp, #56	; 0x38
 800d11c:	af04      	add	r7, sp, #16
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d107      	bne.n	800d138 <tcp_abandon+0x20>
 800d128:	4b52      	ldr	r3, [pc, #328]	; (800d274 <tcp_abandon+0x15c>)
 800d12a:	f240 223d 	movw	r2, #573	; 0x23d
 800d12e:	4952      	ldr	r1, [pc, #328]	; (800d278 <tcp_abandon+0x160>)
 800d130:	4852      	ldr	r0, [pc, #328]	; (800d27c <tcp_abandon+0x164>)
 800d132:	f00a fb95 	bl	8017860 <iprintf>
 800d136:	e099      	b.n	800d26c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	7d1b      	ldrb	r3, [r3, #20]
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	d106      	bne.n	800d14e <tcp_abandon+0x36>
 800d140:	4b4c      	ldr	r3, [pc, #304]	; (800d274 <tcp_abandon+0x15c>)
 800d142:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d146:	494e      	ldr	r1, [pc, #312]	; (800d280 <tcp_abandon+0x168>)
 800d148:	484c      	ldr	r0, [pc, #304]	; (800d27c <tcp_abandon+0x164>)
 800d14a:	f00a fb89 	bl	8017860 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	7d1b      	ldrb	r3, [r3, #20]
 800d152:	2b0a      	cmp	r3, #10
 800d154:	d107      	bne.n	800d166 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d156:	6879      	ldr	r1, [r7, #4]
 800d158:	484a      	ldr	r0, [pc, #296]	; (800d284 <tcp_abandon+0x16c>)
 800d15a:	f000 ffc3 	bl	800e0e4 <tcp_pcb_remove>
    tcp_free(pcb);
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f7ff fdb0 	bl	800ccc4 <tcp_free>
 800d164:	e082      	b.n	800d26c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d166:	2300      	movs	r3, #0
 800d168:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d16a:	2300      	movs	r3, #0
 800d16c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d172:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d178:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d180:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	7d1b      	ldrb	r3, [r3, #20]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d126      	bne.n	800d1de <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	8adb      	ldrh	r3, [r3, #22]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d02e      	beq.n	800d1f6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d198:	4b3b      	ldr	r3, [pc, #236]	; (800d288 <tcp_abandon+0x170>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	687a      	ldr	r2, [r7, #4]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d105      	bne.n	800d1ae <tcp_abandon+0x96>
 800d1a2:	4b39      	ldr	r3, [pc, #228]	; (800d288 <tcp_abandon+0x170>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	68db      	ldr	r3, [r3, #12]
 800d1a8:	4a37      	ldr	r2, [pc, #220]	; (800d288 <tcp_abandon+0x170>)
 800d1aa:	6013      	str	r3, [r2, #0]
 800d1ac:	e013      	b.n	800d1d6 <tcp_abandon+0xbe>
 800d1ae:	4b36      	ldr	r3, [pc, #216]	; (800d288 <tcp_abandon+0x170>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	61fb      	str	r3, [r7, #28]
 800d1b4:	e00c      	b.n	800d1d0 <tcp_abandon+0xb8>
 800d1b6:	69fb      	ldr	r3, [r7, #28]
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d104      	bne.n	800d1ca <tcp_abandon+0xb2>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	68da      	ldr	r2, [r3, #12]
 800d1c4:	69fb      	ldr	r3, [r7, #28]
 800d1c6:	60da      	str	r2, [r3, #12]
 800d1c8:	e005      	b.n	800d1d6 <tcp_abandon+0xbe>
 800d1ca:	69fb      	ldr	r3, [r7, #28]
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	61fb      	str	r3, [r7, #28]
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d1ef      	bne.n	800d1b6 <tcp_abandon+0x9e>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2200      	movs	r2, #0
 800d1da:	60da      	str	r2, [r3, #12]
 800d1dc:	e00b      	b.n	800d1f6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	8adb      	ldrh	r3, [r3, #22]
 800d1e6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d1e8:	6879      	ldr	r1, [r7, #4]
 800d1ea:	4828      	ldr	r0, [pc, #160]	; (800d28c <tcp_abandon+0x174>)
 800d1ec:	f000 ff7a 	bl	800e0e4 <tcp_pcb_remove>
 800d1f0:	4b27      	ldr	r3, [pc, #156]	; (800d290 <tcp_abandon+0x178>)
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d004      	beq.n	800d208 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d202:	4618      	mov	r0, r3
 800d204:	f000 fd1c 	bl	800dc40 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d004      	beq.n	800d21a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d214:	4618      	mov	r0, r3
 800d216:	f000 fd13 	bl	800dc40 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d004      	beq.n	800d22c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d226:	4618      	mov	r0, r3
 800d228:	f000 fd0a 	bl	800dc40 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d00e      	beq.n	800d250 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d232:	6879      	ldr	r1, [r7, #4]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	3304      	adds	r3, #4
 800d238:	687a      	ldr	r2, [r7, #4]
 800d23a:	8b12      	ldrh	r2, [r2, #24]
 800d23c:	9202      	str	r2, [sp, #8]
 800d23e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d240:	9201      	str	r2, [sp, #4]
 800d242:	9300      	str	r3, [sp, #0]
 800d244:	460b      	mov	r3, r1
 800d246:	697a      	ldr	r2, [r7, #20]
 800d248:	69b9      	ldr	r1, [r7, #24]
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f004 fcbe 	bl	8011bcc <tcp_rst>
    }
    last_state = pcb->state;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	7d1b      	ldrb	r3, [r3, #20]
 800d254:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f7ff fd34 	bl	800ccc4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d004      	beq.n	800d26c <tcp_abandon+0x154>
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	f06f 010c 	mvn.w	r1, #12
 800d268:	68f8      	ldr	r0, [r7, #12]
 800d26a:	4798      	blx	r3
  }
}
 800d26c:	3728      	adds	r7, #40	; 0x28
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop
 800d274:	0801d6fc 	.word	0x0801d6fc
 800d278:	0801d840 	.word	0x0801d840
 800d27c:	0801d740 	.word	0x0801d740
 800d280:	0801d85c 	.word	0x0801d85c
 800d284:	20006e4c 	.word	0x20006e4c
 800d288:	20006e48 	.word	0x20006e48
 800d28c:	20006e3c 	.word	0x20006e3c
 800d290:	20006e38 	.word	0x20006e38

0800d294 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d29c:	2101      	movs	r1, #1
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f7ff ff3a 	bl	800d118 <tcp_abandon>
}
 800d2a4:	bf00      	nop
 800d2a6:	3708      	adds	r7, #8
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d106      	bne.n	800d2c8 <tcp_update_rcv_ann_wnd+0x1c>
 800d2ba:	4b25      	ldr	r3, [pc, #148]	; (800d350 <tcp_update_rcv_ann_wnd+0xa4>)
 800d2bc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d2c0:	4924      	ldr	r1, [pc, #144]	; (800d354 <tcp_update_rcv_ann_wnd+0xa8>)
 800d2c2:	4825      	ldr	r0, [pc, #148]	; (800d358 <tcp_update_rcv_ann_wnd+0xac>)
 800d2c4:	f00a facc 	bl	8017860 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d2d0:	4413      	add	r3, r2
 800d2d2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d8:	687a      	ldr	r2, [r7, #4]
 800d2da:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d2dc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800d2e0:	bf28      	it	cs
 800d2e2:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 800d2e6:	b292      	uxth	r2, r2
 800d2e8:	4413      	add	r3, r2
 800d2ea:	68fa      	ldr	r2, [r7, #12]
 800d2ec:	1ad3      	subs	r3, r2, r3
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	db08      	blt.n	800d304 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2fe:	68fa      	ldr	r2, [r7, #12]
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	e020      	b.n	800d346 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d30c:	1ad3      	subs	r3, r2, r3
 800d30e:	2b00      	cmp	r3, #0
 800d310:	dd03      	ble.n	800d31a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2200      	movs	r2, #0
 800d316:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d318:	e014      	b.n	800d344 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d322:	1ad3      	subs	r3, r2, r3
 800d324:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d32c:	d306      	bcc.n	800d33c <tcp_update_rcv_ann_wnd+0x90>
 800d32e:	4b08      	ldr	r3, [pc, #32]	; (800d350 <tcp_update_rcv_ann_wnd+0xa4>)
 800d330:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d334:	4909      	ldr	r1, [pc, #36]	; (800d35c <tcp_update_rcv_ann_wnd+0xb0>)
 800d336:	4808      	ldr	r0, [pc, #32]	; (800d358 <tcp_update_rcv_ann_wnd+0xac>)
 800d338:	f00a fa92 	bl	8017860 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	b29a      	uxth	r2, r3
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d344:	2300      	movs	r3, #0
  }
}
 800d346:	4618      	mov	r0, r3
 800d348:	3710      	adds	r7, #16
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	bf00      	nop
 800d350:	0801d6fc 	.word	0x0801d6fc
 800d354:	0801d958 	.word	0x0801d958
 800d358:	0801d740 	.word	0x0801d740
 800d35c:	0801d97c 	.word	0x0801d97c

0800d360 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b084      	sub	sp, #16
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	460b      	mov	r3, r1
 800d36a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d107      	bne.n	800d382 <tcp_recved+0x22>
 800d372:	4b1f      	ldr	r3, [pc, #124]	; (800d3f0 <tcp_recved+0x90>)
 800d374:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d378:	491e      	ldr	r1, [pc, #120]	; (800d3f4 <tcp_recved+0x94>)
 800d37a:	481f      	ldr	r0, [pc, #124]	; (800d3f8 <tcp_recved+0x98>)
 800d37c:	f00a fa70 	bl	8017860 <iprintf>
 800d380:	e032      	b.n	800d3e8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	7d1b      	ldrb	r3, [r3, #20]
 800d386:	2b01      	cmp	r3, #1
 800d388:	d106      	bne.n	800d398 <tcp_recved+0x38>
 800d38a:	4b19      	ldr	r3, [pc, #100]	; (800d3f0 <tcp_recved+0x90>)
 800d38c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800d390:	491a      	ldr	r1, [pc, #104]	; (800d3fc <tcp_recved+0x9c>)
 800d392:	4819      	ldr	r0, [pc, #100]	; (800d3f8 <tcp_recved+0x98>)
 800d394:	f00a fa64 	bl	8017860 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d39c:	887b      	ldrh	r3, [r7, #2]
 800d39e:	4413      	add	r3, r2
 800d3a0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d3a2:	89fb      	ldrh	r3, [r7, #14]
 800d3a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d3a8:	d804      	bhi.n	800d3b4 <tcp_recved+0x54>
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3ae:	89fa      	ldrh	r2, [r7, #14]
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d204      	bcs.n	800d3be <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d3ba:	851a      	strh	r2, [r3, #40]	; 0x28
 800d3bc:	e002      	b.n	800d3c4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	89fa      	ldrh	r2, [r7, #14]
 800d3c2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f7ff ff71 	bl	800d2ac <tcp_update_rcv_ann_wnd>
 800d3ca:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3d2:	d309      	bcc.n	800d3e8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	8b5b      	ldrh	r3, [r3, #26]
 800d3d8:	f043 0302 	orr.w	r3, r3, #2
 800d3dc:	b29a      	uxth	r2, r3
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f003 fe3e 	bl	8011064 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d3e8:	3710      	adds	r7, #16
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	0801d6fc 	.word	0x0801d6fc
 800d3f4:	0801d998 	.word	0x0801d998
 800d3f8:	0801d740 	.word	0x0801d740
 800d3fc:	0801d9b0 	.word	0x0801d9b0

0800d400 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d400:	b5b0      	push	{r4, r5, r7, lr}
 800d402:	b090      	sub	sp, #64	; 0x40
 800d404:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d406:	2300      	movs	r3, #0
 800d408:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d40c:	4b94      	ldr	r3, [pc, #592]	; (800d660 <tcp_slowtmr+0x260>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	3301      	adds	r3, #1
 800d412:	4a93      	ldr	r2, [pc, #588]	; (800d660 <tcp_slowtmr+0x260>)
 800d414:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d416:	4b93      	ldr	r3, [pc, #588]	; (800d664 <tcp_slowtmr+0x264>)
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	3301      	adds	r3, #1
 800d41c:	b2da      	uxtb	r2, r3
 800d41e:	4b91      	ldr	r3, [pc, #580]	; (800d664 <tcp_slowtmr+0x264>)
 800d420:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d422:	2300      	movs	r3, #0
 800d424:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d426:	4b90      	ldr	r3, [pc, #576]	; (800d668 <tcp_slowtmr+0x268>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d42c:	e29f      	b.n	800d96e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d430:	7d1b      	ldrb	r3, [r3, #20]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d106      	bne.n	800d444 <tcp_slowtmr+0x44>
 800d436:	4b8d      	ldr	r3, [pc, #564]	; (800d66c <tcp_slowtmr+0x26c>)
 800d438:	f240 42be 	movw	r2, #1214	; 0x4be
 800d43c:	498c      	ldr	r1, [pc, #560]	; (800d670 <tcp_slowtmr+0x270>)
 800d43e:	488d      	ldr	r0, [pc, #564]	; (800d674 <tcp_slowtmr+0x274>)
 800d440:	f00a fa0e 	bl	8017860 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d446:	7d1b      	ldrb	r3, [r3, #20]
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d106      	bne.n	800d45a <tcp_slowtmr+0x5a>
 800d44c:	4b87      	ldr	r3, [pc, #540]	; (800d66c <tcp_slowtmr+0x26c>)
 800d44e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d452:	4989      	ldr	r1, [pc, #548]	; (800d678 <tcp_slowtmr+0x278>)
 800d454:	4887      	ldr	r0, [pc, #540]	; (800d674 <tcp_slowtmr+0x274>)
 800d456:	f00a fa03 	bl	8017860 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45c:	7d1b      	ldrb	r3, [r3, #20]
 800d45e:	2b0a      	cmp	r3, #10
 800d460:	d106      	bne.n	800d470 <tcp_slowtmr+0x70>
 800d462:	4b82      	ldr	r3, [pc, #520]	; (800d66c <tcp_slowtmr+0x26c>)
 800d464:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d468:	4984      	ldr	r1, [pc, #528]	; (800d67c <tcp_slowtmr+0x27c>)
 800d46a:	4882      	ldr	r0, [pc, #520]	; (800d674 <tcp_slowtmr+0x274>)
 800d46c:	f00a f9f8 	bl	8017860 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d472:	7f9a      	ldrb	r2, [r3, #30]
 800d474:	4b7b      	ldr	r3, [pc, #492]	; (800d664 <tcp_slowtmr+0x264>)
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	429a      	cmp	r2, r3
 800d47a:	d105      	bne.n	800d488 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d47e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d482:	68db      	ldr	r3, [r3, #12]
 800d484:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d486:	e272      	b.n	800d96e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d488:	4b76      	ldr	r3, [pc, #472]	; (800d664 <tcp_slowtmr+0x264>)
 800d48a:	781a      	ldrb	r2, [r3, #0]
 800d48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d490:	2300      	movs	r3, #0
 800d492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d496:	2300      	movs	r3, #0
 800d498:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49e:	7d1b      	ldrb	r3, [r3, #20]
 800d4a0:	2b02      	cmp	r3, #2
 800d4a2:	d10a      	bne.n	800d4ba <tcp_slowtmr+0xba>
 800d4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d4aa:	2b05      	cmp	r3, #5
 800d4ac:	d905      	bls.n	800d4ba <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d4ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4b8:	e11e      	b.n	800d6f8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d4c0:	2b0b      	cmp	r3, #11
 800d4c2:	d905      	bls.n	800d4d0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d4c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4ce:	e113      	b.n	800d6f8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d075      	beq.n	800d5c6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d006      	beq.n	800d4f0 <tcp_slowtmr+0xf0>
 800d4e2:	4b62      	ldr	r3, [pc, #392]	; (800d66c <tcp_slowtmr+0x26c>)
 800d4e4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d4e8:	4965      	ldr	r1, [pc, #404]	; (800d680 <tcp_slowtmr+0x280>)
 800d4ea:	4862      	ldr	r0, [pc, #392]	; (800d674 <tcp_slowtmr+0x274>)
 800d4ec:	f00a f9b8 	bl	8017860 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d106      	bne.n	800d506 <tcp_slowtmr+0x106>
 800d4f8:	4b5c      	ldr	r3, [pc, #368]	; (800d66c <tcp_slowtmr+0x26c>)
 800d4fa:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d4fe:	4961      	ldr	r1, [pc, #388]	; (800d684 <tcp_slowtmr+0x284>)
 800d500:	485c      	ldr	r0, [pc, #368]	; (800d674 <tcp_slowtmr+0x274>)
 800d502:	f00a f9ad 	bl	8017860 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d508:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d50c:	2b0b      	cmp	r3, #11
 800d50e:	d905      	bls.n	800d51c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d514:	3301      	adds	r3, #1
 800d516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d51a:	e0ed      	b.n	800d6f8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d522:	3b01      	subs	r3, #1
 800d524:	4a58      	ldr	r2, [pc, #352]	; (800d688 <tcp_slowtmr+0x288>)
 800d526:	5cd3      	ldrb	r3, [r2, r3]
 800d528:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d530:	7c7a      	ldrb	r2, [r7, #17]
 800d532:	429a      	cmp	r2, r3
 800d534:	d907      	bls.n	800d546 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d538:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d53c:	3301      	adds	r3, #1
 800d53e:	b2da      	uxtb	r2, r3
 800d540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d542:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d548:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d54c:	7c7a      	ldrb	r2, [r7, #17]
 800d54e:	429a      	cmp	r2, r3
 800d550:	f200 80d2 	bhi.w	800d6f8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d554:	2301      	movs	r3, #1
 800d556:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d108      	bne.n	800d574 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d562:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d564:	f004 fc24 	bl	8011db0 <tcp_zero_window_probe>
 800d568:	4603      	mov	r3, r0
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d014      	beq.n	800d598 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d56e:	2300      	movs	r3, #0
 800d570:	623b      	str	r3, [r7, #32]
 800d572:	e011      	b.n	800d598 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d576:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d57a:	4619      	mov	r1, r3
 800d57c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d57e:	f003 faeb 	bl	8010b58 <tcp_split_unsent_seg>
 800d582:	4603      	mov	r3, r0
 800d584:	2b00      	cmp	r3, #0
 800d586:	d107      	bne.n	800d598 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d588:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d58a:	f003 fd6b 	bl	8011064 <tcp_output>
 800d58e:	4603      	mov	r3, r0
 800d590:	2b00      	cmp	r3, #0
 800d592:	d101      	bne.n	800d598 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d594:	2300      	movs	r3, #0
 800d596:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d598:	6a3b      	ldr	r3, [r7, #32]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	f000 80ac 	beq.w	800d6f8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5aa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d5ae:	2b06      	cmp	r3, #6
 800d5b0:	f200 80a2 	bhi.w	800d6f8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	b2da      	uxtb	r2, r3
 800d5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d5c4:	e098      	b.n	800d6f8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	db0f      	blt.n	800d5f0 <tcp_slowtmr+0x1f0>
 800d5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d5d6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d008      	beq.n	800d5f0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	3301      	adds	r3, #1
 800d5e8:	b29b      	uxth	r3, r3
 800d5ea:	b21a      	sxth	r2, r3
 800d5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ee:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	db7b      	blt.n	800d6f8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d600:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d602:	f004 f821 	bl	8011648 <tcp_rexmit_rto_prepare>
 800d606:	4603      	mov	r3, r0
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d007      	beq.n	800d61c <tcp_slowtmr+0x21c>
 800d60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d60e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d610:	2b00      	cmp	r3, #0
 800d612:	d171      	bne.n	800d6f8 <tcp_slowtmr+0x2f8>
 800d614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d06d      	beq.n	800d6f8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d61e:	7d1b      	ldrb	r3, [r3, #20]
 800d620:	2b02      	cmp	r3, #2
 800d622:	d03a      	beq.n	800d69a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d626:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d62a:	2b0c      	cmp	r3, #12
 800d62c:	bf28      	it	cs
 800d62e:	230c      	movcs	r3, #12
 800d630:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d634:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d638:	10db      	asrs	r3, r3, #3
 800d63a:	b21b      	sxth	r3, r3
 800d63c:	461a      	mov	r2, r3
 800d63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d640:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d644:	4413      	add	r3, r2
 800d646:	7efa      	ldrb	r2, [r7, #27]
 800d648:	4910      	ldr	r1, [pc, #64]	; (800d68c <tcp_slowtmr+0x28c>)
 800d64a:	5c8a      	ldrb	r2, [r1, r2]
 800d64c:	4093      	lsls	r3, r2
 800d64e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d656:	4293      	cmp	r3, r2
 800d658:	dc1a      	bgt.n	800d690 <tcp_slowtmr+0x290>
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	b21a      	sxth	r2, r3
 800d65e:	e019      	b.n	800d694 <tcp_slowtmr+0x294>
 800d660:	20006e40 	.word	0x20006e40
 800d664:	20000456 	.word	0x20000456
 800d668:	20006e3c 	.word	0x20006e3c
 800d66c:	0801d6fc 	.word	0x0801d6fc
 800d670:	0801da40 	.word	0x0801da40
 800d674:	0801d740 	.word	0x0801d740
 800d678:	0801da6c 	.word	0x0801da6c
 800d67c:	0801da98 	.word	0x0801da98
 800d680:	0801dac8 	.word	0x0801dac8
 800d684:	0801dafc 	.word	0x0801dafc
 800d688:	0801fa78 	.word	0x0801fa78
 800d68c:	0801fa68 	.word	0x0801fa68
 800d690:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d696:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69c:	2200      	movs	r2, #0
 800d69e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	bf28      	it	cs
 800d6b0:	4613      	movcs	r3, r2
 800d6b2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d6b4:	8a7b      	ldrh	r3, [r7, #18]
 800d6b6:	085b      	lsrs	r3, r3, #1
 800d6b8:	b29a      	uxth	r2, r3
 800d6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6ca:	005b      	lsls	r3, r3, #1
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d206      	bcs.n	800d6e0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6d6:	005b      	lsls	r3, r3, #1
 800d6d8:	b29a      	uxth	r2, r3
 800d6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d6f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6f4:	f004 f818 	bl	8011728 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6fa:	7d1b      	ldrb	r3, [r3, #20]
 800d6fc:	2b06      	cmp	r3, #6
 800d6fe:	d111      	bne.n	800d724 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d702:	8b5b      	ldrh	r3, [r3, #26]
 800d704:	f003 0310 	and.w	r3, r3, #16
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d00b      	beq.n	800d724 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d70c:	4b9d      	ldr	r3, [pc, #628]	; (800d984 <tcp_slowtmr+0x584>)
 800d70e:	681a      	ldr	r2, [r3, #0]
 800d710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d712:	6a1b      	ldr	r3, [r3, #32]
 800d714:	1ad3      	subs	r3, r2, r3
 800d716:	2b28      	cmp	r3, #40	; 0x28
 800d718:	d904      	bls.n	800d724 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d71a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d71e:	3301      	adds	r3, #1
 800d720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d726:	7a5b      	ldrb	r3, [r3, #9]
 800d728:	f003 0308 	and.w	r3, r3, #8
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d04c      	beq.n	800d7ca <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d732:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d734:	2b04      	cmp	r3, #4
 800d736:	d003      	beq.n	800d740 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d73c:	2b07      	cmp	r3, #7
 800d73e:	d144      	bne.n	800d7ca <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d740:	4b90      	ldr	r3, [pc, #576]	; (800d984 <tcp_slowtmr+0x584>)
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d746:	6a1b      	ldr	r3, [r3, #32]
 800d748:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d750:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d754:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d758:	498b      	ldr	r1, [pc, #556]	; (800d988 <tcp_slowtmr+0x588>)
 800d75a:	fba1 1303 	umull	r1, r3, r1, r3
 800d75e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d760:	429a      	cmp	r2, r3
 800d762:	d90a      	bls.n	800d77a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d768:	3301      	adds	r3, #1
 800d76a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d76e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d772:	3301      	adds	r3, #1
 800d774:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d778:	e027      	b.n	800d7ca <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d77a:	4b82      	ldr	r3, [pc, #520]	; (800d984 <tcp_slowtmr+0x584>)
 800d77c:	681a      	ldr	r2, [r3, #0]
 800d77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d780:	6a1b      	ldr	r3, [r3, #32]
 800d782:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d786:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d78c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d790:	4618      	mov	r0, r3
 800d792:	4b7e      	ldr	r3, [pc, #504]	; (800d98c <tcp_slowtmr+0x58c>)
 800d794:	fb03 f300 	mul.w	r3, r3, r0
 800d798:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d79a:	497b      	ldr	r1, [pc, #492]	; (800d988 <tcp_slowtmr+0x588>)
 800d79c:	fba1 1303 	umull	r1, r3, r1, r3
 800d7a0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d911      	bls.n	800d7ca <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d7a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7a8:	f004 fac2 	bl	8011d30 <tcp_keepalive>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d7b2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d107      	bne.n	800d7ca <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7bc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d7c0:	3301      	adds	r3, #1
 800d7c2:	b2da      	uxtb	r2, r3
 800d7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d011      	beq.n	800d7f6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d7d2:	4b6c      	ldr	r3, [pc, #432]	; (800d984 <tcp_slowtmr+0x584>)
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d8:	6a1b      	ldr	r3, [r3, #32]
 800d7da:	1ad2      	subs	r2, r2, r3
 800d7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7de:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	005b      	lsls	r3, r3, #1
 800d7e8:	440b      	add	r3, r1
 800d7ea:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d302      	bcc.n	800d7f6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d7f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7f2:	f000 fddb 	bl	800e3ac <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f8:	7d1b      	ldrb	r3, [r3, #20]
 800d7fa:	2b03      	cmp	r3, #3
 800d7fc:	d10b      	bne.n	800d816 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d7fe:	4b61      	ldr	r3, [pc, #388]	; (800d984 <tcp_slowtmr+0x584>)
 800d800:	681a      	ldr	r2, [r3, #0]
 800d802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d804:	6a1b      	ldr	r3, [r3, #32]
 800d806:	1ad3      	subs	r3, r2, r3
 800d808:	2b28      	cmp	r3, #40	; 0x28
 800d80a:	d904      	bls.n	800d816 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d80c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d810:	3301      	adds	r3, #1
 800d812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d818:	7d1b      	ldrb	r3, [r3, #20]
 800d81a:	2b09      	cmp	r3, #9
 800d81c:	d10b      	bne.n	800d836 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d81e:	4b59      	ldr	r3, [pc, #356]	; (800d984 <tcp_slowtmr+0x584>)
 800d820:	681a      	ldr	r2, [r3, #0]
 800d822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d824:	6a1b      	ldr	r3, [r3, #32]
 800d826:	1ad3      	subs	r3, r2, r3
 800d828:	2bf0      	cmp	r3, #240	; 0xf0
 800d82a:	d904      	bls.n	800d836 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800d82c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d830:	3301      	adds	r3, #1
 800d832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d836:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d060      	beq.n	800d900 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d844:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d846:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d848:	f000 fbfc 	bl	800e044 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d010      	beq.n	800d874 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d852:	4b4f      	ldr	r3, [pc, #316]	; (800d990 <tcp_slowtmr+0x590>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d858:	429a      	cmp	r2, r3
 800d85a:	d106      	bne.n	800d86a <tcp_slowtmr+0x46a>
 800d85c:	4b4d      	ldr	r3, [pc, #308]	; (800d994 <tcp_slowtmr+0x594>)
 800d85e:	f240 526d 	movw	r2, #1389	; 0x56d
 800d862:	494d      	ldr	r1, [pc, #308]	; (800d998 <tcp_slowtmr+0x598>)
 800d864:	484d      	ldr	r0, [pc, #308]	; (800d99c <tcp_slowtmr+0x59c>)
 800d866:	f009 fffb 	bl	8017860 <iprintf>
        prev->next = pcb->next;
 800d86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86c:	68da      	ldr	r2, [r3, #12]
 800d86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d870:	60da      	str	r2, [r3, #12]
 800d872:	e00f      	b.n	800d894 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d874:	4b46      	ldr	r3, [pc, #280]	; (800d990 <tcp_slowtmr+0x590>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d006      	beq.n	800d88c <tcp_slowtmr+0x48c>
 800d87e:	4b45      	ldr	r3, [pc, #276]	; (800d994 <tcp_slowtmr+0x594>)
 800d880:	f240 5271 	movw	r2, #1393	; 0x571
 800d884:	4946      	ldr	r1, [pc, #280]	; (800d9a0 <tcp_slowtmr+0x5a0>)
 800d886:	4845      	ldr	r0, [pc, #276]	; (800d99c <tcp_slowtmr+0x59c>)
 800d888:	f009 ffea 	bl	8017860 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d88e:	68db      	ldr	r3, [r3, #12]
 800d890:	4a3f      	ldr	r2, [pc, #252]	; (800d990 <tcp_slowtmr+0x590>)
 800d892:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d894:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d013      	beq.n	800d8c4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d8a4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a8:	3304      	adds	r3, #4
 800d8aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8ac:	8ad2      	ldrh	r2, [r2, #22]
 800d8ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8b0:	8b09      	ldrh	r1, [r1, #24]
 800d8b2:	9102      	str	r1, [sp, #8]
 800d8b4:	9201      	str	r2, [sp, #4]
 800d8b6:	9300      	str	r3, [sp, #0]
 800d8b8:	462b      	mov	r3, r5
 800d8ba:	4622      	mov	r2, r4
 800d8bc:	4601      	mov	r1, r0
 800d8be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8c0:	f004 f984 	bl	8011bcc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c6:	691b      	ldr	r3, [r3, #16]
 800d8c8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8cc:	7d1b      	ldrb	r3, [r3, #20]
 800d8ce:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d6:	68db      	ldr	r3, [r3, #12]
 800d8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d8da:	6838      	ldr	r0, [r7, #0]
 800d8dc:	f7ff f9f2 	bl	800ccc4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d8e0:	4b30      	ldr	r3, [pc, #192]	; (800d9a4 <tcp_slowtmr+0x5a4>)
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d004      	beq.n	800d8f6 <tcp_slowtmr+0x4f6>
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f06f 010c 	mvn.w	r1, #12
 800d8f2:	68b8      	ldr	r0, [r7, #8]
 800d8f4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d8f6:	4b2b      	ldr	r3, [pc, #172]	; (800d9a4 <tcp_slowtmr+0x5a4>)
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d037      	beq.n	800d96e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d8fe:	e590      	b.n	800d422 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d902:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d906:	68db      	ldr	r3, [r3, #12]
 800d908:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90c:	7f1b      	ldrb	r3, [r3, #28]
 800d90e:	3301      	adds	r3, #1
 800d910:	b2da      	uxtb	r2, r3
 800d912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d914:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d918:	7f1a      	ldrb	r2, [r3, #28]
 800d91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91c:	7f5b      	ldrb	r3, [r3, #29]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d325      	bcc.n	800d96e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d924:	2200      	movs	r2, #0
 800d926:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d928:	4b1e      	ldr	r3, [pc, #120]	; (800d9a4 <tcp_slowtmr+0x5a4>)
 800d92a:	2200      	movs	r2, #0
 800d92c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00b      	beq.n	800d950 <tcp_slowtmr+0x550>
 800d938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d93e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d940:	6912      	ldr	r2, [r2, #16]
 800d942:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d944:	4610      	mov	r0, r2
 800d946:	4798      	blx	r3
 800d948:	4603      	mov	r3, r0
 800d94a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d94e:	e002      	b.n	800d956 <tcp_slowtmr+0x556>
 800d950:	2300      	movs	r3, #0
 800d952:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d956:	4b13      	ldr	r3, [pc, #76]	; (800d9a4 <tcp_slowtmr+0x5a4>)
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d000      	beq.n	800d960 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800d95e:	e560      	b.n	800d422 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d960:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d964:	2b00      	cmp	r3, #0
 800d966:	d102      	bne.n	800d96e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d96a:	f003 fb7b 	bl	8011064 <tcp_output>
  while (pcb != NULL) {
 800d96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d970:	2b00      	cmp	r3, #0
 800d972:	f47f ad5c 	bne.w	800d42e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d976:	2300      	movs	r3, #0
 800d978:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d97a:	4b0b      	ldr	r3, [pc, #44]	; (800d9a8 <tcp_slowtmr+0x5a8>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d980:	e067      	b.n	800da52 <tcp_slowtmr+0x652>
 800d982:	bf00      	nop
 800d984:	20006e40 	.word	0x20006e40
 800d988:	10624dd3 	.word	0x10624dd3
 800d98c:	000124f8 	.word	0x000124f8
 800d990:	20006e3c 	.word	0x20006e3c
 800d994:	0801d6fc 	.word	0x0801d6fc
 800d998:	0801db34 	.word	0x0801db34
 800d99c:	0801d740 	.word	0x0801d740
 800d9a0:	0801db60 	.word	0x0801db60
 800d9a4:	20006e38 	.word	0x20006e38
 800d9a8:	20006e4c 	.word	0x20006e4c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ae:	7d1b      	ldrb	r3, [r3, #20]
 800d9b0:	2b0a      	cmp	r3, #10
 800d9b2:	d006      	beq.n	800d9c2 <tcp_slowtmr+0x5c2>
 800d9b4:	4b2b      	ldr	r3, [pc, #172]	; (800da64 <tcp_slowtmr+0x664>)
 800d9b6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d9ba:	492b      	ldr	r1, [pc, #172]	; (800da68 <tcp_slowtmr+0x668>)
 800d9bc:	482b      	ldr	r0, [pc, #172]	; (800da6c <tcp_slowtmr+0x66c>)
 800d9be:	f009 ff4f 	bl	8017860 <iprintf>
    pcb_remove = 0;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d9c8:	4b29      	ldr	r3, [pc, #164]	; (800da70 <tcp_slowtmr+0x670>)
 800d9ca:	681a      	ldr	r2, [r3, #0]
 800d9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ce:	6a1b      	ldr	r3, [r3, #32]
 800d9d0:	1ad3      	subs	r3, r2, r3
 800d9d2:	2bf0      	cmp	r3, #240	; 0xf0
 800d9d4:	d904      	bls.n	800d9e0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d9d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9da:	3301      	adds	r3, #1
 800d9dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d02f      	beq.n	800da48 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d9e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9ea:	f000 fb2b 	bl	800e044 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d010      	beq.n	800da16 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d9f4:	4b1f      	ldr	r3, [pc, #124]	; (800da74 <tcp_slowtmr+0x674>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d106      	bne.n	800da0c <tcp_slowtmr+0x60c>
 800d9fe:	4b19      	ldr	r3, [pc, #100]	; (800da64 <tcp_slowtmr+0x664>)
 800da00:	f240 52af 	movw	r2, #1455	; 0x5af
 800da04:	491c      	ldr	r1, [pc, #112]	; (800da78 <tcp_slowtmr+0x678>)
 800da06:	4819      	ldr	r0, [pc, #100]	; (800da6c <tcp_slowtmr+0x66c>)
 800da08:	f009 ff2a 	bl	8017860 <iprintf>
        prev->next = pcb->next;
 800da0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da0e:	68da      	ldr	r2, [r3, #12]
 800da10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da12:	60da      	str	r2, [r3, #12]
 800da14:	e00f      	b.n	800da36 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800da16:	4b17      	ldr	r3, [pc, #92]	; (800da74 <tcp_slowtmr+0x674>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d006      	beq.n	800da2e <tcp_slowtmr+0x62e>
 800da20:	4b10      	ldr	r3, [pc, #64]	; (800da64 <tcp_slowtmr+0x664>)
 800da22:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800da26:	4915      	ldr	r1, [pc, #84]	; (800da7c <tcp_slowtmr+0x67c>)
 800da28:	4810      	ldr	r0, [pc, #64]	; (800da6c <tcp_slowtmr+0x66c>)
 800da2a:	f009 ff19 	bl	8017860 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800da2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da30:	68db      	ldr	r3, [r3, #12]
 800da32:	4a10      	ldr	r2, [pc, #64]	; (800da74 <tcp_slowtmr+0x674>)
 800da34:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800da36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da38:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800da3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3c:	68db      	ldr	r3, [r3, #12]
 800da3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800da40:	69f8      	ldr	r0, [r7, #28]
 800da42:	f7ff f93f 	bl	800ccc4 <tcp_free>
 800da46:	e004      	b.n	800da52 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800da48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da4a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800da4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da4e:	68db      	ldr	r3, [r3, #12]
 800da50:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800da52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da54:	2b00      	cmp	r3, #0
 800da56:	d1a9      	bne.n	800d9ac <tcp_slowtmr+0x5ac>
    }
  }
}
 800da58:	bf00      	nop
 800da5a:	bf00      	nop
 800da5c:	3730      	adds	r7, #48	; 0x30
 800da5e:	46bd      	mov	sp, r7
 800da60:	bdb0      	pop	{r4, r5, r7, pc}
 800da62:	bf00      	nop
 800da64:	0801d6fc 	.word	0x0801d6fc
 800da68:	0801db8c 	.word	0x0801db8c
 800da6c:	0801d740 	.word	0x0801d740
 800da70:	20006e40 	.word	0x20006e40
 800da74:	20006e4c 	.word	0x20006e4c
 800da78:	0801dbbc 	.word	0x0801dbbc
 800da7c:	0801dbe4 	.word	0x0801dbe4

0800da80 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b082      	sub	sp, #8
 800da84:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800da86:	4b2d      	ldr	r3, [pc, #180]	; (800db3c <tcp_fasttmr+0xbc>)
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	3301      	adds	r3, #1
 800da8c:	b2da      	uxtb	r2, r3
 800da8e:	4b2b      	ldr	r3, [pc, #172]	; (800db3c <tcp_fasttmr+0xbc>)
 800da90:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800da92:	4b2b      	ldr	r3, [pc, #172]	; (800db40 <tcp_fasttmr+0xc0>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800da98:	e048      	b.n	800db2c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	7f9a      	ldrb	r2, [r3, #30]
 800da9e:	4b27      	ldr	r3, [pc, #156]	; (800db3c <tcp_fasttmr+0xbc>)
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d03f      	beq.n	800db26 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800daa6:	4b25      	ldr	r3, [pc, #148]	; (800db3c <tcp_fasttmr+0xbc>)
 800daa8:	781a      	ldrb	r2, [r3, #0]
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	8b5b      	ldrh	r3, [r3, #26]
 800dab2:	f003 0301 	and.w	r3, r3, #1
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d010      	beq.n	800dadc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	8b5b      	ldrh	r3, [r3, #26]
 800dabe:	f043 0302 	orr.w	r3, r3, #2
 800dac2:	b29a      	uxth	r2, r3
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f003 facb 	bl	8011064 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	8b5b      	ldrh	r3, [r3, #26]
 800dad2:	f023 0303 	bic.w	r3, r3, #3
 800dad6:	b29a      	uxth	r2, r3
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	8b5b      	ldrh	r3, [r3, #26]
 800dae0:	f003 0308 	and.w	r3, r3, #8
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d009      	beq.n	800dafc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	8b5b      	ldrh	r3, [r3, #26]
 800daec:	f023 0308 	bic.w	r3, r3, #8
 800daf0:	b29a      	uxth	r2, r3
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f7ff fa78 	bl	800cfec <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00a      	beq.n	800db20 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800db0a:	4b0e      	ldr	r3, [pc, #56]	; (800db44 <tcp_fasttmr+0xc4>)
 800db0c:	2200      	movs	r2, #0
 800db0e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f000 f819 	bl	800db48 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800db16:	4b0b      	ldr	r3, [pc, #44]	; (800db44 <tcp_fasttmr+0xc4>)
 800db18:	781b      	ldrb	r3, [r3, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d000      	beq.n	800db20 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800db1e:	e7b8      	b.n	800da92 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	607b      	str	r3, [r7, #4]
 800db24:	e002      	b.n	800db2c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	68db      	ldr	r3, [r3, #12]
 800db2a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d1b3      	bne.n	800da9a <tcp_fasttmr+0x1a>
    }
  }
}
 800db32:	bf00      	nop
 800db34:	bf00      	nop
 800db36:	3708      	adds	r7, #8
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	20000456 	.word	0x20000456
 800db40:	20006e3c 	.word	0x20006e3c
 800db44:	20006e38 	.word	0x20006e38

0800db48 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800db48:	b590      	push	{r4, r7, lr}
 800db4a:	b085      	sub	sp, #20
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d109      	bne.n	800db6a <tcp_process_refused_data+0x22>
 800db56:	4b37      	ldr	r3, [pc, #220]	; (800dc34 <tcp_process_refused_data+0xec>)
 800db58:	f240 6209 	movw	r2, #1545	; 0x609
 800db5c:	4936      	ldr	r1, [pc, #216]	; (800dc38 <tcp_process_refused_data+0xf0>)
 800db5e:	4837      	ldr	r0, [pc, #220]	; (800dc3c <tcp_process_refused_data+0xf4>)
 800db60:	f009 fe7e 	bl	8017860 <iprintf>
 800db64:	f06f 030f 	mvn.w	r3, #15
 800db68:	e060      	b.n	800dc2c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db6e:	7b5b      	ldrb	r3, [r3, #13]
 800db70:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db76:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2200      	movs	r2, #0
 800db7c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db84:	2b00      	cmp	r3, #0
 800db86:	d00b      	beq.n	800dba0 <tcp_process_refused_data+0x58>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6918      	ldr	r0, [r3, #16]
 800db92:	2300      	movs	r3, #0
 800db94:	68ba      	ldr	r2, [r7, #8]
 800db96:	6879      	ldr	r1, [r7, #4]
 800db98:	47a0      	blx	r4
 800db9a:	4603      	mov	r3, r0
 800db9c:	73fb      	strb	r3, [r7, #15]
 800db9e:	e007      	b.n	800dbb0 <tcp_process_refused_data+0x68>
 800dba0:	2300      	movs	r3, #0
 800dba2:	68ba      	ldr	r2, [r7, #8]
 800dba4:	6879      	ldr	r1, [r7, #4]
 800dba6:	2000      	movs	r0, #0
 800dba8:	f000 f8a4 	bl	800dcf4 <tcp_recv_null>
 800dbac:	4603      	mov	r3, r0
 800dbae:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800dbb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d12a      	bne.n	800dc0e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800dbb8:	7bbb      	ldrb	r3, [r7, #14]
 800dbba:	f003 0320 	and.w	r3, r3, #32
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d033      	beq.n	800dc2a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dbca:	d005      	beq.n	800dbd8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	b29a      	uxth	r2, r3
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d00b      	beq.n	800dbfa <tcp_process_refused_data+0xb2>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6918      	ldr	r0, [r3, #16]
 800dbec:	2300      	movs	r3, #0
 800dbee:	2200      	movs	r2, #0
 800dbf0:	6879      	ldr	r1, [r7, #4]
 800dbf2:	47a0      	blx	r4
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	73fb      	strb	r3, [r7, #15]
 800dbf8:	e001      	b.n	800dbfe <tcp_process_refused_data+0xb6>
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800dbfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc02:	f113 0f0d 	cmn.w	r3, #13
 800dc06:	d110      	bne.n	800dc2a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800dc08:	f06f 030c 	mvn.w	r3, #12
 800dc0c:	e00e      	b.n	800dc2c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800dc0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc12:	f113 0f0d 	cmn.w	r3, #13
 800dc16:	d102      	bne.n	800dc1e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800dc18:	f06f 030c 	mvn.w	r3, #12
 800dc1c:	e006      	b.n	800dc2c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	68ba      	ldr	r2, [r7, #8]
 800dc22:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800dc24:	f06f 0304 	mvn.w	r3, #4
 800dc28:	e000      	b.n	800dc2c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800dc2a:	2300      	movs	r3, #0
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3714      	adds	r7, #20
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd90      	pop	{r4, r7, pc}
 800dc34:	0801d6fc 	.word	0x0801d6fc
 800dc38:	0801dc0c 	.word	0x0801dc0c
 800dc3c:	0801d740 	.word	0x0801d740

0800dc40 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b084      	sub	sp, #16
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800dc48:	e007      	b.n	800dc5a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 f80a 	bl	800dc6a <tcp_seg_free>
    seg = next;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d1f4      	bne.n	800dc4a <tcp_segs_free+0xa>
  }
}
 800dc60:	bf00      	nop
 800dc62:	bf00      	nop
 800dc64:	3710      	adds	r7, #16
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}

0800dc6a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800dc6a:	b580      	push	{r7, lr}
 800dc6c:	b082      	sub	sp, #8
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d00c      	beq.n	800dc92 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d004      	beq.n	800dc8a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7fe fd6d 	bl	800c764 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800dc8a:	6879      	ldr	r1, [r7, #4]
 800dc8c:	2003      	movs	r0, #3
 800dc8e:	f7fd ff6f 	bl	800bb70 <memp_free>
  }
}
 800dc92:	bf00      	nop
 800dc94:	3708      	adds	r7, #8
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
	...

0800dc9c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b084      	sub	sp, #16
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d106      	bne.n	800dcb8 <tcp_seg_copy+0x1c>
 800dcaa:	4b0f      	ldr	r3, [pc, #60]	; (800dce8 <tcp_seg_copy+0x4c>)
 800dcac:	f240 6282 	movw	r2, #1666	; 0x682
 800dcb0:	490e      	ldr	r1, [pc, #56]	; (800dcec <tcp_seg_copy+0x50>)
 800dcb2:	480f      	ldr	r0, [pc, #60]	; (800dcf0 <tcp_seg_copy+0x54>)
 800dcb4:	f009 fdd4 	bl	8017860 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800dcb8:	2003      	movs	r0, #3
 800dcba:	f7fd ff0d 	bl	800bad8 <memp_malloc>
 800dcbe:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d101      	bne.n	800dcca <tcp_seg_copy+0x2e>
    return NULL;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	e00a      	b.n	800dce0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800dcca:	2210      	movs	r2, #16
 800dccc:	6879      	ldr	r1, [r7, #4]
 800dcce:	68f8      	ldr	r0, [r7, #12]
 800dcd0:	f009 f882 	bl	8016dd8 <memcpy>
  pbuf_ref(cseg->p);
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	685b      	ldr	r3, [r3, #4]
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f7fe fde3 	bl	800c8a4 <pbuf_ref>
  return cseg;
 800dcde:	68fb      	ldr	r3, [r7, #12]
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3710      	adds	r7, #16
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	0801d6fc 	.word	0x0801d6fc
 800dcec:	0801dc50 	.word	0x0801dc50
 800dcf0:	0801d740 	.word	0x0801d740

0800dcf4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b084      	sub	sp, #16
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	607a      	str	r2, [r7, #4]
 800dd00:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d109      	bne.n	800dd1c <tcp_recv_null+0x28>
 800dd08:	4b12      	ldr	r3, [pc, #72]	; (800dd54 <tcp_recv_null+0x60>)
 800dd0a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800dd0e:	4912      	ldr	r1, [pc, #72]	; (800dd58 <tcp_recv_null+0x64>)
 800dd10:	4812      	ldr	r0, [pc, #72]	; (800dd5c <tcp_recv_null+0x68>)
 800dd12:	f009 fda5 	bl	8017860 <iprintf>
 800dd16:	f06f 030f 	mvn.w	r3, #15
 800dd1a:	e016      	b.n	800dd4a <tcp_recv_null+0x56>

  if (p != NULL) {
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d009      	beq.n	800dd36 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	891b      	ldrh	r3, [r3, #8]
 800dd26:	4619      	mov	r1, r3
 800dd28:	68b8      	ldr	r0, [r7, #8]
 800dd2a:	f7ff fb19 	bl	800d360 <tcp_recved>
    pbuf_free(p);
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f7fe fd18 	bl	800c764 <pbuf_free>
 800dd34:	e008      	b.n	800dd48 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800dd36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d104      	bne.n	800dd48 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800dd3e:	68b8      	ldr	r0, [r7, #8]
 800dd40:	f7ff f9be 	bl	800d0c0 <tcp_close>
 800dd44:	4603      	mov	r3, r0
 800dd46:	e000      	b.n	800dd4a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800dd48:	2300      	movs	r3, #0
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3710      	adds	r7, #16
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}
 800dd52:	bf00      	nop
 800dd54:	0801d6fc 	.word	0x0801d6fc
 800dd58:	0801dc6c 	.word	0x0801dc6c
 800dd5c:	0801d740 	.word	0x0801d740

0800dd60 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b086      	sub	sp, #24
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	4603      	mov	r3, r0
 800dd68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800dd6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	db01      	blt.n	800dd76 <tcp_kill_prio+0x16>
 800dd72:	79fb      	ldrb	r3, [r7, #7]
 800dd74:	e000      	b.n	800dd78 <tcp_kill_prio+0x18>
 800dd76:	237f      	movs	r3, #127	; 0x7f
 800dd78:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800dd7a:	7afb      	ldrb	r3, [r7, #11]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d034      	beq.n	800ddea <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800dd80:	7afb      	ldrb	r3, [r7, #11]
 800dd82:	3b01      	subs	r3, #1
 800dd84:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800dd86:	2300      	movs	r3, #0
 800dd88:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd8e:	4b19      	ldr	r3, [pc, #100]	; (800ddf4 <tcp_kill_prio+0x94>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	617b      	str	r3, [r7, #20]
 800dd94:	e01f      	b.n	800ddd6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	7d5b      	ldrb	r3, [r3, #21]
 800dd9a:	7afa      	ldrb	r2, [r7, #11]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d80c      	bhi.n	800ddba <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800dda4:	7afa      	ldrb	r2, [r7, #11]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d112      	bne.n	800ddd0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ddaa:	4b13      	ldr	r3, [pc, #76]	; (800ddf8 <tcp_kill_prio+0x98>)
 800ddac:	681a      	ldr	r2, [r3, #0]
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	6a1b      	ldr	r3, [r3, #32]
 800ddb2:	1ad3      	subs	r3, r2, r3
 800ddb4:	68fa      	ldr	r2, [r7, #12]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d80a      	bhi.n	800ddd0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ddba:	4b0f      	ldr	r3, [pc, #60]	; (800ddf8 <tcp_kill_prio+0x98>)
 800ddbc:	681a      	ldr	r2, [r3, #0]
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	6a1b      	ldr	r3, [r3, #32]
 800ddc2:	1ad3      	subs	r3, r2, r3
 800ddc4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	7d5b      	ldrb	r3, [r3, #21]
 800ddce:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	68db      	ldr	r3, [r3, #12]
 800ddd4:	617b      	str	r3, [r7, #20]
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d1dc      	bne.n	800dd96 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d004      	beq.n	800ddec <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dde2:	6938      	ldr	r0, [r7, #16]
 800dde4:	f7ff fa56 	bl	800d294 <tcp_abort>
 800dde8:	e000      	b.n	800ddec <tcp_kill_prio+0x8c>
    return;
 800ddea:	bf00      	nop
  }
}
 800ddec:	3718      	adds	r7, #24
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	20006e3c 	.word	0x20006e3c
 800ddf8:	20006e40 	.word	0x20006e40

0800ddfc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b086      	sub	sp, #24
 800de00:	af00      	add	r7, sp, #0
 800de02:	4603      	mov	r3, r0
 800de04:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800de06:	79fb      	ldrb	r3, [r7, #7]
 800de08:	2b08      	cmp	r3, #8
 800de0a:	d009      	beq.n	800de20 <tcp_kill_state+0x24>
 800de0c:	79fb      	ldrb	r3, [r7, #7]
 800de0e:	2b09      	cmp	r3, #9
 800de10:	d006      	beq.n	800de20 <tcp_kill_state+0x24>
 800de12:	4b1a      	ldr	r3, [pc, #104]	; (800de7c <tcp_kill_state+0x80>)
 800de14:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800de18:	4919      	ldr	r1, [pc, #100]	; (800de80 <tcp_kill_state+0x84>)
 800de1a:	481a      	ldr	r0, [pc, #104]	; (800de84 <tcp_kill_state+0x88>)
 800de1c:	f009 fd20 	bl	8017860 <iprintf>

  inactivity = 0;
 800de20:	2300      	movs	r3, #0
 800de22:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800de24:	2300      	movs	r3, #0
 800de26:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800de28:	4b17      	ldr	r3, [pc, #92]	; (800de88 <tcp_kill_state+0x8c>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	617b      	str	r3, [r7, #20]
 800de2e:	e017      	b.n	800de60 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	7d1b      	ldrb	r3, [r3, #20]
 800de34:	79fa      	ldrb	r2, [r7, #7]
 800de36:	429a      	cmp	r2, r3
 800de38:	d10f      	bne.n	800de5a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800de3a:	4b14      	ldr	r3, [pc, #80]	; (800de8c <tcp_kill_state+0x90>)
 800de3c:	681a      	ldr	r2, [r3, #0]
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	6a1b      	ldr	r3, [r3, #32]
 800de42:	1ad3      	subs	r3, r2, r3
 800de44:	68fa      	ldr	r2, [r7, #12]
 800de46:	429a      	cmp	r2, r3
 800de48:	d807      	bhi.n	800de5a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800de4a:	4b10      	ldr	r3, [pc, #64]	; (800de8c <tcp_kill_state+0x90>)
 800de4c:	681a      	ldr	r2, [r3, #0]
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	6a1b      	ldr	r3, [r3, #32]
 800de52:	1ad3      	subs	r3, r2, r3
 800de54:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	68db      	ldr	r3, [r3, #12]
 800de5e:	617b      	str	r3, [r7, #20]
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d1e4      	bne.n	800de30 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d003      	beq.n	800de74 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800de6c:	2100      	movs	r1, #0
 800de6e:	6938      	ldr	r0, [r7, #16]
 800de70:	f7ff f952 	bl	800d118 <tcp_abandon>
  }
}
 800de74:	bf00      	nop
 800de76:	3718      	adds	r7, #24
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	0801d6fc 	.word	0x0801d6fc
 800de80:	0801dc88 	.word	0x0801dc88
 800de84:	0801d740 	.word	0x0801d740
 800de88:	20006e3c 	.word	0x20006e3c
 800de8c:	20006e40 	.word	0x20006e40

0800de90 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800de96:	2300      	movs	r3, #0
 800de98:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800de9a:	2300      	movs	r3, #0
 800de9c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800de9e:	4b12      	ldr	r3, [pc, #72]	; (800dee8 <tcp_kill_timewait+0x58>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	60fb      	str	r3, [r7, #12]
 800dea4:	e012      	b.n	800decc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dea6:	4b11      	ldr	r3, [pc, #68]	; (800deec <tcp_kill_timewait+0x5c>)
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	6a1b      	ldr	r3, [r3, #32]
 800deae:	1ad3      	subs	r3, r2, r3
 800deb0:	687a      	ldr	r2, [r7, #4]
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d807      	bhi.n	800dec6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800deb6:	4b0d      	ldr	r3, [pc, #52]	; (800deec <tcp_kill_timewait+0x5c>)
 800deb8:	681a      	ldr	r2, [r3, #0]
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	6a1b      	ldr	r3, [r3, #32]
 800debe:	1ad3      	subs	r3, r2, r3
 800dec0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	60fb      	str	r3, [r7, #12]
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d1e9      	bne.n	800dea6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d002      	beq.n	800dede <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ded8:	68b8      	ldr	r0, [r7, #8]
 800deda:	f7ff f9db 	bl	800d294 <tcp_abort>
  }
}
 800dede:	bf00      	nop
 800dee0:	3710      	adds	r7, #16
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	bf00      	nop
 800dee8:	20006e4c 	.word	0x20006e4c
 800deec:	20006e40 	.word	0x20006e40

0800def0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b082      	sub	sp, #8
 800def4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800def6:	4b10      	ldr	r3, [pc, #64]	; (800df38 <tcp_handle_closepend+0x48>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800defc:	e014      	b.n	800df28 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	8b5b      	ldrh	r3, [r3, #26]
 800df08:	f003 0308 	and.w	r3, r3, #8
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d009      	beq.n	800df24 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	8b5b      	ldrh	r3, [r3, #26]
 800df14:	f023 0308 	bic.w	r3, r3, #8
 800df18:	b29a      	uxth	r2, r3
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f7ff f864 	bl	800cfec <tcp_close_shutdown_fin>
    }
    pcb = next;
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d1e7      	bne.n	800defe <tcp_handle_closepend+0xe>
  }
}
 800df2e:	bf00      	nop
 800df30:	bf00      	nop
 800df32:	3708      	adds	r7, #8
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}
 800df38:	20006e3c 	.word	0x20006e3c

0800df3c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b084      	sub	sp, #16
 800df40:	af00      	add	r7, sp, #0
 800df42:	4603      	mov	r3, r0
 800df44:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df46:	2001      	movs	r0, #1
 800df48:	f7fd fdc6 	bl	800bad8 <memp_malloc>
 800df4c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d126      	bne.n	800dfa2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800df54:	f7ff ffcc 	bl	800def0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800df58:	f7ff ff9a 	bl	800de90 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df5c:	2001      	movs	r0, #1
 800df5e:	f7fd fdbb 	bl	800bad8 <memp_malloc>
 800df62:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d11b      	bne.n	800dfa2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800df6a:	2009      	movs	r0, #9
 800df6c:	f7ff ff46 	bl	800ddfc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df70:	2001      	movs	r0, #1
 800df72:	f7fd fdb1 	bl	800bad8 <memp_malloc>
 800df76:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d111      	bne.n	800dfa2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800df7e:	2008      	movs	r0, #8
 800df80:	f7ff ff3c 	bl	800ddfc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df84:	2001      	movs	r0, #1
 800df86:	f7fd fda7 	bl	800bad8 <memp_malloc>
 800df8a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d107      	bne.n	800dfa2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800df92:	79fb      	ldrb	r3, [r7, #7]
 800df94:	4618      	mov	r0, r3
 800df96:	f7ff fee3 	bl	800dd60 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df9a:	2001      	movs	r0, #1
 800df9c:	f7fd fd9c 	bl	800bad8 <memp_malloc>
 800dfa0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d03f      	beq.n	800e028 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800dfa8:	229c      	movs	r2, #156	; 0x9c
 800dfaa:	2100      	movs	r1, #0
 800dfac:	68f8      	ldr	r0, [r7, #12]
 800dfae:	f008 ff3b 	bl	8016e28 <memset>
    pcb->prio = prio;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	79fa      	ldrb	r2, [r7, #7]
 800dfb6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800dfbe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dfc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	22ff      	movs	r2, #255	; 0xff
 800dfd6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800dfde:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	2206      	movs	r2, #6
 800dfe4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	2206      	movs	r2, #6
 800dfec:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dff4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2201      	movs	r2, #1
 800dffa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800dffe:	4b0d      	ldr	r3, [pc, #52]	; (800e034 <tcp_alloc+0xf8>)
 800e000:	681a      	ldr	r2, [r3, #0]
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e006:	4b0c      	ldr	r3, [pc, #48]	; (800e038 <tcp_alloc+0xfc>)
 800e008:	781a      	ldrb	r2, [r3, #0]
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800e014:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	4a08      	ldr	r2, [pc, #32]	; (800e03c <tcp_alloc+0x100>)
 800e01c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	4a07      	ldr	r2, [pc, #28]	; (800e040 <tcp_alloc+0x104>)
 800e024:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e028:	68fb      	ldr	r3, [r7, #12]
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3710      	adds	r7, #16
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}
 800e032:	bf00      	nop
 800e034:	20006e40 	.word	0x20006e40
 800e038:	20000456 	.word	0x20000456
 800e03c:	0800dcf5 	.word	0x0800dcf5
 800e040:	006ddd00 	.word	0x006ddd00

0800e044 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d107      	bne.n	800e062 <tcp_pcb_purge+0x1e>
 800e052:	4b21      	ldr	r3, [pc, #132]	; (800e0d8 <tcp_pcb_purge+0x94>)
 800e054:	f640 0251 	movw	r2, #2129	; 0x851
 800e058:	4920      	ldr	r1, [pc, #128]	; (800e0dc <tcp_pcb_purge+0x98>)
 800e05a:	4821      	ldr	r0, [pc, #132]	; (800e0e0 <tcp_pcb_purge+0x9c>)
 800e05c:	f009 fc00 	bl	8017860 <iprintf>
 800e060:	e037      	b.n	800e0d2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	7d1b      	ldrb	r3, [r3, #20]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d033      	beq.n	800e0d2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e06e:	2b0a      	cmp	r3, #10
 800e070:	d02f      	beq.n	800e0d2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e076:	2b01      	cmp	r3, #1
 800e078:	d02b      	beq.n	800e0d2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d007      	beq.n	800e092 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e086:	4618      	mov	r0, r3
 800e088:	f7fe fb6c 	bl	800c764 <pbuf_free>
      pcb->refused_data = NULL;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2200      	movs	r2, #0
 800e090:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e096:	2b00      	cmp	r3, #0
 800e098:	d002      	beq.n	800e0a0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f000 f986 	bl	800e3ac <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0a6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7ff fdc7 	bl	800dc40 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7ff fdc2 	bl	800dc40 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	66da      	str	r2, [r3, #108]	; 0x6c
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e0d2:	3708      	adds	r7, #8
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	0801d6fc 	.word	0x0801d6fc
 800e0dc:	0801dd48 	.word	0x0801dd48
 800e0e0:	0801d740 	.word	0x0801d740

0800e0e4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b084      	sub	sp, #16
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d106      	bne.n	800e102 <tcp_pcb_remove+0x1e>
 800e0f4:	4b3e      	ldr	r3, [pc, #248]	; (800e1f0 <tcp_pcb_remove+0x10c>)
 800e0f6:	f640 0283 	movw	r2, #2179	; 0x883
 800e0fa:	493e      	ldr	r1, [pc, #248]	; (800e1f4 <tcp_pcb_remove+0x110>)
 800e0fc:	483e      	ldr	r0, [pc, #248]	; (800e1f8 <tcp_pcb_remove+0x114>)
 800e0fe:	f009 fbaf 	bl	8017860 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d106      	bne.n	800e116 <tcp_pcb_remove+0x32>
 800e108:	4b39      	ldr	r3, [pc, #228]	; (800e1f0 <tcp_pcb_remove+0x10c>)
 800e10a:	f640 0284 	movw	r2, #2180	; 0x884
 800e10e:	493b      	ldr	r1, [pc, #236]	; (800e1fc <tcp_pcb_remove+0x118>)
 800e110:	4839      	ldr	r0, [pc, #228]	; (800e1f8 <tcp_pcb_remove+0x114>)
 800e112:	f009 fba5 	bl	8017860 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	683a      	ldr	r2, [r7, #0]
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d105      	bne.n	800e12c <tcp_pcb_remove+0x48>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	68da      	ldr	r2, [r3, #12]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	601a      	str	r2, [r3, #0]
 800e12a:	e013      	b.n	800e154 <tcp_pcb_remove+0x70>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	60fb      	str	r3, [r7, #12]
 800e132:	e00c      	b.n	800e14e <tcp_pcb_remove+0x6a>
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	683a      	ldr	r2, [r7, #0]
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d104      	bne.n	800e148 <tcp_pcb_remove+0x64>
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	68da      	ldr	r2, [r3, #12]
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	60da      	str	r2, [r3, #12]
 800e146:	e005      	b.n	800e154 <tcp_pcb_remove+0x70>
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	68db      	ldr	r3, [r3, #12]
 800e14c:	60fb      	str	r3, [r7, #12]
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d1ef      	bne.n	800e134 <tcp_pcb_remove+0x50>
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	2200      	movs	r2, #0
 800e158:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e15a:	6838      	ldr	r0, [r7, #0]
 800e15c:	f7ff ff72 	bl	800e044 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	7d1b      	ldrb	r3, [r3, #20]
 800e164:	2b0a      	cmp	r3, #10
 800e166:	d013      	beq.n	800e190 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d00f      	beq.n	800e190 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	8b5b      	ldrh	r3, [r3, #26]
 800e174:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d009      	beq.n	800e190 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	8b5b      	ldrh	r3, [r3, #26]
 800e180:	f043 0302 	orr.w	r3, r3, #2
 800e184:	b29a      	uxth	r2, r3
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e18a:	6838      	ldr	r0, [r7, #0]
 800e18c:	f002 ff6a 	bl	8011064 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	7d1b      	ldrb	r3, [r3, #20]
 800e194:	2b01      	cmp	r3, #1
 800e196:	d020      	beq.n	800e1da <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d006      	beq.n	800e1ae <tcp_pcb_remove+0xca>
 800e1a0:	4b13      	ldr	r3, [pc, #76]	; (800e1f0 <tcp_pcb_remove+0x10c>)
 800e1a2:	f640 0293 	movw	r2, #2195	; 0x893
 800e1a6:	4916      	ldr	r1, [pc, #88]	; (800e200 <tcp_pcb_remove+0x11c>)
 800e1a8:	4813      	ldr	r0, [pc, #76]	; (800e1f8 <tcp_pcb_remove+0x114>)
 800e1aa:	f009 fb59 	bl	8017860 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d006      	beq.n	800e1c4 <tcp_pcb_remove+0xe0>
 800e1b6:	4b0e      	ldr	r3, [pc, #56]	; (800e1f0 <tcp_pcb_remove+0x10c>)
 800e1b8:	f640 0294 	movw	r2, #2196	; 0x894
 800e1bc:	4911      	ldr	r1, [pc, #68]	; (800e204 <tcp_pcb_remove+0x120>)
 800e1be:	480e      	ldr	r0, [pc, #56]	; (800e1f8 <tcp_pcb_remove+0x114>)
 800e1c0:	f009 fb4e 	bl	8017860 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d006      	beq.n	800e1da <tcp_pcb_remove+0xf6>
 800e1cc:	4b08      	ldr	r3, [pc, #32]	; (800e1f0 <tcp_pcb_remove+0x10c>)
 800e1ce:	f640 0296 	movw	r2, #2198	; 0x896
 800e1d2:	490d      	ldr	r1, [pc, #52]	; (800e208 <tcp_pcb_remove+0x124>)
 800e1d4:	4808      	ldr	r0, [pc, #32]	; (800e1f8 <tcp_pcb_remove+0x114>)
 800e1d6:	f009 fb43 	bl	8017860 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e1e6:	bf00      	nop
 800e1e8:	3710      	adds	r7, #16
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	0801d6fc 	.word	0x0801d6fc
 800e1f4:	0801dd64 	.word	0x0801dd64
 800e1f8:	0801d740 	.word	0x0801d740
 800e1fc:	0801dd80 	.word	0x0801dd80
 800e200:	0801dda0 	.word	0x0801dda0
 800e204:	0801ddb8 	.word	0x0801ddb8
 800e208:	0801ddd4 	.word	0x0801ddd4

0800e20c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d106      	bne.n	800e228 <tcp_next_iss+0x1c>
 800e21a:	4b0a      	ldr	r3, [pc, #40]	; (800e244 <tcp_next_iss+0x38>)
 800e21c:	f640 02af 	movw	r2, #2223	; 0x8af
 800e220:	4909      	ldr	r1, [pc, #36]	; (800e248 <tcp_next_iss+0x3c>)
 800e222:	480a      	ldr	r0, [pc, #40]	; (800e24c <tcp_next_iss+0x40>)
 800e224:	f009 fb1c 	bl	8017860 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e228:	4b09      	ldr	r3, [pc, #36]	; (800e250 <tcp_next_iss+0x44>)
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	4b09      	ldr	r3, [pc, #36]	; (800e254 <tcp_next_iss+0x48>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4413      	add	r3, r2
 800e232:	4a07      	ldr	r2, [pc, #28]	; (800e250 <tcp_next_iss+0x44>)
 800e234:	6013      	str	r3, [r2, #0]
  return iss;
 800e236:	4b06      	ldr	r3, [pc, #24]	; (800e250 <tcp_next_iss+0x44>)
 800e238:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3708      	adds	r7, #8
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
 800e242:	bf00      	nop
 800e244:	0801d6fc 	.word	0x0801d6fc
 800e248:	0801ddec 	.word	0x0801ddec
 800e24c:	0801d740 	.word	0x0801d740
 800e250:	20000068 	.word	0x20000068
 800e254:	20006e40 	.word	0x20006e40

0800e258 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b086      	sub	sp, #24
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	4603      	mov	r3, r0
 800e260:	60b9      	str	r1, [r7, #8]
 800e262:	607a      	str	r2, [r7, #4]
 800e264:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d106      	bne.n	800e27a <tcp_eff_send_mss_netif+0x22>
 800e26c:	4b14      	ldr	r3, [pc, #80]	; (800e2c0 <tcp_eff_send_mss_netif+0x68>)
 800e26e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e272:	4914      	ldr	r1, [pc, #80]	; (800e2c4 <tcp_eff_send_mss_netif+0x6c>)
 800e274:	4814      	ldr	r0, [pc, #80]	; (800e2c8 <tcp_eff_send_mss_netif+0x70>)
 800e276:	f009 faf3 	bl	8017860 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d101      	bne.n	800e284 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e280:	89fb      	ldrh	r3, [r7, #14]
 800e282:	e019      	b.n	800e2b8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e288:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e28a:	8afb      	ldrh	r3, [r7, #22]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d012      	beq.n	800e2b6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e290:	2328      	movs	r3, #40	; 0x28
 800e292:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e294:	8afa      	ldrh	r2, [r7, #22]
 800e296:	8abb      	ldrh	r3, [r7, #20]
 800e298:	429a      	cmp	r2, r3
 800e29a:	d904      	bls.n	800e2a6 <tcp_eff_send_mss_netif+0x4e>
 800e29c:	8afa      	ldrh	r2, [r7, #22]
 800e29e:	8abb      	ldrh	r3, [r7, #20]
 800e2a0:	1ad3      	subs	r3, r2, r3
 800e2a2:	b29b      	uxth	r3, r3
 800e2a4:	e000      	b.n	800e2a8 <tcp_eff_send_mss_netif+0x50>
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e2aa:	8a7a      	ldrh	r2, [r7, #18]
 800e2ac:	89fb      	ldrh	r3, [r7, #14]
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	bf28      	it	cs
 800e2b2:	4613      	movcs	r3, r2
 800e2b4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e2b6:	89fb      	ldrh	r3, [r7, #14]
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3718      	adds	r7, #24
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}
 800e2c0:	0801d6fc 	.word	0x0801d6fc
 800e2c4:	0801de08 	.word	0x0801de08
 800e2c8:	0801d740 	.word	0x0801d740

0800e2cc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b084      	sub	sp, #16
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d119      	bne.n	800e314 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e2e0:	4b10      	ldr	r3, [pc, #64]	; (800e324 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e2e2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e2e6:	4910      	ldr	r1, [pc, #64]	; (800e328 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e2e8:	4810      	ldr	r0, [pc, #64]	; (800e32c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e2ea:	f009 fab9 	bl	8017860 <iprintf>

  while (pcb != NULL) {
 800e2ee:	e011      	b.n	800e314 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681a      	ldr	r2, [r3, #0]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d108      	bne.n	800e30e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	68db      	ldr	r3, [r3, #12]
 800e300:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e302:	68f8      	ldr	r0, [r7, #12]
 800e304:	f7fe ffc6 	bl	800d294 <tcp_abort>
      pcb = next;
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	60fb      	str	r3, [r7, #12]
 800e30c:	e002      	b.n	800e314 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	68db      	ldr	r3, [r3, #12]
 800e312:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d1ea      	bne.n	800e2f0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e31a:	bf00      	nop
 800e31c:	bf00      	nop
 800e31e:	3710      	adds	r7, #16
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}
 800e324:	0801d6fc 	.word	0x0801d6fc
 800e328:	0801de30 	.word	0x0801de30
 800e32c:	0801d740 	.word	0x0801d740

0800e330 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d02a      	beq.n	800e396 <tcp_netif_ip_addr_changed+0x66>
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d026      	beq.n	800e396 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e348:	4b15      	ldr	r3, [pc, #84]	; (800e3a0 <tcp_netif_ip_addr_changed+0x70>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	4619      	mov	r1, r3
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f7ff ffbc 	bl	800e2cc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e354:	4b13      	ldr	r3, [pc, #76]	; (800e3a4 <tcp_netif_ip_addr_changed+0x74>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	4619      	mov	r1, r3
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f7ff ffb6 	bl	800e2cc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d017      	beq.n	800e396 <tcp_netif_ip_addr_changed+0x66>
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d013      	beq.n	800e396 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e36e:	4b0e      	ldr	r3, [pc, #56]	; (800e3a8 <tcp_netif_ip_addr_changed+0x78>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	60fb      	str	r3, [r7, #12]
 800e374:	e00c      	b.n	800e390 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	429a      	cmp	r2, r3
 800e380:	d103      	bne.n	800e38a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	681a      	ldr	r2, [r3, #0]
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	68db      	ldr	r3, [r3, #12]
 800e38e:	60fb      	str	r3, [r7, #12]
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d1ef      	bne.n	800e376 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e396:	bf00      	nop
 800e398:	3710      	adds	r7, #16
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	20006e3c 	.word	0x20006e3c
 800e3a4:	20006e48 	.word	0x20006e48
 800e3a8:	20006e44 	.word	0x20006e44

0800e3ac <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d007      	beq.n	800e3cc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7ff fc3d 	bl	800dc40 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e3cc:	bf00      	nop
 800e3ce:	3708      	adds	r7, #8
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e3d4:	b590      	push	{r4, r7, lr}
 800e3d6:	b08d      	sub	sp, #52	; 0x34
 800e3d8:	af04      	add	r7, sp, #16
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d105      	bne.n	800e3f0 <tcp_input+0x1c>
 800e3e4:	4b9b      	ldr	r3, [pc, #620]	; (800e654 <tcp_input+0x280>)
 800e3e6:	2283      	movs	r2, #131	; 0x83
 800e3e8:	499b      	ldr	r1, [pc, #620]	; (800e658 <tcp_input+0x284>)
 800e3ea:	489c      	ldr	r0, [pc, #624]	; (800e65c <tcp_input+0x288>)
 800e3ec:	f009 fa38 	bl	8017860 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	4a9a      	ldr	r2, [pc, #616]	; (800e660 <tcp_input+0x28c>)
 800e3f6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	895b      	ldrh	r3, [r3, #10]
 800e3fc:	2b13      	cmp	r3, #19
 800e3fe:	f240 83c4 	bls.w	800eb8a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e402:	4b98      	ldr	r3, [pc, #608]	; (800e664 <tcp_input+0x290>)
 800e404:	695b      	ldr	r3, [r3, #20]
 800e406:	4a97      	ldr	r2, [pc, #604]	; (800e664 <tcp_input+0x290>)
 800e408:	6812      	ldr	r2, [r2, #0]
 800e40a:	4611      	mov	r1, r2
 800e40c:	4618      	mov	r0, r3
 800e40e:	f007 fd49 	bl	8015ea4 <ip4_addr_isbroadcast_u32>
 800e412:	4603      	mov	r3, r0
 800e414:	2b00      	cmp	r3, #0
 800e416:	f040 83ba 	bne.w	800eb8e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e41a:	4b92      	ldr	r3, [pc, #584]	; (800e664 <tcp_input+0x290>)
 800e41c:	695b      	ldr	r3, [r3, #20]
 800e41e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e422:	2be0      	cmp	r3, #224	; 0xe0
 800e424:	f000 83b3 	beq.w	800eb8e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e428:	4b8d      	ldr	r3, [pc, #564]	; (800e660 <tcp_input+0x28c>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	899b      	ldrh	r3, [r3, #12]
 800e42e:	b29b      	uxth	r3, r3
 800e430:	4618      	mov	r0, r3
 800e432:	f7fc fefb 	bl	800b22c <lwip_htons>
 800e436:	4603      	mov	r3, r0
 800e438:	0b1b      	lsrs	r3, r3, #12
 800e43a:	b29b      	uxth	r3, r3
 800e43c:	b2db      	uxtb	r3, r3
 800e43e:	009b      	lsls	r3, r3, #2
 800e440:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e442:	7cbb      	ldrb	r3, [r7, #18]
 800e444:	2b13      	cmp	r3, #19
 800e446:	f240 83a4 	bls.w	800eb92 <tcp_input+0x7be>
 800e44a:	7cbb      	ldrb	r3, [r7, #18]
 800e44c:	b29a      	uxth	r2, r3
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	891b      	ldrh	r3, [r3, #8]
 800e452:	429a      	cmp	r2, r3
 800e454:	f200 839d 	bhi.w	800eb92 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e458:	7cbb      	ldrb	r3, [r7, #18]
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	3b14      	subs	r3, #20
 800e45e:	b29a      	uxth	r2, r3
 800e460:	4b81      	ldr	r3, [pc, #516]	; (800e668 <tcp_input+0x294>)
 800e462:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e464:	4b81      	ldr	r3, [pc, #516]	; (800e66c <tcp_input+0x298>)
 800e466:	2200      	movs	r2, #0
 800e468:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	895a      	ldrh	r2, [r3, #10]
 800e46e:	7cbb      	ldrb	r3, [r7, #18]
 800e470:	b29b      	uxth	r3, r3
 800e472:	429a      	cmp	r2, r3
 800e474:	d309      	bcc.n	800e48a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e476:	4b7c      	ldr	r3, [pc, #496]	; (800e668 <tcp_input+0x294>)
 800e478:	881a      	ldrh	r2, [r3, #0]
 800e47a:	4b7d      	ldr	r3, [pc, #500]	; (800e670 <tcp_input+0x29c>)
 800e47c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e47e:	7cbb      	ldrb	r3, [r7, #18]
 800e480:	4619      	mov	r1, r3
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f7fe f8e8 	bl	800c658 <pbuf_remove_header>
 800e488:	e04e      	b.n	800e528 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d105      	bne.n	800e49e <tcp_input+0xca>
 800e492:	4b70      	ldr	r3, [pc, #448]	; (800e654 <tcp_input+0x280>)
 800e494:	22c2      	movs	r2, #194	; 0xc2
 800e496:	4977      	ldr	r1, [pc, #476]	; (800e674 <tcp_input+0x2a0>)
 800e498:	4870      	ldr	r0, [pc, #448]	; (800e65c <tcp_input+0x288>)
 800e49a:	f009 f9e1 	bl	8017860 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e49e:	2114      	movs	r1, #20
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f7fe f8d9 	bl	800c658 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	895a      	ldrh	r2, [r3, #10]
 800e4aa:	4b71      	ldr	r3, [pc, #452]	; (800e670 <tcp_input+0x29c>)
 800e4ac:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e4ae:	4b6e      	ldr	r3, [pc, #440]	; (800e668 <tcp_input+0x294>)
 800e4b0:	881a      	ldrh	r2, [r3, #0]
 800e4b2:	4b6f      	ldr	r3, [pc, #444]	; (800e670 <tcp_input+0x29c>)
 800e4b4:	881b      	ldrh	r3, [r3, #0]
 800e4b6:	1ad3      	subs	r3, r2, r3
 800e4b8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e4ba:	4b6d      	ldr	r3, [pc, #436]	; (800e670 <tcp_input+0x29c>)
 800e4bc:	881b      	ldrh	r3, [r3, #0]
 800e4be:	4619      	mov	r1, r3
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f7fe f8c9 	bl	800c658 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	895b      	ldrh	r3, [r3, #10]
 800e4cc:	8a3a      	ldrh	r2, [r7, #16]
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	f200 8361 	bhi.w	800eb96 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	685b      	ldr	r3, [r3, #4]
 800e4da:	4a64      	ldr	r2, [pc, #400]	; (800e66c <tcp_input+0x298>)
 800e4dc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	8a3a      	ldrh	r2, [r7, #16]
 800e4e4:	4611      	mov	r1, r2
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7fe f8b6 	bl	800c658 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	891a      	ldrh	r2, [r3, #8]
 800e4f0:	8a3b      	ldrh	r3, [r7, #16]
 800e4f2:	1ad3      	subs	r3, r2, r3
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	895b      	ldrh	r3, [r3, #10]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d005      	beq.n	800e50e <tcp_input+0x13a>
 800e502:	4b54      	ldr	r3, [pc, #336]	; (800e654 <tcp_input+0x280>)
 800e504:	22df      	movs	r2, #223	; 0xdf
 800e506:	495c      	ldr	r1, [pc, #368]	; (800e678 <tcp_input+0x2a4>)
 800e508:	4854      	ldr	r0, [pc, #336]	; (800e65c <tcp_input+0x288>)
 800e50a:	f009 f9a9 	bl	8017860 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	891a      	ldrh	r2, [r3, #8]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	891b      	ldrh	r3, [r3, #8]
 800e518:	429a      	cmp	r2, r3
 800e51a:	d005      	beq.n	800e528 <tcp_input+0x154>
 800e51c:	4b4d      	ldr	r3, [pc, #308]	; (800e654 <tcp_input+0x280>)
 800e51e:	22e0      	movs	r2, #224	; 0xe0
 800e520:	4956      	ldr	r1, [pc, #344]	; (800e67c <tcp_input+0x2a8>)
 800e522:	484e      	ldr	r0, [pc, #312]	; (800e65c <tcp_input+0x288>)
 800e524:	f009 f99c 	bl	8017860 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e528:	4b4d      	ldr	r3, [pc, #308]	; (800e660 <tcp_input+0x28c>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	881b      	ldrh	r3, [r3, #0]
 800e52e:	b29b      	uxth	r3, r3
 800e530:	4a4b      	ldr	r2, [pc, #300]	; (800e660 <tcp_input+0x28c>)
 800e532:	6814      	ldr	r4, [r2, #0]
 800e534:	4618      	mov	r0, r3
 800e536:	f7fc fe79 	bl	800b22c <lwip_htons>
 800e53a:	4603      	mov	r3, r0
 800e53c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e53e:	4b48      	ldr	r3, [pc, #288]	; (800e660 <tcp_input+0x28c>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	885b      	ldrh	r3, [r3, #2]
 800e544:	b29b      	uxth	r3, r3
 800e546:	4a46      	ldr	r2, [pc, #280]	; (800e660 <tcp_input+0x28c>)
 800e548:	6814      	ldr	r4, [r2, #0]
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fc fe6e 	bl	800b22c <lwip_htons>
 800e550:	4603      	mov	r3, r0
 800e552:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e554:	4b42      	ldr	r3, [pc, #264]	; (800e660 <tcp_input+0x28c>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	4a41      	ldr	r2, [pc, #260]	; (800e660 <tcp_input+0x28c>)
 800e55c:	6814      	ldr	r4, [r2, #0]
 800e55e:	4618      	mov	r0, r3
 800e560:	f7fc fe79 	bl	800b256 <lwip_htonl>
 800e564:	4603      	mov	r3, r0
 800e566:	6063      	str	r3, [r4, #4]
 800e568:	6863      	ldr	r3, [r4, #4]
 800e56a:	4a45      	ldr	r2, [pc, #276]	; (800e680 <tcp_input+0x2ac>)
 800e56c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e56e:	4b3c      	ldr	r3, [pc, #240]	; (800e660 <tcp_input+0x28c>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	689b      	ldr	r3, [r3, #8]
 800e574:	4a3a      	ldr	r2, [pc, #232]	; (800e660 <tcp_input+0x28c>)
 800e576:	6814      	ldr	r4, [r2, #0]
 800e578:	4618      	mov	r0, r3
 800e57a:	f7fc fe6c 	bl	800b256 <lwip_htonl>
 800e57e:	4603      	mov	r3, r0
 800e580:	60a3      	str	r3, [r4, #8]
 800e582:	68a3      	ldr	r3, [r4, #8]
 800e584:	4a3f      	ldr	r2, [pc, #252]	; (800e684 <tcp_input+0x2b0>)
 800e586:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e588:	4b35      	ldr	r3, [pc, #212]	; (800e660 <tcp_input+0x28c>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	89db      	ldrh	r3, [r3, #14]
 800e58e:	b29b      	uxth	r3, r3
 800e590:	4a33      	ldr	r2, [pc, #204]	; (800e660 <tcp_input+0x28c>)
 800e592:	6814      	ldr	r4, [r2, #0]
 800e594:	4618      	mov	r0, r3
 800e596:	f7fc fe49 	bl	800b22c <lwip_htons>
 800e59a:	4603      	mov	r3, r0
 800e59c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e59e:	4b30      	ldr	r3, [pc, #192]	; (800e660 <tcp_input+0x28c>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	899b      	ldrh	r3, [r3, #12]
 800e5a4:	b29b      	uxth	r3, r3
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7fc fe40 	bl	800b22c <lwip_htons>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5b4:	b2da      	uxtb	r2, r3
 800e5b6:	4b34      	ldr	r3, [pc, #208]	; (800e688 <tcp_input+0x2b4>)
 800e5b8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	891a      	ldrh	r2, [r3, #8]
 800e5be:	4b33      	ldr	r3, [pc, #204]	; (800e68c <tcp_input+0x2b8>)
 800e5c0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e5c2:	4b31      	ldr	r3, [pc, #196]	; (800e688 <tcp_input+0x2b4>)
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	f003 0303 	and.w	r3, r3, #3
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d00c      	beq.n	800e5e8 <tcp_input+0x214>
    tcplen++;
 800e5ce:	4b2f      	ldr	r3, [pc, #188]	; (800e68c <tcp_input+0x2b8>)
 800e5d0:	881b      	ldrh	r3, [r3, #0]
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	b29a      	uxth	r2, r3
 800e5d6:	4b2d      	ldr	r3, [pc, #180]	; (800e68c <tcp_input+0x2b8>)
 800e5d8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	891a      	ldrh	r2, [r3, #8]
 800e5de:	4b2b      	ldr	r3, [pc, #172]	; (800e68c <tcp_input+0x2b8>)
 800e5e0:	881b      	ldrh	r3, [r3, #0]
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	f200 82d9 	bhi.w	800eb9a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5ec:	4b28      	ldr	r3, [pc, #160]	; (800e690 <tcp_input+0x2bc>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	61fb      	str	r3, [r7, #28]
 800e5f2:	e09d      	b.n	800e730 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e5f4:	69fb      	ldr	r3, [r7, #28]
 800e5f6:	7d1b      	ldrb	r3, [r3, #20]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d105      	bne.n	800e608 <tcp_input+0x234>
 800e5fc:	4b15      	ldr	r3, [pc, #84]	; (800e654 <tcp_input+0x280>)
 800e5fe:	22fb      	movs	r2, #251	; 0xfb
 800e600:	4924      	ldr	r1, [pc, #144]	; (800e694 <tcp_input+0x2c0>)
 800e602:	4816      	ldr	r0, [pc, #88]	; (800e65c <tcp_input+0x288>)
 800e604:	f009 f92c 	bl	8017860 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e608:	69fb      	ldr	r3, [r7, #28]
 800e60a:	7d1b      	ldrb	r3, [r3, #20]
 800e60c:	2b0a      	cmp	r3, #10
 800e60e:	d105      	bne.n	800e61c <tcp_input+0x248>
 800e610:	4b10      	ldr	r3, [pc, #64]	; (800e654 <tcp_input+0x280>)
 800e612:	22fc      	movs	r2, #252	; 0xfc
 800e614:	4920      	ldr	r1, [pc, #128]	; (800e698 <tcp_input+0x2c4>)
 800e616:	4811      	ldr	r0, [pc, #68]	; (800e65c <tcp_input+0x288>)
 800e618:	f009 f922 	bl	8017860 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e61c:	69fb      	ldr	r3, [r7, #28]
 800e61e:	7d1b      	ldrb	r3, [r3, #20]
 800e620:	2b01      	cmp	r3, #1
 800e622:	d105      	bne.n	800e630 <tcp_input+0x25c>
 800e624:	4b0b      	ldr	r3, [pc, #44]	; (800e654 <tcp_input+0x280>)
 800e626:	22fd      	movs	r2, #253	; 0xfd
 800e628:	491c      	ldr	r1, [pc, #112]	; (800e69c <tcp_input+0x2c8>)
 800e62a:	480c      	ldr	r0, [pc, #48]	; (800e65c <tcp_input+0x288>)
 800e62c:	f009 f918 	bl	8017860 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e630:	69fb      	ldr	r3, [r7, #28]
 800e632:	7a1b      	ldrb	r3, [r3, #8]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d033      	beq.n	800e6a0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e638:	69fb      	ldr	r3, [r7, #28]
 800e63a:	7a1a      	ldrb	r2, [r3, #8]
 800e63c:	4b09      	ldr	r3, [pc, #36]	; (800e664 <tcp_input+0x290>)
 800e63e:	685b      	ldr	r3, [r3, #4]
 800e640:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e644:	3301      	adds	r3, #1
 800e646:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e648:	429a      	cmp	r2, r3
 800e64a:	d029      	beq.n	800e6a0 <tcp_input+0x2cc>
      prev = pcb;
 800e64c:	69fb      	ldr	r3, [r7, #28]
 800e64e:	61bb      	str	r3, [r7, #24]
      continue;
 800e650:	e06b      	b.n	800e72a <tcp_input+0x356>
 800e652:	bf00      	nop
 800e654:	0801de64 	.word	0x0801de64
 800e658:	0801de98 	.word	0x0801de98
 800e65c:	0801deb0 	.word	0x0801deb0
 800e660:	20000468 	.word	0x20000468
 800e664:	20003d18 	.word	0x20003d18
 800e668:	2000046c 	.word	0x2000046c
 800e66c:	20000470 	.word	0x20000470
 800e670:	2000046e 	.word	0x2000046e
 800e674:	0801ded8 	.word	0x0801ded8
 800e678:	0801dee8 	.word	0x0801dee8
 800e67c:	0801def4 	.word	0x0801def4
 800e680:	20000478 	.word	0x20000478
 800e684:	2000047c 	.word	0x2000047c
 800e688:	20000484 	.word	0x20000484
 800e68c:	20000482 	.word	0x20000482
 800e690:	20006e3c 	.word	0x20006e3c
 800e694:	0801df14 	.word	0x0801df14
 800e698:	0801df3c 	.word	0x0801df3c
 800e69c:	0801df68 	.word	0x0801df68
    }

    if (pcb->remote_port == tcphdr->src &&
 800e6a0:	69fb      	ldr	r3, [r7, #28]
 800e6a2:	8b1a      	ldrh	r2, [r3, #24]
 800e6a4:	4b94      	ldr	r3, [pc, #592]	; (800e8f8 <tcp_input+0x524>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	881b      	ldrh	r3, [r3, #0]
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d13a      	bne.n	800e726 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	8ada      	ldrh	r2, [r3, #22]
 800e6b4:	4b90      	ldr	r3, [pc, #576]	; (800e8f8 <tcp_input+0x524>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	885b      	ldrh	r3, [r3, #2]
 800e6ba:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d132      	bne.n	800e726 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e6c0:	69fb      	ldr	r3, [r7, #28]
 800e6c2:	685a      	ldr	r2, [r3, #4]
 800e6c4:	4b8d      	ldr	r3, [pc, #564]	; (800e8fc <tcp_input+0x528>)
 800e6c6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d12c      	bne.n	800e726 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e6cc:	69fb      	ldr	r3, [r7, #28]
 800e6ce:	681a      	ldr	r2, [r3, #0]
 800e6d0:	4b8a      	ldr	r3, [pc, #552]	; (800e8fc <tcp_input+0x528>)
 800e6d2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d126      	bne.n	800e726 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e6d8:	69fb      	ldr	r3, [r7, #28]
 800e6da:	68db      	ldr	r3, [r3, #12]
 800e6dc:	69fa      	ldr	r2, [r7, #28]
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d106      	bne.n	800e6f0 <tcp_input+0x31c>
 800e6e2:	4b87      	ldr	r3, [pc, #540]	; (800e900 <tcp_input+0x52c>)
 800e6e4:	f240 120d 	movw	r2, #269	; 0x10d
 800e6e8:	4986      	ldr	r1, [pc, #536]	; (800e904 <tcp_input+0x530>)
 800e6ea:	4887      	ldr	r0, [pc, #540]	; (800e908 <tcp_input+0x534>)
 800e6ec:	f009 f8b8 	bl	8017860 <iprintf>
      if (prev != NULL) {
 800e6f0:	69bb      	ldr	r3, [r7, #24]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d00a      	beq.n	800e70c <tcp_input+0x338>
        prev->next = pcb->next;
 800e6f6:	69fb      	ldr	r3, [r7, #28]
 800e6f8:	68da      	ldr	r2, [r3, #12]
 800e6fa:	69bb      	ldr	r3, [r7, #24]
 800e6fc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e6fe:	4b83      	ldr	r3, [pc, #524]	; (800e90c <tcp_input+0x538>)
 800e700:	681a      	ldr	r2, [r3, #0]
 800e702:	69fb      	ldr	r3, [r7, #28]
 800e704:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e706:	4a81      	ldr	r2, [pc, #516]	; (800e90c <tcp_input+0x538>)
 800e708:	69fb      	ldr	r3, [r7, #28]
 800e70a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e70c:	69fb      	ldr	r3, [r7, #28]
 800e70e:	68db      	ldr	r3, [r3, #12]
 800e710:	69fa      	ldr	r2, [r7, #28]
 800e712:	429a      	cmp	r2, r3
 800e714:	d111      	bne.n	800e73a <tcp_input+0x366>
 800e716:	4b7a      	ldr	r3, [pc, #488]	; (800e900 <tcp_input+0x52c>)
 800e718:	f240 1215 	movw	r2, #277	; 0x115
 800e71c:	497c      	ldr	r1, [pc, #496]	; (800e910 <tcp_input+0x53c>)
 800e71e:	487a      	ldr	r0, [pc, #488]	; (800e908 <tcp_input+0x534>)
 800e720:	f009 f89e 	bl	8017860 <iprintf>
      break;
 800e724:	e009      	b.n	800e73a <tcp_input+0x366>
    }
    prev = pcb;
 800e726:	69fb      	ldr	r3, [r7, #28]
 800e728:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e72a:	69fb      	ldr	r3, [r7, #28]
 800e72c:	68db      	ldr	r3, [r3, #12]
 800e72e:	61fb      	str	r3, [r7, #28]
 800e730:	69fb      	ldr	r3, [r7, #28]
 800e732:	2b00      	cmp	r3, #0
 800e734:	f47f af5e 	bne.w	800e5f4 <tcp_input+0x220>
 800e738:	e000      	b.n	800e73c <tcp_input+0x368>
      break;
 800e73a:	bf00      	nop
  }

  if (pcb == NULL) {
 800e73c:	69fb      	ldr	r3, [r7, #28]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	f040 8095 	bne.w	800e86e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e744:	4b73      	ldr	r3, [pc, #460]	; (800e914 <tcp_input+0x540>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	61fb      	str	r3, [r7, #28]
 800e74a:	e03f      	b.n	800e7cc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	7d1b      	ldrb	r3, [r3, #20]
 800e750:	2b0a      	cmp	r3, #10
 800e752:	d006      	beq.n	800e762 <tcp_input+0x38e>
 800e754:	4b6a      	ldr	r3, [pc, #424]	; (800e900 <tcp_input+0x52c>)
 800e756:	f240 121f 	movw	r2, #287	; 0x11f
 800e75a:	496f      	ldr	r1, [pc, #444]	; (800e918 <tcp_input+0x544>)
 800e75c:	486a      	ldr	r0, [pc, #424]	; (800e908 <tcp_input+0x534>)
 800e75e:	f009 f87f 	bl	8017860 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e762:	69fb      	ldr	r3, [r7, #28]
 800e764:	7a1b      	ldrb	r3, [r3, #8]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d009      	beq.n	800e77e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e76a:	69fb      	ldr	r3, [r7, #28]
 800e76c:	7a1a      	ldrb	r2, [r3, #8]
 800e76e:	4b63      	ldr	r3, [pc, #396]	; (800e8fc <tcp_input+0x528>)
 800e770:	685b      	ldr	r3, [r3, #4]
 800e772:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e776:	3301      	adds	r3, #1
 800e778:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d122      	bne.n	800e7c4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	8b1a      	ldrh	r2, [r3, #24]
 800e782:	4b5d      	ldr	r3, [pc, #372]	; (800e8f8 <tcp_input+0x524>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	881b      	ldrh	r3, [r3, #0]
 800e788:	b29b      	uxth	r3, r3
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d11b      	bne.n	800e7c6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e78e:	69fb      	ldr	r3, [r7, #28]
 800e790:	8ada      	ldrh	r2, [r3, #22]
 800e792:	4b59      	ldr	r3, [pc, #356]	; (800e8f8 <tcp_input+0x524>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	885b      	ldrh	r3, [r3, #2]
 800e798:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d113      	bne.n	800e7c6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e79e:	69fb      	ldr	r3, [r7, #28]
 800e7a0:	685a      	ldr	r2, [r3, #4]
 800e7a2:	4b56      	ldr	r3, [pc, #344]	; (800e8fc <tcp_input+0x528>)
 800e7a4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d10d      	bne.n	800e7c6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e7aa:	69fb      	ldr	r3, [r7, #28]
 800e7ac:	681a      	ldr	r2, [r3, #0]
 800e7ae:	4b53      	ldr	r3, [pc, #332]	; (800e8fc <tcp_input+0x528>)
 800e7b0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d107      	bne.n	800e7c6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e7b6:	69f8      	ldr	r0, [r7, #28]
 800e7b8:	f000 fb54 	bl	800ee64 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f7fd ffd1 	bl	800c764 <pbuf_free>
        return;
 800e7c2:	e1f0      	b.n	800eba6 <tcp_input+0x7d2>
        continue;
 800e7c4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7c6:	69fb      	ldr	r3, [r7, #28]
 800e7c8:	68db      	ldr	r3, [r3, #12]
 800e7ca:	61fb      	str	r3, [r7, #28]
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d1bc      	bne.n	800e74c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e7d6:	4b51      	ldr	r3, [pc, #324]	; (800e91c <tcp_input+0x548>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	617b      	str	r3, [r7, #20]
 800e7dc:	e02a      	b.n	800e834 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	7a1b      	ldrb	r3, [r3, #8]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d00c      	beq.n	800e800 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	7a1a      	ldrb	r2, [r3, #8]
 800e7ea:	4b44      	ldr	r3, [pc, #272]	; (800e8fc <tcp_input+0x528>)
 800e7ec:	685b      	ldr	r3, [r3, #4]
 800e7ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e7f2:	3301      	adds	r3, #1
 800e7f4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d002      	beq.n	800e800 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	61bb      	str	r3, [r7, #24]
        continue;
 800e7fe:	e016      	b.n	800e82e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	8ada      	ldrh	r2, [r3, #22]
 800e804:	4b3c      	ldr	r3, [pc, #240]	; (800e8f8 <tcp_input+0x524>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	885b      	ldrh	r3, [r3, #2]
 800e80a:	b29b      	uxth	r3, r3
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d10c      	bne.n	800e82a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	681a      	ldr	r2, [r3, #0]
 800e814:	4b39      	ldr	r3, [pc, #228]	; (800e8fc <tcp_input+0x528>)
 800e816:	695b      	ldr	r3, [r3, #20]
 800e818:	429a      	cmp	r2, r3
 800e81a:	d00f      	beq.n	800e83c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d00d      	beq.n	800e83e <tcp_input+0x46a>
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d009      	beq.n	800e83e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	68db      	ldr	r3, [r3, #12]
 800e832:	617b      	str	r3, [r7, #20]
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d1d1      	bne.n	800e7de <tcp_input+0x40a>
 800e83a:	e000      	b.n	800e83e <tcp_input+0x46a>
            break;
 800e83c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d014      	beq.n	800e86e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e844:	69bb      	ldr	r3, [r7, #24]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d00a      	beq.n	800e860 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	68da      	ldr	r2, [r3, #12]
 800e84e:	69bb      	ldr	r3, [r7, #24]
 800e850:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e852:	4b32      	ldr	r3, [pc, #200]	; (800e91c <tcp_input+0x548>)
 800e854:	681a      	ldr	r2, [r3, #0]
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e85a:	4a30      	ldr	r2, [pc, #192]	; (800e91c <tcp_input+0x548>)
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e860:	6978      	ldr	r0, [r7, #20]
 800e862:	f000 fa01 	bl	800ec68 <tcp_listen_input>
      }
      pbuf_free(p);
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f7fd ff7c 	bl	800c764 <pbuf_free>
      return;
 800e86c:	e19b      	b.n	800eba6 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e86e:	69fb      	ldr	r3, [r7, #28]
 800e870:	2b00      	cmp	r3, #0
 800e872:	f000 8160 	beq.w	800eb36 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e876:	4b2a      	ldr	r3, [pc, #168]	; (800e920 <tcp_input+0x54c>)
 800e878:	2200      	movs	r2, #0
 800e87a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	891a      	ldrh	r2, [r3, #8]
 800e880:	4b27      	ldr	r3, [pc, #156]	; (800e920 <tcp_input+0x54c>)
 800e882:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e884:	4a26      	ldr	r2, [pc, #152]	; (800e920 <tcp_input+0x54c>)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e88a:	4b1b      	ldr	r3, [pc, #108]	; (800e8f8 <tcp_input+0x524>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	4a24      	ldr	r2, [pc, #144]	; (800e920 <tcp_input+0x54c>)
 800e890:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e892:	4b24      	ldr	r3, [pc, #144]	; (800e924 <tcp_input+0x550>)
 800e894:	2200      	movs	r2, #0
 800e896:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e898:	4b23      	ldr	r3, [pc, #140]	; (800e928 <tcp_input+0x554>)
 800e89a:	2200      	movs	r2, #0
 800e89c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e89e:	4b23      	ldr	r3, [pc, #140]	; (800e92c <tcp_input+0x558>)
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e8a4:	4b22      	ldr	r3, [pc, #136]	; (800e930 <tcp_input+0x55c>)
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	f003 0308 	and.w	r3, r3, #8
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d006      	beq.n	800e8be <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	7b5b      	ldrb	r3, [r3, #13]
 800e8b4:	f043 0301 	orr.w	r3, r3, #1
 800e8b8:	b2da      	uxtb	r2, r3
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e8be:	69fb      	ldr	r3, [r7, #28]
 800e8c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d038      	beq.n	800e938 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e8c6:	69f8      	ldr	r0, [r7, #28]
 800e8c8:	f7ff f93e 	bl	800db48 <tcp_process_refused_data>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	f113 0f0d 	cmn.w	r3, #13
 800e8d2:	d007      	beq.n	800e8e4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e8d4:	69fb      	ldr	r3, [r7, #28]
 800e8d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d02d      	beq.n	800e938 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e8dc:	4b15      	ldr	r3, [pc, #84]	; (800e934 <tcp_input+0x560>)
 800e8de:	881b      	ldrh	r3, [r3, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d029      	beq.n	800e938 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e8e4:	69fb      	ldr	r3, [r7, #28]
 800e8e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	f040 8104 	bne.w	800eaf6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e8ee:	69f8      	ldr	r0, [r7, #28]
 800e8f0:	f003 f9bc 	bl	8011c6c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e8f4:	e0ff      	b.n	800eaf6 <tcp_input+0x722>
 800e8f6:	bf00      	nop
 800e8f8:	20000468 	.word	0x20000468
 800e8fc:	20003d18 	.word	0x20003d18
 800e900:	0801de64 	.word	0x0801de64
 800e904:	0801df90 	.word	0x0801df90
 800e908:	0801deb0 	.word	0x0801deb0
 800e90c:	20006e3c 	.word	0x20006e3c
 800e910:	0801dfbc 	.word	0x0801dfbc
 800e914:	20006e4c 	.word	0x20006e4c
 800e918:	0801dfe8 	.word	0x0801dfe8
 800e91c:	20006e44 	.word	0x20006e44
 800e920:	20000458 	.word	0x20000458
 800e924:	20000488 	.word	0x20000488
 800e928:	20000485 	.word	0x20000485
 800e92c:	20000480 	.word	0x20000480
 800e930:	20000484 	.word	0x20000484
 800e934:	20000482 	.word	0x20000482
      }
    }
    tcp_input_pcb = pcb;
 800e938:	4a9c      	ldr	r2, [pc, #624]	; (800ebac <tcp_input+0x7d8>)
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e93e:	69f8      	ldr	r0, [r7, #28]
 800e940:	f000 fb0a 	bl	800ef58 <tcp_process>
 800e944:	4603      	mov	r3, r0
 800e946:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e948:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e94c:	f113 0f0d 	cmn.w	r3, #13
 800e950:	f000 80d3 	beq.w	800eafa <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e954:	4b96      	ldr	r3, [pc, #600]	; (800ebb0 <tcp_input+0x7dc>)
 800e956:	781b      	ldrb	r3, [r3, #0]
 800e958:	f003 0308 	and.w	r3, r3, #8
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d015      	beq.n	800e98c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e960:	69fb      	ldr	r3, [r7, #28]
 800e962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e966:	2b00      	cmp	r3, #0
 800e968:	d008      	beq.n	800e97c <tcp_input+0x5a8>
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e970:	69fa      	ldr	r2, [r7, #28]
 800e972:	6912      	ldr	r2, [r2, #16]
 800e974:	f06f 010d 	mvn.w	r1, #13
 800e978:	4610      	mov	r0, r2
 800e97a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e97c:	69f9      	ldr	r1, [r7, #28]
 800e97e:	488d      	ldr	r0, [pc, #564]	; (800ebb4 <tcp_input+0x7e0>)
 800e980:	f7ff fbb0 	bl	800e0e4 <tcp_pcb_remove>
        tcp_free(pcb);
 800e984:	69f8      	ldr	r0, [r7, #28]
 800e986:	f7fe f99d 	bl	800ccc4 <tcp_free>
 800e98a:	e0c1      	b.n	800eb10 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e98c:	2300      	movs	r3, #0
 800e98e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e990:	4b89      	ldr	r3, [pc, #548]	; (800ebb8 <tcp_input+0x7e4>)
 800e992:	881b      	ldrh	r3, [r3, #0]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d01d      	beq.n	800e9d4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e998:	4b87      	ldr	r3, [pc, #540]	; (800ebb8 <tcp_input+0x7e4>)
 800e99a:	881b      	ldrh	r3, [r3, #0]
 800e99c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e99e:	69fb      	ldr	r3, [r7, #28]
 800e9a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d00a      	beq.n	800e9be <tcp_input+0x5ea>
 800e9a8:	69fb      	ldr	r3, [r7, #28]
 800e9aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9ae:	69fa      	ldr	r2, [r7, #28]
 800e9b0:	6910      	ldr	r0, [r2, #16]
 800e9b2:	89fa      	ldrh	r2, [r7, #14]
 800e9b4:	69f9      	ldr	r1, [r7, #28]
 800e9b6:	4798      	blx	r3
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	74fb      	strb	r3, [r7, #19]
 800e9bc:	e001      	b.n	800e9c2 <tcp_input+0x5ee>
 800e9be:	2300      	movs	r3, #0
 800e9c0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e9c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e9c6:	f113 0f0d 	cmn.w	r3, #13
 800e9ca:	f000 8098 	beq.w	800eafe <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e9ce:	4b7a      	ldr	r3, [pc, #488]	; (800ebb8 <tcp_input+0x7e4>)
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e9d4:	69f8      	ldr	r0, [r7, #28]
 800e9d6:	f000 f907 	bl	800ebe8 <tcp_input_delayed_close>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	f040 8090 	bne.w	800eb02 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e9e2:	4b76      	ldr	r3, [pc, #472]	; (800ebbc <tcp_input+0x7e8>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d041      	beq.n	800ea6e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e9ea:	69fb      	ldr	r3, [r7, #28]
 800e9ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d006      	beq.n	800ea00 <tcp_input+0x62c>
 800e9f2:	4b73      	ldr	r3, [pc, #460]	; (800ebc0 <tcp_input+0x7ec>)
 800e9f4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e9f8:	4972      	ldr	r1, [pc, #456]	; (800ebc4 <tcp_input+0x7f0>)
 800e9fa:	4873      	ldr	r0, [pc, #460]	; (800ebc8 <tcp_input+0x7f4>)
 800e9fc:	f008 ff30 	bl	8017860 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ea00:	69fb      	ldr	r3, [r7, #28]
 800ea02:	8b5b      	ldrh	r3, [r3, #26]
 800ea04:	f003 0310 	and.w	r3, r3, #16
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d008      	beq.n	800ea1e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ea0c:	4b6b      	ldr	r3, [pc, #428]	; (800ebbc <tcp_input+0x7e8>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7fd fea7 	bl	800c764 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ea16:	69f8      	ldr	r0, [r7, #28]
 800ea18:	f7fe fc3c 	bl	800d294 <tcp_abort>
            goto aborted;
 800ea1c:	e078      	b.n	800eb10 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ea1e:	69fb      	ldr	r3, [r7, #28]
 800ea20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d00c      	beq.n	800ea42 <tcp_input+0x66e>
 800ea28:	69fb      	ldr	r3, [r7, #28]
 800ea2a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ea2e:	69fb      	ldr	r3, [r7, #28]
 800ea30:	6918      	ldr	r0, [r3, #16]
 800ea32:	4b62      	ldr	r3, [pc, #392]	; (800ebbc <tcp_input+0x7e8>)
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	2300      	movs	r3, #0
 800ea38:	69f9      	ldr	r1, [r7, #28]
 800ea3a:	47a0      	blx	r4
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	74fb      	strb	r3, [r7, #19]
 800ea40:	e008      	b.n	800ea54 <tcp_input+0x680>
 800ea42:	4b5e      	ldr	r3, [pc, #376]	; (800ebbc <tcp_input+0x7e8>)
 800ea44:	681a      	ldr	r2, [r3, #0]
 800ea46:	2300      	movs	r3, #0
 800ea48:	69f9      	ldr	r1, [r7, #28]
 800ea4a:	2000      	movs	r0, #0
 800ea4c:	f7ff f952 	bl	800dcf4 <tcp_recv_null>
 800ea50:	4603      	mov	r3, r0
 800ea52:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ea54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea58:	f113 0f0d 	cmn.w	r3, #13
 800ea5c:	d053      	beq.n	800eb06 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ea5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d003      	beq.n	800ea6e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ea66:	4b55      	ldr	r3, [pc, #340]	; (800ebbc <tcp_input+0x7e8>)
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	69fb      	ldr	r3, [r7, #28]
 800ea6c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ea6e:	4b50      	ldr	r3, [pc, #320]	; (800ebb0 <tcp_input+0x7dc>)
 800ea70:	781b      	ldrb	r3, [r3, #0]
 800ea72:	f003 0320 	and.w	r3, r3, #32
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d030      	beq.n	800eadc <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800ea7a:	69fb      	ldr	r3, [r7, #28]
 800ea7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d009      	beq.n	800ea96 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ea82:	69fb      	ldr	r3, [r7, #28]
 800ea84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea86:	7b5a      	ldrb	r2, [r3, #13]
 800ea88:	69fb      	ldr	r3, [r7, #28]
 800ea8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea8c:	f042 0220 	orr.w	r2, r2, #32
 800ea90:	b2d2      	uxtb	r2, r2
 800ea92:	735a      	strb	r2, [r3, #13]
 800ea94:	e022      	b.n	800eadc <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ea96:	69fb      	ldr	r3, [r7, #28]
 800ea98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea9e:	d005      	beq.n	800eaac <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	b29a      	uxth	r2, r3
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800eaac:	69fb      	ldr	r3, [r7, #28]
 800eaae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d00b      	beq.n	800eace <tcp_input+0x6fa>
 800eab6:	69fb      	ldr	r3, [r7, #28]
 800eab8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eabc:	69fb      	ldr	r3, [r7, #28]
 800eabe:	6918      	ldr	r0, [r3, #16]
 800eac0:	2300      	movs	r3, #0
 800eac2:	2200      	movs	r2, #0
 800eac4:	69f9      	ldr	r1, [r7, #28]
 800eac6:	47a0      	blx	r4
 800eac8:	4603      	mov	r3, r0
 800eaca:	74fb      	strb	r3, [r7, #19]
 800eacc:	e001      	b.n	800ead2 <tcp_input+0x6fe>
 800eace:	2300      	movs	r3, #0
 800ead0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ead2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ead6:	f113 0f0d 	cmn.w	r3, #13
 800eada:	d016      	beq.n	800eb0a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800eadc:	4b33      	ldr	r3, [pc, #204]	; (800ebac <tcp_input+0x7d8>)
 800eade:	2200      	movs	r2, #0
 800eae0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800eae2:	69f8      	ldr	r0, [r7, #28]
 800eae4:	f000 f880 	bl	800ebe8 <tcp_input_delayed_close>
 800eae8:	4603      	mov	r3, r0
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d10f      	bne.n	800eb0e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800eaee:	69f8      	ldr	r0, [r7, #28]
 800eaf0:	f002 fab8 	bl	8011064 <tcp_output>
 800eaf4:	e00c      	b.n	800eb10 <tcp_input+0x73c>
        goto aborted;
 800eaf6:	bf00      	nop
 800eaf8:	e00a      	b.n	800eb10 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800eafa:	bf00      	nop
 800eafc:	e008      	b.n	800eb10 <tcp_input+0x73c>
              goto aborted;
 800eafe:	bf00      	nop
 800eb00:	e006      	b.n	800eb10 <tcp_input+0x73c>
          goto aborted;
 800eb02:	bf00      	nop
 800eb04:	e004      	b.n	800eb10 <tcp_input+0x73c>
            goto aborted;
 800eb06:	bf00      	nop
 800eb08:	e002      	b.n	800eb10 <tcp_input+0x73c>
              goto aborted;
 800eb0a:	bf00      	nop
 800eb0c:	e000      	b.n	800eb10 <tcp_input+0x73c>
          goto aborted;
 800eb0e:	bf00      	nop
    tcp_input_pcb = NULL;
 800eb10:	4b26      	ldr	r3, [pc, #152]	; (800ebac <tcp_input+0x7d8>)
 800eb12:	2200      	movs	r2, #0
 800eb14:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800eb16:	4b29      	ldr	r3, [pc, #164]	; (800ebbc <tcp_input+0x7e8>)
 800eb18:	2200      	movs	r2, #0
 800eb1a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800eb1c:	4b2b      	ldr	r3, [pc, #172]	; (800ebcc <tcp_input+0x7f8>)
 800eb1e:	685b      	ldr	r3, [r3, #4]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d03f      	beq.n	800eba4 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800eb24:	4b29      	ldr	r3, [pc, #164]	; (800ebcc <tcp_input+0x7f8>)
 800eb26:	685b      	ldr	r3, [r3, #4]
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f7fd fe1b 	bl	800c764 <pbuf_free>
      inseg.p = NULL;
 800eb2e:	4b27      	ldr	r3, [pc, #156]	; (800ebcc <tcp_input+0x7f8>)
 800eb30:	2200      	movs	r2, #0
 800eb32:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800eb34:	e036      	b.n	800eba4 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800eb36:	4b26      	ldr	r3, [pc, #152]	; (800ebd0 <tcp_input+0x7fc>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	899b      	ldrh	r3, [r3, #12]
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7fc fb74 	bl	800b22c <lwip_htons>
 800eb44:	4603      	mov	r3, r0
 800eb46:	b2db      	uxtb	r3, r3
 800eb48:	f003 0304 	and.w	r3, r3, #4
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d118      	bne.n	800eb82 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb50:	4b20      	ldr	r3, [pc, #128]	; (800ebd4 <tcp_input+0x800>)
 800eb52:	6819      	ldr	r1, [r3, #0]
 800eb54:	4b20      	ldr	r3, [pc, #128]	; (800ebd8 <tcp_input+0x804>)
 800eb56:	881b      	ldrh	r3, [r3, #0]
 800eb58:	461a      	mov	r2, r3
 800eb5a:	4b20      	ldr	r3, [pc, #128]	; (800ebdc <tcp_input+0x808>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb60:	4b1b      	ldr	r3, [pc, #108]	; (800ebd0 <tcp_input+0x7fc>)
 800eb62:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb64:	885b      	ldrh	r3, [r3, #2]
 800eb66:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb68:	4a19      	ldr	r2, [pc, #100]	; (800ebd0 <tcp_input+0x7fc>)
 800eb6a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb6c:	8812      	ldrh	r2, [r2, #0]
 800eb6e:	b292      	uxth	r2, r2
 800eb70:	9202      	str	r2, [sp, #8]
 800eb72:	9301      	str	r3, [sp, #4]
 800eb74:	4b1a      	ldr	r3, [pc, #104]	; (800ebe0 <tcp_input+0x80c>)
 800eb76:	9300      	str	r3, [sp, #0]
 800eb78:	4b1a      	ldr	r3, [pc, #104]	; (800ebe4 <tcp_input+0x810>)
 800eb7a:	4602      	mov	r2, r0
 800eb7c:	2000      	movs	r0, #0
 800eb7e:	f003 f825 	bl	8011bcc <tcp_rst>
    pbuf_free(p);
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f7fd fdee 	bl	800c764 <pbuf_free>
  return;
 800eb88:	e00c      	b.n	800eba4 <tcp_input+0x7d0>
    goto dropped;
 800eb8a:	bf00      	nop
 800eb8c:	e006      	b.n	800eb9c <tcp_input+0x7c8>
    goto dropped;
 800eb8e:	bf00      	nop
 800eb90:	e004      	b.n	800eb9c <tcp_input+0x7c8>
    goto dropped;
 800eb92:	bf00      	nop
 800eb94:	e002      	b.n	800eb9c <tcp_input+0x7c8>
      goto dropped;
 800eb96:	bf00      	nop
 800eb98:	e000      	b.n	800eb9c <tcp_input+0x7c8>
      goto dropped;
 800eb9a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f7fd fde1 	bl	800c764 <pbuf_free>
 800eba2:	e000      	b.n	800eba6 <tcp_input+0x7d2>
  return;
 800eba4:	bf00      	nop
}
 800eba6:	3724      	adds	r7, #36	; 0x24
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd90      	pop	{r4, r7, pc}
 800ebac:	20006e50 	.word	0x20006e50
 800ebb0:	20000485 	.word	0x20000485
 800ebb4:	20006e3c 	.word	0x20006e3c
 800ebb8:	20000480 	.word	0x20000480
 800ebbc:	20000488 	.word	0x20000488
 800ebc0:	0801de64 	.word	0x0801de64
 800ebc4:	0801e018 	.word	0x0801e018
 800ebc8:	0801deb0 	.word	0x0801deb0
 800ebcc:	20000458 	.word	0x20000458
 800ebd0:	20000468 	.word	0x20000468
 800ebd4:	2000047c 	.word	0x2000047c
 800ebd8:	20000482 	.word	0x20000482
 800ebdc:	20000478 	.word	0x20000478
 800ebe0:	20003d28 	.word	0x20003d28
 800ebe4:	20003d2c 	.word	0x20003d2c

0800ebe8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b082      	sub	sp, #8
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d106      	bne.n	800ec04 <tcp_input_delayed_close+0x1c>
 800ebf6:	4b17      	ldr	r3, [pc, #92]	; (800ec54 <tcp_input_delayed_close+0x6c>)
 800ebf8:	f240 225a 	movw	r2, #602	; 0x25a
 800ebfc:	4916      	ldr	r1, [pc, #88]	; (800ec58 <tcp_input_delayed_close+0x70>)
 800ebfe:	4817      	ldr	r0, [pc, #92]	; (800ec5c <tcp_input_delayed_close+0x74>)
 800ec00:	f008 fe2e 	bl	8017860 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ec04:	4b16      	ldr	r3, [pc, #88]	; (800ec60 <tcp_input_delayed_close+0x78>)
 800ec06:	781b      	ldrb	r3, [r3, #0]
 800ec08:	f003 0310 	and.w	r3, r3, #16
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d01c      	beq.n	800ec4a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	8b5b      	ldrh	r3, [r3, #26]
 800ec14:	f003 0310 	and.w	r3, r3, #16
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d10d      	bne.n	800ec38 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d008      	beq.n	800ec38 <tcp_input_delayed_close+0x50>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	6912      	ldr	r2, [r2, #16]
 800ec30:	f06f 010e 	mvn.w	r1, #14
 800ec34:	4610      	mov	r0, r2
 800ec36:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ec38:	6879      	ldr	r1, [r7, #4]
 800ec3a:	480a      	ldr	r0, [pc, #40]	; (800ec64 <tcp_input_delayed_close+0x7c>)
 800ec3c:	f7ff fa52 	bl	800e0e4 <tcp_pcb_remove>
    tcp_free(pcb);
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f7fe f83f 	bl	800ccc4 <tcp_free>
    return 1;
 800ec46:	2301      	movs	r3, #1
 800ec48:	e000      	b.n	800ec4c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ec4a:	2300      	movs	r3, #0
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3708      	adds	r7, #8
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}
 800ec54:	0801de64 	.word	0x0801de64
 800ec58:	0801e034 	.word	0x0801e034
 800ec5c:	0801deb0 	.word	0x0801deb0
 800ec60:	20000485 	.word	0x20000485
 800ec64:	20006e3c 	.word	0x20006e3c

0800ec68 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ec68:	b590      	push	{r4, r7, lr}
 800ec6a:	b08b      	sub	sp, #44	; 0x2c
 800ec6c:	af04      	add	r7, sp, #16
 800ec6e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ec70:	4b6f      	ldr	r3, [pc, #444]	; (800ee30 <tcp_listen_input+0x1c8>)
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	f003 0304 	and.w	r3, r3, #4
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	f040 80d2 	bne.w	800ee22 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d106      	bne.n	800ec92 <tcp_listen_input+0x2a>
 800ec84:	4b6b      	ldr	r3, [pc, #428]	; (800ee34 <tcp_listen_input+0x1cc>)
 800ec86:	f240 2281 	movw	r2, #641	; 0x281
 800ec8a:	496b      	ldr	r1, [pc, #428]	; (800ee38 <tcp_listen_input+0x1d0>)
 800ec8c:	486b      	ldr	r0, [pc, #428]	; (800ee3c <tcp_listen_input+0x1d4>)
 800ec8e:	f008 fde7 	bl	8017860 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ec92:	4b67      	ldr	r3, [pc, #412]	; (800ee30 <tcp_listen_input+0x1c8>)
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	f003 0310 	and.w	r3, r3, #16
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d019      	beq.n	800ecd2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec9e:	4b68      	ldr	r3, [pc, #416]	; (800ee40 <tcp_listen_input+0x1d8>)
 800eca0:	6819      	ldr	r1, [r3, #0]
 800eca2:	4b68      	ldr	r3, [pc, #416]	; (800ee44 <tcp_listen_input+0x1dc>)
 800eca4:	881b      	ldrh	r3, [r3, #0]
 800eca6:	461a      	mov	r2, r3
 800eca8:	4b67      	ldr	r3, [pc, #412]	; (800ee48 <tcp_listen_input+0x1e0>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecae:	4b67      	ldr	r3, [pc, #412]	; (800ee4c <tcp_listen_input+0x1e4>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecb2:	885b      	ldrh	r3, [r3, #2]
 800ecb4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecb6:	4a65      	ldr	r2, [pc, #404]	; (800ee4c <tcp_listen_input+0x1e4>)
 800ecb8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecba:	8812      	ldrh	r2, [r2, #0]
 800ecbc:	b292      	uxth	r2, r2
 800ecbe:	9202      	str	r2, [sp, #8]
 800ecc0:	9301      	str	r3, [sp, #4]
 800ecc2:	4b63      	ldr	r3, [pc, #396]	; (800ee50 <tcp_listen_input+0x1e8>)
 800ecc4:	9300      	str	r3, [sp, #0]
 800ecc6:	4b63      	ldr	r3, [pc, #396]	; (800ee54 <tcp_listen_input+0x1ec>)
 800ecc8:	4602      	mov	r2, r0
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f002 ff7e 	bl	8011bcc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ecd0:	e0a9      	b.n	800ee26 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ecd2:	4b57      	ldr	r3, [pc, #348]	; (800ee30 <tcp_listen_input+0x1c8>)
 800ecd4:	781b      	ldrb	r3, [r3, #0]
 800ecd6:	f003 0302 	and.w	r3, r3, #2
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	f000 80a3 	beq.w	800ee26 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	7d5b      	ldrb	r3, [r3, #21]
 800ece4:	4618      	mov	r0, r3
 800ece6:	f7ff f929 	bl	800df3c <tcp_alloc>
 800ecea:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d111      	bne.n	800ed16 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	699b      	ldr	r3, [r3, #24]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d00a      	beq.n	800ed10 <tcp_listen_input+0xa8>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	699b      	ldr	r3, [r3, #24]
 800ecfe:	687a      	ldr	r2, [r7, #4]
 800ed00:	6910      	ldr	r0, [r2, #16]
 800ed02:	f04f 32ff 	mov.w	r2, #4294967295
 800ed06:	2100      	movs	r1, #0
 800ed08:	4798      	blx	r3
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	73bb      	strb	r3, [r7, #14]
      return;
 800ed0e:	e08b      	b.n	800ee28 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ed10:	23f0      	movs	r3, #240	; 0xf0
 800ed12:	73bb      	strb	r3, [r7, #14]
      return;
 800ed14:	e088      	b.n	800ee28 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ed16:	4b50      	ldr	r3, [pc, #320]	; (800ee58 <tcp_listen_input+0x1f0>)
 800ed18:	695a      	ldr	r2, [r3, #20]
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ed1e:	4b4e      	ldr	r3, [pc, #312]	; (800ee58 <tcp_listen_input+0x1f0>)
 800ed20:	691a      	ldr	r2, [r3, #16]
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	8ada      	ldrh	r2, [r3, #22]
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ed2e:	4b47      	ldr	r3, [pc, #284]	; (800ee4c <tcp_listen_input+0x1e4>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	881b      	ldrh	r3, [r3, #0]
 800ed34:	b29a      	uxth	r2, r3
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	2203      	movs	r2, #3
 800ed3e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ed40:	4b41      	ldr	r3, [pc, #260]	; (800ee48 <tcp_listen_input+0x1e0>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	1c5a      	adds	r2, r3, #1
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ed52:	6978      	ldr	r0, [r7, #20]
 800ed54:	f7ff fa5a 	bl	800e20c <tcp_next_iss>
 800ed58:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	693a      	ldr	r2, [r7, #16]
 800ed5e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ed60:	697b      	ldr	r3, [r7, #20]
 800ed62:	693a      	ldr	r2, [r7, #16]
 800ed64:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	693a      	ldr	r2, [r7, #16]
 800ed6a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	693a      	ldr	r2, [r7, #16]
 800ed70:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ed72:	4b35      	ldr	r3, [pc, #212]	; (800ee48 <tcp_listen_input+0x1e0>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	1e5a      	subs	r2, r3, #1
 800ed78:	697b      	ldr	r3, [r7, #20]
 800ed7a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	691a      	ldr	r2, [r3, #16]
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	7a5b      	ldrb	r3, [r3, #9]
 800ed8e:	f003 030c 	and.w	r3, r3, #12
 800ed92:	b2da      	uxtb	r2, r3
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	7a1a      	ldrb	r2, [r3, #8]
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800eda0:	4b2e      	ldr	r3, [pc, #184]	; (800ee5c <tcp_listen_input+0x1f4>)
 800eda2:	681a      	ldr	r2, [r3, #0]
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	60da      	str	r2, [r3, #12]
 800eda8:	4a2c      	ldr	r2, [pc, #176]	; (800ee5c <tcp_listen_input+0x1f4>)
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	6013      	str	r3, [r2, #0]
 800edae:	f003 f8cd 	bl	8011f4c <tcp_timer_needed>
 800edb2:	4b2b      	ldr	r3, [pc, #172]	; (800ee60 <tcp_listen_input+0x1f8>)
 800edb4:	2201      	movs	r2, #1
 800edb6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800edb8:	6978      	ldr	r0, [r7, #20]
 800edba:	f001 fd8d 	bl	80108d8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800edbe:	4b23      	ldr	r3, [pc, #140]	; (800ee4c <tcp_listen_input+0x1e4>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	89db      	ldrh	r3, [r3, #14]
 800edc4:	b29a      	uxth	r2, r3
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	3304      	adds	r3, #4
 800ede0:	4618      	mov	r0, r3
 800ede2:	f006 fdab 	bl	801593c <ip4_route>
 800ede6:	4601      	mov	r1, r0
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	3304      	adds	r3, #4
 800edec:	461a      	mov	r2, r3
 800edee:	4620      	mov	r0, r4
 800edf0:	f7ff fa32 	bl	800e258 <tcp_eff_send_mss_netif>
 800edf4:	4603      	mov	r3, r0
 800edf6:	461a      	mov	r2, r3
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800edfc:	2112      	movs	r1, #18
 800edfe:	6978      	ldr	r0, [r7, #20]
 800ee00:	f002 f842 	bl	8010e88 <tcp_enqueue_flags>
 800ee04:	4603      	mov	r3, r0
 800ee06:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ee08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d004      	beq.n	800ee1a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ee10:	2100      	movs	r1, #0
 800ee12:	6978      	ldr	r0, [r7, #20]
 800ee14:	f7fe f980 	bl	800d118 <tcp_abandon>
      return;
 800ee18:	e006      	b.n	800ee28 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ee1a:	6978      	ldr	r0, [r7, #20]
 800ee1c:	f002 f922 	bl	8011064 <tcp_output>
  return;
 800ee20:	e001      	b.n	800ee26 <tcp_listen_input+0x1be>
    return;
 800ee22:	bf00      	nop
 800ee24:	e000      	b.n	800ee28 <tcp_listen_input+0x1c0>
  return;
 800ee26:	bf00      	nop
}
 800ee28:	371c      	adds	r7, #28
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd90      	pop	{r4, r7, pc}
 800ee2e:	bf00      	nop
 800ee30:	20000484 	.word	0x20000484
 800ee34:	0801de64 	.word	0x0801de64
 800ee38:	0801e05c 	.word	0x0801e05c
 800ee3c:	0801deb0 	.word	0x0801deb0
 800ee40:	2000047c 	.word	0x2000047c
 800ee44:	20000482 	.word	0x20000482
 800ee48:	20000478 	.word	0x20000478
 800ee4c:	20000468 	.word	0x20000468
 800ee50:	20003d28 	.word	0x20003d28
 800ee54:	20003d2c 	.word	0x20003d2c
 800ee58:	20003d18 	.word	0x20003d18
 800ee5c:	20006e3c 	.word	0x20006e3c
 800ee60:	20006e38 	.word	0x20006e38

0800ee64 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b086      	sub	sp, #24
 800ee68:	af04      	add	r7, sp, #16
 800ee6a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ee6c:	4b2f      	ldr	r3, [pc, #188]	; (800ef2c <tcp_timewait_input+0xc8>)
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	f003 0304 	and.w	r3, r3, #4
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d153      	bne.n	800ef20 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d106      	bne.n	800ee8c <tcp_timewait_input+0x28>
 800ee7e:	4b2c      	ldr	r3, [pc, #176]	; (800ef30 <tcp_timewait_input+0xcc>)
 800ee80:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ee84:	492b      	ldr	r1, [pc, #172]	; (800ef34 <tcp_timewait_input+0xd0>)
 800ee86:	482c      	ldr	r0, [pc, #176]	; (800ef38 <tcp_timewait_input+0xd4>)
 800ee88:	f008 fcea 	bl	8017860 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ee8c:	4b27      	ldr	r3, [pc, #156]	; (800ef2c <tcp_timewait_input+0xc8>)
 800ee8e:	781b      	ldrb	r3, [r3, #0]
 800ee90:	f003 0302 	and.w	r3, r3, #2
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d02a      	beq.n	800eeee <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ee98:	4b28      	ldr	r3, [pc, #160]	; (800ef3c <tcp_timewait_input+0xd8>)
 800ee9a:	681a      	ldr	r2, [r3, #0]
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eea0:	1ad3      	subs	r3, r2, r3
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	db2d      	blt.n	800ef02 <tcp_timewait_input+0x9e>
 800eea6:	4b25      	ldr	r3, [pc, #148]	; (800ef3c <tcp_timewait_input+0xd8>)
 800eea8:	681a      	ldr	r2, [r3, #0]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeae:	6879      	ldr	r1, [r7, #4]
 800eeb0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eeb2:	440b      	add	r3, r1
 800eeb4:	1ad3      	subs	r3, r2, r3
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	dc23      	bgt.n	800ef02 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eeba:	4b21      	ldr	r3, [pc, #132]	; (800ef40 <tcp_timewait_input+0xdc>)
 800eebc:	6819      	ldr	r1, [r3, #0]
 800eebe:	4b21      	ldr	r3, [pc, #132]	; (800ef44 <tcp_timewait_input+0xe0>)
 800eec0:	881b      	ldrh	r3, [r3, #0]
 800eec2:	461a      	mov	r2, r3
 800eec4:	4b1d      	ldr	r3, [pc, #116]	; (800ef3c <tcp_timewait_input+0xd8>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eeca:	4b1f      	ldr	r3, [pc, #124]	; (800ef48 <tcp_timewait_input+0xe4>)
 800eecc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eece:	885b      	ldrh	r3, [r3, #2]
 800eed0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eed2:	4a1d      	ldr	r2, [pc, #116]	; (800ef48 <tcp_timewait_input+0xe4>)
 800eed4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eed6:	8812      	ldrh	r2, [r2, #0]
 800eed8:	b292      	uxth	r2, r2
 800eeda:	9202      	str	r2, [sp, #8]
 800eedc:	9301      	str	r3, [sp, #4]
 800eede:	4b1b      	ldr	r3, [pc, #108]	; (800ef4c <tcp_timewait_input+0xe8>)
 800eee0:	9300      	str	r3, [sp, #0]
 800eee2:	4b1b      	ldr	r3, [pc, #108]	; (800ef50 <tcp_timewait_input+0xec>)
 800eee4:	4602      	mov	r2, r0
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f002 fe70 	bl	8011bcc <tcp_rst>
      return;
 800eeec:	e01b      	b.n	800ef26 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800eeee:	4b0f      	ldr	r3, [pc, #60]	; (800ef2c <tcp_timewait_input+0xc8>)
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	f003 0301 	and.w	r3, r3, #1
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d003      	beq.n	800ef02 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800eefa:	4b16      	ldr	r3, [pc, #88]	; (800ef54 <tcp_timewait_input+0xf0>)
 800eefc:	681a      	ldr	r2, [r3, #0]
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ef02:	4b10      	ldr	r3, [pc, #64]	; (800ef44 <tcp_timewait_input+0xe0>)
 800ef04:	881b      	ldrh	r3, [r3, #0]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d00c      	beq.n	800ef24 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	8b5b      	ldrh	r3, [r3, #26]
 800ef0e:	f043 0302 	orr.w	r3, r3, #2
 800ef12:	b29a      	uxth	r2, r3
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f002 f8a3 	bl	8011064 <tcp_output>
  }
  return;
 800ef1e:	e001      	b.n	800ef24 <tcp_timewait_input+0xc0>
    return;
 800ef20:	bf00      	nop
 800ef22:	e000      	b.n	800ef26 <tcp_timewait_input+0xc2>
  return;
 800ef24:	bf00      	nop
}
 800ef26:	3708      	adds	r7, #8
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}
 800ef2c:	20000484 	.word	0x20000484
 800ef30:	0801de64 	.word	0x0801de64
 800ef34:	0801e07c 	.word	0x0801e07c
 800ef38:	0801deb0 	.word	0x0801deb0
 800ef3c:	20000478 	.word	0x20000478
 800ef40:	2000047c 	.word	0x2000047c
 800ef44:	20000482 	.word	0x20000482
 800ef48:	20000468 	.word	0x20000468
 800ef4c:	20003d28 	.word	0x20003d28
 800ef50:	20003d2c 	.word	0x20003d2c
 800ef54:	20006e40 	.word	0x20006e40

0800ef58 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ef58:	b590      	push	{r4, r7, lr}
 800ef5a:	b08d      	sub	sp, #52	; 0x34
 800ef5c:	af04      	add	r7, sp, #16
 800ef5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ef60:	2300      	movs	r3, #0
 800ef62:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ef64:	2300      	movs	r3, #0
 800ef66:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d106      	bne.n	800ef7c <tcp_process+0x24>
 800ef6e:	4ba5      	ldr	r3, [pc, #660]	; (800f204 <tcp_process+0x2ac>)
 800ef70:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ef74:	49a4      	ldr	r1, [pc, #656]	; (800f208 <tcp_process+0x2b0>)
 800ef76:	48a5      	ldr	r0, [pc, #660]	; (800f20c <tcp_process+0x2b4>)
 800ef78:	f008 fc72 	bl	8017860 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ef7c:	4ba4      	ldr	r3, [pc, #656]	; (800f210 <tcp_process+0x2b8>)
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	f003 0304 	and.w	r3, r3, #4
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d04e      	beq.n	800f026 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	7d1b      	ldrb	r3, [r3, #20]
 800ef8c:	2b02      	cmp	r3, #2
 800ef8e:	d108      	bne.n	800efa2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef94:	4b9f      	ldr	r3, [pc, #636]	; (800f214 <tcp_process+0x2bc>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d123      	bne.n	800efe4 <tcp_process+0x8c>
        acceptable = 1;
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	76fb      	strb	r3, [r7, #27]
 800efa0:	e020      	b.n	800efe4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efa6:	4b9c      	ldr	r3, [pc, #624]	; (800f218 <tcp_process+0x2c0>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	429a      	cmp	r2, r3
 800efac:	d102      	bne.n	800efb4 <tcp_process+0x5c>
        acceptable = 1;
 800efae:	2301      	movs	r3, #1
 800efb0:	76fb      	strb	r3, [r7, #27]
 800efb2:	e017      	b.n	800efe4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800efb4:	4b98      	ldr	r3, [pc, #608]	; (800f218 <tcp_process+0x2c0>)
 800efb6:	681a      	ldr	r2, [r3, #0]
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efbc:	1ad3      	subs	r3, r2, r3
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	db10      	blt.n	800efe4 <tcp_process+0x8c>
 800efc2:	4b95      	ldr	r3, [pc, #596]	; (800f218 <tcp_process+0x2c0>)
 800efc4:	681a      	ldr	r2, [r3, #0]
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efca:	6879      	ldr	r1, [r7, #4]
 800efcc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800efce:	440b      	add	r3, r1
 800efd0:	1ad3      	subs	r3, r2, r3
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	dc06      	bgt.n	800efe4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	8b5b      	ldrh	r3, [r3, #26]
 800efda:	f043 0302 	orr.w	r3, r3, #2
 800efde:	b29a      	uxth	r2, r3
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800efe4:	7efb      	ldrb	r3, [r7, #27]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d01b      	beq.n	800f022 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	7d1b      	ldrb	r3, [r3, #20]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d106      	bne.n	800f000 <tcp_process+0xa8>
 800eff2:	4b84      	ldr	r3, [pc, #528]	; (800f204 <tcp_process+0x2ac>)
 800eff4:	f44f 724e 	mov.w	r2, #824	; 0x338
 800eff8:	4988      	ldr	r1, [pc, #544]	; (800f21c <tcp_process+0x2c4>)
 800effa:	4884      	ldr	r0, [pc, #528]	; (800f20c <tcp_process+0x2b4>)
 800effc:	f008 fc30 	bl	8017860 <iprintf>
      recv_flags |= TF_RESET;
 800f000:	4b87      	ldr	r3, [pc, #540]	; (800f220 <tcp_process+0x2c8>)
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	f043 0308 	orr.w	r3, r3, #8
 800f008:	b2da      	uxtb	r2, r3
 800f00a:	4b85      	ldr	r3, [pc, #532]	; (800f220 <tcp_process+0x2c8>)
 800f00c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	8b5b      	ldrh	r3, [r3, #26]
 800f012:	f023 0301 	bic.w	r3, r3, #1
 800f016:	b29a      	uxth	r2, r3
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f01c:	f06f 030d 	mvn.w	r3, #13
 800f020:	e37a      	b.n	800f718 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f022:	2300      	movs	r3, #0
 800f024:	e378      	b.n	800f718 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f026:	4b7a      	ldr	r3, [pc, #488]	; (800f210 <tcp_process+0x2b8>)
 800f028:	781b      	ldrb	r3, [r3, #0]
 800f02a:	f003 0302 	and.w	r3, r3, #2
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d010      	beq.n	800f054 <tcp_process+0xfc>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	7d1b      	ldrb	r3, [r3, #20]
 800f036:	2b02      	cmp	r3, #2
 800f038:	d00c      	beq.n	800f054 <tcp_process+0xfc>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	7d1b      	ldrb	r3, [r3, #20]
 800f03e:	2b03      	cmp	r3, #3
 800f040:	d008      	beq.n	800f054 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	8b5b      	ldrh	r3, [r3, #26]
 800f046:	f043 0302 	orr.w	r3, r3, #2
 800f04a:	b29a      	uxth	r2, r3
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f050:	2300      	movs	r3, #0
 800f052:	e361      	b.n	800f718 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	8b5b      	ldrh	r3, [r3, #26]
 800f058:	f003 0310 	and.w	r3, r3, #16
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d103      	bne.n	800f068 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f060:	4b70      	ldr	r3, [pc, #448]	; (800f224 <tcp_process+0x2cc>)
 800f062:	681a      	ldr	r2, [r3, #0]
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2200      	movs	r2, #0
 800f06c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2200      	movs	r2, #0
 800f074:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f001 fc2d 	bl	80108d8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	7d1b      	ldrb	r3, [r3, #20]
 800f082:	3b02      	subs	r3, #2
 800f084:	2b07      	cmp	r3, #7
 800f086:	f200 8337 	bhi.w	800f6f8 <tcp_process+0x7a0>
 800f08a:	a201      	add	r2, pc, #4	; (adr r2, 800f090 <tcp_process+0x138>)
 800f08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f090:	0800f0b1 	.word	0x0800f0b1
 800f094:	0800f2e1 	.word	0x0800f2e1
 800f098:	0800f459 	.word	0x0800f459
 800f09c:	0800f483 	.word	0x0800f483
 800f0a0:	0800f5a7 	.word	0x0800f5a7
 800f0a4:	0800f459 	.word	0x0800f459
 800f0a8:	0800f633 	.word	0x0800f633
 800f0ac:	0800f6c3 	.word	0x0800f6c3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f0b0:	4b57      	ldr	r3, [pc, #348]	; (800f210 <tcp_process+0x2b8>)
 800f0b2:	781b      	ldrb	r3, [r3, #0]
 800f0b4:	f003 0310 	and.w	r3, r3, #16
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	f000 80e4 	beq.w	800f286 <tcp_process+0x32e>
 800f0be:	4b54      	ldr	r3, [pc, #336]	; (800f210 <tcp_process+0x2b8>)
 800f0c0:	781b      	ldrb	r3, [r3, #0]
 800f0c2:	f003 0302 	and.w	r3, r3, #2
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	f000 80dd 	beq.w	800f286 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0d0:	1c5a      	adds	r2, r3, #1
 800f0d2:	4b50      	ldr	r3, [pc, #320]	; (800f214 <tcp_process+0x2bc>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	f040 80d5 	bne.w	800f286 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f0dc:	4b4e      	ldr	r3, [pc, #312]	; (800f218 <tcp_process+0x2c0>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	1c5a      	adds	r2, r3, #1
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f0ee:	4b49      	ldr	r3, [pc, #292]	; (800f214 <tcp_process+0x2bc>)
 800f0f0:	681a      	ldr	r2, [r3, #0]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f0f6:	4b4c      	ldr	r3, [pc, #304]	; (800f228 <tcp_process+0x2d0>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	89db      	ldrh	r3, [r3, #14]
 800f0fc:	b29a      	uxth	r2, r3
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f110:	4b41      	ldr	r3, [pc, #260]	; (800f218 <tcp_process+0x2c0>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	1e5a      	subs	r2, r3, #1
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2204      	movs	r2, #4
 800f11e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	3304      	adds	r3, #4
 800f128:	4618      	mov	r0, r3
 800f12a:	f006 fc07 	bl	801593c <ip4_route>
 800f12e:	4601      	mov	r1, r0
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	3304      	adds	r3, #4
 800f134:	461a      	mov	r2, r3
 800f136:	4620      	mov	r0, r4
 800f138:	f7ff f88e 	bl	800e258 <tcp_eff_send_mss_netif>
 800f13c:	4603      	mov	r3, r0
 800f13e:	461a      	mov	r2, r3
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f148:	009a      	lsls	r2, r3, #2
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f14e:	005b      	lsls	r3, r3, #1
 800f150:	f241 111c 	movw	r1, #4380	; 0x111c
 800f154:	428b      	cmp	r3, r1
 800f156:	bf38      	it	cc
 800f158:	460b      	movcc	r3, r1
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d204      	bcs.n	800f168 <tcp_process+0x210>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f162:	009b      	lsls	r3, r3, #2
 800f164:	b29b      	uxth	r3, r3
 800f166:	e00d      	b.n	800f184 <tcp_process+0x22c>
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f16c:	005b      	lsls	r3, r3, #1
 800f16e:	f241 121c 	movw	r2, #4380	; 0x111c
 800f172:	4293      	cmp	r3, r2
 800f174:	d904      	bls.n	800f180 <tcp_process+0x228>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f17a:	005b      	lsls	r3, r3, #1
 800f17c:	b29b      	uxth	r3, r3
 800f17e:	e001      	b.n	800f184 <tcp_process+0x22c>
 800f180:	f241 131c 	movw	r3, #4380	; 0x111c
 800f184:	687a      	ldr	r2, [r7, #4]
 800f186:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f190:	2b00      	cmp	r3, #0
 800f192:	d106      	bne.n	800f1a2 <tcp_process+0x24a>
 800f194:	4b1b      	ldr	r3, [pc, #108]	; (800f204 <tcp_process+0x2ac>)
 800f196:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f19a:	4924      	ldr	r1, [pc, #144]	; (800f22c <tcp_process+0x2d4>)
 800f19c:	481b      	ldr	r0, [pc, #108]	; (800f20c <tcp_process+0x2b4>)
 800f19e:	f008 fb5f 	bl	8017860 <iprintf>
        --pcb->snd_queuelen;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1a8:	3b01      	subs	r3, #1
 800f1aa:	b29a      	uxth	r2, r3
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1b6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d111      	bne.n	800f1e2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1c2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f1c4:	69fb      	ldr	r3, [r7, #28]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d106      	bne.n	800f1d8 <tcp_process+0x280>
 800f1ca:	4b0e      	ldr	r3, [pc, #56]	; (800f204 <tcp_process+0x2ac>)
 800f1cc:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f1d0:	4917      	ldr	r1, [pc, #92]	; (800f230 <tcp_process+0x2d8>)
 800f1d2:	480e      	ldr	r0, [pc, #56]	; (800f20c <tcp_process+0x2b4>)
 800f1d4:	f008 fb44 	bl	8017860 <iprintf>
          pcb->unsent = rseg->next;
 800f1d8:	69fb      	ldr	r3, [r7, #28]
 800f1da:	681a      	ldr	r2, [r3, #0]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	66da      	str	r2, [r3, #108]	; 0x6c
 800f1e0:	e003      	b.n	800f1ea <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800f1e2:	69fb      	ldr	r3, [r7, #28]
 800f1e4:	681a      	ldr	r2, [r3, #0]
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f1ea:	69f8      	ldr	r0, [r7, #28]
 800f1ec:	f7fe fd3d 	bl	800dc6a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d11d      	bne.n	800f234 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1fe:	861a      	strh	r2, [r3, #48]	; 0x30
 800f200:	e01f      	b.n	800f242 <tcp_process+0x2ea>
 800f202:	bf00      	nop
 800f204:	0801de64 	.word	0x0801de64
 800f208:	0801e09c 	.word	0x0801e09c
 800f20c:	0801deb0 	.word	0x0801deb0
 800f210:	20000484 	.word	0x20000484
 800f214:	2000047c 	.word	0x2000047c
 800f218:	20000478 	.word	0x20000478
 800f21c:	0801e0b8 	.word	0x0801e0b8
 800f220:	20000485 	.word	0x20000485
 800f224:	20006e40 	.word	0x20006e40
 800f228:	20000468 	.word	0x20000468
 800f22c:	0801e0d8 	.word	0x0801e0d8
 800f230:	0801e0f0 	.word	0x0801e0f0
        } else {
          pcb->rtime = 0;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2200      	movs	r2, #0
 800f238:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2200      	movs	r2, #0
 800f23e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d00a      	beq.n	800f262 <tcp_process+0x30a>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	6910      	ldr	r0, [r2, #16]
 800f256:	2200      	movs	r2, #0
 800f258:	6879      	ldr	r1, [r7, #4]
 800f25a:	4798      	blx	r3
 800f25c:	4603      	mov	r3, r0
 800f25e:	76bb      	strb	r3, [r7, #26]
 800f260:	e001      	b.n	800f266 <tcp_process+0x30e>
 800f262:	2300      	movs	r3, #0
 800f264:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f266:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f26a:	f113 0f0d 	cmn.w	r3, #13
 800f26e:	d102      	bne.n	800f276 <tcp_process+0x31e>
          return ERR_ABRT;
 800f270:	f06f 030c 	mvn.w	r3, #12
 800f274:	e250      	b.n	800f718 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	8b5b      	ldrh	r3, [r3, #26]
 800f27a:	f043 0302 	orr.w	r3, r3, #2
 800f27e:	b29a      	uxth	r2, r3
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f284:	e23a      	b.n	800f6fc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f286:	4b9d      	ldr	r3, [pc, #628]	; (800f4fc <tcp_process+0x5a4>)
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	f003 0310 	and.w	r3, r3, #16
 800f28e:	2b00      	cmp	r3, #0
 800f290:	f000 8234 	beq.w	800f6fc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f294:	4b9a      	ldr	r3, [pc, #616]	; (800f500 <tcp_process+0x5a8>)
 800f296:	6819      	ldr	r1, [r3, #0]
 800f298:	4b9a      	ldr	r3, [pc, #616]	; (800f504 <tcp_process+0x5ac>)
 800f29a:	881b      	ldrh	r3, [r3, #0]
 800f29c:	461a      	mov	r2, r3
 800f29e:	4b9a      	ldr	r3, [pc, #616]	; (800f508 <tcp_process+0x5b0>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2a4:	4b99      	ldr	r3, [pc, #612]	; (800f50c <tcp_process+0x5b4>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2a8:	885b      	ldrh	r3, [r3, #2]
 800f2aa:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2ac:	4a97      	ldr	r2, [pc, #604]	; (800f50c <tcp_process+0x5b4>)
 800f2ae:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2b0:	8812      	ldrh	r2, [r2, #0]
 800f2b2:	b292      	uxth	r2, r2
 800f2b4:	9202      	str	r2, [sp, #8]
 800f2b6:	9301      	str	r3, [sp, #4]
 800f2b8:	4b95      	ldr	r3, [pc, #596]	; (800f510 <tcp_process+0x5b8>)
 800f2ba:	9300      	str	r3, [sp, #0]
 800f2bc:	4b95      	ldr	r3, [pc, #596]	; (800f514 <tcp_process+0x5bc>)
 800f2be:	4602      	mov	r2, r0
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f002 fc83 	bl	8011bcc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f2cc:	2b05      	cmp	r3, #5
 800f2ce:	f200 8215 	bhi.w	800f6fc <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f002 fa4d 	bl	8011778 <tcp_rexmit_rto>
      break;
 800f2de:	e20d      	b.n	800f6fc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f2e0:	4b86      	ldr	r3, [pc, #536]	; (800f4fc <tcp_process+0x5a4>)
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	f003 0310 	and.w	r3, r3, #16
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	f000 80a1 	beq.w	800f430 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f2ee:	4b84      	ldr	r3, [pc, #528]	; (800f500 <tcp_process+0x5a8>)
 800f2f0:	681a      	ldr	r2, [r3, #0]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2f6:	1ad3      	subs	r3, r2, r3
 800f2f8:	3b01      	subs	r3, #1
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	db7e      	blt.n	800f3fc <tcp_process+0x4a4>
 800f2fe:	4b80      	ldr	r3, [pc, #512]	; (800f500 <tcp_process+0x5a8>)
 800f300:	681a      	ldr	r2, [r3, #0]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f306:	1ad3      	subs	r3, r2, r3
 800f308:	2b00      	cmp	r3, #0
 800f30a:	dc77      	bgt.n	800f3fc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2204      	movs	r2, #4
 800f310:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f316:	2b00      	cmp	r3, #0
 800f318:	d102      	bne.n	800f320 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f31a:	23fa      	movs	r3, #250	; 0xfa
 800f31c:	76bb      	strb	r3, [r7, #26]
 800f31e:	e01d      	b.n	800f35c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f324:	699b      	ldr	r3, [r3, #24]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d106      	bne.n	800f338 <tcp_process+0x3e0>
 800f32a:	4b7b      	ldr	r3, [pc, #492]	; (800f518 <tcp_process+0x5c0>)
 800f32c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f330:	497a      	ldr	r1, [pc, #488]	; (800f51c <tcp_process+0x5c4>)
 800f332:	487b      	ldr	r0, [pc, #492]	; (800f520 <tcp_process+0x5c8>)
 800f334:	f008 fa94 	bl	8017860 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f33c:	699b      	ldr	r3, [r3, #24]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d00a      	beq.n	800f358 <tcp_process+0x400>
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f346:	699b      	ldr	r3, [r3, #24]
 800f348:	687a      	ldr	r2, [r7, #4]
 800f34a:	6910      	ldr	r0, [r2, #16]
 800f34c:	2200      	movs	r2, #0
 800f34e:	6879      	ldr	r1, [r7, #4]
 800f350:	4798      	blx	r3
 800f352:	4603      	mov	r3, r0
 800f354:	76bb      	strb	r3, [r7, #26]
 800f356:	e001      	b.n	800f35c <tcp_process+0x404>
 800f358:	23f0      	movs	r3, #240	; 0xf0
 800f35a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f35c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d00a      	beq.n	800f37a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f364:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f368:	f113 0f0d 	cmn.w	r3, #13
 800f36c:	d002      	beq.n	800f374 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f7fd ff90 	bl	800d294 <tcp_abort>
            }
            return ERR_ABRT;
 800f374:	f06f 030c 	mvn.w	r3, #12
 800f378:	e1ce      	b.n	800f718 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 fae0 	bl	800f940 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f380:	4b68      	ldr	r3, [pc, #416]	; (800f524 <tcp_process+0x5cc>)
 800f382:	881b      	ldrh	r3, [r3, #0]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d005      	beq.n	800f394 <tcp_process+0x43c>
            recv_acked--;
 800f388:	4b66      	ldr	r3, [pc, #408]	; (800f524 <tcp_process+0x5cc>)
 800f38a:	881b      	ldrh	r3, [r3, #0]
 800f38c:	3b01      	subs	r3, #1
 800f38e:	b29a      	uxth	r2, r3
 800f390:	4b64      	ldr	r3, [pc, #400]	; (800f524 <tcp_process+0x5cc>)
 800f392:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f398:	009a      	lsls	r2, r3, #2
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f39e:	005b      	lsls	r3, r3, #1
 800f3a0:	f241 111c 	movw	r1, #4380	; 0x111c
 800f3a4:	428b      	cmp	r3, r1
 800f3a6:	bf38      	it	cc
 800f3a8:	460b      	movcc	r3, r1
 800f3aa:	429a      	cmp	r2, r3
 800f3ac:	d204      	bcs.n	800f3b8 <tcp_process+0x460>
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3b2:	009b      	lsls	r3, r3, #2
 800f3b4:	b29b      	uxth	r3, r3
 800f3b6:	e00d      	b.n	800f3d4 <tcp_process+0x47c>
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3bc:	005b      	lsls	r3, r3, #1
 800f3be:	f241 121c 	movw	r2, #4380	; 0x111c
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d904      	bls.n	800f3d0 <tcp_process+0x478>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3ca:	005b      	lsls	r3, r3, #1
 800f3cc:	b29b      	uxth	r3, r3
 800f3ce:	e001      	b.n	800f3d4 <tcp_process+0x47c>
 800f3d0:	f241 131c 	movw	r3, #4380	; 0x111c
 800f3d4:	687a      	ldr	r2, [r7, #4]
 800f3d6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f3da:	4b53      	ldr	r3, [pc, #332]	; (800f528 <tcp_process+0x5d0>)
 800f3dc:	781b      	ldrb	r3, [r3, #0]
 800f3de:	f003 0320 	and.w	r3, r3, #32
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d037      	beq.n	800f456 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	8b5b      	ldrh	r3, [r3, #26]
 800f3ea:	f043 0302 	orr.w	r3, r3, #2
 800f3ee:	b29a      	uxth	r2, r3
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2207      	movs	r2, #7
 800f3f8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f3fa:	e02c      	b.n	800f456 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f3fc:	4b40      	ldr	r3, [pc, #256]	; (800f500 <tcp_process+0x5a8>)
 800f3fe:	6819      	ldr	r1, [r3, #0]
 800f400:	4b40      	ldr	r3, [pc, #256]	; (800f504 <tcp_process+0x5ac>)
 800f402:	881b      	ldrh	r3, [r3, #0]
 800f404:	461a      	mov	r2, r3
 800f406:	4b40      	ldr	r3, [pc, #256]	; (800f508 <tcp_process+0x5b0>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f40c:	4b3f      	ldr	r3, [pc, #252]	; (800f50c <tcp_process+0x5b4>)
 800f40e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f410:	885b      	ldrh	r3, [r3, #2]
 800f412:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f414:	4a3d      	ldr	r2, [pc, #244]	; (800f50c <tcp_process+0x5b4>)
 800f416:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f418:	8812      	ldrh	r2, [r2, #0]
 800f41a:	b292      	uxth	r2, r2
 800f41c:	9202      	str	r2, [sp, #8]
 800f41e:	9301      	str	r3, [sp, #4]
 800f420:	4b3b      	ldr	r3, [pc, #236]	; (800f510 <tcp_process+0x5b8>)
 800f422:	9300      	str	r3, [sp, #0]
 800f424:	4b3b      	ldr	r3, [pc, #236]	; (800f514 <tcp_process+0x5bc>)
 800f426:	4602      	mov	r2, r0
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f002 fbcf 	bl	8011bcc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f42e:	e167      	b.n	800f700 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f430:	4b32      	ldr	r3, [pc, #200]	; (800f4fc <tcp_process+0x5a4>)
 800f432:	781b      	ldrb	r3, [r3, #0]
 800f434:	f003 0302 	and.w	r3, r3, #2
 800f438:	2b00      	cmp	r3, #0
 800f43a:	f000 8161 	beq.w	800f700 <tcp_process+0x7a8>
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f442:	1e5a      	subs	r2, r3, #1
 800f444:	4b30      	ldr	r3, [pc, #192]	; (800f508 <tcp_process+0x5b0>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	429a      	cmp	r2, r3
 800f44a:	f040 8159 	bne.w	800f700 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	f002 f9b4 	bl	80117bc <tcp_rexmit>
      break;
 800f454:	e154      	b.n	800f700 <tcp_process+0x7a8>
 800f456:	e153      	b.n	800f700 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f000 fa71 	bl	800f940 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f45e:	4b32      	ldr	r3, [pc, #200]	; (800f528 <tcp_process+0x5d0>)
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	f003 0320 	and.w	r3, r3, #32
 800f466:	2b00      	cmp	r3, #0
 800f468:	f000 814c 	beq.w	800f704 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	8b5b      	ldrh	r3, [r3, #26]
 800f470:	f043 0302 	orr.w	r3, r3, #2
 800f474:	b29a      	uxth	r2, r3
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2207      	movs	r2, #7
 800f47e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f480:	e140      	b.n	800f704 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f000 fa5c 	bl	800f940 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f488:	4b27      	ldr	r3, [pc, #156]	; (800f528 <tcp_process+0x5d0>)
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	f003 0320 	and.w	r3, r3, #32
 800f490:	2b00      	cmp	r3, #0
 800f492:	d071      	beq.n	800f578 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f494:	4b19      	ldr	r3, [pc, #100]	; (800f4fc <tcp_process+0x5a4>)
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	f003 0310 	and.w	r3, r3, #16
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d060      	beq.n	800f562 <tcp_process+0x60a>
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f4a4:	4b16      	ldr	r3, [pc, #88]	; (800f500 <tcp_process+0x5a8>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d15a      	bne.n	800f562 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d156      	bne.n	800f562 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	8b5b      	ldrh	r3, [r3, #26]
 800f4b8:	f043 0302 	orr.w	r3, r3, #2
 800f4bc:	b29a      	uxth	r2, r3
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f7fe fdbe 	bl	800e044 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f4c8:	4b18      	ldr	r3, [pc, #96]	; (800f52c <tcp_process+0x5d4>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	687a      	ldr	r2, [r7, #4]
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d105      	bne.n	800f4de <tcp_process+0x586>
 800f4d2:	4b16      	ldr	r3, [pc, #88]	; (800f52c <tcp_process+0x5d4>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	68db      	ldr	r3, [r3, #12]
 800f4d8:	4a14      	ldr	r2, [pc, #80]	; (800f52c <tcp_process+0x5d4>)
 800f4da:	6013      	str	r3, [r2, #0]
 800f4dc:	e02e      	b.n	800f53c <tcp_process+0x5e4>
 800f4de:	4b13      	ldr	r3, [pc, #76]	; (800f52c <tcp_process+0x5d4>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	617b      	str	r3, [r7, #20]
 800f4e4:	e027      	b.n	800f536 <tcp_process+0x5de>
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	68db      	ldr	r3, [r3, #12]
 800f4ea:	687a      	ldr	r2, [r7, #4]
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d11f      	bne.n	800f530 <tcp_process+0x5d8>
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	68da      	ldr	r2, [r3, #12]
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	60da      	str	r2, [r3, #12]
 800f4f8:	e020      	b.n	800f53c <tcp_process+0x5e4>
 800f4fa:	bf00      	nop
 800f4fc:	20000484 	.word	0x20000484
 800f500:	2000047c 	.word	0x2000047c
 800f504:	20000482 	.word	0x20000482
 800f508:	20000478 	.word	0x20000478
 800f50c:	20000468 	.word	0x20000468
 800f510:	20003d28 	.word	0x20003d28
 800f514:	20003d2c 	.word	0x20003d2c
 800f518:	0801de64 	.word	0x0801de64
 800f51c:	0801e104 	.word	0x0801e104
 800f520:	0801deb0 	.word	0x0801deb0
 800f524:	20000480 	.word	0x20000480
 800f528:	20000485 	.word	0x20000485
 800f52c:	20006e3c 	.word	0x20006e3c
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	68db      	ldr	r3, [r3, #12]
 800f534:	617b      	str	r3, [r7, #20]
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d1d4      	bne.n	800f4e6 <tcp_process+0x58e>
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2200      	movs	r2, #0
 800f540:	60da      	str	r2, [r3, #12]
 800f542:	4b77      	ldr	r3, [pc, #476]	; (800f720 <tcp_process+0x7c8>)
 800f544:	2201      	movs	r2, #1
 800f546:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	220a      	movs	r2, #10
 800f54c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f54e:	4b75      	ldr	r3, [pc, #468]	; (800f724 <tcp_process+0x7cc>)
 800f550:	681a      	ldr	r2, [r3, #0]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	60da      	str	r2, [r3, #12]
 800f556:	4a73      	ldr	r2, [pc, #460]	; (800f724 <tcp_process+0x7cc>)
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	6013      	str	r3, [r2, #0]
 800f55c:	f002 fcf6 	bl	8011f4c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f560:	e0d2      	b.n	800f708 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	8b5b      	ldrh	r3, [r3, #26]
 800f566:	f043 0302 	orr.w	r3, r3, #2
 800f56a:	b29a      	uxth	r2, r3
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2208      	movs	r2, #8
 800f574:	751a      	strb	r2, [r3, #20]
      break;
 800f576:	e0c7      	b.n	800f708 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f578:	4b6b      	ldr	r3, [pc, #428]	; (800f728 <tcp_process+0x7d0>)
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	f003 0310 	and.w	r3, r3, #16
 800f580:	2b00      	cmp	r3, #0
 800f582:	f000 80c1 	beq.w	800f708 <tcp_process+0x7b0>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f58a:	4b68      	ldr	r3, [pc, #416]	; (800f72c <tcp_process+0x7d4>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	429a      	cmp	r2, r3
 800f590:	f040 80ba 	bne.w	800f708 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f598:	2b00      	cmp	r3, #0
 800f59a:	f040 80b5 	bne.w	800f708 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2206      	movs	r2, #6
 800f5a2:	751a      	strb	r2, [r3, #20]
      break;
 800f5a4:	e0b0      	b.n	800f708 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f000 f9ca 	bl	800f940 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f5ac:	4b60      	ldr	r3, [pc, #384]	; (800f730 <tcp_process+0x7d8>)
 800f5ae:	781b      	ldrb	r3, [r3, #0]
 800f5b0:	f003 0320 	and.w	r3, r3, #32
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	f000 80a9 	beq.w	800f70c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	8b5b      	ldrh	r3, [r3, #26]
 800f5be:	f043 0302 	orr.w	r3, r3, #2
 800f5c2:	b29a      	uxth	r2, r3
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f7fe fd3b 	bl	800e044 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f5ce:	4b59      	ldr	r3, [pc, #356]	; (800f734 <tcp_process+0x7dc>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	687a      	ldr	r2, [r7, #4]
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d105      	bne.n	800f5e4 <tcp_process+0x68c>
 800f5d8:	4b56      	ldr	r3, [pc, #344]	; (800f734 <tcp_process+0x7dc>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	68db      	ldr	r3, [r3, #12]
 800f5de:	4a55      	ldr	r2, [pc, #340]	; (800f734 <tcp_process+0x7dc>)
 800f5e0:	6013      	str	r3, [r2, #0]
 800f5e2:	e013      	b.n	800f60c <tcp_process+0x6b4>
 800f5e4:	4b53      	ldr	r3, [pc, #332]	; (800f734 <tcp_process+0x7dc>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	613b      	str	r3, [r7, #16]
 800f5ea:	e00c      	b.n	800f606 <tcp_process+0x6ae>
 800f5ec:	693b      	ldr	r3, [r7, #16]
 800f5ee:	68db      	ldr	r3, [r3, #12]
 800f5f0:	687a      	ldr	r2, [r7, #4]
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	d104      	bne.n	800f600 <tcp_process+0x6a8>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	68da      	ldr	r2, [r3, #12]
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	60da      	str	r2, [r3, #12]
 800f5fe:	e005      	b.n	800f60c <tcp_process+0x6b4>
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	68db      	ldr	r3, [r3, #12]
 800f604:	613b      	str	r3, [r7, #16]
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d1ef      	bne.n	800f5ec <tcp_process+0x694>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2200      	movs	r2, #0
 800f610:	60da      	str	r2, [r3, #12]
 800f612:	4b43      	ldr	r3, [pc, #268]	; (800f720 <tcp_process+0x7c8>)
 800f614:	2201      	movs	r2, #1
 800f616:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	220a      	movs	r2, #10
 800f61c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f61e:	4b41      	ldr	r3, [pc, #260]	; (800f724 <tcp_process+0x7cc>)
 800f620:	681a      	ldr	r2, [r3, #0]
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	60da      	str	r2, [r3, #12]
 800f626:	4a3f      	ldr	r2, [pc, #252]	; (800f724 <tcp_process+0x7cc>)
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6013      	str	r3, [r2, #0]
 800f62c:	f002 fc8e 	bl	8011f4c <tcp_timer_needed>
      }
      break;
 800f630:	e06c      	b.n	800f70c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f000 f984 	bl	800f940 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f638:	4b3b      	ldr	r3, [pc, #236]	; (800f728 <tcp_process+0x7d0>)
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	f003 0310 	and.w	r3, r3, #16
 800f640:	2b00      	cmp	r3, #0
 800f642:	d065      	beq.n	800f710 <tcp_process+0x7b8>
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f648:	4b38      	ldr	r3, [pc, #224]	; (800f72c <tcp_process+0x7d4>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	429a      	cmp	r2, r3
 800f64e:	d15f      	bne.n	800f710 <tcp_process+0x7b8>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f654:	2b00      	cmp	r3, #0
 800f656:	d15b      	bne.n	800f710 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f7fe fcf3 	bl	800e044 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f65e:	4b35      	ldr	r3, [pc, #212]	; (800f734 <tcp_process+0x7dc>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	687a      	ldr	r2, [r7, #4]
 800f664:	429a      	cmp	r2, r3
 800f666:	d105      	bne.n	800f674 <tcp_process+0x71c>
 800f668:	4b32      	ldr	r3, [pc, #200]	; (800f734 <tcp_process+0x7dc>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	68db      	ldr	r3, [r3, #12]
 800f66e:	4a31      	ldr	r2, [pc, #196]	; (800f734 <tcp_process+0x7dc>)
 800f670:	6013      	str	r3, [r2, #0]
 800f672:	e013      	b.n	800f69c <tcp_process+0x744>
 800f674:	4b2f      	ldr	r3, [pc, #188]	; (800f734 <tcp_process+0x7dc>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	60fb      	str	r3, [r7, #12]
 800f67a:	e00c      	b.n	800f696 <tcp_process+0x73e>
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	68db      	ldr	r3, [r3, #12]
 800f680:	687a      	ldr	r2, [r7, #4]
 800f682:	429a      	cmp	r2, r3
 800f684:	d104      	bne.n	800f690 <tcp_process+0x738>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	68da      	ldr	r2, [r3, #12]
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	60da      	str	r2, [r3, #12]
 800f68e:	e005      	b.n	800f69c <tcp_process+0x744>
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	68db      	ldr	r3, [r3, #12]
 800f694:	60fb      	str	r3, [r7, #12]
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d1ef      	bne.n	800f67c <tcp_process+0x724>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	60da      	str	r2, [r3, #12]
 800f6a2:	4b1f      	ldr	r3, [pc, #124]	; (800f720 <tcp_process+0x7c8>)
 800f6a4:	2201      	movs	r2, #1
 800f6a6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	220a      	movs	r2, #10
 800f6ac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f6ae:	4b1d      	ldr	r3, [pc, #116]	; (800f724 <tcp_process+0x7cc>)
 800f6b0:	681a      	ldr	r2, [r3, #0]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	60da      	str	r2, [r3, #12]
 800f6b6:	4a1b      	ldr	r2, [pc, #108]	; (800f724 <tcp_process+0x7cc>)
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6013      	str	r3, [r2, #0]
 800f6bc:	f002 fc46 	bl	8011f4c <tcp_timer_needed>
      }
      break;
 800f6c0:	e026      	b.n	800f710 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f000 f93c 	bl	800f940 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f6c8:	4b17      	ldr	r3, [pc, #92]	; (800f728 <tcp_process+0x7d0>)
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	f003 0310 	and.w	r3, r3, #16
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d01f      	beq.n	800f714 <tcp_process+0x7bc>
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f6d8:	4b14      	ldr	r3, [pc, #80]	; (800f72c <tcp_process+0x7d4>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d119      	bne.n	800f714 <tcp_process+0x7bc>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d115      	bne.n	800f714 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f6e8:	4b11      	ldr	r3, [pc, #68]	; (800f730 <tcp_process+0x7d8>)
 800f6ea:	781b      	ldrb	r3, [r3, #0]
 800f6ec:	f043 0310 	orr.w	r3, r3, #16
 800f6f0:	b2da      	uxtb	r2, r3
 800f6f2:	4b0f      	ldr	r3, [pc, #60]	; (800f730 <tcp_process+0x7d8>)
 800f6f4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f6f6:	e00d      	b.n	800f714 <tcp_process+0x7bc>
    default:
      break;
 800f6f8:	bf00      	nop
 800f6fa:	e00c      	b.n	800f716 <tcp_process+0x7be>
      break;
 800f6fc:	bf00      	nop
 800f6fe:	e00a      	b.n	800f716 <tcp_process+0x7be>
      break;
 800f700:	bf00      	nop
 800f702:	e008      	b.n	800f716 <tcp_process+0x7be>
      break;
 800f704:	bf00      	nop
 800f706:	e006      	b.n	800f716 <tcp_process+0x7be>
      break;
 800f708:	bf00      	nop
 800f70a:	e004      	b.n	800f716 <tcp_process+0x7be>
      break;
 800f70c:	bf00      	nop
 800f70e:	e002      	b.n	800f716 <tcp_process+0x7be>
      break;
 800f710:	bf00      	nop
 800f712:	e000      	b.n	800f716 <tcp_process+0x7be>
      break;
 800f714:	bf00      	nop
  }
  return ERR_OK;
 800f716:	2300      	movs	r3, #0
}
 800f718:	4618      	mov	r0, r3
 800f71a:	3724      	adds	r7, #36	; 0x24
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd90      	pop	{r4, r7, pc}
 800f720:	20006e38 	.word	0x20006e38
 800f724:	20006e4c 	.word	0x20006e4c
 800f728:	20000484 	.word	0x20000484
 800f72c:	2000047c 	.word	0x2000047c
 800f730:	20000485 	.word	0x20000485
 800f734:	20006e3c 	.word	0x20006e3c

0800f738 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f738:	b590      	push	{r4, r7, lr}
 800f73a:	b085      	sub	sp, #20
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d106      	bne.n	800f756 <tcp_oos_insert_segment+0x1e>
 800f748:	4b3b      	ldr	r3, [pc, #236]	; (800f838 <tcp_oos_insert_segment+0x100>)
 800f74a:	f240 421f 	movw	r2, #1055	; 0x41f
 800f74e:	493b      	ldr	r1, [pc, #236]	; (800f83c <tcp_oos_insert_segment+0x104>)
 800f750:	483b      	ldr	r0, [pc, #236]	; (800f840 <tcp_oos_insert_segment+0x108>)
 800f752:	f008 f885 	bl	8017860 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	68db      	ldr	r3, [r3, #12]
 800f75a:	899b      	ldrh	r3, [r3, #12]
 800f75c:	b29b      	uxth	r3, r3
 800f75e:	4618      	mov	r0, r3
 800f760:	f7fb fd64 	bl	800b22c <lwip_htons>
 800f764:	4603      	mov	r3, r0
 800f766:	b2db      	uxtb	r3, r3
 800f768:	f003 0301 	and.w	r3, r3, #1
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d028      	beq.n	800f7c2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f770:	6838      	ldr	r0, [r7, #0]
 800f772:	f7fe fa65 	bl	800dc40 <tcp_segs_free>
    next = NULL;
 800f776:	2300      	movs	r3, #0
 800f778:	603b      	str	r3, [r7, #0]
 800f77a:	e056      	b.n	800f82a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	68db      	ldr	r3, [r3, #12]
 800f780:	899b      	ldrh	r3, [r3, #12]
 800f782:	b29b      	uxth	r3, r3
 800f784:	4618      	mov	r0, r3
 800f786:	f7fb fd51 	bl	800b22c <lwip_htons>
 800f78a:	4603      	mov	r3, r0
 800f78c:	b2db      	uxtb	r3, r3
 800f78e:	f003 0301 	and.w	r3, r3, #1
 800f792:	2b00      	cmp	r3, #0
 800f794:	d00d      	beq.n	800f7b2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	68db      	ldr	r3, [r3, #12]
 800f79a:	899b      	ldrh	r3, [r3, #12]
 800f79c:	b29c      	uxth	r4, r3
 800f79e:	2001      	movs	r0, #1
 800f7a0:	f7fb fd44 	bl	800b22c <lwip_htons>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	461a      	mov	r2, r3
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	68db      	ldr	r3, [r3, #12]
 800f7ac:	4322      	orrs	r2, r4
 800f7ae:	b292      	uxth	r2, r2
 800f7b0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f7bc:	68f8      	ldr	r0, [r7, #12]
 800f7be:	f7fe fa54 	bl	800dc6a <tcp_seg_free>
    while (next &&
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d00e      	beq.n	800f7e6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	891b      	ldrh	r3, [r3, #8]
 800f7cc:	461a      	mov	r2, r3
 800f7ce:	4b1d      	ldr	r3, [pc, #116]	; (800f844 <tcp_oos_insert_segment+0x10c>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	441a      	add	r2, r3
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	68db      	ldr	r3, [r3, #12]
 800f7d8:	685b      	ldr	r3, [r3, #4]
 800f7da:	6839      	ldr	r1, [r7, #0]
 800f7dc:	8909      	ldrh	r1, [r1, #8]
 800f7de:	440b      	add	r3, r1
 800f7e0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	daca      	bge.n	800f77c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d01e      	beq.n	800f82a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	891b      	ldrh	r3, [r3, #8]
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	4b14      	ldr	r3, [pc, #80]	; (800f844 <tcp_oos_insert_segment+0x10c>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	441a      	add	r2, r3
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	68db      	ldr	r3, [r3, #12]
 800f7fc:	685b      	ldr	r3, [r3, #4]
 800f7fe:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f800:	2b00      	cmp	r3, #0
 800f802:	dd12      	ble.n	800f82a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	68db      	ldr	r3, [r3, #12]
 800f808:	685b      	ldr	r3, [r3, #4]
 800f80a:	b29a      	uxth	r2, r3
 800f80c:	4b0d      	ldr	r3, [pc, #52]	; (800f844 <tcp_oos_insert_segment+0x10c>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	b29b      	uxth	r3, r3
 800f812:	1ad3      	subs	r3, r2, r3
 800f814:	b29a      	uxth	r2, r3
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	685a      	ldr	r2, [r3, #4]
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	891b      	ldrh	r3, [r3, #8]
 800f822:	4619      	mov	r1, r3
 800f824:	4610      	mov	r0, r2
 800f826:	f7fc fe17 	bl	800c458 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	683a      	ldr	r2, [r7, #0]
 800f82e:	601a      	str	r2, [r3, #0]
}
 800f830:	bf00      	nop
 800f832:	3714      	adds	r7, #20
 800f834:	46bd      	mov	sp, r7
 800f836:	bd90      	pop	{r4, r7, pc}
 800f838:	0801de64 	.word	0x0801de64
 800f83c:	0801e124 	.word	0x0801e124
 800f840:	0801deb0 	.word	0x0801deb0
 800f844:	20000478 	.word	0x20000478

0800f848 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f848:	b5b0      	push	{r4, r5, r7, lr}
 800f84a:	b086      	sub	sp, #24
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	60f8      	str	r0, [r7, #12]
 800f850:	60b9      	str	r1, [r7, #8]
 800f852:	607a      	str	r2, [r7, #4]
 800f854:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f856:	e03e      	b.n	800f8d6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f85c:	68bb      	ldr	r3, [r7, #8]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	4618      	mov	r0, r3
 800f868:	f7fd f804 	bl	800c874 <pbuf_clen>
 800f86c:	4603      	mov	r3, r0
 800f86e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f876:	8a7a      	ldrh	r2, [r7, #18]
 800f878:	429a      	cmp	r2, r3
 800f87a:	d906      	bls.n	800f88a <tcp_free_acked_segments+0x42>
 800f87c:	4b2a      	ldr	r3, [pc, #168]	; (800f928 <tcp_free_acked_segments+0xe0>)
 800f87e:	f240 4257 	movw	r2, #1111	; 0x457
 800f882:	492a      	ldr	r1, [pc, #168]	; (800f92c <tcp_free_acked_segments+0xe4>)
 800f884:	482a      	ldr	r0, [pc, #168]	; (800f930 <tcp_free_acked_segments+0xe8>)
 800f886:	f007 ffeb 	bl	8017860 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f890:	8a7b      	ldrh	r3, [r7, #18]
 800f892:	1ad3      	subs	r3, r2, r3
 800f894:	b29a      	uxth	r2, r3
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	891a      	ldrh	r2, [r3, #8]
 800f8a0:	4b24      	ldr	r3, [pc, #144]	; (800f934 <tcp_free_acked_segments+0xec>)
 800f8a2:	881b      	ldrh	r3, [r3, #0]
 800f8a4:	4413      	add	r3, r2
 800f8a6:	b29a      	uxth	r2, r3
 800f8a8:	4b22      	ldr	r3, [pc, #136]	; (800f934 <tcp_free_acked_segments+0xec>)
 800f8aa:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f8ac:	6978      	ldr	r0, [r7, #20]
 800f8ae:	f7fe f9dc 	bl	800dc6a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d00c      	beq.n	800f8d6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d109      	bne.n	800f8d6 <tcp_free_acked_segments+0x8e>
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d106      	bne.n	800f8d6 <tcp_free_acked_segments+0x8e>
 800f8c8:	4b17      	ldr	r3, [pc, #92]	; (800f928 <tcp_free_acked_segments+0xe0>)
 800f8ca:	f240 4261 	movw	r2, #1121	; 0x461
 800f8ce:	491a      	ldr	r1, [pc, #104]	; (800f938 <tcp_free_acked_segments+0xf0>)
 800f8d0:	4817      	ldr	r0, [pc, #92]	; (800f930 <tcp_free_acked_segments+0xe8>)
 800f8d2:	f007 ffc5 	bl	8017860 <iprintf>
  while (seg_list != NULL &&
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d020      	beq.n	800f91e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	68db      	ldr	r3, [r3, #12]
 800f8e0:	685b      	ldr	r3, [r3, #4]
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7fb fcb7 	bl	800b256 <lwip_htonl>
 800f8e8:	4604      	mov	r4, r0
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	891b      	ldrh	r3, [r3, #8]
 800f8ee:	461d      	mov	r5, r3
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	68db      	ldr	r3, [r3, #12]
 800f8f4:	899b      	ldrh	r3, [r3, #12]
 800f8f6:	b29b      	uxth	r3, r3
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7fb fc97 	bl	800b22c <lwip_htons>
 800f8fe:	4603      	mov	r3, r0
 800f900:	b2db      	uxtb	r3, r3
 800f902:	f003 0303 	and.w	r3, r3, #3
 800f906:	2b00      	cmp	r3, #0
 800f908:	d001      	beq.n	800f90e <tcp_free_acked_segments+0xc6>
 800f90a:	2301      	movs	r3, #1
 800f90c:	e000      	b.n	800f910 <tcp_free_acked_segments+0xc8>
 800f90e:	2300      	movs	r3, #0
 800f910:	442b      	add	r3, r5
 800f912:	18e2      	adds	r2, r4, r3
 800f914:	4b09      	ldr	r3, [pc, #36]	; (800f93c <tcp_free_acked_segments+0xf4>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	dd9c      	ble.n	800f858 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f91e:	68bb      	ldr	r3, [r7, #8]
}
 800f920:	4618      	mov	r0, r3
 800f922:	3718      	adds	r7, #24
 800f924:	46bd      	mov	sp, r7
 800f926:	bdb0      	pop	{r4, r5, r7, pc}
 800f928:	0801de64 	.word	0x0801de64
 800f92c:	0801e14c 	.word	0x0801e14c
 800f930:	0801deb0 	.word	0x0801deb0
 800f934:	20000480 	.word	0x20000480
 800f938:	0801e174 	.word	0x0801e174
 800f93c:	2000047c 	.word	0x2000047c

0800f940 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f940:	b5b0      	push	{r4, r5, r7, lr}
 800f942:	b094      	sub	sp, #80	; 0x50
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f948:	2300      	movs	r3, #0
 800f94a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d106      	bne.n	800f960 <tcp_receive+0x20>
 800f952:	4ba6      	ldr	r3, [pc, #664]	; (800fbec <tcp_receive+0x2ac>)
 800f954:	f240 427b 	movw	r2, #1147	; 0x47b
 800f958:	49a5      	ldr	r1, [pc, #660]	; (800fbf0 <tcp_receive+0x2b0>)
 800f95a:	48a6      	ldr	r0, [pc, #664]	; (800fbf4 <tcp_receive+0x2b4>)
 800f95c:	f007 ff80 	bl	8017860 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	7d1b      	ldrb	r3, [r3, #20]
 800f964:	2b03      	cmp	r3, #3
 800f966:	d806      	bhi.n	800f976 <tcp_receive+0x36>
 800f968:	4ba0      	ldr	r3, [pc, #640]	; (800fbec <tcp_receive+0x2ac>)
 800f96a:	f240 427c 	movw	r2, #1148	; 0x47c
 800f96e:	49a2      	ldr	r1, [pc, #648]	; (800fbf8 <tcp_receive+0x2b8>)
 800f970:	48a0      	ldr	r0, [pc, #640]	; (800fbf4 <tcp_receive+0x2b4>)
 800f972:	f007 ff75 	bl	8017860 <iprintf>

  if (flags & TCP_ACK) {
 800f976:	4ba1      	ldr	r3, [pc, #644]	; (800fbfc <tcp_receive+0x2bc>)
 800f978:	781b      	ldrb	r3, [r3, #0]
 800f97a:	f003 0310 	and.w	r3, r3, #16
 800f97e:	2b00      	cmp	r3, #0
 800f980:	f000 8263 	beq.w	800fe4a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f98a:	461a      	mov	r2, r3
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f990:	4413      	add	r3, r2
 800f992:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f998:	4b99      	ldr	r3, [pc, #612]	; (800fc00 <tcp_receive+0x2c0>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	1ad3      	subs	r3, r2, r3
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	db1b      	blt.n	800f9da <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f9a6:	4b96      	ldr	r3, [pc, #600]	; (800fc00 <tcp_receive+0x2c0>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	d106      	bne.n	800f9bc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f9b2:	4b94      	ldr	r3, [pc, #592]	; (800fc04 <tcp_receive+0x2c4>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	1ad3      	subs	r3, r2, r3
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	db0e      	blt.n	800f9da <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f9c0:	4b90      	ldr	r3, [pc, #576]	; (800fc04 <tcp_receive+0x2c4>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d125      	bne.n	800fa14 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f9c8:	4b8f      	ldr	r3, [pc, #572]	; (800fc08 <tcp_receive+0x2c8>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	89db      	ldrh	r3, [r3, #14]
 800f9ce:	b29a      	uxth	r2, r3
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	d91c      	bls.n	800fa14 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f9da:	4b8b      	ldr	r3, [pc, #556]	; (800fc08 <tcp_receive+0x2c8>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	89db      	ldrh	r3, [r3, #14]
 800f9e0:	b29a      	uxth	r2, r3
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	d205      	bcs.n	800fa04 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800fa04:	4b7e      	ldr	r3, [pc, #504]	; (800fc00 <tcp_receive+0x2c0>)
 800fa06:	681a      	ldr	r2, [r3, #0]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800fa0c:	4b7d      	ldr	r3, [pc, #500]	; (800fc04 <tcp_receive+0x2c4>)
 800fa0e:	681a      	ldr	r2, [r3, #0]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800fa14:	4b7b      	ldr	r3, [pc, #492]	; (800fc04 <tcp_receive+0x2c4>)
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa1c:	1ad3      	subs	r3, r2, r3
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	dc58      	bgt.n	800fad4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800fa22:	4b7a      	ldr	r3, [pc, #488]	; (800fc0c <tcp_receive+0x2cc>)
 800fa24:	881b      	ldrh	r3, [r3, #0]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d14b      	bne.n	800fac2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa2e:	687a      	ldr	r2, [r7, #4]
 800fa30:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800fa34:	4413      	add	r3, r2
 800fa36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	d142      	bne.n	800fac2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	db3d      	blt.n	800fac2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa4a:	4b6e      	ldr	r3, [pc, #440]	; (800fc04 <tcp_receive+0x2c4>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	d137      	bne.n	800fac2 <tcp_receive+0x182>
              found_dupack = 1;
 800fa52:	2301      	movs	r3, #1
 800fa54:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa5c:	2bff      	cmp	r3, #255	; 0xff
 800fa5e:	d007      	beq.n	800fa70 <tcp_receive+0x130>
                ++pcb->dupacks;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa66:	3301      	adds	r3, #1
 800fa68:	b2da      	uxtb	r2, r3
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa76:	2b03      	cmp	r3, #3
 800fa78:	d91b      	bls.n	800fab2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa84:	4413      	add	r3, r2
 800fa86:	b29a      	uxth	r2, r3
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d30a      	bcc.n	800faa8 <tcp_receive+0x168>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa9c:	4413      	add	r3, r2
 800fa9e:	b29a      	uxth	r2, r3
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800faa6:	e004      	b.n	800fab2 <tcp_receive+0x172>
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800faae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fab8:	2b02      	cmp	r3, #2
 800faba:	d902      	bls.n	800fac2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f001 fee9 	bl	8011894 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	f040 8160 	bne.w	800fd8a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2200      	movs	r2, #0
 800face:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fad2:	e15a      	b.n	800fd8a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fad4:	4b4b      	ldr	r3, [pc, #300]	; (800fc04 <tcp_receive+0x2c4>)
 800fad6:	681a      	ldr	r2, [r3, #0]
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fadc:	1ad3      	subs	r3, r2, r3
 800fade:	3b01      	subs	r3, #1
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	f2c0 814d 	blt.w	800fd80 <tcp_receive+0x440>
 800fae6:	4b47      	ldr	r3, [pc, #284]	; (800fc04 <tcp_receive+0x2c4>)
 800fae8:	681a      	ldr	r2, [r3, #0]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800faee:	1ad3      	subs	r3, r2, r3
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	f300 8145 	bgt.w	800fd80 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	8b5b      	ldrh	r3, [r3, #26]
 800fafa:	f003 0304 	and.w	r3, r3, #4
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d010      	beq.n	800fb24 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	8b5b      	ldrh	r3, [r3, #26]
 800fb06:	f023 0304 	bic.w	r3, r3, #4
 800fb0a:	b29a      	uxth	r2, r3
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2200      	movs	r2, #0
 800fb20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2200      	movs	r2, #0
 800fb28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fb32:	10db      	asrs	r3, r3, #3
 800fb34:	b21b      	sxth	r3, r3
 800fb36:	b29a      	uxth	r2, r3
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fb3e:	b29b      	uxth	r3, r3
 800fb40:	4413      	add	r3, r2
 800fb42:	b29b      	uxth	r3, r3
 800fb44:	b21a      	sxth	r2, r3
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800fb4c:	4b2d      	ldr	r3, [pc, #180]	; (800fc04 <tcp_receive+0x2c4>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	b29a      	uxth	r2, r3
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb56:	b29b      	uxth	r3, r3
 800fb58:	1ad3      	subs	r3, r2, r3
 800fb5a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800fb64:	4b27      	ldr	r3, [pc, #156]	; (800fc04 <tcp_receive+0x2c4>)
 800fb66:	681a      	ldr	r2, [r3, #0]
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	7d1b      	ldrb	r3, [r3, #20]
 800fb70:	2b03      	cmp	r3, #3
 800fb72:	f240 8096 	bls.w	800fca2 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fb82:	429a      	cmp	r2, r3
 800fb84:	d244      	bcs.n	800fc10 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	8b5b      	ldrh	r3, [r3, #26]
 800fb8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d001      	beq.n	800fb96 <tcp_receive+0x256>
 800fb92:	2301      	movs	r3, #1
 800fb94:	e000      	b.n	800fb98 <tcp_receive+0x258>
 800fb96:	2302      	movs	r3, #2
 800fb98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800fb9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fba0:	b29a      	uxth	r2, r3
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fba6:	fb12 f303 	smulbb	r3, r2, r3
 800fbaa:	b29b      	uxth	r3, r3
 800fbac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	bf28      	it	cs
 800fbb2:	4613      	movcs	r3, r2
 800fbb4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fbbc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fbbe:	4413      	add	r3, r2
 800fbc0:	b29a      	uxth	r2, r3
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fbc8:	429a      	cmp	r2, r3
 800fbca:	d309      	bcc.n	800fbe0 <tcp_receive+0x2a0>
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fbd2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fbd4:	4413      	add	r3, r2
 800fbd6:	b29a      	uxth	r2, r3
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fbde:	e060      	b.n	800fca2 <tcp_receive+0x362>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbe6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fbea:	e05a      	b.n	800fca2 <tcp_receive+0x362>
 800fbec:	0801de64 	.word	0x0801de64
 800fbf0:	0801e194 	.word	0x0801e194
 800fbf4:	0801deb0 	.word	0x0801deb0
 800fbf8:	0801e1b0 	.word	0x0801e1b0
 800fbfc:	20000484 	.word	0x20000484
 800fc00:	20000478 	.word	0x20000478
 800fc04:	2000047c 	.word	0x2000047c
 800fc08:	20000468 	.word	0x20000468
 800fc0c:	20000482 	.word	0x20000482
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fc18:	4413      	add	r3, r2
 800fc1a:	b29a      	uxth	r2, r3
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d309      	bcc.n	800fc3a <tcp_receive+0x2fa>
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fc2e:	4413      	add	r3, r2
 800fc30:	b29a      	uxth	r2, r3
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fc38:	e004      	b.n	800fc44 <tcp_receive+0x304>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d326      	bcc.n	800fca2 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc60:	1ad3      	subs	r3, r2, r3
 800fc62:	b29a      	uxth	r2, r3
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc74:	4413      	add	r3, r2
 800fc76:	b29a      	uxth	r2, r3
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d30a      	bcc.n	800fc98 <tcp_receive+0x358>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc8c:	4413      	add	r3, r2
 800fc8e:	b29a      	uxth	r2, r3
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fc96:	e004      	b.n	800fca2 <tcp_receive+0x362>
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcaa:	4a98      	ldr	r2, [pc, #608]	; (800ff0c <tcp_receive+0x5cc>)
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f7ff fdcb 	bl	800f848 <tcp_free_acked_segments>
 800fcb2:	4602      	mov	r2, r0
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcc0:	4a93      	ldr	r2, [pc, #588]	; (800ff10 <tcp_receive+0x5d0>)
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f7ff fdc0 	bl	800f848 <tcp_free_acked_segments>
 800fcc8:	4602      	mov	r2, r0
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d104      	bne.n	800fce0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcdc:	861a      	strh	r2, [r3, #48]	; 0x30
 800fcde:	e002      	b.n	800fce6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2200      	movs	r2, #0
 800fce4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2200      	movs	r2, #0
 800fcea:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d103      	bne.n	800fcfc <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800fd02:	4b84      	ldr	r3, [pc, #528]	; (800ff14 <tcp_receive+0x5d4>)
 800fd04:	881b      	ldrh	r3, [r3, #0]
 800fd06:	4413      	add	r3, r2
 800fd08:	b29a      	uxth	r2, r3
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	8b5b      	ldrh	r3, [r3, #26]
 800fd14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d035      	beq.n	800fd88 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d118      	bne.n	800fd56 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d00c      	beq.n	800fd46 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd34:	68db      	ldr	r3, [r3, #12]
 800fd36:	685b      	ldr	r3, [r3, #4]
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7fb fa8c 	bl	800b256 <lwip_htonl>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	dc20      	bgt.n	800fd88 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	8b5b      	ldrh	r3, [r3, #26]
 800fd4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd4e:	b29a      	uxth	r2, r3
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd54:	e018      	b.n	800fd88 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd5e:	68db      	ldr	r3, [r3, #12]
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	4618      	mov	r0, r3
 800fd64:	f7fb fa77 	bl	800b256 <lwip_htonl>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	1ae3      	subs	r3, r4, r3
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	dc0b      	bgt.n	800fd88 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	8b5b      	ldrh	r3, [r3, #26]
 800fd74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd78:	b29a      	uxth	r2, r3
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd7e:	e003      	b.n	800fd88 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f001 ff73 	bl	8011c6c <tcp_send_empty_ack>
 800fd86:	e000      	b.n	800fd8a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd88:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d05b      	beq.n	800fe4a <tcp_receive+0x50a>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd96:	4b60      	ldr	r3, [pc, #384]	; (800ff18 <tcp_receive+0x5d8>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	1ad3      	subs	r3, r2, r3
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	da54      	bge.n	800fe4a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fda0:	4b5e      	ldr	r3, [pc, #376]	; (800ff1c <tcp_receive+0x5dc>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	b29a      	uxth	r2, r3
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdaa:	b29b      	uxth	r3, r3
 800fdac:	1ad3      	subs	r3, r2, r3
 800fdae:	b29b      	uxth	r3, r3
 800fdb0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800fdb4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fdbe:	10db      	asrs	r3, r3, #3
 800fdc0:	b21b      	sxth	r3, r3
 800fdc2:	b29b      	uxth	r3, r3
 800fdc4:	1ad3      	subs	r3, r2, r3
 800fdc6:	b29b      	uxth	r3, r3
 800fdc8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fdd2:	b29a      	uxth	r2, r3
 800fdd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fdd8:	4413      	add	r3, r2
 800fdda:	b29b      	uxth	r3, r3
 800fddc:	b21a      	sxth	r2, r3
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800fde2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	da05      	bge.n	800fdf6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800fdea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fdee:	425b      	negs	r3, r3
 800fdf0:	b29b      	uxth	r3, r3
 800fdf2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fdf6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe00:	109b      	asrs	r3, r3, #2
 800fe02:	b21b      	sxth	r3, r3
 800fe04:	b29b      	uxth	r3, r3
 800fe06:	1ad3      	subs	r3, r2, r3
 800fe08:	b29b      	uxth	r3, r3
 800fe0a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe14:	b29a      	uxth	r2, r3
 800fe16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fe1a:	4413      	add	r3, r2
 800fe1c:	b29b      	uxth	r3, r3
 800fe1e:	b21a      	sxth	r2, r3
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fe2a:	10db      	asrs	r3, r3, #3
 800fe2c:	b21b      	sxth	r3, r3
 800fe2e:	b29a      	uxth	r2, r3
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe36:	b29b      	uxth	r3, r3
 800fe38:	4413      	add	r3, r2
 800fe3a:	b29b      	uxth	r3, r3
 800fe3c:	b21a      	sxth	r2, r3
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2200      	movs	r2, #0
 800fe48:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fe4a:	4b35      	ldr	r3, [pc, #212]	; (800ff20 <tcp_receive+0x5e0>)
 800fe4c:	881b      	ldrh	r3, [r3, #0]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	f000 84e1 	beq.w	8010816 <tcp_receive+0xed6>
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	7d1b      	ldrb	r3, [r3, #20]
 800fe58:	2b06      	cmp	r3, #6
 800fe5a:	f200 84dc 	bhi.w	8010816 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe62:	4b30      	ldr	r3, [pc, #192]	; (800ff24 <tcp_receive+0x5e4>)
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	1ad3      	subs	r3, r2, r3
 800fe68:	3b01      	subs	r3, #1
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	f2c0 808e 	blt.w	800ff8c <tcp_receive+0x64c>
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe74:	4b2a      	ldr	r3, [pc, #168]	; (800ff20 <tcp_receive+0x5e0>)
 800fe76:	881b      	ldrh	r3, [r3, #0]
 800fe78:	4619      	mov	r1, r3
 800fe7a:	4b2a      	ldr	r3, [pc, #168]	; (800ff24 <tcp_receive+0x5e4>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	440b      	add	r3, r1
 800fe80:	1ad3      	subs	r3, r2, r3
 800fe82:	3301      	adds	r3, #1
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	f300 8081 	bgt.w	800ff8c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fe8a:	4b27      	ldr	r3, [pc, #156]	; (800ff28 <tcp_receive+0x5e8>)
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe94:	4b23      	ldr	r3, [pc, #140]	; (800ff24 <tcp_receive+0x5e4>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	1ad3      	subs	r3, r2, r3
 800fe9a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fe9c:	4b22      	ldr	r3, [pc, #136]	; (800ff28 <tcp_receive+0x5e8>)
 800fe9e:	685b      	ldr	r3, [r3, #4]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d106      	bne.n	800feb2 <tcp_receive+0x572>
 800fea4:	4b21      	ldr	r3, [pc, #132]	; (800ff2c <tcp_receive+0x5ec>)
 800fea6:	f240 5294 	movw	r2, #1428	; 0x594
 800feaa:	4921      	ldr	r1, [pc, #132]	; (800ff30 <tcp_receive+0x5f0>)
 800feac:	4821      	ldr	r0, [pc, #132]	; (800ff34 <tcp_receive+0x5f4>)
 800feae:	f007 fcd7 	bl	8017860 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800feb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feb4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800feb8:	4293      	cmp	r3, r2
 800feba:	d906      	bls.n	800feca <tcp_receive+0x58a>
 800febc:	4b1b      	ldr	r3, [pc, #108]	; (800ff2c <tcp_receive+0x5ec>)
 800febe:	f240 5295 	movw	r2, #1429	; 0x595
 800fec2:	491d      	ldr	r1, [pc, #116]	; (800ff38 <tcp_receive+0x5f8>)
 800fec4:	481b      	ldr	r0, [pc, #108]	; (800ff34 <tcp_receive+0x5f4>)
 800fec6:	f007 fccb 	bl	8017860 <iprintf>
      off = (u16_t)off32;
 800feca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fecc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fed0:	4b15      	ldr	r3, [pc, #84]	; (800ff28 <tcp_receive+0x5e8>)
 800fed2:	685b      	ldr	r3, [r3, #4]
 800fed4:	891b      	ldrh	r3, [r3, #8]
 800fed6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800feda:	429a      	cmp	r2, r3
 800fedc:	d906      	bls.n	800feec <tcp_receive+0x5ac>
 800fede:	4b13      	ldr	r3, [pc, #76]	; (800ff2c <tcp_receive+0x5ec>)
 800fee0:	f240 5297 	movw	r2, #1431	; 0x597
 800fee4:	4915      	ldr	r1, [pc, #84]	; (800ff3c <tcp_receive+0x5fc>)
 800fee6:	4813      	ldr	r0, [pc, #76]	; (800ff34 <tcp_receive+0x5f4>)
 800fee8:	f007 fcba 	bl	8017860 <iprintf>
      inseg.len -= off;
 800feec:	4b0e      	ldr	r3, [pc, #56]	; (800ff28 <tcp_receive+0x5e8>)
 800feee:	891a      	ldrh	r2, [r3, #8]
 800fef0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fef4:	1ad3      	subs	r3, r2, r3
 800fef6:	b29a      	uxth	r2, r3
 800fef8:	4b0b      	ldr	r3, [pc, #44]	; (800ff28 <tcp_receive+0x5e8>)
 800fefa:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fefc:	4b0a      	ldr	r3, [pc, #40]	; (800ff28 <tcp_receive+0x5e8>)
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	891a      	ldrh	r2, [r3, #8]
 800ff02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ff06:	1ad3      	subs	r3, r2, r3
 800ff08:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ff0a:	e029      	b.n	800ff60 <tcp_receive+0x620>
 800ff0c:	0801e1cc 	.word	0x0801e1cc
 800ff10:	0801e1d4 	.word	0x0801e1d4
 800ff14:	20000480 	.word	0x20000480
 800ff18:	2000047c 	.word	0x2000047c
 800ff1c:	20006e40 	.word	0x20006e40
 800ff20:	20000482 	.word	0x20000482
 800ff24:	20000478 	.word	0x20000478
 800ff28:	20000458 	.word	0x20000458
 800ff2c:	0801de64 	.word	0x0801de64
 800ff30:	0801e1dc 	.word	0x0801e1dc
 800ff34:	0801deb0 	.word	0x0801deb0
 800ff38:	0801e1ec 	.word	0x0801e1ec
 800ff3c:	0801e1fc 	.word	0x0801e1fc
        off -= p->len;
 800ff40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff42:	895b      	ldrh	r3, [r3, #10]
 800ff44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ff48:	1ad3      	subs	r3, r2, r3
 800ff4a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ff4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff50:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ff52:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ff54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff56:	2200      	movs	r2, #0
 800ff58:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ff5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ff60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff62:	895b      	ldrh	r3, [r3, #10]
 800ff64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	d8e9      	bhi.n	800ff40 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ff6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ff70:	4619      	mov	r1, r3
 800ff72:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ff74:	f7fc fb70 	bl	800c658 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff7c:	4a91      	ldr	r2, [pc, #580]	; (80101c4 <tcp_receive+0x884>)
 800ff7e:	6013      	str	r3, [r2, #0]
 800ff80:	4b91      	ldr	r3, [pc, #580]	; (80101c8 <tcp_receive+0x888>)
 800ff82:	68db      	ldr	r3, [r3, #12]
 800ff84:	4a8f      	ldr	r2, [pc, #572]	; (80101c4 <tcp_receive+0x884>)
 800ff86:	6812      	ldr	r2, [r2, #0]
 800ff88:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ff8a:	e00d      	b.n	800ffa8 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ff8c:	4b8d      	ldr	r3, [pc, #564]	; (80101c4 <tcp_receive+0x884>)
 800ff8e:	681a      	ldr	r2, [r3, #0]
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff94:	1ad3      	subs	r3, r2, r3
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	da06      	bge.n	800ffa8 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	8b5b      	ldrh	r3, [r3, #26]
 800ff9e:	f043 0302 	orr.w	r3, r3, #2
 800ffa2:	b29a      	uxth	r2, r3
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ffa8:	4b86      	ldr	r3, [pc, #536]	; (80101c4 <tcp_receive+0x884>)
 800ffaa:	681a      	ldr	r2, [r3, #0]
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb0:	1ad3      	subs	r3, r2, r3
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	f2c0 842a 	blt.w	801080c <tcp_receive+0xecc>
 800ffb8:	4b82      	ldr	r3, [pc, #520]	; (80101c4 <tcp_receive+0x884>)
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc0:	6879      	ldr	r1, [r7, #4]
 800ffc2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ffc4:	440b      	add	r3, r1
 800ffc6:	1ad3      	subs	r3, r2, r3
 800ffc8:	3301      	adds	r3, #1
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	f300 841e 	bgt.w	801080c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffd4:	4b7b      	ldr	r3, [pc, #492]	; (80101c4 <tcp_receive+0x884>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	f040 829a 	bne.w	8010512 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ffde:	4b7a      	ldr	r3, [pc, #488]	; (80101c8 <tcp_receive+0x888>)
 800ffe0:	891c      	ldrh	r4, [r3, #8]
 800ffe2:	4b79      	ldr	r3, [pc, #484]	; (80101c8 <tcp_receive+0x888>)
 800ffe4:	68db      	ldr	r3, [r3, #12]
 800ffe6:	899b      	ldrh	r3, [r3, #12]
 800ffe8:	b29b      	uxth	r3, r3
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7fb f91e 	bl	800b22c <lwip_htons>
 800fff0:	4603      	mov	r3, r0
 800fff2:	b2db      	uxtb	r3, r3
 800fff4:	f003 0303 	and.w	r3, r3, #3
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d001      	beq.n	8010000 <tcp_receive+0x6c0>
 800fffc:	2301      	movs	r3, #1
 800fffe:	e000      	b.n	8010002 <tcp_receive+0x6c2>
 8010000:	2300      	movs	r3, #0
 8010002:	4423      	add	r3, r4
 8010004:	b29a      	uxth	r2, r3
 8010006:	4b71      	ldr	r3, [pc, #452]	; (80101cc <tcp_receive+0x88c>)
 8010008:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801000e:	4b6f      	ldr	r3, [pc, #444]	; (80101cc <tcp_receive+0x88c>)
 8010010:	881b      	ldrh	r3, [r3, #0]
 8010012:	429a      	cmp	r2, r3
 8010014:	d275      	bcs.n	8010102 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010016:	4b6c      	ldr	r3, [pc, #432]	; (80101c8 <tcp_receive+0x888>)
 8010018:	68db      	ldr	r3, [r3, #12]
 801001a:	899b      	ldrh	r3, [r3, #12]
 801001c:	b29b      	uxth	r3, r3
 801001e:	4618      	mov	r0, r3
 8010020:	f7fb f904 	bl	800b22c <lwip_htons>
 8010024:	4603      	mov	r3, r0
 8010026:	b2db      	uxtb	r3, r3
 8010028:	f003 0301 	and.w	r3, r3, #1
 801002c:	2b00      	cmp	r3, #0
 801002e:	d01f      	beq.n	8010070 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010030:	4b65      	ldr	r3, [pc, #404]	; (80101c8 <tcp_receive+0x888>)
 8010032:	68db      	ldr	r3, [r3, #12]
 8010034:	899b      	ldrh	r3, [r3, #12]
 8010036:	b29b      	uxth	r3, r3
 8010038:	b21b      	sxth	r3, r3
 801003a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801003e:	b21c      	sxth	r4, r3
 8010040:	4b61      	ldr	r3, [pc, #388]	; (80101c8 <tcp_receive+0x888>)
 8010042:	68db      	ldr	r3, [r3, #12]
 8010044:	899b      	ldrh	r3, [r3, #12]
 8010046:	b29b      	uxth	r3, r3
 8010048:	4618      	mov	r0, r3
 801004a:	f7fb f8ef 	bl	800b22c <lwip_htons>
 801004e:	4603      	mov	r3, r0
 8010050:	b2db      	uxtb	r3, r3
 8010052:	b29b      	uxth	r3, r3
 8010054:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010058:	b29b      	uxth	r3, r3
 801005a:	4618      	mov	r0, r3
 801005c:	f7fb f8e6 	bl	800b22c <lwip_htons>
 8010060:	4603      	mov	r3, r0
 8010062:	b21b      	sxth	r3, r3
 8010064:	4323      	orrs	r3, r4
 8010066:	b21a      	sxth	r2, r3
 8010068:	4b57      	ldr	r3, [pc, #348]	; (80101c8 <tcp_receive+0x888>)
 801006a:	68db      	ldr	r3, [r3, #12]
 801006c:	b292      	uxth	r2, r2
 801006e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010074:	4b54      	ldr	r3, [pc, #336]	; (80101c8 <tcp_receive+0x888>)
 8010076:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010078:	4b53      	ldr	r3, [pc, #332]	; (80101c8 <tcp_receive+0x888>)
 801007a:	68db      	ldr	r3, [r3, #12]
 801007c:	899b      	ldrh	r3, [r3, #12]
 801007e:	b29b      	uxth	r3, r3
 8010080:	4618      	mov	r0, r3
 8010082:	f7fb f8d3 	bl	800b22c <lwip_htons>
 8010086:	4603      	mov	r3, r0
 8010088:	b2db      	uxtb	r3, r3
 801008a:	f003 0302 	and.w	r3, r3, #2
 801008e:	2b00      	cmp	r3, #0
 8010090:	d005      	beq.n	801009e <tcp_receive+0x75e>
            inseg.len -= 1;
 8010092:	4b4d      	ldr	r3, [pc, #308]	; (80101c8 <tcp_receive+0x888>)
 8010094:	891b      	ldrh	r3, [r3, #8]
 8010096:	3b01      	subs	r3, #1
 8010098:	b29a      	uxth	r2, r3
 801009a:	4b4b      	ldr	r3, [pc, #300]	; (80101c8 <tcp_receive+0x888>)
 801009c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801009e:	4b4a      	ldr	r3, [pc, #296]	; (80101c8 <tcp_receive+0x888>)
 80100a0:	685b      	ldr	r3, [r3, #4]
 80100a2:	4a49      	ldr	r2, [pc, #292]	; (80101c8 <tcp_receive+0x888>)
 80100a4:	8912      	ldrh	r2, [r2, #8]
 80100a6:	4611      	mov	r1, r2
 80100a8:	4618      	mov	r0, r3
 80100aa:	f7fc f9d5 	bl	800c458 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80100ae:	4b46      	ldr	r3, [pc, #280]	; (80101c8 <tcp_receive+0x888>)
 80100b0:	891c      	ldrh	r4, [r3, #8]
 80100b2:	4b45      	ldr	r3, [pc, #276]	; (80101c8 <tcp_receive+0x888>)
 80100b4:	68db      	ldr	r3, [r3, #12]
 80100b6:	899b      	ldrh	r3, [r3, #12]
 80100b8:	b29b      	uxth	r3, r3
 80100ba:	4618      	mov	r0, r3
 80100bc:	f7fb f8b6 	bl	800b22c <lwip_htons>
 80100c0:	4603      	mov	r3, r0
 80100c2:	b2db      	uxtb	r3, r3
 80100c4:	f003 0303 	and.w	r3, r3, #3
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d001      	beq.n	80100d0 <tcp_receive+0x790>
 80100cc:	2301      	movs	r3, #1
 80100ce:	e000      	b.n	80100d2 <tcp_receive+0x792>
 80100d0:	2300      	movs	r3, #0
 80100d2:	4423      	add	r3, r4
 80100d4:	b29a      	uxth	r2, r3
 80100d6:	4b3d      	ldr	r3, [pc, #244]	; (80101cc <tcp_receive+0x88c>)
 80100d8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80100da:	4b3c      	ldr	r3, [pc, #240]	; (80101cc <tcp_receive+0x88c>)
 80100dc:	881b      	ldrh	r3, [r3, #0]
 80100de:	461a      	mov	r2, r3
 80100e0:	4b38      	ldr	r3, [pc, #224]	; (80101c4 <tcp_receive+0x884>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	441a      	add	r2, r3
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ea:	6879      	ldr	r1, [r7, #4]
 80100ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80100ee:	440b      	add	r3, r1
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d006      	beq.n	8010102 <tcp_receive+0x7c2>
 80100f4:	4b36      	ldr	r3, [pc, #216]	; (80101d0 <tcp_receive+0x890>)
 80100f6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80100fa:	4936      	ldr	r1, [pc, #216]	; (80101d4 <tcp_receive+0x894>)
 80100fc:	4836      	ldr	r0, [pc, #216]	; (80101d8 <tcp_receive+0x898>)
 80100fe:	f007 fbaf 	bl	8017860 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010106:	2b00      	cmp	r3, #0
 8010108:	f000 80e7 	beq.w	80102da <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801010c:	4b2e      	ldr	r3, [pc, #184]	; (80101c8 <tcp_receive+0x888>)
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	899b      	ldrh	r3, [r3, #12]
 8010112:	b29b      	uxth	r3, r3
 8010114:	4618      	mov	r0, r3
 8010116:	f7fb f889 	bl	800b22c <lwip_htons>
 801011a:	4603      	mov	r3, r0
 801011c:	b2db      	uxtb	r3, r3
 801011e:	f003 0301 	and.w	r3, r3, #1
 8010122:	2b00      	cmp	r3, #0
 8010124:	d010      	beq.n	8010148 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010126:	e00a      	b.n	801013e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801012c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010132:	681a      	ldr	r2, [r3, #0]
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010138:	68f8      	ldr	r0, [r7, #12]
 801013a:	f7fd fd96 	bl	800dc6a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010142:	2b00      	cmp	r3, #0
 8010144:	d1f0      	bne.n	8010128 <tcp_receive+0x7e8>
 8010146:	e0c8      	b.n	80102da <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801014c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801014e:	e052      	b.n	80101f6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010152:	68db      	ldr	r3, [r3, #12]
 8010154:	899b      	ldrh	r3, [r3, #12]
 8010156:	b29b      	uxth	r3, r3
 8010158:	4618      	mov	r0, r3
 801015a:	f7fb f867 	bl	800b22c <lwip_htons>
 801015e:	4603      	mov	r3, r0
 8010160:	b2db      	uxtb	r3, r3
 8010162:	f003 0301 	and.w	r3, r3, #1
 8010166:	2b00      	cmp	r3, #0
 8010168:	d03d      	beq.n	80101e6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801016a:	4b17      	ldr	r3, [pc, #92]	; (80101c8 <tcp_receive+0x888>)
 801016c:	68db      	ldr	r3, [r3, #12]
 801016e:	899b      	ldrh	r3, [r3, #12]
 8010170:	b29b      	uxth	r3, r3
 8010172:	4618      	mov	r0, r3
 8010174:	f7fb f85a 	bl	800b22c <lwip_htons>
 8010178:	4603      	mov	r3, r0
 801017a:	b2db      	uxtb	r3, r3
 801017c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010180:	2b00      	cmp	r3, #0
 8010182:	d130      	bne.n	80101e6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010184:	4b10      	ldr	r3, [pc, #64]	; (80101c8 <tcp_receive+0x888>)
 8010186:	68db      	ldr	r3, [r3, #12]
 8010188:	899b      	ldrh	r3, [r3, #12]
 801018a:	b29c      	uxth	r4, r3
 801018c:	2001      	movs	r0, #1
 801018e:	f7fb f84d 	bl	800b22c <lwip_htons>
 8010192:	4603      	mov	r3, r0
 8010194:	461a      	mov	r2, r3
 8010196:	4b0c      	ldr	r3, [pc, #48]	; (80101c8 <tcp_receive+0x888>)
 8010198:	68db      	ldr	r3, [r3, #12]
 801019a:	4322      	orrs	r2, r4
 801019c:	b292      	uxth	r2, r2
 801019e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80101a0:	4b09      	ldr	r3, [pc, #36]	; (80101c8 <tcp_receive+0x888>)
 80101a2:	891c      	ldrh	r4, [r3, #8]
 80101a4:	4b08      	ldr	r3, [pc, #32]	; (80101c8 <tcp_receive+0x888>)
 80101a6:	68db      	ldr	r3, [r3, #12]
 80101a8:	899b      	ldrh	r3, [r3, #12]
 80101aa:	b29b      	uxth	r3, r3
 80101ac:	4618      	mov	r0, r3
 80101ae:	f7fb f83d 	bl	800b22c <lwip_htons>
 80101b2:	4603      	mov	r3, r0
 80101b4:	b2db      	uxtb	r3, r3
 80101b6:	f003 0303 	and.w	r3, r3, #3
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d00e      	beq.n	80101dc <tcp_receive+0x89c>
 80101be:	2301      	movs	r3, #1
 80101c0:	e00d      	b.n	80101de <tcp_receive+0x89e>
 80101c2:	bf00      	nop
 80101c4:	20000478 	.word	0x20000478
 80101c8:	20000458 	.word	0x20000458
 80101cc:	20000482 	.word	0x20000482
 80101d0:	0801de64 	.word	0x0801de64
 80101d4:	0801e20c 	.word	0x0801e20c
 80101d8:	0801deb0 	.word	0x0801deb0
 80101dc:	2300      	movs	r3, #0
 80101de:	4423      	add	r3, r4
 80101e0:	b29a      	uxth	r2, r3
 80101e2:	4b98      	ldr	r3, [pc, #608]	; (8010444 <tcp_receive+0xb04>)
 80101e4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80101e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101e8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80101ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80101f0:	6938      	ldr	r0, [r7, #16]
 80101f2:	f7fd fd3a 	bl	800dc6a <tcp_seg_free>
            while (next &&
 80101f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d00e      	beq.n	801021a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80101fc:	4b91      	ldr	r3, [pc, #580]	; (8010444 <tcp_receive+0xb04>)
 80101fe:	881b      	ldrh	r3, [r3, #0]
 8010200:	461a      	mov	r2, r3
 8010202:	4b91      	ldr	r3, [pc, #580]	; (8010448 <tcp_receive+0xb08>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	441a      	add	r2, r3
 8010208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801020a:	68db      	ldr	r3, [r3, #12]
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010210:	8909      	ldrh	r1, [r1, #8]
 8010212:	440b      	add	r3, r1
 8010214:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010216:	2b00      	cmp	r3, #0
 8010218:	da9a      	bge.n	8010150 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801021a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801021c:	2b00      	cmp	r3, #0
 801021e:	d059      	beq.n	80102d4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010220:	4b88      	ldr	r3, [pc, #544]	; (8010444 <tcp_receive+0xb04>)
 8010222:	881b      	ldrh	r3, [r3, #0]
 8010224:	461a      	mov	r2, r3
 8010226:	4b88      	ldr	r3, [pc, #544]	; (8010448 <tcp_receive+0xb08>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	441a      	add	r2, r3
 801022c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801022e:	68db      	ldr	r3, [r3, #12]
 8010230:	685b      	ldr	r3, [r3, #4]
 8010232:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010234:	2b00      	cmp	r3, #0
 8010236:	dd4d      	ble.n	80102d4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801023a:	68db      	ldr	r3, [r3, #12]
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	b29a      	uxth	r2, r3
 8010240:	4b81      	ldr	r3, [pc, #516]	; (8010448 <tcp_receive+0xb08>)
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	b29b      	uxth	r3, r3
 8010246:	1ad3      	subs	r3, r2, r3
 8010248:	b29a      	uxth	r2, r3
 801024a:	4b80      	ldr	r3, [pc, #512]	; (801044c <tcp_receive+0xb0c>)
 801024c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801024e:	4b7f      	ldr	r3, [pc, #508]	; (801044c <tcp_receive+0xb0c>)
 8010250:	68db      	ldr	r3, [r3, #12]
 8010252:	899b      	ldrh	r3, [r3, #12]
 8010254:	b29b      	uxth	r3, r3
 8010256:	4618      	mov	r0, r3
 8010258:	f7fa ffe8 	bl	800b22c <lwip_htons>
 801025c:	4603      	mov	r3, r0
 801025e:	b2db      	uxtb	r3, r3
 8010260:	f003 0302 	and.w	r3, r3, #2
 8010264:	2b00      	cmp	r3, #0
 8010266:	d005      	beq.n	8010274 <tcp_receive+0x934>
                inseg.len -= 1;
 8010268:	4b78      	ldr	r3, [pc, #480]	; (801044c <tcp_receive+0xb0c>)
 801026a:	891b      	ldrh	r3, [r3, #8]
 801026c:	3b01      	subs	r3, #1
 801026e:	b29a      	uxth	r2, r3
 8010270:	4b76      	ldr	r3, [pc, #472]	; (801044c <tcp_receive+0xb0c>)
 8010272:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010274:	4b75      	ldr	r3, [pc, #468]	; (801044c <tcp_receive+0xb0c>)
 8010276:	685b      	ldr	r3, [r3, #4]
 8010278:	4a74      	ldr	r2, [pc, #464]	; (801044c <tcp_receive+0xb0c>)
 801027a:	8912      	ldrh	r2, [r2, #8]
 801027c:	4611      	mov	r1, r2
 801027e:	4618      	mov	r0, r3
 8010280:	f7fc f8ea 	bl	800c458 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010284:	4b71      	ldr	r3, [pc, #452]	; (801044c <tcp_receive+0xb0c>)
 8010286:	891c      	ldrh	r4, [r3, #8]
 8010288:	4b70      	ldr	r3, [pc, #448]	; (801044c <tcp_receive+0xb0c>)
 801028a:	68db      	ldr	r3, [r3, #12]
 801028c:	899b      	ldrh	r3, [r3, #12]
 801028e:	b29b      	uxth	r3, r3
 8010290:	4618      	mov	r0, r3
 8010292:	f7fa ffcb 	bl	800b22c <lwip_htons>
 8010296:	4603      	mov	r3, r0
 8010298:	b2db      	uxtb	r3, r3
 801029a:	f003 0303 	and.w	r3, r3, #3
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d001      	beq.n	80102a6 <tcp_receive+0x966>
 80102a2:	2301      	movs	r3, #1
 80102a4:	e000      	b.n	80102a8 <tcp_receive+0x968>
 80102a6:	2300      	movs	r3, #0
 80102a8:	4423      	add	r3, r4
 80102aa:	b29a      	uxth	r2, r3
 80102ac:	4b65      	ldr	r3, [pc, #404]	; (8010444 <tcp_receive+0xb04>)
 80102ae:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80102b0:	4b64      	ldr	r3, [pc, #400]	; (8010444 <tcp_receive+0xb04>)
 80102b2:	881b      	ldrh	r3, [r3, #0]
 80102b4:	461a      	mov	r2, r3
 80102b6:	4b64      	ldr	r3, [pc, #400]	; (8010448 <tcp_receive+0xb08>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	441a      	add	r2, r3
 80102bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102be:	68db      	ldr	r3, [r3, #12]
 80102c0:	685b      	ldr	r3, [r3, #4]
 80102c2:	429a      	cmp	r2, r3
 80102c4:	d006      	beq.n	80102d4 <tcp_receive+0x994>
 80102c6:	4b62      	ldr	r3, [pc, #392]	; (8010450 <tcp_receive+0xb10>)
 80102c8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80102cc:	4961      	ldr	r1, [pc, #388]	; (8010454 <tcp_receive+0xb14>)
 80102ce:	4862      	ldr	r0, [pc, #392]	; (8010458 <tcp_receive+0xb18>)
 80102d0:	f007 fac6 	bl	8017860 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80102d8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80102da:	4b5a      	ldr	r3, [pc, #360]	; (8010444 <tcp_receive+0xb04>)
 80102dc:	881b      	ldrh	r3, [r3, #0]
 80102de:	461a      	mov	r2, r3
 80102e0:	4b59      	ldr	r3, [pc, #356]	; (8010448 <tcp_receive+0xb08>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	441a      	add	r2, r3
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80102ee:	4b55      	ldr	r3, [pc, #340]	; (8010444 <tcp_receive+0xb04>)
 80102f0:	881b      	ldrh	r3, [r3, #0]
 80102f2:	429a      	cmp	r2, r3
 80102f4:	d206      	bcs.n	8010304 <tcp_receive+0x9c4>
 80102f6:	4b56      	ldr	r3, [pc, #344]	; (8010450 <tcp_receive+0xb10>)
 80102f8:	f240 6207 	movw	r2, #1543	; 0x607
 80102fc:	4957      	ldr	r1, [pc, #348]	; (801045c <tcp_receive+0xb1c>)
 80102fe:	4856      	ldr	r0, [pc, #344]	; (8010458 <tcp_receive+0xb18>)
 8010300:	f007 faae 	bl	8017860 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010308:	4b4e      	ldr	r3, [pc, #312]	; (8010444 <tcp_receive+0xb04>)
 801030a:	881b      	ldrh	r3, [r3, #0]
 801030c:	1ad3      	subs	r3, r2, r3
 801030e:	b29a      	uxth	r2, r3
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f7fc ffc9 	bl	800d2ac <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801031a:	4b4c      	ldr	r3, [pc, #304]	; (801044c <tcp_receive+0xb0c>)
 801031c:	685b      	ldr	r3, [r3, #4]
 801031e:	891b      	ldrh	r3, [r3, #8]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d006      	beq.n	8010332 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010324:	4b49      	ldr	r3, [pc, #292]	; (801044c <tcp_receive+0xb0c>)
 8010326:	685b      	ldr	r3, [r3, #4]
 8010328:	4a4d      	ldr	r2, [pc, #308]	; (8010460 <tcp_receive+0xb20>)
 801032a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801032c:	4b47      	ldr	r3, [pc, #284]	; (801044c <tcp_receive+0xb0c>)
 801032e:	2200      	movs	r2, #0
 8010330:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010332:	4b46      	ldr	r3, [pc, #280]	; (801044c <tcp_receive+0xb0c>)
 8010334:	68db      	ldr	r3, [r3, #12]
 8010336:	899b      	ldrh	r3, [r3, #12]
 8010338:	b29b      	uxth	r3, r3
 801033a:	4618      	mov	r0, r3
 801033c:	f7fa ff76 	bl	800b22c <lwip_htons>
 8010340:	4603      	mov	r3, r0
 8010342:	b2db      	uxtb	r3, r3
 8010344:	f003 0301 	and.w	r3, r3, #1
 8010348:	2b00      	cmp	r3, #0
 801034a:	f000 80b8 	beq.w	80104be <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801034e:	4b45      	ldr	r3, [pc, #276]	; (8010464 <tcp_receive+0xb24>)
 8010350:	781b      	ldrb	r3, [r3, #0]
 8010352:	f043 0320 	orr.w	r3, r3, #32
 8010356:	b2da      	uxtb	r2, r3
 8010358:	4b42      	ldr	r3, [pc, #264]	; (8010464 <tcp_receive+0xb24>)
 801035a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801035c:	e0af      	b.n	80104be <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010362:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010368:	68db      	ldr	r3, [r3, #12]
 801036a:	685b      	ldr	r3, [r3, #4]
 801036c:	4a36      	ldr	r2, [pc, #216]	; (8010448 <tcp_receive+0xb08>)
 801036e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	891b      	ldrh	r3, [r3, #8]
 8010374:	461c      	mov	r4, r3
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	68db      	ldr	r3, [r3, #12]
 801037a:	899b      	ldrh	r3, [r3, #12]
 801037c:	b29b      	uxth	r3, r3
 801037e:	4618      	mov	r0, r3
 8010380:	f7fa ff54 	bl	800b22c <lwip_htons>
 8010384:	4603      	mov	r3, r0
 8010386:	b2db      	uxtb	r3, r3
 8010388:	f003 0303 	and.w	r3, r3, #3
 801038c:	2b00      	cmp	r3, #0
 801038e:	d001      	beq.n	8010394 <tcp_receive+0xa54>
 8010390:	2301      	movs	r3, #1
 8010392:	e000      	b.n	8010396 <tcp_receive+0xa56>
 8010394:	2300      	movs	r3, #0
 8010396:	191a      	adds	r2, r3, r4
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801039c:	441a      	add	r2, r3
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80103a6:	461c      	mov	r4, r3
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	891b      	ldrh	r3, [r3, #8]
 80103ac:	461d      	mov	r5, r3
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	68db      	ldr	r3, [r3, #12]
 80103b2:	899b      	ldrh	r3, [r3, #12]
 80103b4:	b29b      	uxth	r3, r3
 80103b6:	4618      	mov	r0, r3
 80103b8:	f7fa ff38 	bl	800b22c <lwip_htons>
 80103bc:	4603      	mov	r3, r0
 80103be:	b2db      	uxtb	r3, r3
 80103c0:	f003 0303 	and.w	r3, r3, #3
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d001      	beq.n	80103cc <tcp_receive+0xa8c>
 80103c8:	2301      	movs	r3, #1
 80103ca:	e000      	b.n	80103ce <tcp_receive+0xa8e>
 80103cc:	2300      	movs	r3, #0
 80103ce:	442b      	add	r3, r5
 80103d0:	429c      	cmp	r4, r3
 80103d2:	d206      	bcs.n	80103e2 <tcp_receive+0xaa2>
 80103d4:	4b1e      	ldr	r3, [pc, #120]	; (8010450 <tcp_receive+0xb10>)
 80103d6:	f240 622b 	movw	r2, #1579	; 0x62b
 80103da:	4923      	ldr	r1, [pc, #140]	; (8010468 <tcp_receive+0xb28>)
 80103dc:	481e      	ldr	r0, [pc, #120]	; (8010458 <tcp_receive+0xb18>)
 80103de:	f007 fa3f 	bl	8017860 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	891b      	ldrh	r3, [r3, #8]
 80103e6:	461c      	mov	r4, r3
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	68db      	ldr	r3, [r3, #12]
 80103ec:	899b      	ldrh	r3, [r3, #12]
 80103ee:	b29b      	uxth	r3, r3
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7fa ff1b 	bl	800b22c <lwip_htons>
 80103f6:	4603      	mov	r3, r0
 80103f8:	b2db      	uxtb	r3, r3
 80103fa:	f003 0303 	and.w	r3, r3, #3
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d001      	beq.n	8010406 <tcp_receive+0xac6>
 8010402:	2301      	movs	r3, #1
 8010404:	e000      	b.n	8010408 <tcp_receive+0xac8>
 8010406:	2300      	movs	r3, #0
 8010408:	1919      	adds	r1, r3, r4
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801040e:	b28b      	uxth	r3, r1
 8010410:	1ad3      	subs	r3, r2, r3
 8010412:	b29a      	uxth	r2, r3
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010418:	6878      	ldr	r0, [r7, #4]
 801041a:	f7fc ff47 	bl	800d2ac <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	685b      	ldr	r3, [r3, #4]
 8010422:	891b      	ldrh	r3, [r3, #8]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d028      	beq.n	801047a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010428:	4b0d      	ldr	r3, [pc, #52]	; (8010460 <tcp_receive+0xb20>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d01d      	beq.n	801046c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010430:	4b0b      	ldr	r3, [pc, #44]	; (8010460 <tcp_receive+0xb20>)
 8010432:	681a      	ldr	r2, [r3, #0]
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	4619      	mov	r1, r3
 801043a:	4610      	mov	r0, r2
 801043c:	f7fc fa54 	bl	800c8e8 <pbuf_cat>
 8010440:	e018      	b.n	8010474 <tcp_receive+0xb34>
 8010442:	bf00      	nop
 8010444:	20000482 	.word	0x20000482
 8010448:	20000478 	.word	0x20000478
 801044c:	20000458 	.word	0x20000458
 8010450:	0801de64 	.word	0x0801de64
 8010454:	0801e244 	.word	0x0801e244
 8010458:	0801deb0 	.word	0x0801deb0
 801045c:	0801e280 	.word	0x0801e280
 8010460:	20000488 	.word	0x20000488
 8010464:	20000485 	.word	0x20000485
 8010468:	0801e2a0 	.word	0x0801e2a0
            } else {
              recv_data = cseg->p;
 801046c:	68bb      	ldr	r3, [r7, #8]
 801046e:	685b      	ldr	r3, [r3, #4]
 8010470:	4a70      	ldr	r2, [pc, #448]	; (8010634 <tcp_receive+0xcf4>)
 8010472:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010474:	68bb      	ldr	r3, [r7, #8]
 8010476:	2200      	movs	r2, #0
 8010478:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	68db      	ldr	r3, [r3, #12]
 801047e:	899b      	ldrh	r3, [r3, #12]
 8010480:	b29b      	uxth	r3, r3
 8010482:	4618      	mov	r0, r3
 8010484:	f7fa fed2 	bl	800b22c <lwip_htons>
 8010488:	4603      	mov	r3, r0
 801048a:	b2db      	uxtb	r3, r3
 801048c:	f003 0301 	and.w	r3, r3, #1
 8010490:	2b00      	cmp	r3, #0
 8010492:	d00d      	beq.n	80104b0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010494:	4b68      	ldr	r3, [pc, #416]	; (8010638 <tcp_receive+0xcf8>)
 8010496:	781b      	ldrb	r3, [r3, #0]
 8010498:	f043 0320 	orr.w	r3, r3, #32
 801049c:	b2da      	uxtb	r2, r3
 801049e:	4b66      	ldr	r3, [pc, #408]	; (8010638 <tcp_receive+0xcf8>)
 80104a0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	7d1b      	ldrb	r3, [r3, #20]
 80104a6:	2b04      	cmp	r3, #4
 80104a8:	d102      	bne.n	80104b0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2207      	movs	r2, #7
 80104ae:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	681a      	ldr	r2, [r3, #0]
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80104b8:	68b8      	ldr	r0, [r7, #8]
 80104ba:	f7fd fbd6 	bl	800dc6a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d008      	beq.n	80104d8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104ca:	68db      	ldr	r3, [r3, #12]
 80104cc:	685a      	ldr	r2, [r3, #4]
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80104d2:	429a      	cmp	r2, r3
 80104d4:	f43f af43 	beq.w	801035e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	8b5b      	ldrh	r3, [r3, #26]
 80104dc:	f003 0301 	and.w	r3, r3, #1
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d00e      	beq.n	8010502 <tcp_receive+0xbc2>
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	8b5b      	ldrh	r3, [r3, #26]
 80104e8:	f023 0301 	bic.w	r3, r3, #1
 80104ec:	b29a      	uxth	r2, r3
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	835a      	strh	r2, [r3, #26]
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	8b5b      	ldrh	r3, [r3, #26]
 80104f6:	f043 0302 	orr.w	r3, r3, #2
 80104fa:	b29a      	uxth	r2, r3
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010500:	e188      	b.n	8010814 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	8b5b      	ldrh	r3, [r3, #26]
 8010506:	f043 0301 	orr.w	r3, r3, #1
 801050a:	b29a      	uxth	r2, r3
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010510:	e180      	b.n	8010814 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010516:	2b00      	cmp	r3, #0
 8010518:	d106      	bne.n	8010528 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801051a:	4848      	ldr	r0, [pc, #288]	; (801063c <tcp_receive+0xcfc>)
 801051c:	f7fd fbbe 	bl	800dc9c <tcp_seg_copy>
 8010520:	4602      	mov	r2, r0
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	675a      	str	r2, [r3, #116]	; 0x74
 8010526:	e16d      	b.n	8010804 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010528:	2300      	movs	r3, #0
 801052a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010530:	63bb      	str	r3, [r7, #56]	; 0x38
 8010532:	e157      	b.n	80107e4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8010534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010536:	68db      	ldr	r3, [r3, #12]
 8010538:	685a      	ldr	r2, [r3, #4]
 801053a:	4b41      	ldr	r3, [pc, #260]	; (8010640 <tcp_receive+0xd00>)
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	429a      	cmp	r2, r3
 8010540:	d11d      	bne.n	801057e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010542:	4b3e      	ldr	r3, [pc, #248]	; (801063c <tcp_receive+0xcfc>)
 8010544:	891a      	ldrh	r2, [r3, #8]
 8010546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010548:	891b      	ldrh	r3, [r3, #8]
 801054a:	429a      	cmp	r2, r3
 801054c:	f240 814f 	bls.w	80107ee <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010550:	483a      	ldr	r0, [pc, #232]	; (801063c <tcp_receive+0xcfc>)
 8010552:	f7fd fba3 	bl	800dc9c <tcp_seg_copy>
 8010556:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	2b00      	cmp	r3, #0
 801055c:	f000 8149 	beq.w	80107f2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8010560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010562:	2b00      	cmp	r3, #0
 8010564:	d003      	beq.n	801056e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010568:	697a      	ldr	r2, [r7, #20]
 801056a:	601a      	str	r2, [r3, #0]
 801056c:	e002      	b.n	8010574 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	697a      	ldr	r2, [r7, #20]
 8010572:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010574:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010576:	6978      	ldr	r0, [r7, #20]
 8010578:	f7ff f8de 	bl	800f738 <tcp_oos_insert_segment>
                }
                break;
 801057c:	e139      	b.n	80107f2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801057e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010580:	2b00      	cmp	r3, #0
 8010582:	d117      	bne.n	80105b4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010584:	4b2e      	ldr	r3, [pc, #184]	; (8010640 <tcp_receive+0xd00>)
 8010586:	681a      	ldr	r2, [r3, #0]
 8010588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801058a:	68db      	ldr	r3, [r3, #12]
 801058c:	685b      	ldr	r3, [r3, #4]
 801058e:	1ad3      	subs	r3, r2, r3
 8010590:	2b00      	cmp	r3, #0
 8010592:	da57      	bge.n	8010644 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010594:	4829      	ldr	r0, [pc, #164]	; (801063c <tcp_receive+0xcfc>)
 8010596:	f7fd fb81 	bl	800dc9c <tcp_seg_copy>
 801059a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801059c:	69bb      	ldr	r3, [r7, #24]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	f000 8129 	beq.w	80107f6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	69ba      	ldr	r2, [r7, #24]
 80105a8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80105aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80105ac:	69b8      	ldr	r0, [r7, #24]
 80105ae:	f7ff f8c3 	bl	800f738 <tcp_oos_insert_segment>
                  }
                  break;
 80105b2:	e120      	b.n	80107f6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80105b4:	4b22      	ldr	r3, [pc, #136]	; (8010640 <tcp_receive+0xd00>)
 80105b6:	681a      	ldr	r2, [r3, #0]
 80105b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ba:	68db      	ldr	r3, [r3, #12]
 80105bc:	685b      	ldr	r3, [r3, #4]
 80105be:	1ad3      	subs	r3, r2, r3
 80105c0:	3b01      	subs	r3, #1
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	db3e      	blt.n	8010644 <tcp_receive+0xd04>
 80105c6:	4b1e      	ldr	r3, [pc, #120]	; (8010640 <tcp_receive+0xd00>)
 80105c8:	681a      	ldr	r2, [r3, #0]
 80105ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105cc:	68db      	ldr	r3, [r3, #12]
 80105ce:	685b      	ldr	r3, [r3, #4]
 80105d0:	1ad3      	subs	r3, r2, r3
 80105d2:	3301      	adds	r3, #1
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	dc35      	bgt.n	8010644 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80105d8:	4818      	ldr	r0, [pc, #96]	; (801063c <tcp_receive+0xcfc>)
 80105da:	f7fd fb5f 	bl	800dc9c <tcp_seg_copy>
 80105de:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80105e0:	69fb      	ldr	r3, [r7, #28]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	f000 8109 	beq.w	80107fa <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80105e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ea:	68db      	ldr	r3, [r3, #12]
 80105ec:	685b      	ldr	r3, [r3, #4]
 80105ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105f0:	8912      	ldrh	r2, [r2, #8]
 80105f2:	441a      	add	r2, r3
 80105f4:	4b12      	ldr	r3, [pc, #72]	; (8010640 <tcp_receive+0xd00>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	1ad3      	subs	r3, r2, r3
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	dd12      	ble.n	8010624 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80105fe:	4b10      	ldr	r3, [pc, #64]	; (8010640 <tcp_receive+0xd00>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	b29a      	uxth	r2, r3
 8010604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010606:	68db      	ldr	r3, [r3, #12]
 8010608:	685b      	ldr	r3, [r3, #4]
 801060a:	b29b      	uxth	r3, r3
 801060c:	1ad3      	subs	r3, r2, r3
 801060e:	b29a      	uxth	r2, r3
 8010610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010612:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010616:	685a      	ldr	r2, [r3, #4]
 8010618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801061a:	891b      	ldrh	r3, [r3, #8]
 801061c:	4619      	mov	r1, r3
 801061e:	4610      	mov	r0, r2
 8010620:	f7fb ff1a 	bl	800c458 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010626:	69fa      	ldr	r2, [r7, #28]
 8010628:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801062a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801062c:	69f8      	ldr	r0, [r7, #28]
 801062e:	f7ff f883 	bl	800f738 <tcp_oos_insert_segment>
                  }
                  break;
 8010632:	e0e2      	b.n	80107fa <tcp_receive+0xeba>
 8010634:	20000488 	.word	0x20000488
 8010638:	20000485 	.word	0x20000485
 801063c:	20000458 	.word	0x20000458
 8010640:	20000478 	.word	0x20000478
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010646:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	2b00      	cmp	r3, #0
 801064e:	f040 80c6 	bne.w	80107de <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010652:	4b80      	ldr	r3, [pc, #512]	; (8010854 <tcp_receive+0xf14>)
 8010654:	681a      	ldr	r2, [r3, #0]
 8010656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010658:	68db      	ldr	r3, [r3, #12]
 801065a:	685b      	ldr	r3, [r3, #4]
 801065c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801065e:	2b00      	cmp	r3, #0
 8010660:	f340 80bd 	ble.w	80107de <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010666:	68db      	ldr	r3, [r3, #12]
 8010668:	899b      	ldrh	r3, [r3, #12]
 801066a:	b29b      	uxth	r3, r3
 801066c:	4618      	mov	r0, r3
 801066e:	f7fa fddd 	bl	800b22c <lwip_htons>
 8010672:	4603      	mov	r3, r0
 8010674:	b2db      	uxtb	r3, r3
 8010676:	f003 0301 	and.w	r3, r3, #1
 801067a:	2b00      	cmp	r3, #0
 801067c:	f040 80bf 	bne.w	80107fe <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010680:	4875      	ldr	r0, [pc, #468]	; (8010858 <tcp_receive+0xf18>)
 8010682:	f7fd fb0b 	bl	800dc9c <tcp_seg_copy>
 8010686:	4602      	mov	r2, r0
 8010688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801068a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801068c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	2b00      	cmp	r3, #0
 8010692:	f000 80b6 	beq.w	8010802 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010698:	68db      	ldr	r3, [r3, #12]
 801069a:	685b      	ldr	r3, [r3, #4]
 801069c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801069e:	8912      	ldrh	r2, [r2, #8]
 80106a0:	441a      	add	r2, r3
 80106a2:	4b6c      	ldr	r3, [pc, #432]	; (8010854 <tcp_receive+0xf14>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	1ad3      	subs	r3, r2, r3
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	dd12      	ble.n	80106d2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80106ac:	4b69      	ldr	r3, [pc, #420]	; (8010854 <tcp_receive+0xf14>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	b29a      	uxth	r2, r3
 80106b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b4:	68db      	ldr	r3, [r3, #12]
 80106b6:	685b      	ldr	r3, [r3, #4]
 80106b8:	b29b      	uxth	r3, r3
 80106ba:	1ad3      	subs	r3, r2, r3
 80106bc:	b29a      	uxth	r2, r3
 80106be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80106c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c4:	685a      	ldr	r2, [r3, #4]
 80106c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c8:	891b      	ldrh	r3, [r3, #8]
 80106ca:	4619      	mov	r1, r3
 80106cc:	4610      	mov	r0, r2
 80106ce:	f7fb fec3 	bl	800c458 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80106d2:	4b62      	ldr	r3, [pc, #392]	; (801085c <tcp_receive+0xf1c>)
 80106d4:	881b      	ldrh	r3, [r3, #0]
 80106d6:	461a      	mov	r2, r3
 80106d8:	4b5e      	ldr	r3, [pc, #376]	; (8010854 <tcp_receive+0xf14>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	441a      	add	r2, r3
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106e2:	6879      	ldr	r1, [r7, #4]
 80106e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80106e6:	440b      	add	r3, r1
 80106e8:	1ad3      	subs	r3, r2, r3
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	f340 8089 	ble.w	8010802 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80106f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	68db      	ldr	r3, [r3, #12]
 80106f6:	899b      	ldrh	r3, [r3, #12]
 80106f8:	b29b      	uxth	r3, r3
 80106fa:	4618      	mov	r0, r3
 80106fc:	f7fa fd96 	bl	800b22c <lwip_htons>
 8010700:	4603      	mov	r3, r0
 8010702:	b2db      	uxtb	r3, r3
 8010704:	f003 0301 	and.w	r3, r3, #1
 8010708:	2b00      	cmp	r3, #0
 801070a:	d022      	beq.n	8010752 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801070c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	68db      	ldr	r3, [r3, #12]
 8010712:	899b      	ldrh	r3, [r3, #12]
 8010714:	b29b      	uxth	r3, r3
 8010716:	b21b      	sxth	r3, r3
 8010718:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801071c:	b21c      	sxth	r4, r3
 801071e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	68db      	ldr	r3, [r3, #12]
 8010724:	899b      	ldrh	r3, [r3, #12]
 8010726:	b29b      	uxth	r3, r3
 8010728:	4618      	mov	r0, r3
 801072a:	f7fa fd7f 	bl	800b22c <lwip_htons>
 801072e:	4603      	mov	r3, r0
 8010730:	b2db      	uxtb	r3, r3
 8010732:	b29b      	uxth	r3, r3
 8010734:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010738:	b29b      	uxth	r3, r3
 801073a:	4618      	mov	r0, r3
 801073c:	f7fa fd76 	bl	800b22c <lwip_htons>
 8010740:	4603      	mov	r3, r0
 8010742:	b21b      	sxth	r3, r3
 8010744:	4323      	orrs	r3, r4
 8010746:	b21a      	sxth	r2, r3
 8010748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	68db      	ldr	r3, [r3, #12]
 801074e:	b292      	uxth	r2, r2
 8010750:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010756:	b29a      	uxth	r2, r3
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801075c:	4413      	add	r3, r2
 801075e:	b299      	uxth	r1, r3
 8010760:	4b3c      	ldr	r3, [pc, #240]	; (8010854 <tcp_receive+0xf14>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	b29a      	uxth	r2, r3
 8010766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	1a8a      	subs	r2, r1, r2
 801076c:	b292      	uxth	r2, r2
 801076e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	685a      	ldr	r2, [r3, #4]
 8010776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	891b      	ldrh	r3, [r3, #8]
 801077c:	4619      	mov	r1, r3
 801077e:	4610      	mov	r0, r2
 8010780:	f7fb fe6a 	bl	800c458 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	891c      	ldrh	r4, [r3, #8]
 801078a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	68db      	ldr	r3, [r3, #12]
 8010790:	899b      	ldrh	r3, [r3, #12]
 8010792:	b29b      	uxth	r3, r3
 8010794:	4618      	mov	r0, r3
 8010796:	f7fa fd49 	bl	800b22c <lwip_htons>
 801079a:	4603      	mov	r3, r0
 801079c:	b2db      	uxtb	r3, r3
 801079e:	f003 0303 	and.w	r3, r3, #3
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d001      	beq.n	80107aa <tcp_receive+0xe6a>
 80107a6:	2301      	movs	r3, #1
 80107a8:	e000      	b.n	80107ac <tcp_receive+0xe6c>
 80107aa:	2300      	movs	r3, #0
 80107ac:	4423      	add	r3, r4
 80107ae:	b29a      	uxth	r2, r3
 80107b0:	4b2a      	ldr	r3, [pc, #168]	; (801085c <tcp_receive+0xf1c>)
 80107b2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80107b4:	4b29      	ldr	r3, [pc, #164]	; (801085c <tcp_receive+0xf1c>)
 80107b6:	881b      	ldrh	r3, [r3, #0]
 80107b8:	461a      	mov	r2, r3
 80107ba:	4b26      	ldr	r3, [pc, #152]	; (8010854 <tcp_receive+0xf14>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	441a      	add	r2, r3
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107c4:	6879      	ldr	r1, [r7, #4]
 80107c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80107c8:	440b      	add	r3, r1
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d019      	beq.n	8010802 <tcp_receive+0xec2>
 80107ce:	4b24      	ldr	r3, [pc, #144]	; (8010860 <tcp_receive+0xf20>)
 80107d0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80107d4:	4923      	ldr	r1, [pc, #140]	; (8010864 <tcp_receive+0xf24>)
 80107d6:	4824      	ldr	r0, [pc, #144]	; (8010868 <tcp_receive+0xf28>)
 80107d8:	f007 f842 	bl	8017860 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80107dc:	e011      	b.n	8010802 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80107de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80107e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	f47f aea4 	bne.w	8010534 <tcp_receive+0xbf4>
 80107ec:	e00a      	b.n	8010804 <tcp_receive+0xec4>
                break;
 80107ee:	bf00      	nop
 80107f0:	e008      	b.n	8010804 <tcp_receive+0xec4>
                break;
 80107f2:	bf00      	nop
 80107f4:	e006      	b.n	8010804 <tcp_receive+0xec4>
                  break;
 80107f6:	bf00      	nop
 80107f8:	e004      	b.n	8010804 <tcp_receive+0xec4>
                  break;
 80107fa:	bf00      	nop
 80107fc:	e002      	b.n	8010804 <tcp_receive+0xec4>
                  break;
 80107fe:	bf00      	nop
 8010800:	e000      	b.n	8010804 <tcp_receive+0xec4>
                break;
 8010802:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f001 fa31 	bl	8011c6c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801080a:	e003      	b.n	8010814 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	f001 fa2d 	bl	8011c6c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010812:	e01a      	b.n	801084a <tcp_receive+0xf0a>
 8010814:	e019      	b.n	801084a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010816:	4b0f      	ldr	r3, [pc, #60]	; (8010854 <tcp_receive+0xf14>)
 8010818:	681a      	ldr	r2, [r3, #0]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801081e:	1ad3      	subs	r3, r2, r3
 8010820:	2b00      	cmp	r3, #0
 8010822:	db0a      	blt.n	801083a <tcp_receive+0xefa>
 8010824:	4b0b      	ldr	r3, [pc, #44]	; (8010854 <tcp_receive+0xf14>)
 8010826:	681a      	ldr	r2, [r3, #0]
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801082c:	6879      	ldr	r1, [r7, #4]
 801082e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010830:	440b      	add	r3, r1
 8010832:	1ad3      	subs	r3, r2, r3
 8010834:	3301      	adds	r3, #1
 8010836:	2b00      	cmp	r3, #0
 8010838:	dd07      	ble.n	801084a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	8b5b      	ldrh	r3, [r3, #26]
 801083e:	f043 0302 	orr.w	r3, r3, #2
 8010842:	b29a      	uxth	r2, r3
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010848:	e7ff      	b.n	801084a <tcp_receive+0xf0a>
 801084a:	bf00      	nop
 801084c:	3750      	adds	r7, #80	; 0x50
 801084e:	46bd      	mov	sp, r7
 8010850:	bdb0      	pop	{r4, r5, r7, pc}
 8010852:	bf00      	nop
 8010854:	20000478 	.word	0x20000478
 8010858:	20000458 	.word	0x20000458
 801085c:	20000482 	.word	0x20000482
 8010860:	0801de64 	.word	0x0801de64
 8010864:	0801e20c 	.word	0x0801e20c
 8010868:	0801deb0 	.word	0x0801deb0

0801086c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801086c:	b480      	push	{r7}
 801086e:	b083      	sub	sp, #12
 8010870:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010872:	4b15      	ldr	r3, [pc, #84]	; (80108c8 <tcp_get_next_optbyte+0x5c>)
 8010874:	881b      	ldrh	r3, [r3, #0]
 8010876:	1c5a      	adds	r2, r3, #1
 8010878:	b291      	uxth	r1, r2
 801087a:	4a13      	ldr	r2, [pc, #76]	; (80108c8 <tcp_get_next_optbyte+0x5c>)
 801087c:	8011      	strh	r1, [r2, #0]
 801087e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010880:	4b12      	ldr	r3, [pc, #72]	; (80108cc <tcp_get_next_optbyte+0x60>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d004      	beq.n	8010892 <tcp_get_next_optbyte+0x26>
 8010888:	4b11      	ldr	r3, [pc, #68]	; (80108d0 <tcp_get_next_optbyte+0x64>)
 801088a:	881b      	ldrh	r3, [r3, #0]
 801088c:	88fa      	ldrh	r2, [r7, #6]
 801088e:	429a      	cmp	r2, r3
 8010890:	d208      	bcs.n	80108a4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010892:	4b10      	ldr	r3, [pc, #64]	; (80108d4 <tcp_get_next_optbyte+0x68>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	3314      	adds	r3, #20
 8010898:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801089a:	88fb      	ldrh	r3, [r7, #6]
 801089c:	683a      	ldr	r2, [r7, #0]
 801089e:	4413      	add	r3, r2
 80108a0:	781b      	ldrb	r3, [r3, #0]
 80108a2:	e00b      	b.n	80108bc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80108a4:	88fb      	ldrh	r3, [r7, #6]
 80108a6:	b2da      	uxtb	r2, r3
 80108a8:	4b09      	ldr	r3, [pc, #36]	; (80108d0 <tcp_get_next_optbyte+0x64>)
 80108aa:	881b      	ldrh	r3, [r3, #0]
 80108ac:	b2db      	uxtb	r3, r3
 80108ae:	1ad3      	subs	r3, r2, r3
 80108b0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80108b2:	4b06      	ldr	r3, [pc, #24]	; (80108cc <tcp_get_next_optbyte+0x60>)
 80108b4:	681a      	ldr	r2, [r3, #0]
 80108b6:	797b      	ldrb	r3, [r7, #5]
 80108b8:	4413      	add	r3, r2
 80108ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80108bc:	4618      	mov	r0, r3
 80108be:	370c      	adds	r7, #12
 80108c0:	46bd      	mov	sp, r7
 80108c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c6:	4770      	bx	lr
 80108c8:	20000474 	.word	0x20000474
 80108cc:	20000470 	.word	0x20000470
 80108d0:	2000046e 	.word	0x2000046e
 80108d4:	20000468 	.word	0x20000468

080108d8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b084      	sub	sp, #16
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d106      	bne.n	80108f4 <tcp_parseopt+0x1c>
 80108e6:	4b32      	ldr	r3, [pc, #200]	; (80109b0 <tcp_parseopt+0xd8>)
 80108e8:	f240 727d 	movw	r2, #1917	; 0x77d
 80108ec:	4931      	ldr	r1, [pc, #196]	; (80109b4 <tcp_parseopt+0xdc>)
 80108ee:	4832      	ldr	r0, [pc, #200]	; (80109b8 <tcp_parseopt+0xe0>)
 80108f0:	f006 ffb6 	bl	8017860 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80108f4:	4b31      	ldr	r3, [pc, #196]	; (80109bc <tcp_parseopt+0xe4>)
 80108f6:	881b      	ldrh	r3, [r3, #0]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d055      	beq.n	80109a8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80108fc:	4b30      	ldr	r3, [pc, #192]	; (80109c0 <tcp_parseopt+0xe8>)
 80108fe:	2200      	movs	r2, #0
 8010900:	801a      	strh	r2, [r3, #0]
 8010902:	e045      	b.n	8010990 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010904:	f7ff ffb2 	bl	801086c <tcp_get_next_optbyte>
 8010908:	4603      	mov	r3, r0
 801090a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801090c:	7bfb      	ldrb	r3, [r7, #15]
 801090e:	2b02      	cmp	r3, #2
 8010910:	d006      	beq.n	8010920 <tcp_parseopt+0x48>
 8010912:	2b02      	cmp	r3, #2
 8010914:	dc2b      	bgt.n	801096e <tcp_parseopt+0x96>
 8010916:	2b00      	cmp	r3, #0
 8010918:	d041      	beq.n	801099e <tcp_parseopt+0xc6>
 801091a:	2b01      	cmp	r3, #1
 801091c:	d127      	bne.n	801096e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801091e:	e037      	b.n	8010990 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010920:	f7ff ffa4 	bl	801086c <tcp_get_next_optbyte>
 8010924:	4603      	mov	r3, r0
 8010926:	2b04      	cmp	r3, #4
 8010928:	d13b      	bne.n	80109a2 <tcp_parseopt+0xca>
 801092a:	4b25      	ldr	r3, [pc, #148]	; (80109c0 <tcp_parseopt+0xe8>)
 801092c:	881b      	ldrh	r3, [r3, #0]
 801092e:	3301      	adds	r3, #1
 8010930:	4a22      	ldr	r2, [pc, #136]	; (80109bc <tcp_parseopt+0xe4>)
 8010932:	8812      	ldrh	r2, [r2, #0]
 8010934:	4293      	cmp	r3, r2
 8010936:	da34      	bge.n	80109a2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010938:	f7ff ff98 	bl	801086c <tcp_get_next_optbyte>
 801093c:	4603      	mov	r3, r0
 801093e:	b29b      	uxth	r3, r3
 8010940:	021b      	lsls	r3, r3, #8
 8010942:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010944:	f7ff ff92 	bl	801086c <tcp_get_next_optbyte>
 8010948:	4603      	mov	r3, r0
 801094a:	b29a      	uxth	r2, r3
 801094c:	89bb      	ldrh	r3, [r7, #12]
 801094e:	4313      	orrs	r3, r2
 8010950:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010952:	89bb      	ldrh	r3, [r7, #12]
 8010954:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8010958:	d804      	bhi.n	8010964 <tcp_parseopt+0x8c>
 801095a:	89bb      	ldrh	r3, [r7, #12]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d001      	beq.n	8010964 <tcp_parseopt+0x8c>
 8010960:	89ba      	ldrh	r2, [r7, #12]
 8010962:	e001      	b.n	8010968 <tcp_parseopt+0x90>
 8010964:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801096c:	e010      	b.n	8010990 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801096e:	f7ff ff7d 	bl	801086c <tcp_get_next_optbyte>
 8010972:	4603      	mov	r3, r0
 8010974:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010976:	7afb      	ldrb	r3, [r7, #11]
 8010978:	2b01      	cmp	r3, #1
 801097a:	d914      	bls.n	80109a6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801097c:	7afb      	ldrb	r3, [r7, #11]
 801097e:	b29a      	uxth	r2, r3
 8010980:	4b0f      	ldr	r3, [pc, #60]	; (80109c0 <tcp_parseopt+0xe8>)
 8010982:	881b      	ldrh	r3, [r3, #0]
 8010984:	4413      	add	r3, r2
 8010986:	b29b      	uxth	r3, r3
 8010988:	3b02      	subs	r3, #2
 801098a:	b29a      	uxth	r2, r3
 801098c:	4b0c      	ldr	r3, [pc, #48]	; (80109c0 <tcp_parseopt+0xe8>)
 801098e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010990:	4b0b      	ldr	r3, [pc, #44]	; (80109c0 <tcp_parseopt+0xe8>)
 8010992:	881a      	ldrh	r2, [r3, #0]
 8010994:	4b09      	ldr	r3, [pc, #36]	; (80109bc <tcp_parseopt+0xe4>)
 8010996:	881b      	ldrh	r3, [r3, #0]
 8010998:	429a      	cmp	r2, r3
 801099a:	d3b3      	bcc.n	8010904 <tcp_parseopt+0x2c>
 801099c:	e004      	b.n	80109a8 <tcp_parseopt+0xd0>
          return;
 801099e:	bf00      	nop
 80109a0:	e002      	b.n	80109a8 <tcp_parseopt+0xd0>
            return;
 80109a2:	bf00      	nop
 80109a4:	e000      	b.n	80109a8 <tcp_parseopt+0xd0>
            return;
 80109a6:	bf00      	nop
      }
    }
  }
}
 80109a8:	3710      	adds	r7, #16
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}
 80109ae:	bf00      	nop
 80109b0:	0801de64 	.word	0x0801de64
 80109b4:	0801e2c8 	.word	0x0801e2c8
 80109b8:	0801deb0 	.word	0x0801deb0
 80109bc:	2000046c 	.word	0x2000046c
 80109c0:	20000474 	.word	0x20000474

080109c4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80109c4:	b480      	push	{r7}
 80109c6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80109c8:	4b05      	ldr	r3, [pc, #20]	; (80109e0 <tcp_trigger_input_pcb_close+0x1c>)
 80109ca:	781b      	ldrb	r3, [r3, #0]
 80109cc:	f043 0310 	orr.w	r3, r3, #16
 80109d0:	b2da      	uxtb	r2, r3
 80109d2:	4b03      	ldr	r3, [pc, #12]	; (80109e0 <tcp_trigger_input_pcb_close+0x1c>)
 80109d4:	701a      	strb	r2, [r3, #0]
}
 80109d6:	bf00      	nop
 80109d8:	46bd      	mov	sp, r7
 80109da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109de:	4770      	bx	lr
 80109e0:	20000485 	.word	0x20000485

080109e4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b084      	sub	sp, #16
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	60f8      	str	r0, [r7, #12]
 80109ec:	60b9      	str	r1, [r7, #8]
 80109ee:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d00a      	beq.n	8010a0c <tcp_route+0x28>
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	7a1b      	ldrb	r3, [r3, #8]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d006      	beq.n	8010a0c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	7a1b      	ldrb	r3, [r3, #8]
 8010a02:	4618      	mov	r0, r3
 8010a04:	f7fb fb6e 	bl	800c0e4 <netif_get_by_index>
 8010a08:	4603      	mov	r3, r0
 8010a0a:	e003      	b.n	8010a14 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f004 ff95 	bl	801593c <ip4_route>
 8010a12:	4603      	mov	r3, r0
  }
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	3710      	adds	r7, #16
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}

08010a1c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010a1c:	b590      	push	{r4, r7, lr}
 8010a1e:	b087      	sub	sp, #28
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	60b9      	str	r1, [r7, #8]
 8010a26:	603b      	str	r3, [r7, #0]
 8010a28:	4613      	mov	r3, r2
 8010a2a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d105      	bne.n	8010a3e <tcp_create_segment+0x22>
 8010a32:	4b44      	ldr	r3, [pc, #272]	; (8010b44 <tcp_create_segment+0x128>)
 8010a34:	22a3      	movs	r2, #163	; 0xa3
 8010a36:	4944      	ldr	r1, [pc, #272]	; (8010b48 <tcp_create_segment+0x12c>)
 8010a38:	4844      	ldr	r0, [pc, #272]	; (8010b4c <tcp_create_segment+0x130>)
 8010a3a:	f006 ff11 	bl	8017860 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d105      	bne.n	8010a50 <tcp_create_segment+0x34>
 8010a44:	4b3f      	ldr	r3, [pc, #252]	; (8010b44 <tcp_create_segment+0x128>)
 8010a46:	22a4      	movs	r2, #164	; 0xa4
 8010a48:	4941      	ldr	r1, [pc, #260]	; (8010b50 <tcp_create_segment+0x134>)
 8010a4a:	4840      	ldr	r0, [pc, #256]	; (8010b4c <tcp_create_segment+0x130>)
 8010a4c:	f006 ff08 	bl	8017860 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010a50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010a54:	009b      	lsls	r3, r3, #2
 8010a56:	b2db      	uxtb	r3, r3
 8010a58:	f003 0304 	and.w	r3, r3, #4
 8010a5c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010a5e:	2003      	movs	r0, #3
 8010a60:	f7fb f83a 	bl	800bad8 <memp_malloc>
 8010a64:	6138      	str	r0, [r7, #16]
 8010a66:	693b      	ldr	r3, [r7, #16]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d104      	bne.n	8010a76 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010a6c:	68b8      	ldr	r0, [r7, #8]
 8010a6e:	f7fb fe79 	bl	800c764 <pbuf_free>
    return NULL;
 8010a72:	2300      	movs	r3, #0
 8010a74:	e061      	b.n	8010b3a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010a76:	693b      	ldr	r3, [r7, #16]
 8010a78:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010a7c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010a7e:	693b      	ldr	r3, [r7, #16]
 8010a80:	2200      	movs	r2, #0
 8010a82:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010a84:	693b      	ldr	r3, [r7, #16]
 8010a86:	68ba      	ldr	r2, [r7, #8]
 8010a88:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	891a      	ldrh	r2, [r3, #8]
 8010a8e:	7dfb      	ldrb	r3, [r7, #23]
 8010a90:	b29b      	uxth	r3, r3
 8010a92:	429a      	cmp	r2, r3
 8010a94:	d205      	bcs.n	8010aa2 <tcp_create_segment+0x86>
 8010a96:	4b2b      	ldr	r3, [pc, #172]	; (8010b44 <tcp_create_segment+0x128>)
 8010a98:	22b0      	movs	r2, #176	; 0xb0
 8010a9a:	492e      	ldr	r1, [pc, #184]	; (8010b54 <tcp_create_segment+0x138>)
 8010a9c:	482b      	ldr	r0, [pc, #172]	; (8010b4c <tcp_create_segment+0x130>)
 8010a9e:	f006 fedf 	bl	8017860 <iprintf>
  seg->len = p->tot_len - optlen;
 8010aa2:	68bb      	ldr	r3, [r7, #8]
 8010aa4:	891a      	ldrh	r2, [r3, #8]
 8010aa6:	7dfb      	ldrb	r3, [r7, #23]
 8010aa8:	b29b      	uxth	r3, r3
 8010aaa:	1ad3      	subs	r3, r2, r3
 8010aac:	b29a      	uxth	r2, r3
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010ab2:	2114      	movs	r1, #20
 8010ab4:	68b8      	ldr	r0, [r7, #8]
 8010ab6:	f7fb fdbf 	bl	800c638 <pbuf_add_header>
 8010aba:	4603      	mov	r3, r0
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d004      	beq.n	8010aca <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010ac0:	6938      	ldr	r0, [r7, #16]
 8010ac2:	f7fd f8d2 	bl	800dc6a <tcp_seg_free>
    return NULL;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	e037      	b.n	8010b3a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010aca:	693b      	ldr	r3, [r7, #16]
 8010acc:	685b      	ldr	r3, [r3, #4]
 8010ace:	685a      	ldr	r2, [r3, #4]
 8010ad0:	693b      	ldr	r3, [r7, #16]
 8010ad2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	8ada      	ldrh	r2, [r3, #22]
 8010ad8:	693b      	ldr	r3, [r7, #16]
 8010ada:	68dc      	ldr	r4, [r3, #12]
 8010adc:	4610      	mov	r0, r2
 8010ade:	f7fa fba5 	bl	800b22c <lwip_htons>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	8b1a      	ldrh	r2, [r3, #24]
 8010aea:	693b      	ldr	r3, [r7, #16]
 8010aec:	68dc      	ldr	r4, [r3, #12]
 8010aee:	4610      	mov	r0, r2
 8010af0:	f7fa fb9c 	bl	800b22c <lwip_htons>
 8010af4:	4603      	mov	r3, r0
 8010af6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010af8:	693b      	ldr	r3, [r7, #16]
 8010afa:	68dc      	ldr	r4, [r3, #12]
 8010afc:	6838      	ldr	r0, [r7, #0]
 8010afe:	f7fa fbaa 	bl	800b256 <lwip_htonl>
 8010b02:	4603      	mov	r3, r0
 8010b04:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010b06:	7dfb      	ldrb	r3, [r7, #23]
 8010b08:	089b      	lsrs	r3, r3, #2
 8010b0a:	b2db      	uxtb	r3, r3
 8010b0c:	b29b      	uxth	r3, r3
 8010b0e:	3305      	adds	r3, #5
 8010b10:	b29b      	uxth	r3, r3
 8010b12:	031b      	lsls	r3, r3, #12
 8010b14:	b29a      	uxth	r2, r3
 8010b16:	79fb      	ldrb	r3, [r7, #7]
 8010b18:	b29b      	uxth	r3, r3
 8010b1a:	4313      	orrs	r3, r2
 8010b1c:	b29a      	uxth	r2, r3
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	68dc      	ldr	r4, [r3, #12]
 8010b22:	4610      	mov	r0, r2
 8010b24:	f7fa fb82 	bl	800b22c <lwip_htons>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010b2c:	693b      	ldr	r3, [r7, #16]
 8010b2e:	68db      	ldr	r3, [r3, #12]
 8010b30:	2200      	movs	r2, #0
 8010b32:	749a      	strb	r2, [r3, #18]
 8010b34:	2200      	movs	r2, #0
 8010b36:	74da      	strb	r2, [r3, #19]
  return seg;
 8010b38:	693b      	ldr	r3, [r7, #16]
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	371c      	adds	r7, #28
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd90      	pop	{r4, r7, pc}
 8010b42:	bf00      	nop
 8010b44:	0801e2e4 	.word	0x0801e2e4
 8010b48:	0801e318 	.word	0x0801e318
 8010b4c:	0801e338 	.word	0x0801e338
 8010b50:	0801e360 	.word	0x0801e360
 8010b54:	0801e384 	.word	0x0801e384

08010b58 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010b58:	b590      	push	{r4, r7, lr}
 8010b5a:	b08b      	sub	sp, #44	; 0x2c
 8010b5c:	af02      	add	r7, sp, #8
 8010b5e:	6078      	str	r0, [r7, #4]
 8010b60:	460b      	mov	r3, r1
 8010b62:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010b64:	2300      	movs	r3, #0
 8010b66:	61fb      	str	r3, [r7, #28]
 8010b68:	2300      	movs	r3, #0
 8010b6a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d106      	bne.n	8010b84 <tcp_split_unsent_seg+0x2c>
 8010b76:	4b95      	ldr	r3, [pc, #596]	; (8010dcc <tcp_split_unsent_seg+0x274>)
 8010b78:	f240 324b 	movw	r2, #843	; 0x34b
 8010b7c:	4994      	ldr	r1, [pc, #592]	; (8010dd0 <tcp_split_unsent_seg+0x278>)
 8010b7e:	4895      	ldr	r0, [pc, #596]	; (8010dd4 <tcp_split_unsent_seg+0x27c>)
 8010b80:	f006 fe6e 	bl	8017860 <iprintf>

  useg = pcb->unsent;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b88:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d102      	bne.n	8010b96 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010b90:	f04f 33ff 	mov.w	r3, #4294967295
 8010b94:	e116      	b.n	8010dc4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010b96:	887b      	ldrh	r3, [r7, #2]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d109      	bne.n	8010bb0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010b9c:	4b8b      	ldr	r3, [pc, #556]	; (8010dcc <tcp_split_unsent_seg+0x274>)
 8010b9e:	f240 3253 	movw	r2, #851	; 0x353
 8010ba2:	498d      	ldr	r1, [pc, #564]	; (8010dd8 <tcp_split_unsent_seg+0x280>)
 8010ba4:	488b      	ldr	r0, [pc, #556]	; (8010dd4 <tcp_split_unsent_seg+0x27c>)
 8010ba6:	f006 fe5b 	bl	8017860 <iprintf>
    return ERR_VAL;
 8010baa:	f06f 0305 	mvn.w	r3, #5
 8010bae:	e109      	b.n	8010dc4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	891b      	ldrh	r3, [r3, #8]
 8010bb4:	887a      	ldrh	r2, [r7, #2]
 8010bb6:	429a      	cmp	r2, r3
 8010bb8:	d301      	bcc.n	8010bbe <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010bba:	2300      	movs	r3, #0
 8010bbc:	e102      	b.n	8010dc4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bc2:	887a      	ldrh	r2, [r7, #2]
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d906      	bls.n	8010bd6 <tcp_split_unsent_seg+0x7e>
 8010bc8:	4b80      	ldr	r3, [pc, #512]	; (8010dcc <tcp_split_unsent_seg+0x274>)
 8010bca:	f240 325b 	movw	r2, #859	; 0x35b
 8010bce:	4983      	ldr	r1, [pc, #524]	; (8010ddc <tcp_split_unsent_seg+0x284>)
 8010bd0:	4880      	ldr	r0, [pc, #512]	; (8010dd4 <tcp_split_unsent_seg+0x27c>)
 8010bd2:	f006 fe45 	bl	8017860 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	891b      	ldrh	r3, [r3, #8]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d106      	bne.n	8010bec <tcp_split_unsent_seg+0x94>
 8010bde:	4b7b      	ldr	r3, [pc, #492]	; (8010dcc <tcp_split_unsent_seg+0x274>)
 8010be0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010be4:	497e      	ldr	r1, [pc, #504]	; (8010de0 <tcp_split_unsent_seg+0x288>)
 8010be6:	487b      	ldr	r0, [pc, #492]	; (8010dd4 <tcp_split_unsent_seg+0x27c>)
 8010be8:	f006 fe3a 	bl	8017860 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	7a9b      	ldrb	r3, [r3, #10]
 8010bf0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010bf2:	7bfb      	ldrb	r3, [r7, #15]
 8010bf4:	009b      	lsls	r3, r3, #2
 8010bf6:	b2db      	uxtb	r3, r3
 8010bf8:	f003 0304 	and.w	r3, r3, #4
 8010bfc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	891a      	ldrh	r2, [r3, #8]
 8010c02:	887b      	ldrh	r3, [r7, #2]
 8010c04:	1ad3      	subs	r3, r2, r3
 8010c06:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010c08:	7bbb      	ldrb	r3, [r7, #14]
 8010c0a:	b29a      	uxth	r2, r3
 8010c0c:	89bb      	ldrh	r3, [r7, #12]
 8010c0e:	4413      	add	r3, r2
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010c16:	4619      	mov	r1, r3
 8010c18:	2036      	movs	r0, #54	; 0x36
 8010c1a:	f7fb fabf 	bl	800c19c <pbuf_alloc>
 8010c1e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010c20:	693b      	ldr	r3, [r7, #16]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	f000 80b7 	beq.w	8010d96 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	685b      	ldr	r3, [r3, #4]
 8010c2c:	891a      	ldrh	r2, [r3, #8]
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	891b      	ldrh	r3, [r3, #8]
 8010c32:	1ad3      	subs	r3, r2, r3
 8010c34:	b29a      	uxth	r2, r3
 8010c36:	887b      	ldrh	r3, [r7, #2]
 8010c38:	4413      	add	r3, r2
 8010c3a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	6858      	ldr	r0, [r3, #4]
 8010c40:	693b      	ldr	r3, [r7, #16]
 8010c42:	685a      	ldr	r2, [r3, #4]
 8010c44:	7bbb      	ldrb	r3, [r7, #14]
 8010c46:	18d1      	adds	r1, r2, r3
 8010c48:	897b      	ldrh	r3, [r7, #10]
 8010c4a:	89ba      	ldrh	r2, [r7, #12]
 8010c4c:	f7fb ff84 	bl	800cb58 <pbuf_copy_partial>
 8010c50:	4603      	mov	r3, r0
 8010c52:	461a      	mov	r2, r3
 8010c54:	89bb      	ldrh	r3, [r7, #12]
 8010c56:	4293      	cmp	r3, r2
 8010c58:	f040 809f 	bne.w	8010d9a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	68db      	ldr	r3, [r3, #12]
 8010c60:	899b      	ldrh	r3, [r3, #12]
 8010c62:	b29b      	uxth	r3, r3
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7fa fae1 	bl	800b22c <lwip_htons>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	b2db      	uxtb	r3, r3
 8010c6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c72:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010c74:	2300      	movs	r3, #0
 8010c76:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010c78:	7efb      	ldrb	r3, [r7, #27]
 8010c7a:	f003 0308 	and.w	r3, r3, #8
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d007      	beq.n	8010c92 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010c82:	7efb      	ldrb	r3, [r7, #27]
 8010c84:	f023 0308 	bic.w	r3, r3, #8
 8010c88:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010c8a:	7ebb      	ldrb	r3, [r7, #26]
 8010c8c:	f043 0308 	orr.w	r3, r3, #8
 8010c90:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010c92:	7efb      	ldrb	r3, [r7, #27]
 8010c94:	f003 0301 	and.w	r3, r3, #1
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d007      	beq.n	8010cac <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010c9c:	7efb      	ldrb	r3, [r7, #27]
 8010c9e:	f023 0301 	bic.w	r3, r3, #1
 8010ca2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010ca4:	7ebb      	ldrb	r3, [r7, #26]
 8010ca6:	f043 0301 	orr.w	r3, r3, #1
 8010caa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	68db      	ldr	r3, [r3, #12]
 8010cb0:	685b      	ldr	r3, [r3, #4]
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7fa facf 	bl	800b256 <lwip_htonl>
 8010cb8:	4602      	mov	r2, r0
 8010cba:	887b      	ldrh	r3, [r7, #2]
 8010cbc:	18d1      	adds	r1, r2, r3
 8010cbe:	7eba      	ldrb	r2, [r7, #26]
 8010cc0:	7bfb      	ldrb	r3, [r7, #15]
 8010cc2:	9300      	str	r3, [sp, #0]
 8010cc4:	460b      	mov	r3, r1
 8010cc6:	6939      	ldr	r1, [r7, #16]
 8010cc8:	6878      	ldr	r0, [r7, #4]
 8010cca:	f7ff fea7 	bl	8010a1c <tcp_create_segment>
 8010cce:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010cd0:	69fb      	ldr	r3, [r7, #28]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d063      	beq.n	8010d9e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	685b      	ldr	r3, [r3, #4]
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f7fb fdca 	bl	800c874 <pbuf_clen>
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	461a      	mov	r2, r3
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cea:	1a9b      	subs	r3, r3, r2
 8010cec:	b29a      	uxth	r2, r3
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	6858      	ldr	r0, [r3, #4]
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	685b      	ldr	r3, [r3, #4]
 8010cfc:	891a      	ldrh	r2, [r3, #8]
 8010cfe:	89bb      	ldrh	r3, [r7, #12]
 8010d00:	1ad3      	subs	r3, r2, r3
 8010d02:	b29b      	uxth	r3, r3
 8010d04:	4619      	mov	r1, r3
 8010d06:	f7fb fba7 	bl	800c458 <pbuf_realloc>
  useg->len -= remainder;
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	891a      	ldrh	r2, [r3, #8]
 8010d0e:	89bb      	ldrh	r3, [r7, #12]
 8010d10:	1ad3      	subs	r3, r2, r3
 8010d12:	b29a      	uxth	r2, r3
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	68db      	ldr	r3, [r3, #12]
 8010d1c:	899b      	ldrh	r3, [r3, #12]
 8010d1e:	b29c      	uxth	r4, r3
 8010d20:	7efb      	ldrb	r3, [r7, #27]
 8010d22:	b29b      	uxth	r3, r3
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7fa fa81 	bl	800b22c <lwip_htons>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	461a      	mov	r2, r3
 8010d2e:	697b      	ldr	r3, [r7, #20]
 8010d30:	68db      	ldr	r3, [r3, #12]
 8010d32:	4322      	orrs	r2, r4
 8010d34:	b292      	uxth	r2, r2
 8010d36:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	685b      	ldr	r3, [r3, #4]
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7fb fd99 	bl	800c874 <pbuf_clen>
 8010d42:	4603      	mov	r3, r0
 8010d44:	461a      	mov	r2, r3
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d4c:	4413      	add	r3, r2
 8010d4e:	b29a      	uxth	r2, r3
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010d56:	69fb      	ldr	r3, [r7, #28]
 8010d58:	685b      	ldr	r3, [r3, #4]
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f7fb fd8a 	bl	800c874 <pbuf_clen>
 8010d60:	4603      	mov	r3, r0
 8010d62:	461a      	mov	r2, r3
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d6a:	4413      	add	r3, r2
 8010d6c:	b29a      	uxth	r2, r3
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010d74:	697b      	ldr	r3, [r7, #20]
 8010d76:	681a      	ldr	r2, [r3, #0]
 8010d78:	69fb      	ldr	r3, [r7, #28]
 8010d7a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	69fa      	ldr	r2, [r7, #28]
 8010d80:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010d82:	69fb      	ldr	r3, [r7, #28]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d103      	bne.n	8010d92 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010d92:	2300      	movs	r3, #0
 8010d94:	e016      	b.n	8010dc4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010d96:	bf00      	nop
 8010d98:	e002      	b.n	8010da0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010d9a:	bf00      	nop
 8010d9c:	e000      	b.n	8010da0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010d9e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010da0:	69fb      	ldr	r3, [r7, #28]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d006      	beq.n	8010db4 <tcp_split_unsent_seg+0x25c>
 8010da6:	4b09      	ldr	r3, [pc, #36]	; (8010dcc <tcp_split_unsent_seg+0x274>)
 8010da8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010dac:	490d      	ldr	r1, [pc, #52]	; (8010de4 <tcp_split_unsent_seg+0x28c>)
 8010dae:	4809      	ldr	r0, [pc, #36]	; (8010dd4 <tcp_split_unsent_seg+0x27c>)
 8010db0:	f006 fd56 	bl	8017860 <iprintf>
  if (p != NULL) {
 8010db4:	693b      	ldr	r3, [r7, #16]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d002      	beq.n	8010dc0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010dba:	6938      	ldr	r0, [r7, #16]
 8010dbc:	f7fb fcd2 	bl	800c764 <pbuf_free>
  }

  return ERR_MEM;
 8010dc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	3724      	adds	r7, #36	; 0x24
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd90      	pop	{r4, r7, pc}
 8010dcc:	0801e2e4 	.word	0x0801e2e4
 8010dd0:	0801e678 	.word	0x0801e678
 8010dd4:	0801e338 	.word	0x0801e338
 8010dd8:	0801e69c 	.word	0x0801e69c
 8010ddc:	0801e6c0 	.word	0x0801e6c0
 8010de0:	0801e6d0 	.word	0x0801e6d0
 8010de4:	0801e6e0 	.word	0x0801e6e0

08010de8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010de8:	b590      	push	{r4, r7, lr}
 8010dea:	b085      	sub	sp, #20
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d106      	bne.n	8010e04 <tcp_send_fin+0x1c>
 8010df6:	4b21      	ldr	r3, [pc, #132]	; (8010e7c <tcp_send_fin+0x94>)
 8010df8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010dfc:	4920      	ldr	r1, [pc, #128]	; (8010e80 <tcp_send_fin+0x98>)
 8010dfe:	4821      	ldr	r0, [pc, #132]	; (8010e84 <tcp_send_fin+0x9c>)
 8010e00:	f006 fd2e 	bl	8017860 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d02e      	beq.n	8010e6a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e10:	60fb      	str	r3, [r7, #12]
 8010e12:	e002      	b.n	8010e1a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d1f8      	bne.n	8010e14 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	68db      	ldr	r3, [r3, #12]
 8010e26:	899b      	ldrh	r3, [r3, #12]
 8010e28:	b29b      	uxth	r3, r3
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7fa f9fe 	bl	800b22c <lwip_htons>
 8010e30:	4603      	mov	r3, r0
 8010e32:	b2db      	uxtb	r3, r3
 8010e34:	f003 0307 	and.w	r3, r3, #7
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d116      	bne.n	8010e6a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	68db      	ldr	r3, [r3, #12]
 8010e40:	899b      	ldrh	r3, [r3, #12]
 8010e42:	b29c      	uxth	r4, r3
 8010e44:	2001      	movs	r0, #1
 8010e46:	f7fa f9f1 	bl	800b22c <lwip_htons>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	461a      	mov	r2, r3
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	68db      	ldr	r3, [r3, #12]
 8010e52:	4322      	orrs	r2, r4
 8010e54:	b292      	uxth	r2, r2
 8010e56:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	8b5b      	ldrh	r3, [r3, #26]
 8010e5c:	f043 0320 	orr.w	r3, r3, #32
 8010e60:	b29a      	uxth	r2, r3
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010e66:	2300      	movs	r3, #0
 8010e68:	e004      	b.n	8010e74 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010e6a:	2101      	movs	r1, #1
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f000 f80b 	bl	8010e88 <tcp_enqueue_flags>
 8010e72:	4603      	mov	r3, r0
}
 8010e74:	4618      	mov	r0, r3
 8010e76:	3714      	adds	r7, #20
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd90      	pop	{r4, r7, pc}
 8010e7c:	0801e2e4 	.word	0x0801e2e4
 8010e80:	0801e6ec 	.word	0x0801e6ec
 8010e84:	0801e338 	.word	0x0801e338

08010e88 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b08a      	sub	sp, #40	; 0x28
 8010e8c:	af02      	add	r7, sp, #8
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	460b      	mov	r3, r1
 8010e92:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010e94:	2300      	movs	r3, #0
 8010e96:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010e98:	2300      	movs	r3, #0
 8010e9a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010e9c:	78fb      	ldrb	r3, [r7, #3]
 8010e9e:	f003 0303 	and.w	r3, r3, #3
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d106      	bne.n	8010eb4 <tcp_enqueue_flags+0x2c>
 8010ea6:	4b67      	ldr	r3, [pc, #412]	; (8011044 <tcp_enqueue_flags+0x1bc>)
 8010ea8:	f240 4211 	movw	r2, #1041	; 0x411
 8010eac:	4966      	ldr	r1, [pc, #408]	; (8011048 <tcp_enqueue_flags+0x1c0>)
 8010eae:	4867      	ldr	r0, [pc, #412]	; (801104c <tcp_enqueue_flags+0x1c4>)
 8010eb0:	f006 fcd6 	bl	8017860 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d106      	bne.n	8010ec8 <tcp_enqueue_flags+0x40>
 8010eba:	4b62      	ldr	r3, [pc, #392]	; (8011044 <tcp_enqueue_flags+0x1bc>)
 8010ebc:	f240 4213 	movw	r2, #1043	; 0x413
 8010ec0:	4963      	ldr	r1, [pc, #396]	; (8011050 <tcp_enqueue_flags+0x1c8>)
 8010ec2:	4862      	ldr	r0, [pc, #392]	; (801104c <tcp_enqueue_flags+0x1c4>)
 8010ec4:	f006 fccc 	bl	8017860 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010ec8:	78fb      	ldrb	r3, [r7, #3]
 8010eca:	f003 0302 	and.w	r3, r3, #2
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d001      	beq.n	8010ed6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010ed6:	7ffb      	ldrb	r3, [r7, #31]
 8010ed8:	009b      	lsls	r3, r3, #2
 8010eda:	b2db      	uxtb	r3, r3
 8010edc:	f003 0304 	and.w	r3, r3, #4
 8010ee0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010ee2:	7dfb      	ldrb	r3, [r7, #23]
 8010ee4:	b29b      	uxth	r3, r3
 8010ee6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010eea:	4619      	mov	r1, r3
 8010eec:	2036      	movs	r0, #54	; 0x36
 8010eee:	f7fb f955 	bl	800c19c <pbuf_alloc>
 8010ef2:	6138      	str	r0, [r7, #16]
 8010ef4:	693b      	ldr	r3, [r7, #16]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d109      	bne.n	8010f0e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	8b5b      	ldrh	r3, [r3, #26]
 8010efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f02:	b29a      	uxth	r2, r3
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010f08:	f04f 33ff 	mov.w	r3, #4294967295
 8010f0c:	e095      	b.n	801103a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010f0e:	693b      	ldr	r3, [r7, #16]
 8010f10:	895a      	ldrh	r2, [r3, #10]
 8010f12:	7dfb      	ldrb	r3, [r7, #23]
 8010f14:	b29b      	uxth	r3, r3
 8010f16:	429a      	cmp	r2, r3
 8010f18:	d206      	bcs.n	8010f28 <tcp_enqueue_flags+0xa0>
 8010f1a:	4b4a      	ldr	r3, [pc, #296]	; (8011044 <tcp_enqueue_flags+0x1bc>)
 8010f1c:	f240 4239 	movw	r2, #1081	; 0x439
 8010f20:	494c      	ldr	r1, [pc, #304]	; (8011054 <tcp_enqueue_flags+0x1cc>)
 8010f22:	484a      	ldr	r0, [pc, #296]	; (801104c <tcp_enqueue_flags+0x1c4>)
 8010f24:	f006 fc9c 	bl	8017860 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010f2c:	78fa      	ldrb	r2, [r7, #3]
 8010f2e:	7ffb      	ldrb	r3, [r7, #31]
 8010f30:	9300      	str	r3, [sp, #0]
 8010f32:	460b      	mov	r3, r1
 8010f34:	6939      	ldr	r1, [r7, #16]
 8010f36:	6878      	ldr	r0, [r7, #4]
 8010f38:	f7ff fd70 	bl	8010a1c <tcp_create_segment>
 8010f3c:	60f8      	str	r0, [r7, #12]
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d109      	bne.n	8010f58 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	8b5b      	ldrh	r3, [r3, #26]
 8010f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f4c:	b29a      	uxth	r2, r3
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010f52:	f04f 33ff 	mov.w	r3, #4294967295
 8010f56:	e070      	b.n	801103a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	68db      	ldr	r3, [r3, #12]
 8010f5c:	f003 0303 	and.w	r3, r3, #3
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d006      	beq.n	8010f72 <tcp_enqueue_flags+0xea>
 8010f64:	4b37      	ldr	r3, [pc, #220]	; (8011044 <tcp_enqueue_flags+0x1bc>)
 8010f66:	f240 4242 	movw	r2, #1090	; 0x442
 8010f6a:	493b      	ldr	r1, [pc, #236]	; (8011058 <tcp_enqueue_flags+0x1d0>)
 8010f6c:	4837      	ldr	r0, [pc, #220]	; (801104c <tcp_enqueue_flags+0x1c4>)
 8010f6e:	f006 fc77 	bl	8017860 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	891b      	ldrh	r3, [r3, #8]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d006      	beq.n	8010f88 <tcp_enqueue_flags+0x100>
 8010f7a:	4b32      	ldr	r3, [pc, #200]	; (8011044 <tcp_enqueue_flags+0x1bc>)
 8010f7c:	f240 4243 	movw	r2, #1091	; 0x443
 8010f80:	4936      	ldr	r1, [pc, #216]	; (801105c <tcp_enqueue_flags+0x1d4>)
 8010f82:	4832      	ldr	r0, [pc, #200]	; (801104c <tcp_enqueue_flags+0x1c4>)
 8010f84:	f006 fc6c 	bl	8017860 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d103      	bne.n	8010f98 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	68fa      	ldr	r2, [r7, #12]
 8010f94:	66da      	str	r2, [r3, #108]	; 0x6c
 8010f96:	e00d      	b.n	8010fb4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f9c:	61bb      	str	r3, [r7, #24]
 8010f9e:	e002      	b.n	8010fa6 <tcp_enqueue_flags+0x11e>
 8010fa0:	69bb      	ldr	r3, [r7, #24]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	61bb      	str	r3, [r7, #24]
 8010fa6:	69bb      	ldr	r3, [r7, #24]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d1f8      	bne.n	8010fa0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010fae:	69bb      	ldr	r3, [r7, #24]
 8010fb0:	68fa      	ldr	r2, [r7, #12]
 8010fb2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010fbc:	78fb      	ldrb	r3, [r7, #3]
 8010fbe:	f003 0302 	and.w	r3, r3, #2
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d104      	bne.n	8010fd0 <tcp_enqueue_flags+0x148>
 8010fc6:	78fb      	ldrb	r3, [r7, #3]
 8010fc8:	f003 0301 	and.w	r3, r3, #1
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d004      	beq.n	8010fda <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010fd4:	1c5a      	adds	r2, r3, #1
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010fda:	78fb      	ldrb	r3, [r7, #3]
 8010fdc:	f003 0301 	and.w	r3, r3, #1
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d006      	beq.n	8010ff2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	8b5b      	ldrh	r3, [r3, #26]
 8010fe8:	f043 0320 	orr.w	r3, r3, #32
 8010fec:	b29a      	uxth	r2, r3
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	685b      	ldr	r3, [r3, #4]
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f7fb fc3c 	bl	800c874 <pbuf_clen>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	461a      	mov	r2, r3
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011006:	4413      	add	r3, r2
 8011008:	b29a      	uxth	r2, r3
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011016:	2b00      	cmp	r3, #0
 8011018:	d00e      	beq.n	8011038 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801101e:	2b00      	cmp	r3, #0
 8011020:	d10a      	bne.n	8011038 <tcp_enqueue_flags+0x1b0>
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011026:	2b00      	cmp	r3, #0
 8011028:	d106      	bne.n	8011038 <tcp_enqueue_flags+0x1b0>
 801102a:	4b06      	ldr	r3, [pc, #24]	; (8011044 <tcp_enqueue_flags+0x1bc>)
 801102c:	f240 4265 	movw	r2, #1125	; 0x465
 8011030:	490b      	ldr	r1, [pc, #44]	; (8011060 <tcp_enqueue_flags+0x1d8>)
 8011032:	4806      	ldr	r0, [pc, #24]	; (801104c <tcp_enqueue_flags+0x1c4>)
 8011034:	f006 fc14 	bl	8017860 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011038:	2300      	movs	r3, #0
}
 801103a:	4618      	mov	r0, r3
 801103c:	3720      	adds	r7, #32
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}
 8011042:	bf00      	nop
 8011044:	0801e2e4 	.word	0x0801e2e4
 8011048:	0801e708 	.word	0x0801e708
 801104c:	0801e338 	.word	0x0801e338
 8011050:	0801e760 	.word	0x0801e760
 8011054:	0801e780 	.word	0x0801e780
 8011058:	0801e7bc 	.word	0x0801e7bc
 801105c:	0801e7d4 	.word	0x0801e7d4
 8011060:	0801e800 	.word	0x0801e800

08011064 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011064:	b5b0      	push	{r4, r5, r7, lr}
 8011066:	b08a      	sub	sp, #40	; 0x28
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d106      	bne.n	8011080 <tcp_output+0x1c>
 8011072:	4b9e      	ldr	r3, [pc, #632]	; (80112ec <tcp_output+0x288>)
 8011074:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011078:	499d      	ldr	r1, [pc, #628]	; (80112f0 <tcp_output+0x28c>)
 801107a:	489e      	ldr	r0, [pc, #632]	; (80112f4 <tcp_output+0x290>)
 801107c:	f006 fbf0 	bl	8017860 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	7d1b      	ldrb	r3, [r3, #20]
 8011084:	2b01      	cmp	r3, #1
 8011086:	d106      	bne.n	8011096 <tcp_output+0x32>
 8011088:	4b98      	ldr	r3, [pc, #608]	; (80112ec <tcp_output+0x288>)
 801108a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801108e:	499a      	ldr	r1, [pc, #616]	; (80112f8 <tcp_output+0x294>)
 8011090:	4898      	ldr	r0, [pc, #608]	; (80112f4 <tcp_output+0x290>)
 8011092:	f006 fbe5 	bl	8017860 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011096:	4b99      	ldr	r3, [pc, #612]	; (80112fc <tcp_output+0x298>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	687a      	ldr	r2, [r7, #4]
 801109c:	429a      	cmp	r2, r3
 801109e:	d101      	bne.n	80110a4 <tcp_output+0x40>
    return ERR_OK;
 80110a0:	2300      	movs	r3, #0
 80110a2:	e1ce      	b.n	8011442 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80110b0:	4293      	cmp	r3, r2
 80110b2:	bf28      	it	cs
 80110b4:	4613      	movcs	r3, r2
 80110b6:	b29b      	uxth	r3, r3
 80110b8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110be:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80110c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d10b      	bne.n	80110de <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	8b5b      	ldrh	r3, [r3, #26]
 80110ca:	f003 0302 	and.w	r3, r3, #2
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	f000 81aa 	beq.w	8011428 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f000 fdc9 	bl	8011c6c <tcp_send_empty_ack>
 80110da:	4603      	mov	r3, r0
 80110dc:	e1b1      	b.n	8011442 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80110de:	6879      	ldr	r1, [r7, #4]
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	3304      	adds	r3, #4
 80110e4:	461a      	mov	r2, r3
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	f7ff fc7c 	bl	80109e4 <tcp_route>
 80110ec:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d102      	bne.n	80110fa <tcp_output+0x96>
    return ERR_RTE;
 80110f4:	f06f 0303 	mvn.w	r3, #3
 80110f8:	e1a3      	b.n	8011442 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d003      	beq.n	8011108 <tcp_output+0xa4>
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d111      	bne.n	801112c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011108:	697b      	ldr	r3, [r7, #20]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d002      	beq.n	8011114 <tcp_output+0xb0>
 801110e:	697b      	ldr	r3, [r7, #20]
 8011110:	3304      	adds	r3, #4
 8011112:	e000      	b.n	8011116 <tcp_output+0xb2>
 8011114:	2300      	movs	r3, #0
 8011116:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011118:	693b      	ldr	r3, [r7, #16]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d102      	bne.n	8011124 <tcp_output+0xc0>
      return ERR_RTE;
 801111e:	f06f 0303 	mvn.w	r3, #3
 8011122:	e18e      	b.n	8011442 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011124:	693b      	ldr	r3, [r7, #16]
 8011126:	681a      	ldr	r2, [r3, #0]
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801112e:	68db      	ldr	r3, [r3, #12]
 8011130:	685b      	ldr	r3, [r3, #4]
 8011132:	4618      	mov	r0, r3
 8011134:	f7fa f88f 	bl	800b256 <lwip_htonl>
 8011138:	4602      	mov	r2, r0
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801113e:	1ad3      	subs	r3, r2, r3
 8011140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011142:	8912      	ldrh	r2, [r2, #8]
 8011144:	4413      	add	r3, r2
 8011146:	69ba      	ldr	r2, [r7, #24]
 8011148:	429a      	cmp	r2, r3
 801114a:	d227      	bcs.n	801119c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011152:	461a      	mov	r2, r3
 8011154:	69bb      	ldr	r3, [r7, #24]
 8011156:	4293      	cmp	r3, r2
 8011158:	d114      	bne.n	8011184 <tcp_output+0x120>
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801115e:	2b00      	cmp	r3, #0
 8011160:	d110      	bne.n	8011184 <tcp_output+0x120>
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011168:	2b00      	cmp	r3, #0
 801116a:	d10b      	bne.n	8011184 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2200      	movs	r2, #0
 8011170:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2201      	movs	r2, #1
 8011178:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2200      	movs	r2, #0
 8011180:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	8b5b      	ldrh	r3, [r3, #26]
 8011188:	f003 0302 	and.w	r3, r3, #2
 801118c:	2b00      	cmp	r3, #0
 801118e:	f000 814d 	beq.w	801142c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f000 fd6a 	bl	8011c6c <tcp_send_empty_ack>
 8011198:	4603      	mov	r3, r0
 801119a:	e152      	b.n	8011442 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2200      	movs	r2, #0
 80111a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111a8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80111aa:	6a3b      	ldr	r3, [r7, #32]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	f000 811c 	beq.w	80113ea <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80111b2:	e002      	b.n	80111ba <tcp_output+0x156>
 80111b4:	6a3b      	ldr	r3, [r7, #32]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	623b      	str	r3, [r7, #32]
 80111ba:	6a3b      	ldr	r3, [r7, #32]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d1f8      	bne.n	80111b4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80111c2:	e112      	b.n	80113ea <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80111c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c6:	68db      	ldr	r3, [r3, #12]
 80111c8:	899b      	ldrh	r3, [r3, #12]
 80111ca:	b29b      	uxth	r3, r3
 80111cc:	4618      	mov	r0, r3
 80111ce:	f7fa f82d 	bl	800b22c <lwip_htons>
 80111d2:	4603      	mov	r3, r0
 80111d4:	b2db      	uxtb	r3, r3
 80111d6:	f003 0304 	and.w	r3, r3, #4
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d006      	beq.n	80111ec <tcp_output+0x188>
 80111de:	4b43      	ldr	r3, [pc, #268]	; (80112ec <tcp_output+0x288>)
 80111e0:	f240 5236 	movw	r2, #1334	; 0x536
 80111e4:	4946      	ldr	r1, [pc, #280]	; (8011300 <tcp_output+0x29c>)
 80111e6:	4843      	ldr	r0, [pc, #268]	; (80112f4 <tcp_output+0x290>)
 80111e8:	f006 fb3a 	bl	8017860 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d01f      	beq.n	8011234 <tcp_output+0x1d0>
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	8b5b      	ldrh	r3, [r3, #26]
 80111f8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d119      	bne.n	8011234 <tcp_output+0x1d0>
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011204:	2b00      	cmp	r3, #0
 8011206:	d00b      	beq.n	8011220 <tcp_output+0x1bc>
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d110      	bne.n	8011234 <tcp_output+0x1d0>
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011216:	891a      	ldrh	r2, [r3, #8]
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801121c:	429a      	cmp	r2, r3
 801121e:	d209      	bcs.n	8011234 <tcp_output+0x1d0>
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011226:	2b00      	cmp	r3, #0
 8011228:	d004      	beq.n	8011234 <tcp_output+0x1d0>
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011230:	2b0f      	cmp	r3, #15
 8011232:	d901      	bls.n	8011238 <tcp_output+0x1d4>
 8011234:	2301      	movs	r3, #1
 8011236:	e000      	b.n	801123a <tcp_output+0x1d6>
 8011238:	2300      	movs	r3, #0
 801123a:	2b00      	cmp	r3, #0
 801123c:	d106      	bne.n	801124c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	8b5b      	ldrh	r3, [r3, #26]
 8011242:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011246:	2b00      	cmp	r3, #0
 8011248:	f000 80e4 	beq.w	8011414 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	7d1b      	ldrb	r3, [r3, #20]
 8011250:	2b02      	cmp	r3, #2
 8011252:	d00d      	beq.n	8011270 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011256:	68db      	ldr	r3, [r3, #12]
 8011258:	899b      	ldrh	r3, [r3, #12]
 801125a:	b29c      	uxth	r4, r3
 801125c:	2010      	movs	r0, #16
 801125e:	f7f9 ffe5 	bl	800b22c <lwip_htons>
 8011262:	4603      	mov	r3, r0
 8011264:	461a      	mov	r2, r3
 8011266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011268:	68db      	ldr	r3, [r3, #12]
 801126a:	4322      	orrs	r2, r4
 801126c:	b292      	uxth	r2, r2
 801126e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011270:	697a      	ldr	r2, [r7, #20]
 8011272:	6879      	ldr	r1, [r7, #4]
 8011274:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011276:	f000 f909 	bl	801148c <tcp_output_segment>
 801127a:	4603      	mov	r3, r0
 801127c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d009      	beq.n	801129a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	8b5b      	ldrh	r3, [r3, #26]
 801128a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801128e:	b29a      	uxth	r2, r3
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	835a      	strh	r2, [r3, #26]
      return err;
 8011294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011298:	e0d3      	b.n	8011442 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801129c:	681a      	ldr	r2, [r3, #0]
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	7d1b      	ldrb	r3, [r3, #20]
 80112a6:	2b02      	cmp	r3, #2
 80112a8:	d006      	beq.n	80112b8 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	8b5b      	ldrh	r3, [r3, #26]
 80112ae:	f023 0303 	bic.w	r3, r3, #3
 80112b2:	b29a      	uxth	r2, r3
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80112b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ba:	68db      	ldr	r3, [r3, #12]
 80112bc:	685b      	ldr	r3, [r3, #4]
 80112be:	4618      	mov	r0, r3
 80112c0:	f7f9 ffc9 	bl	800b256 <lwip_htonl>
 80112c4:	4604      	mov	r4, r0
 80112c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c8:	891b      	ldrh	r3, [r3, #8]
 80112ca:	461d      	mov	r5, r3
 80112cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ce:	68db      	ldr	r3, [r3, #12]
 80112d0:	899b      	ldrh	r3, [r3, #12]
 80112d2:	b29b      	uxth	r3, r3
 80112d4:	4618      	mov	r0, r3
 80112d6:	f7f9 ffa9 	bl	800b22c <lwip_htons>
 80112da:	4603      	mov	r3, r0
 80112dc:	b2db      	uxtb	r3, r3
 80112de:	f003 0303 	and.w	r3, r3, #3
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d00e      	beq.n	8011304 <tcp_output+0x2a0>
 80112e6:	2301      	movs	r3, #1
 80112e8:	e00d      	b.n	8011306 <tcp_output+0x2a2>
 80112ea:	bf00      	nop
 80112ec:	0801e2e4 	.word	0x0801e2e4
 80112f0:	0801e828 	.word	0x0801e828
 80112f4:	0801e338 	.word	0x0801e338
 80112f8:	0801e840 	.word	0x0801e840
 80112fc:	20006e50 	.word	0x20006e50
 8011300:	0801e868 	.word	0x0801e868
 8011304:	2300      	movs	r3, #0
 8011306:	442b      	add	r3, r5
 8011308:	4423      	add	r3, r4
 801130a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011310:	68bb      	ldr	r3, [r7, #8]
 8011312:	1ad3      	subs	r3, r2, r3
 8011314:	2b00      	cmp	r3, #0
 8011316:	da02      	bge.n	801131e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	68ba      	ldr	r2, [r7, #8]
 801131c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011320:	891b      	ldrh	r3, [r3, #8]
 8011322:	461c      	mov	r4, r3
 8011324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011326:	68db      	ldr	r3, [r3, #12]
 8011328:	899b      	ldrh	r3, [r3, #12]
 801132a:	b29b      	uxth	r3, r3
 801132c:	4618      	mov	r0, r3
 801132e:	f7f9 ff7d 	bl	800b22c <lwip_htons>
 8011332:	4603      	mov	r3, r0
 8011334:	b2db      	uxtb	r3, r3
 8011336:	f003 0303 	and.w	r3, r3, #3
 801133a:	2b00      	cmp	r3, #0
 801133c:	d001      	beq.n	8011342 <tcp_output+0x2de>
 801133e:	2301      	movs	r3, #1
 8011340:	e000      	b.n	8011344 <tcp_output+0x2e0>
 8011342:	2300      	movs	r3, #0
 8011344:	4423      	add	r3, r4
 8011346:	2b00      	cmp	r3, #0
 8011348:	d049      	beq.n	80113de <tcp_output+0x37a>
      seg->next = NULL;
 801134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801134c:	2200      	movs	r2, #0
 801134e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011354:	2b00      	cmp	r3, #0
 8011356:	d105      	bne.n	8011364 <tcp_output+0x300>
        pcb->unacked = seg;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801135c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011360:	623b      	str	r3, [r7, #32]
 8011362:	e03f      	b.n	80113e4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011366:	68db      	ldr	r3, [r3, #12]
 8011368:	685b      	ldr	r3, [r3, #4]
 801136a:	4618      	mov	r0, r3
 801136c:	f7f9 ff73 	bl	800b256 <lwip_htonl>
 8011370:	4604      	mov	r4, r0
 8011372:	6a3b      	ldr	r3, [r7, #32]
 8011374:	68db      	ldr	r3, [r3, #12]
 8011376:	685b      	ldr	r3, [r3, #4]
 8011378:	4618      	mov	r0, r3
 801137a:	f7f9 ff6c 	bl	800b256 <lwip_htonl>
 801137e:	4603      	mov	r3, r0
 8011380:	1ae3      	subs	r3, r4, r3
 8011382:	2b00      	cmp	r3, #0
 8011384:	da24      	bge.n	80113d0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	3370      	adds	r3, #112	; 0x70
 801138a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801138c:	e002      	b.n	8011394 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801138e:	69fb      	ldr	r3, [r7, #28]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011394:	69fb      	ldr	r3, [r7, #28]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d011      	beq.n	80113c0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801139c:	69fb      	ldr	r3, [r7, #28]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	68db      	ldr	r3, [r3, #12]
 80113a2:	685b      	ldr	r3, [r3, #4]
 80113a4:	4618      	mov	r0, r3
 80113a6:	f7f9 ff56 	bl	800b256 <lwip_htonl>
 80113aa:	4604      	mov	r4, r0
 80113ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ae:	68db      	ldr	r3, [r3, #12]
 80113b0:	685b      	ldr	r3, [r3, #4]
 80113b2:	4618      	mov	r0, r3
 80113b4:	f7f9 ff4f 	bl	800b256 <lwip_htonl>
 80113b8:	4603      	mov	r3, r0
 80113ba:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80113bc:	2b00      	cmp	r3, #0
 80113be:	dbe6      	blt.n	801138e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80113c0:	69fb      	ldr	r3, [r7, #28]
 80113c2:	681a      	ldr	r2, [r3, #0]
 80113c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80113c8:	69fb      	ldr	r3, [r7, #28]
 80113ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113cc:	601a      	str	r2, [r3, #0]
 80113ce:	e009      	b.n	80113e4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80113d0:	6a3b      	ldr	r3, [r7, #32]
 80113d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113d4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80113d6:	6a3b      	ldr	r3, [r7, #32]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	623b      	str	r3, [r7, #32]
 80113dc:	e002      	b.n	80113e4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80113de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80113e0:	f7fc fc43 	bl	800dc6a <tcp_seg_free>
    }
    seg = pcb->unsent;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113e8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80113ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d012      	beq.n	8011416 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80113f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f2:	68db      	ldr	r3, [r3, #12]
 80113f4:	685b      	ldr	r3, [r3, #4]
 80113f6:	4618      	mov	r0, r3
 80113f8:	f7f9 ff2d 	bl	800b256 <lwip_htonl>
 80113fc:	4602      	mov	r2, r0
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011402:	1ad3      	subs	r3, r2, r3
 8011404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011406:	8912      	ldrh	r2, [r2, #8]
 8011408:	4413      	add	r3, r2
  while (seg != NULL &&
 801140a:	69ba      	ldr	r2, [r7, #24]
 801140c:	429a      	cmp	r2, r3
 801140e:	f4bf aed9 	bcs.w	80111c4 <tcp_output+0x160>
 8011412:	e000      	b.n	8011416 <tcp_output+0x3b2>
      break;
 8011414:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801141a:	2b00      	cmp	r3, #0
 801141c:	d108      	bne.n	8011430 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	2200      	movs	r2, #0
 8011422:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011426:	e004      	b.n	8011432 <tcp_output+0x3ce>
    goto output_done;
 8011428:	bf00      	nop
 801142a:	e002      	b.n	8011432 <tcp_output+0x3ce>
    goto output_done;
 801142c:	bf00      	nop
 801142e:	e000      	b.n	8011432 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011430:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	8b5b      	ldrh	r3, [r3, #26]
 8011436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801143a:	b29a      	uxth	r2, r3
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011440:	2300      	movs	r3, #0
}
 8011442:	4618      	mov	r0, r3
 8011444:	3728      	adds	r7, #40	; 0x28
 8011446:	46bd      	mov	sp, r7
 8011448:	bdb0      	pop	{r4, r5, r7, pc}
 801144a:	bf00      	nop

0801144c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b082      	sub	sp, #8
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d106      	bne.n	8011468 <tcp_output_segment_busy+0x1c>
 801145a:	4b09      	ldr	r3, [pc, #36]	; (8011480 <tcp_output_segment_busy+0x34>)
 801145c:	f240 529a 	movw	r2, #1434	; 0x59a
 8011460:	4908      	ldr	r1, [pc, #32]	; (8011484 <tcp_output_segment_busy+0x38>)
 8011462:	4809      	ldr	r0, [pc, #36]	; (8011488 <tcp_output_segment_busy+0x3c>)
 8011464:	f006 f9fc 	bl	8017860 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	7b9b      	ldrb	r3, [r3, #14]
 801146e:	2b01      	cmp	r3, #1
 8011470:	d001      	beq.n	8011476 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011472:	2301      	movs	r3, #1
 8011474:	e000      	b.n	8011478 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011476:	2300      	movs	r3, #0
}
 8011478:	4618      	mov	r0, r3
 801147a:	3708      	adds	r7, #8
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}
 8011480:	0801e2e4 	.word	0x0801e2e4
 8011484:	0801e880 	.word	0x0801e880
 8011488:	0801e338 	.word	0x0801e338

0801148c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801148c:	b5b0      	push	{r4, r5, r7, lr}
 801148e:	b08c      	sub	sp, #48	; 0x30
 8011490:	af04      	add	r7, sp, #16
 8011492:	60f8      	str	r0, [r7, #12]
 8011494:	60b9      	str	r1, [r7, #8]
 8011496:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d106      	bne.n	80114ac <tcp_output_segment+0x20>
 801149e:	4b63      	ldr	r3, [pc, #396]	; (801162c <tcp_output_segment+0x1a0>)
 80114a0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80114a4:	4962      	ldr	r1, [pc, #392]	; (8011630 <tcp_output_segment+0x1a4>)
 80114a6:	4863      	ldr	r0, [pc, #396]	; (8011634 <tcp_output_segment+0x1a8>)
 80114a8:	f006 f9da 	bl	8017860 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d106      	bne.n	80114c0 <tcp_output_segment+0x34>
 80114b2:	4b5e      	ldr	r3, [pc, #376]	; (801162c <tcp_output_segment+0x1a0>)
 80114b4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80114b8:	495f      	ldr	r1, [pc, #380]	; (8011638 <tcp_output_segment+0x1ac>)
 80114ba:	485e      	ldr	r0, [pc, #376]	; (8011634 <tcp_output_segment+0x1a8>)
 80114bc:	f006 f9d0 	bl	8017860 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d106      	bne.n	80114d4 <tcp_output_segment+0x48>
 80114c6:	4b59      	ldr	r3, [pc, #356]	; (801162c <tcp_output_segment+0x1a0>)
 80114c8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80114cc:	495b      	ldr	r1, [pc, #364]	; (801163c <tcp_output_segment+0x1b0>)
 80114ce:	4859      	ldr	r0, [pc, #356]	; (8011634 <tcp_output_segment+0x1a8>)
 80114d0:	f006 f9c6 	bl	8017860 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80114d4:	68f8      	ldr	r0, [r7, #12]
 80114d6:	f7ff ffb9 	bl	801144c <tcp_output_segment_busy>
 80114da:	4603      	mov	r3, r0
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d001      	beq.n	80114e4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80114e0:	2300      	movs	r3, #0
 80114e2:	e09f      	b.n	8011624 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	68dc      	ldr	r4, [r3, #12]
 80114ec:	4610      	mov	r0, r2
 80114ee:	f7f9 feb2 	bl	800b256 <lwip_htonl>
 80114f2:	4603      	mov	r3, r0
 80114f4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	68dc      	ldr	r4, [r3, #12]
 80114fe:	4610      	mov	r0, r2
 8011500:	f7f9 fe94 	bl	800b22c <lwip_htons>
 8011504:	4603      	mov	r3, r0
 8011506:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801150c:	68ba      	ldr	r2, [r7, #8]
 801150e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011510:	441a      	add	r2, r3
 8011512:	68bb      	ldr	r3, [r7, #8]
 8011514:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	68db      	ldr	r3, [r3, #12]
 801151a:	3314      	adds	r3, #20
 801151c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	7a9b      	ldrb	r3, [r3, #10]
 8011522:	f003 0301 	and.w	r3, r3, #1
 8011526:	2b00      	cmp	r3, #0
 8011528:	d015      	beq.n	8011556 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	3304      	adds	r3, #4
 801152e:	461a      	mov	r2, r3
 8011530:	6879      	ldr	r1, [r7, #4]
 8011532:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 8011536:	f7fc fe8f 	bl	800e258 <tcp_eff_send_mss_netif>
 801153a:	4603      	mov	r3, r0
 801153c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801153e:	8b7b      	ldrh	r3, [r7, #26]
 8011540:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011544:	4618      	mov	r0, r3
 8011546:	f7f9 fe86 	bl	800b256 <lwip_htonl>
 801154a:	4602      	mov	r2, r0
 801154c:	69fb      	ldr	r3, [r7, #28]
 801154e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011550:	69fb      	ldr	r3, [r7, #28]
 8011552:	3304      	adds	r3, #4
 8011554:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801155c:	2b00      	cmp	r3, #0
 801155e:	da02      	bge.n	8011566 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011560:	68bb      	ldr	r3, [r7, #8]
 8011562:	2200      	movs	r2, #0
 8011564:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801156a:	2b00      	cmp	r3, #0
 801156c:	d10c      	bne.n	8011588 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801156e:	4b34      	ldr	r3, [pc, #208]	; (8011640 <tcp_output_segment+0x1b4>)
 8011570:	681a      	ldr	r2, [r3, #0]
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	68db      	ldr	r3, [r3, #12]
 801157a:	685b      	ldr	r3, [r3, #4]
 801157c:	4618      	mov	r0, r3
 801157e:	f7f9 fe6a 	bl	800b256 <lwip_htonl>
 8011582:	4602      	mov	r2, r0
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	68da      	ldr	r2, [r3, #12]
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	685b      	ldr	r3, [r3, #4]
 8011590:	685b      	ldr	r3, [r3, #4]
 8011592:	1ad3      	subs	r3, r2, r3
 8011594:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	685b      	ldr	r3, [r3, #4]
 801159a:	8959      	ldrh	r1, [r3, #10]
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	685b      	ldr	r3, [r3, #4]
 80115a0:	8b3a      	ldrh	r2, [r7, #24]
 80115a2:	1a8a      	subs	r2, r1, r2
 80115a4:	b292      	uxth	r2, r2
 80115a6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	685b      	ldr	r3, [r3, #4]
 80115ac:	8919      	ldrh	r1, [r3, #8]
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	685b      	ldr	r3, [r3, #4]
 80115b2:	8b3a      	ldrh	r2, [r7, #24]
 80115b4:	1a8a      	subs	r2, r1, r2
 80115b6:	b292      	uxth	r2, r2
 80115b8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	685b      	ldr	r3, [r3, #4]
 80115be:	68fa      	ldr	r2, [r7, #12]
 80115c0:	68d2      	ldr	r2, [r2, #12]
 80115c2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	68db      	ldr	r3, [r3, #12]
 80115c8:	2200      	movs	r2, #0
 80115ca:	741a      	strb	r2, [r3, #16]
 80115cc:	2200      	movs	r2, #0
 80115ce:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	68db      	ldr	r3, [r3, #12]
 80115d4:	f103 0214 	add.w	r2, r3, #20
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	7a9b      	ldrb	r3, [r3, #10]
 80115dc:	009b      	lsls	r3, r3, #2
 80115de:	f003 0304 	and.w	r3, r3, #4
 80115e2:	4413      	add	r3, r2
 80115e4:	69fa      	ldr	r2, [r7, #28]
 80115e6:	429a      	cmp	r2, r3
 80115e8:	d006      	beq.n	80115f8 <tcp_output_segment+0x16c>
 80115ea:	4b10      	ldr	r3, [pc, #64]	; (801162c <tcp_output_segment+0x1a0>)
 80115ec:	f240 621c 	movw	r2, #1564	; 0x61c
 80115f0:	4914      	ldr	r1, [pc, #80]	; (8011644 <tcp_output_segment+0x1b8>)
 80115f2:	4810      	ldr	r0, [pc, #64]	; (8011634 <tcp_output_segment+0x1a8>)
 80115f4:	f006 f934 	bl	8017860 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	6858      	ldr	r0, [r3, #4]
 80115fc:	68b9      	ldr	r1, [r7, #8]
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	1d1c      	adds	r4, r3, #4
 8011602:	68bb      	ldr	r3, [r7, #8]
 8011604:	7add      	ldrb	r5, [r3, #11]
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	7a9b      	ldrb	r3, [r3, #10]
 801160a:	687a      	ldr	r2, [r7, #4]
 801160c:	9202      	str	r2, [sp, #8]
 801160e:	2206      	movs	r2, #6
 8011610:	9201      	str	r2, [sp, #4]
 8011612:	9300      	str	r3, [sp, #0]
 8011614:	462b      	mov	r3, r5
 8011616:	4622      	mov	r2, r4
 8011618:	f004 fb6c 	bl	8015cf4 <ip4_output_if>
 801161c:	4603      	mov	r3, r0
 801161e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011620:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011624:	4618      	mov	r0, r3
 8011626:	3720      	adds	r7, #32
 8011628:	46bd      	mov	sp, r7
 801162a:	bdb0      	pop	{r4, r5, r7, pc}
 801162c:	0801e2e4 	.word	0x0801e2e4
 8011630:	0801e8a8 	.word	0x0801e8a8
 8011634:	0801e338 	.word	0x0801e338
 8011638:	0801e8c8 	.word	0x0801e8c8
 801163c:	0801e8e8 	.word	0x0801e8e8
 8011640:	20006e40 	.word	0x20006e40
 8011644:	0801e90c 	.word	0x0801e90c

08011648 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011648:	b5b0      	push	{r4, r5, r7, lr}
 801164a:	b084      	sub	sp, #16
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d106      	bne.n	8011664 <tcp_rexmit_rto_prepare+0x1c>
 8011656:	4b31      	ldr	r3, [pc, #196]	; (801171c <tcp_rexmit_rto_prepare+0xd4>)
 8011658:	f240 6263 	movw	r2, #1635	; 0x663
 801165c:	4930      	ldr	r1, [pc, #192]	; (8011720 <tcp_rexmit_rto_prepare+0xd8>)
 801165e:	4831      	ldr	r0, [pc, #196]	; (8011724 <tcp_rexmit_rto_prepare+0xdc>)
 8011660:	f006 f8fe 	bl	8017860 <iprintf>

  if (pcb->unacked == NULL) {
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011668:	2b00      	cmp	r3, #0
 801166a:	d102      	bne.n	8011672 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801166c:	f06f 0305 	mvn.w	r3, #5
 8011670:	e050      	b.n	8011714 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011676:	60fb      	str	r3, [r7, #12]
 8011678:	e00b      	b.n	8011692 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801167a:	68f8      	ldr	r0, [r7, #12]
 801167c:	f7ff fee6 	bl	801144c <tcp_output_segment_busy>
 8011680:	4603      	mov	r3, r0
 8011682:	2b00      	cmp	r3, #0
 8011684:	d002      	beq.n	801168c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011686:	f06f 0305 	mvn.w	r3, #5
 801168a:	e043      	b.n	8011714 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	60fb      	str	r3, [r7, #12]
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d1ef      	bne.n	801167a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801169a:	68f8      	ldr	r0, [r7, #12]
 801169c:	f7ff fed6 	bl	801144c <tcp_output_segment_busy>
 80116a0:	4603      	mov	r3, r0
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d002      	beq.n	80116ac <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80116a6:	f06f 0305 	mvn.w	r3, #5
 80116aa:	e033      	b.n	8011714 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	2200      	movs	r2, #0
 80116c0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	8b5b      	ldrh	r3, [r3, #26]
 80116c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80116ca:	b29a      	uxth	r2, r3
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	68db      	ldr	r3, [r3, #12]
 80116d4:	685b      	ldr	r3, [r3, #4]
 80116d6:	4618      	mov	r0, r3
 80116d8:	f7f9 fdbd 	bl	800b256 <lwip_htonl>
 80116dc:	4604      	mov	r4, r0
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	891b      	ldrh	r3, [r3, #8]
 80116e2:	461d      	mov	r5, r3
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	68db      	ldr	r3, [r3, #12]
 80116e8:	899b      	ldrh	r3, [r3, #12]
 80116ea:	b29b      	uxth	r3, r3
 80116ec:	4618      	mov	r0, r3
 80116ee:	f7f9 fd9d 	bl	800b22c <lwip_htons>
 80116f2:	4603      	mov	r3, r0
 80116f4:	b2db      	uxtb	r3, r3
 80116f6:	f003 0303 	and.w	r3, r3, #3
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d001      	beq.n	8011702 <tcp_rexmit_rto_prepare+0xba>
 80116fe:	2301      	movs	r3, #1
 8011700:	e000      	b.n	8011704 <tcp_rexmit_rto_prepare+0xbc>
 8011702:	2300      	movs	r3, #0
 8011704:	442b      	add	r3, r5
 8011706:	18e2      	adds	r2, r4, r3
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2200      	movs	r2, #0
 8011710:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011712:	2300      	movs	r3, #0
}
 8011714:	4618      	mov	r0, r3
 8011716:	3710      	adds	r7, #16
 8011718:	46bd      	mov	sp, r7
 801171a:	bdb0      	pop	{r4, r5, r7, pc}
 801171c:	0801e2e4 	.word	0x0801e2e4
 8011720:	0801e920 	.word	0x0801e920
 8011724:	0801e338 	.word	0x0801e338

08011728 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b082      	sub	sp, #8
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d106      	bne.n	8011744 <tcp_rexmit_rto_commit+0x1c>
 8011736:	4b0d      	ldr	r3, [pc, #52]	; (801176c <tcp_rexmit_rto_commit+0x44>)
 8011738:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801173c:	490c      	ldr	r1, [pc, #48]	; (8011770 <tcp_rexmit_rto_commit+0x48>)
 801173e:	480d      	ldr	r0, [pc, #52]	; (8011774 <tcp_rexmit_rto_commit+0x4c>)
 8011740:	f006 f88e 	bl	8017860 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801174a:	2bff      	cmp	r3, #255	; 0xff
 801174c:	d007      	beq.n	801175e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011754:	3301      	adds	r3, #1
 8011756:	b2da      	uxtb	r2, r3
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801175e:	6878      	ldr	r0, [r7, #4]
 8011760:	f7ff fc80 	bl	8011064 <tcp_output>
}
 8011764:	bf00      	nop
 8011766:	3708      	adds	r7, #8
 8011768:	46bd      	mov	sp, r7
 801176a:	bd80      	pop	{r7, pc}
 801176c:	0801e2e4 	.word	0x0801e2e4
 8011770:	0801e944 	.word	0x0801e944
 8011774:	0801e338 	.word	0x0801e338

08011778 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b082      	sub	sp, #8
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d106      	bne.n	8011794 <tcp_rexmit_rto+0x1c>
 8011786:	4b0a      	ldr	r3, [pc, #40]	; (80117b0 <tcp_rexmit_rto+0x38>)
 8011788:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801178c:	4909      	ldr	r1, [pc, #36]	; (80117b4 <tcp_rexmit_rto+0x3c>)
 801178e:	480a      	ldr	r0, [pc, #40]	; (80117b8 <tcp_rexmit_rto+0x40>)
 8011790:	f006 f866 	bl	8017860 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011794:	6878      	ldr	r0, [r7, #4]
 8011796:	f7ff ff57 	bl	8011648 <tcp_rexmit_rto_prepare>
 801179a:	4603      	mov	r3, r0
 801179c:	2b00      	cmp	r3, #0
 801179e:	d102      	bne.n	80117a6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80117a0:	6878      	ldr	r0, [r7, #4]
 80117a2:	f7ff ffc1 	bl	8011728 <tcp_rexmit_rto_commit>
  }
}
 80117a6:	bf00      	nop
 80117a8:	3708      	adds	r7, #8
 80117aa:	46bd      	mov	sp, r7
 80117ac:	bd80      	pop	{r7, pc}
 80117ae:	bf00      	nop
 80117b0:	0801e2e4 	.word	0x0801e2e4
 80117b4:	0801e968 	.word	0x0801e968
 80117b8:	0801e338 	.word	0x0801e338

080117bc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80117bc:	b590      	push	{r4, r7, lr}
 80117be:	b085      	sub	sp, #20
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d106      	bne.n	80117d8 <tcp_rexmit+0x1c>
 80117ca:	4b2f      	ldr	r3, [pc, #188]	; (8011888 <tcp_rexmit+0xcc>)
 80117cc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80117d0:	492e      	ldr	r1, [pc, #184]	; (801188c <tcp_rexmit+0xd0>)
 80117d2:	482f      	ldr	r0, [pc, #188]	; (8011890 <tcp_rexmit+0xd4>)
 80117d4:	f006 f844 	bl	8017860 <iprintf>

  if (pcb->unacked == NULL) {
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d102      	bne.n	80117e6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80117e0:	f06f 0305 	mvn.w	r3, #5
 80117e4:	e04c      	b.n	8011880 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117ea:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80117ec:	68b8      	ldr	r0, [r7, #8]
 80117ee:	f7ff fe2d 	bl	801144c <tcp_output_segment_busy>
 80117f2:	4603      	mov	r3, r0
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d002      	beq.n	80117fe <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80117f8:	f06f 0305 	mvn.w	r3, #5
 80117fc:	e040      	b.n	8011880 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80117fe:	68bb      	ldr	r3, [r7, #8]
 8011800:	681a      	ldr	r2, [r3, #0]
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	336c      	adds	r3, #108	; 0x6c
 801180a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801180c:	e002      	b.n	8011814 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d011      	beq.n	8011840 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	68db      	ldr	r3, [r3, #12]
 8011822:	685b      	ldr	r3, [r3, #4]
 8011824:	4618      	mov	r0, r3
 8011826:	f7f9 fd16 	bl	800b256 <lwip_htonl>
 801182a:	4604      	mov	r4, r0
 801182c:	68bb      	ldr	r3, [r7, #8]
 801182e:	68db      	ldr	r3, [r3, #12]
 8011830:	685b      	ldr	r3, [r3, #4]
 8011832:	4618      	mov	r0, r3
 8011834:	f7f9 fd0f 	bl	800b256 <lwip_htonl>
 8011838:	4603      	mov	r3, r0
 801183a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801183c:	2b00      	cmp	r3, #0
 801183e:	dbe6      	blt.n	801180e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	681a      	ldr	r2, [r3, #0]
 8011844:	68bb      	ldr	r3, [r7, #8]
 8011846:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	68ba      	ldr	r2, [r7, #8]
 801184c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d103      	bne.n	801185e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	2200      	movs	r2, #0
 801185a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011864:	2bff      	cmp	r3, #255	; 0xff
 8011866:	d007      	beq.n	8011878 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801186e:	3301      	adds	r3, #1
 8011870:	b2da      	uxtb	r2, r3
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	2200      	movs	r2, #0
 801187c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801187e:	2300      	movs	r3, #0
}
 8011880:	4618      	mov	r0, r3
 8011882:	3714      	adds	r7, #20
 8011884:	46bd      	mov	sp, r7
 8011886:	bd90      	pop	{r4, r7, pc}
 8011888:	0801e2e4 	.word	0x0801e2e4
 801188c:	0801e984 	.word	0x0801e984
 8011890:	0801e338 	.word	0x0801e338

08011894 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b082      	sub	sp, #8
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d106      	bne.n	80118b0 <tcp_rexmit_fast+0x1c>
 80118a2:	4b2a      	ldr	r3, [pc, #168]	; (801194c <tcp_rexmit_fast+0xb8>)
 80118a4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80118a8:	4929      	ldr	r1, [pc, #164]	; (8011950 <tcp_rexmit_fast+0xbc>)
 80118aa:	482a      	ldr	r0, [pc, #168]	; (8011954 <tcp_rexmit_fast+0xc0>)
 80118ac:	f005 ffd8 	bl	8017860 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d044      	beq.n	8011942 <tcp_rexmit_fast+0xae>
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	8b5b      	ldrh	r3, [r3, #26]
 80118bc:	f003 0304 	and.w	r3, r3, #4
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d13e      	bne.n	8011942 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80118c4:	6878      	ldr	r0, [r7, #4]
 80118c6:	f7ff ff79 	bl	80117bc <tcp_rexmit>
 80118ca:	4603      	mov	r3, r0
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d138      	bne.n	8011942 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80118dc:	4293      	cmp	r3, r2
 80118de:	bf28      	it	cs
 80118e0:	4613      	movcs	r3, r2
 80118e2:	b29b      	uxth	r3, r3
 80118e4:	0fda      	lsrs	r2, r3, #31
 80118e6:	4413      	add	r3, r2
 80118e8:	105b      	asrs	r3, r3, #1
 80118ea:	b29a      	uxth	r2, r3
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80118f8:	461a      	mov	r2, r3
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118fe:	005b      	lsls	r3, r3, #1
 8011900:	429a      	cmp	r2, r3
 8011902:	d206      	bcs.n	8011912 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011908:	005b      	lsls	r3, r3, #1
 801190a:	b29a      	uxth	r2, r3
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801191c:	4619      	mov	r1, r3
 801191e:	0049      	lsls	r1, r1, #1
 8011920:	440b      	add	r3, r1
 8011922:	b29b      	uxth	r3, r3
 8011924:	4413      	add	r3, r2
 8011926:	b29a      	uxth	r2, r3
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	8b5b      	ldrh	r3, [r3, #26]
 8011932:	f043 0304 	orr.w	r3, r3, #4
 8011936:	b29a      	uxth	r2, r3
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	2200      	movs	r2, #0
 8011940:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8011942:	bf00      	nop
 8011944:	3708      	adds	r7, #8
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}
 801194a:	bf00      	nop
 801194c:	0801e2e4 	.word	0x0801e2e4
 8011950:	0801e99c 	.word	0x0801e99c
 8011954:	0801e338 	.word	0x0801e338

08011958 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b086      	sub	sp, #24
 801195c:	af00      	add	r7, sp, #0
 801195e:	60f8      	str	r0, [r7, #12]
 8011960:	607b      	str	r3, [r7, #4]
 8011962:	460b      	mov	r3, r1
 8011964:	817b      	strh	r3, [r7, #10]
 8011966:	4613      	mov	r3, r2
 8011968:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801196a:	897a      	ldrh	r2, [r7, #10]
 801196c:	893b      	ldrh	r3, [r7, #8]
 801196e:	4413      	add	r3, r2
 8011970:	b29b      	uxth	r3, r3
 8011972:	3314      	adds	r3, #20
 8011974:	b29b      	uxth	r3, r3
 8011976:	f44f 7220 	mov.w	r2, #640	; 0x280
 801197a:	4619      	mov	r1, r3
 801197c:	2022      	movs	r0, #34	; 0x22
 801197e:	f7fa fc0d 	bl	800c19c <pbuf_alloc>
 8011982:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011984:	697b      	ldr	r3, [r7, #20]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d04d      	beq.n	8011a26 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801198a:	897b      	ldrh	r3, [r7, #10]
 801198c:	3313      	adds	r3, #19
 801198e:	697a      	ldr	r2, [r7, #20]
 8011990:	8952      	ldrh	r2, [r2, #10]
 8011992:	4293      	cmp	r3, r2
 8011994:	db06      	blt.n	80119a4 <tcp_output_alloc_header_common+0x4c>
 8011996:	4b26      	ldr	r3, [pc, #152]	; (8011a30 <tcp_output_alloc_header_common+0xd8>)
 8011998:	f240 7223 	movw	r2, #1827	; 0x723
 801199c:	4925      	ldr	r1, [pc, #148]	; (8011a34 <tcp_output_alloc_header_common+0xdc>)
 801199e:	4826      	ldr	r0, [pc, #152]	; (8011a38 <tcp_output_alloc_header_common+0xe0>)
 80119a0:	f005 ff5e 	bl	8017860 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80119a4:	697b      	ldr	r3, [r7, #20]
 80119a6:	685b      	ldr	r3, [r3, #4]
 80119a8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80119aa:	8c3b      	ldrh	r3, [r7, #32]
 80119ac:	4618      	mov	r0, r3
 80119ae:	f7f9 fc3d 	bl	800b22c <lwip_htons>
 80119b2:	4603      	mov	r3, r0
 80119b4:	461a      	mov	r2, r3
 80119b6:	693b      	ldr	r3, [r7, #16]
 80119b8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80119ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80119bc:	4618      	mov	r0, r3
 80119be:	f7f9 fc35 	bl	800b22c <lwip_htons>
 80119c2:	4603      	mov	r3, r0
 80119c4:	461a      	mov	r2, r3
 80119c6:	693b      	ldr	r3, [r7, #16]
 80119c8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80119ca:	693b      	ldr	r3, [r7, #16]
 80119cc:	687a      	ldr	r2, [r7, #4]
 80119ce:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80119d0:	68f8      	ldr	r0, [r7, #12]
 80119d2:	f7f9 fc40 	bl	800b256 <lwip_htonl>
 80119d6:	4602      	mov	r2, r0
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80119dc:	897b      	ldrh	r3, [r7, #10]
 80119de:	089b      	lsrs	r3, r3, #2
 80119e0:	b29b      	uxth	r3, r3
 80119e2:	3305      	adds	r3, #5
 80119e4:	b29b      	uxth	r3, r3
 80119e6:	031b      	lsls	r3, r3, #12
 80119e8:	b29a      	uxth	r2, r3
 80119ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80119ee:	b29b      	uxth	r3, r3
 80119f0:	4313      	orrs	r3, r2
 80119f2:	b29b      	uxth	r3, r3
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7f9 fc19 	bl	800b22c <lwip_htons>
 80119fa:	4603      	mov	r3, r0
 80119fc:	461a      	mov	r2, r3
 80119fe:	693b      	ldr	r3, [r7, #16]
 8011a00:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011a02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011a04:	4618      	mov	r0, r3
 8011a06:	f7f9 fc11 	bl	800b22c <lwip_htons>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	461a      	mov	r2, r3
 8011a0e:	693b      	ldr	r3, [r7, #16]
 8011a10:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011a12:	693b      	ldr	r3, [r7, #16]
 8011a14:	2200      	movs	r2, #0
 8011a16:	741a      	strb	r2, [r3, #16]
 8011a18:	2200      	movs	r2, #0
 8011a1a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011a1c:	693b      	ldr	r3, [r7, #16]
 8011a1e:	2200      	movs	r2, #0
 8011a20:	749a      	strb	r2, [r3, #18]
 8011a22:	2200      	movs	r2, #0
 8011a24:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011a26:	697b      	ldr	r3, [r7, #20]
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3718      	adds	r7, #24
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}
 8011a30:	0801e2e4 	.word	0x0801e2e4
 8011a34:	0801e9bc 	.word	0x0801e9bc
 8011a38:	0801e338 	.word	0x0801e338

08011a3c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011a3c:	b5b0      	push	{r4, r5, r7, lr}
 8011a3e:	b08a      	sub	sp, #40	; 0x28
 8011a40:	af04      	add	r7, sp, #16
 8011a42:	60f8      	str	r0, [r7, #12]
 8011a44:	607b      	str	r3, [r7, #4]
 8011a46:	460b      	mov	r3, r1
 8011a48:	817b      	strh	r3, [r7, #10]
 8011a4a:	4613      	mov	r3, r2
 8011a4c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d106      	bne.n	8011a62 <tcp_output_alloc_header+0x26>
 8011a54:	4b15      	ldr	r3, [pc, #84]	; (8011aac <tcp_output_alloc_header+0x70>)
 8011a56:	f240 7242 	movw	r2, #1858	; 0x742
 8011a5a:	4915      	ldr	r1, [pc, #84]	; (8011ab0 <tcp_output_alloc_header+0x74>)
 8011a5c:	4815      	ldr	r0, [pc, #84]	; (8011ab4 <tcp_output_alloc_header+0x78>)
 8011a5e:	f005 feff 	bl	8017860 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	8adb      	ldrh	r3, [r3, #22]
 8011a6a:	68fa      	ldr	r2, [r7, #12]
 8011a6c:	8b12      	ldrh	r2, [r2, #24]
 8011a6e:	68f9      	ldr	r1, [r7, #12]
 8011a70:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011a72:	893d      	ldrh	r5, [r7, #8]
 8011a74:	897c      	ldrh	r4, [r7, #10]
 8011a76:	9103      	str	r1, [sp, #12]
 8011a78:	2110      	movs	r1, #16
 8011a7a:	9102      	str	r1, [sp, #8]
 8011a7c:	9201      	str	r2, [sp, #4]
 8011a7e:	9300      	str	r3, [sp, #0]
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	462a      	mov	r2, r5
 8011a84:	4621      	mov	r1, r4
 8011a86:	f7ff ff67 	bl	8011958 <tcp_output_alloc_header_common>
 8011a8a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d006      	beq.n	8011aa0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a96:	68fa      	ldr	r2, [r7, #12]
 8011a98:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011a9a:	441a      	add	r2, r3
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011aa0:	697b      	ldr	r3, [r7, #20]
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3718      	adds	r7, #24
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8011aaa:	bf00      	nop
 8011aac:	0801e2e4 	.word	0x0801e2e4
 8011ab0:	0801e9ec 	.word	0x0801e9ec
 8011ab4:	0801e338 	.word	0x0801e338

08011ab8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b088      	sub	sp, #32
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	60f8      	str	r0, [r7, #12]
 8011ac0:	60b9      	str	r1, [r7, #8]
 8011ac2:	4611      	mov	r1, r2
 8011ac4:	461a      	mov	r2, r3
 8011ac6:	460b      	mov	r3, r1
 8011ac8:	71fb      	strb	r3, [r7, #7]
 8011aca:	4613      	mov	r3, r2
 8011acc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011ad2:	68bb      	ldr	r3, [r7, #8]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d106      	bne.n	8011ae6 <tcp_output_fill_options+0x2e>
 8011ad8:	4b13      	ldr	r3, [pc, #76]	; (8011b28 <tcp_output_fill_options+0x70>)
 8011ada:	f240 7256 	movw	r2, #1878	; 0x756
 8011ade:	4913      	ldr	r1, [pc, #76]	; (8011b2c <tcp_output_fill_options+0x74>)
 8011ae0:	4813      	ldr	r0, [pc, #76]	; (8011b30 <tcp_output_fill_options+0x78>)
 8011ae2:	f005 febd 	bl	8017860 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011ae6:	68bb      	ldr	r3, [r7, #8]
 8011ae8:	685b      	ldr	r3, [r3, #4]
 8011aea:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011aec:	69bb      	ldr	r3, [r7, #24]
 8011aee:	3314      	adds	r3, #20
 8011af0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011af2:	69bb      	ldr	r3, [r7, #24]
 8011af4:	f103 0214 	add.w	r2, r3, #20
 8011af8:	8bfb      	ldrh	r3, [r7, #30]
 8011afa:	009b      	lsls	r3, r3, #2
 8011afc:	4619      	mov	r1, r3
 8011afe:	79fb      	ldrb	r3, [r7, #7]
 8011b00:	009b      	lsls	r3, r3, #2
 8011b02:	f003 0304 	and.w	r3, r3, #4
 8011b06:	440b      	add	r3, r1
 8011b08:	4413      	add	r3, r2
 8011b0a:	697a      	ldr	r2, [r7, #20]
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	d006      	beq.n	8011b1e <tcp_output_fill_options+0x66>
 8011b10:	4b05      	ldr	r3, [pc, #20]	; (8011b28 <tcp_output_fill_options+0x70>)
 8011b12:	f240 7275 	movw	r2, #1909	; 0x775
 8011b16:	4907      	ldr	r1, [pc, #28]	; (8011b34 <tcp_output_fill_options+0x7c>)
 8011b18:	4805      	ldr	r0, [pc, #20]	; (8011b30 <tcp_output_fill_options+0x78>)
 8011b1a:	f005 fea1 	bl	8017860 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011b1e:	bf00      	nop
 8011b20:	3720      	adds	r7, #32
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd80      	pop	{r7, pc}
 8011b26:	bf00      	nop
 8011b28:	0801e2e4 	.word	0x0801e2e4
 8011b2c:	0801ea14 	.word	0x0801ea14
 8011b30:	0801e338 	.word	0x0801e338
 8011b34:	0801e90c 	.word	0x0801e90c

08011b38 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b08a      	sub	sp, #40	; 0x28
 8011b3c:	af04      	add	r7, sp, #16
 8011b3e:	60f8      	str	r0, [r7, #12]
 8011b40:	60b9      	str	r1, [r7, #8]
 8011b42:	607a      	str	r2, [r7, #4]
 8011b44:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011b46:	68bb      	ldr	r3, [r7, #8]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d106      	bne.n	8011b5a <tcp_output_control_segment+0x22>
 8011b4c:	4b1c      	ldr	r3, [pc, #112]	; (8011bc0 <tcp_output_control_segment+0x88>)
 8011b4e:	f240 7287 	movw	r2, #1927	; 0x787
 8011b52:	491c      	ldr	r1, [pc, #112]	; (8011bc4 <tcp_output_control_segment+0x8c>)
 8011b54:	481c      	ldr	r0, [pc, #112]	; (8011bc8 <tcp_output_control_segment+0x90>)
 8011b56:	f005 fe83 	bl	8017860 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011b5a:	683a      	ldr	r2, [r7, #0]
 8011b5c:	6879      	ldr	r1, [r7, #4]
 8011b5e:	68f8      	ldr	r0, [r7, #12]
 8011b60:	f7fe ff40 	bl	80109e4 <tcp_route>
 8011b64:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d102      	bne.n	8011b72 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011b6c:	23fc      	movs	r3, #252	; 0xfc
 8011b6e:	75fb      	strb	r3, [r7, #23]
 8011b70:	e01c      	b.n	8011bac <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d006      	beq.n	8011b86 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	7adb      	ldrb	r3, [r3, #11]
 8011b7c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	7a9b      	ldrb	r3, [r3, #10]
 8011b82:	757b      	strb	r3, [r7, #21]
 8011b84:	e003      	b.n	8011b8e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011b86:	23ff      	movs	r3, #255	; 0xff
 8011b88:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011b8e:	7dba      	ldrb	r2, [r7, #22]
 8011b90:	693b      	ldr	r3, [r7, #16]
 8011b92:	9302      	str	r3, [sp, #8]
 8011b94:	2306      	movs	r3, #6
 8011b96:	9301      	str	r3, [sp, #4]
 8011b98:	7d7b      	ldrb	r3, [r7, #21]
 8011b9a:	9300      	str	r3, [sp, #0]
 8011b9c:	4613      	mov	r3, r2
 8011b9e:	683a      	ldr	r2, [r7, #0]
 8011ba0:	6879      	ldr	r1, [r7, #4]
 8011ba2:	68b8      	ldr	r0, [r7, #8]
 8011ba4:	f004 f8a6 	bl	8015cf4 <ip4_output_if>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011bac:	68b8      	ldr	r0, [r7, #8]
 8011bae:	f7fa fdd9 	bl	800c764 <pbuf_free>
  return err;
 8011bb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	3718      	adds	r7, #24
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd80      	pop	{r7, pc}
 8011bbe:	bf00      	nop
 8011bc0:	0801e2e4 	.word	0x0801e2e4
 8011bc4:	0801ea3c 	.word	0x0801ea3c
 8011bc8:	0801e338 	.word	0x0801e338

08011bcc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011bcc:	b590      	push	{r4, r7, lr}
 8011bce:	b08b      	sub	sp, #44	; 0x2c
 8011bd0:	af04      	add	r7, sp, #16
 8011bd2:	60f8      	str	r0, [r7, #12]
 8011bd4:	60b9      	str	r1, [r7, #8]
 8011bd6:	607a      	str	r2, [r7, #4]
 8011bd8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d106      	bne.n	8011bee <tcp_rst+0x22>
 8011be0:	4b1e      	ldr	r3, [pc, #120]	; (8011c5c <tcp_rst+0x90>)
 8011be2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011be6:	491e      	ldr	r1, [pc, #120]	; (8011c60 <tcp_rst+0x94>)
 8011be8:	481e      	ldr	r0, [pc, #120]	; (8011c64 <tcp_rst+0x98>)
 8011bea:	f005 fe39 	bl	8017860 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d106      	bne.n	8011c02 <tcp_rst+0x36>
 8011bf4:	4b19      	ldr	r3, [pc, #100]	; (8011c5c <tcp_rst+0x90>)
 8011bf6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011bfa:	491b      	ldr	r1, [pc, #108]	; (8011c68 <tcp_rst+0x9c>)
 8011bfc:	4819      	ldr	r0, [pc, #100]	; (8011c64 <tcp_rst+0x98>)
 8011bfe:	f005 fe2f 	bl	8017860 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011c02:	2300      	movs	r3, #0
 8011c04:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011c06:	2308      	movs	r3, #8
 8011c08:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011c0a:	7dfb      	ldrb	r3, [r7, #23]
 8011c0c:	b29c      	uxth	r4, r3
 8011c0e:	68b8      	ldr	r0, [r7, #8]
 8011c10:	f7f9 fb21 	bl	800b256 <lwip_htonl>
 8011c14:	4602      	mov	r2, r0
 8011c16:	8abb      	ldrh	r3, [r7, #20]
 8011c18:	9303      	str	r3, [sp, #12]
 8011c1a:	2314      	movs	r3, #20
 8011c1c:	9302      	str	r3, [sp, #8]
 8011c1e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011c20:	9301      	str	r3, [sp, #4]
 8011c22:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011c24:	9300      	str	r3, [sp, #0]
 8011c26:	4613      	mov	r3, r2
 8011c28:	2200      	movs	r2, #0
 8011c2a:	4621      	mov	r1, r4
 8011c2c:	6878      	ldr	r0, [r7, #4]
 8011c2e:	f7ff fe93 	bl	8011958 <tcp_output_alloc_header_common>
 8011c32:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011c34:	693b      	ldr	r3, [r7, #16]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d00c      	beq.n	8011c54 <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011c3a:	7dfb      	ldrb	r3, [r7, #23]
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	6939      	ldr	r1, [r7, #16]
 8011c40:	68f8      	ldr	r0, [r7, #12]
 8011c42:	f7ff ff39 	bl	8011ab8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c48:	683a      	ldr	r2, [r7, #0]
 8011c4a:	6939      	ldr	r1, [r7, #16]
 8011c4c:	68f8      	ldr	r0, [r7, #12]
 8011c4e:	f7ff ff73 	bl	8011b38 <tcp_output_control_segment>
 8011c52:	e000      	b.n	8011c56 <tcp_rst+0x8a>
    return;
 8011c54:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011c56:	371c      	adds	r7, #28
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	bd90      	pop	{r4, r7, pc}
 8011c5c:	0801e2e4 	.word	0x0801e2e4
 8011c60:	0801ea68 	.word	0x0801ea68
 8011c64:	0801e338 	.word	0x0801e338
 8011c68:	0801ea84 	.word	0x0801ea84

08011c6c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011c6c:	b590      	push	{r4, r7, lr}
 8011c6e:	b087      	sub	sp, #28
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011c74:	2300      	movs	r3, #0
 8011c76:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011c78:	2300      	movs	r3, #0
 8011c7a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d106      	bne.n	8011c90 <tcp_send_empty_ack+0x24>
 8011c82:	4b28      	ldr	r3, [pc, #160]	; (8011d24 <tcp_send_empty_ack+0xb8>)
 8011c84:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011c88:	4927      	ldr	r1, [pc, #156]	; (8011d28 <tcp_send_empty_ack+0xbc>)
 8011c8a:	4828      	ldr	r0, [pc, #160]	; (8011d2c <tcp_send_empty_ack+0xc0>)
 8011c8c:	f005 fde8 	bl	8017860 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011c90:	7dfb      	ldrb	r3, [r7, #23]
 8011c92:	009b      	lsls	r3, r3, #2
 8011c94:	b2db      	uxtb	r3, r3
 8011c96:	f003 0304 	and.w	r3, r3, #4
 8011c9a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011c9c:	7d7b      	ldrb	r3, [r7, #21]
 8011c9e:	b29c      	uxth	r4, r3
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7f9 fad6 	bl	800b256 <lwip_htonl>
 8011caa:	4603      	mov	r3, r0
 8011cac:	2200      	movs	r2, #0
 8011cae:	4621      	mov	r1, r4
 8011cb0:	6878      	ldr	r0, [r7, #4]
 8011cb2:	f7ff fec3 	bl	8011a3c <tcp_output_alloc_header>
 8011cb6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011cb8:	693b      	ldr	r3, [r7, #16]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d109      	bne.n	8011cd2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	8b5b      	ldrh	r3, [r3, #26]
 8011cc2:	f043 0303 	orr.w	r3, r3, #3
 8011cc6:	b29a      	uxth	r2, r3
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011ccc:	f06f 0301 	mvn.w	r3, #1
 8011cd0:	e023      	b.n	8011d1a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011cd2:	7dbb      	ldrb	r3, [r7, #22]
 8011cd4:	7dfa      	ldrb	r2, [r7, #23]
 8011cd6:	6939      	ldr	r1, [r7, #16]
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f7ff feed 	bl	8011ab8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011cde:	687a      	ldr	r2, [r7, #4]
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	3304      	adds	r3, #4
 8011ce4:	6939      	ldr	r1, [r7, #16]
 8011ce6:	6878      	ldr	r0, [r7, #4]
 8011ce8:	f7ff ff26 	bl	8011b38 <tcp_output_control_segment>
 8011cec:	4603      	mov	r3, r0
 8011cee:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d007      	beq.n	8011d08 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	8b5b      	ldrh	r3, [r3, #26]
 8011cfc:	f043 0303 	orr.w	r3, r3, #3
 8011d00:	b29a      	uxth	r2, r3
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	835a      	strh	r2, [r3, #26]
 8011d06:	e006      	b.n	8011d16 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	8b5b      	ldrh	r3, [r3, #26]
 8011d0c:	f023 0303 	bic.w	r3, r3, #3
 8011d10:	b29a      	uxth	r2, r3
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	371c      	adds	r7, #28
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd90      	pop	{r4, r7, pc}
 8011d22:	bf00      	nop
 8011d24:	0801e2e4 	.word	0x0801e2e4
 8011d28:	0801eaa0 	.word	0x0801eaa0
 8011d2c:	0801e338 	.word	0x0801e338

08011d30 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011d30:	b590      	push	{r4, r7, lr}
 8011d32:	b087      	sub	sp, #28
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011d38:	2300      	movs	r3, #0
 8011d3a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d106      	bne.n	8011d50 <tcp_keepalive+0x20>
 8011d42:	4b18      	ldr	r3, [pc, #96]	; (8011da4 <tcp_keepalive+0x74>)
 8011d44:	f640 0224 	movw	r2, #2084	; 0x824
 8011d48:	4917      	ldr	r1, [pc, #92]	; (8011da8 <tcp_keepalive+0x78>)
 8011d4a:	4818      	ldr	r0, [pc, #96]	; (8011dac <tcp_keepalive+0x7c>)
 8011d4c:	f005 fd88 	bl	8017860 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011d50:	7dfb      	ldrb	r3, [r7, #23]
 8011d52:	b29c      	uxth	r4, r3
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d58:	3b01      	subs	r3, #1
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f7f9 fa7b 	bl	800b256 <lwip_htonl>
 8011d60:	4603      	mov	r3, r0
 8011d62:	2200      	movs	r2, #0
 8011d64:	4621      	mov	r1, r4
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f7ff fe68 	bl	8011a3c <tcp_output_alloc_header>
 8011d6c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d102      	bne.n	8011d7a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011d74:	f04f 33ff 	mov.w	r3, #4294967295
 8011d78:	e010      	b.n	8011d9c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011d7a:	7dfb      	ldrb	r3, [r7, #23]
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	6939      	ldr	r1, [r7, #16]
 8011d80:	6878      	ldr	r0, [r7, #4]
 8011d82:	f7ff fe99 	bl	8011ab8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011d86:	687a      	ldr	r2, [r7, #4]
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	3304      	adds	r3, #4
 8011d8c:	6939      	ldr	r1, [r7, #16]
 8011d8e:	6878      	ldr	r0, [r7, #4]
 8011d90:	f7ff fed2 	bl	8011b38 <tcp_output_control_segment>
 8011d94:	4603      	mov	r3, r0
 8011d96:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	371c      	adds	r7, #28
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd90      	pop	{r4, r7, pc}
 8011da4:	0801e2e4 	.word	0x0801e2e4
 8011da8:	0801eac0 	.word	0x0801eac0
 8011dac:	0801e338 	.word	0x0801e338

08011db0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011db0:	b590      	push	{r4, r7, lr}
 8011db2:	b08b      	sub	sp, #44	; 0x2c
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011db8:	2300      	movs	r3, #0
 8011dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d106      	bne.n	8011dd2 <tcp_zero_window_probe+0x22>
 8011dc4:	4b4c      	ldr	r3, [pc, #304]	; (8011ef8 <tcp_zero_window_probe+0x148>)
 8011dc6:	f640 024f 	movw	r2, #2127	; 0x84f
 8011dca:	494c      	ldr	r1, [pc, #304]	; (8011efc <tcp_zero_window_probe+0x14c>)
 8011dcc:	484c      	ldr	r0, [pc, #304]	; (8011f00 <tcp_zero_window_probe+0x150>)
 8011dce:	f005 fd47 	bl	8017860 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dd6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011dd8:	6a3b      	ldr	r3, [r7, #32]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d101      	bne.n	8011de2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011dde:	2300      	movs	r3, #0
 8011de0:	e086      	b.n	8011ef0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011de8:	2bff      	cmp	r3, #255	; 0xff
 8011dea:	d007      	beq.n	8011dfc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011df2:	3301      	adds	r3, #1
 8011df4:	b2da      	uxtb	r2, r3
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011dfc:	6a3b      	ldr	r3, [r7, #32]
 8011dfe:	68db      	ldr	r3, [r3, #12]
 8011e00:	899b      	ldrh	r3, [r3, #12]
 8011e02:	b29b      	uxth	r3, r3
 8011e04:	4618      	mov	r0, r3
 8011e06:	f7f9 fa11 	bl	800b22c <lwip_htons>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	b2db      	uxtb	r3, r3
 8011e0e:	f003 0301 	and.w	r3, r3, #1
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d005      	beq.n	8011e22 <tcp_zero_window_probe+0x72>
 8011e16:	6a3b      	ldr	r3, [r7, #32]
 8011e18:	891b      	ldrh	r3, [r3, #8]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d101      	bne.n	8011e22 <tcp_zero_window_probe+0x72>
 8011e1e:	2301      	movs	r3, #1
 8011e20:	e000      	b.n	8011e24 <tcp_zero_window_probe+0x74>
 8011e22:	2300      	movs	r3, #0
 8011e24:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011e26:	7ffb      	ldrb	r3, [r7, #31]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	bf0c      	ite	eq
 8011e2c:	2301      	moveq	r3, #1
 8011e2e:	2300      	movne	r3, #0
 8011e30:	b2db      	uxtb	r3, r3
 8011e32:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e38:	b299      	uxth	r1, r3
 8011e3a:	6a3b      	ldr	r3, [r7, #32]
 8011e3c:	68db      	ldr	r3, [r3, #12]
 8011e3e:	685b      	ldr	r3, [r3, #4]
 8011e40:	8bba      	ldrh	r2, [r7, #28]
 8011e42:	6878      	ldr	r0, [r7, #4]
 8011e44:	f7ff fdfa 	bl	8011a3c <tcp_output_alloc_header>
 8011e48:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011e4a:	69bb      	ldr	r3, [r7, #24]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d102      	bne.n	8011e56 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011e50:	f04f 33ff 	mov.w	r3, #4294967295
 8011e54:	e04c      	b.n	8011ef0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011e56:	69bb      	ldr	r3, [r7, #24]
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011e5c:	7ffb      	ldrb	r3, [r7, #31]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d011      	beq.n	8011e86 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011e62:	697b      	ldr	r3, [r7, #20]
 8011e64:	899b      	ldrh	r3, [r3, #12]
 8011e66:	b29b      	uxth	r3, r3
 8011e68:	b21b      	sxth	r3, r3
 8011e6a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011e6e:	b21c      	sxth	r4, r3
 8011e70:	2011      	movs	r0, #17
 8011e72:	f7f9 f9db 	bl	800b22c <lwip_htons>
 8011e76:	4603      	mov	r3, r0
 8011e78:	b21b      	sxth	r3, r3
 8011e7a:	4323      	orrs	r3, r4
 8011e7c:	b21b      	sxth	r3, r3
 8011e7e:	b29a      	uxth	r2, r3
 8011e80:	697b      	ldr	r3, [r7, #20]
 8011e82:	819a      	strh	r2, [r3, #12]
 8011e84:	e010      	b.n	8011ea8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011e86:	69bb      	ldr	r3, [r7, #24]
 8011e88:	685b      	ldr	r3, [r3, #4]
 8011e8a:	3314      	adds	r3, #20
 8011e8c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011e8e:	6a3b      	ldr	r3, [r7, #32]
 8011e90:	6858      	ldr	r0, [r3, #4]
 8011e92:	6a3b      	ldr	r3, [r7, #32]
 8011e94:	685b      	ldr	r3, [r3, #4]
 8011e96:	891a      	ldrh	r2, [r3, #8]
 8011e98:	6a3b      	ldr	r3, [r7, #32]
 8011e9a:	891b      	ldrh	r3, [r3, #8]
 8011e9c:	1ad3      	subs	r3, r2, r3
 8011e9e:	b29b      	uxth	r3, r3
 8011ea0:	2201      	movs	r2, #1
 8011ea2:	6939      	ldr	r1, [r7, #16]
 8011ea4:	f7fa fe58 	bl	800cb58 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011ea8:	6a3b      	ldr	r3, [r7, #32]
 8011eaa:	68db      	ldr	r3, [r3, #12]
 8011eac:	685b      	ldr	r3, [r3, #4]
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f7f9 f9d1 	bl	800b256 <lwip_htonl>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	3301      	adds	r3, #1
 8011eb8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	1ad3      	subs	r3, r2, r3
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	da02      	bge.n	8011ecc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	68fa      	ldr	r2, [r7, #12]
 8011eca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	69b9      	ldr	r1, [r7, #24]
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f7ff fdef 	bl	8011ab8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011eda:	687a      	ldr	r2, [r7, #4]
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	3304      	adds	r3, #4
 8011ee0:	69b9      	ldr	r1, [r7, #24]
 8011ee2:	6878      	ldr	r0, [r7, #4]
 8011ee4:	f7ff fe28 	bl	8011b38 <tcp_output_control_segment>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011eec:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	372c      	adds	r7, #44	; 0x2c
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd90      	pop	{r4, r7, pc}
 8011ef8:	0801e2e4 	.word	0x0801e2e4
 8011efc:	0801eadc 	.word	0x0801eadc
 8011f00:	0801e338 	.word	0x0801e338

08011f04 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b082      	sub	sp, #8
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011f0c:	f7fa ff12 	bl	800cd34 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011f10:	4b0a      	ldr	r3, [pc, #40]	; (8011f3c <tcpip_tcp_timer+0x38>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d103      	bne.n	8011f20 <tcpip_tcp_timer+0x1c>
 8011f18:	4b09      	ldr	r3, [pc, #36]	; (8011f40 <tcpip_tcp_timer+0x3c>)
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d005      	beq.n	8011f2c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011f20:	2200      	movs	r2, #0
 8011f22:	4908      	ldr	r1, [pc, #32]	; (8011f44 <tcpip_tcp_timer+0x40>)
 8011f24:	20fa      	movs	r0, #250	; 0xfa
 8011f26:	f000 f8f3 	bl	8012110 <sys_timeout>
 8011f2a:	e003      	b.n	8011f34 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011f2c:	4b06      	ldr	r3, [pc, #24]	; (8011f48 <tcpip_tcp_timer+0x44>)
 8011f2e:	2200      	movs	r2, #0
 8011f30:	601a      	str	r2, [r3, #0]
  }
}
 8011f32:	bf00      	nop
 8011f34:	bf00      	nop
 8011f36:	3708      	adds	r7, #8
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}
 8011f3c:	20006e3c 	.word	0x20006e3c
 8011f40:	20006e4c 	.word	0x20006e4c
 8011f44:	08011f05 	.word	0x08011f05
 8011f48:	20000494 	.word	0x20000494

08011f4c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011f50:	4b0a      	ldr	r3, [pc, #40]	; (8011f7c <tcp_timer_needed+0x30>)
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d10f      	bne.n	8011f78 <tcp_timer_needed+0x2c>
 8011f58:	4b09      	ldr	r3, [pc, #36]	; (8011f80 <tcp_timer_needed+0x34>)
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d103      	bne.n	8011f68 <tcp_timer_needed+0x1c>
 8011f60:	4b08      	ldr	r3, [pc, #32]	; (8011f84 <tcp_timer_needed+0x38>)
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d007      	beq.n	8011f78 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011f68:	4b04      	ldr	r3, [pc, #16]	; (8011f7c <tcp_timer_needed+0x30>)
 8011f6a:	2201      	movs	r2, #1
 8011f6c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011f6e:	2200      	movs	r2, #0
 8011f70:	4905      	ldr	r1, [pc, #20]	; (8011f88 <tcp_timer_needed+0x3c>)
 8011f72:	20fa      	movs	r0, #250	; 0xfa
 8011f74:	f000 f8cc 	bl	8012110 <sys_timeout>
  }
}
 8011f78:	bf00      	nop
 8011f7a:	bd80      	pop	{r7, pc}
 8011f7c:	20000494 	.word	0x20000494
 8011f80:	20006e3c 	.word	0x20006e3c
 8011f84:	20006e4c 	.word	0x20006e4c
 8011f88:	08011f05 	.word	0x08011f05

08011f8c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b086      	sub	sp, #24
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	60f8      	str	r0, [r7, #12]
 8011f94:	60b9      	str	r1, [r7, #8]
 8011f96:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011f98:	2006      	movs	r0, #6
 8011f9a:	f7f9 fd9d 	bl	800bad8 <memp_malloc>
 8011f9e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011fa0:	693b      	ldr	r3, [r7, #16]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d109      	bne.n	8011fba <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d151      	bne.n	8012050 <sys_timeout_abs+0xc4>
 8011fac:	4b2a      	ldr	r3, [pc, #168]	; (8012058 <sys_timeout_abs+0xcc>)
 8011fae:	22be      	movs	r2, #190	; 0xbe
 8011fb0:	492a      	ldr	r1, [pc, #168]	; (801205c <sys_timeout_abs+0xd0>)
 8011fb2:	482b      	ldr	r0, [pc, #172]	; (8012060 <sys_timeout_abs+0xd4>)
 8011fb4:	f005 fc54 	bl	8017860 <iprintf>
    return;
 8011fb8:	e04a      	b.n	8012050 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011fba:	693b      	ldr	r3, [r7, #16]
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011fc0:	693b      	ldr	r3, [r7, #16]
 8011fc2:	68ba      	ldr	r2, [r7, #8]
 8011fc4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011fc6:	693b      	ldr	r3, [r7, #16]
 8011fc8:	687a      	ldr	r2, [r7, #4]
 8011fca:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011fcc:	693b      	ldr	r3, [r7, #16]
 8011fce:	68fa      	ldr	r2, [r7, #12]
 8011fd0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011fd2:	4b24      	ldr	r3, [pc, #144]	; (8012064 <sys_timeout_abs+0xd8>)
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d103      	bne.n	8011fe2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011fda:	4a22      	ldr	r2, [pc, #136]	; (8012064 <sys_timeout_abs+0xd8>)
 8011fdc:	693b      	ldr	r3, [r7, #16]
 8011fde:	6013      	str	r3, [r2, #0]
    return;
 8011fe0:	e037      	b.n	8012052 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011fe2:	693b      	ldr	r3, [r7, #16]
 8011fe4:	685a      	ldr	r2, [r3, #4]
 8011fe6:	4b1f      	ldr	r3, [pc, #124]	; (8012064 <sys_timeout_abs+0xd8>)
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	685b      	ldr	r3, [r3, #4]
 8011fec:	1ad3      	subs	r3, r2, r3
 8011fee:	0fdb      	lsrs	r3, r3, #31
 8011ff0:	f003 0301 	and.w	r3, r3, #1
 8011ff4:	b2db      	uxtb	r3, r3
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d007      	beq.n	801200a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011ffa:	4b1a      	ldr	r3, [pc, #104]	; (8012064 <sys_timeout_abs+0xd8>)
 8011ffc:	681a      	ldr	r2, [r3, #0]
 8011ffe:	693b      	ldr	r3, [r7, #16]
 8012000:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012002:	4a18      	ldr	r2, [pc, #96]	; (8012064 <sys_timeout_abs+0xd8>)
 8012004:	693b      	ldr	r3, [r7, #16]
 8012006:	6013      	str	r3, [r2, #0]
 8012008:	e023      	b.n	8012052 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801200a:	4b16      	ldr	r3, [pc, #88]	; (8012064 <sys_timeout_abs+0xd8>)
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	617b      	str	r3, [r7, #20]
 8012010:	e01a      	b.n	8012048 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012012:	697b      	ldr	r3, [r7, #20]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	2b00      	cmp	r3, #0
 8012018:	d00b      	beq.n	8012032 <sys_timeout_abs+0xa6>
 801201a:	693b      	ldr	r3, [r7, #16]
 801201c:	685a      	ldr	r2, [r3, #4]
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	685b      	ldr	r3, [r3, #4]
 8012024:	1ad3      	subs	r3, r2, r3
 8012026:	0fdb      	lsrs	r3, r3, #31
 8012028:	f003 0301 	and.w	r3, r3, #1
 801202c:	b2db      	uxtb	r3, r3
 801202e:	2b00      	cmp	r3, #0
 8012030:	d007      	beq.n	8012042 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012032:	697b      	ldr	r3, [r7, #20]
 8012034:	681a      	ldr	r2, [r3, #0]
 8012036:	693b      	ldr	r3, [r7, #16]
 8012038:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	693a      	ldr	r2, [r7, #16]
 801203e:	601a      	str	r2, [r3, #0]
        break;
 8012040:	e007      	b.n	8012052 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012042:	697b      	ldr	r3, [r7, #20]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	617b      	str	r3, [r7, #20]
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d1e1      	bne.n	8012012 <sys_timeout_abs+0x86>
 801204e:	e000      	b.n	8012052 <sys_timeout_abs+0xc6>
    return;
 8012050:	bf00      	nop
      }
    }
  }
}
 8012052:	3718      	adds	r7, #24
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}
 8012058:	0801eb00 	.word	0x0801eb00
 801205c:	0801eb34 	.word	0x0801eb34
 8012060:	0801eb74 	.word	0x0801eb74
 8012064:	2000048c 	.word	0x2000048c

08012068 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b086      	sub	sp, #24
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012074:	697b      	ldr	r3, [r7, #20]
 8012076:	685b      	ldr	r3, [r3, #4]
 8012078:	4798      	blx	r3

  now = sys_now();
 801207a:	f7f9 f849 	bl	800b110 <sys_now>
 801207e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012080:	697b      	ldr	r3, [r7, #20]
 8012082:	681a      	ldr	r2, [r3, #0]
 8012084:	4b0f      	ldr	r3, [pc, #60]	; (80120c4 <lwip_cyclic_timer+0x5c>)
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	4413      	add	r3, r2
 801208a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801208c:	68fa      	ldr	r2, [r7, #12]
 801208e:	693b      	ldr	r3, [r7, #16]
 8012090:	1ad3      	subs	r3, r2, r3
 8012092:	0fdb      	lsrs	r3, r3, #31
 8012094:	f003 0301 	and.w	r3, r3, #1
 8012098:	b2db      	uxtb	r3, r3
 801209a:	2b00      	cmp	r3, #0
 801209c:	d009      	beq.n	80120b2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801209e:	697b      	ldr	r3, [r7, #20]
 80120a0:	681a      	ldr	r2, [r3, #0]
 80120a2:	693b      	ldr	r3, [r7, #16]
 80120a4:	4413      	add	r3, r2
 80120a6:	687a      	ldr	r2, [r7, #4]
 80120a8:	4907      	ldr	r1, [pc, #28]	; (80120c8 <lwip_cyclic_timer+0x60>)
 80120aa:	4618      	mov	r0, r3
 80120ac:	f7ff ff6e 	bl	8011f8c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80120b0:	e004      	b.n	80120bc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80120b2:	687a      	ldr	r2, [r7, #4]
 80120b4:	4904      	ldr	r1, [pc, #16]	; (80120c8 <lwip_cyclic_timer+0x60>)
 80120b6:	68f8      	ldr	r0, [r7, #12]
 80120b8:	f7ff ff68 	bl	8011f8c <sys_timeout_abs>
}
 80120bc:	bf00      	nop
 80120be:	3718      	adds	r7, #24
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bd80      	pop	{r7, pc}
 80120c4:	20000490 	.word	0x20000490
 80120c8:	08012069 	.word	0x08012069

080120cc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b082      	sub	sp, #8
 80120d0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80120d2:	2301      	movs	r3, #1
 80120d4:	607b      	str	r3, [r7, #4]
 80120d6:	e00e      	b.n	80120f6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80120d8:	4a0b      	ldr	r2, [pc, #44]	; (8012108 <sys_timeouts_init+0x3c>)
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	00db      	lsls	r3, r3, #3
 80120e4:	4a08      	ldr	r2, [pc, #32]	; (8012108 <sys_timeouts_init+0x3c>)
 80120e6:	4413      	add	r3, r2
 80120e8:	461a      	mov	r2, r3
 80120ea:	4908      	ldr	r1, [pc, #32]	; (801210c <sys_timeouts_init+0x40>)
 80120ec:	f000 f810 	bl	8012110 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	3301      	adds	r3, #1
 80120f4:	607b      	str	r3, [r7, #4]
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	2b04      	cmp	r3, #4
 80120fa:	d9ed      	bls.n	80120d8 <sys_timeouts_init+0xc>
  }
}
 80120fc:	bf00      	nop
 80120fe:	bf00      	nop
 8012100:	3708      	adds	r7, #8
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}
 8012106:	bf00      	nop
 8012108:	0801fa90 	.word	0x0801fa90
 801210c:	08012069 	.word	0x08012069

08012110 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b086      	sub	sp, #24
 8012114:	af00      	add	r7, sp, #0
 8012116:	60f8      	str	r0, [r7, #12]
 8012118:	60b9      	str	r1, [r7, #8]
 801211a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012122:	d306      	bcc.n	8012132 <sys_timeout+0x22>
 8012124:	4b0a      	ldr	r3, [pc, #40]	; (8012150 <sys_timeout+0x40>)
 8012126:	f240 1229 	movw	r2, #297	; 0x129
 801212a:	490a      	ldr	r1, [pc, #40]	; (8012154 <sys_timeout+0x44>)
 801212c:	480a      	ldr	r0, [pc, #40]	; (8012158 <sys_timeout+0x48>)
 801212e:	f005 fb97 	bl	8017860 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012132:	f7f8 ffed 	bl	800b110 <sys_now>
 8012136:	4602      	mov	r2, r0
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	4413      	add	r3, r2
 801213c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801213e:	687a      	ldr	r2, [r7, #4]
 8012140:	68b9      	ldr	r1, [r7, #8]
 8012142:	6978      	ldr	r0, [r7, #20]
 8012144:	f7ff ff22 	bl	8011f8c <sys_timeout_abs>
#endif
}
 8012148:	bf00      	nop
 801214a:	3718      	adds	r7, #24
 801214c:	46bd      	mov	sp, r7
 801214e:	bd80      	pop	{r7, pc}
 8012150:	0801eb00 	.word	0x0801eb00
 8012154:	0801eb9c 	.word	0x0801eb9c
 8012158:	0801eb74 	.word	0x0801eb74

0801215c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012160:	f005 fb96 	bl	8017890 <rand>
 8012164:	4603      	mov	r3, r0
 8012166:	b29b      	uxth	r3, r3
 8012168:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801216c:	b29b      	uxth	r3, r3
 801216e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012172:	b29a      	uxth	r2, r3
 8012174:	4b01      	ldr	r3, [pc, #4]	; (801217c <udp_init+0x20>)
 8012176:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012178:	bf00      	nop
 801217a:	bd80      	pop	{r7, pc}
 801217c:	2000006c 	.word	0x2000006c

08012180 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012180:	b480      	push	{r7}
 8012182:	b083      	sub	sp, #12
 8012184:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012186:	2300      	movs	r3, #0
 8012188:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801218a:	4b17      	ldr	r3, [pc, #92]	; (80121e8 <udp_new_port+0x68>)
 801218c:	881b      	ldrh	r3, [r3, #0]
 801218e:	1c5a      	adds	r2, r3, #1
 8012190:	b291      	uxth	r1, r2
 8012192:	4a15      	ldr	r2, [pc, #84]	; (80121e8 <udp_new_port+0x68>)
 8012194:	8011      	strh	r1, [r2, #0]
 8012196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801219a:	4293      	cmp	r3, r2
 801219c:	d103      	bne.n	80121a6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801219e:	4b12      	ldr	r3, [pc, #72]	; (80121e8 <udp_new_port+0x68>)
 80121a0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80121a4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80121a6:	4b11      	ldr	r3, [pc, #68]	; (80121ec <udp_new_port+0x6c>)
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	603b      	str	r3, [r7, #0]
 80121ac:	e011      	b.n	80121d2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80121ae:	683b      	ldr	r3, [r7, #0]
 80121b0:	8a5a      	ldrh	r2, [r3, #18]
 80121b2:	4b0d      	ldr	r3, [pc, #52]	; (80121e8 <udp_new_port+0x68>)
 80121b4:	881b      	ldrh	r3, [r3, #0]
 80121b6:	429a      	cmp	r2, r3
 80121b8:	d108      	bne.n	80121cc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80121ba:	88fb      	ldrh	r3, [r7, #6]
 80121bc:	3301      	adds	r3, #1
 80121be:	80fb      	strh	r3, [r7, #6]
 80121c0:	88fb      	ldrh	r3, [r7, #6]
 80121c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80121c6:	d3e0      	bcc.n	801218a <udp_new_port+0xa>
        return 0;
 80121c8:	2300      	movs	r3, #0
 80121ca:	e007      	b.n	80121dc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	68db      	ldr	r3, [r3, #12]
 80121d0:	603b      	str	r3, [r7, #0]
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d1ea      	bne.n	80121ae <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80121d8:	4b03      	ldr	r3, [pc, #12]	; (80121e8 <udp_new_port+0x68>)
 80121da:	881b      	ldrh	r3, [r3, #0]
}
 80121dc:	4618      	mov	r0, r3
 80121de:	370c      	adds	r7, #12
 80121e0:	46bd      	mov	sp, r7
 80121e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e6:	4770      	bx	lr
 80121e8:	2000006c 	.word	0x2000006c
 80121ec:	20006e54 	.word	0x20006e54

080121f0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b084      	sub	sp, #16
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	60f8      	str	r0, [r7, #12]
 80121f8:	60b9      	str	r1, [r7, #8]
 80121fa:	4613      	mov	r3, r2
 80121fc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d105      	bne.n	8012210 <udp_input_local_match+0x20>
 8012204:	4b27      	ldr	r3, [pc, #156]	; (80122a4 <udp_input_local_match+0xb4>)
 8012206:	2287      	movs	r2, #135	; 0x87
 8012208:	4927      	ldr	r1, [pc, #156]	; (80122a8 <udp_input_local_match+0xb8>)
 801220a:	4828      	ldr	r0, [pc, #160]	; (80122ac <udp_input_local_match+0xbc>)
 801220c:	f005 fb28 	bl	8017860 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d105      	bne.n	8012222 <udp_input_local_match+0x32>
 8012216:	4b23      	ldr	r3, [pc, #140]	; (80122a4 <udp_input_local_match+0xb4>)
 8012218:	2288      	movs	r2, #136	; 0x88
 801221a:	4925      	ldr	r1, [pc, #148]	; (80122b0 <udp_input_local_match+0xc0>)
 801221c:	4823      	ldr	r0, [pc, #140]	; (80122ac <udp_input_local_match+0xbc>)
 801221e:	f005 fb1f 	bl	8017860 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	7a1b      	ldrb	r3, [r3, #8]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d00b      	beq.n	8012242 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	7a1a      	ldrb	r2, [r3, #8]
 801222e:	4b21      	ldr	r3, [pc, #132]	; (80122b4 <udp_input_local_match+0xc4>)
 8012230:	685b      	ldr	r3, [r3, #4]
 8012232:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012236:	3301      	adds	r3, #1
 8012238:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801223a:	429a      	cmp	r2, r3
 801223c:	d001      	beq.n	8012242 <udp_input_local_match+0x52>
    return 0;
 801223e:	2300      	movs	r3, #0
 8012240:	e02b      	b.n	801229a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012242:	79fb      	ldrb	r3, [r7, #7]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d018      	beq.n	801227a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d013      	beq.n	8012276 <udp_input_local_match+0x86>
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d00f      	beq.n	8012276 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012256:	4b17      	ldr	r3, [pc, #92]	; (80122b4 <udp_input_local_match+0xc4>)
 8012258:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801225a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801225e:	d00a      	beq.n	8012276 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	681a      	ldr	r2, [r3, #0]
 8012264:	4b13      	ldr	r3, [pc, #76]	; (80122b4 <udp_input_local_match+0xc4>)
 8012266:	695b      	ldr	r3, [r3, #20]
 8012268:	405a      	eors	r2, r3
 801226a:	68bb      	ldr	r3, [r7, #8]
 801226c:	3308      	adds	r3, #8
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012272:	2b00      	cmp	r3, #0
 8012274:	d110      	bne.n	8012298 <udp_input_local_match+0xa8>
          return 1;
 8012276:	2301      	movs	r3, #1
 8012278:	e00f      	b.n	801229a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d009      	beq.n	8012294 <udp_input_local_match+0xa4>
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d005      	beq.n	8012294 <udp_input_local_match+0xa4>
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	681a      	ldr	r2, [r3, #0]
 801228c:	4b09      	ldr	r3, [pc, #36]	; (80122b4 <udp_input_local_match+0xc4>)
 801228e:	695b      	ldr	r3, [r3, #20]
 8012290:	429a      	cmp	r2, r3
 8012292:	d101      	bne.n	8012298 <udp_input_local_match+0xa8>
        return 1;
 8012294:	2301      	movs	r3, #1
 8012296:	e000      	b.n	801229a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012298:	2300      	movs	r3, #0
}
 801229a:	4618      	mov	r0, r3
 801229c:	3710      	adds	r7, #16
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
 80122a2:	bf00      	nop
 80122a4:	0801ebe8 	.word	0x0801ebe8
 80122a8:	0801ec18 	.word	0x0801ec18
 80122ac:	0801ec3c 	.word	0x0801ec3c
 80122b0:	0801ec64 	.word	0x0801ec64
 80122b4:	20003d18 	.word	0x20003d18

080122b8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80122b8:	b590      	push	{r4, r7, lr}
 80122ba:	b08d      	sub	sp, #52	; 0x34
 80122bc:	af02      	add	r7, sp, #8
 80122be:	6078      	str	r0, [r7, #4]
 80122c0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80122c2:	2300      	movs	r3, #0
 80122c4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d105      	bne.n	80122d8 <udp_input+0x20>
 80122cc:	4b7c      	ldr	r3, [pc, #496]	; (80124c0 <udp_input+0x208>)
 80122ce:	22cf      	movs	r2, #207	; 0xcf
 80122d0:	497c      	ldr	r1, [pc, #496]	; (80124c4 <udp_input+0x20c>)
 80122d2:	487d      	ldr	r0, [pc, #500]	; (80124c8 <udp_input+0x210>)
 80122d4:	f005 fac4 	bl	8017860 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d105      	bne.n	80122ea <udp_input+0x32>
 80122de:	4b78      	ldr	r3, [pc, #480]	; (80124c0 <udp_input+0x208>)
 80122e0:	22d0      	movs	r2, #208	; 0xd0
 80122e2:	497a      	ldr	r1, [pc, #488]	; (80124cc <udp_input+0x214>)
 80122e4:	4878      	ldr	r0, [pc, #480]	; (80124c8 <udp_input+0x210>)
 80122e6:	f005 fabb 	bl	8017860 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	895b      	ldrh	r3, [r3, #10]
 80122ee:	2b07      	cmp	r3, #7
 80122f0:	d803      	bhi.n	80122fa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80122f2:	6878      	ldr	r0, [r7, #4]
 80122f4:	f7fa fa36 	bl	800c764 <pbuf_free>
    goto end;
 80122f8:	e0de      	b.n	80124b8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	685b      	ldr	r3, [r3, #4]
 80122fe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012300:	4b73      	ldr	r3, [pc, #460]	; (80124d0 <udp_input+0x218>)
 8012302:	695b      	ldr	r3, [r3, #20]
 8012304:	4a72      	ldr	r2, [pc, #456]	; (80124d0 <udp_input+0x218>)
 8012306:	6812      	ldr	r2, [r2, #0]
 8012308:	4611      	mov	r1, r2
 801230a:	4618      	mov	r0, r3
 801230c:	f003 fdca 	bl	8015ea4 <ip4_addr_isbroadcast_u32>
 8012310:	4603      	mov	r3, r0
 8012312:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012314:	697b      	ldr	r3, [r7, #20]
 8012316:	881b      	ldrh	r3, [r3, #0]
 8012318:	b29b      	uxth	r3, r3
 801231a:	4618      	mov	r0, r3
 801231c:	f7f8 ff86 	bl	800b22c <lwip_htons>
 8012320:	4603      	mov	r3, r0
 8012322:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	885b      	ldrh	r3, [r3, #2]
 8012328:	b29b      	uxth	r3, r3
 801232a:	4618      	mov	r0, r3
 801232c:	f7f8 ff7e 	bl	800b22c <lwip_htons>
 8012330:	4603      	mov	r3, r0
 8012332:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012334:	2300      	movs	r3, #0
 8012336:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012338:	2300      	movs	r3, #0
 801233a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801233c:	2300      	movs	r3, #0
 801233e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012340:	4b64      	ldr	r3, [pc, #400]	; (80124d4 <udp_input+0x21c>)
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	627b      	str	r3, [r7, #36]	; 0x24
 8012346:	e054      	b.n	80123f2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234a:	8a5b      	ldrh	r3, [r3, #18]
 801234c:	89fa      	ldrh	r2, [r7, #14]
 801234e:	429a      	cmp	r2, r3
 8012350:	d14a      	bne.n	80123e8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012352:	7cfb      	ldrb	r3, [r7, #19]
 8012354:	461a      	mov	r2, r3
 8012356:	6839      	ldr	r1, [r7, #0]
 8012358:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801235a:	f7ff ff49 	bl	80121f0 <udp_input_local_match>
 801235e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012360:	2b00      	cmp	r3, #0
 8012362:	d041      	beq.n	80123e8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012366:	7c1b      	ldrb	r3, [r3, #16]
 8012368:	f003 0304 	and.w	r3, r3, #4
 801236c:	2b00      	cmp	r3, #0
 801236e:	d11d      	bne.n	80123ac <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012370:	69fb      	ldr	r3, [r7, #28]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d102      	bne.n	801237c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012378:	61fb      	str	r3, [r7, #28]
 801237a:	e017      	b.n	80123ac <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801237c:	7cfb      	ldrb	r3, [r7, #19]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d014      	beq.n	80123ac <udp_input+0xf4>
 8012382:	4b53      	ldr	r3, [pc, #332]	; (80124d0 <udp_input+0x218>)
 8012384:	695b      	ldr	r3, [r3, #20]
 8012386:	f1b3 3fff 	cmp.w	r3, #4294967295
 801238a:	d10f      	bne.n	80123ac <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801238c:	69fb      	ldr	r3, [r7, #28]
 801238e:	681a      	ldr	r2, [r3, #0]
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	3304      	adds	r3, #4
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	429a      	cmp	r2, r3
 8012398:	d008      	beq.n	80123ac <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801239c:	681a      	ldr	r2, [r3, #0]
 801239e:	683b      	ldr	r3, [r7, #0]
 80123a0:	3304      	adds	r3, #4
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	429a      	cmp	r2, r3
 80123a6:	d101      	bne.n	80123ac <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80123a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123aa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80123ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ae:	8a9b      	ldrh	r3, [r3, #20]
 80123b0:	8a3a      	ldrh	r2, [r7, #16]
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d118      	bne.n	80123e8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80123b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123b8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d005      	beq.n	80123ca <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80123be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123c0:	685a      	ldr	r2, [r3, #4]
 80123c2:	4b43      	ldr	r3, [pc, #268]	; (80124d0 <udp_input+0x218>)
 80123c4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80123c6:	429a      	cmp	r2, r3
 80123c8:	d10e      	bne.n	80123e8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80123ca:	6a3b      	ldr	r3, [r7, #32]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d014      	beq.n	80123fa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80123d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d2:	68da      	ldr	r2, [r3, #12]
 80123d4:	6a3b      	ldr	r3, [r7, #32]
 80123d6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80123d8:	4b3e      	ldr	r3, [pc, #248]	; (80124d4 <udp_input+0x21c>)
 80123da:	681a      	ldr	r2, [r3, #0]
 80123dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123de:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80123e0:	4a3c      	ldr	r2, [pc, #240]	; (80124d4 <udp_input+0x21c>)
 80123e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80123e6:	e008      	b.n	80123fa <udp_input+0x142>
      }
    }

    prev = pcb;
 80123e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ea:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80123ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ee:	68db      	ldr	r3, [r3, #12]
 80123f0:	627b      	str	r3, [r7, #36]	; 0x24
 80123f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d1a7      	bne.n	8012348 <udp_input+0x90>
 80123f8:	e000      	b.n	80123fc <udp_input+0x144>
        break;
 80123fa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80123fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d101      	bne.n	8012406 <udp_input+0x14e>
    pcb = uncon_pcb;
 8012402:	69fb      	ldr	r3, [r7, #28]
 8012404:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012408:	2b00      	cmp	r3, #0
 801240a:	d002      	beq.n	8012412 <udp_input+0x15a>
    for_us = 1;
 801240c:	2301      	movs	r3, #1
 801240e:	76fb      	strb	r3, [r7, #27]
 8012410:	e00a      	b.n	8012428 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012412:	683b      	ldr	r3, [r7, #0]
 8012414:	3304      	adds	r3, #4
 8012416:	681a      	ldr	r2, [r3, #0]
 8012418:	4b2d      	ldr	r3, [pc, #180]	; (80124d0 <udp_input+0x218>)
 801241a:	695b      	ldr	r3, [r3, #20]
 801241c:	429a      	cmp	r2, r3
 801241e:	bf0c      	ite	eq
 8012420:	2301      	moveq	r3, #1
 8012422:	2300      	movne	r3, #0
 8012424:	b2db      	uxtb	r3, r3
 8012426:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012428:	7efb      	ldrb	r3, [r7, #27]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d041      	beq.n	80124b2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801242e:	2108      	movs	r1, #8
 8012430:	6878      	ldr	r0, [r7, #4]
 8012432:	f7fa f911 	bl	800c658 <pbuf_remove_header>
 8012436:	4603      	mov	r3, r0
 8012438:	2b00      	cmp	r3, #0
 801243a:	d00a      	beq.n	8012452 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801243c:	4b20      	ldr	r3, [pc, #128]	; (80124c0 <udp_input+0x208>)
 801243e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012442:	4925      	ldr	r1, [pc, #148]	; (80124d8 <udp_input+0x220>)
 8012444:	4820      	ldr	r0, [pc, #128]	; (80124c8 <udp_input+0x210>)
 8012446:	f005 fa0b 	bl	8017860 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f7fa f98a 	bl	800c764 <pbuf_free>
      goto end;
 8012450:	e032      	b.n	80124b8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012454:	2b00      	cmp	r3, #0
 8012456:	d012      	beq.n	801247e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801245a:	699b      	ldr	r3, [r3, #24]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d00a      	beq.n	8012476 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012462:	699c      	ldr	r4, [r3, #24]
 8012464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012466:	69d8      	ldr	r0, [r3, #28]
 8012468:	8a3b      	ldrh	r3, [r7, #16]
 801246a:	9300      	str	r3, [sp, #0]
 801246c:	4b1b      	ldr	r3, [pc, #108]	; (80124dc <udp_input+0x224>)
 801246e:	687a      	ldr	r2, [r7, #4]
 8012470:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012472:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012474:	e021      	b.n	80124ba <udp_input+0x202>
        pbuf_free(p);
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	f7fa f974 	bl	800c764 <pbuf_free>
        goto end;
 801247c:	e01c      	b.n	80124b8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801247e:	7cfb      	ldrb	r3, [r7, #19]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d112      	bne.n	80124aa <udp_input+0x1f2>
 8012484:	4b12      	ldr	r3, [pc, #72]	; (80124d0 <udp_input+0x218>)
 8012486:	695b      	ldr	r3, [r3, #20]
 8012488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801248c:	2be0      	cmp	r3, #224	; 0xe0
 801248e:	d00c      	beq.n	80124aa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012490:	4b0f      	ldr	r3, [pc, #60]	; (80124d0 <udp_input+0x218>)
 8012492:	899b      	ldrh	r3, [r3, #12]
 8012494:	3308      	adds	r3, #8
 8012496:	b29b      	uxth	r3, r3
 8012498:	b21b      	sxth	r3, r3
 801249a:	4619      	mov	r1, r3
 801249c:	6878      	ldr	r0, [r7, #4]
 801249e:	f7fa f94e 	bl	800c73e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80124a2:	2103      	movs	r1, #3
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f003 f9bf 	bl	8015828 <icmp_dest_unreach>
      pbuf_free(p);
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	f7fa f95a 	bl	800c764 <pbuf_free>
  return;
 80124b0:	e003      	b.n	80124ba <udp_input+0x202>
    pbuf_free(p);
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f7fa f956 	bl	800c764 <pbuf_free>
  return;
 80124b8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80124ba:	372c      	adds	r7, #44	; 0x2c
 80124bc:	46bd      	mov	sp, r7
 80124be:	bd90      	pop	{r4, r7, pc}
 80124c0:	0801ebe8 	.word	0x0801ebe8
 80124c4:	0801ec8c 	.word	0x0801ec8c
 80124c8:	0801ec3c 	.word	0x0801ec3c
 80124cc:	0801eca4 	.word	0x0801eca4
 80124d0:	20003d18 	.word	0x20003d18
 80124d4:	20006e54 	.word	0x20006e54
 80124d8:	0801ecc0 	.word	0x0801ecc0
 80124dc:	20003d28 	.word	0x20003d28

080124e0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b088      	sub	sp, #32
 80124e4:	af02      	add	r7, sp, #8
 80124e6:	60f8      	str	r0, [r7, #12]
 80124e8:	60b9      	str	r1, [r7, #8]
 80124ea:	607a      	str	r2, [r7, #4]
 80124ec:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d109      	bne.n	8012508 <udp_sendto_if+0x28>
 80124f4:	4b2e      	ldr	r3, [pc, #184]	; (80125b0 <udp_sendto_if+0xd0>)
 80124f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80124fa:	492e      	ldr	r1, [pc, #184]	; (80125b4 <udp_sendto_if+0xd4>)
 80124fc:	482e      	ldr	r0, [pc, #184]	; (80125b8 <udp_sendto_if+0xd8>)
 80124fe:	f005 f9af 	bl	8017860 <iprintf>
 8012502:	f06f 030f 	mvn.w	r3, #15
 8012506:	e04f      	b.n	80125a8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012508:	68bb      	ldr	r3, [r7, #8]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d109      	bne.n	8012522 <udp_sendto_if+0x42>
 801250e:	4b28      	ldr	r3, [pc, #160]	; (80125b0 <udp_sendto_if+0xd0>)
 8012510:	f240 2281 	movw	r2, #641	; 0x281
 8012514:	4929      	ldr	r1, [pc, #164]	; (80125bc <udp_sendto_if+0xdc>)
 8012516:	4828      	ldr	r0, [pc, #160]	; (80125b8 <udp_sendto_if+0xd8>)
 8012518:	f005 f9a2 	bl	8017860 <iprintf>
 801251c:	f06f 030f 	mvn.w	r3, #15
 8012520:	e042      	b.n	80125a8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d109      	bne.n	801253c <udp_sendto_if+0x5c>
 8012528:	4b21      	ldr	r3, [pc, #132]	; (80125b0 <udp_sendto_if+0xd0>)
 801252a:	f240 2282 	movw	r2, #642	; 0x282
 801252e:	4924      	ldr	r1, [pc, #144]	; (80125c0 <udp_sendto_if+0xe0>)
 8012530:	4821      	ldr	r0, [pc, #132]	; (80125b8 <udp_sendto_if+0xd8>)
 8012532:	f005 f995 	bl	8017860 <iprintf>
 8012536:	f06f 030f 	mvn.w	r3, #15
 801253a:	e035      	b.n	80125a8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801253c:	6a3b      	ldr	r3, [r7, #32]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d109      	bne.n	8012556 <udp_sendto_if+0x76>
 8012542:	4b1b      	ldr	r3, [pc, #108]	; (80125b0 <udp_sendto_if+0xd0>)
 8012544:	f240 2283 	movw	r2, #643	; 0x283
 8012548:	491e      	ldr	r1, [pc, #120]	; (80125c4 <udp_sendto_if+0xe4>)
 801254a:	481b      	ldr	r0, [pc, #108]	; (80125b8 <udp_sendto_if+0xd8>)
 801254c:	f005 f988 	bl	8017860 <iprintf>
 8012550:	f06f 030f 	mvn.w	r3, #15
 8012554:	e028      	b.n	80125a8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d009      	beq.n	8012570 <udp_sendto_if+0x90>
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d005      	beq.n	8012570 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801256c:	2be0      	cmp	r3, #224	; 0xe0
 801256e:	d103      	bne.n	8012578 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012570:	6a3b      	ldr	r3, [r7, #32]
 8012572:	3304      	adds	r3, #4
 8012574:	617b      	str	r3, [r7, #20]
 8012576:	e00b      	b.n	8012590 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	681a      	ldr	r2, [r3, #0]
 801257c:	6a3b      	ldr	r3, [r7, #32]
 801257e:	3304      	adds	r3, #4
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	429a      	cmp	r2, r3
 8012584:	d002      	beq.n	801258c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8012586:	f06f 0303 	mvn.w	r3, #3
 801258a:	e00d      	b.n	80125a8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012590:	887a      	ldrh	r2, [r7, #2]
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	9301      	str	r3, [sp, #4]
 8012596:	6a3b      	ldr	r3, [r7, #32]
 8012598:	9300      	str	r3, [sp, #0]
 801259a:	4613      	mov	r3, r2
 801259c:	687a      	ldr	r2, [r7, #4]
 801259e:	68b9      	ldr	r1, [r7, #8]
 80125a0:	68f8      	ldr	r0, [r7, #12]
 80125a2:	f000 f811 	bl	80125c8 <udp_sendto_if_src>
 80125a6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80125a8:	4618      	mov	r0, r3
 80125aa:	3718      	adds	r7, #24
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bd80      	pop	{r7, pc}
 80125b0:	0801ebe8 	.word	0x0801ebe8
 80125b4:	0801ed5c 	.word	0x0801ed5c
 80125b8:	0801ec3c 	.word	0x0801ec3c
 80125bc:	0801ed78 	.word	0x0801ed78
 80125c0:	0801ed94 	.word	0x0801ed94
 80125c4:	0801edb4 	.word	0x0801edb4

080125c8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b08c      	sub	sp, #48	; 0x30
 80125cc:	af04      	add	r7, sp, #16
 80125ce:	60f8      	str	r0, [r7, #12]
 80125d0:	60b9      	str	r1, [r7, #8]
 80125d2:	607a      	str	r2, [r7, #4]
 80125d4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d109      	bne.n	80125f0 <udp_sendto_if_src+0x28>
 80125dc:	4b65      	ldr	r3, [pc, #404]	; (8012774 <udp_sendto_if_src+0x1ac>)
 80125de:	f240 22d1 	movw	r2, #721	; 0x2d1
 80125e2:	4965      	ldr	r1, [pc, #404]	; (8012778 <udp_sendto_if_src+0x1b0>)
 80125e4:	4865      	ldr	r0, [pc, #404]	; (801277c <udp_sendto_if_src+0x1b4>)
 80125e6:	f005 f93b 	bl	8017860 <iprintf>
 80125ea:	f06f 030f 	mvn.w	r3, #15
 80125ee:	e0bc      	b.n	801276a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80125f0:	68bb      	ldr	r3, [r7, #8]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d109      	bne.n	801260a <udp_sendto_if_src+0x42>
 80125f6:	4b5f      	ldr	r3, [pc, #380]	; (8012774 <udp_sendto_if_src+0x1ac>)
 80125f8:	f240 22d2 	movw	r2, #722	; 0x2d2
 80125fc:	4960      	ldr	r1, [pc, #384]	; (8012780 <udp_sendto_if_src+0x1b8>)
 80125fe:	485f      	ldr	r0, [pc, #380]	; (801277c <udp_sendto_if_src+0x1b4>)
 8012600:	f005 f92e 	bl	8017860 <iprintf>
 8012604:	f06f 030f 	mvn.w	r3, #15
 8012608:	e0af      	b.n	801276a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d109      	bne.n	8012624 <udp_sendto_if_src+0x5c>
 8012610:	4b58      	ldr	r3, [pc, #352]	; (8012774 <udp_sendto_if_src+0x1ac>)
 8012612:	f240 22d3 	movw	r2, #723	; 0x2d3
 8012616:	495b      	ldr	r1, [pc, #364]	; (8012784 <udp_sendto_if_src+0x1bc>)
 8012618:	4858      	ldr	r0, [pc, #352]	; (801277c <udp_sendto_if_src+0x1b4>)
 801261a:	f005 f921 	bl	8017860 <iprintf>
 801261e:	f06f 030f 	mvn.w	r3, #15
 8012622:	e0a2      	b.n	801276a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012626:	2b00      	cmp	r3, #0
 8012628:	d109      	bne.n	801263e <udp_sendto_if_src+0x76>
 801262a:	4b52      	ldr	r3, [pc, #328]	; (8012774 <udp_sendto_if_src+0x1ac>)
 801262c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8012630:	4955      	ldr	r1, [pc, #340]	; (8012788 <udp_sendto_if_src+0x1c0>)
 8012632:	4852      	ldr	r0, [pc, #328]	; (801277c <udp_sendto_if_src+0x1b4>)
 8012634:	f005 f914 	bl	8017860 <iprintf>
 8012638:	f06f 030f 	mvn.w	r3, #15
 801263c:	e095      	b.n	801276a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801263e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012640:	2b00      	cmp	r3, #0
 8012642:	d109      	bne.n	8012658 <udp_sendto_if_src+0x90>
 8012644:	4b4b      	ldr	r3, [pc, #300]	; (8012774 <udp_sendto_if_src+0x1ac>)
 8012646:	f240 22d5 	movw	r2, #725	; 0x2d5
 801264a:	4950      	ldr	r1, [pc, #320]	; (801278c <udp_sendto_if_src+0x1c4>)
 801264c:	484b      	ldr	r0, [pc, #300]	; (801277c <udp_sendto_if_src+0x1b4>)
 801264e:	f005 f907 	bl	8017860 <iprintf>
 8012652:	f06f 030f 	mvn.w	r3, #15
 8012656:	e088      	b.n	801276a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	8a5b      	ldrh	r3, [r3, #18]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d10f      	bne.n	8012680 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012660:	68f9      	ldr	r1, [r7, #12]
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	8a5b      	ldrh	r3, [r3, #18]
 8012666:	461a      	mov	r2, r3
 8012668:	68f8      	ldr	r0, [r7, #12]
 801266a:	f000 f893 	bl	8012794 <udp_bind>
 801266e:	4603      	mov	r3, r0
 8012670:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8012672:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d002      	beq.n	8012680 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801267a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801267e:	e074      	b.n	801276a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8012680:	68bb      	ldr	r3, [r7, #8]
 8012682:	891b      	ldrh	r3, [r3, #8]
 8012684:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8012688:	4293      	cmp	r3, r2
 801268a:	d902      	bls.n	8012692 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801268c:	f04f 33ff 	mov.w	r3, #4294967295
 8012690:	e06b      	b.n	801276a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8012692:	2108      	movs	r1, #8
 8012694:	68b8      	ldr	r0, [r7, #8]
 8012696:	f7f9 ffcf 	bl	800c638 <pbuf_add_header>
 801269a:	4603      	mov	r3, r0
 801269c:	2b00      	cmp	r3, #0
 801269e:	d015      	beq.n	80126cc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80126a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80126a4:	2108      	movs	r1, #8
 80126a6:	2022      	movs	r0, #34	; 0x22
 80126a8:	f7f9 fd78 	bl	800c19c <pbuf_alloc>
 80126ac:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80126ae:	69fb      	ldr	r3, [r7, #28]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d102      	bne.n	80126ba <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80126b4:	f04f 33ff 	mov.w	r3, #4294967295
 80126b8:	e057      	b.n	801276a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80126ba:	68bb      	ldr	r3, [r7, #8]
 80126bc:	891b      	ldrh	r3, [r3, #8]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d006      	beq.n	80126d0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80126c2:	68b9      	ldr	r1, [r7, #8]
 80126c4:	69f8      	ldr	r0, [r7, #28]
 80126c6:	f7fa f965 	bl	800c994 <pbuf_chain>
 80126ca:	e001      	b.n	80126d0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80126cc:	68bb      	ldr	r3, [r7, #8]
 80126ce:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80126d0:	69fb      	ldr	r3, [r7, #28]
 80126d2:	895b      	ldrh	r3, [r3, #10]
 80126d4:	2b07      	cmp	r3, #7
 80126d6:	d806      	bhi.n	80126e6 <udp_sendto_if_src+0x11e>
 80126d8:	4b26      	ldr	r3, [pc, #152]	; (8012774 <udp_sendto_if_src+0x1ac>)
 80126da:	f240 320d 	movw	r2, #781	; 0x30d
 80126de:	492c      	ldr	r1, [pc, #176]	; (8012790 <udp_sendto_if_src+0x1c8>)
 80126e0:	4826      	ldr	r0, [pc, #152]	; (801277c <udp_sendto_if_src+0x1b4>)
 80126e2:	f005 f8bd 	bl	8017860 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80126e6:	69fb      	ldr	r3, [r7, #28]
 80126e8:	685b      	ldr	r3, [r3, #4]
 80126ea:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	8a5b      	ldrh	r3, [r3, #18]
 80126f0:	4618      	mov	r0, r3
 80126f2:	f7f8 fd9b 	bl	800b22c <lwip_htons>
 80126f6:	4603      	mov	r3, r0
 80126f8:	461a      	mov	r2, r3
 80126fa:	697b      	ldr	r3, [r7, #20]
 80126fc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80126fe:	887b      	ldrh	r3, [r7, #2]
 8012700:	4618      	mov	r0, r3
 8012702:	f7f8 fd93 	bl	800b22c <lwip_htons>
 8012706:	4603      	mov	r3, r0
 8012708:	461a      	mov	r2, r3
 801270a:	697b      	ldr	r3, [r7, #20]
 801270c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	2200      	movs	r2, #0
 8012712:	719a      	strb	r2, [r3, #6]
 8012714:	2200      	movs	r2, #0
 8012716:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012718:	69fb      	ldr	r3, [r7, #28]
 801271a:	891b      	ldrh	r3, [r3, #8]
 801271c:	4618      	mov	r0, r3
 801271e:	f7f8 fd85 	bl	800b22c <lwip_htons>
 8012722:	4603      	mov	r3, r0
 8012724:	461a      	mov	r2, r3
 8012726:	697b      	ldr	r3, [r7, #20]
 8012728:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801272a:	2311      	movs	r3, #17
 801272c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	7adb      	ldrb	r3, [r3, #11]
 8012732:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	7a9b      	ldrb	r3, [r3, #10]
 8012738:	7cb9      	ldrb	r1, [r7, #18]
 801273a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801273c:	9202      	str	r2, [sp, #8]
 801273e:	7cfa      	ldrb	r2, [r7, #19]
 8012740:	9201      	str	r2, [sp, #4]
 8012742:	9300      	str	r3, [sp, #0]
 8012744:	460b      	mov	r3, r1
 8012746:	687a      	ldr	r2, [r7, #4]
 8012748:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801274a:	69f8      	ldr	r0, [r7, #28]
 801274c:	f003 fafc 	bl	8015d48 <ip4_output_if_src>
 8012750:	4603      	mov	r3, r0
 8012752:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012754:	69fa      	ldr	r2, [r7, #28]
 8012756:	68bb      	ldr	r3, [r7, #8]
 8012758:	429a      	cmp	r2, r3
 801275a:	d004      	beq.n	8012766 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801275c:	69f8      	ldr	r0, [r7, #28]
 801275e:	f7fa f801 	bl	800c764 <pbuf_free>
    q = NULL;
 8012762:	2300      	movs	r3, #0
 8012764:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8012766:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801276a:	4618      	mov	r0, r3
 801276c:	3720      	adds	r7, #32
 801276e:	46bd      	mov	sp, r7
 8012770:	bd80      	pop	{r7, pc}
 8012772:	bf00      	nop
 8012774:	0801ebe8 	.word	0x0801ebe8
 8012778:	0801edd4 	.word	0x0801edd4
 801277c:	0801ec3c 	.word	0x0801ec3c
 8012780:	0801edf4 	.word	0x0801edf4
 8012784:	0801ee14 	.word	0x0801ee14
 8012788:	0801ee38 	.word	0x0801ee38
 801278c:	0801ee5c 	.word	0x0801ee5c
 8012790:	0801ee80 	.word	0x0801ee80

08012794 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b086      	sub	sp, #24
 8012798:	af00      	add	r7, sp, #0
 801279a:	60f8      	str	r0, [r7, #12]
 801279c:	60b9      	str	r1, [r7, #8]
 801279e:	4613      	mov	r3, r2
 80127a0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80127a2:	68bb      	ldr	r3, [r7, #8]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d101      	bne.n	80127ac <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80127a8:	4b39      	ldr	r3, [pc, #228]	; (8012890 <udp_bind+0xfc>)
 80127aa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d109      	bne.n	80127c6 <udp_bind+0x32>
 80127b2:	4b38      	ldr	r3, [pc, #224]	; (8012894 <udp_bind+0x100>)
 80127b4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80127b8:	4937      	ldr	r1, [pc, #220]	; (8012898 <udp_bind+0x104>)
 80127ba:	4838      	ldr	r0, [pc, #224]	; (801289c <udp_bind+0x108>)
 80127bc:	f005 f850 	bl	8017860 <iprintf>
 80127c0:	f06f 030f 	mvn.w	r3, #15
 80127c4:	e060      	b.n	8012888 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80127c6:	2300      	movs	r3, #0
 80127c8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80127ca:	4b35      	ldr	r3, [pc, #212]	; (80128a0 <udp_bind+0x10c>)
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	617b      	str	r3, [r7, #20]
 80127d0:	e009      	b.n	80127e6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80127d2:	68fa      	ldr	r2, [r7, #12]
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	429a      	cmp	r2, r3
 80127d8:	d102      	bne.n	80127e0 <udp_bind+0x4c>
      rebind = 1;
 80127da:	2301      	movs	r3, #1
 80127dc:	74fb      	strb	r3, [r7, #19]
      break;
 80127de:	e005      	b.n	80127ec <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80127e0:	697b      	ldr	r3, [r7, #20]
 80127e2:	68db      	ldr	r3, [r3, #12]
 80127e4:	617b      	str	r3, [r7, #20]
 80127e6:	697b      	ldr	r3, [r7, #20]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d1f2      	bne.n	80127d2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80127ec:	88fb      	ldrh	r3, [r7, #6]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d109      	bne.n	8012806 <udp_bind+0x72>
    port = udp_new_port();
 80127f2:	f7ff fcc5 	bl	8012180 <udp_new_port>
 80127f6:	4603      	mov	r3, r0
 80127f8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80127fa:	88fb      	ldrh	r3, [r7, #6]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d12c      	bne.n	801285a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012800:	f06f 0307 	mvn.w	r3, #7
 8012804:	e040      	b.n	8012888 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012806:	4b26      	ldr	r3, [pc, #152]	; (80128a0 <udp_bind+0x10c>)
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	617b      	str	r3, [r7, #20]
 801280c:	e022      	b.n	8012854 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801280e:	68fa      	ldr	r2, [r7, #12]
 8012810:	697b      	ldr	r3, [r7, #20]
 8012812:	429a      	cmp	r2, r3
 8012814:	d01b      	beq.n	801284e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012816:	697b      	ldr	r3, [r7, #20]
 8012818:	8a5b      	ldrh	r3, [r3, #18]
 801281a:	88fa      	ldrh	r2, [r7, #6]
 801281c:	429a      	cmp	r2, r3
 801281e:	d116      	bne.n	801284e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012820:	697b      	ldr	r3, [r7, #20]
 8012822:	681a      	ldr	r2, [r3, #0]
 8012824:	68bb      	ldr	r3, [r7, #8]
 8012826:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012828:	429a      	cmp	r2, r3
 801282a:	d00d      	beq.n	8012848 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d00a      	beq.n	8012848 <udp_bind+0xb4>
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d006      	beq.n	8012848 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801283a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801283c:	2b00      	cmp	r3, #0
 801283e:	d003      	beq.n	8012848 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d102      	bne.n	801284e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012848:	f06f 0307 	mvn.w	r3, #7
 801284c:	e01c      	b.n	8012888 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	68db      	ldr	r3, [r3, #12]
 8012852:	617b      	str	r3, [r7, #20]
 8012854:	697b      	ldr	r3, [r7, #20]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d1d9      	bne.n	801280e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801285a:	68bb      	ldr	r3, [r7, #8]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d002      	beq.n	8012866 <udp_bind+0xd2>
 8012860:	68bb      	ldr	r3, [r7, #8]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	e000      	b.n	8012868 <udp_bind+0xd4>
 8012866:	2300      	movs	r3, #0
 8012868:	68fa      	ldr	r2, [r7, #12]
 801286a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	88fa      	ldrh	r2, [r7, #6]
 8012870:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012872:	7cfb      	ldrb	r3, [r7, #19]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d106      	bne.n	8012886 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012878:	4b09      	ldr	r3, [pc, #36]	; (80128a0 <udp_bind+0x10c>)
 801287a:	681a      	ldr	r2, [r3, #0]
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012880:	4a07      	ldr	r2, [pc, #28]	; (80128a0 <udp_bind+0x10c>)
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012886:	2300      	movs	r3, #0
}
 8012888:	4618      	mov	r0, r3
 801288a:	3718      	adds	r7, #24
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}
 8012890:	0801fab8 	.word	0x0801fab8
 8012894:	0801ebe8 	.word	0x0801ebe8
 8012898:	0801eeb0 	.word	0x0801eeb0
 801289c:	0801ec3c 	.word	0x0801ec3c
 80128a0:	20006e54 	.word	0x20006e54

080128a4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b086      	sub	sp, #24
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	60f8      	str	r0, [r7, #12]
 80128ac:	60b9      	str	r1, [r7, #8]
 80128ae:	4613      	mov	r3, r2
 80128b0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d109      	bne.n	80128cc <udp_connect+0x28>
 80128b8:	4b2c      	ldr	r3, [pc, #176]	; (801296c <udp_connect+0xc8>)
 80128ba:	f240 4235 	movw	r2, #1077	; 0x435
 80128be:	492c      	ldr	r1, [pc, #176]	; (8012970 <udp_connect+0xcc>)
 80128c0:	482c      	ldr	r0, [pc, #176]	; (8012974 <udp_connect+0xd0>)
 80128c2:	f004 ffcd 	bl	8017860 <iprintf>
 80128c6:	f06f 030f 	mvn.w	r3, #15
 80128ca:	e04b      	b.n	8012964 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80128cc:	68bb      	ldr	r3, [r7, #8]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d109      	bne.n	80128e6 <udp_connect+0x42>
 80128d2:	4b26      	ldr	r3, [pc, #152]	; (801296c <udp_connect+0xc8>)
 80128d4:	f240 4236 	movw	r2, #1078	; 0x436
 80128d8:	4927      	ldr	r1, [pc, #156]	; (8012978 <udp_connect+0xd4>)
 80128da:	4826      	ldr	r0, [pc, #152]	; (8012974 <udp_connect+0xd0>)
 80128dc:	f004 ffc0 	bl	8017860 <iprintf>
 80128e0:	f06f 030f 	mvn.w	r3, #15
 80128e4:	e03e      	b.n	8012964 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	8a5b      	ldrh	r3, [r3, #18]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d10f      	bne.n	801290e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80128ee:	68f9      	ldr	r1, [r7, #12]
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	8a5b      	ldrh	r3, [r3, #18]
 80128f4:	461a      	mov	r2, r3
 80128f6:	68f8      	ldr	r0, [r7, #12]
 80128f8:	f7ff ff4c 	bl	8012794 <udp_bind>
 80128fc:	4603      	mov	r3, r0
 80128fe:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012900:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d002      	beq.n	801290e <udp_connect+0x6a>
      return err;
 8012908:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801290c:	e02a      	b.n	8012964 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d002      	beq.n	801291a <udp_connect+0x76>
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	e000      	b.n	801291c <udp_connect+0x78>
 801291a:	2300      	movs	r3, #0
 801291c:	68fa      	ldr	r2, [r7, #12]
 801291e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	88fa      	ldrh	r2, [r7, #6]
 8012924:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	7c1b      	ldrb	r3, [r3, #16]
 801292a:	f043 0304 	orr.w	r3, r3, #4
 801292e:	b2da      	uxtb	r2, r3
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012934:	4b11      	ldr	r3, [pc, #68]	; (801297c <udp_connect+0xd8>)
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	617b      	str	r3, [r7, #20]
 801293a:	e008      	b.n	801294e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801293c:	68fa      	ldr	r2, [r7, #12]
 801293e:	697b      	ldr	r3, [r7, #20]
 8012940:	429a      	cmp	r2, r3
 8012942:	d101      	bne.n	8012948 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8012944:	2300      	movs	r3, #0
 8012946:	e00d      	b.n	8012964 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012948:	697b      	ldr	r3, [r7, #20]
 801294a:	68db      	ldr	r3, [r3, #12]
 801294c:	617b      	str	r3, [r7, #20]
 801294e:	697b      	ldr	r3, [r7, #20]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d1f3      	bne.n	801293c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8012954:	4b09      	ldr	r3, [pc, #36]	; (801297c <udp_connect+0xd8>)
 8012956:	681a      	ldr	r2, [r3, #0]
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801295c:	4a07      	ldr	r2, [pc, #28]	; (801297c <udp_connect+0xd8>)
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8012962:	2300      	movs	r3, #0
}
 8012964:	4618      	mov	r0, r3
 8012966:	3718      	adds	r7, #24
 8012968:	46bd      	mov	sp, r7
 801296a:	bd80      	pop	{r7, pc}
 801296c:	0801ebe8 	.word	0x0801ebe8
 8012970:	0801eec8 	.word	0x0801eec8
 8012974:	0801ec3c 	.word	0x0801ec3c
 8012978:	0801eee4 	.word	0x0801eee4
 801297c:	20006e54 	.word	0x20006e54

08012980 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b084      	sub	sp, #16
 8012984:	af00      	add	r7, sp, #0
 8012986:	60f8      	str	r0, [r7, #12]
 8012988:	60b9      	str	r1, [r7, #8]
 801298a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d107      	bne.n	80129a2 <udp_recv+0x22>
 8012992:	4b08      	ldr	r3, [pc, #32]	; (80129b4 <udp_recv+0x34>)
 8012994:	f240 428a 	movw	r2, #1162	; 0x48a
 8012998:	4907      	ldr	r1, [pc, #28]	; (80129b8 <udp_recv+0x38>)
 801299a:	4808      	ldr	r0, [pc, #32]	; (80129bc <udp_recv+0x3c>)
 801299c:	f004 ff60 	bl	8017860 <iprintf>
 80129a0:	e005      	b.n	80129ae <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	68ba      	ldr	r2, [r7, #8]
 80129a6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	687a      	ldr	r2, [r7, #4]
 80129ac:	61da      	str	r2, [r3, #28]
}
 80129ae:	3710      	adds	r7, #16
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}
 80129b4:	0801ebe8 	.word	0x0801ebe8
 80129b8:	0801ef1c 	.word	0x0801ef1c
 80129bc:	0801ec3c 	.word	0x0801ec3c

080129c0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b084      	sub	sp, #16
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d107      	bne.n	80129de <udp_remove+0x1e>
 80129ce:	4b19      	ldr	r3, [pc, #100]	; (8012a34 <udp_remove+0x74>)
 80129d0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80129d4:	4918      	ldr	r1, [pc, #96]	; (8012a38 <udp_remove+0x78>)
 80129d6:	4819      	ldr	r0, [pc, #100]	; (8012a3c <udp_remove+0x7c>)
 80129d8:	f004 ff42 	bl	8017860 <iprintf>
 80129dc:	e026      	b.n	8012a2c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80129de:	4b18      	ldr	r3, [pc, #96]	; (8012a40 <udp_remove+0x80>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	687a      	ldr	r2, [r7, #4]
 80129e4:	429a      	cmp	r2, r3
 80129e6:	d105      	bne.n	80129f4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80129e8:	4b15      	ldr	r3, [pc, #84]	; (8012a40 <udp_remove+0x80>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	68db      	ldr	r3, [r3, #12]
 80129ee:	4a14      	ldr	r2, [pc, #80]	; (8012a40 <udp_remove+0x80>)
 80129f0:	6013      	str	r3, [r2, #0]
 80129f2:	e017      	b.n	8012a24 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80129f4:	4b12      	ldr	r3, [pc, #72]	; (8012a40 <udp_remove+0x80>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	60fb      	str	r3, [r7, #12]
 80129fa:	e010      	b.n	8012a1e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	68db      	ldr	r3, [r3, #12]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d009      	beq.n	8012a18 <udp_remove+0x58>
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	68db      	ldr	r3, [r3, #12]
 8012a08:	687a      	ldr	r2, [r7, #4]
 8012a0a:	429a      	cmp	r2, r3
 8012a0c:	d104      	bne.n	8012a18 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	68da      	ldr	r2, [r3, #12]
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	60da      	str	r2, [r3, #12]
        break;
 8012a16:	e005      	b.n	8012a24 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	68db      	ldr	r3, [r3, #12]
 8012a1c:	60fb      	str	r3, [r7, #12]
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d1eb      	bne.n	80129fc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012a24:	6879      	ldr	r1, [r7, #4]
 8012a26:	2000      	movs	r0, #0
 8012a28:	f7f9 f8a2 	bl	800bb70 <memp_free>
}
 8012a2c:	3710      	adds	r7, #16
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	bd80      	pop	{r7, pc}
 8012a32:	bf00      	nop
 8012a34:	0801ebe8 	.word	0x0801ebe8
 8012a38:	0801ef34 	.word	0x0801ef34
 8012a3c:	0801ec3c 	.word	0x0801ec3c
 8012a40:	20006e54 	.word	0x20006e54

08012a44 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b082      	sub	sp, #8
 8012a48:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012a4a:	2000      	movs	r0, #0
 8012a4c:	f7f9 f844 	bl	800bad8 <memp_malloc>
 8012a50:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d007      	beq.n	8012a68 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012a58:	2220      	movs	r2, #32
 8012a5a:	2100      	movs	r1, #0
 8012a5c:	6878      	ldr	r0, [r7, #4]
 8012a5e:	f004 f9e3 	bl	8016e28 <memset>
    pcb->ttl = UDP_TTL;
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	22ff      	movs	r2, #255	; 0xff
 8012a66:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012a68:	687b      	ldr	r3, [r7, #4]
}
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	3708      	adds	r7, #8
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	bd80      	pop	{r7, pc}
	...

08012a74 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012a74:	b480      	push	{r7}
 8012a76:	b085      	sub	sp, #20
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
 8012a7c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d01e      	beq.n	8012ac2 <udp_netif_ip_addr_changed+0x4e>
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d01a      	beq.n	8012ac2 <udp_netif_ip_addr_changed+0x4e>
 8012a8c:	683b      	ldr	r3, [r7, #0]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d017      	beq.n	8012ac2 <udp_netif_ip_addr_changed+0x4e>
 8012a92:	683b      	ldr	r3, [r7, #0]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d013      	beq.n	8012ac2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012a9a:	4b0d      	ldr	r3, [pc, #52]	; (8012ad0 <udp_netif_ip_addr_changed+0x5c>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	60fb      	str	r3, [r7, #12]
 8012aa0:	e00c      	b.n	8012abc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	681a      	ldr	r2, [r3, #0]
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d103      	bne.n	8012ab6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012aae:	683b      	ldr	r3, [r7, #0]
 8012ab0:	681a      	ldr	r2, [r3, #0]
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	68db      	ldr	r3, [r3, #12]
 8012aba:	60fb      	str	r3, [r7, #12]
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d1ef      	bne.n	8012aa2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012ac2:	bf00      	nop
 8012ac4:	3714      	adds	r7, #20
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012acc:	4770      	bx	lr
 8012ace:	bf00      	nop
 8012ad0:	20006e54 	.word	0x20006e54

08012ad4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012ad8:	4b20      	ldr	r3, [pc, #128]	; (8012b5c <dhcp_inc_pcb_refcount+0x88>)
 8012ada:	781b      	ldrb	r3, [r3, #0]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d133      	bne.n	8012b48 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8012ae0:	4b1f      	ldr	r3, [pc, #124]	; (8012b60 <dhcp_inc_pcb_refcount+0x8c>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d005      	beq.n	8012af4 <dhcp_inc_pcb_refcount+0x20>
 8012ae8:	4b1e      	ldr	r3, [pc, #120]	; (8012b64 <dhcp_inc_pcb_refcount+0x90>)
 8012aea:	22e5      	movs	r2, #229	; 0xe5
 8012aec:	491e      	ldr	r1, [pc, #120]	; (8012b68 <dhcp_inc_pcb_refcount+0x94>)
 8012aee:	481f      	ldr	r0, [pc, #124]	; (8012b6c <dhcp_inc_pcb_refcount+0x98>)
 8012af0:	f004 feb6 	bl	8017860 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8012af4:	f7ff ffa6 	bl	8012a44 <udp_new>
 8012af8:	4603      	mov	r3, r0
 8012afa:	4a19      	ldr	r2, [pc, #100]	; (8012b60 <dhcp_inc_pcb_refcount+0x8c>)
 8012afc:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8012afe:	4b18      	ldr	r3, [pc, #96]	; (8012b60 <dhcp_inc_pcb_refcount+0x8c>)
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d102      	bne.n	8012b0c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8012b06:	f04f 33ff 	mov.w	r3, #4294967295
 8012b0a:	e024      	b.n	8012b56 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8012b0c:	4b14      	ldr	r3, [pc, #80]	; (8012b60 <dhcp_inc_pcb_refcount+0x8c>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	7a5a      	ldrb	r2, [r3, #9]
 8012b12:	4b13      	ldr	r3, [pc, #76]	; (8012b60 <dhcp_inc_pcb_refcount+0x8c>)
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	f042 0220 	orr.w	r2, r2, #32
 8012b1a:	b2d2      	uxtb	r2, r2
 8012b1c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8012b1e:	4b10      	ldr	r3, [pc, #64]	; (8012b60 <dhcp_inc_pcb_refcount+0x8c>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	2244      	movs	r2, #68	; 0x44
 8012b24:	4912      	ldr	r1, [pc, #72]	; (8012b70 <dhcp_inc_pcb_refcount+0x9c>)
 8012b26:	4618      	mov	r0, r3
 8012b28:	f7ff fe34 	bl	8012794 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8012b2c:	4b0c      	ldr	r3, [pc, #48]	; (8012b60 <dhcp_inc_pcb_refcount+0x8c>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	2243      	movs	r2, #67	; 0x43
 8012b32:	490f      	ldr	r1, [pc, #60]	; (8012b70 <dhcp_inc_pcb_refcount+0x9c>)
 8012b34:	4618      	mov	r0, r3
 8012b36:	f7ff feb5 	bl	80128a4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8012b3a:	4b09      	ldr	r3, [pc, #36]	; (8012b60 <dhcp_inc_pcb_refcount+0x8c>)
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	2200      	movs	r2, #0
 8012b40:	490c      	ldr	r1, [pc, #48]	; (8012b74 <dhcp_inc_pcb_refcount+0xa0>)
 8012b42:	4618      	mov	r0, r3
 8012b44:	f7ff ff1c 	bl	8012980 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8012b48:	4b04      	ldr	r3, [pc, #16]	; (8012b5c <dhcp_inc_pcb_refcount+0x88>)
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	3301      	adds	r3, #1
 8012b4e:	b2da      	uxtb	r2, r3
 8012b50:	4b02      	ldr	r3, [pc, #8]	; (8012b5c <dhcp_inc_pcb_refcount+0x88>)
 8012b52:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8012b54:	2300      	movs	r3, #0
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	bd80      	pop	{r7, pc}
 8012b5a:	bf00      	nop
 8012b5c:	2000049c 	.word	0x2000049c
 8012b60:	20000498 	.word	0x20000498
 8012b64:	0801ef4c 	.word	0x0801ef4c
 8012b68:	0801ef84 	.word	0x0801ef84
 8012b6c:	0801efac 	.word	0x0801efac
 8012b70:	0801fab8 	.word	0x0801fab8
 8012b74:	08014391 	.word	0x08014391

08012b78 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8012b7c:	4b0e      	ldr	r3, [pc, #56]	; (8012bb8 <dhcp_dec_pcb_refcount+0x40>)
 8012b7e:	781b      	ldrb	r3, [r3, #0]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d105      	bne.n	8012b90 <dhcp_dec_pcb_refcount+0x18>
 8012b84:	4b0d      	ldr	r3, [pc, #52]	; (8012bbc <dhcp_dec_pcb_refcount+0x44>)
 8012b86:	22ff      	movs	r2, #255	; 0xff
 8012b88:	490d      	ldr	r1, [pc, #52]	; (8012bc0 <dhcp_dec_pcb_refcount+0x48>)
 8012b8a:	480e      	ldr	r0, [pc, #56]	; (8012bc4 <dhcp_dec_pcb_refcount+0x4c>)
 8012b8c:	f004 fe68 	bl	8017860 <iprintf>
  dhcp_pcb_refcount--;
 8012b90:	4b09      	ldr	r3, [pc, #36]	; (8012bb8 <dhcp_dec_pcb_refcount+0x40>)
 8012b92:	781b      	ldrb	r3, [r3, #0]
 8012b94:	3b01      	subs	r3, #1
 8012b96:	b2da      	uxtb	r2, r3
 8012b98:	4b07      	ldr	r3, [pc, #28]	; (8012bb8 <dhcp_dec_pcb_refcount+0x40>)
 8012b9a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8012b9c:	4b06      	ldr	r3, [pc, #24]	; (8012bb8 <dhcp_dec_pcb_refcount+0x40>)
 8012b9e:	781b      	ldrb	r3, [r3, #0]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d107      	bne.n	8012bb4 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8012ba4:	4b08      	ldr	r3, [pc, #32]	; (8012bc8 <dhcp_dec_pcb_refcount+0x50>)
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	4618      	mov	r0, r3
 8012baa:	f7ff ff09 	bl	80129c0 <udp_remove>
    dhcp_pcb = NULL;
 8012bae:	4b06      	ldr	r3, [pc, #24]	; (8012bc8 <dhcp_dec_pcb_refcount+0x50>)
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	601a      	str	r2, [r3, #0]
  }
}
 8012bb4:	bf00      	nop
 8012bb6:	bd80      	pop	{r7, pc}
 8012bb8:	2000049c 	.word	0x2000049c
 8012bbc:	0801ef4c 	.word	0x0801ef4c
 8012bc0:	0801efd4 	.word	0x0801efd4
 8012bc4:	0801efac 	.word	0x0801efac
 8012bc8:	20000498 	.word	0x20000498

08012bcc <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b084      	sub	sp, #16
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bd8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012bda:	210c      	movs	r1, #12
 8012bdc:	68f8      	ldr	r0, [r7, #12]
 8012bde:	f001 f819 	bl	8013c14 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012be2:	4b06      	ldr	r3, [pc, #24]	; (8012bfc <dhcp_handle_nak+0x30>)
 8012be4:	4a05      	ldr	r2, [pc, #20]	; (8012bfc <dhcp_handle_nak+0x30>)
 8012be6:	4905      	ldr	r1, [pc, #20]	; (8012bfc <dhcp_handle_nak+0x30>)
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f7f9 f963 	bl	800beb4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8012bee:	6878      	ldr	r0, [r7, #4]
 8012bf0:	f000 fc0c 	bl	801340c <dhcp_discover>
}
 8012bf4:	bf00      	nop
 8012bf6:	3710      	adds	r7, #16
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}
 8012bfc:	0801fab8 	.word	0x0801fab8

08012c00 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b084      	sub	sp, #16
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c0c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8012c0e:	2108      	movs	r1, #8
 8012c10:	68f8      	ldr	r0, [r7, #12]
 8012c12:	f000 ffff 	bl	8013c14 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	331c      	adds	r3, #28
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	4619      	mov	r1, r3
 8012c1e:	6878      	ldr	r0, [r7, #4]
 8012c20:	f002 fb00 	bl	8015224 <etharp_query>
 8012c24:	4603      	mov	r3, r0
 8012c26:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	799b      	ldrb	r3, [r3, #6]
 8012c2c:	2bff      	cmp	r3, #255	; 0xff
 8012c2e:	d005      	beq.n	8012c3c <dhcp_check+0x3c>
    dhcp->tries++;
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	799b      	ldrb	r3, [r3, #6]
 8012c34:	3301      	adds	r3, #1
 8012c36:	b2da      	uxtb	r2, r3
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8012c3c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8012c40:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012c42:	893b      	ldrh	r3, [r7, #8]
 8012c44:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012c48:	4a06      	ldr	r2, [pc, #24]	; (8012c64 <dhcp_check+0x64>)
 8012c4a:	fb82 1203 	smull	r1, r2, r2, r3
 8012c4e:	1152      	asrs	r2, r2, #5
 8012c50:	17db      	asrs	r3, r3, #31
 8012c52:	1ad3      	subs	r3, r2, r3
 8012c54:	b29a      	uxth	r2, r3
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8012c5a:	bf00      	nop
 8012c5c:	3710      	adds	r7, #16
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}
 8012c62:	bf00      	nop
 8012c64:	10624dd3 	.word	0x10624dd3

08012c68 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b084      	sub	sp, #16
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
 8012c70:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c76:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012c78:	4b0c      	ldr	r3, [pc, #48]	; (8012cac <dhcp_handle_offer+0x44>)
 8012c7a:	789b      	ldrb	r3, [r3, #2]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d011      	beq.n	8012ca4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	2200      	movs	r2, #0
 8012c84:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8012c86:	4b0a      	ldr	r3, [pc, #40]	; (8012cb0 <dhcp_handle_offer+0x48>)
 8012c88:	689b      	ldr	r3, [r3, #8]
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f7f8 fae3 	bl	800b256 <lwip_htonl>
 8012c90:	4602      	mov	r2, r0
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012c96:	683b      	ldr	r3, [r7, #0]
 8012c98:	691a      	ldr	r2, [r3, #16]
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f000 f808 	bl	8012cb4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012ca4:	bf00      	nop
 8012ca6:	3710      	adds	r7, #16
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd80      	pop	{r7, pc}
 8012cac:	20006e58 	.word	0x20006e58
 8012cb0:	20006e60 	.word	0x20006e60

08012cb4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012cb4:	b5b0      	push	{r4, r5, r7, lr}
 8012cb6:	b08a      	sub	sp, #40	; 0x28
 8012cb8:	af02      	add	r7, sp, #8
 8012cba:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d109      	bne.n	8012cd6 <dhcp_select+0x22>
 8012cc2:	4b71      	ldr	r3, [pc, #452]	; (8012e88 <dhcp_select+0x1d4>)
 8012cc4:	f240 1277 	movw	r2, #375	; 0x177
 8012cc8:	4970      	ldr	r1, [pc, #448]	; (8012e8c <dhcp_select+0x1d8>)
 8012cca:	4871      	ldr	r0, [pc, #452]	; (8012e90 <dhcp_select+0x1dc>)
 8012ccc:	f004 fdc8 	bl	8017860 <iprintf>
 8012cd0:	f06f 030f 	mvn.w	r3, #15
 8012cd4:	e0d3      	b.n	8012e7e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cda:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8012cdc:	69bb      	ldr	r3, [r7, #24]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d109      	bne.n	8012cf6 <dhcp_select+0x42>
 8012ce2:	4b69      	ldr	r3, [pc, #420]	; (8012e88 <dhcp_select+0x1d4>)
 8012ce4:	f240 1279 	movw	r2, #377	; 0x179
 8012ce8:	496a      	ldr	r1, [pc, #424]	; (8012e94 <dhcp_select+0x1e0>)
 8012cea:	4869      	ldr	r0, [pc, #420]	; (8012e90 <dhcp_select+0x1dc>)
 8012cec:	f004 fdb8 	bl	8017860 <iprintf>
 8012cf0:	f06f 0305 	mvn.w	r3, #5
 8012cf4:	e0c3      	b.n	8012e7e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8012cf6:	2101      	movs	r1, #1
 8012cf8:	69b8      	ldr	r0, [r7, #24]
 8012cfa:	f000 ff8b 	bl	8013c14 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012cfe:	f107 030c 	add.w	r3, r7, #12
 8012d02:	2203      	movs	r2, #3
 8012d04:	69b9      	ldr	r1, [r7, #24]
 8012d06:	6878      	ldr	r0, [r7, #4]
 8012d08:	f001 fc10 	bl	801452c <dhcp_create_msg>
 8012d0c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012d0e:	697b      	ldr	r3, [r7, #20]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	f000 8085 	beq.w	8012e20 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012d16:	697b      	ldr	r3, [r7, #20]
 8012d18:	685b      	ldr	r3, [r3, #4]
 8012d1a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012d1c:	89b8      	ldrh	r0, [r7, #12]
 8012d1e:	693b      	ldr	r3, [r7, #16]
 8012d20:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012d24:	2302      	movs	r3, #2
 8012d26:	2239      	movs	r2, #57	; 0x39
 8012d28:	f000 ff8e 	bl	8013c48 <dhcp_option>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012d30:	89b8      	ldrh	r0, [r7, #12]
 8012d32:	693b      	ldr	r3, [r7, #16]
 8012d34:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d3c:	461a      	mov	r2, r3
 8012d3e:	f000 ffdd 	bl	8013cfc <dhcp_option_short>
 8012d42:	4603      	mov	r3, r0
 8012d44:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012d46:	89b8      	ldrh	r0, [r7, #12]
 8012d48:	693b      	ldr	r3, [r7, #16]
 8012d4a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012d4e:	2304      	movs	r3, #4
 8012d50:	2232      	movs	r2, #50	; 0x32
 8012d52:	f000 ff79 	bl	8013c48 <dhcp_option>
 8012d56:	4603      	mov	r3, r0
 8012d58:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012d5a:	89bc      	ldrh	r4, [r7, #12]
 8012d5c:	693b      	ldr	r3, [r7, #16]
 8012d5e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012d62:	69bb      	ldr	r3, [r7, #24]
 8012d64:	69db      	ldr	r3, [r3, #28]
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7f8 fa75 	bl	800b256 <lwip_htonl>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	461a      	mov	r2, r3
 8012d70:	4629      	mov	r1, r5
 8012d72:	4620      	mov	r0, r4
 8012d74:	f000 fff4 	bl	8013d60 <dhcp_option_long>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012d7c:	89b8      	ldrh	r0, [r7, #12]
 8012d7e:	693b      	ldr	r3, [r7, #16]
 8012d80:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012d84:	2304      	movs	r3, #4
 8012d86:	2236      	movs	r2, #54	; 0x36
 8012d88:	f000 ff5e 	bl	8013c48 <dhcp_option>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8012d90:	89bc      	ldrh	r4, [r7, #12]
 8012d92:	693b      	ldr	r3, [r7, #16]
 8012d94:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012d98:	69bb      	ldr	r3, [r7, #24]
 8012d9a:	699b      	ldr	r3, [r3, #24]
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f7f8 fa5a 	bl	800b256 <lwip_htonl>
 8012da2:	4603      	mov	r3, r0
 8012da4:	461a      	mov	r2, r3
 8012da6:	4629      	mov	r1, r5
 8012da8:	4620      	mov	r0, r4
 8012daa:	f000 ffd9 	bl	8013d60 <dhcp_option_long>
 8012dae:	4603      	mov	r3, r0
 8012db0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012db2:	89b8      	ldrh	r0, [r7, #12]
 8012db4:	693b      	ldr	r3, [r7, #16]
 8012db6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012dba:	2303      	movs	r3, #3
 8012dbc:	2237      	movs	r2, #55	; 0x37
 8012dbe:	f000 ff43 	bl	8013c48 <dhcp_option>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	77bb      	strb	r3, [r7, #30]
 8012dca:	e00e      	b.n	8012dea <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012dcc:	89b8      	ldrh	r0, [r7, #12]
 8012dce:	693b      	ldr	r3, [r7, #16]
 8012dd0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012dd4:	7fbb      	ldrb	r3, [r7, #30]
 8012dd6:	4a30      	ldr	r2, [pc, #192]	; (8012e98 <dhcp_select+0x1e4>)
 8012dd8:	5cd3      	ldrb	r3, [r2, r3]
 8012dda:	461a      	mov	r2, r3
 8012ddc:	f000 ff68 	bl	8013cb0 <dhcp_option_byte>
 8012de0:	4603      	mov	r3, r0
 8012de2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012de4:	7fbb      	ldrb	r3, [r7, #30]
 8012de6:	3301      	adds	r3, #1
 8012de8:	77bb      	strb	r3, [r7, #30]
 8012dea:	7fbb      	ldrb	r3, [r7, #30]
 8012dec:	2b02      	cmp	r3, #2
 8012dee:	d9ed      	bls.n	8012dcc <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012df0:	89b8      	ldrh	r0, [r7, #12]
 8012df2:	693b      	ldr	r3, [r7, #16]
 8012df4:	33f0      	adds	r3, #240	; 0xf0
 8012df6:	697a      	ldr	r2, [r7, #20]
 8012df8:	4619      	mov	r1, r3
 8012dfa:	f001 fc6d 	bl	80146d8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012dfe:	4b27      	ldr	r3, [pc, #156]	; (8012e9c <dhcp_select+0x1e8>)
 8012e00:	6818      	ldr	r0, [r3, #0]
 8012e02:	4b27      	ldr	r3, [pc, #156]	; (8012ea0 <dhcp_select+0x1ec>)
 8012e04:	9301      	str	r3, [sp, #4]
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	9300      	str	r3, [sp, #0]
 8012e0a:	2343      	movs	r3, #67	; 0x43
 8012e0c:	4a25      	ldr	r2, [pc, #148]	; (8012ea4 <dhcp_select+0x1f0>)
 8012e0e:	6979      	ldr	r1, [r7, #20]
 8012e10:	f7ff fbda 	bl	80125c8 <udp_sendto_if_src>
 8012e14:	4603      	mov	r3, r0
 8012e16:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012e18:	6978      	ldr	r0, [r7, #20]
 8012e1a:	f7f9 fca3 	bl	800c764 <pbuf_free>
 8012e1e:	e001      	b.n	8012e24 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012e20:	23ff      	movs	r3, #255	; 0xff
 8012e22:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012e24:	69bb      	ldr	r3, [r7, #24]
 8012e26:	799b      	ldrb	r3, [r3, #6]
 8012e28:	2bff      	cmp	r3, #255	; 0xff
 8012e2a:	d005      	beq.n	8012e38 <dhcp_select+0x184>
    dhcp->tries++;
 8012e2c:	69bb      	ldr	r3, [r7, #24]
 8012e2e:	799b      	ldrb	r3, [r3, #6]
 8012e30:	3301      	adds	r3, #1
 8012e32:	b2da      	uxtb	r2, r3
 8012e34:	69bb      	ldr	r3, [r7, #24]
 8012e36:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012e38:	69bb      	ldr	r3, [r7, #24]
 8012e3a:	799b      	ldrb	r3, [r3, #6]
 8012e3c:	2b05      	cmp	r3, #5
 8012e3e:	d80d      	bhi.n	8012e5c <dhcp_select+0x1a8>
 8012e40:	69bb      	ldr	r3, [r7, #24]
 8012e42:	799b      	ldrb	r3, [r3, #6]
 8012e44:	461a      	mov	r2, r3
 8012e46:	2301      	movs	r3, #1
 8012e48:	4093      	lsls	r3, r2
 8012e4a:	b29b      	uxth	r3, r3
 8012e4c:	461a      	mov	r2, r3
 8012e4e:	0152      	lsls	r2, r2, #5
 8012e50:	1ad2      	subs	r2, r2, r3
 8012e52:	0092      	lsls	r2, r2, #2
 8012e54:	4413      	add	r3, r2
 8012e56:	00db      	lsls	r3, r3, #3
 8012e58:	b29b      	uxth	r3, r3
 8012e5a:	e001      	b.n	8012e60 <dhcp_select+0x1ac>
 8012e5c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012e60:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012e62:	89fb      	ldrh	r3, [r7, #14]
 8012e64:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012e68:	4a0f      	ldr	r2, [pc, #60]	; (8012ea8 <dhcp_select+0x1f4>)
 8012e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8012e6e:	1152      	asrs	r2, r2, #5
 8012e70:	17db      	asrs	r3, r3, #31
 8012e72:	1ad3      	subs	r3, r2, r3
 8012e74:	b29a      	uxth	r2, r3
 8012e76:	69bb      	ldr	r3, [r7, #24]
 8012e78:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012e7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012e7e:	4618      	mov	r0, r3
 8012e80:	3720      	adds	r7, #32
 8012e82:	46bd      	mov	sp, r7
 8012e84:	bdb0      	pop	{r4, r5, r7, pc}
 8012e86:	bf00      	nop
 8012e88:	0801ef4c 	.word	0x0801ef4c
 8012e8c:	0801eff8 	.word	0x0801eff8
 8012e90:	0801efac 	.word	0x0801efac
 8012e94:	0801f014 	.word	0x0801f014
 8012e98:	20000070 	.word	0x20000070
 8012e9c:	20000498 	.word	0x20000498
 8012ea0:	0801fab8 	.word	0x0801fab8
 8012ea4:	0801fabc 	.word	0x0801fabc
 8012ea8:	10624dd3 	.word	0x10624dd3

08012eac <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b082      	sub	sp, #8
 8012eb0:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8012eb2:	4b27      	ldr	r3, [pc, #156]	; (8012f50 <dhcp_coarse_tmr+0xa4>)
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	607b      	str	r3, [r7, #4]
 8012eb8:	e042      	b.n	8012f40 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ebe:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d039      	beq.n	8012f3a <dhcp_coarse_tmr+0x8e>
 8012ec6:	683b      	ldr	r3, [r7, #0]
 8012ec8:	795b      	ldrb	r3, [r3, #5]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d035      	beq.n	8012f3a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	8a9b      	ldrh	r3, [r3, #20]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d012      	beq.n	8012efc <dhcp_coarse_tmr+0x50>
 8012ed6:	683b      	ldr	r3, [r7, #0]
 8012ed8:	8a5b      	ldrh	r3, [r3, #18]
 8012eda:	3301      	adds	r3, #1
 8012edc:	b29a      	uxth	r2, r3
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	825a      	strh	r2, [r3, #18]
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	8a5a      	ldrh	r2, [r3, #18]
 8012ee6:	683b      	ldr	r3, [r7, #0]
 8012ee8:	8a9b      	ldrh	r3, [r3, #20]
 8012eea:	429a      	cmp	r2, r3
 8012eec:	d106      	bne.n	8012efc <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8012eee:	6878      	ldr	r0, [r7, #4]
 8012ef0:	f000 fdf6 	bl	8013ae0 <dhcp_release_and_stop>
        dhcp_start(netif);
 8012ef4:	6878      	ldr	r0, [r7, #4]
 8012ef6:	f000 f969 	bl	80131cc <dhcp_start>
 8012efa:	e01e      	b.n	8012f3a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	8a1b      	ldrh	r3, [r3, #16]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d00b      	beq.n	8012f1c <dhcp_coarse_tmr+0x70>
 8012f04:	683b      	ldr	r3, [r7, #0]
 8012f06:	8a1b      	ldrh	r3, [r3, #16]
 8012f08:	1e5a      	subs	r2, r3, #1
 8012f0a:	b291      	uxth	r1, r2
 8012f0c:	683a      	ldr	r2, [r7, #0]
 8012f0e:	8211      	strh	r1, [r2, #16]
 8012f10:	2b01      	cmp	r3, #1
 8012f12:	d103      	bne.n	8012f1c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	f000 f8c6 	bl	80130a6 <dhcp_t2_timeout>
 8012f1a:	e00e      	b.n	8012f3a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8012f1c:	683b      	ldr	r3, [r7, #0]
 8012f1e:	89db      	ldrh	r3, [r3, #14]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d00a      	beq.n	8012f3a <dhcp_coarse_tmr+0x8e>
 8012f24:	683b      	ldr	r3, [r7, #0]
 8012f26:	89db      	ldrh	r3, [r3, #14]
 8012f28:	1e5a      	subs	r2, r3, #1
 8012f2a:	b291      	uxth	r1, r2
 8012f2c:	683a      	ldr	r2, [r7, #0]
 8012f2e:	81d1      	strh	r1, [r2, #14]
 8012f30:	2b01      	cmp	r3, #1
 8012f32:	d102      	bne.n	8012f3a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8012f34:	6878      	ldr	r0, [r7, #4]
 8012f36:	f000 f888 	bl	801304a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	607b      	str	r3, [r7, #4]
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d1b9      	bne.n	8012eba <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8012f46:	bf00      	nop
 8012f48:	bf00      	nop
 8012f4a:	3708      	adds	r7, #8
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	bd80      	pop	{r7, pc}
 8012f50:	20006e2c 	.word	0x20006e2c

08012f54 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b082      	sub	sp, #8
 8012f58:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8012f5a:	4b16      	ldr	r3, [pc, #88]	; (8012fb4 <dhcp_fine_tmr+0x60>)
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	607b      	str	r3, [r7, #4]
 8012f60:	e020      	b.n	8012fa4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f66:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012f68:	683b      	ldr	r3, [r7, #0]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d017      	beq.n	8012f9e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8012f6e:	683b      	ldr	r3, [r7, #0]
 8012f70:	891b      	ldrh	r3, [r3, #8]
 8012f72:	2b01      	cmp	r3, #1
 8012f74:	d906      	bls.n	8012f84 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8012f76:	683b      	ldr	r3, [r7, #0]
 8012f78:	891b      	ldrh	r3, [r3, #8]
 8012f7a:	3b01      	subs	r3, #1
 8012f7c:	b29a      	uxth	r2, r3
 8012f7e:	683b      	ldr	r3, [r7, #0]
 8012f80:	811a      	strh	r2, [r3, #8]
 8012f82:	e00c      	b.n	8012f9e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8012f84:	683b      	ldr	r3, [r7, #0]
 8012f86:	891b      	ldrh	r3, [r3, #8]
 8012f88:	2b01      	cmp	r3, #1
 8012f8a:	d108      	bne.n	8012f9e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	891b      	ldrh	r3, [r3, #8]
 8012f90:	3b01      	subs	r3, #1
 8012f92:	b29a      	uxth	r2, r3
 8012f94:	683b      	ldr	r3, [r7, #0]
 8012f96:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012f98:	6878      	ldr	r0, [r7, #4]
 8012f9a:	f000 f80d 	bl	8012fb8 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	607b      	str	r3, [r7, #4]
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d1db      	bne.n	8012f62 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8012faa:	bf00      	nop
 8012fac:	bf00      	nop
 8012fae:	3708      	adds	r7, #8
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}
 8012fb4:	20006e2c 	.word	0x20006e2c

08012fb8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b084      	sub	sp, #16
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fc4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	795b      	ldrb	r3, [r3, #5]
 8012fca:	2b0c      	cmp	r3, #12
 8012fcc:	d003      	beq.n	8012fd6 <dhcp_timeout+0x1e>
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	795b      	ldrb	r3, [r3, #5]
 8012fd2:	2b06      	cmp	r3, #6
 8012fd4:	d103      	bne.n	8012fde <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8012fd6:	6878      	ldr	r0, [r7, #4]
 8012fd8:	f000 fa18 	bl	801340c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8012fdc:	e031      	b.n	8013042 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	795b      	ldrb	r3, [r3, #5]
 8012fe2:	2b01      	cmp	r3, #1
 8012fe4:	d10e      	bne.n	8013004 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	799b      	ldrb	r3, [r3, #6]
 8012fea:	2b05      	cmp	r3, #5
 8012fec:	d803      	bhi.n	8012ff6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8012fee:	6878      	ldr	r0, [r7, #4]
 8012ff0:	f7ff fe60 	bl	8012cb4 <dhcp_select>
}
 8012ff4:	e025      	b.n	8013042 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8012ff6:	6878      	ldr	r0, [r7, #4]
 8012ff8:	f000 fd72 	bl	8013ae0 <dhcp_release_and_stop>
      dhcp_start(netif);
 8012ffc:	6878      	ldr	r0, [r7, #4]
 8012ffe:	f000 f8e5 	bl	80131cc <dhcp_start>
}
 8013002:	e01e      	b.n	8013042 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	795b      	ldrb	r3, [r3, #5]
 8013008:	2b08      	cmp	r3, #8
 801300a:	d10b      	bne.n	8013024 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	799b      	ldrb	r3, [r3, #6]
 8013010:	2b01      	cmp	r3, #1
 8013012:	d803      	bhi.n	801301c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8013014:	6878      	ldr	r0, [r7, #4]
 8013016:	f7ff fdf3 	bl	8012c00 <dhcp_check>
}
 801301a:	e012      	b.n	8013042 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801301c:	6878      	ldr	r0, [r7, #4]
 801301e:	f000 fa97 	bl	8013550 <dhcp_bind>
}
 8013022:	e00e      	b.n	8013042 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	795b      	ldrb	r3, [r3, #5]
 8013028:	2b03      	cmp	r3, #3
 801302a:	d10a      	bne.n	8013042 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	799b      	ldrb	r3, [r3, #6]
 8013030:	2b01      	cmp	r3, #1
 8013032:	d803      	bhi.n	801303c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8013034:	6878      	ldr	r0, [r7, #4]
 8013036:	f000 fc9d 	bl	8013974 <dhcp_reboot>
}
 801303a:	e002      	b.n	8013042 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801303c:	6878      	ldr	r0, [r7, #4]
 801303e:	f000 f9e5 	bl	801340c <dhcp_discover>
}
 8013042:	bf00      	nop
 8013044:	3710      	adds	r7, #16
 8013046:	46bd      	mov	sp, r7
 8013048:	bd80      	pop	{r7, pc}

0801304a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801304a:	b580      	push	{r7, lr}
 801304c:	b084      	sub	sp, #16
 801304e:	af00      	add	r7, sp, #0
 8013050:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013056:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	795b      	ldrb	r3, [r3, #5]
 801305c:	2b01      	cmp	r3, #1
 801305e:	d007      	beq.n	8013070 <dhcp_t1_timeout+0x26>
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	795b      	ldrb	r3, [r3, #5]
 8013064:	2b0a      	cmp	r3, #10
 8013066:	d003      	beq.n	8013070 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801306c:	2b05      	cmp	r3, #5
 801306e:	d116      	bne.n	801309e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8013070:	6878      	ldr	r0, [r7, #4]
 8013072:	f000 fb47 	bl	8013704 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	899b      	ldrh	r3, [r3, #12]
 801307a:	461a      	mov	r2, r3
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	8a5b      	ldrh	r3, [r3, #18]
 8013080:	1ad3      	subs	r3, r2, r3
 8013082:	2b01      	cmp	r3, #1
 8013084:	dd0b      	ble.n	801309e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	899b      	ldrh	r3, [r3, #12]
 801308a:	461a      	mov	r2, r3
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	8a5b      	ldrh	r3, [r3, #18]
 8013090:	1ad3      	subs	r3, r2, r3
 8013092:	0fda      	lsrs	r2, r3, #31
 8013094:	4413      	add	r3, r2
 8013096:	105b      	asrs	r3, r3, #1
 8013098:	b29a      	uxth	r2, r3
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801309e:	bf00      	nop
 80130a0:	3710      	adds	r7, #16
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}

080130a6 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80130a6:	b580      	push	{r7, lr}
 80130a8:	b084      	sub	sp, #16
 80130aa:	af00      	add	r7, sp, #0
 80130ac:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130b2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	795b      	ldrb	r3, [r3, #5]
 80130b8:	2b01      	cmp	r3, #1
 80130ba:	d00b      	beq.n	80130d4 <dhcp_t2_timeout+0x2e>
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	795b      	ldrb	r3, [r3, #5]
 80130c0:	2b0a      	cmp	r3, #10
 80130c2:	d007      	beq.n	80130d4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80130c8:	2b05      	cmp	r3, #5
 80130ca:	d003      	beq.n	80130d4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	795b      	ldrb	r3, [r3, #5]
 80130d0:	2b04      	cmp	r3, #4
 80130d2:	d116      	bne.n	8013102 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80130d4:	6878      	ldr	r0, [r7, #4]
 80130d6:	f000 fbb1 	bl	801383c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	8a9b      	ldrh	r3, [r3, #20]
 80130de:	461a      	mov	r2, r3
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	8a5b      	ldrh	r3, [r3, #18]
 80130e4:	1ad3      	subs	r3, r2, r3
 80130e6:	2b01      	cmp	r3, #1
 80130e8:	dd0b      	ble.n	8013102 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	8a9b      	ldrh	r3, [r3, #20]
 80130ee:	461a      	mov	r2, r3
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	8a5b      	ldrh	r3, [r3, #18]
 80130f4:	1ad3      	subs	r3, r2, r3
 80130f6:	0fda      	lsrs	r2, r3, #31
 80130f8:	4413      	add	r3, r2
 80130fa:	105b      	asrs	r3, r3, #1
 80130fc:	b29a      	uxth	r2, r3
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8013102:	bf00      	nop
 8013104:	3710      	adds	r7, #16
 8013106:	46bd      	mov	sp, r7
 8013108:	bd80      	pop	{r7, pc}
	...

0801310c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b084      	sub	sp, #16
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
 8013114:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801311a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	2200      	movs	r2, #0
 8013120:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	2200      	movs	r2, #0
 8013126:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8013128:	4b26      	ldr	r3, [pc, #152]	; (80131c4 <dhcp_handle_ack+0xb8>)
 801312a:	78db      	ldrb	r3, [r3, #3]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d003      	beq.n	8013138 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8013130:	4b25      	ldr	r3, [pc, #148]	; (80131c8 <dhcp_handle_ack+0xbc>)
 8013132:	68da      	ldr	r2, [r3, #12]
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8013138:	4b22      	ldr	r3, [pc, #136]	; (80131c4 <dhcp_handle_ack+0xb8>)
 801313a:	791b      	ldrb	r3, [r3, #4]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d004      	beq.n	801314a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8013140:	4b21      	ldr	r3, [pc, #132]	; (80131c8 <dhcp_handle_ack+0xbc>)
 8013142:	691a      	ldr	r2, [r3, #16]
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	62da      	str	r2, [r3, #44]	; 0x2c
 8013148:	e004      	b.n	8013154 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801314e:	085a      	lsrs	r2, r3, #1
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8013154:	4b1b      	ldr	r3, [pc, #108]	; (80131c4 <dhcp_handle_ack+0xb8>)
 8013156:	795b      	ldrb	r3, [r3, #5]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d004      	beq.n	8013166 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801315c:	4b1a      	ldr	r3, [pc, #104]	; (80131c8 <dhcp_handle_ack+0xbc>)
 801315e:	695a      	ldr	r2, [r3, #20]
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	631a      	str	r2, [r3, #48]	; 0x30
 8013164:	e007      	b.n	8013176 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801316a:	4613      	mov	r3, r2
 801316c:	00db      	lsls	r3, r3, #3
 801316e:	1a9b      	subs	r3, r3, r2
 8013170:	08da      	lsrs	r2, r3, #3
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013176:	683b      	ldr	r3, [r7, #0]
 8013178:	691a      	ldr	r2, [r3, #16]
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801317e:	4b11      	ldr	r3, [pc, #68]	; (80131c4 <dhcp_handle_ack+0xb8>)
 8013180:	799b      	ldrb	r3, [r3, #6]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d00b      	beq.n	801319e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8013186:	4b10      	ldr	r3, [pc, #64]	; (80131c8 <dhcp_handle_ack+0xbc>)
 8013188:	699b      	ldr	r3, [r3, #24]
 801318a:	4618      	mov	r0, r3
 801318c:	f7f8 f863 	bl	800b256 <lwip_htonl>
 8013190:	4602      	mov	r2, r0
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	2201      	movs	r2, #1
 801319a:	71da      	strb	r2, [r3, #7]
 801319c:	e002      	b.n	80131a4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	2200      	movs	r2, #0
 80131a2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80131a4:	4b07      	ldr	r3, [pc, #28]	; (80131c4 <dhcp_handle_ack+0xb8>)
 80131a6:	79db      	ldrb	r3, [r3, #7]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d007      	beq.n	80131bc <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80131ac:	4b06      	ldr	r3, [pc, #24]	; (80131c8 <dhcp_handle_ack+0xbc>)
 80131ae:	69db      	ldr	r3, [r3, #28]
 80131b0:	4618      	mov	r0, r3
 80131b2:	f7f8 f850 	bl	800b256 <lwip_htonl>
 80131b6:	4602      	mov	r2, r0
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80131bc:	bf00      	nop
 80131be:	3710      	adds	r7, #16
 80131c0:	46bd      	mov	sp, r7
 80131c2:	bd80      	pop	{r7, pc}
 80131c4:	20006e58 	.word	0x20006e58
 80131c8:	20006e60 	.word	0x20006e60

080131cc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b084      	sub	sp, #16
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d109      	bne.n	80131ee <dhcp_start+0x22>
 80131da:	4b37      	ldr	r3, [pc, #220]	; (80132b8 <dhcp_start+0xec>)
 80131dc:	f240 22e7 	movw	r2, #743	; 0x2e7
 80131e0:	4936      	ldr	r1, [pc, #216]	; (80132bc <dhcp_start+0xf0>)
 80131e2:	4837      	ldr	r0, [pc, #220]	; (80132c0 <dhcp_start+0xf4>)
 80131e4:	f004 fb3c 	bl	8017860 <iprintf>
 80131e8:	f06f 030f 	mvn.w	r3, #15
 80131ec:	e060      	b.n	80132b0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80131f4:	f003 0301 	and.w	r3, r3, #1
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d109      	bne.n	8013210 <dhcp_start+0x44>
 80131fc:	4b2e      	ldr	r3, [pc, #184]	; (80132b8 <dhcp_start+0xec>)
 80131fe:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8013202:	4930      	ldr	r1, [pc, #192]	; (80132c4 <dhcp_start+0xf8>)
 8013204:	482e      	ldr	r0, [pc, #184]	; (80132c0 <dhcp_start+0xf4>)
 8013206:	f004 fb2b 	bl	8017860 <iprintf>
 801320a:	f06f 030f 	mvn.w	r3, #15
 801320e:	e04f      	b.n	80132b0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013214:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801321a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801321e:	d202      	bcs.n	8013226 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8013220:	f04f 33ff 	mov.w	r3, #4294967295
 8013224:	e044      	b.n	80132b0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d10d      	bne.n	8013248 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801322c:	2034      	movs	r0, #52	; 0x34
 801322e:	f7f8 fae5 	bl	800b7fc <mem_malloc>
 8013232:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d102      	bne.n	8013240 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801323a:	f04f 33ff 	mov.w	r3, #4294967295
 801323e:	e037      	b.n	80132b0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	68fa      	ldr	r2, [r7, #12]
 8013244:	625a      	str	r2, [r3, #36]	; 0x24
 8013246:	e005      	b.n	8013254 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	791b      	ldrb	r3, [r3, #4]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d001      	beq.n	8013254 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013250:	f7ff fc92 	bl	8012b78 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8013254:	2234      	movs	r2, #52	; 0x34
 8013256:	2100      	movs	r1, #0
 8013258:	68f8      	ldr	r0, [r7, #12]
 801325a:	f003 fde5 	bl	8016e28 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801325e:	f7ff fc39 	bl	8012ad4 <dhcp_inc_pcb_refcount>
 8013262:	4603      	mov	r3, r0
 8013264:	2b00      	cmp	r3, #0
 8013266:	d002      	beq.n	801326e <dhcp_start+0xa2>
    return ERR_MEM;
 8013268:	f04f 33ff 	mov.w	r3, #4294967295
 801326c:	e020      	b.n	80132b0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	2201      	movs	r2, #1
 8013272:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801327a:	f003 0304 	and.w	r3, r3, #4
 801327e:	2b00      	cmp	r3, #0
 8013280:	d105      	bne.n	801328e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8013282:	2102      	movs	r1, #2
 8013284:	68f8      	ldr	r0, [r7, #12]
 8013286:	f000 fcc5 	bl	8013c14 <dhcp_set_state>
    return ERR_OK;
 801328a:	2300      	movs	r3, #0
 801328c:	e010      	b.n	80132b0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801328e:	6878      	ldr	r0, [r7, #4]
 8013290:	f000 f8bc 	bl	801340c <dhcp_discover>
 8013294:	4603      	mov	r3, r0
 8013296:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8013298:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d005      	beq.n	80132ac <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80132a0:	6878      	ldr	r0, [r7, #4]
 80132a2:	f000 fc1d 	bl	8013ae0 <dhcp_release_and_stop>
    return ERR_MEM;
 80132a6:	f04f 33ff 	mov.w	r3, #4294967295
 80132aa:	e001      	b.n	80132b0 <dhcp_start+0xe4>
  }
  return result;
 80132ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80132b0:	4618      	mov	r0, r3
 80132b2:	3710      	adds	r7, #16
 80132b4:	46bd      	mov	sp, r7
 80132b6:	bd80      	pop	{r7, pc}
 80132b8:	0801ef4c 	.word	0x0801ef4c
 80132bc:	0801f030 	.word	0x0801f030
 80132c0:	0801efac 	.word	0x0801efac
 80132c4:	0801f074 	.word	0x0801f074

080132c8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b084      	sub	sp, #16
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
 80132d0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d107      	bne.n	80132e8 <dhcp_arp_reply+0x20>
 80132d8:	4b0e      	ldr	r3, [pc, #56]	; (8013314 <dhcp_arp_reply+0x4c>)
 80132da:	f240 328b 	movw	r2, #907	; 0x38b
 80132de:	490e      	ldr	r1, [pc, #56]	; (8013318 <dhcp_arp_reply+0x50>)
 80132e0:	480e      	ldr	r0, [pc, #56]	; (801331c <dhcp_arp_reply+0x54>)
 80132e2:	f004 fabd 	bl	8017860 <iprintf>
 80132e6:	e012      	b.n	801330e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132ec:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d00c      	beq.n	801330e <dhcp_arp_reply+0x46>
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	795b      	ldrb	r3, [r3, #5]
 80132f8:	2b08      	cmp	r3, #8
 80132fa:	d108      	bne.n	801330e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	681a      	ldr	r2, [r3, #0]
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	69db      	ldr	r3, [r3, #28]
 8013304:	429a      	cmp	r2, r3
 8013306:	d102      	bne.n	801330e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8013308:	6878      	ldr	r0, [r7, #4]
 801330a:	f000 f809 	bl	8013320 <dhcp_decline>
    }
  }
}
 801330e:	3710      	adds	r7, #16
 8013310:	46bd      	mov	sp, r7
 8013312:	bd80      	pop	{r7, pc}
 8013314:	0801ef4c 	.word	0x0801ef4c
 8013318:	0801f030 	.word	0x0801f030
 801331c:	0801efac 	.word	0x0801efac

08013320 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013320:	b5b0      	push	{r4, r5, r7, lr}
 8013322:	b08a      	sub	sp, #40	; 0x28
 8013324:	af02      	add	r7, sp, #8
 8013326:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801332c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801332e:	210c      	movs	r1, #12
 8013330:	69b8      	ldr	r0, [r7, #24]
 8013332:	f000 fc6f 	bl	8013c14 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8013336:	f107 030c 	add.w	r3, r7, #12
 801333a:	2204      	movs	r2, #4
 801333c:	69b9      	ldr	r1, [r7, #24]
 801333e:	6878      	ldr	r0, [r7, #4]
 8013340:	f001 f8f4 	bl	801452c <dhcp_create_msg>
 8013344:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013346:	697b      	ldr	r3, [r7, #20]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d035      	beq.n	80133b8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801334c:	697b      	ldr	r3, [r7, #20]
 801334e:	685b      	ldr	r3, [r3, #4]
 8013350:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013352:	89b8      	ldrh	r0, [r7, #12]
 8013354:	693b      	ldr	r3, [r7, #16]
 8013356:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801335a:	2304      	movs	r3, #4
 801335c:	2232      	movs	r2, #50	; 0x32
 801335e:	f000 fc73 	bl	8013c48 <dhcp_option>
 8013362:	4603      	mov	r3, r0
 8013364:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013366:	89bc      	ldrh	r4, [r7, #12]
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801336e:	69bb      	ldr	r3, [r7, #24]
 8013370:	69db      	ldr	r3, [r3, #28]
 8013372:	4618      	mov	r0, r3
 8013374:	f7f7 ff6f 	bl	800b256 <lwip_htonl>
 8013378:	4603      	mov	r3, r0
 801337a:	461a      	mov	r2, r3
 801337c:	4629      	mov	r1, r5
 801337e:	4620      	mov	r0, r4
 8013380:	f000 fcee 	bl	8013d60 <dhcp_option_long>
 8013384:	4603      	mov	r3, r0
 8013386:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013388:	89b8      	ldrh	r0, [r7, #12]
 801338a:	693b      	ldr	r3, [r7, #16]
 801338c:	33f0      	adds	r3, #240	; 0xf0
 801338e:	697a      	ldr	r2, [r7, #20]
 8013390:	4619      	mov	r1, r3
 8013392:	f001 f9a1 	bl	80146d8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013396:	4b19      	ldr	r3, [pc, #100]	; (80133fc <dhcp_decline+0xdc>)
 8013398:	6818      	ldr	r0, [r3, #0]
 801339a:	4b19      	ldr	r3, [pc, #100]	; (8013400 <dhcp_decline+0xe0>)
 801339c:	9301      	str	r3, [sp, #4]
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	9300      	str	r3, [sp, #0]
 80133a2:	2343      	movs	r3, #67	; 0x43
 80133a4:	4a17      	ldr	r2, [pc, #92]	; (8013404 <dhcp_decline+0xe4>)
 80133a6:	6979      	ldr	r1, [r7, #20]
 80133a8:	f7ff f90e 	bl	80125c8 <udp_sendto_if_src>
 80133ac:	4603      	mov	r3, r0
 80133ae:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80133b0:	6978      	ldr	r0, [r7, #20]
 80133b2:	f7f9 f9d7 	bl	800c764 <pbuf_free>
 80133b6:	e001      	b.n	80133bc <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80133b8:	23ff      	movs	r3, #255	; 0xff
 80133ba:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80133bc:	69bb      	ldr	r3, [r7, #24]
 80133be:	799b      	ldrb	r3, [r3, #6]
 80133c0:	2bff      	cmp	r3, #255	; 0xff
 80133c2:	d005      	beq.n	80133d0 <dhcp_decline+0xb0>
    dhcp->tries++;
 80133c4:	69bb      	ldr	r3, [r7, #24]
 80133c6:	799b      	ldrb	r3, [r3, #6]
 80133c8:	3301      	adds	r3, #1
 80133ca:	b2da      	uxtb	r2, r3
 80133cc:	69bb      	ldr	r3, [r7, #24]
 80133ce:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80133d0:	f242 7310 	movw	r3, #10000	; 0x2710
 80133d4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80133d6:	89fb      	ldrh	r3, [r7, #14]
 80133d8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80133dc:	4a0a      	ldr	r2, [pc, #40]	; (8013408 <dhcp_decline+0xe8>)
 80133de:	fb82 1203 	smull	r1, r2, r2, r3
 80133e2:	1152      	asrs	r2, r2, #5
 80133e4:	17db      	asrs	r3, r3, #31
 80133e6:	1ad3      	subs	r3, r2, r3
 80133e8:	b29a      	uxth	r2, r3
 80133ea:	69bb      	ldr	r3, [r7, #24]
 80133ec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80133ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80133f2:	4618      	mov	r0, r3
 80133f4:	3720      	adds	r7, #32
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bdb0      	pop	{r4, r5, r7, pc}
 80133fa:	bf00      	nop
 80133fc:	20000498 	.word	0x20000498
 8013400:	0801fab8 	.word	0x0801fab8
 8013404:	0801fabc 	.word	0x0801fabc
 8013408:	10624dd3 	.word	0x10624dd3

0801340c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801340c:	b580      	push	{r7, lr}
 801340e:	b08a      	sub	sp, #40	; 0x28
 8013410:	af02      	add	r7, sp, #8
 8013412:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013418:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801341a:	2300      	movs	r3, #0
 801341c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801341e:	69bb      	ldr	r3, [r7, #24]
 8013420:	2200      	movs	r2, #0
 8013422:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013424:	2106      	movs	r1, #6
 8013426:	69b8      	ldr	r0, [r7, #24]
 8013428:	f000 fbf4 	bl	8013c14 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801342c:	f107 0308 	add.w	r3, r7, #8
 8013430:	2201      	movs	r2, #1
 8013432:	69b9      	ldr	r1, [r7, #24]
 8013434:	6878      	ldr	r0, [r7, #4]
 8013436:	f001 f879 	bl	801452c <dhcp_create_msg>
 801343a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801343c:	693b      	ldr	r3, [r7, #16]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d04b      	beq.n	80134da <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013442:	693b      	ldr	r3, [r7, #16]
 8013444:	685b      	ldr	r3, [r3, #4]
 8013446:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013448:	8938      	ldrh	r0, [r7, #8]
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013450:	2302      	movs	r3, #2
 8013452:	2239      	movs	r2, #57	; 0x39
 8013454:	f000 fbf8 	bl	8013c48 <dhcp_option>
 8013458:	4603      	mov	r3, r0
 801345a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801345c:	8938      	ldrh	r0, [r7, #8]
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013468:	461a      	mov	r2, r3
 801346a:	f000 fc47 	bl	8013cfc <dhcp_option_short>
 801346e:	4603      	mov	r3, r0
 8013470:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013472:	8938      	ldrh	r0, [r7, #8]
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801347a:	2303      	movs	r3, #3
 801347c:	2237      	movs	r2, #55	; 0x37
 801347e:	f000 fbe3 	bl	8013c48 <dhcp_option>
 8013482:	4603      	mov	r3, r0
 8013484:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013486:	2300      	movs	r3, #0
 8013488:	77fb      	strb	r3, [r7, #31]
 801348a:	e00e      	b.n	80134aa <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801348c:	8938      	ldrh	r0, [r7, #8]
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013494:	7ffb      	ldrb	r3, [r7, #31]
 8013496:	4a29      	ldr	r2, [pc, #164]	; (801353c <dhcp_discover+0x130>)
 8013498:	5cd3      	ldrb	r3, [r2, r3]
 801349a:	461a      	mov	r2, r3
 801349c:	f000 fc08 	bl	8013cb0 <dhcp_option_byte>
 80134a0:	4603      	mov	r3, r0
 80134a2:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80134a4:	7ffb      	ldrb	r3, [r7, #31]
 80134a6:	3301      	adds	r3, #1
 80134a8:	77fb      	strb	r3, [r7, #31]
 80134aa:	7ffb      	ldrb	r3, [r7, #31]
 80134ac:	2b02      	cmp	r3, #2
 80134ae:	d9ed      	bls.n	801348c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80134b0:	8938      	ldrh	r0, [r7, #8]
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	33f0      	adds	r3, #240	; 0xf0
 80134b6:	693a      	ldr	r2, [r7, #16]
 80134b8:	4619      	mov	r1, r3
 80134ba:	f001 f90d 	bl	80146d8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80134be:	4b20      	ldr	r3, [pc, #128]	; (8013540 <dhcp_discover+0x134>)
 80134c0:	6818      	ldr	r0, [r3, #0]
 80134c2:	4b20      	ldr	r3, [pc, #128]	; (8013544 <dhcp_discover+0x138>)
 80134c4:	9301      	str	r3, [sp, #4]
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	9300      	str	r3, [sp, #0]
 80134ca:	2343      	movs	r3, #67	; 0x43
 80134cc:	4a1e      	ldr	r2, [pc, #120]	; (8013548 <dhcp_discover+0x13c>)
 80134ce:	6939      	ldr	r1, [r7, #16]
 80134d0:	f7ff f87a 	bl	80125c8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80134d4:	6938      	ldr	r0, [r7, #16]
 80134d6:	f7f9 f945 	bl	800c764 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80134da:	69bb      	ldr	r3, [r7, #24]
 80134dc:	799b      	ldrb	r3, [r3, #6]
 80134de:	2bff      	cmp	r3, #255	; 0xff
 80134e0:	d005      	beq.n	80134ee <dhcp_discover+0xe2>
    dhcp->tries++;
 80134e2:	69bb      	ldr	r3, [r7, #24]
 80134e4:	799b      	ldrb	r3, [r3, #6]
 80134e6:	3301      	adds	r3, #1
 80134e8:	b2da      	uxtb	r2, r3
 80134ea:	69bb      	ldr	r3, [r7, #24]
 80134ec:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80134ee:	69bb      	ldr	r3, [r7, #24]
 80134f0:	799b      	ldrb	r3, [r3, #6]
 80134f2:	2b05      	cmp	r3, #5
 80134f4:	d80d      	bhi.n	8013512 <dhcp_discover+0x106>
 80134f6:	69bb      	ldr	r3, [r7, #24]
 80134f8:	799b      	ldrb	r3, [r3, #6]
 80134fa:	461a      	mov	r2, r3
 80134fc:	2301      	movs	r3, #1
 80134fe:	4093      	lsls	r3, r2
 8013500:	b29b      	uxth	r3, r3
 8013502:	461a      	mov	r2, r3
 8013504:	0152      	lsls	r2, r2, #5
 8013506:	1ad2      	subs	r2, r2, r3
 8013508:	0092      	lsls	r2, r2, #2
 801350a:	4413      	add	r3, r2
 801350c:	00db      	lsls	r3, r3, #3
 801350e:	b29b      	uxth	r3, r3
 8013510:	e001      	b.n	8013516 <dhcp_discover+0x10a>
 8013512:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013516:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013518:	897b      	ldrh	r3, [r7, #10]
 801351a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801351e:	4a0b      	ldr	r2, [pc, #44]	; (801354c <dhcp_discover+0x140>)
 8013520:	fb82 1203 	smull	r1, r2, r2, r3
 8013524:	1152      	asrs	r2, r2, #5
 8013526:	17db      	asrs	r3, r3, #31
 8013528:	1ad3      	subs	r3, r2, r3
 801352a:	b29a      	uxth	r2, r3
 801352c:	69bb      	ldr	r3, [r7, #24]
 801352e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013530:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013534:	4618      	mov	r0, r3
 8013536:	3720      	adds	r7, #32
 8013538:	46bd      	mov	sp, r7
 801353a:	bd80      	pop	{r7, pc}
 801353c:	20000070 	.word	0x20000070
 8013540:	20000498 	.word	0x20000498
 8013544:	0801fab8 	.word	0x0801fab8
 8013548:	0801fabc 	.word	0x0801fabc
 801354c:	10624dd3 	.word	0x10624dd3

08013550 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8013550:	b580      	push	{r7, lr}
 8013552:	b088      	sub	sp, #32
 8013554:	af00      	add	r7, sp, #0
 8013556:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d107      	bne.n	801356e <dhcp_bind+0x1e>
 801355e:	4b64      	ldr	r3, [pc, #400]	; (80136f0 <dhcp_bind+0x1a0>)
 8013560:	f240 4215 	movw	r2, #1045	; 0x415
 8013564:	4963      	ldr	r1, [pc, #396]	; (80136f4 <dhcp_bind+0x1a4>)
 8013566:	4864      	ldr	r0, [pc, #400]	; (80136f8 <dhcp_bind+0x1a8>)
 8013568:	f004 f97a 	bl	8017860 <iprintf>
 801356c:	e0bc      	b.n	80136e8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013572:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8013574:	69bb      	ldr	r3, [r7, #24]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d107      	bne.n	801358a <dhcp_bind+0x3a>
 801357a:	4b5d      	ldr	r3, [pc, #372]	; (80136f0 <dhcp_bind+0x1a0>)
 801357c:	f240 4217 	movw	r2, #1047	; 0x417
 8013580:	495e      	ldr	r1, [pc, #376]	; (80136fc <dhcp_bind+0x1ac>)
 8013582:	485d      	ldr	r0, [pc, #372]	; (80136f8 <dhcp_bind+0x1a8>)
 8013584:	f004 f96c 	bl	8017860 <iprintf>
 8013588:	e0ae      	b.n	80136e8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801358a:	69bb      	ldr	r3, [r7, #24]
 801358c:	2200      	movs	r2, #0
 801358e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8013590:	69bb      	ldr	r3, [r7, #24]
 8013592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013598:	d019      	beq.n	80135ce <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801359a:	69bb      	ldr	r3, [r7, #24]
 801359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801359e:	331e      	adds	r3, #30
 80135a0:	4a57      	ldr	r2, [pc, #348]	; (8013700 <dhcp_bind+0x1b0>)
 80135a2:	fba2 2303 	umull	r2, r3, r2, r3
 80135a6:	095b      	lsrs	r3, r3, #5
 80135a8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80135aa:	69fb      	ldr	r3, [r7, #28]
 80135ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80135b0:	d302      	bcc.n	80135b8 <dhcp_bind+0x68>
      timeout = 0xffff;
 80135b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80135b6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80135b8:	69fb      	ldr	r3, [r7, #28]
 80135ba:	b29a      	uxth	r2, r3
 80135bc:	69bb      	ldr	r3, [r7, #24]
 80135be:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80135c0:	69bb      	ldr	r3, [r7, #24]
 80135c2:	8a9b      	ldrh	r3, [r3, #20]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d102      	bne.n	80135ce <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80135c8:	69bb      	ldr	r3, [r7, #24]
 80135ca:	2201      	movs	r2, #1
 80135cc:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80135ce:	69bb      	ldr	r3, [r7, #24]
 80135d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135d6:	d01d      	beq.n	8013614 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80135d8:	69bb      	ldr	r3, [r7, #24]
 80135da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135dc:	331e      	adds	r3, #30
 80135de:	4a48      	ldr	r2, [pc, #288]	; (8013700 <dhcp_bind+0x1b0>)
 80135e0:	fba2 2303 	umull	r2, r3, r2, r3
 80135e4:	095b      	lsrs	r3, r3, #5
 80135e6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80135e8:	69fb      	ldr	r3, [r7, #28]
 80135ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80135ee:	d302      	bcc.n	80135f6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80135f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80135f4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80135f6:	69fb      	ldr	r3, [r7, #28]
 80135f8:	b29a      	uxth	r2, r3
 80135fa:	69bb      	ldr	r3, [r7, #24]
 80135fc:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80135fe:	69bb      	ldr	r3, [r7, #24]
 8013600:	895b      	ldrh	r3, [r3, #10]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d102      	bne.n	801360c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8013606:	69bb      	ldr	r3, [r7, #24]
 8013608:	2201      	movs	r2, #1
 801360a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801360c:	69bb      	ldr	r3, [r7, #24]
 801360e:	895a      	ldrh	r2, [r3, #10]
 8013610:	69bb      	ldr	r3, [r7, #24]
 8013612:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8013614:	69bb      	ldr	r3, [r7, #24]
 8013616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013618:	f1b3 3fff 	cmp.w	r3, #4294967295
 801361c:	d01d      	beq.n	801365a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801361e:	69bb      	ldr	r3, [r7, #24]
 8013620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013622:	331e      	adds	r3, #30
 8013624:	4a36      	ldr	r2, [pc, #216]	; (8013700 <dhcp_bind+0x1b0>)
 8013626:	fba2 2303 	umull	r2, r3, r2, r3
 801362a:	095b      	lsrs	r3, r3, #5
 801362c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801362e:	69fb      	ldr	r3, [r7, #28]
 8013630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013634:	d302      	bcc.n	801363c <dhcp_bind+0xec>
      timeout = 0xffff;
 8013636:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801363a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801363c:	69fb      	ldr	r3, [r7, #28]
 801363e:	b29a      	uxth	r2, r3
 8013640:	69bb      	ldr	r3, [r7, #24]
 8013642:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8013644:	69bb      	ldr	r3, [r7, #24]
 8013646:	899b      	ldrh	r3, [r3, #12]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d102      	bne.n	8013652 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801364c:	69bb      	ldr	r3, [r7, #24]
 801364e:	2201      	movs	r2, #1
 8013650:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8013652:	69bb      	ldr	r3, [r7, #24]
 8013654:	899a      	ldrh	r2, [r3, #12]
 8013656:	69bb      	ldr	r3, [r7, #24]
 8013658:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801365a:	69bb      	ldr	r3, [r7, #24]
 801365c:	895a      	ldrh	r2, [r3, #10]
 801365e:	69bb      	ldr	r3, [r7, #24]
 8013660:	899b      	ldrh	r3, [r3, #12]
 8013662:	429a      	cmp	r2, r3
 8013664:	d306      	bcc.n	8013674 <dhcp_bind+0x124>
 8013666:	69bb      	ldr	r3, [r7, #24]
 8013668:	899b      	ldrh	r3, [r3, #12]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d002      	beq.n	8013674 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801366e:	69bb      	ldr	r3, [r7, #24]
 8013670:	2200      	movs	r2, #0
 8013672:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8013674:	69bb      	ldr	r3, [r7, #24]
 8013676:	79db      	ldrb	r3, [r3, #7]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d003      	beq.n	8013684 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801367c:	69bb      	ldr	r3, [r7, #24]
 801367e:	6a1b      	ldr	r3, [r3, #32]
 8013680:	613b      	str	r3, [r7, #16]
 8013682:	e014      	b.n	80136ae <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8013684:	69bb      	ldr	r3, [r7, #24]
 8013686:	331c      	adds	r3, #28
 8013688:	781b      	ldrb	r3, [r3, #0]
 801368a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801368c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013690:	2b00      	cmp	r3, #0
 8013692:	db02      	blt.n	801369a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8013694:	23ff      	movs	r3, #255	; 0xff
 8013696:	613b      	str	r3, [r7, #16]
 8013698:	e009      	b.n	80136ae <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801369a:	7dfb      	ldrb	r3, [r7, #23]
 801369c:	2bbf      	cmp	r3, #191	; 0xbf
 801369e:	d903      	bls.n	80136a8 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80136a0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80136a4:	613b      	str	r3, [r7, #16]
 80136a6:	e002      	b.n	80136ae <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80136a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80136ac:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80136ae:	69bb      	ldr	r3, [r7, #24]
 80136b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136b2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d108      	bne.n	80136cc <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80136ba:	69bb      	ldr	r3, [r7, #24]
 80136bc:	69da      	ldr	r2, [r3, #28]
 80136be:	693b      	ldr	r3, [r7, #16]
 80136c0:	4013      	ands	r3, r2
 80136c2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80136ca:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80136cc:	210a      	movs	r1, #10
 80136ce:	69b8      	ldr	r0, [r7, #24]
 80136d0:	f000 faa0 	bl	8013c14 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80136d4:	69bb      	ldr	r3, [r7, #24]
 80136d6:	f103 011c 	add.w	r1, r3, #28
 80136da:	f107 030c 	add.w	r3, r7, #12
 80136de:	f107 0210 	add.w	r2, r7, #16
 80136e2:	6878      	ldr	r0, [r7, #4]
 80136e4:	f7f8 fbe6 	bl	800beb4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80136e8:	3720      	adds	r7, #32
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bd80      	pop	{r7, pc}
 80136ee:	bf00      	nop
 80136f0:	0801ef4c 	.word	0x0801ef4c
 80136f4:	0801f0ac 	.word	0x0801f0ac
 80136f8:	0801efac 	.word	0x0801efac
 80136fc:	0801f0c8 	.word	0x0801f0c8
 8013700:	88888889 	.word	0x88888889

08013704 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b08a      	sub	sp, #40	; 0x28
 8013708:	af02      	add	r7, sp, #8
 801370a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013710:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8013712:	2105      	movs	r1, #5
 8013714:	69b8      	ldr	r0, [r7, #24]
 8013716:	f000 fa7d 	bl	8013c14 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801371a:	f107 030c 	add.w	r3, r7, #12
 801371e:	2203      	movs	r2, #3
 8013720:	69b9      	ldr	r1, [r7, #24]
 8013722:	6878      	ldr	r0, [r7, #4]
 8013724:	f000 ff02 	bl	801452c <dhcp_create_msg>
 8013728:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801372a:	697b      	ldr	r3, [r7, #20]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d04e      	beq.n	80137ce <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013730:	697b      	ldr	r3, [r7, #20]
 8013732:	685b      	ldr	r3, [r3, #4]
 8013734:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013736:	89b8      	ldrh	r0, [r7, #12]
 8013738:	693b      	ldr	r3, [r7, #16]
 801373a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801373e:	2302      	movs	r3, #2
 8013740:	2239      	movs	r2, #57	; 0x39
 8013742:	f000 fa81 	bl	8013c48 <dhcp_option>
 8013746:	4603      	mov	r3, r0
 8013748:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801374a:	89b8      	ldrh	r0, [r7, #12]
 801374c:	693b      	ldr	r3, [r7, #16]
 801374e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013756:	461a      	mov	r2, r3
 8013758:	f000 fad0 	bl	8013cfc <dhcp_option_short>
 801375c:	4603      	mov	r3, r0
 801375e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013760:	89b8      	ldrh	r0, [r7, #12]
 8013762:	693b      	ldr	r3, [r7, #16]
 8013764:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013768:	2303      	movs	r3, #3
 801376a:	2237      	movs	r2, #55	; 0x37
 801376c:	f000 fa6c 	bl	8013c48 <dhcp_option>
 8013770:	4603      	mov	r3, r0
 8013772:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013774:	2300      	movs	r3, #0
 8013776:	77bb      	strb	r3, [r7, #30]
 8013778:	e00e      	b.n	8013798 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801377a:	89b8      	ldrh	r0, [r7, #12]
 801377c:	693b      	ldr	r3, [r7, #16]
 801377e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013782:	7fbb      	ldrb	r3, [r7, #30]
 8013784:	4a2a      	ldr	r2, [pc, #168]	; (8013830 <dhcp_renew+0x12c>)
 8013786:	5cd3      	ldrb	r3, [r2, r3]
 8013788:	461a      	mov	r2, r3
 801378a:	f000 fa91 	bl	8013cb0 <dhcp_option_byte>
 801378e:	4603      	mov	r3, r0
 8013790:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013792:	7fbb      	ldrb	r3, [r7, #30]
 8013794:	3301      	adds	r3, #1
 8013796:	77bb      	strb	r3, [r7, #30]
 8013798:	7fbb      	ldrb	r3, [r7, #30]
 801379a:	2b02      	cmp	r3, #2
 801379c:	d9ed      	bls.n	801377a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801379e:	89b8      	ldrh	r0, [r7, #12]
 80137a0:	693b      	ldr	r3, [r7, #16]
 80137a2:	33f0      	adds	r3, #240	; 0xf0
 80137a4:	697a      	ldr	r2, [r7, #20]
 80137a6:	4619      	mov	r1, r3
 80137a8:	f000 ff96 	bl	80146d8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80137ac:	4b21      	ldr	r3, [pc, #132]	; (8013834 <dhcp_renew+0x130>)
 80137ae:	6818      	ldr	r0, [r3, #0]
 80137b0:	69bb      	ldr	r3, [r7, #24]
 80137b2:	f103 0218 	add.w	r2, r3, #24
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	9300      	str	r3, [sp, #0]
 80137ba:	2343      	movs	r3, #67	; 0x43
 80137bc:	6979      	ldr	r1, [r7, #20]
 80137be:	f7fe fe8f 	bl	80124e0 <udp_sendto_if>
 80137c2:	4603      	mov	r3, r0
 80137c4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80137c6:	6978      	ldr	r0, [r7, #20]
 80137c8:	f7f8 ffcc 	bl	800c764 <pbuf_free>
 80137cc:	e001      	b.n	80137d2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80137ce:	23ff      	movs	r3, #255	; 0xff
 80137d0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80137d2:	69bb      	ldr	r3, [r7, #24]
 80137d4:	799b      	ldrb	r3, [r3, #6]
 80137d6:	2bff      	cmp	r3, #255	; 0xff
 80137d8:	d005      	beq.n	80137e6 <dhcp_renew+0xe2>
    dhcp->tries++;
 80137da:	69bb      	ldr	r3, [r7, #24]
 80137dc:	799b      	ldrb	r3, [r3, #6]
 80137de:	3301      	adds	r3, #1
 80137e0:	b2da      	uxtb	r2, r3
 80137e2:	69bb      	ldr	r3, [r7, #24]
 80137e4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80137e6:	69bb      	ldr	r3, [r7, #24]
 80137e8:	799b      	ldrb	r3, [r3, #6]
 80137ea:	2b09      	cmp	r3, #9
 80137ec:	d80a      	bhi.n	8013804 <dhcp_renew+0x100>
 80137ee:	69bb      	ldr	r3, [r7, #24]
 80137f0:	799b      	ldrb	r3, [r3, #6]
 80137f2:	b29b      	uxth	r3, r3
 80137f4:	461a      	mov	r2, r3
 80137f6:	0152      	lsls	r2, r2, #5
 80137f8:	1ad2      	subs	r2, r2, r3
 80137fa:	0092      	lsls	r2, r2, #2
 80137fc:	4413      	add	r3, r2
 80137fe:	011b      	lsls	r3, r3, #4
 8013800:	b29b      	uxth	r3, r3
 8013802:	e001      	b.n	8013808 <dhcp_renew+0x104>
 8013804:	f644 6320 	movw	r3, #20000	; 0x4e20
 8013808:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801380a:	89fb      	ldrh	r3, [r7, #14]
 801380c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013810:	4a09      	ldr	r2, [pc, #36]	; (8013838 <dhcp_renew+0x134>)
 8013812:	fb82 1203 	smull	r1, r2, r2, r3
 8013816:	1152      	asrs	r2, r2, #5
 8013818:	17db      	asrs	r3, r3, #31
 801381a:	1ad3      	subs	r3, r2, r3
 801381c:	b29a      	uxth	r2, r3
 801381e:	69bb      	ldr	r3, [r7, #24]
 8013820:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013822:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013826:	4618      	mov	r0, r3
 8013828:	3720      	adds	r7, #32
 801382a:	46bd      	mov	sp, r7
 801382c:	bd80      	pop	{r7, pc}
 801382e:	bf00      	nop
 8013830:	20000070 	.word	0x20000070
 8013834:	20000498 	.word	0x20000498
 8013838:	10624dd3 	.word	0x10624dd3

0801383c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801383c:	b580      	push	{r7, lr}
 801383e:	b08a      	sub	sp, #40	; 0x28
 8013840:	af02      	add	r7, sp, #8
 8013842:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013848:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801384a:	2104      	movs	r1, #4
 801384c:	69b8      	ldr	r0, [r7, #24]
 801384e:	f000 f9e1 	bl	8013c14 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013852:	f107 030c 	add.w	r3, r7, #12
 8013856:	2203      	movs	r2, #3
 8013858:	69b9      	ldr	r1, [r7, #24]
 801385a:	6878      	ldr	r0, [r7, #4]
 801385c:	f000 fe66 	bl	801452c <dhcp_create_msg>
 8013860:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013862:	697b      	ldr	r3, [r7, #20]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d04c      	beq.n	8013902 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013868:	697b      	ldr	r3, [r7, #20]
 801386a:	685b      	ldr	r3, [r3, #4]
 801386c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801386e:	89b8      	ldrh	r0, [r7, #12]
 8013870:	693b      	ldr	r3, [r7, #16]
 8013872:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013876:	2302      	movs	r3, #2
 8013878:	2239      	movs	r2, #57	; 0x39
 801387a:	f000 f9e5 	bl	8013c48 <dhcp_option>
 801387e:	4603      	mov	r3, r0
 8013880:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013882:	89b8      	ldrh	r0, [r7, #12]
 8013884:	693b      	ldr	r3, [r7, #16]
 8013886:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801388e:	461a      	mov	r2, r3
 8013890:	f000 fa34 	bl	8013cfc <dhcp_option_short>
 8013894:	4603      	mov	r3, r0
 8013896:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013898:	89b8      	ldrh	r0, [r7, #12]
 801389a:	693b      	ldr	r3, [r7, #16]
 801389c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80138a0:	2303      	movs	r3, #3
 80138a2:	2237      	movs	r2, #55	; 0x37
 80138a4:	f000 f9d0 	bl	8013c48 <dhcp_option>
 80138a8:	4603      	mov	r3, r0
 80138aa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80138ac:	2300      	movs	r3, #0
 80138ae:	77bb      	strb	r3, [r7, #30]
 80138b0:	e00e      	b.n	80138d0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80138b2:	89b8      	ldrh	r0, [r7, #12]
 80138b4:	693b      	ldr	r3, [r7, #16]
 80138b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80138ba:	7fbb      	ldrb	r3, [r7, #30]
 80138bc:	4a29      	ldr	r2, [pc, #164]	; (8013964 <dhcp_rebind+0x128>)
 80138be:	5cd3      	ldrb	r3, [r2, r3]
 80138c0:	461a      	mov	r2, r3
 80138c2:	f000 f9f5 	bl	8013cb0 <dhcp_option_byte>
 80138c6:	4603      	mov	r3, r0
 80138c8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80138ca:	7fbb      	ldrb	r3, [r7, #30]
 80138cc:	3301      	adds	r3, #1
 80138ce:	77bb      	strb	r3, [r7, #30]
 80138d0:	7fbb      	ldrb	r3, [r7, #30]
 80138d2:	2b02      	cmp	r3, #2
 80138d4:	d9ed      	bls.n	80138b2 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80138d6:	89b8      	ldrh	r0, [r7, #12]
 80138d8:	693b      	ldr	r3, [r7, #16]
 80138da:	33f0      	adds	r3, #240	; 0xf0
 80138dc:	697a      	ldr	r2, [r7, #20]
 80138de:	4619      	mov	r1, r3
 80138e0:	f000 fefa 	bl	80146d8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80138e4:	4b20      	ldr	r3, [pc, #128]	; (8013968 <dhcp_rebind+0x12c>)
 80138e6:	6818      	ldr	r0, [r3, #0]
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	9300      	str	r3, [sp, #0]
 80138ec:	2343      	movs	r3, #67	; 0x43
 80138ee:	4a1f      	ldr	r2, [pc, #124]	; (801396c <dhcp_rebind+0x130>)
 80138f0:	6979      	ldr	r1, [r7, #20]
 80138f2:	f7fe fdf5 	bl	80124e0 <udp_sendto_if>
 80138f6:	4603      	mov	r3, r0
 80138f8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80138fa:	6978      	ldr	r0, [r7, #20]
 80138fc:	f7f8 ff32 	bl	800c764 <pbuf_free>
 8013900:	e001      	b.n	8013906 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013902:	23ff      	movs	r3, #255	; 0xff
 8013904:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013906:	69bb      	ldr	r3, [r7, #24]
 8013908:	799b      	ldrb	r3, [r3, #6]
 801390a:	2bff      	cmp	r3, #255	; 0xff
 801390c:	d005      	beq.n	801391a <dhcp_rebind+0xde>
    dhcp->tries++;
 801390e:	69bb      	ldr	r3, [r7, #24]
 8013910:	799b      	ldrb	r3, [r3, #6]
 8013912:	3301      	adds	r3, #1
 8013914:	b2da      	uxtb	r2, r3
 8013916:	69bb      	ldr	r3, [r7, #24]
 8013918:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801391a:	69bb      	ldr	r3, [r7, #24]
 801391c:	799b      	ldrb	r3, [r3, #6]
 801391e:	2b09      	cmp	r3, #9
 8013920:	d80a      	bhi.n	8013938 <dhcp_rebind+0xfc>
 8013922:	69bb      	ldr	r3, [r7, #24]
 8013924:	799b      	ldrb	r3, [r3, #6]
 8013926:	b29b      	uxth	r3, r3
 8013928:	461a      	mov	r2, r3
 801392a:	0152      	lsls	r2, r2, #5
 801392c:	1ad2      	subs	r2, r2, r3
 801392e:	0092      	lsls	r2, r2, #2
 8013930:	4413      	add	r3, r2
 8013932:	00db      	lsls	r3, r3, #3
 8013934:	b29b      	uxth	r3, r3
 8013936:	e001      	b.n	801393c <dhcp_rebind+0x100>
 8013938:	f242 7310 	movw	r3, #10000	; 0x2710
 801393c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801393e:	89fb      	ldrh	r3, [r7, #14]
 8013940:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013944:	4a0a      	ldr	r2, [pc, #40]	; (8013970 <dhcp_rebind+0x134>)
 8013946:	fb82 1203 	smull	r1, r2, r2, r3
 801394a:	1152      	asrs	r2, r2, #5
 801394c:	17db      	asrs	r3, r3, #31
 801394e:	1ad3      	subs	r3, r2, r3
 8013950:	b29a      	uxth	r2, r3
 8013952:	69bb      	ldr	r3, [r7, #24]
 8013954:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013956:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801395a:	4618      	mov	r0, r3
 801395c:	3720      	adds	r7, #32
 801395e:	46bd      	mov	sp, r7
 8013960:	bd80      	pop	{r7, pc}
 8013962:	bf00      	nop
 8013964:	20000070 	.word	0x20000070
 8013968:	20000498 	.word	0x20000498
 801396c:	0801fabc 	.word	0x0801fabc
 8013970:	10624dd3 	.word	0x10624dd3

08013974 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8013974:	b5b0      	push	{r4, r5, r7, lr}
 8013976:	b08a      	sub	sp, #40	; 0x28
 8013978:	af02      	add	r7, sp, #8
 801397a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013980:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8013982:	2103      	movs	r1, #3
 8013984:	69b8      	ldr	r0, [r7, #24]
 8013986:	f000 f945 	bl	8013c14 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801398a:	f107 030c 	add.w	r3, r7, #12
 801398e:	2203      	movs	r2, #3
 8013990:	69b9      	ldr	r1, [r7, #24]
 8013992:	6878      	ldr	r0, [r7, #4]
 8013994:	f000 fdca 	bl	801452c <dhcp_create_msg>
 8013998:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801399a:	697b      	ldr	r3, [r7, #20]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d066      	beq.n	8013a6e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80139a0:	697b      	ldr	r3, [r7, #20]
 80139a2:	685b      	ldr	r3, [r3, #4]
 80139a4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80139a6:	89b8      	ldrh	r0, [r7, #12]
 80139a8:	693b      	ldr	r3, [r7, #16]
 80139aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80139ae:	2302      	movs	r3, #2
 80139b0:	2239      	movs	r2, #57	; 0x39
 80139b2:	f000 f949 	bl	8013c48 <dhcp_option>
 80139b6:	4603      	mov	r3, r0
 80139b8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80139ba:	89b8      	ldrh	r0, [r7, #12]
 80139bc:	693b      	ldr	r3, [r7, #16]
 80139be:	33f0      	adds	r3, #240	; 0xf0
 80139c0:	f44f 7210 	mov.w	r2, #576	; 0x240
 80139c4:	4619      	mov	r1, r3
 80139c6:	f000 f999 	bl	8013cfc <dhcp_option_short>
 80139ca:	4603      	mov	r3, r0
 80139cc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80139ce:	89b8      	ldrh	r0, [r7, #12]
 80139d0:	693b      	ldr	r3, [r7, #16]
 80139d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80139d6:	2304      	movs	r3, #4
 80139d8:	2232      	movs	r2, #50	; 0x32
 80139da:	f000 f935 	bl	8013c48 <dhcp_option>
 80139de:	4603      	mov	r3, r0
 80139e0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80139e2:	89bc      	ldrh	r4, [r7, #12]
 80139e4:	693b      	ldr	r3, [r7, #16]
 80139e6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80139ea:	69bb      	ldr	r3, [r7, #24]
 80139ec:	69db      	ldr	r3, [r3, #28]
 80139ee:	4618      	mov	r0, r3
 80139f0:	f7f7 fc31 	bl	800b256 <lwip_htonl>
 80139f4:	4603      	mov	r3, r0
 80139f6:	461a      	mov	r2, r3
 80139f8:	4629      	mov	r1, r5
 80139fa:	4620      	mov	r0, r4
 80139fc:	f000 f9b0 	bl	8013d60 <dhcp_option_long>
 8013a00:	4603      	mov	r3, r0
 8013a02:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013a04:	89b8      	ldrh	r0, [r7, #12]
 8013a06:	693b      	ldr	r3, [r7, #16]
 8013a08:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013a0c:	2303      	movs	r3, #3
 8013a0e:	2237      	movs	r2, #55	; 0x37
 8013a10:	f000 f91a 	bl	8013c48 <dhcp_option>
 8013a14:	4603      	mov	r3, r0
 8013a16:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013a18:	2300      	movs	r3, #0
 8013a1a:	77bb      	strb	r3, [r7, #30]
 8013a1c:	e00e      	b.n	8013a3c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013a1e:	89b8      	ldrh	r0, [r7, #12]
 8013a20:	693b      	ldr	r3, [r7, #16]
 8013a22:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013a26:	7fbb      	ldrb	r3, [r7, #30]
 8013a28:	4a29      	ldr	r2, [pc, #164]	; (8013ad0 <dhcp_reboot+0x15c>)
 8013a2a:	5cd3      	ldrb	r3, [r2, r3]
 8013a2c:	461a      	mov	r2, r3
 8013a2e:	f000 f93f 	bl	8013cb0 <dhcp_option_byte>
 8013a32:	4603      	mov	r3, r0
 8013a34:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013a36:	7fbb      	ldrb	r3, [r7, #30]
 8013a38:	3301      	adds	r3, #1
 8013a3a:	77bb      	strb	r3, [r7, #30]
 8013a3c:	7fbb      	ldrb	r3, [r7, #30]
 8013a3e:	2b02      	cmp	r3, #2
 8013a40:	d9ed      	bls.n	8013a1e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013a42:	89b8      	ldrh	r0, [r7, #12]
 8013a44:	693b      	ldr	r3, [r7, #16]
 8013a46:	33f0      	adds	r3, #240	; 0xf0
 8013a48:	697a      	ldr	r2, [r7, #20]
 8013a4a:	4619      	mov	r1, r3
 8013a4c:	f000 fe44 	bl	80146d8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013a50:	4b20      	ldr	r3, [pc, #128]	; (8013ad4 <dhcp_reboot+0x160>)
 8013a52:	6818      	ldr	r0, [r3, #0]
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	9300      	str	r3, [sp, #0]
 8013a58:	2343      	movs	r3, #67	; 0x43
 8013a5a:	4a1f      	ldr	r2, [pc, #124]	; (8013ad8 <dhcp_reboot+0x164>)
 8013a5c:	6979      	ldr	r1, [r7, #20]
 8013a5e:	f7fe fd3f 	bl	80124e0 <udp_sendto_if>
 8013a62:	4603      	mov	r3, r0
 8013a64:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013a66:	6978      	ldr	r0, [r7, #20]
 8013a68:	f7f8 fe7c 	bl	800c764 <pbuf_free>
 8013a6c:	e001      	b.n	8013a72 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013a6e:	23ff      	movs	r3, #255	; 0xff
 8013a70:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013a72:	69bb      	ldr	r3, [r7, #24]
 8013a74:	799b      	ldrb	r3, [r3, #6]
 8013a76:	2bff      	cmp	r3, #255	; 0xff
 8013a78:	d005      	beq.n	8013a86 <dhcp_reboot+0x112>
    dhcp->tries++;
 8013a7a:	69bb      	ldr	r3, [r7, #24]
 8013a7c:	799b      	ldrb	r3, [r3, #6]
 8013a7e:	3301      	adds	r3, #1
 8013a80:	b2da      	uxtb	r2, r3
 8013a82:	69bb      	ldr	r3, [r7, #24]
 8013a84:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013a86:	69bb      	ldr	r3, [r7, #24]
 8013a88:	799b      	ldrb	r3, [r3, #6]
 8013a8a:	2b09      	cmp	r3, #9
 8013a8c:	d80a      	bhi.n	8013aa4 <dhcp_reboot+0x130>
 8013a8e:	69bb      	ldr	r3, [r7, #24]
 8013a90:	799b      	ldrb	r3, [r3, #6]
 8013a92:	b29b      	uxth	r3, r3
 8013a94:	461a      	mov	r2, r3
 8013a96:	0152      	lsls	r2, r2, #5
 8013a98:	1ad2      	subs	r2, r2, r3
 8013a9a:	0092      	lsls	r2, r2, #2
 8013a9c:	4413      	add	r3, r2
 8013a9e:	00db      	lsls	r3, r3, #3
 8013aa0:	b29b      	uxth	r3, r3
 8013aa2:	e001      	b.n	8013aa8 <dhcp_reboot+0x134>
 8013aa4:	f242 7310 	movw	r3, #10000	; 0x2710
 8013aa8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013aaa:	89fb      	ldrh	r3, [r7, #14]
 8013aac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013ab0:	4a0a      	ldr	r2, [pc, #40]	; (8013adc <dhcp_reboot+0x168>)
 8013ab2:	fb82 1203 	smull	r1, r2, r2, r3
 8013ab6:	1152      	asrs	r2, r2, #5
 8013ab8:	17db      	asrs	r3, r3, #31
 8013aba:	1ad3      	subs	r3, r2, r3
 8013abc:	b29a      	uxth	r2, r3
 8013abe:	69bb      	ldr	r3, [r7, #24]
 8013ac0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013ac2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	3720      	adds	r7, #32
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bdb0      	pop	{r4, r5, r7, pc}
 8013ace:	bf00      	nop
 8013ad0:	20000070 	.word	0x20000070
 8013ad4:	20000498 	.word	0x20000498
 8013ad8:	0801fabc 	.word	0x0801fabc
 8013adc:	10624dd3 	.word	0x10624dd3

08013ae0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8013ae0:	b5b0      	push	{r4, r5, r7, lr}
 8013ae2:	b08a      	sub	sp, #40	; 0x28
 8013ae4:	af02      	add	r7, sp, #8
 8013ae6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aec:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8013aee:	69fb      	ldr	r3, [r7, #28]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	f000 8084 	beq.w	8013bfe <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8013af6:	69fb      	ldr	r3, [r7, #28]
 8013af8:	795b      	ldrb	r3, [r3, #5]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	f000 8081 	beq.w	8013c02 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8013b00:	69fb      	ldr	r3, [r7, #28]
 8013b02:	699b      	ldr	r3, [r3, #24]
 8013b04:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8013b06:	69fb      	ldr	r3, [r7, #28]
 8013b08:	2200      	movs	r2, #0
 8013b0a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8013b0c:	69fb      	ldr	r3, [r7, #28]
 8013b0e:	2200      	movs	r2, #0
 8013b10:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013b12:	69fb      	ldr	r3, [r7, #28]
 8013b14:	2200      	movs	r2, #0
 8013b16:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013b18:	69fb      	ldr	r3, [r7, #28]
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8013b1e:	69fb      	ldr	r3, [r7, #28]
 8013b20:	2200      	movs	r2, #0
 8013b22:	631a      	str	r2, [r3, #48]	; 0x30
 8013b24:	69fb      	ldr	r3, [r7, #28]
 8013b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b28:	69fb      	ldr	r3, [r7, #28]
 8013b2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8013b2c:	69fb      	ldr	r3, [r7, #28]
 8013b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b30:	69fb      	ldr	r3, [r7, #28]
 8013b32:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8013b34:	69fb      	ldr	r3, [r7, #28]
 8013b36:	2200      	movs	r2, #0
 8013b38:	829a      	strh	r2, [r3, #20]
 8013b3a:	69fb      	ldr	r3, [r7, #28]
 8013b3c:	8a9a      	ldrh	r2, [r3, #20]
 8013b3e:	69fb      	ldr	r3, [r7, #28]
 8013b40:	825a      	strh	r2, [r3, #18]
 8013b42:	69fb      	ldr	r3, [r7, #28]
 8013b44:	8a5a      	ldrh	r2, [r3, #18]
 8013b46:	69fb      	ldr	r3, [r7, #28]
 8013b48:	821a      	strh	r2, [r3, #16]
 8013b4a:	69fb      	ldr	r3, [r7, #28]
 8013b4c:	8a1a      	ldrh	r2, [r3, #16]
 8013b4e:	69fb      	ldr	r3, [r7, #28]
 8013b50:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8013b52:	6878      	ldr	r0, [r7, #4]
 8013b54:	f000 fdee 	bl	8014734 <dhcp_supplied_address>
 8013b58:	4603      	mov	r3, r0
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d03b      	beq.n	8013bd6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8013b5e:	f107 030e 	add.w	r3, r7, #14
 8013b62:	2207      	movs	r2, #7
 8013b64:	69f9      	ldr	r1, [r7, #28]
 8013b66:	6878      	ldr	r0, [r7, #4]
 8013b68:	f000 fce0 	bl	801452c <dhcp_create_msg>
 8013b6c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8013b6e:	69bb      	ldr	r3, [r7, #24]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d030      	beq.n	8013bd6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013b74:	69bb      	ldr	r3, [r7, #24]
 8013b76:	685b      	ldr	r3, [r3, #4]
 8013b78:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013b7a:	89f8      	ldrh	r0, [r7, #14]
 8013b7c:	697b      	ldr	r3, [r7, #20]
 8013b7e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013b82:	2304      	movs	r3, #4
 8013b84:	2236      	movs	r2, #54	; 0x36
 8013b86:	f000 f85f 	bl	8013c48 <dhcp_option>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8013b8e:	89fc      	ldrh	r4, [r7, #14]
 8013b90:	697b      	ldr	r3, [r7, #20]
 8013b92:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013b96:	693b      	ldr	r3, [r7, #16]
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f7f7 fb5c 	bl	800b256 <lwip_htonl>
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	461a      	mov	r2, r3
 8013ba2:	4629      	mov	r1, r5
 8013ba4:	4620      	mov	r0, r4
 8013ba6:	f000 f8db 	bl	8013d60 <dhcp_option_long>
 8013baa:	4603      	mov	r3, r0
 8013bac:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013bae:	89f8      	ldrh	r0, [r7, #14]
 8013bb0:	697b      	ldr	r3, [r7, #20]
 8013bb2:	33f0      	adds	r3, #240	; 0xf0
 8013bb4:	69ba      	ldr	r2, [r7, #24]
 8013bb6:	4619      	mov	r1, r3
 8013bb8:	f000 fd8e 	bl	80146d8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013bbc:	4b13      	ldr	r3, [pc, #76]	; (8013c0c <dhcp_release_and_stop+0x12c>)
 8013bbe:	6818      	ldr	r0, [r3, #0]
 8013bc0:	f107 0210 	add.w	r2, r7, #16
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	9300      	str	r3, [sp, #0]
 8013bc8:	2343      	movs	r3, #67	; 0x43
 8013bca:	69b9      	ldr	r1, [r7, #24]
 8013bcc:	f7fe fc88 	bl	80124e0 <udp_sendto_if>
      pbuf_free(p_out);
 8013bd0:	69b8      	ldr	r0, [r7, #24]
 8013bd2:	f7f8 fdc7 	bl	800c764 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013bd6:	4b0e      	ldr	r3, [pc, #56]	; (8013c10 <dhcp_release_and_stop+0x130>)
 8013bd8:	4a0d      	ldr	r2, [pc, #52]	; (8013c10 <dhcp_release_and_stop+0x130>)
 8013bda:	490d      	ldr	r1, [pc, #52]	; (8013c10 <dhcp_release_and_stop+0x130>)
 8013bdc:	6878      	ldr	r0, [r7, #4]
 8013bde:	f7f8 f969 	bl	800beb4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8013be2:	2100      	movs	r1, #0
 8013be4:	69f8      	ldr	r0, [r7, #28]
 8013be6:	f000 f815 	bl	8013c14 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8013bea:	69fb      	ldr	r3, [r7, #28]
 8013bec:	791b      	ldrb	r3, [r3, #4]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d008      	beq.n	8013c04 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013bf2:	f7fe ffc1 	bl	8012b78 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8013bf6:	69fb      	ldr	r3, [r7, #28]
 8013bf8:	2200      	movs	r2, #0
 8013bfa:	711a      	strb	r2, [r3, #4]
 8013bfc:	e002      	b.n	8013c04 <dhcp_release_and_stop+0x124>
    return;
 8013bfe:	bf00      	nop
 8013c00:	e000      	b.n	8013c04 <dhcp_release_and_stop+0x124>
    return;
 8013c02:	bf00      	nop
  }
}
 8013c04:	3720      	adds	r7, #32
 8013c06:	46bd      	mov	sp, r7
 8013c08:	bdb0      	pop	{r4, r5, r7, pc}
 8013c0a:	bf00      	nop
 8013c0c:	20000498 	.word	0x20000498
 8013c10:	0801fab8 	.word	0x0801fab8

08013c14 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8013c14:	b480      	push	{r7}
 8013c16:	b083      	sub	sp, #12
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
 8013c1c:	460b      	mov	r3, r1
 8013c1e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	795b      	ldrb	r3, [r3, #5]
 8013c24:	78fa      	ldrb	r2, [r7, #3]
 8013c26:	429a      	cmp	r2, r3
 8013c28:	d008      	beq.n	8013c3c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	78fa      	ldrb	r2, [r7, #3]
 8013c2e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	2200      	movs	r2, #0
 8013c34:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	2200      	movs	r2, #0
 8013c3a:	811a      	strh	r2, [r3, #8]
  }
}
 8013c3c:	bf00      	nop
 8013c3e:	370c      	adds	r7, #12
 8013c40:	46bd      	mov	sp, r7
 8013c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c46:	4770      	bx	lr

08013c48 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b082      	sub	sp, #8
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6039      	str	r1, [r7, #0]
 8013c50:	4611      	mov	r1, r2
 8013c52:	461a      	mov	r2, r3
 8013c54:	4603      	mov	r3, r0
 8013c56:	80fb      	strh	r3, [r7, #6]
 8013c58:	460b      	mov	r3, r1
 8013c5a:	717b      	strb	r3, [r7, #5]
 8013c5c:	4613      	mov	r3, r2
 8013c5e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8013c60:	88fa      	ldrh	r2, [r7, #6]
 8013c62:	793b      	ldrb	r3, [r7, #4]
 8013c64:	4413      	add	r3, r2
 8013c66:	3302      	adds	r3, #2
 8013c68:	2b44      	cmp	r3, #68	; 0x44
 8013c6a:	d906      	bls.n	8013c7a <dhcp_option+0x32>
 8013c6c:	4b0d      	ldr	r3, [pc, #52]	; (8013ca4 <dhcp_option+0x5c>)
 8013c6e:	f240 529a 	movw	r2, #1434	; 0x59a
 8013c72:	490d      	ldr	r1, [pc, #52]	; (8013ca8 <dhcp_option+0x60>)
 8013c74:	480d      	ldr	r0, [pc, #52]	; (8013cac <dhcp_option+0x64>)
 8013c76:	f003 fdf3 	bl	8017860 <iprintf>
  options[options_out_len++] = option_type;
 8013c7a:	88fb      	ldrh	r3, [r7, #6]
 8013c7c:	1c5a      	adds	r2, r3, #1
 8013c7e:	80fa      	strh	r2, [r7, #6]
 8013c80:	461a      	mov	r2, r3
 8013c82:	683b      	ldr	r3, [r7, #0]
 8013c84:	4413      	add	r3, r2
 8013c86:	797a      	ldrb	r2, [r7, #5]
 8013c88:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8013c8a:	88fb      	ldrh	r3, [r7, #6]
 8013c8c:	1c5a      	adds	r2, r3, #1
 8013c8e:	80fa      	strh	r2, [r7, #6]
 8013c90:	461a      	mov	r2, r3
 8013c92:	683b      	ldr	r3, [r7, #0]
 8013c94:	4413      	add	r3, r2
 8013c96:	793a      	ldrb	r2, [r7, #4]
 8013c98:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013c9a:	88fb      	ldrh	r3, [r7, #6]
}
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	3708      	adds	r7, #8
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}
 8013ca4:	0801ef4c 	.word	0x0801ef4c
 8013ca8:	0801f0e0 	.word	0x0801f0e0
 8013cac:	0801efac 	.word	0x0801efac

08013cb0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b082      	sub	sp, #8
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	6039      	str	r1, [r7, #0]
 8013cba:	80fb      	strh	r3, [r7, #6]
 8013cbc:	4613      	mov	r3, r2
 8013cbe:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8013cc0:	88fb      	ldrh	r3, [r7, #6]
 8013cc2:	2b43      	cmp	r3, #67	; 0x43
 8013cc4:	d906      	bls.n	8013cd4 <dhcp_option_byte+0x24>
 8013cc6:	4b0a      	ldr	r3, [pc, #40]	; (8013cf0 <dhcp_option_byte+0x40>)
 8013cc8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8013ccc:	4909      	ldr	r1, [pc, #36]	; (8013cf4 <dhcp_option_byte+0x44>)
 8013cce:	480a      	ldr	r0, [pc, #40]	; (8013cf8 <dhcp_option_byte+0x48>)
 8013cd0:	f003 fdc6 	bl	8017860 <iprintf>
  options[options_out_len++] = value;
 8013cd4:	88fb      	ldrh	r3, [r7, #6]
 8013cd6:	1c5a      	adds	r2, r3, #1
 8013cd8:	80fa      	strh	r2, [r7, #6]
 8013cda:	461a      	mov	r2, r3
 8013cdc:	683b      	ldr	r3, [r7, #0]
 8013cde:	4413      	add	r3, r2
 8013ce0:	797a      	ldrb	r2, [r7, #5]
 8013ce2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013ce4:	88fb      	ldrh	r3, [r7, #6]
}
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	3708      	adds	r7, #8
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bd80      	pop	{r7, pc}
 8013cee:	bf00      	nop
 8013cf0:	0801ef4c 	.word	0x0801ef4c
 8013cf4:	0801f124 	.word	0x0801f124
 8013cf8:	0801efac 	.word	0x0801efac

08013cfc <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b082      	sub	sp, #8
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	4603      	mov	r3, r0
 8013d04:	6039      	str	r1, [r7, #0]
 8013d06:	80fb      	strh	r3, [r7, #6]
 8013d08:	4613      	mov	r3, r2
 8013d0a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8013d0c:	88fb      	ldrh	r3, [r7, #6]
 8013d0e:	3302      	adds	r3, #2
 8013d10:	2b44      	cmp	r3, #68	; 0x44
 8013d12:	d906      	bls.n	8013d22 <dhcp_option_short+0x26>
 8013d14:	4b0f      	ldr	r3, [pc, #60]	; (8013d54 <dhcp_option_short+0x58>)
 8013d16:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8013d1a:	490f      	ldr	r1, [pc, #60]	; (8013d58 <dhcp_option_short+0x5c>)
 8013d1c:	480f      	ldr	r0, [pc, #60]	; (8013d5c <dhcp_option_short+0x60>)
 8013d1e:	f003 fd9f 	bl	8017860 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8013d22:	88bb      	ldrh	r3, [r7, #4]
 8013d24:	0a1b      	lsrs	r3, r3, #8
 8013d26:	b29a      	uxth	r2, r3
 8013d28:	88fb      	ldrh	r3, [r7, #6]
 8013d2a:	1c59      	adds	r1, r3, #1
 8013d2c:	80f9      	strh	r1, [r7, #6]
 8013d2e:	4619      	mov	r1, r3
 8013d30:	683b      	ldr	r3, [r7, #0]
 8013d32:	440b      	add	r3, r1
 8013d34:	b2d2      	uxtb	r2, r2
 8013d36:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8013d38:	88fb      	ldrh	r3, [r7, #6]
 8013d3a:	1c5a      	adds	r2, r3, #1
 8013d3c:	80fa      	strh	r2, [r7, #6]
 8013d3e:	461a      	mov	r2, r3
 8013d40:	683b      	ldr	r3, [r7, #0]
 8013d42:	4413      	add	r3, r2
 8013d44:	88ba      	ldrh	r2, [r7, #4]
 8013d46:	b2d2      	uxtb	r2, r2
 8013d48:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013d4a:	88fb      	ldrh	r3, [r7, #6]
}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	3708      	adds	r7, #8
 8013d50:	46bd      	mov	sp, r7
 8013d52:	bd80      	pop	{r7, pc}
 8013d54:	0801ef4c 	.word	0x0801ef4c
 8013d58:	0801f15c 	.word	0x0801f15c
 8013d5c:	0801efac 	.word	0x0801efac

08013d60 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b084      	sub	sp, #16
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	4603      	mov	r3, r0
 8013d68:	60b9      	str	r1, [r7, #8]
 8013d6a:	607a      	str	r2, [r7, #4]
 8013d6c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8013d6e:	89fb      	ldrh	r3, [r7, #14]
 8013d70:	3304      	adds	r3, #4
 8013d72:	2b44      	cmp	r3, #68	; 0x44
 8013d74:	d906      	bls.n	8013d84 <dhcp_option_long+0x24>
 8013d76:	4b19      	ldr	r3, [pc, #100]	; (8013ddc <dhcp_option_long+0x7c>)
 8013d78:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8013d7c:	4918      	ldr	r1, [pc, #96]	; (8013de0 <dhcp_option_long+0x80>)
 8013d7e:	4819      	ldr	r0, [pc, #100]	; (8013de4 <dhcp_option_long+0x84>)
 8013d80:	f003 fd6e 	bl	8017860 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	0e1a      	lsrs	r2, r3, #24
 8013d88:	89fb      	ldrh	r3, [r7, #14]
 8013d8a:	1c59      	adds	r1, r3, #1
 8013d8c:	81f9      	strh	r1, [r7, #14]
 8013d8e:	4619      	mov	r1, r3
 8013d90:	68bb      	ldr	r3, [r7, #8]
 8013d92:	440b      	add	r3, r1
 8013d94:	b2d2      	uxtb	r2, r2
 8013d96:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	0c1a      	lsrs	r2, r3, #16
 8013d9c:	89fb      	ldrh	r3, [r7, #14]
 8013d9e:	1c59      	adds	r1, r3, #1
 8013da0:	81f9      	strh	r1, [r7, #14]
 8013da2:	4619      	mov	r1, r3
 8013da4:	68bb      	ldr	r3, [r7, #8]
 8013da6:	440b      	add	r3, r1
 8013da8:	b2d2      	uxtb	r2, r2
 8013daa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	0a1a      	lsrs	r2, r3, #8
 8013db0:	89fb      	ldrh	r3, [r7, #14]
 8013db2:	1c59      	adds	r1, r3, #1
 8013db4:	81f9      	strh	r1, [r7, #14]
 8013db6:	4619      	mov	r1, r3
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	440b      	add	r3, r1
 8013dbc:	b2d2      	uxtb	r2, r2
 8013dbe:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8013dc0:	89fb      	ldrh	r3, [r7, #14]
 8013dc2:	1c5a      	adds	r2, r3, #1
 8013dc4:	81fa      	strh	r2, [r7, #14]
 8013dc6:	461a      	mov	r2, r3
 8013dc8:	68bb      	ldr	r3, [r7, #8]
 8013dca:	4413      	add	r3, r2
 8013dcc:	687a      	ldr	r2, [r7, #4]
 8013dce:	b2d2      	uxtb	r2, r2
 8013dd0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013dd2:	89fb      	ldrh	r3, [r7, #14]
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	3710      	adds	r7, #16
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd80      	pop	{r7, pc}
 8013ddc:	0801ef4c 	.word	0x0801ef4c
 8013de0:	0801f198 	.word	0x0801f198
 8013de4:	0801efac 	.word	0x0801efac

08013de8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b090      	sub	sp, #64	; 0x40
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
 8013df0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8013df2:	2300      	movs	r3, #0
 8013df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8013df6:	2300      	movs	r3, #0
 8013df8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8013dfa:	2208      	movs	r2, #8
 8013dfc:	2100      	movs	r1, #0
 8013dfe:	48be      	ldr	r0, [pc, #760]	; (80140f8 <dhcp_parse_reply+0x310>)
 8013e00:	f003 f812 	bl	8016e28 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	895b      	ldrh	r3, [r3, #10]
 8013e08:	2b2b      	cmp	r3, #43	; 0x2b
 8013e0a:	d802      	bhi.n	8013e12 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8013e0c:	f06f 0301 	mvn.w	r3, #1
 8013e10:	e2a8      	b.n	8014364 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	685b      	ldr	r3, [r3, #4]
 8013e16:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8013e18:	23f0      	movs	r3, #240	; 0xf0
 8013e1a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	891b      	ldrh	r3, [r3, #8]
 8013e20:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013e26:	e00c      	b.n	8013e42 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8013e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e2a:	895b      	ldrh	r3, [r3, #10]
 8013e2c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013e2e:	1ad3      	subs	r3, r2, r3
 8013e30:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8013e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e34:	895b      	ldrh	r3, [r3, #10]
 8013e36:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8013e38:	1ad3      	subs	r3, r2, r3
 8013e3a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8013e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d004      	beq.n	8013e52 <dhcp_parse_reply+0x6a>
 8013e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e4a:	895b      	ldrh	r3, [r3, #10]
 8013e4c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013e4e:	429a      	cmp	r2, r3
 8013e50:	d2ea      	bcs.n	8013e28 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8013e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d102      	bne.n	8013e5e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8013e58:	f06f 0301 	mvn.w	r3, #1
 8013e5c:	e282      	b.n	8014364 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8013e5e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013e60:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8013e62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013e64:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8013e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e68:	685b      	ldr	r3, [r3, #4]
 8013e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013e6c:	e23a      	b.n	80142e4 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8013e6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013e70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013e72:	4413      	add	r3, r2
 8013e74:	781b      	ldrb	r3, [r3, #0]
 8013e76:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8013e78:	2300      	movs	r3, #0
 8013e7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8013e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8013e82:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8013e84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013e86:	3302      	adds	r3, #2
 8013e88:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8013e8a:	8bfa      	ldrh	r2, [r7, #30]
 8013e8c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013e8e:	429a      	cmp	r2, r3
 8013e90:	d202      	bcs.n	8013e98 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8013e92:	f06f 0301 	mvn.w	r3, #1
 8013e96:	e265      	b.n	8014364 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8013e98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013e9a:	3301      	adds	r3, #1
 8013e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e9e:	8952      	ldrh	r2, [r2, #10]
 8013ea0:	4293      	cmp	r3, r2
 8013ea2:	da07      	bge.n	8013eb4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8013ea4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013ea6:	3301      	adds	r3, #1
 8013ea8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013eaa:	4413      	add	r3, r2
 8013eac:	781b      	ldrb	r3, [r3, #0]
 8013eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013eb2:	e00b      	b.n	8013ecc <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8013eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d004      	beq.n	8013ec6 <dhcp_parse_reply+0xde>
 8013ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	685b      	ldr	r3, [r3, #4]
 8013ec2:	781b      	ldrb	r3, [r3, #0]
 8013ec4:	e000      	b.n	8013ec8 <dhcp_parse_reply+0xe0>
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8013ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ed0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8013ed4:	7dfb      	ldrb	r3, [r7, #23]
 8013ed6:	2b3b      	cmp	r3, #59	; 0x3b
 8013ed8:	f200 812d 	bhi.w	8014136 <dhcp_parse_reply+0x34e>
 8013edc:	a201      	add	r2, pc, #4	; (adr r2, 8013ee4 <dhcp_parse_reply+0xfc>)
 8013ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ee2:	bf00      	nop
 8013ee4:	08013fd5 	.word	0x08013fd5
 8013ee8:	08013fe5 	.word	0x08013fe5
 8013eec:	08014137 	.word	0x08014137
 8013ef0:	08014007 	.word	0x08014007
 8013ef4:	08014137 	.word	0x08014137
 8013ef8:	08014137 	.word	0x08014137
 8013efc:	08014137 	.word	0x08014137
 8013f00:	08014137 	.word	0x08014137
 8013f04:	08014137 	.word	0x08014137
 8013f08:	08014137 	.word	0x08014137
 8013f0c:	08014137 	.word	0x08014137
 8013f10:	08014137 	.word	0x08014137
 8013f14:	08014137 	.word	0x08014137
 8013f18:	08014137 	.word	0x08014137
 8013f1c:	08014137 	.word	0x08014137
 8013f20:	08014137 	.word	0x08014137
 8013f24:	08014137 	.word	0x08014137
 8013f28:	08014137 	.word	0x08014137
 8013f2c:	08014137 	.word	0x08014137
 8013f30:	08014137 	.word	0x08014137
 8013f34:	08014137 	.word	0x08014137
 8013f38:	08014137 	.word	0x08014137
 8013f3c:	08014137 	.word	0x08014137
 8013f40:	08014137 	.word	0x08014137
 8013f44:	08014137 	.word	0x08014137
 8013f48:	08014137 	.word	0x08014137
 8013f4c:	08014137 	.word	0x08014137
 8013f50:	08014137 	.word	0x08014137
 8013f54:	08014137 	.word	0x08014137
 8013f58:	08014137 	.word	0x08014137
 8013f5c:	08014137 	.word	0x08014137
 8013f60:	08014137 	.word	0x08014137
 8013f64:	08014137 	.word	0x08014137
 8013f68:	08014137 	.word	0x08014137
 8013f6c:	08014137 	.word	0x08014137
 8013f70:	08014137 	.word	0x08014137
 8013f74:	08014137 	.word	0x08014137
 8013f78:	08014137 	.word	0x08014137
 8013f7c:	08014137 	.word	0x08014137
 8013f80:	08014137 	.word	0x08014137
 8013f84:	08014137 	.word	0x08014137
 8013f88:	08014137 	.word	0x08014137
 8013f8c:	08014137 	.word	0x08014137
 8013f90:	08014137 	.word	0x08014137
 8013f94:	08014137 	.word	0x08014137
 8013f98:	08014137 	.word	0x08014137
 8013f9c:	08014137 	.word	0x08014137
 8013fa0:	08014137 	.word	0x08014137
 8013fa4:	08014137 	.word	0x08014137
 8013fa8:	08014137 	.word	0x08014137
 8013fac:	08014137 	.word	0x08014137
 8013fb0:	08014033 	.word	0x08014033
 8013fb4:	08014055 	.word	0x08014055
 8013fb8:	08014091 	.word	0x08014091
 8013fbc:	080140b3 	.word	0x080140b3
 8013fc0:	08014137 	.word	0x08014137
 8013fc4:	08014137 	.word	0x08014137
 8013fc8:	08014137 	.word	0x08014137
 8013fcc:	080140d5 	.word	0x080140d5
 8013fd0:	08014115 	.word	0x08014115
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013fda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013fde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8013fe2:	e0ac      	b.n	801413e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013fe8:	2b04      	cmp	r3, #4
 8013fea:	d009      	beq.n	8014000 <dhcp_parse_reply+0x218>
 8013fec:	4b43      	ldr	r3, [pc, #268]	; (80140fc <dhcp_parse_reply+0x314>)
 8013fee:	f240 622e 	movw	r2, #1582	; 0x62e
 8013ff2:	4943      	ldr	r1, [pc, #268]	; (8014100 <dhcp_parse_reply+0x318>)
 8013ff4:	4843      	ldr	r0, [pc, #268]	; (8014104 <dhcp_parse_reply+0x31c>)
 8013ff6:	f003 fc33 	bl	8017860 <iprintf>
 8013ffa:	f06f 0305 	mvn.w	r3, #5
 8013ffe:	e1b1      	b.n	8014364 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014000:	2306      	movs	r3, #6
 8014002:	623b      	str	r3, [r7, #32]
        break;
 8014004:	e09b      	b.n	801413e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014006:	2304      	movs	r3, #4
 8014008:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801400c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014010:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014014:	429a      	cmp	r2, r3
 8014016:	d209      	bcs.n	801402c <dhcp_parse_reply+0x244>
 8014018:	4b38      	ldr	r3, [pc, #224]	; (80140fc <dhcp_parse_reply+0x314>)
 801401a:	f240 6233 	movw	r2, #1587	; 0x633
 801401e:	493a      	ldr	r1, [pc, #232]	; (8014108 <dhcp_parse_reply+0x320>)
 8014020:	4838      	ldr	r0, [pc, #224]	; (8014104 <dhcp_parse_reply+0x31c>)
 8014022:	f003 fc1d 	bl	8017860 <iprintf>
 8014026:	f06f 0305 	mvn.w	r3, #5
 801402a:	e19b      	b.n	8014364 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801402c:	2307      	movs	r3, #7
 801402e:	623b      	str	r3, [r7, #32]
        break;
 8014030:	e085      	b.n	801413e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014036:	2b04      	cmp	r3, #4
 8014038:	d009      	beq.n	801404e <dhcp_parse_reply+0x266>
 801403a:	4b30      	ldr	r3, [pc, #192]	; (80140fc <dhcp_parse_reply+0x314>)
 801403c:	f240 6241 	movw	r2, #1601	; 0x641
 8014040:	492f      	ldr	r1, [pc, #188]	; (8014100 <dhcp_parse_reply+0x318>)
 8014042:	4830      	ldr	r0, [pc, #192]	; (8014104 <dhcp_parse_reply+0x31c>)
 8014044:	f003 fc0c 	bl	8017860 <iprintf>
 8014048:	f06f 0305 	mvn.w	r3, #5
 801404c:	e18a      	b.n	8014364 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801404e:	2303      	movs	r3, #3
 8014050:	623b      	str	r3, [r7, #32]
        break;
 8014052:	e074      	b.n	801413e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014058:	2b01      	cmp	r3, #1
 801405a:	d009      	beq.n	8014070 <dhcp_parse_reply+0x288>
 801405c:	4b27      	ldr	r3, [pc, #156]	; (80140fc <dhcp_parse_reply+0x314>)
 801405e:	f240 624f 	movw	r2, #1615	; 0x64f
 8014062:	492a      	ldr	r1, [pc, #168]	; (801410c <dhcp_parse_reply+0x324>)
 8014064:	4827      	ldr	r0, [pc, #156]	; (8014104 <dhcp_parse_reply+0x31c>)
 8014066:	f003 fbfb 	bl	8017860 <iprintf>
 801406a:	f06f 0305 	mvn.w	r3, #5
 801406e:	e179      	b.n	8014364 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014070:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014072:	2bf0      	cmp	r3, #240	; 0xf0
 8014074:	d009      	beq.n	801408a <dhcp_parse_reply+0x2a2>
 8014076:	4b21      	ldr	r3, [pc, #132]	; (80140fc <dhcp_parse_reply+0x314>)
 8014078:	f240 6251 	movw	r2, #1617	; 0x651
 801407c:	4924      	ldr	r1, [pc, #144]	; (8014110 <dhcp_parse_reply+0x328>)
 801407e:	4821      	ldr	r0, [pc, #132]	; (8014104 <dhcp_parse_reply+0x31c>)
 8014080:	f003 fbee 	bl	8017860 <iprintf>
 8014084:	f06f 0305 	mvn.w	r3, #5
 8014088:	e16c      	b.n	8014364 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801408a:	2300      	movs	r3, #0
 801408c:	623b      	str	r3, [r7, #32]
        break;
 801408e:	e056      	b.n	801413e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014094:	2b01      	cmp	r3, #1
 8014096:	d009      	beq.n	80140ac <dhcp_parse_reply+0x2c4>
 8014098:	4b18      	ldr	r3, [pc, #96]	; (80140fc <dhcp_parse_reply+0x314>)
 801409a:	f240 6255 	movw	r2, #1621	; 0x655
 801409e:	491b      	ldr	r1, [pc, #108]	; (801410c <dhcp_parse_reply+0x324>)
 80140a0:	4818      	ldr	r0, [pc, #96]	; (8014104 <dhcp_parse_reply+0x31c>)
 80140a2:	f003 fbdd 	bl	8017860 <iprintf>
 80140a6:	f06f 0305 	mvn.w	r3, #5
 80140aa:	e15b      	b.n	8014364 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80140ac:	2301      	movs	r3, #1
 80140ae:	623b      	str	r3, [r7, #32]
        break;
 80140b0:	e045      	b.n	801413e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80140b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140b6:	2b04      	cmp	r3, #4
 80140b8:	d009      	beq.n	80140ce <dhcp_parse_reply+0x2e6>
 80140ba:	4b10      	ldr	r3, [pc, #64]	; (80140fc <dhcp_parse_reply+0x314>)
 80140bc:	f240 6259 	movw	r2, #1625	; 0x659
 80140c0:	490f      	ldr	r1, [pc, #60]	; (8014100 <dhcp_parse_reply+0x318>)
 80140c2:	4810      	ldr	r0, [pc, #64]	; (8014104 <dhcp_parse_reply+0x31c>)
 80140c4:	f003 fbcc 	bl	8017860 <iprintf>
 80140c8:	f06f 0305 	mvn.w	r3, #5
 80140cc:	e14a      	b.n	8014364 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80140ce:	2302      	movs	r3, #2
 80140d0:	623b      	str	r3, [r7, #32]
        break;
 80140d2:	e034      	b.n	801413e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80140d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140d8:	2b04      	cmp	r3, #4
 80140da:	d009      	beq.n	80140f0 <dhcp_parse_reply+0x308>
 80140dc:	4b07      	ldr	r3, [pc, #28]	; (80140fc <dhcp_parse_reply+0x314>)
 80140de:	f240 625d 	movw	r2, #1629	; 0x65d
 80140e2:	4907      	ldr	r1, [pc, #28]	; (8014100 <dhcp_parse_reply+0x318>)
 80140e4:	4807      	ldr	r0, [pc, #28]	; (8014104 <dhcp_parse_reply+0x31c>)
 80140e6:	f003 fbbb 	bl	8017860 <iprintf>
 80140ea:	f06f 0305 	mvn.w	r3, #5
 80140ee:	e139      	b.n	8014364 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 80140f0:	2304      	movs	r3, #4
 80140f2:	623b      	str	r3, [r7, #32]
        break;
 80140f4:	e023      	b.n	801413e <dhcp_parse_reply+0x356>
 80140f6:	bf00      	nop
 80140f8:	20006e58 	.word	0x20006e58
 80140fc:	0801ef4c 	.word	0x0801ef4c
 8014100:	0801f1d4 	.word	0x0801f1d4
 8014104:	0801efac 	.word	0x0801efac
 8014108:	0801f1e0 	.word	0x0801f1e0
 801410c:	0801f1f4 	.word	0x0801f1f4
 8014110:	0801f200 	.word	0x0801f200
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014118:	2b04      	cmp	r3, #4
 801411a:	d009      	beq.n	8014130 <dhcp_parse_reply+0x348>
 801411c:	4b93      	ldr	r3, [pc, #588]	; (801436c <dhcp_parse_reply+0x584>)
 801411e:	f240 6261 	movw	r2, #1633	; 0x661
 8014122:	4993      	ldr	r1, [pc, #588]	; (8014370 <dhcp_parse_reply+0x588>)
 8014124:	4893      	ldr	r0, [pc, #588]	; (8014374 <dhcp_parse_reply+0x58c>)
 8014126:	f003 fb9b 	bl	8017860 <iprintf>
 801412a:	f06f 0305 	mvn.w	r3, #5
 801412e:	e119      	b.n	8014364 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8014130:	2305      	movs	r3, #5
 8014132:	623b      	str	r3, [r7, #32]
        break;
 8014134:	e003      	b.n	801413e <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8014136:	2300      	movs	r3, #0
 8014138:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801413c:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801413e:	7dfb      	ldrb	r3, [r7, #23]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d103      	bne.n	801414c <dhcp_parse_reply+0x364>
      offset++;
 8014144:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014146:	3301      	adds	r3, #1
 8014148:	877b      	strh	r3, [r7, #58]	; 0x3a
 801414a:	e0a1      	b.n	8014290 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801414c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801414e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014152:	4413      	add	r3, r2
 8014154:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8014158:	4293      	cmp	r3, r2
 801415a:	dd02      	ble.n	8014162 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 801415c:	f06f 0301 	mvn.w	r3, #1
 8014160:	e100      	b.n	8014364 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8014162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014166:	b29a      	uxth	r2, r3
 8014168:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801416a:	4413      	add	r3, r2
 801416c:	b29b      	uxth	r3, r3
 801416e:	3302      	adds	r3, #2
 8014170:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8014172:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014176:	2b00      	cmp	r3, #0
 8014178:	f000 808a 	beq.w	8014290 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 801417c:	2300      	movs	r3, #0
 801417e:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8014180:	6a3b      	ldr	r3, [r7, #32]
 8014182:	2b00      	cmp	r3, #0
 8014184:	db02      	blt.n	801418c <dhcp_parse_reply+0x3a4>
 8014186:	6a3b      	ldr	r3, [r7, #32]
 8014188:	2b07      	cmp	r3, #7
 801418a:	dd06      	ble.n	801419a <dhcp_parse_reply+0x3b2>
 801418c:	4b77      	ldr	r3, [pc, #476]	; (801436c <dhcp_parse_reply+0x584>)
 801418e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8014192:	4979      	ldr	r1, [pc, #484]	; (8014378 <dhcp_parse_reply+0x590>)
 8014194:	4877      	ldr	r0, [pc, #476]	; (8014374 <dhcp_parse_reply+0x58c>)
 8014196:	f003 fb63 	bl	8017860 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801419a:	4a78      	ldr	r2, [pc, #480]	; (801437c <dhcp_parse_reply+0x594>)
 801419c:	6a3b      	ldr	r3, [r7, #32]
 801419e:	4413      	add	r3, r2
 80141a0:	781b      	ldrb	r3, [r3, #0]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d174      	bne.n	8014290 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 80141a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80141aa:	2b04      	cmp	r3, #4
 80141ac:	bf28      	it	cs
 80141ae:	2304      	movcs	r3, #4
 80141b0:	b2db      	uxtb	r3, r3
 80141b2:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80141b4:	8bfb      	ldrh	r3, [r7, #30]
 80141b6:	8aba      	ldrh	r2, [r7, #20]
 80141b8:	f107 0108 	add.w	r1, r7, #8
 80141bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80141be:	f7f8 fccb 	bl	800cb58 <pbuf_copy_partial>
 80141c2:	4603      	mov	r3, r0
 80141c4:	461a      	mov	r2, r3
 80141c6:	8abb      	ldrh	r3, [r7, #20]
 80141c8:	4293      	cmp	r3, r2
 80141ca:	d002      	beq.n	80141d2 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 80141cc:	f06f 0301 	mvn.w	r3, #1
 80141d0:	e0c8      	b.n	8014364 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 80141d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80141d6:	2b04      	cmp	r3, #4
 80141d8:	d933      	bls.n	8014242 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80141da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80141de:	f003 0303 	and.w	r3, r3, #3
 80141e2:	b2db      	uxtb	r3, r3
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d009      	beq.n	80141fc <dhcp_parse_reply+0x414>
 80141e8:	4b60      	ldr	r3, [pc, #384]	; (801436c <dhcp_parse_reply+0x584>)
 80141ea:	f240 6281 	movw	r2, #1665	; 0x681
 80141ee:	4964      	ldr	r1, [pc, #400]	; (8014380 <dhcp_parse_reply+0x598>)
 80141f0:	4860      	ldr	r0, [pc, #384]	; (8014374 <dhcp_parse_reply+0x58c>)
 80141f2:	f003 fb35 	bl	8017860 <iprintf>
 80141f6:	f06f 0305 	mvn.w	r3, #5
 80141fa:	e0b3      	b.n	8014364 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 80141fc:	4a5f      	ldr	r2, [pc, #380]	; (801437c <dhcp_parse_reply+0x594>)
 80141fe:	6a3b      	ldr	r3, [r7, #32]
 8014200:	4413      	add	r3, r2
 8014202:	2201      	movs	r2, #1
 8014204:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8014206:	68bb      	ldr	r3, [r7, #8]
 8014208:	4618      	mov	r0, r3
 801420a:	f7f7 f824 	bl	800b256 <lwip_htonl>
 801420e:	4602      	mov	r2, r0
 8014210:	495c      	ldr	r1, [pc, #368]	; (8014384 <dhcp_parse_reply+0x59c>)
 8014212:	6a3b      	ldr	r3, [r7, #32]
 8014214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8014218:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801421c:	3b04      	subs	r3, #4
 801421e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8014222:	8bfb      	ldrh	r3, [r7, #30]
 8014224:	3304      	adds	r3, #4
 8014226:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8014228:	8a7a      	ldrh	r2, [r7, #18]
 801422a:	8bfb      	ldrh	r3, [r7, #30]
 801422c:	429a      	cmp	r2, r3
 801422e:	d202      	bcs.n	8014236 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8014230:	f06f 0301 	mvn.w	r3, #1
 8014234:	e096      	b.n	8014364 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8014236:	8a7b      	ldrh	r3, [r7, #18]
 8014238:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801423a:	6a3b      	ldr	r3, [r7, #32]
 801423c:	3301      	adds	r3, #1
 801423e:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8014240:	e79e      	b.n	8014180 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8014242:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014246:	2b04      	cmp	r3, #4
 8014248:	d106      	bne.n	8014258 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 801424a:	68bb      	ldr	r3, [r7, #8]
 801424c:	4618      	mov	r0, r3
 801424e:	f7f7 f802 	bl	800b256 <lwip_htonl>
 8014252:	4603      	mov	r3, r0
 8014254:	60bb      	str	r3, [r7, #8]
 8014256:	e011      	b.n	801427c <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8014258:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801425c:	2b01      	cmp	r3, #1
 801425e:	d009      	beq.n	8014274 <dhcp_parse_reply+0x48c>
 8014260:	4b42      	ldr	r3, [pc, #264]	; (801436c <dhcp_parse_reply+0x584>)
 8014262:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8014266:	4948      	ldr	r1, [pc, #288]	; (8014388 <dhcp_parse_reply+0x5a0>)
 8014268:	4842      	ldr	r0, [pc, #264]	; (8014374 <dhcp_parse_reply+0x58c>)
 801426a:	f003 faf9 	bl	8017860 <iprintf>
 801426e:	f06f 0305 	mvn.w	r3, #5
 8014272:	e077      	b.n	8014364 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8014274:	f107 0308 	add.w	r3, r7, #8
 8014278:	781b      	ldrb	r3, [r3, #0]
 801427a:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801427c:	4a3f      	ldr	r2, [pc, #252]	; (801437c <dhcp_parse_reply+0x594>)
 801427e:	6a3b      	ldr	r3, [r7, #32]
 8014280:	4413      	add	r3, r2
 8014282:	2201      	movs	r2, #1
 8014284:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8014286:	68ba      	ldr	r2, [r7, #8]
 8014288:	493e      	ldr	r1, [pc, #248]	; (8014384 <dhcp_parse_reply+0x59c>)
 801428a:	6a3b      	ldr	r3, [r7, #32]
 801428c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8014290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014292:	895b      	ldrh	r3, [r3, #10]
 8014294:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014296:	429a      	cmp	r2, r3
 8014298:	d324      	bcc.n	80142e4 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 801429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801429c:	895b      	ldrh	r3, [r3, #10]
 801429e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80142a0:	1ad3      	subs	r3, r2, r3
 80142a2:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80142a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142a6:	895b      	ldrh	r3, [r3, #10]
 80142a8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80142aa:	1ad3      	subs	r3, r2, r3
 80142ac:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80142ae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80142b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80142b2:	429a      	cmp	r2, r3
 80142b4:	d213      	bcs.n	80142de <dhcp_parse_reply+0x4f6>
        q = q->next;
 80142b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80142bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d109      	bne.n	80142d6 <dhcp_parse_reply+0x4ee>
 80142c2:	4b2a      	ldr	r3, [pc, #168]	; (801436c <dhcp_parse_reply+0x584>)
 80142c4:	f240 629d 	movw	r2, #1693	; 0x69d
 80142c8:	4930      	ldr	r1, [pc, #192]	; (801438c <dhcp_parse_reply+0x5a4>)
 80142ca:	482a      	ldr	r0, [pc, #168]	; (8014374 <dhcp_parse_reply+0x58c>)
 80142cc:	f003 fac8 	bl	8017860 <iprintf>
 80142d0:	f06f 0305 	mvn.w	r3, #5
 80142d4:	e046      	b.n	8014364 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 80142d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142d8:	685b      	ldr	r3, [r3, #4]
 80142da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80142dc:	e002      	b.n	80142e4 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80142de:	f06f 0301 	mvn.w	r3, #1
 80142e2:	e03f      	b.n	8014364 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80142e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d00a      	beq.n	8014300 <dhcp_parse_reply+0x518>
 80142ea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80142ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80142ee:	429a      	cmp	r2, r3
 80142f0:	d206      	bcs.n	8014300 <dhcp_parse_reply+0x518>
 80142f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80142f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80142f6:	4413      	add	r3, r2
 80142f8:	781b      	ldrb	r3, [r3, #0]
 80142fa:	2bff      	cmp	r3, #255	; 0xff
 80142fc:	f47f adb7 	bne.w	8013e6e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014300:	4b1e      	ldr	r3, [pc, #120]	; (801437c <dhcp_parse_reply+0x594>)
 8014302:	781b      	ldrb	r3, [r3, #0]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d018      	beq.n	801433a <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014308:	4b1e      	ldr	r3, [pc, #120]	; (8014384 <dhcp_parse_reply+0x59c>)
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801430e:	4b1b      	ldr	r3, [pc, #108]	; (801437c <dhcp_parse_reply+0x594>)
 8014310:	2200      	movs	r2, #0
 8014312:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	2b01      	cmp	r3, #1
 8014318:	d102      	bne.n	8014320 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 801431a:	2301      	movs	r3, #1
 801431c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801431e:	e00c      	b.n	801433a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	2b02      	cmp	r3, #2
 8014324:	d102      	bne.n	801432c <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8014326:	2301      	movs	r3, #1
 8014328:	62bb      	str	r3, [r7, #40]	; 0x28
 801432a:	e006      	b.n	801433a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	2b03      	cmp	r3, #3
 8014330:	d103      	bne.n	801433a <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8014332:	2301      	movs	r3, #1
 8014334:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8014336:	2301      	movs	r3, #1
 8014338:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801433a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801433c:	2b00      	cmp	r3, #0
 801433e:	d006      	beq.n	801434e <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8014340:	2300      	movs	r3, #0
 8014342:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8014344:	236c      	movs	r3, #108	; 0x6c
 8014346:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8014348:	23ec      	movs	r3, #236	; 0xec
 801434a:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801434c:	e569      	b.n	8013e22 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014350:	2b00      	cmp	r3, #0
 8014352:	d006      	beq.n	8014362 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8014354:	2300      	movs	r3, #0
 8014356:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8014358:	232c      	movs	r3, #44	; 0x2c
 801435a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801435c:	236c      	movs	r3, #108	; 0x6c
 801435e:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8014360:	e55f      	b.n	8013e22 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8014362:	2300      	movs	r3, #0
}
 8014364:	4618      	mov	r0, r3
 8014366:	3740      	adds	r7, #64	; 0x40
 8014368:	46bd      	mov	sp, r7
 801436a:	bd80      	pop	{r7, pc}
 801436c:	0801ef4c 	.word	0x0801ef4c
 8014370:	0801f1d4 	.word	0x0801f1d4
 8014374:	0801efac 	.word	0x0801efac
 8014378:	0801f218 	.word	0x0801f218
 801437c:	20006e58 	.word	0x20006e58
 8014380:	0801f22c 	.word	0x0801f22c
 8014384:	20006e60 	.word	0x20006e60
 8014388:	0801f244 	.word	0x0801f244
 801438c:	0801f258 	.word	0x0801f258

08014390 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b08a      	sub	sp, #40	; 0x28
 8014394:	af00      	add	r7, sp, #0
 8014396:	60f8      	str	r0, [r7, #12]
 8014398:	60b9      	str	r1, [r7, #8]
 801439a:	607a      	str	r2, [r7, #4]
 801439c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801439e:	4b60      	ldr	r3, [pc, #384]	; (8014520 <dhcp_recv+0x190>)
 80143a0:	685b      	ldr	r3, [r3, #4]
 80143a2:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80143a4:	6a3b      	ldr	r3, [r7, #32]
 80143a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143a8:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	685b      	ldr	r3, [r3, #4]
 80143ae:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80143b0:	69fb      	ldr	r3, [r7, #28]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	f000 809d 	beq.w	80144f2 <dhcp_recv+0x162>
 80143b8:	69fb      	ldr	r3, [r7, #28]
 80143ba:	791b      	ldrb	r3, [r3, #4]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	f000 8098 	beq.w	80144f2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	895b      	ldrh	r3, [r3, #10]
 80143c6:	2b2b      	cmp	r3, #43	; 0x2b
 80143c8:	f240 8095 	bls.w	80144f6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80143cc:	69bb      	ldr	r3, [r7, #24]
 80143ce:	781b      	ldrb	r3, [r3, #0]
 80143d0:	2b02      	cmp	r3, #2
 80143d2:	f040 8092 	bne.w	80144fa <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80143d6:	2300      	movs	r3, #0
 80143d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80143dc:	e012      	b.n	8014404 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80143de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80143e2:	6a3a      	ldr	r2, [r7, #32]
 80143e4:	4413      	add	r3, r2
 80143e6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80143ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80143ee:	69b9      	ldr	r1, [r7, #24]
 80143f0:	440b      	add	r3, r1
 80143f2:	7f1b      	ldrb	r3, [r3, #28]
 80143f4:	429a      	cmp	r2, r3
 80143f6:	f040 8082 	bne.w	80144fe <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80143fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80143fe:	3301      	adds	r3, #1
 8014400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014404:	6a3b      	ldr	r3, [r7, #32]
 8014406:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801440a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801440e:	429a      	cmp	r2, r3
 8014410:	d203      	bcs.n	801441a <dhcp_recv+0x8a>
 8014412:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014416:	2b05      	cmp	r3, #5
 8014418:	d9e1      	bls.n	80143de <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801441a:	69bb      	ldr	r3, [r7, #24]
 801441c:	685b      	ldr	r3, [r3, #4]
 801441e:	4618      	mov	r0, r3
 8014420:	f7f6 ff19 	bl	800b256 <lwip_htonl>
 8014424:	4602      	mov	r2, r0
 8014426:	69fb      	ldr	r3, [r7, #28]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	429a      	cmp	r2, r3
 801442c:	d169      	bne.n	8014502 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801442e:	69f9      	ldr	r1, [r7, #28]
 8014430:	6878      	ldr	r0, [r7, #4]
 8014432:	f7ff fcd9 	bl	8013de8 <dhcp_parse_reply>
 8014436:	4603      	mov	r3, r0
 8014438:	2b00      	cmp	r3, #0
 801443a:	d164      	bne.n	8014506 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801443c:	4b39      	ldr	r3, [pc, #228]	; (8014524 <dhcp_recv+0x194>)
 801443e:	785b      	ldrb	r3, [r3, #1]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d062      	beq.n	801450a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	685b      	ldr	r3, [r3, #4]
 8014448:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801444a:	4b37      	ldr	r3, [pc, #220]	; (8014528 <dhcp_recv+0x198>)
 801444c:	685b      	ldr	r3, [r3, #4]
 801444e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8014450:	7cfb      	ldrb	r3, [r7, #19]
 8014452:	2b05      	cmp	r3, #5
 8014454:	d12a      	bne.n	80144ac <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014456:	69fb      	ldr	r3, [r7, #28]
 8014458:	795b      	ldrb	r3, [r3, #5]
 801445a:	2b01      	cmp	r3, #1
 801445c:	d112      	bne.n	8014484 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801445e:	6979      	ldr	r1, [r7, #20]
 8014460:	6a38      	ldr	r0, [r7, #32]
 8014462:	f7fe fe53 	bl	801310c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8014466:	6a3b      	ldr	r3, [r7, #32]
 8014468:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801446c:	f003 0308 	and.w	r3, r3, #8
 8014470:	2b00      	cmp	r3, #0
 8014472:	d003      	beq.n	801447c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8014474:	6a38      	ldr	r0, [r7, #32]
 8014476:	f7fe fbc3 	bl	8012c00 <dhcp_check>
 801447a:	e049      	b.n	8014510 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801447c:	6a38      	ldr	r0, [r7, #32]
 801447e:	f7ff f867 	bl	8013550 <dhcp_bind>
 8014482:	e045      	b.n	8014510 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014484:	69fb      	ldr	r3, [r7, #28]
 8014486:	795b      	ldrb	r3, [r3, #5]
 8014488:	2b03      	cmp	r3, #3
 801448a:	d007      	beq.n	801449c <dhcp_recv+0x10c>
 801448c:	69fb      	ldr	r3, [r7, #28]
 801448e:	795b      	ldrb	r3, [r3, #5]
 8014490:	2b04      	cmp	r3, #4
 8014492:	d003      	beq.n	801449c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8014494:	69fb      	ldr	r3, [r7, #28]
 8014496:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014498:	2b05      	cmp	r3, #5
 801449a:	d139      	bne.n	8014510 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801449c:	6979      	ldr	r1, [r7, #20]
 801449e:	6a38      	ldr	r0, [r7, #32]
 80144a0:	f7fe fe34 	bl	801310c <dhcp_handle_ack>
      dhcp_bind(netif);
 80144a4:	6a38      	ldr	r0, [r7, #32]
 80144a6:	f7ff f853 	bl	8013550 <dhcp_bind>
 80144aa:	e031      	b.n	8014510 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80144ac:	7cfb      	ldrb	r3, [r7, #19]
 80144ae:	2b06      	cmp	r3, #6
 80144b0:	d113      	bne.n	80144da <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80144b2:	69fb      	ldr	r3, [r7, #28]
 80144b4:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80144b6:	2b03      	cmp	r3, #3
 80144b8:	d00b      	beq.n	80144d2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80144ba:	69fb      	ldr	r3, [r7, #28]
 80144bc:	795b      	ldrb	r3, [r3, #5]
 80144be:	2b01      	cmp	r3, #1
 80144c0:	d007      	beq.n	80144d2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80144c2:	69fb      	ldr	r3, [r7, #28]
 80144c4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80144c6:	2b04      	cmp	r3, #4
 80144c8:	d003      	beq.n	80144d2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80144ca:	69fb      	ldr	r3, [r7, #28]
 80144cc:	795b      	ldrb	r3, [r3, #5]
 80144ce:	2b05      	cmp	r3, #5
 80144d0:	d103      	bne.n	80144da <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80144d2:	6a38      	ldr	r0, [r7, #32]
 80144d4:	f7fe fb7a 	bl	8012bcc <dhcp_handle_nak>
 80144d8:	e01a      	b.n	8014510 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80144da:	7cfb      	ldrb	r3, [r7, #19]
 80144dc:	2b02      	cmp	r3, #2
 80144de:	d116      	bne.n	801450e <dhcp_recv+0x17e>
 80144e0:	69fb      	ldr	r3, [r7, #28]
 80144e2:	795b      	ldrb	r3, [r3, #5]
 80144e4:	2b06      	cmp	r3, #6
 80144e6:	d112      	bne.n	801450e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80144e8:	6979      	ldr	r1, [r7, #20]
 80144ea:	6a38      	ldr	r0, [r7, #32]
 80144ec:	f7fe fbbc 	bl	8012c68 <dhcp_handle_offer>
 80144f0:	e00e      	b.n	8014510 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80144f2:	bf00      	nop
 80144f4:	e00c      	b.n	8014510 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80144f6:	bf00      	nop
 80144f8:	e00a      	b.n	8014510 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80144fa:	bf00      	nop
 80144fc:	e008      	b.n	8014510 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80144fe:	bf00      	nop
 8014500:	e006      	b.n	8014510 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014502:	bf00      	nop
 8014504:	e004      	b.n	8014510 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014506:	bf00      	nop
 8014508:	e002      	b.n	8014510 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801450a:	bf00      	nop
 801450c:	e000      	b.n	8014510 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801450e:	bf00      	nop
  pbuf_free(p);
 8014510:	6878      	ldr	r0, [r7, #4]
 8014512:	f7f8 f927 	bl	800c764 <pbuf_free>
}
 8014516:	bf00      	nop
 8014518:	3728      	adds	r7, #40	; 0x28
 801451a:	46bd      	mov	sp, r7
 801451c:	bd80      	pop	{r7, pc}
 801451e:	bf00      	nop
 8014520:	20003d18 	.word	0x20003d18
 8014524:	20006e58 	.word	0x20006e58
 8014528:	20006e60 	.word	0x20006e60

0801452c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801452c:	b580      	push	{r7, lr}
 801452e:	b088      	sub	sp, #32
 8014530:	af00      	add	r7, sp, #0
 8014532:	60f8      	str	r0, [r7, #12]
 8014534:	60b9      	str	r1, [r7, #8]
 8014536:	603b      	str	r3, [r7, #0]
 8014538:	4613      	mov	r3, r2
 801453a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d108      	bne.n	8014554 <dhcp_create_msg+0x28>
 8014542:	4b5f      	ldr	r3, [pc, #380]	; (80146c0 <dhcp_create_msg+0x194>)
 8014544:	f240 7269 	movw	r2, #1897	; 0x769
 8014548:	495e      	ldr	r1, [pc, #376]	; (80146c4 <dhcp_create_msg+0x198>)
 801454a:	485f      	ldr	r0, [pc, #380]	; (80146c8 <dhcp_create_msg+0x19c>)
 801454c:	f003 f988 	bl	8017860 <iprintf>
 8014550:	2300      	movs	r3, #0
 8014552:	e0b1      	b.n	80146b8 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d108      	bne.n	801456c <dhcp_create_msg+0x40>
 801455a:	4b59      	ldr	r3, [pc, #356]	; (80146c0 <dhcp_create_msg+0x194>)
 801455c:	f240 726a 	movw	r2, #1898	; 0x76a
 8014560:	495a      	ldr	r1, [pc, #360]	; (80146cc <dhcp_create_msg+0x1a0>)
 8014562:	4859      	ldr	r0, [pc, #356]	; (80146c8 <dhcp_create_msg+0x19c>)
 8014564:	f003 f97c 	bl	8017860 <iprintf>
 8014568:	2300      	movs	r3, #0
 801456a:	e0a5      	b.n	80146b8 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801456c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014570:	f44f 719a 	mov.w	r1, #308	; 0x134
 8014574:	2036      	movs	r0, #54	; 0x36
 8014576:	f7f7 fe11 	bl	800c19c <pbuf_alloc>
 801457a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801457c:	69bb      	ldr	r3, [r7, #24]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d101      	bne.n	8014586 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8014582:	2300      	movs	r3, #0
 8014584:	e098      	b.n	80146b8 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8014586:	69bb      	ldr	r3, [r7, #24]
 8014588:	895b      	ldrh	r3, [r3, #10]
 801458a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801458e:	d206      	bcs.n	801459e <dhcp_create_msg+0x72>
 8014590:	4b4b      	ldr	r3, [pc, #300]	; (80146c0 <dhcp_create_msg+0x194>)
 8014592:	f240 7271 	movw	r2, #1905	; 0x771
 8014596:	494e      	ldr	r1, [pc, #312]	; (80146d0 <dhcp_create_msg+0x1a4>)
 8014598:	484b      	ldr	r0, [pc, #300]	; (80146c8 <dhcp_create_msg+0x19c>)
 801459a:	f003 f961 	bl	8017860 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801459e:	79fb      	ldrb	r3, [r7, #7]
 80145a0:	2b03      	cmp	r3, #3
 80145a2:	d103      	bne.n	80145ac <dhcp_create_msg+0x80>
 80145a4:	68bb      	ldr	r3, [r7, #8]
 80145a6:	795b      	ldrb	r3, [r3, #5]
 80145a8:	2b03      	cmp	r3, #3
 80145aa:	d10d      	bne.n	80145c8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80145ac:	68bb      	ldr	r3, [r7, #8]
 80145ae:	799b      	ldrb	r3, [r3, #6]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d105      	bne.n	80145c0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80145b4:	f003 f96c 	bl	8017890 <rand>
 80145b8:	4603      	mov	r3, r0
 80145ba:	461a      	mov	r2, r3
 80145bc:	4b45      	ldr	r3, [pc, #276]	; (80146d4 <dhcp_create_msg+0x1a8>)
 80145be:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80145c0:	4b44      	ldr	r3, [pc, #272]	; (80146d4 <dhcp_create_msg+0x1a8>)
 80145c2:	681a      	ldr	r2, [r3, #0]
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80145c8:	69bb      	ldr	r3, [r7, #24]
 80145ca:	685b      	ldr	r3, [r3, #4]
 80145cc:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80145ce:	f44f 729a 	mov.w	r2, #308	; 0x134
 80145d2:	2100      	movs	r1, #0
 80145d4:	6978      	ldr	r0, [r7, #20]
 80145d6:	f002 fc27 	bl	8016e28 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80145da:	697b      	ldr	r3, [r7, #20]
 80145dc:	2201      	movs	r2, #1
 80145de:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80145e0:	697b      	ldr	r3, [r7, #20]
 80145e2:	2201      	movs	r2, #1
 80145e4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80145ec:	697b      	ldr	r3, [r7, #20]
 80145ee:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80145f0:	68bb      	ldr	r3, [r7, #8]
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	4618      	mov	r0, r3
 80145f6:	f7f6 fe2e 	bl	800b256 <lwip_htonl>
 80145fa:	4602      	mov	r2, r0
 80145fc:	697b      	ldr	r3, [r7, #20]
 80145fe:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8014600:	79fb      	ldrb	r3, [r7, #7]
 8014602:	2b08      	cmp	r3, #8
 8014604:	d010      	beq.n	8014628 <dhcp_create_msg+0xfc>
 8014606:	79fb      	ldrb	r3, [r7, #7]
 8014608:	2b04      	cmp	r3, #4
 801460a:	d00d      	beq.n	8014628 <dhcp_create_msg+0xfc>
 801460c:	79fb      	ldrb	r3, [r7, #7]
 801460e:	2b07      	cmp	r3, #7
 8014610:	d00a      	beq.n	8014628 <dhcp_create_msg+0xfc>
 8014612:	79fb      	ldrb	r3, [r7, #7]
 8014614:	2b03      	cmp	r3, #3
 8014616:	d10c      	bne.n	8014632 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014618:	68bb      	ldr	r3, [r7, #8]
 801461a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801461c:	2b05      	cmp	r3, #5
 801461e:	d003      	beq.n	8014628 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014620:	68bb      	ldr	r3, [r7, #8]
 8014622:	795b      	ldrb	r3, [r3, #5]
 8014624:	2b04      	cmp	r3, #4
 8014626:	d104      	bne.n	8014632 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	3304      	adds	r3, #4
 801462c:	681a      	ldr	r2, [r3, #0]
 801462e:	697b      	ldr	r3, [r7, #20]
 8014630:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014632:	2300      	movs	r3, #0
 8014634:	83fb      	strh	r3, [r7, #30]
 8014636:	e00c      	b.n	8014652 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8014638:	8bfa      	ldrh	r2, [r7, #30]
 801463a:	8bfb      	ldrh	r3, [r7, #30]
 801463c:	68f9      	ldr	r1, [r7, #12]
 801463e:	440a      	add	r2, r1
 8014640:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8014644:	697a      	ldr	r2, [r7, #20]
 8014646:	4413      	add	r3, r2
 8014648:	460a      	mov	r2, r1
 801464a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801464c:	8bfb      	ldrh	r3, [r7, #30]
 801464e:	3301      	adds	r3, #1
 8014650:	83fb      	strh	r3, [r7, #30]
 8014652:	8bfb      	ldrh	r3, [r7, #30]
 8014654:	2b05      	cmp	r3, #5
 8014656:	d9ef      	bls.n	8014638 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8014658:	697b      	ldr	r3, [r7, #20]
 801465a:	2200      	movs	r2, #0
 801465c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8014660:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8014664:	2200      	movs	r2, #0
 8014666:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801466a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801466e:	2200      	movs	r2, #0
 8014670:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8014674:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8014678:	2200      	movs	r2, #0
 801467a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801467e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8014682:	697b      	ldr	r3, [r7, #20]
 8014684:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014688:	2301      	movs	r3, #1
 801468a:	2235      	movs	r2, #53	; 0x35
 801468c:	2000      	movs	r0, #0
 801468e:	f7ff fadb 	bl	8013c48 <dhcp_option>
 8014692:	4603      	mov	r3, r0
 8014694:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8014696:	697b      	ldr	r3, [r7, #20]
 8014698:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801469c:	79fa      	ldrb	r2, [r7, #7]
 801469e:	8a7b      	ldrh	r3, [r7, #18]
 80146a0:	4618      	mov	r0, r3
 80146a2:	f7ff fb05 	bl	8013cb0 <dhcp_option_byte>
 80146a6:	4603      	mov	r3, r0
 80146a8:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80146aa:	683b      	ldr	r3, [r7, #0]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d002      	beq.n	80146b6 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80146b0:	683b      	ldr	r3, [r7, #0]
 80146b2:	8a7a      	ldrh	r2, [r7, #18]
 80146b4:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80146b6:	69bb      	ldr	r3, [r7, #24]
}
 80146b8:	4618      	mov	r0, r3
 80146ba:	3720      	adds	r7, #32
 80146bc:	46bd      	mov	sp, r7
 80146be:	bd80      	pop	{r7, pc}
 80146c0:	0801ef4c 	.word	0x0801ef4c
 80146c4:	0801f26c 	.word	0x0801f26c
 80146c8:	0801efac 	.word	0x0801efac
 80146cc:	0801f28c 	.word	0x0801f28c
 80146d0:	0801f2ac 	.word	0x0801f2ac
 80146d4:	200004a0 	.word	0x200004a0

080146d8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b084      	sub	sp, #16
 80146dc:	af00      	add	r7, sp, #0
 80146de:	4603      	mov	r3, r0
 80146e0:	60b9      	str	r1, [r7, #8]
 80146e2:	607a      	str	r2, [r7, #4]
 80146e4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80146e6:	89fb      	ldrh	r3, [r7, #14]
 80146e8:	1c5a      	adds	r2, r3, #1
 80146ea:	81fa      	strh	r2, [r7, #14]
 80146ec:	461a      	mov	r2, r3
 80146ee:	68bb      	ldr	r3, [r7, #8]
 80146f0:	4413      	add	r3, r2
 80146f2:	22ff      	movs	r2, #255	; 0xff
 80146f4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80146f6:	e007      	b.n	8014708 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80146f8:	89fb      	ldrh	r3, [r7, #14]
 80146fa:	1c5a      	adds	r2, r3, #1
 80146fc:	81fa      	strh	r2, [r7, #14]
 80146fe:	461a      	mov	r2, r3
 8014700:	68bb      	ldr	r3, [r7, #8]
 8014702:	4413      	add	r3, r2
 8014704:	2200      	movs	r2, #0
 8014706:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8014708:	89fb      	ldrh	r3, [r7, #14]
 801470a:	2b43      	cmp	r3, #67	; 0x43
 801470c:	d904      	bls.n	8014718 <dhcp_option_trailer+0x40>
 801470e:	89fb      	ldrh	r3, [r7, #14]
 8014710:	f003 0303 	and.w	r3, r3, #3
 8014714:	2b00      	cmp	r3, #0
 8014716:	d002      	beq.n	801471e <dhcp_option_trailer+0x46>
 8014718:	89fb      	ldrh	r3, [r7, #14]
 801471a:	2b43      	cmp	r3, #67	; 0x43
 801471c:	d9ec      	bls.n	80146f8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801471e:	89fb      	ldrh	r3, [r7, #14]
 8014720:	33f0      	adds	r3, #240	; 0xf0
 8014722:	b29b      	uxth	r3, r3
 8014724:	4619      	mov	r1, r3
 8014726:	6878      	ldr	r0, [r7, #4]
 8014728:	f7f7 fe96 	bl	800c458 <pbuf_realloc>
}
 801472c:	bf00      	nop
 801472e:	3710      	adds	r7, #16
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}

08014734 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8014734:	b480      	push	{r7}
 8014736:	b085      	sub	sp, #20
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d017      	beq.n	8014772 <dhcp_supplied_address+0x3e>
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014746:	2b00      	cmp	r3, #0
 8014748:	d013      	beq.n	8014772 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801474e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	795b      	ldrb	r3, [r3, #5]
 8014754:	2b0a      	cmp	r3, #10
 8014756:	d007      	beq.n	8014768 <dhcp_supplied_address+0x34>
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	795b      	ldrb	r3, [r3, #5]
 801475c:	2b05      	cmp	r3, #5
 801475e:	d003      	beq.n	8014768 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014764:	2b04      	cmp	r3, #4
 8014766:	d101      	bne.n	801476c <dhcp_supplied_address+0x38>
 8014768:	2301      	movs	r3, #1
 801476a:	e000      	b.n	801476e <dhcp_supplied_address+0x3a>
 801476c:	2300      	movs	r3, #0
 801476e:	b2db      	uxtb	r3, r3
 8014770:	e000      	b.n	8014774 <dhcp_supplied_address+0x40>
  }
  return 0;
 8014772:	2300      	movs	r3, #0
}
 8014774:	4618      	mov	r0, r3
 8014776:	3714      	adds	r7, #20
 8014778:	46bd      	mov	sp, r7
 801477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477e:	4770      	bx	lr

08014780 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b082      	sub	sp, #8
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014788:	4915      	ldr	r1, [pc, #84]	; (80147e0 <etharp_free_entry+0x60>)
 801478a:	687a      	ldr	r2, [r7, #4]
 801478c:	4613      	mov	r3, r2
 801478e:	005b      	lsls	r3, r3, #1
 8014790:	4413      	add	r3, r2
 8014792:	00db      	lsls	r3, r3, #3
 8014794:	440b      	add	r3, r1
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d013      	beq.n	80147c4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801479c:	4910      	ldr	r1, [pc, #64]	; (80147e0 <etharp_free_entry+0x60>)
 801479e:	687a      	ldr	r2, [r7, #4]
 80147a0:	4613      	mov	r3, r2
 80147a2:	005b      	lsls	r3, r3, #1
 80147a4:	4413      	add	r3, r2
 80147a6:	00db      	lsls	r3, r3, #3
 80147a8:	440b      	add	r3, r1
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	4618      	mov	r0, r3
 80147ae:	f7f7 ffd9 	bl	800c764 <pbuf_free>
    arp_table[i].q = NULL;
 80147b2:	490b      	ldr	r1, [pc, #44]	; (80147e0 <etharp_free_entry+0x60>)
 80147b4:	687a      	ldr	r2, [r7, #4]
 80147b6:	4613      	mov	r3, r2
 80147b8:	005b      	lsls	r3, r3, #1
 80147ba:	4413      	add	r3, r2
 80147bc:	00db      	lsls	r3, r3, #3
 80147be:	440b      	add	r3, r1
 80147c0:	2200      	movs	r2, #0
 80147c2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80147c4:	4906      	ldr	r1, [pc, #24]	; (80147e0 <etharp_free_entry+0x60>)
 80147c6:	687a      	ldr	r2, [r7, #4]
 80147c8:	4613      	mov	r3, r2
 80147ca:	005b      	lsls	r3, r3, #1
 80147cc:	4413      	add	r3, r2
 80147ce:	00db      	lsls	r3, r3, #3
 80147d0:	440b      	add	r3, r1
 80147d2:	3314      	adds	r3, #20
 80147d4:	2200      	movs	r2, #0
 80147d6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80147d8:	bf00      	nop
 80147da:	3708      	adds	r7, #8
 80147dc:	46bd      	mov	sp, r7
 80147de:	bd80      	pop	{r7, pc}
 80147e0:	200004a4 	.word	0x200004a4

080147e4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b082      	sub	sp, #8
 80147e8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80147ea:	2300      	movs	r3, #0
 80147ec:	607b      	str	r3, [r7, #4]
 80147ee:	e096      	b.n	801491e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80147f0:	494f      	ldr	r1, [pc, #316]	; (8014930 <etharp_tmr+0x14c>)
 80147f2:	687a      	ldr	r2, [r7, #4]
 80147f4:	4613      	mov	r3, r2
 80147f6:	005b      	lsls	r3, r3, #1
 80147f8:	4413      	add	r3, r2
 80147fa:	00db      	lsls	r3, r3, #3
 80147fc:	440b      	add	r3, r1
 80147fe:	3314      	adds	r3, #20
 8014800:	781b      	ldrb	r3, [r3, #0]
 8014802:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014804:	78fb      	ldrb	r3, [r7, #3]
 8014806:	2b00      	cmp	r3, #0
 8014808:	f000 8086 	beq.w	8014918 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801480c:	4948      	ldr	r1, [pc, #288]	; (8014930 <etharp_tmr+0x14c>)
 801480e:	687a      	ldr	r2, [r7, #4]
 8014810:	4613      	mov	r3, r2
 8014812:	005b      	lsls	r3, r3, #1
 8014814:	4413      	add	r3, r2
 8014816:	00db      	lsls	r3, r3, #3
 8014818:	440b      	add	r3, r1
 801481a:	3312      	adds	r3, #18
 801481c:	881b      	ldrh	r3, [r3, #0]
 801481e:	3301      	adds	r3, #1
 8014820:	b298      	uxth	r0, r3
 8014822:	4943      	ldr	r1, [pc, #268]	; (8014930 <etharp_tmr+0x14c>)
 8014824:	687a      	ldr	r2, [r7, #4]
 8014826:	4613      	mov	r3, r2
 8014828:	005b      	lsls	r3, r3, #1
 801482a:	4413      	add	r3, r2
 801482c:	00db      	lsls	r3, r3, #3
 801482e:	440b      	add	r3, r1
 8014830:	3312      	adds	r3, #18
 8014832:	4602      	mov	r2, r0
 8014834:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014836:	493e      	ldr	r1, [pc, #248]	; (8014930 <etharp_tmr+0x14c>)
 8014838:	687a      	ldr	r2, [r7, #4]
 801483a:	4613      	mov	r3, r2
 801483c:	005b      	lsls	r3, r3, #1
 801483e:	4413      	add	r3, r2
 8014840:	00db      	lsls	r3, r3, #3
 8014842:	440b      	add	r3, r1
 8014844:	3312      	adds	r3, #18
 8014846:	881b      	ldrh	r3, [r3, #0]
 8014848:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801484c:	d215      	bcs.n	801487a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801484e:	4938      	ldr	r1, [pc, #224]	; (8014930 <etharp_tmr+0x14c>)
 8014850:	687a      	ldr	r2, [r7, #4]
 8014852:	4613      	mov	r3, r2
 8014854:	005b      	lsls	r3, r3, #1
 8014856:	4413      	add	r3, r2
 8014858:	00db      	lsls	r3, r3, #3
 801485a:	440b      	add	r3, r1
 801485c:	3314      	adds	r3, #20
 801485e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014860:	2b01      	cmp	r3, #1
 8014862:	d10e      	bne.n	8014882 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014864:	4932      	ldr	r1, [pc, #200]	; (8014930 <etharp_tmr+0x14c>)
 8014866:	687a      	ldr	r2, [r7, #4]
 8014868:	4613      	mov	r3, r2
 801486a:	005b      	lsls	r3, r3, #1
 801486c:	4413      	add	r3, r2
 801486e:	00db      	lsls	r3, r3, #3
 8014870:	440b      	add	r3, r1
 8014872:	3312      	adds	r3, #18
 8014874:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014876:	2b04      	cmp	r3, #4
 8014878:	d903      	bls.n	8014882 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801487a:	6878      	ldr	r0, [r7, #4]
 801487c:	f7ff ff80 	bl	8014780 <etharp_free_entry>
 8014880:	e04a      	b.n	8014918 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014882:	492b      	ldr	r1, [pc, #172]	; (8014930 <etharp_tmr+0x14c>)
 8014884:	687a      	ldr	r2, [r7, #4]
 8014886:	4613      	mov	r3, r2
 8014888:	005b      	lsls	r3, r3, #1
 801488a:	4413      	add	r3, r2
 801488c:	00db      	lsls	r3, r3, #3
 801488e:	440b      	add	r3, r1
 8014890:	3314      	adds	r3, #20
 8014892:	781b      	ldrb	r3, [r3, #0]
 8014894:	2b03      	cmp	r3, #3
 8014896:	d10a      	bne.n	80148ae <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014898:	4925      	ldr	r1, [pc, #148]	; (8014930 <etharp_tmr+0x14c>)
 801489a:	687a      	ldr	r2, [r7, #4]
 801489c:	4613      	mov	r3, r2
 801489e:	005b      	lsls	r3, r3, #1
 80148a0:	4413      	add	r3, r2
 80148a2:	00db      	lsls	r3, r3, #3
 80148a4:	440b      	add	r3, r1
 80148a6:	3314      	adds	r3, #20
 80148a8:	2204      	movs	r2, #4
 80148aa:	701a      	strb	r2, [r3, #0]
 80148ac:	e034      	b.n	8014918 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80148ae:	4920      	ldr	r1, [pc, #128]	; (8014930 <etharp_tmr+0x14c>)
 80148b0:	687a      	ldr	r2, [r7, #4]
 80148b2:	4613      	mov	r3, r2
 80148b4:	005b      	lsls	r3, r3, #1
 80148b6:	4413      	add	r3, r2
 80148b8:	00db      	lsls	r3, r3, #3
 80148ba:	440b      	add	r3, r1
 80148bc:	3314      	adds	r3, #20
 80148be:	781b      	ldrb	r3, [r3, #0]
 80148c0:	2b04      	cmp	r3, #4
 80148c2:	d10a      	bne.n	80148da <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80148c4:	491a      	ldr	r1, [pc, #104]	; (8014930 <etharp_tmr+0x14c>)
 80148c6:	687a      	ldr	r2, [r7, #4]
 80148c8:	4613      	mov	r3, r2
 80148ca:	005b      	lsls	r3, r3, #1
 80148cc:	4413      	add	r3, r2
 80148ce:	00db      	lsls	r3, r3, #3
 80148d0:	440b      	add	r3, r1
 80148d2:	3314      	adds	r3, #20
 80148d4:	2202      	movs	r2, #2
 80148d6:	701a      	strb	r2, [r3, #0]
 80148d8:	e01e      	b.n	8014918 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80148da:	4915      	ldr	r1, [pc, #84]	; (8014930 <etharp_tmr+0x14c>)
 80148dc:	687a      	ldr	r2, [r7, #4]
 80148de:	4613      	mov	r3, r2
 80148e0:	005b      	lsls	r3, r3, #1
 80148e2:	4413      	add	r3, r2
 80148e4:	00db      	lsls	r3, r3, #3
 80148e6:	440b      	add	r3, r1
 80148e8:	3314      	adds	r3, #20
 80148ea:	781b      	ldrb	r3, [r3, #0]
 80148ec:	2b01      	cmp	r3, #1
 80148ee:	d113      	bne.n	8014918 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80148f0:	490f      	ldr	r1, [pc, #60]	; (8014930 <etharp_tmr+0x14c>)
 80148f2:	687a      	ldr	r2, [r7, #4]
 80148f4:	4613      	mov	r3, r2
 80148f6:	005b      	lsls	r3, r3, #1
 80148f8:	4413      	add	r3, r2
 80148fa:	00db      	lsls	r3, r3, #3
 80148fc:	440b      	add	r3, r1
 80148fe:	3308      	adds	r3, #8
 8014900:	6818      	ldr	r0, [r3, #0]
 8014902:	687a      	ldr	r2, [r7, #4]
 8014904:	4613      	mov	r3, r2
 8014906:	005b      	lsls	r3, r3, #1
 8014908:	4413      	add	r3, r2
 801490a:	00db      	lsls	r3, r3, #3
 801490c:	4a08      	ldr	r2, [pc, #32]	; (8014930 <etharp_tmr+0x14c>)
 801490e:	4413      	add	r3, r2
 8014910:	3304      	adds	r3, #4
 8014912:	4619      	mov	r1, r3
 8014914:	f000 fe72 	bl	80155fc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	3301      	adds	r3, #1
 801491c:	607b      	str	r3, [r7, #4]
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	2b09      	cmp	r3, #9
 8014922:	f77f af65 	ble.w	80147f0 <etharp_tmr+0xc>
      }
    }
  }
}
 8014926:	bf00      	nop
 8014928:	bf00      	nop
 801492a:	3708      	adds	r7, #8
 801492c:	46bd      	mov	sp, r7
 801492e:	bd80      	pop	{r7, pc}
 8014930:	200004a4 	.word	0x200004a4

08014934 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b08a      	sub	sp, #40	; 0x28
 8014938:	af00      	add	r7, sp, #0
 801493a:	60f8      	str	r0, [r7, #12]
 801493c:	460b      	mov	r3, r1
 801493e:	607a      	str	r2, [r7, #4]
 8014940:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014942:	230a      	movs	r3, #10
 8014944:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014946:	230a      	movs	r3, #10
 8014948:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801494a:	230a      	movs	r3, #10
 801494c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801494e:	2300      	movs	r3, #0
 8014950:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014952:	230a      	movs	r3, #10
 8014954:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014956:	2300      	movs	r3, #0
 8014958:	83bb      	strh	r3, [r7, #28]
 801495a:	2300      	movs	r3, #0
 801495c:	837b      	strh	r3, [r7, #26]
 801495e:	2300      	movs	r3, #0
 8014960:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014962:	2300      	movs	r3, #0
 8014964:	843b      	strh	r3, [r7, #32]
 8014966:	e0ae      	b.n	8014ac6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014968:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801496c:	49a6      	ldr	r1, [pc, #664]	; (8014c08 <etharp_find_entry+0x2d4>)
 801496e:	4613      	mov	r3, r2
 8014970:	005b      	lsls	r3, r3, #1
 8014972:	4413      	add	r3, r2
 8014974:	00db      	lsls	r3, r3, #3
 8014976:	440b      	add	r3, r1
 8014978:	3314      	adds	r3, #20
 801497a:	781b      	ldrb	r3, [r3, #0]
 801497c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801497e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014982:	2b0a      	cmp	r3, #10
 8014984:	d105      	bne.n	8014992 <etharp_find_entry+0x5e>
 8014986:	7dfb      	ldrb	r3, [r7, #23]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d102      	bne.n	8014992 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801498c:	8c3b      	ldrh	r3, [r7, #32]
 801498e:	847b      	strh	r3, [r7, #34]	; 0x22
 8014990:	e095      	b.n	8014abe <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014992:	7dfb      	ldrb	r3, [r7, #23]
 8014994:	2b00      	cmp	r3, #0
 8014996:	f000 8092 	beq.w	8014abe <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801499a:	7dfb      	ldrb	r3, [r7, #23]
 801499c:	2b01      	cmp	r3, #1
 801499e:	d009      	beq.n	80149b4 <etharp_find_entry+0x80>
 80149a0:	7dfb      	ldrb	r3, [r7, #23]
 80149a2:	2b01      	cmp	r3, #1
 80149a4:	d806      	bhi.n	80149b4 <etharp_find_entry+0x80>
 80149a6:	4b99      	ldr	r3, [pc, #612]	; (8014c0c <etharp_find_entry+0x2d8>)
 80149a8:	f240 1223 	movw	r2, #291	; 0x123
 80149ac:	4998      	ldr	r1, [pc, #608]	; (8014c10 <etharp_find_entry+0x2dc>)
 80149ae:	4899      	ldr	r0, [pc, #612]	; (8014c14 <etharp_find_entry+0x2e0>)
 80149b0:	f002 ff56 	bl	8017860 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d020      	beq.n	80149fc <etharp_find_entry+0xc8>
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	6819      	ldr	r1, [r3, #0]
 80149be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149c2:	4891      	ldr	r0, [pc, #580]	; (8014c08 <etharp_find_entry+0x2d4>)
 80149c4:	4613      	mov	r3, r2
 80149c6:	005b      	lsls	r3, r3, #1
 80149c8:	4413      	add	r3, r2
 80149ca:	00db      	lsls	r3, r3, #3
 80149cc:	4403      	add	r3, r0
 80149ce:	3304      	adds	r3, #4
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	4299      	cmp	r1, r3
 80149d4:	d112      	bne.n	80149fc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d00c      	beq.n	80149f6 <etharp_find_entry+0xc2>
 80149dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149e0:	4989      	ldr	r1, [pc, #548]	; (8014c08 <etharp_find_entry+0x2d4>)
 80149e2:	4613      	mov	r3, r2
 80149e4:	005b      	lsls	r3, r3, #1
 80149e6:	4413      	add	r3, r2
 80149e8:	00db      	lsls	r3, r3, #3
 80149ea:	440b      	add	r3, r1
 80149ec:	3308      	adds	r3, #8
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	687a      	ldr	r2, [r7, #4]
 80149f2:	429a      	cmp	r2, r3
 80149f4:	d102      	bne.n	80149fc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80149f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80149fa:	e100      	b.n	8014bfe <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80149fc:	7dfb      	ldrb	r3, [r7, #23]
 80149fe:	2b01      	cmp	r3, #1
 8014a00:	d140      	bne.n	8014a84 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014a02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a06:	4980      	ldr	r1, [pc, #512]	; (8014c08 <etharp_find_entry+0x2d4>)
 8014a08:	4613      	mov	r3, r2
 8014a0a:	005b      	lsls	r3, r3, #1
 8014a0c:	4413      	add	r3, r2
 8014a0e:	00db      	lsls	r3, r3, #3
 8014a10:	440b      	add	r3, r1
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d01a      	beq.n	8014a4e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014a18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a1c:	497a      	ldr	r1, [pc, #488]	; (8014c08 <etharp_find_entry+0x2d4>)
 8014a1e:	4613      	mov	r3, r2
 8014a20:	005b      	lsls	r3, r3, #1
 8014a22:	4413      	add	r3, r2
 8014a24:	00db      	lsls	r3, r3, #3
 8014a26:	440b      	add	r3, r1
 8014a28:	3312      	adds	r3, #18
 8014a2a:	881b      	ldrh	r3, [r3, #0]
 8014a2c:	8bba      	ldrh	r2, [r7, #28]
 8014a2e:	429a      	cmp	r2, r3
 8014a30:	d845      	bhi.n	8014abe <etharp_find_entry+0x18a>
            old_queue = i;
 8014a32:	8c3b      	ldrh	r3, [r7, #32]
 8014a34:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014a36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a3a:	4973      	ldr	r1, [pc, #460]	; (8014c08 <etharp_find_entry+0x2d4>)
 8014a3c:	4613      	mov	r3, r2
 8014a3e:	005b      	lsls	r3, r3, #1
 8014a40:	4413      	add	r3, r2
 8014a42:	00db      	lsls	r3, r3, #3
 8014a44:	440b      	add	r3, r1
 8014a46:	3312      	adds	r3, #18
 8014a48:	881b      	ldrh	r3, [r3, #0]
 8014a4a:	83bb      	strh	r3, [r7, #28]
 8014a4c:	e037      	b.n	8014abe <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014a4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a52:	496d      	ldr	r1, [pc, #436]	; (8014c08 <etharp_find_entry+0x2d4>)
 8014a54:	4613      	mov	r3, r2
 8014a56:	005b      	lsls	r3, r3, #1
 8014a58:	4413      	add	r3, r2
 8014a5a:	00db      	lsls	r3, r3, #3
 8014a5c:	440b      	add	r3, r1
 8014a5e:	3312      	adds	r3, #18
 8014a60:	881b      	ldrh	r3, [r3, #0]
 8014a62:	8b7a      	ldrh	r2, [r7, #26]
 8014a64:	429a      	cmp	r2, r3
 8014a66:	d82a      	bhi.n	8014abe <etharp_find_entry+0x18a>
            old_pending = i;
 8014a68:	8c3b      	ldrh	r3, [r7, #32]
 8014a6a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014a6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a70:	4965      	ldr	r1, [pc, #404]	; (8014c08 <etharp_find_entry+0x2d4>)
 8014a72:	4613      	mov	r3, r2
 8014a74:	005b      	lsls	r3, r3, #1
 8014a76:	4413      	add	r3, r2
 8014a78:	00db      	lsls	r3, r3, #3
 8014a7a:	440b      	add	r3, r1
 8014a7c:	3312      	adds	r3, #18
 8014a7e:	881b      	ldrh	r3, [r3, #0]
 8014a80:	837b      	strh	r3, [r7, #26]
 8014a82:	e01c      	b.n	8014abe <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014a84:	7dfb      	ldrb	r3, [r7, #23]
 8014a86:	2b01      	cmp	r3, #1
 8014a88:	d919      	bls.n	8014abe <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014a8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a8e:	495e      	ldr	r1, [pc, #376]	; (8014c08 <etharp_find_entry+0x2d4>)
 8014a90:	4613      	mov	r3, r2
 8014a92:	005b      	lsls	r3, r3, #1
 8014a94:	4413      	add	r3, r2
 8014a96:	00db      	lsls	r3, r3, #3
 8014a98:	440b      	add	r3, r1
 8014a9a:	3312      	adds	r3, #18
 8014a9c:	881b      	ldrh	r3, [r3, #0]
 8014a9e:	8b3a      	ldrh	r2, [r7, #24]
 8014aa0:	429a      	cmp	r2, r3
 8014aa2:	d80c      	bhi.n	8014abe <etharp_find_entry+0x18a>
            old_stable = i;
 8014aa4:	8c3b      	ldrh	r3, [r7, #32]
 8014aa6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014aa8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014aac:	4956      	ldr	r1, [pc, #344]	; (8014c08 <etharp_find_entry+0x2d4>)
 8014aae:	4613      	mov	r3, r2
 8014ab0:	005b      	lsls	r3, r3, #1
 8014ab2:	4413      	add	r3, r2
 8014ab4:	00db      	lsls	r3, r3, #3
 8014ab6:	440b      	add	r3, r1
 8014ab8:	3312      	adds	r3, #18
 8014aba:	881b      	ldrh	r3, [r3, #0]
 8014abc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014abe:	8c3b      	ldrh	r3, [r7, #32]
 8014ac0:	3301      	adds	r3, #1
 8014ac2:	b29b      	uxth	r3, r3
 8014ac4:	843b      	strh	r3, [r7, #32]
 8014ac6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014aca:	2b09      	cmp	r3, #9
 8014acc:	f77f af4c 	ble.w	8014968 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014ad0:	7afb      	ldrb	r3, [r7, #11]
 8014ad2:	f003 0302 	and.w	r3, r3, #2
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d108      	bne.n	8014aec <etharp_find_entry+0x1b8>
 8014ada:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014ade:	2b0a      	cmp	r3, #10
 8014ae0:	d107      	bne.n	8014af2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014ae2:	7afb      	ldrb	r3, [r7, #11]
 8014ae4:	f003 0301 	and.w	r3, r3, #1
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d102      	bne.n	8014af2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014aec:	f04f 33ff 	mov.w	r3, #4294967295
 8014af0:	e085      	b.n	8014bfe <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014af2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014af6:	2b09      	cmp	r3, #9
 8014af8:	dc02      	bgt.n	8014b00 <etharp_find_entry+0x1cc>
    i = empty;
 8014afa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014afc:	843b      	strh	r3, [r7, #32]
 8014afe:	e039      	b.n	8014b74 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014b00:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014b04:	2b09      	cmp	r3, #9
 8014b06:	dc14      	bgt.n	8014b32 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014b08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b0a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014b0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b10:	493d      	ldr	r1, [pc, #244]	; (8014c08 <etharp_find_entry+0x2d4>)
 8014b12:	4613      	mov	r3, r2
 8014b14:	005b      	lsls	r3, r3, #1
 8014b16:	4413      	add	r3, r2
 8014b18:	00db      	lsls	r3, r3, #3
 8014b1a:	440b      	add	r3, r1
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d018      	beq.n	8014b54 <etharp_find_entry+0x220>
 8014b22:	4b3a      	ldr	r3, [pc, #232]	; (8014c0c <etharp_find_entry+0x2d8>)
 8014b24:	f240 126d 	movw	r2, #365	; 0x16d
 8014b28:	493b      	ldr	r1, [pc, #236]	; (8014c18 <etharp_find_entry+0x2e4>)
 8014b2a:	483a      	ldr	r0, [pc, #232]	; (8014c14 <etharp_find_entry+0x2e0>)
 8014b2c:	f002 fe98 	bl	8017860 <iprintf>
 8014b30:	e010      	b.n	8014b54 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014b32:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014b36:	2b09      	cmp	r3, #9
 8014b38:	dc02      	bgt.n	8014b40 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014b3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014b3c:	843b      	strh	r3, [r7, #32]
 8014b3e:	e009      	b.n	8014b54 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014b40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014b44:	2b09      	cmp	r3, #9
 8014b46:	dc02      	bgt.n	8014b4e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014b48:	8bfb      	ldrh	r3, [r7, #30]
 8014b4a:	843b      	strh	r3, [r7, #32]
 8014b4c:	e002      	b.n	8014b54 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8014b52:	e054      	b.n	8014bfe <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014b54:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014b58:	2b09      	cmp	r3, #9
 8014b5a:	dd06      	ble.n	8014b6a <etharp_find_entry+0x236>
 8014b5c:	4b2b      	ldr	r3, [pc, #172]	; (8014c0c <etharp_find_entry+0x2d8>)
 8014b5e:	f240 127f 	movw	r2, #383	; 0x17f
 8014b62:	492e      	ldr	r1, [pc, #184]	; (8014c1c <etharp_find_entry+0x2e8>)
 8014b64:	482b      	ldr	r0, [pc, #172]	; (8014c14 <etharp_find_entry+0x2e0>)
 8014b66:	f002 fe7b 	bl	8017860 <iprintf>
    etharp_free_entry(i);
 8014b6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7ff fe06 	bl	8014780 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014b74:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014b78:	2b09      	cmp	r3, #9
 8014b7a:	dd06      	ble.n	8014b8a <etharp_find_entry+0x256>
 8014b7c:	4b23      	ldr	r3, [pc, #140]	; (8014c0c <etharp_find_entry+0x2d8>)
 8014b7e:	f240 1283 	movw	r2, #387	; 0x183
 8014b82:	4926      	ldr	r1, [pc, #152]	; (8014c1c <etharp_find_entry+0x2e8>)
 8014b84:	4823      	ldr	r0, [pc, #140]	; (8014c14 <etharp_find_entry+0x2e0>)
 8014b86:	f002 fe6b 	bl	8017860 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014b8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b8e:	491e      	ldr	r1, [pc, #120]	; (8014c08 <etharp_find_entry+0x2d4>)
 8014b90:	4613      	mov	r3, r2
 8014b92:	005b      	lsls	r3, r3, #1
 8014b94:	4413      	add	r3, r2
 8014b96:	00db      	lsls	r3, r3, #3
 8014b98:	440b      	add	r3, r1
 8014b9a:	3314      	adds	r3, #20
 8014b9c:	781b      	ldrb	r3, [r3, #0]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d006      	beq.n	8014bb0 <etharp_find_entry+0x27c>
 8014ba2:	4b1a      	ldr	r3, [pc, #104]	; (8014c0c <etharp_find_entry+0x2d8>)
 8014ba4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014ba8:	491d      	ldr	r1, [pc, #116]	; (8014c20 <etharp_find_entry+0x2ec>)
 8014baa:	481a      	ldr	r0, [pc, #104]	; (8014c14 <etharp_find_entry+0x2e0>)
 8014bac:	f002 fe58 	bl	8017860 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d00b      	beq.n	8014bce <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014bb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	6819      	ldr	r1, [r3, #0]
 8014bbe:	4812      	ldr	r0, [pc, #72]	; (8014c08 <etharp_find_entry+0x2d4>)
 8014bc0:	4613      	mov	r3, r2
 8014bc2:	005b      	lsls	r3, r3, #1
 8014bc4:	4413      	add	r3, r2
 8014bc6:	00db      	lsls	r3, r3, #3
 8014bc8:	4403      	add	r3, r0
 8014bca:	3304      	adds	r3, #4
 8014bcc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014bce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014bd2:	490d      	ldr	r1, [pc, #52]	; (8014c08 <etharp_find_entry+0x2d4>)
 8014bd4:	4613      	mov	r3, r2
 8014bd6:	005b      	lsls	r3, r3, #1
 8014bd8:	4413      	add	r3, r2
 8014bda:	00db      	lsls	r3, r3, #3
 8014bdc:	440b      	add	r3, r1
 8014bde:	3312      	adds	r3, #18
 8014be0:	2200      	movs	r2, #0
 8014be2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014be4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014be8:	4907      	ldr	r1, [pc, #28]	; (8014c08 <etharp_find_entry+0x2d4>)
 8014bea:	4613      	mov	r3, r2
 8014bec:	005b      	lsls	r3, r3, #1
 8014bee:	4413      	add	r3, r2
 8014bf0:	00db      	lsls	r3, r3, #3
 8014bf2:	440b      	add	r3, r1
 8014bf4:	3308      	adds	r3, #8
 8014bf6:	687a      	ldr	r2, [r7, #4]
 8014bf8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014bfa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	3728      	adds	r7, #40	; 0x28
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bd80      	pop	{r7, pc}
 8014c06:	bf00      	nop
 8014c08:	200004a4 	.word	0x200004a4
 8014c0c:	0801f2ec 	.word	0x0801f2ec
 8014c10:	0801f324 	.word	0x0801f324
 8014c14:	0801f364 	.word	0x0801f364
 8014c18:	0801f38c 	.word	0x0801f38c
 8014c1c:	0801f3a4 	.word	0x0801f3a4
 8014c20:	0801f3b8 	.word	0x0801f3b8

08014c24 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b088      	sub	sp, #32
 8014c28:	af02      	add	r7, sp, #8
 8014c2a:	60f8      	str	r0, [r7, #12]
 8014c2c:	60b9      	str	r1, [r7, #8]
 8014c2e:	607a      	str	r2, [r7, #4]
 8014c30:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014c38:	2b06      	cmp	r3, #6
 8014c3a:	d006      	beq.n	8014c4a <etharp_update_arp_entry+0x26>
 8014c3c:	4b48      	ldr	r3, [pc, #288]	; (8014d60 <etharp_update_arp_entry+0x13c>)
 8014c3e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014c42:	4948      	ldr	r1, [pc, #288]	; (8014d64 <etharp_update_arp_entry+0x140>)
 8014c44:	4848      	ldr	r0, [pc, #288]	; (8014d68 <etharp_update_arp_entry+0x144>)
 8014c46:	f002 fe0b 	bl	8017860 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014c4a:	68bb      	ldr	r3, [r7, #8]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d012      	beq.n	8014c76 <etharp_update_arp_entry+0x52>
 8014c50:	68bb      	ldr	r3, [r7, #8]
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d00e      	beq.n	8014c76 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014c58:	68bb      	ldr	r3, [r7, #8]
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	68f9      	ldr	r1, [r7, #12]
 8014c5e:	4618      	mov	r0, r3
 8014c60:	f001 f920 	bl	8015ea4 <ip4_addr_isbroadcast_u32>
 8014c64:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d105      	bne.n	8014c76 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014c6a:	68bb      	ldr	r3, [r7, #8]
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014c72:	2be0      	cmp	r3, #224	; 0xe0
 8014c74:	d102      	bne.n	8014c7c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014c76:	f06f 030f 	mvn.w	r3, #15
 8014c7a:	e06c      	b.n	8014d56 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014c7c:	78fb      	ldrb	r3, [r7, #3]
 8014c7e:	68fa      	ldr	r2, [r7, #12]
 8014c80:	4619      	mov	r1, r3
 8014c82:	68b8      	ldr	r0, [r7, #8]
 8014c84:	f7ff fe56 	bl	8014934 <etharp_find_entry>
 8014c88:	4603      	mov	r3, r0
 8014c8a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014c8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	da02      	bge.n	8014c9a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014c94:	8afb      	ldrh	r3, [r7, #22]
 8014c96:	b25b      	sxtb	r3, r3
 8014c98:	e05d      	b.n	8014d56 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014c9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c9e:	4933      	ldr	r1, [pc, #204]	; (8014d6c <etharp_update_arp_entry+0x148>)
 8014ca0:	4613      	mov	r3, r2
 8014ca2:	005b      	lsls	r3, r3, #1
 8014ca4:	4413      	add	r3, r2
 8014ca6:	00db      	lsls	r3, r3, #3
 8014ca8:	440b      	add	r3, r1
 8014caa:	3314      	adds	r3, #20
 8014cac:	2202      	movs	r2, #2
 8014cae:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014cb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014cb4:	492d      	ldr	r1, [pc, #180]	; (8014d6c <etharp_update_arp_entry+0x148>)
 8014cb6:	4613      	mov	r3, r2
 8014cb8:	005b      	lsls	r3, r3, #1
 8014cba:	4413      	add	r3, r2
 8014cbc:	00db      	lsls	r3, r3, #3
 8014cbe:	440b      	add	r3, r1
 8014cc0:	3308      	adds	r3, #8
 8014cc2:	68fa      	ldr	r2, [r7, #12]
 8014cc4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014cc6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014cca:	4613      	mov	r3, r2
 8014ccc:	005b      	lsls	r3, r3, #1
 8014cce:	4413      	add	r3, r2
 8014cd0:	00db      	lsls	r3, r3, #3
 8014cd2:	3308      	adds	r3, #8
 8014cd4:	4a25      	ldr	r2, [pc, #148]	; (8014d6c <etharp_update_arp_entry+0x148>)
 8014cd6:	4413      	add	r3, r2
 8014cd8:	3304      	adds	r3, #4
 8014cda:	2206      	movs	r2, #6
 8014cdc:	6879      	ldr	r1, [r7, #4]
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f002 f87a 	bl	8016dd8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014ce4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014ce8:	4920      	ldr	r1, [pc, #128]	; (8014d6c <etharp_update_arp_entry+0x148>)
 8014cea:	4613      	mov	r3, r2
 8014cec:	005b      	lsls	r3, r3, #1
 8014cee:	4413      	add	r3, r2
 8014cf0:	00db      	lsls	r3, r3, #3
 8014cf2:	440b      	add	r3, r1
 8014cf4:	3312      	adds	r3, #18
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014cfa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014cfe:	491b      	ldr	r1, [pc, #108]	; (8014d6c <etharp_update_arp_entry+0x148>)
 8014d00:	4613      	mov	r3, r2
 8014d02:	005b      	lsls	r3, r3, #1
 8014d04:	4413      	add	r3, r2
 8014d06:	00db      	lsls	r3, r3, #3
 8014d08:	440b      	add	r3, r1
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d021      	beq.n	8014d54 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014d10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d14:	4915      	ldr	r1, [pc, #84]	; (8014d6c <etharp_update_arp_entry+0x148>)
 8014d16:	4613      	mov	r3, r2
 8014d18:	005b      	lsls	r3, r3, #1
 8014d1a:	4413      	add	r3, r2
 8014d1c:	00db      	lsls	r3, r3, #3
 8014d1e:	440b      	add	r3, r1
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014d24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d28:	4910      	ldr	r1, [pc, #64]	; (8014d6c <etharp_update_arp_entry+0x148>)
 8014d2a:	4613      	mov	r3, r2
 8014d2c:	005b      	lsls	r3, r3, #1
 8014d2e:	4413      	add	r3, r2
 8014d30:	00db      	lsls	r3, r3, #3
 8014d32:	440b      	add	r3, r1
 8014d34:	2200      	movs	r2, #0
 8014d36:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8014d3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014d42:	9300      	str	r3, [sp, #0]
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	6939      	ldr	r1, [r7, #16]
 8014d48:	68f8      	ldr	r0, [r7, #12]
 8014d4a:	f001 ffb3 	bl	8016cb4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014d4e:	6938      	ldr	r0, [r7, #16]
 8014d50:	f7f7 fd08 	bl	800c764 <pbuf_free>
  }
  return ERR_OK;
 8014d54:	2300      	movs	r3, #0
}
 8014d56:	4618      	mov	r0, r3
 8014d58:	3718      	adds	r7, #24
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	bd80      	pop	{r7, pc}
 8014d5e:	bf00      	nop
 8014d60:	0801f2ec 	.word	0x0801f2ec
 8014d64:	0801f3e4 	.word	0x0801f3e4
 8014d68:	0801f364 	.word	0x0801f364
 8014d6c:	200004a4 	.word	0x200004a4

08014d70 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b084      	sub	sp, #16
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014d78:	2300      	movs	r3, #0
 8014d7a:	60fb      	str	r3, [r7, #12]
 8014d7c:	e01e      	b.n	8014dbc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014d7e:	4913      	ldr	r1, [pc, #76]	; (8014dcc <etharp_cleanup_netif+0x5c>)
 8014d80:	68fa      	ldr	r2, [r7, #12]
 8014d82:	4613      	mov	r3, r2
 8014d84:	005b      	lsls	r3, r3, #1
 8014d86:	4413      	add	r3, r2
 8014d88:	00db      	lsls	r3, r3, #3
 8014d8a:	440b      	add	r3, r1
 8014d8c:	3314      	adds	r3, #20
 8014d8e:	781b      	ldrb	r3, [r3, #0]
 8014d90:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014d92:	7afb      	ldrb	r3, [r7, #11]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d00e      	beq.n	8014db6 <etharp_cleanup_netif+0x46>
 8014d98:	490c      	ldr	r1, [pc, #48]	; (8014dcc <etharp_cleanup_netif+0x5c>)
 8014d9a:	68fa      	ldr	r2, [r7, #12]
 8014d9c:	4613      	mov	r3, r2
 8014d9e:	005b      	lsls	r3, r3, #1
 8014da0:	4413      	add	r3, r2
 8014da2:	00db      	lsls	r3, r3, #3
 8014da4:	440b      	add	r3, r1
 8014da6:	3308      	adds	r3, #8
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	687a      	ldr	r2, [r7, #4]
 8014dac:	429a      	cmp	r2, r3
 8014dae:	d102      	bne.n	8014db6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014db0:	68f8      	ldr	r0, [r7, #12]
 8014db2:	f7ff fce5 	bl	8014780 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	3301      	adds	r3, #1
 8014dba:	60fb      	str	r3, [r7, #12]
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	2b09      	cmp	r3, #9
 8014dc0:	dddd      	ble.n	8014d7e <etharp_cleanup_netif+0xe>
    }
  }
}
 8014dc2:	bf00      	nop
 8014dc4:	bf00      	nop
 8014dc6:	3710      	adds	r7, #16
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd80      	pop	{r7, pc}
 8014dcc:	200004a4 	.word	0x200004a4

08014dd0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014dd0:	b5b0      	push	{r4, r5, r7, lr}
 8014dd2:	b08a      	sub	sp, #40	; 0x28
 8014dd4:	af04      	add	r7, sp, #16
 8014dd6:	6078      	str	r0, [r7, #4]
 8014dd8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014dda:	683b      	ldr	r3, [r7, #0]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d107      	bne.n	8014df0 <etharp_input+0x20>
 8014de0:	4b3f      	ldr	r3, [pc, #252]	; (8014ee0 <etharp_input+0x110>)
 8014de2:	f240 228a 	movw	r2, #650	; 0x28a
 8014de6:	493f      	ldr	r1, [pc, #252]	; (8014ee4 <etharp_input+0x114>)
 8014de8:	483f      	ldr	r0, [pc, #252]	; (8014ee8 <etharp_input+0x118>)
 8014dea:	f002 fd39 	bl	8017860 <iprintf>
 8014dee:	e074      	b.n	8014eda <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	685b      	ldr	r3, [r3, #4]
 8014df4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014df6:	693b      	ldr	r3, [r7, #16]
 8014df8:	881b      	ldrh	r3, [r3, #0]
 8014dfa:	b29b      	uxth	r3, r3
 8014dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014e00:	d10c      	bne.n	8014e1c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014e02:	693b      	ldr	r3, [r7, #16]
 8014e04:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014e06:	2b06      	cmp	r3, #6
 8014e08:	d108      	bne.n	8014e1c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014e0a:	693b      	ldr	r3, [r7, #16]
 8014e0c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014e0e:	2b04      	cmp	r3, #4
 8014e10:	d104      	bne.n	8014e1c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014e12:	693b      	ldr	r3, [r7, #16]
 8014e14:	885b      	ldrh	r3, [r3, #2]
 8014e16:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014e18:	2b08      	cmp	r3, #8
 8014e1a:	d003      	beq.n	8014e24 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014e1c:	6878      	ldr	r0, [r7, #4]
 8014e1e:	f7f7 fca1 	bl	800c764 <pbuf_free>
    return;
 8014e22:	e05a      	b.n	8014eda <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014e24:	693b      	ldr	r3, [r7, #16]
 8014e26:	330e      	adds	r3, #14
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014e2c:	693b      	ldr	r3, [r7, #16]
 8014e2e:	3318      	adds	r3, #24
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014e34:	683b      	ldr	r3, [r7, #0]
 8014e36:	3304      	adds	r3, #4
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d102      	bne.n	8014e44 <etharp_input+0x74>
    for_us = 0;
 8014e3e:	2300      	movs	r3, #0
 8014e40:	75fb      	strb	r3, [r7, #23]
 8014e42:	e009      	b.n	8014e58 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014e44:	68ba      	ldr	r2, [r7, #8]
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	3304      	adds	r3, #4
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	429a      	cmp	r2, r3
 8014e4e:	bf0c      	ite	eq
 8014e50:	2301      	moveq	r3, #1
 8014e52:	2300      	movne	r3, #0
 8014e54:	b2db      	uxtb	r3, r3
 8014e56:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014e58:	693b      	ldr	r3, [r7, #16]
 8014e5a:	f103 0208 	add.w	r2, r3, #8
 8014e5e:	7dfb      	ldrb	r3, [r7, #23]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d001      	beq.n	8014e68 <etharp_input+0x98>
 8014e64:	2301      	movs	r3, #1
 8014e66:	e000      	b.n	8014e6a <etharp_input+0x9a>
 8014e68:	2302      	movs	r3, #2
 8014e6a:	f107 010c 	add.w	r1, r7, #12
 8014e6e:	6838      	ldr	r0, [r7, #0]
 8014e70:	f7ff fed8 	bl	8014c24 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014e74:	693b      	ldr	r3, [r7, #16]
 8014e76:	88db      	ldrh	r3, [r3, #6]
 8014e78:	b29b      	uxth	r3, r3
 8014e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014e7e:	d003      	beq.n	8014e88 <etharp_input+0xb8>
 8014e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014e84:	d01e      	beq.n	8014ec4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014e86:	e025      	b.n	8014ed4 <etharp_input+0x104>
      if (for_us) {
 8014e88:	7dfb      	ldrb	r3, [r7, #23]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d021      	beq.n	8014ed2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8014e94:	693b      	ldr	r3, [r7, #16]
 8014e96:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014e9a:	683b      	ldr	r3, [r7, #0]
 8014e9c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8014ea0:	683b      	ldr	r3, [r7, #0]
 8014ea2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014ea4:	693a      	ldr	r2, [r7, #16]
 8014ea6:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014ea8:	2102      	movs	r1, #2
 8014eaa:	9103      	str	r1, [sp, #12]
 8014eac:	f107 010c 	add.w	r1, r7, #12
 8014eb0:	9102      	str	r1, [sp, #8]
 8014eb2:	9201      	str	r2, [sp, #4]
 8014eb4:	9300      	str	r3, [sp, #0]
 8014eb6:	462b      	mov	r3, r5
 8014eb8:	4622      	mov	r2, r4
 8014eba:	4601      	mov	r1, r0
 8014ebc:	6838      	ldr	r0, [r7, #0]
 8014ebe:	f000 faef 	bl	80154a0 <etharp_raw>
      break;
 8014ec2:	e006      	b.n	8014ed2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8014ec4:	f107 030c 	add.w	r3, r7, #12
 8014ec8:	4619      	mov	r1, r3
 8014eca:	6838      	ldr	r0, [r7, #0]
 8014ecc:	f7fe f9fc 	bl	80132c8 <dhcp_arp_reply>
      break;
 8014ed0:	e000      	b.n	8014ed4 <etharp_input+0x104>
      break;
 8014ed2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014ed4:	6878      	ldr	r0, [r7, #4]
 8014ed6:	f7f7 fc45 	bl	800c764 <pbuf_free>
}
 8014eda:	3718      	adds	r7, #24
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bdb0      	pop	{r4, r5, r7, pc}
 8014ee0:	0801f2ec 	.word	0x0801f2ec
 8014ee4:	0801f43c 	.word	0x0801f43c
 8014ee8:	0801f364 	.word	0x0801f364

08014eec <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b086      	sub	sp, #24
 8014ef0:	af02      	add	r7, sp, #8
 8014ef2:	60f8      	str	r0, [r7, #12]
 8014ef4:	60b9      	str	r1, [r7, #8]
 8014ef6:	4613      	mov	r3, r2
 8014ef8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014efa:	79fa      	ldrb	r2, [r7, #7]
 8014efc:	4944      	ldr	r1, [pc, #272]	; (8015010 <etharp_output_to_arp_index+0x124>)
 8014efe:	4613      	mov	r3, r2
 8014f00:	005b      	lsls	r3, r3, #1
 8014f02:	4413      	add	r3, r2
 8014f04:	00db      	lsls	r3, r3, #3
 8014f06:	440b      	add	r3, r1
 8014f08:	3314      	adds	r3, #20
 8014f0a:	781b      	ldrb	r3, [r3, #0]
 8014f0c:	2b01      	cmp	r3, #1
 8014f0e:	d806      	bhi.n	8014f1e <etharp_output_to_arp_index+0x32>
 8014f10:	4b40      	ldr	r3, [pc, #256]	; (8015014 <etharp_output_to_arp_index+0x128>)
 8014f12:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014f16:	4940      	ldr	r1, [pc, #256]	; (8015018 <etharp_output_to_arp_index+0x12c>)
 8014f18:	4840      	ldr	r0, [pc, #256]	; (801501c <etharp_output_to_arp_index+0x130>)
 8014f1a:	f002 fca1 	bl	8017860 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014f1e:	79fa      	ldrb	r2, [r7, #7]
 8014f20:	493b      	ldr	r1, [pc, #236]	; (8015010 <etharp_output_to_arp_index+0x124>)
 8014f22:	4613      	mov	r3, r2
 8014f24:	005b      	lsls	r3, r3, #1
 8014f26:	4413      	add	r3, r2
 8014f28:	00db      	lsls	r3, r3, #3
 8014f2a:	440b      	add	r3, r1
 8014f2c:	3314      	adds	r3, #20
 8014f2e:	781b      	ldrb	r3, [r3, #0]
 8014f30:	2b02      	cmp	r3, #2
 8014f32:	d153      	bne.n	8014fdc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014f34:	79fa      	ldrb	r2, [r7, #7]
 8014f36:	4936      	ldr	r1, [pc, #216]	; (8015010 <etharp_output_to_arp_index+0x124>)
 8014f38:	4613      	mov	r3, r2
 8014f3a:	005b      	lsls	r3, r3, #1
 8014f3c:	4413      	add	r3, r2
 8014f3e:	00db      	lsls	r3, r3, #3
 8014f40:	440b      	add	r3, r1
 8014f42:	3312      	adds	r3, #18
 8014f44:	881b      	ldrh	r3, [r3, #0]
 8014f46:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014f4a:	d919      	bls.n	8014f80 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014f4c:	79fa      	ldrb	r2, [r7, #7]
 8014f4e:	4613      	mov	r3, r2
 8014f50:	005b      	lsls	r3, r3, #1
 8014f52:	4413      	add	r3, r2
 8014f54:	00db      	lsls	r3, r3, #3
 8014f56:	4a2e      	ldr	r2, [pc, #184]	; (8015010 <etharp_output_to_arp_index+0x124>)
 8014f58:	4413      	add	r3, r2
 8014f5a:	3304      	adds	r3, #4
 8014f5c:	4619      	mov	r1, r3
 8014f5e:	68f8      	ldr	r0, [r7, #12]
 8014f60:	f000 fb4c 	bl	80155fc <etharp_request>
 8014f64:	4603      	mov	r3, r0
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d138      	bne.n	8014fdc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014f6a:	79fa      	ldrb	r2, [r7, #7]
 8014f6c:	4928      	ldr	r1, [pc, #160]	; (8015010 <etharp_output_to_arp_index+0x124>)
 8014f6e:	4613      	mov	r3, r2
 8014f70:	005b      	lsls	r3, r3, #1
 8014f72:	4413      	add	r3, r2
 8014f74:	00db      	lsls	r3, r3, #3
 8014f76:	440b      	add	r3, r1
 8014f78:	3314      	adds	r3, #20
 8014f7a:	2203      	movs	r2, #3
 8014f7c:	701a      	strb	r2, [r3, #0]
 8014f7e:	e02d      	b.n	8014fdc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014f80:	79fa      	ldrb	r2, [r7, #7]
 8014f82:	4923      	ldr	r1, [pc, #140]	; (8015010 <etharp_output_to_arp_index+0x124>)
 8014f84:	4613      	mov	r3, r2
 8014f86:	005b      	lsls	r3, r3, #1
 8014f88:	4413      	add	r3, r2
 8014f8a:	00db      	lsls	r3, r3, #3
 8014f8c:	440b      	add	r3, r1
 8014f8e:	3312      	adds	r3, #18
 8014f90:	881b      	ldrh	r3, [r3, #0]
 8014f92:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014f96:	d321      	bcc.n	8014fdc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014f98:	79fa      	ldrb	r2, [r7, #7]
 8014f9a:	4613      	mov	r3, r2
 8014f9c:	005b      	lsls	r3, r3, #1
 8014f9e:	4413      	add	r3, r2
 8014fa0:	00db      	lsls	r3, r3, #3
 8014fa2:	4a1b      	ldr	r2, [pc, #108]	; (8015010 <etharp_output_to_arp_index+0x124>)
 8014fa4:	4413      	add	r3, r2
 8014fa6:	1d19      	adds	r1, r3, #4
 8014fa8:	79fa      	ldrb	r2, [r7, #7]
 8014faa:	4613      	mov	r3, r2
 8014fac:	005b      	lsls	r3, r3, #1
 8014fae:	4413      	add	r3, r2
 8014fb0:	00db      	lsls	r3, r3, #3
 8014fb2:	3308      	adds	r3, #8
 8014fb4:	4a16      	ldr	r2, [pc, #88]	; (8015010 <etharp_output_to_arp_index+0x124>)
 8014fb6:	4413      	add	r3, r2
 8014fb8:	3304      	adds	r3, #4
 8014fba:	461a      	mov	r2, r3
 8014fbc:	68f8      	ldr	r0, [r7, #12]
 8014fbe:	f000 fafb 	bl	80155b8 <etharp_request_dst>
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d109      	bne.n	8014fdc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014fc8:	79fa      	ldrb	r2, [r7, #7]
 8014fca:	4911      	ldr	r1, [pc, #68]	; (8015010 <etharp_output_to_arp_index+0x124>)
 8014fcc:	4613      	mov	r3, r2
 8014fce:	005b      	lsls	r3, r3, #1
 8014fd0:	4413      	add	r3, r2
 8014fd2:	00db      	lsls	r3, r3, #3
 8014fd4:	440b      	add	r3, r1
 8014fd6:	3314      	adds	r3, #20
 8014fd8:	2203      	movs	r2, #3
 8014fda:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8014fe2:	79fa      	ldrb	r2, [r7, #7]
 8014fe4:	4613      	mov	r3, r2
 8014fe6:	005b      	lsls	r3, r3, #1
 8014fe8:	4413      	add	r3, r2
 8014fea:	00db      	lsls	r3, r3, #3
 8014fec:	3308      	adds	r3, #8
 8014fee:	4a08      	ldr	r2, [pc, #32]	; (8015010 <etharp_output_to_arp_index+0x124>)
 8014ff0:	4413      	add	r3, r2
 8014ff2:	3304      	adds	r3, #4
 8014ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014ff8:	9200      	str	r2, [sp, #0]
 8014ffa:	460a      	mov	r2, r1
 8014ffc:	68b9      	ldr	r1, [r7, #8]
 8014ffe:	68f8      	ldr	r0, [r7, #12]
 8015000:	f001 fe58 	bl	8016cb4 <ethernet_output>
 8015004:	4603      	mov	r3, r0
}
 8015006:	4618      	mov	r0, r3
 8015008:	3710      	adds	r7, #16
 801500a:	46bd      	mov	sp, r7
 801500c:	bd80      	pop	{r7, pc}
 801500e:	bf00      	nop
 8015010:	200004a4 	.word	0x200004a4
 8015014:	0801f2ec 	.word	0x0801f2ec
 8015018:	0801f45c 	.word	0x0801f45c
 801501c:	0801f364 	.word	0x0801f364

08015020 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015020:	b580      	push	{r7, lr}
 8015022:	b08a      	sub	sp, #40	; 0x28
 8015024:	af02      	add	r7, sp, #8
 8015026:	60f8      	str	r0, [r7, #12]
 8015028:	60b9      	str	r1, [r7, #8]
 801502a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d106      	bne.n	8015044 <etharp_output+0x24>
 8015036:	4b73      	ldr	r3, [pc, #460]	; (8015204 <etharp_output+0x1e4>)
 8015038:	f240 321e 	movw	r2, #798	; 0x31e
 801503c:	4972      	ldr	r1, [pc, #456]	; (8015208 <etharp_output+0x1e8>)
 801503e:	4873      	ldr	r0, [pc, #460]	; (801520c <etharp_output+0x1ec>)
 8015040:	f002 fc0e 	bl	8017860 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015044:	68bb      	ldr	r3, [r7, #8]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d106      	bne.n	8015058 <etharp_output+0x38>
 801504a:	4b6e      	ldr	r3, [pc, #440]	; (8015204 <etharp_output+0x1e4>)
 801504c:	f240 321f 	movw	r2, #799	; 0x31f
 8015050:	496f      	ldr	r1, [pc, #444]	; (8015210 <etharp_output+0x1f0>)
 8015052:	486e      	ldr	r0, [pc, #440]	; (801520c <etharp_output+0x1ec>)
 8015054:	f002 fc04 	bl	8017860 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d106      	bne.n	801506c <etharp_output+0x4c>
 801505e:	4b69      	ldr	r3, [pc, #420]	; (8015204 <etharp_output+0x1e4>)
 8015060:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015064:	496b      	ldr	r1, [pc, #428]	; (8015214 <etharp_output+0x1f4>)
 8015066:	4869      	ldr	r0, [pc, #420]	; (801520c <etharp_output+0x1ec>)
 8015068:	f002 fbfa 	bl	8017860 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	68f9      	ldr	r1, [r7, #12]
 8015072:	4618      	mov	r0, r3
 8015074:	f000 ff16 	bl	8015ea4 <ip4_addr_isbroadcast_u32>
 8015078:	4603      	mov	r3, r0
 801507a:	2b00      	cmp	r3, #0
 801507c:	d002      	beq.n	8015084 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801507e:	4b66      	ldr	r3, [pc, #408]	; (8015218 <etharp_output+0x1f8>)
 8015080:	61fb      	str	r3, [r7, #28]
 8015082:	e0af      	b.n	80151e4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801508c:	2be0      	cmp	r3, #224	; 0xe0
 801508e:	d118      	bne.n	80150c2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015090:	2301      	movs	r3, #1
 8015092:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015094:	2300      	movs	r3, #0
 8015096:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015098:	235e      	movs	r3, #94	; 0x5e
 801509a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	3301      	adds	r3, #1
 80150a0:	781b      	ldrb	r3, [r3, #0]
 80150a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80150a6:	b2db      	uxtb	r3, r3
 80150a8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	3302      	adds	r3, #2
 80150ae:	781b      	ldrb	r3, [r3, #0]
 80150b0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	3303      	adds	r3, #3
 80150b6:	781b      	ldrb	r3, [r3, #0]
 80150b8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80150ba:	f107 0310 	add.w	r3, r7, #16
 80150be:	61fb      	str	r3, [r7, #28]
 80150c0:	e090      	b.n	80151e4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	681a      	ldr	r2, [r3, #0]
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	3304      	adds	r3, #4
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	405a      	eors	r2, r3
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	3308      	adds	r3, #8
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	4013      	ands	r3, r2
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d012      	beq.n	8015100 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80150e0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80150e4:	4293      	cmp	r3, r2
 80150e6:	d00b      	beq.n	8015100 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	330c      	adds	r3, #12
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d003      	beq.n	80150fa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	330c      	adds	r3, #12
 80150f6:	61bb      	str	r3, [r7, #24]
 80150f8:	e002      	b.n	8015100 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80150fa:	f06f 0303 	mvn.w	r3, #3
 80150fe:	e07d      	b.n	80151fc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015100:	4b46      	ldr	r3, [pc, #280]	; (801521c <etharp_output+0x1fc>)
 8015102:	781b      	ldrb	r3, [r3, #0]
 8015104:	4619      	mov	r1, r3
 8015106:	4a46      	ldr	r2, [pc, #280]	; (8015220 <etharp_output+0x200>)
 8015108:	460b      	mov	r3, r1
 801510a:	005b      	lsls	r3, r3, #1
 801510c:	440b      	add	r3, r1
 801510e:	00db      	lsls	r3, r3, #3
 8015110:	4413      	add	r3, r2
 8015112:	3314      	adds	r3, #20
 8015114:	781b      	ldrb	r3, [r3, #0]
 8015116:	2b01      	cmp	r3, #1
 8015118:	d925      	bls.n	8015166 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801511a:	4b40      	ldr	r3, [pc, #256]	; (801521c <etharp_output+0x1fc>)
 801511c:	781b      	ldrb	r3, [r3, #0]
 801511e:	4619      	mov	r1, r3
 8015120:	4a3f      	ldr	r2, [pc, #252]	; (8015220 <etharp_output+0x200>)
 8015122:	460b      	mov	r3, r1
 8015124:	005b      	lsls	r3, r3, #1
 8015126:	440b      	add	r3, r1
 8015128:	00db      	lsls	r3, r3, #3
 801512a:	4413      	add	r3, r2
 801512c:	3308      	adds	r3, #8
 801512e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015130:	68fa      	ldr	r2, [r7, #12]
 8015132:	429a      	cmp	r2, r3
 8015134:	d117      	bne.n	8015166 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015136:	69bb      	ldr	r3, [r7, #24]
 8015138:	681a      	ldr	r2, [r3, #0]
 801513a:	4b38      	ldr	r3, [pc, #224]	; (801521c <etharp_output+0x1fc>)
 801513c:	781b      	ldrb	r3, [r3, #0]
 801513e:	4618      	mov	r0, r3
 8015140:	4937      	ldr	r1, [pc, #220]	; (8015220 <etharp_output+0x200>)
 8015142:	4603      	mov	r3, r0
 8015144:	005b      	lsls	r3, r3, #1
 8015146:	4403      	add	r3, r0
 8015148:	00db      	lsls	r3, r3, #3
 801514a:	440b      	add	r3, r1
 801514c:	3304      	adds	r3, #4
 801514e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015150:	429a      	cmp	r2, r3
 8015152:	d108      	bne.n	8015166 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015154:	4b31      	ldr	r3, [pc, #196]	; (801521c <etharp_output+0x1fc>)
 8015156:	781b      	ldrb	r3, [r3, #0]
 8015158:	461a      	mov	r2, r3
 801515a:	68b9      	ldr	r1, [r7, #8]
 801515c:	68f8      	ldr	r0, [r7, #12]
 801515e:	f7ff fec5 	bl	8014eec <etharp_output_to_arp_index>
 8015162:	4603      	mov	r3, r0
 8015164:	e04a      	b.n	80151fc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015166:	2300      	movs	r3, #0
 8015168:	75fb      	strb	r3, [r7, #23]
 801516a:	e031      	b.n	80151d0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801516c:	7dfa      	ldrb	r2, [r7, #23]
 801516e:	492c      	ldr	r1, [pc, #176]	; (8015220 <etharp_output+0x200>)
 8015170:	4613      	mov	r3, r2
 8015172:	005b      	lsls	r3, r3, #1
 8015174:	4413      	add	r3, r2
 8015176:	00db      	lsls	r3, r3, #3
 8015178:	440b      	add	r3, r1
 801517a:	3314      	adds	r3, #20
 801517c:	781b      	ldrb	r3, [r3, #0]
 801517e:	2b01      	cmp	r3, #1
 8015180:	d923      	bls.n	80151ca <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015182:	7dfa      	ldrb	r2, [r7, #23]
 8015184:	4926      	ldr	r1, [pc, #152]	; (8015220 <etharp_output+0x200>)
 8015186:	4613      	mov	r3, r2
 8015188:	005b      	lsls	r3, r3, #1
 801518a:	4413      	add	r3, r2
 801518c:	00db      	lsls	r3, r3, #3
 801518e:	440b      	add	r3, r1
 8015190:	3308      	adds	r3, #8
 8015192:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015194:	68fa      	ldr	r2, [r7, #12]
 8015196:	429a      	cmp	r2, r3
 8015198:	d117      	bne.n	80151ca <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801519a:	69bb      	ldr	r3, [r7, #24]
 801519c:	6819      	ldr	r1, [r3, #0]
 801519e:	7dfa      	ldrb	r2, [r7, #23]
 80151a0:	481f      	ldr	r0, [pc, #124]	; (8015220 <etharp_output+0x200>)
 80151a2:	4613      	mov	r3, r2
 80151a4:	005b      	lsls	r3, r3, #1
 80151a6:	4413      	add	r3, r2
 80151a8:	00db      	lsls	r3, r3, #3
 80151aa:	4403      	add	r3, r0
 80151ac:	3304      	adds	r3, #4
 80151ae:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80151b0:	4299      	cmp	r1, r3
 80151b2:	d10a      	bne.n	80151ca <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80151b4:	4a19      	ldr	r2, [pc, #100]	; (801521c <etharp_output+0x1fc>)
 80151b6:	7dfb      	ldrb	r3, [r7, #23]
 80151b8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80151ba:	7dfb      	ldrb	r3, [r7, #23]
 80151bc:	461a      	mov	r2, r3
 80151be:	68b9      	ldr	r1, [r7, #8]
 80151c0:	68f8      	ldr	r0, [r7, #12]
 80151c2:	f7ff fe93 	bl	8014eec <etharp_output_to_arp_index>
 80151c6:	4603      	mov	r3, r0
 80151c8:	e018      	b.n	80151fc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80151ca:	7dfb      	ldrb	r3, [r7, #23]
 80151cc:	3301      	adds	r3, #1
 80151ce:	75fb      	strb	r3, [r7, #23]
 80151d0:	7dfb      	ldrb	r3, [r7, #23]
 80151d2:	2b09      	cmp	r3, #9
 80151d4:	d9ca      	bls.n	801516c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80151d6:	68ba      	ldr	r2, [r7, #8]
 80151d8:	69b9      	ldr	r1, [r7, #24]
 80151da:	68f8      	ldr	r0, [r7, #12]
 80151dc:	f000 f822 	bl	8015224 <etharp_query>
 80151e0:	4603      	mov	r3, r0
 80151e2:	e00b      	b.n	80151fc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80151ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80151ee:	9300      	str	r3, [sp, #0]
 80151f0:	69fb      	ldr	r3, [r7, #28]
 80151f2:	68b9      	ldr	r1, [r7, #8]
 80151f4:	68f8      	ldr	r0, [r7, #12]
 80151f6:	f001 fd5d 	bl	8016cb4 <ethernet_output>
 80151fa:	4603      	mov	r3, r0
}
 80151fc:	4618      	mov	r0, r3
 80151fe:	3720      	adds	r7, #32
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}
 8015204:	0801f2ec 	.word	0x0801f2ec
 8015208:	0801f43c 	.word	0x0801f43c
 801520c:	0801f364 	.word	0x0801f364
 8015210:	0801f48c 	.word	0x0801f48c
 8015214:	0801f42c 	.word	0x0801f42c
 8015218:	0801fac0 	.word	0x0801fac0
 801521c:	20000594 	.word	0x20000594
 8015220:	200004a4 	.word	0x200004a4

08015224 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015224:	b580      	push	{r7, lr}
 8015226:	b08c      	sub	sp, #48	; 0x30
 8015228:	af02      	add	r7, sp, #8
 801522a:	60f8      	str	r0, [r7, #12]
 801522c:	60b9      	str	r1, [r7, #8]
 801522e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	332a      	adds	r3, #42	; 0x2a
 8015234:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015236:	23ff      	movs	r3, #255	; 0xff
 8015238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801523c:	2300      	movs	r3, #0
 801523e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015240:	68bb      	ldr	r3, [r7, #8]
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	68f9      	ldr	r1, [r7, #12]
 8015246:	4618      	mov	r0, r3
 8015248:	f000 fe2c 	bl	8015ea4 <ip4_addr_isbroadcast_u32>
 801524c:	4603      	mov	r3, r0
 801524e:	2b00      	cmp	r3, #0
 8015250:	d10c      	bne.n	801526c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015252:	68bb      	ldr	r3, [r7, #8]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801525a:	2be0      	cmp	r3, #224	; 0xe0
 801525c:	d006      	beq.n	801526c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801525e:	68bb      	ldr	r3, [r7, #8]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d003      	beq.n	801526c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015264:	68bb      	ldr	r3, [r7, #8]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d102      	bne.n	8015272 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801526c:	f06f 030f 	mvn.w	r3, #15
 8015270:	e101      	b.n	8015476 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015272:	68fa      	ldr	r2, [r7, #12]
 8015274:	2101      	movs	r1, #1
 8015276:	68b8      	ldr	r0, [r7, #8]
 8015278:	f7ff fb5c 	bl	8014934 <etharp_find_entry>
 801527c:	4603      	mov	r3, r0
 801527e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015280:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015284:	2b00      	cmp	r3, #0
 8015286:	da02      	bge.n	801528e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015288:	8a7b      	ldrh	r3, [r7, #18]
 801528a:	b25b      	sxtb	r3, r3
 801528c:	e0f3      	b.n	8015476 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801528e:	8a7b      	ldrh	r3, [r7, #18]
 8015290:	2b7e      	cmp	r3, #126	; 0x7e
 8015292:	d906      	bls.n	80152a2 <etharp_query+0x7e>
 8015294:	4b7a      	ldr	r3, [pc, #488]	; (8015480 <etharp_query+0x25c>)
 8015296:	f240 32c1 	movw	r2, #961	; 0x3c1
 801529a:	497a      	ldr	r1, [pc, #488]	; (8015484 <etharp_query+0x260>)
 801529c:	487a      	ldr	r0, [pc, #488]	; (8015488 <etharp_query+0x264>)
 801529e:	f002 fadf 	bl	8017860 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80152a2:	8a7b      	ldrh	r3, [r7, #18]
 80152a4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80152a6:	7c7a      	ldrb	r2, [r7, #17]
 80152a8:	4978      	ldr	r1, [pc, #480]	; (801548c <etharp_query+0x268>)
 80152aa:	4613      	mov	r3, r2
 80152ac:	005b      	lsls	r3, r3, #1
 80152ae:	4413      	add	r3, r2
 80152b0:	00db      	lsls	r3, r3, #3
 80152b2:	440b      	add	r3, r1
 80152b4:	3314      	adds	r3, #20
 80152b6:	781b      	ldrb	r3, [r3, #0]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d115      	bne.n	80152e8 <etharp_query+0xc4>
    is_new_entry = 1;
 80152bc:	2301      	movs	r3, #1
 80152be:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80152c0:	7c7a      	ldrb	r2, [r7, #17]
 80152c2:	4972      	ldr	r1, [pc, #456]	; (801548c <etharp_query+0x268>)
 80152c4:	4613      	mov	r3, r2
 80152c6:	005b      	lsls	r3, r3, #1
 80152c8:	4413      	add	r3, r2
 80152ca:	00db      	lsls	r3, r3, #3
 80152cc:	440b      	add	r3, r1
 80152ce:	3314      	adds	r3, #20
 80152d0:	2201      	movs	r2, #1
 80152d2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80152d4:	7c7a      	ldrb	r2, [r7, #17]
 80152d6:	496d      	ldr	r1, [pc, #436]	; (801548c <etharp_query+0x268>)
 80152d8:	4613      	mov	r3, r2
 80152da:	005b      	lsls	r3, r3, #1
 80152dc:	4413      	add	r3, r2
 80152de:	00db      	lsls	r3, r3, #3
 80152e0:	440b      	add	r3, r1
 80152e2:	3308      	adds	r3, #8
 80152e4:	68fa      	ldr	r2, [r7, #12]
 80152e6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80152e8:	7c7a      	ldrb	r2, [r7, #17]
 80152ea:	4968      	ldr	r1, [pc, #416]	; (801548c <etharp_query+0x268>)
 80152ec:	4613      	mov	r3, r2
 80152ee:	005b      	lsls	r3, r3, #1
 80152f0:	4413      	add	r3, r2
 80152f2:	00db      	lsls	r3, r3, #3
 80152f4:	440b      	add	r3, r1
 80152f6:	3314      	adds	r3, #20
 80152f8:	781b      	ldrb	r3, [r3, #0]
 80152fa:	2b01      	cmp	r3, #1
 80152fc:	d011      	beq.n	8015322 <etharp_query+0xfe>
 80152fe:	7c7a      	ldrb	r2, [r7, #17]
 8015300:	4962      	ldr	r1, [pc, #392]	; (801548c <etharp_query+0x268>)
 8015302:	4613      	mov	r3, r2
 8015304:	005b      	lsls	r3, r3, #1
 8015306:	4413      	add	r3, r2
 8015308:	00db      	lsls	r3, r3, #3
 801530a:	440b      	add	r3, r1
 801530c:	3314      	adds	r3, #20
 801530e:	781b      	ldrb	r3, [r3, #0]
 8015310:	2b01      	cmp	r3, #1
 8015312:	d806      	bhi.n	8015322 <etharp_query+0xfe>
 8015314:	4b5a      	ldr	r3, [pc, #360]	; (8015480 <etharp_query+0x25c>)
 8015316:	f240 32cd 	movw	r2, #973	; 0x3cd
 801531a:	495d      	ldr	r1, [pc, #372]	; (8015490 <etharp_query+0x26c>)
 801531c:	485a      	ldr	r0, [pc, #360]	; (8015488 <etharp_query+0x264>)
 801531e:	f002 fa9f 	bl	8017860 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015322:	6a3b      	ldr	r3, [r7, #32]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d102      	bne.n	801532e <etharp_query+0x10a>
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d10c      	bne.n	8015348 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801532e:	68b9      	ldr	r1, [r7, #8]
 8015330:	68f8      	ldr	r0, [r7, #12]
 8015332:	f000 f963 	bl	80155fc <etharp_request>
 8015336:	4603      	mov	r3, r0
 8015338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d102      	bne.n	8015348 <etharp_query+0x124>
      return result;
 8015342:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015346:	e096      	b.n	8015476 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d106      	bne.n	801535c <etharp_query+0x138>
 801534e:	4b4c      	ldr	r3, [pc, #304]	; (8015480 <etharp_query+0x25c>)
 8015350:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015354:	494f      	ldr	r1, [pc, #316]	; (8015494 <etharp_query+0x270>)
 8015356:	484c      	ldr	r0, [pc, #304]	; (8015488 <etharp_query+0x264>)
 8015358:	f002 fa82 	bl	8017860 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801535c:	7c7a      	ldrb	r2, [r7, #17]
 801535e:	494b      	ldr	r1, [pc, #300]	; (801548c <etharp_query+0x268>)
 8015360:	4613      	mov	r3, r2
 8015362:	005b      	lsls	r3, r3, #1
 8015364:	4413      	add	r3, r2
 8015366:	00db      	lsls	r3, r3, #3
 8015368:	440b      	add	r3, r1
 801536a:	3314      	adds	r3, #20
 801536c:	781b      	ldrb	r3, [r3, #0]
 801536e:	2b01      	cmp	r3, #1
 8015370:	d917      	bls.n	80153a2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015372:	4a49      	ldr	r2, [pc, #292]	; (8015498 <etharp_query+0x274>)
 8015374:	7c7b      	ldrb	r3, [r7, #17]
 8015376:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015378:	7c7a      	ldrb	r2, [r7, #17]
 801537a:	4613      	mov	r3, r2
 801537c:	005b      	lsls	r3, r3, #1
 801537e:	4413      	add	r3, r2
 8015380:	00db      	lsls	r3, r3, #3
 8015382:	3308      	adds	r3, #8
 8015384:	4a41      	ldr	r2, [pc, #260]	; (801548c <etharp_query+0x268>)
 8015386:	4413      	add	r3, r2
 8015388:	3304      	adds	r3, #4
 801538a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801538e:	9200      	str	r2, [sp, #0]
 8015390:	697a      	ldr	r2, [r7, #20]
 8015392:	6879      	ldr	r1, [r7, #4]
 8015394:	68f8      	ldr	r0, [r7, #12]
 8015396:	f001 fc8d 	bl	8016cb4 <ethernet_output>
 801539a:	4603      	mov	r3, r0
 801539c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80153a0:	e067      	b.n	8015472 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80153a2:	7c7a      	ldrb	r2, [r7, #17]
 80153a4:	4939      	ldr	r1, [pc, #228]	; (801548c <etharp_query+0x268>)
 80153a6:	4613      	mov	r3, r2
 80153a8:	005b      	lsls	r3, r3, #1
 80153aa:	4413      	add	r3, r2
 80153ac:	00db      	lsls	r3, r3, #3
 80153ae:	440b      	add	r3, r1
 80153b0:	3314      	adds	r3, #20
 80153b2:	781b      	ldrb	r3, [r3, #0]
 80153b4:	2b01      	cmp	r3, #1
 80153b6:	d15c      	bne.n	8015472 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80153b8:	2300      	movs	r3, #0
 80153ba:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	61fb      	str	r3, [r7, #28]
    while (p) {
 80153c0:	e01c      	b.n	80153fc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80153c2:	69fb      	ldr	r3, [r7, #28]
 80153c4:	895a      	ldrh	r2, [r3, #10]
 80153c6:	69fb      	ldr	r3, [r7, #28]
 80153c8:	891b      	ldrh	r3, [r3, #8]
 80153ca:	429a      	cmp	r2, r3
 80153cc:	d10a      	bne.n	80153e4 <etharp_query+0x1c0>
 80153ce:	69fb      	ldr	r3, [r7, #28]
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d006      	beq.n	80153e4 <etharp_query+0x1c0>
 80153d6:	4b2a      	ldr	r3, [pc, #168]	; (8015480 <etharp_query+0x25c>)
 80153d8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80153dc:	492f      	ldr	r1, [pc, #188]	; (801549c <etharp_query+0x278>)
 80153de:	482a      	ldr	r0, [pc, #168]	; (8015488 <etharp_query+0x264>)
 80153e0:	f002 fa3e 	bl	8017860 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80153e4:	69fb      	ldr	r3, [r7, #28]
 80153e6:	7b1b      	ldrb	r3, [r3, #12]
 80153e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d002      	beq.n	80153f6 <etharp_query+0x1d2>
        copy_needed = 1;
 80153f0:	2301      	movs	r3, #1
 80153f2:	61bb      	str	r3, [r7, #24]
        break;
 80153f4:	e005      	b.n	8015402 <etharp_query+0x1de>
      }
      p = p->next;
 80153f6:	69fb      	ldr	r3, [r7, #28]
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80153fc:	69fb      	ldr	r3, [r7, #28]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d1df      	bne.n	80153c2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015402:	69bb      	ldr	r3, [r7, #24]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d007      	beq.n	8015418 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015408:	687a      	ldr	r2, [r7, #4]
 801540a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801540e:	200e      	movs	r0, #14
 8015410:	f7f7 fc14 	bl	800cc3c <pbuf_clone>
 8015414:	61f8      	str	r0, [r7, #28]
 8015416:	e004      	b.n	8015422 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801541c:	69f8      	ldr	r0, [r7, #28]
 801541e:	f7f7 fa41 	bl	800c8a4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015422:	69fb      	ldr	r3, [r7, #28]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d021      	beq.n	801546c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015428:	7c7a      	ldrb	r2, [r7, #17]
 801542a:	4918      	ldr	r1, [pc, #96]	; (801548c <etharp_query+0x268>)
 801542c:	4613      	mov	r3, r2
 801542e:	005b      	lsls	r3, r3, #1
 8015430:	4413      	add	r3, r2
 8015432:	00db      	lsls	r3, r3, #3
 8015434:	440b      	add	r3, r1
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d00a      	beq.n	8015452 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801543c:	7c7a      	ldrb	r2, [r7, #17]
 801543e:	4913      	ldr	r1, [pc, #76]	; (801548c <etharp_query+0x268>)
 8015440:	4613      	mov	r3, r2
 8015442:	005b      	lsls	r3, r3, #1
 8015444:	4413      	add	r3, r2
 8015446:	00db      	lsls	r3, r3, #3
 8015448:	440b      	add	r3, r1
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	4618      	mov	r0, r3
 801544e:	f7f7 f989 	bl	800c764 <pbuf_free>
      }
      arp_table[i].q = p;
 8015452:	7c7a      	ldrb	r2, [r7, #17]
 8015454:	490d      	ldr	r1, [pc, #52]	; (801548c <etharp_query+0x268>)
 8015456:	4613      	mov	r3, r2
 8015458:	005b      	lsls	r3, r3, #1
 801545a:	4413      	add	r3, r2
 801545c:	00db      	lsls	r3, r3, #3
 801545e:	440b      	add	r3, r1
 8015460:	69fa      	ldr	r2, [r7, #28]
 8015462:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015464:	2300      	movs	r3, #0
 8015466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801546a:	e002      	b.n	8015472 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801546c:	23ff      	movs	r3, #255	; 0xff
 801546e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015472:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015476:	4618      	mov	r0, r3
 8015478:	3728      	adds	r7, #40	; 0x28
 801547a:	46bd      	mov	sp, r7
 801547c:	bd80      	pop	{r7, pc}
 801547e:	bf00      	nop
 8015480:	0801f2ec 	.word	0x0801f2ec
 8015484:	0801f498 	.word	0x0801f498
 8015488:	0801f364 	.word	0x0801f364
 801548c:	200004a4 	.word	0x200004a4
 8015490:	0801f4a8 	.word	0x0801f4a8
 8015494:	0801f48c 	.word	0x0801f48c
 8015498:	20000594 	.word	0x20000594
 801549c:	0801f4d0 	.word	0x0801f4d0

080154a0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b08a      	sub	sp, #40	; 0x28
 80154a4:	af02      	add	r7, sp, #8
 80154a6:	60f8      	str	r0, [r7, #12]
 80154a8:	60b9      	str	r1, [r7, #8]
 80154aa:	607a      	str	r2, [r7, #4]
 80154ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80154ae:	2300      	movs	r3, #0
 80154b0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d106      	bne.n	80154c6 <etharp_raw+0x26>
 80154b8:	4b3a      	ldr	r3, [pc, #232]	; (80155a4 <etharp_raw+0x104>)
 80154ba:	f240 4257 	movw	r2, #1111	; 0x457
 80154be:	493a      	ldr	r1, [pc, #232]	; (80155a8 <etharp_raw+0x108>)
 80154c0:	483a      	ldr	r0, [pc, #232]	; (80155ac <etharp_raw+0x10c>)
 80154c2:	f002 f9cd 	bl	8017860 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80154c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80154ca:	211c      	movs	r1, #28
 80154cc:	200e      	movs	r0, #14
 80154ce:	f7f6 fe65 	bl	800c19c <pbuf_alloc>
 80154d2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80154d4:	69bb      	ldr	r3, [r7, #24]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d102      	bne.n	80154e0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80154da:	f04f 33ff 	mov.w	r3, #4294967295
 80154de:	e05d      	b.n	801559c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80154e0:	69bb      	ldr	r3, [r7, #24]
 80154e2:	895b      	ldrh	r3, [r3, #10]
 80154e4:	2b1b      	cmp	r3, #27
 80154e6:	d806      	bhi.n	80154f6 <etharp_raw+0x56>
 80154e8:	4b2e      	ldr	r3, [pc, #184]	; (80155a4 <etharp_raw+0x104>)
 80154ea:	f240 4262 	movw	r2, #1122	; 0x462
 80154ee:	4930      	ldr	r1, [pc, #192]	; (80155b0 <etharp_raw+0x110>)
 80154f0:	482e      	ldr	r0, [pc, #184]	; (80155ac <etharp_raw+0x10c>)
 80154f2:	f002 f9b5 	bl	8017860 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80154f6:	69bb      	ldr	r3, [r7, #24]
 80154f8:	685b      	ldr	r3, [r3, #4]
 80154fa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80154fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80154fe:	4618      	mov	r0, r3
 8015500:	f7f5 fe94 	bl	800b22c <lwip_htons>
 8015504:	4603      	mov	r3, r0
 8015506:	461a      	mov	r2, r3
 8015508:	697b      	ldr	r3, [r7, #20]
 801550a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015512:	2b06      	cmp	r3, #6
 8015514:	d006      	beq.n	8015524 <etharp_raw+0x84>
 8015516:	4b23      	ldr	r3, [pc, #140]	; (80155a4 <etharp_raw+0x104>)
 8015518:	f240 4269 	movw	r2, #1129	; 0x469
 801551c:	4925      	ldr	r1, [pc, #148]	; (80155b4 <etharp_raw+0x114>)
 801551e:	4823      	ldr	r0, [pc, #140]	; (80155ac <etharp_raw+0x10c>)
 8015520:	f002 f99e 	bl	8017860 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015524:	697b      	ldr	r3, [r7, #20]
 8015526:	3308      	adds	r3, #8
 8015528:	2206      	movs	r2, #6
 801552a:	6839      	ldr	r1, [r7, #0]
 801552c:	4618      	mov	r0, r3
 801552e:	f001 fc53 	bl	8016dd8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015532:	697b      	ldr	r3, [r7, #20]
 8015534:	3312      	adds	r3, #18
 8015536:	2206      	movs	r2, #6
 8015538:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801553a:	4618      	mov	r0, r3
 801553c:	f001 fc4c 	bl	8016dd8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015540:	697b      	ldr	r3, [r7, #20]
 8015542:	330e      	adds	r3, #14
 8015544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015546:	6812      	ldr	r2, [r2, #0]
 8015548:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801554a:	697b      	ldr	r3, [r7, #20]
 801554c:	3318      	adds	r3, #24
 801554e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015550:	6812      	ldr	r2, [r2, #0]
 8015552:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015554:	697b      	ldr	r3, [r7, #20]
 8015556:	2200      	movs	r2, #0
 8015558:	701a      	strb	r2, [r3, #0]
 801555a:	2200      	movs	r2, #0
 801555c:	f042 0201 	orr.w	r2, r2, #1
 8015560:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015562:	697b      	ldr	r3, [r7, #20]
 8015564:	2200      	movs	r2, #0
 8015566:	f042 0208 	orr.w	r2, r2, #8
 801556a:	709a      	strb	r2, [r3, #2]
 801556c:	2200      	movs	r2, #0
 801556e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015570:	697b      	ldr	r3, [r7, #20]
 8015572:	2206      	movs	r2, #6
 8015574:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015576:	697b      	ldr	r3, [r7, #20]
 8015578:	2204      	movs	r2, #4
 801557a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801557c:	f640 0306 	movw	r3, #2054	; 0x806
 8015580:	9300      	str	r3, [sp, #0]
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	68ba      	ldr	r2, [r7, #8]
 8015586:	69b9      	ldr	r1, [r7, #24]
 8015588:	68f8      	ldr	r0, [r7, #12]
 801558a:	f001 fb93 	bl	8016cb4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801558e:	69b8      	ldr	r0, [r7, #24]
 8015590:	f7f7 f8e8 	bl	800c764 <pbuf_free>
  p = NULL;
 8015594:	2300      	movs	r3, #0
 8015596:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015598:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801559c:	4618      	mov	r0, r3
 801559e:	3720      	adds	r7, #32
 80155a0:	46bd      	mov	sp, r7
 80155a2:	bd80      	pop	{r7, pc}
 80155a4:	0801f2ec 	.word	0x0801f2ec
 80155a8:	0801f43c 	.word	0x0801f43c
 80155ac:	0801f364 	.word	0x0801f364
 80155b0:	0801f4ec 	.word	0x0801f4ec
 80155b4:	0801f520 	.word	0x0801f520

080155b8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b088      	sub	sp, #32
 80155bc:	af04      	add	r7, sp, #16
 80155be:	60f8      	str	r0, [r7, #12]
 80155c0:	60b9      	str	r1, [r7, #8]
 80155c2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80155d4:	2201      	movs	r2, #1
 80155d6:	9203      	str	r2, [sp, #12]
 80155d8:	68ba      	ldr	r2, [r7, #8]
 80155da:	9202      	str	r2, [sp, #8]
 80155dc:	4a06      	ldr	r2, [pc, #24]	; (80155f8 <etharp_request_dst+0x40>)
 80155de:	9201      	str	r2, [sp, #4]
 80155e0:	9300      	str	r3, [sp, #0]
 80155e2:	4603      	mov	r3, r0
 80155e4:	687a      	ldr	r2, [r7, #4]
 80155e6:	68f8      	ldr	r0, [r7, #12]
 80155e8:	f7ff ff5a 	bl	80154a0 <etharp_raw>
 80155ec:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80155ee:	4618      	mov	r0, r3
 80155f0:	3710      	adds	r7, #16
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bd80      	pop	{r7, pc}
 80155f6:	bf00      	nop
 80155f8:	0801fac8 	.word	0x0801fac8

080155fc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b082      	sub	sp, #8
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
 8015604:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015606:	4a05      	ldr	r2, [pc, #20]	; (801561c <etharp_request+0x20>)
 8015608:	6839      	ldr	r1, [r7, #0]
 801560a:	6878      	ldr	r0, [r7, #4]
 801560c:	f7ff ffd4 	bl	80155b8 <etharp_request_dst>
 8015610:	4603      	mov	r3, r0
}
 8015612:	4618      	mov	r0, r3
 8015614:	3708      	adds	r7, #8
 8015616:	46bd      	mov	sp, r7
 8015618:	bd80      	pop	{r7, pc}
 801561a:	bf00      	nop
 801561c:	0801fac0 	.word	0x0801fac0

08015620 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015620:	b580      	push	{r7, lr}
 8015622:	b08e      	sub	sp, #56	; 0x38
 8015624:	af04      	add	r7, sp, #16
 8015626:	6078      	str	r0, [r7, #4]
 8015628:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801562a:	4b79      	ldr	r3, [pc, #484]	; (8015810 <icmp_input+0x1f0>)
 801562c:	689b      	ldr	r3, [r3, #8]
 801562e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015632:	781b      	ldrb	r3, [r3, #0]
 8015634:	f003 030f 	and.w	r3, r3, #15
 8015638:	b2db      	uxtb	r3, r3
 801563a:	009b      	lsls	r3, r3, #2
 801563c:	b2db      	uxtb	r3, r3
 801563e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015640:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015642:	2b13      	cmp	r3, #19
 8015644:	f240 80cd 	bls.w	80157e2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	895b      	ldrh	r3, [r3, #10]
 801564c:	2b03      	cmp	r3, #3
 801564e:	f240 80ca 	bls.w	80157e6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	685b      	ldr	r3, [r3, #4]
 8015656:	781b      	ldrb	r3, [r3, #0]
 8015658:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801565c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015660:	2b00      	cmp	r3, #0
 8015662:	f000 80b7 	beq.w	80157d4 <icmp_input+0x1b4>
 8015666:	2b08      	cmp	r3, #8
 8015668:	f040 80b7 	bne.w	80157da <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801566c:	4b69      	ldr	r3, [pc, #420]	; (8015814 <icmp_input+0x1f4>)
 801566e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015670:	4b67      	ldr	r3, [pc, #412]	; (8015810 <icmp_input+0x1f0>)
 8015672:	695b      	ldr	r3, [r3, #20]
 8015674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015678:	2be0      	cmp	r3, #224	; 0xe0
 801567a:	f000 80bb 	beq.w	80157f4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801567e:	4b64      	ldr	r3, [pc, #400]	; (8015810 <icmp_input+0x1f0>)
 8015680:	695b      	ldr	r3, [r3, #20]
 8015682:	4a63      	ldr	r2, [pc, #396]	; (8015810 <icmp_input+0x1f0>)
 8015684:	6812      	ldr	r2, [r2, #0]
 8015686:	4611      	mov	r1, r2
 8015688:	4618      	mov	r0, r3
 801568a:	f000 fc0b 	bl	8015ea4 <ip4_addr_isbroadcast_u32>
 801568e:	4603      	mov	r3, r0
 8015690:	2b00      	cmp	r3, #0
 8015692:	f040 80b1 	bne.w	80157f8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	891b      	ldrh	r3, [r3, #8]
 801569a:	2b07      	cmp	r3, #7
 801569c:	f240 80a5 	bls.w	80157ea <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80156a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80156a2:	330e      	adds	r3, #14
 80156a4:	4619      	mov	r1, r3
 80156a6:	6878      	ldr	r0, [r7, #4]
 80156a8:	f7f6 ffc6 	bl	800c638 <pbuf_add_header>
 80156ac:	4603      	mov	r3, r0
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d04b      	beq.n	801574a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	891a      	ldrh	r2, [r3, #8]
 80156b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80156b8:	4413      	add	r3, r2
 80156ba:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	891b      	ldrh	r3, [r3, #8]
 80156c0:	8b7a      	ldrh	r2, [r7, #26]
 80156c2:	429a      	cmp	r2, r3
 80156c4:	f0c0 809a 	bcc.w	80157fc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80156c8:	8b7b      	ldrh	r3, [r7, #26]
 80156ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 80156ce:	4619      	mov	r1, r3
 80156d0:	200e      	movs	r0, #14
 80156d2:	f7f6 fd63 	bl	800c19c <pbuf_alloc>
 80156d6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80156d8:	697b      	ldr	r3, [r7, #20]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	f000 8090 	beq.w	8015800 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80156e0:	697b      	ldr	r3, [r7, #20]
 80156e2:	895b      	ldrh	r3, [r3, #10]
 80156e4:	461a      	mov	r2, r3
 80156e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80156e8:	3308      	adds	r3, #8
 80156ea:	429a      	cmp	r2, r3
 80156ec:	d203      	bcs.n	80156f6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80156ee:	6978      	ldr	r0, [r7, #20]
 80156f0:	f7f7 f838 	bl	800c764 <pbuf_free>
          goto icmperr;
 80156f4:	e085      	b.n	8015802 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80156f6:	697b      	ldr	r3, [r7, #20]
 80156f8:	685b      	ldr	r3, [r3, #4]
 80156fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80156fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80156fe:	4618      	mov	r0, r3
 8015700:	f001 fb6a 	bl	8016dd8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015704:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015706:	4619      	mov	r1, r3
 8015708:	6978      	ldr	r0, [r7, #20]
 801570a:	f7f6 ffa5 	bl	800c658 <pbuf_remove_header>
 801570e:	4603      	mov	r3, r0
 8015710:	2b00      	cmp	r3, #0
 8015712:	d009      	beq.n	8015728 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015714:	4b40      	ldr	r3, [pc, #256]	; (8015818 <icmp_input+0x1f8>)
 8015716:	22b6      	movs	r2, #182	; 0xb6
 8015718:	4940      	ldr	r1, [pc, #256]	; (801581c <icmp_input+0x1fc>)
 801571a:	4841      	ldr	r0, [pc, #260]	; (8015820 <icmp_input+0x200>)
 801571c:	f002 f8a0 	bl	8017860 <iprintf>
          pbuf_free(r);
 8015720:	6978      	ldr	r0, [r7, #20]
 8015722:	f7f7 f81f 	bl	800c764 <pbuf_free>
          goto icmperr;
 8015726:	e06c      	b.n	8015802 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015728:	6879      	ldr	r1, [r7, #4]
 801572a:	6978      	ldr	r0, [r7, #20]
 801572c:	f7f7 f942 	bl	800c9b4 <pbuf_copy>
 8015730:	4603      	mov	r3, r0
 8015732:	2b00      	cmp	r3, #0
 8015734:	d003      	beq.n	801573e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015736:	6978      	ldr	r0, [r7, #20]
 8015738:	f7f7 f814 	bl	800c764 <pbuf_free>
          goto icmperr;
 801573c:	e061      	b.n	8015802 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801573e:	6878      	ldr	r0, [r7, #4]
 8015740:	f7f7 f810 	bl	800c764 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	607b      	str	r3, [r7, #4]
 8015748:	e00f      	b.n	801576a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801574a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801574c:	330e      	adds	r3, #14
 801574e:	4619      	mov	r1, r3
 8015750:	6878      	ldr	r0, [r7, #4]
 8015752:	f7f6 ff81 	bl	800c658 <pbuf_remove_header>
 8015756:	4603      	mov	r3, r0
 8015758:	2b00      	cmp	r3, #0
 801575a:	d006      	beq.n	801576a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801575c:	4b2e      	ldr	r3, [pc, #184]	; (8015818 <icmp_input+0x1f8>)
 801575e:	22c7      	movs	r2, #199	; 0xc7
 8015760:	4930      	ldr	r1, [pc, #192]	; (8015824 <icmp_input+0x204>)
 8015762:	482f      	ldr	r0, [pc, #188]	; (8015820 <icmp_input+0x200>)
 8015764:	f002 f87c 	bl	8017860 <iprintf>
          goto icmperr;
 8015768:	e04b      	b.n	8015802 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	685b      	ldr	r3, [r3, #4]
 801576e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015770:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015772:	4619      	mov	r1, r3
 8015774:	6878      	ldr	r0, [r7, #4]
 8015776:	f7f6 ff5f 	bl	800c638 <pbuf_add_header>
 801577a:	4603      	mov	r3, r0
 801577c:	2b00      	cmp	r3, #0
 801577e:	d12b      	bne.n	80157d8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	685b      	ldr	r3, [r3, #4]
 8015784:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015786:	69fb      	ldr	r3, [r7, #28]
 8015788:	681a      	ldr	r2, [r3, #0]
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801578e:	4b20      	ldr	r3, [pc, #128]	; (8015810 <icmp_input+0x1f0>)
 8015790:	691a      	ldr	r2, [r3, #16]
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015796:	693b      	ldr	r3, [r7, #16]
 8015798:	2200      	movs	r2, #0
 801579a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801579c:	693b      	ldr	r3, [r7, #16]
 801579e:	2200      	movs	r2, #0
 80157a0:	709a      	strb	r2, [r3, #2]
 80157a2:	2200      	movs	r2, #0
 80157a4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	22ff      	movs	r2, #255	; 0xff
 80157aa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	2200      	movs	r2, #0
 80157b0:	729a      	strb	r2, [r3, #10]
 80157b2:	2200      	movs	r2, #0
 80157b4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80157b6:	683b      	ldr	r3, [r7, #0]
 80157b8:	9302      	str	r3, [sp, #8]
 80157ba:	2301      	movs	r3, #1
 80157bc:	9301      	str	r3, [sp, #4]
 80157be:	2300      	movs	r3, #0
 80157c0:	9300      	str	r3, [sp, #0]
 80157c2:	23ff      	movs	r3, #255	; 0xff
 80157c4:	2200      	movs	r2, #0
 80157c6:	69f9      	ldr	r1, [r7, #28]
 80157c8:	6878      	ldr	r0, [r7, #4]
 80157ca:	f000 fa93 	bl	8015cf4 <ip4_output_if>
 80157ce:	4603      	mov	r3, r0
 80157d0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80157d2:	e001      	b.n	80157d8 <icmp_input+0x1b8>
      break;
 80157d4:	bf00      	nop
 80157d6:	e000      	b.n	80157da <icmp_input+0x1ba>
      break;
 80157d8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80157da:	6878      	ldr	r0, [r7, #4]
 80157dc:	f7f6 ffc2 	bl	800c764 <pbuf_free>
  return;
 80157e0:	e013      	b.n	801580a <icmp_input+0x1ea>
    goto lenerr;
 80157e2:	bf00      	nop
 80157e4:	e002      	b.n	80157ec <icmp_input+0x1cc>
    goto lenerr;
 80157e6:	bf00      	nop
 80157e8:	e000      	b.n	80157ec <icmp_input+0x1cc>
        goto lenerr;
 80157ea:	bf00      	nop
lenerr:
  pbuf_free(p);
 80157ec:	6878      	ldr	r0, [r7, #4]
 80157ee:	f7f6 ffb9 	bl	800c764 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80157f2:	e00a      	b.n	801580a <icmp_input+0x1ea>
        goto icmperr;
 80157f4:	bf00      	nop
 80157f6:	e004      	b.n	8015802 <icmp_input+0x1e2>
        goto icmperr;
 80157f8:	bf00      	nop
 80157fa:	e002      	b.n	8015802 <icmp_input+0x1e2>
          goto icmperr;
 80157fc:	bf00      	nop
 80157fe:	e000      	b.n	8015802 <icmp_input+0x1e2>
          goto icmperr;
 8015800:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015802:	6878      	ldr	r0, [r7, #4]
 8015804:	f7f6 ffae 	bl	800c764 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015808:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801580a:	3728      	adds	r7, #40	; 0x28
 801580c:	46bd      	mov	sp, r7
 801580e:	bd80      	pop	{r7, pc}
 8015810:	20003d18 	.word	0x20003d18
 8015814:	20003d2c 	.word	0x20003d2c
 8015818:	0801f564 	.word	0x0801f564
 801581c:	0801f59c 	.word	0x0801f59c
 8015820:	0801f5d4 	.word	0x0801f5d4
 8015824:	0801f5fc 	.word	0x0801f5fc

08015828 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b082      	sub	sp, #8
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
 8015830:	460b      	mov	r3, r1
 8015832:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015834:	78fb      	ldrb	r3, [r7, #3]
 8015836:	461a      	mov	r2, r3
 8015838:	2103      	movs	r1, #3
 801583a:	6878      	ldr	r0, [r7, #4]
 801583c:	f000 f814 	bl	8015868 <icmp_send_response>
}
 8015840:	bf00      	nop
 8015842:	3708      	adds	r7, #8
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}

08015848 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015848:	b580      	push	{r7, lr}
 801584a:	b082      	sub	sp, #8
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
 8015850:	460b      	mov	r3, r1
 8015852:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015854:	78fb      	ldrb	r3, [r7, #3]
 8015856:	461a      	mov	r2, r3
 8015858:	210b      	movs	r1, #11
 801585a:	6878      	ldr	r0, [r7, #4]
 801585c:	f000 f804 	bl	8015868 <icmp_send_response>
}
 8015860:	bf00      	nop
 8015862:	3708      	adds	r7, #8
 8015864:	46bd      	mov	sp, r7
 8015866:	bd80      	pop	{r7, pc}

08015868 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b08c      	sub	sp, #48	; 0x30
 801586c:	af04      	add	r7, sp, #16
 801586e:	6078      	str	r0, [r7, #4]
 8015870:	460b      	mov	r3, r1
 8015872:	70fb      	strb	r3, [r7, #3]
 8015874:	4613      	mov	r3, r2
 8015876:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015878:	f44f 7220 	mov.w	r2, #640	; 0x280
 801587c:	2124      	movs	r1, #36	; 0x24
 801587e:	2022      	movs	r0, #34	; 0x22
 8015880:	f7f6 fc8c 	bl	800c19c <pbuf_alloc>
 8015884:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015886:	69fb      	ldr	r3, [r7, #28]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d04c      	beq.n	8015926 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801588c:	69fb      	ldr	r3, [r7, #28]
 801588e:	895b      	ldrh	r3, [r3, #10]
 8015890:	2b23      	cmp	r3, #35	; 0x23
 8015892:	d806      	bhi.n	80158a2 <icmp_send_response+0x3a>
 8015894:	4b26      	ldr	r3, [pc, #152]	; (8015930 <icmp_send_response+0xc8>)
 8015896:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801589a:	4926      	ldr	r1, [pc, #152]	; (8015934 <icmp_send_response+0xcc>)
 801589c:	4826      	ldr	r0, [pc, #152]	; (8015938 <icmp_send_response+0xd0>)
 801589e:	f001 ffdf 	bl	8017860 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	685b      	ldr	r3, [r3, #4]
 80158a6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80158a8:	69fb      	ldr	r3, [r7, #28]
 80158aa:	685b      	ldr	r3, [r3, #4]
 80158ac:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80158ae:	697b      	ldr	r3, [r7, #20]
 80158b0:	78fa      	ldrb	r2, [r7, #3]
 80158b2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80158b4:	697b      	ldr	r3, [r7, #20]
 80158b6:	78ba      	ldrb	r2, [r7, #2]
 80158b8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80158ba:	697b      	ldr	r3, [r7, #20]
 80158bc:	2200      	movs	r2, #0
 80158be:	711a      	strb	r2, [r3, #4]
 80158c0:	2200      	movs	r2, #0
 80158c2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80158c4:	697b      	ldr	r3, [r7, #20]
 80158c6:	2200      	movs	r2, #0
 80158c8:	719a      	strb	r2, [r3, #6]
 80158ca:	2200      	movs	r2, #0
 80158cc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80158ce:	69fb      	ldr	r3, [r7, #28]
 80158d0:	685b      	ldr	r3, [r3, #4]
 80158d2:	f103 0008 	add.w	r0, r3, #8
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	685b      	ldr	r3, [r3, #4]
 80158da:	221c      	movs	r2, #28
 80158dc:	4619      	mov	r1, r3
 80158de:	f001 fa7b 	bl	8016dd8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80158e2:	69bb      	ldr	r3, [r7, #24]
 80158e4:	68db      	ldr	r3, [r3, #12]
 80158e6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80158e8:	f107 030c 	add.w	r3, r7, #12
 80158ec:	4618      	mov	r0, r3
 80158ee:	f000 f825 	bl	801593c <ip4_route>
 80158f2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80158f4:	693b      	ldr	r3, [r7, #16]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d011      	beq.n	801591e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80158fa:	697b      	ldr	r3, [r7, #20]
 80158fc:	2200      	movs	r2, #0
 80158fe:	709a      	strb	r2, [r3, #2]
 8015900:	2200      	movs	r2, #0
 8015902:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015904:	f107 020c 	add.w	r2, r7, #12
 8015908:	693b      	ldr	r3, [r7, #16]
 801590a:	9302      	str	r3, [sp, #8]
 801590c:	2301      	movs	r3, #1
 801590e:	9301      	str	r3, [sp, #4]
 8015910:	2300      	movs	r3, #0
 8015912:	9300      	str	r3, [sp, #0]
 8015914:	23ff      	movs	r3, #255	; 0xff
 8015916:	2100      	movs	r1, #0
 8015918:	69f8      	ldr	r0, [r7, #28]
 801591a:	f000 f9eb 	bl	8015cf4 <ip4_output_if>
  }
  pbuf_free(q);
 801591e:	69f8      	ldr	r0, [r7, #28]
 8015920:	f7f6 ff20 	bl	800c764 <pbuf_free>
 8015924:	e000      	b.n	8015928 <icmp_send_response+0xc0>
    return;
 8015926:	bf00      	nop
}
 8015928:	3720      	adds	r7, #32
 801592a:	46bd      	mov	sp, r7
 801592c:	bd80      	pop	{r7, pc}
 801592e:	bf00      	nop
 8015930:	0801f564 	.word	0x0801f564
 8015934:	0801f630 	.word	0x0801f630
 8015938:	0801f5d4 	.word	0x0801f5d4

0801593c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801593c:	b480      	push	{r7}
 801593e:	b085      	sub	sp, #20
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015944:	4b33      	ldr	r3, [pc, #204]	; (8015a14 <ip4_route+0xd8>)
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	60fb      	str	r3, [r7, #12]
 801594a:	e036      	b.n	80159ba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015952:	f003 0301 	and.w	r3, r3, #1
 8015956:	b2db      	uxtb	r3, r3
 8015958:	2b00      	cmp	r3, #0
 801595a:	d02b      	beq.n	80159b4 <ip4_route+0x78>
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015962:	089b      	lsrs	r3, r3, #2
 8015964:	f003 0301 	and.w	r3, r3, #1
 8015968:	b2db      	uxtb	r3, r3
 801596a:	2b00      	cmp	r3, #0
 801596c:	d022      	beq.n	80159b4 <ip4_route+0x78>
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	3304      	adds	r3, #4
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d01d      	beq.n	80159b4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	681a      	ldr	r2, [r3, #0]
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	3304      	adds	r3, #4
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	405a      	eors	r2, r3
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	3308      	adds	r3, #8
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	4013      	ands	r3, r2
 801598c:	2b00      	cmp	r3, #0
 801598e:	d101      	bne.n	8015994 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	e038      	b.n	8015a06 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801599a:	f003 0302 	and.w	r3, r3, #2
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d108      	bne.n	80159b4 <ip4_route+0x78>
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	681a      	ldr	r2, [r3, #0]
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	330c      	adds	r3, #12
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	429a      	cmp	r2, r3
 80159ae:	d101      	bne.n	80159b4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	e028      	b.n	8015a06 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	60fb      	str	r3, [r7, #12]
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d1c5      	bne.n	801594c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80159c0:	4b15      	ldr	r3, [pc, #84]	; (8015a18 <ip4_route+0xdc>)
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d01a      	beq.n	80159fe <ip4_route+0xc2>
 80159c8:	4b13      	ldr	r3, [pc, #76]	; (8015a18 <ip4_route+0xdc>)
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80159d0:	f003 0301 	and.w	r3, r3, #1
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d012      	beq.n	80159fe <ip4_route+0xc2>
 80159d8:	4b0f      	ldr	r3, [pc, #60]	; (8015a18 <ip4_route+0xdc>)
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80159e0:	f003 0304 	and.w	r3, r3, #4
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d00a      	beq.n	80159fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80159e8:	4b0b      	ldr	r3, [pc, #44]	; (8015a18 <ip4_route+0xdc>)
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	3304      	adds	r3, #4
 80159ee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d004      	beq.n	80159fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	b2db      	uxtb	r3, r3
 80159fa:	2b7f      	cmp	r3, #127	; 0x7f
 80159fc:	d101      	bne.n	8015a02 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80159fe:	2300      	movs	r3, #0
 8015a00:	e001      	b.n	8015a06 <ip4_route+0xca>
  }

  return netif_default;
 8015a02:	4b05      	ldr	r3, [pc, #20]	; (8015a18 <ip4_route+0xdc>)
 8015a04:	681b      	ldr	r3, [r3, #0]
}
 8015a06:	4618      	mov	r0, r3
 8015a08:	3714      	adds	r7, #20
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a10:	4770      	bx	lr
 8015a12:	bf00      	nop
 8015a14:	20006e2c 	.word	0x20006e2c
 8015a18:	20006e30 	.word	0x20006e30

08015a1c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b082      	sub	sp, #8
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015a2a:	f003 0301 	and.w	r3, r3, #1
 8015a2e:	b2db      	uxtb	r3, r3
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d016      	beq.n	8015a62 <ip4_input_accept+0x46>
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	3304      	adds	r3, #4
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d011      	beq.n	8015a62 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015a3e:	4b0b      	ldr	r3, [pc, #44]	; (8015a6c <ip4_input_accept+0x50>)
 8015a40:	695a      	ldr	r2, [r3, #20]
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	3304      	adds	r3, #4
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	429a      	cmp	r2, r3
 8015a4a:	d008      	beq.n	8015a5e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015a4c:	4b07      	ldr	r3, [pc, #28]	; (8015a6c <ip4_input_accept+0x50>)
 8015a4e:	695b      	ldr	r3, [r3, #20]
 8015a50:	6879      	ldr	r1, [r7, #4]
 8015a52:	4618      	mov	r0, r3
 8015a54:	f000 fa26 	bl	8015ea4 <ip4_addr_isbroadcast_u32>
 8015a58:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d001      	beq.n	8015a62 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015a5e:	2301      	movs	r3, #1
 8015a60:	e000      	b.n	8015a64 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015a62:	2300      	movs	r3, #0
}
 8015a64:	4618      	mov	r0, r3
 8015a66:	3708      	adds	r7, #8
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	bd80      	pop	{r7, pc}
 8015a6c:	20003d18 	.word	0x20003d18

08015a70 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b088      	sub	sp, #32
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	6078      	str	r0, [r7, #4]
 8015a78:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8015a7a:	2301      	movs	r3, #1
 8015a7c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	685b      	ldr	r3, [r3, #4]
 8015a82:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8015a84:	69fb      	ldr	r3, [r7, #28]
 8015a86:	781b      	ldrb	r3, [r3, #0]
 8015a88:	091b      	lsrs	r3, r3, #4
 8015a8a:	b2db      	uxtb	r3, r3
 8015a8c:	2b04      	cmp	r3, #4
 8015a8e:	d004      	beq.n	8015a9a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015a90:	6878      	ldr	r0, [r7, #4]
 8015a92:	f7f6 fe67 	bl	800c764 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015a96:	2300      	movs	r3, #0
 8015a98:	e123      	b.n	8015ce2 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015a9a:	69fb      	ldr	r3, [r7, #28]
 8015a9c:	781b      	ldrb	r3, [r3, #0]
 8015a9e:	f003 030f 	and.w	r3, r3, #15
 8015aa2:	b2db      	uxtb	r3, r3
 8015aa4:	009b      	lsls	r3, r3, #2
 8015aa6:	b2db      	uxtb	r3, r3
 8015aa8:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015aaa:	69fb      	ldr	r3, [r7, #28]
 8015aac:	885b      	ldrh	r3, [r3, #2]
 8015aae:	b29b      	uxth	r3, r3
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	f7f5 fbbb 	bl	800b22c <lwip_htons>
 8015ab6:	4603      	mov	r3, r0
 8015ab8:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	891b      	ldrh	r3, [r3, #8]
 8015abe:	8a3a      	ldrh	r2, [r7, #16]
 8015ac0:	429a      	cmp	r2, r3
 8015ac2:	d204      	bcs.n	8015ace <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8015ac4:	8a3b      	ldrh	r3, [r7, #16]
 8015ac6:	4619      	mov	r1, r3
 8015ac8:	6878      	ldr	r0, [r7, #4]
 8015aca:	f7f6 fcc5 	bl	800c458 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	895b      	ldrh	r3, [r3, #10]
 8015ad2:	8a7a      	ldrh	r2, [r7, #18]
 8015ad4:	429a      	cmp	r2, r3
 8015ad6:	d807      	bhi.n	8015ae8 <ip4_input+0x78>
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	891b      	ldrh	r3, [r3, #8]
 8015adc:	8a3a      	ldrh	r2, [r7, #16]
 8015ade:	429a      	cmp	r2, r3
 8015ae0:	d802      	bhi.n	8015ae8 <ip4_input+0x78>
 8015ae2:	8a7b      	ldrh	r3, [r7, #18]
 8015ae4:	2b13      	cmp	r3, #19
 8015ae6:	d804      	bhi.n	8015af2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015ae8:	6878      	ldr	r0, [r7, #4]
 8015aea:	f7f6 fe3b 	bl	800c764 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015aee:	2300      	movs	r3, #0
 8015af0:	e0f7      	b.n	8015ce2 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015af2:	69fb      	ldr	r3, [r7, #28]
 8015af4:	691b      	ldr	r3, [r3, #16]
 8015af6:	4a7d      	ldr	r2, [pc, #500]	; (8015cec <ip4_input+0x27c>)
 8015af8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015afa:	69fb      	ldr	r3, [r7, #28]
 8015afc:	68db      	ldr	r3, [r3, #12]
 8015afe:	4a7b      	ldr	r2, [pc, #492]	; (8015cec <ip4_input+0x27c>)
 8015b00:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015b02:	4b7a      	ldr	r3, [pc, #488]	; (8015cec <ip4_input+0x27c>)
 8015b04:	695b      	ldr	r3, [r3, #20]
 8015b06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015b0a:	2be0      	cmp	r3, #224	; 0xe0
 8015b0c:	d112      	bne.n	8015b34 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015b0e:	683b      	ldr	r3, [r7, #0]
 8015b10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015b14:	f003 0301 	and.w	r3, r3, #1
 8015b18:	b2db      	uxtb	r3, r3
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d007      	beq.n	8015b2e <ip4_input+0xbe>
 8015b1e:	683b      	ldr	r3, [r7, #0]
 8015b20:	3304      	adds	r3, #4
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d002      	beq.n	8015b2e <ip4_input+0xbe>
      netif = inp;
 8015b28:	683b      	ldr	r3, [r7, #0]
 8015b2a:	61bb      	str	r3, [r7, #24]
 8015b2c:	e02a      	b.n	8015b84 <ip4_input+0x114>
    } else {
      netif = NULL;
 8015b2e:	2300      	movs	r3, #0
 8015b30:	61bb      	str	r3, [r7, #24]
 8015b32:	e027      	b.n	8015b84 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015b34:	6838      	ldr	r0, [r7, #0]
 8015b36:	f7ff ff71 	bl	8015a1c <ip4_input_accept>
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d002      	beq.n	8015b46 <ip4_input+0xd6>
      netif = inp;
 8015b40:	683b      	ldr	r3, [r7, #0]
 8015b42:	61bb      	str	r3, [r7, #24]
 8015b44:	e01e      	b.n	8015b84 <ip4_input+0x114>
    } else {
      netif = NULL;
 8015b46:	2300      	movs	r3, #0
 8015b48:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015b4a:	4b68      	ldr	r3, [pc, #416]	; (8015cec <ip4_input+0x27c>)
 8015b4c:	695b      	ldr	r3, [r3, #20]
 8015b4e:	b2db      	uxtb	r3, r3
 8015b50:	2b7f      	cmp	r3, #127	; 0x7f
 8015b52:	d017      	beq.n	8015b84 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015b54:	4b66      	ldr	r3, [pc, #408]	; (8015cf0 <ip4_input+0x280>)
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	61bb      	str	r3, [r7, #24]
 8015b5a:	e00e      	b.n	8015b7a <ip4_input+0x10a>
          if (netif == inp) {
 8015b5c:	69ba      	ldr	r2, [r7, #24]
 8015b5e:	683b      	ldr	r3, [r7, #0]
 8015b60:	429a      	cmp	r2, r3
 8015b62:	d006      	beq.n	8015b72 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015b64:	69b8      	ldr	r0, [r7, #24]
 8015b66:	f7ff ff59 	bl	8015a1c <ip4_input_accept>
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d108      	bne.n	8015b82 <ip4_input+0x112>
 8015b70:	e000      	b.n	8015b74 <ip4_input+0x104>
            continue;
 8015b72:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015b74:	69bb      	ldr	r3, [r7, #24]
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	61bb      	str	r3, [r7, #24]
 8015b7a:	69bb      	ldr	r3, [r7, #24]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d1ed      	bne.n	8015b5c <ip4_input+0xec>
 8015b80:	e000      	b.n	8015b84 <ip4_input+0x114>
            break;
 8015b82:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015b84:	69bb      	ldr	r3, [r7, #24]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d111      	bne.n	8015bae <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8015b8a:	69fb      	ldr	r3, [r7, #28]
 8015b8c:	7a5b      	ldrb	r3, [r3, #9]
 8015b8e:	2b11      	cmp	r3, #17
 8015b90:	d10d      	bne.n	8015bae <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8015b92:	8a7b      	ldrh	r3, [r7, #18]
 8015b94:	69fa      	ldr	r2, [r7, #28]
 8015b96:	4413      	add	r3, r2
 8015b98:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	885b      	ldrh	r3, [r3, #2]
 8015b9e:	b29b      	uxth	r3, r3
 8015ba0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8015ba4:	d103      	bne.n	8015bae <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8015ba6:	683b      	ldr	r3, [r7, #0]
 8015ba8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8015baa:	2300      	movs	r3, #0
 8015bac:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8015bae:	697b      	ldr	r3, [r7, #20]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d017      	beq.n	8015be4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8015bb4:	4b4d      	ldr	r3, [pc, #308]	; (8015cec <ip4_input+0x27c>)
 8015bb6:	691b      	ldr	r3, [r3, #16]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d013      	beq.n	8015be4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015bbc:	4b4b      	ldr	r3, [pc, #300]	; (8015cec <ip4_input+0x27c>)
 8015bbe:	691b      	ldr	r3, [r3, #16]
 8015bc0:	6839      	ldr	r1, [r7, #0]
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	f000 f96e 	bl	8015ea4 <ip4_addr_isbroadcast_u32>
 8015bc8:	4603      	mov	r3, r0
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d105      	bne.n	8015bda <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015bce:	4b47      	ldr	r3, [pc, #284]	; (8015cec <ip4_input+0x27c>)
 8015bd0:	691b      	ldr	r3, [r3, #16]
 8015bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015bd6:	2be0      	cmp	r3, #224	; 0xe0
 8015bd8:	d104      	bne.n	8015be4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015bda:	6878      	ldr	r0, [r7, #4]
 8015bdc:	f7f6 fdc2 	bl	800c764 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015be0:	2300      	movs	r3, #0
 8015be2:	e07e      	b.n	8015ce2 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015be4:	69bb      	ldr	r3, [r7, #24]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d104      	bne.n	8015bf4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015bea:	6878      	ldr	r0, [r7, #4]
 8015bec:	f7f6 fdba 	bl	800c764 <pbuf_free>
    return ERR_OK;
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	e076      	b.n	8015ce2 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015bf4:	69fb      	ldr	r3, [r7, #28]
 8015bf6:	88db      	ldrh	r3, [r3, #6]
 8015bf8:	b29b      	uxth	r3, r3
 8015bfa:	461a      	mov	r2, r3
 8015bfc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015c00:	4013      	ands	r3, r2
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d00b      	beq.n	8015c1e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015c06:	6878      	ldr	r0, [r7, #4]
 8015c08:	f000 fc92 	bl	8016530 <ip4_reass>
 8015c0c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d101      	bne.n	8015c18 <ip4_input+0x1a8>
      return ERR_OK;
 8015c14:	2300      	movs	r3, #0
 8015c16:	e064      	b.n	8015ce2 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	685b      	ldr	r3, [r3, #4]
 8015c1c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015c1e:	4a33      	ldr	r2, [pc, #204]	; (8015cec <ip4_input+0x27c>)
 8015c20:	69bb      	ldr	r3, [r7, #24]
 8015c22:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015c24:	4a31      	ldr	r2, [pc, #196]	; (8015cec <ip4_input+0x27c>)
 8015c26:	683b      	ldr	r3, [r7, #0]
 8015c28:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015c2a:	4a30      	ldr	r2, [pc, #192]	; (8015cec <ip4_input+0x27c>)
 8015c2c:	69fb      	ldr	r3, [r7, #28]
 8015c2e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015c30:	69fb      	ldr	r3, [r7, #28]
 8015c32:	781b      	ldrb	r3, [r3, #0]
 8015c34:	f003 030f 	and.w	r3, r3, #15
 8015c38:	b2db      	uxtb	r3, r3
 8015c3a:	009b      	lsls	r3, r3, #2
 8015c3c:	b2db      	uxtb	r3, r3
 8015c3e:	b29a      	uxth	r2, r3
 8015c40:	4b2a      	ldr	r3, [pc, #168]	; (8015cec <ip4_input+0x27c>)
 8015c42:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015c44:	8a7b      	ldrh	r3, [r7, #18]
 8015c46:	4619      	mov	r1, r3
 8015c48:	6878      	ldr	r0, [r7, #4]
 8015c4a:	f7f6 fd05 	bl	800c658 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015c4e:	69fb      	ldr	r3, [r7, #28]
 8015c50:	7a5b      	ldrb	r3, [r3, #9]
 8015c52:	2b11      	cmp	r3, #17
 8015c54:	d006      	beq.n	8015c64 <ip4_input+0x1f4>
 8015c56:	2b11      	cmp	r3, #17
 8015c58:	dc13      	bgt.n	8015c82 <ip4_input+0x212>
 8015c5a:	2b01      	cmp	r3, #1
 8015c5c:	d00c      	beq.n	8015c78 <ip4_input+0x208>
 8015c5e:	2b06      	cmp	r3, #6
 8015c60:	d005      	beq.n	8015c6e <ip4_input+0x1fe>
 8015c62:	e00e      	b.n	8015c82 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015c64:	6839      	ldr	r1, [r7, #0]
 8015c66:	6878      	ldr	r0, [r7, #4]
 8015c68:	f7fc fb26 	bl	80122b8 <udp_input>
        break;
 8015c6c:	e026      	b.n	8015cbc <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015c6e:	6839      	ldr	r1, [r7, #0]
 8015c70:	6878      	ldr	r0, [r7, #4]
 8015c72:	f7f8 fbaf 	bl	800e3d4 <tcp_input>
        break;
 8015c76:	e021      	b.n	8015cbc <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015c78:	6839      	ldr	r1, [r7, #0]
 8015c7a:	6878      	ldr	r0, [r7, #4]
 8015c7c:	f7ff fcd0 	bl	8015620 <icmp_input>
        break;
 8015c80:	e01c      	b.n	8015cbc <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015c82:	4b1a      	ldr	r3, [pc, #104]	; (8015cec <ip4_input+0x27c>)
 8015c84:	695b      	ldr	r3, [r3, #20]
 8015c86:	69b9      	ldr	r1, [r7, #24]
 8015c88:	4618      	mov	r0, r3
 8015c8a:	f000 f90b 	bl	8015ea4 <ip4_addr_isbroadcast_u32>
 8015c8e:	4603      	mov	r3, r0
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d10f      	bne.n	8015cb4 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015c94:	4b15      	ldr	r3, [pc, #84]	; (8015cec <ip4_input+0x27c>)
 8015c96:	695b      	ldr	r3, [r3, #20]
 8015c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015c9c:	2be0      	cmp	r3, #224	; 0xe0
 8015c9e:	d009      	beq.n	8015cb4 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015ca0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015ca4:	4619      	mov	r1, r3
 8015ca6:	6878      	ldr	r0, [r7, #4]
 8015ca8:	f7f6 fd49 	bl	800c73e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015cac:	2102      	movs	r1, #2
 8015cae:	6878      	ldr	r0, [r7, #4]
 8015cb0:	f7ff fdba 	bl	8015828 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015cb4:	6878      	ldr	r0, [r7, #4]
 8015cb6:	f7f6 fd55 	bl	800c764 <pbuf_free>
        break;
 8015cba:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015cbc:	4b0b      	ldr	r3, [pc, #44]	; (8015cec <ip4_input+0x27c>)
 8015cbe:	2200      	movs	r2, #0
 8015cc0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015cc2:	4b0a      	ldr	r3, [pc, #40]	; (8015cec <ip4_input+0x27c>)
 8015cc4:	2200      	movs	r2, #0
 8015cc6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015cc8:	4b08      	ldr	r3, [pc, #32]	; (8015cec <ip4_input+0x27c>)
 8015cca:	2200      	movs	r2, #0
 8015ccc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015cce:	4b07      	ldr	r3, [pc, #28]	; (8015cec <ip4_input+0x27c>)
 8015cd0:	2200      	movs	r2, #0
 8015cd2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015cd4:	4b05      	ldr	r3, [pc, #20]	; (8015cec <ip4_input+0x27c>)
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015cda:	4b04      	ldr	r3, [pc, #16]	; (8015cec <ip4_input+0x27c>)
 8015cdc:	2200      	movs	r2, #0
 8015cde:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015ce0:	2300      	movs	r3, #0
}
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	3720      	adds	r7, #32
 8015ce6:	46bd      	mov	sp, r7
 8015ce8:	bd80      	pop	{r7, pc}
 8015cea:	bf00      	nop
 8015cec:	20003d18 	.word	0x20003d18
 8015cf0:	20006e2c 	.word	0x20006e2c

08015cf4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b08a      	sub	sp, #40	; 0x28
 8015cf8:	af04      	add	r7, sp, #16
 8015cfa:	60f8      	str	r0, [r7, #12]
 8015cfc:	60b9      	str	r1, [r7, #8]
 8015cfe:	607a      	str	r2, [r7, #4]
 8015d00:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015d02:	68bb      	ldr	r3, [r7, #8]
 8015d04:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d009      	beq.n	8015d20 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015d0c:	68bb      	ldr	r3, [r7, #8]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d003      	beq.n	8015d1a <ip4_output_if+0x26>
 8015d12:	68bb      	ldr	r3, [r7, #8]
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d102      	bne.n	8015d20 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d1c:	3304      	adds	r3, #4
 8015d1e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015d20:	78fa      	ldrb	r2, [r7, #3]
 8015d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d24:	9302      	str	r3, [sp, #8]
 8015d26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015d2a:	9301      	str	r3, [sp, #4]
 8015d2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015d30:	9300      	str	r3, [sp, #0]
 8015d32:	4613      	mov	r3, r2
 8015d34:	687a      	ldr	r2, [r7, #4]
 8015d36:	6979      	ldr	r1, [r7, #20]
 8015d38:	68f8      	ldr	r0, [r7, #12]
 8015d3a:	f000 f805 	bl	8015d48 <ip4_output_if_src>
 8015d3e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015d40:	4618      	mov	r0, r3
 8015d42:	3718      	adds	r7, #24
 8015d44:	46bd      	mov	sp, r7
 8015d46:	bd80      	pop	{r7, pc}

08015d48 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b088      	sub	sp, #32
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	60f8      	str	r0, [r7, #12]
 8015d50:	60b9      	str	r1, [r7, #8]
 8015d52:	607a      	str	r2, [r7, #4]
 8015d54:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	7b9b      	ldrb	r3, [r3, #14]
 8015d5a:	2b01      	cmp	r3, #1
 8015d5c:	d006      	beq.n	8015d6c <ip4_output_if_src+0x24>
 8015d5e:	4b4b      	ldr	r3, [pc, #300]	; (8015e8c <ip4_output_if_src+0x144>)
 8015d60:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015d64:	494a      	ldr	r1, [pc, #296]	; (8015e90 <ip4_output_if_src+0x148>)
 8015d66:	484b      	ldr	r0, [pc, #300]	; (8015e94 <ip4_output_if_src+0x14c>)
 8015d68:	f001 fd7a 	bl	8017860 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d060      	beq.n	8015e34 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015d72:	2314      	movs	r3, #20
 8015d74:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015d76:	2114      	movs	r1, #20
 8015d78:	68f8      	ldr	r0, [r7, #12]
 8015d7a:	f7f6 fc5d 	bl	800c638 <pbuf_add_header>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d002      	beq.n	8015d8a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015d84:	f06f 0301 	mvn.w	r3, #1
 8015d88:	e07c      	b.n	8015e84 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	685b      	ldr	r3, [r3, #4]
 8015d8e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	895b      	ldrh	r3, [r3, #10]
 8015d94:	2b13      	cmp	r3, #19
 8015d96:	d806      	bhi.n	8015da6 <ip4_output_if_src+0x5e>
 8015d98:	4b3c      	ldr	r3, [pc, #240]	; (8015e8c <ip4_output_if_src+0x144>)
 8015d9a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015d9e:	493e      	ldr	r1, [pc, #248]	; (8015e98 <ip4_output_if_src+0x150>)
 8015da0:	483c      	ldr	r0, [pc, #240]	; (8015e94 <ip4_output_if_src+0x14c>)
 8015da2:	f001 fd5d 	bl	8017860 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015da6:	69fb      	ldr	r3, [r7, #28]
 8015da8:	78fa      	ldrb	r2, [r7, #3]
 8015daa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015dac:	69fb      	ldr	r3, [r7, #28]
 8015dae:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015db2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	681a      	ldr	r2, [r3, #0]
 8015db8:	69fb      	ldr	r3, [r7, #28]
 8015dba:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015dbc:	8b7b      	ldrh	r3, [r7, #26]
 8015dbe:	089b      	lsrs	r3, r3, #2
 8015dc0:	b29b      	uxth	r3, r3
 8015dc2:	b2db      	uxtb	r3, r3
 8015dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015dc8:	b2da      	uxtb	r2, r3
 8015dca:	69fb      	ldr	r3, [r7, #28]
 8015dcc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015dce:	69fb      	ldr	r3, [r7, #28]
 8015dd0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015dd4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	891b      	ldrh	r3, [r3, #8]
 8015dda:	4618      	mov	r0, r3
 8015ddc:	f7f5 fa26 	bl	800b22c <lwip_htons>
 8015de0:	4603      	mov	r3, r0
 8015de2:	461a      	mov	r2, r3
 8015de4:	69fb      	ldr	r3, [r7, #28]
 8015de6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015de8:	69fb      	ldr	r3, [r7, #28]
 8015dea:	2200      	movs	r2, #0
 8015dec:	719a      	strb	r2, [r3, #6]
 8015dee:	2200      	movs	r2, #0
 8015df0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015df2:	4b2a      	ldr	r3, [pc, #168]	; (8015e9c <ip4_output_if_src+0x154>)
 8015df4:	881b      	ldrh	r3, [r3, #0]
 8015df6:	4618      	mov	r0, r3
 8015df8:	f7f5 fa18 	bl	800b22c <lwip_htons>
 8015dfc:	4603      	mov	r3, r0
 8015dfe:	461a      	mov	r2, r3
 8015e00:	69fb      	ldr	r3, [r7, #28]
 8015e02:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015e04:	4b25      	ldr	r3, [pc, #148]	; (8015e9c <ip4_output_if_src+0x154>)
 8015e06:	881b      	ldrh	r3, [r3, #0]
 8015e08:	3301      	adds	r3, #1
 8015e0a:	b29a      	uxth	r2, r3
 8015e0c:	4b23      	ldr	r3, [pc, #140]	; (8015e9c <ip4_output_if_src+0x154>)
 8015e0e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015e10:	68bb      	ldr	r3, [r7, #8]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d104      	bne.n	8015e20 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015e16:	4b22      	ldr	r3, [pc, #136]	; (8015ea0 <ip4_output_if_src+0x158>)
 8015e18:	681a      	ldr	r2, [r3, #0]
 8015e1a:	69fb      	ldr	r3, [r7, #28]
 8015e1c:	60da      	str	r2, [r3, #12]
 8015e1e:	e003      	b.n	8015e28 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015e20:	68bb      	ldr	r3, [r7, #8]
 8015e22:	681a      	ldr	r2, [r3, #0]
 8015e24:	69fb      	ldr	r3, [r7, #28]
 8015e26:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015e28:	69fb      	ldr	r3, [r7, #28]
 8015e2a:	2200      	movs	r2, #0
 8015e2c:	729a      	strb	r2, [r3, #10]
 8015e2e:	2200      	movs	r2, #0
 8015e30:	72da      	strb	r2, [r3, #11]
 8015e32:	e00f      	b.n	8015e54 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	895b      	ldrh	r3, [r3, #10]
 8015e38:	2b13      	cmp	r3, #19
 8015e3a:	d802      	bhi.n	8015e42 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015e3c:	f06f 0301 	mvn.w	r3, #1
 8015e40:	e020      	b.n	8015e84 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	685b      	ldr	r3, [r3, #4]
 8015e46:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015e48:	69fb      	ldr	r3, [r7, #28]
 8015e4a:	691b      	ldr	r3, [r3, #16]
 8015e4c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015e4e:	f107 0314 	add.w	r3, r7, #20
 8015e52:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d00c      	beq.n	8015e76 <ip4_output_if_src+0x12e>
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	891a      	ldrh	r2, [r3, #8]
 8015e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e64:	429a      	cmp	r2, r3
 8015e66:	d906      	bls.n	8015e76 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015e68:	687a      	ldr	r2, [r7, #4]
 8015e6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015e6c:	68f8      	ldr	r0, [r7, #12]
 8015e6e:	f000 fd4d 	bl	801690c <ip4_frag>
 8015e72:	4603      	mov	r3, r0
 8015e74:	e006      	b.n	8015e84 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e78:	695b      	ldr	r3, [r3, #20]
 8015e7a:	687a      	ldr	r2, [r7, #4]
 8015e7c:	68f9      	ldr	r1, [r7, #12]
 8015e7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e80:	4798      	blx	r3
 8015e82:	4603      	mov	r3, r0
}
 8015e84:	4618      	mov	r0, r3
 8015e86:	3720      	adds	r7, #32
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	bd80      	pop	{r7, pc}
 8015e8c:	0801f65c 	.word	0x0801f65c
 8015e90:	0801f690 	.word	0x0801f690
 8015e94:	0801f69c 	.word	0x0801f69c
 8015e98:	0801f6c4 	.word	0x0801f6c4
 8015e9c:	20000596 	.word	0x20000596
 8015ea0:	0801fab8 	.word	0x0801fab8

08015ea4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015ea4:	b480      	push	{r7}
 8015ea6:	b085      	sub	sp, #20
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	6078      	str	r0, [r7, #4]
 8015eac:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015eb8:	d002      	beq.n	8015ec0 <ip4_addr_isbroadcast_u32+0x1c>
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d101      	bne.n	8015ec4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015ec0:	2301      	movs	r3, #1
 8015ec2:	e02a      	b.n	8015f1a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015ec4:	683b      	ldr	r3, [r7, #0]
 8015ec6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015eca:	f003 0302 	and.w	r3, r3, #2
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d101      	bne.n	8015ed6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	e021      	b.n	8015f1a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015ed6:	683b      	ldr	r3, [r7, #0]
 8015ed8:	3304      	adds	r3, #4
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	687a      	ldr	r2, [r7, #4]
 8015ede:	429a      	cmp	r2, r3
 8015ee0:	d101      	bne.n	8015ee6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	e019      	b.n	8015f1a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015ee6:	68fa      	ldr	r2, [r7, #12]
 8015ee8:	683b      	ldr	r3, [r7, #0]
 8015eea:	3304      	adds	r3, #4
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	405a      	eors	r2, r3
 8015ef0:	683b      	ldr	r3, [r7, #0]
 8015ef2:	3308      	adds	r3, #8
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	4013      	ands	r3, r2
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d10d      	bne.n	8015f18 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015efc:	683b      	ldr	r3, [r7, #0]
 8015efe:	3308      	adds	r3, #8
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	43da      	mvns	r2, r3
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015f08:	683b      	ldr	r3, [r7, #0]
 8015f0a:	3308      	adds	r3, #8
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015f10:	429a      	cmp	r2, r3
 8015f12:	d101      	bne.n	8015f18 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015f14:	2301      	movs	r3, #1
 8015f16:	e000      	b.n	8015f1a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015f18:	2300      	movs	r3, #0
  }
}
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	3714      	adds	r7, #20
 8015f1e:	46bd      	mov	sp, r7
 8015f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f24:	4770      	bx	lr
	...

08015f28 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b084      	sub	sp, #16
 8015f2c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015f2e:	2300      	movs	r3, #0
 8015f30:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015f32:	4b12      	ldr	r3, [pc, #72]	; (8015f7c <ip_reass_tmr+0x54>)
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015f38:	e018      	b.n	8015f6c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	7fdb      	ldrb	r3, [r3, #31]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d00b      	beq.n	8015f5a <ip_reass_tmr+0x32>
      r->timer--;
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	7fdb      	ldrb	r3, [r3, #31]
 8015f46:	3b01      	subs	r3, #1
 8015f48:	b2da      	uxtb	r2, r3
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	60fb      	str	r3, [r7, #12]
 8015f58:	e008      	b.n	8015f6c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015f64:	68b9      	ldr	r1, [r7, #8]
 8015f66:	6878      	ldr	r0, [r7, #4]
 8015f68:	f000 f80a 	bl	8015f80 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d1e3      	bne.n	8015f3a <ip_reass_tmr+0x12>
    }
  }
}
 8015f72:	bf00      	nop
 8015f74:	bf00      	nop
 8015f76:	3710      	adds	r7, #16
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	bd80      	pop	{r7, pc}
 8015f7c:	20000598 	.word	0x20000598

08015f80 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015f80:	b580      	push	{r7, lr}
 8015f82:	b088      	sub	sp, #32
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	6078      	str	r0, [r7, #4]
 8015f88:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015f8e:	683a      	ldr	r2, [r7, #0]
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	429a      	cmp	r2, r3
 8015f94:	d105      	bne.n	8015fa2 <ip_reass_free_complete_datagram+0x22>
 8015f96:	4b45      	ldr	r3, [pc, #276]	; (80160ac <ip_reass_free_complete_datagram+0x12c>)
 8015f98:	22ab      	movs	r2, #171	; 0xab
 8015f9a:	4945      	ldr	r1, [pc, #276]	; (80160b0 <ip_reass_free_complete_datagram+0x130>)
 8015f9c:	4845      	ldr	r0, [pc, #276]	; (80160b4 <ip_reass_free_complete_datagram+0x134>)
 8015f9e:	f001 fc5f 	bl	8017860 <iprintf>
  if (prev != NULL) {
 8015fa2:	683b      	ldr	r3, [r7, #0]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d00a      	beq.n	8015fbe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015fa8:	683b      	ldr	r3, [r7, #0]
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	687a      	ldr	r2, [r7, #4]
 8015fae:	429a      	cmp	r2, r3
 8015fb0:	d005      	beq.n	8015fbe <ip_reass_free_complete_datagram+0x3e>
 8015fb2:	4b3e      	ldr	r3, [pc, #248]	; (80160ac <ip_reass_free_complete_datagram+0x12c>)
 8015fb4:	22ad      	movs	r2, #173	; 0xad
 8015fb6:	4940      	ldr	r1, [pc, #256]	; (80160b8 <ip_reass_free_complete_datagram+0x138>)
 8015fb8:	483e      	ldr	r0, [pc, #248]	; (80160b4 <ip_reass_free_complete_datagram+0x134>)
 8015fba:	f001 fc51 	bl	8017860 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	685b      	ldr	r3, [r3, #4]
 8015fc2:	685b      	ldr	r3, [r3, #4]
 8015fc4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015fc6:	697b      	ldr	r3, [r7, #20]
 8015fc8:	889b      	ldrh	r3, [r3, #4]
 8015fca:	b29b      	uxth	r3, r3
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d12a      	bne.n	8016026 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	685b      	ldr	r3, [r3, #4]
 8015fd4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015fd6:	697b      	ldr	r3, [r7, #20]
 8015fd8:	681a      	ldr	r2, [r3, #0]
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015fde:	69bb      	ldr	r3, [r7, #24]
 8015fe0:	6858      	ldr	r0, [r3, #4]
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	3308      	adds	r3, #8
 8015fe6:	2214      	movs	r2, #20
 8015fe8:	4619      	mov	r1, r3
 8015fea:	f000 fef5 	bl	8016dd8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015fee:	2101      	movs	r1, #1
 8015ff0:	69b8      	ldr	r0, [r7, #24]
 8015ff2:	f7ff fc29 	bl	8015848 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015ff6:	69b8      	ldr	r0, [r7, #24]
 8015ff8:	f7f6 fc3c 	bl	800c874 <pbuf_clen>
 8015ffc:	4603      	mov	r3, r0
 8015ffe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016000:	8bfa      	ldrh	r2, [r7, #30]
 8016002:	8a7b      	ldrh	r3, [r7, #18]
 8016004:	4413      	add	r3, r2
 8016006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801600a:	db05      	blt.n	8016018 <ip_reass_free_complete_datagram+0x98>
 801600c:	4b27      	ldr	r3, [pc, #156]	; (80160ac <ip_reass_free_complete_datagram+0x12c>)
 801600e:	22bc      	movs	r2, #188	; 0xbc
 8016010:	492a      	ldr	r1, [pc, #168]	; (80160bc <ip_reass_free_complete_datagram+0x13c>)
 8016012:	4828      	ldr	r0, [pc, #160]	; (80160b4 <ip_reass_free_complete_datagram+0x134>)
 8016014:	f001 fc24 	bl	8017860 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016018:	8bfa      	ldrh	r2, [r7, #30]
 801601a:	8a7b      	ldrh	r3, [r7, #18]
 801601c:	4413      	add	r3, r2
 801601e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016020:	69b8      	ldr	r0, [r7, #24]
 8016022:	f7f6 fb9f 	bl	800c764 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	685b      	ldr	r3, [r3, #4]
 801602a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801602c:	e01f      	b.n	801606e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801602e:	69bb      	ldr	r3, [r7, #24]
 8016030:	685b      	ldr	r3, [r3, #4]
 8016032:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016034:	69bb      	ldr	r3, [r7, #24]
 8016036:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016038:	697b      	ldr	r3, [r7, #20]
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801603e:	68f8      	ldr	r0, [r7, #12]
 8016040:	f7f6 fc18 	bl	800c874 <pbuf_clen>
 8016044:	4603      	mov	r3, r0
 8016046:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016048:	8bfa      	ldrh	r2, [r7, #30]
 801604a:	8a7b      	ldrh	r3, [r7, #18]
 801604c:	4413      	add	r3, r2
 801604e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016052:	db05      	blt.n	8016060 <ip_reass_free_complete_datagram+0xe0>
 8016054:	4b15      	ldr	r3, [pc, #84]	; (80160ac <ip_reass_free_complete_datagram+0x12c>)
 8016056:	22cc      	movs	r2, #204	; 0xcc
 8016058:	4918      	ldr	r1, [pc, #96]	; (80160bc <ip_reass_free_complete_datagram+0x13c>)
 801605a:	4816      	ldr	r0, [pc, #88]	; (80160b4 <ip_reass_free_complete_datagram+0x134>)
 801605c:	f001 fc00 	bl	8017860 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016060:	8bfa      	ldrh	r2, [r7, #30]
 8016062:	8a7b      	ldrh	r3, [r7, #18]
 8016064:	4413      	add	r3, r2
 8016066:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016068:	68f8      	ldr	r0, [r7, #12]
 801606a:	f7f6 fb7b 	bl	800c764 <pbuf_free>
  while (p != NULL) {
 801606e:	69bb      	ldr	r3, [r7, #24]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d1dc      	bne.n	801602e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016074:	6839      	ldr	r1, [r7, #0]
 8016076:	6878      	ldr	r0, [r7, #4]
 8016078:	f000 f8c2 	bl	8016200 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801607c:	4b10      	ldr	r3, [pc, #64]	; (80160c0 <ip_reass_free_complete_datagram+0x140>)
 801607e:	881b      	ldrh	r3, [r3, #0]
 8016080:	8bfa      	ldrh	r2, [r7, #30]
 8016082:	429a      	cmp	r2, r3
 8016084:	d905      	bls.n	8016092 <ip_reass_free_complete_datagram+0x112>
 8016086:	4b09      	ldr	r3, [pc, #36]	; (80160ac <ip_reass_free_complete_datagram+0x12c>)
 8016088:	22d2      	movs	r2, #210	; 0xd2
 801608a:	490e      	ldr	r1, [pc, #56]	; (80160c4 <ip_reass_free_complete_datagram+0x144>)
 801608c:	4809      	ldr	r0, [pc, #36]	; (80160b4 <ip_reass_free_complete_datagram+0x134>)
 801608e:	f001 fbe7 	bl	8017860 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016092:	4b0b      	ldr	r3, [pc, #44]	; (80160c0 <ip_reass_free_complete_datagram+0x140>)
 8016094:	881a      	ldrh	r2, [r3, #0]
 8016096:	8bfb      	ldrh	r3, [r7, #30]
 8016098:	1ad3      	subs	r3, r2, r3
 801609a:	b29a      	uxth	r2, r3
 801609c:	4b08      	ldr	r3, [pc, #32]	; (80160c0 <ip_reass_free_complete_datagram+0x140>)
 801609e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80160a0:	8bfb      	ldrh	r3, [r7, #30]
}
 80160a2:	4618      	mov	r0, r3
 80160a4:	3720      	adds	r7, #32
 80160a6:	46bd      	mov	sp, r7
 80160a8:	bd80      	pop	{r7, pc}
 80160aa:	bf00      	nop
 80160ac:	0801f6f4 	.word	0x0801f6f4
 80160b0:	0801f730 	.word	0x0801f730
 80160b4:	0801f73c 	.word	0x0801f73c
 80160b8:	0801f764 	.word	0x0801f764
 80160bc:	0801f778 	.word	0x0801f778
 80160c0:	2000059c 	.word	0x2000059c
 80160c4:	0801f798 	.word	0x0801f798

080160c8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b08a      	sub	sp, #40	; 0x28
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	6078      	str	r0, [r7, #4]
 80160d0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80160d2:	2300      	movs	r3, #0
 80160d4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80160d6:	2300      	movs	r3, #0
 80160d8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80160da:	2300      	movs	r3, #0
 80160dc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80160de:	2300      	movs	r3, #0
 80160e0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80160e2:	2300      	movs	r3, #0
 80160e4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80160e6:	4b28      	ldr	r3, [pc, #160]	; (8016188 <ip_reass_remove_oldest_datagram+0xc0>)
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80160ec:	e030      	b.n	8016150 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80160ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160f0:	695a      	ldr	r2, [r3, #20]
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	68db      	ldr	r3, [r3, #12]
 80160f6:	429a      	cmp	r2, r3
 80160f8:	d10c      	bne.n	8016114 <ip_reass_remove_oldest_datagram+0x4c>
 80160fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160fc:	699a      	ldr	r2, [r3, #24]
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	691b      	ldr	r3, [r3, #16]
 8016102:	429a      	cmp	r2, r3
 8016104:	d106      	bne.n	8016114 <ip_reass_remove_oldest_datagram+0x4c>
 8016106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016108:	899a      	ldrh	r2, [r3, #12]
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	889b      	ldrh	r3, [r3, #4]
 801610e:	b29b      	uxth	r3, r3
 8016110:	429a      	cmp	r2, r3
 8016112:	d014      	beq.n	801613e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016114:	693b      	ldr	r3, [r7, #16]
 8016116:	3301      	adds	r3, #1
 8016118:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801611a:	6a3b      	ldr	r3, [r7, #32]
 801611c:	2b00      	cmp	r3, #0
 801611e:	d104      	bne.n	801612a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016122:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016124:	69fb      	ldr	r3, [r7, #28]
 8016126:	61bb      	str	r3, [r7, #24]
 8016128:	e009      	b.n	801613e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801612c:	7fda      	ldrb	r2, [r3, #31]
 801612e:	6a3b      	ldr	r3, [r7, #32]
 8016130:	7fdb      	ldrb	r3, [r3, #31]
 8016132:	429a      	cmp	r2, r3
 8016134:	d803      	bhi.n	801613e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016138:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801613a:	69fb      	ldr	r3, [r7, #28]
 801613c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d001      	beq.n	801614a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016148:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016152:	2b00      	cmp	r3, #0
 8016154:	d1cb      	bne.n	80160ee <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016156:	6a3b      	ldr	r3, [r7, #32]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d008      	beq.n	801616e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801615c:	69b9      	ldr	r1, [r7, #24]
 801615e:	6a38      	ldr	r0, [r7, #32]
 8016160:	f7ff ff0e 	bl	8015f80 <ip_reass_free_complete_datagram>
 8016164:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016166:	697a      	ldr	r2, [r7, #20]
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	4413      	add	r3, r2
 801616c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801616e:	697a      	ldr	r2, [r7, #20]
 8016170:	683b      	ldr	r3, [r7, #0]
 8016172:	429a      	cmp	r2, r3
 8016174:	da02      	bge.n	801617c <ip_reass_remove_oldest_datagram+0xb4>
 8016176:	693b      	ldr	r3, [r7, #16]
 8016178:	2b01      	cmp	r3, #1
 801617a:	dcac      	bgt.n	80160d6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801617c:	697b      	ldr	r3, [r7, #20]
}
 801617e:	4618      	mov	r0, r3
 8016180:	3728      	adds	r7, #40	; 0x28
 8016182:	46bd      	mov	sp, r7
 8016184:	bd80      	pop	{r7, pc}
 8016186:	bf00      	nop
 8016188:	20000598 	.word	0x20000598

0801618c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801618c:	b580      	push	{r7, lr}
 801618e:	b084      	sub	sp, #16
 8016190:	af00      	add	r7, sp, #0
 8016192:	6078      	str	r0, [r7, #4]
 8016194:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016196:	2004      	movs	r0, #4
 8016198:	f7f5 fc9e 	bl	800bad8 <memp_malloc>
 801619c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d110      	bne.n	80161c6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80161a4:	6839      	ldr	r1, [r7, #0]
 80161a6:	6878      	ldr	r0, [r7, #4]
 80161a8:	f7ff ff8e 	bl	80160c8 <ip_reass_remove_oldest_datagram>
 80161ac:	4602      	mov	r2, r0
 80161ae:	683b      	ldr	r3, [r7, #0]
 80161b0:	4293      	cmp	r3, r2
 80161b2:	dc03      	bgt.n	80161bc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80161b4:	2004      	movs	r0, #4
 80161b6:	f7f5 fc8f 	bl	800bad8 <memp_malloc>
 80161ba:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d101      	bne.n	80161c6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80161c2:	2300      	movs	r3, #0
 80161c4:	e016      	b.n	80161f4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80161c6:	2220      	movs	r2, #32
 80161c8:	2100      	movs	r1, #0
 80161ca:	68f8      	ldr	r0, [r7, #12]
 80161cc:	f000 fe2c 	bl	8016e28 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	220f      	movs	r2, #15
 80161d4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80161d6:	4b09      	ldr	r3, [pc, #36]	; (80161fc <ip_reass_enqueue_new_datagram+0x70>)
 80161d8:	681a      	ldr	r2, [r3, #0]
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80161de:	4a07      	ldr	r2, [pc, #28]	; (80161fc <ip_reass_enqueue_new_datagram+0x70>)
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	3308      	adds	r3, #8
 80161e8:	2214      	movs	r2, #20
 80161ea:	6879      	ldr	r1, [r7, #4]
 80161ec:	4618      	mov	r0, r3
 80161ee:	f000 fdf3 	bl	8016dd8 <memcpy>
  return ipr;
 80161f2:	68fb      	ldr	r3, [r7, #12]
}
 80161f4:	4618      	mov	r0, r3
 80161f6:	3710      	adds	r7, #16
 80161f8:	46bd      	mov	sp, r7
 80161fa:	bd80      	pop	{r7, pc}
 80161fc:	20000598 	.word	0x20000598

08016200 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b082      	sub	sp, #8
 8016204:	af00      	add	r7, sp, #0
 8016206:	6078      	str	r0, [r7, #4]
 8016208:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801620a:	4b10      	ldr	r3, [pc, #64]	; (801624c <ip_reass_dequeue_datagram+0x4c>)
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	687a      	ldr	r2, [r7, #4]
 8016210:	429a      	cmp	r2, r3
 8016212:	d104      	bne.n	801621e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	4a0c      	ldr	r2, [pc, #48]	; (801624c <ip_reass_dequeue_datagram+0x4c>)
 801621a:	6013      	str	r3, [r2, #0]
 801621c:	e00d      	b.n	801623a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801621e:	683b      	ldr	r3, [r7, #0]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d106      	bne.n	8016232 <ip_reass_dequeue_datagram+0x32>
 8016224:	4b0a      	ldr	r3, [pc, #40]	; (8016250 <ip_reass_dequeue_datagram+0x50>)
 8016226:	f240 1245 	movw	r2, #325	; 0x145
 801622a:	490a      	ldr	r1, [pc, #40]	; (8016254 <ip_reass_dequeue_datagram+0x54>)
 801622c:	480a      	ldr	r0, [pc, #40]	; (8016258 <ip_reass_dequeue_datagram+0x58>)
 801622e:	f001 fb17 	bl	8017860 <iprintf>
    prev->next = ipr->next;
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	681a      	ldr	r2, [r3, #0]
 8016236:	683b      	ldr	r3, [r7, #0]
 8016238:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801623a:	6879      	ldr	r1, [r7, #4]
 801623c:	2004      	movs	r0, #4
 801623e:	f7f5 fc97 	bl	800bb70 <memp_free>
}
 8016242:	bf00      	nop
 8016244:	3708      	adds	r7, #8
 8016246:	46bd      	mov	sp, r7
 8016248:	bd80      	pop	{r7, pc}
 801624a:	bf00      	nop
 801624c:	20000598 	.word	0x20000598
 8016250:	0801f6f4 	.word	0x0801f6f4
 8016254:	0801f7bc 	.word	0x0801f7bc
 8016258:	0801f73c 	.word	0x0801f73c

0801625c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b08c      	sub	sp, #48	; 0x30
 8016260:	af00      	add	r7, sp, #0
 8016262:	60f8      	str	r0, [r7, #12]
 8016264:	60b9      	str	r1, [r7, #8]
 8016266:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016268:	2300      	movs	r3, #0
 801626a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801626c:	2301      	movs	r3, #1
 801626e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016270:	68bb      	ldr	r3, [r7, #8]
 8016272:	685b      	ldr	r3, [r3, #4]
 8016274:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016276:	69fb      	ldr	r3, [r7, #28]
 8016278:	885b      	ldrh	r3, [r3, #2]
 801627a:	b29b      	uxth	r3, r3
 801627c:	4618      	mov	r0, r3
 801627e:	f7f4 ffd5 	bl	800b22c <lwip_htons>
 8016282:	4603      	mov	r3, r0
 8016284:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016286:	69fb      	ldr	r3, [r7, #28]
 8016288:	781b      	ldrb	r3, [r3, #0]
 801628a:	f003 030f 	and.w	r3, r3, #15
 801628e:	b2db      	uxtb	r3, r3
 8016290:	009b      	lsls	r3, r3, #2
 8016292:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016294:	7e7b      	ldrb	r3, [r7, #25]
 8016296:	b29b      	uxth	r3, r3
 8016298:	8b7a      	ldrh	r2, [r7, #26]
 801629a:	429a      	cmp	r2, r3
 801629c:	d202      	bcs.n	80162a4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801629e:	f04f 33ff 	mov.w	r3, #4294967295
 80162a2:	e135      	b.n	8016510 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80162a4:	7e7b      	ldrb	r3, [r7, #25]
 80162a6:	b29b      	uxth	r3, r3
 80162a8:	8b7a      	ldrh	r2, [r7, #26]
 80162aa:	1ad3      	subs	r3, r2, r3
 80162ac:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80162ae:	69fb      	ldr	r3, [r7, #28]
 80162b0:	88db      	ldrh	r3, [r3, #6]
 80162b2:	b29b      	uxth	r3, r3
 80162b4:	4618      	mov	r0, r3
 80162b6:	f7f4 ffb9 	bl	800b22c <lwip_htons>
 80162ba:	4603      	mov	r3, r0
 80162bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80162c0:	b29b      	uxth	r3, r3
 80162c2:	00db      	lsls	r3, r3, #3
 80162c4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80162c6:	68bb      	ldr	r3, [r7, #8]
 80162c8:	685b      	ldr	r3, [r3, #4]
 80162ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80162cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ce:	2200      	movs	r2, #0
 80162d0:	701a      	strb	r2, [r3, #0]
 80162d2:	2200      	movs	r2, #0
 80162d4:	705a      	strb	r2, [r3, #1]
 80162d6:	2200      	movs	r2, #0
 80162d8:	709a      	strb	r2, [r3, #2]
 80162da:	2200      	movs	r2, #0
 80162dc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80162de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162e0:	8afa      	ldrh	r2, [r7, #22]
 80162e2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80162e4:	8afa      	ldrh	r2, [r7, #22]
 80162e6:	8b7b      	ldrh	r3, [r7, #26]
 80162e8:	4413      	add	r3, r2
 80162ea:	b29a      	uxth	r2, r3
 80162ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ee:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80162f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162f2:	88db      	ldrh	r3, [r3, #6]
 80162f4:	b29b      	uxth	r3, r3
 80162f6:	8afa      	ldrh	r2, [r7, #22]
 80162f8:	429a      	cmp	r2, r3
 80162fa:	d902      	bls.n	8016302 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80162fc:	f04f 33ff 	mov.w	r3, #4294967295
 8016300:	e106      	b.n	8016510 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	685b      	ldr	r3, [r3, #4]
 8016306:	627b      	str	r3, [r7, #36]	; 0x24
 8016308:	e068      	b.n	80163dc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801630c:	685b      	ldr	r3, [r3, #4]
 801630e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016312:	889b      	ldrh	r3, [r3, #4]
 8016314:	b29a      	uxth	r2, r3
 8016316:	693b      	ldr	r3, [r7, #16]
 8016318:	889b      	ldrh	r3, [r3, #4]
 801631a:	b29b      	uxth	r3, r3
 801631c:	429a      	cmp	r2, r3
 801631e:	d235      	bcs.n	801638c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016324:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016328:	2b00      	cmp	r3, #0
 801632a:	d020      	beq.n	801636e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801632c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801632e:	889b      	ldrh	r3, [r3, #4]
 8016330:	b29a      	uxth	r2, r3
 8016332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016334:	88db      	ldrh	r3, [r3, #6]
 8016336:	b29b      	uxth	r3, r3
 8016338:	429a      	cmp	r2, r3
 801633a:	d307      	bcc.n	801634c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801633e:	88db      	ldrh	r3, [r3, #6]
 8016340:	b29a      	uxth	r2, r3
 8016342:	693b      	ldr	r3, [r7, #16]
 8016344:	889b      	ldrh	r3, [r3, #4]
 8016346:	b29b      	uxth	r3, r3
 8016348:	429a      	cmp	r2, r3
 801634a:	d902      	bls.n	8016352 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801634c:	f04f 33ff 	mov.w	r3, #4294967295
 8016350:	e0de      	b.n	8016510 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016354:	68ba      	ldr	r2, [r7, #8]
 8016356:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801635a:	88db      	ldrh	r3, [r3, #6]
 801635c:	b29a      	uxth	r2, r3
 801635e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016360:	889b      	ldrh	r3, [r3, #4]
 8016362:	b29b      	uxth	r3, r3
 8016364:	429a      	cmp	r2, r3
 8016366:	d03d      	beq.n	80163e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016368:	2300      	movs	r3, #0
 801636a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801636c:	e03a      	b.n	80163e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801636e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016370:	88db      	ldrh	r3, [r3, #6]
 8016372:	b29a      	uxth	r2, r3
 8016374:	693b      	ldr	r3, [r7, #16]
 8016376:	889b      	ldrh	r3, [r3, #4]
 8016378:	b29b      	uxth	r3, r3
 801637a:	429a      	cmp	r2, r3
 801637c:	d902      	bls.n	8016384 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801637e:	f04f 33ff 	mov.w	r3, #4294967295
 8016382:	e0c5      	b.n	8016510 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	68ba      	ldr	r2, [r7, #8]
 8016388:	605a      	str	r2, [r3, #4]
      break;
 801638a:	e02b      	b.n	80163e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801638e:	889b      	ldrh	r3, [r3, #4]
 8016390:	b29a      	uxth	r2, r3
 8016392:	693b      	ldr	r3, [r7, #16]
 8016394:	889b      	ldrh	r3, [r3, #4]
 8016396:	b29b      	uxth	r3, r3
 8016398:	429a      	cmp	r2, r3
 801639a:	d102      	bne.n	80163a2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801639c:	f04f 33ff 	mov.w	r3, #4294967295
 80163a0:	e0b6      	b.n	8016510 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80163a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163a4:	889b      	ldrh	r3, [r3, #4]
 80163a6:	b29a      	uxth	r2, r3
 80163a8:	693b      	ldr	r3, [r7, #16]
 80163aa:	88db      	ldrh	r3, [r3, #6]
 80163ac:	b29b      	uxth	r3, r3
 80163ae:	429a      	cmp	r2, r3
 80163b0:	d202      	bcs.n	80163b8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80163b2:	f04f 33ff 	mov.w	r3, #4294967295
 80163b6:	e0ab      	b.n	8016510 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80163b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d009      	beq.n	80163d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80163be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163c0:	88db      	ldrh	r3, [r3, #6]
 80163c2:	b29a      	uxth	r2, r3
 80163c4:	693b      	ldr	r3, [r7, #16]
 80163c6:	889b      	ldrh	r3, [r3, #4]
 80163c8:	b29b      	uxth	r3, r3
 80163ca:	429a      	cmp	r2, r3
 80163cc:	d001      	beq.n	80163d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80163ce:	2300      	movs	r3, #0
 80163d0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80163d2:	693b      	ldr	r3, [r7, #16]
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80163d8:	693b      	ldr	r3, [r7, #16]
 80163da:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80163dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d193      	bne.n	801630a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80163e2:	e000      	b.n	80163e6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80163e4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80163e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d12d      	bne.n	8016448 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80163ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d01c      	beq.n	801642c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80163f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163f4:	88db      	ldrh	r3, [r3, #6]
 80163f6:	b29a      	uxth	r2, r3
 80163f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163fa:	889b      	ldrh	r3, [r3, #4]
 80163fc:	b29b      	uxth	r3, r3
 80163fe:	429a      	cmp	r2, r3
 8016400:	d906      	bls.n	8016410 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016402:	4b45      	ldr	r3, [pc, #276]	; (8016518 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016404:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016408:	4944      	ldr	r1, [pc, #272]	; (801651c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801640a:	4845      	ldr	r0, [pc, #276]	; (8016520 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801640c:	f001 fa28 	bl	8017860 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016412:	68ba      	ldr	r2, [r7, #8]
 8016414:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016418:	88db      	ldrh	r3, [r3, #6]
 801641a:	b29a      	uxth	r2, r3
 801641c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801641e:	889b      	ldrh	r3, [r3, #4]
 8016420:	b29b      	uxth	r3, r3
 8016422:	429a      	cmp	r2, r3
 8016424:	d010      	beq.n	8016448 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016426:	2300      	movs	r3, #0
 8016428:	623b      	str	r3, [r7, #32]
 801642a:	e00d      	b.n	8016448 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	685b      	ldr	r3, [r3, #4]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d006      	beq.n	8016442 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016434:	4b38      	ldr	r3, [pc, #224]	; (8016518 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016436:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801643a:	493a      	ldr	r1, [pc, #232]	; (8016524 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801643c:	4838      	ldr	r0, [pc, #224]	; (8016520 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801643e:	f001 fa0f 	bl	8017860 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	68ba      	ldr	r2, [r7, #8]
 8016446:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d105      	bne.n	801645a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	7f9b      	ldrb	r3, [r3, #30]
 8016452:	f003 0301 	and.w	r3, r3, #1
 8016456:	2b00      	cmp	r3, #0
 8016458:	d059      	beq.n	801650e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801645a:	6a3b      	ldr	r3, [r7, #32]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d04f      	beq.n	8016500 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	685b      	ldr	r3, [r3, #4]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d006      	beq.n	8016476 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	685b      	ldr	r3, [r3, #4]
 801646c:	685b      	ldr	r3, [r3, #4]
 801646e:	889b      	ldrh	r3, [r3, #4]
 8016470:	b29b      	uxth	r3, r3
 8016472:	2b00      	cmp	r3, #0
 8016474:	d002      	beq.n	801647c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016476:	2300      	movs	r3, #0
 8016478:	623b      	str	r3, [r7, #32]
 801647a:	e041      	b.n	8016500 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801647c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801647e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016486:	e012      	b.n	80164ae <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801648a:	685b      	ldr	r3, [r3, #4]
 801648c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016490:	88db      	ldrh	r3, [r3, #6]
 8016492:	b29a      	uxth	r2, r3
 8016494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016496:	889b      	ldrh	r3, [r3, #4]
 8016498:	b29b      	uxth	r3, r3
 801649a:	429a      	cmp	r2, r3
 801649c:	d002      	beq.n	80164a4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801649e:	2300      	movs	r3, #0
 80164a0:	623b      	str	r3, [r7, #32]
            break;
 80164a2:	e007      	b.n	80164b4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80164a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164a6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80164a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80164ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d1e9      	bne.n	8016488 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80164b4:	6a3b      	ldr	r3, [r7, #32]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d022      	beq.n	8016500 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	685b      	ldr	r3, [r3, #4]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d106      	bne.n	80164d0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80164c2:	4b15      	ldr	r3, [pc, #84]	; (8016518 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80164c4:	f240 12df 	movw	r2, #479	; 0x1df
 80164c8:	4917      	ldr	r1, [pc, #92]	; (8016528 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80164ca:	4815      	ldr	r0, [pc, #84]	; (8016520 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80164cc:	f001 f9c8 	bl	8017860 <iprintf>
          LWIP_ASSERT("sanity check",
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	685b      	ldr	r3, [r3, #4]
 80164d4:	685b      	ldr	r3, [r3, #4]
 80164d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80164d8:	429a      	cmp	r2, r3
 80164da:	d106      	bne.n	80164ea <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80164dc:	4b0e      	ldr	r3, [pc, #56]	; (8016518 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80164de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80164e2:	4911      	ldr	r1, [pc, #68]	; (8016528 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80164e4:	480e      	ldr	r0, [pc, #56]	; (8016520 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80164e6:	f001 f9bb 	bl	8017860 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80164ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d006      	beq.n	8016500 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80164f2:	4b09      	ldr	r3, [pc, #36]	; (8016518 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80164f4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80164f8:	490c      	ldr	r1, [pc, #48]	; (801652c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80164fa:	4809      	ldr	r0, [pc, #36]	; (8016520 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80164fc:	f001 f9b0 	bl	8017860 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016500:	6a3b      	ldr	r3, [r7, #32]
 8016502:	2b00      	cmp	r3, #0
 8016504:	bf14      	ite	ne
 8016506:	2301      	movne	r3, #1
 8016508:	2300      	moveq	r3, #0
 801650a:	b2db      	uxtb	r3, r3
 801650c:	e000      	b.n	8016510 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801650e:	2300      	movs	r3, #0
}
 8016510:	4618      	mov	r0, r3
 8016512:	3730      	adds	r7, #48	; 0x30
 8016514:	46bd      	mov	sp, r7
 8016516:	bd80      	pop	{r7, pc}
 8016518:	0801f6f4 	.word	0x0801f6f4
 801651c:	0801f7d8 	.word	0x0801f7d8
 8016520:	0801f73c 	.word	0x0801f73c
 8016524:	0801f7f8 	.word	0x0801f7f8
 8016528:	0801f830 	.word	0x0801f830
 801652c:	0801f840 	.word	0x0801f840

08016530 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016530:	b580      	push	{r7, lr}
 8016532:	b08e      	sub	sp, #56	; 0x38
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	685b      	ldr	r3, [r3, #4]
 801653c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016540:	781b      	ldrb	r3, [r3, #0]
 8016542:	f003 030f 	and.w	r3, r3, #15
 8016546:	b2db      	uxtb	r3, r3
 8016548:	009b      	lsls	r3, r3, #2
 801654a:	b2db      	uxtb	r3, r3
 801654c:	2b14      	cmp	r3, #20
 801654e:	f040 8167 	bne.w	8016820 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016554:	88db      	ldrh	r3, [r3, #6]
 8016556:	b29b      	uxth	r3, r3
 8016558:	4618      	mov	r0, r3
 801655a:	f7f4 fe67 	bl	800b22c <lwip_htons>
 801655e:	4603      	mov	r3, r0
 8016560:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016564:	b29b      	uxth	r3, r3
 8016566:	00db      	lsls	r3, r3, #3
 8016568:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801656c:	885b      	ldrh	r3, [r3, #2]
 801656e:	b29b      	uxth	r3, r3
 8016570:	4618      	mov	r0, r3
 8016572:	f7f4 fe5b 	bl	800b22c <lwip_htons>
 8016576:	4603      	mov	r3, r0
 8016578:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801657c:	781b      	ldrb	r3, [r3, #0]
 801657e:	f003 030f 	and.w	r3, r3, #15
 8016582:	b2db      	uxtb	r3, r3
 8016584:	009b      	lsls	r3, r3, #2
 8016586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801658a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801658e:	b29b      	uxth	r3, r3
 8016590:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016592:	429a      	cmp	r2, r3
 8016594:	f0c0 8146 	bcc.w	8016824 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016598:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801659c:	b29b      	uxth	r3, r3
 801659e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80165a0:	1ad3      	subs	r3, r2, r3
 80165a2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80165a4:	6878      	ldr	r0, [r7, #4]
 80165a6:	f7f6 f965 	bl	800c874 <pbuf_clen>
 80165aa:	4603      	mov	r3, r0
 80165ac:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80165ae:	4b9f      	ldr	r3, [pc, #636]	; (801682c <ip4_reass+0x2fc>)
 80165b0:	881b      	ldrh	r3, [r3, #0]
 80165b2:	461a      	mov	r2, r3
 80165b4:	8c3b      	ldrh	r3, [r7, #32]
 80165b6:	4413      	add	r3, r2
 80165b8:	2b0a      	cmp	r3, #10
 80165ba:	dd10      	ble.n	80165de <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80165bc:	8c3b      	ldrh	r3, [r7, #32]
 80165be:	4619      	mov	r1, r3
 80165c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80165c2:	f7ff fd81 	bl	80160c8 <ip_reass_remove_oldest_datagram>
 80165c6:	4603      	mov	r3, r0
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	f000 812d 	beq.w	8016828 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80165ce:	4b97      	ldr	r3, [pc, #604]	; (801682c <ip4_reass+0x2fc>)
 80165d0:	881b      	ldrh	r3, [r3, #0]
 80165d2:	461a      	mov	r2, r3
 80165d4:	8c3b      	ldrh	r3, [r7, #32]
 80165d6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80165d8:	2b0a      	cmp	r3, #10
 80165da:	f300 8125 	bgt.w	8016828 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80165de:	4b94      	ldr	r3, [pc, #592]	; (8016830 <ip4_reass+0x300>)
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	633b      	str	r3, [r7, #48]	; 0x30
 80165e4:	e015      	b.n	8016612 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80165e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165e8:	695a      	ldr	r2, [r3, #20]
 80165ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165ec:	68db      	ldr	r3, [r3, #12]
 80165ee:	429a      	cmp	r2, r3
 80165f0:	d10c      	bne.n	801660c <ip4_reass+0xdc>
 80165f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165f4:	699a      	ldr	r2, [r3, #24]
 80165f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165f8:	691b      	ldr	r3, [r3, #16]
 80165fa:	429a      	cmp	r2, r3
 80165fc:	d106      	bne.n	801660c <ip4_reass+0xdc>
 80165fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016600:	899a      	ldrh	r2, [r3, #12]
 8016602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016604:	889b      	ldrh	r3, [r3, #4]
 8016606:	b29b      	uxth	r3, r3
 8016608:	429a      	cmp	r2, r3
 801660a:	d006      	beq.n	801661a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801660c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	633b      	str	r3, [r7, #48]	; 0x30
 8016612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016614:	2b00      	cmp	r3, #0
 8016616:	d1e6      	bne.n	80165e6 <ip4_reass+0xb6>
 8016618:	e000      	b.n	801661c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801661a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801661e:	2b00      	cmp	r3, #0
 8016620:	d109      	bne.n	8016636 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016622:	8c3b      	ldrh	r3, [r7, #32]
 8016624:	4619      	mov	r1, r3
 8016626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016628:	f7ff fdb0 	bl	801618c <ip_reass_enqueue_new_datagram>
 801662c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016630:	2b00      	cmp	r3, #0
 8016632:	d11c      	bne.n	801666e <ip4_reass+0x13e>
      goto nullreturn;
 8016634:	e109      	b.n	801684a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016638:	88db      	ldrh	r3, [r3, #6]
 801663a:	b29b      	uxth	r3, r3
 801663c:	4618      	mov	r0, r3
 801663e:	f7f4 fdf5 	bl	800b22c <lwip_htons>
 8016642:	4603      	mov	r3, r0
 8016644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016648:	2b00      	cmp	r3, #0
 801664a:	d110      	bne.n	801666e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801664e:	89db      	ldrh	r3, [r3, #14]
 8016650:	4618      	mov	r0, r3
 8016652:	f7f4 fdeb 	bl	800b22c <lwip_htons>
 8016656:	4603      	mov	r3, r0
 8016658:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801665c:	2b00      	cmp	r3, #0
 801665e:	d006      	beq.n	801666e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016662:	3308      	adds	r3, #8
 8016664:	2214      	movs	r2, #20
 8016666:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016668:	4618      	mov	r0, r3
 801666a:	f000 fbb5 	bl	8016dd8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801666e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016670:	88db      	ldrh	r3, [r3, #6]
 8016672:	b29b      	uxth	r3, r3
 8016674:	f003 0320 	and.w	r3, r3, #32
 8016678:	2b00      	cmp	r3, #0
 801667a:	bf0c      	ite	eq
 801667c:	2301      	moveq	r3, #1
 801667e:	2300      	movne	r3, #0
 8016680:	b2db      	uxtb	r3, r3
 8016682:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016684:	69fb      	ldr	r3, [r7, #28]
 8016686:	2b00      	cmp	r3, #0
 8016688:	d00e      	beq.n	80166a8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801668a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801668c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801668e:	4413      	add	r3, r2
 8016690:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016692:	8b7a      	ldrh	r2, [r7, #26]
 8016694:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016696:	429a      	cmp	r2, r3
 8016698:	f0c0 80a0 	bcc.w	80167dc <ip4_reass+0x2ac>
 801669c:	8b7b      	ldrh	r3, [r7, #26]
 801669e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80166a2:	4293      	cmp	r3, r2
 80166a4:	f200 809a 	bhi.w	80167dc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80166a8:	69fa      	ldr	r2, [r7, #28]
 80166aa:	6879      	ldr	r1, [r7, #4]
 80166ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80166ae:	f7ff fdd5 	bl	801625c <ip_reass_chain_frag_into_datagram_and_validate>
 80166b2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80166b4:	697b      	ldr	r3, [r7, #20]
 80166b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166ba:	f000 8091 	beq.w	80167e0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80166be:	4b5b      	ldr	r3, [pc, #364]	; (801682c <ip4_reass+0x2fc>)
 80166c0:	881a      	ldrh	r2, [r3, #0]
 80166c2:	8c3b      	ldrh	r3, [r7, #32]
 80166c4:	4413      	add	r3, r2
 80166c6:	b29a      	uxth	r2, r3
 80166c8:	4b58      	ldr	r3, [pc, #352]	; (801682c <ip4_reass+0x2fc>)
 80166ca:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80166cc:	69fb      	ldr	r3, [r7, #28]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d00d      	beq.n	80166ee <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80166d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80166d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80166d6:	4413      	add	r3, r2
 80166d8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80166da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166dc:	8a7a      	ldrh	r2, [r7, #18]
 80166de:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80166e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166e2:	7f9b      	ldrb	r3, [r3, #30]
 80166e4:	f043 0301 	orr.w	r3, r3, #1
 80166e8:	b2da      	uxtb	r2, r3
 80166ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166ec:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80166ee:	697b      	ldr	r3, [r7, #20]
 80166f0:	2b01      	cmp	r3, #1
 80166f2:	d171      	bne.n	80167d8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80166f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166f6:	8b9b      	ldrh	r3, [r3, #28]
 80166f8:	3314      	adds	r3, #20
 80166fa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80166fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166fe:	685b      	ldr	r3, [r3, #4]
 8016700:	685b      	ldr	r3, [r3, #4]
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016708:	685b      	ldr	r3, [r3, #4]
 801670a:	685b      	ldr	r3, [r3, #4]
 801670c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801670e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016710:	3308      	adds	r3, #8
 8016712:	2214      	movs	r2, #20
 8016714:	4619      	mov	r1, r3
 8016716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016718:	f000 fb5e 	bl	8016dd8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801671c:	8a3b      	ldrh	r3, [r7, #16]
 801671e:	4618      	mov	r0, r3
 8016720:	f7f4 fd84 	bl	800b22c <lwip_htons>
 8016724:	4603      	mov	r3, r0
 8016726:	461a      	mov	r2, r3
 8016728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801672a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801672c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801672e:	2200      	movs	r2, #0
 8016730:	719a      	strb	r2, [r3, #6]
 8016732:	2200      	movs	r2, #0
 8016734:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016738:	2200      	movs	r2, #0
 801673a:	729a      	strb	r2, [r3, #10]
 801673c:	2200      	movs	r2, #0
 801673e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016742:	685b      	ldr	r3, [r3, #4]
 8016744:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016746:	e00d      	b.n	8016764 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801674a:	685b      	ldr	r3, [r3, #4]
 801674c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801674e:	2114      	movs	r1, #20
 8016750:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016752:	f7f5 ff81 	bl	800c658 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016756:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016758:	6878      	ldr	r0, [r7, #4]
 801675a:	f7f6 f8c5 	bl	800c8e8 <pbuf_cat>
      r = iprh->next_pbuf;
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016766:	2b00      	cmp	r3, #0
 8016768:	d1ee      	bne.n	8016748 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801676a:	4b31      	ldr	r3, [pc, #196]	; (8016830 <ip4_reass+0x300>)
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016770:	429a      	cmp	r2, r3
 8016772:	d102      	bne.n	801677a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016774:	2300      	movs	r3, #0
 8016776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016778:	e010      	b.n	801679c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801677a:	4b2d      	ldr	r3, [pc, #180]	; (8016830 <ip4_reass+0x300>)
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016780:	e007      	b.n	8016792 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016788:	429a      	cmp	r2, r3
 801678a:	d006      	beq.n	801679a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801678c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016794:	2b00      	cmp	r3, #0
 8016796:	d1f4      	bne.n	8016782 <ip4_reass+0x252>
 8016798:	e000      	b.n	801679c <ip4_reass+0x26c>
          break;
 801679a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801679c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801679e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80167a0:	f7ff fd2e 	bl	8016200 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80167a4:	6878      	ldr	r0, [r7, #4]
 80167a6:	f7f6 f865 	bl	800c874 <pbuf_clen>
 80167aa:	4603      	mov	r3, r0
 80167ac:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80167ae:	4b1f      	ldr	r3, [pc, #124]	; (801682c <ip4_reass+0x2fc>)
 80167b0:	881b      	ldrh	r3, [r3, #0]
 80167b2:	8c3a      	ldrh	r2, [r7, #32]
 80167b4:	429a      	cmp	r2, r3
 80167b6:	d906      	bls.n	80167c6 <ip4_reass+0x296>
 80167b8:	4b1e      	ldr	r3, [pc, #120]	; (8016834 <ip4_reass+0x304>)
 80167ba:	f240 229b 	movw	r2, #667	; 0x29b
 80167be:	491e      	ldr	r1, [pc, #120]	; (8016838 <ip4_reass+0x308>)
 80167c0:	481e      	ldr	r0, [pc, #120]	; (801683c <ip4_reass+0x30c>)
 80167c2:	f001 f84d 	bl	8017860 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80167c6:	4b19      	ldr	r3, [pc, #100]	; (801682c <ip4_reass+0x2fc>)
 80167c8:	881a      	ldrh	r2, [r3, #0]
 80167ca:	8c3b      	ldrh	r3, [r7, #32]
 80167cc:	1ad3      	subs	r3, r2, r3
 80167ce:	b29a      	uxth	r2, r3
 80167d0:	4b16      	ldr	r3, [pc, #88]	; (801682c <ip4_reass+0x2fc>)
 80167d2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	e03c      	b.n	8016852 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80167d8:	2300      	movs	r3, #0
 80167da:	e03a      	b.n	8016852 <ip4_reass+0x322>
      goto nullreturn_ipr;
 80167dc:	bf00      	nop
 80167de:	e000      	b.n	80167e2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80167e0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80167e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d106      	bne.n	80167f6 <ip4_reass+0x2c6>
 80167e8:	4b12      	ldr	r3, [pc, #72]	; (8016834 <ip4_reass+0x304>)
 80167ea:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80167ee:	4914      	ldr	r1, [pc, #80]	; (8016840 <ip4_reass+0x310>)
 80167f0:	4812      	ldr	r0, [pc, #72]	; (801683c <ip4_reass+0x30c>)
 80167f2:	f001 f835 	bl	8017860 <iprintf>
  if (ipr->p == NULL) {
 80167f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167f8:	685b      	ldr	r3, [r3, #4]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d124      	bne.n	8016848 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80167fe:	4b0c      	ldr	r3, [pc, #48]	; (8016830 <ip4_reass+0x300>)
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016804:	429a      	cmp	r2, r3
 8016806:	d006      	beq.n	8016816 <ip4_reass+0x2e6>
 8016808:	4b0a      	ldr	r3, [pc, #40]	; (8016834 <ip4_reass+0x304>)
 801680a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801680e:	490d      	ldr	r1, [pc, #52]	; (8016844 <ip4_reass+0x314>)
 8016810:	480a      	ldr	r0, [pc, #40]	; (801683c <ip4_reass+0x30c>)
 8016812:	f001 f825 	bl	8017860 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016816:	2100      	movs	r1, #0
 8016818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801681a:	f7ff fcf1 	bl	8016200 <ip_reass_dequeue_datagram>
 801681e:	e014      	b.n	801684a <ip4_reass+0x31a>
    goto nullreturn;
 8016820:	bf00      	nop
 8016822:	e012      	b.n	801684a <ip4_reass+0x31a>
    goto nullreturn;
 8016824:	bf00      	nop
 8016826:	e010      	b.n	801684a <ip4_reass+0x31a>
      goto nullreturn;
 8016828:	bf00      	nop
 801682a:	e00e      	b.n	801684a <ip4_reass+0x31a>
 801682c:	2000059c 	.word	0x2000059c
 8016830:	20000598 	.word	0x20000598
 8016834:	0801f6f4 	.word	0x0801f6f4
 8016838:	0801f864 	.word	0x0801f864
 801683c:	0801f73c 	.word	0x0801f73c
 8016840:	0801f880 	.word	0x0801f880
 8016844:	0801f88c 	.word	0x0801f88c
  }

nullreturn:
 8016848:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801684a:	6878      	ldr	r0, [r7, #4]
 801684c:	f7f5 ff8a 	bl	800c764 <pbuf_free>
  return NULL;
 8016850:	2300      	movs	r3, #0
}
 8016852:	4618      	mov	r0, r3
 8016854:	3738      	adds	r7, #56	; 0x38
 8016856:	46bd      	mov	sp, r7
 8016858:	bd80      	pop	{r7, pc}
 801685a:	bf00      	nop

0801685c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801685c:	b580      	push	{r7, lr}
 801685e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016860:	2005      	movs	r0, #5
 8016862:	f7f5 f939 	bl	800bad8 <memp_malloc>
 8016866:	4603      	mov	r3, r0
}
 8016868:	4618      	mov	r0, r3
 801686a:	bd80      	pop	{r7, pc}

0801686c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b082      	sub	sp, #8
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d106      	bne.n	8016888 <ip_frag_free_pbuf_custom_ref+0x1c>
 801687a:	4b07      	ldr	r3, [pc, #28]	; (8016898 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801687c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016880:	4906      	ldr	r1, [pc, #24]	; (801689c <ip_frag_free_pbuf_custom_ref+0x30>)
 8016882:	4807      	ldr	r0, [pc, #28]	; (80168a0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016884:	f000 ffec 	bl	8017860 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016888:	6879      	ldr	r1, [r7, #4]
 801688a:	2005      	movs	r0, #5
 801688c:	f7f5 f970 	bl	800bb70 <memp_free>
}
 8016890:	bf00      	nop
 8016892:	3708      	adds	r7, #8
 8016894:	46bd      	mov	sp, r7
 8016896:	bd80      	pop	{r7, pc}
 8016898:	0801f6f4 	.word	0x0801f6f4
 801689c:	0801f8ac 	.word	0x0801f8ac
 80168a0:	0801f73c 	.word	0x0801f73c

080168a4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b084      	sub	sp, #16
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d106      	bne.n	80168c4 <ipfrag_free_pbuf_custom+0x20>
 80168b6:	4b11      	ldr	r3, [pc, #68]	; (80168fc <ipfrag_free_pbuf_custom+0x58>)
 80168b8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80168bc:	4910      	ldr	r1, [pc, #64]	; (8016900 <ipfrag_free_pbuf_custom+0x5c>)
 80168be:	4811      	ldr	r0, [pc, #68]	; (8016904 <ipfrag_free_pbuf_custom+0x60>)
 80168c0:	f000 ffce 	bl	8017860 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80168c4:	68fa      	ldr	r2, [r7, #12]
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	429a      	cmp	r2, r3
 80168ca:	d006      	beq.n	80168da <ipfrag_free_pbuf_custom+0x36>
 80168cc:	4b0b      	ldr	r3, [pc, #44]	; (80168fc <ipfrag_free_pbuf_custom+0x58>)
 80168ce:	f240 22cf 	movw	r2, #719	; 0x2cf
 80168d2:	490d      	ldr	r1, [pc, #52]	; (8016908 <ipfrag_free_pbuf_custom+0x64>)
 80168d4:	480b      	ldr	r0, [pc, #44]	; (8016904 <ipfrag_free_pbuf_custom+0x60>)
 80168d6:	f000 ffc3 	bl	8017860 <iprintf>
  if (pcr->original != NULL) {
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	695b      	ldr	r3, [r3, #20]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d004      	beq.n	80168ec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	695b      	ldr	r3, [r3, #20]
 80168e6:	4618      	mov	r0, r3
 80168e8:	f7f5 ff3c 	bl	800c764 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80168ec:	68f8      	ldr	r0, [r7, #12]
 80168ee:	f7ff ffbd 	bl	801686c <ip_frag_free_pbuf_custom_ref>
}
 80168f2:	bf00      	nop
 80168f4:	3710      	adds	r7, #16
 80168f6:	46bd      	mov	sp, r7
 80168f8:	bd80      	pop	{r7, pc}
 80168fa:	bf00      	nop
 80168fc:	0801f6f4 	.word	0x0801f6f4
 8016900:	0801f8b8 	.word	0x0801f8b8
 8016904:	0801f73c 	.word	0x0801f73c
 8016908:	0801f8c4 	.word	0x0801f8c4

0801690c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801690c:	b580      	push	{r7, lr}
 801690e:	b094      	sub	sp, #80	; 0x50
 8016910:	af02      	add	r7, sp, #8
 8016912:	60f8      	str	r0, [r7, #12]
 8016914:	60b9      	str	r1, [r7, #8]
 8016916:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016918:	2300      	movs	r3, #0
 801691a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801691e:	68bb      	ldr	r3, [r7, #8]
 8016920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016922:	3b14      	subs	r3, #20
 8016924:	2b00      	cmp	r3, #0
 8016926:	da00      	bge.n	801692a <ip4_frag+0x1e>
 8016928:	3307      	adds	r3, #7
 801692a:	10db      	asrs	r3, r3, #3
 801692c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801692e:	2314      	movs	r3, #20
 8016930:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	685b      	ldr	r3, [r3, #4]
 8016936:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801693a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801693e:	781b      	ldrb	r3, [r3, #0]
 8016940:	f003 030f 	and.w	r3, r3, #15
 8016944:	b2db      	uxtb	r3, r3
 8016946:	009b      	lsls	r3, r3, #2
 8016948:	b2db      	uxtb	r3, r3
 801694a:	2b14      	cmp	r3, #20
 801694c:	d002      	beq.n	8016954 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801694e:	f06f 0305 	mvn.w	r3, #5
 8016952:	e110      	b.n	8016b76 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	895b      	ldrh	r3, [r3, #10]
 8016958:	2b13      	cmp	r3, #19
 801695a:	d809      	bhi.n	8016970 <ip4_frag+0x64>
 801695c:	4b88      	ldr	r3, [pc, #544]	; (8016b80 <ip4_frag+0x274>)
 801695e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016962:	4988      	ldr	r1, [pc, #544]	; (8016b84 <ip4_frag+0x278>)
 8016964:	4888      	ldr	r0, [pc, #544]	; (8016b88 <ip4_frag+0x27c>)
 8016966:	f000 ff7b 	bl	8017860 <iprintf>
 801696a:	f06f 0305 	mvn.w	r3, #5
 801696e:	e102      	b.n	8016b76 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016972:	88db      	ldrh	r3, [r3, #6]
 8016974:	b29b      	uxth	r3, r3
 8016976:	4618      	mov	r0, r3
 8016978:	f7f4 fc58 	bl	800b22c <lwip_htons>
 801697c:	4603      	mov	r3, r0
 801697e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016980:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016982:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016986:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801698a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801698c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016990:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	891b      	ldrh	r3, [r3, #8]
 8016996:	3b14      	subs	r3, #20
 8016998:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801699c:	e0e1      	b.n	8016b62 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801699e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80169a0:	00db      	lsls	r3, r3, #3
 80169a2:	b29b      	uxth	r3, r3
 80169a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80169a8:	4293      	cmp	r3, r2
 80169aa:	bf28      	it	cs
 80169ac:	4613      	movcs	r3, r2
 80169ae:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80169b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80169b4:	2114      	movs	r1, #20
 80169b6:	200e      	movs	r0, #14
 80169b8:	f7f5 fbf0 	bl	800c19c <pbuf_alloc>
 80169bc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80169be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	f000 80d5 	beq.w	8016b70 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80169c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169c8:	895b      	ldrh	r3, [r3, #10]
 80169ca:	2b13      	cmp	r3, #19
 80169cc:	d806      	bhi.n	80169dc <ip4_frag+0xd0>
 80169ce:	4b6c      	ldr	r3, [pc, #432]	; (8016b80 <ip4_frag+0x274>)
 80169d0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80169d4:	496d      	ldr	r1, [pc, #436]	; (8016b8c <ip4_frag+0x280>)
 80169d6:	486c      	ldr	r0, [pc, #432]	; (8016b88 <ip4_frag+0x27c>)
 80169d8:	f000 ff42 	bl	8017860 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80169dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169de:	685b      	ldr	r3, [r3, #4]
 80169e0:	2214      	movs	r2, #20
 80169e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80169e4:	4618      	mov	r0, r3
 80169e6:	f000 f9f7 	bl	8016dd8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80169ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ec:	685b      	ldr	r3, [r3, #4]
 80169ee:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80169f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80169f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80169f6:	e064      	b.n	8016ac2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	895a      	ldrh	r2, [r3, #10]
 80169fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80169fe:	1ad3      	subs	r3, r2, r3
 8016a00:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	895b      	ldrh	r3, [r3, #10]
 8016a06:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016a08:	429a      	cmp	r2, r3
 8016a0a:	d906      	bls.n	8016a1a <ip4_frag+0x10e>
 8016a0c:	4b5c      	ldr	r3, [pc, #368]	; (8016b80 <ip4_frag+0x274>)
 8016a0e:	f240 322d 	movw	r2, #813	; 0x32d
 8016a12:	495f      	ldr	r1, [pc, #380]	; (8016b90 <ip4_frag+0x284>)
 8016a14:	485c      	ldr	r0, [pc, #368]	; (8016b88 <ip4_frag+0x27c>)
 8016a16:	f000 ff23 	bl	8017860 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016a1a:	8bfa      	ldrh	r2, [r7, #30]
 8016a1c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016a20:	4293      	cmp	r3, r2
 8016a22:	bf28      	it	cs
 8016a24:	4613      	movcs	r3, r2
 8016a26:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016a2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d105      	bne.n	8016a3e <ip4_frag+0x132>
        poff = 0;
 8016a32:	2300      	movs	r3, #0
 8016a34:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	60fb      	str	r3, [r7, #12]
        continue;
 8016a3c:	e041      	b.n	8016ac2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016a3e:	f7ff ff0d 	bl	801685c <ip_frag_alloc_pbuf_custom_ref>
 8016a42:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016a44:	69bb      	ldr	r3, [r7, #24]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d103      	bne.n	8016a52 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016a4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016a4c:	f7f5 fe8a 	bl	800c764 <pbuf_free>
        goto memerr;
 8016a50:	e08f      	b.n	8016b72 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016a52:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016a58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016a5a:	4413      	add	r3, r2
 8016a5c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016a60:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016a64:	9201      	str	r2, [sp, #4]
 8016a66:	9300      	str	r3, [sp, #0]
 8016a68:	4603      	mov	r3, r0
 8016a6a:	2241      	movs	r2, #65	; 0x41
 8016a6c:	2000      	movs	r0, #0
 8016a6e:	f7f5 fcbf 	bl	800c3f0 <pbuf_alloced_custom>
 8016a72:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016a74:	697b      	ldr	r3, [r7, #20]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d106      	bne.n	8016a88 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016a7a:	69b8      	ldr	r0, [r7, #24]
 8016a7c:	f7ff fef6 	bl	801686c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016a80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016a82:	f7f5 fe6f 	bl	800c764 <pbuf_free>
        goto memerr;
 8016a86:	e074      	b.n	8016b72 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016a88:	68f8      	ldr	r0, [r7, #12]
 8016a8a:	f7f5 ff0b 	bl	800c8a4 <pbuf_ref>
      pcr->original = p;
 8016a8e:	69bb      	ldr	r3, [r7, #24]
 8016a90:	68fa      	ldr	r2, [r7, #12]
 8016a92:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016a94:	69bb      	ldr	r3, [r7, #24]
 8016a96:	4a3f      	ldr	r2, [pc, #252]	; (8016b94 <ip4_frag+0x288>)
 8016a98:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016a9a:	6979      	ldr	r1, [r7, #20]
 8016a9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016a9e:	f7f5 ff23 	bl	800c8e8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016aa2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016aa6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016aaa:	1ad3      	subs	r3, r2, r3
 8016aac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016ab0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d004      	beq.n	8016ac2 <ip4_frag+0x1b6>
        poff = 0;
 8016ab8:	2300      	movs	r3, #0
 8016aba:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016ac2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d196      	bne.n	80169f8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016aca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016acc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016ad0:	4413      	add	r3, r2
 8016ad2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016ad4:	68bb      	ldr	r3, [r7, #8]
 8016ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016ad8:	f1a3 0213 	sub.w	r2, r3, #19
 8016adc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016ae0:	429a      	cmp	r2, r3
 8016ae2:	bfcc      	ite	gt
 8016ae4:	2301      	movgt	r3, #1
 8016ae6:	2300      	movle	r3, #0
 8016ae8:	b2db      	uxtb	r3, r3
 8016aea:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016aec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016af0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016af4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016af6:	6a3b      	ldr	r3, [r7, #32]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d002      	beq.n	8016b02 <ip4_frag+0x1f6>
 8016afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d003      	beq.n	8016b0a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016b02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016b04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016b08:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016b0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	f7f4 fb8d 	bl	800b22c <lwip_htons>
 8016b12:	4603      	mov	r3, r0
 8016b14:	461a      	mov	r2, r3
 8016b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b18:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016b1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016b1c:	3314      	adds	r3, #20
 8016b1e:	b29b      	uxth	r3, r3
 8016b20:	4618      	mov	r0, r3
 8016b22:	f7f4 fb83 	bl	800b22c <lwip_htons>
 8016b26:	4603      	mov	r3, r0
 8016b28:	461a      	mov	r2, r3
 8016b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b2c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b30:	2200      	movs	r2, #0
 8016b32:	729a      	strb	r2, [r3, #10]
 8016b34:	2200      	movs	r2, #0
 8016b36:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016b38:	68bb      	ldr	r3, [r7, #8]
 8016b3a:	695b      	ldr	r3, [r3, #20]
 8016b3c:	687a      	ldr	r2, [r7, #4]
 8016b3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016b40:	68b8      	ldr	r0, [r7, #8]
 8016b42:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016b44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b46:	f7f5 fe0d 	bl	800c764 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016b4a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016b4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016b50:	1ad3      	subs	r3, r2, r3
 8016b52:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016b56:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016b5a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016b5c:	4413      	add	r3, r2
 8016b5e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016b62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	f47f af19 	bne.w	801699e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	e002      	b.n	8016b76 <ip4_frag+0x26a>
      goto memerr;
 8016b70:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016b72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016b76:	4618      	mov	r0, r3
 8016b78:	3748      	adds	r7, #72	; 0x48
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	bd80      	pop	{r7, pc}
 8016b7e:	bf00      	nop
 8016b80:	0801f6f4 	.word	0x0801f6f4
 8016b84:	0801f8d0 	.word	0x0801f8d0
 8016b88:	0801f73c 	.word	0x0801f73c
 8016b8c:	0801f8ec 	.word	0x0801f8ec
 8016b90:	0801f90c 	.word	0x0801f90c
 8016b94:	080168a5 	.word	0x080168a5

08016b98 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016b98:	b580      	push	{r7, lr}
 8016b9a:	b086      	sub	sp, #24
 8016b9c:	af00      	add	r7, sp, #0
 8016b9e:	6078      	str	r0, [r7, #4]
 8016ba0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016ba2:	230e      	movs	r3, #14
 8016ba4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	895b      	ldrh	r3, [r3, #10]
 8016baa:	2b0e      	cmp	r3, #14
 8016bac:	d96e      	bls.n	8016c8c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	7bdb      	ldrb	r3, [r3, #15]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d106      	bne.n	8016bc4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016bb6:	683b      	ldr	r3, [r7, #0]
 8016bb8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016bbc:	3301      	adds	r3, #1
 8016bbe:	b2da      	uxtb	r2, r3
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	685b      	ldr	r3, [r3, #4]
 8016bc8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016bca:	693b      	ldr	r3, [r7, #16]
 8016bcc:	7b1a      	ldrb	r2, [r3, #12]
 8016bce:	7b5b      	ldrb	r3, [r3, #13]
 8016bd0:	021b      	lsls	r3, r3, #8
 8016bd2:	4313      	orrs	r3, r2
 8016bd4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016bd6:	693b      	ldr	r3, [r7, #16]
 8016bd8:	781b      	ldrb	r3, [r3, #0]
 8016bda:	f003 0301 	and.w	r3, r3, #1
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d023      	beq.n	8016c2a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016be2:	693b      	ldr	r3, [r7, #16]
 8016be4:	781b      	ldrb	r3, [r3, #0]
 8016be6:	2b01      	cmp	r3, #1
 8016be8:	d10f      	bne.n	8016c0a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016bea:	693b      	ldr	r3, [r7, #16]
 8016bec:	785b      	ldrb	r3, [r3, #1]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d11b      	bne.n	8016c2a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016bf2:	693b      	ldr	r3, [r7, #16]
 8016bf4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016bf6:	2b5e      	cmp	r3, #94	; 0x5e
 8016bf8:	d117      	bne.n	8016c2a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	7b5b      	ldrb	r3, [r3, #13]
 8016bfe:	f043 0310 	orr.w	r3, r3, #16
 8016c02:	b2da      	uxtb	r2, r3
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	735a      	strb	r2, [r3, #13]
 8016c08:	e00f      	b.n	8016c2a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016c0a:	693b      	ldr	r3, [r7, #16]
 8016c0c:	2206      	movs	r2, #6
 8016c0e:	4928      	ldr	r1, [pc, #160]	; (8016cb0 <ethernet_input+0x118>)
 8016c10:	4618      	mov	r0, r3
 8016c12:	f000 f8d3 	bl	8016dbc <memcmp>
 8016c16:	4603      	mov	r3, r0
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d106      	bne.n	8016c2a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	7b5b      	ldrb	r3, [r3, #13]
 8016c20:	f043 0308 	orr.w	r3, r3, #8
 8016c24:	b2da      	uxtb	r2, r3
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016c2a:	89fb      	ldrh	r3, [r7, #14]
 8016c2c:	2b08      	cmp	r3, #8
 8016c2e:	d003      	beq.n	8016c38 <ethernet_input+0xa0>
 8016c30:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016c34:	d014      	beq.n	8016c60 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016c36:	e032      	b.n	8016c9e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016c38:	683b      	ldr	r3, [r7, #0]
 8016c3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016c3e:	f003 0308 	and.w	r3, r3, #8
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d024      	beq.n	8016c90 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016c46:	8afb      	ldrh	r3, [r7, #22]
 8016c48:	4619      	mov	r1, r3
 8016c4a:	6878      	ldr	r0, [r7, #4]
 8016c4c:	f7f5 fd04 	bl	800c658 <pbuf_remove_header>
 8016c50:	4603      	mov	r3, r0
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d11e      	bne.n	8016c94 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016c56:	6839      	ldr	r1, [r7, #0]
 8016c58:	6878      	ldr	r0, [r7, #4]
 8016c5a:	f7fe ff09 	bl	8015a70 <ip4_input>
      break;
 8016c5e:	e013      	b.n	8016c88 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016c60:	683b      	ldr	r3, [r7, #0]
 8016c62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016c66:	f003 0308 	and.w	r3, r3, #8
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d014      	beq.n	8016c98 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016c6e:	8afb      	ldrh	r3, [r7, #22]
 8016c70:	4619      	mov	r1, r3
 8016c72:	6878      	ldr	r0, [r7, #4]
 8016c74:	f7f5 fcf0 	bl	800c658 <pbuf_remove_header>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d10e      	bne.n	8016c9c <ethernet_input+0x104>
        etharp_input(p, netif);
 8016c7e:	6839      	ldr	r1, [r7, #0]
 8016c80:	6878      	ldr	r0, [r7, #4]
 8016c82:	f7fe f8a5 	bl	8014dd0 <etharp_input>
      break;
 8016c86:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016c88:	2300      	movs	r3, #0
 8016c8a:	e00c      	b.n	8016ca6 <ethernet_input+0x10e>
    goto free_and_return;
 8016c8c:	bf00      	nop
 8016c8e:	e006      	b.n	8016c9e <ethernet_input+0x106>
        goto free_and_return;
 8016c90:	bf00      	nop
 8016c92:	e004      	b.n	8016c9e <ethernet_input+0x106>
        goto free_and_return;
 8016c94:	bf00      	nop
 8016c96:	e002      	b.n	8016c9e <ethernet_input+0x106>
        goto free_and_return;
 8016c98:	bf00      	nop
 8016c9a:	e000      	b.n	8016c9e <ethernet_input+0x106>
        goto free_and_return;
 8016c9c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016c9e:	6878      	ldr	r0, [r7, #4]
 8016ca0:	f7f5 fd60 	bl	800c764 <pbuf_free>
  return ERR_OK;
 8016ca4:	2300      	movs	r3, #0
}
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	3718      	adds	r7, #24
 8016caa:	46bd      	mov	sp, r7
 8016cac:	bd80      	pop	{r7, pc}
 8016cae:	bf00      	nop
 8016cb0:	0801fac0 	.word	0x0801fac0

08016cb4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b086      	sub	sp, #24
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	60f8      	str	r0, [r7, #12]
 8016cbc:	60b9      	str	r1, [r7, #8]
 8016cbe:	607a      	str	r2, [r7, #4]
 8016cc0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016cc2:	8c3b      	ldrh	r3, [r7, #32]
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	f7f4 fab1 	bl	800b22c <lwip_htons>
 8016cca:	4603      	mov	r3, r0
 8016ccc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016cce:	210e      	movs	r1, #14
 8016cd0:	68b8      	ldr	r0, [r7, #8]
 8016cd2:	f7f5 fcb1 	bl	800c638 <pbuf_add_header>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d125      	bne.n	8016d28 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016cdc:	68bb      	ldr	r3, [r7, #8]
 8016cde:	685b      	ldr	r3, [r3, #4]
 8016ce0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016ce2:	693b      	ldr	r3, [r7, #16]
 8016ce4:	8afa      	ldrh	r2, [r7, #22]
 8016ce6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016ce8:	693b      	ldr	r3, [r7, #16]
 8016cea:	2206      	movs	r2, #6
 8016cec:	6839      	ldr	r1, [r7, #0]
 8016cee:	4618      	mov	r0, r3
 8016cf0:	f000 f872 	bl	8016dd8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016cf4:	693b      	ldr	r3, [r7, #16]
 8016cf6:	3306      	adds	r3, #6
 8016cf8:	2206      	movs	r2, #6
 8016cfa:	6879      	ldr	r1, [r7, #4]
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	f000 f86b 	bl	8016dd8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016d08:	2b06      	cmp	r3, #6
 8016d0a:	d006      	beq.n	8016d1a <ethernet_output+0x66>
 8016d0c:	4b0a      	ldr	r3, [pc, #40]	; (8016d38 <ethernet_output+0x84>)
 8016d0e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016d12:	490a      	ldr	r1, [pc, #40]	; (8016d3c <ethernet_output+0x88>)
 8016d14:	480a      	ldr	r0, [pc, #40]	; (8016d40 <ethernet_output+0x8c>)
 8016d16:	f000 fda3 	bl	8017860 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	699b      	ldr	r3, [r3, #24]
 8016d1e:	68b9      	ldr	r1, [r7, #8]
 8016d20:	68f8      	ldr	r0, [r7, #12]
 8016d22:	4798      	blx	r3
 8016d24:	4603      	mov	r3, r0
 8016d26:	e002      	b.n	8016d2e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016d28:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016d2a:	f06f 0301 	mvn.w	r3, #1
}
 8016d2e:	4618      	mov	r0, r3
 8016d30:	3718      	adds	r7, #24
 8016d32:	46bd      	mov	sp, r7
 8016d34:	bd80      	pop	{r7, pc}
 8016d36:	bf00      	nop
 8016d38:	0801f91c 	.word	0x0801f91c
 8016d3c:	0801f954 	.word	0x0801f954
 8016d40:	0801f988 	.word	0x0801f988

08016d44 <atof>:
 8016d44:	2100      	movs	r1, #0
 8016d46:	f001 bc99 	b.w	801867c <strtod>

08016d4a <atoi>:
 8016d4a:	220a      	movs	r2, #10
 8016d4c:	2100      	movs	r1, #0
 8016d4e:	f001 bd25 	b.w	801879c <strtol>
	...

08016d54 <__libc_init_array>:
 8016d54:	b570      	push	{r4, r5, r6, lr}
 8016d56:	4d0d      	ldr	r5, [pc, #52]	; (8016d8c <__libc_init_array+0x38>)
 8016d58:	4c0d      	ldr	r4, [pc, #52]	; (8016d90 <__libc_init_array+0x3c>)
 8016d5a:	1b64      	subs	r4, r4, r5
 8016d5c:	10a4      	asrs	r4, r4, #2
 8016d5e:	2600      	movs	r6, #0
 8016d60:	42a6      	cmp	r6, r4
 8016d62:	d109      	bne.n	8016d78 <__libc_init_array+0x24>
 8016d64:	4d0b      	ldr	r5, [pc, #44]	; (8016d94 <__libc_init_array+0x40>)
 8016d66:	4c0c      	ldr	r4, [pc, #48]	; (8016d98 <__libc_init_array+0x44>)
 8016d68:	f005 faa8 	bl	801c2bc <_init>
 8016d6c:	1b64      	subs	r4, r4, r5
 8016d6e:	10a4      	asrs	r4, r4, #2
 8016d70:	2600      	movs	r6, #0
 8016d72:	42a6      	cmp	r6, r4
 8016d74:	d105      	bne.n	8016d82 <__libc_init_array+0x2e>
 8016d76:	bd70      	pop	{r4, r5, r6, pc}
 8016d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d7c:	4798      	blx	r3
 8016d7e:	3601      	adds	r6, #1
 8016d80:	e7ee      	b.n	8016d60 <__libc_init_array+0xc>
 8016d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d86:	4798      	blx	r3
 8016d88:	3601      	adds	r6, #1
 8016d8a:	e7f2      	b.n	8016d72 <__libc_init_array+0x1e>
 8016d8c:	08020028 	.word	0x08020028
 8016d90:	08020028 	.word	0x08020028
 8016d94:	08020028 	.word	0x08020028
 8016d98:	0802002c 	.word	0x0802002c

08016d9c <malloc>:
 8016d9c:	4b02      	ldr	r3, [pc, #8]	; (8016da8 <malloc+0xc>)
 8016d9e:	4601      	mov	r1, r0
 8016da0:	6818      	ldr	r0, [r3, #0]
 8016da2:	f000 b899 	b.w	8016ed8 <_malloc_r>
 8016da6:	bf00      	nop
 8016da8:	20000074 	.word	0x20000074

08016dac <free>:
 8016dac:	4b02      	ldr	r3, [pc, #8]	; (8016db8 <free+0xc>)
 8016dae:	4601      	mov	r1, r0
 8016db0:	6818      	ldr	r0, [r3, #0]
 8016db2:	f000 b841 	b.w	8016e38 <_free_r>
 8016db6:	bf00      	nop
 8016db8:	20000074 	.word	0x20000074

08016dbc <memcmp>:
 8016dbc:	b530      	push	{r4, r5, lr}
 8016dbe:	3901      	subs	r1, #1
 8016dc0:	2400      	movs	r4, #0
 8016dc2:	42a2      	cmp	r2, r4
 8016dc4:	d101      	bne.n	8016dca <memcmp+0xe>
 8016dc6:	2000      	movs	r0, #0
 8016dc8:	e005      	b.n	8016dd6 <memcmp+0x1a>
 8016dca:	5d03      	ldrb	r3, [r0, r4]
 8016dcc:	3401      	adds	r4, #1
 8016dce:	5d0d      	ldrb	r5, [r1, r4]
 8016dd0:	42ab      	cmp	r3, r5
 8016dd2:	d0f6      	beq.n	8016dc2 <memcmp+0x6>
 8016dd4:	1b58      	subs	r0, r3, r5
 8016dd6:	bd30      	pop	{r4, r5, pc}

08016dd8 <memcpy>:
 8016dd8:	440a      	add	r2, r1
 8016dda:	4291      	cmp	r1, r2
 8016ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8016de0:	d100      	bne.n	8016de4 <memcpy+0xc>
 8016de2:	4770      	bx	lr
 8016de4:	b510      	push	{r4, lr}
 8016de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016dea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016dee:	4291      	cmp	r1, r2
 8016df0:	d1f9      	bne.n	8016de6 <memcpy+0xe>
 8016df2:	bd10      	pop	{r4, pc}

08016df4 <memmove>:
 8016df4:	4288      	cmp	r0, r1
 8016df6:	b510      	push	{r4, lr}
 8016df8:	eb01 0402 	add.w	r4, r1, r2
 8016dfc:	d902      	bls.n	8016e04 <memmove+0x10>
 8016dfe:	4284      	cmp	r4, r0
 8016e00:	4623      	mov	r3, r4
 8016e02:	d807      	bhi.n	8016e14 <memmove+0x20>
 8016e04:	1e43      	subs	r3, r0, #1
 8016e06:	42a1      	cmp	r1, r4
 8016e08:	d008      	beq.n	8016e1c <memmove+0x28>
 8016e0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016e0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016e12:	e7f8      	b.n	8016e06 <memmove+0x12>
 8016e14:	4402      	add	r2, r0
 8016e16:	4601      	mov	r1, r0
 8016e18:	428a      	cmp	r2, r1
 8016e1a:	d100      	bne.n	8016e1e <memmove+0x2a>
 8016e1c:	bd10      	pop	{r4, pc}
 8016e1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016e22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016e26:	e7f7      	b.n	8016e18 <memmove+0x24>

08016e28 <memset>:
 8016e28:	4402      	add	r2, r0
 8016e2a:	4603      	mov	r3, r0
 8016e2c:	4293      	cmp	r3, r2
 8016e2e:	d100      	bne.n	8016e32 <memset+0xa>
 8016e30:	4770      	bx	lr
 8016e32:	f803 1b01 	strb.w	r1, [r3], #1
 8016e36:	e7f9      	b.n	8016e2c <memset+0x4>

08016e38 <_free_r>:
 8016e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016e3a:	2900      	cmp	r1, #0
 8016e3c:	d048      	beq.n	8016ed0 <_free_r+0x98>
 8016e3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016e42:	9001      	str	r0, [sp, #4]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	f1a1 0404 	sub.w	r4, r1, #4
 8016e4a:	bfb8      	it	lt
 8016e4c:	18e4      	addlt	r4, r4, r3
 8016e4e:	f002 ffdd 	bl	8019e0c <__malloc_lock>
 8016e52:	4a20      	ldr	r2, [pc, #128]	; (8016ed4 <_free_r+0x9c>)
 8016e54:	9801      	ldr	r0, [sp, #4]
 8016e56:	6813      	ldr	r3, [r2, #0]
 8016e58:	4615      	mov	r5, r2
 8016e5a:	b933      	cbnz	r3, 8016e6a <_free_r+0x32>
 8016e5c:	6063      	str	r3, [r4, #4]
 8016e5e:	6014      	str	r4, [r2, #0]
 8016e60:	b003      	add	sp, #12
 8016e62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e66:	f002 bfd7 	b.w	8019e18 <__malloc_unlock>
 8016e6a:	42a3      	cmp	r3, r4
 8016e6c:	d90b      	bls.n	8016e86 <_free_r+0x4e>
 8016e6e:	6821      	ldr	r1, [r4, #0]
 8016e70:	1862      	adds	r2, r4, r1
 8016e72:	4293      	cmp	r3, r2
 8016e74:	bf04      	itt	eq
 8016e76:	681a      	ldreq	r2, [r3, #0]
 8016e78:	685b      	ldreq	r3, [r3, #4]
 8016e7a:	6063      	str	r3, [r4, #4]
 8016e7c:	bf04      	itt	eq
 8016e7e:	1852      	addeq	r2, r2, r1
 8016e80:	6022      	streq	r2, [r4, #0]
 8016e82:	602c      	str	r4, [r5, #0]
 8016e84:	e7ec      	b.n	8016e60 <_free_r+0x28>
 8016e86:	461a      	mov	r2, r3
 8016e88:	685b      	ldr	r3, [r3, #4]
 8016e8a:	b10b      	cbz	r3, 8016e90 <_free_r+0x58>
 8016e8c:	42a3      	cmp	r3, r4
 8016e8e:	d9fa      	bls.n	8016e86 <_free_r+0x4e>
 8016e90:	6811      	ldr	r1, [r2, #0]
 8016e92:	1855      	adds	r5, r2, r1
 8016e94:	42a5      	cmp	r5, r4
 8016e96:	d10b      	bne.n	8016eb0 <_free_r+0x78>
 8016e98:	6824      	ldr	r4, [r4, #0]
 8016e9a:	4421      	add	r1, r4
 8016e9c:	1854      	adds	r4, r2, r1
 8016e9e:	42a3      	cmp	r3, r4
 8016ea0:	6011      	str	r1, [r2, #0]
 8016ea2:	d1dd      	bne.n	8016e60 <_free_r+0x28>
 8016ea4:	681c      	ldr	r4, [r3, #0]
 8016ea6:	685b      	ldr	r3, [r3, #4]
 8016ea8:	6053      	str	r3, [r2, #4]
 8016eaa:	4421      	add	r1, r4
 8016eac:	6011      	str	r1, [r2, #0]
 8016eae:	e7d7      	b.n	8016e60 <_free_r+0x28>
 8016eb0:	d902      	bls.n	8016eb8 <_free_r+0x80>
 8016eb2:	230c      	movs	r3, #12
 8016eb4:	6003      	str	r3, [r0, #0]
 8016eb6:	e7d3      	b.n	8016e60 <_free_r+0x28>
 8016eb8:	6825      	ldr	r5, [r4, #0]
 8016eba:	1961      	adds	r1, r4, r5
 8016ebc:	428b      	cmp	r3, r1
 8016ebe:	bf04      	itt	eq
 8016ec0:	6819      	ldreq	r1, [r3, #0]
 8016ec2:	685b      	ldreq	r3, [r3, #4]
 8016ec4:	6063      	str	r3, [r4, #4]
 8016ec6:	bf04      	itt	eq
 8016ec8:	1949      	addeq	r1, r1, r5
 8016eca:	6021      	streq	r1, [r4, #0]
 8016ecc:	6054      	str	r4, [r2, #4]
 8016ece:	e7c7      	b.n	8016e60 <_free_r+0x28>
 8016ed0:	b003      	add	sp, #12
 8016ed2:	bd30      	pop	{r4, r5, pc}
 8016ed4:	200005a0 	.word	0x200005a0

08016ed8 <_malloc_r>:
 8016ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016eda:	1ccd      	adds	r5, r1, #3
 8016edc:	f025 0503 	bic.w	r5, r5, #3
 8016ee0:	3508      	adds	r5, #8
 8016ee2:	2d0c      	cmp	r5, #12
 8016ee4:	bf38      	it	cc
 8016ee6:	250c      	movcc	r5, #12
 8016ee8:	2d00      	cmp	r5, #0
 8016eea:	4606      	mov	r6, r0
 8016eec:	db01      	blt.n	8016ef2 <_malloc_r+0x1a>
 8016eee:	42a9      	cmp	r1, r5
 8016ef0:	d903      	bls.n	8016efa <_malloc_r+0x22>
 8016ef2:	230c      	movs	r3, #12
 8016ef4:	6033      	str	r3, [r6, #0]
 8016ef6:	2000      	movs	r0, #0
 8016ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016efa:	f002 ff87 	bl	8019e0c <__malloc_lock>
 8016efe:	4921      	ldr	r1, [pc, #132]	; (8016f84 <_malloc_r+0xac>)
 8016f00:	680a      	ldr	r2, [r1, #0]
 8016f02:	4614      	mov	r4, r2
 8016f04:	b99c      	cbnz	r4, 8016f2e <_malloc_r+0x56>
 8016f06:	4f20      	ldr	r7, [pc, #128]	; (8016f88 <_malloc_r+0xb0>)
 8016f08:	683b      	ldr	r3, [r7, #0]
 8016f0a:	b923      	cbnz	r3, 8016f16 <_malloc_r+0x3e>
 8016f0c:	4621      	mov	r1, r4
 8016f0e:	4630      	mov	r0, r6
 8016f10:	f000 fcfe 	bl	8017910 <_sbrk_r>
 8016f14:	6038      	str	r0, [r7, #0]
 8016f16:	4629      	mov	r1, r5
 8016f18:	4630      	mov	r0, r6
 8016f1a:	f000 fcf9 	bl	8017910 <_sbrk_r>
 8016f1e:	1c43      	adds	r3, r0, #1
 8016f20:	d123      	bne.n	8016f6a <_malloc_r+0x92>
 8016f22:	230c      	movs	r3, #12
 8016f24:	6033      	str	r3, [r6, #0]
 8016f26:	4630      	mov	r0, r6
 8016f28:	f002 ff76 	bl	8019e18 <__malloc_unlock>
 8016f2c:	e7e3      	b.n	8016ef6 <_malloc_r+0x1e>
 8016f2e:	6823      	ldr	r3, [r4, #0]
 8016f30:	1b5b      	subs	r3, r3, r5
 8016f32:	d417      	bmi.n	8016f64 <_malloc_r+0x8c>
 8016f34:	2b0b      	cmp	r3, #11
 8016f36:	d903      	bls.n	8016f40 <_malloc_r+0x68>
 8016f38:	6023      	str	r3, [r4, #0]
 8016f3a:	441c      	add	r4, r3
 8016f3c:	6025      	str	r5, [r4, #0]
 8016f3e:	e004      	b.n	8016f4a <_malloc_r+0x72>
 8016f40:	6863      	ldr	r3, [r4, #4]
 8016f42:	42a2      	cmp	r2, r4
 8016f44:	bf0c      	ite	eq
 8016f46:	600b      	streq	r3, [r1, #0]
 8016f48:	6053      	strne	r3, [r2, #4]
 8016f4a:	4630      	mov	r0, r6
 8016f4c:	f002 ff64 	bl	8019e18 <__malloc_unlock>
 8016f50:	f104 000b 	add.w	r0, r4, #11
 8016f54:	1d23      	adds	r3, r4, #4
 8016f56:	f020 0007 	bic.w	r0, r0, #7
 8016f5a:	1ac2      	subs	r2, r0, r3
 8016f5c:	d0cc      	beq.n	8016ef8 <_malloc_r+0x20>
 8016f5e:	1a1b      	subs	r3, r3, r0
 8016f60:	50a3      	str	r3, [r4, r2]
 8016f62:	e7c9      	b.n	8016ef8 <_malloc_r+0x20>
 8016f64:	4622      	mov	r2, r4
 8016f66:	6864      	ldr	r4, [r4, #4]
 8016f68:	e7cc      	b.n	8016f04 <_malloc_r+0x2c>
 8016f6a:	1cc4      	adds	r4, r0, #3
 8016f6c:	f024 0403 	bic.w	r4, r4, #3
 8016f70:	42a0      	cmp	r0, r4
 8016f72:	d0e3      	beq.n	8016f3c <_malloc_r+0x64>
 8016f74:	1a21      	subs	r1, r4, r0
 8016f76:	4630      	mov	r0, r6
 8016f78:	f000 fcca 	bl	8017910 <_sbrk_r>
 8016f7c:	3001      	adds	r0, #1
 8016f7e:	d1dd      	bne.n	8016f3c <_malloc_r+0x64>
 8016f80:	e7cf      	b.n	8016f22 <_malloc_r+0x4a>
 8016f82:	bf00      	nop
 8016f84:	200005a0 	.word	0x200005a0
 8016f88:	200005a4 	.word	0x200005a4

08016f8c <__cvt>:
 8016f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016f90:	ec55 4b10 	vmov	r4, r5, d0
 8016f94:	2d00      	cmp	r5, #0
 8016f96:	460e      	mov	r6, r1
 8016f98:	4619      	mov	r1, r3
 8016f9a:	462b      	mov	r3, r5
 8016f9c:	bfbb      	ittet	lt
 8016f9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016fa2:	461d      	movlt	r5, r3
 8016fa4:	2300      	movge	r3, #0
 8016fa6:	232d      	movlt	r3, #45	; 0x2d
 8016fa8:	700b      	strb	r3, [r1, #0]
 8016faa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016fac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016fb0:	4691      	mov	r9, r2
 8016fb2:	f023 0820 	bic.w	r8, r3, #32
 8016fb6:	bfbc      	itt	lt
 8016fb8:	4622      	movlt	r2, r4
 8016fba:	4614      	movlt	r4, r2
 8016fbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016fc0:	d005      	beq.n	8016fce <__cvt+0x42>
 8016fc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016fc6:	d100      	bne.n	8016fca <__cvt+0x3e>
 8016fc8:	3601      	adds	r6, #1
 8016fca:	2102      	movs	r1, #2
 8016fcc:	e000      	b.n	8016fd0 <__cvt+0x44>
 8016fce:	2103      	movs	r1, #3
 8016fd0:	ab03      	add	r3, sp, #12
 8016fd2:	9301      	str	r3, [sp, #4]
 8016fd4:	ab02      	add	r3, sp, #8
 8016fd6:	9300      	str	r3, [sp, #0]
 8016fd8:	ec45 4b10 	vmov	d0, r4, r5
 8016fdc:	4653      	mov	r3, sl
 8016fde:	4632      	mov	r2, r6
 8016fe0:	f001 fc92 	bl	8018908 <_dtoa_r>
 8016fe4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016fe8:	4607      	mov	r7, r0
 8016fea:	d102      	bne.n	8016ff2 <__cvt+0x66>
 8016fec:	f019 0f01 	tst.w	r9, #1
 8016ff0:	d022      	beq.n	8017038 <__cvt+0xac>
 8016ff2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016ff6:	eb07 0906 	add.w	r9, r7, r6
 8016ffa:	d110      	bne.n	801701e <__cvt+0x92>
 8016ffc:	783b      	ldrb	r3, [r7, #0]
 8016ffe:	2b30      	cmp	r3, #48	; 0x30
 8017000:	d10a      	bne.n	8017018 <__cvt+0x8c>
 8017002:	2200      	movs	r2, #0
 8017004:	2300      	movs	r3, #0
 8017006:	4620      	mov	r0, r4
 8017008:	4629      	mov	r1, r5
 801700a:	f7e9 fd6d 	bl	8000ae8 <__aeabi_dcmpeq>
 801700e:	b918      	cbnz	r0, 8017018 <__cvt+0x8c>
 8017010:	f1c6 0601 	rsb	r6, r6, #1
 8017014:	f8ca 6000 	str.w	r6, [sl]
 8017018:	f8da 3000 	ldr.w	r3, [sl]
 801701c:	4499      	add	r9, r3
 801701e:	2200      	movs	r2, #0
 8017020:	2300      	movs	r3, #0
 8017022:	4620      	mov	r0, r4
 8017024:	4629      	mov	r1, r5
 8017026:	f7e9 fd5f 	bl	8000ae8 <__aeabi_dcmpeq>
 801702a:	b108      	cbz	r0, 8017030 <__cvt+0xa4>
 801702c:	f8cd 900c 	str.w	r9, [sp, #12]
 8017030:	2230      	movs	r2, #48	; 0x30
 8017032:	9b03      	ldr	r3, [sp, #12]
 8017034:	454b      	cmp	r3, r9
 8017036:	d307      	bcc.n	8017048 <__cvt+0xbc>
 8017038:	9b03      	ldr	r3, [sp, #12]
 801703a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801703c:	1bdb      	subs	r3, r3, r7
 801703e:	4638      	mov	r0, r7
 8017040:	6013      	str	r3, [r2, #0]
 8017042:	b004      	add	sp, #16
 8017044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017048:	1c59      	adds	r1, r3, #1
 801704a:	9103      	str	r1, [sp, #12]
 801704c:	701a      	strb	r2, [r3, #0]
 801704e:	e7f0      	b.n	8017032 <__cvt+0xa6>

08017050 <__exponent>:
 8017050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017052:	4603      	mov	r3, r0
 8017054:	2900      	cmp	r1, #0
 8017056:	bfb8      	it	lt
 8017058:	4249      	neglt	r1, r1
 801705a:	f803 2b02 	strb.w	r2, [r3], #2
 801705e:	bfb4      	ite	lt
 8017060:	222d      	movlt	r2, #45	; 0x2d
 8017062:	222b      	movge	r2, #43	; 0x2b
 8017064:	2909      	cmp	r1, #9
 8017066:	7042      	strb	r2, [r0, #1]
 8017068:	dd2a      	ble.n	80170c0 <__exponent+0x70>
 801706a:	f10d 0407 	add.w	r4, sp, #7
 801706e:	46a4      	mov	ip, r4
 8017070:	270a      	movs	r7, #10
 8017072:	46a6      	mov	lr, r4
 8017074:	460a      	mov	r2, r1
 8017076:	fb91 f6f7 	sdiv	r6, r1, r7
 801707a:	fb07 1516 	mls	r5, r7, r6, r1
 801707e:	3530      	adds	r5, #48	; 0x30
 8017080:	2a63      	cmp	r2, #99	; 0x63
 8017082:	f104 34ff 	add.w	r4, r4, #4294967295
 8017086:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801708a:	4631      	mov	r1, r6
 801708c:	dcf1      	bgt.n	8017072 <__exponent+0x22>
 801708e:	3130      	adds	r1, #48	; 0x30
 8017090:	f1ae 0502 	sub.w	r5, lr, #2
 8017094:	f804 1c01 	strb.w	r1, [r4, #-1]
 8017098:	1c44      	adds	r4, r0, #1
 801709a:	4629      	mov	r1, r5
 801709c:	4561      	cmp	r1, ip
 801709e:	d30a      	bcc.n	80170b6 <__exponent+0x66>
 80170a0:	f10d 0209 	add.w	r2, sp, #9
 80170a4:	eba2 020e 	sub.w	r2, r2, lr
 80170a8:	4565      	cmp	r5, ip
 80170aa:	bf88      	it	hi
 80170ac:	2200      	movhi	r2, #0
 80170ae:	4413      	add	r3, r2
 80170b0:	1a18      	subs	r0, r3, r0
 80170b2:	b003      	add	sp, #12
 80170b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80170ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80170be:	e7ed      	b.n	801709c <__exponent+0x4c>
 80170c0:	2330      	movs	r3, #48	; 0x30
 80170c2:	3130      	adds	r1, #48	; 0x30
 80170c4:	7083      	strb	r3, [r0, #2]
 80170c6:	70c1      	strb	r1, [r0, #3]
 80170c8:	1d03      	adds	r3, r0, #4
 80170ca:	e7f1      	b.n	80170b0 <__exponent+0x60>

080170cc <_printf_float>:
 80170cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170d0:	ed2d 8b02 	vpush	{d8}
 80170d4:	b08d      	sub	sp, #52	; 0x34
 80170d6:	460c      	mov	r4, r1
 80170d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80170dc:	4616      	mov	r6, r2
 80170de:	461f      	mov	r7, r3
 80170e0:	4605      	mov	r5, r0
 80170e2:	f002 fe79 	bl	8019dd8 <_localeconv_r>
 80170e6:	f8d0 a000 	ldr.w	sl, [r0]
 80170ea:	4650      	mov	r0, sl
 80170ec:	f7e9 f87a 	bl	80001e4 <strlen>
 80170f0:	2300      	movs	r3, #0
 80170f2:	930a      	str	r3, [sp, #40]	; 0x28
 80170f4:	6823      	ldr	r3, [r4, #0]
 80170f6:	9305      	str	r3, [sp, #20]
 80170f8:	f8d8 3000 	ldr.w	r3, [r8]
 80170fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017100:	3307      	adds	r3, #7
 8017102:	f023 0307 	bic.w	r3, r3, #7
 8017106:	f103 0208 	add.w	r2, r3, #8
 801710a:	f8c8 2000 	str.w	r2, [r8]
 801710e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017112:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8017116:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801711a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801711e:	9307      	str	r3, [sp, #28]
 8017120:	f8cd 8018 	str.w	r8, [sp, #24]
 8017124:	ee08 0a10 	vmov	s16, r0
 8017128:	4b9f      	ldr	r3, [pc, #636]	; (80173a8 <_printf_float+0x2dc>)
 801712a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801712e:	f04f 32ff 	mov.w	r2, #4294967295
 8017132:	f7e9 fd0b 	bl	8000b4c <__aeabi_dcmpun>
 8017136:	bb88      	cbnz	r0, 801719c <_printf_float+0xd0>
 8017138:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801713c:	4b9a      	ldr	r3, [pc, #616]	; (80173a8 <_printf_float+0x2dc>)
 801713e:	f04f 32ff 	mov.w	r2, #4294967295
 8017142:	f7e9 fce5 	bl	8000b10 <__aeabi_dcmple>
 8017146:	bb48      	cbnz	r0, 801719c <_printf_float+0xd0>
 8017148:	2200      	movs	r2, #0
 801714a:	2300      	movs	r3, #0
 801714c:	4640      	mov	r0, r8
 801714e:	4649      	mov	r1, r9
 8017150:	f7e9 fcd4 	bl	8000afc <__aeabi_dcmplt>
 8017154:	b110      	cbz	r0, 801715c <_printf_float+0x90>
 8017156:	232d      	movs	r3, #45	; 0x2d
 8017158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801715c:	4b93      	ldr	r3, [pc, #588]	; (80173ac <_printf_float+0x2e0>)
 801715e:	4894      	ldr	r0, [pc, #592]	; (80173b0 <_printf_float+0x2e4>)
 8017160:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8017164:	bf94      	ite	ls
 8017166:	4698      	movls	r8, r3
 8017168:	4680      	movhi	r8, r0
 801716a:	2303      	movs	r3, #3
 801716c:	6123      	str	r3, [r4, #16]
 801716e:	9b05      	ldr	r3, [sp, #20]
 8017170:	f023 0204 	bic.w	r2, r3, #4
 8017174:	6022      	str	r2, [r4, #0]
 8017176:	f04f 0900 	mov.w	r9, #0
 801717a:	9700      	str	r7, [sp, #0]
 801717c:	4633      	mov	r3, r6
 801717e:	aa0b      	add	r2, sp, #44	; 0x2c
 8017180:	4621      	mov	r1, r4
 8017182:	4628      	mov	r0, r5
 8017184:	f000 f9d8 	bl	8017538 <_printf_common>
 8017188:	3001      	adds	r0, #1
 801718a:	f040 8090 	bne.w	80172ae <_printf_float+0x1e2>
 801718e:	f04f 30ff 	mov.w	r0, #4294967295
 8017192:	b00d      	add	sp, #52	; 0x34
 8017194:	ecbd 8b02 	vpop	{d8}
 8017198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801719c:	4642      	mov	r2, r8
 801719e:	464b      	mov	r3, r9
 80171a0:	4640      	mov	r0, r8
 80171a2:	4649      	mov	r1, r9
 80171a4:	f7e9 fcd2 	bl	8000b4c <__aeabi_dcmpun>
 80171a8:	b140      	cbz	r0, 80171bc <_printf_float+0xf0>
 80171aa:	464b      	mov	r3, r9
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	bfbc      	itt	lt
 80171b0:	232d      	movlt	r3, #45	; 0x2d
 80171b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80171b6:	487f      	ldr	r0, [pc, #508]	; (80173b4 <_printf_float+0x2e8>)
 80171b8:	4b7f      	ldr	r3, [pc, #508]	; (80173b8 <_printf_float+0x2ec>)
 80171ba:	e7d1      	b.n	8017160 <_printf_float+0x94>
 80171bc:	6863      	ldr	r3, [r4, #4]
 80171be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80171c2:	9206      	str	r2, [sp, #24]
 80171c4:	1c5a      	adds	r2, r3, #1
 80171c6:	d13f      	bne.n	8017248 <_printf_float+0x17c>
 80171c8:	2306      	movs	r3, #6
 80171ca:	6063      	str	r3, [r4, #4]
 80171cc:	9b05      	ldr	r3, [sp, #20]
 80171ce:	6861      	ldr	r1, [r4, #4]
 80171d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80171d4:	2300      	movs	r3, #0
 80171d6:	9303      	str	r3, [sp, #12]
 80171d8:	ab0a      	add	r3, sp, #40	; 0x28
 80171da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80171de:	ab09      	add	r3, sp, #36	; 0x24
 80171e0:	ec49 8b10 	vmov	d0, r8, r9
 80171e4:	9300      	str	r3, [sp, #0]
 80171e6:	6022      	str	r2, [r4, #0]
 80171e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80171ec:	4628      	mov	r0, r5
 80171ee:	f7ff fecd 	bl	8016f8c <__cvt>
 80171f2:	9b06      	ldr	r3, [sp, #24]
 80171f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80171f6:	2b47      	cmp	r3, #71	; 0x47
 80171f8:	4680      	mov	r8, r0
 80171fa:	d108      	bne.n	801720e <_printf_float+0x142>
 80171fc:	1cc8      	adds	r0, r1, #3
 80171fe:	db02      	blt.n	8017206 <_printf_float+0x13a>
 8017200:	6863      	ldr	r3, [r4, #4]
 8017202:	4299      	cmp	r1, r3
 8017204:	dd41      	ble.n	801728a <_printf_float+0x1be>
 8017206:	f1ab 0b02 	sub.w	fp, fp, #2
 801720a:	fa5f fb8b 	uxtb.w	fp, fp
 801720e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017212:	d820      	bhi.n	8017256 <_printf_float+0x18a>
 8017214:	3901      	subs	r1, #1
 8017216:	465a      	mov	r2, fp
 8017218:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801721c:	9109      	str	r1, [sp, #36]	; 0x24
 801721e:	f7ff ff17 	bl	8017050 <__exponent>
 8017222:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017224:	1813      	adds	r3, r2, r0
 8017226:	2a01      	cmp	r2, #1
 8017228:	4681      	mov	r9, r0
 801722a:	6123      	str	r3, [r4, #16]
 801722c:	dc02      	bgt.n	8017234 <_printf_float+0x168>
 801722e:	6822      	ldr	r2, [r4, #0]
 8017230:	07d2      	lsls	r2, r2, #31
 8017232:	d501      	bpl.n	8017238 <_printf_float+0x16c>
 8017234:	3301      	adds	r3, #1
 8017236:	6123      	str	r3, [r4, #16]
 8017238:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801723c:	2b00      	cmp	r3, #0
 801723e:	d09c      	beq.n	801717a <_printf_float+0xae>
 8017240:	232d      	movs	r3, #45	; 0x2d
 8017242:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017246:	e798      	b.n	801717a <_printf_float+0xae>
 8017248:	9a06      	ldr	r2, [sp, #24]
 801724a:	2a47      	cmp	r2, #71	; 0x47
 801724c:	d1be      	bne.n	80171cc <_printf_float+0x100>
 801724e:	2b00      	cmp	r3, #0
 8017250:	d1bc      	bne.n	80171cc <_printf_float+0x100>
 8017252:	2301      	movs	r3, #1
 8017254:	e7b9      	b.n	80171ca <_printf_float+0xfe>
 8017256:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801725a:	d118      	bne.n	801728e <_printf_float+0x1c2>
 801725c:	2900      	cmp	r1, #0
 801725e:	6863      	ldr	r3, [r4, #4]
 8017260:	dd0b      	ble.n	801727a <_printf_float+0x1ae>
 8017262:	6121      	str	r1, [r4, #16]
 8017264:	b913      	cbnz	r3, 801726c <_printf_float+0x1a0>
 8017266:	6822      	ldr	r2, [r4, #0]
 8017268:	07d0      	lsls	r0, r2, #31
 801726a:	d502      	bpl.n	8017272 <_printf_float+0x1a6>
 801726c:	3301      	adds	r3, #1
 801726e:	440b      	add	r3, r1
 8017270:	6123      	str	r3, [r4, #16]
 8017272:	65a1      	str	r1, [r4, #88]	; 0x58
 8017274:	f04f 0900 	mov.w	r9, #0
 8017278:	e7de      	b.n	8017238 <_printf_float+0x16c>
 801727a:	b913      	cbnz	r3, 8017282 <_printf_float+0x1b6>
 801727c:	6822      	ldr	r2, [r4, #0]
 801727e:	07d2      	lsls	r2, r2, #31
 8017280:	d501      	bpl.n	8017286 <_printf_float+0x1ba>
 8017282:	3302      	adds	r3, #2
 8017284:	e7f4      	b.n	8017270 <_printf_float+0x1a4>
 8017286:	2301      	movs	r3, #1
 8017288:	e7f2      	b.n	8017270 <_printf_float+0x1a4>
 801728a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801728e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017290:	4299      	cmp	r1, r3
 8017292:	db05      	blt.n	80172a0 <_printf_float+0x1d4>
 8017294:	6823      	ldr	r3, [r4, #0]
 8017296:	6121      	str	r1, [r4, #16]
 8017298:	07d8      	lsls	r0, r3, #31
 801729a:	d5ea      	bpl.n	8017272 <_printf_float+0x1a6>
 801729c:	1c4b      	adds	r3, r1, #1
 801729e:	e7e7      	b.n	8017270 <_printf_float+0x1a4>
 80172a0:	2900      	cmp	r1, #0
 80172a2:	bfd4      	ite	le
 80172a4:	f1c1 0202 	rsble	r2, r1, #2
 80172a8:	2201      	movgt	r2, #1
 80172aa:	4413      	add	r3, r2
 80172ac:	e7e0      	b.n	8017270 <_printf_float+0x1a4>
 80172ae:	6823      	ldr	r3, [r4, #0]
 80172b0:	055a      	lsls	r2, r3, #21
 80172b2:	d407      	bmi.n	80172c4 <_printf_float+0x1f8>
 80172b4:	6923      	ldr	r3, [r4, #16]
 80172b6:	4642      	mov	r2, r8
 80172b8:	4631      	mov	r1, r6
 80172ba:	4628      	mov	r0, r5
 80172bc:	47b8      	blx	r7
 80172be:	3001      	adds	r0, #1
 80172c0:	d12c      	bne.n	801731c <_printf_float+0x250>
 80172c2:	e764      	b.n	801718e <_printf_float+0xc2>
 80172c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80172c8:	f240 80e0 	bls.w	801748c <_printf_float+0x3c0>
 80172cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80172d0:	2200      	movs	r2, #0
 80172d2:	2300      	movs	r3, #0
 80172d4:	f7e9 fc08 	bl	8000ae8 <__aeabi_dcmpeq>
 80172d8:	2800      	cmp	r0, #0
 80172da:	d034      	beq.n	8017346 <_printf_float+0x27a>
 80172dc:	4a37      	ldr	r2, [pc, #220]	; (80173bc <_printf_float+0x2f0>)
 80172de:	2301      	movs	r3, #1
 80172e0:	4631      	mov	r1, r6
 80172e2:	4628      	mov	r0, r5
 80172e4:	47b8      	blx	r7
 80172e6:	3001      	adds	r0, #1
 80172e8:	f43f af51 	beq.w	801718e <_printf_float+0xc2>
 80172ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80172f0:	429a      	cmp	r2, r3
 80172f2:	db02      	blt.n	80172fa <_printf_float+0x22e>
 80172f4:	6823      	ldr	r3, [r4, #0]
 80172f6:	07d8      	lsls	r0, r3, #31
 80172f8:	d510      	bpl.n	801731c <_printf_float+0x250>
 80172fa:	ee18 3a10 	vmov	r3, s16
 80172fe:	4652      	mov	r2, sl
 8017300:	4631      	mov	r1, r6
 8017302:	4628      	mov	r0, r5
 8017304:	47b8      	blx	r7
 8017306:	3001      	adds	r0, #1
 8017308:	f43f af41 	beq.w	801718e <_printf_float+0xc2>
 801730c:	f04f 0800 	mov.w	r8, #0
 8017310:	f104 091a 	add.w	r9, r4, #26
 8017314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017316:	3b01      	subs	r3, #1
 8017318:	4543      	cmp	r3, r8
 801731a:	dc09      	bgt.n	8017330 <_printf_float+0x264>
 801731c:	6823      	ldr	r3, [r4, #0]
 801731e:	079b      	lsls	r3, r3, #30
 8017320:	f100 8105 	bmi.w	801752e <_printf_float+0x462>
 8017324:	68e0      	ldr	r0, [r4, #12]
 8017326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017328:	4298      	cmp	r0, r3
 801732a:	bfb8      	it	lt
 801732c:	4618      	movlt	r0, r3
 801732e:	e730      	b.n	8017192 <_printf_float+0xc6>
 8017330:	2301      	movs	r3, #1
 8017332:	464a      	mov	r2, r9
 8017334:	4631      	mov	r1, r6
 8017336:	4628      	mov	r0, r5
 8017338:	47b8      	blx	r7
 801733a:	3001      	adds	r0, #1
 801733c:	f43f af27 	beq.w	801718e <_printf_float+0xc2>
 8017340:	f108 0801 	add.w	r8, r8, #1
 8017344:	e7e6      	b.n	8017314 <_printf_float+0x248>
 8017346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017348:	2b00      	cmp	r3, #0
 801734a:	dc39      	bgt.n	80173c0 <_printf_float+0x2f4>
 801734c:	4a1b      	ldr	r2, [pc, #108]	; (80173bc <_printf_float+0x2f0>)
 801734e:	2301      	movs	r3, #1
 8017350:	4631      	mov	r1, r6
 8017352:	4628      	mov	r0, r5
 8017354:	47b8      	blx	r7
 8017356:	3001      	adds	r0, #1
 8017358:	f43f af19 	beq.w	801718e <_printf_float+0xc2>
 801735c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017360:	4313      	orrs	r3, r2
 8017362:	d102      	bne.n	801736a <_printf_float+0x29e>
 8017364:	6823      	ldr	r3, [r4, #0]
 8017366:	07d9      	lsls	r1, r3, #31
 8017368:	d5d8      	bpl.n	801731c <_printf_float+0x250>
 801736a:	ee18 3a10 	vmov	r3, s16
 801736e:	4652      	mov	r2, sl
 8017370:	4631      	mov	r1, r6
 8017372:	4628      	mov	r0, r5
 8017374:	47b8      	blx	r7
 8017376:	3001      	adds	r0, #1
 8017378:	f43f af09 	beq.w	801718e <_printf_float+0xc2>
 801737c:	f04f 0900 	mov.w	r9, #0
 8017380:	f104 0a1a 	add.w	sl, r4, #26
 8017384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017386:	425b      	negs	r3, r3
 8017388:	454b      	cmp	r3, r9
 801738a:	dc01      	bgt.n	8017390 <_printf_float+0x2c4>
 801738c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801738e:	e792      	b.n	80172b6 <_printf_float+0x1ea>
 8017390:	2301      	movs	r3, #1
 8017392:	4652      	mov	r2, sl
 8017394:	4631      	mov	r1, r6
 8017396:	4628      	mov	r0, r5
 8017398:	47b8      	blx	r7
 801739a:	3001      	adds	r0, #1
 801739c:	f43f aef7 	beq.w	801718e <_printf_float+0xc2>
 80173a0:	f109 0901 	add.w	r9, r9, #1
 80173a4:	e7ee      	b.n	8017384 <_printf_float+0x2b8>
 80173a6:	bf00      	nop
 80173a8:	7fefffff 	.word	0x7fefffff
 80173ac:	0801fbd4 	.word	0x0801fbd4
 80173b0:	0801fbd8 	.word	0x0801fbd8
 80173b4:	0801fbe0 	.word	0x0801fbe0
 80173b8:	0801fbdc 	.word	0x0801fbdc
 80173bc:	0801fbe4 	.word	0x0801fbe4
 80173c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80173c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80173c4:	429a      	cmp	r2, r3
 80173c6:	bfa8      	it	ge
 80173c8:	461a      	movge	r2, r3
 80173ca:	2a00      	cmp	r2, #0
 80173cc:	4691      	mov	r9, r2
 80173ce:	dc37      	bgt.n	8017440 <_printf_float+0x374>
 80173d0:	f04f 0b00 	mov.w	fp, #0
 80173d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80173d8:	f104 021a 	add.w	r2, r4, #26
 80173dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80173de:	9305      	str	r3, [sp, #20]
 80173e0:	eba3 0309 	sub.w	r3, r3, r9
 80173e4:	455b      	cmp	r3, fp
 80173e6:	dc33      	bgt.n	8017450 <_printf_float+0x384>
 80173e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80173ec:	429a      	cmp	r2, r3
 80173ee:	db3b      	blt.n	8017468 <_printf_float+0x39c>
 80173f0:	6823      	ldr	r3, [r4, #0]
 80173f2:	07da      	lsls	r2, r3, #31
 80173f4:	d438      	bmi.n	8017468 <_printf_float+0x39c>
 80173f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80173f8:	9b05      	ldr	r3, [sp, #20]
 80173fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80173fc:	1ad3      	subs	r3, r2, r3
 80173fe:	eba2 0901 	sub.w	r9, r2, r1
 8017402:	4599      	cmp	r9, r3
 8017404:	bfa8      	it	ge
 8017406:	4699      	movge	r9, r3
 8017408:	f1b9 0f00 	cmp.w	r9, #0
 801740c:	dc35      	bgt.n	801747a <_printf_float+0x3ae>
 801740e:	f04f 0800 	mov.w	r8, #0
 8017412:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017416:	f104 0a1a 	add.w	sl, r4, #26
 801741a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801741e:	1a9b      	subs	r3, r3, r2
 8017420:	eba3 0309 	sub.w	r3, r3, r9
 8017424:	4543      	cmp	r3, r8
 8017426:	f77f af79 	ble.w	801731c <_printf_float+0x250>
 801742a:	2301      	movs	r3, #1
 801742c:	4652      	mov	r2, sl
 801742e:	4631      	mov	r1, r6
 8017430:	4628      	mov	r0, r5
 8017432:	47b8      	blx	r7
 8017434:	3001      	adds	r0, #1
 8017436:	f43f aeaa 	beq.w	801718e <_printf_float+0xc2>
 801743a:	f108 0801 	add.w	r8, r8, #1
 801743e:	e7ec      	b.n	801741a <_printf_float+0x34e>
 8017440:	4613      	mov	r3, r2
 8017442:	4631      	mov	r1, r6
 8017444:	4642      	mov	r2, r8
 8017446:	4628      	mov	r0, r5
 8017448:	47b8      	blx	r7
 801744a:	3001      	adds	r0, #1
 801744c:	d1c0      	bne.n	80173d0 <_printf_float+0x304>
 801744e:	e69e      	b.n	801718e <_printf_float+0xc2>
 8017450:	2301      	movs	r3, #1
 8017452:	4631      	mov	r1, r6
 8017454:	4628      	mov	r0, r5
 8017456:	9205      	str	r2, [sp, #20]
 8017458:	47b8      	blx	r7
 801745a:	3001      	adds	r0, #1
 801745c:	f43f ae97 	beq.w	801718e <_printf_float+0xc2>
 8017460:	9a05      	ldr	r2, [sp, #20]
 8017462:	f10b 0b01 	add.w	fp, fp, #1
 8017466:	e7b9      	b.n	80173dc <_printf_float+0x310>
 8017468:	ee18 3a10 	vmov	r3, s16
 801746c:	4652      	mov	r2, sl
 801746e:	4631      	mov	r1, r6
 8017470:	4628      	mov	r0, r5
 8017472:	47b8      	blx	r7
 8017474:	3001      	adds	r0, #1
 8017476:	d1be      	bne.n	80173f6 <_printf_float+0x32a>
 8017478:	e689      	b.n	801718e <_printf_float+0xc2>
 801747a:	9a05      	ldr	r2, [sp, #20]
 801747c:	464b      	mov	r3, r9
 801747e:	4442      	add	r2, r8
 8017480:	4631      	mov	r1, r6
 8017482:	4628      	mov	r0, r5
 8017484:	47b8      	blx	r7
 8017486:	3001      	adds	r0, #1
 8017488:	d1c1      	bne.n	801740e <_printf_float+0x342>
 801748a:	e680      	b.n	801718e <_printf_float+0xc2>
 801748c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801748e:	2a01      	cmp	r2, #1
 8017490:	dc01      	bgt.n	8017496 <_printf_float+0x3ca>
 8017492:	07db      	lsls	r3, r3, #31
 8017494:	d538      	bpl.n	8017508 <_printf_float+0x43c>
 8017496:	2301      	movs	r3, #1
 8017498:	4642      	mov	r2, r8
 801749a:	4631      	mov	r1, r6
 801749c:	4628      	mov	r0, r5
 801749e:	47b8      	blx	r7
 80174a0:	3001      	adds	r0, #1
 80174a2:	f43f ae74 	beq.w	801718e <_printf_float+0xc2>
 80174a6:	ee18 3a10 	vmov	r3, s16
 80174aa:	4652      	mov	r2, sl
 80174ac:	4631      	mov	r1, r6
 80174ae:	4628      	mov	r0, r5
 80174b0:	47b8      	blx	r7
 80174b2:	3001      	adds	r0, #1
 80174b4:	f43f ae6b 	beq.w	801718e <_printf_float+0xc2>
 80174b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80174bc:	2200      	movs	r2, #0
 80174be:	2300      	movs	r3, #0
 80174c0:	f7e9 fb12 	bl	8000ae8 <__aeabi_dcmpeq>
 80174c4:	b9d8      	cbnz	r0, 80174fe <_printf_float+0x432>
 80174c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80174c8:	f108 0201 	add.w	r2, r8, #1
 80174cc:	3b01      	subs	r3, #1
 80174ce:	4631      	mov	r1, r6
 80174d0:	4628      	mov	r0, r5
 80174d2:	47b8      	blx	r7
 80174d4:	3001      	adds	r0, #1
 80174d6:	d10e      	bne.n	80174f6 <_printf_float+0x42a>
 80174d8:	e659      	b.n	801718e <_printf_float+0xc2>
 80174da:	2301      	movs	r3, #1
 80174dc:	4652      	mov	r2, sl
 80174de:	4631      	mov	r1, r6
 80174e0:	4628      	mov	r0, r5
 80174e2:	47b8      	blx	r7
 80174e4:	3001      	adds	r0, #1
 80174e6:	f43f ae52 	beq.w	801718e <_printf_float+0xc2>
 80174ea:	f108 0801 	add.w	r8, r8, #1
 80174ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80174f0:	3b01      	subs	r3, #1
 80174f2:	4543      	cmp	r3, r8
 80174f4:	dcf1      	bgt.n	80174da <_printf_float+0x40e>
 80174f6:	464b      	mov	r3, r9
 80174f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80174fc:	e6dc      	b.n	80172b8 <_printf_float+0x1ec>
 80174fe:	f04f 0800 	mov.w	r8, #0
 8017502:	f104 0a1a 	add.w	sl, r4, #26
 8017506:	e7f2      	b.n	80174ee <_printf_float+0x422>
 8017508:	2301      	movs	r3, #1
 801750a:	4642      	mov	r2, r8
 801750c:	e7df      	b.n	80174ce <_printf_float+0x402>
 801750e:	2301      	movs	r3, #1
 8017510:	464a      	mov	r2, r9
 8017512:	4631      	mov	r1, r6
 8017514:	4628      	mov	r0, r5
 8017516:	47b8      	blx	r7
 8017518:	3001      	adds	r0, #1
 801751a:	f43f ae38 	beq.w	801718e <_printf_float+0xc2>
 801751e:	f108 0801 	add.w	r8, r8, #1
 8017522:	68e3      	ldr	r3, [r4, #12]
 8017524:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017526:	1a5b      	subs	r3, r3, r1
 8017528:	4543      	cmp	r3, r8
 801752a:	dcf0      	bgt.n	801750e <_printf_float+0x442>
 801752c:	e6fa      	b.n	8017324 <_printf_float+0x258>
 801752e:	f04f 0800 	mov.w	r8, #0
 8017532:	f104 0919 	add.w	r9, r4, #25
 8017536:	e7f4      	b.n	8017522 <_printf_float+0x456>

08017538 <_printf_common>:
 8017538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801753c:	4616      	mov	r6, r2
 801753e:	4699      	mov	r9, r3
 8017540:	688a      	ldr	r2, [r1, #8]
 8017542:	690b      	ldr	r3, [r1, #16]
 8017544:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017548:	4293      	cmp	r3, r2
 801754a:	bfb8      	it	lt
 801754c:	4613      	movlt	r3, r2
 801754e:	6033      	str	r3, [r6, #0]
 8017550:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017554:	4607      	mov	r7, r0
 8017556:	460c      	mov	r4, r1
 8017558:	b10a      	cbz	r2, 801755e <_printf_common+0x26>
 801755a:	3301      	adds	r3, #1
 801755c:	6033      	str	r3, [r6, #0]
 801755e:	6823      	ldr	r3, [r4, #0]
 8017560:	0699      	lsls	r1, r3, #26
 8017562:	bf42      	ittt	mi
 8017564:	6833      	ldrmi	r3, [r6, #0]
 8017566:	3302      	addmi	r3, #2
 8017568:	6033      	strmi	r3, [r6, #0]
 801756a:	6825      	ldr	r5, [r4, #0]
 801756c:	f015 0506 	ands.w	r5, r5, #6
 8017570:	d106      	bne.n	8017580 <_printf_common+0x48>
 8017572:	f104 0a19 	add.w	sl, r4, #25
 8017576:	68e3      	ldr	r3, [r4, #12]
 8017578:	6832      	ldr	r2, [r6, #0]
 801757a:	1a9b      	subs	r3, r3, r2
 801757c:	42ab      	cmp	r3, r5
 801757e:	dc26      	bgt.n	80175ce <_printf_common+0x96>
 8017580:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017584:	1e13      	subs	r3, r2, #0
 8017586:	6822      	ldr	r2, [r4, #0]
 8017588:	bf18      	it	ne
 801758a:	2301      	movne	r3, #1
 801758c:	0692      	lsls	r2, r2, #26
 801758e:	d42b      	bmi.n	80175e8 <_printf_common+0xb0>
 8017590:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017594:	4649      	mov	r1, r9
 8017596:	4638      	mov	r0, r7
 8017598:	47c0      	blx	r8
 801759a:	3001      	adds	r0, #1
 801759c:	d01e      	beq.n	80175dc <_printf_common+0xa4>
 801759e:	6823      	ldr	r3, [r4, #0]
 80175a0:	68e5      	ldr	r5, [r4, #12]
 80175a2:	6832      	ldr	r2, [r6, #0]
 80175a4:	f003 0306 	and.w	r3, r3, #6
 80175a8:	2b04      	cmp	r3, #4
 80175aa:	bf08      	it	eq
 80175ac:	1aad      	subeq	r5, r5, r2
 80175ae:	68a3      	ldr	r3, [r4, #8]
 80175b0:	6922      	ldr	r2, [r4, #16]
 80175b2:	bf0c      	ite	eq
 80175b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80175b8:	2500      	movne	r5, #0
 80175ba:	4293      	cmp	r3, r2
 80175bc:	bfc4      	itt	gt
 80175be:	1a9b      	subgt	r3, r3, r2
 80175c0:	18ed      	addgt	r5, r5, r3
 80175c2:	2600      	movs	r6, #0
 80175c4:	341a      	adds	r4, #26
 80175c6:	42b5      	cmp	r5, r6
 80175c8:	d11a      	bne.n	8017600 <_printf_common+0xc8>
 80175ca:	2000      	movs	r0, #0
 80175cc:	e008      	b.n	80175e0 <_printf_common+0xa8>
 80175ce:	2301      	movs	r3, #1
 80175d0:	4652      	mov	r2, sl
 80175d2:	4649      	mov	r1, r9
 80175d4:	4638      	mov	r0, r7
 80175d6:	47c0      	blx	r8
 80175d8:	3001      	adds	r0, #1
 80175da:	d103      	bne.n	80175e4 <_printf_common+0xac>
 80175dc:	f04f 30ff 	mov.w	r0, #4294967295
 80175e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175e4:	3501      	adds	r5, #1
 80175e6:	e7c6      	b.n	8017576 <_printf_common+0x3e>
 80175e8:	18e1      	adds	r1, r4, r3
 80175ea:	1c5a      	adds	r2, r3, #1
 80175ec:	2030      	movs	r0, #48	; 0x30
 80175ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80175f2:	4422      	add	r2, r4
 80175f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80175f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80175fc:	3302      	adds	r3, #2
 80175fe:	e7c7      	b.n	8017590 <_printf_common+0x58>
 8017600:	2301      	movs	r3, #1
 8017602:	4622      	mov	r2, r4
 8017604:	4649      	mov	r1, r9
 8017606:	4638      	mov	r0, r7
 8017608:	47c0      	blx	r8
 801760a:	3001      	adds	r0, #1
 801760c:	d0e6      	beq.n	80175dc <_printf_common+0xa4>
 801760e:	3601      	adds	r6, #1
 8017610:	e7d9      	b.n	80175c6 <_printf_common+0x8e>
	...

08017614 <_printf_i>:
 8017614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017618:	460c      	mov	r4, r1
 801761a:	4691      	mov	r9, r2
 801761c:	7e27      	ldrb	r7, [r4, #24]
 801761e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017620:	2f78      	cmp	r7, #120	; 0x78
 8017622:	4680      	mov	r8, r0
 8017624:	469a      	mov	sl, r3
 8017626:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801762a:	d807      	bhi.n	801763c <_printf_i+0x28>
 801762c:	2f62      	cmp	r7, #98	; 0x62
 801762e:	d80a      	bhi.n	8017646 <_printf_i+0x32>
 8017630:	2f00      	cmp	r7, #0
 8017632:	f000 80d8 	beq.w	80177e6 <_printf_i+0x1d2>
 8017636:	2f58      	cmp	r7, #88	; 0x58
 8017638:	f000 80a3 	beq.w	8017782 <_printf_i+0x16e>
 801763c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017640:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017644:	e03a      	b.n	80176bc <_printf_i+0xa8>
 8017646:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801764a:	2b15      	cmp	r3, #21
 801764c:	d8f6      	bhi.n	801763c <_printf_i+0x28>
 801764e:	a001      	add	r0, pc, #4	; (adr r0, 8017654 <_printf_i+0x40>)
 8017650:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017654:	080176ad 	.word	0x080176ad
 8017658:	080176c1 	.word	0x080176c1
 801765c:	0801763d 	.word	0x0801763d
 8017660:	0801763d 	.word	0x0801763d
 8017664:	0801763d 	.word	0x0801763d
 8017668:	0801763d 	.word	0x0801763d
 801766c:	080176c1 	.word	0x080176c1
 8017670:	0801763d 	.word	0x0801763d
 8017674:	0801763d 	.word	0x0801763d
 8017678:	0801763d 	.word	0x0801763d
 801767c:	0801763d 	.word	0x0801763d
 8017680:	080177cd 	.word	0x080177cd
 8017684:	080176f1 	.word	0x080176f1
 8017688:	080177af 	.word	0x080177af
 801768c:	0801763d 	.word	0x0801763d
 8017690:	0801763d 	.word	0x0801763d
 8017694:	080177ef 	.word	0x080177ef
 8017698:	0801763d 	.word	0x0801763d
 801769c:	080176f1 	.word	0x080176f1
 80176a0:	0801763d 	.word	0x0801763d
 80176a4:	0801763d 	.word	0x0801763d
 80176a8:	080177b7 	.word	0x080177b7
 80176ac:	680b      	ldr	r3, [r1, #0]
 80176ae:	1d1a      	adds	r2, r3, #4
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	600a      	str	r2, [r1, #0]
 80176b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80176b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80176bc:	2301      	movs	r3, #1
 80176be:	e0a3      	b.n	8017808 <_printf_i+0x1f4>
 80176c0:	6825      	ldr	r5, [r4, #0]
 80176c2:	6808      	ldr	r0, [r1, #0]
 80176c4:	062e      	lsls	r6, r5, #24
 80176c6:	f100 0304 	add.w	r3, r0, #4
 80176ca:	d50a      	bpl.n	80176e2 <_printf_i+0xce>
 80176cc:	6805      	ldr	r5, [r0, #0]
 80176ce:	600b      	str	r3, [r1, #0]
 80176d0:	2d00      	cmp	r5, #0
 80176d2:	da03      	bge.n	80176dc <_printf_i+0xc8>
 80176d4:	232d      	movs	r3, #45	; 0x2d
 80176d6:	426d      	negs	r5, r5
 80176d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80176dc:	485e      	ldr	r0, [pc, #376]	; (8017858 <_printf_i+0x244>)
 80176de:	230a      	movs	r3, #10
 80176e0:	e019      	b.n	8017716 <_printf_i+0x102>
 80176e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80176e6:	6805      	ldr	r5, [r0, #0]
 80176e8:	600b      	str	r3, [r1, #0]
 80176ea:	bf18      	it	ne
 80176ec:	b22d      	sxthne	r5, r5
 80176ee:	e7ef      	b.n	80176d0 <_printf_i+0xbc>
 80176f0:	680b      	ldr	r3, [r1, #0]
 80176f2:	6825      	ldr	r5, [r4, #0]
 80176f4:	1d18      	adds	r0, r3, #4
 80176f6:	6008      	str	r0, [r1, #0]
 80176f8:	0628      	lsls	r0, r5, #24
 80176fa:	d501      	bpl.n	8017700 <_printf_i+0xec>
 80176fc:	681d      	ldr	r5, [r3, #0]
 80176fe:	e002      	b.n	8017706 <_printf_i+0xf2>
 8017700:	0669      	lsls	r1, r5, #25
 8017702:	d5fb      	bpl.n	80176fc <_printf_i+0xe8>
 8017704:	881d      	ldrh	r5, [r3, #0]
 8017706:	4854      	ldr	r0, [pc, #336]	; (8017858 <_printf_i+0x244>)
 8017708:	2f6f      	cmp	r7, #111	; 0x6f
 801770a:	bf0c      	ite	eq
 801770c:	2308      	moveq	r3, #8
 801770e:	230a      	movne	r3, #10
 8017710:	2100      	movs	r1, #0
 8017712:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017716:	6866      	ldr	r6, [r4, #4]
 8017718:	60a6      	str	r6, [r4, #8]
 801771a:	2e00      	cmp	r6, #0
 801771c:	bfa2      	ittt	ge
 801771e:	6821      	ldrge	r1, [r4, #0]
 8017720:	f021 0104 	bicge.w	r1, r1, #4
 8017724:	6021      	strge	r1, [r4, #0]
 8017726:	b90d      	cbnz	r5, 801772c <_printf_i+0x118>
 8017728:	2e00      	cmp	r6, #0
 801772a:	d04d      	beq.n	80177c8 <_printf_i+0x1b4>
 801772c:	4616      	mov	r6, r2
 801772e:	fbb5 f1f3 	udiv	r1, r5, r3
 8017732:	fb03 5711 	mls	r7, r3, r1, r5
 8017736:	5dc7      	ldrb	r7, [r0, r7]
 8017738:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801773c:	462f      	mov	r7, r5
 801773e:	42bb      	cmp	r3, r7
 8017740:	460d      	mov	r5, r1
 8017742:	d9f4      	bls.n	801772e <_printf_i+0x11a>
 8017744:	2b08      	cmp	r3, #8
 8017746:	d10b      	bne.n	8017760 <_printf_i+0x14c>
 8017748:	6823      	ldr	r3, [r4, #0]
 801774a:	07df      	lsls	r7, r3, #31
 801774c:	d508      	bpl.n	8017760 <_printf_i+0x14c>
 801774e:	6923      	ldr	r3, [r4, #16]
 8017750:	6861      	ldr	r1, [r4, #4]
 8017752:	4299      	cmp	r1, r3
 8017754:	bfde      	ittt	le
 8017756:	2330      	movle	r3, #48	; 0x30
 8017758:	f806 3c01 	strble.w	r3, [r6, #-1]
 801775c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017760:	1b92      	subs	r2, r2, r6
 8017762:	6122      	str	r2, [r4, #16]
 8017764:	f8cd a000 	str.w	sl, [sp]
 8017768:	464b      	mov	r3, r9
 801776a:	aa03      	add	r2, sp, #12
 801776c:	4621      	mov	r1, r4
 801776e:	4640      	mov	r0, r8
 8017770:	f7ff fee2 	bl	8017538 <_printf_common>
 8017774:	3001      	adds	r0, #1
 8017776:	d14c      	bne.n	8017812 <_printf_i+0x1fe>
 8017778:	f04f 30ff 	mov.w	r0, #4294967295
 801777c:	b004      	add	sp, #16
 801777e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017782:	4835      	ldr	r0, [pc, #212]	; (8017858 <_printf_i+0x244>)
 8017784:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017788:	6823      	ldr	r3, [r4, #0]
 801778a:	680e      	ldr	r6, [r1, #0]
 801778c:	061f      	lsls	r7, r3, #24
 801778e:	f856 5b04 	ldr.w	r5, [r6], #4
 8017792:	600e      	str	r6, [r1, #0]
 8017794:	d514      	bpl.n	80177c0 <_printf_i+0x1ac>
 8017796:	07d9      	lsls	r1, r3, #31
 8017798:	bf44      	itt	mi
 801779a:	f043 0320 	orrmi.w	r3, r3, #32
 801779e:	6023      	strmi	r3, [r4, #0]
 80177a0:	b91d      	cbnz	r5, 80177aa <_printf_i+0x196>
 80177a2:	6823      	ldr	r3, [r4, #0]
 80177a4:	f023 0320 	bic.w	r3, r3, #32
 80177a8:	6023      	str	r3, [r4, #0]
 80177aa:	2310      	movs	r3, #16
 80177ac:	e7b0      	b.n	8017710 <_printf_i+0xfc>
 80177ae:	6823      	ldr	r3, [r4, #0]
 80177b0:	f043 0320 	orr.w	r3, r3, #32
 80177b4:	6023      	str	r3, [r4, #0]
 80177b6:	2378      	movs	r3, #120	; 0x78
 80177b8:	4828      	ldr	r0, [pc, #160]	; (801785c <_printf_i+0x248>)
 80177ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80177be:	e7e3      	b.n	8017788 <_printf_i+0x174>
 80177c0:	065e      	lsls	r6, r3, #25
 80177c2:	bf48      	it	mi
 80177c4:	b2ad      	uxthmi	r5, r5
 80177c6:	e7e6      	b.n	8017796 <_printf_i+0x182>
 80177c8:	4616      	mov	r6, r2
 80177ca:	e7bb      	b.n	8017744 <_printf_i+0x130>
 80177cc:	680b      	ldr	r3, [r1, #0]
 80177ce:	6826      	ldr	r6, [r4, #0]
 80177d0:	6960      	ldr	r0, [r4, #20]
 80177d2:	1d1d      	adds	r5, r3, #4
 80177d4:	600d      	str	r5, [r1, #0]
 80177d6:	0635      	lsls	r5, r6, #24
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	d501      	bpl.n	80177e0 <_printf_i+0x1cc>
 80177dc:	6018      	str	r0, [r3, #0]
 80177de:	e002      	b.n	80177e6 <_printf_i+0x1d2>
 80177e0:	0671      	lsls	r1, r6, #25
 80177e2:	d5fb      	bpl.n	80177dc <_printf_i+0x1c8>
 80177e4:	8018      	strh	r0, [r3, #0]
 80177e6:	2300      	movs	r3, #0
 80177e8:	6123      	str	r3, [r4, #16]
 80177ea:	4616      	mov	r6, r2
 80177ec:	e7ba      	b.n	8017764 <_printf_i+0x150>
 80177ee:	680b      	ldr	r3, [r1, #0]
 80177f0:	1d1a      	adds	r2, r3, #4
 80177f2:	600a      	str	r2, [r1, #0]
 80177f4:	681e      	ldr	r6, [r3, #0]
 80177f6:	6862      	ldr	r2, [r4, #4]
 80177f8:	2100      	movs	r1, #0
 80177fa:	4630      	mov	r0, r6
 80177fc:	f7e8 fd00 	bl	8000200 <memchr>
 8017800:	b108      	cbz	r0, 8017806 <_printf_i+0x1f2>
 8017802:	1b80      	subs	r0, r0, r6
 8017804:	6060      	str	r0, [r4, #4]
 8017806:	6863      	ldr	r3, [r4, #4]
 8017808:	6123      	str	r3, [r4, #16]
 801780a:	2300      	movs	r3, #0
 801780c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017810:	e7a8      	b.n	8017764 <_printf_i+0x150>
 8017812:	6923      	ldr	r3, [r4, #16]
 8017814:	4632      	mov	r2, r6
 8017816:	4649      	mov	r1, r9
 8017818:	4640      	mov	r0, r8
 801781a:	47d0      	blx	sl
 801781c:	3001      	adds	r0, #1
 801781e:	d0ab      	beq.n	8017778 <_printf_i+0x164>
 8017820:	6823      	ldr	r3, [r4, #0]
 8017822:	079b      	lsls	r3, r3, #30
 8017824:	d413      	bmi.n	801784e <_printf_i+0x23a>
 8017826:	68e0      	ldr	r0, [r4, #12]
 8017828:	9b03      	ldr	r3, [sp, #12]
 801782a:	4298      	cmp	r0, r3
 801782c:	bfb8      	it	lt
 801782e:	4618      	movlt	r0, r3
 8017830:	e7a4      	b.n	801777c <_printf_i+0x168>
 8017832:	2301      	movs	r3, #1
 8017834:	4632      	mov	r2, r6
 8017836:	4649      	mov	r1, r9
 8017838:	4640      	mov	r0, r8
 801783a:	47d0      	blx	sl
 801783c:	3001      	adds	r0, #1
 801783e:	d09b      	beq.n	8017778 <_printf_i+0x164>
 8017840:	3501      	adds	r5, #1
 8017842:	68e3      	ldr	r3, [r4, #12]
 8017844:	9903      	ldr	r1, [sp, #12]
 8017846:	1a5b      	subs	r3, r3, r1
 8017848:	42ab      	cmp	r3, r5
 801784a:	dcf2      	bgt.n	8017832 <_printf_i+0x21e>
 801784c:	e7eb      	b.n	8017826 <_printf_i+0x212>
 801784e:	2500      	movs	r5, #0
 8017850:	f104 0619 	add.w	r6, r4, #25
 8017854:	e7f5      	b.n	8017842 <_printf_i+0x22e>
 8017856:	bf00      	nop
 8017858:	0801fbe6 	.word	0x0801fbe6
 801785c:	0801fbf7 	.word	0x0801fbf7

08017860 <iprintf>:
 8017860:	b40f      	push	{r0, r1, r2, r3}
 8017862:	4b0a      	ldr	r3, [pc, #40]	; (801788c <iprintf+0x2c>)
 8017864:	b513      	push	{r0, r1, r4, lr}
 8017866:	681c      	ldr	r4, [r3, #0]
 8017868:	b124      	cbz	r4, 8017874 <iprintf+0x14>
 801786a:	69a3      	ldr	r3, [r4, #24]
 801786c:	b913      	cbnz	r3, 8017874 <iprintf+0x14>
 801786e:	4620      	mov	r0, r4
 8017870:	f001 fe94 	bl	801959c <__sinit>
 8017874:	ab05      	add	r3, sp, #20
 8017876:	9a04      	ldr	r2, [sp, #16]
 8017878:	68a1      	ldr	r1, [r4, #8]
 801787a:	9301      	str	r3, [sp, #4]
 801787c:	4620      	mov	r0, r4
 801787e:	f003 f921 	bl	801aac4 <_vfiprintf_r>
 8017882:	b002      	add	sp, #8
 8017884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017888:	b004      	add	sp, #16
 801788a:	4770      	bx	lr
 801788c:	20000074 	.word	0x20000074

08017890 <rand>:
 8017890:	4b17      	ldr	r3, [pc, #92]	; (80178f0 <rand+0x60>)
 8017892:	b510      	push	{r4, lr}
 8017894:	681c      	ldr	r4, [r3, #0]
 8017896:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017898:	b9b3      	cbnz	r3, 80178c8 <rand+0x38>
 801789a:	2018      	movs	r0, #24
 801789c:	f7ff fa7e 	bl	8016d9c <malloc>
 80178a0:	63a0      	str	r0, [r4, #56]	; 0x38
 80178a2:	b928      	cbnz	r0, 80178b0 <rand+0x20>
 80178a4:	4602      	mov	r2, r0
 80178a6:	4b13      	ldr	r3, [pc, #76]	; (80178f4 <rand+0x64>)
 80178a8:	4813      	ldr	r0, [pc, #76]	; (80178f8 <rand+0x68>)
 80178aa:	214e      	movs	r1, #78	; 0x4e
 80178ac:	f000 ff80 	bl	80187b0 <__assert_func>
 80178b0:	4a12      	ldr	r2, [pc, #72]	; (80178fc <rand+0x6c>)
 80178b2:	4b13      	ldr	r3, [pc, #76]	; (8017900 <rand+0x70>)
 80178b4:	e9c0 2300 	strd	r2, r3, [r0]
 80178b8:	4b12      	ldr	r3, [pc, #72]	; (8017904 <rand+0x74>)
 80178ba:	6083      	str	r3, [r0, #8]
 80178bc:	230b      	movs	r3, #11
 80178be:	8183      	strh	r3, [r0, #12]
 80178c0:	2201      	movs	r2, #1
 80178c2:	2300      	movs	r3, #0
 80178c4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80178c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80178ca:	480f      	ldr	r0, [pc, #60]	; (8017908 <rand+0x78>)
 80178cc:	690a      	ldr	r2, [r1, #16]
 80178ce:	694b      	ldr	r3, [r1, #20]
 80178d0:	4c0e      	ldr	r4, [pc, #56]	; (801790c <rand+0x7c>)
 80178d2:	4350      	muls	r0, r2
 80178d4:	fb04 0003 	mla	r0, r4, r3, r0
 80178d8:	fba2 3404 	umull	r3, r4, r2, r4
 80178dc:	1c5a      	adds	r2, r3, #1
 80178de:	4404      	add	r4, r0
 80178e0:	f144 0000 	adc.w	r0, r4, #0
 80178e4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80178e8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80178ec:	bd10      	pop	{r4, pc}
 80178ee:	bf00      	nop
 80178f0:	20000074 	.word	0x20000074
 80178f4:	0801fc08 	.word	0x0801fc08
 80178f8:	0801fc1f 	.word	0x0801fc1f
 80178fc:	abcd330e 	.word	0xabcd330e
 8017900:	e66d1234 	.word	0xe66d1234
 8017904:	0005deec 	.word	0x0005deec
 8017908:	5851f42d 	.word	0x5851f42d
 801790c:	4c957f2d 	.word	0x4c957f2d

08017910 <_sbrk_r>:
 8017910:	b538      	push	{r3, r4, r5, lr}
 8017912:	4d06      	ldr	r5, [pc, #24]	; (801792c <_sbrk_r+0x1c>)
 8017914:	2300      	movs	r3, #0
 8017916:	4604      	mov	r4, r0
 8017918:	4608      	mov	r0, r1
 801791a:	602b      	str	r3, [r5, #0]
 801791c:	f7ed fa1c 	bl	8004d58 <_sbrk>
 8017920:	1c43      	adds	r3, r0, #1
 8017922:	d102      	bne.n	801792a <_sbrk_r+0x1a>
 8017924:	682b      	ldr	r3, [r5, #0]
 8017926:	b103      	cbz	r3, 801792a <_sbrk_r+0x1a>
 8017928:	6023      	str	r3, [r4, #0]
 801792a:	bd38      	pop	{r3, r4, r5, pc}
 801792c:	20006e80 	.word	0x20006e80

08017930 <sniprintf>:
 8017930:	b40c      	push	{r2, r3}
 8017932:	b530      	push	{r4, r5, lr}
 8017934:	4b17      	ldr	r3, [pc, #92]	; (8017994 <sniprintf+0x64>)
 8017936:	1e0c      	subs	r4, r1, #0
 8017938:	681d      	ldr	r5, [r3, #0]
 801793a:	b09d      	sub	sp, #116	; 0x74
 801793c:	da08      	bge.n	8017950 <sniprintf+0x20>
 801793e:	238b      	movs	r3, #139	; 0x8b
 8017940:	602b      	str	r3, [r5, #0]
 8017942:	f04f 30ff 	mov.w	r0, #4294967295
 8017946:	b01d      	add	sp, #116	; 0x74
 8017948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801794c:	b002      	add	sp, #8
 801794e:	4770      	bx	lr
 8017950:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017954:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017958:	bf14      	ite	ne
 801795a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801795e:	4623      	moveq	r3, r4
 8017960:	9304      	str	r3, [sp, #16]
 8017962:	9307      	str	r3, [sp, #28]
 8017964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017968:	9002      	str	r0, [sp, #8]
 801796a:	9006      	str	r0, [sp, #24]
 801796c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017970:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017972:	ab21      	add	r3, sp, #132	; 0x84
 8017974:	a902      	add	r1, sp, #8
 8017976:	4628      	mov	r0, r5
 8017978:	9301      	str	r3, [sp, #4]
 801797a:	f002 ff79 	bl	801a870 <_svfiprintf_r>
 801797e:	1c43      	adds	r3, r0, #1
 8017980:	bfbc      	itt	lt
 8017982:	238b      	movlt	r3, #139	; 0x8b
 8017984:	602b      	strlt	r3, [r5, #0]
 8017986:	2c00      	cmp	r4, #0
 8017988:	d0dd      	beq.n	8017946 <sniprintf+0x16>
 801798a:	9b02      	ldr	r3, [sp, #8]
 801798c:	2200      	movs	r2, #0
 801798e:	701a      	strb	r2, [r3, #0]
 8017990:	e7d9      	b.n	8017946 <sniprintf+0x16>
 8017992:	bf00      	nop
 8017994:	20000074 	.word	0x20000074

08017998 <siprintf>:
 8017998:	b40e      	push	{r1, r2, r3}
 801799a:	b500      	push	{lr}
 801799c:	b09c      	sub	sp, #112	; 0x70
 801799e:	ab1d      	add	r3, sp, #116	; 0x74
 80179a0:	9002      	str	r0, [sp, #8]
 80179a2:	9006      	str	r0, [sp, #24]
 80179a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80179a8:	4809      	ldr	r0, [pc, #36]	; (80179d0 <siprintf+0x38>)
 80179aa:	9107      	str	r1, [sp, #28]
 80179ac:	9104      	str	r1, [sp, #16]
 80179ae:	4909      	ldr	r1, [pc, #36]	; (80179d4 <siprintf+0x3c>)
 80179b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80179b4:	9105      	str	r1, [sp, #20]
 80179b6:	6800      	ldr	r0, [r0, #0]
 80179b8:	9301      	str	r3, [sp, #4]
 80179ba:	a902      	add	r1, sp, #8
 80179bc:	f002 ff58 	bl	801a870 <_svfiprintf_r>
 80179c0:	9b02      	ldr	r3, [sp, #8]
 80179c2:	2200      	movs	r2, #0
 80179c4:	701a      	strb	r2, [r3, #0]
 80179c6:	b01c      	add	sp, #112	; 0x70
 80179c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80179cc:	b003      	add	sp, #12
 80179ce:	4770      	bx	lr
 80179d0:	20000074 	.word	0x20000074
 80179d4:	ffff0208 	.word	0xffff0208

080179d8 <strncmp>:
 80179d8:	b510      	push	{r4, lr}
 80179da:	b16a      	cbz	r2, 80179f8 <strncmp+0x20>
 80179dc:	3901      	subs	r1, #1
 80179de:	1884      	adds	r4, r0, r2
 80179e0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80179e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80179e8:	4293      	cmp	r3, r2
 80179ea:	d103      	bne.n	80179f4 <strncmp+0x1c>
 80179ec:	42a0      	cmp	r0, r4
 80179ee:	d001      	beq.n	80179f4 <strncmp+0x1c>
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d1f5      	bne.n	80179e0 <strncmp+0x8>
 80179f4:	1a98      	subs	r0, r3, r2
 80179f6:	bd10      	pop	{r4, pc}
 80179f8:	4610      	mov	r0, r2
 80179fa:	e7fc      	b.n	80179f6 <strncmp+0x1e>

080179fc <strstr>:
 80179fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179fe:	780c      	ldrb	r4, [r1, #0]
 8017a00:	b164      	cbz	r4, 8017a1c <strstr+0x20>
 8017a02:	4603      	mov	r3, r0
 8017a04:	781a      	ldrb	r2, [r3, #0]
 8017a06:	4618      	mov	r0, r3
 8017a08:	1c5e      	adds	r6, r3, #1
 8017a0a:	b90a      	cbnz	r2, 8017a10 <strstr+0x14>
 8017a0c:	4610      	mov	r0, r2
 8017a0e:	e005      	b.n	8017a1c <strstr+0x20>
 8017a10:	4294      	cmp	r4, r2
 8017a12:	d108      	bne.n	8017a26 <strstr+0x2a>
 8017a14:	460d      	mov	r5, r1
 8017a16:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8017a1a:	b902      	cbnz	r2, 8017a1e <strstr+0x22>
 8017a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a1e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8017a22:	4297      	cmp	r7, r2
 8017a24:	d0f7      	beq.n	8017a16 <strstr+0x1a>
 8017a26:	4633      	mov	r3, r6
 8017a28:	e7ec      	b.n	8017a04 <strstr+0x8>

08017a2a <sulp>:
 8017a2a:	b570      	push	{r4, r5, r6, lr}
 8017a2c:	4604      	mov	r4, r0
 8017a2e:	460d      	mov	r5, r1
 8017a30:	ec45 4b10 	vmov	d0, r4, r5
 8017a34:	4616      	mov	r6, r2
 8017a36:	f002 fd61 	bl	801a4fc <__ulp>
 8017a3a:	ec51 0b10 	vmov	r0, r1, d0
 8017a3e:	b17e      	cbz	r6, 8017a60 <sulp+0x36>
 8017a40:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017a44:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	dd09      	ble.n	8017a60 <sulp+0x36>
 8017a4c:	051b      	lsls	r3, r3, #20
 8017a4e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8017a52:	2400      	movs	r4, #0
 8017a54:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8017a58:	4622      	mov	r2, r4
 8017a5a:	462b      	mov	r3, r5
 8017a5c:	f7e8 fddc 	bl	8000618 <__aeabi_dmul>
 8017a60:	bd70      	pop	{r4, r5, r6, pc}
 8017a62:	0000      	movs	r0, r0
 8017a64:	0000      	movs	r0, r0
	...

08017a68 <_strtod_l>:
 8017a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a6c:	b0a3      	sub	sp, #140	; 0x8c
 8017a6e:	461f      	mov	r7, r3
 8017a70:	2300      	movs	r3, #0
 8017a72:	931e      	str	r3, [sp, #120]	; 0x78
 8017a74:	4ba4      	ldr	r3, [pc, #656]	; (8017d08 <_strtod_l+0x2a0>)
 8017a76:	9219      	str	r2, [sp, #100]	; 0x64
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	9307      	str	r3, [sp, #28]
 8017a7c:	4604      	mov	r4, r0
 8017a7e:	4618      	mov	r0, r3
 8017a80:	4688      	mov	r8, r1
 8017a82:	f7e8 fbaf 	bl	80001e4 <strlen>
 8017a86:	f04f 0a00 	mov.w	sl, #0
 8017a8a:	4605      	mov	r5, r0
 8017a8c:	f04f 0b00 	mov.w	fp, #0
 8017a90:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8017a94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017a96:	781a      	ldrb	r2, [r3, #0]
 8017a98:	2a2b      	cmp	r2, #43	; 0x2b
 8017a9a:	d04c      	beq.n	8017b36 <_strtod_l+0xce>
 8017a9c:	d839      	bhi.n	8017b12 <_strtod_l+0xaa>
 8017a9e:	2a0d      	cmp	r2, #13
 8017aa0:	d832      	bhi.n	8017b08 <_strtod_l+0xa0>
 8017aa2:	2a08      	cmp	r2, #8
 8017aa4:	d832      	bhi.n	8017b0c <_strtod_l+0xa4>
 8017aa6:	2a00      	cmp	r2, #0
 8017aa8:	d03c      	beq.n	8017b24 <_strtod_l+0xbc>
 8017aaa:	2300      	movs	r3, #0
 8017aac:	930e      	str	r3, [sp, #56]	; 0x38
 8017aae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8017ab0:	7833      	ldrb	r3, [r6, #0]
 8017ab2:	2b30      	cmp	r3, #48	; 0x30
 8017ab4:	f040 80b4 	bne.w	8017c20 <_strtod_l+0x1b8>
 8017ab8:	7873      	ldrb	r3, [r6, #1]
 8017aba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017abe:	2b58      	cmp	r3, #88	; 0x58
 8017ac0:	d16c      	bne.n	8017b9c <_strtod_l+0x134>
 8017ac2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ac4:	9301      	str	r3, [sp, #4]
 8017ac6:	ab1e      	add	r3, sp, #120	; 0x78
 8017ac8:	9702      	str	r7, [sp, #8]
 8017aca:	9300      	str	r3, [sp, #0]
 8017acc:	4a8f      	ldr	r2, [pc, #572]	; (8017d0c <_strtod_l+0x2a4>)
 8017ace:	ab1f      	add	r3, sp, #124	; 0x7c
 8017ad0:	a91d      	add	r1, sp, #116	; 0x74
 8017ad2:	4620      	mov	r0, r4
 8017ad4:	f001 fe78 	bl	80197c8 <__gethex>
 8017ad8:	f010 0707 	ands.w	r7, r0, #7
 8017adc:	4605      	mov	r5, r0
 8017ade:	d005      	beq.n	8017aec <_strtod_l+0x84>
 8017ae0:	2f06      	cmp	r7, #6
 8017ae2:	d12a      	bne.n	8017b3a <_strtod_l+0xd2>
 8017ae4:	3601      	adds	r6, #1
 8017ae6:	2300      	movs	r3, #0
 8017ae8:	961d      	str	r6, [sp, #116]	; 0x74
 8017aea:	930e      	str	r3, [sp, #56]	; 0x38
 8017aec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	f040 8596 	bne.w	8018620 <_strtod_l+0xbb8>
 8017af4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017af6:	b1db      	cbz	r3, 8017b30 <_strtod_l+0xc8>
 8017af8:	4652      	mov	r2, sl
 8017afa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8017afe:	ec43 2b10 	vmov	d0, r2, r3
 8017b02:	b023      	add	sp, #140	; 0x8c
 8017b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b08:	2a20      	cmp	r2, #32
 8017b0a:	d1ce      	bne.n	8017aaa <_strtod_l+0x42>
 8017b0c:	3301      	adds	r3, #1
 8017b0e:	931d      	str	r3, [sp, #116]	; 0x74
 8017b10:	e7c0      	b.n	8017a94 <_strtod_l+0x2c>
 8017b12:	2a2d      	cmp	r2, #45	; 0x2d
 8017b14:	d1c9      	bne.n	8017aaa <_strtod_l+0x42>
 8017b16:	2201      	movs	r2, #1
 8017b18:	920e      	str	r2, [sp, #56]	; 0x38
 8017b1a:	1c5a      	adds	r2, r3, #1
 8017b1c:	921d      	str	r2, [sp, #116]	; 0x74
 8017b1e:	785b      	ldrb	r3, [r3, #1]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d1c4      	bne.n	8017aae <_strtod_l+0x46>
 8017b24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017b26:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	f040 8576 	bne.w	801861c <_strtod_l+0xbb4>
 8017b30:	4652      	mov	r2, sl
 8017b32:	465b      	mov	r3, fp
 8017b34:	e7e3      	b.n	8017afe <_strtod_l+0x96>
 8017b36:	2200      	movs	r2, #0
 8017b38:	e7ee      	b.n	8017b18 <_strtod_l+0xb0>
 8017b3a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017b3c:	b13a      	cbz	r2, 8017b4e <_strtod_l+0xe6>
 8017b3e:	2135      	movs	r1, #53	; 0x35
 8017b40:	a820      	add	r0, sp, #128	; 0x80
 8017b42:	f002 fde6 	bl	801a712 <__copybits>
 8017b46:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017b48:	4620      	mov	r0, r4
 8017b4a:	f002 f9ab 	bl	8019ea4 <_Bfree>
 8017b4e:	3f01      	subs	r7, #1
 8017b50:	2f05      	cmp	r7, #5
 8017b52:	d807      	bhi.n	8017b64 <_strtod_l+0xfc>
 8017b54:	e8df f007 	tbb	[pc, r7]
 8017b58:	1d180b0e 	.word	0x1d180b0e
 8017b5c:	030e      	.short	0x030e
 8017b5e:	f04f 0b00 	mov.w	fp, #0
 8017b62:	46da      	mov	sl, fp
 8017b64:	0728      	lsls	r0, r5, #28
 8017b66:	d5c1      	bpl.n	8017aec <_strtod_l+0x84>
 8017b68:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8017b6c:	e7be      	b.n	8017aec <_strtod_l+0x84>
 8017b6e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8017b72:	e7f7      	b.n	8017b64 <_strtod_l+0xfc>
 8017b74:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8017b78:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017b7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017b7e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017b82:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8017b86:	e7ed      	b.n	8017b64 <_strtod_l+0xfc>
 8017b88:	f8df b184 	ldr.w	fp, [pc, #388]	; 8017d10 <_strtod_l+0x2a8>
 8017b8c:	f04f 0a00 	mov.w	sl, #0
 8017b90:	e7e8      	b.n	8017b64 <_strtod_l+0xfc>
 8017b92:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8017b96:	f04f 3aff 	mov.w	sl, #4294967295
 8017b9a:	e7e3      	b.n	8017b64 <_strtod_l+0xfc>
 8017b9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017b9e:	1c5a      	adds	r2, r3, #1
 8017ba0:	921d      	str	r2, [sp, #116]	; 0x74
 8017ba2:	785b      	ldrb	r3, [r3, #1]
 8017ba4:	2b30      	cmp	r3, #48	; 0x30
 8017ba6:	d0f9      	beq.n	8017b9c <_strtod_l+0x134>
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d09f      	beq.n	8017aec <_strtod_l+0x84>
 8017bac:	2301      	movs	r3, #1
 8017bae:	f04f 0900 	mov.w	r9, #0
 8017bb2:	9304      	str	r3, [sp, #16]
 8017bb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017bb6:	930a      	str	r3, [sp, #40]	; 0x28
 8017bb8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017bbc:	464f      	mov	r7, r9
 8017bbe:	220a      	movs	r2, #10
 8017bc0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8017bc2:	7806      	ldrb	r6, [r0, #0]
 8017bc4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8017bc8:	b2d9      	uxtb	r1, r3
 8017bca:	2909      	cmp	r1, #9
 8017bcc:	d92a      	bls.n	8017c24 <_strtod_l+0x1bc>
 8017bce:	9907      	ldr	r1, [sp, #28]
 8017bd0:	462a      	mov	r2, r5
 8017bd2:	f7ff ff01 	bl	80179d8 <strncmp>
 8017bd6:	b398      	cbz	r0, 8017c40 <_strtod_l+0x1d8>
 8017bd8:	2000      	movs	r0, #0
 8017bda:	4633      	mov	r3, r6
 8017bdc:	463d      	mov	r5, r7
 8017bde:	9007      	str	r0, [sp, #28]
 8017be0:	4602      	mov	r2, r0
 8017be2:	2b65      	cmp	r3, #101	; 0x65
 8017be4:	d001      	beq.n	8017bea <_strtod_l+0x182>
 8017be6:	2b45      	cmp	r3, #69	; 0x45
 8017be8:	d118      	bne.n	8017c1c <_strtod_l+0x1b4>
 8017bea:	b91d      	cbnz	r5, 8017bf4 <_strtod_l+0x18c>
 8017bec:	9b04      	ldr	r3, [sp, #16]
 8017bee:	4303      	orrs	r3, r0
 8017bf0:	d098      	beq.n	8017b24 <_strtod_l+0xbc>
 8017bf2:	2500      	movs	r5, #0
 8017bf4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8017bf8:	f108 0301 	add.w	r3, r8, #1
 8017bfc:	931d      	str	r3, [sp, #116]	; 0x74
 8017bfe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017c02:	2b2b      	cmp	r3, #43	; 0x2b
 8017c04:	d075      	beq.n	8017cf2 <_strtod_l+0x28a>
 8017c06:	2b2d      	cmp	r3, #45	; 0x2d
 8017c08:	d07b      	beq.n	8017d02 <_strtod_l+0x29a>
 8017c0a:	f04f 0c00 	mov.w	ip, #0
 8017c0e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8017c12:	2909      	cmp	r1, #9
 8017c14:	f240 8082 	bls.w	8017d1c <_strtod_l+0x2b4>
 8017c18:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8017c1c:	2600      	movs	r6, #0
 8017c1e:	e09d      	b.n	8017d5c <_strtod_l+0x2f4>
 8017c20:	2300      	movs	r3, #0
 8017c22:	e7c4      	b.n	8017bae <_strtod_l+0x146>
 8017c24:	2f08      	cmp	r7, #8
 8017c26:	bfd8      	it	le
 8017c28:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8017c2a:	f100 0001 	add.w	r0, r0, #1
 8017c2e:	bfda      	itte	le
 8017c30:	fb02 3301 	mlale	r3, r2, r1, r3
 8017c34:	9309      	strle	r3, [sp, #36]	; 0x24
 8017c36:	fb02 3909 	mlagt	r9, r2, r9, r3
 8017c3a:	3701      	adds	r7, #1
 8017c3c:	901d      	str	r0, [sp, #116]	; 0x74
 8017c3e:	e7bf      	b.n	8017bc0 <_strtod_l+0x158>
 8017c40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017c42:	195a      	adds	r2, r3, r5
 8017c44:	921d      	str	r2, [sp, #116]	; 0x74
 8017c46:	5d5b      	ldrb	r3, [r3, r5]
 8017c48:	2f00      	cmp	r7, #0
 8017c4a:	d037      	beq.n	8017cbc <_strtod_l+0x254>
 8017c4c:	9007      	str	r0, [sp, #28]
 8017c4e:	463d      	mov	r5, r7
 8017c50:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8017c54:	2a09      	cmp	r2, #9
 8017c56:	d912      	bls.n	8017c7e <_strtod_l+0x216>
 8017c58:	2201      	movs	r2, #1
 8017c5a:	e7c2      	b.n	8017be2 <_strtod_l+0x17a>
 8017c5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017c5e:	1c5a      	adds	r2, r3, #1
 8017c60:	921d      	str	r2, [sp, #116]	; 0x74
 8017c62:	785b      	ldrb	r3, [r3, #1]
 8017c64:	3001      	adds	r0, #1
 8017c66:	2b30      	cmp	r3, #48	; 0x30
 8017c68:	d0f8      	beq.n	8017c5c <_strtod_l+0x1f4>
 8017c6a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8017c6e:	2a08      	cmp	r2, #8
 8017c70:	f200 84db 	bhi.w	801862a <_strtod_l+0xbc2>
 8017c74:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017c76:	9007      	str	r0, [sp, #28]
 8017c78:	2000      	movs	r0, #0
 8017c7a:	920a      	str	r2, [sp, #40]	; 0x28
 8017c7c:	4605      	mov	r5, r0
 8017c7e:	3b30      	subs	r3, #48	; 0x30
 8017c80:	f100 0201 	add.w	r2, r0, #1
 8017c84:	d014      	beq.n	8017cb0 <_strtod_l+0x248>
 8017c86:	9907      	ldr	r1, [sp, #28]
 8017c88:	4411      	add	r1, r2
 8017c8a:	9107      	str	r1, [sp, #28]
 8017c8c:	462a      	mov	r2, r5
 8017c8e:	eb00 0e05 	add.w	lr, r0, r5
 8017c92:	210a      	movs	r1, #10
 8017c94:	4572      	cmp	r2, lr
 8017c96:	d113      	bne.n	8017cc0 <_strtod_l+0x258>
 8017c98:	182a      	adds	r2, r5, r0
 8017c9a:	2a08      	cmp	r2, #8
 8017c9c:	f105 0501 	add.w	r5, r5, #1
 8017ca0:	4405      	add	r5, r0
 8017ca2:	dc1c      	bgt.n	8017cde <_strtod_l+0x276>
 8017ca4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017ca6:	220a      	movs	r2, #10
 8017ca8:	fb02 3301 	mla	r3, r2, r1, r3
 8017cac:	9309      	str	r3, [sp, #36]	; 0x24
 8017cae:	2200      	movs	r2, #0
 8017cb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017cb2:	1c59      	adds	r1, r3, #1
 8017cb4:	911d      	str	r1, [sp, #116]	; 0x74
 8017cb6:	785b      	ldrb	r3, [r3, #1]
 8017cb8:	4610      	mov	r0, r2
 8017cba:	e7c9      	b.n	8017c50 <_strtod_l+0x1e8>
 8017cbc:	4638      	mov	r0, r7
 8017cbe:	e7d2      	b.n	8017c66 <_strtod_l+0x1fe>
 8017cc0:	2a08      	cmp	r2, #8
 8017cc2:	dc04      	bgt.n	8017cce <_strtod_l+0x266>
 8017cc4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017cc6:	434e      	muls	r6, r1
 8017cc8:	9609      	str	r6, [sp, #36]	; 0x24
 8017cca:	3201      	adds	r2, #1
 8017ccc:	e7e2      	b.n	8017c94 <_strtod_l+0x22c>
 8017cce:	f102 0c01 	add.w	ip, r2, #1
 8017cd2:	f1bc 0f10 	cmp.w	ip, #16
 8017cd6:	bfd8      	it	le
 8017cd8:	fb01 f909 	mulle.w	r9, r1, r9
 8017cdc:	e7f5      	b.n	8017cca <_strtod_l+0x262>
 8017cde:	2d10      	cmp	r5, #16
 8017ce0:	bfdc      	itt	le
 8017ce2:	220a      	movle	r2, #10
 8017ce4:	fb02 3909 	mlale	r9, r2, r9, r3
 8017ce8:	e7e1      	b.n	8017cae <_strtod_l+0x246>
 8017cea:	2300      	movs	r3, #0
 8017cec:	9307      	str	r3, [sp, #28]
 8017cee:	2201      	movs	r2, #1
 8017cf0:	e77c      	b.n	8017bec <_strtod_l+0x184>
 8017cf2:	f04f 0c00 	mov.w	ip, #0
 8017cf6:	f108 0302 	add.w	r3, r8, #2
 8017cfa:	931d      	str	r3, [sp, #116]	; 0x74
 8017cfc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8017d00:	e785      	b.n	8017c0e <_strtod_l+0x1a6>
 8017d02:	f04f 0c01 	mov.w	ip, #1
 8017d06:	e7f6      	b.n	8017cf6 <_strtod_l+0x28e>
 8017d08:	0801fe58 	.word	0x0801fe58
 8017d0c:	0801fc80 	.word	0x0801fc80
 8017d10:	7ff00000 	.word	0x7ff00000
 8017d14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017d16:	1c59      	adds	r1, r3, #1
 8017d18:	911d      	str	r1, [sp, #116]	; 0x74
 8017d1a:	785b      	ldrb	r3, [r3, #1]
 8017d1c:	2b30      	cmp	r3, #48	; 0x30
 8017d1e:	d0f9      	beq.n	8017d14 <_strtod_l+0x2ac>
 8017d20:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8017d24:	2908      	cmp	r1, #8
 8017d26:	f63f af79 	bhi.w	8017c1c <_strtod_l+0x1b4>
 8017d2a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8017d2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017d30:	9308      	str	r3, [sp, #32]
 8017d32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017d34:	1c59      	adds	r1, r3, #1
 8017d36:	911d      	str	r1, [sp, #116]	; 0x74
 8017d38:	785b      	ldrb	r3, [r3, #1]
 8017d3a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8017d3e:	2e09      	cmp	r6, #9
 8017d40:	d937      	bls.n	8017db2 <_strtod_l+0x34a>
 8017d42:	9e08      	ldr	r6, [sp, #32]
 8017d44:	1b89      	subs	r1, r1, r6
 8017d46:	2908      	cmp	r1, #8
 8017d48:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8017d4c:	dc02      	bgt.n	8017d54 <_strtod_l+0x2ec>
 8017d4e:	4576      	cmp	r6, lr
 8017d50:	bfa8      	it	ge
 8017d52:	4676      	movge	r6, lr
 8017d54:	f1bc 0f00 	cmp.w	ip, #0
 8017d58:	d000      	beq.n	8017d5c <_strtod_l+0x2f4>
 8017d5a:	4276      	negs	r6, r6
 8017d5c:	2d00      	cmp	r5, #0
 8017d5e:	d14f      	bne.n	8017e00 <_strtod_l+0x398>
 8017d60:	9904      	ldr	r1, [sp, #16]
 8017d62:	4301      	orrs	r1, r0
 8017d64:	f47f aec2 	bne.w	8017aec <_strtod_l+0x84>
 8017d68:	2a00      	cmp	r2, #0
 8017d6a:	f47f aedb 	bne.w	8017b24 <_strtod_l+0xbc>
 8017d6e:	2b69      	cmp	r3, #105	; 0x69
 8017d70:	d027      	beq.n	8017dc2 <_strtod_l+0x35a>
 8017d72:	dc24      	bgt.n	8017dbe <_strtod_l+0x356>
 8017d74:	2b49      	cmp	r3, #73	; 0x49
 8017d76:	d024      	beq.n	8017dc2 <_strtod_l+0x35a>
 8017d78:	2b4e      	cmp	r3, #78	; 0x4e
 8017d7a:	f47f aed3 	bne.w	8017b24 <_strtod_l+0xbc>
 8017d7e:	499e      	ldr	r1, [pc, #632]	; (8017ff8 <_strtod_l+0x590>)
 8017d80:	a81d      	add	r0, sp, #116	; 0x74
 8017d82:	f001 ff79 	bl	8019c78 <__match>
 8017d86:	2800      	cmp	r0, #0
 8017d88:	f43f aecc 	beq.w	8017b24 <_strtod_l+0xbc>
 8017d8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017d8e:	781b      	ldrb	r3, [r3, #0]
 8017d90:	2b28      	cmp	r3, #40	; 0x28
 8017d92:	d12d      	bne.n	8017df0 <_strtod_l+0x388>
 8017d94:	4999      	ldr	r1, [pc, #612]	; (8017ffc <_strtod_l+0x594>)
 8017d96:	aa20      	add	r2, sp, #128	; 0x80
 8017d98:	a81d      	add	r0, sp, #116	; 0x74
 8017d9a:	f001 ff81 	bl	8019ca0 <__hexnan>
 8017d9e:	2805      	cmp	r0, #5
 8017da0:	d126      	bne.n	8017df0 <_strtod_l+0x388>
 8017da2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017da4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8017da8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8017dac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017db0:	e69c      	b.n	8017aec <_strtod_l+0x84>
 8017db2:	210a      	movs	r1, #10
 8017db4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8017db8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8017dbc:	e7b9      	b.n	8017d32 <_strtod_l+0x2ca>
 8017dbe:	2b6e      	cmp	r3, #110	; 0x6e
 8017dc0:	e7db      	b.n	8017d7a <_strtod_l+0x312>
 8017dc2:	498f      	ldr	r1, [pc, #572]	; (8018000 <_strtod_l+0x598>)
 8017dc4:	a81d      	add	r0, sp, #116	; 0x74
 8017dc6:	f001 ff57 	bl	8019c78 <__match>
 8017dca:	2800      	cmp	r0, #0
 8017dcc:	f43f aeaa 	beq.w	8017b24 <_strtod_l+0xbc>
 8017dd0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017dd2:	498c      	ldr	r1, [pc, #560]	; (8018004 <_strtod_l+0x59c>)
 8017dd4:	3b01      	subs	r3, #1
 8017dd6:	a81d      	add	r0, sp, #116	; 0x74
 8017dd8:	931d      	str	r3, [sp, #116]	; 0x74
 8017dda:	f001 ff4d 	bl	8019c78 <__match>
 8017dde:	b910      	cbnz	r0, 8017de6 <_strtod_l+0x37e>
 8017de0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017de2:	3301      	adds	r3, #1
 8017de4:	931d      	str	r3, [sp, #116]	; 0x74
 8017de6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8018014 <_strtod_l+0x5ac>
 8017dea:	f04f 0a00 	mov.w	sl, #0
 8017dee:	e67d      	b.n	8017aec <_strtod_l+0x84>
 8017df0:	4885      	ldr	r0, [pc, #532]	; (8018008 <_strtod_l+0x5a0>)
 8017df2:	f002 ff99 	bl	801ad28 <nan>
 8017df6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8017dfa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8017dfe:	e675      	b.n	8017aec <_strtod_l+0x84>
 8017e00:	9b07      	ldr	r3, [sp, #28]
 8017e02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e04:	1af3      	subs	r3, r6, r3
 8017e06:	2f00      	cmp	r7, #0
 8017e08:	bf08      	it	eq
 8017e0a:	462f      	moveq	r7, r5
 8017e0c:	2d10      	cmp	r5, #16
 8017e0e:	9308      	str	r3, [sp, #32]
 8017e10:	46a8      	mov	r8, r5
 8017e12:	bfa8      	it	ge
 8017e14:	f04f 0810 	movge.w	r8, #16
 8017e18:	f7e8 fb84 	bl	8000524 <__aeabi_ui2d>
 8017e1c:	2d09      	cmp	r5, #9
 8017e1e:	4682      	mov	sl, r0
 8017e20:	468b      	mov	fp, r1
 8017e22:	dd13      	ble.n	8017e4c <_strtod_l+0x3e4>
 8017e24:	4b79      	ldr	r3, [pc, #484]	; (801800c <_strtod_l+0x5a4>)
 8017e26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8017e2a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8017e2e:	f7e8 fbf3 	bl	8000618 <__aeabi_dmul>
 8017e32:	4682      	mov	sl, r0
 8017e34:	4648      	mov	r0, r9
 8017e36:	468b      	mov	fp, r1
 8017e38:	f7e8 fb74 	bl	8000524 <__aeabi_ui2d>
 8017e3c:	4602      	mov	r2, r0
 8017e3e:	460b      	mov	r3, r1
 8017e40:	4650      	mov	r0, sl
 8017e42:	4659      	mov	r1, fp
 8017e44:	f7e8 fa32 	bl	80002ac <__adddf3>
 8017e48:	4682      	mov	sl, r0
 8017e4a:	468b      	mov	fp, r1
 8017e4c:	2d0f      	cmp	r5, #15
 8017e4e:	dc38      	bgt.n	8017ec2 <_strtod_l+0x45a>
 8017e50:	9b08      	ldr	r3, [sp, #32]
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	f43f ae4a 	beq.w	8017aec <_strtod_l+0x84>
 8017e58:	dd24      	ble.n	8017ea4 <_strtod_l+0x43c>
 8017e5a:	2b16      	cmp	r3, #22
 8017e5c:	dc0b      	bgt.n	8017e76 <_strtod_l+0x40e>
 8017e5e:	4d6b      	ldr	r5, [pc, #428]	; (801800c <_strtod_l+0x5a4>)
 8017e60:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8017e64:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017e68:	4652      	mov	r2, sl
 8017e6a:	465b      	mov	r3, fp
 8017e6c:	f7e8 fbd4 	bl	8000618 <__aeabi_dmul>
 8017e70:	4682      	mov	sl, r0
 8017e72:	468b      	mov	fp, r1
 8017e74:	e63a      	b.n	8017aec <_strtod_l+0x84>
 8017e76:	9a08      	ldr	r2, [sp, #32]
 8017e78:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8017e7c:	4293      	cmp	r3, r2
 8017e7e:	db20      	blt.n	8017ec2 <_strtod_l+0x45a>
 8017e80:	4c62      	ldr	r4, [pc, #392]	; (801800c <_strtod_l+0x5a4>)
 8017e82:	f1c5 050f 	rsb	r5, r5, #15
 8017e86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8017e8a:	4652      	mov	r2, sl
 8017e8c:	465b      	mov	r3, fp
 8017e8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017e92:	f7e8 fbc1 	bl	8000618 <__aeabi_dmul>
 8017e96:	9b08      	ldr	r3, [sp, #32]
 8017e98:	1b5d      	subs	r5, r3, r5
 8017e9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8017e9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017ea2:	e7e3      	b.n	8017e6c <_strtod_l+0x404>
 8017ea4:	9b08      	ldr	r3, [sp, #32]
 8017ea6:	3316      	adds	r3, #22
 8017ea8:	db0b      	blt.n	8017ec2 <_strtod_l+0x45a>
 8017eaa:	9b07      	ldr	r3, [sp, #28]
 8017eac:	4a57      	ldr	r2, [pc, #348]	; (801800c <_strtod_l+0x5a4>)
 8017eae:	1b9e      	subs	r6, r3, r6
 8017eb0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8017eb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017eb8:	4650      	mov	r0, sl
 8017eba:	4659      	mov	r1, fp
 8017ebc:	f7e8 fcd6 	bl	800086c <__aeabi_ddiv>
 8017ec0:	e7d6      	b.n	8017e70 <_strtod_l+0x408>
 8017ec2:	9b08      	ldr	r3, [sp, #32]
 8017ec4:	eba5 0808 	sub.w	r8, r5, r8
 8017ec8:	4498      	add	r8, r3
 8017eca:	f1b8 0f00 	cmp.w	r8, #0
 8017ece:	dd71      	ble.n	8017fb4 <_strtod_l+0x54c>
 8017ed0:	f018 030f 	ands.w	r3, r8, #15
 8017ed4:	d00a      	beq.n	8017eec <_strtod_l+0x484>
 8017ed6:	494d      	ldr	r1, [pc, #308]	; (801800c <_strtod_l+0x5a4>)
 8017ed8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017edc:	4652      	mov	r2, sl
 8017ede:	465b      	mov	r3, fp
 8017ee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017ee4:	f7e8 fb98 	bl	8000618 <__aeabi_dmul>
 8017ee8:	4682      	mov	sl, r0
 8017eea:	468b      	mov	fp, r1
 8017eec:	f038 080f 	bics.w	r8, r8, #15
 8017ef0:	d04d      	beq.n	8017f8e <_strtod_l+0x526>
 8017ef2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8017ef6:	dd22      	ble.n	8017f3e <_strtod_l+0x4d6>
 8017ef8:	2500      	movs	r5, #0
 8017efa:	462e      	mov	r6, r5
 8017efc:	9509      	str	r5, [sp, #36]	; 0x24
 8017efe:	9507      	str	r5, [sp, #28]
 8017f00:	2322      	movs	r3, #34	; 0x22
 8017f02:	f8df b110 	ldr.w	fp, [pc, #272]	; 8018014 <_strtod_l+0x5ac>
 8017f06:	6023      	str	r3, [r4, #0]
 8017f08:	f04f 0a00 	mov.w	sl, #0
 8017f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	f43f adec 	beq.w	8017aec <_strtod_l+0x84>
 8017f14:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017f16:	4620      	mov	r0, r4
 8017f18:	f001 ffc4 	bl	8019ea4 <_Bfree>
 8017f1c:	9907      	ldr	r1, [sp, #28]
 8017f1e:	4620      	mov	r0, r4
 8017f20:	f001 ffc0 	bl	8019ea4 <_Bfree>
 8017f24:	4631      	mov	r1, r6
 8017f26:	4620      	mov	r0, r4
 8017f28:	f001 ffbc 	bl	8019ea4 <_Bfree>
 8017f2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017f2e:	4620      	mov	r0, r4
 8017f30:	f001 ffb8 	bl	8019ea4 <_Bfree>
 8017f34:	4629      	mov	r1, r5
 8017f36:	4620      	mov	r0, r4
 8017f38:	f001 ffb4 	bl	8019ea4 <_Bfree>
 8017f3c:	e5d6      	b.n	8017aec <_strtod_l+0x84>
 8017f3e:	2300      	movs	r3, #0
 8017f40:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017f44:	4650      	mov	r0, sl
 8017f46:	4659      	mov	r1, fp
 8017f48:	4699      	mov	r9, r3
 8017f4a:	f1b8 0f01 	cmp.w	r8, #1
 8017f4e:	dc21      	bgt.n	8017f94 <_strtod_l+0x52c>
 8017f50:	b10b      	cbz	r3, 8017f56 <_strtod_l+0x4ee>
 8017f52:	4682      	mov	sl, r0
 8017f54:	468b      	mov	fp, r1
 8017f56:	4b2e      	ldr	r3, [pc, #184]	; (8018010 <_strtod_l+0x5a8>)
 8017f58:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8017f5c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8017f60:	4652      	mov	r2, sl
 8017f62:	465b      	mov	r3, fp
 8017f64:	e9d9 0100 	ldrd	r0, r1, [r9]
 8017f68:	f7e8 fb56 	bl	8000618 <__aeabi_dmul>
 8017f6c:	4b29      	ldr	r3, [pc, #164]	; (8018014 <_strtod_l+0x5ac>)
 8017f6e:	460a      	mov	r2, r1
 8017f70:	400b      	ands	r3, r1
 8017f72:	4929      	ldr	r1, [pc, #164]	; (8018018 <_strtod_l+0x5b0>)
 8017f74:	428b      	cmp	r3, r1
 8017f76:	4682      	mov	sl, r0
 8017f78:	d8be      	bhi.n	8017ef8 <_strtod_l+0x490>
 8017f7a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8017f7e:	428b      	cmp	r3, r1
 8017f80:	bf86      	itte	hi
 8017f82:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801801c <_strtod_l+0x5b4>
 8017f86:	f04f 3aff 	movhi.w	sl, #4294967295
 8017f8a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8017f8e:	2300      	movs	r3, #0
 8017f90:	9304      	str	r3, [sp, #16]
 8017f92:	e081      	b.n	8018098 <_strtod_l+0x630>
 8017f94:	f018 0f01 	tst.w	r8, #1
 8017f98:	d007      	beq.n	8017faa <_strtod_l+0x542>
 8017f9a:	4b1d      	ldr	r3, [pc, #116]	; (8018010 <_strtod_l+0x5a8>)
 8017f9c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8017fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fa4:	f7e8 fb38 	bl	8000618 <__aeabi_dmul>
 8017fa8:	2301      	movs	r3, #1
 8017faa:	f109 0901 	add.w	r9, r9, #1
 8017fae:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017fb2:	e7ca      	b.n	8017f4a <_strtod_l+0x4e2>
 8017fb4:	d0eb      	beq.n	8017f8e <_strtod_l+0x526>
 8017fb6:	f1c8 0800 	rsb	r8, r8, #0
 8017fba:	f018 020f 	ands.w	r2, r8, #15
 8017fbe:	d00a      	beq.n	8017fd6 <_strtod_l+0x56e>
 8017fc0:	4b12      	ldr	r3, [pc, #72]	; (801800c <_strtod_l+0x5a4>)
 8017fc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017fc6:	4650      	mov	r0, sl
 8017fc8:	4659      	mov	r1, fp
 8017fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fce:	f7e8 fc4d 	bl	800086c <__aeabi_ddiv>
 8017fd2:	4682      	mov	sl, r0
 8017fd4:	468b      	mov	fp, r1
 8017fd6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8017fda:	d0d8      	beq.n	8017f8e <_strtod_l+0x526>
 8017fdc:	f1b8 0f1f 	cmp.w	r8, #31
 8017fe0:	dd1e      	ble.n	8018020 <_strtod_l+0x5b8>
 8017fe2:	2500      	movs	r5, #0
 8017fe4:	462e      	mov	r6, r5
 8017fe6:	9509      	str	r5, [sp, #36]	; 0x24
 8017fe8:	9507      	str	r5, [sp, #28]
 8017fea:	2322      	movs	r3, #34	; 0x22
 8017fec:	f04f 0a00 	mov.w	sl, #0
 8017ff0:	f04f 0b00 	mov.w	fp, #0
 8017ff4:	6023      	str	r3, [r4, #0]
 8017ff6:	e789      	b.n	8017f0c <_strtod_l+0x4a4>
 8017ff8:	0801fbe1 	.word	0x0801fbe1
 8017ffc:	0801fc94 	.word	0x0801fc94
 8018000:	0801fbd9 	.word	0x0801fbd9
 8018004:	0801fd0f 	.word	0x0801fd0f
 8018008:	0801fd0b 	.word	0x0801fd0b
 801800c:	0801fef8 	.word	0x0801fef8
 8018010:	0801fed0 	.word	0x0801fed0
 8018014:	7ff00000 	.word	0x7ff00000
 8018018:	7ca00000 	.word	0x7ca00000
 801801c:	7fefffff 	.word	0x7fefffff
 8018020:	f018 0310 	ands.w	r3, r8, #16
 8018024:	bf18      	it	ne
 8018026:	236a      	movne	r3, #106	; 0x6a
 8018028:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80183e0 <_strtod_l+0x978>
 801802c:	9304      	str	r3, [sp, #16]
 801802e:	4650      	mov	r0, sl
 8018030:	4659      	mov	r1, fp
 8018032:	2300      	movs	r3, #0
 8018034:	f018 0f01 	tst.w	r8, #1
 8018038:	d004      	beq.n	8018044 <_strtod_l+0x5dc>
 801803a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801803e:	f7e8 faeb 	bl	8000618 <__aeabi_dmul>
 8018042:	2301      	movs	r3, #1
 8018044:	ea5f 0868 	movs.w	r8, r8, asr #1
 8018048:	f109 0908 	add.w	r9, r9, #8
 801804c:	d1f2      	bne.n	8018034 <_strtod_l+0x5cc>
 801804e:	b10b      	cbz	r3, 8018054 <_strtod_l+0x5ec>
 8018050:	4682      	mov	sl, r0
 8018052:	468b      	mov	fp, r1
 8018054:	9b04      	ldr	r3, [sp, #16]
 8018056:	b1bb      	cbz	r3, 8018088 <_strtod_l+0x620>
 8018058:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801805c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018060:	2b00      	cmp	r3, #0
 8018062:	4659      	mov	r1, fp
 8018064:	dd10      	ble.n	8018088 <_strtod_l+0x620>
 8018066:	2b1f      	cmp	r3, #31
 8018068:	f340 8128 	ble.w	80182bc <_strtod_l+0x854>
 801806c:	2b34      	cmp	r3, #52	; 0x34
 801806e:	bfde      	ittt	le
 8018070:	3b20      	suble	r3, #32
 8018072:	f04f 32ff 	movle.w	r2, #4294967295
 8018076:	fa02 f303 	lslle.w	r3, r2, r3
 801807a:	f04f 0a00 	mov.w	sl, #0
 801807e:	bfcc      	ite	gt
 8018080:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8018084:	ea03 0b01 	andle.w	fp, r3, r1
 8018088:	2200      	movs	r2, #0
 801808a:	2300      	movs	r3, #0
 801808c:	4650      	mov	r0, sl
 801808e:	4659      	mov	r1, fp
 8018090:	f7e8 fd2a 	bl	8000ae8 <__aeabi_dcmpeq>
 8018094:	2800      	cmp	r0, #0
 8018096:	d1a4      	bne.n	8017fe2 <_strtod_l+0x57a>
 8018098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801809a:	9300      	str	r3, [sp, #0]
 801809c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801809e:	462b      	mov	r3, r5
 80180a0:	463a      	mov	r2, r7
 80180a2:	4620      	mov	r0, r4
 80180a4:	f001 ff6a 	bl	8019f7c <__s2b>
 80180a8:	9009      	str	r0, [sp, #36]	; 0x24
 80180aa:	2800      	cmp	r0, #0
 80180ac:	f43f af24 	beq.w	8017ef8 <_strtod_l+0x490>
 80180b0:	9b07      	ldr	r3, [sp, #28]
 80180b2:	1b9e      	subs	r6, r3, r6
 80180b4:	9b08      	ldr	r3, [sp, #32]
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	bfb4      	ite	lt
 80180ba:	4633      	movlt	r3, r6
 80180bc:	2300      	movge	r3, #0
 80180be:	9310      	str	r3, [sp, #64]	; 0x40
 80180c0:	9b08      	ldr	r3, [sp, #32]
 80180c2:	2500      	movs	r5, #0
 80180c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80180c8:	9318      	str	r3, [sp, #96]	; 0x60
 80180ca:	462e      	mov	r6, r5
 80180cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180ce:	4620      	mov	r0, r4
 80180d0:	6859      	ldr	r1, [r3, #4]
 80180d2:	f001 fea7 	bl	8019e24 <_Balloc>
 80180d6:	9007      	str	r0, [sp, #28]
 80180d8:	2800      	cmp	r0, #0
 80180da:	f43f af11 	beq.w	8017f00 <_strtod_l+0x498>
 80180de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180e0:	691a      	ldr	r2, [r3, #16]
 80180e2:	3202      	adds	r2, #2
 80180e4:	f103 010c 	add.w	r1, r3, #12
 80180e8:	0092      	lsls	r2, r2, #2
 80180ea:	300c      	adds	r0, #12
 80180ec:	f7fe fe74 	bl	8016dd8 <memcpy>
 80180f0:	ec4b ab10 	vmov	d0, sl, fp
 80180f4:	aa20      	add	r2, sp, #128	; 0x80
 80180f6:	a91f      	add	r1, sp, #124	; 0x7c
 80180f8:	4620      	mov	r0, r4
 80180fa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80180fe:	f002 fa79 	bl	801a5f4 <__d2b>
 8018102:	901e      	str	r0, [sp, #120]	; 0x78
 8018104:	2800      	cmp	r0, #0
 8018106:	f43f aefb 	beq.w	8017f00 <_strtod_l+0x498>
 801810a:	2101      	movs	r1, #1
 801810c:	4620      	mov	r0, r4
 801810e:	f001 ffcf 	bl	801a0b0 <__i2b>
 8018112:	4606      	mov	r6, r0
 8018114:	2800      	cmp	r0, #0
 8018116:	f43f aef3 	beq.w	8017f00 <_strtod_l+0x498>
 801811a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801811c:	9904      	ldr	r1, [sp, #16]
 801811e:	2b00      	cmp	r3, #0
 8018120:	bfab      	itete	ge
 8018122:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8018124:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8018126:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8018128:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801812c:	bfac      	ite	ge
 801812e:	eb03 0902 	addge.w	r9, r3, r2
 8018132:	1ad7      	sublt	r7, r2, r3
 8018134:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018136:	eba3 0801 	sub.w	r8, r3, r1
 801813a:	4490      	add	r8, r2
 801813c:	4ba3      	ldr	r3, [pc, #652]	; (80183cc <_strtod_l+0x964>)
 801813e:	f108 38ff 	add.w	r8, r8, #4294967295
 8018142:	4598      	cmp	r8, r3
 8018144:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018148:	f280 80cc 	bge.w	80182e4 <_strtod_l+0x87c>
 801814c:	eba3 0308 	sub.w	r3, r3, r8
 8018150:	2b1f      	cmp	r3, #31
 8018152:	eba2 0203 	sub.w	r2, r2, r3
 8018156:	f04f 0101 	mov.w	r1, #1
 801815a:	f300 80b6 	bgt.w	80182ca <_strtod_l+0x862>
 801815e:	fa01 f303 	lsl.w	r3, r1, r3
 8018162:	9311      	str	r3, [sp, #68]	; 0x44
 8018164:	2300      	movs	r3, #0
 8018166:	930c      	str	r3, [sp, #48]	; 0x30
 8018168:	eb09 0802 	add.w	r8, r9, r2
 801816c:	9b04      	ldr	r3, [sp, #16]
 801816e:	45c1      	cmp	r9, r8
 8018170:	4417      	add	r7, r2
 8018172:	441f      	add	r7, r3
 8018174:	464b      	mov	r3, r9
 8018176:	bfa8      	it	ge
 8018178:	4643      	movge	r3, r8
 801817a:	42bb      	cmp	r3, r7
 801817c:	bfa8      	it	ge
 801817e:	463b      	movge	r3, r7
 8018180:	2b00      	cmp	r3, #0
 8018182:	bfc2      	ittt	gt
 8018184:	eba8 0803 	subgt.w	r8, r8, r3
 8018188:	1aff      	subgt	r7, r7, r3
 801818a:	eba9 0903 	subgt.w	r9, r9, r3
 801818e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018190:	2b00      	cmp	r3, #0
 8018192:	dd17      	ble.n	80181c4 <_strtod_l+0x75c>
 8018194:	4631      	mov	r1, r6
 8018196:	461a      	mov	r2, r3
 8018198:	4620      	mov	r0, r4
 801819a:	f002 f845 	bl	801a228 <__pow5mult>
 801819e:	4606      	mov	r6, r0
 80181a0:	2800      	cmp	r0, #0
 80181a2:	f43f aead 	beq.w	8017f00 <_strtod_l+0x498>
 80181a6:	4601      	mov	r1, r0
 80181a8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80181aa:	4620      	mov	r0, r4
 80181ac:	f001 ff96 	bl	801a0dc <__multiply>
 80181b0:	900f      	str	r0, [sp, #60]	; 0x3c
 80181b2:	2800      	cmp	r0, #0
 80181b4:	f43f aea4 	beq.w	8017f00 <_strtod_l+0x498>
 80181b8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80181ba:	4620      	mov	r0, r4
 80181bc:	f001 fe72 	bl	8019ea4 <_Bfree>
 80181c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80181c2:	931e      	str	r3, [sp, #120]	; 0x78
 80181c4:	f1b8 0f00 	cmp.w	r8, #0
 80181c8:	f300 8091 	bgt.w	80182ee <_strtod_l+0x886>
 80181cc:	9b08      	ldr	r3, [sp, #32]
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	dd08      	ble.n	80181e4 <_strtod_l+0x77c>
 80181d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80181d4:	9907      	ldr	r1, [sp, #28]
 80181d6:	4620      	mov	r0, r4
 80181d8:	f002 f826 	bl	801a228 <__pow5mult>
 80181dc:	9007      	str	r0, [sp, #28]
 80181de:	2800      	cmp	r0, #0
 80181e0:	f43f ae8e 	beq.w	8017f00 <_strtod_l+0x498>
 80181e4:	2f00      	cmp	r7, #0
 80181e6:	dd08      	ble.n	80181fa <_strtod_l+0x792>
 80181e8:	9907      	ldr	r1, [sp, #28]
 80181ea:	463a      	mov	r2, r7
 80181ec:	4620      	mov	r0, r4
 80181ee:	f002 f875 	bl	801a2dc <__lshift>
 80181f2:	9007      	str	r0, [sp, #28]
 80181f4:	2800      	cmp	r0, #0
 80181f6:	f43f ae83 	beq.w	8017f00 <_strtod_l+0x498>
 80181fa:	f1b9 0f00 	cmp.w	r9, #0
 80181fe:	dd08      	ble.n	8018212 <_strtod_l+0x7aa>
 8018200:	4631      	mov	r1, r6
 8018202:	464a      	mov	r2, r9
 8018204:	4620      	mov	r0, r4
 8018206:	f002 f869 	bl	801a2dc <__lshift>
 801820a:	4606      	mov	r6, r0
 801820c:	2800      	cmp	r0, #0
 801820e:	f43f ae77 	beq.w	8017f00 <_strtod_l+0x498>
 8018212:	9a07      	ldr	r2, [sp, #28]
 8018214:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018216:	4620      	mov	r0, r4
 8018218:	f002 f8e8 	bl	801a3ec <__mdiff>
 801821c:	4605      	mov	r5, r0
 801821e:	2800      	cmp	r0, #0
 8018220:	f43f ae6e 	beq.w	8017f00 <_strtod_l+0x498>
 8018224:	68c3      	ldr	r3, [r0, #12]
 8018226:	930f      	str	r3, [sp, #60]	; 0x3c
 8018228:	2300      	movs	r3, #0
 801822a:	60c3      	str	r3, [r0, #12]
 801822c:	4631      	mov	r1, r6
 801822e:	f002 f8c1 	bl	801a3b4 <__mcmp>
 8018232:	2800      	cmp	r0, #0
 8018234:	da65      	bge.n	8018302 <_strtod_l+0x89a>
 8018236:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018238:	ea53 030a 	orrs.w	r3, r3, sl
 801823c:	f040 8087 	bne.w	801834e <_strtod_l+0x8e6>
 8018240:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018244:	2b00      	cmp	r3, #0
 8018246:	f040 8082 	bne.w	801834e <_strtod_l+0x8e6>
 801824a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801824e:	0d1b      	lsrs	r3, r3, #20
 8018250:	051b      	lsls	r3, r3, #20
 8018252:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8018256:	d97a      	bls.n	801834e <_strtod_l+0x8e6>
 8018258:	696b      	ldr	r3, [r5, #20]
 801825a:	b913      	cbnz	r3, 8018262 <_strtod_l+0x7fa>
 801825c:	692b      	ldr	r3, [r5, #16]
 801825e:	2b01      	cmp	r3, #1
 8018260:	dd75      	ble.n	801834e <_strtod_l+0x8e6>
 8018262:	4629      	mov	r1, r5
 8018264:	2201      	movs	r2, #1
 8018266:	4620      	mov	r0, r4
 8018268:	f002 f838 	bl	801a2dc <__lshift>
 801826c:	4631      	mov	r1, r6
 801826e:	4605      	mov	r5, r0
 8018270:	f002 f8a0 	bl	801a3b4 <__mcmp>
 8018274:	2800      	cmp	r0, #0
 8018276:	dd6a      	ble.n	801834e <_strtod_l+0x8e6>
 8018278:	9904      	ldr	r1, [sp, #16]
 801827a:	4a55      	ldr	r2, [pc, #340]	; (80183d0 <_strtod_l+0x968>)
 801827c:	465b      	mov	r3, fp
 801827e:	2900      	cmp	r1, #0
 8018280:	f000 8085 	beq.w	801838e <_strtod_l+0x926>
 8018284:	ea02 010b 	and.w	r1, r2, fp
 8018288:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801828c:	dc7f      	bgt.n	801838e <_strtod_l+0x926>
 801828e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8018292:	f77f aeaa 	ble.w	8017fea <_strtod_l+0x582>
 8018296:	4a4f      	ldr	r2, [pc, #316]	; (80183d4 <_strtod_l+0x96c>)
 8018298:	2300      	movs	r3, #0
 801829a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801829e:	4650      	mov	r0, sl
 80182a0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80182a4:	4659      	mov	r1, fp
 80182a6:	f7e8 f9b7 	bl	8000618 <__aeabi_dmul>
 80182aa:	460b      	mov	r3, r1
 80182ac:	4303      	orrs	r3, r0
 80182ae:	bf08      	it	eq
 80182b0:	2322      	moveq	r3, #34	; 0x22
 80182b2:	4682      	mov	sl, r0
 80182b4:	468b      	mov	fp, r1
 80182b6:	bf08      	it	eq
 80182b8:	6023      	streq	r3, [r4, #0]
 80182ba:	e62b      	b.n	8017f14 <_strtod_l+0x4ac>
 80182bc:	f04f 32ff 	mov.w	r2, #4294967295
 80182c0:	fa02 f303 	lsl.w	r3, r2, r3
 80182c4:	ea03 0a0a 	and.w	sl, r3, sl
 80182c8:	e6de      	b.n	8018088 <_strtod_l+0x620>
 80182ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80182ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80182d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80182d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80182da:	fa01 f308 	lsl.w	r3, r1, r8
 80182de:	930c      	str	r3, [sp, #48]	; 0x30
 80182e0:	9111      	str	r1, [sp, #68]	; 0x44
 80182e2:	e741      	b.n	8018168 <_strtod_l+0x700>
 80182e4:	2300      	movs	r3, #0
 80182e6:	930c      	str	r3, [sp, #48]	; 0x30
 80182e8:	2301      	movs	r3, #1
 80182ea:	9311      	str	r3, [sp, #68]	; 0x44
 80182ec:	e73c      	b.n	8018168 <_strtod_l+0x700>
 80182ee:	991e      	ldr	r1, [sp, #120]	; 0x78
 80182f0:	4642      	mov	r2, r8
 80182f2:	4620      	mov	r0, r4
 80182f4:	f001 fff2 	bl	801a2dc <__lshift>
 80182f8:	901e      	str	r0, [sp, #120]	; 0x78
 80182fa:	2800      	cmp	r0, #0
 80182fc:	f47f af66 	bne.w	80181cc <_strtod_l+0x764>
 8018300:	e5fe      	b.n	8017f00 <_strtod_l+0x498>
 8018302:	465f      	mov	r7, fp
 8018304:	d16e      	bne.n	80183e4 <_strtod_l+0x97c>
 8018306:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018308:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801830c:	b342      	cbz	r2, 8018360 <_strtod_l+0x8f8>
 801830e:	4a32      	ldr	r2, [pc, #200]	; (80183d8 <_strtod_l+0x970>)
 8018310:	4293      	cmp	r3, r2
 8018312:	d128      	bne.n	8018366 <_strtod_l+0x8fe>
 8018314:	9b04      	ldr	r3, [sp, #16]
 8018316:	4650      	mov	r0, sl
 8018318:	b1eb      	cbz	r3, 8018356 <_strtod_l+0x8ee>
 801831a:	4a2d      	ldr	r2, [pc, #180]	; (80183d0 <_strtod_l+0x968>)
 801831c:	403a      	ands	r2, r7
 801831e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8018322:	f04f 31ff 	mov.w	r1, #4294967295
 8018326:	d819      	bhi.n	801835c <_strtod_l+0x8f4>
 8018328:	0d12      	lsrs	r2, r2, #20
 801832a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801832e:	fa01 f303 	lsl.w	r3, r1, r3
 8018332:	4298      	cmp	r0, r3
 8018334:	d117      	bne.n	8018366 <_strtod_l+0x8fe>
 8018336:	4b29      	ldr	r3, [pc, #164]	; (80183dc <_strtod_l+0x974>)
 8018338:	429f      	cmp	r7, r3
 801833a:	d102      	bne.n	8018342 <_strtod_l+0x8da>
 801833c:	3001      	adds	r0, #1
 801833e:	f43f addf 	beq.w	8017f00 <_strtod_l+0x498>
 8018342:	4b23      	ldr	r3, [pc, #140]	; (80183d0 <_strtod_l+0x968>)
 8018344:	403b      	ands	r3, r7
 8018346:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801834a:	f04f 0a00 	mov.w	sl, #0
 801834e:	9b04      	ldr	r3, [sp, #16]
 8018350:	2b00      	cmp	r3, #0
 8018352:	d1a0      	bne.n	8018296 <_strtod_l+0x82e>
 8018354:	e5de      	b.n	8017f14 <_strtod_l+0x4ac>
 8018356:	f04f 33ff 	mov.w	r3, #4294967295
 801835a:	e7ea      	b.n	8018332 <_strtod_l+0x8ca>
 801835c:	460b      	mov	r3, r1
 801835e:	e7e8      	b.n	8018332 <_strtod_l+0x8ca>
 8018360:	ea53 030a 	orrs.w	r3, r3, sl
 8018364:	d088      	beq.n	8018278 <_strtod_l+0x810>
 8018366:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018368:	b1db      	cbz	r3, 80183a2 <_strtod_l+0x93a>
 801836a:	423b      	tst	r3, r7
 801836c:	d0ef      	beq.n	801834e <_strtod_l+0x8e6>
 801836e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018370:	9a04      	ldr	r2, [sp, #16]
 8018372:	4650      	mov	r0, sl
 8018374:	4659      	mov	r1, fp
 8018376:	b1c3      	cbz	r3, 80183aa <_strtod_l+0x942>
 8018378:	f7ff fb57 	bl	8017a2a <sulp>
 801837c:	4602      	mov	r2, r0
 801837e:	460b      	mov	r3, r1
 8018380:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018384:	f7e7 ff92 	bl	80002ac <__adddf3>
 8018388:	4682      	mov	sl, r0
 801838a:	468b      	mov	fp, r1
 801838c:	e7df      	b.n	801834e <_strtod_l+0x8e6>
 801838e:	4013      	ands	r3, r2
 8018390:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8018394:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8018398:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801839c:	f04f 3aff 	mov.w	sl, #4294967295
 80183a0:	e7d5      	b.n	801834e <_strtod_l+0x8e6>
 80183a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80183a4:	ea13 0f0a 	tst.w	r3, sl
 80183a8:	e7e0      	b.n	801836c <_strtod_l+0x904>
 80183aa:	f7ff fb3e 	bl	8017a2a <sulp>
 80183ae:	4602      	mov	r2, r0
 80183b0:	460b      	mov	r3, r1
 80183b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80183b6:	f7e7 ff77 	bl	80002a8 <__aeabi_dsub>
 80183ba:	2200      	movs	r2, #0
 80183bc:	2300      	movs	r3, #0
 80183be:	4682      	mov	sl, r0
 80183c0:	468b      	mov	fp, r1
 80183c2:	f7e8 fb91 	bl	8000ae8 <__aeabi_dcmpeq>
 80183c6:	2800      	cmp	r0, #0
 80183c8:	d0c1      	beq.n	801834e <_strtod_l+0x8e6>
 80183ca:	e60e      	b.n	8017fea <_strtod_l+0x582>
 80183cc:	fffffc02 	.word	0xfffffc02
 80183d0:	7ff00000 	.word	0x7ff00000
 80183d4:	39500000 	.word	0x39500000
 80183d8:	000fffff 	.word	0x000fffff
 80183dc:	7fefffff 	.word	0x7fefffff
 80183e0:	0801fca8 	.word	0x0801fca8
 80183e4:	4631      	mov	r1, r6
 80183e6:	4628      	mov	r0, r5
 80183e8:	f002 f960 	bl	801a6ac <__ratio>
 80183ec:	ec59 8b10 	vmov	r8, r9, d0
 80183f0:	ee10 0a10 	vmov	r0, s0
 80183f4:	2200      	movs	r2, #0
 80183f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80183fa:	4649      	mov	r1, r9
 80183fc:	f7e8 fb88 	bl	8000b10 <__aeabi_dcmple>
 8018400:	2800      	cmp	r0, #0
 8018402:	d07c      	beq.n	80184fe <_strtod_l+0xa96>
 8018404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018406:	2b00      	cmp	r3, #0
 8018408:	d04c      	beq.n	80184a4 <_strtod_l+0xa3c>
 801840a:	4b95      	ldr	r3, [pc, #596]	; (8018660 <_strtod_l+0xbf8>)
 801840c:	2200      	movs	r2, #0
 801840e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8018412:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8018660 <_strtod_l+0xbf8>
 8018416:	f04f 0800 	mov.w	r8, #0
 801841a:	4b92      	ldr	r3, [pc, #584]	; (8018664 <_strtod_l+0xbfc>)
 801841c:	403b      	ands	r3, r7
 801841e:	9311      	str	r3, [sp, #68]	; 0x44
 8018420:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018422:	4b91      	ldr	r3, [pc, #580]	; (8018668 <_strtod_l+0xc00>)
 8018424:	429a      	cmp	r2, r3
 8018426:	f040 80b2 	bne.w	801858e <_strtod_l+0xb26>
 801842a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801842e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018432:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8018436:	ec4b ab10 	vmov	d0, sl, fp
 801843a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801843e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018442:	f002 f85b 	bl	801a4fc <__ulp>
 8018446:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801844a:	ec53 2b10 	vmov	r2, r3, d0
 801844e:	f7e8 f8e3 	bl	8000618 <__aeabi_dmul>
 8018452:	4652      	mov	r2, sl
 8018454:	465b      	mov	r3, fp
 8018456:	f7e7 ff29 	bl	80002ac <__adddf3>
 801845a:	460b      	mov	r3, r1
 801845c:	4981      	ldr	r1, [pc, #516]	; (8018664 <_strtod_l+0xbfc>)
 801845e:	4a83      	ldr	r2, [pc, #524]	; (801866c <_strtod_l+0xc04>)
 8018460:	4019      	ands	r1, r3
 8018462:	4291      	cmp	r1, r2
 8018464:	4682      	mov	sl, r0
 8018466:	d95e      	bls.n	8018526 <_strtod_l+0xabe>
 8018468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801846a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801846e:	4293      	cmp	r3, r2
 8018470:	d103      	bne.n	801847a <_strtod_l+0xa12>
 8018472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018474:	3301      	adds	r3, #1
 8018476:	f43f ad43 	beq.w	8017f00 <_strtod_l+0x498>
 801847a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8018678 <_strtod_l+0xc10>
 801847e:	f04f 3aff 	mov.w	sl, #4294967295
 8018482:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018484:	4620      	mov	r0, r4
 8018486:	f001 fd0d 	bl	8019ea4 <_Bfree>
 801848a:	9907      	ldr	r1, [sp, #28]
 801848c:	4620      	mov	r0, r4
 801848e:	f001 fd09 	bl	8019ea4 <_Bfree>
 8018492:	4631      	mov	r1, r6
 8018494:	4620      	mov	r0, r4
 8018496:	f001 fd05 	bl	8019ea4 <_Bfree>
 801849a:	4629      	mov	r1, r5
 801849c:	4620      	mov	r0, r4
 801849e:	f001 fd01 	bl	8019ea4 <_Bfree>
 80184a2:	e613      	b.n	80180cc <_strtod_l+0x664>
 80184a4:	f1ba 0f00 	cmp.w	sl, #0
 80184a8:	d11b      	bne.n	80184e2 <_strtod_l+0xa7a>
 80184aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80184ae:	b9f3      	cbnz	r3, 80184ee <_strtod_l+0xa86>
 80184b0:	4b6b      	ldr	r3, [pc, #428]	; (8018660 <_strtod_l+0xbf8>)
 80184b2:	2200      	movs	r2, #0
 80184b4:	4640      	mov	r0, r8
 80184b6:	4649      	mov	r1, r9
 80184b8:	f7e8 fb20 	bl	8000afc <__aeabi_dcmplt>
 80184bc:	b9d0      	cbnz	r0, 80184f4 <_strtod_l+0xa8c>
 80184be:	4640      	mov	r0, r8
 80184c0:	4649      	mov	r1, r9
 80184c2:	4b6b      	ldr	r3, [pc, #428]	; (8018670 <_strtod_l+0xc08>)
 80184c4:	2200      	movs	r2, #0
 80184c6:	f7e8 f8a7 	bl	8000618 <__aeabi_dmul>
 80184ca:	4680      	mov	r8, r0
 80184cc:	4689      	mov	r9, r1
 80184ce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80184d2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80184d6:	931b      	str	r3, [sp, #108]	; 0x6c
 80184d8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80184dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80184e0:	e79b      	b.n	801841a <_strtod_l+0x9b2>
 80184e2:	f1ba 0f01 	cmp.w	sl, #1
 80184e6:	d102      	bne.n	80184ee <_strtod_l+0xa86>
 80184e8:	2f00      	cmp	r7, #0
 80184ea:	f43f ad7e 	beq.w	8017fea <_strtod_l+0x582>
 80184ee:	4b61      	ldr	r3, [pc, #388]	; (8018674 <_strtod_l+0xc0c>)
 80184f0:	2200      	movs	r2, #0
 80184f2:	e78c      	b.n	801840e <_strtod_l+0x9a6>
 80184f4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8018670 <_strtod_l+0xc08>
 80184f8:	f04f 0800 	mov.w	r8, #0
 80184fc:	e7e7      	b.n	80184ce <_strtod_l+0xa66>
 80184fe:	4b5c      	ldr	r3, [pc, #368]	; (8018670 <_strtod_l+0xc08>)
 8018500:	4640      	mov	r0, r8
 8018502:	4649      	mov	r1, r9
 8018504:	2200      	movs	r2, #0
 8018506:	f7e8 f887 	bl	8000618 <__aeabi_dmul>
 801850a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801850c:	4680      	mov	r8, r0
 801850e:	4689      	mov	r9, r1
 8018510:	b933      	cbnz	r3, 8018520 <_strtod_l+0xab8>
 8018512:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018516:	9012      	str	r0, [sp, #72]	; 0x48
 8018518:	9313      	str	r3, [sp, #76]	; 0x4c
 801851a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801851e:	e7dd      	b.n	80184dc <_strtod_l+0xa74>
 8018520:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8018524:	e7f9      	b.n	801851a <_strtod_l+0xab2>
 8018526:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801852a:	9b04      	ldr	r3, [sp, #16]
 801852c:	2b00      	cmp	r3, #0
 801852e:	d1a8      	bne.n	8018482 <_strtod_l+0xa1a>
 8018530:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018534:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018536:	0d1b      	lsrs	r3, r3, #20
 8018538:	051b      	lsls	r3, r3, #20
 801853a:	429a      	cmp	r2, r3
 801853c:	d1a1      	bne.n	8018482 <_strtod_l+0xa1a>
 801853e:	4640      	mov	r0, r8
 8018540:	4649      	mov	r1, r9
 8018542:	f7e8 fb79 	bl	8000c38 <__aeabi_d2lz>
 8018546:	f7e8 f839 	bl	80005bc <__aeabi_l2d>
 801854a:	4602      	mov	r2, r0
 801854c:	460b      	mov	r3, r1
 801854e:	4640      	mov	r0, r8
 8018550:	4649      	mov	r1, r9
 8018552:	f7e7 fea9 	bl	80002a8 <__aeabi_dsub>
 8018556:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018558:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801855c:	ea43 030a 	orr.w	r3, r3, sl
 8018560:	4313      	orrs	r3, r2
 8018562:	4680      	mov	r8, r0
 8018564:	4689      	mov	r9, r1
 8018566:	d053      	beq.n	8018610 <_strtod_l+0xba8>
 8018568:	a335      	add	r3, pc, #212	; (adr r3, 8018640 <_strtod_l+0xbd8>)
 801856a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801856e:	f7e8 fac5 	bl	8000afc <__aeabi_dcmplt>
 8018572:	2800      	cmp	r0, #0
 8018574:	f47f acce 	bne.w	8017f14 <_strtod_l+0x4ac>
 8018578:	a333      	add	r3, pc, #204	; (adr r3, 8018648 <_strtod_l+0xbe0>)
 801857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801857e:	4640      	mov	r0, r8
 8018580:	4649      	mov	r1, r9
 8018582:	f7e8 fad9 	bl	8000b38 <__aeabi_dcmpgt>
 8018586:	2800      	cmp	r0, #0
 8018588:	f43f af7b 	beq.w	8018482 <_strtod_l+0xa1a>
 801858c:	e4c2      	b.n	8017f14 <_strtod_l+0x4ac>
 801858e:	9b04      	ldr	r3, [sp, #16]
 8018590:	b333      	cbz	r3, 80185e0 <_strtod_l+0xb78>
 8018592:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018594:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018598:	d822      	bhi.n	80185e0 <_strtod_l+0xb78>
 801859a:	a32d      	add	r3, pc, #180	; (adr r3, 8018650 <_strtod_l+0xbe8>)
 801859c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185a0:	4640      	mov	r0, r8
 80185a2:	4649      	mov	r1, r9
 80185a4:	f7e8 fab4 	bl	8000b10 <__aeabi_dcmple>
 80185a8:	b1a0      	cbz	r0, 80185d4 <_strtod_l+0xb6c>
 80185aa:	4649      	mov	r1, r9
 80185ac:	4640      	mov	r0, r8
 80185ae:	f7e8 fb0b 	bl	8000bc8 <__aeabi_d2uiz>
 80185b2:	2801      	cmp	r0, #1
 80185b4:	bf38      	it	cc
 80185b6:	2001      	movcc	r0, #1
 80185b8:	f7e7 ffb4 	bl	8000524 <__aeabi_ui2d>
 80185bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80185be:	4680      	mov	r8, r0
 80185c0:	4689      	mov	r9, r1
 80185c2:	bb13      	cbnz	r3, 801860a <_strtod_l+0xba2>
 80185c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80185c8:	9014      	str	r0, [sp, #80]	; 0x50
 80185ca:	9315      	str	r3, [sp, #84]	; 0x54
 80185cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80185d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80185d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80185d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80185d8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80185dc:	1a9b      	subs	r3, r3, r2
 80185de:	930d      	str	r3, [sp, #52]	; 0x34
 80185e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80185e4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80185e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80185ec:	f001 ff86 	bl	801a4fc <__ulp>
 80185f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80185f4:	ec53 2b10 	vmov	r2, r3, d0
 80185f8:	f7e8 f80e 	bl	8000618 <__aeabi_dmul>
 80185fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018600:	f7e7 fe54 	bl	80002ac <__adddf3>
 8018604:	4682      	mov	sl, r0
 8018606:	468b      	mov	fp, r1
 8018608:	e78f      	b.n	801852a <_strtod_l+0xac2>
 801860a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801860e:	e7dd      	b.n	80185cc <_strtod_l+0xb64>
 8018610:	a311      	add	r3, pc, #68	; (adr r3, 8018658 <_strtod_l+0xbf0>)
 8018612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018616:	f7e8 fa71 	bl	8000afc <__aeabi_dcmplt>
 801861a:	e7b4      	b.n	8018586 <_strtod_l+0xb1e>
 801861c:	2300      	movs	r3, #0
 801861e:	930e      	str	r3, [sp, #56]	; 0x38
 8018620:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018622:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018624:	6013      	str	r3, [r2, #0]
 8018626:	f7ff ba65 	b.w	8017af4 <_strtod_l+0x8c>
 801862a:	2b65      	cmp	r3, #101	; 0x65
 801862c:	f43f ab5d 	beq.w	8017cea <_strtod_l+0x282>
 8018630:	2b45      	cmp	r3, #69	; 0x45
 8018632:	f43f ab5a 	beq.w	8017cea <_strtod_l+0x282>
 8018636:	2201      	movs	r2, #1
 8018638:	f7ff bb92 	b.w	8017d60 <_strtod_l+0x2f8>
 801863c:	f3af 8000 	nop.w
 8018640:	94a03595 	.word	0x94a03595
 8018644:	3fdfffff 	.word	0x3fdfffff
 8018648:	35afe535 	.word	0x35afe535
 801864c:	3fe00000 	.word	0x3fe00000
 8018650:	ffc00000 	.word	0xffc00000
 8018654:	41dfffff 	.word	0x41dfffff
 8018658:	94a03595 	.word	0x94a03595
 801865c:	3fcfffff 	.word	0x3fcfffff
 8018660:	3ff00000 	.word	0x3ff00000
 8018664:	7ff00000 	.word	0x7ff00000
 8018668:	7fe00000 	.word	0x7fe00000
 801866c:	7c9fffff 	.word	0x7c9fffff
 8018670:	3fe00000 	.word	0x3fe00000
 8018674:	bff00000 	.word	0xbff00000
 8018678:	7fefffff 	.word	0x7fefffff

0801867c <strtod>:
 801867c:	460a      	mov	r2, r1
 801867e:	4601      	mov	r1, r0
 8018680:	4802      	ldr	r0, [pc, #8]	; (801868c <strtod+0x10>)
 8018682:	4b03      	ldr	r3, [pc, #12]	; (8018690 <strtod+0x14>)
 8018684:	6800      	ldr	r0, [r0, #0]
 8018686:	f7ff b9ef 	b.w	8017a68 <_strtod_l>
 801868a:	bf00      	nop
 801868c:	20000074 	.word	0x20000074
 8018690:	200000dc 	.word	0x200000dc

08018694 <_strtol_l.isra.0>:
 8018694:	2b01      	cmp	r3, #1
 8018696:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801869a:	d001      	beq.n	80186a0 <_strtol_l.isra.0+0xc>
 801869c:	2b24      	cmp	r3, #36	; 0x24
 801869e:	d906      	bls.n	80186ae <_strtol_l.isra.0+0x1a>
 80186a0:	f000 ff1e 	bl	80194e0 <__errno>
 80186a4:	2316      	movs	r3, #22
 80186a6:	6003      	str	r3, [r0, #0]
 80186a8:	2000      	movs	r0, #0
 80186aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186ae:	4f3a      	ldr	r7, [pc, #232]	; (8018798 <_strtol_l.isra.0+0x104>)
 80186b0:	468e      	mov	lr, r1
 80186b2:	4676      	mov	r6, lr
 80186b4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80186b8:	5de5      	ldrb	r5, [r4, r7]
 80186ba:	f015 0508 	ands.w	r5, r5, #8
 80186be:	d1f8      	bne.n	80186b2 <_strtol_l.isra.0+0x1e>
 80186c0:	2c2d      	cmp	r4, #45	; 0x2d
 80186c2:	d134      	bne.n	801872e <_strtol_l.isra.0+0x9a>
 80186c4:	f89e 4000 	ldrb.w	r4, [lr]
 80186c8:	f04f 0801 	mov.w	r8, #1
 80186cc:	f106 0e02 	add.w	lr, r6, #2
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d05c      	beq.n	801878e <_strtol_l.isra.0+0xfa>
 80186d4:	2b10      	cmp	r3, #16
 80186d6:	d10c      	bne.n	80186f2 <_strtol_l.isra.0+0x5e>
 80186d8:	2c30      	cmp	r4, #48	; 0x30
 80186da:	d10a      	bne.n	80186f2 <_strtol_l.isra.0+0x5e>
 80186dc:	f89e 4000 	ldrb.w	r4, [lr]
 80186e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80186e4:	2c58      	cmp	r4, #88	; 0x58
 80186e6:	d14d      	bne.n	8018784 <_strtol_l.isra.0+0xf0>
 80186e8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80186ec:	2310      	movs	r3, #16
 80186ee:	f10e 0e02 	add.w	lr, lr, #2
 80186f2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80186f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80186fa:	2600      	movs	r6, #0
 80186fc:	fbbc f9f3 	udiv	r9, ip, r3
 8018700:	4635      	mov	r5, r6
 8018702:	fb03 ca19 	mls	sl, r3, r9, ip
 8018706:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801870a:	2f09      	cmp	r7, #9
 801870c:	d818      	bhi.n	8018740 <_strtol_l.isra.0+0xac>
 801870e:	463c      	mov	r4, r7
 8018710:	42a3      	cmp	r3, r4
 8018712:	dd24      	ble.n	801875e <_strtol_l.isra.0+0xca>
 8018714:	2e00      	cmp	r6, #0
 8018716:	db1f      	blt.n	8018758 <_strtol_l.isra.0+0xc4>
 8018718:	45a9      	cmp	r9, r5
 801871a:	d31d      	bcc.n	8018758 <_strtol_l.isra.0+0xc4>
 801871c:	d101      	bne.n	8018722 <_strtol_l.isra.0+0x8e>
 801871e:	45a2      	cmp	sl, r4
 8018720:	db1a      	blt.n	8018758 <_strtol_l.isra.0+0xc4>
 8018722:	fb05 4503 	mla	r5, r5, r3, r4
 8018726:	2601      	movs	r6, #1
 8018728:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801872c:	e7eb      	b.n	8018706 <_strtol_l.isra.0+0x72>
 801872e:	2c2b      	cmp	r4, #43	; 0x2b
 8018730:	bf08      	it	eq
 8018732:	f89e 4000 	ldrbeq.w	r4, [lr]
 8018736:	46a8      	mov	r8, r5
 8018738:	bf08      	it	eq
 801873a:	f106 0e02 	addeq.w	lr, r6, #2
 801873e:	e7c7      	b.n	80186d0 <_strtol_l.isra.0+0x3c>
 8018740:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018744:	2f19      	cmp	r7, #25
 8018746:	d801      	bhi.n	801874c <_strtol_l.isra.0+0xb8>
 8018748:	3c37      	subs	r4, #55	; 0x37
 801874a:	e7e1      	b.n	8018710 <_strtol_l.isra.0+0x7c>
 801874c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018750:	2f19      	cmp	r7, #25
 8018752:	d804      	bhi.n	801875e <_strtol_l.isra.0+0xca>
 8018754:	3c57      	subs	r4, #87	; 0x57
 8018756:	e7db      	b.n	8018710 <_strtol_l.isra.0+0x7c>
 8018758:	f04f 36ff 	mov.w	r6, #4294967295
 801875c:	e7e4      	b.n	8018728 <_strtol_l.isra.0+0x94>
 801875e:	2e00      	cmp	r6, #0
 8018760:	da05      	bge.n	801876e <_strtol_l.isra.0+0xda>
 8018762:	2322      	movs	r3, #34	; 0x22
 8018764:	6003      	str	r3, [r0, #0]
 8018766:	4665      	mov	r5, ip
 8018768:	b942      	cbnz	r2, 801877c <_strtol_l.isra.0+0xe8>
 801876a:	4628      	mov	r0, r5
 801876c:	e79d      	b.n	80186aa <_strtol_l.isra.0+0x16>
 801876e:	f1b8 0f00 	cmp.w	r8, #0
 8018772:	d000      	beq.n	8018776 <_strtol_l.isra.0+0xe2>
 8018774:	426d      	negs	r5, r5
 8018776:	2a00      	cmp	r2, #0
 8018778:	d0f7      	beq.n	801876a <_strtol_l.isra.0+0xd6>
 801877a:	b10e      	cbz	r6, 8018780 <_strtol_l.isra.0+0xec>
 801877c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8018780:	6011      	str	r1, [r2, #0]
 8018782:	e7f2      	b.n	801876a <_strtol_l.isra.0+0xd6>
 8018784:	2430      	movs	r4, #48	; 0x30
 8018786:	2b00      	cmp	r3, #0
 8018788:	d1b3      	bne.n	80186f2 <_strtol_l.isra.0+0x5e>
 801878a:	2308      	movs	r3, #8
 801878c:	e7b1      	b.n	80186f2 <_strtol_l.isra.0+0x5e>
 801878e:	2c30      	cmp	r4, #48	; 0x30
 8018790:	d0a4      	beq.n	80186dc <_strtol_l.isra.0+0x48>
 8018792:	230a      	movs	r3, #10
 8018794:	e7ad      	b.n	80186f2 <_strtol_l.isra.0+0x5e>
 8018796:	bf00      	nop
 8018798:	0801facf 	.word	0x0801facf

0801879c <strtol>:
 801879c:	4613      	mov	r3, r2
 801879e:	460a      	mov	r2, r1
 80187a0:	4601      	mov	r1, r0
 80187a2:	4802      	ldr	r0, [pc, #8]	; (80187ac <strtol+0x10>)
 80187a4:	6800      	ldr	r0, [r0, #0]
 80187a6:	f7ff bf75 	b.w	8018694 <_strtol_l.isra.0>
 80187aa:	bf00      	nop
 80187ac:	20000074 	.word	0x20000074

080187b0 <__assert_func>:
 80187b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80187b2:	4614      	mov	r4, r2
 80187b4:	461a      	mov	r2, r3
 80187b6:	4b09      	ldr	r3, [pc, #36]	; (80187dc <__assert_func+0x2c>)
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	4605      	mov	r5, r0
 80187bc:	68d8      	ldr	r0, [r3, #12]
 80187be:	b14c      	cbz	r4, 80187d4 <__assert_func+0x24>
 80187c0:	4b07      	ldr	r3, [pc, #28]	; (80187e0 <__assert_func+0x30>)
 80187c2:	9100      	str	r1, [sp, #0]
 80187c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80187c8:	4906      	ldr	r1, [pc, #24]	; (80187e4 <__assert_func+0x34>)
 80187ca:	462b      	mov	r3, r5
 80187cc:	f000 ff64 	bl	8019698 <fiprintf>
 80187d0:	f002 fbd6 	bl	801af80 <abort>
 80187d4:	4b04      	ldr	r3, [pc, #16]	; (80187e8 <__assert_func+0x38>)
 80187d6:	461c      	mov	r4, r3
 80187d8:	e7f3      	b.n	80187c2 <__assert_func+0x12>
 80187da:	bf00      	nop
 80187dc:	20000074 	.word	0x20000074
 80187e0:	0801fcd0 	.word	0x0801fcd0
 80187e4:	0801fcdd 	.word	0x0801fcdd
 80187e8:	0801fd0b 	.word	0x0801fd0b

080187ec <quorem>:
 80187ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187f0:	6903      	ldr	r3, [r0, #16]
 80187f2:	690c      	ldr	r4, [r1, #16]
 80187f4:	42a3      	cmp	r3, r4
 80187f6:	4607      	mov	r7, r0
 80187f8:	f2c0 8081 	blt.w	80188fe <quorem+0x112>
 80187fc:	3c01      	subs	r4, #1
 80187fe:	f101 0814 	add.w	r8, r1, #20
 8018802:	f100 0514 	add.w	r5, r0, #20
 8018806:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801880a:	9301      	str	r3, [sp, #4]
 801880c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018810:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018814:	3301      	adds	r3, #1
 8018816:	429a      	cmp	r2, r3
 8018818:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801881c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018820:	fbb2 f6f3 	udiv	r6, r2, r3
 8018824:	d331      	bcc.n	801888a <quorem+0x9e>
 8018826:	f04f 0e00 	mov.w	lr, #0
 801882a:	4640      	mov	r0, r8
 801882c:	46ac      	mov	ip, r5
 801882e:	46f2      	mov	sl, lr
 8018830:	f850 2b04 	ldr.w	r2, [r0], #4
 8018834:	b293      	uxth	r3, r2
 8018836:	fb06 e303 	mla	r3, r6, r3, lr
 801883a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801883e:	b29b      	uxth	r3, r3
 8018840:	ebaa 0303 	sub.w	r3, sl, r3
 8018844:	0c12      	lsrs	r2, r2, #16
 8018846:	f8dc a000 	ldr.w	sl, [ip]
 801884a:	fb06 e202 	mla	r2, r6, r2, lr
 801884e:	fa13 f38a 	uxtah	r3, r3, sl
 8018852:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018856:	fa1f fa82 	uxth.w	sl, r2
 801885a:	f8dc 2000 	ldr.w	r2, [ip]
 801885e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8018862:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018866:	b29b      	uxth	r3, r3
 8018868:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801886c:	4581      	cmp	r9, r0
 801886e:	f84c 3b04 	str.w	r3, [ip], #4
 8018872:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018876:	d2db      	bcs.n	8018830 <quorem+0x44>
 8018878:	f855 300b 	ldr.w	r3, [r5, fp]
 801887c:	b92b      	cbnz	r3, 801888a <quorem+0x9e>
 801887e:	9b01      	ldr	r3, [sp, #4]
 8018880:	3b04      	subs	r3, #4
 8018882:	429d      	cmp	r5, r3
 8018884:	461a      	mov	r2, r3
 8018886:	d32e      	bcc.n	80188e6 <quorem+0xfa>
 8018888:	613c      	str	r4, [r7, #16]
 801888a:	4638      	mov	r0, r7
 801888c:	f001 fd92 	bl	801a3b4 <__mcmp>
 8018890:	2800      	cmp	r0, #0
 8018892:	db24      	blt.n	80188de <quorem+0xf2>
 8018894:	3601      	adds	r6, #1
 8018896:	4628      	mov	r0, r5
 8018898:	f04f 0c00 	mov.w	ip, #0
 801889c:	f858 2b04 	ldr.w	r2, [r8], #4
 80188a0:	f8d0 e000 	ldr.w	lr, [r0]
 80188a4:	b293      	uxth	r3, r2
 80188a6:	ebac 0303 	sub.w	r3, ip, r3
 80188aa:	0c12      	lsrs	r2, r2, #16
 80188ac:	fa13 f38e 	uxtah	r3, r3, lr
 80188b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80188b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80188b8:	b29b      	uxth	r3, r3
 80188ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80188be:	45c1      	cmp	r9, r8
 80188c0:	f840 3b04 	str.w	r3, [r0], #4
 80188c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80188c8:	d2e8      	bcs.n	801889c <quorem+0xb0>
 80188ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80188ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80188d2:	b922      	cbnz	r2, 80188de <quorem+0xf2>
 80188d4:	3b04      	subs	r3, #4
 80188d6:	429d      	cmp	r5, r3
 80188d8:	461a      	mov	r2, r3
 80188da:	d30a      	bcc.n	80188f2 <quorem+0x106>
 80188dc:	613c      	str	r4, [r7, #16]
 80188de:	4630      	mov	r0, r6
 80188e0:	b003      	add	sp, #12
 80188e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188e6:	6812      	ldr	r2, [r2, #0]
 80188e8:	3b04      	subs	r3, #4
 80188ea:	2a00      	cmp	r2, #0
 80188ec:	d1cc      	bne.n	8018888 <quorem+0x9c>
 80188ee:	3c01      	subs	r4, #1
 80188f0:	e7c7      	b.n	8018882 <quorem+0x96>
 80188f2:	6812      	ldr	r2, [r2, #0]
 80188f4:	3b04      	subs	r3, #4
 80188f6:	2a00      	cmp	r2, #0
 80188f8:	d1f0      	bne.n	80188dc <quorem+0xf0>
 80188fa:	3c01      	subs	r4, #1
 80188fc:	e7eb      	b.n	80188d6 <quorem+0xea>
 80188fe:	2000      	movs	r0, #0
 8018900:	e7ee      	b.n	80188e0 <quorem+0xf4>
 8018902:	0000      	movs	r0, r0
 8018904:	0000      	movs	r0, r0
	...

08018908 <_dtoa_r>:
 8018908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801890c:	ed2d 8b02 	vpush	{d8}
 8018910:	ec57 6b10 	vmov	r6, r7, d0
 8018914:	b095      	sub	sp, #84	; 0x54
 8018916:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018918:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801891c:	9105      	str	r1, [sp, #20]
 801891e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8018922:	4604      	mov	r4, r0
 8018924:	9209      	str	r2, [sp, #36]	; 0x24
 8018926:	930f      	str	r3, [sp, #60]	; 0x3c
 8018928:	b975      	cbnz	r5, 8018948 <_dtoa_r+0x40>
 801892a:	2010      	movs	r0, #16
 801892c:	f7fe fa36 	bl	8016d9c <malloc>
 8018930:	4602      	mov	r2, r0
 8018932:	6260      	str	r0, [r4, #36]	; 0x24
 8018934:	b920      	cbnz	r0, 8018940 <_dtoa_r+0x38>
 8018936:	4bb2      	ldr	r3, [pc, #712]	; (8018c00 <_dtoa_r+0x2f8>)
 8018938:	21ea      	movs	r1, #234	; 0xea
 801893a:	48b2      	ldr	r0, [pc, #712]	; (8018c04 <_dtoa_r+0x2fc>)
 801893c:	f7ff ff38 	bl	80187b0 <__assert_func>
 8018940:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018944:	6005      	str	r5, [r0, #0]
 8018946:	60c5      	str	r5, [r0, #12]
 8018948:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801894a:	6819      	ldr	r1, [r3, #0]
 801894c:	b151      	cbz	r1, 8018964 <_dtoa_r+0x5c>
 801894e:	685a      	ldr	r2, [r3, #4]
 8018950:	604a      	str	r2, [r1, #4]
 8018952:	2301      	movs	r3, #1
 8018954:	4093      	lsls	r3, r2
 8018956:	608b      	str	r3, [r1, #8]
 8018958:	4620      	mov	r0, r4
 801895a:	f001 faa3 	bl	8019ea4 <_Bfree>
 801895e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018960:	2200      	movs	r2, #0
 8018962:	601a      	str	r2, [r3, #0]
 8018964:	1e3b      	subs	r3, r7, #0
 8018966:	bfb9      	ittee	lt
 8018968:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801896c:	9303      	strlt	r3, [sp, #12]
 801896e:	2300      	movge	r3, #0
 8018970:	f8c8 3000 	strge.w	r3, [r8]
 8018974:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8018978:	4ba3      	ldr	r3, [pc, #652]	; (8018c08 <_dtoa_r+0x300>)
 801897a:	bfbc      	itt	lt
 801897c:	2201      	movlt	r2, #1
 801897e:	f8c8 2000 	strlt.w	r2, [r8]
 8018982:	ea33 0309 	bics.w	r3, r3, r9
 8018986:	d11b      	bne.n	80189c0 <_dtoa_r+0xb8>
 8018988:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801898a:	f242 730f 	movw	r3, #9999	; 0x270f
 801898e:	6013      	str	r3, [r2, #0]
 8018990:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018994:	4333      	orrs	r3, r6
 8018996:	f000 857a 	beq.w	801948e <_dtoa_r+0xb86>
 801899a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801899c:	b963      	cbnz	r3, 80189b8 <_dtoa_r+0xb0>
 801899e:	4b9b      	ldr	r3, [pc, #620]	; (8018c0c <_dtoa_r+0x304>)
 80189a0:	e024      	b.n	80189ec <_dtoa_r+0xe4>
 80189a2:	4b9b      	ldr	r3, [pc, #620]	; (8018c10 <_dtoa_r+0x308>)
 80189a4:	9300      	str	r3, [sp, #0]
 80189a6:	3308      	adds	r3, #8
 80189a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80189aa:	6013      	str	r3, [r2, #0]
 80189ac:	9800      	ldr	r0, [sp, #0]
 80189ae:	b015      	add	sp, #84	; 0x54
 80189b0:	ecbd 8b02 	vpop	{d8}
 80189b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189b8:	4b94      	ldr	r3, [pc, #592]	; (8018c0c <_dtoa_r+0x304>)
 80189ba:	9300      	str	r3, [sp, #0]
 80189bc:	3303      	adds	r3, #3
 80189be:	e7f3      	b.n	80189a8 <_dtoa_r+0xa0>
 80189c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80189c4:	2200      	movs	r2, #0
 80189c6:	ec51 0b17 	vmov	r0, r1, d7
 80189ca:	2300      	movs	r3, #0
 80189cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80189d0:	f7e8 f88a 	bl	8000ae8 <__aeabi_dcmpeq>
 80189d4:	4680      	mov	r8, r0
 80189d6:	b158      	cbz	r0, 80189f0 <_dtoa_r+0xe8>
 80189d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80189da:	2301      	movs	r3, #1
 80189dc:	6013      	str	r3, [r2, #0]
 80189de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	f000 8551 	beq.w	8019488 <_dtoa_r+0xb80>
 80189e6:	488b      	ldr	r0, [pc, #556]	; (8018c14 <_dtoa_r+0x30c>)
 80189e8:	6018      	str	r0, [r3, #0]
 80189ea:	1e43      	subs	r3, r0, #1
 80189ec:	9300      	str	r3, [sp, #0]
 80189ee:	e7dd      	b.n	80189ac <_dtoa_r+0xa4>
 80189f0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80189f4:	aa12      	add	r2, sp, #72	; 0x48
 80189f6:	a913      	add	r1, sp, #76	; 0x4c
 80189f8:	4620      	mov	r0, r4
 80189fa:	f001 fdfb 	bl	801a5f4 <__d2b>
 80189fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018a02:	4683      	mov	fp, r0
 8018a04:	2d00      	cmp	r5, #0
 8018a06:	d07c      	beq.n	8018b02 <_dtoa_r+0x1fa>
 8018a08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018a0a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8018a0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018a12:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8018a16:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8018a1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8018a1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8018a22:	4b7d      	ldr	r3, [pc, #500]	; (8018c18 <_dtoa_r+0x310>)
 8018a24:	2200      	movs	r2, #0
 8018a26:	4630      	mov	r0, r6
 8018a28:	4639      	mov	r1, r7
 8018a2a:	f7e7 fc3d 	bl	80002a8 <__aeabi_dsub>
 8018a2e:	a36e      	add	r3, pc, #440	; (adr r3, 8018be8 <_dtoa_r+0x2e0>)
 8018a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a34:	f7e7 fdf0 	bl	8000618 <__aeabi_dmul>
 8018a38:	a36d      	add	r3, pc, #436	; (adr r3, 8018bf0 <_dtoa_r+0x2e8>)
 8018a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a3e:	f7e7 fc35 	bl	80002ac <__adddf3>
 8018a42:	4606      	mov	r6, r0
 8018a44:	4628      	mov	r0, r5
 8018a46:	460f      	mov	r7, r1
 8018a48:	f7e7 fd7c 	bl	8000544 <__aeabi_i2d>
 8018a4c:	a36a      	add	r3, pc, #424	; (adr r3, 8018bf8 <_dtoa_r+0x2f0>)
 8018a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a52:	f7e7 fde1 	bl	8000618 <__aeabi_dmul>
 8018a56:	4602      	mov	r2, r0
 8018a58:	460b      	mov	r3, r1
 8018a5a:	4630      	mov	r0, r6
 8018a5c:	4639      	mov	r1, r7
 8018a5e:	f7e7 fc25 	bl	80002ac <__adddf3>
 8018a62:	4606      	mov	r6, r0
 8018a64:	460f      	mov	r7, r1
 8018a66:	f7e8 f887 	bl	8000b78 <__aeabi_d2iz>
 8018a6a:	2200      	movs	r2, #0
 8018a6c:	4682      	mov	sl, r0
 8018a6e:	2300      	movs	r3, #0
 8018a70:	4630      	mov	r0, r6
 8018a72:	4639      	mov	r1, r7
 8018a74:	f7e8 f842 	bl	8000afc <__aeabi_dcmplt>
 8018a78:	b148      	cbz	r0, 8018a8e <_dtoa_r+0x186>
 8018a7a:	4650      	mov	r0, sl
 8018a7c:	f7e7 fd62 	bl	8000544 <__aeabi_i2d>
 8018a80:	4632      	mov	r2, r6
 8018a82:	463b      	mov	r3, r7
 8018a84:	f7e8 f830 	bl	8000ae8 <__aeabi_dcmpeq>
 8018a88:	b908      	cbnz	r0, 8018a8e <_dtoa_r+0x186>
 8018a8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018a8e:	f1ba 0f16 	cmp.w	sl, #22
 8018a92:	d854      	bhi.n	8018b3e <_dtoa_r+0x236>
 8018a94:	4b61      	ldr	r3, [pc, #388]	; (8018c1c <_dtoa_r+0x314>)
 8018a96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018aa2:	f7e8 f82b 	bl	8000afc <__aeabi_dcmplt>
 8018aa6:	2800      	cmp	r0, #0
 8018aa8:	d04b      	beq.n	8018b42 <_dtoa_r+0x23a>
 8018aaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018aae:	2300      	movs	r3, #0
 8018ab0:	930e      	str	r3, [sp, #56]	; 0x38
 8018ab2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018ab4:	1b5d      	subs	r5, r3, r5
 8018ab6:	1e6b      	subs	r3, r5, #1
 8018ab8:	9304      	str	r3, [sp, #16]
 8018aba:	bf43      	ittte	mi
 8018abc:	2300      	movmi	r3, #0
 8018abe:	f1c5 0801 	rsbmi	r8, r5, #1
 8018ac2:	9304      	strmi	r3, [sp, #16]
 8018ac4:	f04f 0800 	movpl.w	r8, #0
 8018ac8:	f1ba 0f00 	cmp.w	sl, #0
 8018acc:	db3b      	blt.n	8018b46 <_dtoa_r+0x23e>
 8018ace:	9b04      	ldr	r3, [sp, #16]
 8018ad0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8018ad4:	4453      	add	r3, sl
 8018ad6:	9304      	str	r3, [sp, #16]
 8018ad8:	2300      	movs	r3, #0
 8018ada:	9306      	str	r3, [sp, #24]
 8018adc:	9b05      	ldr	r3, [sp, #20]
 8018ade:	2b09      	cmp	r3, #9
 8018ae0:	d869      	bhi.n	8018bb6 <_dtoa_r+0x2ae>
 8018ae2:	2b05      	cmp	r3, #5
 8018ae4:	bfc4      	itt	gt
 8018ae6:	3b04      	subgt	r3, #4
 8018ae8:	9305      	strgt	r3, [sp, #20]
 8018aea:	9b05      	ldr	r3, [sp, #20]
 8018aec:	f1a3 0302 	sub.w	r3, r3, #2
 8018af0:	bfcc      	ite	gt
 8018af2:	2500      	movgt	r5, #0
 8018af4:	2501      	movle	r5, #1
 8018af6:	2b03      	cmp	r3, #3
 8018af8:	d869      	bhi.n	8018bce <_dtoa_r+0x2c6>
 8018afa:	e8df f003 	tbb	[pc, r3]
 8018afe:	4e2c      	.short	0x4e2c
 8018b00:	5a4c      	.short	0x5a4c
 8018b02:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8018b06:	441d      	add	r5, r3
 8018b08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8018b0c:	2b20      	cmp	r3, #32
 8018b0e:	bfc1      	itttt	gt
 8018b10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018b14:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8018b18:	fa09 f303 	lslgt.w	r3, r9, r3
 8018b1c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018b20:	bfda      	itte	le
 8018b22:	f1c3 0320 	rsble	r3, r3, #32
 8018b26:	fa06 f003 	lslle.w	r0, r6, r3
 8018b2a:	4318      	orrgt	r0, r3
 8018b2c:	f7e7 fcfa 	bl	8000524 <__aeabi_ui2d>
 8018b30:	2301      	movs	r3, #1
 8018b32:	4606      	mov	r6, r0
 8018b34:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8018b38:	3d01      	subs	r5, #1
 8018b3a:	9310      	str	r3, [sp, #64]	; 0x40
 8018b3c:	e771      	b.n	8018a22 <_dtoa_r+0x11a>
 8018b3e:	2301      	movs	r3, #1
 8018b40:	e7b6      	b.n	8018ab0 <_dtoa_r+0x1a8>
 8018b42:	900e      	str	r0, [sp, #56]	; 0x38
 8018b44:	e7b5      	b.n	8018ab2 <_dtoa_r+0x1aa>
 8018b46:	f1ca 0300 	rsb	r3, sl, #0
 8018b4a:	9306      	str	r3, [sp, #24]
 8018b4c:	2300      	movs	r3, #0
 8018b4e:	eba8 080a 	sub.w	r8, r8, sl
 8018b52:	930d      	str	r3, [sp, #52]	; 0x34
 8018b54:	e7c2      	b.n	8018adc <_dtoa_r+0x1d4>
 8018b56:	2300      	movs	r3, #0
 8018b58:	9308      	str	r3, [sp, #32]
 8018b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	dc39      	bgt.n	8018bd4 <_dtoa_r+0x2cc>
 8018b60:	f04f 0901 	mov.w	r9, #1
 8018b64:	f8cd 9004 	str.w	r9, [sp, #4]
 8018b68:	464b      	mov	r3, r9
 8018b6a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8018b6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018b70:	2200      	movs	r2, #0
 8018b72:	6042      	str	r2, [r0, #4]
 8018b74:	2204      	movs	r2, #4
 8018b76:	f102 0614 	add.w	r6, r2, #20
 8018b7a:	429e      	cmp	r6, r3
 8018b7c:	6841      	ldr	r1, [r0, #4]
 8018b7e:	d92f      	bls.n	8018be0 <_dtoa_r+0x2d8>
 8018b80:	4620      	mov	r0, r4
 8018b82:	f001 f94f 	bl	8019e24 <_Balloc>
 8018b86:	9000      	str	r0, [sp, #0]
 8018b88:	2800      	cmp	r0, #0
 8018b8a:	d14b      	bne.n	8018c24 <_dtoa_r+0x31c>
 8018b8c:	4b24      	ldr	r3, [pc, #144]	; (8018c20 <_dtoa_r+0x318>)
 8018b8e:	4602      	mov	r2, r0
 8018b90:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8018b94:	e6d1      	b.n	801893a <_dtoa_r+0x32>
 8018b96:	2301      	movs	r3, #1
 8018b98:	e7de      	b.n	8018b58 <_dtoa_r+0x250>
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	9308      	str	r3, [sp, #32]
 8018b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ba0:	eb0a 0903 	add.w	r9, sl, r3
 8018ba4:	f109 0301 	add.w	r3, r9, #1
 8018ba8:	2b01      	cmp	r3, #1
 8018baa:	9301      	str	r3, [sp, #4]
 8018bac:	bfb8      	it	lt
 8018bae:	2301      	movlt	r3, #1
 8018bb0:	e7dd      	b.n	8018b6e <_dtoa_r+0x266>
 8018bb2:	2301      	movs	r3, #1
 8018bb4:	e7f2      	b.n	8018b9c <_dtoa_r+0x294>
 8018bb6:	2501      	movs	r5, #1
 8018bb8:	2300      	movs	r3, #0
 8018bba:	9305      	str	r3, [sp, #20]
 8018bbc:	9508      	str	r5, [sp, #32]
 8018bbe:	f04f 39ff 	mov.w	r9, #4294967295
 8018bc2:	2200      	movs	r2, #0
 8018bc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8018bc8:	2312      	movs	r3, #18
 8018bca:	9209      	str	r2, [sp, #36]	; 0x24
 8018bcc:	e7cf      	b.n	8018b6e <_dtoa_r+0x266>
 8018bce:	2301      	movs	r3, #1
 8018bd0:	9308      	str	r3, [sp, #32]
 8018bd2:	e7f4      	b.n	8018bbe <_dtoa_r+0x2b6>
 8018bd4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018bd8:	f8cd 9004 	str.w	r9, [sp, #4]
 8018bdc:	464b      	mov	r3, r9
 8018bde:	e7c6      	b.n	8018b6e <_dtoa_r+0x266>
 8018be0:	3101      	adds	r1, #1
 8018be2:	6041      	str	r1, [r0, #4]
 8018be4:	0052      	lsls	r2, r2, #1
 8018be6:	e7c6      	b.n	8018b76 <_dtoa_r+0x26e>
 8018be8:	636f4361 	.word	0x636f4361
 8018bec:	3fd287a7 	.word	0x3fd287a7
 8018bf0:	8b60c8b3 	.word	0x8b60c8b3
 8018bf4:	3fc68a28 	.word	0x3fc68a28
 8018bf8:	509f79fb 	.word	0x509f79fb
 8018bfc:	3fd34413 	.word	0x3fd34413
 8018c00:	0801fc08 	.word	0x0801fc08
 8018c04:	0801fd19 	.word	0x0801fd19
 8018c08:	7ff00000 	.word	0x7ff00000
 8018c0c:	0801fd15 	.word	0x0801fd15
 8018c10:	0801fd0c 	.word	0x0801fd0c
 8018c14:	0801fbe5 	.word	0x0801fbe5
 8018c18:	3ff80000 	.word	0x3ff80000
 8018c1c:	0801fef8 	.word	0x0801fef8
 8018c20:	0801fd78 	.word	0x0801fd78
 8018c24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018c26:	9a00      	ldr	r2, [sp, #0]
 8018c28:	601a      	str	r2, [r3, #0]
 8018c2a:	9b01      	ldr	r3, [sp, #4]
 8018c2c:	2b0e      	cmp	r3, #14
 8018c2e:	f200 80ad 	bhi.w	8018d8c <_dtoa_r+0x484>
 8018c32:	2d00      	cmp	r5, #0
 8018c34:	f000 80aa 	beq.w	8018d8c <_dtoa_r+0x484>
 8018c38:	f1ba 0f00 	cmp.w	sl, #0
 8018c3c:	dd36      	ble.n	8018cac <_dtoa_r+0x3a4>
 8018c3e:	4ac3      	ldr	r2, [pc, #780]	; (8018f4c <_dtoa_r+0x644>)
 8018c40:	f00a 030f 	and.w	r3, sl, #15
 8018c44:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018c48:	ed93 7b00 	vldr	d7, [r3]
 8018c4c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8018c50:	ea4f 172a 	mov.w	r7, sl, asr #4
 8018c54:	eeb0 8a47 	vmov.f32	s16, s14
 8018c58:	eef0 8a67 	vmov.f32	s17, s15
 8018c5c:	d016      	beq.n	8018c8c <_dtoa_r+0x384>
 8018c5e:	4bbc      	ldr	r3, [pc, #752]	; (8018f50 <_dtoa_r+0x648>)
 8018c60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018c64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018c68:	f7e7 fe00 	bl	800086c <__aeabi_ddiv>
 8018c6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018c70:	f007 070f 	and.w	r7, r7, #15
 8018c74:	2503      	movs	r5, #3
 8018c76:	4eb6      	ldr	r6, [pc, #728]	; (8018f50 <_dtoa_r+0x648>)
 8018c78:	b957      	cbnz	r7, 8018c90 <_dtoa_r+0x388>
 8018c7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018c7e:	ec53 2b18 	vmov	r2, r3, d8
 8018c82:	f7e7 fdf3 	bl	800086c <__aeabi_ddiv>
 8018c86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018c8a:	e029      	b.n	8018ce0 <_dtoa_r+0x3d8>
 8018c8c:	2502      	movs	r5, #2
 8018c8e:	e7f2      	b.n	8018c76 <_dtoa_r+0x36e>
 8018c90:	07f9      	lsls	r1, r7, #31
 8018c92:	d508      	bpl.n	8018ca6 <_dtoa_r+0x39e>
 8018c94:	ec51 0b18 	vmov	r0, r1, d8
 8018c98:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018c9c:	f7e7 fcbc 	bl	8000618 <__aeabi_dmul>
 8018ca0:	ec41 0b18 	vmov	d8, r0, r1
 8018ca4:	3501      	adds	r5, #1
 8018ca6:	107f      	asrs	r7, r7, #1
 8018ca8:	3608      	adds	r6, #8
 8018caa:	e7e5      	b.n	8018c78 <_dtoa_r+0x370>
 8018cac:	f000 80a6 	beq.w	8018dfc <_dtoa_r+0x4f4>
 8018cb0:	f1ca 0600 	rsb	r6, sl, #0
 8018cb4:	4ba5      	ldr	r3, [pc, #660]	; (8018f4c <_dtoa_r+0x644>)
 8018cb6:	4fa6      	ldr	r7, [pc, #664]	; (8018f50 <_dtoa_r+0x648>)
 8018cb8:	f006 020f 	and.w	r2, r6, #15
 8018cbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cc4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018cc8:	f7e7 fca6 	bl	8000618 <__aeabi_dmul>
 8018ccc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018cd0:	1136      	asrs	r6, r6, #4
 8018cd2:	2300      	movs	r3, #0
 8018cd4:	2502      	movs	r5, #2
 8018cd6:	2e00      	cmp	r6, #0
 8018cd8:	f040 8085 	bne.w	8018de6 <_dtoa_r+0x4de>
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	d1d2      	bne.n	8018c86 <_dtoa_r+0x37e>
 8018ce0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	f000 808c 	beq.w	8018e00 <_dtoa_r+0x4f8>
 8018ce8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018cec:	4b99      	ldr	r3, [pc, #612]	; (8018f54 <_dtoa_r+0x64c>)
 8018cee:	2200      	movs	r2, #0
 8018cf0:	4630      	mov	r0, r6
 8018cf2:	4639      	mov	r1, r7
 8018cf4:	f7e7 ff02 	bl	8000afc <__aeabi_dcmplt>
 8018cf8:	2800      	cmp	r0, #0
 8018cfa:	f000 8081 	beq.w	8018e00 <_dtoa_r+0x4f8>
 8018cfe:	9b01      	ldr	r3, [sp, #4]
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d07d      	beq.n	8018e00 <_dtoa_r+0x4f8>
 8018d04:	f1b9 0f00 	cmp.w	r9, #0
 8018d08:	dd3c      	ble.n	8018d84 <_dtoa_r+0x47c>
 8018d0a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018d0e:	9307      	str	r3, [sp, #28]
 8018d10:	2200      	movs	r2, #0
 8018d12:	4b91      	ldr	r3, [pc, #580]	; (8018f58 <_dtoa_r+0x650>)
 8018d14:	4630      	mov	r0, r6
 8018d16:	4639      	mov	r1, r7
 8018d18:	f7e7 fc7e 	bl	8000618 <__aeabi_dmul>
 8018d1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018d20:	3501      	adds	r5, #1
 8018d22:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8018d26:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018d2a:	4628      	mov	r0, r5
 8018d2c:	f7e7 fc0a 	bl	8000544 <__aeabi_i2d>
 8018d30:	4632      	mov	r2, r6
 8018d32:	463b      	mov	r3, r7
 8018d34:	f7e7 fc70 	bl	8000618 <__aeabi_dmul>
 8018d38:	4b88      	ldr	r3, [pc, #544]	; (8018f5c <_dtoa_r+0x654>)
 8018d3a:	2200      	movs	r2, #0
 8018d3c:	f7e7 fab6 	bl	80002ac <__adddf3>
 8018d40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8018d44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018d48:	9303      	str	r3, [sp, #12]
 8018d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d15c      	bne.n	8018e0a <_dtoa_r+0x502>
 8018d50:	4b83      	ldr	r3, [pc, #524]	; (8018f60 <_dtoa_r+0x658>)
 8018d52:	2200      	movs	r2, #0
 8018d54:	4630      	mov	r0, r6
 8018d56:	4639      	mov	r1, r7
 8018d58:	f7e7 faa6 	bl	80002a8 <__aeabi_dsub>
 8018d5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018d60:	4606      	mov	r6, r0
 8018d62:	460f      	mov	r7, r1
 8018d64:	f7e7 fee8 	bl	8000b38 <__aeabi_dcmpgt>
 8018d68:	2800      	cmp	r0, #0
 8018d6a:	f040 8296 	bne.w	801929a <_dtoa_r+0x992>
 8018d6e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018d72:	4630      	mov	r0, r6
 8018d74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018d78:	4639      	mov	r1, r7
 8018d7a:	f7e7 febf 	bl	8000afc <__aeabi_dcmplt>
 8018d7e:	2800      	cmp	r0, #0
 8018d80:	f040 8288 	bne.w	8019294 <_dtoa_r+0x98c>
 8018d84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018d88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018d8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	f2c0 8158 	blt.w	8019044 <_dtoa_r+0x73c>
 8018d94:	f1ba 0f0e 	cmp.w	sl, #14
 8018d98:	f300 8154 	bgt.w	8019044 <_dtoa_r+0x73c>
 8018d9c:	4b6b      	ldr	r3, [pc, #428]	; (8018f4c <_dtoa_r+0x644>)
 8018d9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018da2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	f280 80e3 	bge.w	8018f74 <_dtoa_r+0x66c>
 8018dae:	9b01      	ldr	r3, [sp, #4]
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	f300 80df 	bgt.w	8018f74 <_dtoa_r+0x66c>
 8018db6:	f040 826d 	bne.w	8019294 <_dtoa_r+0x98c>
 8018dba:	4b69      	ldr	r3, [pc, #420]	; (8018f60 <_dtoa_r+0x658>)
 8018dbc:	2200      	movs	r2, #0
 8018dbe:	4640      	mov	r0, r8
 8018dc0:	4649      	mov	r1, r9
 8018dc2:	f7e7 fc29 	bl	8000618 <__aeabi_dmul>
 8018dc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018dca:	f7e7 feab 	bl	8000b24 <__aeabi_dcmpge>
 8018dce:	9e01      	ldr	r6, [sp, #4]
 8018dd0:	4637      	mov	r7, r6
 8018dd2:	2800      	cmp	r0, #0
 8018dd4:	f040 8243 	bne.w	801925e <_dtoa_r+0x956>
 8018dd8:	9d00      	ldr	r5, [sp, #0]
 8018dda:	2331      	movs	r3, #49	; 0x31
 8018ddc:	f805 3b01 	strb.w	r3, [r5], #1
 8018de0:	f10a 0a01 	add.w	sl, sl, #1
 8018de4:	e23f      	b.n	8019266 <_dtoa_r+0x95e>
 8018de6:	07f2      	lsls	r2, r6, #31
 8018de8:	d505      	bpl.n	8018df6 <_dtoa_r+0x4ee>
 8018dea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018dee:	f7e7 fc13 	bl	8000618 <__aeabi_dmul>
 8018df2:	3501      	adds	r5, #1
 8018df4:	2301      	movs	r3, #1
 8018df6:	1076      	asrs	r6, r6, #1
 8018df8:	3708      	adds	r7, #8
 8018dfa:	e76c      	b.n	8018cd6 <_dtoa_r+0x3ce>
 8018dfc:	2502      	movs	r5, #2
 8018dfe:	e76f      	b.n	8018ce0 <_dtoa_r+0x3d8>
 8018e00:	9b01      	ldr	r3, [sp, #4]
 8018e02:	f8cd a01c 	str.w	sl, [sp, #28]
 8018e06:	930c      	str	r3, [sp, #48]	; 0x30
 8018e08:	e78d      	b.n	8018d26 <_dtoa_r+0x41e>
 8018e0a:	9900      	ldr	r1, [sp, #0]
 8018e0c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018e0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018e10:	4b4e      	ldr	r3, [pc, #312]	; (8018f4c <_dtoa_r+0x644>)
 8018e12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018e16:	4401      	add	r1, r0
 8018e18:	9102      	str	r1, [sp, #8]
 8018e1a:	9908      	ldr	r1, [sp, #32]
 8018e1c:	eeb0 8a47 	vmov.f32	s16, s14
 8018e20:	eef0 8a67 	vmov.f32	s17, s15
 8018e24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018e28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018e2c:	2900      	cmp	r1, #0
 8018e2e:	d045      	beq.n	8018ebc <_dtoa_r+0x5b4>
 8018e30:	494c      	ldr	r1, [pc, #304]	; (8018f64 <_dtoa_r+0x65c>)
 8018e32:	2000      	movs	r0, #0
 8018e34:	f7e7 fd1a 	bl	800086c <__aeabi_ddiv>
 8018e38:	ec53 2b18 	vmov	r2, r3, d8
 8018e3c:	f7e7 fa34 	bl	80002a8 <__aeabi_dsub>
 8018e40:	9d00      	ldr	r5, [sp, #0]
 8018e42:	ec41 0b18 	vmov	d8, r0, r1
 8018e46:	4639      	mov	r1, r7
 8018e48:	4630      	mov	r0, r6
 8018e4a:	f7e7 fe95 	bl	8000b78 <__aeabi_d2iz>
 8018e4e:	900c      	str	r0, [sp, #48]	; 0x30
 8018e50:	f7e7 fb78 	bl	8000544 <__aeabi_i2d>
 8018e54:	4602      	mov	r2, r0
 8018e56:	460b      	mov	r3, r1
 8018e58:	4630      	mov	r0, r6
 8018e5a:	4639      	mov	r1, r7
 8018e5c:	f7e7 fa24 	bl	80002a8 <__aeabi_dsub>
 8018e60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018e62:	3330      	adds	r3, #48	; 0x30
 8018e64:	f805 3b01 	strb.w	r3, [r5], #1
 8018e68:	ec53 2b18 	vmov	r2, r3, d8
 8018e6c:	4606      	mov	r6, r0
 8018e6e:	460f      	mov	r7, r1
 8018e70:	f7e7 fe44 	bl	8000afc <__aeabi_dcmplt>
 8018e74:	2800      	cmp	r0, #0
 8018e76:	d165      	bne.n	8018f44 <_dtoa_r+0x63c>
 8018e78:	4632      	mov	r2, r6
 8018e7a:	463b      	mov	r3, r7
 8018e7c:	4935      	ldr	r1, [pc, #212]	; (8018f54 <_dtoa_r+0x64c>)
 8018e7e:	2000      	movs	r0, #0
 8018e80:	f7e7 fa12 	bl	80002a8 <__aeabi_dsub>
 8018e84:	ec53 2b18 	vmov	r2, r3, d8
 8018e88:	f7e7 fe38 	bl	8000afc <__aeabi_dcmplt>
 8018e8c:	2800      	cmp	r0, #0
 8018e8e:	f040 80b9 	bne.w	8019004 <_dtoa_r+0x6fc>
 8018e92:	9b02      	ldr	r3, [sp, #8]
 8018e94:	429d      	cmp	r5, r3
 8018e96:	f43f af75 	beq.w	8018d84 <_dtoa_r+0x47c>
 8018e9a:	4b2f      	ldr	r3, [pc, #188]	; (8018f58 <_dtoa_r+0x650>)
 8018e9c:	ec51 0b18 	vmov	r0, r1, d8
 8018ea0:	2200      	movs	r2, #0
 8018ea2:	f7e7 fbb9 	bl	8000618 <__aeabi_dmul>
 8018ea6:	4b2c      	ldr	r3, [pc, #176]	; (8018f58 <_dtoa_r+0x650>)
 8018ea8:	ec41 0b18 	vmov	d8, r0, r1
 8018eac:	2200      	movs	r2, #0
 8018eae:	4630      	mov	r0, r6
 8018eb0:	4639      	mov	r1, r7
 8018eb2:	f7e7 fbb1 	bl	8000618 <__aeabi_dmul>
 8018eb6:	4606      	mov	r6, r0
 8018eb8:	460f      	mov	r7, r1
 8018eba:	e7c4      	b.n	8018e46 <_dtoa_r+0x53e>
 8018ebc:	ec51 0b17 	vmov	r0, r1, d7
 8018ec0:	f7e7 fbaa 	bl	8000618 <__aeabi_dmul>
 8018ec4:	9b02      	ldr	r3, [sp, #8]
 8018ec6:	9d00      	ldr	r5, [sp, #0]
 8018ec8:	930c      	str	r3, [sp, #48]	; 0x30
 8018eca:	ec41 0b18 	vmov	d8, r0, r1
 8018ece:	4639      	mov	r1, r7
 8018ed0:	4630      	mov	r0, r6
 8018ed2:	f7e7 fe51 	bl	8000b78 <__aeabi_d2iz>
 8018ed6:	9011      	str	r0, [sp, #68]	; 0x44
 8018ed8:	f7e7 fb34 	bl	8000544 <__aeabi_i2d>
 8018edc:	4602      	mov	r2, r0
 8018ede:	460b      	mov	r3, r1
 8018ee0:	4630      	mov	r0, r6
 8018ee2:	4639      	mov	r1, r7
 8018ee4:	f7e7 f9e0 	bl	80002a8 <__aeabi_dsub>
 8018ee8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018eea:	3330      	adds	r3, #48	; 0x30
 8018eec:	f805 3b01 	strb.w	r3, [r5], #1
 8018ef0:	9b02      	ldr	r3, [sp, #8]
 8018ef2:	429d      	cmp	r5, r3
 8018ef4:	4606      	mov	r6, r0
 8018ef6:	460f      	mov	r7, r1
 8018ef8:	f04f 0200 	mov.w	r2, #0
 8018efc:	d134      	bne.n	8018f68 <_dtoa_r+0x660>
 8018efe:	4b19      	ldr	r3, [pc, #100]	; (8018f64 <_dtoa_r+0x65c>)
 8018f00:	ec51 0b18 	vmov	r0, r1, d8
 8018f04:	f7e7 f9d2 	bl	80002ac <__adddf3>
 8018f08:	4602      	mov	r2, r0
 8018f0a:	460b      	mov	r3, r1
 8018f0c:	4630      	mov	r0, r6
 8018f0e:	4639      	mov	r1, r7
 8018f10:	f7e7 fe12 	bl	8000b38 <__aeabi_dcmpgt>
 8018f14:	2800      	cmp	r0, #0
 8018f16:	d175      	bne.n	8019004 <_dtoa_r+0x6fc>
 8018f18:	ec53 2b18 	vmov	r2, r3, d8
 8018f1c:	4911      	ldr	r1, [pc, #68]	; (8018f64 <_dtoa_r+0x65c>)
 8018f1e:	2000      	movs	r0, #0
 8018f20:	f7e7 f9c2 	bl	80002a8 <__aeabi_dsub>
 8018f24:	4602      	mov	r2, r0
 8018f26:	460b      	mov	r3, r1
 8018f28:	4630      	mov	r0, r6
 8018f2a:	4639      	mov	r1, r7
 8018f2c:	f7e7 fde6 	bl	8000afc <__aeabi_dcmplt>
 8018f30:	2800      	cmp	r0, #0
 8018f32:	f43f af27 	beq.w	8018d84 <_dtoa_r+0x47c>
 8018f36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018f38:	1e6b      	subs	r3, r5, #1
 8018f3a:	930c      	str	r3, [sp, #48]	; 0x30
 8018f3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018f40:	2b30      	cmp	r3, #48	; 0x30
 8018f42:	d0f8      	beq.n	8018f36 <_dtoa_r+0x62e>
 8018f44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018f48:	e04a      	b.n	8018fe0 <_dtoa_r+0x6d8>
 8018f4a:	bf00      	nop
 8018f4c:	0801fef8 	.word	0x0801fef8
 8018f50:	0801fed0 	.word	0x0801fed0
 8018f54:	3ff00000 	.word	0x3ff00000
 8018f58:	40240000 	.word	0x40240000
 8018f5c:	401c0000 	.word	0x401c0000
 8018f60:	40140000 	.word	0x40140000
 8018f64:	3fe00000 	.word	0x3fe00000
 8018f68:	4baf      	ldr	r3, [pc, #700]	; (8019228 <_dtoa_r+0x920>)
 8018f6a:	f7e7 fb55 	bl	8000618 <__aeabi_dmul>
 8018f6e:	4606      	mov	r6, r0
 8018f70:	460f      	mov	r7, r1
 8018f72:	e7ac      	b.n	8018ece <_dtoa_r+0x5c6>
 8018f74:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018f78:	9d00      	ldr	r5, [sp, #0]
 8018f7a:	4642      	mov	r2, r8
 8018f7c:	464b      	mov	r3, r9
 8018f7e:	4630      	mov	r0, r6
 8018f80:	4639      	mov	r1, r7
 8018f82:	f7e7 fc73 	bl	800086c <__aeabi_ddiv>
 8018f86:	f7e7 fdf7 	bl	8000b78 <__aeabi_d2iz>
 8018f8a:	9002      	str	r0, [sp, #8]
 8018f8c:	f7e7 fada 	bl	8000544 <__aeabi_i2d>
 8018f90:	4642      	mov	r2, r8
 8018f92:	464b      	mov	r3, r9
 8018f94:	f7e7 fb40 	bl	8000618 <__aeabi_dmul>
 8018f98:	4602      	mov	r2, r0
 8018f9a:	460b      	mov	r3, r1
 8018f9c:	4630      	mov	r0, r6
 8018f9e:	4639      	mov	r1, r7
 8018fa0:	f7e7 f982 	bl	80002a8 <__aeabi_dsub>
 8018fa4:	9e02      	ldr	r6, [sp, #8]
 8018fa6:	9f01      	ldr	r7, [sp, #4]
 8018fa8:	3630      	adds	r6, #48	; 0x30
 8018faa:	f805 6b01 	strb.w	r6, [r5], #1
 8018fae:	9e00      	ldr	r6, [sp, #0]
 8018fb0:	1bae      	subs	r6, r5, r6
 8018fb2:	42b7      	cmp	r7, r6
 8018fb4:	4602      	mov	r2, r0
 8018fb6:	460b      	mov	r3, r1
 8018fb8:	d137      	bne.n	801902a <_dtoa_r+0x722>
 8018fba:	f7e7 f977 	bl	80002ac <__adddf3>
 8018fbe:	4642      	mov	r2, r8
 8018fc0:	464b      	mov	r3, r9
 8018fc2:	4606      	mov	r6, r0
 8018fc4:	460f      	mov	r7, r1
 8018fc6:	f7e7 fdb7 	bl	8000b38 <__aeabi_dcmpgt>
 8018fca:	b9c8      	cbnz	r0, 8019000 <_dtoa_r+0x6f8>
 8018fcc:	4642      	mov	r2, r8
 8018fce:	464b      	mov	r3, r9
 8018fd0:	4630      	mov	r0, r6
 8018fd2:	4639      	mov	r1, r7
 8018fd4:	f7e7 fd88 	bl	8000ae8 <__aeabi_dcmpeq>
 8018fd8:	b110      	cbz	r0, 8018fe0 <_dtoa_r+0x6d8>
 8018fda:	9b02      	ldr	r3, [sp, #8]
 8018fdc:	07d9      	lsls	r1, r3, #31
 8018fde:	d40f      	bmi.n	8019000 <_dtoa_r+0x6f8>
 8018fe0:	4620      	mov	r0, r4
 8018fe2:	4659      	mov	r1, fp
 8018fe4:	f000 ff5e 	bl	8019ea4 <_Bfree>
 8018fe8:	2300      	movs	r3, #0
 8018fea:	702b      	strb	r3, [r5, #0]
 8018fec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018fee:	f10a 0001 	add.w	r0, sl, #1
 8018ff2:	6018      	str	r0, [r3, #0]
 8018ff4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	f43f acd8 	beq.w	80189ac <_dtoa_r+0xa4>
 8018ffc:	601d      	str	r5, [r3, #0]
 8018ffe:	e4d5      	b.n	80189ac <_dtoa_r+0xa4>
 8019000:	f8cd a01c 	str.w	sl, [sp, #28]
 8019004:	462b      	mov	r3, r5
 8019006:	461d      	mov	r5, r3
 8019008:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801900c:	2a39      	cmp	r2, #57	; 0x39
 801900e:	d108      	bne.n	8019022 <_dtoa_r+0x71a>
 8019010:	9a00      	ldr	r2, [sp, #0]
 8019012:	429a      	cmp	r2, r3
 8019014:	d1f7      	bne.n	8019006 <_dtoa_r+0x6fe>
 8019016:	9a07      	ldr	r2, [sp, #28]
 8019018:	9900      	ldr	r1, [sp, #0]
 801901a:	3201      	adds	r2, #1
 801901c:	9207      	str	r2, [sp, #28]
 801901e:	2230      	movs	r2, #48	; 0x30
 8019020:	700a      	strb	r2, [r1, #0]
 8019022:	781a      	ldrb	r2, [r3, #0]
 8019024:	3201      	adds	r2, #1
 8019026:	701a      	strb	r2, [r3, #0]
 8019028:	e78c      	b.n	8018f44 <_dtoa_r+0x63c>
 801902a:	4b7f      	ldr	r3, [pc, #508]	; (8019228 <_dtoa_r+0x920>)
 801902c:	2200      	movs	r2, #0
 801902e:	f7e7 faf3 	bl	8000618 <__aeabi_dmul>
 8019032:	2200      	movs	r2, #0
 8019034:	2300      	movs	r3, #0
 8019036:	4606      	mov	r6, r0
 8019038:	460f      	mov	r7, r1
 801903a:	f7e7 fd55 	bl	8000ae8 <__aeabi_dcmpeq>
 801903e:	2800      	cmp	r0, #0
 8019040:	d09b      	beq.n	8018f7a <_dtoa_r+0x672>
 8019042:	e7cd      	b.n	8018fe0 <_dtoa_r+0x6d8>
 8019044:	9a08      	ldr	r2, [sp, #32]
 8019046:	2a00      	cmp	r2, #0
 8019048:	f000 80c4 	beq.w	80191d4 <_dtoa_r+0x8cc>
 801904c:	9a05      	ldr	r2, [sp, #20]
 801904e:	2a01      	cmp	r2, #1
 8019050:	f300 80a8 	bgt.w	80191a4 <_dtoa_r+0x89c>
 8019054:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019056:	2a00      	cmp	r2, #0
 8019058:	f000 80a0 	beq.w	801919c <_dtoa_r+0x894>
 801905c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8019060:	9e06      	ldr	r6, [sp, #24]
 8019062:	4645      	mov	r5, r8
 8019064:	9a04      	ldr	r2, [sp, #16]
 8019066:	2101      	movs	r1, #1
 8019068:	441a      	add	r2, r3
 801906a:	4620      	mov	r0, r4
 801906c:	4498      	add	r8, r3
 801906e:	9204      	str	r2, [sp, #16]
 8019070:	f001 f81e 	bl	801a0b0 <__i2b>
 8019074:	4607      	mov	r7, r0
 8019076:	2d00      	cmp	r5, #0
 8019078:	dd0b      	ble.n	8019092 <_dtoa_r+0x78a>
 801907a:	9b04      	ldr	r3, [sp, #16]
 801907c:	2b00      	cmp	r3, #0
 801907e:	dd08      	ble.n	8019092 <_dtoa_r+0x78a>
 8019080:	42ab      	cmp	r3, r5
 8019082:	9a04      	ldr	r2, [sp, #16]
 8019084:	bfa8      	it	ge
 8019086:	462b      	movge	r3, r5
 8019088:	eba8 0803 	sub.w	r8, r8, r3
 801908c:	1aed      	subs	r5, r5, r3
 801908e:	1ad3      	subs	r3, r2, r3
 8019090:	9304      	str	r3, [sp, #16]
 8019092:	9b06      	ldr	r3, [sp, #24]
 8019094:	b1fb      	cbz	r3, 80190d6 <_dtoa_r+0x7ce>
 8019096:	9b08      	ldr	r3, [sp, #32]
 8019098:	2b00      	cmp	r3, #0
 801909a:	f000 809f 	beq.w	80191dc <_dtoa_r+0x8d4>
 801909e:	2e00      	cmp	r6, #0
 80190a0:	dd11      	ble.n	80190c6 <_dtoa_r+0x7be>
 80190a2:	4639      	mov	r1, r7
 80190a4:	4632      	mov	r2, r6
 80190a6:	4620      	mov	r0, r4
 80190a8:	f001 f8be 	bl	801a228 <__pow5mult>
 80190ac:	465a      	mov	r2, fp
 80190ae:	4601      	mov	r1, r0
 80190b0:	4607      	mov	r7, r0
 80190b2:	4620      	mov	r0, r4
 80190b4:	f001 f812 	bl	801a0dc <__multiply>
 80190b8:	4659      	mov	r1, fp
 80190ba:	9007      	str	r0, [sp, #28]
 80190bc:	4620      	mov	r0, r4
 80190be:	f000 fef1 	bl	8019ea4 <_Bfree>
 80190c2:	9b07      	ldr	r3, [sp, #28]
 80190c4:	469b      	mov	fp, r3
 80190c6:	9b06      	ldr	r3, [sp, #24]
 80190c8:	1b9a      	subs	r2, r3, r6
 80190ca:	d004      	beq.n	80190d6 <_dtoa_r+0x7ce>
 80190cc:	4659      	mov	r1, fp
 80190ce:	4620      	mov	r0, r4
 80190d0:	f001 f8aa 	bl	801a228 <__pow5mult>
 80190d4:	4683      	mov	fp, r0
 80190d6:	2101      	movs	r1, #1
 80190d8:	4620      	mov	r0, r4
 80190da:	f000 ffe9 	bl	801a0b0 <__i2b>
 80190de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	4606      	mov	r6, r0
 80190e4:	dd7c      	ble.n	80191e0 <_dtoa_r+0x8d8>
 80190e6:	461a      	mov	r2, r3
 80190e8:	4601      	mov	r1, r0
 80190ea:	4620      	mov	r0, r4
 80190ec:	f001 f89c 	bl	801a228 <__pow5mult>
 80190f0:	9b05      	ldr	r3, [sp, #20]
 80190f2:	2b01      	cmp	r3, #1
 80190f4:	4606      	mov	r6, r0
 80190f6:	dd76      	ble.n	80191e6 <_dtoa_r+0x8de>
 80190f8:	2300      	movs	r3, #0
 80190fa:	9306      	str	r3, [sp, #24]
 80190fc:	6933      	ldr	r3, [r6, #16]
 80190fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8019102:	6918      	ldr	r0, [r3, #16]
 8019104:	f000 ff84 	bl	801a010 <__hi0bits>
 8019108:	f1c0 0020 	rsb	r0, r0, #32
 801910c:	9b04      	ldr	r3, [sp, #16]
 801910e:	4418      	add	r0, r3
 8019110:	f010 001f 	ands.w	r0, r0, #31
 8019114:	f000 8086 	beq.w	8019224 <_dtoa_r+0x91c>
 8019118:	f1c0 0320 	rsb	r3, r0, #32
 801911c:	2b04      	cmp	r3, #4
 801911e:	dd7f      	ble.n	8019220 <_dtoa_r+0x918>
 8019120:	f1c0 001c 	rsb	r0, r0, #28
 8019124:	9b04      	ldr	r3, [sp, #16]
 8019126:	4403      	add	r3, r0
 8019128:	4480      	add	r8, r0
 801912a:	4405      	add	r5, r0
 801912c:	9304      	str	r3, [sp, #16]
 801912e:	f1b8 0f00 	cmp.w	r8, #0
 8019132:	dd05      	ble.n	8019140 <_dtoa_r+0x838>
 8019134:	4659      	mov	r1, fp
 8019136:	4642      	mov	r2, r8
 8019138:	4620      	mov	r0, r4
 801913a:	f001 f8cf 	bl	801a2dc <__lshift>
 801913e:	4683      	mov	fp, r0
 8019140:	9b04      	ldr	r3, [sp, #16]
 8019142:	2b00      	cmp	r3, #0
 8019144:	dd05      	ble.n	8019152 <_dtoa_r+0x84a>
 8019146:	4631      	mov	r1, r6
 8019148:	461a      	mov	r2, r3
 801914a:	4620      	mov	r0, r4
 801914c:	f001 f8c6 	bl	801a2dc <__lshift>
 8019150:	4606      	mov	r6, r0
 8019152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019154:	2b00      	cmp	r3, #0
 8019156:	d069      	beq.n	801922c <_dtoa_r+0x924>
 8019158:	4631      	mov	r1, r6
 801915a:	4658      	mov	r0, fp
 801915c:	f001 f92a 	bl	801a3b4 <__mcmp>
 8019160:	2800      	cmp	r0, #0
 8019162:	da63      	bge.n	801922c <_dtoa_r+0x924>
 8019164:	2300      	movs	r3, #0
 8019166:	4659      	mov	r1, fp
 8019168:	220a      	movs	r2, #10
 801916a:	4620      	mov	r0, r4
 801916c:	f000 febc 	bl	8019ee8 <__multadd>
 8019170:	9b08      	ldr	r3, [sp, #32]
 8019172:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019176:	4683      	mov	fp, r0
 8019178:	2b00      	cmp	r3, #0
 801917a:	f000 818f 	beq.w	801949c <_dtoa_r+0xb94>
 801917e:	4639      	mov	r1, r7
 8019180:	2300      	movs	r3, #0
 8019182:	220a      	movs	r2, #10
 8019184:	4620      	mov	r0, r4
 8019186:	f000 feaf 	bl	8019ee8 <__multadd>
 801918a:	f1b9 0f00 	cmp.w	r9, #0
 801918e:	4607      	mov	r7, r0
 8019190:	f300 808e 	bgt.w	80192b0 <_dtoa_r+0x9a8>
 8019194:	9b05      	ldr	r3, [sp, #20]
 8019196:	2b02      	cmp	r3, #2
 8019198:	dc50      	bgt.n	801923c <_dtoa_r+0x934>
 801919a:	e089      	b.n	80192b0 <_dtoa_r+0x9a8>
 801919c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801919e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80191a2:	e75d      	b.n	8019060 <_dtoa_r+0x758>
 80191a4:	9b01      	ldr	r3, [sp, #4]
 80191a6:	1e5e      	subs	r6, r3, #1
 80191a8:	9b06      	ldr	r3, [sp, #24]
 80191aa:	42b3      	cmp	r3, r6
 80191ac:	bfbf      	itttt	lt
 80191ae:	9b06      	ldrlt	r3, [sp, #24]
 80191b0:	9606      	strlt	r6, [sp, #24]
 80191b2:	1af2      	sublt	r2, r6, r3
 80191b4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80191b6:	bfb6      	itet	lt
 80191b8:	189b      	addlt	r3, r3, r2
 80191ba:	1b9e      	subge	r6, r3, r6
 80191bc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80191be:	9b01      	ldr	r3, [sp, #4]
 80191c0:	bfb8      	it	lt
 80191c2:	2600      	movlt	r6, #0
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	bfb5      	itete	lt
 80191c8:	eba8 0503 	sublt.w	r5, r8, r3
 80191cc:	9b01      	ldrge	r3, [sp, #4]
 80191ce:	2300      	movlt	r3, #0
 80191d0:	4645      	movge	r5, r8
 80191d2:	e747      	b.n	8019064 <_dtoa_r+0x75c>
 80191d4:	9e06      	ldr	r6, [sp, #24]
 80191d6:	9f08      	ldr	r7, [sp, #32]
 80191d8:	4645      	mov	r5, r8
 80191da:	e74c      	b.n	8019076 <_dtoa_r+0x76e>
 80191dc:	9a06      	ldr	r2, [sp, #24]
 80191de:	e775      	b.n	80190cc <_dtoa_r+0x7c4>
 80191e0:	9b05      	ldr	r3, [sp, #20]
 80191e2:	2b01      	cmp	r3, #1
 80191e4:	dc18      	bgt.n	8019218 <_dtoa_r+0x910>
 80191e6:	9b02      	ldr	r3, [sp, #8]
 80191e8:	b9b3      	cbnz	r3, 8019218 <_dtoa_r+0x910>
 80191ea:	9b03      	ldr	r3, [sp, #12]
 80191ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80191f0:	b9a3      	cbnz	r3, 801921c <_dtoa_r+0x914>
 80191f2:	9b03      	ldr	r3, [sp, #12]
 80191f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80191f8:	0d1b      	lsrs	r3, r3, #20
 80191fa:	051b      	lsls	r3, r3, #20
 80191fc:	b12b      	cbz	r3, 801920a <_dtoa_r+0x902>
 80191fe:	9b04      	ldr	r3, [sp, #16]
 8019200:	3301      	adds	r3, #1
 8019202:	9304      	str	r3, [sp, #16]
 8019204:	f108 0801 	add.w	r8, r8, #1
 8019208:	2301      	movs	r3, #1
 801920a:	9306      	str	r3, [sp, #24]
 801920c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801920e:	2b00      	cmp	r3, #0
 8019210:	f47f af74 	bne.w	80190fc <_dtoa_r+0x7f4>
 8019214:	2001      	movs	r0, #1
 8019216:	e779      	b.n	801910c <_dtoa_r+0x804>
 8019218:	2300      	movs	r3, #0
 801921a:	e7f6      	b.n	801920a <_dtoa_r+0x902>
 801921c:	9b02      	ldr	r3, [sp, #8]
 801921e:	e7f4      	b.n	801920a <_dtoa_r+0x902>
 8019220:	d085      	beq.n	801912e <_dtoa_r+0x826>
 8019222:	4618      	mov	r0, r3
 8019224:	301c      	adds	r0, #28
 8019226:	e77d      	b.n	8019124 <_dtoa_r+0x81c>
 8019228:	40240000 	.word	0x40240000
 801922c:	9b01      	ldr	r3, [sp, #4]
 801922e:	2b00      	cmp	r3, #0
 8019230:	dc38      	bgt.n	80192a4 <_dtoa_r+0x99c>
 8019232:	9b05      	ldr	r3, [sp, #20]
 8019234:	2b02      	cmp	r3, #2
 8019236:	dd35      	ble.n	80192a4 <_dtoa_r+0x99c>
 8019238:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801923c:	f1b9 0f00 	cmp.w	r9, #0
 8019240:	d10d      	bne.n	801925e <_dtoa_r+0x956>
 8019242:	4631      	mov	r1, r6
 8019244:	464b      	mov	r3, r9
 8019246:	2205      	movs	r2, #5
 8019248:	4620      	mov	r0, r4
 801924a:	f000 fe4d 	bl	8019ee8 <__multadd>
 801924e:	4601      	mov	r1, r0
 8019250:	4606      	mov	r6, r0
 8019252:	4658      	mov	r0, fp
 8019254:	f001 f8ae 	bl	801a3b4 <__mcmp>
 8019258:	2800      	cmp	r0, #0
 801925a:	f73f adbd 	bgt.w	8018dd8 <_dtoa_r+0x4d0>
 801925e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019260:	9d00      	ldr	r5, [sp, #0]
 8019262:	ea6f 0a03 	mvn.w	sl, r3
 8019266:	f04f 0800 	mov.w	r8, #0
 801926a:	4631      	mov	r1, r6
 801926c:	4620      	mov	r0, r4
 801926e:	f000 fe19 	bl	8019ea4 <_Bfree>
 8019272:	2f00      	cmp	r7, #0
 8019274:	f43f aeb4 	beq.w	8018fe0 <_dtoa_r+0x6d8>
 8019278:	f1b8 0f00 	cmp.w	r8, #0
 801927c:	d005      	beq.n	801928a <_dtoa_r+0x982>
 801927e:	45b8      	cmp	r8, r7
 8019280:	d003      	beq.n	801928a <_dtoa_r+0x982>
 8019282:	4641      	mov	r1, r8
 8019284:	4620      	mov	r0, r4
 8019286:	f000 fe0d 	bl	8019ea4 <_Bfree>
 801928a:	4639      	mov	r1, r7
 801928c:	4620      	mov	r0, r4
 801928e:	f000 fe09 	bl	8019ea4 <_Bfree>
 8019292:	e6a5      	b.n	8018fe0 <_dtoa_r+0x6d8>
 8019294:	2600      	movs	r6, #0
 8019296:	4637      	mov	r7, r6
 8019298:	e7e1      	b.n	801925e <_dtoa_r+0x956>
 801929a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801929c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80192a0:	4637      	mov	r7, r6
 80192a2:	e599      	b.n	8018dd8 <_dtoa_r+0x4d0>
 80192a4:	9b08      	ldr	r3, [sp, #32]
 80192a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	f000 80fd 	beq.w	80194aa <_dtoa_r+0xba2>
 80192b0:	2d00      	cmp	r5, #0
 80192b2:	dd05      	ble.n	80192c0 <_dtoa_r+0x9b8>
 80192b4:	4639      	mov	r1, r7
 80192b6:	462a      	mov	r2, r5
 80192b8:	4620      	mov	r0, r4
 80192ba:	f001 f80f 	bl	801a2dc <__lshift>
 80192be:	4607      	mov	r7, r0
 80192c0:	9b06      	ldr	r3, [sp, #24]
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d05c      	beq.n	8019380 <_dtoa_r+0xa78>
 80192c6:	6879      	ldr	r1, [r7, #4]
 80192c8:	4620      	mov	r0, r4
 80192ca:	f000 fdab 	bl	8019e24 <_Balloc>
 80192ce:	4605      	mov	r5, r0
 80192d0:	b928      	cbnz	r0, 80192de <_dtoa_r+0x9d6>
 80192d2:	4b80      	ldr	r3, [pc, #512]	; (80194d4 <_dtoa_r+0xbcc>)
 80192d4:	4602      	mov	r2, r0
 80192d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80192da:	f7ff bb2e 	b.w	801893a <_dtoa_r+0x32>
 80192de:	693a      	ldr	r2, [r7, #16]
 80192e0:	3202      	adds	r2, #2
 80192e2:	0092      	lsls	r2, r2, #2
 80192e4:	f107 010c 	add.w	r1, r7, #12
 80192e8:	300c      	adds	r0, #12
 80192ea:	f7fd fd75 	bl	8016dd8 <memcpy>
 80192ee:	2201      	movs	r2, #1
 80192f0:	4629      	mov	r1, r5
 80192f2:	4620      	mov	r0, r4
 80192f4:	f000 fff2 	bl	801a2dc <__lshift>
 80192f8:	9b00      	ldr	r3, [sp, #0]
 80192fa:	3301      	adds	r3, #1
 80192fc:	9301      	str	r3, [sp, #4]
 80192fe:	9b00      	ldr	r3, [sp, #0]
 8019300:	444b      	add	r3, r9
 8019302:	9307      	str	r3, [sp, #28]
 8019304:	9b02      	ldr	r3, [sp, #8]
 8019306:	f003 0301 	and.w	r3, r3, #1
 801930a:	46b8      	mov	r8, r7
 801930c:	9306      	str	r3, [sp, #24]
 801930e:	4607      	mov	r7, r0
 8019310:	9b01      	ldr	r3, [sp, #4]
 8019312:	4631      	mov	r1, r6
 8019314:	3b01      	subs	r3, #1
 8019316:	4658      	mov	r0, fp
 8019318:	9302      	str	r3, [sp, #8]
 801931a:	f7ff fa67 	bl	80187ec <quorem>
 801931e:	4603      	mov	r3, r0
 8019320:	3330      	adds	r3, #48	; 0x30
 8019322:	9004      	str	r0, [sp, #16]
 8019324:	4641      	mov	r1, r8
 8019326:	4658      	mov	r0, fp
 8019328:	9308      	str	r3, [sp, #32]
 801932a:	f001 f843 	bl	801a3b4 <__mcmp>
 801932e:	463a      	mov	r2, r7
 8019330:	4681      	mov	r9, r0
 8019332:	4631      	mov	r1, r6
 8019334:	4620      	mov	r0, r4
 8019336:	f001 f859 	bl	801a3ec <__mdiff>
 801933a:	68c2      	ldr	r2, [r0, #12]
 801933c:	9b08      	ldr	r3, [sp, #32]
 801933e:	4605      	mov	r5, r0
 8019340:	bb02      	cbnz	r2, 8019384 <_dtoa_r+0xa7c>
 8019342:	4601      	mov	r1, r0
 8019344:	4658      	mov	r0, fp
 8019346:	f001 f835 	bl	801a3b4 <__mcmp>
 801934a:	9b08      	ldr	r3, [sp, #32]
 801934c:	4602      	mov	r2, r0
 801934e:	4629      	mov	r1, r5
 8019350:	4620      	mov	r0, r4
 8019352:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8019356:	f000 fda5 	bl	8019ea4 <_Bfree>
 801935a:	9b05      	ldr	r3, [sp, #20]
 801935c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801935e:	9d01      	ldr	r5, [sp, #4]
 8019360:	ea43 0102 	orr.w	r1, r3, r2
 8019364:	9b06      	ldr	r3, [sp, #24]
 8019366:	430b      	orrs	r3, r1
 8019368:	9b08      	ldr	r3, [sp, #32]
 801936a:	d10d      	bne.n	8019388 <_dtoa_r+0xa80>
 801936c:	2b39      	cmp	r3, #57	; 0x39
 801936e:	d029      	beq.n	80193c4 <_dtoa_r+0xabc>
 8019370:	f1b9 0f00 	cmp.w	r9, #0
 8019374:	dd01      	ble.n	801937a <_dtoa_r+0xa72>
 8019376:	9b04      	ldr	r3, [sp, #16]
 8019378:	3331      	adds	r3, #49	; 0x31
 801937a:	9a02      	ldr	r2, [sp, #8]
 801937c:	7013      	strb	r3, [r2, #0]
 801937e:	e774      	b.n	801926a <_dtoa_r+0x962>
 8019380:	4638      	mov	r0, r7
 8019382:	e7b9      	b.n	80192f8 <_dtoa_r+0x9f0>
 8019384:	2201      	movs	r2, #1
 8019386:	e7e2      	b.n	801934e <_dtoa_r+0xa46>
 8019388:	f1b9 0f00 	cmp.w	r9, #0
 801938c:	db06      	blt.n	801939c <_dtoa_r+0xa94>
 801938e:	9905      	ldr	r1, [sp, #20]
 8019390:	ea41 0909 	orr.w	r9, r1, r9
 8019394:	9906      	ldr	r1, [sp, #24]
 8019396:	ea59 0101 	orrs.w	r1, r9, r1
 801939a:	d120      	bne.n	80193de <_dtoa_r+0xad6>
 801939c:	2a00      	cmp	r2, #0
 801939e:	ddec      	ble.n	801937a <_dtoa_r+0xa72>
 80193a0:	4659      	mov	r1, fp
 80193a2:	2201      	movs	r2, #1
 80193a4:	4620      	mov	r0, r4
 80193a6:	9301      	str	r3, [sp, #4]
 80193a8:	f000 ff98 	bl	801a2dc <__lshift>
 80193ac:	4631      	mov	r1, r6
 80193ae:	4683      	mov	fp, r0
 80193b0:	f001 f800 	bl	801a3b4 <__mcmp>
 80193b4:	2800      	cmp	r0, #0
 80193b6:	9b01      	ldr	r3, [sp, #4]
 80193b8:	dc02      	bgt.n	80193c0 <_dtoa_r+0xab8>
 80193ba:	d1de      	bne.n	801937a <_dtoa_r+0xa72>
 80193bc:	07da      	lsls	r2, r3, #31
 80193be:	d5dc      	bpl.n	801937a <_dtoa_r+0xa72>
 80193c0:	2b39      	cmp	r3, #57	; 0x39
 80193c2:	d1d8      	bne.n	8019376 <_dtoa_r+0xa6e>
 80193c4:	9a02      	ldr	r2, [sp, #8]
 80193c6:	2339      	movs	r3, #57	; 0x39
 80193c8:	7013      	strb	r3, [r2, #0]
 80193ca:	462b      	mov	r3, r5
 80193cc:	461d      	mov	r5, r3
 80193ce:	3b01      	subs	r3, #1
 80193d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80193d4:	2a39      	cmp	r2, #57	; 0x39
 80193d6:	d050      	beq.n	801947a <_dtoa_r+0xb72>
 80193d8:	3201      	adds	r2, #1
 80193da:	701a      	strb	r2, [r3, #0]
 80193dc:	e745      	b.n	801926a <_dtoa_r+0x962>
 80193de:	2a00      	cmp	r2, #0
 80193e0:	dd03      	ble.n	80193ea <_dtoa_r+0xae2>
 80193e2:	2b39      	cmp	r3, #57	; 0x39
 80193e4:	d0ee      	beq.n	80193c4 <_dtoa_r+0xabc>
 80193e6:	3301      	adds	r3, #1
 80193e8:	e7c7      	b.n	801937a <_dtoa_r+0xa72>
 80193ea:	9a01      	ldr	r2, [sp, #4]
 80193ec:	9907      	ldr	r1, [sp, #28]
 80193ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80193f2:	428a      	cmp	r2, r1
 80193f4:	d02a      	beq.n	801944c <_dtoa_r+0xb44>
 80193f6:	4659      	mov	r1, fp
 80193f8:	2300      	movs	r3, #0
 80193fa:	220a      	movs	r2, #10
 80193fc:	4620      	mov	r0, r4
 80193fe:	f000 fd73 	bl	8019ee8 <__multadd>
 8019402:	45b8      	cmp	r8, r7
 8019404:	4683      	mov	fp, r0
 8019406:	f04f 0300 	mov.w	r3, #0
 801940a:	f04f 020a 	mov.w	r2, #10
 801940e:	4641      	mov	r1, r8
 8019410:	4620      	mov	r0, r4
 8019412:	d107      	bne.n	8019424 <_dtoa_r+0xb1c>
 8019414:	f000 fd68 	bl	8019ee8 <__multadd>
 8019418:	4680      	mov	r8, r0
 801941a:	4607      	mov	r7, r0
 801941c:	9b01      	ldr	r3, [sp, #4]
 801941e:	3301      	adds	r3, #1
 8019420:	9301      	str	r3, [sp, #4]
 8019422:	e775      	b.n	8019310 <_dtoa_r+0xa08>
 8019424:	f000 fd60 	bl	8019ee8 <__multadd>
 8019428:	4639      	mov	r1, r7
 801942a:	4680      	mov	r8, r0
 801942c:	2300      	movs	r3, #0
 801942e:	220a      	movs	r2, #10
 8019430:	4620      	mov	r0, r4
 8019432:	f000 fd59 	bl	8019ee8 <__multadd>
 8019436:	4607      	mov	r7, r0
 8019438:	e7f0      	b.n	801941c <_dtoa_r+0xb14>
 801943a:	f1b9 0f00 	cmp.w	r9, #0
 801943e:	9a00      	ldr	r2, [sp, #0]
 8019440:	bfcc      	ite	gt
 8019442:	464d      	movgt	r5, r9
 8019444:	2501      	movle	r5, #1
 8019446:	4415      	add	r5, r2
 8019448:	f04f 0800 	mov.w	r8, #0
 801944c:	4659      	mov	r1, fp
 801944e:	2201      	movs	r2, #1
 8019450:	4620      	mov	r0, r4
 8019452:	9301      	str	r3, [sp, #4]
 8019454:	f000 ff42 	bl	801a2dc <__lshift>
 8019458:	4631      	mov	r1, r6
 801945a:	4683      	mov	fp, r0
 801945c:	f000 ffaa 	bl	801a3b4 <__mcmp>
 8019460:	2800      	cmp	r0, #0
 8019462:	dcb2      	bgt.n	80193ca <_dtoa_r+0xac2>
 8019464:	d102      	bne.n	801946c <_dtoa_r+0xb64>
 8019466:	9b01      	ldr	r3, [sp, #4]
 8019468:	07db      	lsls	r3, r3, #31
 801946a:	d4ae      	bmi.n	80193ca <_dtoa_r+0xac2>
 801946c:	462b      	mov	r3, r5
 801946e:	461d      	mov	r5, r3
 8019470:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019474:	2a30      	cmp	r2, #48	; 0x30
 8019476:	d0fa      	beq.n	801946e <_dtoa_r+0xb66>
 8019478:	e6f7      	b.n	801926a <_dtoa_r+0x962>
 801947a:	9a00      	ldr	r2, [sp, #0]
 801947c:	429a      	cmp	r2, r3
 801947e:	d1a5      	bne.n	80193cc <_dtoa_r+0xac4>
 8019480:	f10a 0a01 	add.w	sl, sl, #1
 8019484:	2331      	movs	r3, #49	; 0x31
 8019486:	e779      	b.n	801937c <_dtoa_r+0xa74>
 8019488:	4b13      	ldr	r3, [pc, #76]	; (80194d8 <_dtoa_r+0xbd0>)
 801948a:	f7ff baaf 	b.w	80189ec <_dtoa_r+0xe4>
 801948e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019490:	2b00      	cmp	r3, #0
 8019492:	f47f aa86 	bne.w	80189a2 <_dtoa_r+0x9a>
 8019496:	4b11      	ldr	r3, [pc, #68]	; (80194dc <_dtoa_r+0xbd4>)
 8019498:	f7ff baa8 	b.w	80189ec <_dtoa_r+0xe4>
 801949c:	f1b9 0f00 	cmp.w	r9, #0
 80194a0:	dc03      	bgt.n	80194aa <_dtoa_r+0xba2>
 80194a2:	9b05      	ldr	r3, [sp, #20]
 80194a4:	2b02      	cmp	r3, #2
 80194a6:	f73f aec9 	bgt.w	801923c <_dtoa_r+0x934>
 80194aa:	9d00      	ldr	r5, [sp, #0]
 80194ac:	4631      	mov	r1, r6
 80194ae:	4658      	mov	r0, fp
 80194b0:	f7ff f99c 	bl	80187ec <quorem>
 80194b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80194b8:	f805 3b01 	strb.w	r3, [r5], #1
 80194bc:	9a00      	ldr	r2, [sp, #0]
 80194be:	1aaa      	subs	r2, r5, r2
 80194c0:	4591      	cmp	r9, r2
 80194c2:	ddba      	ble.n	801943a <_dtoa_r+0xb32>
 80194c4:	4659      	mov	r1, fp
 80194c6:	2300      	movs	r3, #0
 80194c8:	220a      	movs	r2, #10
 80194ca:	4620      	mov	r0, r4
 80194cc:	f000 fd0c 	bl	8019ee8 <__multadd>
 80194d0:	4683      	mov	fp, r0
 80194d2:	e7eb      	b.n	80194ac <_dtoa_r+0xba4>
 80194d4:	0801fd78 	.word	0x0801fd78
 80194d8:	0801fbe4 	.word	0x0801fbe4
 80194dc:	0801fd0c 	.word	0x0801fd0c

080194e0 <__errno>:
 80194e0:	4b01      	ldr	r3, [pc, #4]	; (80194e8 <__errno+0x8>)
 80194e2:	6818      	ldr	r0, [r3, #0]
 80194e4:	4770      	bx	lr
 80194e6:	bf00      	nop
 80194e8:	20000074 	.word	0x20000074

080194ec <std>:
 80194ec:	2300      	movs	r3, #0
 80194ee:	b510      	push	{r4, lr}
 80194f0:	4604      	mov	r4, r0
 80194f2:	e9c0 3300 	strd	r3, r3, [r0]
 80194f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80194fa:	6083      	str	r3, [r0, #8]
 80194fc:	8181      	strh	r1, [r0, #12]
 80194fe:	6643      	str	r3, [r0, #100]	; 0x64
 8019500:	81c2      	strh	r2, [r0, #14]
 8019502:	6183      	str	r3, [r0, #24]
 8019504:	4619      	mov	r1, r3
 8019506:	2208      	movs	r2, #8
 8019508:	305c      	adds	r0, #92	; 0x5c
 801950a:	f7fd fc8d 	bl	8016e28 <memset>
 801950e:	4b05      	ldr	r3, [pc, #20]	; (8019524 <std+0x38>)
 8019510:	6263      	str	r3, [r4, #36]	; 0x24
 8019512:	4b05      	ldr	r3, [pc, #20]	; (8019528 <std+0x3c>)
 8019514:	62a3      	str	r3, [r4, #40]	; 0x28
 8019516:	4b05      	ldr	r3, [pc, #20]	; (801952c <std+0x40>)
 8019518:	62e3      	str	r3, [r4, #44]	; 0x2c
 801951a:	4b05      	ldr	r3, [pc, #20]	; (8019530 <std+0x44>)
 801951c:	6224      	str	r4, [r4, #32]
 801951e:	6323      	str	r3, [r4, #48]	; 0x30
 8019520:	bd10      	pop	{r4, pc}
 8019522:	bf00      	nop
 8019524:	0801ad39 	.word	0x0801ad39
 8019528:	0801ad5b 	.word	0x0801ad5b
 801952c:	0801ad93 	.word	0x0801ad93
 8019530:	0801adb7 	.word	0x0801adb7

08019534 <_cleanup_r>:
 8019534:	4901      	ldr	r1, [pc, #4]	; (801953c <_cleanup_r+0x8>)
 8019536:	f000 b8c1 	b.w	80196bc <_fwalk_reent>
 801953a:	bf00      	nop
 801953c:	0801b0bd 	.word	0x0801b0bd

08019540 <__sfmoreglue>:
 8019540:	b570      	push	{r4, r5, r6, lr}
 8019542:	1e4a      	subs	r2, r1, #1
 8019544:	2568      	movs	r5, #104	; 0x68
 8019546:	4355      	muls	r5, r2
 8019548:	460e      	mov	r6, r1
 801954a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801954e:	f7fd fcc3 	bl	8016ed8 <_malloc_r>
 8019552:	4604      	mov	r4, r0
 8019554:	b140      	cbz	r0, 8019568 <__sfmoreglue+0x28>
 8019556:	2100      	movs	r1, #0
 8019558:	e9c0 1600 	strd	r1, r6, [r0]
 801955c:	300c      	adds	r0, #12
 801955e:	60a0      	str	r0, [r4, #8]
 8019560:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019564:	f7fd fc60 	bl	8016e28 <memset>
 8019568:	4620      	mov	r0, r4
 801956a:	bd70      	pop	{r4, r5, r6, pc}

0801956c <__sfp_lock_acquire>:
 801956c:	4801      	ldr	r0, [pc, #4]	; (8019574 <__sfp_lock_acquire+0x8>)
 801956e:	f000 bc38 	b.w	8019de2 <__retarget_lock_acquire_recursive>
 8019572:	bf00      	nop
 8019574:	20006e8c 	.word	0x20006e8c

08019578 <__sfp_lock_release>:
 8019578:	4801      	ldr	r0, [pc, #4]	; (8019580 <__sfp_lock_release+0x8>)
 801957a:	f000 bc33 	b.w	8019de4 <__retarget_lock_release_recursive>
 801957e:	bf00      	nop
 8019580:	20006e8c 	.word	0x20006e8c

08019584 <__sinit_lock_acquire>:
 8019584:	4801      	ldr	r0, [pc, #4]	; (801958c <__sinit_lock_acquire+0x8>)
 8019586:	f000 bc2c 	b.w	8019de2 <__retarget_lock_acquire_recursive>
 801958a:	bf00      	nop
 801958c:	20006e87 	.word	0x20006e87

08019590 <__sinit_lock_release>:
 8019590:	4801      	ldr	r0, [pc, #4]	; (8019598 <__sinit_lock_release+0x8>)
 8019592:	f000 bc27 	b.w	8019de4 <__retarget_lock_release_recursive>
 8019596:	bf00      	nop
 8019598:	20006e87 	.word	0x20006e87

0801959c <__sinit>:
 801959c:	b510      	push	{r4, lr}
 801959e:	4604      	mov	r4, r0
 80195a0:	f7ff fff0 	bl	8019584 <__sinit_lock_acquire>
 80195a4:	69a3      	ldr	r3, [r4, #24]
 80195a6:	b11b      	cbz	r3, 80195b0 <__sinit+0x14>
 80195a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80195ac:	f7ff bff0 	b.w	8019590 <__sinit_lock_release>
 80195b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80195b4:	6523      	str	r3, [r4, #80]	; 0x50
 80195b6:	4b13      	ldr	r3, [pc, #76]	; (8019604 <__sinit+0x68>)
 80195b8:	4a13      	ldr	r2, [pc, #76]	; (8019608 <__sinit+0x6c>)
 80195ba:	681b      	ldr	r3, [r3, #0]
 80195bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80195be:	42a3      	cmp	r3, r4
 80195c0:	bf04      	itt	eq
 80195c2:	2301      	moveq	r3, #1
 80195c4:	61a3      	streq	r3, [r4, #24]
 80195c6:	4620      	mov	r0, r4
 80195c8:	f000 f820 	bl	801960c <__sfp>
 80195cc:	6060      	str	r0, [r4, #4]
 80195ce:	4620      	mov	r0, r4
 80195d0:	f000 f81c 	bl	801960c <__sfp>
 80195d4:	60a0      	str	r0, [r4, #8]
 80195d6:	4620      	mov	r0, r4
 80195d8:	f000 f818 	bl	801960c <__sfp>
 80195dc:	2200      	movs	r2, #0
 80195de:	60e0      	str	r0, [r4, #12]
 80195e0:	2104      	movs	r1, #4
 80195e2:	6860      	ldr	r0, [r4, #4]
 80195e4:	f7ff ff82 	bl	80194ec <std>
 80195e8:	68a0      	ldr	r0, [r4, #8]
 80195ea:	2201      	movs	r2, #1
 80195ec:	2109      	movs	r1, #9
 80195ee:	f7ff ff7d 	bl	80194ec <std>
 80195f2:	68e0      	ldr	r0, [r4, #12]
 80195f4:	2202      	movs	r2, #2
 80195f6:	2112      	movs	r1, #18
 80195f8:	f7ff ff78 	bl	80194ec <std>
 80195fc:	2301      	movs	r3, #1
 80195fe:	61a3      	str	r3, [r4, #24]
 8019600:	e7d2      	b.n	80195a8 <__sinit+0xc>
 8019602:	bf00      	nop
 8019604:	0801fbd0 	.word	0x0801fbd0
 8019608:	08019535 	.word	0x08019535

0801960c <__sfp>:
 801960c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801960e:	4607      	mov	r7, r0
 8019610:	f7ff ffac 	bl	801956c <__sfp_lock_acquire>
 8019614:	4b1e      	ldr	r3, [pc, #120]	; (8019690 <__sfp+0x84>)
 8019616:	681e      	ldr	r6, [r3, #0]
 8019618:	69b3      	ldr	r3, [r6, #24]
 801961a:	b913      	cbnz	r3, 8019622 <__sfp+0x16>
 801961c:	4630      	mov	r0, r6
 801961e:	f7ff ffbd 	bl	801959c <__sinit>
 8019622:	3648      	adds	r6, #72	; 0x48
 8019624:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019628:	3b01      	subs	r3, #1
 801962a:	d503      	bpl.n	8019634 <__sfp+0x28>
 801962c:	6833      	ldr	r3, [r6, #0]
 801962e:	b30b      	cbz	r3, 8019674 <__sfp+0x68>
 8019630:	6836      	ldr	r6, [r6, #0]
 8019632:	e7f7      	b.n	8019624 <__sfp+0x18>
 8019634:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019638:	b9d5      	cbnz	r5, 8019670 <__sfp+0x64>
 801963a:	4b16      	ldr	r3, [pc, #88]	; (8019694 <__sfp+0x88>)
 801963c:	60e3      	str	r3, [r4, #12]
 801963e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019642:	6665      	str	r5, [r4, #100]	; 0x64
 8019644:	f000 fbcc 	bl	8019de0 <__retarget_lock_init_recursive>
 8019648:	f7ff ff96 	bl	8019578 <__sfp_lock_release>
 801964c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019650:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019654:	6025      	str	r5, [r4, #0]
 8019656:	61a5      	str	r5, [r4, #24]
 8019658:	2208      	movs	r2, #8
 801965a:	4629      	mov	r1, r5
 801965c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019660:	f7fd fbe2 	bl	8016e28 <memset>
 8019664:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019668:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801966c:	4620      	mov	r0, r4
 801966e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019670:	3468      	adds	r4, #104	; 0x68
 8019672:	e7d9      	b.n	8019628 <__sfp+0x1c>
 8019674:	2104      	movs	r1, #4
 8019676:	4638      	mov	r0, r7
 8019678:	f7ff ff62 	bl	8019540 <__sfmoreglue>
 801967c:	4604      	mov	r4, r0
 801967e:	6030      	str	r0, [r6, #0]
 8019680:	2800      	cmp	r0, #0
 8019682:	d1d5      	bne.n	8019630 <__sfp+0x24>
 8019684:	f7ff ff78 	bl	8019578 <__sfp_lock_release>
 8019688:	230c      	movs	r3, #12
 801968a:	603b      	str	r3, [r7, #0]
 801968c:	e7ee      	b.n	801966c <__sfp+0x60>
 801968e:	bf00      	nop
 8019690:	0801fbd0 	.word	0x0801fbd0
 8019694:	ffff0001 	.word	0xffff0001

08019698 <fiprintf>:
 8019698:	b40e      	push	{r1, r2, r3}
 801969a:	b503      	push	{r0, r1, lr}
 801969c:	4601      	mov	r1, r0
 801969e:	ab03      	add	r3, sp, #12
 80196a0:	4805      	ldr	r0, [pc, #20]	; (80196b8 <fiprintf+0x20>)
 80196a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80196a6:	6800      	ldr	r0, [r0, #0]
 80196a8:	9301      	str	r3, [sp, #4]
 80196aa:	f001 fa0b 	bl	801aac4 <_vfiprintf_r>
 80196ae:	b002      	add	sp, #8
 80196b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80196b4:	b003      	add	sp, #12
 80196b6:	4770      	bx	lr
 80196b8:	20000074 	.word	0x20000074

080196bc <_fwalk_reent>:
 80196bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80196c0:	4606      	mov	r6, r0
 80196c2:	4688      	mov	r8, r1
 80196c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80196c8:	2700      	movs	r7, #0
 80196ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80196ce:	f1b9 0901 	subs.w	r9, r9, #1
 80196d2:	d505      	bpl.n	80196e0 <_fwalk_reent+0x24>
 80196d4:	6824      	ldr	r4, [r4, #0]
 80196d6:	2c00      	cmp	r4, #0
 80196d8:	d1f7      	bne.n	80196ca <_fwalk_reent+0xe>
 80196da:	4638      	mov	r0, r7
 80196dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80196e0:	89ab      	ldrh	r3, [r5, #12]
 80196e2:	2b01      	cmp	r3, #1
 80196e4:	d907      	bls.n	80196f6 <_fwalk_reent+0x3a>
 80196e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80196ea:	3301      	adds	r3, #1
 80196ec:	d003      	beq.n	80196f6 <_fwalk_reent+0x3a>
 80196ee:	4629      	mov	r1, r5
 80196f0:	4630      	mov	r0, r6
 80196f2:	47c0      	blx	r8
 80196f4:	4307      	orrs	r7, r0
 80196f6:	3568      	adds	r5, #104	; 0x68
 80196f8:	e7e9      	b.n	80196ce <_fwalk_reent+0x12>

080196fa <rshift>:
 80196fa:	6903      	ldr	r3, [r0, #16]
 80196fc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8019700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019704:	ea4f 1261 	mov.w	r2, r1, asr #5
 8019708:	f100 0414 	add.w	r4, r0, #20
 801970c:	dd45      	ble.n	801979a <rshift+0xa0>
 801970e:	f011 011f 	ands.w	r1, r1, #31
 8019712:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019716:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801971a:	d10c      	bne.n	8019736 <rshift+0x3c>
 801971c:	f100 0710 	add.w	r7, r0, #16
 8019720:	4629      	mov	r1, r5
 8019722:	42b1      	cmp	r1, r6
 8019724:	d334      	bcc.n	8019790 <rshift+0x96>
 8019726:	1a9b      	subs	r3, r3, r2
 8019728:	009b      	lsls	r3, r3, #2
 801972a:	1eea      	subs	r2, r5, #3
 801972c:	4296      	cmp	r6, r2
 801972e:	bf38      	it	cc
 8019730:	2300      	movcc	r3, #0
 8019732:	4423      	add	r3, r4
 8019734:	e015      	b.n	8019762 <rshift+0x68>
 8019736:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801973a:	f1c1 0820 	rsb	r8, r1, #32
 801973e:	40cf      	lsrs	r7, r1
 8019740:	f105 0e04 	add.w	lr, r5, #4
 8019744:	46a1      	mov	r9, r4
 8019746:	4576      	cmp	r6, lr
 8019748:	46f4      	mov	ip, lr
 801974a:	d815      	bhi.n	8019778 <rshift+0x7e>
 801974c:	1a9b      	subs	r3, r3, r2
 801974e:	009a      	lsls	r2, r3, #2
 8019750:	3a04      	subs	r2, #4
 8019752:	3501      	adds	r5, #1
 8019754:	42ae      	cmp	r6, r5
 8019756:	bf38      	it	cc
 8019758:	2200      	movcc	r2, #0
 801975a:	18a3      	adds	r3, r4, r2
 801975c:	50a7      	str	r7, [r4, r2]
 801975e:	b107      	cbz	r7, 8019762 <rshift+0x68>
 8019760:	3304      	adds	r3, #4
 8019762:	1b1a      	subs	r2, r3, r4
 8019764:	42a3      	cmp	r3, r4
 8019766:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801976a:	bf08      	it	eq
 801976c:	2300      	moveq	r3, #0
 801976e:	6102      	str	r2, [r0, #16]
 8019770:	bf08      	it	eq
 8019772:	6143      	streq	r3, [r0, #20]
 8019774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019778:	f8dc c000 	ldr.w	ip, [ip]
 801977c:	fa0c fc08 	lsl.w	ip, ip, r8
 8019780:	ea4c 0707 	orr.w	r7, ip, r7
 8019784:	f849 7b04 	str.w	r7, [r9], #4
 8019788:	f85e 7b04 	ldr.w	r7, [lr], #4
 801978c:	40cf      	lsrs	r7, r1
 801978e:	e7da      	b.n	8019746 <rshift+0x4c>
 8019790:	f851 cb04 	ldr.w	ip, [r1], #4
 8019794:	f847 cf04 	str.w	ip, [r7, #4]!
 8019798:	e7c3      	b.n	8019722 <rshift+0x28>
 801979a:	4623      	mov	r3, r4
 801979c:	e7e1      	b.n	8019762 <rshift+0x68>

0801979e <__hexdig_fun>:
 801979e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80197a2:	2b09      	cmp	r3, #9
 80197a4:	d802      	bhi.n	80197ac <__hexdig_fun+0xe>
 80197a6:	3820      	subs	r0, #32
 80197a8:	b2c0      	uxtb	r0, r0
 80197aa:	4770      	bx	lr
 80197ac:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80197b0:	2b05      	cmp	r3, #5
 80197b2:	d801      	bhi.n	80197b8 <__hexdig_fun+0x1a>
 80197b4:	3847      	subs	r0, #71	; 0x47
 80197b6:	e7f7      	b.n	80197a8 <__hexdig_fun+0xa>
 80197b8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80197bc:	2b05      	cmp	r3, #5
 80197be:	d801      	bhi.n	80197c4 <__hexdig_fun+0x26>
 80197c0:	3827      	subs	r0, #39	; 0x27
 80197c2:	e7f1      	b.n	80197a8 <__hexdig_fun+0xa>
 80197c4:	2000      	movs	r0, #0
 80197c6:	4770      	bx	lr

080197c8 <__gethex>:
 80197c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197cc:	ed2d 8b02 	vpush	{d8}
 80197d0:	b089      	sub	sp, #36	; 0x24
 80197d2:	ee08 0a10 	vmov	s16, r0
 80197d6:	9304      	str	r3, [sp, #16]
 80197d8:	4bbc      	ldr	r3, [pc, #752]	; (8019acc <__gethex+0x304>)
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	9301      	str	r3, [sp, #4]
 80197de:	4618      	mov	r0, r3
 80197e0:	468b      	mov	fp, r1
 80197e2:	4690      	mov	r8, r2
 80197e4:	f7e6 fcfe 	bl	80001e4 <strlen>
 80197e8:	9b01      	ldr	r3, [sp, #4]
 80197ea:	f8db 2000 	ldr.w	r2, [fp]
 80197ee:	4403      	add	r3, r0
 80197f0:	4682      	mov	sl, r0
 80197f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80197f6:	9305      	str	r3, [sp, #20]
 80197f8:	1c93      	adds	r3, r2, #2
 80197fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80197fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8019802:	32fe      	adds	r2, #254	; 0xfe
 8019804:	18d1      	adds	r1, r2, r3
 8019806:	461f      	mov	r7, r3
 8019808:	f813 0b01 	ldrb.w	r0, [r3], #1
 801980c:	9100      	str	r1, [sp, #0]
 801980e:	2830      	cmp	r0, #48	; 0x30
 8019810:	d0f8      	beq.n	8019804 <__gethex+0x3c>
 8019812:	f7ff ffc4 	bl	801979e <__hexdig_fun>
 8019816:	4604      	mov	r4, r0
 8019818:	2800      	cmp	r0, #0
 801981a:	d13a      	bne.n	8019892 <__gethex+0xca>
 801981c:	9901      	ldr	r1, [sp, #4]
 801981e:	4652      	mov	r2, sl
 8019820:	4638      	mov	r0, r7
 8019822:	f7fe f8d9 	bl	80179d8 <strncmp>
 8019826:	4605      	mov	r5, r0
 8019828:	2800      	cmp	r0, #0
 801982a:	d168      	bne.n	80198fe <__gethex+0x136>
 801982c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8019830:	eb07 060a 	add.w	r6, r7, sl
 8019834:	f7ff ffb3 	bl	801979e <__hexdig_fun>
 8019838:	2800      	cmp	r0, #0
 801983a:	d062      	beq.n	8019902 <__gethex+0x13a>
 801983c:	4633      	mov	r3, r6
 801983e:	7818      	ldrb	r0, [r3, #0]
 8019840:	2830      	cmp	r0, #48	; 0x30
 8019842:	461f      	mov	r7, r3
 8019844:	f103 0301 	add.w	r3, r3, #1
 8019848:	d0f9      	beq.n	801983e <__gethex+0x76>
 801984a:	f7ff ffa8 	bl	801979e <__hexdig_fun>
 801984e:	2301      	movs	r3, #1
 8019850:	fab0 f480 	clz	r4, r0
 8019854:	0964      	lsrs	r4, r4, #5
 8019856:	4635      	mov	r5, r6
 8019858:	9300      	str	r3, [sp, #0]
 801985a:	463a      	mov	r2, r7
 801985c:	4616      	mov	r6, r2
 801985e:	3201      	adds	r2, #1
 8019860:	7830      	ldrb	r0, [r6, #0]
 8019862:	f7ff ff9c 	bl	801979e <__hexdig_fun>
 8019866:	2800      	cmp	r0, #0
 8019868:	d1f8      	bne.n	801985c <__gethex+0x94>
 801986a:	9901      	ldr	r1, [sp, #4]
 801986c:	4652      	mov	r2, sl
 801986e:	4630      	mov	r0, r6
 8019870:	f7fe f8b2 	bl	80179d8 <strncmp>
 8019874:	b980      	cbnz	r0, 8019898 <__gethex+0xd0>
 8019876:	b94d      	cbnz	r5, 801988c <__gethex+0xc4>
 8019878:	eb06 050a 	add.w	r5, r6, sl
 801987c:	462a      	mov	r2, r5
 801987e:	4616      	mov	r6, r2
 8019880:	3201      	adds	r2, #1
 8019882:	7830      	ldrb	r0, [r6, #0]
 8019884:	f7ff ff8b 	bl	801979e <__hexdig_fun>
 8019888:	2800      	cmp	r0, #0
 801988a:	d1f8      	bne.n	801987e <__gethex+0xb6>
 801988c:	1bad      	subs	r5, r5, r6
 801988e:	00ad      	lsls	r5, r5, #2
 8019890:	e004      	b.n	801989c <__gethex+0xd4>
 8019892:	2400      	movs	r4, #0
 8019894:	4625      	mov	r5, r4
 8019896:	e7e0      	b.n	801985a <__gethex+0x92>
 8019898:	2d00      	cmp	r5, #0
 801989a:	d1f7      	bne.n	801988c <__gethex+0xc4>
 801989c:	7833      	ldrb	r3, [r6, #0]
 801989e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80198a2:	2b50      	cmp	r3, #80	; 0x50
 80198a4:	d13b      	bne.n	801991e <__gethex+0x156>
 80198a6:	7873      	ldrb	r3, [r6, #1]
 80198a8:	2b2b      	cmp	r3, #43	; 0x2b
 80198aa:	d02c      	beq.n	8019906 <__gethex+0x13e>
 80198ac:	2b2d      	cmp	r3, #45	; 0x2d
 80198ae:	d02e      	beq.n	801990e <__gethex+0x146>
 80198b0:	1c71      	adds	r1, r6, #1
 80198b2:	f04f 0900 	mov.w	r9, #0
 80198b6:	7808      	ldrb	r0, [r1, #0]
 80198b8:	f7ff ff71 	bl	801979e <__hexdig_fun>
 80198bc:	1e43      	subs	r3, r0, #1
 80198be:	b2db      	uxtb	r3, r3
 80198c0:	2b18      	cmp	r3, #24
 80198c2:	d82c      	bhi.n	801991e <__gethex+0x156>
 80198c4:	f1a0 0210 	sub.w	r2, r0, #16
 80198c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80198cc:	f7ff ff67 	bl	801979e <__hexdig_fun>
 80198d0:	1e43      	subs	r3, r0, #1
 80198d2:	b2db      	uxtb	r3, r3
 80198d4:	2b18      	cmp	r3, #24
 80198d6:	d91d      	bls.n	8019914 <__gethex+0x14c>
 80198d8:	f1b9 0f00 	cmp.w	r9, #0
 80198dc:	d000      	beq.n	80198e0 <__gethex+0x118>
 80198de:	4252      	negs	r2, r2
 80198e0:	4415      	add	r5, r2
 80198e2:	f8cb 1000 	str.w	r1, [fp]
 80198e6:	b1e4      	cbz	r4, 8019922 <__gethex+0x15a>
 80198e8:	9b00      	ldr	r3, [sp, #0]
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	bf14      	ite	ne
 80198ee:	2700      	movne	r7, #0
 80198f0:	2706      	moveq	r7, #6
 80198f2:	4638      	mov	r0, r7
 80198f4:	b009      	add	sp, #36	; 0x24
 80198f6:	ecbd 8b02 	vpop	{d8}
 80198fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198fe:	463e      	mov	r6, r7
 8019900:	4625      	mov	r5, r4
 8019902:	2401      	movs	r4, #1
 8019904:	e7ca      	b.n	801989c <__gethex+0xd4>
 8019906:	f04f 0900 	mov.w	r9, #0
 801990a:	1cb1      	adds	r1, r6, #2
 801990c:	e7d3      	b.n	80198b6 <__gethex+0xee>
 801990e:	f04f 0901 	mov.w	r9, #1
 8019912:	e7fa      	b.n	801990a <__gethex+0x142>
 8019914:	230a      	movs	r3, #10
 8019916:	fb03 0202 	mla	r2, r3, r2, r0
 801991a:	3a10      	subs	r2, #16
 801991c:	e7d4      	b.n	80198c8 <__gethex+0x100>
 801991e:	4631      	mov	r1, r6
 8019920:	e7df      	b.n	80198e2 <__gethex+0x11a>
 8019922:	1bf3      	subs	r3, r6, r7
 8019924:	3b01      	subs	r3, #1
 8019926:	4621      	mov	r1, r4
 8019928:	2b07      	cmp	r3, #7
 801992a:	dc0b      	bgt.n	8019944 <__gethex+0x17c>
 801992c:	ee18 0a10 	vmov	r0, s16
 8019930:	f000 fa78 	bl	8019e24 <_Balloc>
 8019934:	4604      	mov	r4, r0
 8019936:	b940      	cbnz	r0, 801994a <__gethex+0x182>
 8019938:	4b65      	ldr	r3, [pc, #404]	; (8019ad0 <__gethex+0x308>)
 801993a:	4602      	mov	r2, r0
 801993c:	21de      	movs	r1, #222	; 0xde
 801993e:	4865      	ldr	r0, [pc, #404]	; (8019ad4 <__gethex+0x30c>)
 8019940:	f7fe ff36 	bl	80187b0 <__assert_func>
 8019944:	3101      	adds	r1, #1
 8019946:	105b      	asrs	r3, r3, #1
 8019948:	e7ee      	b.n	8019928 <__gethex+0x160>
 801994a:	f100 0914 	add.w	r9, r0, #20
 801994e:	f04f 0b00 	mov.w	fp, #0
 8019952:	f1ca 0301 	rsb	r3, sl, #1
 8019956:	f8cd 9008 	str.w	r9, [sp, #8]
 801995a:	f8cd b000 	str.w	fp, [sp]
 801995e:	9306      	str	r3, [sp, #24]
 8019960:	42b7      	cmp	r7, r6
 8019962:	d340      	bcc.n	80199e6 <__gethex+0x21e>
 8019964:	9802      	ldr	r0, [sp, #8]
 8019966:	9b00      	ldr	r3, [sp, #0]
 8019968:	f840 3b04 	str.w	r3, [r0], #4
 801996c:	eba0 0009 	sub.w	r0, r0, r9
 8019970:	1080      	asrs	r0, r0, #2
 8019972:	0146      	lsls	r6, r0, #5
 8019974:	6120      	str	r0, [r4, #16]
 8019976:	4618      	mov	r0, r3
 8019978:	f000 fb4a 	bl	801a010 <__hi0bits>
 801997c:	1a30      	subs	r0, r6, r0
 801997e:	f8d8 6000 	ldr.w	r6, [r8]
 8019982:	42b0      	cmp	r0, r6
 8019984:	dd63      	ble.n	8019a4e <__gethex+0x286>
 8019986:	1b87      	subs	r7, r0, r6
 8019988:	4639      	mov	r1, r7
 801998a:	4620      	mov	r0, r4
 801998c:	f000 fee4 	bl	801a758 <__any_on>
 8019990:	4682      	mov	sl, r0
 8019992:	b1a8      	cbz	r0, 80199c0 <__gethex+0x1f8>
 8019994:	1e7b      	subs	r3, r7, #1
 8019996:	1159      	asrs	r1, r3, #5
 8019998:	f003 021f 	and.w	r2, r3, #31
 801999c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80199a0:	f04f 0a01 	mov.w	sl, #1
 80199a4:	fa0a f202 	lsl.w	r2, sl, r2
 80199a8:	420a      	tst	r2, r1
 80199aa:	d009      	beq.n	80199c0 <__gethex+0x1f8>
 80199ac:	4553      	cmp	r3, sl
 80199ae:	dd05      	ble.n	80199bc <__gethex+0x1f4>
 80199b0:	1eb9      	subs	r1, r7, #2
 80199b2:	4620      	mov	r0, r4
 80199b4:	f000 fed0 	bl	801a758 <__any_on>
 80199b8:	2800      	cmp	r0, #0
 80199ba:	d145      	bne.n	8019a48 <__gethex+0x280>
 80199bc:	f04f 0a02 	mov.w	sl, #2
 80199c0:	4639      	mov	r1, r7
 80199c2:	4620      	mov	r0, r4
 80199c4:	f7ff fe99 	bl	80196fa <rshift>
 80199c8:	443d      	add	r5, r7
 80199ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80199ce:	42ab      	cmp	r3, r5
 80199d0:	da4c      	bge.n	8019a6c <__gethex+0x2a4>
 80199d2:	ee18 0a10 	vmov	r0, s16
 80199d6:	4621      	mov	r1, r4
 80199d8:	f000 fa64 	bl	8019ea4 <_Bfree>
 80199dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80199de:	2300      	movs	r3, #0
 80199e0:	6013      	str	r3, [r2, #0]
 80199e2:	27a3      	movs	r7, #163	; 0xa3
 80199e4:	e785      	b.n	80198f2 <__gethex+0x12a>
 80199e6:	1e73      	subs	r3, r6, #1
 80199e8:	9a05      	ldr	r2, [sp, #20]
 80199ea:	9303      	str	r3, [sp, #12]
 80199ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80199f0:	4293      	cmp	r3, r2
 80199f2:	d019      	beq.n	8019a28 <__gethex+0x260>
 80199f4:	f1bb 0f20 	cmp.w	fp, #32
 80199f8:	d107      	bne.n	8019a0a <__gethex+0x242>
 80199fa:	9b02      	ldr	r3, [sp, #8]
 80199fc:	9a00      	ldr	r2, [sp, #0]
 80199fe:	f843 2b04 	str.w	r2, [r3], #4
 8019a02:	9302      	str	r3, [sp, #8]
 8019a04:	2300      	movs	r3, #0
 8019a06:	9300      	str	r3, [sp, #0]
 8019a08:	469b      	mov	fp, r3
 8019a0a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8019a0e:	f7ff fec6 	bl	801979e <__hexdig_fun>
 8019a12:	9b00      	ldr	r3, [sp, #0]
 8019a14:	f000 000f 	and.w	r0, r0, #15
 8019a18:	fa00 f00b 	lsl.w	r0, r0, fp
 8019a1c:	4303      	orrs	r3, r0
 8019a1e:	9300      	str	r3, [sp, #0]
 8019a20:	f10b 0b04 	add.w	fp, fp, #4
 8019a24:	9b03      	ldr	r3, [sp, #12]
 8019a26:	e00d      	b.n	8019a44 <__gethex+0x27c>
 8019a28:	9b03      	ldr	r3, [sp, #12]
 8019a2a:	9a06      	ldr	r2, [sp, #24]
 8019a2c:	4413      	add	r3, r2
 8019a2e:	42bb      	cmp	r3, r7
 8019a30:	d3e0      	bcc.n	80199f4 <__gethex+0x22c>
 8019a32:	4618      	mov	r0, r3
 8019a34:	9901      	ldr	r1, [sp, #4]
 8019a36:	9307      	str	r3, [sp, #28]
 8019a38:	4652      	mov	r2, sl
 8019a3a:	f7fd ffcd 	bl	80179d8 <strncmp>
 8019a3e:	9b07      	ldr	r3, [sp, #28]
 8019a40:	2800      	cmp	r0, #0
 8019a42:	d1d7      	bne.n	80199f4 <__gethex+0x22c>
 8019a44:	461e      	mov	r6, r3
 8019a46:	e78b      	b.n	8019960 <__gethex+0x198>
 8019a48:	f04f 0a03 	mov.w	sl, #3
 8019a4c:	e7b8      	b.n	80199c0 <__gethex+0x1f8>
 8019a4e:	da0a      	bge.n	8019a66 <__gethex+0x29e>
 8019a50:	1a37      	subs	r7, r6, r0
 8019a52:	4621      	mov	r1, r4
 8019a54:	ee18 0a10 	vmov	r0, s16
 8019a58:	463a      	mov	r2, r7
 8019a5a:	f000 fc3f 	bl	801a2dc <__lshift>
 8019a5e:	1bed      	subs	r5, r5, r7
 8019a60:	4604      	mov	r4, r0
 8019a62:	f100 0914 	add.w	r9, r0, #20
 8019a66:	f04f 0a00 	mov.w	sl, #0
 8019a6a:	e7ae      	b.n	80199ca <__gethex+0x202>
 8019a6c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019a70:	42a8      	cmp	r0, r5
 8019a72:	dd72      	ble.n	8019b5a <__gethex+0x392>
 8019a74:	1b45      	subs	r5, r0, r5
 8019a76:	42ae      	cmp	r6, r5
 8019a78:	dc36      	bgt.n	8019ae8 <__gethex+0x320>
 8019a7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019a7e:	2b02      	cmp	r3, #2
 8019a80:	d02a      	beq.n	8019ad8 <__gethex+0x310>
 8019a82:	2b03      	cmp	r3, #3
 8019a84:	d02c      	beq.n	8019ae0 <__gethex+0x318>
 8019a86:	2b01      	cmp	r3, #1
 8019a88:	d115      	bne.n	8019ab6 <__gethex+0x2ee>
 8019a8a:	42ae      	cmp	r6, r5
 8019a8c:	d113      	bne.n	8019ab6 <__gethex+0x2ee>
 8019a8e:	2e01      	cmp	r6, #1
 8019a90:	d10b      	bne.n	8019aaa <__gethex+0x2e2>
 8019a92:	9a04      	ldr	r2, [sp, #16]
 8019a94:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019a98:	6013      	str	r3, [r2, #0]
 8019a9a:	2301      	movs	r3, #1
 8019a9c:	6123      	str	r3, [r4, #16]
 8019a9e:	f8c9 3000 	str.w	r3, [r9]
 8019aa2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019aa4:	2762      	movs	r7, #98	; 0x62
 8019aa6:	601c      	str	r4, [r3, #0]
 8019aa8:	e723      	b.n	80198f2 <__gethex+0x12a>
 8019aaa:	1e71      	subs	r1, r6, #1
 8019aac:	4620      	mov	r0, r4
 8019aae:	f000 fe53 	bl	801a758 <__any_on>
 8019ab2:	2800      	cmp	r0, #0
 8019ab4:	d1ed      	bne.n	8019a92 <__gethex+0x2ca>
 8019ab6:	ee18 0a10 	vmov	r0, s16
 8019aba:	4621      	mov	r1, r4
 8019abc:	f000 f9f2 	bl	8019ea4 <_Bfree>
 8019ac0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019ac2:	2300      	movs	r3, #0
 8019ac4:	6013      	str	r3, [r2, #0]
 8019ac6:	2750      	movs	r7, #80	; 0x50
 8019ac8:	e713      	b.n	80198f2 <__gethex+0x12a>
 8019aca:	bf00      	nop
 8019acc:	0801fe58 	.word	0x0801fe58
 8019ad0:	0801fd78 	.word	0x0801fd78
 8019ad4:	0801fdec 	.word	0x0801fdec
 8019ad8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	d1eb      	bne.n	8019ab6 <__gethex+0x2ee>
 8019ade:	e7d8      	b.n	8019a92 <__gethex+0x2ca>
 8019ae0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019ae2:	2b00      	cmp	r3, #0
 8019ae4:	d1d5      	bne.n	8019a92 <__gethex+0x2ca>
 8019ae6:	e7e6      	b.n	8019ab6 <__gethex+0x2ee>
 8019ae8:	1e6f      	subs	r7, r5, #1
 8019aea:	f1ba 0f00 	cmp.w	sl, #0
 8019aee:	d131      	bne.n	8019b54 <__gethex+0x38c>
 8019af0:	b127      	cbz	r7, 8019afc <__gethex+0x334>
 8019af2:	4639      	mov	r1, r7
 8019af4:	4620      	mov	r0, r4
 8019af6:	f000 fe2f 	bl	801a758 <__any_on>
 8019afa:	4682      	mov	sl, r0
 8019afc:	117b      	asrs	r3, r7, #5
 8019afe:	2101      	movs	r1, #1
 8019b00:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019b04:	f007 071f 	and.w	r7, r7, #31
 8019b08:	fa01 f707 	lsl.w	r7, r1, r7
 8019b0c:	421f      	tst	r7, r3
 8019b0e:	4629      	mov	r1, r5
 8019b10:	4620      	mov	r0, r4
 8019b12:	bf18      	it	ne
 8019b14:	f04a 0a02 	orrne.w	sl, sl, #2
 8019b18:	1b76      	subs	r6, r6, r5
 8019b1a:	f7ff fdee 	bl	80196fa <rshift>
 8019b1e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019b22:	2702      	movs	r7, #2
 8019b24:	f1ba 0f00 	cmp.w	sl, #0
 8019b28:	d048      	beq.n	8019bbc <__gethex+0x3f4>
 8019b2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019b2e:	2b02      	cmp	r3, #2
 8019b30:	d015      	beq.n	8019b5e <__gethex+0x396>
 8019b32:	2b03      	cmp	r3, #3
 8019b34:	d017      	beq.n	8019b66 <__gethex+0x39e>
 8019b36:	2b01      	cmp	r3, #1
 8019b38:	d109      	bne.n	8019b4e <__gethex+0x386>
 8019b3a:	f01a 0f02 	tst.w	sl, #2
 8019b3e:	d006      	beq.n	8019b4e <__gethex+0x386>
 8019b40:	f8d9 0000 	ldr.w	r0, [r9]
 8019b44:	ea4a 0a00 	orr.w	sl, sl, r0
 8019b48:	f01a 0f01 	tst.w	sl, #1
 8019b4c:	d10e      	bne.n	8019b6c <__gethex+0x3a4>
 8019b4e:	f047 0710 	orr.w	r7, r7, #16
 8019b52:	e033      	b.n	8019bbc <__gethex+0x3f4>
 8019b54:	f04f 0a01 	mov.w	sl, #1
 8019b58:	e7d0      	b.n	8019afc <__gethex+0x334>
 8019b5a:	2701      	movs	r7, #1
 8019b5c:	e7e2      	b.n	8019b24 <__gethex+0x35c>
 8019b5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019b60:	f1c3 0301 	rsb	r3, r3, #1
 8019b64:	9315      	str	r3, [sp, #84]	; 0x54
 8019b66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d0f0      	beq.n	8019b4e <__gethex+0x386>
 8019b6c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019b70:	f104 0314 	add.w	r3, r4, #20
 8019b74:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019b78:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019b7c:	f04f 0c00 	mov.w	ip, #0
 8019b80:	4618      	mov	r0, r3
 8019b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b86:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019b8a:	d01c      	beq.n	8019bc6 <__gethex+0x3fe>
 8019b8c:	3201      	adds	r2, #1
 8019b8e:	6002      	str	r2, [r0, #0]
 8019b90:	2f02      	cmp	r7, #2
 8019b92:	f104 0314 	add.w	r3, r4, #20
 8019b96:	d13f      	bne.n	8019c18 <__gethex+0x450>
 8019b98:	f8d8 2000 	ldr.w	r2, [r8]
 8019b9c:	3a01      	subs	r2, #1
 8019b9e:	42b2      	cmp	r2, r6
 8019ba0:	d10a      	bne.n	8019bb8 <__gethex+0x3f0>
 8019ba2:	1171      	asrs	r1, r6, #5
 8019ba4:	2201      	movs	r2, #1
 8019ba6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019baa:	f006 061f 	and.w	r6, r6, #31
 8019bae:	fa02 f606 	lsl.w	r6, r2, r6
 8019bb2:	421e      	tst	r6, r3
 8019bb4:	bf18      	it	ne
 8019bb6:	4617      	movne	r7, r2
 8019bb8:	f047 0720 	orr.w	r7, r7, #32
 8019bbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019bbe:	601c      	str	r4, [r3, #0]
 8019bc0:	9b04      	ldr	r3, [sp, #16]
 8019bc2:	601d      	str	r5, [r3, #0]
 8019bc4:	e695      	b.n	80198f2 <__gethex+0x12a>
 8019bc6:	4299      	cmp	r1, r3
 8019bc8:	f843 cc04 	str.w	ip, [r3, #-4]
 8019bcc:	d8d8      	bhi.n	8019b80 <__gethex+0x3b8>
 8019bce:	68a3      	ldr	r3, [r4, #8]
 8019bd0:	459b      	cmp	fp, r3
 8019bd2:	db19      	blt.n	8019c08 <__gethex+0x440>
 8019bd4:	6861      	ldr	r1, [r4, #4]
 8019bd6:	ee18 0a10 	vmov	r0, s16
 8019bda:	3101      	adds	r1, #1
 8019bdc:	f000 f922 	bl	8019e24 <_Balloc>
 8019be0:	4681      	mov	r9, r0
 8019be2:	b918      	cbnz	r0, 8019bec <__gethex+0x424>
 8019be4:	4b1a      	ldr	r3, [pc, #104]	; (8019c50 <__gethex+0x488>)
 8019be6:	4602      	mov	r2, r0
 8019be8:	2184      	movs	r1, #132	; 0x84
 8019bea:	e6a8      	b.n	801993e <__gethex+0x176>
 8019bec:	6922      	ldr	r2, [r4, #16]
 8019bee:	3202      	adds	r2, #2
 8019bf0:	f104 010c 	add.w	r1, r4, #12
 8019bf4:	0092      	lsls	r2, r2, #2
 8019bf6:	300c      	adds	r0, #12
 8019bf8:	f7fd f8ee 	bl	8016dd8 <memcpy>
 8019bfc:	4621      	mov	r1, r4
 8019bfe:	ee18 0a10 	vmov	r0, s16
 8019c02:	f000 f94f 	bl	8019ea4 <_Bfree>
 8019c06:	464c      	mov	r4, r9
 8019c08:	6923      	ldr	r3, [r4, #16]
 8019c0a:	1c5a      	adds	r2, r3, #1
 8019c0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019c10:	6122      	str	r2, [r4, #16]
 8019c12:	2201      	movs	r2, #1
 8019c14:	615a      	str	r2, [r3, #20]
 8019c16:	e7bb      	b.n	8019b90 <__gethex+0x3c8>
 8019c18:	6922      	ldr	r2, [r4, #16]
 8019c1a:	455a      	cmp	r2, fp
 8019c1c:	dd0b      	ble.n	8019c36 <__gethex+0x46e>
 8019c1e:	2101      	movs	r1, #1
 8019c20:	4620      	mov	r0, r4
 8019c22:	f7ff fd6a 	bl	80196fa <rshift>
 8019c26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019c2a:	3501      	adds	r5, #1
 8019c2c:	42ab      	cmp	r3, r5
 8019c2e:	f6ff aed0 	blt.w	80199d2 <__gethex+0x20a>
 8019c32:	2701      	movs	r7, #1
 8019c34:	e7c0      	b.n	8019bb8 <__gethex+0x3f0>
 8019c36:	f016 061f 	ands.w	r6, r6, #31
 8019c3a:	d0fa      	beq.n	8019c32 <__gethex+0x46a>
 8019c3c:	449a      	add	sl, r3
 8019c3e:	f1c6 0620 	rsb	r6, r6, #32
 8019c42:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8019c46:	f000 f9e3 	bl	801a010 <__hi0bits>
 8019c4a:	42b0      	cmp	r0, r6
 8019c4c:	dbe7      	blt.n	8019c1e <__gethex+0x456>
 8019c4e:	e7f0      	b.n	8019c32 <__gethex+0x46a>
 8019c50:	0801fd78 	.word	0x0801fd78

08019c54 <L_shift>:
 8019c54:	f1c2 0208 	rsb	r2, r2, #8
 8019c58:	0092      	lsls	r2, r2, #2
 8019c5a:	b570      	push	{r4, r5, r6, lr}
 8019c5c:	f1c2 0620 	rsb	r6, r2, #32
 8019c60:	6843      	ldr	r3, [r0, #4]
 8019c62:	6804      	ldr	r4, [r0, #0]
 8019c64:	fa03 f506 	lsl.w	r5, r3, r6
 8019c68:	432c      	orrs	r4, r5
 8019c6a:	40d3      	lsrs	r3, r2
 8019c6c:	6004      	str	r4, [r0, #0]
 8019c6e:	f840 3f04 	str.w	r3, [r0, #4]!
 8019c72:	4288      	cmp	r0, r1
 8019c74:	d3f4      	bcc.n	8019c60 <L_shift+0xc>
 8019c76:	bd70      	pop	{r4, r5, r6, pc}

08019c78 <__match>:
 8019c78:	b530      	push	{r4, r5, lr}
 8019c7a:	6803      	ldr	r3, [r0, #0]
 8019c7c:	3301      	adds	r3, #1
 8019c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019c82:	b914      	cbnz	r4, 8019c8a <__match+0x12>
 8019c84:	6003      	str	r3, [r0, #0]
 8019c86:	2001      	movs	r0, #1
 8019c88:	bd30      	pop	{r4, r5, pc}
 8019c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c8e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019c92:	2d19      	cmp	r5, #25
 8019c94:	bf98      	it	ls
 8019c96:	3220      	addls	r2, #32
 8019c98:	42a2      	cmp	r2, r4
 8019c9a:	d0f0      	beq.n	8019c7e <__match+0x6>
 8019c9c:	2000      	movs	r0, #0
 8019c9e:	e7f3      	b.n	8019c88 <__match+0x10>

08019ca0 <__hexnan>:
 8019ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ca4:	680b      	ldr	r3, [r1, #0]
 8019ca6:	6801      	ldr	r1, [r0, #0]
 8019ca8:	115e      	asrs	r6, r3, #5
 8019caa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019cae:	f013 031f 	ands.w	r3, r3, #31
 8019cb2:	b087      	sub	sp, #28
 8019cb4:	bf18      	it	ne
 8019cb6:	3604      	addne	r6, #4
 8019cb8:	2500      	movs	r5, #0
 8019cba:	1f37      	subs	r7, r6, #4
 8019cbc:	4682      	mov	sl, r0
 8019cbe:	4690      	mov	r8, r2
 8019cc0:	9301      	str	r3, [sp, #4]
 8019cc2:	f846 5c04 	str.w	r5, [r6, #-4]
 8019cc6:	46b9      	mov	r9, r7
 8019cc8:	463c      	mov	r4, r7
 8019cca:	9502      	str	r5, [sp, #8]
 8019ccc:	46ab      	mov	fp, r5
 8019cce:	784a      	ldrb	r2, [r1, #1]
 8019cd0:	1c4b      	adds	r3, r1, #1
 8019cd2:	9303      	str	r3, [sp, #12]
 8019cd4:	b342      	cbz	r2, 8019d28 <__hexnan+0x88>
 8019cd6:	4610      	mov	r0, r2
 8019cd8:	9105      	str	r1, [sp, #20]
 8019cda:	9204      	str	r2, [sp, #16]
 8019cdc:	f7ff fd5f 	bl	801979e <__hexdig_fun>
 8019ce0:	2800      	cmp	r0, #0
 8019ce2:	d14f      	bne.n	8019d84 <__hexnan+0xe4>
 8019ce4:	9a04      	ldr	r2, [sp, #16]
 8019ce6:	9905      	ldr	r1, [sp, #20]
 8019ce8:	2a20      	cmp	r2, #32
 8019cea:	d818      	bhi.n	8019d1e <__hexnan+0x7e>
 8019cec:	9b02      	ldr	r3, [sp, #8]
 8019cee:	459b      	cmp	fp, r3
 8019cf0:	dd13      	ble.n	8019d1a <__hexnan+0x7a>
 8019cf2:	454c      	cmp	r4, r9
 8019cf4:	d206      	bcs.n	8019d04 <__hexnan+0x64>
 8019cf6:	2d07      	cmp	r5, #7
 8019cf8:	dc04      	bgt.n	8019d04 <__hexnan+0x64>
 8019cfa:	462a      	mov	r2, r5
 8019cfc:	4649      	mov	r1, r9
 8019cfe:	4620      	mov	r0, r4
 8019d00:	f7ff ffa8 	bl	8019c54 <L_shift>
 8019d04:	4544      	cmp	r4, r8
 8019d06:	d950      	bls.n	8019daa <__hexnan+0x10a>
 8019d08:	2300      	movs	r3, #0
 8019d0a:	f1a4 0904 	sub.w	r9, r4, #4
 8019d0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8019d12:	f8cd b008 	str.w	fp, [sp, #8]
 8019d16:	464c      	mov	r4, r9
 8019d18:	461d      	mov	r5, r3
 8019d1a:	9903      	ldr	r1, [sp, #12]
 8019d1c:	e7d7      	b.n	8019cce <__hexnan+0x2e>
 8019d1e:	2a29      	cmp	r2, #41	; 0x29
 8019d20:	d156      	bne.n	8019dd0 <__hexnan+0x130>
 8019d22:	3102      	adds	r1, #2
 8019d24:	f8ca 1000 	str.w	r1, [sl]
 8019d28:	f1bb 0f00 	cmp.w	fp, #0
 8019d2c:	d050      	beq.n	8019dd0 <__hexnan+0x130>
 8019d2e:	454c      	cmp	r4, r9
 8019d30:	d206      	bcs.n	8019d40 <__hexnan+0xa0>
 8019d32:	2d07      	cmp	r5, #7
 8019d34:	dc04      	bgt.n	8019d40 <__hexnan+0xa0>
 8019d36:	462a      	mov	r2, r5
 8019d38:	4649      	mov	r1, r9
 8019d3a:	4620      	mov	r0, r4
 8019d3c:	f7ff ff8a 	bl	8019c54 <L_shift>
 8019d40:	4544      	cmp	r4, r8
 8019d42:	d934      	bls.n	8019dae <__hexnan+0x10e>
 8019d44:	f1a8 0204 	sub.w	r2, r8, #4
 8019d48:	4623      	mov	r3, r4
 8019d4a:	f853 1b04 	ldr.w	r1, [r3], #4
 8019d4e:	f842 1f04 	str.w	r1, [r2, #4]!
 8019d52:	429f      	cmp	r7, r3
 8019d54:	d2f9      	bcs.n	8019d4a <__hexnan+0xaa>
 8019d56:	1b3b      	subs	r3, r7, r4
 8019d58:	f023 0303 	bic.w	r3, r3, #3
 8019d5c:	3304      	adds	r3, #4
 8019d5e:	3401      	adds	r4, #1
 8019d60:	3e03      	subs	r6, #3
 8019d62:	42b4      	cmp	r4, r6
 8019d64:	bf88      	it	hi
 8019d66:	2304      	movhi	r3, #4
 8019d68:	4443      	add	r3, r8
 8019d6a:	2200      	movs	r2, #0
 8019d6c:	f843 2b04 	str.w	r2, [r3], #4
 8019d70:	429f      	cmp	r7, r3
 8019d72:	d2fb      	bcs.n	8019d6c <__hexnan+0xcc>
 8019d74:	683b      	ldr	r3, [r7, #0]
 8019d76:	b91b      	cbnz	r3, 8019d80 <__hexnan+0xe0>
 8019d78:	4547      	cmp	r7, r8
 8019d7a:	d127      	bne.n	8019dcc <__hexnan+0x12c>
 8019d7c:	2301      	movs	r3, #1
 8019d7e:	603b      	str	r3, [r7, #0]
 8019d80:	2005      	movs	r0, #5
 8019d82:	e026      	b.n	8019dd2 <__hexnan+0x132>
 8019d84:	3501      	adds	r5, #1
 8019d86:	2d08      	cmp	r5, #8
 8019d88:	f10b 0b01 	add.w	fp, fp, #1
 8019d8c:	dd06      	ble.n	8019d9c <__hexnan+0xfc>
 8019d8e:	4544      	cmp	r4, r8
 8019d90:	d9c3      	bls.n	8019d1a <__hexnan+0x7a>
 8019d92:	2300      	movs	r3, #0
 8019d94:	f844 3c04 	str.w	r3, [r4, #-4]
 8019d98:	2501      	movs	r5, #1
 8019d9a:	3c04      	subs	r4, #4
 8019d9c:	6822      	ldr	r2, [r4, #0]
 8019d9e:	f000 000f 	and.w	r0, r0, #15
 8019da2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8019da6:	6022      	str	r2, [r4, #0]
 8019da8:	e7b7      	b.n	8019d1a <__hexnan+0x7a>
 8019daa:	2508      	movs	r5, #8
 8019dac:	e7b5      	b.n	8019d1a <__hexnan+0x7a>
 8019dae:	9b01      	ldr	r3, [sp, #4]
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	d0df      	beq.n	8019d74 <__hexnan+0xd4>
 8019db4:	f04f 32ff 	mov.w	r2, #4294967295
 8019db8:	f1c3 0320 	rsb	r3, r3, #32
 8019dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8019dc0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019dc4:	401a      	ands	r2, r3
 8019dc6:	f846 2c04 	str.w	r2, [r6, #-4]
 8019dca:	e7d3      	b.n	8019d74 <__hexnan+0xd4>
 8019dcc:	3f04      	subs	r7, #4
 8019dce:	e7d1      	b.n	8019d74 <__hexnan+0xd4>
 8019dd0:	2004      	movs	r0, #4
 8019dd2:	b007      	add	sp, #28
 8019dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019dd8 <_localeconv_r>:
 8019dd8:	4800      	ldr	r0, [pc, #0]	; (8019ddc <_localeconv_r+0x4>)
 8019dda:	4770      	bx	lr
 8019ddc:	200001cc 	.word	0x200001cc

08019de0 <__retarget_lock_init_recursive>:
 8019de0:	4770      	bx	lr

08019de2 <__retarget_lock_acquire_recursive>:
 8019de2:	4770      	bx	lr

08019de4 <__retarget_lock_release_recursive>:
 8019de4:	4770      	bx	lr

08019de6 <__ascii_mbtowc>:
 8019de6:	b082      	sub	sp, #8
 8019de8:	b901      	cbnz	r1, 8019dec <__ascii_mbtowc+0x6>
 8019dea:	a901      	add	r1, sp, #4
 8019dec:	b142      	cbz	r2, 8019e00 <__ascii_mbtowc+0x1a>
 8019dee:	b14b      	cbz	r3, 8019e04 <__ascii_mbtowc+0x1e>
 8019df0:	7813      	ldrb	r3, [r2, #0]
 8019df2:	600b      	str	r3, [r1, #0]
 8019df4:	7812      	ldrb	r2, [r2, #0]
 8019df6:	1e10      	subs	r0, r2, #0
 8019df8:	bf18      	it	ne
 8019dfa:	2001      	movne	r0, #1
 8019dfc:	b002      	add	sp, #8
 8019dfe:	4770      	bx	lr
 8019e00:	4610      	mov	r0, r2
 8019e02:	e7fb      	b.n	8019dfc <__ascii_mbtowc+0x16>
 8019e04:	f06f 0001 	mvn.w	r0, #1
 8019e08:	e7f8      	b.n	8019dfc <__ascii_mbtowc+0x16>
	...

08019e0c <__malloc_lock>:
 8019e0c:	4801      	ldr	r0, [pc, #4]	; (8019e14 <__malloc_lock+0x8>)
 8019e0e:	f7ff bfe8 	b.w	8019de2 <__retarget_lock_acquire_recursive>
 8019e12:	bf00      	nop
 8019e14:	20006e88 	.word	0x20006e88

08019e18 <__malloc_unlock>:
 8019e18:	4801      	ldr	r0, [pc, #4]	; (8019e20 <__malloc_unlock+0x8>)
 8019e1a:	f7ff bfe3 	b.w	8019de4 <__retarget_lock_release_recursive>
 8019e1e:	bf00      	nop
 8019e20:	20006e88 	.word	0x20006e88

08019e24 <_Balloc>:
 8019e24:	b570      	push	{r4, r5, r6, lr}
 8019e26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019e28:	4604      	mov	r4, r0
 8019e2a:	460d      	mov	r5, r1
 8019e2c:	b976      	cbnz	r6, 8019e4c <_Balloc+0x28>
 8019e2e:	2010      	movs	r0, #16
 8019e30:	f7fc ffb4 	bl	8016d9c <malloc>
 8019e34:	4602      	mov	r2, r0
 8019e36:	6260      	str	r0, [r4, #36]	; 0x24
 8019e38:	b920      	cbnz	r0, 8019e44 <_Balloc+0x20>
 8019e3a:	4b18      	ldr	r3, [pc, #96]	; (8019e9c <_Balloc+0x78>)
 8019e3c:	4818      	ldr	r0, [pc, #96]	; (8019ea0 <_Balloc+0x7c>)
 8019e3e:	2166      	movs	r1, #102	; 0x66
 8019e40:	f7fe fcb6 	bl	80187b0 <__assert_func>
 8019e44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019e48:	6006      	str	r6, [r0, #0]
 8019e4a:	60c6      	str	r6, [r0, #12]
 8019e4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019e4e:	68f3      	ldr	r3, [r6, #12]
 8019e50:	b183      	cbz	r3, 8019e74 <_Balloc+0x50>
 8019e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019e54:	68db      	ldr	r3, [r3, #12]
 8019e56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019e5a:	b9b8      	cbnz	r0, 8019e8c <_Balloc+0x68>
 8019e5c:	2101      	movs	r1, #1
 8019e5e:	fa01 f605 	lsl.w	r6, r1, r5
 8019e62:	1d72      	adds	r2, r6, #5
 8019e64:	0092      	lsls	r2, r2, #2
 8019e66:	4620      	mov	r0, r4
 8019e68:	f000 fc97 	bl	801a79a <_calloc_r>
 8019e6c:	b160      	cbz	r0, 8019e88 <_Balloc+0x64>
 8019e6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019e72:	e00e      	b.n	8019e92 <_Balloc+0x6e>
 8019e74:	2221      	movs	r2, #33	; 0x21
 8019e76:	2104      	movs	r1, #4
 8019e78:	4620      	mov	r0, r4
 8019e7a:	f000 fc8e 	bl	801a79a <_calloc_r>
 8019e7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019e80:	60f0      	str	r0, [r6, #12]
 8019e82:	68db      	ldr	r3, [r3, #12]
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d1e4      	bne.n	8019e52 <_Balloc+0x2e>
 8019e88:	2000      	movs	r0, #0
 8019e8a:	bd70      	pop	{r4, r5, r6, pc}
 8019e8c:	6802      	ldr	r2, [r0, #0]
 8019e8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019e92:	2300      	movs	r3, #0
 8019e94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019e98:	e7f7      	b.n	8019e8a <_Balloc+0x66>
 8019e9a:	bf00      	nop
 8019e9c:	0801fc08 	.word	0x0801fc08
 8019ea0:	0801fe6c 	.word	0x0801fe6c

08019ea4 <_Bfree>:
 8019ea4:	b570      	push	{r4, r5, r6, lr}
 8019ea6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019ea8:	4605      	mov	r5, r0
 8019eaa:	460c      	mov	r4, r1
 8019eac:	b976      	cbnz	r6, 8019ecc <_Bfree+0x28>
 8019eae:	2010      	movs	r0, #16
 8019eb0:	f7fc ff74 	bl	8016d9c <malloc>
 8019eb4:	4602      	mov	r2, r0
 8019eb6:	6268      	str	r0, [r5, #36]	; 0x24
 8019eb8:	b920      	cbnz	r0, 8019ec4 <_Bfree+0x20>
 8019eba:	4b09      	ldr	r3, [pc, #36]	; (8019ee0 <_Bfree+0x3c>)
 8019ebc:	4809      	ldr	r0, [pc, #36]	; (8019ee4 <_Bfree+0x40>)
 8019ebe:	218a      	movs	r1, #138	; 0x8a
 8019ec0:	f7fe fc76 	bl	80187b0 <__assert_func>
 8019ec4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019ec8:	6006      	str	r6, [r0, #0]
 8019eca:	60c6      	str	r6, [r0, #12]
 8019ecc:	b13c      	cbz	r4, 8019ede <_Bfree+0x3a>
 8019ece:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019ed0:	6862      	ldr	r2, [r4, #4]
 8019ed2:	68db      	ldr	r3, [r3, #12]
 8019ed4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019ed8:	6021      	str	r1, [r4, #0]
 8019eda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019ede:	bd70      	pop	{r4, r5, r6, pc}
 8019ee0:	0801fc08 	.word	0x0801fc08
 8019ee4:	0801fe6c 	.word	0x0801fe6c

08019ee8 <__multadd>:
 8019ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019eec:	690e      	ldr	r6, [r1, #16]
 8019eee:	4607      	mov	r7, r0
 8019ef0:	4698      	mov	r8, r3
 8019ef2:	460c      	mov	r4, r1
 8019ef4:	f101 0014 	add.w	r0, r1, #20
 8019ef8:	2300      	movs	r3, #0
 8019efa:	6805      	ldr	r5, [r0, #0]
 8019efc:	b2a9      	uxth	r1, r5
 8019efe:	fb02 8101 	mla	r1, r2, r1, r8
 8019f02:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8019f06:	0c2d      	lsrs	r5, r5, #16
 8019f08:	fb02 c505 	mla	r5, r2, r5, ip
 8019f0c:	b289      	uxth	r1, r1
 8019f0e:	3301      	adds	r3, #1
 8019f10:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8019f14:	429e      	cmp	r6, r3
 8019f16:	f840 1b04 	str.w	r1, [r0], #4
 8019f1a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8019f1e:	dcec      	bgt.n	8019efa <__multadd+0x12>
 8019f20:	f1b8 0f00 	cmp.w	r8, #0
 8019f24:	d022      	beq.n	8019f6c <__multadd+0x84>
 8019f26:	68a3      	ldr	r3, [r4, #8]
 8019f28:	42b3      	cmp	r3, r6
 8019f2a:	dc19      	bgt.n	8019f60 <__multadd+0x78>
 8019f2c:	6861      	ldr	r1, [r4, #4]
 8019f2e:	4638      	mov	r0, r7
 8019f30:	3101      	adds	r1, #1
 8019f32:	f7ff ff77 	bl	8019e24 <_Balloc>
 8019f36:	4605      	mov	r5, r0
 8019f38:	b928      	cbnz	r0, 8019f46 <__multadd+0x5e>
 8019f3a:	4602      	mov	r2, r0
 8019f3c:	4b0d      	ldr	r3, [pc, #52]	; (8019f74 <__multadd+0x8c>)
 8019f3e:	480e      	ldr	r0, [pc, #56]	; (8019f78 <__multadd+0x90>)
 8019f40:	21b5      	movs	r1, #181	; 0xb5
 8019f42:	f7fe fc35 	bl	80187b0 <__assert_func>
 8019f46:	6922      	ldr	r2, [r4, #16]
 8019f48:	3202      	adds	r2, #2
 8019f4a:	f104 010c 	add.w	r1, r4, #12
 8019f4e:	0092      	lsls	r2, r2, #2
 8019f50:	300c      	adds	r0, #12
 8019f52:	f7fc ff41 	bl	8016dd8 <memcpy>
 8019f56:	4621      	mov	r1, r4
 8019f58:	4638      	mov	r0, r7
 8019f5a:	f7ff ffa3 	bl	8019ea4 <_Bfree>
 8019f5e:	462c      	mov	r4, r5
 8019f60:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8019f64:	3601      	adds	r6, #1
 8019f66:	f8c3 8014 	str.w	r8, [r3, #20]
 8019f6a:	6126      	str	r6, [r4, #16]
 8019f6c:	4620      	mov	r0, r4
 8019f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f72:	bf00      	nop
 8019f74:	0801fd78 	.word	0x0801fd78
 8019f78:	0801fe6c 	.word	0x0801fe6c

08019f7c <__s2b>:
 8019f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f80:	460c      	mov	r4, r1
 8019f82:	4615      	mov	r5, r2
 8019f84:	461f      	mov	r7, r3
 8019f86:	2209      	movs	r2, #9
 8019f88:	3308      	adds	r3, #8
 8019f8a:	4606      	mov	r6, r0
 8019f8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8019f90:	2100      	movs	r1, #0
 8019f92:	2201      	movs	r2, #1
 8019f94:	429a      	cmp	r2, r3
 8019f96:	db09      	blt.n	8019fac <__s2b+0x30>
 8019f98:	4630      	mov	r0, r6
 8019f9a:	f7ff ff43 	bl	8019e24 <_Balloc>
 8019f9e:	b940      	cbnz	r0, 8019fb2 <__s2b+0x36>
 8019fa0:	4602      	mov	r2, r0
 8019fa2:	4b19      	ldr	r3, [pc, #100]	; (801a008 <__s2b+0x8c>)
 8019fa4:	4819      	ldr	r0, [pc, #100]	; (801a00c <__s2b+0x90>)
 8019fa6:	21ce      	movs	r1, #206	; 0xce
 8019fa8:	f7fe fc02 	bl	80187b0 <__assert_func>
 8019fac:	0052      	lsls	r2, r2, #1
 8019fae:	3101      	adds	r1, #1
 8019fb0:	e7f0      	b.n	8019f94 <__s2b+0x18>
 8019fb2:	9b08      	ldr	r3, [sp, #32]
 8019fb4:	6143      	str	r3, [r0, #20]
 8019fb6:	2d09      	cmp	r5, #9
 8019fb8:	f04f 0301 	mov.w	r3, #1
 8019fbc:	6103      	str	r3, [r0, #16]
 8019fbe:	dd16      	ble.n	8019fee <__s2b+0x72>
 8019fc0:	f104 0909 	add.w	r9, r4, #9
 8019fc4:	46c8      	mov	r8, r9
 8019fc6:	442c      	add	r4, r5
 8019fc8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019fcc:	4601      	mov	r1, r0
 8019fce:	3b30      	subs	r3, #48	; 0x30
 8019fd0:	220a      	movs	r2, #10
 8019fd2:	4630      	mov	r0, r6
 8019fd4:	f7ff ff88 	bl	8019ee8 <__multadd>
 8019fd8:	45a0      	cmp	r8, r4
 8019fda:	d1f5      	bne.n	8019fc8 <__s2b+0x4c>
 8019fdc:	f1a5 0408 	sub.w	r4, r5, #8
 8019fe0:	444c      	add	r4, r9
 8019fe2:	1b2d      	subs	r5, r5, r4
 8019fe4:	1963      	adds	r3, r4, r5
 8019fe6:	42bb      	cmp	r3, r7
 8019fe8:	db04      	blt.n	8019ff4 <__s2b+0x78>
 8019fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019fee:	340a      	adds	r4, #10
 8019ff0:	2509      	movs	r5, #9
 8019ff2:	e7f6      	b.n	8019fe2 <__s2b+0x66>
 8019ff4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019ff8:	4601      	mov	r1, r0
 8019ffa:	3b30      	subs	r3, #48	; 0x30
 8019ffc:	220a      	movs	r2, #10
 8019ffe:	4630      	mov	r0, r6
 801a000:	f7ff ff72 	bl	8019ee8 <__multadd>
 801a004:	e7ee      	b.n	8019fe4 <__s2b+0x68>
 801a006:	bf00      	nop
 801a008:	0801fd78 	.word	0x0801fd78
 801a00c:	0801fe6c 	.word	0x0801fe6c

0801a010 <__hi0bits>:
 801a010:	0c03      	lsrs	r3, r0, #16
 801a012:	041b      	lsls	r3, r3, #16
 801a014:	b9d3      	cbnz	r3, 801a04c <__hi0bits+0x3c>
 801a016:	0400      	lsls	r0, r0, #16
 801a018:	2310      	movs	r3, #16
 801a01a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a01e:	bf04      	itt	eq
 801a020:	0200      	lsleq	r0, r0, #8
 801a022:	3308      	addeq	r3, #8
 801a024:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a028:	bf04      	itt	eq
 801a02a:	0100      	lsleq	r0, r0, #4
 801a02c:	3304      	addeq	r3, #4
 801a02e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a032:	bf04      	itt	eq
 801a034:	0080      	lsleq	r0, r0, #2
 801a036:	3302      	addeq	r3, #2
 801a038:	2800      	cmp	r0, #0
 801a03a:	db05      	blt.n	801a048 <__hi0bits+0x38>
 801a03c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801a040:	f103 0301 	add.w	r3, r3, #1
 801a044:	bf08      	it	eq
 801a046:	2320      	moveq	r3, #32
 801a048:	4618      	mov	r0, r3
 801a04a:	4770      	bx	lr
 801a04c:	2300      	movs	r3, #0
 801a04e:	e7e4      	b.n	801a01a <__hi0bits+0xa>

0801a050 <__lo0bits>:
 801a050:	6803      	ldr	r3, [r0, #0]
 801a052:	f013 0207 	ands.w	r2, r3, #7
 801a056:	4601      	mov	r1, r0
 801a058:	d00b      	beq.n	801a072 <__lo0bits+0x22>
 801a05a:	07da      	lsls	r2, r3, #31
 801a05c:	d424      	bmi.n	801a0a8 <__lo0bits+0x58>
 801a05e:	0798      	lsls	r0, r3, #30
 801a060:	bf49      	itett	mi
 801a062:	085b      	lsrmi	r3, r3, #1
 801a064:	089b      	lsrpl	r3, r3, #2
 801a066:	2001      	movmi	r0, #1
 801a068:	600b      	strmi	r3, [r1, #0]
 801a06a:	bf5c      	itt	pl
 801a06c:	600b      	strpl	r3, [r1, #0]
 801a06e:	2002      	movpl	r0, #2
 801a070:	4770      	bx	lr
 801a072:	b298      	uxth	r0, r3
 801a074:	b9b0      	cbnz	r0, 801a0a4 <__lo0bits+0x54>
 801a076:	0c1b      	lsrs	r3, r3, #16
 801a078:	2010      	movs	r0, #16
 801a07a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801a07e:	bf04      	itt	eq
 801a080:	0a1b      	lsreq	r3, r3, #8
 801a082:	3008      	addeq	r0, #8
 801a084:	071a      	lsls	r2, r3, #28
 801a086:	bf04      	itt	eq
 801a088:	091b      	lsreq	r3, r3, #4
 801a08a:	3004      	addeq	r0, #4
 801a08c:	079a      	lsls	r2, r3, #30
 801a08e:	bf04      	itt	eq
 801a090:	089b      	lsreq	r3, r3, #2
 801a092:	3002      	addeq	r0, #2
 801a094:	07da      	lsls	r2, r3, #31
 801a096:	d403      	bmi.n	801a0a0 <__lo0bits+0x50>
 801a098:	085b      	lsrs	r3, r3, #1
 801a09a:	f100 0001 	add.w	r0, r0, #1
 801a09e:	d005      	beq.n	801a0ac <__lo0bits+0x5c>
 801a0a0:	600b      	str	r3, [r1, #0]
 801a0a2:	4770      	bx	lr
 801a0a4:	4610      	mov	r0, r2
 801a0a6:	e7e8      	b.n	801a07a <__lo0bits+0x2a>
 801a0a8:	2000      	movs	r0, #0
 801a0aa:	4770      	bx	lr
 801a0ac:	2020      	movs	r0, #32
 801a0ae:	4770      	bx	lr

0801a0b0 <__i2b>:
 801a0b0:	b510      	push	{r4, lr}
 801a0b2:	460c      	mov	r4, r1
 801a0b4:	2101      	movs	r1, #1
 801a0b6:	f7ff feb5 	bl	8019e24 <_Balloc>
 801a0ba:	4602      	mov	r2, r0
 801a0bc:	b928      	cbnz	r0, 801a0ca <__i2b+0x1a>
 801a0be:	4b05      	ldr	r3, [pc, #20]	; (801a0d4 <__i2b+0x24>)
 801a0c0:	4805      	ldr	r0, [pc, #20]	; (801a0d8 <__i2b+0x28>)
 801a0c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801a0c6:	f7fe fb73 	bl	80187b0 <__assert_func>
 801a0ca:	2301      	movs	r3, #1
 801a0cc:	6144      	str	r4, [r0, #20]
 801a0ce:	6103      	str	r3, [r0, #16]
 801a0d0:	bd10      	pop	{r4, pc}
 801a0d2:	bf00      	nop
 801a0d4:	0801fd78 	.word	0x0801fd78
 801a0d8:	0801fe6c 	.word	0x0801fe6c

0801a0dc <__multiply>:
 801a0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0e0:	4614      	mov	r4, r2
 801a0e2:	690a      	ldr	r2, [r1, #16]
 801a0e4:	6923      	ldr	r3, [r4, #16]
 801a0e6:	429a      	cmp	r2, r3
 801a0e8:	bfb8      	it	lt
 801a0ea:	460b      	movlt	r3, r1
 801a0ec:	460d      	mov	r5, r1
 801a0ee:	bfbc      	itt	lt
 801a0f0:	4625      	movlt	r5, r4
 801a0f2:	461c      	movlt	r4, r3
 801a0f4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801a0f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801a0fc:	68ab      	ldr	r3, [r5, #8]
 801a0fe:	6869      	ldr	r1, [r5, #4]
 801a100:	eb0a 0709 	add.w	r7, sl, r9
 801a104:	42bb      	cmp	r3, r7
 801a106:	b085      	sub	sp, #20
 801a108:	bfb8      	it	lt
 801a10a:	3101      	addlt	r1, #1
 801a10c:	f7ff fe8a 	bl	8019e24 <_Balloc>
 801a110:	b930      	cbnz	r0, 801a120 <__multiply+0x44>
 801a112:	4602      	mov	r2, r0
 801a114:	4b42      	ldr	r3, [pc, #264]	; (801a220 <__multiply+0x144>)
 801a116:	4843      	ldr	r0, [pc, #268]	; (801a224 <__multiply+0x148>)
 801a118:	f240 115d 	movw	r1, #349	; 0x15d
 801a11c:	f7fe fb48 	bl	80187b0 <__assert_func>
 801a120:	f100 0614 	add.w	r6, r0, #20
 801a124:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801a128:	4633      	mov	r3, r6
 801a12a:	2200      	movs	r2, #0
 801a12c:	4543      	cmp	r3, r8
 801a12e:	d31e      	bcc.n	801a16e <__multiply+0x92>
 801a130:	f105 0c14 	add.w	ip, r5, #20
 801a134:	f104 0314 	add.w	r3, r4, #20
 801a138:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801a13c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801a140:	9202      	str	r2, [sp, #8]
 801a142:	ebac 0205 	sub.w	r2, ip, r5
 801a146:	3a15      	subs	r2, #21
 801a148:	f022 0203 	bic.w	r2, r2, #3
 801a14c:	3204      	adds	r2, #4
 801a14e:	f105 0115 	add.w	r1, r5, #21
 801a152:	458c      	cmp	ip, r1
 801a154:	bf38      	it	cc
 801a156:	2204      	movcc	r2, #4
 801a158:	9201      	str	r2, [sp, #4]
 801a15a:	9a02      	ldr	r2, [sp, #8]
 801a15c:	9303      	str	r3, [sp, #12]
 801a15e:	429a      	cmp	r2, r3
 801a160:	d808      	bhi.n	801a174 <__multiply+0x98>
 801a162:	2f00      	cmp	r7, #0
 801a164:	dc55      	bgt.n	801a212 <__multiply+0x136>
 801a166:	6107      	str	r7, [r0, #16]
 801a168:	b005      	add	sp, #20
 801a16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a16e:	f843 2b04 	str.w	r2, [r3], #4
 801a172:	e7db      	b.n	801a12c <__multiply+0x50>
 801a174:	f8b3 a000 	ldrh.w	sl, [r3]
 801a178:	f1ba 0f00 	cmp.w	sl, #0
 801a17c:	d020      	beq.n	801a1c0 <__multiply+0xe4>
 801a17e:	f105 0e14 	add.w	lr, r5, #20
 801a182:	46b1      	mov	r9, r6
 801a184:	2200      	movs	r2, #0
 801a186:	f85e 4b04 	ldr.w	r4, [lr], #4
 801a18a:	f8d9 b000 	ldr.w	fp, [r9]
 801a18e:	b2a1      	uxth	r1, r4
 801a190:	fa1f fb8b 	uxth.w	fp, fp
 801a194:	fb0a b101 	mla	r1, sl, r1, fp
 801a198:	4411      	add	r1, r2
 801a19a:	f8d9 2000 	ldr.w	r2, [r9]
 801a19e:	0c24      	lsrs	r4, r4, #16
 801a1a0:	0c12      	lsrs	r2, r2, #16
 801a1a2:	fb0a 2404 	mla	r4, sl, r4, r2
 801a1a6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801a1aa:	b289      	uxth	r1, r1
 801a1ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801a1b0:	45f4      	cmp	ip, lr
 801a1b2:	f849 1b04 	str.w	r1, [r9], #4
 801a1b6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801a1ba:	d8e4      	bhi.n	801a186 <__multiply+0xaa>
 801a1bc:	9901      	ldr	r1, [sp, #4]
 801a1be:	5072      	str	r2, [r6, r1]
 801a1c0:	9a03      	ldr	r2, [sp, #12]
 801a1c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a1c6:	3304      	adds	r3, #4
 801a1c8:	f1b9 0f00 	cmp.w	r9, #0
 801a1cc:	d01f      	beq.n	801a20e <__multiply+0x132>
 801a1ce:	6834      	ldr	r4, [r6, #0]
 801a1d0:	f105 0114 	add.w	r1, r5, #20
 801a1d4:	46b6      	mov	lr, r6
 801a1d6:	f04f 0a00 	mov.w	sl, #0
 801a1da:	880a      	ldrh	r2, [r1, #0]
 801a1dc:	f8be b002 	ldrh.w	fp, [lr, #2]
 801a1e0:	fb09 b202 	mla	r2, r9, r2, fp
 801a1e4:	4492      	add	sl, r2
 801a1e6:	b2a4      	uxth	r4, r4
 801a1e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801a1ec:	f84e 4b04 	str.w	r4, [lr], #4
 801a1f0:	f851 4b04 	ldr.w	r4, [r1], #4
 801a1f4:	f8be 2000 	ldrh.w	r2, [lr]
 801a1f8:	0c24      	lsrs	r4, r4, #16
 801a1fa:	fb09 2404 	mla	r4, r9, r4, r2
 801a1fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801a202:	458c      	cmp	ip, r1
 801a204:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801a208:	d8e7      	bhi.n	801a1da <__multiply+0xfe>
 801a20a:	9a01      	ldr	r2, [sp, #4]
 801a20c:	50b4      	str	r4, [r6, r2]
 801a20e:	3604      	adds	r6, #4
 801a210:	e7a3      	b.n	801a15a <__multiply+0x7e>
 801a212:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a216:	2b00      	cmp	r3, #0
 801a218:	d1a5      	bne.n	801a166 <__multiply+0x8a>
 801a21a:	3f01      	subs	r7, #1
 801a21c:	e7a1      	b.n	801a162 <__multiply+0x86>
 801a21e:	bf00      	nop
 801a220:	0801fd78 	.word	0x0801fd78
 801a224:	0801fe6c 	.word	0x0801fe6c

0801a228 <__pow5mult>:
 801a228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a22c:	4615      	mov	r5, r2
 801a22e:	f012 0203 	ands.w	r2, r2, #3
 801a232:	4606      	mov	r6, r0
 801a234:	460f      	mov	r7, r1
 801a236:	d007      	beq.n	801a248 <__pow5mult+0x20>
 801a238:	4c25      	ldr	r4, [pc, #148]	; (801a2d0 <__pow5mult+0xa8>)
 801a23a:	3a01      	subs	r2, #1
 801a23c:	2300      	movs	r3, #0
 801a23e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a242:	f7ff fe51 	bl	8019ee8 <__multadd>
 801a246:	4607      	mov	r7, r0
 801a248:	10ad      	asrs	r5, r5, #2
 801a24a:	d03d      	beq.n	801a2c8 <__pow5mult+0xa0>
 801a24c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801a24e:	b97c      	cbnz	r4, 801a270 <__pow5mult+0x48>
 801a250:	2010      	movs	r0, #16
 801a252:	f7fc fda3 	bl	8016d9c <malloc>
 801a256:	4602      	mov	r2, r0
 801a258:	6270      	str	r0, [r6, #36]	; 0x24
 801a25a:	b928      	cbnz	r0, 801a268 <__pow5mult+0x40>
 801a25c:	4b1d      	ldr	r3, [pc, #116]	; (801a2d4 <__pow5mult+0xac>)
 801a25e:	481e      	ldr	r0, [pc, #120]	; (801a2d8 <__pow5mult+0xb0>)
 801a260:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801a264:	f7fe faa4 	bl	80187b0 <__assert_func>
 801a268:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a26c:	6004      	str	r4, [r0, #0]
 801a26e:	60c4      	str	r4, [r0, #12]
 801a270:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801a274:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a278:	b94c      	cbnz	r4, 801a28e <__pow5mult+0x66>
 801a27a:	f240 2171 	movw	r1, #625	; 0x271
 801a27e:	4630      	mov	r0, r6
 801a280:	f7ff ff16 	bl	801a0b0 <__i2b>
 801a284:	2300      	movs	r3, #0
 801a286:	f8c8 0008 	str.w	r0, [r8, #8]
 801a28a:	4604      	mov	r4, r0
 801a28c:	6003      	str	r3, [r0, #0]
 801a28e:	f04f 0900 	mov.w	r9, #0
 801a292:	07eb      	lsls	r3, r5, #31
 801a294:	d50a      	bpl.n	801a2ac <__pow5mult+0x84>
 801a296:	4639      	mov	r1, r7
 801a298:	4622      	mov	r2, r4
 801a29a:	4630      	mov	r0, r6
 801a29c:	f7ff ff1e 	bl	801a0dc <__multiply>
 801a2a0:	4639      	mov	r1, r7
 801a2a2:	4680      	mov	r8, r0
 801a2a4:	4630      	mov	r0, r6
 801a2a6:	f7ff fdfd 	bl	8019ea4 <_Bfree>
 801a2aa:	4647      	mov	r7, r8
 801a2ac:	106d      	asrs	r5, r5, #1
 801a2ae:	d00b      	beq.n	801a2c8 <__pow5mult+0xa0>
 801a2b0:	6820      	ldr	r0, [r4, #0]
 801a2b2:	b938      	cbnz	r0, 801a2c4 <__pow5mult+0x9c>
 801a2b4:	4622      	mov	r2, r4
 801a2b6:	4621      	mov	r1, r4
 801a2b8:	4630      	mov	r0, r6
 801a2ba:	f7ff ff0f 	bl	801a0dc <__multiply>
 801a2be:	6020      	str	r0, [r4, #0]
 801a2c0:	f8c0 9000 	str.w	r9, [r0]
 801a2c4:	4604      	mov	r4, r0
 801a2c6:	e7e4      	b.n	801a292 <__pow5mult+0x6a>
 801a2c8:	4638      	mov	r0, r7
 801a2ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a2ce:	bf00      	nop
 801a2d0:	0801ffc0 	.word	0x0801ffc0
 801a2d4:	0801fc08 	.word	0x0801fc08
 801a2d8:	0801fe6c 	.word	0x0801fe6c

0801a2dc <__lshift>:
 801a2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2e0:	460c      	mov	r4, r1
 801a2e2:	6849      	ldr	r1, [r1, #4]
 801a2e4:	6923      	ldr	r3, [r4, #16]
 801a2e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a2ea:	68a3      	ldr	r3, [r4, #8]
 801a2ec:	4607      	mov	r7, r0
 801a2ee:	4691      	mov	r9, r2
 801a2f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a2f4:	f108 0601 	add.w	r6, r8, #1
 801a2f8:	42b3      	cmp	r3, r6
 801a2fa:	db0b      	blt.n	801a314 <__lshift+0x38>
 801a2fc:	4638      	mov	r0, r7
 801a2fe:	f7ff fd91 	bl	8019e24 <_Balloc>
 801a302:	4605      	mov	r5, r0
 801a304:	b948      	cbnz	r0, 801a31a <__lshift+0x3e>
 801a306:	4602      	mov	r2, r0
 801a308:	4b28      	ldr	r3, [pc, #160]	; (801a3ac <__lshift+0xd0>)
 801a30a:	4829      	ldr	r0, [pc, #164]	; (801a3b0 <__lshift+0xd4>)
 801a30c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801a310:	f7fe fa4e 	bl	80187b0 <__assert_func>
 801a314:	3101      	adds	r1, #1
 801a316:	005b      	lsls	r3, r3, #1
 801a318:	e7ee      	b.n	801a2f8 <__lshift+0x1c>
 801a31a:	2300      	movs	r3, #0
 801a31c:	f100 0114 	add.w	r1, r0, #20
 801a320:	f100 0210 	add.w	r2, r0, #16
 801a324:	4618      	mov	r0, r3
 801a326:	4553      	cmp	r3, sl
 801a328:	db33      	blt.n	801a392 <__lshift+0xb6>
 801a32a:	6920      	ldr	r0, [r4, #16]
 801a32c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a330:	f104 0314 	add.w	r3, r4, #20
 801a334:	f019 091f 	ands.w	r9, r9, #31
 801a338:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a33c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a340:	d02b      	beq.n	801a39a <__lshift+0xbe>
 801a342:	f1c9 0e20 	rsb	lr, r9, #32
 801a346:	468a      	mov	sl, r1
 801a348:	2200      	movs	r2, #0
 801a34a:	6818      	ldr	r0, [r3, #0]
 801a34c:	fa00 f009 	lsl.w	r0, r0, r9
 801a350:	4302      	orrs	r2, r0
 801a352:	f84a 2b04 	str.w	r2, [sl], #4
 801a356:	f853 2b04 	ldr.w	r2, [r3], #4
 801a35a:	459c      	cmp	ip, r3
 801a35c:	fa22 f20e 	lsr.w	r2, r2, lr
 801a360:	d8f3      	bhi.n	801a34a <__lshift+0x6e>
 801a362:	ebac 0304 	sub.w	r3, ip, r4
 801a366:	3b15      	subs	r3, #21
 801a368:	f023 0303 	bic.w	r3, r3, #3
 801a36c:	3304      	adds	r3, #4
 801a36e:	f104 0015 	add.w	r0, r4, #21
 801a372:	4584      	cmp	ip, r0
 801a374:	bf38      	it	cc
 801a376:	2304      	movcc	r3, #4
 801a378:	50ca      	str	r2, [r1, r3]
 801a37a:	b10a      	cbz	r2, 801a380 <__lshift+0xa4>
 801a37c:	f108 0602 	add.w	r6, r8, #2
 801a380:	3e01      	subs	r6, #1
 801a382:	4638      	mov	r0, r7
 801a384:	612e      	str	r6, [r5, #16]
 801a386:	4621      	mov	r1, r4
 801a388:	f7ff fd8c 	bl	8019ea4 <_Bfree>
 801a38c:	4628      	mov	r0, r5
 801a38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a392:	f842 0f04 	str.w	r0, [r2, #4]!
 801a396:	3301      	adds	r3, #1
 801a398:	e7c5      	b.n	801a326 <__lshift+0x4a>
 801a39a:	3904      	subs	r1, #4
 801a39c:	f853 2b04 	ldr.w	r2, [r3], #4
 801a3a0:	f841 2f04 	str.w	r2, [r1, #4]!
 801a3a4:	459c      	cmp	ip, r3
 801a3a6:	d8f9      	bhi.n	801a39c <__lshift+0xc0>
 801a3a8:	e7ea      	b.n	801a380 <__lshift+0xa4>
 801a3aa:	bf00      	nop
 801a3ac:	0801fd78 	.word	0x0801fd78
 801a3b0:	0801fe6c 	.word	0x0801fe6c

0801a3b4 <__mcmp>:
 801a3b4:	b530      	push	{r4, r5, lr}
 801a3b6:	6902      	ldr	r2, [r0, #16]
 801a3b8:	690c      	ldr	r4, [r1, #16]
 801a3ba:	1b12      	subs	r2, r2, r4
 801a3bc:	d10e      	bne.n	801a3dc <__mcmp+0x28>
 801a3be:	f100 0314 	add.w	r3, r0, #20
 801a3c2:	3114      	adds	r1, #20
 801a3c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a3c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a3cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a3d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a3d4:	42a5      	cmp	r5, r4
 801a3d6:	d003      	beq.n	801a3e0 <__mcmp+0x2c>
 801a3d8:	d305      	bcc.n	801a3e6 <__mcmp+0x32>
 801a3da:	2201      	movs	r2, #1
 801a3dc:	4610      	mov	r0, r2
 801a3de:	bd30      	pop	{r4, r5, pc}
 801a3e0:	4283      	cmp	r3, r0
 801a3e2:	d3f3      	bcc.n	801a3cc <__mcmp+0x18>
 801a3e4:	e7fa      	b.n	801a3dc <__mcmp+0x28>
 801a3e6:	f04f 32ff 	mov.w	r2, #4294967295
 801a3ea:	e7f7      	b.n	801a3dc <__mcmp+0x28>

0801a3ec <__mdiff>:
 801a3ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3f0:	460c      	mov	r4, r1
 801a3f2:	4606      	mov	r6, r0
 801a3f4:	4611      	mov	r1, r2
 801a3f6:	4620      	mov	r0, r4
 801a3f8:	4617      	mov	r7, r2
 801a3fa:	f7ff ffdb 	bl	801a3b4 <__mcmp>
 801a3fe:	1e05      	subs	r5, r0, #0
 801a400:	d110      	bne.n	801a424 <__mdiff+0x38>
 801a402:	4629      	mov	r1, r5
 801a404:	4630      	mov	r0, r6
 801a406:	f7ff fd0d 	bl	8019e24 <_Balloc>
 801a40a:	b930      	cbnz	r0, 801a41a <__mdiff+0x2e>
 801a40c:	4b39      	ldr	r3, [pc, #228]	; (801a4f4 <__mdiff+0x108>)
 801a40e:	4602      	mov	r2, r0
 801a410:	f240 2132 	movw	r1, #562	; 0x232
 801a414:	4838      	ldr	r0, [pc, #224]	; (801a4f8 <__mdiff+0x10c>)
 801a416:	f7fe f9cb 	bl	80187b0 <__assert_func>
 801a41a:	2301      	movs	r3, #1
 801a41c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a420:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a424:	bfa4      	itt	ge
 801a426:	463b      	movge	r3, r7
 801a428:	4627      	movge	r7, r4
 801a42a:	4630      	mov	r0, r6
 801a42c:	6879      	ldr	r1, [r7, #4]
 801a42e:	bfa6      	itte	ge
 801a430:	461c      	movge	r4, r3
 801a432:	2500      	movge	r5, #0
 801a434:	2501      	movlt	r5, #1
 801a436:	f7ff fcf5 	bl	8019e24 <_Balloc>
 801a43a:	b920      	cbnz	r0, 801a446 <__mdiff+0x5a>
 801a43c:	4b2d      	ldr	r3, [pc, #180]	; (801a4f4 <__mdiff+0x108>)
 801a43e:	4602      	mov	r2, r0
 801a440:	f44f 7110 	mov.w	r1, #576	; 0x240
 801a444:	e7e6      	b.n	801a414 <__mdiff+0x28>
 801a446:	693e      	ldr	r6, [r7, #16]
 801a448:	60c5      	str	r5, [r0, #12]
 801a44a:	6925      	ldr	r5, [r4, #16]
 801a44c:	f107 0114 	add.w	r1, r7, #20
 801a450:	f104 0914 	add.w	r9, r4, #20
 801a454:	f100 0e14 	add.w	lr, r0, #20
 801a458:	f107 0210 	add.w	r2, r7, #16
 801a45c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801a460:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801a464:	46f2      	mov	sl, lr
 801a466:	2700      	movs	r7, #0
 801a468:	f859 3b04 	ldr.w	r3, [r9], #4
 801a46c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a470:	fa1f f883 	uxth.w	r8, r3
 801a474:	fa17 f78b 	uxtah	r7, r7, fp
 801a478:	0c1b      	lsrs	r3, r3, #16
 801a47a:	eba7 0808 	sub.w	r8, r7, r8
 801a47e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a482:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a486:	fa1f f888 	uxth.w	r8, r8
 801a48a:	141f      	asrs	r7, r3, #16
 801a48c:	454d      	cmp	r5, r9
 801a48e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a492:	f84a 3b04 	str.w	r3, [sl], #4
 801a496:	d8e7      	bhi.n	801a468 <__mdiff+0x7c>
 801a498:	1b2b      	subs	r3, r5, r4
 801a49a:	3b15      	subs	r3, #21
 801a49c:	f023 0303 	bic.w	r3, r3, #3
 801a4a0:	3304      	adds	r3, #4
 801a4a2:	3415      	adds	r4, #21
 801a4a4:	42a5      	cmp	r5, r4
 801a4a6:	bf38      	it	cc
 801a4a8:	2304      	movcc	r3, #4
 801a4aa:	4419      	add	r1, r3
 801a4ac:	4473      	add	r3, lr
 801a4ae:	469e      	mov	lr, r3
 801a4b0:	460d      	mov	r5, r1
 801a4b2:	4565      	cmp	r5, ip
 801a4b4:	d30e      	bcc.n	801a4d4 <__mdiff+0xe8>
 801a4b6:	f10c 0203 	add.w	r2, ip, #3
 801a4ba:	1a52      	subs	r2, r2, r1
 801a4bc:	f022 0203 	bic.w	r2, r2, #3
 801a4c0:	3903      	subs	r1, #3
 801a4c2:	458c      	cmp	ip, r1
 801a4c4:	bf38      	it	cc
 801a4c6:	2200      	movcc	r2, #0
 801a4c8:	441a      	add	r2, r3
 801a4ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801a4ce:	b17b      	cbz	r3, 801a4f0 <__mdiff+0x104>
 801a4d0:	6106      	str	r6, [r0, #16]
 801a4d2:	e7a5      	b.n	801a420 <__mdiff+0x34>
 801a4d4:	f855 8b04 	ldr.w	r8, [r5], #4
 801a4d8:	fa17 f488 	uxtah	r4, r7, r8
 801a4dc:	1422      	asrs	r2, r4, #16
 801a4de:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801a4e2:	b2a4      	uxth	r4, r4
 801a4e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801a4e8:	f84e 4b04 	str.w	r4, [lr], #4
 801a4ec:	1417      	asrs	r7, r2, #16
 801a4ee:	e7e0      	b.n	801a4b2 <__mdiff+0xc6>
 801a4f0:	3e01      	subs	r6, #1
 801a4f2:	e7ea      	b.n	801a4ca <__mdiff+0xde>
 801a4f4:	0801fd78 	.word	0x0801fd78
 801a4f8:	0801fe6c 	.word	0x0801fe6c

0801a4fc <__ulp>:
 801a4fc:	b082      	sub	sp, #8
 801a4fe:	ed8d 0b00 	vstr	d0, [sp]
 801a502:	9b01      	ldr	r3, [sp, #4]
 801a504:	4912      	ldr	r1, [pc, #72]	; (801a550 <__ulp+0x54>)
 801a506:	4019      	ands	r1, r3
 801a508:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801a50c:	2900      	cmp	r1, #0
 801a50e:	dd05      	ble.n	801a51c <__ulp+0x20>
 801a510:	2200      	movs	r2, #0
 801a512:	460b      	mov	r3, r1
 801a514:	ec43 2b10 	vmov	d0, r2, r3
 801a518:	b002      	add	sp, #8
 801a51a:	4770      	bx	lr
 801a51c:	4249      	negs	r1, r1
 801a51e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801a522:	ea4f 5021 	mov.w	r0, r1, asr #20
 801a526:	f04f 0200 	mov.w	r2, #0
 801a52a:	f04f 0300 	mov.w	r3, #0
 801a52e:	da04      	bge.n	801a53a <__ulp+0x3e>
 801a530:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801a534:	fa41 f300 	asr.w	r3, r1, r0
 801a538:	e7ec      	b.n	801a514 <__ulp+0x18>
 801a53a:	f1a0 0114 	sub.w	r1, r0, #20
 801a53e:	291e      	cmp	r1, #30
 801a540:	bfda      	itte	le
 801a542:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801a546:	fa20 f101 	lsrle.w	r1, r0, r1
 801a54a:	2101      	movgt	r1, #1
 801a54c:	460a      	mov	r2, r1
 801a54e:	e7e1      	b.n	801a514 <__ulp+0x18>
 801a550:	7ff00000 	.word	0x7ff00000

0801a554 <__b2d>:
 801a554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a556:	6905      	ldr	r5, [r0, #16]
 801a558:	f100 0714 	add.w	r7, r0, #20
 801a55c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801a560:	1f2e      	subs	r6, r5, #4
 801a562:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801a566:	4620      	mov	r0, r4
 801a568:	f7ff fd52 	bl	801a010 <__hi0bits>
 801a56c:	f1c0 0320 	rsb	r3, r0, #32
 801a570:	280a      	cmp	r0, #10
 801a572:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801a5f0 <__b2d+0x9c>
 801a576:	600b      	str	r3, [r1, #0]
 801a578:	dc14      	bgt.n	801a5a4 <__b2d+0x50>
 801a57a:	f1c0 0e0b 	rsb	lr, r0, #11
 801a57e:	fa24 f10e 	lsr.w	r1, r4, lr
 801a582:	42b7      	cmp	r7, r6
 801a584:	ea41 030c 	orr.w	r3, r1, ip
 801a588:	bf34      	ite	cc
 801a58a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a58e:	2100      	movcs	r1, #0
 801a590:	3015      	adds	r0, #21
 801a592:	fa04 f000 	lsl.w	r0, r4, r0
 801a596:	fa21 f10e 	lsr.w	r1, r1, lr
 801a59a:	ea40 0201 	orr.w	r2, r0, r1
 801a59e:	ec43 2b10 	vmov	d0, r2, r3
 801a5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5a4:	42b7      	cmp	r7, r6
 801a5a6:	bf3a      	itte	cc
 801a5a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a5ac:	f1a5 0608 	subcc.w	r6, r5, #8
 801a5b0:	2100      	movcs	r1, #0
 801a5b2:	380b      	subs	r0, #11
 801a5b4:	d017      	beq.n	801a5e6 <__b2d+0x92>
 801a5b6:	f1c0 0c20 	rsb	ip, r0, #32
 801a5ba:	fa04 f500 	lsl.w	r5, r4, r0
 801a5be:	42be      	cmp	r6, r7
 801a5c0:	fa21 f40c 	lsr.w	r4, r1, ip
 801a5c4:	ea45 0504 	orr.w	r5, r5, r4
 801a5c8:	bf8c      	ite	hi
 801a5ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801a5ce:	2400      	movls	r4, #0
 801a5d0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801a5d4:	fa01 f000 	lsl.w	r0, r1, r0
 801a5d8:	fa24 f40c 	lsr.w	r4, r4, ip
 801a5dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a5e0:	ea40 0204 	orr.w	r2, r0, r4
 801a5e4:	e7db      	b.n	801a59e <__b2d+0x4a>
 801a5e6:	ea44 030c 	orr.w	r3, r4, ip
 801a5ea:	460a      	mov	r2, r1
 801a5ec:	e7d7      	b.n	801a59e <__b2d+0x4a>
 801a5ee:	bf00      	nop
 801a5f0:	3ff00000 	.word	0x3ff00000

0801a5f4 <__d2b>:
 801a5f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a5f8:	4689      	mov	r9, r1
 801a5fa:	2101      	movs	r1, #1
 801a5fc:	ec57 6b10 	vmov	r6, r7, d0
 801a600:	4690      	mov	r8, r2
 801a602:	f7ff fc0f 	bl	8019e24 <_Balloc>
 801a606:	4604      	mov	r4, r0
 801a608:	b930      	cbnz	r0, 801a618 <__d2b+0x24>
 801a60a:	4602      	mov	r2, r0
 801a60c:	4b25      	ldr	r3, [pc, #148]	; (801a6a4 <__d2b+0xb0>)
 801a60e:	4826      	ldr	r0, [pc, #152]	; (801a6a8 <__d2b+0xb4>)
 801a610:	f240 310a 	movw	r1, #778	; 0x30a
 801a614:	f7fe f8cc 	bl	80187b0 <__assert_func>
 801a618:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801a61c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a620:	bb35      	cbnz	r5, 801a670 <__d2b+0x7c>
 801a622:	2e00      	cmp	r6, #0
 801a624:	9301      	str	r3, [sp, #4]
 801a626:	d028      	beq.n	801a67a <__d2b+0x86>
 801a628:	4668      	mov	r0, sp
 801a62a:	9600      	str	r6, [sp, #0]
 801a62c:	f7ff fd10 	bl	801a050 <__lo0bits>
 801a630:	9900      	ldr	r1, [sp, #0]
 801a632:	b300      	cbz	r0, 801a676 <__d2b+0x82>
 801a634:	9a01      	ldr	r2, [sp, #4]
 801a636:	f1c0 0320 	rsb	r3, r0, #32
 801a63a:	fa02 f303 	lsl.w	r3, r2, r3
 801a63e:	430b      	orrs	r3, r1
 801a640:	40c2      	lsrs	r2, r0
 801a642:	6163      	str	r3, [r4, #20]
 801a644:	9201      	str	r2, [sp, #4]
 801a646:	9b01      	ldr	r3, [sp, #4]
 801a648:	61a3      	str	r3, [r4, #24]
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	bf14      	ite	ne
 801a64e:	2202      	movne	r2, #2
 801a650:	2201      	moveq	r2, #1
 801a652:	6122      	str	r2, [r4, #16]
 801a654:	b1d5      	cbz	r5, 801a68c <__d2b+0x98>
 801a656:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a65a:	4405      	add	r5, r0
 801a65c:	f8c9 5000 	str.w	r5, [r9]
 801a660:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a664:	f8c8 0000 	str.w	r0, [r8]
 801a668:	4620      	mov	r0, r4
 801a66a:	b003      	add	sp, #12
 801a66c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a670:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a674:	e7d5      	b.n	801a622 <__d2b+0x2e>
 801a676:	6161      	str	r1, [r4, #20]
 801a678:	e7e5      	b.n	801a646 <__d2b+0x52>
 801a67a:	a801      	add	r0, sp, #4
 801a67c:	f7ff fce8 	bl	801a050 <__lo0bits>
 801a680:	9b01      	ldr	r3, [sp, #4]
 801a682:	6163      	str	r3, [r4, #20]
 801a684:	2201      	movs	r2, #1
 801a686:	6122      	str	r2, [r4, #16]
 801a688:	3020      	adds	r0, #32
 801a68a:	e7e3      	b.n	801a654 <__d2b+0x60>
 801a68c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a690:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a694:	f8c9 0000 	str.w	r0, [r9]
 801a698:	6918      	ldr	r0, [r3, #16]
 801a69a:	f7ff fcb9 	bl	801a010 <__hi0bits>
 801a69e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a6a2:	e7df      	b.n	801a664 <__d2b+0x70>
 801a6a4:	0801fd78 	.word	0x0801fd78
 801a6a8:	0801fe6c 	.word	0x0801fe6c

0801a6ac <__ratio>:
 801a6ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6b0:	4688      	mov	r8, r1
 801a6b2:	4669      	mov	r1, sp
 801a6b4:	4681      	mov	r9, r0
 801a6b6:	f7ff ff4d 	bl	801a554 <__b2d>
 801a6ba:	a901      	add	r1, sp, #4
 801a6bc:	4640      	mov	r0, r8
 801a6be:	ec55 4b10 	vmov	r4, r5, d0
 801a6c2:	f7ff ff47 	bl	801a554 <__b2d>
 801a6c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a6ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a6ce:	eba3 0c02 	sub.w	ip, r3, r2
 801a6d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a6d6:	1a9b      	subs	r3, r3, r2
 801a6d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801a6dc:	ec51 0b10 	vmov	r0, r1, d0
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	bfd6      	itet	le
 801a6e4:	460a      	movle	r2, r1
 801a6e6:	462a      	movgt	r2, r5
 801a6e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a6ec:	468b      	mov	fp, r1
 801a6ee:	462f      	mov	r7, r5
 801a6f0:	bfd4      	ite	le
 801a6f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801a6f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801a6fa:	4620      	mov	r0, r4
 801a6fc:	ee10 2a10 	vmov	r2, s0
 801a700:	465b      	mov	r3, fp
 801a702:	4639      	mov	r1, r7
 801a704:	f7e6 f8b2 	bl	800086c <__aeabi_ddiv>
 801a708:	ec41 0b10 	vmov	d0, r0, r1
 801a70c:	b003      	add	sp, #12
 801a70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a712 <__copybits>:
 801a712:	3901      	subs	r1, #1
 801a714:	b570      	push	{r4, r5, r6, lr}
 801a716:	1149      	asrs	r1, r1, #5
 801a718:	6914      	ldr	r4, [r2, #16]
 801a71a:	3101      	adds	r1, #1
 801a71c:	f102 0314 	add.w	r3, r2, #20
 801a720:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a724:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a728:	1f05      	subs	r5, r0, #4
 801a72a:	42a3      	cmp	r3, r4
 801a72c:	d30c      	bcc.n	801a748 <__copybits+0x36>
 801a72e:	1aa3      	subs	r3, r4, r2
 801a730:	3b11      	subs	r3, #17
 801a732:	f023 0303 	bic.w	r3, r3, #3
 801a736:	3211      	adds	r2, #17
 801a738:	42a2      	cmp	r2, r4
 801a73a:	bf88      	it	hi
 801a73c:	2300      	movhi	r3, #0
 801a73e:	4418      	add	r0, r3
 801a740:	2300      	movs	r3, #0
 801a742:	4288      	cmp	r0, r1
 801a744:	d305      	bcc.n	801a752 <__copybits+0x40>
 801a746:	bd70      	pop	{r4, r5, r6, pc}
 801a748:	f853 6b04 	ldr.w	r6, [r3], #4
 801a74c:	f845 6f04 	str.w	r6, [r5, #4]!
 801a750:	e7eb      	b.n	801a72a <__copybits+0x18>
 801a752:	f840 3b04 	str.w	r3, [r0], #4
 801a756:	e7f4      	b.n	801a742 <__copybits+0x30>

0801a758 <__any_on>:
 801a758:	f100 0214 	add.w	r2, r0, #20
 801a75c:	6900      	ldr	r0, [r0, #16]
 801a75e:	114b      	asrs	r3, r1, #5
 801a760:	4298      	cmp	r0, r3
 801a762:	b510      	push	{r4, lr}
 801a764:	db11      	blt.n	801a78a <__any_on+0x32>
 801a766:	dd0a      	ble.n	801a77e <__any_on+0x26>
 801a768:	f011 011f 	ands.w	r1, r1, #31
 801a76c:	d007      	beq.n	801a77e <__any_on+0x26>
 801a76e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a772:	fa24 f001 	lsr.w	r0, r4, r1
 801a776:	fa00 f101 	lsl.w	r1, r0, r1
 801a77a:	428c      	cmp	r4, r1
 801a77c:	d10b      	bne.n	801a796 <__any_on+0x3e>
 801a77e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a782:	4293      	cmp	r3, r2
 801a784:	d803      	bhi.n	801a78e <__any_on+0x36>
 801a786:	2000      	movs	r0, #0
 801a788:	bd10      	pop	{r4, pc}
 801a78a:	4603      	mov	r3, r0
 801a78c:	e7f7      	b.n	801a77e <__any_on+0x26>
 801a78e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a792:	2900      	cmp	r1, #0
 801a794:	d0f5      	beq.n	801a782 <__any_on+0x2a>
 801a796:	2001      	movs	r0, #1
 801a798:	e7f6      	b.n	801a788 <__any_on+0x30>

0801a79a <_calloc_r>:
 801a79a:	b513      	push	{r0, r1, r4, lr}
 801a79c:	434a      	muls	r2, r1
 801a79e:	4611      	mov	r1, r2
 801a7a0:	9201      	str	r2, [sp, #4]
 801a7a2:	f7fc fb99 	bl	8016ed8 <_malloc_r>
 801a7a6:	4604      	mov	r4, r0
 801a7a8:	b118      	cbz	r0, 801a7b2 <_calloc_r+0x18>
 801a7aa:	9a01      	ldr	r2, [sp, #4]
 801a7ac:	2100      	movs	r1, #0
 801a7ae:	f7fc fb3b 	bl	8016e28 <memset>
 801a7b2:	4620      	mov	r0, r4
 801a7b4:	b002      	add	sp, #8
 801a7b6:	bd10      	pop	{r4, pc}

0801a7b8 <__ssputs_r>:
 801a7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a7bc:	688e      	ldr	r6, [r1, #8]
 801a7be:	429e      	cmp	r6, r3
 801a7c0:	4682      	mov	sl, r0
 801a7c2:	460c      	mov	r4, r1
 801a7c4:	4690      	mov	r8, r2
 801a7c6:	461f      	mov	r7, r3
 801a7c8:	d838      	bhi.n	801a83c <__ssputs_r+0x84>
 801a7ca:	898a      	ldrh	r2, [r1, #12]
 801a7cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a7d0:	d032      	beq.n	801a838 <__ssputs_r+0x80>
 801a7d2:	6825      	ldr	r5, [r4, #0]
 801a7d4:	6909      	ldr	r1, [r1, #16]
 801a7d6:	eba5 0901 	sub.w	r9, r5, r1
 801a7da:	6965      	ldr	r5, [r4, #20]
 801a7dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a7e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a7e4:	3301      	adds	r3, #1
 801a7e6:	444b      	add	r3, r9
 801a7e8:	106d      	asrs	r5, r5, #1
 801a7ea:	429d      	cmp	r5, r3
 801a7ec:	bf38      	it	cc
 801a7ee:	461d      	movcc	r5, r3
 801a7f0:	0553      	lsls	r3, r2, #21
 801a7f2:	d531      	bpl.n	801a858 <__ssputs_r+0xa0>
 801a7f4:	4629      	mov	r1, r5
 801a7f6:	f7fc fb6f 	bl	8016ed8 <_malloc_r>
 801a7fa:	4606      	mov	r6, r0
 801a7fc:	b950      	cbnz	r0, 801a814 <__ssputs_r+0x5c>
 801a7fe:	230c      	movs	r3, #12
 801a800:	f8ca 3000 	str.w	r3, [sl]
 801a804:	89a3      	ldrh	r3, [r4, #12]
 801a806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a80a:	81a3      	strh	r3, [r4, #12]
 801a80c:	f04f 30ff 	mov.w	r0, #4294967295
 801a810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a814:	6921      	ldr	r1, [r4, #16]
 801a816:	464a      	mov	r2, r9
 801a818:	f7fc fade 	bl	8016dd8 <memcpy>
 801a81c:	89a3      	ldrh	r3, [r4, #12]
 801a81e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a826:	81a3      	strh	r3, [r4, #12]
 801a828:	6126      	str	r6, [r4, #16]
 801a82a:	6165      	str	r5, [r4, #20]
 801a82c:	444e      	add	r6, r9
 801a82e:	eba5 0509 	sub.w	r5, r5, r9
 801a832:	6026      	str	r6, [r4, #0]
 801a834:	60a5      	str	r5, [r4, #8]
 801a836:	463e      	mov	r6, r7
 801a838:	42be      	cmp	r6, r7
 801a83a:	d900      	bls.n	801a83e <__ssputs_r+0x86>
 801a83c:	463e      	mov	r6, r7
 801a83e:	4632      	mov	r2, r6
 801a840:	6820      	ldr	r0, [r4, #0]
 801a842:	4641      	mov	r1, r8
 801a844:	f7fc fad6 	bl	8016df4 <memmove>
 801a848:	68a3      	ldr	r3, [r4, #8]
 801a84a:	6822      	ldr	r2, [r4, #0]
 801a84c:	1b9b      	subs	r3, r3, r6
 801a84e:	4432      	add	r2, r6
 801a850:	60a3      	str	r3, [r4, #8]
 801a852:	6022      	str	r2, [r4, #0]
 801a854:	2000      	movs	r0, #0
 801a856:	e7db      	b.n	801a810 <__ssputs_r+0x58>
 801a858:	462a      	mov	r2, r5
 801a85a:	f000 fce1 	bl	801b220 <_realloc_r>
 801a85e:	4606      	mov	r6, r0
 801a860:	2800      	cmp	r0, #0
 801a862:	d1e1      	bne.n	801a828 <__ssputs_r+0x70>
 801a864:	6921      	ldr	r1, [r4, #16]
 801a866:	4650      	mov	r0, sl
 801a868:	f7fc fae6 	bl	8016e38 <_free_r>
 801a86c:	e7c7      	b.n	801a7fe <__ssputs_r+0x46>
	...

0801a870 <_svfiprintf_r>:
 801a870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a874:	4698      	mov	r8, r3
 801a876:	898b      	ldrh	r3, [r1, #12]
 801a878:	061b      	lsls	r3, r3, #24
 801a87a:	b09d      	sub	sp, #116	; 0x74
 801a87c:	4607      	mov	r7, r0
 801a87e:	460d      	mov	r5, r1
 801a880:	4614      	mov	r4, r2
 801a882:	d50e      	bpl.n	801a8a2 <_svfiprintf_r+0x32>
 801a884:	690b      	ldr	r3, [r1, #16]
 801a886:	b963      	cbnz	r3, 801a8a2 <_svfiprintf_r+0x32>
 801a888:	2140      	movs	r1, #64	; 0x40
 801a88a:	f7fc fb25 	bl	8016ed8 <_malloc_r>
 801a88e:	6028      	str	r0, [r5, #0]
 801a890:	6128      	str	r0, [r5, #16]
 801a892:	b920      	cbnz	r0, 801a89e <_svfiprintf_r+0x2e>
 801a894:	230c      	movs	r3, #12
 801a896:	603b      	str	r3, [r7, #0]
 801a898:	f04f 30ff 	mov.w	r0, #4294967295
 801a89c:	e0d1      	b.n	801aa42 <_svfiprintf_r+0x1d2>
 801a89e:	2340      	movs	r3, #64	; 0x40
 801a8a0:	616b      	str	r3, [r5, #20]
 801a8a2:	2300      	movs	r3, #0
 801a8a4:	9309      	str	r3, [sp, #36]	; 0x24
 801a8a6:	2320      	movs	r3, #32
 801a8a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a8ac:	f8cd 800c 	str.w	r8, [sp, #12]
 801a8b0:	2330      	movs	r3, #48	; 0x30
 801a8b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801aa5c <_svfiprintf_r+0x1ec>
 801a8b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a8ba:	f04f 0901 	mov.w	r9, #1
 801a8be:	4623      	mov	r3, r4
 801a8c0:	469a      	mov	sl, r3
 801a8c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a8c6:	b10a      	cbz	r2, 801a8cc <_svfiprintf_r+0x5c>
 801a8c8:	2a25      	cmp	r2, #37	; 0x25
 801a8ca:	d1f9      	bne.n	801a8c0 <_svfiprintf_r+0x50>
 801a8cc:	ebba 0b04 	subs.w	fp, sl, r4
 801a8d0:	d00b      	beq.n	801a8ea <_svfiprintf_r+0x7a>
 801a8d2:	465b      	mov	r3, fp
 801a8d4:	4622      	mov	r2, r4
 801a8d6:	4629      	mov	r1, r5
 801a8d8:	4638      	mov	r0, r7
 801a8da:	f7ff ff6d 	bl	801a7b8 <__ssputs_r>
 801a8de:	3001      	adds	r0, #1
 801a8e0:	f000 80aa 	beq.w	801aa38 <_svfiprintf_r+0x1c8>
 801a8e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a8e6:	445a      	add	r2, fp
 801a8e8:	9209      	str	r2, [sp, #36]	; 0x24
 801a8ea:	f89a 3000 	ldrb.w	r3, [sl]
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	f000 80a2 	beq.w	801aa38 <_svfiprintf_r+0x1c8>
 801a8f4:	2300      	movs	r3, #0
 801a8f6:	f04f 32ff 	mov.w	r2, #4294967295
 801a8fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a8fe:	f10a 0a01 	add.w	sl, sl, #1
 801a902:	9304      	str	r3, [sp, #16]
 801a904:	9307      	str	r3, [sp, #28]
 801a906:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a90a:	931a      	str	r3, [sp, #104]	; 0x68
 801a90c:	4654      	mov	r4, sl
 801a90e:	2205      	movs	r2, #5
 801a910:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a914:	4851      	ldr	r0, [pc, #324]	; (801aa5c <_svfiprintf_r+0x1ec>)
 801a916:	f7e5 fc73 	bl	8000200 <memchr>
 801a91a:	9a04      	ldr	r2, [sp, #16]
 801a91c:	b9d8      	cbnz	r0, 801a956 <_svfiprintf_r+0xe6>
 801a91e:	06d0      	lsls	r0, r2, #27
 801a920:	bf44      	itt	mi
 801a922:	2320      	movmi	r3, #32
 801a924:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a928:	0711      	lsls	r1, r2, #28
 801a92a:	bf44      	itt	mi
 801a92c:	232b      	movmi	r3, #43	; 0x2b
 801a92e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a932:	f89a 3000 	ldrb.w	r3, [sl]
 801a936:	2b2a      	cmp	r3, #42	; 0x2a
 801a938:	d015      	beq.n	801a966 <_svfiprintf_r+0xf6>
 801a93a:	9a07      	ldr	r2, [sp, #28]
 801a93c:	4654      	mov	r4, sl
 801a93e:	2000      	movs	r0, #0
 801a940:	f04f 0c0a 	mov.w	ip, #10
 801a944:	4621      	mov	r1, r4
 801a946:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a94a:	3b30      	subs	r3, #48	; 0x30
 801a94c:	2b09      	cmp	r3, #9
 801a94e:	d94e      	bls.n	801a9ee <_svfiprintf_r+0x17e>
 801a950:	b1b0      	cbz	r0, 801a980 <_svfiprintf_r+0x110>
 801a952:	9207      	str	r2, [sp, #28]
 801a954:	e014      	b.n	801a980 <_svfiprintf_r+0x110>
 801a956:	eba0 0308 	sub.w	r3, r0, r8
 801a95a:	fa09 f303 	lsl.w	r3, r9, r3
 801a95e:	4313      	orrs	r3, r2
 801a960:	9304      	str	r3, [sp, #16]
 801a962:	46a2      	mov	sl, r4
 801a964:	e7d2      	b.n	801a90c <_svfiprintf_r+0x9c>
 801a966:	9b03      	ldr	r3, [sp, #12]
 801a968:	1d19      	adds	r1, r3, #4
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	9103      	str	r1, [sp, #12]
 801a96e:	2b00      	cmp	r3, #0
 801a970:	bfbb      	ittet	lt
 801a972:	425b      	neglt	r3, r3
 801a974:	f042 0202 	orrlt.w	r2, r2, #2
 801a978:	9307      	strge	r3, [sp, #28]
 801a97a:	9307      	strlt	r3, [sp, #28]
 801a97c:	bfb8      	it	lt
 801a97e:	9204      	strlt	r2, [sp, #16]
 801a980:	7823      	ldrb	r3, [r4, #0]
 801a982:	2b2e      	cmp	r3, #46	; 0x2e
 801a984:	d10c      	bne.n	801a9a0 <_svfiprintf_r+0x130>
 801a986:	7863      	ldrb	r3, [r4, #1]
 801a988:	2b2a      	cmp	r3, #42	; 0x2a
 801a98a:	d135      	bne.n	801a9f8 <_svfiprintf_r+0x188>
 801a98c:	9b03      	ldr	r3, [sp, #12]
 801a98e:	1d1a      	adds	r2, r3, #4
 801a990:	681b      	ldr	r3, [r3, #0]
 801a992:	9203      	str	r2, [sp, #12]
 801a994:	2b00      	cmp	r3, #0
 801a996:	bfb8      	it	lt
 801a998:	f04f 33ff 	movlt.w	r3, #4294967295
 801a99c:	3402      	adds	r4, #2
 801a99e:	9305      	str	r3, [sp, #20]
 801a9a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801aa6c <_svfiprintf_r+0x1fc>
 801a9a4:	7821      	ldrb	r1, [r4, #0]
 801a9a6:	2203      	movs	r2, #3
 801a9a8:	4650      	mov	r0, sl
 801a9aa:	f7e5 fc29 	bl	8000200 <memchr>
 801a9ae:	b140      	cbz	r0, 801a9c2 <_svfiprintf_r+0x152>
 801a9b0:	2340      	movs	r3, #64	; 0x40
 801a9b2:	eba0 000a 	sub.w	r0, r0, sl
 801a9b6:	fa03 f000 	lsl.w	r0, r3, r0
 801a9ba:	9b04      	ldr	r3, [sp, #16]
 801a9bc:	4303      	orrs	r3, r0
 801a9be:	3401      	adds	r4, #1
 801a9c0:	9304      	str	r3, [sp, #16]
 801a9c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9c6:	4826      	ldr	r0, [pc, #152]	; (801aa60 <_svfiprintf_r+0x1f0>)
 801a9c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a9cc:	2206      	movs	r2, #6
 801a9ce:	f7e5 fc17 	bl	8000200 <memchr>
 801a9d2:	2800      	cmp	r0, #0
 801a9d4:	d038      	beq.n	801aa48 <_svfiprintf_r+0x1d8>
 801a9d6:	4b23      	ldr	r3, [pc, #140]	; (801aa64 <_svfiprintf_r+0x1f4>)
 801a9d8:	bb1b      	cbnz	r3, 801aa22 <_svfiprintf_r+0x1b2>
 801a9da:	9b03      	ldr	r3, [sp, #12]
 801a9dc:	3307      	adds	r3, #7
 801a9de:	f023 0307 	bic.w	r3, r3, #7
 801a9e2:	3308      	adds	r3, #8
 801a9e4:	9303      	str	r3, [sp, #12]
 801a9e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9e8:	4433      	add	r3, r6
 801a9ea:	9309      	str	r3, [sp, #36]	; 0x24
 801a9ec:	e767      	b.n	801a8be <_svfiprintf_r+0x4e>
 801a9ee:	fb0c 3202 	mla	r2, ip, r2, r3
 801a9f2:	460c      	mov	r4, r1
 801a9f4:	2001      	movs	r0, #1
 801a9f6:	e7a5      	b.n	801a944 <_svfiprintf_r+0xd4>
 801a9f8:	2300      	movs	r3, #0
 801a9fa:	3401      	adds	r4, #1
 801a9fc:	9305      	str	r3, [sp, #20]
 801a9fe:	4619      	mov	r1, r3
 801aa00:	f04f 0c0a 	mov.w	ip, #10
 801aa04:	4620      	mov	r0, r4
 801aa06:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aa0a:	3a30      	subs	r2, #48	; 0x30
 801aa0c:	2a09      	cmp	r2, #9
 801aa0e:	d903      	bls.n	801aa18 <_svfiprintf_r+0x1a8>
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d0c5      	beq.n	801a9a0 <_svfiprintf_r+0x130>
 801aa14:	9105      	str	r1, [sp, #20]
 801aa16:	e7c3      	b.n	801a9a0 <_svfiprintf_r+0x130>
 801aa18:	fb0c 2101 	mla	r1, ip, r1, r2
 801aa1c:	4604      	mov	r4, r0
 801aa1e:	2301      	movs	r3, #1
 801aa20:	e7f0      	b.n	801aa04 <_svfiprintf_r+0x194>
 801aa22:	ab03      	add	r3, sp, #12
 801aa24:	9300      	str	r3, [sp, #0]
 801aa26:	462a      	mov	r2, r5
 801aa28:	4b0f      	ldr	r3, [pc, #60]	; (801aa68 <_svfiprintf_r+0x1f8>)
 801aa2a:	a904      	add	r1, sp, #16
 801aa2c:	4638      	mov	r0, r7
 801aa2e:	f7fc fb4d 	bl	80170cc <_printf_float>
 801aa32:	1c42      	adds	r2, r0, #1
 801aa34:	4606      	mov	r6, r0
 801aa36:	d1d6      	bne.n	801a9e6 <_svfiprintf_r+0x176>
 801aa38:	89ab      	ldrh	r3, [r5, #12]
 801aa3a:	065b      	lsls	r3, r3, #25
 801aa3c:	f53f af2c 	bmi.w	801a898 <_svfiprintf_r+0x28>
 801aa40:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aa42:	b01d      	add	sp, #116	; 0x74
 801aa44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa48:	ab03      	add	r3, sp, #12
 801aa4a:	9300      	str	r3, [sp, #0]
 801aa4c:	462a      	mov	r2, r5
 801aa4e:	4b06      	ldr	r3, [pc, #24]	; (801aa68 <_svfiprintf_r+0x1f8>)
 801aa50:	a904      	add	r1, sp, #16
 801aa52:	4638      	mov	r0, r7
 801aa54:	f7fc fdde 	bl	8017614 <_printf_i>
 801aa58:	e7eb      	b.n	801aa32 <_svfiprintf_r+0x1c2>
 801aa5a:	bf00      	nop
 801aa5c:	0801ffcc 	.word	0x0801ffcc
 801aa60:	0801ffd6 	.word	0x0801ffd6
 801aa64:	080170cd 	.word	0x080170cd
 801aa68:	0801a7b9 	.word	0x0801a7b9
 801aa6c:	0801ffd2 	.word	0x0801ffd2

0801aa70 <__sfputc_r>:
 801aa70:	6893      	ldr	r3, [r2, #8]
 801aa72:	3b01      	subs	r3, #1
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	b410      	push	{r4}
 801aa78:	6093      	str	r3, [r2, #8]
 801aa7a:	da08      	bge.n	801aa8e <__sfputc_r+0x1e>
 801aa7c:	6994      	ldr	r4, [r2, #24]
 801aa7e:	42a3      	cmp	r3, r4
 801aa80:	db01      	blt.n	801aa86 <__sfputc_r+0x16>
 801aa82:	290a      	cmp	r1, #10
 801aa84:	d103      	bne.n	801aa8e <__sfputc_r+0x1e>
 801aa86:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aa8a:	f000 b999 	b.w	801adc0 <__swbuf_r>
 801aa8e:	6813      	ldr	r3, [r2, #0]
 801aa90:	1c58      	adds	r0, r3, #1
 801aa92:	6010      	str	r0, [r2, #0]
 801aa94:	7019      	strb	r1, [r3, #0]
 801aa96:	4608      	mov	r0, r1
 801aa98:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aa9c:	4770      	bx	lr

0801aa9e <__sfputs_r>:
 801aa9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aaa0:	4606      	mov	r6, r0
 801aaa2:	460f      	mov	r7, r1
 801aaa4:	4614      	mov	r4, r2
 801aaa6:	18d5      	adds	r5, r2, r3
 801aaa8:	42ac      	cmp	r4, r5
 801aaaa:	d101      	bne.n	801aab0 <__sfputs_r+0x12>
 801aaac:	2000      	movs	r0, #0
 801aaae:	e007      	b.n	801aac0 <__sfputs_r+0x22>
 801aab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aab4:	463a      	mov	r2, r7
 801aab6:	4630      	mov	r0, r6
 801aab8:	f7ff ffda 	bl	801aa70 <__sfputc_r>
 801aabc:	1c43      	adds	r3, r0, #1
 801aabe:	d1f3      	bne.n	801aaa8 <__sfputs_r+0xa>
 801aac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801aac4 <_vfiprintf_r>:
 801aac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aac8:	460d      	mov	r5, r1
 801aaca:	b09d      	sub	sp, #116	; 0x74
 801aacc:	4614      	mov	r4, r2
 801aace:	4698      	mov	r8, r3
 801aad0:	4606      	mov	r6, r0
 801aad2:	b118      	cbz	r0, 801aadc <_vfiprintf_r+0x18>
 801aad4:	6983      	ldr	r3, [r0, #24]
 801aad6:	b90b      	cbnz	r3, 801aadc <_vfiprintf_r+0x18>
 801aad8:	f7fe fd60 	bl	801959c <__sinit>
 801aadc:	4b89      	ldr	r3, [pc, #548]	; (801ad04 <_vfiprintf_r+0x240>)
 801aade:	429d      	cmp	r5, r3
 801aae0:	d11b      	bne.n	801ab1a <_vfiprintf_r+0x56>
 801aae2:	6875      	ldr	r5, [r6, #4]
 801aae4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aae6:	07d9      	lsls	r1, r3, #31
 801aae8:	d405      	bmi.n	801aaf6 <_vfiprintf_r+0x32>
 801aaea:	89ab      	ldrh	r3, [r5, #12]
 801aaec:	059a      	lsls	r2, r3, #22
 801aaee:	d402      	bmi.n	801aaf6 <_vfiprintf_r+0x32>
 801aaf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801aaf2:	f7ff f976 	bl	8019de2 <__retarget_lock_acquire_recursive>
 801aaf6:	89ab      	ldrh	r3, [r5, #12]
 801aaf8:	071b      	lsls	r3, r3, #28
 801aafa:	d501      	bpl.n	801ab00 <_vfiprintf_r+0x3c>
 801aafc:	692b      	ldr	r3, [r5, #16]
 801aafe:	b9eb      	cbnz	r3, 801ab3c <_vfiprintf_r+0x78>
 801ab00:	4629      	mov	r1, r5
 801ab02:	4630      	mov	r0, r6
 801ab04:	f000 f9ce 	bl	801aea4 <__swsetup_r>
 801ab08:	b1c0      	cbz	r0, 801ab3c <_vfiprintf_r+0x78>
 801ab0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ab0c:	07dc      	lsls	r4, r3, #31
 801ab0e:	d50e      	bpl.n	801ab2e <_vfiprintf_r+0x6a>
 801ab10:	f04f 30ff 	mov.w	r0, #4294967295
 801ab14:	b01d      	add	sp, #116	; 0x74
 801ab16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab1a:	4b7b      	ldr	r3, [pc, #492]	; (801ad08 <_vfiprintf_r+0x244>)
 801ab1c:	429d      	cmp	r5, r3
 801ab1e:	d101      	bne.n	801ab24 <_vfiprintf_r+0x60>
 801ab20:	68b5      	ldr	r5, [r6, #8]
 801ab22:	e7df      	b.n	801aae4 <_vfiprintf_r+0x20>
 801ab24:	4b79      	ldr	r3, [pc, #484]	; (801ad0c <_vfiprintf_r+0x248>)
 801ab26:	429d      	cmp	r5, r3
 801ab28:	bf08      	it	eq
 801ab2a:	68f5      	ldreq	r5, [r6, #12]
 801ab2c:	e7da      	b.n	801aae4 <_vfiprintf_r+0x20>
 801ab2e:	89ab      	ldrh	r3, [r5, #12]
 801ab30:	0598      	lsls	r0, r3, #22
 801ab32:	d4ed      	bmi.n	801ab10 <_vfiprintf_r+0x4c>
 801ab34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ab36:	f7ff f955 	bl	8019de4 <__retarget_lock_release_recursive>
 801ab3a:	e7e9      	b.n	801ab10 <_vfiprintf_r+0x4c>
 801ab3c:	2300      	movs	r3, #0
 801ab3e:	9309      	str	r3, [sp, #36]	; 0x24
 801ab40:	2320      	movs	r3, #32
 801ab42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ab46:	f8cd 800c 	str.w	r8, [sp, #12]
 801ab4a:	2330      	movs	r3, #48	; 0x30
 801ab4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ad10 <_vfiprintf_r+0x24c>
 801ab50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ab54:	f04f 0901 	mov.w	r9, #1
 801ab58:	4623      	mov	r3, r4
 801ab5a:	469a      	mov	sl, r3
 801ab5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ab60:	b10a      	cbz	r2, 801ab66 <_vfiprintf_r+0xa2>
 801ab62:	2a25      	cmp	r2, #37	; 0x25
 801ab64:	d1f9      	bne.n	801ab5a <_vfiprintf_r+0x96>
 801ab66:	ebba 0b04 	subs.w	fp, sl, r4
 801ab6a:	d00b      	beq.n	801ab84 <_vfiprintf_r+0xc0>
 801ab6c:	465b      	mov	r3, fp
 801ab6e:	4622      	mov	r2, r4
 801ab70:	4629      	mov	r1, r5
 801ab72:	4630      	mov	r0, r6
 801ab74:	f7ff ff93 	bl	801aa9e <__sfputs_r>
 801ab78:	3001      	adds	r0, #1
 801ab7a:	f000 80aa 	beq.w	801acd2 <_vfiprintf_r+0x20e>
 801ab7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ab80:	445a      	add	r2, fp
 801ab82:	9209      	str	r2, [sp, #36]	; 0x24
 801ab84:	f89a 3000 	ldrb.w	r3, [sl]
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	f000 80a2 	beq.w	801acd2 <_vfiprintf_r+0x20e>
 801ab8e:	2300      	movs	r3, #0
 801ab90:	f04f 32ff 	mov.w	r2, #4294967295
 801ab94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ab98:	f10a 0a01 	add.w	sl, sl, #1
 801ab9c:	9304      	str	r3, [sp, #16]
 801ab9e:	9307      	str	r3, [sp, #28]
 801aba0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801aba4:	931a      	str	r3, [sp, #104]	; 0x68
 801aba6:	4654      	mov	r4, sl
 801aba8:	2205      	movs	r2, #5
 801abaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801abae:	4858      	ldr	r0, [pc, #352]	; (801ad10 <_vfiprintf_r+0x24c>)
 801abb0:	f7e5 fb26 	bl	8000200 <memchr>
 801abb4:	9a04      	ldr	r2, [sp, #16]
 801abb6:	b9d8      	cbnz	r0, 801abf0 <_vfiprintf_r+0x12c>
 801abb8:	06d1      	lsls	r1, r2, #27
 801abba:	bf44      	itt	mi
 801abbc:	2320      	movmi	r3, #32
 801abbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801abc2:	0713      	lsls	r3, r2, #28
 801abc4:	bf44      	itt	mi
 801abc6:	232b      	movmi	r3, #43	; 0x2b
 801abc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801abcc:	f89a 3000 	ldrb.w	r3, [sl]
 801abd0:	2b2a      	cmp	r3, #42	; 0x2a
 801abd2:	d015      	beq.n	801ac00 <_vfiprintf_r+0x13c>
 801abd4:	9a07      	ldr	r2, [sp, #28]
 801abd6:	4654      	mov	r4, sl
 801abd8:	2000      	movs	r0, #0
 801abda:	f04f 0c0a 	mov.w	ip, #10
 801abde:	4621      	mov	r1, r4
 801abe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801abe4:	3b30      	subs	r3, #48	; 0x30
 801abe6:	2b09      	cmp	r3, #9
 801abe8:	d94e      	bls.n	801ac88 <_vfiprintf_r+0x1c4>
 801abea:	b1b0      	cbz	r0, 801ac1a <_vfiprintf_r+0x156>
 801abec:	9207      	str	r2, [sp, #28]
 801abee:	e014      	b.n	801ac1a <_vfiprintf_r+0x156>
 801abf0:	eba0 0308 	sub.w	r3, r0, r8
 801abf4:	fa09 f303 	lsl.w	r3, r9, r3
 801abf8:	4313      	orrs	r3, r2
 801abfa:	9304      	str	r3, [sp, #16]
 801abfc:	46a2      	mov	sl, r4
 801abfe:	e7d2      	b.n	801aba6 <_vfiprintf_r+0xe2>
 801ac00:	9b03      	ldr	r3, [sp, #12]
 801ac02:	1d19      	adds	r1, r3, #4
 801ac04:	681b      	ldr	r3, [r3, #0]
 801ac06:	9103      	str	r1, [sp, #12]
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	bfbb      	ittet	lt
 801ac0c:	425b      	neglt	r3, r3
 801ac0e:	f042 0202 	orrlt.w	r2, r2, #2
 801ac12:	9307      	strge	r3, [sp, #28]
 801ac14:	9307      	strlt	r3, [sp, #28]
 801ac16:	bfb8      	it	lt
 801ac18:	9204      	strlt	r2, [sp, #16]
 801ac1a:	7823      	ldrb	r3, [r4, #0]
 801ac1c:	2b2e      	cmp	r3, #46	; 0x2e
 801ac1e:	d10c      	bne.n	801ac3a <_vfiprintf_r+0x176>
 801ac20:	7863      	ldrb	r3, [r4, #1]
 801ac22:	2b2a      	cmp	r3, #42	; 0x2a
 801ac24:	d135      	bne.n	801ac92 <_vfiprintf_r+0x1ce>
 801ac26:	9b03      	ldr	r3, [sp, #12]
 801ac28:	1d1a      	adds	r2, r3, #4
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	9203      	str	r2, [sp, #12]
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	bfb8      	it	lt
 801ac32:	f04f 33ff 	movlt.w	r3, #4294967295
 801ac36:	3402      	adds	r4, #2
 801ac38:	9305      	str	r3, [sp, #20]
 801ac3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ad20 <_vfiprintf_r+0x25c>
 801ac3e:	7821      	ldrb	r1, [r4, #0]
 801ac40:	2203      	movs	r2, #3
 801ac42:	4650      	mov	r0, sl
 801ac44:	f7e5 fadc 	bl	8000200 <memchr>
 801ac48:	b140      	cbz	r0, 801ac5c <_vfiprintf_r+0x198>
 801ac4a:	2340      	movs	r3, #64	; 0x40
 801ac4c:	eba0 000a 	sub.w	r0, r0, sl
 801ac50:	fa03 f000 	lsl.w	r0, r3, r0
 801ac54:	9b04      	ldr	r3, [sp, #16]
 801ac56:	4303      	orrs	r3, r0
 801ac58:	3401      	adds	r4, #1
 801ac5a:	9304      	str	r3, [sp, #16]
 801ac5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac60:	482c      	ldr	r0, [pc, #176]	; (801ad14 <_vfiprintf_r+0x250>)
 801ac62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ac66:	2206      	movs	r2, #6
 801ac68:	f7e5 faca 	bl	8000200 <memchr>
 801ac6c:	2800      	cmp	r0, #0
 801ac6e:	d03f      	beq.n	801acf0 <_vfiprintf_r+0x22c>
 801ac70:	4b29      	ldr	r3, [pc, #164]	; (801ad18 <_vfiprintf_r+0x254>)
 801ac72:	bb1b      	cbnz	r3, 801acbc <_vfiprintf_r+0x1f8>
 801ac74:	9b03      	ldr	r3, [sp, #12]
 801ac76:	3307      	adds	r3, #7
 801ac78:	f023 0307 	bic.w	r3, r3, #7
 801ac7c:	3308      	adds	r3, #8
 801ac7e:	9303      	str	r3, [sp, #12]
 801ac80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac82:	443b      	add	r3, r7
 801ac84:	9309      	str	r3, [sp, #36]	; 0x24
 801ac86:	e767      	b.n	801ab58 <_vfiprintf_r+0x94>
 801ac88:	fb0c 3202 	mla	r2, ip, r2, r3
 801ac8c:	460c      	mov	r4, r1
 801ac8e:	2001      	movs	r0, #1
 801ac90:	e7a5      	b.n	801abde <_vfiprintf_r+0x11a>
 801ac92:	2300      	movs	r3, #0
 801ac94:	3401      	adds	r4, #1
 801ac96:	9305      	str	r3, [sp, #20]
 801ac98:	4619      	mov	r1, r3
 801ac9a:	f04f 0c0a 	mov.w	ip, #10
 801ac9e:	4620      	mov	r0, r4
 801aca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aca4:	3a30      	subs	r2, #48	; 0x30
 801aca6:	2a09      	cmp	r2, #9
 801aca8:	d903      	bls.n	801acb2 <_vfiprintf_r+0x1ee>
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d0c5      	beq.n	801ac3a <_vfiprintf_r+0x176>
 801acae:	9105      	str	r1, [sp, #20]
 801acb0:	e7c3      	b.n	801ac3a <_vfiprintf_r+0x176>
 801acb2:	fb0c 2101 	mla	r1, ip, r1, r2
 801acb6:	4604      	mov	r4, r0
 801acb8:	2301      	movs	r3, #1
 801acba:	e7f0      	b.n	801ac9e <_vfiprintf_r+0x1da>
 801acbc:	ab03      	add	r3, sp, #12
 801acbe:	9300      	str	r3, [sp, #0]
 801acc0:	462a      	mov	r2, r5
 801acc2:	4b16      	ldr	r3, [pc, #88]	; (801ad1c <_vfiprintf_r+0x258>)
 801acc4:	a904      	add	r1, sp, #16
 801acc6:	4630      	mov	r0, r6
 801acc8:	f7fc fa00 	bl	80170cc <_printf_float>
 801accc:	4607      	mov	r7, r0
 801acce:	1c78      	adds	r0, r7, #1
 801acd0:	d1d6      	bne.n	801ac80 <_vfiprintf_r+0x1bc>
 801acd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801acd4:	07d9      	lsls	r1, r3, #31
 801acd6:	d405      	bmi.n	801ace4 <_vfiprintf_r+0x220>
 801acd8:	89ab      	ldrh	r3, [r5, #12]
 801acda:	059a      	lsls	r2, r3, #22
 801acdc:	d402      	bmi.n	801ace4 <_vfiprintf_r+0x220>
 801acde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ace0:	f7ff f880 	bl	8019de4 <__retarget_lock_release_recursive>
 801ace4:	89ab      	ldrh	r3, [r5, #12]
 801ace6:	065b      	lsls	r3, r3, #25
 801ace8:	f53f af12 	bmi.w	801ab10 <_vfiprintf_r+0x4c>
 801acec:	9809      	ldr	r0, [sp, #36]	; 0x24
 801acee:	e711      	b.n	801ab14 <_vfiprintf_r+0x50>
 801acf0:	ab03      	add	r3, sp, #12
 801acf2:	9300      	str	r3, [sp, #0]
 801acf4:	462a      	mov	r2, r5
 801acf6:	4b09      	ldr	r3, [pc, #36]	; (801ad1c <_vfiprintf_r+0x258>)
 801acf8:	a904      	add	r1, sp, #16
 801acfa:	4630      	mov	r0, r6
 801acfc:	f7fc fc8a 	bl	8017614 <_printf_i>
 801ad00:	e7e4      	b.n	801accc <_vfiprintf_r+0x208>
 801ad02:	bf00      	nop
 801ad04:	0801fdac 	.word	0x0801fdac
 801ad08:	0801fdcc 	.word	0x0801fdcc
 801ad0c:	0801fd8c 	.word	0x0801fd8c
 801ad10:	0801ffcc 	.word	0x0801ffcc
 801ad14:	0801ffd6 	.word	0x0801ffd6
 801ad18:	080170cd 	.word	0x080170cd
 801ad1c:	0801aa9f 	.word	0x0801aa9f
 801ad20:	0801ffd2 	.word	0x0801ffd2
 801ad24:	00000000 	.word	0x00000000

0801ad28 <nan>:
 801ad28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801ad30 <nan+0x8>
 801ad2c:	4770      	bx	lr
 801ad2e:	bf00      	nop
 801ad30:	00000000 	.word	0x00000000
 801ad34:	7ff80000 	.word	0x7ff80000

0801ad38 <__sread>:
 801ad38:	b510      	push	{r4, lr}
 801ad3a:	460c      	mov	r4, r1
 801ad3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad40:	f000 fa94 	bl	801b26c <_read_r>
 801ad44:	2800      	cmp	r0, #0
 801ad46:	bfab      	itete	ge
 801ad48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ad4a:	89a3      	ldrhlt	r3, [r4, #12]
 801ad4c:	181b      	addge	r3, r3, r0
 801ad4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ad52:	bfac      	ite	ge
 801ad54:	6563      	strge	r3, [r4, #84]	; 0x54
 801ad56:	81a3      	strhlt	r3, [r4, #12]
 801ad58:	bd10      	pop	{r4, pc}

0801ad5a <__swrite>:
 801ad5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad5e:	461f      	mov	r7, r3
 801ad60:	898b      	ldrh	r3, [r1, #12]
 801ad62:	05db      	lsls	r3, r3, #23
 801ad64:	4605      	mov	r5, r0
 801ad66:	460c      	mov	r4, r1
 801ad68:	4616      	mov	r6, r2
 801ad6a:	d505      	bpl.n	801ad78 <__swrite+0x1e>
 801ad6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad70:	2302      	movs	r3, #2
 801ad72:	2200      	movs	r2, #0
 801ad74:	f000 f9de 	bl	801b134 <_lseek_r>
 801ad78:	89a3      	ldrh	r3, [r4, #12]
 801ad7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ad7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ad82:	81a3      	strh	r3, [r4, #12]
 801ad84:	4632      	mov	r2, r6
 801ad86:	463b      	mov	r3, r7
 801ad88:	4628      	mov	r0, r5
 801ad8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ad8e:	f000 b877 	b.w	801ae80 <_write_r>

0801ad92 <__sseek>:
 801ad92:	b510      	push	{r4, lr}
 801ad94:	460c      	mov	r4, r1
 801ad96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad9a:	f000 f9cb 	bl	801b134 <_lseek_r>
 801ad9e:	1c43      	adds	r3, r0, #1
 801ada0:	89a3      	ldrh	r3, [r4, #12]
 801ada2:	bf15      	itete	ne
 801ada4:	6560      	strne	r0, [r4, #84]	; 0x54
 801ada6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801adaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801adae:	81a3      	strheq	r3, [r4, #12]
 801adb0:	bf18      	it	ne
 801adb2:	81a3      	strhne	r3, [r4, #12]
 801adb4:	bd10      	pop	{r4, pc}

0801adb6 <__sclose>:
 801adb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801adba:	f000 b8e9 	b.w	801af90 <_close_r>
	...

0801adc0 <__swbuf_r>:
 801adc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adc2:	460e      	mov	r6, r1
 801adc4:	4614      	mov	r4, r2
 801adc6:	4605      	mov	r5, r0
 801adc8:	b118      	cbz	r0, 801add2 <__swbuf_r+0x12>
 801adca:	6983      	ldr	r3, [r0, #24]
 801adcc:	b90b      	cbnz	r3, 801add2 <__swbuf_r+0x12>
 801adce:	f7fe fbe5 	bl	801959c <__sinit>
 801add2:	4b21      	ldr	r3, [pc, #132]	; (801ae58 <__swbuf_r+0x98>)
 801add4:	429c      	cmp	r4, r3
 801add6:	d12b      	bne.n	801ae30 <__swbuf_r+0x70>
 801add8:	686c      	ldr	r4, [r5, #4]
 801adda:	69a3      	ldr	r3, [r4, #24]
 801addc:	60a3      	str	r3, [r4, #8]
 801adde:	89a3      	ldrh	r3, [r4, #12]
 801ade0:	071a      	lsls	r2, r3, #28
 801ade2:	d52f      	bpl.n	801ae44 <__swbuf_r+0x84>
 801ade4:	6923      	ldr	r3, [r4, #16]
 801ade6:	b36b      	cbz	r3, 801ae44 <__swbuf_r+0x84>
 801ade8:	6923      	ldr	r3, [r4, #16]
 801adea:	6820      	ldr	r0, [r4, #0]
 801adec:	1ac0      	subs	r0, r0, r3
 801adee:	6963      	ldr	r3, [r4, #20]
 801adf0:	b2f6      	uxtb	r6, r6
 801adf2:	4283      	cmp	r3, r0
 801adf4:	4637      	mov	r7, r6
 801adf6:	dc04      	bgt.n	801ae02 <__swbuf_r+0x42>
 801adf8:	4621      	mov	r1, r4
 801adfa:	4628      	mov	r0, r5
 801adfc:	f000 f95e 	bl	801b0bc <_fflush_r>
 801ae00:	bb30      	cbnz	r0, 801ae50 <__swbuf_r+0x90>
 801ae02:	68a3      	ldr	r3, [r4, #8]
 801ae04:	3b01      	subs	r3, #1
 801ae06:	60a3      	str	r3, [r4, #8]
 801ae08:	6823      	ldr	r3, [r4, #0]
 801ae0a:	1c5a      	adds	r2, r3, #1
 801ae0c:	6022      	str	r2, [r4, #0]
 801ae0e:	701e      	strb	r6, [r3, #0]
 801ae10:	6963      	ldr	r3, [r4, #20]
 801ae12:	3001      	adds	r0, #1
 801ae14:	4283      	cmp	r3, r0
 801ae16:	d004      	beq.n	801ae22 <__swbuf_r+0x62>
 801ae18:	89a3      	ldrh	r3, [r4, #12]
 801ae1a:	07db      	lsls	r3, r3, #31
 801ae1c:	d506      	bpl.n	801ae2c <__swbuf_r+0x6c>
 801ae1e:	2e0a      	cmp	r6, #10
 801ae20:	d104      	bne.n	801ae2c <__swbuf_r+0x6c>
 801ae22:	4621      	mov	r1, r4
 801ae24:	4628      	mov	r0, r5
 801ae26:	f000 f949 	bl	801b0bc <_fflush_r>
 801ae2a:	b988      	cbnz	r0, 801ae50 <__swbuf_r+0x90>
 801ae2c:	4638      	mov	r0, r7
 801ae2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae30:	4b0a      	ldr	r3, [pc, #40]	; (801ae5c <__swbuf_r+0x9c>)
 801ae32:	429c      	cmp	r4, r3
 801ae34:	d101      	bne.n	801ae3a <__swbuf_r+0x7a>
 801ae36:	68ac      	ldr	r4, [r5, #8]
 801ae38:	e7cf      	b.n	801adda <__swbuf_r+0x1a>
 801ae3a:	4b09      	ldr	r3, [pc, #36]	; (801ae60 <__swbuf_r+0xa0>)
 801ae3c:	429c      	cmp	r4, r3
 801ae3e:	bf08      	it	eq
 801ae40:	68ec      	ldreq	r4, [r5, #12]
 801ae42:	e7ca      	b.n	801adda <__swbuf_r+0x1a>
 801ae44:	4621      	mov	r1, r4
 801ae46:	4628      	mov	r0, r5
 801ae48:	f000 f82c 	bl	801aea4 <__swsetup_r>
 801ae4c:	2800      	cmp	r0, #0
 801ae4e:	d0cb      	beq.n	801ade8 <__swbuf_r+0x28>
 801ae50:	f04f 37ff 	mov.w	r7, #4294967295
 801ae54:	e7ea      	b.n	801ae2c <__swbuf_r+0x6c>
 801ae56:	bf00      	nop
 801ae58:	0801fdac 	.word	0x0801fdac
 801ae5c:	0801fdcc 	.word	0x0801fdcc
 801ae60:	0801fd8c 	.word	0x0801fd8c

0801ae64 <__ascii_wctomb>:
 801ae64:	b149      	cbz	r1, 801ae7a <__ascii_wctomb+0x16>
 801ae66:	2aff      	cmp	r2, #255	; 0xff
 801ae68:	bf85      	ittet	hi
 801ae6a:	238a      	movhi	r3, #138	; 0x8a
 801ae6c:	6003      	strhi	r3, [r0, #0]
 801ae6e:	700a      	strbls	r2, [r1, #0]
 801ae70:	f04f 30ff 	movhi.w	r0, #4294967295
 801ae74:	bf98      	it	ls
 801ae76:	2001      	movls	r0, #1
 801ae78:	4770      	bx	lr
 801ae7a:	4608      	mov	r0, r1
 801ae7c:	4770      	bx	lr
	...

0801ae80 <_write_r>:
 801ae80:	b538      	push	{r3, r4, r5, lr}
 801ae82:	4d07      	ldr	r5, [pc, #28]	; (801aea0 <_write_r+0x20>)
 801ae84:	4604      	mov	r4, r0
 801ae86:	4608      	mov	r0, r1
 801ae88:	4611      	mov	r1, r2
 801ae8a:	2200      	movs	r2, #0
 801ae8c:	602a      	str	r2, [r5, #0]
 801ae8e:	461a      	mov	r2, r3
 801ae90:	f7e9 ff11 	bl	8004cb6 <_write>
 801ae94:	1c43      	adds	r3, r0, #1
 801ae96:	d102      	bne.n	801ae9e <_write_r+0x1e>
 801ae98:	682b      	ldr	r3, [r5, #0]
 801ae9a:	b103      	cbz	r3, 801ae9e <_write_r+0x1e>
 801ae9c:	6023      	str	r3, [r4, #0]
 801ae9e:	bd38      	pop	{r3, r4, r5, pc}
 801aea0:	20006e80 	.word	0x20006e80

0801aea4 <__swsetup_r>:
 801aea4:	4b32      	ldr	r3, [pc, #200]	; (801af70 <__swsetup_r+0xcc>)
 801aea6:	b570      	push	{r4, r5, r6, lr}
 801aea8:	681d      	ldr	r5, [r3, #0]
 801aeaa:	4606      	mov	r6, r0
 801aeac:	460c      	mov	r4, r1
 801aeae:	b125      	cbz	r5, 801aeba <__swsetup_r+0x16>
 801aeb0:	69ab      	ldr	r3, [r5, #24]
 801aeb2:	b913      	cbnz	r3, 801aeba <__swsetup_r+0x16>
 801aeb4:	4628      	mov	r0, r5
 801aeb6:	f7fe fb71 	bl	801959c <__sinit>
 801aeba:	4b2e      	ldr	r3, [pc, #184]	; (801af74 <__swsetup_r+0xd0>)
 801aebc:	429c      	cmp	r4, r3
 801aebe:	d10f      	bne.n	801aee0 <__swsetup_r+0x3c>
 801aec0:	686c      	ldr	r4, [r5, #4]
 801aec2:	89a3      	ldrh	r3, [r4, #12]
 801aec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801aec8:	0719      	lsls	r1, r3, #28
 801aeca:	d42c      	bmi.n	801af26 <__swsetup_r+0x82>
 801aecc:	06dd      	lsls	r5, r3, #27
 801aece:	d411      	bmi.n	801aef4 <__swsetup_r+0x50>
 801aed0:	2309      	movs	r3, #9
 801aed2:	6033      	str	r3, [r6, #0]
 801aed4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801aed8:	81a3      	strh	r3, [r4, #12]
 801aeda:	f04f 30ff 	mov.w	r0, #4294967295
 801aede:	e03e      	b.n	801af5e <__swsetup_r+0xba>
 801aee0:	4b25      	ldr	r3, [pc, #148]	; (801af78 <__swsetup_r+0xd4>)
 801aee2:	429c      	cmp	r4, r3
 801aee4:	d101      	bne.n	801aeea <__swsetup_r+0x46>
 801aee6:	68ac      	ldr	r4, [r5, #8]
 801aee8:	e7eb      	b.n	801aec2 <__swsetup_r+0x1e>
 801aeea:	4b24      	ldr	r3, [pc, #144]	; (801af7c <__swsetup_r+0xd8>)
 801aeec:	429c      	cmp	r4, r3
 801aeee:	bf08      	it	eq
 801aef0:	68ec      	ldreq	r4, [r5, #12]
 801aef2:	e7e6      	b.n	801aec2 <__swsetup_r+0x1e>
 801aef4:	0758      	lsls	r0, r3, #29
 801aef6:	d512      	bpl.n	801af1e <__swsetup_r+0x7a>
 801aef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aefa:	b141      	cbz	r1, 801af0e <__swsetup_r+0x6a>
 801aefc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801af00:	4299      	cmp	r1, r3
 801af02:	d002      	beq.n	801af0a <__swsetup_r+0x66>
 801af04:	4630      	mov	r0, r6
 801af06:	f7fb ff97 	bl	8016e38 <_free_r>
 801af0a:	2300      	movs	r3, #0
 801af0c:	6363      	str	r3, [r4, #52]	; 0x34
 801af0e:	89a3      	ldrh	r3, [r4, #12]
 801af10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801af14:	81a3      	strh	r3, [r4, #12]
 801af16:	2300      	movs	r3, #0
 801af18:	6063      	str	r3, [r4, #4]
 801af1a:	6923      	ldr	r3, [r4, #16]
 801af1c:	6023      	str	r3, [r4, #0]
 801af1e:	89a3      	ldrh	r3, [r4, #12]
 801af20:	f043 0308 	orr.w	r3, r3, #8
 801af24:	81a3      	strh	r3, [r4, #12]
 801af26:	6923      	ldr	r3, [r4, #16]
 801af28:	b94b      	cbnz	r3, 801af3e <__swsetup_r+0x9a>
 801af2a:	89a3      	ldrh	r3, [r4, #12]
 801af2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801af30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801af34:	d003      	beq.n	801af3e <__swsetup_r+0x9a>
 801af36:	4621      	mov	r1, r4
 801af38:	4630      	mov	r0, r6
 801af3a:	f000 f931 	bl	801b1a0 <__smakebuf_r>
 801af3e:	89a0      	ldrh	r0, [r4, #12]
 801af40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801af44:	f010 0301 	ands.w	r3, r0, #1
 801af48:	d00a      	beq.n	801af60 <__swsetup_r+0xbc>
 801af4a:	2300      	movs	r3, #0
 801af4c:	60a3      	str	r3, [r4, #8]
 801af4e:	6963      	ldr	r3, [r4, #20]
 801af50:	425b      	negs	r3, r3
 801af52:	61a3      	str	r3, [r4, #24]
 801af54:	6923      	ldr	r3, [r4, #16]
 801af56:	b943      	cbnz	r3, 801af6a <__swsetup_r+0xc6>
 801af58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801af5c:	d1ba      	bne.n	801aed4 <__swsetup_r+0x30>
 801af5e:	bd70      	pop	{r4, r5, r6, pc}
 801af60:	0781      	lsls	r1, r0, #30
 801af62:	bf58      	it	pl
 801af64:	6963      	ldrpl	r3, [r4, #20]
 801af66:	60a3      	str	r3, [r4, #8]
 801af68:	e7f4      	b.n	801af54 <__swsetup_r+0xb0>
 801af6a:	2000      	movs	r0, #0
 801af6c:	e7f7      	b.n	801af5e <__swsetup_r+0xba>
 801af6e:	bf00      	nop
 801af70:	20000074 	.word	0x20000074
 801af74:	0801fdac 	.word	0x0801fdac
 801af78:	0801fdcc 	.word	0x0801fdcc
 801af7c:	0801fd8c 	.word	0x0801fd8c

0801af80 <abort>:
 801af80:	b508      	push	{r3, lr}
 801af82:	2006      	movs	r0, #6
 801af84:	f000 f9ac 	bl	801b2e0 <raise>
 801af88:	2001      	movs	r0, #1
 801af8a:	f7e9 fe6d 	bl	8004c68 <_exit>
	...

0801af90 <_close_r>:
 801af90:	b538      	push	{r3, r4, r5, lr}
 801af92:	4d06      	ldr	r5, [pc, #24]	; (801afac <_close_r+0x1c>)
 801af94:	2300      	movs	r3, #0
 801af96:	4604      	mov	r4, r0
 801af98:	4608      	mov	r0, r1
 801af9a:	602b      	str	r3, [r5, #0]
 801af9c:	f7e9 fea7 	bl	8004cee <_close>
 801afa0:	1c43      	adds	r3, r0, #1
 801afa2:	d102      	bne.n	801afaa <_close_r+0x1a>
 801afa4:	682b      	ldr	r3, [r5, #0]
 801afa6:	b103      	cbz	r3, 801afaa <_close_r+0x1a>
 801afa8:	6023      	str	r3, [r4, #0]
 801afaa:	bd38      	pop	{r3, r4, r5, pc}
 801afac:	20006e80 	.word	0x20006e80

0801afb0 <__sflush_r>:
 801afb0:	898a      	ldrh	r2, [r1, #12]
 801afb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afb6:	4605      	mov	r5, r0
 801afb8:	0710      	lsls	r0, r2, #28
 801afba:	460c      	mov	r4, r1
 801afbc:	d458      	bmi.n	801b070 <__sflush_r+0xc0>
 801afbe:	684b      	ldr	r3, [r1, #4]
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	dc05      	bgt.n	801afd0 <__sflush_r+0x20>
 801afc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	dc02      	bgt.n	801afd0 <__sflush_r+0x20>
 801afca:	2000      	movs	r0, #0
 801afcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801afd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801afd2:	2e00      	cmp	r6, #0
 801afd4:	d0f9      	beq.n	801afca <__sflush_r+0x1a>
 801afd6:	2300      	movs	r3, #0
 801afd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801afdc:	682f      	ldr	r7, [r5, #0]
 801afde:	602b      	str	r3, [r5, #0]
 801afe0:	d032      	beq.n	801b048 <__sflush_r+0x98>
 801afe2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801afe4:	89a3      	ldrh	r3, [r4, #12]
 801afe6:	075a      	lsls	r2, r3, #29
 801afe8:	d505      	bpl.n	801aff6 <__sflush_r+0x46>
 801afea:	6863      	ldr	r3, [r4, #4]
 801afec:	1ac0      	subs	r0, r0, r3
 801afee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801aff0:	b10b      	cbz	r3, 801aff6 <__sflush_r+0x46>
 801aff2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801aff4:	1ac0      	subs	r0, r0, r3
 801aff6:	2300      	movs	r3, #0
 801aff8:	4602      	mov	r2, r0
 801affa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801affc:	6a21      	ldr	r1, [r4, #32]
 801affe:	4628      	mov	r0, r5
 801b000:	47b0      	blx	r6
 801b002:	1c43      	adds	r3, r0, #1
 801b004:	89a3      	ldrh	r3, [r4, #12]
 801b006:	d106      	bne.n	801b016 <__sflush_r+0x66>
 801b008:	6829      	ldr	r1, [r5, #0]
 801b00a:	291d      	cmp	r1, #29
 801b00c:	d82c      	bhi.n	801b068 <__sflush_r+0xb8>
 801b00e:	4a2a      	ldr	r2, [pc, #168]	; (801b0b8 <__sflush_r+0x108>)
 801b010:	40ca      	lsrs	r2, r1
 801b012:	07d6      	lsls	r6, r2, #31
 801b014:	d528      	bpl.n	801b068 <__sflush_r+0xb8>
 801b016:	2200      	movs	r2, #0
 801b018:	6062      	str	r2, [r4, #4]
 801b01a:	04d9      	lsls	r1, r3, #19
 801b01c:	6922      	ldr	r2, [r4, #16]
 801b01e:	6022      	str	r2, [r4, #0]
 801b020:	d504      	bpl.n	801b02c <__sflush_r+0x7c>
 801b022:	1c42      	adds	r2, r0, #1
 801b024:	d101      	bne.n	801b02a <__sflush_r+0x7a>
 801b026:	682b      	ldr	r3, [r5, #0]
 801b028:	b903      	cbnz	r3, 801b02c <__sflush_r+0x7c>
 801b02a:	6560      	str	r0, [r4, #84]	; 0x54
 801b02c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b02e:	602f      	str	r7, [r5, #0]
 801b030:	2900      	cmp	r1, #0
 801b032:	d0ca      	beq.n	801afca <__sflush_r+0x1a>
 801b034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b038:	4299      	cmp	r1, r3
 801b03a:	d002      	beq.n	801b042 <__sflush_r+0x92>
 801b03c:	4628      	mov	r0, r5
 801b03e:	f7fb fefb 	bl	8016e38 <_free_r>
 801b042:	2000      	movs	r0, #0
 801b044:	6360      	str	r0, [r4, #52]	; 0x34
 801b046:	e7c1      	b.n	801afcc <__sflush_r+0x1c>
 801b048:	6a21      	ldr	r1, [r4, #32]
 801b04a:	2301      	movs	r3, #1
 801b04c:	4628      	mov	r0, r5
 801b04e:	47b0      	blx	r6
 801b050:	1c41      	adds	r1, r0, #1
 801b052:	d1c7      	bne.n	801afe4 <__sflush_r+0x34>
 801b054:	682b      	ldr	r3, [r5, #0]
 801b056:	2b00      	cmp	r3, #0
 801b058:	d0c4      	beq.n	801afe4 <__sflush_r+0x34>
 801b05a:	2b1d      	cmp	r3, #29
 801b05c:	d001      	beq.n	801b062 <__sflush_r+0xb2>
 801b05e:	2b16      	cmp	r3, #22
 801b060:	d101      	bne.n	801b066 <__sflush_r+0xb6>
 801b062:	602f      	str	r7, [r5, #0]
 801b064:	e7b1      	b.n	801afca <__sflush_r+0x1a>
 801b066:	89a3      	ldrh	r3, [r4, #12]
 801b068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b06c:	81a3      	strh	r3, [r4, #12]
 801b06e:	e7ad      	b.n	801afcc <__sflush_r+0x1c>
 801b070:	690f      	ldr	r7, [r1, #16]
 801b072:	2f00      	cmp	r7, #0
 801b074:	d0a9      	beq.n	801afca <__sflush_r+0x1a>
 801b076:	0793      	lsls	r3, r2, #30
 801b078:	680e      	ldr	r6, [r1, #0]
 801b07a:	bf08      	it	eq
 801b07c:	694b      	ldreq	r3, [r1, #20]
 801b07e:	600f      	str	r7, [r1, #0]
 801b080:	bf18      	it	ne
 801b082:	2300      	movne	r3, #0
 801b084:	eba6 0807 	sub.w	r8, r6, r7
 801b088:	608b      	str	r3, [r1, #8]
 801b08a:	f1b8 0f00 	cmp.w	r8, #0
 801b08e:	dd9c      	ble.n	801afca <__sflush_r+0x1a>
 801b090:	6a21      	ldr	r1, [r4, #32]
 801b092:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b094:	4643      	mov	r3, r8
 801b096:	463a      	mov	r2, r7
 801b098:	4628      	mov	r0, r5
 801b09a:	47b0      	blx	r6
 801b09c:	2800      	cmp	r0, #0
 801b09e:	dc06      	bgt.n	801b0ae <__sflush_r+0xfe>
 801b0a0:	89a3      	ldrh	r3, [r4, #12]
 801b0a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b0a6:	81a3      	strh	r3, [r4, #12]
 801b0a8:	f04f 30ff 	mov.w	r0, #4294967295
 801b0ac:	e78e      	b.n	801afcc <__sflush_r+0x1c>
 801b0ae:	4407      	add	r7, r0
 801b0b0:	eba8 0800 	sub.w	r8, r8, r0
 801b0b4:	e7e9      	b.n	801b08a <__sflush_r+0xda>
 801b0b6:	bf00      	nop
 801b0b8:	20400001 	.word	0x20400001

0801b0bc <_fflush_r>:
 801b0bc:	b538      	push	{r3, r4, r5, lr}
 801b0be:	690b      	ldr	r3, [r1, #16]
 801b0c0:	4605      	mov	r5, r0
 801b0c2:	460c      	mov	r4, r1
 801b0c4:	b913      	cbnz	r3, 801b0cc <_fflush_r+0x10>
 801b0c6:	2500      	movs	r5, #0
 801b0c8:	4628      	mov	r0, r5
 801b0ca:	bd38      	pop	{r3, r4, r5, pc}
 801b0cc:	b118      	cbz	r0, 801b0d6 <_fflush_r+0x1a>
 801b0ce:	6983      	ldr	r3, [r0, #24]
 801b0d0:	b90b      	cbnz	r3, 801b0d6 <_fflush_r+0x1a>
 801b0d2:	f7fe fa63 	bl	801959c <__sinit>
 801b0d6:	4b14      	ldr	r3, [pc, #80]	; (801b128 <_fflush_r+0x6c>)
 801b0d8:	429c      	cmp	r4, r3
 801b0da:	d11b      	bne.n	801b114 <_fflush_r+0x58>
 801b0dc:	686c      	ldr	r4, [r5, #4]
 801b0de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	d0ef      	beq.n	801b0c6 <_fflush_r+0xa>
 801b0e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b0e8:	07d0      	lsls	r0, r2, #31
 801b0ea:	d404      	bmi.n	801b0f6 <_fflush_r+0x3a>
 801b0ec:	0599      	lsls	r1, r3, #22
 801b0ee:	d402      	bmi.n	801b0f6 <_fflush_r+0x3a>
 801b0f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b0f2:	f7fe fe76 	bl	8019de2 <__retarget_lock_acquire_recursive>
 801b0f6:	4628      	mov	r0, r5
 801b0f8:	4621      	mov	r1, r4
 801b0fa:	f7ff ff59 	bl	801afb0 <__sflush_r>
 801b0fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b100:	07da      	lsls	r2, r3, #31
 801b102:	4605      	mov	r5, r0
 801b104:	d4e0      	bmi.n	801b0c8 <_fflush_r+0xc>
 801b106:	89a3      	ldrh	r3, [r4, #12]
 801b108:	059b      	lsls	r3, r3, #22
 801b10a:	d4dd      	bmi.n	801b0c8 <_fflush_r+0xc>
 801b10c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b10e:	f7fe fe69 	bl	8019de4 <__retarget_lock_release_recursive>
 801b112:	e7d9      	b.n	801b0c8 <_fflush_r+0xc>
 801b114:	4b05      	ldr	r3, [pc, #20]	; (801b12c <_fflush_r+0x70>)
 801b116:	429c      	cmp	r4, r3
 801b118:	d101      	bne.n	801b11e <_fflush_r+0x62>
 801b11a:	68ac      	ldr	r4, [r5, #8]
 801b11c:	e7df      	b.n	801b0de <_fflush_r+0x22>
 801b11e:	4b04      	ldr	r3, [pc, #16]	; (801b130 <_fflush_r+0x74>)
 801b120:	429c      	cmp	r4, r3
 801b122:	bf08      	it	eq
 801b124:	68ec      	ldreq	r4, [r5, #12]
 801b126:	e7da      	b.n	801b0de <_fflush_r+0x22>
 801b128:	0801fdac 	.word	0x0801fdac
 801b12c:	0801fdcc 	.word	0x0801fdcc
 801b130:	0801fd8c 	.word	0x0801fd8c

0801b134 <_lseek_r>:
 801b134:	b538      	push	{r3, r4, r5, lr}
 801b136:	4d07      	ldr	r5, [pc, #28]	; (801b154 <_lseek_r+0x20>)
 801b138:	4604      	mov	r4, r0
 801b13a:	4608      	mov	r0, r1
 801b13c:	4611      	mov	r1, r2
 801b13e:	2200      	movs	r2, #0
 801b140:	602a      	str	r2, [r5, #0]
 801b142:	461a      	mov	r2, r3
 801b144:	f7e9 fdfa 	bl	8004d3c <_lseek>
 801b148:	1c43      	adds	r3, r0, #1
 801b14a:	d102      	bne.n	801b152 <_lseek_r+0x1e>
 801b14c:	682b      	ldr	r3, [r5, #0]
 801b14e:	b103      	cbz	r3, 801b152 <_lseek_r+0x1e>
 801b150:	6023      	str	r3, [r4, #0]
 801b152:	bd38      	pop	{r3, r4, r5, pc}
 801b154:	20006e80 	.word	0x20006e80

0801b158 <__swhatbuf_r>:
 801b158:	b570      	push	{r4, r5, r6, lr}
 801b15a:	460e      	mov	r6, r1
 801b15c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b160:	2900      	cmp	r1, #0
 801b162:	b096      	sub	sp, #88	; 0x58
 801b164:	4614      	mov	r4, r2
 801b166:	461d      	mov	r5, r3
 801b168:	da07      	bge.n	801b17a <__swhatbuf_r+0x22>
 801b16a:	2300      	movs	r3, #0
 801b16c:	602b      	str	r3, [r5, #0]
 801b16e:	89b3      	ldrh	r3, [r6, #12]
 801b170:	061a      	lsls	r2, r3, #24
 801b172:	d410      	bmi.n	801b196 <__swhatbuf_r+0x3e>
 801b174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b178:	e00e      	b.n	801b198 <__swhatbuf_r+0x40>
 801b17a:	466a      	mov	r2, sp
 801b17c:	f000 f8cc 	bl	801b318 <_fstat_r>
 801b180:	2800      	cmp	r0, #0
 801b182:	dbf2      	blt.n	801b16a <__swhatbuf_r+0x12>
 801b184:	9a01      	ldr	r2, [sp, #4]
 801b186:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b18a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b18e:	425a      	negs	r2, r3
 801b190:	415a      	adcs	r2, r3
 801b192:	602a      	str	r2, [r5, #0]
 801b194:	e7ee      	b.n	801b174 <__swhatbuf_r+0x1c>
 801b196:	2340      	movs	r3, #64	; 0x40
 801b198:	2000      	movs	r0, #0
 801b19a:	6023      	str	r3, [r4, #0]
 801b19c:	b016      	add	sp, #88	; 0x58
 801b19e:	bd70      	pop	{r4, r5, r6, pc}

0801b1a0 <__smakebuf_r>:
 801b1a0:	898b      	ldrh	r3, [r1, #12]
 801b1a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b1a4:	079d      	lsls	r5, r3, #30
 801b1a6:	4606      	mov	r6, r0
 801b1a8:	460c      	mov	r4, r1
 801b1aa:	d507      	bpl.n	801b1bc <__smakebuf_r+0x1c>
 801b1ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b1b0:	6023      	str	r3, [r4, #0]
 801b1b2:	6123      	str	r3, [r4, #16]
 801b1b4:	2301      	movs	r3, #1
 801b1b6:	6163      	str	r3, [r4, #20]
 801b1b8:	b002      	add	sp, #8
 801b1ba:	bd70      	pop	{r4, r5, r6, pc}
 801b1bc:	ab01      	add	r3, sp, #4
 801b1be:	466a      	mov	r2, sp
 801b1c0:	f7ff ffca 	bl	801b158 <__swhatbuf_r>
 801b1c4:	9900      	ldr	r1, [sp, #0]
 801b1c6:	4605      	mov	r5, r0
 801b1c8:	4630      	mov	r0, r6
 801b1ca:	f7fb fe85 	bl	8016ed8 <_malloc_r>
 801b1ce:	b948      	cbnz	r0, 801b1e4 <__smakebuf_r+0x44>
 801b1d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b1d4:	059a      	lsls	r2, r3, #22
 801b1d6:	d4ef      	bmi.n	801b1b8 <__smakebuf_r+0x18>
 801b1d8:	f023 0303 	bic.w	r3, r3, #3
 801b1dc:	f043 0302 	orr.w	r3, r3, #2
 801b1e0:	81a3      	strh	r3, [r4, #12]
 801b1e2:	e7e3      	b.n	801b1ac <__smakebuf_r+0xc>
 801b1e4:	4b0d      	ldr	r3, [pc, #52]	; (801b21c <__smakebuf_r+0x7c>)
 801b1e6:	62b3      	str	r3, [r6, #40]	; 0x28
 801b1e8:	89a3      	ldrh	r3, [r4, #12]
 801b1ea:	6020      	str	r0, [r4, #0]
 801b1ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b1f0:	81a3      	strh	r3, [r4, #12]
 801b1f2:	9b00      	ldr	r3, [sp, #0]
 801b1f4:	6163      	str	r3, [r4, #20]
 801b1f6:	9b01      	ldr	r3, [sp, #4]
 801b1f8:	6120      	str	r0, [r4, #16]
 801b1fa:	b15b      	cbz	r3, 801b214 <__smakebuf_r+0x74>
 801b1fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b200:	4630      	mov	r0, r6
 801b202:	f000 f89b 	bl	801b33c <_isatty_r>
 801b206:	b128      	cbz	r0, 801b214 <__smakebuf_r+0x74>
 801b208:	89a3      	ldrh	r3, [r4, #12]
 801b20a:	f023 0303 	bic.w	r3, r3, #3
 801b20e:	f043 0301 	orr.w	r3, r3, #1
 801b212:	81a3      	strh	r3, [r4, #12]
 801b214:	89a0      	ldrh	r0, [r4, #12]
 801b216:	4305      	orrs	r5, r0
 801b218:	81a5      	strh	r5, [r4, #12]
 801b21a:	e7cd      	b.n	801b1b8 <__smakebuf_r+0x18>
 801b21c:	08019535 	.word	0x08019535

0801b220 <_realloc_r>:
 801b220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b222:	4607      	mov	r7, r0
 801b224:	4614      	mov	r4, r2
 801b226:	460e      	mov	r6, r1
 801b228:	b921      	cbnz	r1, 801b234 <_realloc_r+0x14>
 801b22a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b22e:	4611      	mov	r1, r2
 801b230:	f7fb be52 	b.w	8016ed8 <_malloc_r>
 801b234:	b922      	cbnz	r2, 801b240 <_realloc_r+0x20>
 801b236:	f7fb fdff 	bl	8016e38 <_free_r>
 801b23a:	4625      	mov	r5, r4
 801b23c:	4628      	mov	r0, r5
 801b23e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b240:	f000 f88c 	bl	801b35c <_malloc_usable_size_r>
 801b244:	42a0      	cmp	r0, r4
 801b246:	d20f      	bcs.n	801b268 <_realloc_r+0x48>
 801b248:	4621      	mov	r1, r4
 801b24a:	4638      	mov	r0, r7
 801b24c:	f7fb fe44 	bl	8016ed8 <_malloc_r>
 801b250:	4605      	mov	r5, r0
 801b252:	2800      	cmp	r0, #0
 801b254:	d0f2      	beq.n	801b23c <_realloc_r+0x1c>
 801b256:	4631      	mov	r1, r6
 801b258:	4622      	mov	r2, r4
 801b25a:	f7fb fdbd 	bl	8016dd8 <memcpy>
 801b25e:	4631      	mov	r1, r6
 801b260:	4638      	mov	r0, r7
 801b262:	f7fb fde9 	bl	8016e38 <_free_r>
 801b266:	e7e9      	b.n	801b23c <_realloc_r+0x1c>
 801b268:	4635      	mov	r5, r6
 801b26a:	e7e7      	b.n	801b23c <_realloc_r+0x1c>

0801b26c <_read_r>:
 801b26c:	b538      	push	{r3, r4, r5, lr}
 801b26e:	4d07      	ldr	r5, [pc, #28]	; (801b28c <_read_r+0x20>)
 801b270:	4604      	mov	r4, r0
 801b272:	4608      	mov	r0, r1
 801b274:	4611      	mov	r1, r2
 801b276:	2200      	movs	r2, #0
 801b278:	602a      	str	r2, [r5, #0]
 801b27a:	461a      	mov	r2, r3
 801b27c:	f7e9 fcfe 	bl	8004c7c <_read>
 801b280:	1c43      	adds	r3, r0, #1
 801b282:	d102      	bne.n	801b28a <_read_r+0x1e>
 801b284:	682b      	ldr	r3, [r5, #0]
 801b286:	b103      	cbz	r3, 801b28a <_read_r+0x1e>
 801b288:	6023      	str	r3, [r4, #0]
 801b28a:	bd38      	pop	{r3, r4, r5, pc}
 801b28c:	20006e80 	.word	0x20006e80

0801b290 <_raise_r>:
 801b290:	291f      	cmp	r1, #31
 801b292:	b538      	push	{r3, r4, r5, lr}
 801b294:	4604      	mov	r4, r0
 801b296:	460d      	mov	r5, r1
 801b298:	d904      	bls.n	801b2a4 <_raise_r+0x14>
 801b29a:	2316      	movs	r3, #22
 801b29c:	6003      	str	r3, [r0, #0]
 801b29e:	f04f 30ff 	mov.w	r0, #4294967295
 801b2a2:	bd38      	pop	{r3, r4, r5, pc}
 801b2a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b2a6:	b112      	cbz	r2, 801b2ae <_raise_r+0x1e>
 801b2a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b2ac:	b94b      	cbnz	r3, 801b2c2 <_raise_r+0x32>
 801b2ae:	4620      	mov	r0, r4
 801b2b0:	f000 f830 	bl	801b314 <_getpid_r>
 801b2b4:	462a      	mov	r2, r5
 801b2b6:	4601      	mov	r1, r0
 801b2b8:	4620      	mov	r0, r4
 801b2ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b2be:	f000 b817 	b.w	801b2f0 <_kill_r>
 801b2c2:	2b01      	cmp	r3, #1
 801b2c4:	d00a      	beq.n	801b2dc <_raise_r+0x4c>
 801b2c6:	1c59      	adds	r1, r3, #1
 801b2c8:	d103      	bne.n	801b2d2 <_raise_r+0x42>
 801b2ca:	2316      	movs	r3, #22
 801b2cc:	6003      	str	r3, [r0, #0]
 801b2ce:	2001      	movs	r0, #1
 801b2d0:	e7e7      	b.n	801b2a2 <_raise_r+0x12>
 801b2d2:	2400      	movs	r4, #0
 801b2d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b2d8:	4628      	mov	r0, r5
 801b2da:	4798      	blx	r3
 801b2dc:	2000      	movs	r0, #0
 801b2de:	e7e0      	b.n	801b2a2 <_raise_r+0x12>

0801b2e0 <raise>:
 801b2e0:	4b02      	ldr	r3, [pc, #8]	; (801b2ec <raise+0xc>)
 801b2e2:	4601      	mov	r1, r0
 801b2e4:	6818      	ldr	r0, [r3, #0]
 801b2e6:	f7ff bfd3 	b.w	801b290 <_raise_r>
 801b2ea:	bf00      	nop
 801b2ec:	20000074 	.word	0x20000074

0801b2f0 <_kill_r>:
 801b2f0:	b538      	push	{r3, r4, r5, lr}
 801b2f2:	4d07      	ldr	r5, [pc, #28]	; (801b310 <_kill_r+0x20>)
 801b2f4:	2300      	movs	r3, #0
 801b2f6:	4604      	mov	r4, r0
 801b2f8:	4608      	mov	r0, r1
 801b2fa:	4611      	mov	r1, r2
 801b2fc:	602b      	str	r3, [r5, #0]
 801b2fe:	f7e9 fca1 	bl	8004c44 <_kill>
 801b302:	1c43      	adds	r3, r0, #1
 801b304:	d102      	bne.n	801b30c <_kill_r+0x1c>
 801b306:	682b      	ldr	r3, [r5, #0]
 801b308:	b103      	cbz	r3, 801b30c <_kill_r+0x1c>
 801b30a:	6023      	str	r3, [r4, #0]
 801b30c:	bd38      	pop	{r3, r4, r5, pc}
 801b30e:	bf00      	nop
 801b310:	20006e80 	.word	0x20006e80

0801b314 <_getpid_r>:
 801b314:	f7e9 bc8e 	b.w	8004c34 <_getpid>

0801b318 <_fstat_r>:
 801b318:	b538      	push	{r3, r4, r5, lr}
 801b31a:	4d07      	ldr	r5, [pc, #28]	; (801b338 <_fstat_r+0x20>)
 801b31c:	2300      	movs	r3, #0
 801b31e:	4604      	mov	r4, r0
 801b320:	4608      	mov	r0, r1
 801b322:	4611      	mov	r1, r2
 801b324:	602b      	str	r3, [r5, #0]
 801b326:	f7e9 fcee 	bl	8004d06 <_fstat>
 801b32a:	1c43      	adds	r3, r0, #1
 801b32c:	d102      	bne.n	801b334 <_fstat_r+0x1c>
 801b32e:	682b      	ldr	r3, [r5, #0]
 801b330:	b103      	cbz	r3, 801b334 <_fstat_r+0x1c>
 801b332:	6023      	str	r3, [r4, #0]
 801b334:	bd38      	pop	{r3, r4, r5, pc}
 801b336:	bf00      	nop
 801b338:	20006e80 	.word	0x20006e80

0801b33c <_isatty_r>:
 801b33c:	b538      	push	{r3, r4, r5, lr}
 801b33e:	4d06      	ldr	r5, [pc, #24]	; (801b358 <_isatty_r+0x1c>)
 801b340:	2300      	movs	r3, #0
 801b342:	4604      	mov	r4, r0
 801b344:	4608      	mov	r0, r1
 801b346:	602b      	str	r3, [r5, #0]
 801b348:	f7e9 fced 	bl	8004d26 <_isatty>
 801b34c:	1c43      	adds	r3, r0, #1
 801b34e:	d102      	bne.n	801b356 <_isatty_r+0x1a>
 801b350:	682b      	ldr	r3, [r5, #0]
 801b352:	b103      	cbz	r3, 801b356 <_isatty_r+0x1a>
 801b354:	6023      	str	r3, [r4, #0]
 801b356:	bd38      	pop	{r3, r4, r5, pc}
 801b358:	20006e80 	.word	0x20006e80

0801b35c <_malloc_usable_size_r>:
 801b35c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b360:	1f18      	subs	r0, r3, #4
 801b362:	2b00      	cmp	r3, #0
 801b364:	bfbc      	itt	lt
 801b366:	580b      	ldrlt	r3, [r1, r0]
 801b368:	18c0      	addlt	r0, r0, r3
 801b36a:	4770      	bx	lr

0801b36c <pow>:
 801b36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b370:	ec59 8b10 	vmov	r8, r9, d0
 801b374:	ec57 6b11 	vmov	r6, r7, d1
 801b378:	f000 f8a6 	bl	801b4c8 <__ieee754_pow>
 801b37c:	4b4e      	ldr	r3, [pc, #312]	; (801b4b8 <pow+0x14c>)
 801b37e:	f993 3000 	ldrsb.w	r3, [r3]
 801b382:	3301      	adds	r3, #1
 801b384:	ec55 4b10 	vmov	r4, r5, d0
 801b388:	d015      	beq.n	801b3b6 <pow+0x4a>
 801b38a:	4632      	mov	r2, r6
 801b38c:	463b      	mov	r3, r7
 801b38e:	4630      	mov	r0, r6
 801b390:	4639      	mov	r1, r7
 801b392:	f7e5 fbdb 	bl	8000b4c <__aeabi_dcmpun>
 801b396:	b970      	cbnz	r0, 801b3b6 <pow+0x4a>
 801b398:	4642      	mov	r2, r8
 801b39a:	464b      	mov	r3, r9
 801b39c:	4640      	mov	r0, r8
 801b39e:	4649      	mov	r1, r9
 801b3a0:	f7e5 fbd4 	bl	8000b4c <__aeabi_dcmpun>
 801b3a4:	2200      	movs	r2, #0
 801b3a6:	2300      	movs	r3, #0
 801b3a8:	b148      	cbz	r0, 801b3be <pow+0x52>
 801b3aa:	4630      	mov	r0, r6
 801b3ac:	4639      	mov	r1, r7
 801b3ae:	f7e5 fb9b 	bl	8000ae8 <__aeabi_dcmpeq>
 801b3b2:	2800      	cmp	r0, #0
 801b3b4:	d17d      	bne.n	801b4b2 <pow+0x146>
 801b3b6:	ec45 4b10 	vmov	d0, r4, r5
 801b3ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b3be:	4640      	mov	r0, r8
 801b3c0:	4649      	mov	r1, r9
 801b3c2:	f7e5 fb91 	bl	8000ae8 <__aeabi_dcmpeq>
 801b3c6:	b1e0      	cbz	r0, 801b402 <pow+0x96>
 801b3c8:	2200      	movs	r2, #0
 801b3ca:	2300      	movs	r3, #0
 801b3cc:	4630      	mov	r0, r6
 801b3ce:	4639      	mov	r1, r7
 801b3d0:	f7e5 fb8a 	bl	8000ae8 <__aeabi_dcmpeq>
 801b3d4:	2800      	cmp	r0, #0
 801b3d6:	d16c      	bne.n	801b4b2 <pow+0x146>
 801b3d8:	ec47 6b10 	vmov	d0, r6, r7
 801b3dc:	f000 fe53 	bl	801c086 <finite>
 801b3e0:	2800      	cmp	r0, #0
 801b3e2:	d0e8      	beq.n	801b3b6 <pow+0x4a>
 801b3e4:	2200      	movs	r2, #0
 801b3e6:	2300      	movs	r3, #0
 801b3e8:	4630      	mov	r0, r6
 801b3ea:	4639      	mov	r1, r7
 801b3ec:	f7e5 fb86 	bl	8000afc <__aeabi_dcmplt>
 801b3f0:	2800      	cmp	r0, #0
 801b3f2:	d0e0      	beq.n	801b3b6 <pow+0x4a>
 801b3f4:	f7fe f874 	bl	80194e0 <__errno>
 801b3f8:	2321      	movs	r3, #33	; 0x21
 801b3fa:	6003      	str	r3, [r0, #0]
 801b3fc:	2400      	movs	r4, #0
 801b3fe:	4d2f      	ldr	r5, [pc, #188]	; (801b4bc <pow+0x150>)
 801b400:	e7d9      	b.n	801b3b6 <pow+0x4a>
 801b402:	ec45 4b10 	vmov	d0, r4, r5
 801b406:	f000 fe3e 	bl	801c086 <finite>
 801b40a:	bbb8      	cbnz	r0, 801b47c <pow+0x110>
 801b40c:	ec49 8b10 	vmov	d0, r8, r9
 801b410:	f000 fe39 	bl	801c086 <finite>
 801b414:	b390      	cbz	r0, 801b47c <pow+0x110>
 801b416:	ec47 6b10 	vmov	d0, r6, r7
 801b41a:	f000 fe34 	bl	801c086 <finite>
 801b41e:	b368      	cbz	r0, 801b47c <pow+0x110>
 801b420:	4622      	mov	r2, r4
 801b422:	462b      	mov	r3, r5
 801b424:	4620      	mov	r0, r4
 801b426:	4629      	mov	r1, r5
 801b428:	f7e5 fb90 	bl	8000b4c <__aeabi_dcmpun>
 801b42c:	b160      	cbz	r0, 801b448 <pow+0xdc>
 801b42e:	f7fe f857 	bl	80194e0 <__errno>
 801b432:	2321      	movs	r3, #33	; 0x21
 801b434:	6003      	str	r3, [r0, #0]
 801b436:	2200      	movs	r2, #0
 801b438:	2300      	movs	r3, #0
 801b43a:	4610      	mov	r0, r2
 801b43c:	4619      	mov	r1, r3
 801b43e:	f7e5 fa15 	bl	800086c <__aeabi_ddiv>
 801b442:	4604      	mov	r4, r0
 801b444:	460d      	mov	r5, r1
 801b446:	e7b6      	b.n	801b3b6 <pow+0x4a>
 801b448:	f7fe f84a 	bl	80194e0 <__errno>
 801b44c:	2322      	movs	r3, #34	; 0x22
 801b44e:	6003      	str	r3, [r0, #0]
 801b450:	2200      	movs	r2, #0
 801b452:	2300      	movs	r3, #0
 801b454:	4640      	mov	r0, r8
 801b456:	4649      	mov	r1, r9
 801b458:	f7e5 fb50 	bl	8000afc <__aeabi_dcmplt>
 801b45c:	2400      	movs	r4, #0
 801b45e:	b158      	cbz	r0, 801b478 <pow+0x10c>
 801b460:	ec47 6b10 	vmov	d0, r6, r7
 801b464:	f000 fe1a 	bl	801c09c <rint>
 801b468:	4632      	mov	r2, r6
 801b46a:	ec51 0b10 	vmov	r0, r1, d0
 801b46e:	463b      	mov	r3, r7
 801b470:	f7e5 fb3a 	bl	8000ae8 <__aeabi_dcmpeq>
 801b474:	2800      	cmp	r0, #0
 801b476:	d0c2      	beq.n	801b3fe <pow+0x92>
 801b478:	4d11      	ldr	r5, [pc, #68]	; (801b4c0 <pow+0x154>)
 801b47a:	e79c      	b.n	801b3b6 <pow+0x4a>
 801b47c:	2200      	movs	r2, #0
 801b47e:	2300      	movs	r3, #0
 801b480:	4620      	mov	r0, r4
 801b482:	4629      	mov	r1, r5
 801b484:	f7e5 fb30 	bl	8000ae8 <__aeabi_dcmpeq>
 801b488:	2800      	cmp	r0, #0
 801b48a:	d094      	beq.n	801b3b6 <pow+0x4a>
 801b48c:	ec49 8b10 	vmov	d0, r8, r9
 801b490:	f000 fdf9 	bl	801c086 <finite>
 801b494:	2800      	cmp	r0, #0
 801b496:	d08e      	beq.n	801b3b6 <pow+0x4a>
 801b498:	ec47 6b10 	vmov	d0, r6, r7
 801b49c:	f000 fdf3 	bl	801c086 <finite>
 801b4a0:	2800      	cmp	r0, #0
 801b4a2:	d088      	beq.n	801b3b6 <pow+0x4a>
 801b4a4:	f7fe f81c 	bl	80194e0 <__errno>
 801b4a8:	2322      	movs	r3, #34	; 0x22
 801b4aa:	6003      	str	r3, [r0, #0]
 801b4ac:	2400      	movs	r4, #0
 801b4ae:	2500      	movs	r5, #0
 801b4b0:	e781      	b.n	801b3b6 <pow+0x4a>
 801b4b2:	4d04      	ldr	r5, [pc, #16]	; (801b4c4 <pow+0x158>)
 801b4b4:	2400      	movs	r4, #0
 801b4b6:	e77e      	b.n	801b3b6 <pow+0x4a>
 801b4b8:	20000248 	.word	0x20000248
 801b4bc:	fff00000 	.word	0xfff00000
 801b4c0:	7ff00000 	.word	0x7ff00000
 801b4c4:	3ff00000 	.word	0x3ff00000

0801b4c8 <__ieee754_pow>:
 801b4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4cc:	ed2d 8b06 	vpush	{d8-d10}
 801b4d0:	b08d      	sub	sp, #52	; 0x34
 801b4d2:	ed8d 1b02 	vstr	d1, [sp, #8]
 801b4d6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801b4da:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801b4de:	ea56 0100 	orrs.w	r1, r6, r0
 801b4e2:	ec53 2b10 	vmov	r2, r3, d0
 801b4e6:	f000 84d1 	beq.w	801be8c <__ieee754_pow+0x9c4>
 801b4ea:	497f      	ldr	r1, [pc, #508]	; (801b6e8 <__ieee754_pow+0x220>)
 801b4ec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801b4f0:	428c      	cmp	r4, r1
 801b4f2:	ee10 8a10 	vmov	r8, s0
 801b4f6:	4699      	mov	r9, r3
 801b4f8:	dc09      	bgt.n	801b50e <__ieee754_pow+0x46>
 801b4fa:	d103      	bne.n	801b504 <__ieee754_pow+0x3c>
 801b4fc:	b97a      	cbnz	r2, 801b51e <__ieee754_pow+0x56>
 801b4fe:	42a6      	cmp	r6, r4
 801b500:	dd02      	ble.n	801b508 <__ieee754_pow+0x40>
 801b502:	e00c      	b.n	801b51e <__ieee754_pow+0x56>
 801b504:	428e      	cmp	r6, r1
 801b506:	dc02      	bgt.n	801b50e <__ieee754_pow+0x46>
 801b508:	428e      	cmp	r6, r1
 801b50a:	d110      	bne.n	801b52e <__ieee754_pow+0x66>
 801b50c:	b178      	cbz	r0, 801b52e <__ieee754_pow+0x66>
 801b50e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b512:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b516:	ea54 0308 	orrs.w	r3, r4, r8
 801b51a:	f000 84b7 	beq.w	801be8c <__ieee754_pow+0x9c4>
 801b51e:	4873      	ldr	r0, [pc, #460]	; (801b6ec <__ieee754_pow+0x224>)
 801b520:	b00d      	add	sp, #52	; 0x34
 801b522:	ecbd 8b06 	vpop	{d8-d10}
 801b526:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b52a:	f7ff bbfd 	b.w	801ad28 <nan>
 801b52e:	f1b9 0f00 	cmp.w	r9, #0
 801b532:	da36      	bge.n	801b5a2 <__ieee754_pow+0xda>
 801b534:	496e      	ldr	r1, [pc, #440]	; (801b6f0 <__ieee754_pow+0x228>)
 801b536:	428e      	cmp	r6, r1
 801b538:	dc51      	bgt.n	801b5de <__ieee754_pow+0x116>
 801b53a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801b53e:	428e      	cmp	r6, r1
 801b540:	f340 84af 	ble.w	801bea2 <__ieee754_pow+0x9da>
 801b544:	1531      	asrs	r1, r6, #20
 801b546:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801b54a:	2914      	cmp	r1, #20
 801b54c:	dd0f      	ble.n	801b56e <__ieee754_pow+0xa6>
 801b54e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801b552:	fa20 fc01 	lsr.w	ip, r0, r1
 801b556:	fa0c f101 	lsl.w	r1, ip, r1
 801b55a:	4281      	cmp	r1, r0
 801b55c:	f040 84a1 	bne.w	801bea2 <__ieee754_pow+0x9da>
 801b560:	f00c 0c01 	and.w	ip, ip, #1
 801b564:	f1cc 0102 	rsb	r1, ip, #2
 801b568:	9100      	str	r1, [sp, #0]
 801b56a:	b180      	cbz	r0, 801b58e <__ieee754_pow+0xc6>
 801b56c:	e059      	b.n	801b622 <__ieee754_pow+0x15a>
 801b56e:	2800      	cmp	r0, #0
 801b570:	d155      	bne.n	801b61e <__ieee754_pow+0x156>
 801b572:	f1c1 0114 	rsb	r1, r1, #20
 801b576:	fa46 fc01 	asr.w	ip, r6, r1
 801b57a:	fa0c f101 	lsl.w	r1, ip, r1
 801b57e:	42b1      	cmp	r1, r6
 801b580:	f040 848c 	bne.w	801be9c <__ieee754_pow+0x9d4>
 801b584:	f00c 0c01 	and.w	ip, ip, #1
 801b588:	f1cc 0102 	rsb	r1, ip, #2
 801b58c:	9100      	str	r1, [sp, #0]
 801b58e:	4959      	ldr	r1, [pc, #356]	; (801b6f4 <__ieee754_pow+0x22c>)
 801b590:	428e      	cmp	r6, r1
 801b592:	d12d      	bne.n	801b5f0 <__ieee754_pow+0x128>
 801b594:	2f00      	cmp	r7, #0
 801b596:	da79      	bge.n	801b68c <__ieee754_pow+0x1c4>
 801b598:	4956      	ldr	r1, [pc, #344]	; (801b6f4 <__ieee754_pow+0x22c>)
 801b59a:	2000      	movs	r0, #0
 801b59c:	f7e5 f966 	bl	800086c <__aeabi_ddiv>
 801b5a0:	e016      	b.n	801b5d0 <__ieee754_pow+0x108>
 801b5a2:	2100      	movs	r1, #0
 801b5a4:	9100      	str	r1, [sp, #0]
 801b5a6:	2800      	cmp	r0, #0
 801b5a8:	d13b      	bne.n	801b622 <__ieee754_pow+0x15a>
 801b5aa:	494f      	ldr	r1, [pc, #316]	; (801b6e8 <__ieee754_pow+0x220>)
 801b5ac:	428e      	cmp	r6, r1
 801b5ae:	d1ee      	bne.n	801b58e <__ieee754_pow+0xc6>
 801b5b0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801b5b4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801b5b8:	ea53 0308 	orrs.w	r3, r3, r8
 801b5bc:	f000 8466 	beq.w	801be8c <__ieee754_pow+0x9c4>
 801b5c0:	4b4d      	ldr	r3, [pc, #308]	; (801b6f8 <__ieee754_pow+0x230>)
 801b5c2:	429c      	cmp	r4, r3
 801b5c4:	dd0d      	ble.n	801b5e2 <__ieee754_pow+0x11a>
 801b5c6:	2f00      	cmp	r7, #0
 801b5c8:	f280 8464 	bge.w	801be94 <__ieee754_pow+0x9cc>
 801b5cc:	2000      	movs	r0, #0
 801b5ce:	2100      	movs	r1, #0
 801b5d0:	ec41 0b10 	vmov	d0, r0, r1
 801b5d4:	b00d      	add	sp, #52	; 0x34
 801b5d6:	ecbd 8b06 	vpop	{d8-d10}
 801b5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5de:	2102      	movs	r1, #2
 801b5e0:	e7e0      	b.n	801b5a4 <__ieee754_pow+0xdc>
 801b5e2:	2f00      	cmp	r7, #0
 801b5e4:	daf2      	bge.n	801b5cc <__ieee754_pow+0x104>
 801b5e6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801b5ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801b5ee:	e7ef      	b.n	801b5d0 <__ieee754_pow+0x108>
 801b5f0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801b5f4:	d104      	bne.n	801b600 <__ieee754_pow+0x138>
 801b5f6:	4610      	mov	r0, r2
 801b5f8:	4619      	mov	r1, r3
 801b5fa:	f7e5 f80d 	bl	8000618 <__aeabi_dmul>
 801b5fe:	e7e7      	b.n	801b5d0 <__ieee754_pow+0x108>
 801b600:	493e      	ldr	r1, [pc, #248]	; (801b6fc <__ieee754_pow+0x234>)
 801b602:	428f      	cmp	r7, r1
 801b604:	d10d      	bne.n	801b622 <__ieee754_pow+0x15a>
 801b606:	f1b9 0f00 	cmp.w	r9, #0
 801b60a:	db0a      	blt.n	801b622 <__ieee754_pow+0x15a>
 801b60c:	ec43 2b10 	vmov	d0, r2, r3
 801b610:	b00d      	add	sp, #52	; 0x34
 801b612:	ecbd 8b06 	vpop	{d8-d10}
 801b616:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b61a:	f000 bc77 	b.w	801bf0c <__ieee754_sqrt>
 801b61e:	2100      	movs	r1, #0
 801b620:	9100      	str	r1, [sp, #0]
 801b622:	ec43 2b10 	vmov	d0, r2, r3
 801b626:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b62a:	f000 fd23 	bl	801c074 <fabs>
 801b62e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b632:	ec51 0b10 	vmov	r0, r1, d0
 801b636:	f1b8 0f00 	cmp.w	r8, #0
 801b63a:	d12a      	bne.n	801b692 <__ieee754_pow+0x1ca>
 801b63c:	b12c      	cbz	r4, 801b64a <__ieee754_pow+0x182>
 801b63e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 801b6f4 <__ieee754_pow+0x22c>
 801b642:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801b646:	45e6      	cmp	lr, ip
 801b648:	d123      	bne.n	801b692 <__ieee754_pow+0x1ca>
 801b64a:	2f00      	cmp	r7, #0
 801b64c:	da05      	bge.n	801b65a <__ieee754_pow+0x192>
 801b64e:	4602      	mov	r2, r0
 801b650:	460b      	mov	r3, r1
 801b652:	2000      	movs	r0, #0
 801b654:	4927      	ldr	r1, [pc, #156]	; (801b6f4 <__ieee754_pow+0x22c>)
 801b656:	f7e5 f909 	bl	800086c <__aeabi_ddiv>
 801b65a:	f1b9 0f00 	cmp.w	r9, #0
 801b65e:	dab7      	bge.n	801b5d0 <__ieee754_pow+0x108>
 801b660:	9b00      	ldr	r3, [sp, #0]
 801b662:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b666:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b66a:	4323      	orrs	r3, r4
 801b66c:	d108      	bne.n	801b680 <__ieee754_pow+0x1b8>
 801b66e:	4602      	mov	r2, r0
 801b670:	460b      	mov	r3, r1
 801b672:	4610      	mov	r0, r2
 801b674:	4619      	mov	r1, r3
 801b676:	f7e4 fe17 	bl	80002a8 <__aeabi_dsub>
 801b67a:	4602      	mov	r2, r0
 801b67c:	460b      	mov	r3, r1
 801b67e:	e78d      	b.n	801b59c <__ieee754_pow+0xd4>
 801b680:	9b00      	ldr	r3, [sp, #0]
 801b682:	2b01      	cmp	r3, #1
 801b684:	d1a4      	bne.n	801b5d0 <__ieee754_pow+0x108>
 801b686:	4602      	mov	r2, r0
 801b688:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b68c:	4610      	mov	r0, r2
 801b68e:	4619      	mov	r1, r3
 801b690:	e79e      	b.n	801b5d0 <__ieee754_pow+0x108>
 801b692:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801b696:	f10c 35ff 	add.w	r5, ip, #4294967295
 801b69a:	950a      	str	r5, [sp, #40]	; 0x28
 801b69c:	9d00      	ldr	r5, [sp, #0]
 801b69e:	46ac      	mov	ip, r5
 801b6a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b6a2:	ea5c 0505 	orrs.w	r5, ip, r5
 801b6a6:	d0e4      	beq.n	801b672 <__ieee754_pow+0x1aa>
 801b6a8:	4b15      	ldr	r3, [pc, #84]	; (801b700 <__ieee754_pow+0x238>)
 801b6aa:	429e      	cmp	r6, r3
 801b6ac:	f340 80fc 	ble.w	801b8a8 <__ieee754_pow+0x3e0>
 801b6b0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801b6b4:	429e      	cmp	r6, r3
 801b6b6:	4b10      	ldr	r3, [pc, #64]	; (801b6f8 <__ieee754_pow+0x230>)
 801b6b8:	dd07      	ble.n	801b6ca <__ieee754_pow+0x202>
 801b6ba:	429c      	cmp	r4, r3
 801b6bc:	dc0a      	bgt.n	801b6d4 <__ieee754_pow+0x20c>
 801b6be:	2f00      	cmp	r7, #0
 801b6c0:	da84      	bge.n	801b5cc <__ieee754_pow+0x104>
 801b6c2:	a307      	add	r3, pc, #28	; (adr r3, 801b6e0 <__ieee754_pow+0x218>)
 801b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6c8:	e795      	b.n	801b5f6 <__ieee754_pow+0x12e>
 801b6ca:	429c      	cmp	r4, r3
 801b6cc:	dbf7      	blt.n	801b6be <__ieee754_pow+0x1f6>
 801b6ce:	4b09      	ldr	r3, [pc, #36]	; (801b6f4 <__ieee754_pow+0x22c>)
 801b6d0:	429c      	cmp	r4, r3
 801b6d2:	dd17      	ble.n	801b704 <__ieee754_pow+0x23c>
 801b6d4:	2f00      	cmp	r7, #0
 801b6d6:	dcf4      	bgt.n	801b6c2 <__ieee754_pow+0x1fa>
 801b6d8:	e778      	b.n	801b5cc <__ieee754_pow+0x104>
 801b6da:	bf00      	nop
 801b6dc:	f3af 8000 	nop.w
 801b6e0:	8800759c 	.word	0x8800759c
 801b6e4:	7e37e43c 	.word	0x7e37e43c
 801b6e8:	7ff00000 	.word	0x7ff00000
 801b6ec:	0801fd0b 	.word	0x0801fd0b
 801b6f0:	433fffff 	.word	0x433fffff
 801b6f4:	3ff00000 	.word	0x3ff00000
 801b6f8:	3fefffff 	.word	0x3fefffff
 801b6fc:	3fe00000 	.word	0x3fe00000
 801b700:	41e00000 	.word	0x41e00000
 801b704:	4b64      	ldr	r3, [pc, #400]	; (801b898 <__ieee754_pow+0x3d0>)
 801b706:	2200      	movs	r2, #0
 801b708:	f7e4 fdce 	bl	80002a8 <__aeabi_dsub>
 801b70c:	a356      	add	r3, pc, #344	; (adr r3, 801b868 <__ieee754_pow+0x3a0>)
 801b70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b712:	4604      	mov	r4, r0
 801b714:	460d      	mov	r5, r1
 801b716:	f7e4 ff7f 	bl	8000618 <__aeabi_dmul>
 801b71a:	a355      	add	r3, pc, #340	; (adr r3, 801b870 <__ieee754_pow+0x3a8>)
 801b71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b720:	4606      	mov	r6, r0
 801b722:	460f      	mov	r7, r1
 801b724:	4620      	mov	r0, r4
 801b726:	4629      	mov	r1, r5
 801b728:	f7e4 ff76 	bl	8000618 <__aeabi_dmul>
 801b72c:	4b5b      	ldr	r3, [pc, #364]	; (801b89c <__ieee754_pow+0x3d4>)
 801b72e:	4682      	mov	sl, r0
 801b730:	468b      	mov	fp, r1
 801b732:	2200      	movs	r2, #0
 801b734:	4620      	mov	r0, r4
 801b736:	4629      	mov	r1, r5
 801b738:	f7e4 ff6e 	bl	8000618 <__aeabi_dmul>
 801b73c:	4602      	mov	r2, r0
 801b73e:	460b      	mov	r3, r1
 801b740:	a14d      	add	r1, pc, #308	; (adr r1, 801b878 <__ieee754_pow+0x3b0>)
 801b742:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b746:	f7e4 fdaf 	bl	80002a8 <__aeabi_dsub>
 801b74a:	4622      	mov	r2, r4
 801b74c:	462b      	mov	r3, r5
 801b74e:	f7e4 ff63 	bl	8000618 <__aeabi_dmul>
 801b752:	4602      	mov	r2, r0
 801b754:	460b      	mov	r3, r1
 801b756:	2000      	movs	r0, #0
 801b758:	4951      	ldr	r1, [pc, #324]	; (801b8a0 <__ieee754_pow+0x3d8>)
 801b75a:	f7e4 fda5 	bl	80002a8 <__aeabi_dsub>
 801b75e:	4622      	mov	r2, r4
 801b760:	4680      	mov	r8, r0
 801b762:	4689      	mov	r9, r1
 801b764:	462b      	mov	r3, r5
 801b766:	4620      	mov	r0, r4
 801b768:	4629      	mov	r1, r5
 801b76a:	f7e4 ff55 	bl	8000618 <__aeabi_dmul>
 801b76e:	4602      	mov	r2, r0
 801b770:	460b      	mov	r3, r1
 801b772:	4640      	mov	r0, r8
 801b774:	4649      	mov	r1, r9
 801b776:	f7e4 ff4f 	bl	8000618 <__aeabi_dmul>
 801b77a:	a341      	add	r3, pc, #260	; (adr r3, 801b880 <__ieee754_pow+0x3b8>)
 801b77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b780:	f7e4 ff4a 	bl	8000618 <__aeabi_dmul>
 801b784:	4602      	mov	r2, r0
 801b786:	460b      	mov	r3, r1
 801b788:	4650      	mov	r0, sl
 801b78a:	4659      	mov	r1, fp
 801b78c:	f7e4 fd8c 	bl	80002a8 <__aeabi_dsub>
 801b790:	4602      	mov	r2, r0
 801b792:	460b      	mov	r3, r1
 801b794:	4680      	mov	r8, r0
 801b796:	4689      	mov	r9, r1
 801b798:	4630      	mov	r0, r6
 801b79a:	4639      	mov	r1, r7
 801b79c:	f7e4 fd86 	bl	80002ac <__adddf3>
 801b7a0:	2400      	movs	r4, #0
 801b7a2:	4632      	mov	r2, r6
 801b7a4:	463b      	mov	r3, r7
 801b7a6:	4620      	mov	r0, r4
 801b7a8:	460d      	mov	r5, r1
 801b7aa:	f7e4 fd7d 	bl	80002a8 <__aeabi_dsub>
 801b7ae:	4602      	mov	r2, r0
 801b7b0:	460b      	mov	r3, r1
 801b7b2:	4640      	mov	r0, r8
 801b7b4:	4649      	mov	r1, r9
 801b7b6:	f7e4 fd77 	bl	80002a8 <__aeabi_dsub>
 801b7ba:	9b00      	ldr	r3, [sp, #0]
 801b7bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b7be:	3b01      	subs	r3, #1
 801b7c0:	4313      	orrs	r3, r2
 801b7c2:	4682      	mov	sl, r0
 801b7c4:	468b      	mov	fp, r1
 801b7c6:	f040 81f1 	bne.w	801bbac <__ieee754_pow+0x6e4>
 801b7ca:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801b888 <__ieee754_pow+0x3c0>
 801b7ce:	eeb0 8a47 	vmov.f32	s16, s14
 801b7d2:	eef0 8a67 	vmov.f32	s17, s15
 801b7d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801b7da:	2600      	movs	r6, #0
 801b7dc:	4632      	mov	r2, r6
 801b7de:	463b      	mov	r3, r7
 801b7e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b7e4:	f7e4 fd60 	bl	80002a8 <__aeabi_dsub>
 801b7e8:	4622      	mov	r2, r4
 801b7ea:	462b      	mov	r3, r5
 801b7ec:	f7e4 ff14 	bl	8000618 <__aeabi_dmul>
 801b7f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b7f4:	4680      	mov	r8, r0
 801b7f6:	4689      	mov	r9, r1
 801b7f8:	4650      	mov	r0, sl
 801b7fa:	4659      	mov	r1, fp
 801b7fc:	f7e4 ff0c 	bl	8000618 <__aeabi_dmul>
 801b800:	4602      	mov	r2, r0
 801b802:	460b      	mov	r3, r1
 801b804:	4640      	mov	r0, r8
 801b806:	4649      	mov	r1, r9
 801b808:	f7e4 fd50 	bl	80002ac <__adddf3>
 801b80c:	4632      	mov	r2, r6
 801b80e:	463b      	mov	r3, r7
 801b810:	4680      	mov	r8, r0
 801b812:	4689      	mov	r9, r1
 801b814:	4620      	mov	r0, r4
 801b816:	4629      	mov	r1, r5
 801b818:	f7e4 fefe 	bl	8000618 <__aeabi_dmul>
 801b81c:	460b      	mov	r3, r1
 801b81e:	4604      	mov	r4, r0
 801b820:	460d      	mov	r5, r1
 801b822:	4602      	mov	r2, r0
 801b824:	4649      	mov	r1, r9
 801b826:	4640      	mov	r0, r8
 801b828:	f7e4 fd40 	bl	80002ac <__adddf3>
 801b82c:	4b1d      	ldr	r3, [pc, #116]	; (801b8a4 <__ieee754_pow+0x3dc>)
 801b82e:	4299      	cmp	r1, r3
 801b830:	ec45 4b19 	vmov	d9, r4, r5
 801b834:	4606      	mov	r6, r0
 801b836:	460f      	mov	r7, r1
 801b838:	468b      	mov	fp, r1
 801b83a:	f340 82fe 	ble.w	801be3a <__ieee754_pow+0x972>
 801b83e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801b842:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801b846:	4303      	orrs	r3, r0
 801b848:	f000 81f0 	beq.w	801bc2c <__ieee754_pow+0x764>
 801b84c:	a310      	add	r3, pc, #64	; (adr r3, 801b890 <__ieee754_pow+0x3c8>)
 801b84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b852:	ec51 0b18 	vmov	r0, r1, d8
 801b856:	f7e4 fedf 	bl	8000618 <__aeabi_dmul>
 801b85a:	a30d      	add	r3, pc, #52	; (adr r3, 801b890 <__ieee754_pow+0x3c8>)
 801b85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b860:	e6cb      	b.n	801b5fa <__ieee754_pow+0x132>
 801b862:	bf00      	nop
 801b864:	f3af 8000 	nop.w
 801b868:	60000000 	.word	0x60000000
 801b86c:	3ff71547 	.word	0x3ff71547
 801b870:	f85ddf44 	.word	0xf85ddf44
 801b874:	3e54ae0b 	.word	0x3e54ae0b
 801b878:	55555555 	.word	0x55555555
 801b87c:	3fd55555 	.word	0x3fd55555
 801b880:	652b82fe 	.word	0x652b82fe
 801b884:	3ff71547 	.word	0x3ff71547
 801b888:	00000000 	.word	0x00000000
 801b88c:	bff00000 	.word	0xbff00000
 801b890:	8800759c 	.word	0x8800759c
 801b894:	7e37e43c 	.word	0x7e37e43c
 801b898:	3ff00000 	.word	0x3ff00000
 801b89c:	3fd00000 	.word	0x3fd00000
 801b8a0:	3fe00000 	.word	0x3fe00000
 801b8a4:	408fffff 	.word	0x408fffff
 801b8a8:	4bd7      	ldr	r3, [pc, #860]	; (801bc08 <__ieee754_pow+0x740>)
 801b8aa:	ea03 0309 	and.w	r3, r3, r9
 801b8ae:	2200      	movs	r2, #0
 801b8b0:	b92b      	cbnz	r3, 801b8be <__ieee754_pow+0x3f6>
 801b8b2:	4bd6      	ldr	r3, [pc, #856]	; (801bc0c <__ieee754_pow+0x744>)
 801b8b4:	f7e4 feb0 	bl	8000618 <__aeabi_dmul>
 801b8b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801b8bc:	460c      	mov	r4, r1
 801b8be:	1523      	asrs	r3, r4, #20
 801b8c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b8c4:	4413      	add	r3, r2
 801b8c6:	9309      	str	r3, [sp, #36]	; 0x24
 801b8c8:	4bd1      	ldr	r3, [pc, #836]	; (801bc10 <__ieee754_pow+0x748>)
 801b8ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801b8ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801b8d2:	429c      	cmp	r4, r3
 801b8d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801b8d8:	dd08      	ble.n	801b8ec <__ieee754_pow+0x424>
 801b8da:	4bce      	ldr	r3, [pc, #824]	; (801bc14 <__ieee754_pow+0x74c>)
 801b8dc:	429c      	cmp	r4, r3
 801b8de:	f340 8163 	ble.w	801bba8 <__ieee754_pow+0x6e0>
 801b8e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8e4:	3301      	adds	r3, #1
 801b8e6:	9309      	str	r3, [sp, #36]	; 0x24
 801b8e8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801b8ec:	2400      	movs	r4, #0
 801b8ee:	00e3      	lsls	r3, r4, #3
 801b8f0:	930b      	str	r3, [sp, #44]	; 0x2c
 801b8f2:	4bc9      	ldr	r3, [pc, #804]	; (801bc18 <__ieee754_pow+0x750>)
 801b8f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b8f8:	ed93 7b00 	vldr	d7, [r3]
 801b8fc:	4629      	mov	r1, r5
 801b8fe:	ec53 2b17 	vmov	r2, r3, d7
 801b902:	eeb0 8a47 	vmov.f32	s16, s14
 801b906:	eef0 8a67 	vmov.f32	s17, s15
 801b90a:	4682      	mov	sl, r0
 801b90c:	f7e4 fccc 	bl	80002a8 <__aeabi_dsub>
 801b910:	4652      	mov	r2, sl
 801b912:	4606      	mov	r6, r0
 801b914:	460f      	mov	r7, r1
 801b916:	462b      	mov	r3, r5
 801b918:	ec51 0b18 	vmov	r0, r1, d8
 801b91c:	f7e4 fcc6 	bl	80002ac <__adddf3>
 801b920:	4602      	mov	r2, r0
 801b922:	460b      	mov	r3, r1
 801b924:	2000      	movs	r0, #0
 801b926:	49bd      	ldr	r1, [pc, #756]	; (801bc1c <__ieee754_pow+0x754>)
 801b928:	f7e4 ffa0 	bl	800086c <__aeabi_ddiv>
 801b92c:	ec41 0b19 	vmov	d9, r0, r1
 801b930:	4602      	mov	r2, r0
 801b932:	460b      	mov	r3, r1
 801b934:	4630      	mov	r0, r6
 801b936:	4639      	mov	r1, r7
 801b938:	f7e4 fe6e 	bl	8000618 <__aeabi_dmul>
 801b93c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b940:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b944:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b948:	2300      	movs	r3, #0
 801b94a:	9304      	str	r3, [sp, #16]
 801b94c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801b950:	46ab      	mov	fp, r5
 801b952:	106d      	asrs	r5, r5, #1
 801b954:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801b958:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801b95c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801b960:	2200      	movs	r2, #0
 801b962:	4640      	mov	r0, r8
 801b964:	4649      	mov	r1, r9
 801b966:	4614      	mov	r4, r2
 801b968:	461d      	mov	r5, r3
 801b96a:	f7e4 fe55 	bl	8000618 <__aeabi_dmul>
 801b96e:	4602      	mov	r2, r0
 801b970:	460b      	mov	r3, r1
 801b972:	4630      	mov	r0, r6
 801b974:	4639      	mov	r1, r7
 801b976:	f7e4 fc97 	bl	80002a8 <__aeabi_dsub>
 801b97a:	ec53 2b18 	vmov	r2, r3, d8
 801b97e:	4606      	mov	r6, r0
 801b980:	460f      	mov	r7, r1
 801b982:	4620      	mov	r0, r4
 801b984:	4629      	mov	r1, r5
 801b986:	f7e4 fc8f 	bl	80002a8 <__aeabi_dsub>
 801b98a:	4602      	mov	r2, r0
 801b98c:	460b      	mov	r3, r1
 801b98e:	4650      	mov	r0, sl
 801b990:	4659      	mov	r1, fp
 801b992:	f7e4 fc89 	bl	80002a8 <__aeabi_dsub>
 801b996:	4642      	mov	r2, r8
 801b998:	464b      	mov	r3, r9
 801b99a:	f7e4 fe3d 	bl	8000618 <__aeabi_dmul>
 801b99e:	4602      	mov	r2, r0
 801b9a0:	460b      	mov	r3, r1
 801b9a2:	4630      	mov	r0, r6
 801b9a4:	4639      	mov	r1, r7
 801b9a6:	f7e4 fc7f 	bl	80002a8 <__aeabi_dsub>
 801b9aa:	ec53 2b19 	vmov	r2, r3, d9
 801b9ae:	f7e4 fe33 	bl	8000618 <__aeabi_dmul>
 801b9b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b9b6:	ec41 0b18 	vmov	d8, r0, r1
 801b9ba:	4610      	mov	r0, r2
 801b9bc:	4619      	mov	r1, r3
 801b9be:	f7e4 fe2b 	bl	8000618 <__aeabi_dmul>
 801b9c2:	a37d      	add	r3, pc, #500	; (adr r3, 801bbb8 <__ieee754_pow+0x6f0>)
 801b9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9c8:	4604      	mov	r4, r0
 801b9ca:	460d      	mov	r5, r1
 801b9cc:	f7e4 fe24 	bl	8000618 <__aeabi_dmul>
 801b9d0:	a37b      	add	r3, pc, #492	; (adr r3, 801bbc0 <__ieee754_pow+0x6f8>)
 801b9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9d6:	f7e4 fc69 	bl	80002ac <__adddf3>
 801b9da:	4622      	mov	r2, r4
 801b9dc:	462b      	mov	r3, r5
 801b9de:	f7e4 fe1b 	bl	8000618 <__aeabi_dmul>
 801b9e2:	a379      	add	r3, pc, #484	; (adr r3, 801bbc8 <__ieee754_pow+0x700>)
 801b9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9e8:	f7e4 fc60 	bl	80002ac <__adddf3>
 801b9ec:	4622      	mov	r2, r4
 801b9ee:	462b      	mov	r3, r5
 801b9f0:	f7e4 fe12 	bl	8000618 <__aeabi_dmul>
 801b9f4:	a376      	add	r3, pc, #472	; (adr r3, 801bbd0 <__ieee754_pow+0x708>)
 801b9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9fa:	f7e4 fc57 	bl	80002ac <__adddf3>
 801b9fe:	4622      	mov	r2, r4
 801ba00:	462b      	mov	r3, r5
 801ba02:	f7e4 fe09 	bl	8000618 <__aeabi_dmul>
 801ba06:	a374      	add	r3, pc, #464	; (adr r3, 801bbd8 <__ieee754_pow+0x710>)
 801ba08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba0c:	f7e4 fc4e 	bl	80002ac <__adddf3>
 801ba10:	4622      	mov	r2, r4
 801ba12:	462b      	mov	r3, r5
 801ba14:	f7e4 fe00 	bl	8000618 <__aeabi_dmul>
 801ba18:	a371      	add	r3, pc, #452	; (adr r3, 801bbe0 <__ieee754_pow+0x718>)
 801ba1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba1e:	f7e4 fc45 	bl	80002ac <__adddf3>
 801ba22:	4622      	mov	r2, r4
 801ba24:	4606      	mov	r6, r0
 801ba26:	460f      	mov	r7, r1
 801ba28:	462b      	mov	r3, r5
 801ba2a:	4620      	mov	r0, r4
 801ba2c:	4629      	mov	r1, r5
 801ba2e:	f7e4 fdf3 	bl	8000618 <__aeabi_dmul>
 801ba32:	4602      	mov	r2, r0
 801ba34:	460b      	mov	r3, r1
 801ba36:	4630      	mov	r0, r6
 801ba38:	4639      	mov	r1, r7
 801ba3a:	f7e4 fded 	bl	8000618 <__aeabi_dmul>
 801ba3e:	4642      	mov	r2, r8
 801ba40:	4604      	mov	r4, r0
 801ba42:	460d      	mov	r5, r1
 801ba44:	464b      	mov	r3, r9
 801ba46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ba4a:	f7e4 fc2f 	bl	80002ac <__adddf3>
 801ba4e:	ec53 2b18 	vmov	r2, r3, d8
 801ba52:	f7e4 fde1 	bl	8000618 <__aeabi_dmul>
 801ba56:	4622      	mov	r2, r4
 801ba58:	462b      	mov	r3, r5
 801ba5a:	f7e4 fc27 	bl	80002ac <__adddf3>
 801ba5e:	4642      	mov	r2, r8
 801ba60:	4682      	mov	sl, r0
 801ba62:	468b      	mov	fp, r1
 801ba64:	464b      	mov	r3, r9
 801ba66:	4640      	mov	r0, r8
 801ba68:	4649      	mov	r1, r9
 801ba6a:	f7e4 fdd5 	bl	8000618 <__aeabi_dmul>
 801ba6e:	4b6c      	ldr	r3, [pc, #432]	; (801bc20 <__ieee754_pow+0x758>)
 801ba70:	2200      	movs	r2, #0
 801ba72:	4606      	mov	r6, r0
 801ba74:	460f      	mov	r7, r1
 801ba76:	f7e4 fc19 	bl	80002ac <__adddf3>
 801ba7a:	4652      	mov	r2, sl
 801ba7c:	465b      	mov	r3, fp
 801ba7e:	f7e4 fc15 	bl	80002ac <__adddf3>
 801ba82:	9c04      	ldr	r4, [sp, #16]
 801ba84:	460d      	mov	r5, r1
 801ba86:	4622      	mov	r2, r4
 801ba88:	460b      	mov	r3, r1
 801ba8a:	4640      	mov	r0, r8
 801ba8c:	4649      	mov	r1, r9
 801ba8e:	f7e4 fdc3 	bl	8000618 <__aeabi_dmul>
 801ba92:	4b63      	ldr	r3, [pc, #396]	; (801bc20 <__ieee754_pow+0x758>)
 801ba94:	4680      	mov	r8, r0
 801ba96:	4689      	mov	r9, r1
 801ba98:	2200      	movs	r2, #0
 801ba9a:	4620      	mov	r0, r4
 801ba9c:	4629      	mov	r1, r5
 801ba9e:	f7e4 fc03 	bl	80002a8 <__aeabi_dsub>
 801baa2:	4632      	mov	r2, r6
 801baa4:	463b      	mov	r3, r7
 801baa6:	f7e4 fbff 	bl	80002a8 <__aeabi_dsub>
 801baaa:	4602      	mov	r2, r0
 801baac:	460b      	mov	r3, r1
 801baae:	4650      	mov	r0, sl
 801bab0:	4659      	mov	r1, fp
 801bab2:	f7e4 fbf9 	bl	80002a8 <__aeabi_dsub>
 801bab6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801baba:	f7e4 fdad 	bl	8000618 <__aeabi_dmul>
 801babe:	4622      	mov	r2, r4
 801bac0:	4606      	mov	r6, r0
 801bac2:	460f      	mov	r7, r1
 801bac4:	462b      	mov	r3, r5
 801bac6:	ec51 0b18 	vmov	r0, r1, d8
 801baca:	f7e4 fda5 	bl	8000618 <__aeabi_dmul>
 801bace:	4602      	mov	r2, r0
 801bad0:	460b      	mov	r3, r1
 801bad2:	4630      	mov	r0, r6
 801bad4:	4639      	mov	r1, r7
 801bad6:	f7e4 fbe9 	bl	80002ac <__adddf3>
 801bada:	4606      	mov	r6, r0
 801badc:	460f      	mov	r7, r1
 801bade:	4602      	mov	r2, r0
 801bae0:	460b      	mov	r3, r1
 801bae2:	4640      	mov	r0, r8
 801bae4:	4649      	mov	r1, r9
 801bae6:	f7e4 fbe1 	bl	80002ac <__adddf3>
 801baea:	9c04      	ldr	r4, [sp, #16]
 801baec:	a33e      	add	r3, pc, #248	; (adr r3, 801bbe8 <__ieee754_pow+0x720>)
 801baee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baf2:	4620      	mov	r0, r4
 801baf4:	460d      	mov	r5, r1
 801baf6:	f7e4 fd8f 	bl	8000618 <__aeabi_dmul>
 801bafa:	4642      	mov	r2, r8
 801bafc:	ec41 0b18 	vmov	d8, r0, r1
 801bb00:	464b      	mov	r3, r9
 801bb02:	4620      	mov	r0, r4
 801bb04:	4629      	mov	r1, r5
 801bb06:	f7e4 fbcf 	bl	80002a8 <__aeabi_dsub>
 801bb0a:	4602      	mov	r2, r0
 801bb0c:	460b      	mov	r3, r1
 801bb0e:	4630      	mov	r0, r6
 801bb10:	4639      	mov	r1, r7
 801bb12:	f7e4 fbc9 	bl	80002a8 <__aeabi_dsub>
 801bb16:	a336      	add	r3, pc, #216	; (adr r3, 801bbf0 <__ieee754_pow+0x728>)
 801bb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb1c:	f7e4 fd7c 	bl	8000618 <__aeabi_dmul>
 801bb20:	a335      	add	r3, pc, #212	; (adr r3, 801bbf8 <__ieee754_pow+0x730>)
 801bb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb26:	4606      	mov	r6, r0
 801bb28:	460f      	mov	r7, r1
 801bb2a:	4620      	mov	r0, r4
 801bb2c:	4629      	mov	r1, r5
 801bb2e:	f7e4 fd73 	bl	8000618 <__aeabi_dmul>
 801bb32:	4602      	mov	r2, r0
 801bb34:	460b      	mov	r3, r1
 801bb36:	4630      	mov	r0, r6
 801bb38:	4639      	mov	r1, r7
 801bb3a:	f7e4 fbb7 	bl	80002ac <__adddf3>
 801bb3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bb40:	4b38      	ldr	r3, [pc, #224]	; (801bc24 <__ieee754_pow+0x75c>)
 801bb42:	4413      	add	r3, r2
 801bb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb48:	f7e4 fbb0 	bl	80002ac <__adddf3>
 801bb4c:	4682      	mov	sl, r0
 801bb4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bb50:	468b      	mov	fp, r1
 801bb52:	f7e4 fcf7 	bl	8000544 <__aeabi_i2d>
 801bb56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bb58:	4b33      	ldr	r3, [pc, #204]	; (801bc28 <__ieee754_pow+0x760>)
 801bb5a:	4413      	add	r3, r2
 801bb5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bb60:	4606      	mov	r6, r0
 801bb62:	460f      	mov	r7, r1
 801bb64:	4652      	mov	r2, sl
 801bb66:	465b      	mov	r3, fp
 801bb68:	ec51 0b18 	vmov	r0, r1, d8
 801bb6c:	f7e4 fb9e 	bl	80002ac <__adddf3>
 801bb70:	4642      	mov	r2, r8
 801bb72:	464b      	mov	r3, r9
 801bb74:	f7e4 fb9a 	bl	80002ac <__adddf3>
 801bb78:	4632      	mov	r2, r6
 801bb7a:	463b      	mov	r3, r7
 801bb7c:	f7e4 fb96 	bl	80002ac <__adddf3>
 801bb80:	9c04      	ldr	r4, [sp, #16]
 801bb82:	4632      	mov	r2, r6
 801bb84:	463b      	mov	r3, r7
 801bb86:	4620      	mov	r0, r4
 801bb88:	460d      	mov	r5, r1
 801bb8a:	f7e4 fb8d 	bl	80002a8 <__aeabi_dsub>
 801bb8e:	4642      	mov	r2, r8
 801bb90:	464b      	mov	r3, r9
 801bb92:	f7e4 fb89 	bl	80002a8 <__aeabi_dsub>
 801bb96:	ec53 2b18 	vmov	r2, r3, d8
 801bb9a:	f7e4 fb85 	bl	80002a8 <__aeabi_dsub>
 801bb9e:	4602      	mov	r2, r0
 801bba0:	460b      	mov	r3, r1
 801bba2:	4650      	mov	r0, sl
 801bba4:	4659      	mov	r1, fp
 801bba6:	e606      	b.n	801b7b6 <__ieee754_pow+0x2ee>
 801bba8:	2401      	movs	r4, #1
 801bbaa:	e6a0      	b.n	801b8ee <__ieee754_pow+0x426>
 801bbac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801bc00 <__ieee754_pow+0x738>
 801bbb0:	e60d      	b.n	801b7ce <__ieee754_pow+0x306>
 801bbb2:	bf00      	nop
 801bbb4:	f3af 8000 	nop.w
 801bbb8:	4a454eef 	.word	0x4a454eef
 801bbbc:	3fca7e28 	.word	0x3fca7e28
 801bbc0:	93c9db65 	.word	0x93c9db65
 801bbc4:	3fcd864a 	.word	0x3fcd864a
 801bbc8:	a91d4101 	.word	0xa91d4101
 801bbcc:	3fd17460 	.word	0x3fd17460
 801bbd0:	518f264d 	.word	0x518f264d
 801bbd4:	3fd55555 	.word	0x3fd55555
 801bbd8:	db6fabff 	.word	0xdb6fabff
 801bbdc:	3fdb6db6 	.word	0x3fdb6db6
 801bbe0:	33333303 	.word	0x33333303
 801bbe4:	3fe33333 	.word	0x3fe33333
 801bbe8:	e0000000 	.word	0xe0000000
 801bbec:	3feec709 	.word	0x3feec709
 801bbf0:	dc3a03fd 	.word	0xdc3a03fd
 801bbf4:	3feec709 	.word	0x3feec709
 801bbf8:	145b01f5 	.word	0x145b01f5
 801bbfc:	be3e2fe0 	.word	0xbe3e2fe0
 801bc00:	00000000 	.word	0x00000000
 801bc04:	3ff00000 	.word	0x3ff00000
 801bc08:	7ff00000 	.word	0x7ff00000
 801bc0c:	43400000 	.word	0x43400000
 801bc10:	0003988e 	.word	0x0003988e
 801bc14:	000bb679 	.word	0x000bb679
 801bc18:	0801ffe0 	.word	0x0801ffe0
 801bc1c:	3ff00000 	.word	0x3ff00000
 801bc20:	40080000 	.word	0x40080000
 801bc24:	08020000 	.word	0x08020000
 801bc28:	0801fff0 	.word	0x0801fff0
 801bc2c:	a3b5      	add	r3, pc, #724	; (adr r3, 801bf04 <__ieee754_pow+0xa3c>)
 801bc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc32:	4640      	mov	r0, r8
 801bc34:	4649      	mov	r1, r9
 801bc36:	f7e4 fb39 	bl	80002ac <__adddf3>
 801bc3a:	4622      	mov	r2, r4
 801bc3c:	ec41 0b1a 	vmov	d10, r0, r1
 801bc40:	462b      	mov	r3, r5
 801bc42:	4630      	mov	r0, r6
 801bc44:	4639      	mov	r1, r7
 801bc46:	f7e4 fb2f 	bl	80002a8 <__aeabi_dsub>
 801bc4a:	4602      	mov	r2, r0
 801bc4c:	460b      	mov	r3, r1
 801bc4e:	ec51 0b1a 	vmov	r0, r1, d10
 801bc52:	f7e4 ff71 	bl	8000b38 <__aeabi_dcmpgt>
 801bc56:	2800      	cmp	r0, #0
 801bc58:	f47f adf8 	bne.w	801b84c <__ieee754_pow+0x384>
 801bc5c:	4aa4      	ldr	r2, [pc, #656]	; (801bef0 <__ieee754_pow+0xa28>)
 801bc5e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bc62:	4293      	cmp	r3, r2
 801bc64:	f340 810b 	ble.w	801be7e <__ieee754_pow+0x9b6>
 801bc68:	151b      	asrs	r3, r3, #20
 801bc6a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801bc6e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801bc72:	fa4a f303 	asr.w	r3, sl, r3
 801bc76:	445b      	add	r3, fp
 801bc78:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801bc7c:	4e9d      	ldr	r6, [pc, #628]	; (801bef4 <__ieee754_pow+0xa2c>)
 801bc7e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801bc82:	4116      	asrs	r6, r2
 801bc84:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801bc88:	2000      	movs	r0, #0
 801bc8a:	ea23 0106 	bic.w	r1, r3, r6
 801bc8e:	f1c2 0214 	rsb	r2, r2, #20
 801bc92:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801bc96:	fa4a fa02 	asr.w	sl, sl, r2
 801bc9a:	f1bb 0f00 	cmp.w	fp, #0
 801bc9e:	4602      	mov	r2, r0
 801bca0:	460b      	mov	r3, r1
 801bca2:	4620      	mov	r0, r4
 801bca4:	4629      	mov	r1, r5
 801bca6:	bfb8      	it	lt
 801bca8:	f1ca 0a00 	rsblt	sl, sl, #0
 801bcac:	f7e4 fafc 	bl	80002a8 <__aeabi_dsub>
 801bcb0:	ec41 0b19 	vmov	d9, r0, r1
 801bcb4:	4642      	mov	r2, r8
 801bcb6:	464b      	mov	r3, r9
 801bcb8:	ec51 0b19 	vmov	r0, r1, d9
 801bcbc:	f7e4 faf6 	bl	80002ac <__adddf3>
 801bcc0:	2400      	movs	r4, #0
 801bcc2:	a379      	add	r3, pc, #484	; (adr r3, 801bea8 <__ieee754_pow+0x9e0>)
 801bcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcc8:	4620      	mov	r0, r4
 801bcca:	460d      	mov	r5, r1
 801bccc:	f7e4 fca4 	bl	8000618 <__aeabi_dmul>
 801bcd0:	ec53 2b19 	vmov	r2, r3, d9
 801bcd4:	4606      	mov	r6, r0
 801bcd6:	460f      	mov	r7, r1
 801bcd8:	4620      	mov	r0, r4
 801bcda:	4629      	mov	r1, r5
 801bcdc:	f7e4 fae4 	bl	80002a8 <__aeabi_dsub>
 801bce0:	4602      	mov	r2, r0
 801bce2:	460b      	mov	r3, r1
 801bce4:	4640      	mov	r0, r8
 801bce6:	4649      	mov	r1, r9
 801bce8:	f7e4 fade 	bl	80002a8 <__aeabi_dsub>
 801bcec:	a370      	add	r3, pc, #448	; (adr r3, 801beb0 <__ieee754_pow+0x9e8>)
 801bcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcf2:	f7e4 fc91 	bl	8000618 <__aeabi_dmul>
 801bcf6:	a370      	add	r3, pc, #448	; (adr r3, 801beb8 <__ieee754_pow+0x9f0>)
 801bcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcfc:	4680      	mov	r8, r0
 801bcfe:	4689      	mov	r9, r1
 801bd00:	4620      	mov	r0, r4
 801bd02:	4629      	mov	r1, r5
 801bd04:	f7e4 fc88 	bl	8000618 <__aeabi_dmul>
 801bd08:	4602      	mov	r2, r0
 801bd0a:	460b      	mov	r3, r1
 801bd0c:	4640      	mov	r0, r8
 801bd0e:	4649      	mov	r1, r9
 801bd10:	f7e4 facc 	bl	80002ac <__adddf3>
 801bd14:	4604      	mov	r4, r0
 801bd16:	460d      	mov	r5, r1
 801bd18:	4602      	mov	r2, r0
 801bd1a:	460b      	mov	r3, r1
 801bd1c:	4630      	mov	r0, r6
 801bd1e:	4639      	mov	r1, r7
 801bd20:	f7e4 fac4 	bl	80002ac <__adddf3>
 801bd24:	4632      	mov	r2, r6
 801bd26:	463b      	mov	r3, r7
 801bd28:	4680      	mov	r8, r0
 801bd2a:	4689      	mov	r9, r1
 801bd2c:	f7e4 fabc 	bl	80002a8 <__aeabi_dsub>
 801bd30:	4602      	mov	r2, r0
 801bd32:	460b      	mov	r3, r1
 801bd34:	4620      	mov	r0, r4
 801bd36:	4629      	mov	r1, r5
 801bd38:	f7e4 fab6 	bl	80002a8 <__aeabi_dsub>
 801bd3c:	4642      	mov	r2, r8
 801bd3e:	4606      	mov	r6, r0
 801bd40:	460f      	mov	r7, r1
 801bd42:	464b      	mov	r3, r9
 801bd44:	4640      	mov	r0, r8
 801bd46:	4649      	mov	r1, r9
 801bd48:	f7e4 fc66 	bl	8000618 <__aeabi_dmul>
 801bd4c:	a35c      	add	r3, pc, #368	; (adr r3, 801bec0 <__ieee754_pow+0x9f8>)
 801bd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd52:	4604      	mov	r4, r0
 801bd54:	460d      	mov	r5, r1
 801bd56:	f7e4 fc5f 	bl	8000618 <__aeabi_dmul>
 801bd5a:	a35b      	add	r3, pc, #364	; (adr r3, 801bec8 <__ieee754_pow+0xa00>)
 801bd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd60:	f7e4 faa2 	bl	80002a8 <__aeabi_dsub>
 801bd64:	4622      	mov	r2, r4
 801bd66:	462b      	mov	r3, r5
 801bd68:	f7e4 fc56 	bl	8000618 <__aeabi_dmul>
 801bd6c:	a358      	add	r3, pc, #352	; (adr r3, 801bed0 <__ieee754_pow+0xa08>)
 801bd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd72:	f7e4 fa9b 	bl	80002ac <__adddf3>
 801bd76:	4622      	mov	r2, r4
 801bd78:	462b      	mov	r3, r5
 801bd7a:	f7e4 fc4d 	bl	8000618 <__aeabi_dmul>
 801bd7e:	a356      	add	r3, pc, #344	; (adr r3, 801bed8 <__ieee754_pow+0xa10>)
 801bd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd84:	f7e4 fa90 	bl	80002a8 <__aeabi_dsub>
 801bd88:	4622      	mov	r2, r4
 801bd8a:	462b      	mov	r3, r5
 801bd8c:	f7e4 fc44 	bl	8000618 <__aeabi_dmul>
 801bd90:	a353      	add	r3, pc, #332	; (adr r3, 801bee0 <__ieee754_pow+0xa18>)
 801bd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd96:	f7e4 fa89 	bl	80002ac <__adddf3>
 801bd9a:	4622      	mov	r2, r4
 801bd9c:	462b      	mov	r3, r5
 801bd9e:	f7e4 fc3b 	bl	8000618 <__aeabi_dmul>
 801bda2:	4602      	mov	r2, r0
 801bda4:	460b      	mov	r3, r1
 801bda6:	4640      	mov	r0, r8
 801bda8:	4649      	mov	r1, r9
 801bdaa:	f7e4 fa7d 	bl	80002a8 <__aeabi_dsub>
 801bdae:	4604      	mov	r4, r0
 801bdb0:	460d      	mov	r5, r1
 801bdb2:	4602      	mov	r2, r0
 801bdb4:	460b      	mov	r3, r1
 801bdb6:	4640      	mov	r0, r8
 801bdb8:	4649      	mov	r1, r9
 801bdba:	f7e4 fc2d 	bl	8000618 <__aeabi_dmul>
 801bdbe:	2200      	movs	r2, #0
 801bdc0:	ec41 0b19 	vmov	d9, r0, r1
 801bdc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801bdc8:	4620      	mov	r0, r4
 801bdca:	4629      	mov	r1, r5
 801bdcc:	f7e4 fa6c 	bl	80002a8 <__aeabi_dsub>
 801bdd0:	4602      	mov	r2, r0
 801bdd2:	460b      	mov	r3, r1
 801bdd4:	ec51 0b19 	vmov	r0, r1, d9
 801bdd8:	f7e4 fd48 	bl	800086c <__aeabi_ddiv>
 801bddc:	4632      	mov	r2, r6
 801bdde:	4604      	mov	r4, r0
 801bde0:	460d      	mov	r5, r1
 801bde2:	463b      	mov	r3, r7
 801bde4:	4640      	mov	r0, r8
 801bde6:	4649      	mov	r1, r9
 801bde8:	f7e4 fc16 	bl	8000618 <__aeabi_dmul>
 801bdec:	4632      	mov	r2, r6
 801bdee:	463b      	mov	r3, r7
 801bdf0:	f7e4 fa5c 	bl	80002ac <__adddf3>
 801bdf4:	4602      	mov	r2, r0
 801bdf6:	460b      	mov	r3, r1
 801bdf8:	4620      	mov	r0, r4
 801bdfa:	4629      	mov	r1, r5
 801bdfc:	f7e4 fa54 	bl	80002a8 <__aeabi_dsub>
 801be00:	4642      	mov	r2, r8
 801be02:	464b      	mov	r3, r9
 801be04:	f7e4 fa50 	bl	80002a8 <__aeabi_dsub>
 801be08:	460b      	mov	r3, r1
 801be0a:	4602      	mov	r2, r0
 801be0c:	493a      	ldr	r1, [pc, #232]	; (801bef8 <__ieee754_pow+0xa30>)
 801be0e:	2000      	movs	r0, #0
 801be10:	f7e4 fa4a 	bl	80002a8 <__aeabi_dsub>
 801be14:	e9cd 0100 	strd	r0, r1, [sp]
 801be18:	9b01      	ldr	r3, [sp, #4]
 801be1a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801be1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801be22:	da2f      	bge.n	801be84 <__ieee754_pow+0x9bc>
 801be24:	4650      	mov	r0, sl
 801be26:	ed9d 0b00 	vldr	d0, [sp]
 801be2a:	f000 f9c1 	bl	801c1b0 <scalbn>
 801be2e:	ec51 0b10 	vmov	r0, r1, d0
 801be32:	ec53 2b18 	vmov	r2, r3, d8
 801be36:	f7ff bbe0 	b.w	801b5fa <__ieee754_pow+0x132>
 801be3a:	4b30      	ldr	r3, [pc, #192]	; (801befc <__ieee754_pow+0xa34>)
 801be3c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801be40:	429e      	cmp	r6, r3
 801be42:	f77f af0b 	ble.w	801bc5c <__ieee754_pow+0x794>
 801be46:	4b2e      	ldr	r3, [pc, #184]	; (801bf00 <__ieee754_pow+0xa38>)
 801be48:	440b      	add	r3, r1
 801be4a:	4303      	orrs	r3, r0
 801be4c:	d00b      	beq.n	801be66 <__ieee754_pow+0x99e>
 801be4e:	a326      	add	r3, pc, #152	; (adr r3, 801bee8 <__ieee754_pow+0xa20>)
 801be50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be54:	ec51 0b18 	vmov	r0, r1, d8
 801be58:	f7e4 fbde 	bl	8000618 <__aeabi_dmul>
 801be5c:	a322      	add	r3, pc, #136	; (adr r3, 801bee8 <__ieee754_pow+0xa20>)
 801be5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be62:	f7ff bbca 	b.w	801b5fa <__ieee754_pow+0x132>
 801be66:	4622      	mov	r2, r4
 801be68:	462b      	mov	r3, r5
 801be6a:	f7e4 fa1d 	bl	80002a8 <__aeabi_dsub>
 801be6e:	4642      	mov	r2, r8
 801be70:	464b      	mov	r3, r9
 801be72:	f7e4 fe57 	bl	8000b24 <__aeabi_dcmpge>
 801be76:	2800      	cmp	r0, #0
 801be78:	f43f aef0 	beq.w	801bc5c <__ieee754_pow+0x794>
 801be7c:	e7e7      	b.n	801be4e <__ieee754_pow+0x986>
 801be7e:	f04f 0a00 	mov.w	sl, #0
 801be82:	e717      	b.n	801bcb4 <__ieee754_pow+0x7ec>
 801be84:	e9dd 0100 	ldrd	r0, r1, [sp]
 801be88:	4619      	mov	r1, r3
 801be8a:	e7d2      	b.n	801be32 <__ieee754_pow+0x96a>
 801be8c:	491a      	ldr	r1, [pc, #104]	; (801bef8 <__ieee754_pow+0xa30>)
 801be8e:	2000      	movs	r0, #0
 801be90:	f7ff bb9e 	b.w	801b5d0 <__ieee754_pow+0x108>
 801be94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801be98:	f7ff bb9a 	b.w	801b5d0 <__ieee754_pow+0x108>
 801be9c:	9000      	str	r0, [sp, #0]
 801be9e:	f7ff bb76 	b.w	801b58e <__ieee754_pow+0xc6>
 801bea2:	2100      	movs	r1, #0
 801bea4:	f7ff bb60 	b.w	801b568 <__ieee754_pow+0xa0>
 801bea8:	00000000 	.word	0x00000000
 801beac:	3fe62e43 	.word	0x3fe62e43
 801beb0:	fefa39ef 	.word	0xfefa39ef
 801beb4:	3fe62e42 	.word	0x3fe62e42
 801beb8:	0ca86c39 	.word	0x0ca86c39
 801bebc:	be205c61 	.word	0xbe205c61
 801bec0:	72bea4d0 	.word	0x72bea4d0
 801bec4:	3e663769 	.word	0x3e663769
 801bec8:	c5d26bf1 	.word	0xc5d26bf1
 801becc:	3ebbbd41 	.word	0x3ebbbd41
 801bed0:	af25de2c 	.word	0xaf25de2c
 801bed4:	3f11566a 	.word	0x3f11566a
 801bed8:	16bebd93 	.word	0x16bebd93
 801bedc:	3f66c16c 	.word	0x3f66c16c
 801bee0:	5555553e 	.word	0x5555553e
 801bee4:	3fc55555 	.word	0x3fc55555
 801bee8:	c2f8f359 	.word	0xc2f8f359
 801beec:	01a56e1f 	.word	0x01a56e1f
 801bef0:	3fe00000 	.word	0x3fe00000
 801bef4:	000fffff 	.word	0x000fffff
 801bef8:	3ff00000 	.word	0x3ff00000
 801befc:	4090cbff 	.word	0x4090cbff
 801bf00:	3f6f3400 	.word	0x3f6f3400
 801bf04:	652b82fe 	.word	0x652b82fe
 801bf08:	3c971547 	.word	0x3c971547

0801bf0c <__ieee754_sqrt>:
 801bf0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf10:	ec55 4b10 	vmov	r4, r5, d0
 801bf14:	4e56      	ldr	r6, [pc, #344]	; (801c070 <__ieee754_sqrt+0x164>)
 801bf16:	43ae      	bics	r6, r5
 801bf18:	ee10 0a10 	vmov	r0, s0
 801bf1c:	ee10 3a10 	vmov	r3, s0
 801bf20:	4629      	mov	r1, r5
 801bf22:	462a      	mov	r2, r5
 801bf24:	d110      	bne.n	801bf48 <__ieee754_sqrt+0x3c>
 801bf26:	ee10 2a10 	vmov	r2, s0
 801bf2a:	462b      	mov	r3, r5
 801bf2c:	f7e4 fb74 	bl	8000618 <__aeabi_dmul>
 801bf30:	4602      	mov	r2, r0
 801bf32:	460b      	mov	r3, r1
 801bf34:	4620      	mov	r0, r4
 801bf36:	4629      	mov	r1, r5
 801bf38:	f7e4 f9b8 	bl	80002ac <__adddf3>
 801bf3c:	4604      	mov	r4, r0
 801bf3e:	460d      	mov	r5, r1
 801bf40:	ec45 4b10 	vmov	d0, r4, r5
 801bf44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf48:	2d00      	cmp	r5, #0
 801bf4a:	dc10      	bgt.n	801bf6e <__ieee754_sqrt+0x62>
 801bf4c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801bf50:	4330      	orrs	r0, r6
 801bf52:	d0f5      	beq.n	801bf40 <__ieee754_sqrt+0x34>
 801bf54:	b15d      	cbz	r5, 801bf6e <__ieee754_sqrt+0x62>
 801bf56:	ee10 2a10 	vmov	r2, s0
 801bf5a:	462b      	mov	r3, r5
 801bf5c:	ee10 0a10 	vmov	r0, s0
 801bf60:	f7e4 f9a2 	bl	80002a8 <__aeabi_dsub>
 801bf64:	4602      	mov	r2, r0
 801bf66:	460b      	mov	r3, r1
 801bf68:	f7e4 fc80 	bl	800086c <__aeabi_ddiv>
 801bf6c:	e7e6      	b.n	801bf3c <__ieee754_sqrt+0x30>
 801bf6e:	1509      	asrs	r1, r1, #20
 801bf70:	d076      	beq.n	801c060 <__ieee754_sqrt+0x154>
 801bf72:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801bf76:	07ce      	lsls	r6, r1, #31
 801bf78:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801bf7c:	bf5e      	ittt	pl
 801bf7e:	0fda      	lsrpl	r2, r3, #31
 801bf80:	005b      	lslpl	r3, r3, #1
 801bf82:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801bf86:	0fda      	lsrs	r2, r3, #31
 801bf88:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801bf8c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801bf90:	2000      	movs	r0, #0
 801bf92:	106d      	asrs	r5, r5, #1
 801bf94:	005b      	lsls	r3, r3, #1
 801bf96:	f04f 0e16 	mov.w	lr, #22
 801bf9a:	4684      	mov	ip, r0
 801bf9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801bfa0:	eb0c 0401 	add.w	r4, ip, r1
 801bfa4:	4294      	cmp	r4, r2
 801bfa6:	bfde      	ittt	le
 801bfa8:	1b12      	suble	r2, r2, r4
 801bfaa:	eb04 0c01 	addle.w	ip, r4, r1
 801bfae:	1840      	addle	r0, r0, r1
 801bfb0:	0052      	lsls	r2, r2, #1
 801bfb2:	f1be 0e01 	subs.w	lr, lr, #1
 801bfb6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801bfba:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801bfbe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801bfc2:	d1ed      	bne.n	801bfa0 <__ieee754_sqrt+0x94>
 801bfc4:	4671      	mov	r1, lr
 801bfc6:	2720      	movs	r7, #32
 801bfc8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801bfcc:	4562      	cmp	r2, ip
 801bfce:	eb04 060e 	add.w	r6, r4, lr
 801bfd2:	dc02      	bgt.n	801bfda <__ieee754_sqrt+0xce>
 801bfd4:	d113      	bne.n	801bffe <__ieee754_sqrt+0xf2>
 801bfd6:	429e      	cmp	r6, r3
 801bfd8:	d811      	bhi.n	801bffe <__ieee754_sqrt+0xf2>
 801bfda:	2e00      	cmp	r6, #0
 801bfdc:	eb06 0e04 	add.w	lr, r6, r4
 801bfe0:	da43      	bge.n	801c06a <__ieee754_sqrt+0x15e>
 801bfe2:	f1be 0f00 	cmp.w	lr, #0
 801bfe6:	db40      	blt.n	801c06a <__ieee754_sqrt+0x15e>
 801bfe8:	f10c 0801 	add.w	r8, ip, #1
 801bfec:	eba2 020c 	sub.w	r2, r2, ip
 801bff0:	429e      	cmp	r6, r3
 801bff2:	bf88      	it	hi
 801bff4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801bff8:	1b9b      	subs	r3, r3, r6
 801bffa:	4421      	add	r1, r4
 801bffc:	46c4      	mov	ip, r8
 801bffe:	0052      	lsls	r2, r2, #1
 801c000:	3f01      	subs	r7, #1
 801c002:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801c006:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801c00a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801c00e:	d1dd      	bne.n	801bfcc <__ieee754_sqrt+0xc0>
 801c010:	4313      	orrs	r3, r2
 801c012:	d006      	beq.n	801c022 <__ieee754_sqrt+0x116>
 801c014:	1c4c      	adds	r4, r1, #1
 801c016:	bf13      	iteet	ne
 801c018:	3101      	addne	r1, #1
 801c01a:	3001      	addeq	r0, #1
 801c01c:	4639      	moveq	r1, r7
 801c01e:	f021 0101 	bicne.w	r1, r1, #1
 801c022:	1043      	asrs	r3, r0, #1
 801c024:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801c028:	0849      	lsrs	r1, r1, #1
 801c02a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801c02e:	07c2      	lsls	r2, r0, #31
 801c030:	bf48      	it	mi
 801c032:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801c036:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801c03a:	460c      	mov	r4, r1
 801c03c:	463d      	mov	r5, r7
 801c03e:	e77f      	b.n	801bf40 <__ieee754_sqrt+0x34>
 801c040:	0ada      	lsrs	r2, r3, #11
 801c042:	3815      	subs	r0, #21
 801c044:	055b      	lsls	r3, r3, #21
 801c046:	2a00      	cmp	r2, #0
 801c048:	d0fa      	beq.n	801c040 <__ieee754_sqrt+0x134>
 801c04a:	02d7      	lsls	r7, r2, #11
 801c04c:	d50a      	bpl.n	801c064 <__ieee754_sqrt+0x158>
 801c04e:	f1c1 0420 	rsb	r4, r1, #32
 801c052:	fa23 f404 	lsr.w	r4, r3, r4
 801c056:	1e4d      	subs	r5, r1, #1
 801c058:	408b      	lsls	r3, r1
 801c05a:	4322      	orrs	r2, r4
 801c05c:	1b41      	subs	r1, r0, r5
 801c05e:	e788      	b.n	801bf72 <__ieee754_sqrt+0x66>
 801c060:	4608      	mov	r0, r1
 801c062:	e7f0      	b.n	801c046 <__ieee754_sqrt+0x13a>
 801c064:	0052      	lsls	r2, r2, #1
 801c066:	3101      	adds	r1, #1
 801c068:	e7ef      	b.n	801c04a <__ieee754_sqrt+0x13e>
 801c06a:	46e0      	mov	r8, ip
 801c06c:	e7be      	b.n	801bfec <__ieee754_sqrt+0xe0>
 801c06e:	bf00      	nop
 801c070:	7ff00000 	.word	0x7ff00000

0801c074 <fabs>:
 801c074:	ec51 0b10 	vmov	r0, r1, d0
 801c078:	ee10 2a10 	vmov	r2, s0
 801c07c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c080:	ec43 2b10 	vmov	d0, r2, r3
 801c084:	4770      	bx	lr

0801c086 <finite>:
 801c086:	b082      	sub	sp, #8
 801c088:	ed8d 0b00 	vstr	d0, [sp]
 801c08c:	9801      	ldr	r0, [sp, #4]
 801c08e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801c092:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801c096:	0fc0      	lsrs	r0, r0, #31
 801c098:	b002      	add	sp, #8
 801c09a:	4770      	bx	lr

0801c09c <rint>:
 801c09c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c09e:	ec51 0b10 	vmov	r0, r1, d0
 801c0a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c0a6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801c0aa:	2e13      	cmp	r6, #19
 801c0ac:	ee10 4a10 	vmov	r4, s0
 801c0b0:	460b      	mov	r3, r1
 801c0b2:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801c0b6:	dc58      	bgt.n	801c16a <rint+0xce>
 801c0b8:	2e00      	cmp	r6, #0
 801c0ba:	da2b      	bge.n	801c114 <rint+0x78>
 801c0bc:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801c0c0:	4302      	orrs	r2, r0
 801c0c2:	d023      	beq.n	801c10c <rint+0x70>
 801c0c4:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801c0c8:	4302      	orrs	r2, r0
 801c0ca:	4254      	negs	r4, r2
 801c0cc:	4314      	orrs	r4, r2
 801c0ce:	0c4b      	lsrs	r3, r1, #17
 801c0d0:	0b24      	lsrs	r4, r4, #12
 801c0d2:	045b      	lsls	r3, r3, #17
 801c0d4:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801c0d8:	ea44 0103 	orr.w	r1, r4, r3
 801c0dc:	4b32      	ldr	r3, [pc, #200]	; (801c1a8 <rint+0x10c>)
 801c0de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c0e2:	e9d3 6700 	ldrd	r6, r7, [r3]
 801c0e6:	4602      	mov	r2, r0
 801c0e8:	460b      	mov	r3, r1
 801c0ea:	4630      	mov	r0, r6
 801c0ec:	4639      	mov	r1, r7
 801c0ee:	f7e4 f8dd 	bl	80002ac <__adddf3>
 801c0f2:	e9cd 0100 	strd	r0, r1, [sp]
 801c0f6:	463b      	mov	r3, r7
 801c0f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c0fc:	4632      	mov	r2, r6
 801c0fe:	f7e4 f8d3 	bl	80002a8 <__aeabi_dsub>
 801c102:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c106:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801c10a:	4639      	mov	r1, r7
 801c10c:	ec41 0b10 	vmov	d0, r0, r1
 801c110:	b003      	add	sp, #12
 801c112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c114:	4a25      	ldr	r2, [pc, #148]	; (801c1ac <rint+0x110>)
 801c116:	4132      	asrs	r2, r6
 801c118:	ea01 0702 	and.w	r7, r1, r2
 801c11c:	4307      	orrs	r7, r0
 801c11e:	d0f5      	beq.n	801c10c <rint+0x70>
 801c120:	0851      	lsrs	r1, r2, #1
 801c122:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801c126:	4314      	orrs	r4, r2
 801c128:	d00c      	beq.n	801c144 <rint+0xa8>
 801c12a:	ea23 0201 	bic.w	r2, r3, r1
 801c12e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801c132:	2e13      	cmp	r6, #19
 801c134:	fa43 f606 	asr.w	r6, r3, r6
 801c138:	bf0c      	ite	eq
 801c13a:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801c13e:	2400      	movne	r4, #0
 801c140:	ea42 0306 	orr.w	r3, r2, r6
 801c144:	4918      	ldr	r1, [pc, #96]	; (801c1a8 <rint+0x10c>)
 801c146:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801c14a:	4622      	mov	r2, r4
 801c14c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c150:	4620      	mov	r0, r4
 801c152:	4629      	mov	r1, r5
 801c154:	f7e4 f8aa 	bl	80002ac <__adddf3>
 801c158:	e9cd 0100 	strd	r0, r1, [sp]
 801c15c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c160:	4622      	mov	r2, r4
 801c162:	462b      	mov	r3, r5
 801c164:	f7e4 f8a0 	bl	80002a8 <__aeabi_dsub>
 801c168:	e7d0      	b.n	801c10c <rint+0x70>
 801c16a:	2e33      	cmp	r6, #51	; 0x33
 801c16c:	dd07      	ble.n	801c17e <rint+0xe2>
 801c16e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c172:	d1cb      	bne.n	801c10c <rint+0x70>
 801c174:	ee10 2a10 	vmov	r2, s0
 801c178:	f7e4 f898 	bl	80002ac <__adddf3>
 801c17c:	e7c6      	b.n	801c10c <rint+0x70>
 801c17e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801c182:	f04f 36ff 	mov.w	r6, #4294967295
 801c186:	40d6      	lsrs	r6, r2
 801c188:	4230      	tst	r0, r6
 801c18a:	d0bf      	beq.n	801c10c <rint+0x70>
 801c18c:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801c190:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801c194:	bf1f      	itttt	ne
 801c196:	ea24 0101 	bicne.w	r1, r4, r1
 801c19a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801c19e:	fa44 f202 	asrne.w	r2, r4, r2
 801c1a2:	ea41 0402 	orrne.w	r4, r1, r2
 801c1a6:	e7cd      	b.n	801c144 <rint+0xa8>
 801c1a8:	08020010 	.word	0x08020010
 801c1ac:	000fffff 	.word	0x000fffff

0801c1b0 <scalbn>:
 801c1b0:	b570      	push	{r4, r5, r6, lr}
 801c1b2:	ec55 4b10 	vmov	r4, r5, d0
 801c1b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801c1ba:	4606      	mov	r6, r0
 801c1bc:	462b      	mov	r3, r5
 801c1be:	b99a      	cbnz	r2, 801c1e8 <scalbn+0x38>
 801c1c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c1c4:	4323      	orrs	r3, r4
 801c1c6:	d036      	beq.n	801c236 <scalbn+0x86>
 801c1c8:	4b39      	ldr	r3, [pc, #228]	; (801c2b0 <scalbn+0x100>)
 801c1ca:	4629      	mov	r1, r5
 801c1cc:	ee10 0a10 	vmov	r0, s0
 801c1d0:	2200      	movs	r2, #0
 801c1d2:	f7e4 fa21 	bl	8000618 <__aeabi_dmul>
 801c1d6:	4b37      	ldr	r3, [pc, #220]	; (801c2b4 <scalbn+0x104>)
 801c1d8:	429e      	cmp	r6, r3
 801c1da:	4604      	mov	r4, r0
 801c1dc:	460d      	mov	r5, r1
 801c1de:	da10      	bge.n	801c202 <scalbn+0x52>
 801c1e0:	a32b      	add	r3, pc, #172	; (adr r3, 801c290 <scalbn+0xe0>)
 801c1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1e6:	e03a      	b.n	801c25e <scalbn+0xae>
 801c1e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801c1ec:	428a      	cmp	r2, r1
 801c1ee:	d10c      	bne.n	801c20a <scalbn+0x5a>
 801c1f0:	ee10 2a10 	vmov	r2, s0
 801c1f4:	4620      	mov	r0, r4
 801c1f6:	4629      	mov	r1, r5
 801c1f8:	f7e4 f858 	bl	80002ac <__adddf3>
 801c1fc:	4604      	mov	r4, r0
 801c1fe:	460d      	mov	r5, r1
 801c200:	e019      	b.n	801c236 <scalbn+0x86>
 801c202:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c206:	460b      	mov	r3, r1
 801c208:	3a36      	subs	r2, #54	; 0x36
 801c20a:	4432      	add	r2, r6
 801c20c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801c210:	428a      	cmp	r2, r1
 801c212:	dd08      	ble.n	801c226 <scalbn+0x76>
 801c214:	2d00      	cmp	r5, #0
 801c216:	a120      	add	r1, pc, #128	; (adr r1, 801c298 <scalbn+0xe8>)
 801c218:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c21c:	da1c      	bge.n	801c258 <scalbn+0xa8>
 801c21e:	a120      	add	r1, pc, #128	; (adr r1, 801c2a0 <scalbn+0xf0>)
 801c220:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c224:	e018      	b.n	801c258 <scalbn+0xa8>
 801c226:	2a00      	cmp	r2, #0
 801c228:	dd08      	ble.n	801c23c <scalbn+0x8c>
 801c22a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c22e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c232:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c236:	ec45 4b10 	vmov	d0, r4, r5
 801c23a:	bd70      	pop	{r4, r5, r6, pc}
 801c23c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801c240:	da19      	bge.n	801c276 <scalbn+0xc6>
 801c242:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c246:	429e      	cmp	r6, r3
 801c248:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801c24c:	dd0a      	ble.n	801c264 <scalbn+0xb4>
 801c24e:	a112      	add	r1, pc, #72	; (adr r1, 801c298 <scalbn+0xe8>)
 801c250:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c254:	2b00      	cmp	r3, #0
 801c256:	d1e2      	bne.n	801c21e <scalbn+0x6e>
 801c258:	a30f      	add	r3, pc, #60	; (adr r3, 801c298 <scalbn+0xe8>)
 801c25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c25e:	f7e4 f9db 	bl	8000618 <__aeabi_dmul>
 801c262:	e7cb      	b.n	801c1fc <scalbn+0x4c>
 801c264:	a10a      	add	r1, pc, #40	; (adr r1, 801c290 <scalbn+0xe0>)
 801c266:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c26a:	2b00      	cmp	r3, #0
 801c26c:	d0b8      	beq.n	801c1e0 <scalbn+0x30>
 801c26e:	a10e      	add	r1, pc, #56	; (adr r1, 801c2a8 <scalbn+0xf8>)
 801c270:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c274:	e7b4      	b.n	801c1e0 <scalbn+0x30>
 801c276:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c27a:	3236      	adds	r2, #54	; 0x36
 801c27c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c280:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801c284:	4620      	mov	r0, r4
 801c286:	4b0c      	ldr	r3, [pc, #48]	; (801c2b8 <scalbn+0x108>)
 801c288:	2200      	movs	r2, #0
 801c28a:	e7e8      	b.n	801c25e <scalbn+0xae>
 801c28c:	f3af 8000 	nop.w
 801c290:	c2f8f359 	.word	0xc2f8f359
 801c294:	01a56e1f 	.word	0x01a56e1f
 801c298:	8800759c 	.word	0x8800759c
 801c29c:	7e37e43c 	.word	0x7e37e43c
 801c2a0:	8800759c 	.word	0x8800759c
 801c2a4:	fe37e43c 	.word	0xfe37e43c
 801c2a8:	c2f8f359 	.word	0xc2f8f359
 801c2ac:	81a56e1f 	.word	0x81a56e1f
 801c2b0:	43500000 	.word	0x43500000
 801c2b4:	ffff3cb0 	.word	0xffff3cb0
 801c2b8:	3c900000 	.word	0x3c900000

0801c2bc <_init>:
 801c2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2be:	bf00      	nop
 801c2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c2c2:	bc08      	pop	{r3}
 801c2c4:	469e      	mov	lr, r3
 801c2c6:	4770      	bx	lr

0801c2c8 <_fini>:
 801c2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2ca:	bf00      	nop
 801c2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c2ce:	bc08      	pop	{r3}
 801c2d0:	469e      	mov	lr, r3
 801c2d2:	4770      	bx	lr
