
MCU_Base_Firmware_CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001884c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036f8  080189e0  080189e0  000289e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c0d8  0801c0d8  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  0801c0d8  0801c0d8  0002c0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c0e0  0801c0e0  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c0e0  0801c0e0  0002c0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c0e4  0801c0e4  0002c0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0801c0e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000687c  200001f8  0801c2e0  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20006a74  0801c2e0  00036a74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006732d  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008b0d  00000000  00000000  00097555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020e8  00000000  00000000  000a0068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fa8  00000000  00000000  000a2150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035866  00000000  00000000  000a40f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003aef1  00000000  00000000  000d995e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2d09  00000000  00000000  0011484f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00207558  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099b4  00000000  00000000  002075ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080189c4 	.word	0x080189c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	080189c4 	.word	0x080189c4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ed2:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000ed4:	4a21      	ldr	r2, [pc, #132]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000ed6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000eda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ede:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000f02:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <MX_ADC1_Init+0xa0>)
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000f22:	f003 fa0d 	bl	8004340 <HAL_ADC_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f2c:	f001 ff2e 	bl	8002d8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f30:	2303      	movs	r3, #3
 8000f32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000f38:	2305      	movs	r3, #5
 8000f3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000f42:	f003 fa41 	bl	80043c8 <HAL_ADC_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f4c:	f001 ff1e 	bl	8002d8c <Error_Handler>
  }

}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000528 	.word	0x20000528
 8000f5c:	40012000 	.word	0x40012000
 8000f60:	0f000001 	.word	0x0f000001

08000f64 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a17      	ldr	r2, [pc, #92]	; (8000fe0 <HAL_ADC_MspInit+0x7c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d127      	bne.n	8000fd6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <HAL_ADC_MspInit+0x80>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	4a15      	ldr	r2, [pc, #84]	; (8000fe4 <HAL_ADC_MspInit+0x80>)
 8000f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f94:	6453      	str	r3, [r2, #68]	; 0x44
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <HAL_ADC_MspInit+0x80>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <HAL_ADC_MspInit+0x80>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <HAL_ADC_MspInit+0x80>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <HAL_ADC_MspInit+0x80>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = AIN0_Pin|AIN1_Pin|AIN2_Pin|AIN3_Pin;
 8000fbe:	2378      	movs	r3, #120	; 0x78
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <HAL_ADC_MspInit+0x84>)
 8000fd2:	f004 fdbd 	bl	8005b50 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3728      	adds	r7, #40	; 0x28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40012000 	.word	0x40012000
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020000 	.word	0x40020000

08000fec <cJSON_strcasecmp>:
static const char *ep;

const char *cJSON_GetErrorPtr(void) {return ep;}

static int cJSON_strcasecmp(const char *s1,const char *s2)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
	if (!s1) return (s1==s2)?0:1;if (!s2) return 1;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d107      	bne.n	800100c <cJSON_strcasecmp+0x20>
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	429a      	cmp	r2, r3
 8001002:	bf14      	ite	ne
 8001004:	2301      	movne	r3, #1
 8001006:	2300      	moveq	r3, #0
 8001008:	b2db      	uxtb	r3, r3
 800100a:	e055      	b.n	80010b8 <cJSON_strcasecmp+0xcc>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10d      	bne.n	800102e <cJSON_strcasecmp+0x42>
 8001012:	2301      	movs	r3, #1
 8001014:	e050      	b.n	80010b8 <cJSON_strcasecmp+0xcc>
	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)	if(*s1 == 0)	return 0;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <cJSON_strcasecmp+0x36>
 800101e:	2300      	movs	r3, #0
 8001020:	e04a      	b.n	80010b8 <cJSON_strcasecmp+0xcc>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3301      	adds	r3, #1
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	3301      	adds	r3, #1
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	3301      	adds	r3, #1
 8001038:	4a22      	ldr	r2, [pc, #136]	; (80010c4 <cJSON_strcasecmp+0xd8>)
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	2b01      	cmp	r3, #1
 8001044:	d103      	bne.n	800104e <cJSON_strcasecmp+0x62>
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	f103 0220 	add.w	r2, r3, #32
 800104c:	e000      	b.n	8001050 <cJSON_strcasecmp+0x64>
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	73bb      	strb	r3, [r7, #14]
 8001056:	7bbb      	ldrb	r3, [r7, #14]
 8001058:	3301      	adds	r3, #1
 800105a:	491a      	ldr	r1, [pc, #104]	; (80010c4 <cJSON_strcasecmp+0xd8>)
 800105c:	440b      	add	r3, r1
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b01      	cmp	r3, #1
 8001066:	d102      	bne.n	800106e <cJSON_strcasecmp+0x82>
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	3320      	adds	r3, #32
 800106c:	e000      	b.n	8001070 <cJSON_strcasecmp+0x84>
 800106e:	7bbb      	ldrb	r3, [r7, #14]
 8001070:	429a      	cmp	r2, r3
 8001072:	d0d0      	beq.n	8001016 <cJSON_strcasecmp+0x2a>
	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	737b      	strb	r3, [r7, #13]
 800107a:	7b7b      	ldrb	r3, [r7, #13]
 800107c:	3301      	adds	r3, #1
 800107e:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <cJSON_strcasecmp+0xd8>)
 8001080:	4413      	add	r3, r2
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b01      	cmp	r3, #1
 800108a:	d103      	bne.n	8001094 <cJSON_strcasecmp+0xa8>
 800108c:	7b7b      	ldrb	r3, [r7, #13]
 800108e:	f103 0220 	add.w	r2, r3, #32
 8001092:	e000      	b.n	8001096 <cJSON_strcasecmp+0xaa>
 8001094:	7b7a      	ldrb	r2, [r7, #13]
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	733b      	strb	r3, [r7, #12]
 800109c:	7b3b      	ldrb	r3, [r7, #12]
 800109e:	3301      	adds	r3, #1
 80010a0:	4908      	ldr	r1, [pc, #32]	; (80010c4 <cJSON_strcasecmp+0xd8>)
 80010a2:	440b      	add	r3, r1
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d102      	bne.n	80010b4 <cJSON_strcasecmp+0xc8>
 80010ae:	7b3b      	ldrb	r3, [r7, #12]
 80010b0:	3320      	adds	r3, #32
 80010b2:	e000      	b.n	80010b6 <cJSON_strcasecmp+0xca>
 80010b4:	7b3b      	ldrb	r3, [r7, #12]
 80010b6:	1ad3      	subs	r3, r2, r3
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	0801bc56 	.word	0x0801bc56

080010c8 <cJSON_New_Item>:
	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:free;
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <cJSON_New_Item+0x2c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2028      	movs	r0, #40	; 0x28
 80010d4:	4798      	blx	r3
 80010d6:	6078      	str	r0, [r7, #4]
	if (node) memset(node,0,sizeof(cJSON));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d004      	beq.n	80010e8 <cJSON_New_Item+0x20>
 80010de:	2228      	movs	r2, #40	; 0x28
 80010e0:	2100      	movs	r1, #0
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f013 fd20 	bl	8014b28 <memset>
	return node;
 80010e8:	687b      	ldr	r3, [r7, #4]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000000 	.word	0x20000000

080010f8 <cJSON_Delete>:

/* Delete a cJSON structure. */
void cJSON_Delete(cJSON *c)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	cJSON *next;
	while (c)
 8001100:	e037      	b.n	8001172 <cJSON_Delete+0x7a>
	{
		next=c->next;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	60fb      	str	r3, [r7, #12]
		if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001110:	2b00      	cmp	r3, #0
 8001112:	d108      	bne.n	8001126 <cJSON_Delete+0x2e>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d004      	beq.n	8001126 <cJSON_Delete+0x2e>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ffe9 	bl	80010f8 <cJSON_Delete>
		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112e:	2b00      	cmp	r3, #0
 8001130:	d109      	bne.n	8001146 <cJSON_Delete+0x4e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d005      	beq.n	8001146 <cJSON_Delete+0x4e>
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <cJSON_Delete+0x8c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	6912      	ldr	r2, [r2, #16]
 8001142:	4610      	mov	r0, r2
 8001144:	4798      	blx	r3
		if (!(c->type&cJSON_StringIsConst) && c->string) cJSON_free(c->string);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800114e:	2b00      	cmp	r3, #0
 8001150:	d109      	bne.n	8001166 <cJSON_Delete+0x6e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d005      	beq.n	8001166 <cJSON_Delete+0x6e>
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <cJSON_Delete+0x8c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6a12      	ldr	r2, [r2, #32]
 8001162:	4610      	mov	r0, r2
 8001164:	4798      	blx	r3
		cJSON_free(c);
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <cJSON_Delete+0x8c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	4798      	blx	r3
		c=next;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	607b      	str	r3, [r7, #4]
	while (c)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1c4      	bne.n	8001102 <cJSON_Delete+0xa>
	}
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000004 	.word	0x20000004

08001188 <parse_number>:

/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item,const char *num)
{
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	4b83      	ldr	r3, [pc, #524]	; (80013b0 <parse_number+0x228>)
 80011a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	f04f 0300 	mov.w	r3, #0
 80011b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	2301      	movs	r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]

	if (*num=='-') sign=-1,num++;	/* Has sign? */
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b2d      	cmp	r3, #45	; 0x2d
 80011c2:	d107      	bne.n	80011d4 <parse_number+0x4c>
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	4b7a      	ldr	r3, [pc, #488]	; (80013b4 <parse_number+0x22c>)
 80011ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	603b      	str	r3, [r7, #0]
	if (*num=='0') num++;			/* is zero */
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b30      	cmp	r3, #48	; 0x30
 80011da:	d102      	bne.n	80011e2 <parse_number+0x5a>
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	603b      	str	r3, [r7, #0]
	if (*num>='1' && *num<='9')	do	n=(n*10.0)+(*num++ -'0');	while (*num>='0' && *num<='9');	/* Number? */
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b30      	cmp	r3, #48	; 0x30
 80011e8:	d928      	bls.n	800123c <parse_number+0xb4>
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b39      	cmp	r3, #57	; 0x39
 80011f0:	d824      	bhi.n	800123c <parse_number+0xb4>
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	4b70      	ldr	r3, [pc, #448]	; (80013b8 <parse_number+0x230>)
 80011f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011fc:	f7ff fa0c 	bl	8000618 <__aeabi_dmul>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4614      	mov	r4, r2
 8001206:	461d      	mov	r5, r3
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	1c5a      	adds	r2, r3, #1
 800120c:	603a      	str	r2, [r7, #0]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	3b30      	subs	r3, #48	; 0x30
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f996 	bl	8000544 <__aeabi_i2d>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4620      	mov	r0, r4
 800121e:	4629      	mov	r1, r5
 8001220:	f7ff f844 	bl	80002ac <__adddf3>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b2f      	cmp	r3, #47	; 0x2f
 8001232:	d903      	bls.n	800123c <parse_number+0xb4>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b39      	cmp	r3, #57	; 0x39
 800123a:	d9da      	bls.n	80011f2 <parse_number+0x6a>
	if (*num=='.' && num[1]>='0' && num[1]<='9') {num++;		do	n=(n*10.0)+(*num++ -'0'),scale--; while (*num>='0' && *num<='9');}	/* Fractional part? */
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b2e      	cmp	r3, #46	; 0x2e
 8001242:	d13c      	bne.n	80012be <parse_number+0x136>
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b2f      	cmp	r3, #47	; 0x2f
 800124c:	d937      	bls.n	80012be <parse_number+0x136>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b39      	cmp	r3, #57	; 0x39
 8001256:	d832      	bhi.n	80012be <parse_number+0x136>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	3301      	adds	r3, #1
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	4b55      	ldr	r3, [pc, #340]	; (80013b8 <parse_number+0x230>)
 8001264:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001268:	f7ff f9d6 	bl	8000618 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4614      	mov	r4, r2
 8001272:	461d      	mov	r5, r3
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	603a      	str	r2, [r7, #0]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	3b30      	subs	r3, #48	; 0x30
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f960 	bl	8000544 <__aeabi_i2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4620      	mov	r0, r4
 800128a:	4629      	mov	r1, r5
 800128c:	f7ff f80e 	bl	80002ac <__adddf3>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	4b44      	ldr	r3, [pc, #272]	; (80013b0 <parse_number+0x228>)
 800129e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012a2:	f7ff f801 	bl	80002a8 <__aeabi_dsub>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b2f      	cmp	r3, #47	; 0x2f
 80012b4:	d903      	bls.n	80012be <parse_number+0x136>
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b39      	cmp	r3, #57	; 0x39
 80012bc:	d9cf      	bls.n	800125e <parse_number+0xd6>
	if (*num=='e' || *num=='E')		/* Exponent? */
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b65      	cmp	r3, #101	; 0x65
 80012c4:	d003      	beq.n	80012ce <parse_number+0x146>
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b45      	cmp	r3, #69	; 0x45
 80012cc:	d12a      	bne.n	8001324 <parse_number+0x19c>
	{	num++;if (*num=='+') num++;	else if (*num=='-') signsubscale=-1,num++;		/* With sign? */
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	3301      	adds	r3, #1
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b2b      	cmp	r3, #43	; 0x2b
 80012da:	d103      	bne.n	80012e4 <parse_number+0x15c>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	e017      	b.n	8001314 <parse_number+0x18c>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b2d      	cmp	r3, #45	; 0x2d
 80012ea:	d113      	bne.n	8001314 <parse_number+0x18c>
 80012ec:	f04f 33ff 	mov.w	r3, #4294967295
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	603b      	str	r3, [r7, #0]
		while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
 80012f8:	e00c      	b.n	8001314 <parse_number+0x18c>
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4619      	mov	r1, r3
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	603a      	str	r2, [r7, #0]
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	3b30      	subs	r3, #48	; 0x30
 8001310:	440b      	add	r3, r1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b2f      	cmp	r3, #47	; 0x2f
 800131a:	d903      	bls.n	8001324 <parse_number+0x19c>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b39      	cmp	r3, #57	; 0x39
 8001322:	d9ea      	bls.n	80012fa <parse_number+0x172>
	}

	n=sign*n*pow(10.0,(scale+subscale*signsubscale));	/* number = +/- number.fraction * 10^+/- exponent */
 8001324:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001328:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800132c:	f7ff f974 	bl	8000618 <__aeabi_dmul>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4614      	mov	r4, r2
 8001336:	461d      	mov	r5, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	fb02 f303 	mul.w	r3, r2, r3
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f8ff 	bl	8000544 <__aeabi_i2d>
 8001346:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800134a:	f7fe ffaf 	bl	80002ac <__adddf3>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	ec43 2b17 	vmov	d7, r2, r3
 8001356:	eeb0 1a47 	vmov.f32	s2, s14
 800135a:	eef0 1a67 	vmov.f32	s3, s15
 800135e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80013a8 <parse_number+0x220>
 8001362:	f016 fb79 	bl	8017a58 <pow>
 8001366:	ec53 2b10 	vmov	r2, r3, d0
 800136a:	4620      	mov	r0, r4
 800136c:	4629      	mov	r1, r5
 800136e:	f7ff f953 	bl	8000618 <__aeabi_dmul>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	item->valuedouble=n;
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001380:	e9c1 2306 	strd	r2, r3, [r1, #24]
	item->valueint=(int)n;
 8001384:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001388:	f7ff fbf6 	bl	8000b78 <__aeabi_d2iz>
 800138c:	4602      	mov	r2, r0
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	615a      	str	r2, [r3, #20]
	item->type=cJSON_Number;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2203      	movs	r2, #3
 8001396:	60da      	str	r2, [r3, #12]
	return num;
 8001398:	683b      	ldr	r3, [r7, #0]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3728      	adds	r7, #40	; 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bdb0      	pop	{r4, r5, r7, pc}
 80013a2:	bf00      	nop
 80013a4:	f3af 8000 	nop.w
 80013a8:	00000000 	.word	0x00000000
 80013ac:	40240000 	.word	0x40240000
 80013b0:	3ff00000 	.word	0x3ff00000
 80013b4:	bff00000 	.word	0xbff00000
 80013b8:	40240000 	.word	0x40240000

080013bc <parse_hex4>:
	}
	return str;
}

static unsigned parse_hex4(const char *str)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	unsigned h=0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b2f      	cmp	r3, #47	; 0x2f
 80013ce:	d90b      	bls.n	80013e8 <parse_hex4+0x2c>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b39      	cmp	r3, #57	; 0x39
 80013d6:	d807      	bhi.n	80013e8 <parse_hex4+0x2c>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4413      	add	r3, r2
 80013e2:	3b30      	subs	r3, #48	; 0x30
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e021      	b.n	800142c <parse_hex4+0x70>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b40      	cmp	r3, #64	; 0x40
 80013ee:	d90b      	bls.n	8001408 <parse_hex4+0x4c>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b46      	cmp	r3, #70	; 0x46
 80013f6:	d807      	bhi.n	8001408 <parse_hex4+0x4c>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4413      	add	r3, r2
 8001402:	3b37      	subs	r3, #55	; 0x37
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	e011      	b.n	800142c <parse_hex4+0x70>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b60      	cmp	r3, #96	; 0x60
 800140e:	d90b      	bls.n	8001428 <parse_hex4+0x6c>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b66      	cmp	r3, #102	; 0x66
 8001416:	d807      	bhi.n	8001428 <parse_hex4+0x6c>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4413      	add	r3, r2
 8001422:	3b57      	subs	r3, #87	; 0x57
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	e001      	b.n	800142c <parse_hex4+0x70>
 8001428:	2300      	movs	r3, #0
 800142a:	e0a8      	b.n	800157e <parse_hex4+0x1c2>
	h=h<<4;str++;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3301      	adds	r3, #1
 8001436:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b2f      	cmp	r3, #47	; 0x2f
 800143e:	d90b      	bls.n	8001458 <parse_hex4+0x9c>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b39      	cmp	r3, #57	; 0x39
 8001446:	d807      	bhi.n	8001458 <parse_hex4+0x9c>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4413      	add	r3, r2
 8001452:	3b30      	subs	r3, #48	; 0x30
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	e021      	b.n	800149c <parse_hex4+0xe0>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b40      	cmp	r3, #64	; 0x40
 800145e:	d90b      	bls.n	8001478 <parse_hex4+0xbc>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b46      	cmp	r3, #70	; 0x46
 8001466:	d807      	bhi.n	8001478 <parse_hex4+0xbc>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4413      	add	r3, r2
 8001472:	3b37      	subs	r3, #55	; 0x37
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	e011      	b.n	800149c <parse_hex4+0xe0>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b60      	cmp	r3, #96	; 0x60
 800147e:	d90b      	bls.n	8001498 <parse_hex4+0xdc>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b66      	cmp	r3, #102	; 0x66
 8001486:	d807      	bhi.n	8001498 <parse_hex4+0xdc>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4413      	add	r3, r2
 8001492:	3b57      	subs	r3, #87	; 0x57
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	e001      	b.n	800149c <parse_hex4+0xe0>
 8001498:	2300      	movs	r3, #0
 800149a:	e070      	b.n	800157e <parse_hex4+0x1c2>
	h=h<<4;str++;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3301      	adds	r3, #1
 80014a6:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b2f      	cmp	r3, #47	; 0x2f
 80014ae:	d90b      	bls.n	80014c8 <parse_hex4+0x10c>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b39      	cmp	r3, #57	; 0x39
 80014b6:	d807      	bhi.n	80014c8 <parse_hex4+0x10c>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4413      	add	r3, r2
 80014c2:	3b30      	subs	r3, #48	; 0x30
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	e021      	b.n	800150c <parse_hex4+0x150>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b40      	cmp	r3, #64	; 0x40
 80014ce:	d90b      	bls.n	80014e8 <parse_hex4+0x12c>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b46      	cmp	r3, #70	; 0x46
 80014d6:	d807      	bhi.n	80014e8 <parse_hex4+0x12c>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4413      	add	r3, r2
 80014e2:	3b37      	subs	r3, #55	; 0x37
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	e011      	b.n	800150c <parse_hex4+0x150>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b60      	cmp	r3, #96	; 0x60
 80014ee:	d90b      	bls.n	8001508 <parse_hex4+0x14c>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b66      	cmp	r3, #102	; 0x66
 80014f6:	d807      	bhi.n	8001508 <parse_hex4+0x14c>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4413      	add	r3, r2
 8001502:	3b57      	subs	r3, #87	; 0x57
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	e001      	b.n	800150c <parse_hex4+0x150>
 8001508:	2300      	movs	r3, #0
 800150a:	e038      	b.n	800157e <parse_hex4+0x1c2>
	h=h<<4;str++;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3301      	adds	r3, #1
 8001516:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b2f      	cmp	r3, #47	; 0x2f
 800151e:	d90b      	bls.n	8001538 <parse_hex4+0x17c>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b39      	cmp	r3, #57	; 0x39
 8001526:	d807      	bhi.n	8001538 <parse_hex4+0x17c>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4413      	add	r3, r2
 8001532:	3b30      	subs	r3, #48	; 0x30
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	e021      	b.n	800157c <parse_hex4+0x1c0>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b40      	cmp	r3, #64	; 0x40
 800153e:	d90b      	bls.n	8001558 <parse_hex4+0x19c>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b46      	cmp	r3, #70	; 0x46
 8001546:	d807      	bhi.n	8001558 <parse_hex4+0x19c>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4413      	add	r3, r2
 8001552:	3b37      	subs	r3, #55	; 0x37
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	e011      	b.n	800157c <parse_hex4+0x1c0>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b60      	cmp	r3, #96	; 0x60
 800155e:	d90b      	bls.n	8001578 <parse_hex4+0x1bc>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b66      	cmp	r3, #102	; 0x66
 8001566:	d807      	bhi.n	8001578 <parse_hex4+0x1bc>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4413      	add	r3, r2
 8001572:	3b57      	subs	r3, #87	; 0x57
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	e001      	b.n	800157c <parse_hex4+0x1c0>
 8001578:	2300      	movs	r3, #0
 800157a:	e000      	b.n	800157e <parse_hex4+0x1c2>
	return h;
 800157c:	68fb      	ldr	r3, [r7, #12]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <parse_string>:

/* Parse the input text into an unescaped cstring, and populate item. */
static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
static const char *parse_string(cJSON *item,const char *str)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	3301      	adds	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
	if (*str!='\"') {ep=str;return 0;}	/* not a string! */
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b22      	cmp	r3, #34	; 0x22
 80015a6:	d00d      	beq.n	80015c4 <parse_string+0x38>
 80015a8:	4aa3      	ldr	r2, [pc, #652]	; (8001838 <parse_string+0x2ac>)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	2300      	movs	r3, #0
 80015b0:	e168      	b.n	8001884 <parse_string+0x2f8>
	
	while (*ptr!='\"' && *ptr && ++len) if (*ptr++ == '\\') ptr++;	/* Skip escaped quotes. */
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	61fa      	str	r2, [r7, #28]
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b5c      	cmp	r3, #92	; 0x5c
 80015bc:	d102      	bne.n	80015c4 <parse_string+0x38>
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3301      	adds	r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b22      	cmp	r3, #34	; 0x22
 80015ca:	d009      	beq.n	80015e0 <parse_string+0x54>
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <parse_string+0x54>
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	3301      	adds	r3, #1
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1e8      	bne.n	80015b2 <parse_string+0x26>
	
	out=(char*)cJSON_malloc(len+1);	/* This is how long we need for the string, roughly. */
 80015e0:	4b96      	ldr	r3, [pc, #600]	; (800183c <parse_string+0x2b0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	3201      	adds	r2, #1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4798      	blx	r3
 80015ec:	60f8      	str	r0, [r7, #12]
	if (!out) return 0;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <parse_string+0x6c>
 80015f4:	2300      	movs	r3, #0
 80015f6:	e145      	b.n	8001884 <parse_string+0x2f8>
	
	ptr=str+1;ptr2=out;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	3301      	adds	r3, #1
 80015fc:	61fb      	str	r3, [r7, #28]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	61bb      	str	r3, [r7, #24]
	while (*ptr!='\"' && *ptr)
 8001602:	e125      	b.n	8001850 <parse_string+0x2c4>
	{
		if (*ptr!='\\') *ptr2++=*ptr++;
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b5c      	cmp	r3, #92	; 0x5c
 800160a:	d008      	beq.n	800161e <parse_string+0x92>
 800160c:	69fa      	ldr	r2, [r7, #28]
 800160e:	1c53      	adds	r3, r2, #1
 8001610:	61fb      	str	r3, [r7, #28]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	1c59      	adds	r1, r3, #1
 8001616:	61b9      	str	r1, [r7, #24]
 8001618:	7812      	ldrb	r2, [r2, #0]
 800161a:	701a      	strb	r2, [r3, #0]
 800161c:	e118      	b.n	8001850 <parse_string+0x2c4>
		else
		{
			ptr++;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3301      	adds	r3, #1
 8001622:	61fb      	str	r3, [r7, #28]
			switch (*ptr)
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	3b62      	subs	r3, #98	; 0x62
 800162a:	2b13      	cmp	r3, #19
 800162c:	f200 80fc 	bhi.w	8001828 <parse_string+0x29c>
 8001630:	a201      	add	r2, pc, #4	; (adr r2, 8001638 <parse_string+0xac>)
 8001632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001636:	bf00      	nop
 8001638:	08001689 	.word	0x08001689
 800163c:	08001829 	.word	0x08001829
 8001640:	08001829 	.word	0x08001829
 8001644:	08001829 	.word	0x08001829
 8001648:	08001695 	.word	0x08001695
 800164c:	08001829 	.word	0x08001829
 8001650:	08001829 	.word	0x08001829
 8001654:	08001829 	.word	0x08001829
 8001658:	08001829 	.word	0x08001829
 800165c:	08001829 	.word	0x08001829
 8001660:	08001829 	.word	0x08001829
 8001664:	08001829 	.word	0x08001829
 8001668:	080016a1 	.word	0x080016a1
 800166c:	08001829 	.word	0x08001829
 8001670:	08001829 	.word	0x08001829
 8001674:	08001829 	.word	0x08001829
 8001678:	080016ad 	.word	0x080016ad
 800167c:	08001829 	.word	0x08001829
 8001680:	080016b9 	.word	0x080016b9
 8001684:	080016c5 	.word	0x080016c5
			{
				case 'b': *ptr2++='\b';	break;
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	61ba      	str	r2, [r7, #24]
 800168e:	2208      	movs	r2, #8
 8001690:	701a      	strb	r2, [r3, #0]
 8001692:	e0da      	b.n	800184a <parse_string+0x2be>
				case 'f': *ptr2++='\f';	break;
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	61ba      	str	r2, [r7, #24]
 800169a:	220c      	movs	r2, #12
 800169c:	701a      	strb	r2, [r3, #0]
 800169e:	e0d4      	b.n	800184a <parse_string+0x2be>
				case 'n': *ptr2++='\n';	break;
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	61ba      	str	r2, [r7, #24]
 80016a6:	220a      	movs	r2, #10
 80016a8:	701a      	strb	r2, [r3, #0]
 80016aa:	e0ce      	b.n	800184a <parse_string+0x2be>
				case 'r': *ptr2++='\r';	break;
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	61ba      	str	r2, [r7, #24]
 80016b2:	220d      	movs	r2, #13
 80016b4:	701a      	strb	r2, [r3, #0]
 80016b6:	e0c8      	b.n	800184a <parse_string+0x2be>
				case 't': *ptr2++='\t';	break;
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	61ba      	str	r2, [r7, #24]
 80016be:	2209      	movs	r2, #9
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	e0c2      	b.n	800184a <parse_string+0x2be>
				case 'u':	 /* transcode utf16 to utf8. */
					uc=parse_hex4(ptr+1);ptr+=4;	/* get the unicode char. */
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	3301      	adds	r3, #1
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fe77 	bl	80013bc <parse_hex4>
 80016ce:	6138      	str	r0, [r7, #16]
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	3304      	adds	r3, #4
 80016d4:	61fb      	str	r3, [r7, #28]

					if ((uc>=0xDC00 && uc<=0xDFFF) || uc==0)	break;	/* check for invalid.	*/
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80016dc:	d304      	bcc.n	80016e8 <parse_string+0x15c>
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80016e4:	f0c0 80b0 	bcc.w	8001848 <parse_string+0x2bc>
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 80ac 	beq.w	8001848 <parse_string+0x2bc>

					if (uc>=0xD800 && uc<=0xDBFF)	/* UTF16 surrogate pairs.	*/
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80016f6:	d32d      	bcc.n	8001754 <parse_string+0x1c8>
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80016fe:	d229      	bcs.n	8001754 <parse_string+0x1c8>
					{
						if (ptr[1]!='\\' || ptr[2]!='u')	break;	/* missing second-half of surrogate.	*/
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	3301      	adds	r3, #1
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b5c      	cmp	r3, #92	; 0x5c
 8001708:	f040 809e 	bne.w	8001848 <parse_string+0x2bc>
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	3302      	adds	r3, #2
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b75      	cmp	r3, #117	; 0x75
 8001714:	f040 8098 	bne.w	8001848 <parse_string+0x2bc>
						uc2=parse_hex4(ptr+3);ptr+=6;
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	3303      	adds	r3, #3
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fe4d 	bl	80013bc <parse_hex4>
 8001722:	60b8      	str	r0, [r7, #8]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	3306      	adds	r3, #6
 8001728:	61fb      	str	r3, [r7, #28]
						if (uc2<0xDC00 || uc2>0xDFFF)		break;	/* invalid second-half of surrogate.	*/
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001730:	f0c0 808a 	bcc.w	8001848 <parse_string+0x2bc>
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800173a:	f080 8085 	bcs.w	8001848 <parse_string+0x2bc>
						uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	029a      	lsls	r2, r3, #10
 8001742:	4b3f      	ldr	r3, [pc, #252]	; (8001840 <parse_string+0x2b4>)
 8001744:	4013      	ands	r3, r2
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800174c:	4313      	orrs	r3, r2
 800174e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001752:	613b      	str	r3, [r7, #16]
					}

					len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;
 8001754:	2304      	movs	r3, #4
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	2b7f      	cmp	r3, #127	; 0x7f
 800175c:	d802      	bhi.n	8001764 <parse_string+0x1d8>
 800175e:	2301      	movs	r3, #1
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	e00c      	b.n	800177e <parse_string+0x1f2>
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800176a:	d202      	bcs.n	8001772 <parse_string+0x1e6>
 800176c:	2302      	movs	r3, #2
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	e005      	b.n	800177e <parse_string+0x1f2>
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001778:	d201      	bcs.n	800177e <parse_string+0x1f2>
 800177a:	2303      	movs	r3, #3
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4413      	add	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3b01      	subs	r3, #1
 800178a:	2b03      	cmp	r3, #3
 800178c:	d847      	bhi.n	800181e <parse_string+0x292>
 800178e:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <parse_string+0x208>)
 8001790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001794:	08001805 	.word	0x08001805
 8001798:	080017e5 	.word	0x080017e5
 800179c:	080017c5 	.word	0x080017c5
 80017a0:	080017a5 	.word	0x080017a5
					
					switch (len) {
						case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	3a01      	subs	r2, #1
 80017b2:	61ba      	str	r2, [r7, #24]
 80017b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	099b      	lsrs	r3, r3, #6
 80017c2:	613b      	str	r3, [r7, #16]
						case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	3a01      	subs	r2, #1
 80017d2:	61ba      	str	r2, [r7, #24]
 80017d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	701a      	strb	r2, [r3, #0]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	099b      	lsrs	r3, r3, #6
 80017e2:	613b      	str	r3, [r7, #16]
						case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	3a01      	subs	r2, #1
 80017f2:	61ba      	str	r2, [r7, #24]
 80017f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	701a      	strb	r2, [r3, #0]
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	099b      	lsrs	r3, r3, #6
 8001802:	613b      	str	r3, [r7, #16]
						case 1: *--ptr2 =(uc | firstByteMark[len]);
 8001804:	4a0f      	ldr	r2, [pc, #60]	; (8001844 <parse_string+0x2b8>)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	4413      	add	r3, r2
 800180a:	781a      	ldrb	r2, [r3, #0]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	69b9      	ldr	r1, [r7, #24]
 8001812:	3901      	subs	r1, #1
 8001814:	61b9      	str	r1, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	b2da      	uxtb	r2, r3
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	701a      	strb	r2, [r3, #0]
					}
					ptr2+=len;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4413      	add	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
					break;
 8001826:	e010      	b.n	800184a <parse_string+0x2be>
				default:  *ptr2++=*ptr; break;
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	61ba      	str	r2, [r7, #24]
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	7812      	ldrb	r2, [r2, #0]
 8001832:	701a      	strb	r2, [r3, #0]
 8001834:	e009      	b.n	800184a <parse_string+0x2be>
 8001836:	bf00      	nop
 8001838:	20000214 	.word	0x20000214
 800183c:	20000000 	.word	0x20000000
 8001840:	000ffc00 	.word	0x000ffc00
 8001844:	0801bb40 	.word	0x0801bb40
			}
			ptr++;
 8001848:	bf00      	nop
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3301      	adds	r3, #1
 800184e:	61fb      	str	r3, [r7, #28]
	while (*ptr!='\"' && *ptr)
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b22      	cmp	r3, #34	; 0x22
 8001856:	d004      	beq.n	8001862 <parse_string+0x2d6>
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	f47f aed1 	bne.w	8001604 <parse_string+0x78>
		}
	}
	*ptr2=0;
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
	if (*ptr=='\"') ptr++;
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b22      	cmp	r3, #34	; 0x22
 800186e:	d102      	bne.n	8001876 <parse_string+0x2ea>
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	3301      	adds	r3, #1
 8001874:	61fb      	str	r3, [r7, #28]
	item->valuestring=out;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	611a      	str	r2, [r3, #16]
	item->type=cJSON_String;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2204      	movs	r2, #4
 8001880:	60da      	str	r2, [r3, #12]
	return ptr;
 8001882:	69fb      	ldr	r3, [r7, #28]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <skip>:
static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p);
static const char *parse_object(cJSON *item,const char *value);
static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p);

/* Utility to jump whitespace and cr/lf */
static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	e002      	b.n	800189c <skip+0x10>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3301      	adds	r3, #1
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d007      	beq.n	80018b2 <skip+0x26>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <skip+0x26>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b20      	cmp	r3, #32
 80018b0:	d9f1      	bls.n	8001896 <skip+0xa>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <cJSON_ParseWithOpts>:

/* Parse an object - create a new root, and populate. */
cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
	const char *end=0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
	cJSON *c=cJSON_New_Item();
 80018d0:	f7ff fbfa 	bl	80010c8 <cJSON_New_Item>
 80018d4:	6138      	str	r0, [r7, #16]
	ep=0;
 80018d6:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <cJSON_ParseWithOpts+0x84>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
	if (!c) return 0;       /* memory fail */
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <cJSON_ParseWithOpts+0x26>
 80018e2:	2300      	movs	r3, #0
 80018e4:	e02a      	b.n	800193c <cJSON_ParseWithOpts+0x7c>

	end=parse_value(c,skip(value));
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f7ff ffd0 	bl	800188c <skip>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4619      	mov	r1, r3
 80018f0:	6938      	ldr	r0, [r7, #16]
 80018f2:	f000 f837 	bl	8001964 <parse_value>
 80018f6:	6178      	str	r0, [r7, #20]
	if (!end)	{cJSON_Delete(c);return 0;}	/* parse failure. ep is set. */
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d104      	bne.n	8001908 <cJSON_ParseWithOpts+0x48>
 80018fe:	6938      	ldr	r0, [r7, #16]
 8001900:	f7ff fbfa 	bl	80010f8 <cJSON_Delete>
 8001904:	2300      	movs	r3, #0
 8001906:	e019      	b.n	800193c <cJSON_ParseWithOpts+0x7c>

	/* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
	if (require_null_terminated) {end=skip(end);if (*end) {cJSON_Delete(c);ep=end;return 0;}}
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00f      	beq.n	800192e <cJSON_ParseWithOpts+0x6e>
 800190e:	6978      	ldr	r0, [r7, #20]
 8001910:	f7ff ffbc 	bl	800188c <skip>
 8001914:	6178      	str	r0, [r7, #20]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d007      	beq.n	800192e <cJSON_ParseWithOpts+0x6e>
 800191e:	6938      	ldr	r0, [r7, #16]
 8001920:	f7ff fbea 	bl	80010f8 <cJSON_Delete>
 8001924:	4a07      	ldr	r2, [pc, #28]	; (8001944 <cJSON_ParseWithOpts+0x84>)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	2300      	movs	r3, #0
 800192c:	e006      	b.n	800193c <cJSON_ParseWithOpts+0x7c>
	if (return_parse_end) *return_parse_end=end;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <cJSON_ParseWithOpts+0x7a>
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	601a      	str	r2, [r3, #0]
	return c;
 800193a:	693b      	ldr	r3, [r7, #16]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000214 	.word	0x20000214

08001948 <cJSON_Parse>:
/* Default options for cJSON_Parse */
cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ffb3 	bl	80018c0 <cJSON_ParseWithOpts>
 800195a:	4603      	mov	r3, r0
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <parse_value>:
}


/* Parser core - when encountering text, process appropriately. */
static const char *parse_value(cJSON *item,const char *value)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
	if (!value)						return 0;	/* Fail on null. */
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <parse_value+0x14>
 8001974:	2300      	movs	r3, #0
 8001976:	e060      	b.n	8001a3a <parse_value+0xd6>
	if (!strncmp(value,"null",4))	{ item->type=cJSON_NULL;  return value+4; }
 8001978:	2204      	movs	r2, #4
 800197a:	4932      	ldr	r1, [pc, #200]	; (8001a44 <parse_value+0xe0>)
 800197c:	6838      	ldr	r0, [r7, #0]
 800197e:	f013 fe8b 	bl	8015698 <strncmp>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d105      	bne.n	8001994 <parse_value+0x30>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2202      	movs	r2, #2
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	3304      	adds	r3, #4
 8001992:	e052      	b.n	8001a3a <parse_value+0xd6>
	if (!strncmp(value,"false",5))	{ item->type=cJSON_False; return value+5; }
 8001994:	2205      	movs	r2, #5
 8001996:	492c      	ldr	r1, [pc, #176]	; (8001a48 <parse_value+0xe4>)
 8001998:	6838      	ldr	r0, [r7, #0]
 800199a:	f013 fe7d 	bl	8015698 <strncmp>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d105      	bne.n	80019b0 <parse_value+0x4c>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	3305      	adds	r3, #5
 80019ae:	e044      	b.n	8001a3a <parse_value+0xd6>
	if (!strncmp(value,"true",4))	{ item->type=cJSON_True; item->valueint=1;	return value+4; }
 80019b0:	2204      	movs	r2, #4
 80019b2:	4926      	ldr	r1, [pc, #152]	; (8001a4c <parse_value+0xe8>)
 80019b4:	6838      	ldr	r0, [r7, #0]
 80019b6:	f013 fe6f 	bl	8015698 <strncmp>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d108      	bne.n	80019d2 <parse_value+0x6e>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	615a      	str	r2, [r3, #20]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	3304      	adds	r3, #4
 80019d0:	e033      	b.n	8001a3a <parse_value+0xd6>
	if (*value=='\"')				{ return parse_string(item,value); }
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b22      	cmp	r3, #34	; 0x22
 80019d8:	d105      	bne.n	80019e6 <parse_value+0x82>
 80019da:	6839      	ldr	r1, [r7, #0]
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff fdd5 	bl	800158c <parse_string>
 80019e2:	4603      	mov	r3, r0
 80019e4:	e029      	b.n	8001a3a <parse_value+0xd6>
	if (*value=='-' || (*value>='0' && *value<='9'))	{ return parse_number(item,value); }
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b2d      	cmp	r3, #45	; 0x2d
 80019ec:	d007      	beq.n	80019fe <parse_value+0x9a>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b2f      	cmp	r3, #47	; 0x2f
 80019f4:	d909      	bls.n	8001a0a <parse_value+0xa6>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b39      	cmp	r3, #57	; 0x39
 80019fc:	d805      	bhi.n	8001a0a <parse_value+0xa6>
 80019fe:	6839      	ldr	r1, [r7, #0]
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff fbc1 	bl	8001188 <parse_number>
 8001a06:	4603      	mov	r3, r0
 8001a08:	e017      	b.n	8001a3a <parse_value+0xd6>
	if (*value=='[')				{ return parse_array(item,value); }
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b5b      	cmp	r3, #91	; 0x5b
 8001a10:	d105      	bne.n	8001a1e <parse_value+0xba>
 8001a12:	6839      	ldr	r1, [r7, #0]
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f81d 	bl	8001a54 <parse_array>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	e00d      	b.n	8001a3a <parse_value+0xd6>
	if (*value=='{')				{ return parse_object(item,value); }
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b7b      	cmp	r3, #123	; 0x7b
 8001a24:	d105      	bne.n	8001a32 <parse_value+0xce>
 8001a26:	6839      	ldr	r1, [r7, #0]
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f889 	bl	8001b40 <parse_object>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	e003      	b.n	8001a3a <parse_value+0xd6>

	ep=value;return 0;	/* failure. */
 8001a32:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <parse_value+0xec>)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	08018a0c 	.word	0x08018a0c
 8001a48:	08018a14 	.word	0x08018a14
 8001a4c:	08018a1c 	.word	0x08018a1c
 8001a50:	20000214 	.word	0x20000214

08001a54 <parse_array>:
	return out;
}

/* Build an array from input text. */
static const char *parse_array(cJSON *item,const char *value)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='[')	{ep=value;return 0;}	/* not an array! */
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b5b      	cmp	r3, #91	; 0x5b
 8001a64:	d004      	beq.n	8001a70 <parse_array+0x1c>
 8001a66:	4a35      	ldr	r2, [pc, #212]	; (8001b3c <parse_array+0xe8>)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	e060      	b.n	8001b32 <parse_array+0xde>

	item->type=cJSON_Array;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2205      	movs	r2, #5
 8001a74:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff06 	bl	800188c <skip>
 8001a80:	6038      	str	r0, [r7, #0]
	if (*value==']') return value+1;	/* empty array. */
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b5d      	cmp	r3, #93	; 0x5d
 8001a88:	d102      	bne.n	8001a90 <parse_array+0x3c>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	e050      	b.n	8001b32 <parse_array+0xde>

	item->child=child=cJSON_New_Item();
 8001a90:	f7ff fb1a 	bl	80010c8 <cJSON_New_Item>
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;		 /* memory fail */
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <parse_array+0x54>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e044      	b.n	8001b32 <parse_array+0xde>
	value=skip(parse_value(child,skip(value)));	/* skip any spacing, get the value. */
 8001aa8:	6838      	ldr	r0, [r7, #0]
 8001aaa:	f7ff feef 	bl	800188c <skip>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f7ff ff56 	bl	8001964 <parse_value>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fee6 	bl	800188c <skip>
 8001ac0:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d125      	bne.n	8001b14 <parse_array+0xc0>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e032      	b.n	8001b32 <parse_array+0xde>

	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item())) return 0; 	/* memory fail */
 8001acc:	f7ff fafc 	bl	80010c8 <cJSON_New_Item>
 8001ad0:	60b8      	str	r0, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <parse_array+0x88>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	e02a      	b.n	8001b32 <parse_array+0xde>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	60fb      	str	r3, [r7, #12]
		value=skip(parse_value(child,skip(value+1)));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	3301      	adds	r3, #1
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fecb 	bl	800188c <skip>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4619      	mov	r1, r3
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f7ff ff32 	bl	8001964 <parse_value>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fec2 	bl	800188c <skip>
 8001b08:	6038      	str	r0, [r7, #0]
		if (!value) return 0;	/* memory fail */
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <parse_array+0xc0>
 8001b10:	2300      	movs	r3, #0
 8001b12:	e00e      	b.n	8001b32 <parse_array+0xde>
	while (*value==',')
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b2c      	cmp	r3, #44	; 0x2c
 8001b1a:	d0d7      	beq.n	8001acc <parse_array+0x78>
	}

	if (*value==']') return value+1;	/* end of array */
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b5d      	cmp	r3, #93	; 0x5d
 8001b22:	d102      	bne.n	8001b2a <parse_array+0xd6>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	3301      	adds	r3, #1
 8001b28:	e003      	b.n	8001b32 <parse_array+0xde>
	ep=value;return 0;	/* malformed. */
 8001b2a:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <parse_array+0xe8>)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000214 	.word	0x20000214

08001b40 <parse_object>:
	return out;	
}

/* Build an object from the text. */
static const char *parse_object(cJSON *item,const char *value)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='{')	{ep=value;return 0;}	/* not an object! */
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b7b      	cmp	r3, #123	; 0x7b
 8001b50:	d004      	beq.n	8001b5c <parse_object+0x1c>
 8001b52:	4a59      	ldr	r2, [pc, #356]	; (8001cb8 <parse_object+0x178>)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	e0a8      	b.n	8001cae <parse_object+0x16e>
	
	item->type=cJSON_Object;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2206      	movs	r2, #6
 8001b60:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	3301      	adds	r3, #1
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fe90 	bl	800188c <skip>
 8001b6c:	6038      	str	r0, [r7, #0]
	if (*value=='}') return value+1;	/* empty array. */
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b7d      	cmp	r3, #125	; 0x7d
 8001b74:	d102      	bne.n	8001b7c <parse_object+0x3c>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	e098      	b.n	8001cae <parse_object+0x16e>
	
	item->child=child=cJSON_New_Item();
 8001b7c:	f7ff faa4 	bl	80010c8 <cJSON_New_Item>
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <parse_object+0x54>
 8001b90:	2300      	movs	r3, #0
 8001b92:	e08c      	b.n	8001cae <parse_object+0x16e>
	value=skip(parse_string(child,skip(value)));
 8001b94:	6838      	ldr	r0, [r7, #0]
 8001b96:	f7ff fe79 	bl	800188c <skip>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f7ff fcf4 	bl	800158c <parse_string>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fe70 	bl	800188c <skip>
 8001bac:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <parse_object+0x78>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e07a      	b.n	8001cae <parse_object+0x16e>
	child->string=child->valuestring;child->valuestring=0;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	621a      	str	r2, [r3, #32]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
	if (*value!=':') {ep=value;return 0;}	/* fail! */
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b3a      	cmp	r3, #58	; 0x3a
 8001bcc:	d004      	beq.n	8001bd8 <parse_object+0x98>
 8001bce:	4a3a      	ldr	r2, [pc, #232]	; (8001cb8 <parse_object+0x178>)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e06a      	b.n	8001cae <parse_object+0x16e>
	value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fe55 	bl	800188c <skip>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4619      	mov	r1, r3
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f7ff febc 	bl	8001964 <parse_value>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fe4c 	bl	800188c <skip>
 8001bf4:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d149      	bne.n	8001c90 <parse_object+0x150>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e056      	b.n	8001cae <parse_object+0x16e>
	
	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item()))	return 0; /* memory fail */
 8001c00:	f7ff fa62 	bl	80010c8 <cJSON_New_Item>
 8001c04:	60b8      	str	r0, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <parse_object+0xd0>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e04e      	b.n	8001cae <parse_object+0x16e>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60fb      	str	r3, [r7, #12]
		value=skip(parse_string(child,skip(value+1)));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	3301      	adds	r3, #1
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fe31 	bl	800188c <skip>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f7ff fcac 	bl	800158c <parse_string>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fe28 	bl	800188c <skip>
 8001c3c:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <parse_object+0x108>
 8001c44:	2300      	movs	r3, #0
 8001c46:	e032      	b.n	8001cae <parse_object+0x16e>
		child->string=child->valuestring;child->valuestring=0;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	621a      	str	r2, [r3, #32]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
		if (*value!=':') {ep=value;return 0;}	/* fail! */
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b3a      	cmp	r3, #58	; 0x3a
 8001c5c:	d004      	beq.n	8001c68 <parse_object+0x128>
 8001c5e:	4a16      	ldr	r2, [pc, #88]	; (8001cb8 <parse_object+0x178>)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	2300      	movs	r3, #0
 8001c66:	e022      	b.n	8001cae <parse_object+0x16e>
		value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fe0d 	bl	800188c <skip>
 8001c72:	4603      	mov	r3, r0
 8001c74:	4619      	mov	r1, r3
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f7ff fe74 	bl	8001964 <parse_value>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fe04 	bl	800188c <skip>
 8001c84:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <parse_object+0x150>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e00e      	b.n	8001cae <parse_object+0x16e>
	while (*value==',')
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b2c      	cmp	r3, #44	; 0x2c
 8001c96:	d0b3      	beq.n	8001c00 <parse_object+0xc0>
	}
	
	if (*value=='}') return value+1;	/* end of array */
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b7d      	cmp	r3, #125	; 0x7d
 8001c9e:	d102      	bne.n	8001ca6 <parse_object+0x166>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	e003      	b.n	8001cae <parse_object+0x16e>
	ep=value;return 0;	/* malformed. */
 8001ca6:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <parse_object+0x178>)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000214 	.word	0x20000214

08001cbc <cJSON_GetObjectItem>:
}

/* Get Array size/item / object item. */
int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}
cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}
cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	e002      	b.n	8001cd4 <cJSON_GetObjectItem+0x18>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d008      	beq.n	8001cec <cJSON_GetObjectItem+0x30>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	6839      	ldr	r1, [r7, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff f983 	bl	8000fec <cJSON_strcasecmp>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f0      	bne.n	8001cce <cJSON_GetObjectItem+0x12>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <USART_Tx>:
char DBG_buf[DBG_RX_BUFFER_SIZE] = {0,};
char DBG_str[DBG_RX_BUFFER_SIZE] = {0,};

//Функция передачи байта по USART3
void USART_Tx(unsigned char Data)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
	while(!(USART3->SR & USART_SR_TC));
 8001d02:	bf00      	nop
 8001d04:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <USART_Tx+0x2c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f9      	beq.n	8001d04 <USART_Tx+0xc>
	USART3->DR = Data;
 8001d10:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <USART_Tx+0x2c>)
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	6053      	str	r3, [r2, #4]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40004800 	.word	0x40004800

08001d28 <SEND_str>:
//Функция отправки сткроки
//Принимает строку для отправки
void SEND_str(char * string)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8001d34:	e009      	b.n	8001d4a <SEND_str+0x22>
	{
		USART_Tx(string[i]);
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ffda 	bl	8001cf8 <USART_Tx>
		i++;
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	3301      	adds	r3, #1
 8001d48:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	4413      	add	r3, r2
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1ef      	bne.n	8001d36 <SEND_str+0xe>
	}
}
 8001d56:	bf00      	nop
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <DEBUG_main>:
void DEBUG_main(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
	if(dbg_available()) //если послали в терминал какую-то команду, то она перенаправиться в модем
 8001d66:	f002 f9eb 	bl	8004140 <dbg_available>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d066      	beq.n	8001e3e <DEBUG_main+0xde>
	{
		uint16_t i = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	80fb      	strh	r3, [r7, #6]
		uint8_t fdbg = 1;
 8001d74:	2301      	movs	r3, #1
 8001d76:	717b      	strb	r3, [r7, #5]
		memset(DBG_buf, 0, DBG_RX_BUFFER_SIZE);
 8001d78:	2240      	movs	r2, #64	; 0x40
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4832      	ldr	r0, [pc, #200]	; (8001e48 <DEBUG_main+0xe8>)
 8001d7e:	f012 fed3 	bl	8014b28 <memset>
		HAL_Delay(50);
 8001d82:	2032      	movs	r0, #50	; 0x32
 8001d84:	f002 fab8 	bl	80042f8 <HAL_Delay>

		while(dbg_available())
 8001d88:	e010      	b.n	8001dac <DEBUG_main+0x4c>
		{
			DBG_buf[i++] = dbg_read();
 8001d8a:	f002 f9f5 	bl	8004178 <dbg_read>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4619      	mov	r1, r3
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	1c5a      	adds	r2, r3, #1
 8001d96:	80fa      	strh	r2, [r7, #6]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	b2c9      	uxtb	r1, r1
 8001d9c:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <DEBUG_main+0xe8>)
 8001d9e:	5499      	strb	r1, [r3, r2]
			if(i > DBG_RX_BUFFER_SIZE - 1)
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	2b3f      	cmp	r3, #63	; 0x3f
 8001da4:	d808      	bhi.n	8001db8 <DEBUG_main+0x58>
				break;
			HAL_Delay(1);
 8001da6:	2001      	movs	r0, #1
 8001da8:	f002 faa6 	bl	80042f8 <HAL_Delay>
		while(dbg_available())
 8001dac:	f002 f9c8 	bl	8004140 <dbg_available>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1e9      	bne.n	8001d8a <DEBUG_main+0x2a>
 8001db6:	e000      	b.n	8001dba <DEBUG_main+0x5a>
				break;
 8001db8:	bf00      	nop
		}
		clear_string(DBG_buf);
 8001dba:	4823      	ldr	r0, [pc, #140]	; (8001e48 <DEBUG_main+0xe8>)
 8001dbc:	f000 f962 	bl	8002084 <clear_string>
		if(strstr(DBG_buf, "test") != NULL)
 8001dc0:	4922      	ldr	r1, [pc, #136]	; (8001e4c <DEBUG_main+0xec>)
 8001dc2:	4821      	ldr	r0, [pc, #132]	; (8001e48 <DEBUG_main+0xe8>)
 8001dc4:	f013 fc7a 	bl	80156bc <strstr>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <DEBUG_main+0x76>
		{
			SEND_str("respone\n");
 8001dce:	4820      	ldr	r0, [pc, #128]	; (8001e50 <DEBUG_main+0xf0>)
 8001dd0:	f7ff ffaa 	bl	8001d28 <SEND_str>
 8001dd4:	e02a      	b.n	8001e2c <DEBUG_main+0xcc>
//		clear_string(DBG_buf);
//		snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s\r\n", DBG_buf);
//		c = strchr(DBG_str, '.') - DBG_str;
//		HAL_UART_Transmit(&huart2, (uint8_t*)DBG_str, c, 1000);	//strlen(DBG_str)

		else if(strstr(DBG_buf, "AIN") != NULL)
 8001dd6:	491f      	ldr	r1, [pc, #124]	; (8001e54 <DEBUG_main+0xf4>)
 8001dd8:	481b      	ldr	r0, [pc, #108]	; (8001e48 <DEBUG_main+0xe8>)
 8001dda:	f013 fc6f 	bl	80156bc <strstr>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <DEBUG_main+0x8c>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"ANALOG\",\"SET\":\"[1,1,0,0,1,1,0,0]\"},\"TIME\":\"1122334455\"}");
 8001de4:	481c      	ldr	r0, [pc, #112]	; (8001e58 <DEBUG_main+0xf8>)
 8001de6:	f000 f9bb 	bl	8002160 <json_input>
 8001dea:	e01f      	b.n	8001e2c <DEBUG_main+0xcc>
		}
		else if(strstr(DBG_buf, "DIN") != NULL)
 8001dec:	491b      	ldr	r1, [pc, #108]	; (8001e5c <DEBUG_main+0xfc>)
 8001dee:	4816      	ldr	r0, [pc, #88]	; (8001e48 <DEBUG_main+0xe8>)
 8001df0:	f013 fc64 	bl	80156bc <strstr>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <DEBUG_main+0xa2>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"DIGITAL\",\"SET\":\"[0,0,1,1,0,0,1,1]\"},\"TIME\":\"1122334455\"}");
 8001dfa:	4819      	ldr	r0, [pc, #100]	; (8001e60 <DEBUG_main+0x100>)
 8001dfc:	f000 f9b0 	bl	8002160 <json_input>
 8001e00:	e014      	b.n	8001e2c <DEBUG_main+0xcc>
		}
		else if(strstr(DBG_buf, "OCD") != NULL)
 8001e02:	4918      	ldr	r1, [pc, #96]	; (8001e64 <DEBUG_main+0x104>)
 8001e04:	4810      	ldr	r0, [pc, #64]	; (8001e48 <DEBUG_main+0xe8>)
 8001e06:	f013 fc59 	bl	80156bc <strstr>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <DEBUG_main+0xb8>
		{
			json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"OCD\",\"SET\":\"[0,1,0,1,0,1,1,1]\"},\"TIME\":\"1122334455\"}");
 8001e10:	4815      	ldr	r0, [pc, #84]	; (8001e68 <DEBUG_main+0x108>)
 8001e12:	f000 f9a5 	bl	8002160 <json_input>
 8001e16:	e009      	b.n	8001e2c <DEBUG_main+0xcc>
		}
		else if(strstr(DBG_buf, "SP1") != NULL)
 8001e18:	4914      	ldr	r1, [pc, #80]	; (8001e6c <DEBUG_main+0x10c>)
 8001e1a:	480b      	ldr	r0, [pc, #44]	; (8001e48 <DEBUG_main+0xe8>)
 8001e1c:	f013 fc4e 	bl	80156bc <strstr>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <DEBUG_main+0xcc>
		{
			json_input("{\"INSTRUCTION\":\"SET_PROGRAMM\",\"COMMAND\":{\"TYPE\":\"SET_DIDO\",\"D_IN\":\"VHOD1\",\"VAR_IN\":\"0\",\"D_OUT\":\"VIHOD3\",\"VAR_OUT\":\"1\"},\"TIME\":\"1122334455\"}");
 8001e26:	4812      	ldr	r0, [pc, #72]	; (8001e70 <DEBUG_main+0x110>)
 8001e28:	f000 f99a 	bl	8002160 <json_input>
		}

		if(fdbg)
 8001e2c:	797b      	ldrb	r3, [r7, #5]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <DEBUG_main+0xde>
		{
			snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s\n", DBG_buf);
 8001e32:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <DEBUG_main+0xe8>)
 8001e34:	4a0f      	ldr	r2, [pc, #60]	; (8001e74 <DEBUG_main+0x114>)
 8001e36:	2140      	movs	r1, #64	; 0x40
 8001e38:	480f      	ldr	r0, [pc, #60]	; (8001e78 <DEBUG_main+0x118>)
 8001e3a:	f013 fbf9 	bl	8015630 <sniprintf>

			//json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"DIGITAL\",\"SET\":\"[0,1,1,0,0,0,0,1]\"},\"TIME\":\"1122334455\"}");
		}
	}
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000218 	.word	0x20000218
 8001e4c:	08018a28 	.word	0x08018a28
 8001e50:	08018a30 	.word	0x08018a30
 8001e54:	08018a3c 	.word	0x08018a3c
 8001e58:	08018a40 	.word	0x08018a40
 8001e5c:	08018aac 	.word	0x08018aac
 8001e60:	08018ab0 	.word	0x08018ab0
 8001e64:	08018b20 	.word	0x08018b20
 8001e68:	08018b24 	.word	0x08018b24
 8001e6c:	08018b90 	.word	0x08018b90
 8001e70:	08018b94 	.word	0x08018b94
 8001e74:	08018c20 	.word	0x08018c20
 8001e78:	20000258 	.word	0x20000258

08001e7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08c      	sub	sp, #48	; 0x30
 8001e80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
 8001e96:	4b75      	ldr	r3, [pc, #468]	; (800206c <MX_GPIO_Init+0x1f0>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a74      	ldr	r2, [pc, #464]	; (800206c <MX_GPIO_Init+0x1f0>)
 8001e9c:	f043 0310 	orr.w	r3, r3, #16
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b72      	ldr	r3, [pc, #456]	; (800206c <MX_GPIO_Init+0x1f0>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	61bb      	str	r3, [r7, #24]
 8001eac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	4b6e      	ldr	r3, [pc, #440]	; (800206c <MX_GPIO_Init+0x1f0>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a6d      	ldr	r2, [pc, #436]	; (800206c <MX_GPIO_Init+0x1f0>)
 8001eb8:	f043 0304 	orr.w	r3, r3, #4
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b6b      	ldr	r3, [pc, #428]	; (800206c <MX_GPIO_Init+0x1f0>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	4b67      	ldr	r3, [pc, #412]	; (800206c <MX_GPIO_Init+0x1f0>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a66      	ldr	r2, [pc, #408]	; (800206c <MX_GPIO_Init+0x1f0>)
 8001ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b64      	ldr	r3, [pc, #400]	; (800206c <MX_GPIO_Init+0x1f0>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	4b60      	ldr	r3, [pc, #384]	; (800206c <MX_GPIO_Init+0x1f0>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a5f      	ldr	r2, [pc, #380]	; (800206c <MX_GPIO_Init+0x1f0>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b5d      	ldr	r3, [pc, #372]	; (800206c <MX_GPIO_Init+0x1f0>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	4b59      	ldr	r3, [pc, #356]	; (800206c <MX_GPIO_Init+0x1f0>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a58      	ldr	r2, [pc, #352]	; (800206c <MX_GPIO_Init+0x1f0>)
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b56      	ldr	r3, [pc, #344]	; (800206c <MX_GPIO_Init+0x1f0>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
 8001f22:	4b52      	ldr	r3, [pc, #328]	; (800206c <MX_GPIO_Init+0x1f0>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a51      	ldr	r2, [pc, #324]	; (800206c <MX_GPIO_Init+0x1f0>)
 8001f28:	f043 0308 	orr.w	r3, r3, #8
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b4f      	ldr	r3, [pc, #316]	; (800206c <MX_GPIO_Init+0x1f0>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLAG_MCU_GPIO_Port, FLAG_MCU_Pin, GPIO_PIN_SET);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	2140      	movs	r1, #64	; 0x40
 8001f3e:	484c      	ldr	r0, [pc, #304]	; (8002070 <MX_GPIO_Init+0x1f4>)
 8001f40:	f003 ffba 	bl	8005eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRON_GPIO_Port, PWRON_Pin, GPIO_PIN_RESET);
 8001f44:	2200      	movs	r2, #0
 8001f46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f4a:	484a      	ldr	r0, [pc, #296]	; (8002074 <MX_GPIO_Init+0x1f8>)
 8001f4c:	f003 ffb4 	bl	8005eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, GPIO_PIN_RESET);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2101      	movs	r1, #1
 8001f54:	4848      	ldr	r0, [pc, #288]	; (8002078 <MX_GPIO_Init+0x1fc>)
 8001f56:	f003 ffaf 	bl	8005eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, O1_Pin|O2_Pin|CS1__Pin, GPIO_PIN_RESET);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2143      	movs	r1, #67	; 0x43
 8001f5e:	4847      	ldr	r0, [pc, #284]	; (800207c <MX_GPIO_Init+0x200>)
 8001f60:	f003 ffaa 	bl	8005eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, O3_Pin|O4_Pin|O5_Pin|O6_Pin
 8001f64:	2200      	movs	r2, #0
 8001f66:	f64f 7183 	movw	r1, #65411	; 0xff83
 8001f6a:	4841      	ldr	r0, [pc, #260]	; (8002070 <MX_GPIO_Init+0x1f4>)
 8001f6c:	f003 ffa4 	bl	8005eb8 <HAL_GPIO_WritePin>
                          |O7_Pin|S2_Pin|S3_Pin|S4_Pin
                          |S1_Pin|WP__Pin|CS2__Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PKEY_GPIO_Port, PKEY_Pin, GPIO_PIN_SET);
 8001f70:	2201      	movs	r2, #1
 8001f72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f76:	4840      	ldr	r0, [pc, #256]	; (8002078 <MX_GPIO_Init+0x1fc>)
 8001f78:	f003 ff9e 	bl	8005eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WR0_Pin|WR1_Pin|PWR0_Pin|PWR1_Pin
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	219f      	movs	r1, #159	; 0x9f
 8001f80:	483f      	ldr	r0, [pc, #252]	; (8002080 <MX_GPIO_Init+0x204>)
 8001f82:	f003 ff99 	bl	8005eb8 <HAL_GPIO_WritePin>
                          |RS485_DE_Pin|RS485_RE__Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FLAG_MCU_Pin|O3_Pin|O4_Pin|O5_Pin
 8001f86:	f64f 73c3 	movw	r3, #65475	; 0xffc3
 8001f8a:	61fb      	str	r3, [r7, #28]
                          |O6_Pin|O7_Pin|S2_Pin|S3_Pin
                          |S4_Pin|S1_Pin|WP__Pin|CS2__Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f94:	2303      	movs	r3, #3
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f98:	f107 031c 	add.w	r3, r7, #28
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4834      	ldr	r0, [pc, #208]	; (8002070 <MX_GPIO_Init+0x1f4>)
 8001fa0:	f003 fdd6 	bl	8005b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWRON_Pin;
 8001fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001faa:	2301      	movs	r3, #1
 8001fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PWRON_GPIO_Port, &GPIO_InitStruct);
 8001fb6:	f107 031c 	add.w	r3, r7, #28
 8001fba:	4619      	mov	r1, r3
 8001fbc:	482d      	ldr	r0, [pc, #180]	; (8002074 <MX_GPIO_Init+0x1f8>)
 8001fbe:	f003 fdc7 	bl	8005b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS__M_Pin;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CS__M_GPIO_Port, &GPIO_InitStruct);
 8001fce:	f107 031c 	add.w	r3, r7, #28
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4827      	ldr	r0, [pc, #156]	; (8002074 <MX_GPIO_Init+0x1f8>)
 8001fd6:	f003 fdbb 	bl	8005b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = O0_Pin|PKEY_Pin;
 8001fda:	f640 0301 	movw	r3, #2049	; 0x801
 8001fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fec:	f107 031c 	add.w	r3, r7, #28
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4821      	ldr	r0, [pc, #132]	; (8002078 <MX_GPIO_Init+0x1fc>)
 8001ff4:	f003 fdac 	bl	8005b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = O1_Pin|O2_Pin|CS1__Pin;
 8001ff8:	2343      	movs	r3, #67	; 0x43
 8001ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002004:	2303      	movs	r3, #3
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002008:	f107 031c 	add.w	r3, r7, #28
 800200c:	4619      	mov	r1, r3
 800200e:	481b      	ldr	r0, [pc, #108]	; (800207c <MX_GPIO_Init+0x200>)
 8002010:	f003 fd9e 	bl	8005b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = IN7_Pin|IN6_Pin|IN5_Pin|IN4_Pin
 8002014:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002018:	61fb      	str	r3, [r7, #28]
                          |IN3_Pin|IN2_Pin|IN1_Pin|IN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201a:	2300      	movs	r3, #0
 800201c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002022:	f107 031c 	add.w	r3, r7, #28
 8002026:	4619      	mov	r1, r3
 8002028:	4815      	ldr	r0, [pc, #84]	; (8002080 <MX_GPIO_Init+0x204>)
 800202a:	f003 fd91 	bl	8005b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = WR0_Pin|WR1_Pin|PWR0_Pin|PWR1_Pin
 800202e:	239f      	movs	r3, #159	; 0x9f
 8002030:	61fb      	str	r3, [r7, #28]
                          |RS485_DE_Pin|RS485_RE__Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002032:	2301      	movs	r3, #1
 8002034:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203a:	2303      	movs	r3, #3
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800203e:	f107 031c 	add.w	r3, r7, #28
 8002042:	4619      	mov	r1, r3
 8002044:	480e      	ldr	r0, [pc, #56]	; (8002080 <MX_GPIO_Init+0x204>)
 8002046:	f003 fd83 	bl	8005b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CD_Pin;
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 8002056:	f107 031c 	add.w	r3, r7, #28
 800205a:	4619      	mov	r1, r3
 800205c:	4807      	ldr	r0, [pc, #28]	; (800207c <MX_GPIO_Init+0x200>)
 800205e:	f003 fd77 	bl	8005b50 <HAL_GPIO_Init>

}
 8002062:	bf00      	nop
 8002064:	3730      	adds	r7, #48	; 0x30
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800
 8002070:	40021000 	.word	0x40021000
 8002074:	40020800 	.word	0x40020800
 8002078:	40020000 	.word	0x40020000
 800207c:	40020400 	.word	0x40020400
 8002080:	40020c00 	.word	0x40020c00

08002084 <clear_string>:
	  }
  }
}
//Функция удаления символов \r и \n из строки
void clear_string(char *src)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	char *dst = NULL;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
	if(!src) return;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d02f      	beq.n	80020f6 <clear_string+0x72>
	uint8_t i = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	72fb      	strb	r3, [r7, #11]

	for(dst = src; *src; src++)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	e022      	b.n	80020e6 <clear_string+0x62>
	{
		if(i < 2 && (*src == '\n' || *src == '\r'))
 80020a0:	7afb      	ldrb	r3, [r7, #11]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d80b      	bhi.n	80020be <clear_string+0x3a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b0a      	cmp	r3, #10
 80020ac:	d003      	beq.n	80020b6 <clear_string+0x32>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b0d      	cmp	r3, #13
 80020b4:	d103      	bne.n	80020be <clear_string+0x3a>
		{
			i++;
 80020b6:	7afb      	ldrb	r3, [r7, #11]
 80020b8:	3301      	adds	r3, #1
 80020ba:	72fb      	strb	r3, [r7, #11]
			continue;
 80020bc:	e010      	b.n	80020e0 <clear_string+0x5c>
		}
		else if(*src == '\n' || *src == '\r') *src = ' ';
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b0a      	cmp	r3, #10
 80020c4:	d003      	beq.n	80020ce <clear_string+0x4a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b0d      	cmp	r3, #13
 80020cc:	d102      	bne.n	80020d4 <clear_string+0x50>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2220      	movs	r2, #32
 80020d2:	701a      	strb	r2, [r3, #0]

		*dst++ = *src;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	60fa      	str	r2, [r7, #12]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	7812      	ldrb	r2, [r2, #0]
 80020de:	701a      	strb	r2, [r3, #0]
	for(dst = src; *src; src++)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3301      	adds	r3, #1
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1d8      	bne.n	80020a0 <clear_string+0x1c>
	}

	*dst = 0;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
 80020f4:	e000      	b.n	80020f8 <clear_string+0x74>
	if(!src) return;
 80020f6:	bf00      	nop
}
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <parseValue>:

//Функция разбора подстроки значений параметра
//Принимает указатель на массив символов со значениями параметра
//Ворзвращает указатель на разобранный массив символов со значениями параметра
char *parseValue(char *value)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	char *tmp;
	for(int i = 1, j = 0; i < strlen(value); i++)
 800210c:	2301      	movs	r3, #1
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	e013      	b.n	800213e <parseValue+0x3a>
	{
		if(i % 2)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00b      	beq.n	8002138 <parseValue+0x34>
		{
			paramValue[j] = value[i];
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	7819      	ldrb	r1, [r3, #0]
 8002128:	4a0c      	ldr	r2, [pc, #48]	; (800215c <parseValue+0x58>)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	460a      	mov	r2, r1
 8002130:	701a      	strb	r2, [r3, #0]
			j++;
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	3301      	adds	r3, #1
 8002136:	613b      	str	r3, [r7, #16]
	for(int i = 1, j = 0; i < strlen(value); i++)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	3301      	adds	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7fe f850 	bl	80001e4 <strlen>
 8002144:	4602      	mov	r2, r0
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	429a      	cmp	r2, r3
 800214a:	d8e4      	bhi.n	8002116 <parseValue+0x12>
		}
	}
	tmp = paramValue;
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <parseValue+0x58>)
 800214e:	60fb      	str	r3, [r7, #12]

	return tmp;
 8002150:	68fb      	ldr	r3, [r7, #12]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000594 	.word	0x20000594

08002160 <json_input>:
//Функция разбора полученной строки
void json_input(char *text)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b09e      	sub	sp, #120	; 0x78
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	cJSON *json = cJSON_Parse(text);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff fbed 	bl	8001948 <cJSON_Parse>
 800216e:	6678      	str	r0, [r7, #100]	; 0x64

	cJSON *stime = cJSON_GetObjectItem(json, "TIME");
 8002170:	4966      	ldr	r1, [pc, #408]	; (800230c <json_input+0x1ac>)
 8002172:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002174:	f7ff fda2 	bl	8001cbc <cJSON_GetObjectItem>
 8002178:	6638      	str	r0, [r7, #96]	; 0x60
	TIME = stime->valuestring;
 800217a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	4a64      	ldr	r2, [pc, #400]	; (8002310 <json_input+0x1b0>)
 8002180:	6013      	str	r3, [r2, #0]
	Time_Server = atoi(TIME);
 8002182:	4b63      	ldr	r3, [pc, #396]	; (8002310 <json_input+0x1b0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f012 fc60 	bl	8014a4c <atoi>
 800218c:	4603      	mov	r3, r0
 800218e:	4a61      	ldr	r2, [pc, #388]	; (8002314 <json_input+0x1b4>)
 8002190:	6013      	str	r3, [r2, #0]
	if(Time_Server > Time_Client)
 8002192:	4b60      	ldr	r3, [pc, #384]	; (8002314 <json_input+0x1b4>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4b60      	ldr	r3, [pc, #384]	; (8002318 <json_input+0x1b8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	f340 83d8 	ble.w	8002950 <json_input+0x7f0>
	{
		cJSON *sInstruction = cJSON_GetObjectItem(json, "INSTRUCTION");
 80021a0:	495e      	ldr	r1, [pc, #376]	; (800231c <json_input+0x1bc>)
 80021a2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80021a4:	f7ff fd8a 	bl	8001cbc <cJSON_GetObjectItem>
 80021a8:	65f8      	str	r0, [r7, #92]	; 0x5c
		INSTRUCTION = sInstruction->valuestring;
 80021aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	4a5c      	ldr	r2, [pc, #368]	; (8002320 <json_input+0x1c0>)
 80021b0:	6013      	str	r3, [r2, #0]

		if(strcmp(INSTRUCTION, "SET_PROGRAMM") == 0)
 80021b2:	4b5b      	ldr	r3, [pc, #364]	; (8002320 <json_input+0x1c0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	495b      	ldr	r1, [pc, #364]	; (8002324 <json_input+0x1c4>)
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe f809 	bl	80001d0 <strcmp>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f040 8239 	bne.w	8002638 <json_input+0x4d8>
		{
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 80021c6:	4958      	ldr	r1, [pc, #352]	; (8002328 <json_input+0x1c8>)
 80021c8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80021ca:	f7ff fd77 	bl	8001cbc <cJSON_GetObjectItem>
 80021ce:	4603      	mov	r3, r0
 80021d0:	4956      	ldr	r1, [pc, #344]	; (800232c <json_input+0x1cc>)
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fd72 	bl	8001cbc <cJSON_GetObjectItem>
 80021d8:	6478      	str	r0, [r7, #68]	; 0x44
			TYPE = sType->valuestring;
 80021da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	4a54      	ldr	r2, [pc, #336]	; (8002330 <json_input+0x1d0>)
 80021e0:	6013      	str	r3, [r2, #0]
			if(strcmp(TYPE, "SET_DIDO") == 0)	//Включить/выключить цифровой выход если цифровой вход = значение(уровень)
 80021e2:	4b53      	ldr	r3, [pc, #332]	; (8002330 <json_input+0x1d0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4953      	ldr	r1, [pc, #332]	; (8002334 <json_input+0x1d4>)
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fd fff1 	bl	80001d0 <strcmp>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f040 80b3 	bne.w	800235c <json_input+0x1fc>
			{
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_IN");
 80021f6:	494c      	ldr	r1, [pc, #304]	; (8002328 <json_input+0x1c8>)
 80021f8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80021fa:	f7ff fd5f 	bl	8001cbc <cJSON_GetObjectItem>
 80021fe:	4603      	mov	r3, r0
 8002200:	494d      	ldr	r1, [pc, #308]	; (8002338 <json_input+0x1d8>)
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fd5a 	bl	8001cbc <cJSON_GetObjectItem>
 8002208:	61b8      	str	r0, [r7, #24]
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_IN");
 800220a:	4947      	ldr	r1, [pc, #284]	; (8002328 <json_input+0x1c8>)
 800220c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800220e:	f7ff fd55 	bl	8001cbc <cJSON_GetObjectItem>
 8002212:	4603      	mov	r3, r0
 8002214:	4949      	ldr	r1, [pc, #292]	; (800233c <json_input+0x1dc>)
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fd50 	bl	8001cbc <cJSON_GetObjectItem>
 800221c:	6178      	str	r0, [r7, #20]
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 800221e:	4942      	ldr	r1, [pc, #264]	; (8002328 <json_input+0x1c8>)
 8002220:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002222:	f7ff fd4b 	bl	8001cbc <cJSON_GetObjectItem>
 8002226:	4603      	mov	r3, r0
 8002228:	4945      	ldr	r1, [pc, #276]	; (8002340 <json_input+0x1e0>)
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fd46 	bl	8001cbc <cJSON_GetObjectItem>
 8002230:	6138      	str	r0, [r7, #16]
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8002232:	493d      	ldr	r1, [pc, #244]	; (8002328 <json_input+0x1c8>)
 8002234:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002236:	f7ff fd41 	bl	8001cbc <cJSON_GetObjectItem>
 800223a:	4603      	mov	r3, r0
 800223c:	4941      	ldr	r1, [pc, #260]	; (8002344 <json_input+0x1e4>)
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fd3c 	bl	8001cbc <cJSON_GetObjectItem>
 8002244:	60f8      	str	r0, [r7, #12]

				D_IN = s1->valuestring;
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	4a3f      	ldr	r2, [pc, #252]	; (8002348 <json_input+0x1e8>)
 800224c:	6013      	str	r3, [r2, #0]
				VAR_IN = s2->valuestring;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	4a3e      	ldr	r2, [pc, #248]	; (800234c <json_input+0x1ec>)
 8002254:	6013      	str	r3, [r2, #0]
				D_OUT = s3->valuestring;
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	4a3d      	ldr	r2, [pc, #244]	; (8002350 <json_input+0x1f0>)
 800225c:	6013      	str	r3, [r2, #0]
				VAR_OUT = s4->valuestring;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	4a3c      	ldr	r2, [pc, #240]	; (8002354 <json_input+0x1f4>)
 8002264:	6013      	str	r3, [r2, #0]


				set_dido(D_IN, (VAR_IN - 0x30), D_OUT, (VAR_OUT - 0x30));
 8002266:	4b38      	ldr	r3, [pc, #224]	; (8002348 <json_input+0x1e8>)
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	4b38      	ldr	r3, [pc, #224]	; (800234c <json_input+0x1ec>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	3b30      	subs	r3, #48	; 0x30
 8002270:	b2d9      	uxtb	r1, r3
 8002272:	4b37      	ldr	r3, [pc, #220]	; (8002350 <json_input+0x1f0>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	4b37      	ldr	r3, [pc, #220]	; (8002354 <json_input+0x1f4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	3b30      	subs	r3, #48	; 0x30
 800227c:	b2db      	uxtb	r3, r3
 800227e:	f000 fb71 	bl	8002964 <set_dido>

				SEND_str("\n");
 8002282:	4835      	ldr	r0, [pc, #212]	; (8002358 <json_input+0x1f8>)
 8002284:	f7ff fd50 	bl	8001d28 <SEND_str>
				SEND_str(TYPE);
 8002288:	4b29      	ldr	r3, [pc, #164]	; (8002330 <json_input+0x1d0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fd4b 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 8002292:	4831      	ldr	r0, [pc, #196]	; (8002358 <json_input+0x1f8>)
 8002294:	f7ff fd48 	bl	8001d28 <SEND_str>
				SEND_str(D_IN);
 8002298:	4b2b      	ldr	r3, [pc, #172]	; (8002348 <json_input+0x1e8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fd43 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 80022a2:	482d      	ldr	r0, [pc, #180]	; (8002358 <json_input+0x1f8>)
 80022a4:	f7ff fd40 	bl	8001d28 <SEND_str>
				SEND_str(VAR_IN);
 80022a8:	4b28      	ldr	r3, [pc, #160]	; (800234c <json_input+0x1ec>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fd3b 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 80022b2:	4829      	ldr	r0, [pc, #164]	; (8002358 <json_input+0x1f8>)
 80022b4:	f7ff fd38 	bl	8001d28 <SEND_str>
				SEND_str(D_OUT);
 80022b8:	4b25      	ldr	r3, [pc, #148]	; (8002350 <json_input+0x1f0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fd33 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 80022c2:	4825      	ldr	r0, [pc, #148]	; (8002358 <json_input+0x1f8>)
 80022c4:	f7ff fd30 	bl	8001d28 <SEND_str>
				SEND_str(VAR_OUT);
 80022c8:	4b22      	ldr	r3, [pc, #136]	; (8002354 <json_input+0x1f4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fd2b 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 80022d2:	4821      	ldr	r0, [pc, #132]	; (8002358 <json_input+0x1f8>)
 80022d4:	f7ff fd28 	bl	8001d28 <SEND_str>

				cJSON_Delete(json);
 80022d8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80022da:	f7fe ff0d 	bl	80010f8 <cJSON_Delete>
				free(stime);
 80022de:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80022e0:	f012 fbe4 	bl	8014aac <free>
				free(sInstruction);
 80022e4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80022e6:	f012 fbe1 	bl	8014aac <free>
				free(sType);
 80022ea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80022ec:	f012 fbde 	bl	8014aac <free>
				free(s1);
 80022f0:	69b8      	ldr	r0, [r7, #24]
 80022f2:	f012 fbdb 	bl	8014aac <free>
				free(s2);
 80022f6:	6978      	ldr	r0, [r7, #20]
 80022f8:	f012 fbd8 	bl	8014aac <free>
				free(s3);
 80022fc:	6938      	ldr	r0, [r7, #16]
 80022fe:	f012 fbd5 	bl	8014aac <free>
				free(s4);
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f012 fbd2 	bl	8014aac <free>
	else
	{
		cJSON_Delete(json);
		free(stime);
	}
}
 8002308:	e328      	b.n	800295c <json_input+0x7fc>
 800230a:	bf00      	nop
 800230c:	08018c24 	.word	0x08018c24
 8002310:	20000578 	.word	0x20000578
 8002314:	20000298 	.word	0x20000298
 8002318:	2000029c 	.word	0x2000029c
 800231c:	08018c2c 	.word	0x08018c2c
 8002320:	200005b4 	.word	0x200005b4
 8002324:	08018c38 	.word	0x08018c38
 8002328:	08018c48 	.word	0x08018c48
 800232c:	08018c50 	.word	0x08018c50
 8002330:	20000570 	.word	0x20000570
 8002334:	08018c58 	.word	0x08018c58
 8002338:	08018c64 	.word	0x08018c64
 800233c:	08018c6c 	.word	0x08018c6c
 8002340:	08018c74 	.word	0x08018c74
 8002344:	08018c7c 	.word	0x08018c7c
 8002348:	200005a8 	.word	0x200005a8
 800234c:	2000057c 	.word	0x2000057c
 8002350:	200005a0 	.word	0x200005a0
 8002354:	20000584 	.word	0x20000584
 8002358:	08018c84 	.word	0x08018c84
			else if(strcmp(TYPE, "SET_AIDO") == 0)	//Включить/выключить один цифровой выход если аналоговый вход в интервале значений
 800235c:	4ba5      	ldr	r3, [pc, #660]	; (80025f4 <json_input+0x494>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	49a5      	ldr	r1, [pc, #660]	; (80025f8 <json_input+0x498>)
 8002362:	4618      	mov	r0, r3
 8002364:	f7fd ff34 	bl	80001d0 <strcmp>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 8095 	bne.w	800249a <json_input+0x33a>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_IN");
 8002370:	49a2      	ldr	r1, [pc, #648]	; (80025fc <json_input+0x49c>)
 8002372:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002374:	f7ff fca2 	bl	8001cbc <cJSON_GetObjectItem>
 8002378:	4603      	mov	r3, r0
 800237a:	49a1      	ldr	r1, [pc, #644]	; (8002600 <json_input+0x4a0>)
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fc9d 	bl	8001cbc <cJSON_GetObjectItem>
 8002382:	62f8      	str	r0, [r7, #44]	; 0x2c
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_LOW");
 8002384:	499d      	ldr	r1, [pc, #628]	; (80025fc <json_input+0x49c>)
 8002386:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002388:	f7ff fc98 	bl	8001cbc <cJSON_GetObjectItem>
 800238c:	4603      	mov	r3, r0
 800238e:	499d      	ldr	r1, [pc, #628]	; (8002604 <json_input+0x4a4>)
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fc93 	bl	8001cbc <cJSON_GetObjectItem>
 8002396:	62b8      	str	r0, [r7, #40]	; 0x28
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_HIGH");
 8002398:	4998      	ldr	r1, [pc, #608]	; (80025fc <json_input+0x49c>)
 800239a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800239c:	f7ff fc8e 	bl	8001cbc <cJSON_GetObjectItem>
 80023a0:	4603      	mov	r3, r0
 80023a2:	4999      	ldr	r1, [pc, #612]	; (8002608 <json_input+0x4a8>)
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fc89 	bl	8001cbc <cJSON_GetObjectItem>
 80023aa:	6278      	str	r0, [r7, #36]	; 0x24
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 80023ac:	4993      	ldr	r1, [pc, #588]	; (80025fc <json_input+0x49c>)
 80023ae:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80023b0:	f7ff fc84 	bl	8001cbc <cJSON_GetObjectItem>
 80023b4:	4603      	mov	r3, r0
 80023b6:	4995      	ldr	r1, [pc, #596]	; (800260c <json_input+0x4ac>)
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fc7f 	bl	8001cbc <cJSON_GetObjectItem>
 80023be:	6238      	str	r0, [r7, #32]
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 80023c0:	498e      	ldr	r1, [pc, #568]	; (80025fc <json_input+0x49c>)
 80023c2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80023c4:	f7ff fc7a 	bl	8001cbc <cJSON_GetObjectItem>
 80023c8:	4603      	mov	r3, r0
 80023ca:	4991      	ldr	r1, [pc, #580]	; (8002610 <json_input+0x4b0>)
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fc75 	bl	8001cbc <cJSON_GetObjectItem>
 80023d2:	61f8      	str	r0, [r7, #28]
				A_IN = s1->valuestring;
 80023d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	4a8e      	ldr	r2, [pc, #568]	; (8002614 <json_input+0x4b4>)
 80023da:	6013      	str	r3, [r2, #0]
				RANGE_LOW = s2->valuestring;
 80023dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	4a8d      	ldr	r2, [pc, #564]	; (8002618 <json_input+0x4b8>)
 80023e2:	6013      	str	r3, [r2, #0]
				RANGE_HIGH = s3->valuestring;
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	4a8c      	ldr	r2, [pc, #560]	; (800261c <json_input+0x4bc>)
 80023ea:	6013      	str	r3, [r2, #0]
				D_OUT = s4->valuestring;
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	4a8b      	ldr	r2, [pc, #556]	; (8002620 <json_input+0x4c0>)
 80023f2:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	4a8a      	ldr	r2, [pc, #552]	; (8002624 <json_input+0x4c4>)
 80023fa:	6013      	str	r3, [r2, #0]
				SEND_str("\n");
 80023fc:	488a      	ldr	r0, [pc, #552]	; (8002628 <json_input+0x4c8>)
 80023fe:	f7ff fc93 	bl	8001d28 <SEND_str>
				SEND_str(TYPE);
 8002402:	4b7c      	ldr	r3, [pc, #496]	; (80025f4 <json_input+0x494>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fc8e 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800240c:	4886      	ldr	r0, [pc, #536]	; (8002628 <json_input+0x4c8>)
 800240e:	f7ff fc8b 	bl	8001d28 <SEND_str>
				SEND_str(A_IN);
 8002412:	4b80      	ldr	r3, [pc, #512]	; (8002614 <json_input+0x4b4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fc86 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800241c:	4882      	ldr	r0, [pc, #520]	; (8002628 <json_input+0x4c8>)
 800241e:	f7ff fc83 	bl	8001d28 <SEND_str>
				SEND_str(RANGE_LOW);
 8002422:	4b7d      	ldr	r3, [pc, #500]	; (8002618 <json_input+0x4b8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fc7e 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800242c:	487e      	ldr	r0, [pc, #504]	; (8002628 <json_input+0x4c8>)
 800242e:	f7ff fc7b 	bl	8001d28 <SEND_str>
				SEND_str(RANGE_HIGH);
 8002432:	4b7a      	ldr	r3, [pc, #488]	; (800261c <json_input+0x4bc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fc76 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800243c:	487a      	ldr	r0, [pc, #488]	; (8002628 <json_input+0x4c8>)
 800243e:	f7ff fc73 	bl	8001d28 <SEND_str>
				SEND_str(D_OUT);
 8002442:	4b77      	ldr	r3, [pc, #476]	; (8002620 <json_input+0x4c0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fc6e 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800244c:	4876      	ldr	r0, [pc, #472]	; (8002628 <json_input+0x4c8>)
 800244e:	f7ff fc6b 	bl	8001d28 <SEND_str>
				SEND_str(VAR_OUT);
 8002452:	4b74      	ldr	r3, [pc, #464]	; (8002624 <json_input+0x4c4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fc66 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800245c:	4872      	ldr	r0, [pc, #456]	; (8002628 <json_input+0x4c8>)
 800245e:	f7ff fc63 	bl	8001d28 <SEND_str>
				cJSON_Delete(json);
 8002462:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002464:	f7fe fe48 	bl	80010f8 <cJSON_Delete>
				free(stime);
 8002468:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800246a:	f012 fb1f 	bl	8014aac <free>
				free(sInstruction);
 800246e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002470:	f012 fb1c 	bl	8014aac <free>
				free(sType);
 8002474:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002476:	f012 fb19 	bl	8014aac <free>
				free(s1);
 800247a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800247c:	f012 fb16 	bl	8014aac <free>
				free(s2);
 8002480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002482:	f012 fb13 	bl	8014aac <free>
				free(s3);
 8002486:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002488:	f012 fb10 	bl	8014aac <free>
				free(s4);
 800248c:	6a38      	ldr	r0, [r7, #32]
 800248e:	f012 fb0d 	bl	8014aac <free>
				free(s5);
 8002492:	69f8      	ldr	r0, [r7, #28]
 8002494:	f012 fb0a 	bl	8014aac <free>
}
 8002498:	e260      	b.n	800295c <json_input+0x7fc>
			else if(strcmp(TYPE, "SET_AIAO") == 0)	//Установить значение в аналоговый выход если аналоговый вход = значение
 800249a:	4b56      	ldr	r3, [pc, #344]	; (80025f4 <json_input+0x494>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4963      	ldr	r1, [pc, #396]	; (800262c <json_input+0x4cc>)
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fd fe95 	bl	80001d0 <strcmp>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f040 8095 	bne.w	80025d8 <json_input+0x478>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_IN");
 80024ae:	4953      	ldr	r1, [pc, #332]	; (80025fc <json_input+0x49c>)
 80024b0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80024b2:	f7ff fc03 	bl	8001cbc <cJSON_GetObjectItem>
 80024b6:	4603      	mov	r3, r0
 80024b8:	4951      	ldr	r1, [pc, #324]	; (8002600 <json_input+0x4a0>)
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fbfe 	bl	8001cbc <cJSON_GetObjectItem>
 80024c0:	6438      	str	r0, [r7, #64]	; 0x40
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_LOW");
 80024c2:	494e      	ldr	r1, [pc, #312]	; (80025fc <json_input+0x49c>)
 80024c4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80024c6:	f7ff fbf9 	bl	8001cbc <cJSON_GetObjectItem>
 80024ca:	4603      	mov	r3, r0
 80024cc:	494d      	ldr	r1, [pc, #308]	; (8002604 <json_input+0x4a4>)
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fbf4 	bl	8001cbc <cJSON_GetObjectItem>
 80024d4:	63f8      	str	r0, [r7, #60]	; 0x3c
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "RANGE_HIGH");
 80024d6:	4949      	ldr	r1, [pc, #292]	; (80025fc <json_input+0x49c>)
 80024d8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80024da:	f7ff fbef 	bl	8001cbc <cJSON_GetObjectItem>
 80024de:	4603      	mov	r3, r0
 80024e0:	4949      	ldr	r1, [pc, #292]	; (8002608 <json_input+0x4a8>)
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fbea 	bl	8001cbc <cJSON_GetObjectItem>
 80024e8:	63b8      	str	r0, [r7, #56]	; 0x38
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "A_OUT");
 80024ea:	4944      	ldr	r1, [pc, #272]	; (80025fc <json_input+0x49c>)
 80024ec:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80024ee:	f7ff fbe5 	bl	8001cbc <cJSON_GetObjectItem>
 80024f2:	4603      	mov	r3, r0
 80024f4:	494e      	ldr	r1, [pc, #312]	; (8002630 <json_input+0x4d0>)
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fbe0 	bl	8001cbc <cJSON_GetObjectItem>
 80024fc:	6378      	str	r0, [r7, #52]	; 0x34
				cJSON *s5 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 80024fe:	493f      	ldr	r1, [pc, #252]	; (80025fc <json_input+0x49c>)
 8002500:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002502:	f7ff fbdb 	bl	8001cbc <cJSON_GetObjectItem>
 8002506:	4603      	mov	r3, r0
 8002508:	4941      	ldr	r1, [pc, #260]	; (8002610 <json_input+0x4b0>)
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fbd6 	bl	8001cbc <cJSON_GetObjectItem>
 8002510:	6338      	str	r0, [r7, #48]	; 0x30
				A_IN = s1->valuestring;
 8002512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	4a3f      	ldr	r2, [pc, #252]	; (8002614 <json_input+0x4b4>)
 8002518:	6013      	str	r3, [r2, #0]
				RANGE_LOW = s2->valuestring;
 800251a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	4a3e      	ldr	r2, [pc, #248]	; (8002618 <json_input+0x4b8>)
 8002520:	6013      	str	r3, [r2, #0]
				RANGE_HIGH = s3->valuestring;
 8002522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	4a3d      	ldr	r2, [pc, #244]	; (800261c <json_input+0x4bc>)
 8002528:	6013      	str	r3, [r2, #0]
				A_OUT = s4->valuestring;
 800252a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	4a41      	ldr	r2, [pc, #260]	; (8002634 <json_input+0x4d4>)
 8002530:	6013      	str	r3, [r2, #0]
				VAR_OUT = s5->valuestring;
 8002532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	4a3b      	ldr	r2, [pc, #236]	; (8002624 <json_input+0x4c4>)
 8002538:	6013      	str	r3, [r2, #0]
				SEND_str("\n");
 800253a:	483b      	ldr	r0, [pc, #236]	; (8002628 <json_input+0x4c8>)
 800253c:	f7ff fbf4 	bl	8001d28 <SEND_str>
				SEND_str(TYPE);
 8002540:	4b2c      	ldr	r3, [pc, #176]	; (80025f4 <json_input+0x494>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fbef 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800254a:	4837      	ldr	r0, [pc, #220]	; (8002628 <json_input+0x4c8>)
 800254c:	f7ff fbec 	bl	8001d28 <SEND_str>
				SEND_str(A_IN);
 8002550:	4b30      	ldr	r3, [pc, #192]	; (8002614 <json_input+0x4b4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fbe7 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800255a:	4833      	ldr	r0, [pc, #204]	; (8002628 <json_input+0x4c8>)
 800255c:	f7ff fbe4 	bl	8001d28 <SEND_str>
				SEND_str(RANGE_LOW);
 8002560:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <json_input+0x4b8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fbdf 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800256a:	482f      	ldr	r0, [pc, #188]	; (8002628 <json_input+0x4c8>)
 800256c:	f7ff fbdc 	bl	8001d28 <SEND_str>
				SEND_str(RANGE_HIGH);
 8002570:	4b2a      	ldr	r3, [pc, #168]	; (800261c <json_input+0x4bc>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fbd7 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800257a:	482b      	ldr	r0, [pc, #172]	; (8002628 <json_input+0x4c8>)
 800257c:	f7ff fbd4 	bl	8001d28 <SEND_str>
				SEND_str(A_OUT);
 8002580:	4b2c      	ldr	r3, [pc, #176]	; (8002634 <json_input+0x4d4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fbcf 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800258a:	4827      	ldr	r0, [pc, #156]	; (8002628 <json_input+0x4c8>)
 800258c:	f7ff fbcc 	bl	8001d28 <SEND_str>
				SEND_str(VAR_OUT);
 8002590:	4b24      	ldr	r3, [pc, #144]	; (8002624 <json_input+0x4c4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fbc7 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800259a:	4823      	ldr	r0, [pc, #140]	; (8002628 <json_input+0x4c8>)
 800259c:	f7ff fbc4 	bl	8001d28 <SEND_str>
				cJSON_Delete(json);
 80025a0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80025a2:	f7fe fda9 	bl	80010f8 <cJSON_Delete>
				free(stime);
 80025a6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80025a8:	f012 fa80 	bl	8014aac <free>
				free(sInstruction);
 80025ac:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80025ae:	f012 fa7d 	bl	8014aac <free>
				free(sType);
 80025b2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80025b4:	f012 fa7a 	bl	8014aac <free>
				free(s1);
 80025b8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80025ba:	f012 fa77 	bl	8014aac <free>
				free(s2);
 80025be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80025c0:	f012 fa74 	bl	8014aac <free>
				free(s3);
 80025c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80025c6:	f012 fa71 	bl	8014aac <free>
				free(s4);
 80025ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80025cc:	f012 fa6e 	bl	8014aac <free>
				free(s5);
 80025d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025d2:	f012 fa6b 	bl	8014aac <free>
}
 80025d6:	e1c1      	b.n	800295c <json_input+0x7fc>
				cJSON_Delete(json);
 80025d8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80025da:	f7fe fd8d 	bl	80010f8 <cJSON_Delete>
				free(stime);
 80025de:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80025e0:	f012 fa64 	bl	8014aac <free>
				free(sInstruction);
 80025e4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80025e6:	f012 fa61 	bl	8014aac <free>
				free(sType);
 80025ea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80025ec:	f012 fa5e 	bl	8014aac <free>
}
 80025f0:	e1b4      	b.n	800295c <json_input+0x7fc>
 80025f2:	bf00      	nop
 80025f4:	20000570 	.word	0x20000570
 80025f8:	08018c88 	.word	0x08018c88
 80025fc:	08018c48 	.word	0x08018c48
 8002600:	08018c94 	.word	0x08018c94
 8002604:	08018c9c 	.word	0x08018c9c
 8002608:	08018ca8 	.word	0x08018ca8
 800260c:	08018c74 	.word	0x08018c74
 8002610:	08018c7c 	.word	0x08018c7c
 8002614:	200005b0 	.word	0x200005b0
 8002618:	20000588 	.word	0x20000588
 800261c:	200005a4 	.word	0x200005a4
 8002620:	200005a0 	.word	0x200005a0
 8002624:	20000584 	.word	0x20000584
 8002628:	08018c84 	.word	0x08018c84
 800262c:	08018cb4 	.word	0x08018cb4
 8002630:	08018cc0 	.word	0x08018cc0
 8002634:	2000059c 	.word	0x2000059c
		else if(strcmp(INSTRUCTION, "SET_PERIPHERALS") == 0)
 8002638:	4ba9      	ldr	r3, [pc, #676]	; (80028e0 <json_input+0x780>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	49a9      	ldr	r1, [pc, #676]	; (80028e4 <json_input+0x784>)
 800263e:	4618      	mov	r0, r3
 8002640:	f7fd fdc6 	bl	80001d0 <strcmp>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	f040 817b 	bne.w	8002942 <json_input+0x7e2>
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 800264c:	49a6      	ldr	r1, [pc, #664]	; (80028e8 <json_input+0x788>)
 800264e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002650:	f7ff fb34 	bl	8001cbc <cJSON_GetObjectItem>
 8002654:	4603      	mov	r3, r0
 8002656:	49a5      	ldr	r1, [pc, #660]	; (80028ec <json_input+0x78c>)
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fb2f 	bl	8001cbc <cJSON_GetObjectItem>
 800265e:	65b8      	str	r0, [r7, #88]	; 0x58
			TYPE = sType->valuestring;
 8002660:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	4aa2      	ldr	r2, [pc, #648]	; (80028f0 <json_input+0x790>)
 8002666:	6013      	str	r3, [r2, #0]
			if(strcmp(TYPE, "DIGITAL") == 0)
 8002668:	4ba1      	ldr	r3, [pc, #644]	; (80028f0 <json_input+0x790>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	49a1      	ldr	r1, [pc, #644]	; (80028f4 <json_input+0x794>)
 800266e:	4618      	mov	r0, r3
 8002670:	f7fd fdae 	bl	80001d0 <strcmp>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d145      	bne.n	8002706 <json_input+0x5a6>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 800267a:	499b      	ldr	r1, [pc, #620]	; (80028e8 <json_input+0x788>)
 800267c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800267e:	f7ff fb1d 	bl	8001cbc <cJSON_GetObjectItem>
 8002682:	4603      	mov	r3, r0
 8002684:	499c      	ldr	r1, [pc, #624]	; (80028f8 <json_input+0x798>)
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fb18 	bl	8001cbc <cJSON_GetObjectItem>
 800268c:	64b8      	str	r0, [r7, #72]	; 0x48
				DigitalParamMass = s1->valuestring;
 800268e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	4a9a      	ldr	r2, [pc, #616]	; (80028fc <json_input+0x79c>)
 8002694:	6013      	str	r3, [r2, #0]
				test = parseValue(DigitalParamMass);
 8002696:	4b99      	ldr	r3, [pc, #612]	; (80028fc <json_input+0x79c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fd32 	bl	8002104 <parseValue>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4a97      	ldr	r2, [pc, #604]	; (8002900 <json_input+0x7a0>)
 80026a4:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < 8; i++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	677b      	str	r3, [r7, #116]	; 0x74
 80026aa:	e00e      	b.n	80026ca <json_input+0x56a>
					Status_DIN[i] = (test[i] - 0x30);
 80026ac:	4b94      	ldr	r3, [pc, #592]	; (8002900 <json_input+0x7a0>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026b2:	4413      	add	r3, r2
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	3b30      	subs	r3, #48	; 0x30
 80026b8:	b2d9      	uxtb	r1, r3
 80026ba:	4a92      	ldr	r2, [pc, #584]	; (8002904 <json_input+0x7a4>)
 80026bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026be:	4413      	add	r3, r2
 80026c0:	460a      	mov	r2, r1
 80026c2:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 80026c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026c6:	3301      	adds	r3, #1
 80026c8:	677b      	str	r3, [r7, #116]	; 0x74
 80026ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026cc:	2b07      	cmp	r3, #7
 80026ce:	dded      	ble.n	80026ac <json_input+0x54c>
				SEND_str("\n");
 80026d0:	488d      	ldr	r0, [pc, #564]	; (8002908 <json_input+0x7a8>)
 80026d2:	f7ff fb29 	bl	8001d28 <SEND_str>
				SEND_str(TYPE);
 80026d6:	4b86      	ldr	r3, [pc, #536]	; (80028f0 <json_input+0x790>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fb24 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 80026e0:	4889      	ldr	r0, [pc, #548]	; (8002908 <json_input+0x7a8>)
 80026e2:	f7ff fb21 	bl	8001d28 <SEND_str>
				cJSON_Delete(json);
 80026e6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80026e8:	f7fe fd06 	bl	80010f8 <cJSON_Delete>
				free(stime);
 80026ec:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80026ee:	f012 f9dd 	bl	8014aac <free>
				free(sInstruction);
 80026f2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80026f4:	f012 f9da 	bl	8014aac <free>
				free(sType);
 80026f8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80026fa:	f012 f9d7 	bl	8014aac <free>
				free(s1);
 80026fe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002700:	f012 f9d4 	bl	8014aac <free>
}
 8002704:	e12a      	b.n	800295c <json_input+0x7fc>
			else if(strcmp(TYPE, "ANALOG") == 0)
 8002706:	4b7a      	ldr	r3, [pc, #488]	; (80028f0 <json_input+0x790>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4980      	ldr	r1, [pc, #512]	; (800290c <json_input+0x7ac>)
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd fd5f 	bl	80001d0 <strcmp>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d145      	bne.n	80027a4 <json_input+0x644>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 8002718:	4973      	ldr	r1, [pc, #460]	; (80028e8 <json_input+0x788>)
 800271a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800271c:	f7ff face 	bl	8001cbc <cJSON_GetObjectItem>
 8002720:	4603      	mov	r3, r0
 8002722:	4975      	ldr	r1, [pc, #468]	; (80028f8 <json_input+0x798>)
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fac9 	bl	8001cbc <cJSON_GetObjectItem>
 800272a:	64f8      	str	r0, [r7, #76]	; 0x4c
				AnalogParamMass = s1->valuestring;
 800272c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	4a77      	ldr	r2, [pc, #476]	; (8002910 <json_input+0x7b0>)
 8002732:	6013      	str	r3, [r2, #0]
				test = parseValue(AnalogParamMass);
 8002734:	4b76      	ldr	r3, [pc, #472]	; (8002910 <json_input+0x7b0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fce3 	bl	8002104 <parseValue>
 800273e:	4603      	mov	r3, r0
 8002740:	4a6f      	ldr	r2, [pc, #444]	; (8002900 <json_input+0x7a0>)
 8002742:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < 8; i++)
 8002744:	2300      	movs	r3, #0
 8002746:	673b      	str	r3, [r7, #112]	; 0x70
 8002748:	e00e      	b.n	8002768 <json_input+0x608>
					Status_AIN[i] = (test[i] - 0x30);
 800274a:	4b6d      	ldr	r3, [pc, #436]	; (8002900 <json_input+0x7a0>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002750:	4413      	add	r3, r2
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	3b30      	subs	r3, #48	; 0x30
 8002756:	b2d9      	uxtb	r1, r3
 8002758:	4a6e      	ldr	r2, [pc, #440]	; (8002914 <json_input+0x7b4>)
 800275a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800275c:	4413      	add	r3, r2
 800275e:	460a      	mov	r2, r1
 8002760:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002762:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002764:	3301      	adds	r3, #1
 8002766:	673b      	str	r3, [r7, #112]	; 0x70
 8002768:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800276a:	2b07      	cmp	r3, #7
 800276c:	dded      	ble.n	800274a <json_input+0x5ea>
				SEND_str("\n");
 800276e:	4866      	ldr	r0, [pc, #408]	; (8002908 <json_input+0x7a8>)
 8002770:	f7ff fada 	bl	8001d28 <SEND_str>
				SEND_str(TYPE);
 8002774:	4b5e      	ldr	r3, [pc, #376]	; (80028f0 <json_input+0x790>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fad5 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800277e:	4862      	ldr	r0, [pc, #392]	; (8002908 <json_input+0x7a8>)
 8002780:	f7ff fad2 	bl	8001d28 <SEND_str>
				cJSON_Delete(json);
 8002784:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002786:	f7fe fcb7 	bl	80010f8 <cJSON_Delete>
				free(stime);
 800278a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800278c:	f012 f98e 	bl	8014aac <free>
				free(sInstruction);
 8002790:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002792:	f012 f98b 	bl	8014aac <free>
				free(sType);
 8002796:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002798:	f012 f988 	bl	8014aac <free>
				free(s1);
 800279c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800279e:	f012 f985 	bl	8014aac <free>
}
 80027a2:	e0db      	b.n	800295c <json_input+0x7fc>
			else if(strcmp(TYPE, "OCD") == 0)
 80027a4:	4b52      	ldr	r3, [pc, #328]	; (80028f0 <json_input+0x790>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	495b      	ldr	r1, [pc, #364]	; (8002918 <json_input+0x7b8>)
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fd fd10 	bl	80001d0 <strcmp>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d145      	bne.n	8002842 <json_input+0x6e2>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 80027b6:	494c      	ldr	r1, [pc, #304]	; (80028e8 <json_input+0x788>)
 80027b8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80027ba:	f7ff fa7f 	bl	8001cbc <cJSON_GetObjectItem>
 80027be:	4603      	mov	r3, r0
 80027c0:	494d      	ldr	r1, [pc, #308]	; (80028f8 <json_input+0x798>)
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fa7a 	bl	8001cbc <cJSON_GetObjectItem>
 80027c8:	6538      	str	r0, [r7, #80]	; 0x50
				OpenCollectorDrainParamMass = s1->valuestring;
 80027ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	4a53      	ldr	r2, [pc, #332]	; (800291c <json_input+0x7bc>)
 80027d0:	6013      	str	r3, [r2, #0]
				test = parseValue(OpenCollectorDrainParamMass);
 80027d2:	4b52      	ldr	r3, [pc, #328]	; (800291c <json_input+0x7bc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fc94 	bl	8002104 <parseValue>
 80027dc:	4603      	mov	r3, r0
 80027de:	4a48      	ldr	r2, [pc, #288]	; (8002900 <json_input+0x7a0>)
 80027e0:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < 8; i++)
 80027e2:	2300      	movs	r3, #0
 80027e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027e6:	e00e      	b.n	8002806 <json_input+0x6a6>
					Status_OCD[i] = (test[i] - 0x30);
 80027e8:	4b45      	ldr	r3, [pc, #276]	; (8002900 <json_input+0x7a0>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ee:	4413      	add	r3, r2
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	3b30      	subs	r3, #48	; 0x30
 80027f4:	b2d9      	uxtb	r1, r3
 80027f6:	4a4a      	ldr	r2, [pc, #296]	; (8002920 <json_input+0x7c0>)
 80027f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027fa:	4413      	add	r3, r2
 80027fc:	460a      	mov	r2, r1
 80027fe:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002802:	3301      	adds	r3, #1
 8002804:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002808:	2b07      	cmp	r3, #7
 800280a:	dded      	ble.n	80027e8 <json_input+0x688>
				SEND_str("\n");
 800280c:	483e      	ldr	r0, [pc, #248]	; (8002908 <json_input+0x7a8>)
 800280e:	f7ff fa8b 	bl	8001d28 <SEND_str>
				SEND_str(TYPE);
 8002812:	4b37      	ldr	r3, [pc, #220]	; (80028f0 <json_input+0x790>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fa86 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 800281c:	483a      	ldr	r0, [pc, #232]	; (8002908 <json_input+0x7a8>)
 800281e:	f7ff fa83 	bl	8001d28 <SEND_str>
				cJSON_Delete(json);
 8002822:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002824:	f7fe fc68 	bl	80010f8 <cJSON_Delete>
				free(stime);
 8002828:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800282a:	f012 f93f 	bl	8014aac <free>
				free(sInstruction);
 800282e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002830:	f012 f93c 	bl	8014aac <free>
				free(sType);
 8002834:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002836:	f012 f939 	bl	8014aac <free>
				free(s1);
 800283a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800283c:	f012 f936 	bl	8014aac <free>
}
 8002840:	e08c      	b.n	800295c <json_input+0x7fc>
			else if(strcmp(TYPE, "OneWire") == 0)
 8002842:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <json_input+0x790>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4937      	ldr	r1, [pc, #220]	; (8002924 <json_input+0x7c4>)
 8002848:	4618      	mov	r0, r3
 800284a:	f7fd fcc1 	bl	80001d0 <strcmp>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d169      	bne.n	8002928 <json_input+0x7c8>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SET");
 8002854:	4924      	ldr	r1, [pc, #144]	; (80028e8 <json_input+0x788>)
 8002856:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002858:	f7ff fa30 	bl	8001cbc <cJSON_GetObjectItem>
 800285c:	4603      	mov	r3, r0
 800285e:	4926      	ldr	r1, [pc, #152]	; (80028f8 <json_input+0x798>)
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fa2b 	bl	8001cbc <cJSON_GetObjectItem>
 8002866:	6578      	str	r0, [r7, #84]	; 0x54
				OpenCollectorDrainParamMass = s1->valuestring;
 8002868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	4a2b      	ldr	r2, [pc, #172]	; (800291c <json_input+0x7bc>)
 800286e:	6013      	str	r3, [r2, #0]
				test = parseValue(OpenCollectorDrainParamMass);
 8002870:	4b2a      	ldr	r3, [pc, #168]	; (800291c <json_input+0x7bc>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fc45 	bl	8002104 <parseValue>
 800287a:	4603      	mov	r3, r0
 800287c:	4a20      	ldr	r2, [pc, #128]	; (8002900 <json_input+0x7a0>)
 800287e:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < 8; i++)
 8002880:	2300      	movs	r3, #0
 8002882:	66bb      	str	r3, [r7, #104]	; 0x68
 8002884:	e00e      	b.n	80028a4 <json_input+0x744>
					Status_OCD[i] = (test[i] - 0x30);
 8002886:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <json_input+0x7a0>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800288c:	4413      	add	r3, r2
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	3b30      	subs	r3, #48	; 0x30
 8002892:	b2d9      	uxtb	r1, r3
 8002894:	4a22      	ldr	r2, [pc, #136]	; (8002920 <json_input+0x7c0>)
 8002896:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002898:	4413      	add	r3, r2
 800289a:	460a      	mov	r2, r1
 800289c:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 800289e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028a0:	3301      	adds	r3, #1
 80028a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80028a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028a6:	2b07      	cmp	r3, #7
 80028a8:	dded      	ble.n	8002886 <json_input+0x726>
				SEND_str("\n");
 80028aa:	4817      	ldr	r0, [pc, #92]	; (8002908 <json_input+0x7a8>)
 80028ac:	f7ff fa3c 	bl	8001d28 <SEND_str>
				SEND_str(TYPE);
 80028b0:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <json_input+0x790>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fa37 	bl	8001d28 <SEND_str>
				SEND_str("\n");
 80028ba:	4813      	ldr	r0, [pc, #76]	; (8002908 <json_input+0x7a8>)
 80028bc:	f7ff fa34 	bl	8001d28 <SEND_str>
				cJSON_Delete(json);
 80028c0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80028c2:	f7fe fc19 	bl	80010f8 <cJSON_Delete>
				free(stime);
 80028c6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80028c8:	f012 f8f0 	bl	8014aac <free>
				free(sInstruction);
 80028cc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80028ce:	f012 f8ed 	bl	8014aac <free>
				free(sType);
 80028d2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80028d4:	f012 f8ea 	bl	8014aac <free>
				free(s1);
 80028d8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80028da:	f012 f8e7 	bl	8014aac <free>
}
 80028de:	e03d      	b.n	800295c <json_input+0x7fc>
 80028e0:	200005b4 	.word	0x200005b4
 80028e4:	08018cc8 	.word	0x08018cc8
 80028e8:	08018c48 	.word	0x08018c48
 80028ec:	08018c50 	.word	0x08018c50
 80028f0:	20000570 	.word	0x20000570
 80028f4:	08018cd8 	.word	0x08018cd8
 80028f8:	08018ce0 	.word	0x08018ce0
 80028fc:	20000574 	.word	0x20000574
 8002900:	200005ac 	.word	0x200005ac
 8002904:	200002a8 	.word	0x200002a8
 8002908:	08018c84 	.word	0x08018c84
 800290c:	08018ce4 	.word	0x08018ce4
 8002910:	20000590 	.word	0x20000590
 8002914:	200002a0 	.word	0x200002a0
 8002918:	08018cec 	.word	0x08018cec
 800291c:	200005b8 	.word	0x200005b8
 8002920:	200002b8 	.word	0x200002b8
 8002924:	08018cf0 	.word	0x08018cf0
				cJSON_Delete(json);
 8002928:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800292a:	f7fe fbe5 	bl	80010f8 <cJSON_Delete>
				free(stime);
 800292e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002930:	f012 f8bc 	bl	8014aac <free>
				free(sInstruction);
 8002934:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002936:	f012 f8b9 	bl	8014aac <free>
				free(sType);
 800293a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800293c:	f012 f8b6 	bl	8014aac <free>
}
 8002940:	e00c      	b.n	800295c <json_input+0x7fc>
			free(stime);
 8002942:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002944:	f012 f8b2 	bl	8014aac <free>
			free(sInstruction);
 8002948:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800294a:	f012 f8af 	bl	8014aac <free>
}
 800294e:	e005      	b.n	800295c <json_input+0x7fc>
		cJSON_Delete(json);
 8002950:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002952:	f7fe fbd1 	bl	80010f8 <cJSON_Delete>
		free(stime);
 8002956:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002958:	f012 f8a8 	bl	8014aac <free>
}
 800295c:	bf00      	nop
 800295e:	3778      	adds	r7, #120	; 0x78
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <set_dido>:
//Принимает "d_vhod" - строку с номером цифрового входа
//Принимает "data_a" - переменная состояния входа
//Принимает "d_vihod" - строку с номером цифрового выхода
//Принимает "data_b" - переменная состояния выхода
void set_dido(char *d_vhod, uint8_t data_a, char *d_vihod, uint8_t data_b)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	461a      	mov	r2, r3
 8002970:	460b      	mov	r3, r1
 8002972:	72fb      	strb	r3, [r7, #11]
 8002974:	4613      	mov	r3, r2
 8002976:	72bb      	strb	r3, [r7, #10]
	GPIO_TypeDef *varPortIN = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
	GPIO_TypeDef *varPortOUT = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	61bb      	str	r3, [r7, #24]
	uint16_t varPinIN = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	82fb      	strh	r3, [r7, #22]
	uint16_t varPinOUT = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	82bb      	strh	r3, [r7, #20]

	if(strcmp(d_vhod, "VHOD1") == 0){varPortIN = VHOD1; varPinIN = IN0_Pin;}
 8002988:	4977      	ldr	r1, [pc, #476]	; (8002b68 <set_dido+0x204>)
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f7fd fc20 	bl	80001d0 <strcmp>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d105      	bne.n	80029a2 <set_dido+0x3e>
 8002996:	4b75      	ldr	r3, [pc, #468]	; (8002b6c <set_dido+0x208>)
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800299e:	82fb      	strh	r3, [r7, #22]
 80029a0:	e059      	b.n	8002a56 <set_dido+0xf2>
	else if(strcmp(d_vhod, "VHOD2") == 0){varPortIN = VHOD2; varPinIN = IN1_Pin;}
 80029a2:	4973      	ldr	r1, [pc, #460]	; (8002b70 <set_dido+0x20c>)
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f7fd fc13 	bl	80001d0 <strcmp>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d105      	bne.n	80029bc <set_dido+0x58>
 80029b0:	4b6e      	ldr	r3, [pc, #440]	; (8002b6c <set_dido+0x208>)
 80029b2:	61fb      	str	r3, [r7, #28]
 80029b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029b8:	82fb      	strh	r3, [r7, #22]
 80029ba:	e04c      	b.n	8002a56 <set_dido+0xf2>
	else if(strcmp(d_vhod, "VHOD3") == 0){varPortIN = VHOD3; varPinIN = IN2_Pin;}
 80029bc:	496d      	ldr	r1, [pc, #436]	; (8002b74 <set_dido+0x210>)
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f7fd fc06 	bl	80001d0 <strcmp>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d105      	bne.n	80029d6 <set_dido+0x72>
 80029ca:	4b68      	ldr	r3, [pc, #416]	; (8002b6c <set_dido+0x208>)
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029d2:	82fb      	strh	r3, [r7, #22]
 80029d4:	e03f      	b.n	8002a56 <set_dido+0xf2>
	else if(strcmp(d_vhod, "VHOD4") == 0){varPortIN = VHOD4; varPinIN = IN3_Pin;}
 80029d6:	4968      	ldr	r1, [pc, #416]	; (8002b78 <set_dido+0x214>)
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f7fd fbf9 	bl	80001d0 <strcmp>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d105      	bne.n	80029f0 <set_dido+0x8c>
 80029e4:	4b61      	ldr	r3, [pc, #388]	; (8002b6c <set_dido+0x208>)
 80029e6:	61fb      	str	r3, [r7, #28]
 80029e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ec:	82fb      	strh	r3, [r7, #22]
 80029ee:	e032      	b.n	8002a56 <set_dido+0xf2>
	else if(strcmp(d_vhod, "VHOD5") == 0){varPortIN = VHOD5; varPinIN = IN4_Pin;}
 80029f0:	4962      	ldr	r1, [pc, #392]	; (8002b7c <set_dido+0x218>)
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f7fd fbec 	bl	80001d0 <strcmp>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d105      	bne.n	8002a0a <set_dido+0xa6>
 80029fe:	4b5b      	ldr	r3, [pc, #364]	; (8002b6c <set_dido+0x208>)
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a06:	82fb      	strh	r3, [r7, #22]
 8002a08:	e025      	b.n	8002a56 <set_dido+0xf2>
	else if(strcmp(d_vhod, "VHOD6") == 0){varPortIN = VHOD6; varPinIN = IN5_Pin;}
 8002a0a:	495d      	ldr	r1, [pc, #372]	; (8002b80 <set_dido+0x21c>)
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f7fd fbdf 	bl	80001d0 <strcmp>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d105      	bne.n	8002a24 <set_dido+0xc0>
 8002a18:	4b54      	ldr	r3, [pc, #336]	; (8002b6c <set_dido+0x208>)
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a20:	82fb      	strh	r3, [r7, #22]
 8002a22:	e018      	b.n	8002a56 <set_dido+0xf2>
	else if(strcmp(d_vhod, "VHOD7") == 0){varPortIN = VHOD7; varPinIN = IN6_Pin;}
 8002a24:	4957      	ldr	r1, [pc, #348]	; (8002b84 <set_dido+0x220>)
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f7fd fbd2 	bl	80001d0 <strcmp>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d105      	bne.n	8002a3e <set_dido+0xda>
 8002a32:	4b4e      	ldr	r3, [pc, #312]	; (8002b6c <set_dido+0x208>)
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a3a:	82fb      	strh	r3, [r7, #22]
 8002a3c:	e00b      	b.n	8002a56 <set_dido+0xf2>
	else if(strcmp(d_vhod, "VHOD8") == 0){varPortIN = VHOD8; varPinIN = IN7_Pin;}
 8002a3e:	4952      	ldr	r1, [pc, #328]	; (8002b88 <set_dido+0x224>)
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f7fd fbc5 	bl	80001d0 <strcmp>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d104      	bne.n	8002a56 <set_dido+0xf2>
 8002a4c:	4b47      	ldr	r3, [pc, #284]	; (8002b6c <set_dido+0x208>)
 8002a4e:	61fb      	str	r3, [r7, #28]
 8002a50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a54:	82fb      	strh	r3, [r7, #22]

	if(strcmp(d_vihod, "VIHOD1") == 0){varPortOUT = VIHOD1; varPinOUT = O0_Pin;}
 8002a56:	494d      	ldr	r1, [pc, #308]	; (8002b8c <set_dido+0x228>)
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7fd fbb9 	bl	80001d0 <strcmp>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d104      	bne.n	8002a6e <set_dido+0x10a>
 8002a64:	4b4a      	ldr	r3, [pc, #296]	; (8002b90 <set_dido+0x22c>)
 8002a66:	61bb      	str	r3, [r7, #24]
 8002a68:	2301      	movs	r3, #1
 8002a6a:	82bb      	strh	r3, [r7, #20]
 8002a6c:	e056      	b.n	8002b1c <set_dido+0x1b8>
	else if(strcmp(d_vihod, "VIHOD2") == 0){varPortOUT = VIHOD2; varPinOUT = O1_Pin;}
 8002a6e:	4949      	ldr	r1, [pc, #292]	; (8002b94 <set_dido+0x230>)
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7fd fbad 	bl	80001d0 <strcmp>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d104      	bne.n	8002a86 <set_dido+0x122>
 8002a7c:	4b46      	ldr	r3, [pc, #280]	; (8002b98 <set_dido+0x234>)
 8002a7e:	61bb      	str	r3, [r7, #24]
 8002a80:	2301      	movs	r3, #1
 8002a82:	82bb      	strh	r3, [r7, #20]
 8002a84:	e04a      	b.n	8002b1c <set_dido+0x1b8>
	else if(strcmp(d_vihod, "VIHOD3") == 0){varPortOUT = VIHOD3; varPinOUT = O2_Pin;}
 8002a86:	4945      	ldr	r1, [pc, #276]	; (8002b9c <set_dido+0x238>)
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7fd fba1 	bl	80001d0 <strcmp>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d104      	bne.n	8002a9e <set_dido+0x13a>
 8002a94:	4b40      	ldr	r3, [pc, #256]	; (8002b98 <set_dido+0x234>)
 8002a96:	61bb      	str	r3, [r7, #24]
 8002a98:	2302      	movs	r3, #2
 8002a9a:	82bb      	strh	r3, [r7, #20]
 8002a9c:	e03e      	b.n	8002b1c <set_dido+0x1b8>
	else if(strcmp(d_vihod, "VIHOD4") == 0){varPortOUT = VIHOD4; varPinOUT = O3_Pin;}
 8002a9e:	4940      	ldr	r1, [pc, #256]	; (8002ba0 <set_dido+0x23c>)
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7fd fb95 	bl	80001d0 <strcmp>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d104      	bne.n	8002ab6 <set_dido+0x152>
 8002aac:	4b3d      	ldr	r3, [pc, #244]	; (8002ba4 <set_dido+0x240>)
 8002aae:	61bb      	str	r3, [r7, #24]
 8002ab0:	2380      	movs	r3, #128	; 0x80
 8002ab2:	82bb      	strh	r3, [r7, #20]
 8002ab4:	e032      	b.n	8002b1c <set_dido+0x1b8>
	else if(strcmp(d_vihod, "VIHOD5") == 0){varPortOUT = VIHOD5; varPinOUT = O4_Pin;}
 8002ab6:	493c      	ldr	r1, [pc, #240]	; (8002ba8 <set_dido+0x244>)
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7fd fb89 	bl	80001d0 <strcmp>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d105      	bne.n	8002ad0 <set_dido+0x16c>
 8002ac4:	4b37      	ldr	r3, [pc, #220]	; (8002ba4 <set_dido+0x240>)
 8002ac6:	61bb      	str	r3, [r7, #24]
 8002ac8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002acc:	82bb      	strh	r3, [r7, #20]
 8002ace:	e025      	b.n	8002b1c <set_dido+0x1b8>
	else if(strcmp(d_vihod, "VIHOD6") == 0){varPortOUT = VIHOD6; varPinOUT = O5_Pin;}
 8002ad0:	4936      	ldr	r1, [pc, #216]	; (8002bac <set_dido+0x248>)
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7fd fb7c 	bl	80001d0 <strcmp>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d105      	bne.n	8002aea <set_dido+0x186>
 8002ade:	4b31      	ldr	r3, [pc, #196]	; (8002ba4 <set_dido+0x240>)
 8002ae0:	61bb      	str	r3, [r7, #24]
 8002ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ae6:	82bb      	strh	r3, [r7, #20]
 8002ae8:	e018      	b.n	8002b1c <set_dido+0x1b8>
	else if(strcmp(d_vihod, "VIHOD7") == 0){varPortOUT = VIHOD7; varPinOUT = O6_Pin;}
 8002aea:	4931      	ldr	r1, [pc, #196]	; (8002bb0 <set_dido+0x24c>)
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7fd fb6f 	bl	80001d0 <strcmp>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <set_dido+0x1a0>
 8002af8:	4b2a      	ldr	r3, [pc, #168]	; (8002ba4 <set_dido+0x240>)
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b00:	82bb      	strh	r3, [r7, #20]
 8002b02:	e00b      	b.n	8002b1c <set_dido+0x1b8>
	else if(strcmp(d_vihod, "VIHOD8") == 0){varPortOUT = VIHOD8; varPinOUT = O7_Pin;}
 8002b04:	492b      	ldr	r1, [pc, #172]	; (8002bb4 <set_dido+0x250>)
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7fd fb62 	bl	80001d0 <strcmp>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d104      	bne.n	8002b1c <set_dido+0x1b8>
 8002b12:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <set_dido+0x240>)
 8002b14:	61bb      	str	r3, [r7, #24]
 8002b16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b1a:	82bb      	strh	r3, [r7, #20]



	if(HAL_GPIO_ReadPin(varPortIN, varPinIN) == 0)
 8002b1c:	8afb      	ldrh	r3, [r7, #22]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	69f8      	ldr	r0, [r7, #28]
 8002b22:	f003 f9b1 	bl	8005e88 <HAL_GPIO_ReadPin>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10c      	bne.n	8002b46 <set_dido+0x1e2>
	{
		HAL_GPIO_WritePin(varPortOUT, varPinOUT, data_b);
 8002b2c:	7aba      	ldrb	r2, [r7, #10]
 8002b2e:	8abb      	ldrh	r3, [r7, #20]
 8002b30:	4619      	mov	r1, r3
 8002b32:	69b8      	ldr	r0, [r7, #24]
 8002b34:	f003 f9c0 	bl	8005eb8 <HAL_GPIO_WritePin>
		SEND_str("if != 1");
 8002b38:	481f      	ldr	r0, [pc, #124]	; (8002bb8 <set_dido+0x254>)
 8002b3a:	f7ff f8f5 	bl	8001d28 <SEND_str>
		SEND_str("\n");
 8002b3e:	481f      	ldr	r0, [pc, #124]	; (8002bbc <set_dido+0x258>)
 8002b40:	f7ff f8f2 	bl	8001d28 <SEND_str>
	{
		HAL_GPIO_WritePin(varPortOUT, varPinOUT, RESET);
		SEND_str("nothing");
		SEND_str("\n");
	}
}
 8002b44:	e00b      	b.n	8002b5e <set_dido+0x1fa>
		HAL_GPIO_WritePin(varPortOUT, varPinOUT, RESET);
 8002b46:	8abb      	ldrh	r3, [r7, #20]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	69b8      	ldr	r0, [r7, #24]
 8002b4e:	f003 f9b3 	bl	8005eb8 <HAL_GPIO_WritePin>
		SEND_str("nothing");
 8002b52:	481b      	ldr	r0, [pc, #108]	; (8002bc0 <set_dido+0x25c>)
 8002b54:	f7ff f8e8 	bl	8001d28 <SEND_str>
		SEND_str("\n");
 8002b58:	4818      	ldr	r0, [pc, #96]	; (8002bbc <set_dido+0x258>)
 8002b5a:	f7ff f8e5 	bl	8001d28 <SEND_str>
}
 8002b5e:	bf00      	nop
 8002b60:	3720      	adds	r7, #32
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	08018cf8 	.word	0x08018cf8
 8002b6c:	40020c00 	.word	0x40020c00
 8002b70:	08018d00 	.word	0x08018d00
 8002b74:	08018d08 	.word	0x08018d08
 8002b78:	08018d10 	.word	0x08018d10
 8002b7c:	08018d18 	.word	0x08018d18
 8002b80:	08018d20 	.word	0x08018d20
 8002b84:	08018d28 	.word	0x08018d28
 8002b88:	08018d30 	.word	0x08018d30
 8002b8c:	08018d38 	.word	0x08018d38
 8002b90:	40020000 	.word	0x40020000
 8002b94:	08018d40 	.word	0x08018d40
 8002b98:	40020400 	.word	0x40020400
 8002b9c:	08018d48 	.word	0x08018d48
 8002ba0:	08018d50 	.word	0x08018d50
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	08018d58 	.word	0x08018d58
 8002bac:	08018d60 	.word	0x08018d60
 8002bb0:	08018d68 	.word	0x08018d68
 8002bb4:	08018d70 	.word	0x08018d70
 8002bb8:	08018d78 	.word	0x08018d78
 8002bbc:	08018d80 	.word	0x08018d80
 8002bc0:	08018d84 	.word	0x08018d84

08002bc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bc8:	f001 fb54 	bl	8004274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bcc:	f000 f82c 	bl	8002c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bd0:	f7ff f954 	bl	8001e7c <MX_GPIO_Init>
  MX_ADC1_Init();
 8002bd4:	f7fe f974 	bl	8000ec0 <MX_ADC1_Init>
  MX_SPI1_Init();
 8002bd8:	f000 f950 	bl	8002e7c <MX_SPI1_Init>
  MX_SPI2_Init();
 8002bdc:	f000 f984 	bl	8002ee8 <MX_SPI2_Init>
  MX_TIM3_Init();
 8002be0:	f001 f88c 	bl	8003cfc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002be4:	f001 f960 	bl	8003ea8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002be8:	f001 f988 	bl	8003efc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002bec:	f001 f9b0 	bl	8003f50 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8002bf0:	f005 feaa 	bl	8008948 <MX_LWIP_Init>
  MX_RTC_Init();
 8002bf4:	f000 f8d2 	bl	8002d9c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

	HAL_Delay(5000);
 8002bf8:	f241 3088 	movw	r0, #5000	; 0x1388
 8002bfc:	f001 fb7c 	bl	80042f8 <HAL_Delay>

	EN_Interrupt();	//Для дебага по USART3
 8002c00:	f001 fae8 	bl	80041d4 <EN_Interrupt>
	//----------------------------------------
	*/

//	HAL_UART_Receive_IT(&huart3,(uint8_t*)str_ethernet,1);								//Настройка прерывания COM для отладки ETH (!?)

	HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);	//Настройка прерывания по spi для МК
 8002c04:	2301      	movs	r3, #1
 8002c06:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <main+0x58>)
 8002c08:	4905      	ldr	r1, [pc, #20]	; (8002c20 <main+0x5c>)
 8002c0a:	4806      	ldr	r0, [pc, #24]	; (8002c24 <main+0x60>)
 8002c0c:	f004 f9ba 	bl	8006f84 <HAL_SPI_TransmitReceive_IT>
		//----------------------------------------
		 */

		///*
		//--------------SPI_test_MK---------------
		SPI_available();
 8002c10:	f000 fa40 	bl	8003094 <SPI_available>
		//----------------------------------------
		*/


		//------------------DEBUG-----------------
		DEBUG_main();
 8002c14:	f7ff f8a4 	bl	8001d60 <DEBUG_main>
		SPI_available();
 8002c18:	e7fa      	b.n	8002c10 <main+0x4c>
 8002c1a:	bf00      	nop
 8002c1c:	200002c8 	.word	0x200002c8
 8002c20:	200002cc 	.word	0x200002cc
 8002c24:	200005dc 	.word	0x200005dc

08002c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b098      	sub	sp, #96	; 0x60
 8002c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c32:	2230      	movs	r2, #48	; 0x30
 8002c34:	2100      	movs	r1, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f011 ff76 	bl	8014b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c3c:	f107 031c 	add.w	r3, r7, #28
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c4c:	f107 030c 	add.w	r3, r7, #12
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	4b31      	ldr	r3, [pc, #196]	; (8002d24 <SystemClock_Config+0xfc>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	4a30      	ldr	r2, [pc, #192]	; (8002d24 <SystemClock_Config+0xfc>)
 8002c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c68:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6a:	4b2e      	ldr	r3, [pc, #184]	; (8002d24 <SystemClock_Config+0xfc>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]
 8002c7a:	4b2b      	ldr	r3, [pc, #172]	; (8002d28 <SystemClock_Config+0x100>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a2a      	ldr	r2, [pc, #168]	; (8002d28 <SystemClock_Config+0x100>)
 8002c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	4b28      	ldr	r3, [pc, #160]	; (8002d28 <SystemClock_Config+0x100>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002c92:	2305      	movs	r3, #5
 8002c94:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ca4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002caa:	2304      	movs	r3, #4
 8002cac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002cae:	23a8      	movs	r3, #168	; 0xa8
 8002cb0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002cb6:	2304      	movs	r3, #4
 8002cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f003 f914 	bl	8005eec <HAL_RCC_OscConfig>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002cca:	f000 f85f 	bl	8002d8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cce:	230f      	movs	r3, #15
 8002cd0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002cda:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002cde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ce6:	f107 031c 	add.w	r3, r7, #28
 8002cea:	2105      	movs	r1, #5
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 fb6d 	bl	80063cc <HAL_RCC_ClockConfig>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002cf8:	f000 f848 	bl	8002d8c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002d00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d04:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d06:	f107 030c 	add.w	r3, r7, #12
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f003 fd8c 	bl	8006828 <HAL_RCCEx_PeriphCLKConfig>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8002d16:	f000 f839 	bl	8002d8c <Error_Handler>
  }
}
 8002d1a:	bf00      	nop
 8002d1c:	3760      	adds	r7, #96	; 0x60
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40007000 	.word	0x40007000

08002d2c <HAL_SPI_TxRxCpltCallback>:
//void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
//{
//	DINn_Callback(GPIO_Pin);
//}
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]

	  //Написать обработчик сообщенй по SPI от MCU

	if(hspi == &hspi2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <HAL_SPI_TxRxCpltCallback+0x34>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d10b      	bne.n	8002d54 <HAL_SPI_TxRxCpltCallback+0x28>
	{
	    if(!hspi2.TxXferCount && !flag_iput_spi2)
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <HAL_SPI_TxRxCpltCallback+0x34>)
 8002d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d106      	bne.n	8002d54 <HAL_SPI_TxRxCpltCallback+0x28>
 8002d46:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <HAL_SPI_TxRxCpltCallback+0x38>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d102      	bne.n	8002d54 <HAL_SPI_TxRxCpltCallback+0x28>
	    {
	    	flag_iput_spi2 = 1;
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_SPI_TxRxCpltCallback+0x38>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]
	    }
	}
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	200005dc 	.word	0x200005dc
 8002d64:	200002cd 	.word	0x200002cd

08002d68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d101      	bne.n	8002d7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d7a:	f001 fa9d 	bl	80042b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40010000 	.word	0x40010000

08002d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002db0:	2300      	movs	r3, #0
 8002db2:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002db4:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <MX_RTC_Init+0xac>)
 8002db6:	4a25      	ldr	r2, [pc, #148]	; (8002e4c <MX_RTC_Init+0xb0>)
 8002db8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002dba:	4b23      	ldr	r3, [pc, #140]	; (8002e48 <MX_RTC_Init+0xac>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002dc0:	4b21      	ldr	r3, [pc, #132]	; (8002e48 <MX_RTC_Init+0xac>)
 8002dc2:	227f      	movs	r2, #127	; 0x7f
 8002dc4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002dc6:	4b20      	ldr	r3, [pc, #128]	; (8002e48 <MX_RTC_Init+0xac>)
 8002dc8:	22ff      	movs	r2, #255	; 0xff
 8002dca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002dcc:	4b1e      	ldr	r3, [pc, #120]	; (8002e48 <MX_RTC_Init+0xac>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002dd2:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <MX_RTC_Init+0xac>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <MX_RTC_Init+0xac>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002dde:	481a      	ldr	r0, [pc, #104]	; (8002e48 <MX_RTC_Init+0xac>)
 8002de0:	f003 fe04 	bl	80069ec <HAL_RTC_Init>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002dea:	f7ff ffcf 	bl	8002d8c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 8002dee:	230a      	movs	r3, #10
 8002df0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 34;
 8002df2:	2322      	movs	r3, #34	; 0x22
 8002df4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002e02:	1d3b      	adds	r3, r7, #4
 8002e04:	2200      	movs	r2, #0
 8002e06:	4619      	mov	r1, r3
 8002e08:	480f      	ldr	r0, [pc, #60]	; (8002e48 <MX_RTC_Init+0xac>)
 8002e0a:	f003 fe80 	bl	8006b0e <HAL_RTC_SetTime>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002e14:	f7ff ffba 	bl	8002d8c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 20;
 8002e20:	2314      	movs	r3, #20
 8002e22:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 21;
 8002e24:	2315      	movs	r3, #21
 8002e26:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002e28:	463b      	mov	r3, r7
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4806      	ldr	r0, [pc, #24]	; (8002e48 <MX_RTC_Init+0xac>)
 8002e30:	f003 ff2a 	bl	8006c88 <HAL_RTC_SetDate>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002e3a:	f7ff ffa7 	bl	8002d8c <Error_Handler>
  }

}
 8002e3e:	bf00      	nop
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	200005bc 	.word	0x200005bc
 8002e4c:	40002800 	.word	0x40002800

08002e50 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a05      	ldr	r2, [pc, #20]	; (8002e74 <HAL_RTC_MspInit+0x24>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d102      	bne.n	8002e68 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e62:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <HAL_RTC_MspInit+0x28>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	40002800 	.word	0x40002800
 8002e78:	42470e3c 	.word	0x42470e3c

08002e7c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002e80:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <MX_SPI1_Init+0x64>)
 8002e82:	4a18      	ldr	r2, [pc, #96]	; (8002ee4 <MX_SPI1_Init+0x68>)
 8002e84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e86:	4b16      	ldr	r3, [pc, #88]	; (8002ee0 <MX_SPI1_Init+0x64>)
 8002e88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e8e:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <MX_SPI1_Init+0x64>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e94:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <MX_SPI1_Init+0x64>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e9a:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <MX_SPI1_Init+0x64>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <MX_SPI1_Init+0x64>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ea6:	4b0e      	ldr	r3, [pc, #56]	; (8002ee0 <MX_SPI1_Init+0x64>)
 8002ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002eae:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <MX_SPI1_Init+0x64>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002eb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <MX_SPI1_Init+0x64>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002eba:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <MX_SPI1_Init+0x64>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ec0:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <MX_SPI1_Init+0x64>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <MX_SPI1_Init+0x64>)
 8002ec8:	220a      	movs	r2, #10
 8002eca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ecc:	4804      	ldr	r0, [pc, #16]	; (8002ee0 <MX_SPI1_Init+0x64>)
 8002ece:	f003 fff4 	bl	8006eba <HAL_SPI_Init>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ed8:	f7ff ff58 	bl	8002d8c <Error_Handler>
  }

}
 8002edc:	bf00      	nop
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20000634 	.word	0x20000634
 8002ee4:	40013000 	.word	0x40013000

08002ee8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8002eec:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <MX_SPI2_Init+0x5c>)
 8002eee:	4a16      	ldr	r2, [pc, #88]	; (8002f48 <MX_SPI2_Init+0x60>)
 8002ef0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8002ef2:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <MX_SPI2_Init+0x5c>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ef8:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <MX_SPI2_Init+0x5c>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002efe:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <MX_SPI2_Init+0x5c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <MX_SPI2_Init+0x5c>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <MX_SPI2_Init+0x5c>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <MX_SPI2_Init+0x5c>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f16:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <MX_SPI2_Init+0x5c>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <MX_SPI2_Init+0x5c>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <MX_SPI2_Init+0x5c>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <MX_SPI2_Init+0x5c>)
 8002f2a:	220a      	movs	r2, #10
 8002f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f2e:	4805      	ldr	r0, [pc, #20]	; (8002f44 <MX_SPI2_Init+0x5c>)
 8002f30:	f003 ffc3 	bl	8006eba <HAL_SPI_Init>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 8002f3a:	f7ff ff27 	bl	8002d8c <Error_Handler>
  }

}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	200005dc 	.word	0x200005dc
 8002f48:	40003800 	.word	0x40003800

08002f4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08c      	sub	sp, #48	; 0x30
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f54:	f107 031c 	add.w	r3, r7, #28
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a45      	ldr	r2, [pc, #276]	; (8003080 <HAL_SPI_MspInit+0x134>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d12c      	bne.n	8002fc8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61bb      	str	r3, [r7, #24]
 8002f72:	4b44      	ldr	r3, [pc, #272]	; (8003084 <HAL_SPI_MspInit+0x138>)
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	4a43      	ldr	r2, [pc, #268]	; (8003084 <HAL_SPI_MspInit+0x138>)
 8002f78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f7e:	4b41      	ldr	r3, [pc, #260]	; (8003084 <HAL_SPI_MspInit+0x138>)
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f86:	61bb      	str	r3, [r7, #24]
 8002f88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	4b3d      	ldr	r3, [pc, #244]	; (8003084 <HAL_SPI_MspInit+0x138>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	4a3c      	ldr	r2, [pc, #240]	; (8003084 <HAL_SPI_MspInit+0x138>)
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9a:	4b3a      	ldr	r3, [pc, #232]	; (8003084 <HAL_SPI_MspInit+0x138>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8002fa6:	2338      	movs	r3, #56	; 0x38
 8002fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002faa:	2302      	movs	r3, #2
 8002fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fb6:	2305      	movs	r3, #5
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fba:	f107 031c 	add.w	r3, r7, #28
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4831      	ldr	r0, [pc, #196]	; (8003088 <HAL_SPI_MspInit+0x13c>)
 8002fc2:	f002 fdc5 	bl	8005b50 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002fc6:	e057      	b.n	8003078 <HAL_SPI_MspInit+0x12c>
  else if(spiHandle->Instance==SPI2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a2f      	ldr	r2, [pc, #188]	; (800308c <HAL_SPI_MspInit+0x140>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d152      	bne.n	8003078 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	4b2b      	ldr	r3, [pc, #172]	; (8003084 <HAL_SPI_MspInit+0x138>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	4a2a      	ldr	r2, [pc, #168]	; (8003084 <HAL_SPI_MspInit+0x138>)
 8002fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe2:	4b28      	ldr	r3, [pc, #160]	; (8003084 <HAL_SPI_MspInit+0x138>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	4b24      	ldr	r3, [pc, #144]	; (8003084 <HAL_SPI_MspInit+0x138>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	4a23      	ldr	r2, [pc, #140]	; (8003084 <HAL_SPI_MspInit+0x138>)
 8002ff8:	f043 0304 	orr.w	r3, r3, #4
 8002ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffe:	4b21      	ldr	r3, [pc, #132]	; (8003084 <HAL_SPI_MspInit+0x138>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <HAL_SPI_MspInit+0x138>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <HAL_SPI_MspInit+0x138>)
 8003014:	f043 0302 	orr.w	r3, r3, #2
 8003018:	6313      	str	r3, [r2, #48]	; 0x30
 800301a:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <HAL_SPI_MspInit+0x138>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MISO_M_Pin|MOSI_M_Pin;
 8003026:	230c      	movs	r3, #12
 8003028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302a:	2302      	movs	r3, #2
 800302c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302e:	2300      	movs	r3, #0
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003032:	2303      	movs	r3, #3
 8003034:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003036:	2305      	movs	r3, #5
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800303a:	f107 031c 	add.w	r3, r7, #28
 800303e:	4619      	mov	r1, r3
 8003040:	4813      	ldr	r0, [pc, #76]	; (8003090 <HAL_SPI_MspInit+0x144>)
 8003042:	f002 fd85 	bl	8005b50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCK_M_Pin|GPIO_PIN_9;
 8003046:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800304a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304c:	2302      	movs	r3, #2
 800304e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003054:	2303      	movs	r3, #3
 8003056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003058:	2305      	movs	r3, #5
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800305c:	f107 031c 	add.w	r3, r7, #28
 8003060:	4619      	mov	r1, r3
 8003062:	4809      	ldr	r0, [pc, #36]	; (8003088 <HAL_SPI_MspInit+0x13c>)
 8003064:	f002 fd74 	bl	8005b50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003068:	2200      	movs	r2, #0
 800306a:	2100      	movs	r1, #0
 800306c:	2024      	movs	r0, #36	; 0x24
 800306e:	f001 fc81 	bl	8004974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003072:	2024      	movs	r0, #36	; 0x24
 8003074:	f001 fc9a 	bl	80049ac <HAL_NVIC_EnableIRQ>
}
 8003078:	bf00      	nop
 800307a:	3730      	adds	r7, #48	; 0x30
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40013000 	.word	0x40013000
 8003084:	40023800 	.word	0x40023800
 8003088:	40020400 	.word	0x40020400
 800308c:	40003800 	.word	0x40003800
 8003090:	40020800 	.word	0x40020800

08003094 <SPI_available>:
//RTC_DateTypeDef DateToUpdate = {0};
//
//char trans_str[64] = {0,};

void SPI_available(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
	if(flag_iput_spi2)
 8003098:	4bd2      	ldr	r3, [pc, #840]	; (80033e4 <SPI_available+0x350>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 83bb 	beq.w	8003818 <SPI_available+0x784>
	{
		switch(SPI_rx_buf[0])
 80030a2:	4bd1      	ldr	r3, [pc, #836]	; (80033e8 <SPI_available+0x354>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	2b65      	cmp	r3, #101	; 0x65
 80030aa:	f200 8225 	bhi.w	80034f8 <SPI_available+0x464>
 80030ae:	a201      	add	r2, pc, #4	; (adr r2, 80030b4 <SPI_available+0x20>)
 80030b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b4:	0800324d 	.word	0x0800324d
 80030b8:	0800325f 	.word	0x0800325f
 80030bc:	08003271 	.word	0x08003271
 80030c0:	08003283 	.word	0x08003283
 80030c4:	08003295 	.word	0x08003295
 80030c8:	080032a7 	.word	0x080032a7
 80030cc:	080032b9 	.word	0x080032b9
 80030d0:	080032cb 	.word	0x080032cb
 80030d4:	080032dd 	.word	0x080032dd
 80030d8:	080034f9 	.word	0x080034f9
 80030dc:	080034f9 	.word	0x080034f9
 80030e0:	080034f9 	.word	0x080034f9
 80030e4:	080034f9 	.word	0x080034f9
 80030e8:	080034f9 	.word	0x080034f9
 80030ec:	080034f9 	.word	0x080034f9
 80030f0:	080032f1 	.word	0x080032f1
 80030f4:	08003305 	.word	0x08003305
 80030f8:	08003319 	.word	0x08003319
 80030fc:	0800332d 	.word	0x0800332d
 8003100:	08003341 	.word	0x08003341
 8003104:	08003355 	.word	0x08003355
 8003108:	08003369 	.word	0x08003369
 800310c:	0800337d 	.word	0x0800337d
 8003110:	08003385 	.word	0x08003385
 8003114:	0800338d 	.word	0x0800338d
 8003118:	080034f9 	.word	0x080034f9
 800311c:	080034f9 	.word	0x080034f9
 8003120:	080034f9 	.word	0x080034f9
 8003124:	080034f9 	.word	0x080034f9
 8003128:	080034f9 	.word	0x080034f9
 800312c:	080034f9 	.word	0x080034f9
 8003130:	08003395 	.word	0x08003395
 8003134:	0800339d 	.word	0x0800339d
 8003138:	080033a5 	.word	0x080033a5
 800313c:	080033ad 	.word	0x080033ad
 8003140:	080033b5 	.word	0x080033b5
 8003144:	080033bd 	.word	0x080033bd
 8003148:	080033c5 	.word	0x080033c5
 800314c:	080033cd 	.word	0x080033cd
 8003150:	080033d5 	.word	0x080033d5
 8003154:	080033dd 	.word	0x080033dd
 8003158:	080034f9 	.word	0x080034f9
 800315c:	080034f9 	.word	0x080034f9
 8003160:	080034f9 	.word	0x080034f9
 8003164:	080034f9 	.word	0x080034f9
 8003168:	080034f9 	.word	0x080034f9
 800316c:	080034f9 	.word	0x080034f9
 8003170:	08003401 	.word	0x08003401
 8003174:	08003409 	.word	0x08003409
 8003178:	08003411 	.word	0x08003411
 800317c:	08003419 	.word	0x08003419
 8003180:	08003421 	.word	0x08003421
 8003184:	08003429 	.word	0x08003429
 8003188:	08003431 	.word	0x08003431
 800318c:	08003439 	.word	0x08003439
 8003190:	08003441 	.word	0x08003441
 8003194:	08003449 	.word	0x08003449
 8003198:	080034f9 	.word	0x080034f9
 800319c:	080034f9 	.word	0x080034f9
 80031a0:	080034f9 	.word	0x080034f9
 80031a4:	080034f9 	.word	0x080034f9
 80031a8:	080034f9 	.word	0x080034f9
 80031ac:	080034f9 	.word	0x080034f9
 80031b0:	08003451 	.word	0x08003451
 80031b4:	08003459 	.word	0x08003459
 80031b8:	08003461 	.word	0x08003461
 80031bc:	08003469 	.word	0x08003469
 80031c0:	08003471 	.word	0x08003471
 80031c4:	08003479 	.word	0x08003479
 80031c8:	08003481 	.word	0x08003481
 80031cc:	08003489 	.word	0x08003489
 80031d0:	08003491 	.word	0x08003491
 80031d4:	08003499 	.word	0x08003499
 80031d8:	080034f9 	.word	0x080034f9
 80031dc:	080034f9 	.word	0x080034f9
 80031e0:	080034f9 	.word	0x080034f9
 80031e4:	080034f9 	.word	0x080034f9
 80031e8:	080034f9 	.word	0x080034f9
 80031ec:	080034f9 	.word	0x080034f9
 80031f0:	080034a1 	.word	0x080034a1
 80031f4:	080034a9 	.word	0x080034a9
 80031f8:	080034b1 	.word	0x080034b1
 80031fc:	080034b9 	.word	0x080034b9
 8003200:	080034c1 	.word	0x080034c1
 8003204:	080034c9 	.word	0x080034c9
 8003208:	080034d1 	.word	0x080034d1
 800320c:	080034d9 	.word	0x080034d9
 8003210:	080034e1 	.word	0x080034e1
 8003214:	080034e9 	.word	0x080034e9
 8003218:	080034f9 	.word	0x080034f9
 800321c:	080034f9 	.word	0x080034f9
 8003220:	080034f9 	.word	0x080034f9
 8003224:	080034f9 	.word	0x080034f9
 8003228:	080034f9 	.word	0x080034f9
 800322c:	080034f9 	.word	0x080034f9
 8003230:	080034f1 	.word	0x080034f1
 8003234:	080034f9 	.word	0x080034f9
 8003238:	080034f9 	.word	0x080034f9
 800323c:	080034f9 	.word	0x080034f9
 8003240:	080034f9 	.word	0x080034f9
 8003244:	080034f9 	.word	0x080034f9
 8003248:	080034f9 	.word	0x080034f9
		{
				//------------------------Открытый коллектор------------------------
			case OC0_ON:
				Status_OCD[0] = 1;
 800324c:	4b67      	ldr	r3, [pc, #412]	; (80033ec <SPI_available+0x358>)
 800324e:	2201      	movs	r2, #1
 8003250:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, SET);
 8003252:	2201      	movs	r2, #1
 8003254:	2101      	movs	r1, #1
 8003256:	4866      	ldr	r0, [pc, #408]	; (80033f0 <SPI_available+0x35c>)
 8003258:	f002 fe2e 	bl	8005eb8 <HAL_GPIO_WritePin>
				break;
 800325c:	e14c      	b.n	80034f8 <SPI_available+0x464>
			case OC0_OFF:
				Status_OCD[0] = 0;
 800325e:	4b63      	ldr	r3, [pc, #396]	; (80033ec <SPI_available+0x358>)
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, RESET);
 8003264:	2200      	movs	r2, #0
 8003266:	2101      	movs	r1, #1
 8003268:	4861      	ldr	r0, [pc, #388]	; (80033f0 <SPI_available+0x35c>)
 800326a:	f002 fe25 	bl	8005eb8 <HAL_GPIO_WritePin>
				break;
 800326e:	e143      	b.n	80034f8 <SPI_available+0x464>
			case OC1_ON:
				Status_OCD[1] = 1;
 8003270:	4b5e      	ldr	r3, [pc, #376]	; (80033ec <SPI_available+0x358>)
 8003272:	2201      	movs	r2, #1
 8003274:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, SET);
 8003276:	2201      	movs	r2, #1
 8003278:	2101      	movs	r1, #1
 800327a:	485e      	ldr	r0, [pc, #376]	; (80033f4 <SPI_available+0x360>)
 800327c:	f002 fe1c 	bl	8005eb8 <HAL_GPIO_WritePin>
				break;
 8003280:	e13a      	b.n	80034f8 <SPI_available+0x464>
			case OC1_OFF:
				Status_OCD[1] = 0;
 8003282:	4b5a      	ldr	r3, [pc, #360]	; (80033ec <SPI_available+0x358>)
 8003284:	2200      	movs	r2, #0
 8003286:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, RESET);
 8003288:	2200      	movs	r2, #0
 800328a:	2101      	movs	r1, #1
 800328c:	4859      	ldr	r0, [pc, #356]	; (80033f4 <SPI_available+0x360>)
 800328e:	f002 fe13 	bl	8005eb8 <HAL_GPIO_WritePin>
				break;
 8003292:	e131      	b.n	80034f8 <SPI_available+0x464>
			case OC2_ON:
				Status_OCD[2] = 1;
 8003294:	4b55      	ldr	r3, [pc, #340]	; (80033ec <SPI_available+0x358>)
 8003296:	2201      	movs	r2, #1
 8003298:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, SET);
 800329a:	2201      	movs	r2, #1
 800329c:	2102      	movs	r1, #2
 800329e:	4855      	ldr	r0, [pc, #340]	; (80033f4 <SPI_available+0x360>)
 80032a0:	f002 fe0a 	bl	8005eb8 <HAL_GPIO_WritePin>
				break;
 80032a4:	e128      	b.n	80034f8 <SPI_available+0x464>
			case OC2_OFF:
				Status_OCD[2] = 0;
 80032a6:	4b51      	ldr	r3, [pc, #324]	; (80033ec <SPI_available+0x358>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, RESET);
 80032ac:	2200      	movs	r2, #0
 80032ae:	2102      	movs	r1, #2
 80032b0:	4850      	ldr	r0, [pc, #320]	; (80033f4 <SPI_available+0x360>)
 80032b2:	f002 fe01 	bl	8005eb8 <HAL_GPIO_WritePin>
				break;
 80032b6:	e11f      	b.n	80034f8 <SPI_available+0x464>
			case OC3_ON:
				Status_OCD[3] = 1;
 80032b8:	4b4c      	ldr	r3, [pc, #304]	; (80033ec <SPI_available+0x358>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(O3_GPIO_Port, O3_Pin, SET);
 80032be:	2201      	movs	r2, #1
 80032c0:	2180      	movs	r1, #128	; 0x80
 80032c2:	484d      	ldr	r0, [pc, #308]	; (80033f8 <SPI_available+0x364>)
 80032c4:	f002 fdf8 	bl	8005eb8 <HAL_GPIO_WritePin>
				break;
 80032c8:	e116      	b.n	80034f8 <SPI_available+0x464>
			case OC3_OFF:
				Status_OCD[3] = 0;
 80032ca:	4b48      	ldr	r3, [pc, #288]	; (80033ec <SPI_available+0x358>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	70da      	strb	r2, [r3, #3]
				HAL_GPIO_WritePin(O3_GPIO_Port, O3_Pin, RESET);
 80032d0:	2200      	movs	r2, #0
 80032d2:	2180      	movs	r1, #128	; 0x80
 80032d4:	4848      	ldr	r0, [pc, #288]	; (80033f8 <SPI_available+0x364>)
 80032d6:	f002 fdef 	bl	8005eb8 <HAL_GPIO_WritePin>
				break;
 80032da:	e10d      	b.n	80034f8 <SPI_available+0x464>
			case OC4_ON:
				Status_OCD[4] = 1;
 80032dc:	4b43      	ldr	r3, [pc, #268]	; (80033ec <SPI_available+0x358>)
 80032de:	2201      	movs	r2, #1
 80032e0:	711a      	strb	r2, [r3, #4]
				HAL_GPIO_WritePin(O4_GPIO_Port, O4_Pin, SET);
 80032e2:	2201      	movs	r2, #1
 80032e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032e8:	4843      	ldr	r0, [pc, #268]	; (80033f8 <SPI_available+0x364>)
 80032ea:	f002 fde5 	bl	8005eb8 <HAL_GPIO_WritePin>
				break;
 80032ee:	e103      	b.n	80034f8 <SPI_available+0x464>
			case OC4_OFF:
				Status_OCD[4] = 0;
 80032f0:	4b3e      	ldr	r3, [pc, #248]	; (80033ec <SPI_available+0x358>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	711a      	strb	r2, [r3, #4]
				HAL_GPIO_WritePin(O4_GPIO_Port, O4_Pin, RESET);
 80032f6:	2200      	movs	r2, #0
 80032f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032fc:	483e      	ldr	r0, [pc, #248]	; (80033f8 <SPI_available+0x364>)
 80032fe:	f002 fddb 	bl	8005eb8 <HAL_GPIO_WritePin>
				break;
 8003302:	e0f9      	b.n	80034f8 <SPI_available+0x464>
			case OC5_ON:
				Status_OCD[5] = 1;
 8003304:	4b39      	ldr	r3, [pc, #228]	; (80033ec <SPI_available+0x358>)
 8003306:	2201      	movs	r2, #1
 8003308:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, SET);
 800330a:	2201      	movs	r2, #1
 800330c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003310:	4839      	ldr	r0, [pc, #228]	; (80033f8 <SPI_available+0x364>)
 8003312:	f002 fdd1 	bl	8005eb8 <HAL_GPIO_WritePin>
				break;
 8003316:	e0ef      	b.n	80034f8 <SPI_available+0x464>
			case OC5_OFF:
				Status_OCD[5] = 0;
 8003318:	4b34      	ldr	r3, [pc, #208]	; (80033ec <SPI_available+0x358>)
 800331a:	2200      	movs	r2, #0
 800331c:	715a      	strb	r2, [r3, #5]
				HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, RESET);
 800331e:	2200      	movs	r2, #0
 8003320:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003324:	4834      	ldr	r0, [pc, #208]	; (80033f8 <SPI_available+0x364>)
 8003326:	f002 fdc7 	bl	8005eb8 <HAL_GPIO_WritePin>
				break;
 800332a:	e0e5      	b.n	80034f8 <SPI_available+0x464>
			case OC6_ON:
				Status_OCD[6] = 1;
 800332c:	4b2f      	ldr	r3, [pc, #188]	; (80033ec <SPI_available+0x358>)
 800332e:	2201      	movs	r2, #1
 8003330:	719a      	strb	r2, [r3, #6]
				HAL_GPIO_WritePin(O6_GPIO_Port, O6_Pin, SET);
 8003332:	2201      	movs	r2, #1
 8003334:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003338:	482f      	ldr	r0, [pc, #188]	; (80033f8 <SPI_available+0x364>)
 800333a:	f002 fdbd 	bl	8005eb8 <HAL_GPIO_WritePin>
				break;
 800333e:	e0db      	b.n	80034f8 <SPI_available+0x464>
			case OC6_OFF:
				Status_OCD[6] = 0;
 8003340:	4b2a      	ldr	r3, [pc, #168]	; (80033ec <SPI_available+0x358>)
 8003342:	2200      	movs	r2, #0
 8003344:	719a      	strb	r2, [r3, #6]
				HAL_GPIO_WritePin(O6_GPIO_Port, O6_Pin, RESET);
 8003346:	2200      	movs	r2, #0
 8003348:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800334c:	482a      	ldr	r0, [pc, #168]	; (80033f8 <SPI_available+0x364>)
 800334e:	f002 fdb3 	bl	8005eb8 <HAL_GPIO_WritePin>
				break;
 8003352:	e0d1      	b.n	80034f8 <SPI_available+0x464>
			case OC7_ON:
				Status_OCD[7] = 1;
 8003354:	4b25      	ldr	r3, [pc, #148]	; (80033ec <SPI_available+0x358>)
 8003356:	2201      	movs	r2, #1
 8003358:	71da      	strb	r2, [r3, #7]
				HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, SET);
 800335a:	2201      	movs	r2, #1
 800335c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003360:	4825      	ldr	r0, [pc, #148]	; (80033f8 <SPI_available+0x364>)
 8003362:	f002 fda9 	bl	8005eb8 <HAL_GPIO_WritePin>
				break;
 8003366:	e0c7      	b.n	80034f8 <SPI_available+0x464>
			case OC7_OFF:
				Status_OCD[7] = 0;
 8003368:	4b20      	ldr	r3, [pc, #128]	; (80033ec <SPI_available+0x358>)
 800336a:	2200      	movs	r2, #0
 800336c:	71da      	strb	r2, [r3, #7]
				HAL_GPIO_WritePin(O7_GPIO_Port, O7_Pin, RESET);
 800336e:	2200      	movs	r2, #0
 8003370:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003374:	4820      	ldr	r0, [pc, #128]	; (80033f8 <SPI_available+0x364>)
 8003376:	f002 fd9f 	bl	8005eb8 <HAL_GPIO_WritePin>
				break;
 800337a:	e0bd      	b.n	80034f8 <SPI_available+0x464>
				//------------------------------------------------------------------
				//--------------------------Цифровые входы--------------------------
			case DIN0_R:
				Status_DIN[0] = 1;
 800337c:	4b1f      	ldr	r3, [pc, #124]	; (80033fc <SPI_available+0x368>)
 800337e:	2201      	movs	r2, #1
 8003380:	701a      	strb	r2, [r3, #0]
				break;
 8003382:	e0b9      	b.n	80034f8 <SPI_available+0x464>
			case DIN0_F:
				Status_DIN[0] = 0;
 8003384:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <SPI_available+0x368>)
 8003386:	2200      	movs	r2, #0
 8003388:	701a      	strb	r2, [r3, #0]
				break;
 800338a:	e0b5      	b.n	80034f8 <SPI_available+0x464>
			case DIN1_R:
				Status_DIN[1] = 1;
 800338c:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <SPI_available+0x368>)
 800338e:	2201      	movs	r2, #1
 8003390:	705a      	strb	r2, [r3, #1]
				break;
 8003392:	e0b1      	b.n	80034f8 <SPI_available+0x464>
			case DIN1_F:
				Status_DIN[1] = 0;
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <SPI_available+0x368>)
 8003396:	2200      	movs	r2, #0
 8003398:	705a      	strb	r2, [r3, #1]
				break;
 800339a:	e0ad      	b.n	80034f8 <SPI_available+0x464>
			case DIN2_R:
				Status_DIN[2] = 1;
 800339c:	4b17      	ldr	r3, [pc, #92]	; (80033fc <SPI_available+0x368>)
 800339e:	2201      	movs	r2, #1
 80033a0:	709a      	strb	r2, [r3, #2]
				break;
 80033a2:	e0a9      	b.n	80034f8 <SPI_available+0x464>
			case DIN2_F:
				Status_DIN[2] = 0;
 80033a4:	4b15      	ldr	r3, [pc, #84]	; (80033fc <SPI_available+0x368>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	709a      	strb	r2, [r3, #2]
				break;
 80033aa:	e0a5      	b.n	80034f8 <SPI_available+0x464>
			case DIN3_R:
				Status_DIN[3] = 1;
 80033ac:	4b13      	ldr	r3, [pc, #76]	; (80033fc <SPI_available+0x368>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	70da      	strb	r2, [r3, #3]
				break;
 80033b2:	e0a1      	b.n	80034f8 <SPI_available+0x464>
			case DIN3_F:
				Status_DIN[3] = 0;
 80033b4:	4b11      	ldr	r3, [pc, #68]	; (80033fc <SPI_available+0x368>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	70da      	strb	r2, [r3, #3]
				break;
 80033ba:	e09d      	b.n	80034f8 <SPI_available+0x464>
			case DIN4_R:
				Status_DIN[4] = 1;
 80033bc:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <SPI_available+0x368>)
 80033be:	2201      	movs	r2, #1
 80033c0:	711a      	strb	r2, [r3, #4]
				break;
 80033c2:	e099      	b.n	80034f8 <SPI_available+0x464>
			case DIN4_F:
				Status_DIN[4] = 0;
 80033c4:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <SPI_available+0x368>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	711a      	strb	r2, [r3, #4]
				break;
 80033ca:	e095      	b.n	80034f8 <SPI_available+0x464>
			case DIN5_R:
				Status_DIN[5] = 1;
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <SPI_available+0x368>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	715a      	strb	r2, [r3, #5]
				break;
 80033d2:	e091      	b.n	80034f8 <SPI_available+0x464>
			case DIN5_F:
				Status_DIN[5] = 0;
 80033d4:	4b09      	ldr	r3, [pc, #36]	; (80033fc <SPI_available+0x368>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	715a      	strb	r2, [r3, #5]
				break;
 80033da:	e08d      	b.n	80034f8 <SPI_available+0x464>
			case DIN6_R:
				Status_DIN[6] = 1;
 80033dc:	4b07      	ldr	r3, [pc, #28]	; (80033fc <SPI_available+0x368>)
 80033de:	2201      	movs	r2, #1
 80033e0:	719a      	strb	r2, [r3, #6]
				break;
 80033e2:	e089      	b.n	80034f8 <SPI_available+0x464>
 80033e4:	200002cd 	.word	0x200002cd
 80033e8:	200002c8 	.word	0x200002c8
 80033ec:	200002b8 	.word	0x200002b8
 80033f0:	40020000 	.word	0x40020000
 80033f4:	40020400 	.word	0x40020400
 80033f8:	40021000 	.word	0x40021000
 80033fc:	200002a8 	.word	0x200002a8
			case DIN6_F:
				Status_DIN[6] = 0;
 8003400:	4ba1      	ldr	r3, [pc, #644]	; (8003688 <SPI_available+0x5f4>)
 8003402:	2200      	movs	r2, #0
 8003404:	719a      	strb	r2, [r3, #6]
				break;
 8003406:	e077      	b.n	80034f8 <SPI_available+0x464>
			case DIN7_R:
				Status_DIN[7] = 1;
 8003408:	4b9f      	ldr	r3, [pc, #636]	; (8003688 <SPI_available+0x5f4>)
 800340a:	2201      	movs	r2, #1
 800340c:	71da      	strb	r2, [r3, #7]
				break;
 800340e:	e073      	b.n	80034f8 <SPI_available+0x464>
			case DIN7_F:
				Status_DIN[7] = 0;
 8003410:	4b9d      	ldr	r3, [pc, #628]	; (8003688 <SPI_available+0x5f4>)
 8003412:	2200      	movs	r2, #0
 8003414:	71da      	strb	r2, [r3, #7]
				break;
 8003416:	e06f      	b.n	80034f8 <SPI_available+0x464>
				//------------------------------------------------------------------
				//-------------------------Аналоговые входы-------------------------
			case AIN0_ON:
				Status_AIN[0] = 1;
 8003418:	4b9c      	ldr	r3, [pc, #624]	; (800368c <SPI_available+0x5f8>)
 800341a:	2201      	movs	r2, #1
 800341c:	701a      	strb	r2, [r3, #0]
				break;
 800341e:	e06b      	b.n	80034f8 <SPI_available+0x464>
			case AIN0_OFF:
				Status_AIN[0] = 0;
 8003420:	4b9a      	ldr	r3, [pc, #616]	; (800368c <SPI_available+0x5f8>)
 8003422:	2200      	movs	r2, #0
 8003424:	701a      	strb	r2, [r3, #0]
				break;
 8003426:	e067      	b.n	80034f8 <SPI_available+0x464>
			case AIN1_ON:
				Status_AIN[1] = 1;
 8003428:	4b98      	ldr	r3, [pc, #608]	; (800368c <SPI_available+0x5f8>)
 800342a:	2201      	movs	r2, #1
 800342c:	705a      	strb	r2, [r3, #1]
				break;
 800342e:	e063      	b.n	80034f8 <SPI_available+0x464>
			case AIN1_OFF:
				Status_AIN[1] = 0;
 8003430:	4b96      	ldr	r3, [pc, #600]	; (800368c <SPI_available+0x5f8>)
 8003432:	2200      	movs	r2, #0
 8003434:	705a      	strb	r2, [r3, #1]
				break;
 8003436:	e05f      	b.n	80034f8 <SPI_available+0x464>
			case AIN2_ON:
				Status_AIN[2] = 1;
 8003438:	4b94      	ldr	r3, [pc, #592]	; (800368c <SPI_available+0x5f8>)
 800343a:	2201      	movs	r2, #1
 800343c:	709a      	strb	r2, [r3, #2]
				break;
 800343e:	e05b      	b.n	80034f8 <SPI_available+0x464>
			case AIN2_OFF:
				Status_AIN[2] = 0;
 8003440:	4b92      	ldr	r3, [pc, #584]	; (800368c <SPI_available+0x5f8>)
 8003442:	2200      	movs	r2, #0
 8003444:	709a      	strb	r2, [r3, #2]
				break;
 8003446:	e057      	b.n	80034f8 <SPI_available+0x464>
			case AIN3_ON:
				Status_AIN[3] = 1;
 8003448:	4b90      	ldr	r3, [pc, #576]	; (800368c <SPI_available+0x5f8>)
 800344a:	2201      	movs	r2, #1
 800344c:	70da      	strb	r2, [r3, #3]
				break;
 800344e:	e053      	b.n	80034f8 <SPI_available+0x464>
			case AIN3_OFF:
				Status_AIN[3] = 0;
 8003450:	4b8e      	ldr	r3, [pc, #568]	; (800368c <SPI_available+0x5f8>)
 8003452:	2200      	movs	r2, #0
 8003454:	70da      	strb	r2, [r3, #3]
				break;
 8003456:	e04f      	b.n	80034f8 <SPI_available+0x464>
			case AIN4_ON:
				Status_AIN[4] = 1;
 8003458:	4b8c      	ldr	r3, [pc, #560]	; (800368c <SPI_available+0x5f8>)
 800345a:	2201      	movs	r2, #1
 800345c:	711a      	strb	r2, [r3, #4]
				break;
 800345e:	e04b      	b.n	80034f8 <SPI_available+0x464>
			case AIN4_OFF:
				Status_AIN[4] = 0;
 8003460:	4b8a      	ldr	r3, [pc, #552]	; (800368c <SPI_available+0x5f8>)
 8003462:	2200      	movs	r2, #0
 8003464:	711a      	strb	r2, [r3, #4]
				break;
 8003466:	e047      	b.n	80034f8 <SPI_available+0x464>
			case AIN5_ON:
				Status_AIN[5] = 1;;
 8003468:	4b88      	ldr	r3, [pc, #544]	; (800368c <SPI_available+0x5f8>)
 800346a:	2201      	movs	r2, #1
 800346c:	715a      	strb	r2, [r3, #5]
				break;
 800346e:	e043      	b.n	80034f8 <SPI_available+0x464>
			case AIN5_OFF:
				Status_AIN[5] = 0;
 8003470:	4b86      	ldr	r3, [pc, #536]	; (800368c <SPI_available+0x5f8>)
 8003472:	2200      	movs	r2, #0
 8003474:	715a      	strb	r2, [r3, #5]
				break;
 8003476:	e03f      	b.n	80034f8 <SPI_available+0x464>
			case AIN6_ON:
				Status_AIN[6] = 1;
 8003478:	4b84      	ldr	r3, [pc, #528]	; (800368c <SPI_available+0x5f8>)
 800347a:	2201      	movs	r2, #1
 800347c:	719a      	strb	r2, [r3, #6]
				break;
 800347e:	e03b      	b.n	80034f8 <SPI_available+0x464>
			case AIN6_OFF:
				Status_AIN[6] = 0;
 8003480:	4b82      	ldr	r3, [pc, #520]	; (800368c <SPI_available+0x5f8>)
 8003482:	2200      	movs	r2, #0
 8003484:	719a      	strb	r2, [r3, #6]
				break;
 8003486:	e037      	b.n	80034f8 <SPI_available+0x464>
			case AIN7_ON:
				Status_AIN[7] = 1;
 8003488:	4b80      	ldr	r3, [pc, #512]	; (800368c <SPI_available+0x5f8>)
 800348a:	2201      	movs	r2, #1
 800348c:	71da      	strb	r2, [r3, #7]
				break;
 800348e:	e033      	b.n	80034f8 <SPI_available+0x464>
			case AIN7_OFF:
				Status_AIN[7] = 0;
 8003490:	4b7e      	ldr	r3, [pc, #504]	; (800368c <SPI_available+0x5f8>)
 8003492:	2200      	movs	r2, #0
 8003494:	71da      	strb	r2, [r3, #7]
				break;
 8003496:	e02f      	b.n	80034f8 <SPI_available+0x464>
				//------------------------------------------------------------------
				//----------------------------Выходы ШИМ----------------------------
			case PWM0_ON:
				Status_PWM[0] = 1;
 8003498:	4b7d      	ldr	r3, [pc, #500]	; (8003690 <SPI_available+0x5fc>)
 800349a:	2201      	movs	r2, #1
 800349c:	701a      	strb	r2, [r3, #0]
				break;
 800349e:	e02b      	b.n	80034f8 <SPI_available+0x464>
			case PWM0_OFF:
				Status_PWM[0] = 0;
 80034a0:	4b7b      	ldr	r3, [pc, #492]	; (8003690 <SPI_available+0x5fc>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	701a      	strb	r2, [r3, #0]
				break;
 80034a6:	e027      	b.n	80034f8 <SPI_available+0x464>
			case PWM1_ON:
				Status_PWM[1] = 1;
 80034a8:	4b79      	ldr	r3, [pc, #484]	; (8003690 <SPI_available+0x5fc>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	705a      	strb	r2, [r3, #1]
				break;
 80034ae:	e023      	b.n	80034f8 <SPI_available+0x464>
			case PWM1_OFF:
				Status_PWM[1] = 0;
 80034b0:	4b77      	ldr	r3, [pc, #476]	; (8003690 <SPI_available+0x5fc>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	705a      	strb	r2, [r3, #1]
				break;
 80034b6:	e01f      	b.n	80034f8 <SPI_available+0x464>
			case PWM2_ON:
				Status_PWM[2] = 1;
 80034b8:	4b75      	ldr	r3, [pc, #468]	; (8003690 <SPI_available+0x5fc>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	709a      	strb	r2, [r3, #2]
				break;
 80034be:	e01b      	b.n	80034f8 <SPI_available+0x464>
			case PWM2_OFF:
				Status_PWM[2] = 0;
 80034c0:	4b73      	ldr	r3, [pc, #460]	; (8003690 <SPI_available+0x5fc>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	709a      	strb	r2, [r3, #2]
				break;
 80034c6:	e017      	b.n	80034f8 <SPI_available+0x464>
			case PWM3_ON:
				Status_PWM[3] = 1;
 80034c8:	4b71      	ldr	r3, [pc, #452]	; (8003690 <SPI_available+0x5fc>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	70da      	strb	r2, [r3, #3]
				break;
 80034ce:	e013      	b.n	80034f8 <SPI_available+0x464>
			case PWM3_OFF:
				Status_PWM[3] = 0;
 80034d0:	4b6f      	ldr	r3, [pc, #444]	; (8003690 <SPI_available+0x5fc>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	70da      	strb	r2, [r3, #3]
				break;
 80034d6:	e00f      	b.n	80034f8 <SPI_available+0x464>
				//------------------------------------------------------------------
				//--------------------------Выходы 1-Wire---------------------------
			case WR0_ON:
				Status_1WR[0] = 1;
 80034d8:	4b6e      	ldr	r3, [pc, #440]	; (8003694 <SPI_available+0x600>)
 80034da:	2201      	movs	r2, #1
 80034dc:	701a      	strb	r2, [r3, #0]
				break;
 80034de:	e00b      	b.n	80034f8 <SPI_available+0x464>
			case WR0_OFF:
				Status_1WR[0] = 0;
 80034e0:	4b6c      	ldr	r3, [pc, #432]	; (8003694 <SPI_available+0x600>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]
				break;
 80034e6:	e007      	b.n	80034f8 <SPI_available+0x464>
			case WR1_ON:
				Status_1WR[1] = 1;
 80034e8:	4b6a      	ldr	r3, [pc, #424]	; (8003694 <SPI_available+0x600>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	705a      	strb	r2, [r3, #1]
				break;
 80034ee:	e003      	b.n	80034f8 <SPI_available+0x464>
			case WR1_OFF:
				Status_1WR[1] = 0;
 80034f0:	4b68      	ldr	r3, [pc, #416]	; (8003694 <SPI_available+0x600>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	705a      	strb	r2, [r3, #1]
				break;
 80034f6:	bf00      	nop
				break;
			case INTERFACE_TEST:
				break;
				//------------------------------------------------------------------
		}
		if(SPI_rx_buf[0] == MCU_OUTPUT)
 80034f8:	4b67      	ldr	r3, [pc, #412]	; (8003698 <SPI_available+0x604>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2bc0      	cmp	r3, #192	; 0xc0
 80034fe:	d136      	bne.n	800356e <SPI_available+0x4da>
		{
			tp = 1;
 8003500:	4b66      	ldr	r3, [pc, #408]	; (800369c <SPI_available+0x608>)
 8003502:	2201      	movs	r2, #1
 8003504:	701a      	strb	r2, [r3, #0]
			tp1 = 1;
 8003506:	4b66      	ldr	r3, [pc, #408]	; (80036a0 <SPI_available+0x60c>)
 8003508:	2201      	movs	r2, #1
 800350a:	701a      	strb	r2, [r3, #0]
			SEND_str("start\n");
 800350c:	4865      	ldr	r0, [pc, #404]	; (80036a4 <SPI_available+0x610>)
 800350e:	f7fe fc0b 	bl	8001d28 <SEND_str>
			SEND_str("status_AIN ");
 8003512:	4865      	ldr	r0, [pc, #404]	; (80036a8 <SPI_available+0x614>)
 8003514:	f7fe fc08 	bl	8001d28 <SEND_str>
			USART_Tx(Status_AIN[0]);
 8003518:	4b5c      	ldr	r3, [pc, #368]	; (800368c <SPI_available+0x5f8>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f7fe fbeb 	bl	8001cf8 <USART_Tx>
			USART_Tx(Status_AIN[1]);
 8003522:	4b5a      	ldr	r3, [pc, #360]	; (800368c <SPI_available+0x5f8>)
 8003524:	785b      	ldrb	r3, [r3, #1]
 8003526:	4618      	mov	r0, r3
 8003528:	f7fe fbe6 	bl	8001cf8 <USART_Tx>
			USART_Tx(Status_AIN[2]);
 800352c:	4b57      	ldr	r3, [pc, #348]	; (800368c <SPI_available+0x5f8>)
 800352e:	789b      	ldrb	r3, [r3, #2]
 8003530:	4618      	mov	r0, r3
 8003532:	f7fe fbe1 	bl	8001cf8 <USART_Tx>
			USART_Tx(Status_AIN[3]);
 8003536:	4b55      	ldr	r3, [pc, #340]	; (800368c <SPI_available+0x5f8>)
 8003538:	78db      	ldrb	r3, [r3, #3]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fe fbdc 	bl	8001cf8 <USART_Tx>
			USART_Tx(Status_AIN[4]);
 8003540:	4b52      	ldr	r3, [pc, #328]	; (800368c <SPI_available+0x5f8>)
 8003542:	791b      	ldrb	r3, [r3, #4]
 8003544:	4618      	mov	r0, r3
 8003546:	f7fe fbd7 	bl	8001cf8 <USART_Tx>
			USART_Tx(Status_AIN[5]);
 800354a:	4b50      	ldr	r3, [pc, #320]	; (800368c <SPI_available+0x5f8>)
 800354c:	795b      	ldrb	r3, [r3, #5]
 800354e:	4618      	mov	r0, r3
 8003550:	f7fe fbd2 	bl	8001cf8 <USART_Tx>
			USART_Tx(Status_AIN[6]);
 8003554:	4b4d      	ldr	r3, [pc, #308]	; (800368c <SPI_available+0x5f8>)
 8003556:	799b      	ldrb	r3, [r3, #6]
 8003558:	4618      	mov	r0, r3
 800355a:	f7fe fbcd 	bl	8001cf8 <USART_Tx>
			USART_Tx(Status_AIN[7]);
 800355e:	4b4b      	ldr	r3, [pc, #300]	; (800368c <SPI_available+0x5f8>)
 8003560:	79db      	ldrb	r3, [r3, #7]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe fbc8 	bl	8001cf8 <USART_Tx>
			SEND_str(" END_status_AIN\n");
 8003568:	4850      	ldr	r0, [pc, #320]	; (80036ac <SPI_available+0x618>)
 800356a:	f7fe fbdd 	bl	8001d28 <SEND_str>
		}

		if(tp)
 800356e:	4b4b      	ldr	r3, [pc, #300]	; (800369c <SPI_available+0x608>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 811b 	beq.w	80037ae <SPI_available+0x71a>
		{
			if(i == 0)
 8003578:	4b4d      	ldr	r3, [pc, #308]	; (80036b0 <SPI_available+0x61c>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d128      	bne.n	80035d2 <SPI_available+0x53e>
			{
				SPI_tx_buf[0] = Status_AIN[j];
 8003580:	4b4c      	ldr	r3, [pc, #304]	; (80036b4 <SPI_available+0x620>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	4b41      	ldr	r3, [pc, #260]	; (800368c <SPI_available+0x5f8>)
 8003588:	5c9a      	ldrb	r2, [r3, r2]
 800358a:	4b4b      	ldr	r3, [pc, #300]	; (80036b8 <SPI_available+0x624>)
 800358c:	701a      	strb	r2, [r3, #0]
				j++;
 800358e:	4b49      	ldr	r3, [pc, #292]	; (80036b4 <SPI_available+0x620>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	3301      	adds	r3, #1
 8003594:	b2da      	uxtb	r2, r3
 8003596:	4b47      	ldr	r3, [pc, #284]	; (80036b4 <SPI_available+0x620>)
 8003598:	701a      	strb	r2, [r3, #0]
				if(j == 8)
 800359a:	4b46      	ldr	r3, [pc, #280]	; (80036b4 <SPI_available+0x620>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d108      	bne.n	80035b4 <SPI_available+0x520>
				{
					j = 0;
 80035a2:	4b44      	ldr	r3, [pc, #272]	; (80036b4 <SPI_available+0x620>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]
					i++;
 80035a8:	4b41      	ldr	r3, [pc, #260]	; (80036b0 <SPI_available+0x61c>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	3301      	adds	r3, #1
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	4b3f      	ldr	r3, [pc, #252]	; (80036b0 <SPI_available+0x61c>)
 80035b2:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 80035b4:	4b41      	ldr	r3, [pc, #260]	; (80036bc <SPI_available+0x628>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 80035ba:	2301      	movs	r3, #1
 80035bc:	4a36      	ldr	r2, [pc, #216]	; (8003698 <SPI_available+0x604>)
 80035be:	493e      	ldr	r1, [pc, #248]	; (80036b8 <SPI_available+0x624>)
 80035c0:	483f      	ldr	r0, [pc, #252]	; (80036c0 <SPI_available+0x62c>)
 80035c2:	f003 fcdf 	bl	8006f84 <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 80035c6:	bf00      	nop
 80035c8:	4b3c      	ldr	r3, [pc, #240]	; (80036bc <SPI_available+0x628>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0fb      	beq.n	80035c8 <SPI_available+0x534>
 80035d0:	e108      	b.n	80037e4 <SPI_available+0x750>
			}
			else if(i == 1)
 80035d2:	4b37      	ldr	r3, [pc, #220]	; (80036b0 <SPI_available+0x61c>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d128      	bne.n	800362c <SPI_available+0x598>
			{
				SPI_tx_buf[0] = Status_DIN[j];
 80035da:	4b36      	ldr	r3, [pc, #216]	; (80036b4 <SPI_available+0x620>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	4b29      	ldr	r3, [pc, #164]	; (8003688 <SPI_available+0x5f4>)
 80035e2:	5c9a      	ldrb	r2, [r3, r2]
 80035e4:	4b34      	ldr	r3, [pc, #208]	; (80036b8 <SPI_available+0x624>)
 80035e6:	701a      	strb	r2, [r3, #0]
				j++;
 80035e8:	4b32      	ldr	r3, [pc, #200]	; (80036b4 <SPI_available+0x620>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	3301      	adds	r3, #1
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	4b30      	ldr	r3, [pc, #192]	; (80036b4 <SPI_available+0x620>)
 80035f2:	701a      	strb	r2, [r3, #0]
				if(j == 8)
 80035f4:	4b2f      	ldr	r3, [pc, #188]	; (80036b4 <SPI_available+0x620>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d108      	bne.n	800360e <SPI_available+0x57a>
				{
					j = 0;
 80035fc:	4b2d      	ldr	r3, [pc, #180]	; (80036b4 <SPI_available+0x620>)
 80035fe:	2200      	movs	r2, #0
 8003600:	701a      	strb	r2, [r3, #0]
					i++;
 8003602:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <SPI_available+0x61c>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	3301      	adds	r3, #1
 8003608:	b2da      	uxtb	r2, r3
 800360a:	4b29      	ldr	r3, [pc, #164]	; (80036b0 <SPI_available+0x61c>)
 800360c:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 800360e:	4b2b      	ldr	r3, [pc, #172]	; (80036bc <SPI_available+0x628>)
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8003614:	2301      	movs	r3, #1
 8003616:	4a20      	ldr	r2, [pc, #128]	; (8003698 <SPI_available+0x604>)
 8003618:	4927      	ldr	r1, [pc, #156]	; (80036b8 <SPI_available+0x624>)
 800361a:	4829      	ldr	r0, [pc, #164]	; (80036c0 <SPI_available+0x62c>)
 800361c:	f003 fcb2 	bl	8006f84 <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 8003620:	bf00      	nop
 8003622:	4b26      	ldr	r3, [pc, #152]	; (80036bc <SPI_available+0x628>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0fb      	beq.n	8003622 <SPI_available+0x58e>
 800362a:	e0db      	b.n	80037e4 <SPI_available+0x750>
			}
			else if(i == 2)
 800362c:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <SPI_available+0x61c>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d147      	bne.n	80036c4 <SPI_available+0x630>
			{
				SPI_tx_buf[0] = Status_PWM[j];
 8003634:	4b1f      	ldr	r3, [pc, #124]	; (80036b4 <SPI_available+0x620>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	461a      	mov	r2, r3
 800363a:	4b15      	ldr	r3, [pc, #84]	; (8003690 <SPI_available+0x5fc>)
 800363c:	5c9a      	ldrb	r2, [r3, r2]
 800363e:	4b1e      	ldr	r3, [pc, #120]	; (80036b8 <SPI_available+0x624>)
 8003640:	701a      	strb	r2, [r3, #0]
				j++;
 8003642:	4b1c      	ldr	r3, [pc, #112]	; (80036b4 <SPI_available+0x620>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	3301      	adds	r3, #1
 8003648:	b2da      	uxtb	r2, r3
 800364a:	4b1a      	ldr	r3, [pc, #104]	; (80036b4 <SPI_available+0x620>)
 800364c:	701a      	strb	r2, [r3, #0]
				if(j == 8)
 800364e:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <SPI_available+0x620>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	2b08      	cmp	r3, #8
 8003654:	d108      	bne.n	8003668 <SPI_available+0x5d4>
				{
					j = 0;
 8003656:	4b17      	ldr	r3, [pc, #92]	; (80036b4 <SPI_available+0x620>)
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
					i++;
 800365c:	4b14      	ldr	r3, [pc, #80]	; (80036b0 <SPI_available+0x61c>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	3301      	adds	r3, #1
 8003662:	b2da      	uxtb	r2, r3
 8003664:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <SPI_available+0x61c>)
 8003666:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 8003668:	4b14      	ldr	r3, [pc, #80]	; (80036bc <SPI_available+0x628>)
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 800366e:	2301      	movs	r3, #1
 8003670:	4a09      	ldr	r2, [pc, #36]	; (8003698 <SPI_available+0x604>)
 8003672:	4911      	ldr	r1, [pc, #68]	; (80036b8 <SPI_available+0x624>)
 8003674:	4812      	ldr	r0, [pc, #72]	; (80036c0 <SPI_available+0x62c>)
 8003676:	f003 fc85 	bl	8006f84 <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 800367a:	bf00      	nop
 800367c:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <SPI_available+0x628>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0fb      	beq.n	800367c <SPI_available+0x5e8>
 8003684:	e0ae      	b.n	80037e4 <SPI_available+0x750>
 8003686:	bf00      	nop
 8003688:	200002a8 	.word	0x200002a8
 800368c:	200002a0 	.word	0x200002a0
 8003690:	200002b0 	.word	0x200002b0
 8003694:	200002c0 	.word	0x200002c0
 8003698:	200002c8 	.word	0x200002c8
 800369c:	200002d0 	.word	0x200002d0
 80036a0:	20000008 	.word	0x20000008
 80036a4:	08018d8c 	.word	0x08018d8c
 80036a8:	08018d94 	.word	0x08018d94
 80036ac:	08018da0 	.word	0x08018da0
 80036b0:	200002ce 	.word	0x200002ce
 80036b4:	200002cf 	.word	0x200002cf
 80036b8:	200002cc 	.word	0x200002cc
 80036bc:	200002cd 	.word	0x200002cd
 80036c0:	200005dc 	.word	0x200005dc
			}
			else if(i == 3)
 80036c4:	4b55      	ldr	r3, [pc, #340]	; (800381c <SPI_available+0x788>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d128      	bne.n	800371e <SPI_available+0x68a>
			{
				SPI_tx_buf[0] = Status_OCD[j];
 80036cc:	4b54      	ldr	r3, [pc, #336]	; (8003820 <SPI_available+0x78c>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	4b54      	ldr	r3, [pc, #336]	; (8003824 <SPI_available+0x790>)
 80036d4:	5c9a      	ldrb	r2, [r3, r2]
 80036d6:	4b54      	ldr	r3, [pc, #336]	; (8003828 <SPI_available+0x794>)
 80036d8:	701a      	strb	r2, [r3, #0]
				j++;
 80036da:	4b51      	ldr	r3, [pc, #324]	; (8003820 <SPI_available+0x78c>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	3301      	adds	r3, #1
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	4b4f      	ldr	r3, [pc, #316]	; (8003820 <SPI_available+0x78c>)
 80036e4:	701a      	strb	r2, [r3, #0]
				if(j == 8)
 80036e6:	4b4e      	ldr	r3, [pc, #312]	; (8003820 <SPI_available+0x78c>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d108      	bne.n	8003700 <SPI_available+0x66c>
				{
					j = 0;
 80036ee:	4b4c      	ldr	r3, [pc, #304]	; (8003820 <SPI_available+0x78c>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	701a      	strb	r2, [r3, #0]
					i++;
 80036f4:	4b49      	ldr	r3, [pc, #292]	; (800381c <SPI_available+0x788>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	3301      	adds	r3, #1
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	4b47      	ldr	r3, [pc, #284]	; (800381c <SPI_available+0x788>)
 80036fe:	701a      	strb	r2, [r3, #0]
				}
				flag_iput_spi2 = 0;
 8003700:	4b4a      	ldr	r3, [pc, #296]	; (800382c <SPI_available+0x798>)
 8003702:	2200      	movs	r2, #0
 8003704:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8003706:	2301      	movs	r3, #1
 8003708:	4a49      	ldr	r2, [pc, #292]	; (8003830 <SPI_available+0x79c>)
 800370a:	4947      	ldr	r1, [pc, #284]	; (8003828 <SPI_available+0x794>)
 800370c:	4849      	ldr	r0, [pc, #292]	; (8003834 <SPI_available+0x7a0>)
 800370e:	f003 fc39 	bl	8006f84 <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 8003712:	bf00      	nop
 8003714:	4b45      	ldr	r3, [pc, #276]	; (800382c <SPI_available+0x798>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0fb      	beq.n	8003714 <SPI_available+0x680>
 800371c:	e062      	b.n	80037e4 <SPI_available+0x750>
			}
			else if(i == 4)
 800371e:	4b3f      	ldr	r3, [pc, #252]	; (800381c <SPI_available+0x788>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b04      	cmp	r3, #4
 8003724:	d129      	bne.n	800377a <SPI_available+0x6e6>
			{
				SPI_tx_buf[0] = Status_1WR[j];
 8003726:	4b3e      	ldr	r3, [pc, #248]	; (8003820 <SPI_available+0x78c>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	4b42      	ldr	r3, [pc, #264]	; (8003838 <SPI_available+0x7a4>)
 800372e:	5c9a      	ldrb	r2, [r3, r2]
 8003730:	4b3d      	ldr	r3, [pc, #244]	; (8003828 <SPI_available+0x794>)
 8003732:	701a      	strb	r2, [r3, #0]
				j++;
 8003734:	4b3a      	ldr	r3, [pc, #232]	; (8003820 <SPI_available+0x78c>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	3301      	adds	r3, #1
 800373a:	b2da      	uxtb	r2, r3
 800373c:	4b38      	ldr	r3, [pc, #224]	; (8003820 <SPI_available+0x78c>)
 800373e:	701a      	strb	r2, [r3, #0]
				if(j == 8)
 8003740:	4b37      	ldr	r3, [pc, #220]	; (8003820 <SPI_available+0x78c>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b08      	cmp	r3, #8
 8003746:	d109      	bne.n	800375c <SPI_available+0x6c8>
				{
					j = 0;
 8003748:	4b35      	ldr	r3, [pc, #212]	; (8003820 <SPI_available+0x78c>)
 800374a:	2200      	movs	r2, #0
 800374c:	701a      	strb	r2, [r3, #0]
					i++;
 800374e:	4b33      	ldr	r3, [pc, #204]	; (800381c <SPI_available+0x788>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	3301      	adds	r3, #1
 8003754:	b2da      	uxtb	r2, r3
 8003756:	4b31      	ldr	r3, [pc, #196]	; (800381c <SPI_available+0x788>)
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	e043      	b.n	80037e4 <SPI_available+0x750>
				}
				else
				{
					flag_iput_spi2 = 0;
 800375c:	4b33      	ldr	r3, [pc, #204]	; (800382c <SPI_available+0x798>)
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
					HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8003762:	2301      	movs	r3, #1
 8003764:	4a32      	ldr	r2, [pc, #200]	; (8003830 <SPI_available+0x79c>)
 8003766:	4930      	ldr	r1, [pc, #192]	; (8003828 <SPI_available+0x794>)
 8003768:	4832      	ldr	r0, [pc, #200]	; (8003834 <SPI_available+0x7a0>)
 800376a:	f003 fc0b 	bl	8006f84 <HAL_SPI_TransmitReceive_IT>
					while(!flag_iput_spi2) {;}
 800376e:	bf00      	nop
 8003770:	4b2e      	ldr	r3, [pc, #184]	; (800382c <SPI_available+0x798>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0fb      	beq.n	8003770 <SPI_available+0x6dc>
 8003778:	e034      	b.n	80037e4 <SPI_available+0x750>
				}
			}
			else if(i == 5)
 800377a:	4b28      	ldr	r3, [pc, #160]	; (800381c <SPI_available+0x788>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b05      	cmp	r3, #5
 8003780:	d130      	bne.n	80037e4 <SPI_available+0x750>
			{
				i = 0;
 8003782:	4b26      	ldr	r3, [pc, #152]	; (800381c <SPI_available+0x788>)
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
				j = 0;
 8003788:	4b25      	ldr	r3, [pc, #148]	; (8003820 <SPI_available+0x78c>)
 800378a:	2200      	movs	r2, #0
 800378c:	701a      	strb	r2, [r3, #0]
				tp = 0;
 800378e:	4b2b      	ldr	r3, [pc, #172]	; (800383c <SPI_available+0x7a8>)
 8003790:	2200      	movs	r2, #0
 8003792:	701a      	strb	r2, [r3, #0]
				SEND_str("the_end\n");
 8003794:	482a      	ldr	r0, [pc, #168]	; (8003840 <SPI_available+0x7ac>)
 8003796:	f7fe fac7 	bl	8001d28 <SEND_str>
				flag_iput_spi2 = 0;
 800379a:	4b24      	ldr	r3, [pc, #144]	; (800382c <SPI_available+0x798>)
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 80037a0:	2301      	movs	r3, #1
 80037a2:	4a23      	ldr	r2, [pc, #140]	; (8003830 <SPI_available+0x79c>)
 80037a4:	4920      	ldr	r1, [pc, #128]	; (8003828 <SPI_available+0x794>)
 80037a6:	4823      	ldr	r0, [pc, #140]	; (8003834 <SPI_available+0x7a0>)
 80037a8:	f003 fbec 	bl	8006f84 <HAL_SPI_TransmitReceive_IT>
 80037ac:	e01a      	b.n	80037e4 <SPI_available+0x750>
			}
		}
		else if(SPI_rx_buf[0] == MCU_RELAY_CNT)
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <SPI_available+0x79c>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2ba1      	cmp	r3, #161	; 0xa1
 80037b4:	d016      	beq.n	80037e4 <SPI_available+0x750>
		{


			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения РЕЛЕ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_DIGITAL_CNT)
 80037b6:	4b1e      	ldr	r3, [pc, #120]	; (8003830 <SPI_available+0x79c>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2ba2      	cmp	r3, #162	; 0xa2
 80037bc:	d012      	beq.n	80037e4 <SPI_available+0x750>
		{
			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения ЦИФРОВЫХ ВХОДОВ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_DIMMING_CNT)
 80037be:	4b1c      	ldr	r3, [pc, #112]	; (8003830 <SPI_available+0x79c>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2ba3      	cmp	r3, #163	; 0xa3
 80037c4:	d00e      	beq.n	80037e4 <SPI_available+0x750>
		{
			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения ДИММИРОВАНИЯ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_INTERFACE_CNT)
 80037c6:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <SPI_available+0x79c>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2ba4      	cmp	r3, #164	; 0xa4
 80037cc:	d00a      	beq.n	80037e4 <SPI_available+0x750>
		{
			//По этой комманде надо прислать КОЛ-ВО подключенных блоков расширения ИНТЕРФЕЙСОВ (от 0 до 10)
		}
		else if(SPI_rx_buf[0] == MCU_RELAY_ADR)
 80037ce:	4b18      	ldr	r3, [pc, #96]	; (8003830 <SPI_available+0x79c>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2bb1      	cmp	r3, #177	; 0xb1
 80037d4:	d006      	beq.n	80037e4 <SPI_available+0x750>
		{
			//По этой комманде надо прислать АДРЕСА подключенных блоков расширения РЕЛЕ (от 2 до 11)
		}
		else if(SPI_rx_buf[0] == MCU_DIGITAL_ADR)
 80037d6:	4b16      	ldr	r3, [pc, #88]	; (8003830 <SPI_available+0x79c>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2bb2      	cmp	r3, #178	; 0xb2
 80037dc:	d002      	beq.n	80037e4 <SPI_available+0x750>
		{
			//По этой комманде надо прислать АДРЕСА подключенных блоков расширения ЦИФРОВЫХ ВХОДОВ (от 12 до 21)
		}
		else if(SPI_rx_buf[0] == MCU_DIMMING_ADR)
 80037de:	4b14      	ldr	r3, [pc, #80]	; (8003830 <SPI_available+0x79c>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2bb3      	cmp	r3, #179	; 0xb3
		}
		else if(SPI_rx_buf[0] == MCU_INTERFACE_ADR)
		{
			//По этой комманде надо прислать АДРЕСА подключенных блоков расширения ИНТЕРФЕЙСОВ (от 32 до 41)
		}
		if(!tp)
 80037e4:	4b15      	ldr	r3, [pc, #84]	; (800383c <SPI_available+0x7a8>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d115      	bne.n	8003818 <SPI_available+0x784>
		{
			if(tp1)
 80037ec:	4b15      	ldr	r3, [pc, #84]	; (8003844 <SPI_available+0x7b0>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <SPI_available+0x768>
			{
				tp1 = 0;
 80037f4:	4b13      	ldr	r3, [pc, #76]	; (8003844 <SPI_available+0x7b0>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	701a      	strb	r2, [r3, #0]
//				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
//				while(!flag_iput_spi2) {;}
//			}
//		}
	}
}
 80037fa:	e00d      	b.n	8003818 <SPI_available+0x784>
				flag_iput_spi2 = 1;		//Fix bag! so so
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <SPI_available+0x798>)
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t *)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8003802:	2301      	movs	r3, #1
 8003804:	4a0a      	ldr	r2, [pc, #40]	; (8003830 <SPI_available+0x79c>)
 8003806:	4908      	ldr	r1, [pc, #32]	; (8003828 <SPI_available+0x794>)
 8003808:	480a      	ldr	r0, [pc, #40]	; (8003834 <SPI_available+0x7a0>)
 800380a:	f003 fbbb 	bl	8006f84 <HAL_SPI_TransmitReceive_IT>
				while(!flag_iput_spi2) {;}
 800380e:	bf00      	nop
 8003810:	4b06      	ldr	r3, [pc, #24]	; (800382c <SPI_available+0x798>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0fb      	beq.n	8003810 <SPI_available+0x77c>
}
 8003818:	bf00      	nop
 800381a:	bd80      	pop	{r7, pc}
 800381c:	200002ce 	.word	0x200002ce
 8003820:	200002cf 	.word	0x200002cf
 8003824:	200002b8 	.word	0x200002b8
 8003828:	200002cc 	.word	0x200002cc
 800382c:	200002cd 	.word	0x200002cd
 8003830:	200002c8 	.word	0x200002c8
 8003834:	200005dc 	.word	0x200005dc
 8003838:	200002c0 	.word	0x200002c0
 800383c:	200002d0 	.word	0x200002d0
 8003840:	08018db4 	.word	0x08018db4
 8003844:	20000008 	.word	0x20000008

08003848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	607b      	str	r3, [r7, #4]
 8003852:	4b10      	ldr	r3, [pc, #64]	; (8003894 <HAL_MspInit+0x4c>)
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	4a0f      	ldr	r2, [pc, #60]	; (8003894 <HAL_MspInit+0x4c>)
 8003858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800385c:	6453      	str	r3, [r2, #68]	; 0x44
 800385e:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <HAL_MspInit+0x4c>)
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003866:	607b      	str	r3, [r7, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	603b      	str	r3, [r7, #0]
 800386e:	4b09      	ldr	r3, [pc, #36]	; (8003894 <HAL_MspInit+0x4c>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	4a08      	ldr	r2, [pc, #32]	; (8003894 <HAL_MspInit+0x4c>)
 8003874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003878:	6413      	str	r3, [r2, #64]	; 0x40
 800387a:	4b06      	ldr	r3, [pc, #24]	; (8003894 <HAL_MspInit+0x4c>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800

08003898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08c      	sub	sp, #48	; 0x30
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80038a8:	2200      	movs	r2, #0
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	2019      	movs	r0, #25
 80038ae:	f001 f861 	bl	8004974 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80038b2:	2019      	movs	r0, #25
 80038b4:	f001 f87a 	bl	80049ac <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	4b1f      	ldr	r3, [pc, #124]	; (800393c <HAL_InitTick+0xa4>)
 80038be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c0:	4a1e      	ldr	r2, [pc, #120]	; (800393c <HAL_InitTick+0xa4>)
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	6453      	str	r3, [r2, #68]	; 0x44
 80038c8:	4b1c      	ldr	r3, [pc, #112]	; (800393c <HAL_InitTick+0xa4>)
 80038ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038d4:	f107 0210 	add.w	r2, r7, #16
 80038d8:	f107 0314 	add.w	r3, r7, #20
 80038dc:	4611      	mov	r1, r2
 80038de:	4618      	mov	r0, r3
 80038e0:	f002 ff70 	bl	80067c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80038e4:	f002 ff5a 	bl	800679c <HAL_RCC_GetPCLK2Freq>
 80038e8:	4603      	mov	r3, r0
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f0:	4a13      	ldr	r2, [pc, #76]	; (8003940 <HAL_InitTick+0xa8>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	0c9b      	lsrs	r3, r3, #18
 80038f8:	3b01      	subs	r3, #1
 80038fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80038fc:	4b11      	ldr	r3, [pc, #68]	; (8003944 <HAL_InitTick+0xac>)
 80038fe:	4a12      	ldr	r2, [pc, #72]	; (8003948 <HAL_InitTick+0xb0>)
 8003900:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003902:	4b10      	ldr	r3, [pc, #64]	; (8003944 <HAL_InitTick+0xac>)
 8003904:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003908:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800390a:	4a0e      	ldr	r2, [pc, #56]	; (8003944 <HAL_InitTick+0xac>)
 800390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <HAL_InitTick+0xac>)
 8003912:	2200      	movs	r2, #0
 8003914:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003916:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <HAL_InitTick+0xac>)
 8003918:	2200      	movs	r2, #0
 800391a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800391c:	4809      	ldr	r0, [pc, #36]	; (8003944 <HAL_InitTick+0xac>)
 800391e:	f003 fecf 	bl	80076c0 <HAL_TIM_Base_Init>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d104      	bne.n	8003932 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003928:	4806      	ldr	r0, [pc, #24]	; (8003944 <HAL_InitTick+0xac>)
 800392a:	f003 fefe 	bl	800772a <HAL_TIM_Base_Start_IT>
 800392e:	4603      	mov	r3, r0
 8003930:	e000      	b.n	8003934 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
}
 8003934:	4618      	mov	r0, r3
 8003936:	3730      	adds	r7, #48	; 0x30
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40023800 	.word	0x40023800
 8003940:	431bde83 	.word	0x431bde83
 8003944:	2000068c 	.word	0x2000068c
 8003948:	40010000 	.word	0x40010000

0800394c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003950:	bf00      	nop
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800395a:	b480      	push	{r7}
 800395c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800395e:	e7fe      	b.n	800395e <HardFault_Handler+0x4>

08003960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003964:	e7fe      	b.n	8003964 <MemManage_Handler+0x4>

08003966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003966:	b480      	push	{r7}
 8003968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800396a:	e7fe      	b.n	800396a <BusFault_Handler+0x4>

0800396c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003970:	e7fe      	b.n	8003970 <UsageFault_Handler+0x4>

08003972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003972:	b480      	push	{r7}
 8003974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800398e:	b480      	push	{r7}
 8003990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003992:	bf00      	nop
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039a0:	bf00      	nop
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039b0:	4802      	ldr	r0, [pc, #8]	; (80039bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80039b2:	f003 ff09 	bl	80077c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	2000068c 	.word	0x2000068c

080039c0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80039c4:	4802      	ldr	r0, [pc, #8]	; (80039d0 <SPI2_IRQHandler+0x10>)
 80039c6:	f003 fb71 	bl	80070ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	200005dc 	.word	0x200005dc

080039d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(((huart1.Instance->SR & USART_SR_RXNE) != RESET) && ((huart1.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 80039da:	4b18      	ldr	r3, [pc, #96]	; (8003a3c <USART1_IRQHandler+0x68>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d022      	beq.n	8003a2e <USART1_IRQHandler+0x5a>
 80039e8:	4b14      	ldr	r3, [pc, #80]	; (8003a3c <USART1_IRQHandler+0x68>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d01b      	beq.n	8003a2e <USART1_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 80039f6:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <USART1_IRQHandler+0x68>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	71fb      	strb	r3, [r7, #7]
		gsm_rx_buffer_index_t i = (uint16_t)(gsm_rx_buffer_head + 1) % GSM_RX_BUFFER_SIZE;
 80039fe:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <USART1_IRQHandler+0x6c>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	3301      	adds	r3, #1
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a0c:	71bb      	strb	r3, [r7, #6]

		if(i != gsm_rx_buffer_tail)
 8003a0e:	4b0d      	ldr	r3, [pc, #52]	; (8003a44 <USART1_IRQHandler+0x70>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	79ba      	ldrb	r2, [r7, #6]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d009      	beq.n	8003a2e <USART1_IRQHandler+0x5a>
		{
			gsm_rx_buffer[gsm_rx_buffer_head] = rbyte;
 8003a1a:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <USART1_IRQHandler+0x6c>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	4619      	mov	r1, r3
 8003a22:	4a09      	ldr	r2, [pc, #36]	; (8003a48 <USART1_IRQHandler+0x74>)
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	5453      	strb	r3, [r2, r1]
			gsm_rx_buffer_head = i;
 8003a28:	4a05      	ldr	r2, [pc, #20]	; (8003a40 <USART1_IRQHandler+0x6c>)
 8003a2a:	79bb      	ldrb	r3, [r7, #6]
 8003a2c:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 8003a2e:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	2000074c 	.word	0x2000074c
 8003a40:	200002d8 	.word	0x200002d8
 8003a44:	200002d9 	.word	0x200002d9
 8003a48:	200002dc 	.word	0x200002dc

08003a4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(((huart2.Instance->SR & USART_SR_RXNE) != RESET) && ((huart2.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8003a52:	4b18      	ldr	r3, [pc, #96]	; (8003ab4 <USART2_IRQHandler+0x68>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d022      	beq.n	8003aa6 <USART2_IRQHandler+0x5a>
 8003a60:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <USART2_IRQHandler+0x68>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01b      	beq.n	8003aa6 <USART2_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8003a6e:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <USART2_IRQHandler+0x68>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	71fb      	strb	r3, [r7, #7]
		rs485_rx_buffer_index_t i = (uint16_t)(rs485_rx_buffer_head + 1) % RS485_RX_BUFFER_SIZE;
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <USART2_IRQHandler+0x6c>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a84:	71bb      	strb	r3, [r7, #6]

		if(i != rs485_rx_buffer_tail)
 8003a86:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <USART2_IRQHandler+0x70>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	79ba      	ldrb	r2, [r7, #6]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d009      	beq.n	8003aa6 <USART2_IRQHandler+0x5a>
		{
			rs485_rx_buffer[rs485_rx_buffer_head] = rbyte;
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <USART2_IRQHandler+0x6c>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4a09      	ldr	r2, [pc, #36]	; (8003ac0 <USART2_IRQHandler+0x74>)
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	5453      	strb	r3, [r2, r1]
			rs485_rx_buffer_head = i;
 8003aa0:	4a05      	ldr	r2, [pc, #20]	; (8003ab8 <USART2_IRQHandler+0x6c>)
 8003aa2:	79bb      	ldrb	r3, [r7, #6]
 8003aa4:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 8003aa6:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	2000078c 	.word	0x2000078c
 8003ab8:	20000360 	.word	0x20000360
 8003abc:	20000361 	.word	0x20000361
 8003ac0:	20000364 	.word	0x20000364

08003ac4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
//Раскоментить для дебага по USART(кроме отладки по Ethernet)

	if(((huart3.Instance->SR & USART_SR_RXNE) != RESET) && ((huart3.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8003aca:	4b18      	ldr	r3, [pc, #96]	; (8003b2c <USART3_IRQHandler+0x68>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0320 	and.w	r3, r3, #32
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d022      	beq.n	8003b1e <USART3_IRQHandler+0x5a>
 8003ad8:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <USART3_IRQHandler+0x68>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d01b      	beq.n	8003b1e <USART3_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart3.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8003ae6:	4b11      	ldr	r3, [pc, #68]	; (8003b2c <USART3_IRQHandler+0x68>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <USART3_IRQHandler+0x6c>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	3301      	adds	r3, #1
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003afc:	71bb      	strb	r3, [r7, #6]

		if(i != dbg_rx_buffer_tail)
 8003afe:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <USART3_IRQHandler+0x70>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	79ba      	ldrb	r2, [r7, #6]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d009      	beq.n	8003b1e <USART3_IRQHandler+0x5a>
		{
			dbg_rx_buffer[dbg_rx_buffer_head] = rbyte;
 8003b0a:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <USART3_IRQHandler+0x6c>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	4619      	mov	r1, r3
 8003b12:	4a09      	ldr	r2, [pc, #36]	; (8003b38 <USART3_IRQHandler+0x74>)
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	5453      	strb	r3, [r2, r1]
			dbg_rx_buffer_head = i;
 8003b18:	4a05      	ldr	r2, [pc, #20]	; (8003b30 <USART3_IRQHandler+0x6c>)
 8003b1a:	79bb      	ldrb	r3, [r7, #6]
 8003b1c:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 8003b1e:	bf00      	nop
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	2000070c 	.word	0x2000070c
 8003b30:	2000031c 	.word	0x2000031c
 8003b34:	2000031d 	.word	0x2000031d
 8003b38:	20000320 	.word	0x20000320

08003b3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
	return 1;
 8003b40:	2301      	movs	r3, #1
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <_kill>:

int _kill(int pid, int sig)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <_kill+0x20>)
 8003b58:	2216      	movs	r2, #22
 8003b5a:	601a      	str	r2, [r3, #0]
	return -1;
 8003b5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	20006a64 	.word	0x20006a64

08003b70 <_exit>:

void _exit (int status)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b78:	f04f 31ff 	mov.w	r1, #4294967295
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff ffe5 	bl	8003b4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b82:	e7fe      	b.n	8003b82 <_exit+0x12>

08003b84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	e00a      	b.n	8003bac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b96:	f3af 8000 	nop.w
 8003b9a:	4601      	mov	r1, r0
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	60ba      	str	r2, [r7, #8]
 8003ba2:	b2ca      	uxtb	r2, r1
 8003ba4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	dbf0      	blt.n	8003b96 <_read+0x12>
	}

return len;
 8003bb4:	687b      	ldr	r3, [r7, #4]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b086      	sub	sp, #24
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]
 8003bce:	e009      	b.n	8003be4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	60ba      	str	r2, [r7, #8]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	3301      	adds	r3, #1
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	dbf1      	blt.n	8003bd0 <_write+0x12>
	}
	return len;
 8003bec:	687b      	ldr	r3, [r7, #4]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <_close>:

int _close(int file)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
	return -1;
 8003bfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c1e:	605a      	str	r2, [r3, #4]
	return 0;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <_isatty>:

int _isatty(int file)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
	return 1;
 8003c36:	2301      	movs	r3, #1
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
	return 0;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
	...

08003c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c68:	4a14      	ldr	r2, [pc, #80]	; (8003cbc <_sbrk+0x5c>)
 8003c6a:	4b15      	ldr	r3, [pc, #84]	; (8003cc0 <_sbrk+0x60>)
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c74:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <_sbrk+0x64>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d102      	bne.n	8003c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c7c:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <_sbrk+0x64>)
 8003c7e:	4a12      	ldr	r2, [pc, #72]	; (8003cc8 <_sbrk+0x68>)
 8003c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c82:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <_sbrk+0x64>)
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4413      	add	r3, r2
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d205      	bcs.n	8003c9c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003c90:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <_sbrk+0x6c>)
 8003c92:	220c      	movs	r2, #12
 8003c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c96:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9a:	e009      	b.n	8003cb0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c9c:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <_sbrk+0x64>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ca2:	4b08      	ldr	r3, [pc, #32]	; (8003cc4 <_sbrk+0x64>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4413      	add	r3, r2
 8003caa:	4a06      	ldr	r2, [pc, #24]	; (8003cc4 <_sbrk+0x64>)
 8003cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cae:	68fb      	ldr	r3, [r7, #12]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	20020000 	.word	0x20020000
 8003cc0:	00004000 	.word	0x00004000
 8003cc4:	200002d4 	.word	0x200002d4
 8003cc8:	20006a78 	.word	0x20006a78
 8003ccc:	20006a64 	.word	0x20006a64

08003cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cd4:	4b08      	ldr	r3, [pc, #32]	; (8003cf8 <SystemInit+0x28>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	4a07      	ldr	r2, [pc, #28]	; (8003cf8 <SystemInit+0x28>)
 8003cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <SystemInit+0x28>)
 8003ce6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003cea:	609a      	str	r2, [r3, #8]
#endif
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08a      	sub	sp, #40	; 0x28
 8003d00:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d02:	f107 0320 	add.w	r3, r7, #32
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d0c:	1d3b      	adds	r3, r7, #4
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	605a      	str	r2, [r3, #4]
 8003d14:	609a      	str	r2, [r3, #8]
 8003d16:	60da      	str	r2, [r3, #12]
 8003d18:	611a      	str	r2, [r3, #16]
 8003d1a:	615a      	str	r2, [r3, #20]
 8003d1c:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003d1e:	4b32      	ldr	r3, [pc, #200]	; (8003de8 <MX_TIM3_Init+0xec>)
 8003d20:	4a32      	ldr	r2, [pc, #200]	; (8003dec <MX_TIM3_Init+0xf0>)
 8003d22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003d24:	4b30      	ldr	r3, [pc, #192]	; (8003de8 <MX_TIM3_Init+0xec>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d2a:	4b2f      	ldr	r3, [pc, #188]	; (8003de8 <MX_TIM3_Init+0xec>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003d30:	4b2d      	ldr	r3, [pc, #180]	; (8003de8 <MX_TIM3_Init+0xec>)
 8003d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d38:	4b2b      	ldr	r3, [pc, #172]	; (8003de8 <MX_TIM3_Init+0xec>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d3e:	4b2a      	ldr	r3, [pc, #168]	; (8003de8 <MX_TIM3_Init+0xec>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003d44:	4828      	ldr	r0, [pc, #160]	; (8003de8 <MX_TIM3_Init+0xec>)
 8003d46:	f003 fd14 	bl	8007772 <HAL_TIM_PWM_Init>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003d50:	f7ff f81c 	bl	8002d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d54:	2300      	movs	r3, #0
 8003d56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d5c:	f107 0320 	add.w	r3, r7, #32
 8003d60:	4619      	mov	r1, r3
 8003d62:	4821      	ldr	r0, [pc, #132]	; (8003de8 <MX_TIM3_Init+0xec>)
 8003d64:	f004 f976 	bl	8008054 <HAL_TIMEx_MasterConfigSynchronization>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003d6e:	f7ff f80d 	bl	8002d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d72:	2360      	movs	r3, #96	; 0x60
 8003d74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d82:	1d3b      	adds	r3, r7, #4
 8003d84:	2200      	movs	r2, #0
 8003d86:	4619      	mov	r1, r3
 8003d88:	4817      	ldr	r0, [pc, #92]	; (8003de8 <MX_TIM3_Init+0xec>)
 8003d8a:	f003 fe25 	bl	80079d8 <HAL_TIM_PWM_ConfigChannel>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003d94:	f7fe fffa 	bl	8002d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d98:	1d3b      	adds	r3, r7, #4
 8003d9a:	2204      	movs	r2, #4
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4812      	ldr	r0, [pc, #72]	; (8003de8 <MX_TIM3_Init+0xec>)
 8003da0:	f003 fe1a 	bl	80079d8 <HAL_TIM_PWM_ConfigChannel>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003daa:	f7fe ffef 	bl	8002d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003dae:	1d3b      	adds	r3, r7, #4
 8003db0:	2208      	movs	r2, #8
 8003db2:	4619      	mov	r1, r3
 8003db4:	480c      	ldr	r0, [pc, #48]	; (8003de8 <MX_TIM3_Init+0xec>)
 8003db6:	f003 fe0f 	bl	80079d8 <HAL_TIM_PWM_ConfigChannel>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8003dc0:	f7fe ffe4 	bl	8002d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003dc4:	1d3b      	adds	r3, r7, #4
 8003dc6:	220c      	movs	r2, #12
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4807      	ldr	r0, [pc, #28]	; (8003de8 <MX_TIM3_Init+0xec>)
 8003dcc:	f003 fe04 	bl	80079d8 <HAL_TIM_PWM_ConfigChannel>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8003dd6:	f7fe ffd9 	bl	8002d8c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8003dda:	4803      	ldr	r0, [pc, #12]	; (8003de8 <MX_TIM3_Init+0xec>)
 8003ddc:	f000 f82a 	bl	8003e34 <HAL_TIM_MspPostInit>

}
 8003de0:	bf00      	nop
 8003de2:	3728      	adds	r7, #40	; 0x28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	200006cc 	.word	0x200006cc
 8003dec:	40000400 	.word	0x40000400

08003df0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a0b      	ldr	r2, [pc, #44]	; (8003e2c <HAL_TIM_PWM_MspInit+0x3c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d10d      	bne.n	8003e1e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	4b0a      	ldr	r3, [pc, #40]	; (8003e30 <HAL_TIM_PWM_MspInit+0x40>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	4a09      	ldr	r2, [pc, #36]	; (8003e30 <HAL_TIM_PWM_MspInit+0x40>)
 8003e0c:	f043 0302 	orr.w	r3, r3, #2
 8003e10:	6413      	str	r3, [r2, #64]	; 0x40
 8003e12:	4b07      	ldr	r3, [pc, #28]	; (8003e30 <HAL_TIM_PWM_MspInit+0x40>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003e1e:	bf00      	nop
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40000400 	.word	0x40000400
 8003e30:	40023800 	.word	0x40023800

08003e34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e3c:	f107 030c 	add.w	r3, r7, #12
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	605a      	str	r2, [r3, #4]
 8003e46:	609a      	str	r2, [r3, #8]
 8003e48:	60da      	str	r2, [r3, #12]
 8003e4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <HAL_TIM_MspPostInit+0x68>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d11e      	bne.n	8003e94 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e56:	2300      	movs	r3, #0
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	4b11      	ldr	r3, [pc, #68]	; (8003ea0 <HAL_TIM_MspPostInit+0x6c>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	4a10      	ldr	r2, [pc, #64]	; (8003ea0 <HAL_TIM_MspPostInit+0x6c>)
 8003e60:	f043 0304 	orr.w	r3, r3, #4
 8003e64:	6313      	str	r3, [r2, #48]	; 0x30
 8003e66:	4b0e      	ldr	r3, [pc, #56]	; (8003ea0 <HAL_TIM_MspPostInit+0x6c>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	60bb      	str	r3, [r7, #8]
 8003e70:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM0_Pin|PWM1_Pin|PWM2_Pin|PWM3_Pin;
 8003e72:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003e76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e80:	2303      	movs	r3, #3
 8003e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e84:	2302      	movs	r3, #2
 8003e86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e88:	f107 030c 	add.w	r3, r7, #12
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4805      	ldr	r0, [pc, #20]	; (8003ea4 <HAL_TIM_MspPostInit+0x70>)
 8003e90:	f001 fe5e 	bl	8005b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003e94:	bf00      	nop
 8003e96:	3720      	adds	r7, #32
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40000400 	.word	0x40000400
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	40020800 	.word	0x40020800

08003ea8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003eac:	4b11      	ldr	r3, [pc, #68]	; (8003ef4 <MX_USART1_UART_Init+0x4c>)
 8003eae:	4a12      	ldr	r2, [pc, #72]	; (8003ef8 <MX_USART1_UART_Init+0x50>)
 8003eb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8003eb2:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <MX_USART1_UART_Init+0x4c>)
 8003eb4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003eb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003eba:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <MX_USART1_UART_Init+0x4c>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ec0:	4b0c      	ldr	r3, [pc, #48]	; (8003ef4 <MX_USART1_UART_Init+0x4c>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <MX_USART1_UART_Init+0x4c>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ecc:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <MX_USART1_UART_Init+0x4c>)
 8003ece:	220c      	movs	r2, #12
 8003ed0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ed2:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <MX_USART1_UART_Init+0x4c>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ed8:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <MX_USART1_UART_Init+0x4c>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ede:	4805      	ldr	r0, [pc, #20]	; (8003ef4 <MX_USART1_UART_Init+0x4c>)
 8003ee0:	f004 f948 	bl	8008174 <HAL_UART_Init>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003eea:	f7fe ff4f 	bl	8002d8c <Error_Handler>
  }

}
 8003eee:	bf00      	nop
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	2000074c 	.word	0x2000074c
 8003ef8:	40011000 	.word	0x40011000

08003efc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003f00:	4b11      	ldr	r3, [pc, #68]	; (8003f48 <MX_USART2_UART_Init+0x4c>)
 8003f02:	4a12      	ldr	r2, [pc, #72]	; (8003f4c <MX_USART2_UART_Init+0x50>)
 8003f04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f06:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <MX_USART2_UART_Init+0x4c>)
 8003f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f0e:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <MX_USART2_UART_Init+0x4c>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f14:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <MX_USART2_UART_Init+0x4c>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <MX_USART2_UART_Init+0x4c>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f20:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <MX_USART2_UART_Init+0x4c>)
 8003f22:	220c      	movs	r2, #12
 8003f24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f26:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <MX_USART2_UART_Init+0x4c>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f2c:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <MX_USART2_UART_Init+0x4c>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f32:	4805      	ldr	r0, [pc, #20]	; (8003f48 <MX_USART2_UART_Init+0x4c>)
 8003f34:	f004 f91e 	bl	8008174 <HAL_UART_Init>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003f3e:	f7fe ff25 	bl	8002d8c <Error_Handler>
  }

}
 8003f42:	bf00      	nop
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	2000078c 	.word	0x2000078c
 8003f4c:	40004400 	.word	0x40004400

08003f50 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003f54:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <MX_USART3_UART_Init+0x4c>)
 8003f56:	4a12      	ldr	r2, [pc, #72]	; (8003fa0 <MX_USART3_UART_Init+0x50>)
 8003f58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8003f5a:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <MX_USART3_UART_Init+0x4c>)
 8003f5c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003f60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003f62:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <MX_USART3_UART_Init+0x4c>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003f68:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <MX_USART3_UART_Init+0x4c>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <MX_USART3_UART_Init+0x4c>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003f74:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <MX_USART3_UART_Init+0x4c>)
 8003f76:	220c      	movs	r2, #12
 8003f78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f7a:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <MX_USART3_UART_Init+0x4c>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <MX_USART3_UART_Init+0x4c>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003f86:	4805      	ldr	r0, [pc, #20]	; (8003f9c <MX_USART3_UART_Init+0x4c>)
 8003f88:	f004 f8f4 	bl	8008174 <HAL_UART_Init>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003f92:	f7fe fefb 	bl	8002d8c <Error_Handler>
  }

}
 8003f96:	bf00      	nop
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	2000070c 	.word	0x2000070c
 8003fa0:	40004800 	.word	0x40004800

08003fa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08e      	sub	sp, #56	; 0x38
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	605a      	str	r2, [r3, #4]
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	60da      	str	r2, [r3, #12]
 8003fba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a58      	ldr	r2, [pc, #352]	; (8004124 <HAL_UART_MspInit+0x180>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d135      	bne.n	8004032 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	623b      	str	r3, [r7, #32]
 8003fca:	4b57      	ldr	r3, [pc, #348]	; (8004128 <HAL_UART_MspInit+0x184>)
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fce:	4a56      	ldr	r2, [pc, #344]	; (8004128 <HAL_UART_MspInit+0x184>)
 8003fd0:	f043 0310 	orr.w	r3, r3, #16
 8003fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fd6:	4b54      	ldr	r3, [pc, #336]	; (8004128 <HAL_UART_MspInit+0x184>)
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	623b      	str	r3, [r7, #32]
 8003fe0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
 8003fe6:	4b50      	ldr	r3, [pc, #320]	; (8004128 <HAL_UART_MspInit+0x184>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	4a4f      	ldr	r2, [pc, #316]	; (8004128 <HAL_UART_MspInit+0x184>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff2:	4b4d      	ldr	r3, [pc, #308]	; (8004128 <HAL_UART_MspInit+0x184>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	61fb      	str	r3, [r7, #28]
 8003ffc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM_RxD_Pin|SIM_TxD_Pin;
 8003ffe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004004:	2302      	movs	r3, #2
 8004006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004008:	2300      	movs	r3, #0
 800400a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800400c:	2303      	movs	r3, #3
 800400e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004010:	2307      	movs	r3, #7
 8004012:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004018:	4619      	mov	r1, r3
 800401a:	4844      	ldr	r0, [pc, #272]	; (800412c <HAL_UART_MspInit+0x188>)
 800401c:	f001 fd98 	bl	8005b50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004020:	2200      	movs	r2, #0
 8004022:	2100      	movs	r1, #0
 8004024:	2025      	movs	r0, #37	; 0x25
 8004026:	f000 fca5 	bl	8004974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800402a:	2025      	movs	r0, #37	; 0x25
 800402c:	f000 fcbe 	bl	80049ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004030:	e073      	b.n	800411a <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART2)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a3e      	ldr	r2, [pc, #248]	; (8004130 <HAL_UART_MspInit+0x18c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d134      	bne.n	80040a6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 800403c:	2300      	movs	r3, #0
 800403e:	61bb      	str	r3, [r7, #24]
 8004040:	4b39      	ldr	r3, [pc, #228]	; (8004128 <HAL_UART_MspInit+0x184>)
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	4a38      	ldr	r2, [pc, #224]	; (8004128 <HAL_UART_MspInit+0x184>)
 8004046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800404a:	6413      	str	r3, [r2, #64]	; 0x40
 800404c:	4b36      	ldr	r3, [pc, #216]	; (8004128 <HAL_UART_MspInit+0x184>)
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	4b32      	ldr	r3, [pc, #200]	; (8004128 <HAL_UART_MspInit+0x184>)
 800405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004060:	4a31      	ldr	r2, [pc, #196]	; (8004128 <HAL_UART_MspInit+0x184>)
 8004062:	f043 0308 	orr.w	r3, r3, #8
 8004066:	6313      	str	r3, [r2, #48]	; 0x30
 8004068:	4b2f      	ldr	r3, [pc, #188]	; (8004128 <HAL_UART_MspInit+0x184>)
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RS485_RxD_Pin|RS485_TxD_Pin;
 8004074:	2360      	movs	r3, #96	; 0x60
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004078:	2302      	movs	r3, #2
 800407a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407c:	2300      	movs	r3, #0
 800407e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004080:	2303      	movs	r3, #3
 8004082:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004084:	2307      	movs	r3, #7
 8004086:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800408c:	4619      	mov	r1, r3
 800408e:	4829      	ldr	r0, [pc, #164]	; (8004134 <HAL_UART_MspInit+0x190>)
 8004090:	f001 fd5e 	bl	8005b50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004094:	2200      	movs	r2, #0
 8004096:	2100      	movs	r1, #0
 8004098:	2026      	movs	r0, #38	; 0x26
 800409a:	f000 fc6b 	bl	8004974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800409e:	2026      	movs	r0, #38	; 0x26
 80040a0:	f000 fc84 	bl	80049ac <HAL_NVIC_EnableIRQ>
}
 80040a4:	e039      	b.n	800411a <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART3)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a23      	ldr	r2, [pc, #140]	; (8004138 <HAL_UART_MspInit+0x194>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d134      	bne.n	800411a <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 80040b0:	2300      	movs	r3, #0
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	4b1c      	ldr	r3, [pc, #112]	; (8004128 <HAL_UART_MspInit+0x184>)
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	4a1b      	ldr	r2, [pc, #108]	; (8004128 <HAL_UART_MspInit+0x184>)
 80040ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040be:	6413      	str	r3, [r2, #64]	; 0x40
 80040c0:	4b19      	ldr	r3, [pc, #100]	; (8004128 <HAL_UART_MspInit+0x184>)
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	4b15      	ldr	r3, [pc, #84]	; (8004128 <HAL_UART_MspInit+0x184>)
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	4a14      	ldr	r2, [pc, #80]	; (8004128 <HAL_UART_MspInit+0x184>)
 80040d6:	f043 0304 	orr.w	r3, r3, #4
 80040da:	6313      	str	r3, [r2, #48]	; 0x30
 80040dc:	4b12      	ldr	r3, [pc, #72]	; (8004128 <HAL_UART_MspInit+0x184>)
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = COM_RxD_Pin|COM_TxD_Pin;
 80040e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ee:	2302      	movs	r3, #2
 80040f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f6:	2303      	movs	r3, #3
 80040f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040fa:	2307      	movs	r3, #7
 80040fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004102:	4619      	mov	r1, r3
 8004104:	480d      	ldr	r0, [pc, #52]	; (800413c <HAL_UART_MspInit+0x198>)
 8004106:	f001 fd23 	bl	8005b50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800410a:	2200      	movs	r2, #0
 800410c:	2100      	movs	r1, #0
 800410e:	2027      	movs	r0, #39	; 0x27
 8004110:	f000 fc30 	bl	8004974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004114:	2027      	movs	r0, #39	; 0x27
 8004116:	f000 fc49 	bl	80049ac <HAL_NVIC_EnableIRQ>
}
 800411a:	bf00      	nop
 800411c:	3738      	adds	r7, #56	; 0x38
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40011000 	.word	0x40011000
 8004128:	40023800 	.word	0x40023800
 800412c:	40020000 	.word	0x40020000
 8004130:	40004400 	.word	0x40004400
 8004134:	40020c00 	.word	0x40020c00
 8004138:	40004800 	.word	0x40004800
 800413c:	40020800 	.word	0x40020800

08004140 <dbg_available>:
volatile dbg_rx_buffer_index_t dbg_rx_buffer_head = 0;
volatile dbg_rx_buffer_index_t dbg_rx_buffer_tail = 0;
uint8_t dbg_rx_buffer[DBG_RX_BUFFER_SIZE] = {0,};

int16_t dbg_available(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
	return ((uint16_t)(DBG_RX_BUFFER_SIZE + dbg_rx_buffer_head - dbg_rx_buffer_tail)) % DBG_RX_BUFFER_SIZE;
 8004144:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <dbg_available+0x30>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	b29a      	uxth	r2, r3
 800414c:	4b09      	ldr	r3, [pc, #36]	; (8004174 <dbg_available+0x34>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	b29b      	uxth	r3, r3
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	b29b      	uxth	r3, r3
 8004158:	3340      	adds	r3, #64	; 0x40
 800415a:	b29b      	uxth	r3, r3
 800415c:	b21b      	sxth	r3, r3
 800415e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004162:	b21b      	sxth	r3, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	2000031c 	.word	0x2000031c
 8004174:	2000031d 	.word	0x2000031d

08004178 <dbg_read>:

int16_t dbg_read(void)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
	if(dbg_rx_buffer_head == dbg_rx_buffer_tail)
 800417e:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <dbg_read+0x50>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	b2da      	uxtb	r2, r3
 8004184:	4b11      	ldr	r3, [pc, #68]	; (80041cc <dbg_read+0x54>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	b2db      	uxtb	r3, r3
 800418a:	429a      	cmp	r2, r3
 800418c:	d102      	bne.n	8004194 <dbg_read+0x1c>
	{
		return -1;
 800418e:	f04f 33ff 	mov.w	r3, #4294967295
 8004192:	e012      	b.n	80041ba <dbg_read+0x42>
	}
	else
	{
		uint8_t c = dbg_rx_buffer[dbg_rx_buffer_tail];
 8004194:	4b0d      	ldr	r3, [pc, #52]	; (80041cc <dbg_read+0x54>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	461a      	mov	r2, r3
 800419c:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <dbg_read+0x58>)
 800419e:	5c9b      	ldrb	r3, [r3, r2]
 80041a0:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_tail = (dbg_rx_buffer_index_t)(dbg_rx_buffer_tail + 1) % DBG_RX_BUFFER_SIZE;
 80041a2:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <dbg_read+0x54>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	3301      	adds	r3, #1
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	4b06      	ldr	r3, [pc, #24]	; (80041cc <dbg_read+0x54>)
 80041b4:	701a      	strb	r2, [r3, #0]
		return c;
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	b21b      	sxth	r3, r3
	}
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	2000031c 	.word	0x2000031c
 80041cc:	2000031d 	.word	0x2000031d
 80041d0:	20000320 	.word	0x20000320

080041d4 <EN_Interrupt>:
		return c;
	}
}
//-----------------------------------------------------------------------------------------------------------------
void EN_Interrupt(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80041d8:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <EN_Interrupt+0x40>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <EN_Interrupt+0x40>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0220 	orr.w	r2, r2, #32
 80041e6:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <EN_Interrupt+0x44>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <EN_Interrupt+0x44>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0220 	orr.w	r2, r2, #32
 80041f6:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80041f8:	4b08      	ldr	r3, [pc, #32]	; (800421c <EN_Interrupt+0x48>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	4b07      	ldr	r3, [pc, #28]	; (800421c <EN_Interrupt+0x48>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0220 	orr.w	r2, r2, #32
 8004206:	60da      	str	r2, [r3, #12]

	//__HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_RXNE);
}
 8004208:	bf00      	nop
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	2000074c 	.word	0x2000074c
 8004218:	2000070c 	.word	0x2000070c
 800421c:	2000078c 	.word	0x2000078c

08004220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004258 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004224:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004226:	e003      	b.n	8004230 <LoopCopyDataInit>

08004228 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004228:	4b0c      	ldr	r3, [pc, #48]	; (800425c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800422a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800422c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800422e:	3104      	adds	r1, #4

08004230 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004230:	480b      	ldr	r0, [pc, #44]	; (8004260 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004232:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004234:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004236:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004238:	d3f6      	bcc.n	8004228 <CopyDataInit>
  ldr  r2, =_sbss
 800423a:	4a0b      	ldr	r2, [pc, #44]	; (8004268 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800423c:	e002      	b.n	8004244 <LoopFillZerobss>

0800423e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800423e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004240:	f842 3b04 	str.w	r3, [r2], #4

08004244 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004244:	4b09      	ldr	r3, [pc, #36]	; (800426c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004246:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004248:	d3f9      	bcc.n	800423e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800424a:	f7ff fd41 	bl	8003cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800424e:	f010 fc01 	bl	8014a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004252:	f7fe fcb7 	bl	8002bc4 <main>
  bx  lr    
 8004256:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004258:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800425c:	0801c0e8 	.word	0x0801c0e8
  ldr  r0, =_sdata
 8004260:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004264:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 8004268:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 800426c:	20006a74 	.word	0x20006a74

08004270 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004270:	e7fe      	b.n	8004270 <ADC_IRQHandler>
	...

08004274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004278:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <HAL_Init+0x40>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a0d      	ldr	r2, [pc, #52]	; (80042b4 <HAL_Init+0x40>)
 800427e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004282:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <HAL_Init+0x40>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a0a      	ldr	r2, [pc, #40]	; (80042b4 <HAL_Init+0x40>)
 800428a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800428e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004290:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <HAL_Init+0x40>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a07      	ldr	r2, [pc, #28]	; (80042b4 <HAL_Init+0x40>)
 8004296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800429a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800429c:	2003      	movs	r0, #3
 800429e:	f000 fb5e 	bl	800495e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042a2:	2000      	movs	r0, #0
 80042a4:	f7ff faf8 	bl	8003898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042a8:	f7ff face 	bl	8003848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40023c00 	.word	0x40023c00

080042b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042bc:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <HAL_IncTick+0x20>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	461a      	mov	r2, r3
 80042c2:	4b06      	ldr	r3, [pc, #24]	; (80042dc <HAL_IncTick+0x24>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4413      	add	r3, r2
 80042c8:	4a04      	ldr	r2, [pc, #16]	; (80042dc <HAL_IncTick+0x24>)
 80042ca:	6013      	str	r3, [r2, #0]
}
 80042cc:	bf00      	nop
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	20000014 	.word	0x20000014
 80042dc:	200007cc 	.word	0x200007cc

080042e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  return uwTick;
 80042e4:	4b03      	ldr	r3, [pc, #12]	; (80042f4 <HAL_GetTick+0x14>)
 80042e6:	681b      	ldr	r3, [r3, #0]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	200007cc 	.word	0x200007cc

080042f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004300:	f7ff ffee 	bl	80042e0 <HAL_GetTick>
 8004304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d005      	beq.n	800431e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004312:	4b0a      	ldr	r3, [pc, #40]	; (800433c <HAL_Delay+0x44>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4413      	add	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800431e:	bf00      	nop
 8004320:	f7ff ffde 	bl	80042e0 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	429a      	cmp	r2, r3
 800432e:	d8f7      	bhi.n	8004320 <HAL_Delay+0x28>
  {
  }
}
 8004330:	bf00      	nop
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20000014 	.word	0x20000014

08004340 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e033      	b.n	80043be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	d109      	bne.n	8004372 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fc fe00 	bl	8000f64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f003 0310 	and.w	r3, r3, #16
 800437a:	2b00      	cmp	r3, #0
 800437c:	d118      	bne.n	80043b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004386:	f023 0302 	bic.w	r3, r3, #2
 800438a:	f043 0202 	orr.w	r2, r3, #2
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f93a 	bl	800460c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f023 0303 	bic.w	r3, r3, #3
 80043a6:	f043 0201 	orr.w	r2, r3, #1
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	641a      	str	r2, [r3, #64]	; 0x40
 80043ae:	e001      	b.n	80043b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0x1c>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e105      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x228>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b09      	cmp	r3, #9
 80043f2:	d925      	bls.n	8004440 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68d9      	ldr	r1, [r3, #12]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	b29b      	uxth	r3, r3
 8004400:	461a      	mov	r2, r3
 8004402:	4613      	mov	r3, r2
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	4413      	add	r3, r2
 8004408:	3b1e      	subs	r3, #30
 800440a:	2207      	movs	r2, #7
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	43da      	mvns	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	400a      	ands	r2, r1
 8004418:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68d9      	ldr	r1, [r3, #12]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	b29b      	uxth	r3, r3
 800442a:	4618      	mov	r0, r3
 800442c:	4603      	mov	r3, r0
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	4403      	add	r3, r0
 8004432:	3b1e      	subs	r3, #30
 8004434:	409a      	lsls	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	60da      	str	r2, [r3, #12]
 800443e:	e022      	b.n	8004486 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6919      	ldr	r1, [r3, #16]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	b29b      	uxth	r3, r3
 800444c:	461a      	mov	r2, r3
 800444e:	4613      	mov	r3, r2
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	4413      	add	r3, r2
 8004454:	2207      	movs	r2, #7
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	43da      	mvns	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	400a      	ands	r2, r1
 8004462:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6919      	ldr	r1, [r3, #16]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	b29b      	uxth	r3, r3
 8004474:	4618      	mov	r0, r3
 8004476:	4603      	mov	r3, r0
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	4403      	add	r3, r0
 800447c:	409a      	lsls	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b06      	cmp	r3, #6
 800448c:	d824      	bhi.n	80044d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	3b05      	subs	r3, #5
 80044a0:	221f      	movs	r2, #31
 80044a2:	fa02 f303 	lsl.w	r3, r2, r3
 80044a6:	43da      	mvns	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	400a      	ands	r2, r1
 80044ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	4618      	mov	r0, r3
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	4613      	mov	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	3b05      	subs	r3, #5
 80044ca:	fa00 f203 	lsl.w	r2, r0, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	635a      	str	r2, [r3, #52]	; 0x34
 80044d6:	e04c      	b.n	8004572 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b0c      	cmp	r3, #12
 80044de:	d824      	bhi.n	800452a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	3b23      	subs	r3, #35	; 0x23
 80044f2:	221f      	movs	r2, #31
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	43da      	mvns	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	400a      	ands	r2, r1
 8004500:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	b29b      	uxth	r3, r3
 800450e:	4618      	mov	r0, r3
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	3b23      	subs	r3, #35	; 0x23
 800451c:	fa00 f203 	lsl.w	r2, r0, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	631a      	str	r2, [r3, #48]	; 0x30
 8004528:	e023      	b.n	8004572 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	3b41      	subs	r3, #65	; 0x41
 800453c:	221f      	movs	r2, #31
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	43da      	mvns	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	400a      	ands	r2, r1
 800454a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	b29b      	uxth	r3, r3
 8004558:	4618      	mov	r0, r3
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	4613      	mov	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	3b41      	subs	r3, #65	; 0x41
 8004566:	fa00 f203 	lsl.w	r2, r0, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004572:	4b22      	ldr	r3, [pc, #136]	; (80045fc <HAL_ADC_ConfigChannel+0x234>)
 8004574:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a21      	ldr	r2, [pc, #132]	; (8004600 <HAL_ADC_ConfigChannel+0x238>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d109      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x1cc>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b12      	cmp	r3, #18
 8004586:	d105      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a19      	ldr	r2, [pc, #100]	; (8004600 <HAL_ADC_ConfigChannel+0x238>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d123      	bne.n	80045e6 <HAL_ADC_ConfigChannel+0x21e>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b10      	cmp	r3, #16
 80045a4:	d003      	beq.n	80045ae <HAL_ADC_ConfigChannel+0x1e6>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b11      	cmp	r3, #17
 80045ac:	d11b      	bne.n	80045e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b10      	cmp	r3, #16
 80045c0:	d111      	bne.n	80045e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80045c2:	4b10      	ldr	r3, [pc, #64]	; (8004604 <HAL_ADC_ConfigChannel+0x23c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a10      	ldr	r2, [pc, #64]	; (8004608 <HAL_ADC_ConfigChannel+0x240>)
 80045c8:	fba2 2303 	umull	r2, r3, r2, r3
 80045cc:	0c9a      	lsrs	r2, r3, #18
 80045ce:	4613      	mov	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80045d8:	e002      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	3b01      	subs	r3, #1
 80045de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f9      	bne.n	80045da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	40012300 	.word	0x40012300
 8004600:	40012000 	.word	0x40012000
 8004604:	2000000c 	.word	0x2000000c
 8004608:	431bde83 	.word	0x431bde83

0800460c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004614:	4b79      	ldr	r3, [pc, #484]	; (80047fc <ADC_Init+0x1f0>)
 8004616:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	431a      	orrs	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004640:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6859      	ldr	r1, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	021a      	lsls	r2, r3, #8
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004664:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6859      	ldr	r1, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004686:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6899      	ldr	r1, [r3, #8]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	4a58      	ldr	r2, [pc, #352]	; (8004800 <ADC_Init+0x1f4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d022      	beq.n	80046ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6899      	ldr	r1, [r3, #8]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6899      	ldr	r1, [r3, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	609a      	str	r2, [r3, #8]
 80046e8:	e00f      	b.n	800470a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004708:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0202 	bic.w	r2, r2, #2
 8004718:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6899      	ldr	r1, [r3, #8]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	7e1b      	ldrb	r3, [r3, #24]
 8004724:	005a      	lsls	r2, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d01b      	beq.n	8004770 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004746:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004756:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6859      	ldr	r1, [r3, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	3b01      	subs	r3, #1
 8004764:	035a      	lsls	r2, r3, #13
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
 800476e:	e007      	b.n	8004780 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800477e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800478e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	3b01      	subs	r3, #1
 800479c:	051a      	lsls	r2, r3, #20
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80047b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6899      	ldr	r1, [r3, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047c2:	025a      	lsls	r2, r3, #9
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6899      	ldr	r1, [r3, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	029a      	lsls	r2, r3, #10
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	609a      	str	r2, [r3, #8]
}
 80047f0:	bf00      	nop
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	40012300 	.word	0x40012300
 8004800:	0f000001 	.word	0x0f000001

08004804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f003 0307 	and.w	r3, r3, #7
 8004812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004814:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <__NVIC_SetPriorityGrouping+0x44>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004820:	4013      	ands	r3, r2
 8004822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800482c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004836:	4a04      	ldr	r2, [pc, #16]	; (8004848 <__NVIC_SetPriorityGrouping+0x44>)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	60d3      	str	r3, [r2, #12]
}
 800483c:	bf00      	nop
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	e000ed00 	.word	0xe000ed00

0800484c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004850:	4b04      	ldr	r3, [pc, #16]	; (8004864 <__NVIC_GetPriorityGrouping+0x18>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	0a1b      	lsrs	r3, r3, #8
 8004856:	f003 0307 	and.w	r3, r3, #7
}
 800485a:	4618      	mov	r0, r3
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	e000ed00 	.word	0xe000ed00

08004868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	4603      	mov	r3, r0
 8004870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004876:	2b00      	cmp	r3, #0
 8004878:	db0b      	blt.n	8004892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	f003 021f 	and.w	r2, r3, #31
 8004880:	4907      	ldr	r1, [pc, #28]	; (80048a0 <__NVIC_EnableIRQ+0x38>)
 8004882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	2001      	movs	r0, #1
 800488a:	fa00 f202 	lsl.w	r2, r0, r2
 800488e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	e000e100 	.word	0xe000e100

080048a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	6039      	str	r1, [r7, #0]
 80048ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	db0a      	blt.n	80048ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	490c      	ldr	r1, [pc, #48]	; (80048f0 <__NVIC_SetPriority+0x4c>)
 80048be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c2:	0112      	lsls	r2, r2, #4
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	440b      	add	r3, r1
 80048c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048cc:	e00a      	b.n	80048e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	4908      	ldr	r1, [pc, #32]	; (80048f4 <__NVIC_SetPriority+0x50>)
 80048d4:	79fb      	ldrb	r3, [r7, #7]
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	3b04      	subs	r3, #4
 80048dc:	0112      	lsls	r2, r2, #4
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	440b      	add	r3, r1
 80048e2:	761a      	strb	r2, [r3, #24]
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	e000e100 	.word	0xe000e100
 80048f4:	e000ed00 	.word	0xe000ed00

080048f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b089      	sub	sp, #36	; 0x24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f1c3 0307 	rsb	r3, r3, #7
 8004912:	2b04      	cmp	r3, #4
 8004914:	bf28      	it	cs
 8004916:	2304      	movcs	r3, #4
 8004918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	3304      	adds	r3, #4
 800491e:	2b06      	cmp	r3, #6
 8004920:	d902      	bls.n	8004928 <NVIC_EncodePriority+0x30>
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	3b03      	subs	r3, #3
 8004926:	e000      	b.n	800492a <NVIC_EncodePriority+0x32>
 8004928:	2300      	movs	r3, #0
 800492a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800492c:	f04f 32ff 	mov.w	r2, #4294967295
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	fa02 f303 	lsl.w	r3, r2, r3
 8004936:	43da      	mvns	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	401a      	ands	r2, r3
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004940:	f04f 31ff 	mov.w	r1, #4294967295
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	fa01 f303 	lsl.w	r3, r1, r3
 800494a:	43d9      	mvns	r1, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004950:	4313      	orrs	r3, r2
         );
}
 8004952:	4618      	mov	r0, r3
 8004954:	3724      	adds	r7, #36	; 0x24
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b082      	sub	sp, #8
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff ff4c 	bl	8004804 <__NVIC_SetPriorityGrouping>
}
 800496c:	bf00      	nop
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004986:	f7ff ff61 	bl	800484c <__NVIC_GetPriorityGrouping>
 800498a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	6978      	ldr	r0, [r7, #20]
 8004992:	f7ff ffb1 	bl	80048f8 <NVIC_EncodePriority>
 8004996:	4602      	mov	r2, r0
 8004998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800499c:	4611      	mov	r1, r2
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff ff80 	bl	80048a4 <__NVIC_SetPriority>
}
 80049a4:	bf00      	nop
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4603      	mov	r3, r0
 80049b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff ff54 	bl	8004868 <__NVIC_EnableIRQ>
}
 80049c0:	bf00      	nop
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d004      	beq.n	80049e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2280      	movs	r2, #128	; 0x80
 80049e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e00c      	b.n	8004a00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2205      	movs	r2, #5
 80049ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0201 	bic.w	r2, r2, #1
 80049fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	61fb      	str	r3, [r7, #28]
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8004a1c:	4baa      	ldr	r3, [pc, #680]	; (8004cc8 <HAL_ETH_Init+0x2bc>)
 8004a1e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004a24:	2300      	movs	r3, #0
 8004a26:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e183      	b.n	8004d3a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f003 ffc4 	bl	80089d4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60bb      	str	r3, [r7, #8]
 8004a50:	4b9e      	ldr	r3, [pc, #632]	; (8004ccc <HAL_ETH_Init+0x2c0>)
 8004a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a54:	4a9d      	ldr	r2, [pc, #628]	; (8004ccc <HAL_ETH_Init+0x2c0>)
 8004a56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a5a:	6453      	str	r3, [r2, #68]	; 0x44
 8004a5c:	4b9b      	ldr	r3, [pc, #620]	; (8004ccc <HAL_ETH_Init+0x2c0>)
 8004a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a64:	60bb      	str	r3, [r7, #8]
 8004a66:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004a68:	4b99      	ldr	r3, [pc, #612]	; (8004cd0 <HAL_ETH_Init+0x2c4>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	4a98      	ldr	r2, [pc, #608]	; (8004cd0 <HAL_ETH_Init+0x2c4>)
 8004a6e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004a72:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004a74:	4b96      	ldr	r3, [pc, #600]	; (8004cd0 <HAL_ETH_Init+0x2c4>)
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	4994      	ldr	r1, [pc, #592]	; (8004cd0 <HAL_ETH_Init+0x2c4>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0201 	orr.w	r2, r2, #1
 8004a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a98:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004a9a:	f7ff fc21 	bl	80042e0 <HAL_GetTick>
 8004a9e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004aa0:	e011      	b.n	8004ac6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004aa2:	f7ff fc1d 	bl	80042e0 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004ab0:	d909      	bls.n	8004ac6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2203      	movs	r2, #3
 8004ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e139      	b.n	8004d3a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e4      	bne.n	8004aa2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f023 031c 	bic.w	r3, r3, #28
 8004ae6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004ae8:	f001 fe38 	bl	800675c <HAL_RCC_GetHCLKFreq>
 8004aec:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	4a78      	ldr	r2, [pc, #480]	; (8004cd4 <HAL_ETH_Init+0x2c8>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d908      	bls.n	8004b08 <HAL_ETH_Init+0xfc>
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	4a77      	ldr	r2, [pc, #476]	; (8004cd8 <HAL_ETH_Init+0x2cc>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d804      	bhi.n	8004b08 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	f043 0308 	orr.w	r3, r3, #8
 8004b04:	61fb      	str	r3, [r7, #28]
 8004b06:	e027      	b.n	8004b58 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	4a73      	ldr	r2, [pc, #460]	; (8004cd8 <HAL_ETH_Init+0x2cc>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d908      	bls.n	8004b22 <HAL_ETH_Init+0x116>
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	4a6d      	ldr	r2, [pc, #436]	; (8004cc8 <HAL_ETH_Init+0x2bc>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d204      	bcs.n	8004b22 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f043 030c 	orr.w	r3, r3, #12
 8004b1e:	61fb      	str	r3, [r7, #28]
 8004b20:	e01a      	b.n	8004b58 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	4a68      	ldr	r2, [pc, #416]	; (8004cc8 <HAL_ETH_Init+0x2bc>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d303      	bcc.n	8004b32 <HAL_ETH_Init+0x126>
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	4a6b      	ldr	r2, [pc, #428]	; (8004cdc <HAL_ETH_Init+0x2d0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d911      	bls.n	8004b56 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	4a69      	ldr	r2, [pc, #420]	; (8004cdc <HAL_ETH_Init+0x2d0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d908      	bls.n	8004b4c <HAL_ETH_Init+0x140>
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	4a68      	ldr	r2, [pc, #416]	; (8004ce0 <HAL_ETH_Init+0x2d4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d804      	bhi.n	8004b4c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	f043 0304 	orr.w	r3, r3, #4
 8004b48:	61fb      	str	r3, [r7, #28]
 8004b4a:	e005      	b.n	8004b58 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	f043 0310 	orr.w	r3, r3, #16
 8004b52:	61fb      	str	r3, [r7, #28]
 8004b54:	e000      	b.n	8004b58 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004b56:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004b60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004b64:	2100      	movs	r1, #0
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fb14 	bl	8005194 <HAL_ETH_WritePHYRegister>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00b      	beq.n	8004b8a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8004b76:	6939      	ldr	r1, [r7, #16]
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 fcc9 	bl	8005510 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e0d7      	b.n	8004d3a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8004b8a:	20ff      	movs	r0, #255	; 0xff
 8004b8c:	f7ff fbb4 	bl	80042f8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 80a5 	beq.w	8004ce4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b9a:	f7ff fba1 	bl	80042e0 <HAL_GetTick>
 8004b9e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004ba0:	f107 030c 	add.w	r3, r7, #12
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 fa8b 	bl	80050c4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004bae:	f7ff fb97 	bl	80042e0 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d90f      	bls.n	8004be0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004bc4:	6939      	ldr	r1, [r7, #16]
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fca2 	bl	8005510 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e0ac      	b.n	8004d3a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f003 0304 	and.w	r3, r3, #4
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0da      	beq.n	8004ba0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004bea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bee:	2100      	movs	r1, #0
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 facf 	bl	8005194 <HAL_ETH_WritePHYRegister>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00b      	beq.n	8004c14 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004c00:	6939      	ldr	r1, [r7, #16]
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fc84 	bl	8005510 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004c10:	2301      	movs	r3, #1
 8004c12:	e092      	b.n	8004d3a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c14:	f7ff fb64 	bl	80042e0 <HAL_GetTick>
 8004c18:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004c1a:	f107 030c 	add.w	r3, r7, #12
 8004c1e:	461a      	mov	r2, r3
 8004c20:	2101      	movs	r1, #1
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fa4e 	bl	80050c4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004c28:	f7ff fb5a 	bl	80042e0 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d90f      	bls.n	8004c5a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004c3e:	6939      	ldr	r1, [r7, #16]
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fc65 	bl	8005510 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e06f      	b.n	8004d3a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0da      	beq.n	8004c1a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004c64:	f107 030c 	add.w	r3, r7, #12
 8004c68:	461a      	mov	r2, r3
 8004c6a:	211f      	movs	r1, #31
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fa29 	bl	80050c4 <HAL_ETH_ReadPHYRegister>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00b      	beq.n	8004c90 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004c7c:	6939      	ldr	r1, [r7, #16]
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fc46 	bl	8005510 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e054      	b.n	8004d3a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f003 0310 	and.w	r3, r3, #16
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d004      	beq.n	8004ca4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ca0:	60da      	str	r2, [r3, #12]
 8004ca2:	e002      	b.n	8004caa <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	609a      	str	r2, [r3, #8]
 8004cba:	e035      	b.n	8004d28 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cc2:	609a      	str	r2, [r3, #8]
 8004cc4:	e030      	b.n	8004d28 <HAL_ETH_Init+0x31c>
 8004cc6:	bf00      	nop
 8004cc8:	03938700 	.word	0x03938700
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	40013800 	.word	0x40013800
 8004cd4:	01312cff 	.word	0x01312cff
 8004cd8:	02160ebf 	.word	0x02160ebf
 8004cdc:	05f5e0ff 	.word	0x05f5e0ff
 8004ce0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	08db      	lsrs	r3, r3, #3
 8004cea:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	085b      	lsrs	r3, r3, #1
 8004cf2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 fa49 	bl	8005194 <HAL_ETH_WritePHYRegister>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00b      	beq.n	8004d20 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004d0c:	6939      	ldr	r1, [r7, #16]
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fbfe 	bl	8005510 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e00c      	b.n	8004d3a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8004d20:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004d24:	f7ff fae8 	bl	80042f8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004d28:	6939      	ldr	r1, [r7, #16]
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fbf0 	bl	8005510 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3720      	adds	r7, #32
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop

08004d44 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
 8004d50:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_ETH_DMATxDescListInit+0x20>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e052      	b.n	8004e0a <HAL_ETH_DMATxDescListInit+0xc6>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	e030      	b.n	8004de2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	015b      	lsls	r3, r3, #5
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	4413      	add	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d90:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004d98:	fb02 f303 	mul.w	r3, r2, r3
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	4413      	add	r3, r2
 8004da0:	461a      	mov	r2, r3
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d105      	bne.n	8004dba <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d208      	bcs.n	8004dd6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	015b      	lsls	r3, r3, #5
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	4413      	add	r3, r2
 8004dce:	461a      	mov	r2, r3
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	60da      	str	r2, [r3, #12]
 8004dd4:	e002      	b.n	8004ddc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	3301      	adds	r3, #1
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d3ca      	bcc.n	8004d80 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004df4:	3310      	adds	r3, #16
 8004df6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b087      	sub	sp, #28
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	60b9      	str	r1, [r7, #8]
 8004e20:	607a      	str	r2, [r7, #4]
 8004e22:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_ETH_DMARxDescListInit+0x20>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e056      	b.n	8004ee4 <HAL_ETH_DMARxDescListInit+0xce>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2202      	movs	r2, #2
 8004e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	e034      	b.n	8004ebc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	015b      	lsls	r3, r3, #5
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	4413      	add	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004e62:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004e6a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004e72:	fb02 f303 	mul.w	r3, r2, r3
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	4413      	add	r3, r2
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d105      	bne.n	8004e94 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d208      	bcs.n	8004eb0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	015b      	lsls	r3, r3, #5
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	60da      	str	r2, [r3, #12]
 8004eae:	e002      	b.n	8004eb6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d3c6      	bcc.n	8004e52 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ece:	330c      	adds	r3, #12
 8004ed0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	371c      	adds	r7, #28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	2300      	movs	r3, #0
 8004f04:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_ETH_TransmitFrame+0x24>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e0cd      	b.n	80050b0 <HAL_ETH_TransmitFrame+0x1c0>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d109      	bne.n	8004f3e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e0b8      	b.n	80050b0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	da09      	bge.n	8004f5c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2212      	movs	r2, #18
 8004f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e0a9      	b.n	80050b0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d915      	bls.n	8004f92 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	4a54      	ldr	r2, [pc, #336]	; (80050bc <HAL_ETH_TransmitFrame+0x1cc>)
 8004f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6e:	0a9b      	lsrs	r3, r3, #10
 8004f70:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	4b51      	ldr	r3, [pc, #324]	; (80050bc <HAL_ETH_TransmitFrame+0x1cc>)
 8004f76:	fba3 1302 	umull	r1, r3, r3, r2
 8004f7a:	0a9b      	lsrs	r3, r3, #10
 8004f7c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8004f80:	fb01 f303 	mul.w	r3, r1, r3
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d005      	beq.n	8004f96 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	e001      	b.n	8004f96 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8004f92:	2301      	movs	r3, #1
 8004f94:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d11c      	bne.n	8004fd6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8004faa:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004fb6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004fc6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	62da      	str	r2, [r3, #44]	; 0x2c
 8004fd4:	e04b      	b.n	800506e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	e044      	b.n	8005066 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004fea:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d107      	bne.n	8005002 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005000:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005006:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800500a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	3b01      	subs	r3, #1
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	429a      	cmp	r2, r3
 8005014:	d116      	bne.n	8005044 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005024:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	4a25      	ldr	r2, [pc, #148]	; (80050c0 <HAL_ETH_TransmitFrame+0x1d0>)
 800502a:	fb02 f203 	mul.w	r2, r2, r3
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	4413      	add	r3, r2
 8005032:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005036:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005042:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005052:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	461a      	mov	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	3301      	adds	r3, #1
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	429a      	cmp	r2, r3
 800506c:	d3b6      	bcc.n	8004fdc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005076:	3314      	adds	r3, #20
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00d      	beq.n	800509e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800508a:	3314      	adds	r3, #20
 800508c:	2204      	movs	r2, #4
 800508e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005098:	3304      	adds	r3, #4
 800509a:	2200      	movs	r2, #0
 800509c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	371c      	adds	r7, #28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	ac02b00b 	.word	0xac02b00b
 80050c0:	fffffa0c 	.word	0xfffffa0c

080050c4 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	460b      	mov	r3, r1
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80050d2:	2300      	movs	r3, #0
 80050d4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b82      	cmp	r3, #130	; 0x82
 80050e4:	d101      	bne.n	80050ea <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80050e6:	2302      	movs	r3, #2
 80050e8:	e050      	b.n	800518c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2282      	movs	r2, #130	; 0x82
 80050ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f003 031c 	and.w	r3, r3, #28
 8005100:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8a1b      	ldrh	r3, [r3, #16]
 8005106:	02db      	lsls	r3, r3, #11
 8005108:	b29b      	uxth	r3, r3
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8005110:	897b      	ldrh	r3, [r7, #10]
 8005112:	019b      	lsls	r3, r3, #6
 8005114:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f023 0302 	bic.w	r3, r3, #2
 8005124:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f043 0301 	orr.w	r3, r3, #1
 800512c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005136:	f7ff f8d3 	bl	80042e0 <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800513c:	e015      	b.n	800516a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800513e:	f7ff f8cf 	bl	80042e0 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800514c:	d309      	bcc.n	8005162 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e014      	b.n	800518c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1e4      	bne.n	800513e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	b29b      	uxth	r3, r3
 800517c:	461a      	mov	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	460b      	mov	r3, r1
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b42      	cmp	r3, #66	; 0x42
 80051b4:	d101      	bne.n	80051ba <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80051b6:	2302      	movs	r3, #2
 80051b8:	e04e      	b.n	8005258 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2242      	movs	r2, #66	; 0x42
 80051be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f003 031c 	and.w	r3, r3, #28
 80051d0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8a1b      	ldrh	r3, [r3, #16]
 80051d6:	02db      	lsls	r3, r3, #11
 80051d8:	b29b      	uxth	r3, r3
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4313      	orrs	r3, r2
 80051de:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80051e0:	897b      	ldrh	r3, [r7, #10]
 80051e2:	019b      	lsls	r3, r3, #6
 80051e4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f043 0302 	orr.w	r3, r3, #2
 80051f4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f043 0301 	orr.w	r3, r3, #1
 80051fc:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005210:	f7ff f866 	bl	80042e0 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005216:	e015      	b.n	8005244 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8005218:	f7ff f862 	bl	80042e0 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005226:	d309      	bcc.n	800523c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e00d      	b.n	8005258 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e4      	bne.n	8005218 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800526e:	2b01      	cmp	r3, #1
 8005270:	d101      	bne.n	8005276 <HAL_ETH_Start+0x16>
 8005272:	2302      	movs	r3, #2
 8005274:	e01f      	b.n	80052b6 <HAL_ETH_Start+0x56>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2202      	movs	r2, #2
 8005282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fb44 	bl	8005914 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fb7b 	bl	8005988 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fc12 	bl	8005abc <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fbaf 	bl	80059fc <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fbdc 	bl	8005a5c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80052be:	b580      	push	{r7, lr}
 80052c0:	b082      	sub	sp, #8
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_ETH_Stop+0x16>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e01f      	b.n	8005314 <HAL_ETH_Stop+0x56>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fba1 	bl	8005a2c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fbce 	bl	8005a8c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 fb66 	bl	80059c2 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fbe0 	bl	8005abc <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 fb26 	bl	800594e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_ETH_ConfigMAC+0x1c>
 8005334:	2302      	movs	r3, #2
 8005336:	e0e4      	b.n	8005502 <HAL_ETH_ConfigMAC+0x1e6>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 80b1 	beq.w	80054b2 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4b6c      	ldr	r3, [pc, #432]	; (800550c <HAL_ETH_ConfigMAC+0x1f0>)
 800535c:	4013      	ands	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8005368:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800536e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8005374:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800537a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8005380:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8005386:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800538c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8005392:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8005398:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800539e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80053a4:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80053aa:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80053c2:	2001      	movs	r0, #1
 80053c4:	f7fe ff98 	bl	80042f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80053d8:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80053de:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80053e4:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80053ea:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80053f0:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80053f6:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8005402:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005404:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800540e:	2001      	movs	r0, #1
 8005410:	f7fe ff72 	bl	80042f8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005424:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800542e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800543e:	4013      	ands	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005446:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800544c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8005452:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8005458:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800545e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8005464:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4313      	orrs	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800547c:	2001      	movs	r0, #1
 800547e:	f7fe ff3b 	bl	80042f8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80054a2:	2001      	movs	r0, #1
 80054a4:	f7fe ff28 	bl	80042f8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	61da      	str	r2, [r3, #28]
 80054b0:	e01e      	b.n	80054f0 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80054c0:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689a      	ldr	r2, [r3, #8]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80054e2:	2001      	movs	r0, #1
 80054e4:	f7fe ff08 	bl	80042f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	ff20810f 	.word	0xff20810f

08005510 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b0b0      	sub	sp, #192	; 0xc0
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d007      	beq.n	8005536 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800552c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005534:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8005536:	2300      	movs	r3, #0
 8005538:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800553a:	2300      	movs	r3, #0
 800553c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800553e:	2300      	movs	r3, #0
 8005540:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8005542:	2300      	movs	r3, #0
 8005544:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8005546:	2300      	movs	r3, #0
 8005548:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800554a:	2300      	movs	r3, #0
 800554c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d103      	bne.n	800555e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8005556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800555a:	663b      	str	r3, [r7, #96]	; 0x60
 800555c:	e001      	b.n	8005562 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800555e:	2300      	movs	r3, #0
 8005560:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8005562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005566:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8005568:	2300      	movs	r3, #0
 800556a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800556c:	2300      	movs	r3, #0
 800556e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8005570:	2300      	movs	r3, #0
 8005572:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8005574:	2300      	movs	r3, #0
 8005576:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8005578:	2300      	movs	r3, #0
 800557a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800557c:	2340      	movs	r3, #64	; 0x40
 800557e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8005580:	2300      	movs	r3, #0
 8005582:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8005586:	2300      	movs	r3, #0
 8005588:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800558c:	2300      	movs	r3, #0
 800558e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8005592:	2300      	movs	r3, #0
 8005594:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8005598:	2300      	movs	r3, #0
 800559a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80055b0:	2380      	movs	r3, #128	; 0x80
 80055b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80055b6:	2300      	movs	r3, #0
 80055b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80055bc:	2300      	movs	r3, #0
 80055be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80055c2:	2300      	movs	r3, #0
 80055c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80055c8:	2300      	movs	r3, #0
 80055ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80055ce:	2300      	movs	r3, #0
 80055d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80055e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80055e8:	4bac      	ldr	r3, [pc, #688]	; (800589c <ETH_MACDMAConfig+0x38c>)
 80055ea:	4013      	ands	r3, r2
 80055ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80055f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80055f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80055f4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80055f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80055f8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80055fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80055fc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8005602:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8005604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8005606:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8005608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800560a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8005610:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8005612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8005614:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8005616:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8005618:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800561a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800561c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800561e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8005620:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8005622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8005624:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005626:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800562a:	4313      	orrs	r3, r2
 800562c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005638:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005644:	2001      	movs	r0, #1
 8005646:	f7fe fe57 	bl	80042f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005652:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005654:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8005656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005658:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800565a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800565c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800565e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8005662:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8005664:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8005668:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800566a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800566e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8005670:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8005674:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005678:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8005680:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005682:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800568e:	2001      	movs	r0, #1
 8005690:	f7fe fe32 	bl	80042f8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800569c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80056a6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80056b0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80056bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80056c0:	f64f 7341 	movw	r3, #65345	; 0xff41
 80056c4:	4013      	ands	r3, r2
 80056c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80056ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056ce:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80056d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80056d4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80056d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80056da:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80056dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80056e0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80056e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80056e6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80056e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80056ec:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80056ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005700:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800570c:	2001      	movs	r0, #1
 800570e:	f7fe fdf3 	bl	80042f8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800571a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800571c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8005720:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005736:	2001      	movs	r0, #1
 8005738:	f7fe fdde 	bl	80042f8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005744:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8005746:	2300      	movs	r3, #0
 8005748:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800574a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800574e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8005750:	2300      	movs	r3, #0
 8005752:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8005754:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005758:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800575a:	2300      	movs	r3, #0
 800575c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800575e:	2300      	movs	r3, #0
 8005760:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8005762:	2300      	movs	r3, #0
 8005764:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005766:	2300      	movs	r3, #0
 8005768:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800576a:	2304      	movs	r3, #4
 800576c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800576e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005772:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8005774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005778:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800577a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800577e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005784:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8005786:	2380      	movs	r3, #128	; 0x80
 8005788:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800578a:	2300      	movs	r3, #0
 800578c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800578e:	2300      	movs	r3, #0
 8005790:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800579a:	3318      	adds	r3, #24
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80057a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80057a6:	4b3e      	ldr	r3, [pc, #248]	; (80058a0 <ETH_MACDMAConfig+0x390>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80057ae:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80057b0:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80057b2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80057b4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80057b6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80057b8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80057ba:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80057bc:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80057be:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80057c0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80057c2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80057c4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80057c6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80057ca:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80057ce:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80057d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80057d4:	4313      	orrs	r3, r2
 80057d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057e2:	3318      	adds	r3, #24
 80057e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80057e8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057f2:	3318      	adds	r3, #24
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80057fa:	2001      	movs	r0, #1
 80057fc:	f7fe fd7c 	bl	80042f8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005808:	3318      	adds	r3, #24
 800580a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800580e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005814:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8005818:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800581a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800581c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800581e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8005820:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005824:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8005826:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8005828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800582a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005838:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005848:	2001      	movs	r0, #1
 800584a:	f7fe fd55 	bl	80042f8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005856:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800585a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d10f      	bne.n	8005884 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800586c:	331c      	adds	r3, #28
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800587c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005880:	331c      	adds	r3, #28
 8005882:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	461a      	mov	r2, r3
 800588a:	2100      	movs	r1, #0
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f809 	bl	80058a4 <ETH_MACAddressConfig>
}
 8005892:	bf00      	nop
 8005894:	37c0      	adds	r7, #192	; 0xc0
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	ff20810f 	.word	0xff20810f
 80058a0:	f8de3f23 	.word	0xf8de3f23

080058a4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	3305      	adds	r3, #5
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	021b      	lsls	r3, r3, #8
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	3204      	adds	r2, #4
 80058bc:	7812      	ldrb	r2, [r2, #0]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	4b11      	ldr	r3, [pc, #68]	; (800590c <ETH_MACAddressConfig+0x68>)
 80058c6:	4413      	add	r3, r2
 80058c8:	461a      	mov	r2, r3
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3303      	adds	r3, #3
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	061a      	lsls	r2, r3, #24
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3302      	adds	r3, #2
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	041b      	lsls	r3, r3, #16
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3301      	adds	r3, #1
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	021b      	lsls	r3, r3, #8
 80058e8:	4313      	orrs	r3, r2
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	7812      	ldrb	r2, [r2, #0]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	4b06      	ldr	r3, [pc, #24]	; (8005910 <ETH_MACAddressConfig+0x6c>)
 80058f6:	4413      	add	r3, r2
 80058f8:	461a      	mov	r2, r3
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	6013      	str	r3, [r2, #0]
}
 80058fe:	bf00      	nop
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40028040 	.word	0x40028040
 8005910:	40028044 	.word	0x40028044

08005914 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0208 	orr.w	r2, r2, #8
 800592e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005938:	2001      	movs	r0, #1
 800593a:	f000 f8e9 	bl	8005b10 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	601a      	str	r2, [r3, #0]
}
 8005946:	bf00      	nop
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800594e:	b580      	push	{r7, lr}
 8005950:	b084      	sub	sp, #16
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0208 	bic.w	r2, r2, #8
 8005968:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005972:	2001      	movs	r0, #1
 8005974:	f000 f8cc 	bl	8005b10 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	601a      	str	r2, [r3, #0]
}
 8005980:	bf00      	nop
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0204 	orr.w	r2, r2, #4
 80059a2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80059ac:	2001      	movs	r0, #1
 80059ae:	f000 f8af 	bl	8005b10 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	601a      	str	r2, [r3, #0]
}
 80059ba:	bf00      	nop
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b084      	sub	sp, #16
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0204 	bic.w	r2, r2, #4
 80059dc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80059e6:	2001      	movs	r0, #1
 80059e8:	f000 f892 	bl	8005b10 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	601a      	str	r2, [r3, #0]
}
 80059f4:	bf00      	nop
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a0c:	3318      	adds	r3, #24
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a1c:	3318      	adds	r3, #24
 8005a1e:	601a      	str	r2, [r3, #0]
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a3c:	3318      	adds	r3, #24
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a4c:	3318      	adds	r3, #24
 8005a4e:	601a      	str	r2, [r3, #0]
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a6c:	3318      	adds	r3, #24
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f042 0202 	orr.w	r2, r2, #2
 8005a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a7c:	3318      	adds	r3, #24
 8005a7e:	601a      	str	r2, [r3, #0]
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a9c:	3318      	adds	r3, #24
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0202 	bic.w	r2, r2, #2
 8005aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aac:	3318      	adds	r3, #24
 8005aae:	601a      	str	r2, [r3, #0]
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ad0:	3318      	adds	r3, #24
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ae0:	3318      	adds	r3, #24
 8005ae2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aec:	3318      	adds	r3, #24
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005af2:	2001      	movs	r0, #1
 8005af4:	f000 f80c 	bl	8005b10 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b02:	3318      	adds	r3, #24
 8005b04:	601a      	str	r2, [r3, #0]
}
 8005b06:	bf00      	nop
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b18:	4b0b      	ldr	r3, [pc, #44]	; (8005b48 <ETH_Delay+0x38>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a0b      	ldr	r2, [pc, #44]	; (8005b4c <ETH_Delay+0x3c>)
 8005b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b22:	0a5b      	lsrs	r3, r3, #9
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	fb02 f303 	mul.w	r3, r2, r3
 8005b2a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8005b2c:	bf00      	nop
  } 
  while (Delay --);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	1e5a      	subs	r2, r3, #1
 8005b32:	60fa      	str	r2, [r7, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1f9      	bne.n	8005b2c <ETH_Delay+0x1c>
}
 8005b38:	bf00      	nop
 8005b3a:	bf00      	nop
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	2000000c 	.word	0x2000000c
 8005b4c:	10624dd3 	.word	0x10624dd3

08005b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b089      	sub	sp, #36	; 0x24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b66:	2300      	movs	r3, #0
 8005b68:	61fb      	str	r3, [r7, #28]
 8005b6a:	e16b      	b.n	8005e44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	fa02 f303 	lsl.w	r3, r2, r3
 8005b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	f040 815a 	bne.w	8005e3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d00b      	beq.n	8005baa <HAL_GPIO_Init+0x5a>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d007      	beq.n	8005baa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b9e:	2b11      	cmp	r3, #17
 8005ba0:	d003      	beq.n	8005baa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	2b12      	cmp	r3, #18
 8005ba8:	d130      	bne.n	8005c0c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	2203      	movs	r2, #3
 8005bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bba:	43db      	mvns	r3, r3
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	fa02 f303 	lsl.w	r3, r2, r3
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005be0:	2201      	movs	r2, #1
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	fa02 f303 	lsl.w	r3, r2, r3
 8005be8:	43db      	mvns	r3, r3
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	4013      	ands	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	091b      	lsrs	r3, r3, #4
 8005bf6:	f003 0201 	and.w	r2, r3, #1
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	2203      	movs	r2, #3
 8005c18:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1c:	43db      	mvns	r3, r3
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	4013      	ands	r3, r2
 8005c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d003      	beq.n	8005c4c <HAL_GPIO_Init+0xfc>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	2b12      	cmp	r3, #18
 8005c4a:	d123      	bne.n	8005c94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	08da      	lsrs	r2, r3, #3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3208      	adds	r2, #8
 8005c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	f003 0307 	and.w	r3, r3, #7
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	220f      	movs	r2, #15
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	691a      	ldr	r2, [r3, #16]
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	08da      	lsrs	r2, r3, #3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3208      	adds	r2, #8
 8005c8e:	69b9      	ldr	r1, [r7, #24]
 8005c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	2203      	movs	r2, #3
 8005ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca4:	43db      	mvns	r3, r3
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f003 0203 	and.w	r2, r3, #3
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 80b4 	beq.w	8005e3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	4b60      	ldr	r3, [pc, #384]	; (8005e5c <HAL_GPIO_Init+0x30c>)
 8005cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cde:	4a5f      	ldr	r2, [pc, #380]	; (8005e5c <HAL_GPIO_Init+0x30c>)
 8005ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8005ce6:	4b5d      	ldr	r3, [pc, #372]	; (8005e5c <HAL_GPIO_Init+0x30c>)
 8005ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cf2:	4a5b      	ldr	r2, [pc, #364]	; (8005e60 <HAL_GPIO_Init+0x310>)
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	089b      	lsrs	r3, r3, #2
 8005cf8:	3302      	adds	r3, #2
 8005cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	220f      	movs	r2, #15
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	4013      	ands	r3, r2
 8005d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a52      	ldr	r2, [pc, #328]	; (8005e64 <HAL_GPIO_Init+0x314>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d02b      	beq.n	8005d76 <HAL_GPIO_Init+0x226>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a51      	ldr	r2, [pc, #324]	; (8005e68 <HAL_GPIO_Init+0x318>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d025      	beq.n	8005d72 <HAL_GPIO_Init+0x222>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a50      	ldr	r2, [pc, #320]	; (8005e6c <HAL_GPIO_Init+0x31c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d01f      	beq.n	8005d6e <HAL_GPIO_Init+0x21e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a4f      	ldr	r2, [pc, #316]	; (8005e70 <HAL_GPIO_Init+0x320>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d019      	beq.n	8005d6a <HAL_GPIO_Init+0x21a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a4e      	ldr	r2, [pc, #312]	; (8005e74 <HAL_GPIO_Init+0x324>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d013      	beq.n	8005d66 <HAL_GPIO_Init+0x216>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a4d      	ldr	r2, [pc, #308]	; (8005e78 <HAL_GPIO_Init+0x328>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d00d      	beq.n	8005d62 <HAL_GPIO_Init+0x212>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a4c      	ldr	r2, [pc, #304]	; (8005e7c <HAL_GPIO_Init+0x32c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d007      	beq.n	8005d5e <HAL_GPIO_Init+0x20e>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a4b      	ldr	r2, [pc, #300]	; (8005e80 <HAL_GPIO_Init+0x330>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d101      	bne.n	8005d5a <HAL_GPIO_Init+0x20a>
 8005d56:	2307      	movs	r3, #7
 8005d58:	e00e      	b.n	8005d78 <HAL_GPIO_Init+0x228>
 8005d5a:	2308      	movs	r3, #8
 8005d5c:	e00c      	b.n	8005d78 <HAL_GPIO_Init+0x228>
 8005d5e:	2306      	movs	r3, #6
 8005d60:	e00a      	b.n	8005d78 <HAL_GPIO_Init+0x228>
 8005d62:	2305      	movs	r3, #5
 8005d64:	e008      	b.n	8005d78 <HAL_GPIO_Init+0x228>
 8005d66:	2304      	movs	r3, #4
 8005d68:	e006      	b.n	8005d78 <HAL_GPIO_Init+0x228>
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e004      	b.n	8005d78 <HAL_GPIO_Init+0x228>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e002      	b.n	8005d78 <HAL_GPIO_Init+0x228>
 8005d72:	2301      	movs	r3, #1
 8005d74:	e000      	b.n	8005d78 <HAL_GPIO_Init+0x228>
 8005d76:	2300      	movs	r3, #0
 8005d78:	69fa      	ldr	r2, [r7, #28]
 8005d7a:	f002 0203 	and.w	r2, r2, #3
 8005d7e:	0092      	lsls	r2, r2, #2
 8005d80:	4093      	lsls	r3, r2
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d88:	4935      	ldr	r1, [pc, #212]	; (8005e60 <HAL_GPIO_Init+0x310>)
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	089b      	lsrs	r3, r3, #2
 8005d8e:	3302      	adds	r3, #2
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d96:	4b3b      	ldr	r3, [pc, #236]	; (8005e84 <HAL_GPIO_Init+0x334>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	43db      	mvns	r3, r3
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	4013      	ands	r3, r2
 8005da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005dba:	4a32      	ldr	r2, [pc, #200]	; (8005e84 <HAL_GPIO_Init+0x334>)
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005dc0:	4b30      	ldr	r3, [pc, #192]	; (8005e84 <HAL_GPIO_Init+0x334>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	43db      	mvns	r3, r3
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	4013      	ands	r3, r2
 8005dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005de4:	4a27      	ldr	r2, [pc, #156]	; (8005e84 <HAL_GPIO_Init+0x334>)
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005dea:	4b26      	ldr	r3, [pc, #152]	; (8005e84 <HAL_GPIO_Init+0x334>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	43db      	mvns	r3, r3
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	4013      	ands	r3, r2
 8005df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e0e:	4a1d      	ldr	r2, [pc, #116]	; (8005e84 <HAL_GPIO_Init+0x334>)
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e14:	4b1b      	ldr	r3, [pc, #108]	; (8005e84 <HAL_GPIO_Init+0x334>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	43db      	mvns	r3, r3
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	4013      	ands	r3, r2
 8005e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e38:	4a12      	ldr	r2, [pc, #72]	; (8005e84 <HAL_GPIO_Init+0x334>)
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	3301      	adds	r3, #1
 8005e42:	61fb      	str	r3, [r7, #28]
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	2b0f      	cmp	r3, #15
 8005e48:	f67f ae90 	bls.w	8005b6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005e4c:	bf00      	nop
 8005e4e:	bf00      	nop
 8005e50:	3724      	adds	r7, #36	; 0x24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	40023800 	.word	0x40023800
 8005e60:	40013800 	.word	0x40013800
 8005e64:	40020000 	.word	0x40020000
 8005e68:	40020400 	.word	0x40020400
 8005e6c:	40020800 	.word	0x40020800
 8005e70:	40020c00 	.word	0x40020c00
 8005e74:	40021000 	.word	0x40021000
 8005e78:	40021400 	.word	0x40021400
 8005e7c:	40021800 	.word	0x40021800
 8005e80:	40021c00 	.word	0x40021c00
 8005e84:	40013c00 	.word	0x40013c00

08005e88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691a      	ldr	r2, [r3, #16]
 8005e98:	887b      	ldrh	r3, [r7, #2]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	73fb      	strb	r3, [r7, #15]
 8005ea4:	e001      	b.n	8005eaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	807b      	strh	r3, [r7, #2]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ec8:	787b      	ldrb	r3, [r7, #1]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ece:	887a      	ldrh	r2, [r7, #2]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ed4:	e003      	b.n	8005ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ed6:	887b      	ldrh	r3, [r7, #2]
 8005ed8:	041a      	lsls	r2, r3, #16
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	619a      	str	r2, [r3, #24]
}
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
	...

08005eec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e25b      	b.n	80063b6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d075      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f0a:	4ba3      	ldr	r3, [pc, #652]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 030c 	and.w	r3, r3, #12
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d00c      	beq.n	8005f30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f16:	4ba0      	ldr	r3, [pc, #640]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f1e:	2b08      	cmp	r3, #8
 8005f20:	d112      	bne.n	8005f48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f22:	4b9d      	ldr	r3, [pc, #628]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f2e:	d10b      	bne.n	8005f48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f30:	4b99      	ldr	r3, [pc, #612]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d05b      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x108>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d157      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e236      	b.n	80063b6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f50:	d106      	bne.n	8005f60 <HAL_RCC_OscConfig+0x74>
 8005f52:	4b91      	ldr	r3, [pc, #580]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a90      	ldr	r2, [pc, #576]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8005f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	e01d      	b.n	8005f9c <HAL_RCC_OscConfig+0xb0>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f68:	d10c      	bne.n	8005f84 <HAL_RCC_OscConfig+0x98>
 8005f6a:	4b8b      	ldr	r3, [pc, #556]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a8a      	ldr	r2, [pc, #552]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8005f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	4b88      	ldr	r3, [pc, #544]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a87      	ldr	r2, [pc, #540]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8005f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	e00b      	b.n	8005f9c <HAL_RCC_OscConfig+0xb0>
 8005f84:	4b84      	ldr	r3, [pc, #528]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a83      	ldr	r2, [pc, #524]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8005f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	4b81      	ldr	r3, [pc, #516]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a80      	ldr	r2, [pc, #512]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8005f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d013      	beq.n	8005fcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa4:	f7fe f99c 	bl	80042e0 <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fac:	f7fe f998 	bl	80042e0 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b64      	cmp	r3, #100	; 0x64
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e1fb      	b.n	80063b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fbe:	4b76      	ldr	r3, [pc, #472]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0f0      	beq.n	8005fac <HAL_RCC_OscConfig+0xc0>
 8005fca:	e014      	b.n	8005ff6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fcc:	f7fe f988 	bl	80042e0 <HAL_GetTick>
 8005fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fd2:	e008      	b.n	8005fe6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fd4:	f7fe f984 	bl	80042e0 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b64      	cmp	r3, #100	; 0x64
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e1e7      	b.n	80063b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fe6:	4b6c      	ldr	r3, [pc, #432]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1f0      	bne.n	8005fd4 <HAL_RCC_OscConfig+0xe8>
 8005ff2:	e000      	b.n	8005ff6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d063      	beq.n	80060ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006002:	4b65      	ldr	r3, [pc, #404]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 030c 	and.w	r3, r3, #12
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00b      	beq.n	8006026 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800600e:	4b62      	ldr	r3, [pc, #392]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006016:	2b08      	cmp	r3, #8
 8006018:	d11c      	bne.n	8006054 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800601a:	4b5f      	ldr	r3, [pc, #380]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d116      	bne.n	8006054 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006026:	4b5c      	ldr	r3, [pc, #368]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d005      	beq.n	800603e <HAL_RCC_OscConfig+0x152>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d001      	beq.n	800603e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e1bb      	b.n	80063b6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800603e:	4b56      	ldr	r3, [pc, #344]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	4952      	ldr	r1, [pc, #328]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 800604e:	4313      	orrs	r3, r2
 8006050:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006052:	e03a      	b.n	80060ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d020      	beq.n	800609e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800605c:	4b4f      	ldr	r3, [pc, #316]	; (800619c <HAL_RCC_OscConfig+0x2b0>)
 800605e:	2201      	movs	r2, #1
 8006060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006062:	f7fe f93d 	bl	80042e0 <HAL_GetTick>
 8006066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006068:	e008      	b.n	800607c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800606a:	f7fe f939 	bl	80042e0 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d901      	bls.n	800607c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e19c      	b.n	80063b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800607c:	4b46      	ldr	r3, [pc, #280]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d0f0      	beq.n	800606a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006088:	4b43      	ldr	r3, [pc, #268]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	00db      	lsls	r3, r3, #3
 8006096:	4940      	ldr	r1, [pc, #256]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8006098:	4313      	orrs	r3, r2
 800609a:	600b      	str	r3, [r1, #0]
 800609c:	e015      	b.n	80060ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800609e:	4b3f      	ldr	r3, [pc, #252]	; (800619c <HAL_RCC_OscConfig+0x2b0>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a4:	f7fe f91c 	bl	80042e0 <HAL_GetTick>
 80060a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060aa:	e008      	b.n	80060be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060ac:	f7fe f918 	bl	80042e0 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e17b      	b.n	80063b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060be:	4b36      	ldr	r3, [pc, #216]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1f0      	bne.n	80060ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0308 	and.w	r3, r3, #8
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d030      	beq.n	8006138 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d016      	beq.n	800610c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060de:	4b30      	ldr	r3, [pc, #192]	; (80061a0 <HAL_RCC_OscConfig+0x2b4>)
 80060e0:	2201      	movs	r2, #1
 80060e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e4:	f7fe f8fc 	bl	80042e0 <HAL_GetTick>
 80060e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060ea:	e008      	b.n	80060fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060ec:	f7fe f8f8 	bl	80042e0 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e15b      	b.n	80063b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060fe:	4b26      	ldr	r3, [pc, #152]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8006100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	2b00      	cmp	r3, #0
 8006108:	d0f0      	beq.n	80060ec <HAL_RCC_OscConfig+0x200>
 800610a:	e015      	b.n	8006138 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800610c:	4b24      	ldr	r3, [pc, #144]	; (80061a0 <HAL_RCC_OscConfig+0x2b4>)
 800610e:	2200      	movs	r2, #0
 8006110:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006112:	f7fe f8e5 	bl	80042e0 <HAL_GetTick>
 8006116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006118:	e008      	b.n	800612c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800611a:	f7fe f8e1 	bl	80042e0 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d901      	bls.n	800612c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e144      	b.n	80063b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800612c:	4b1a      	ldr	r3, [pc, #104]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 800612e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1f0      	bne.n	800611a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0304 	and.w	r3, r3, #4
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 80a0 	beq.w	8006286 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006146:	2300      	movs	r3, #0
 8006148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800614a:	4b13      	ldr	r3, [pc, #76]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10f      	bne.n	8006176 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006156:	2300      	movs	r3, #0
 8006158:	60bb      	str	r3, [r7, #8]
 800615a:	4b0f      	ldr	r3, [pc, #60]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	4a0e      	ldr	r2, [pc, #56]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8006160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006164:	6413      	str	r3, [r2, #64]	; 0x40
 8006166:	4b0c      	ldr	r3, [pc, #48]	; (8006198 <HAL_RCC_OscConfig+0x2ac>)
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800616e:	60bb      	str	r3, [r7, #8]
 8006170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006172:	2301      	movs	r3, #1
 8006174:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006176:	4b0b      	ldr	r3, [pc, #44]	; (80061a4 <HAL_RCC_OscConfig+0x2b8>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617e:	2b00      	cmp	r3, #0
 8006180:	d121      	bne.n	80061c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006182:	4b08      	ldr	r3, [pc, #32]	; (80061a4 <HAL_RCC_OscConfig+0x2b8>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a07      	ldr	r2, [pc, #28]	; (80061a4 <HAL_RCC_OscConfig+0x2b8>)
 8006188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800618c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800618e:	f7fe f8a7 	bl	80042e0 <HAL_GetTick>
 8006192:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006194:	e011      	b.n	80061ba <HAL_RCC_OscConfig+0x2ce>
 8006196:	bf00      	nop
 8006198:	40023800 	.word	0x40023800
 800619c:	42470000 	.word	0x42470000
 80061a0:	42470e80 	.word	0x42470e80
 80061a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061a8:	f7fe f89a 	bl	80042e0 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e0fd      	b.n	80063b6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ba:	4b81      	ldr	r3, [pc, #516]	; (80063c0 <HAL_RCC_OscConfig+0x4d4>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0f0      	beq.n	80061a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d106      	bne.n	80061dc <HAL_RCC_OscConfig+0x2f0>
 80061ce:	4b7d      	ldr	r3, [pc, #500]	; (80063c4 <HAL_RCC_OscConfig+0x4d8>)
 80061d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d2:	4a7c      	ldr	r2, [pc, #496]	; (80063c4 <HAL_RCC_OscConfig+0x4d8>)
 80061d4:	f043 0301 	orr.w	r3, r3, #1
 80061d8:	6713      	str	r3, [r2, #112]	; 0x70
 80061da:	e01c      	b.n	8006216 <HAL_RCC_OscConfig+0x32a>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	2b05      	cmp	r3, #5
 80061e2:	d10c      	bne.n	80061fe <HAL_RCC_OscConfig+0x312>
 80061e4:	4b77      	ldr	r3, [pc, #476]	; (80063c4 <HAL_RCC_OscConfig+0x4d8>)
 80061e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e8:	4a76      	ldr	r2, [pc, #472]	; (80063c4 <HAL_RCC_OscConfig+0x4d8>)
 80061ea:	f043 0304 	orr.w	r3, r3, #4
 80061ee:	6713      	str	r3, [r2, #112]	; 0x70
 80061f0:	4b74      	ldr	r3, [pc, #464]	; (80063c4 <HAL_RCC_OscConfig+0x4d8>)
 80061f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f4:	4a73      	ldr	r2, [pc, #460]	; (80063c4 <HAL_RCC_OscConfig+0x4d8>)
 80061f6:	f043 0301 	orr.w	r3, r3, #1
 80061fa:	6713      	str	r3, [r2, #112]	; 0x70
 80061fc:	e00b      	b.n	8006216 <HAL_RCC_OscConfig+0x32a>
 80061fe:	4b71      	ldr	r3, [pc, #452]	; (80063c4 <HAL_RCC_OscConfig+0x4d8>)
 8006200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006202:	4a70      	ldr	r2, [pc, #448]	; (80063c4 <HAL_RCC_OscConfig+0x4d8>)
 8006204:	f023 0301 	bic.w	r3, r3, #1
 8006208:	6713      	str	r3, [r2, #112]	; 0x70
 800620a:	4b6e      	ldr	r3, [pc, #440]	; (80063c4 <HAL_RCC_OscConfig+0x4d8>)
 800620c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620e:	4a6d      	ldr	r2, [pc, #436]	; (80063c4 <HAL_RCC_OscConfig+0x4d8>)
 8006210:	f023 0304 	bic.w	r3, r3, #4
 8006214:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d015      	beq.n	800624a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800621e:	f7fe f85f 	bl	80042e0 <HAL_GetTick>
 8006222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006224:	e00a      	b.n	800623c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006226:	f7fe f85b 	bl	80042e0 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	f241 3288 	movw	r2, #5000	; 0x1388
 8006234:	4293      	cmp	r3, r2
 8006236:	d901      	bls.n	800623c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e0bc      	b.n	80063b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800623c:	4b61      	ldr	r3, [pc, #388]	; (80063c4 <HAL_RCC_OscConfig+0x4d8>)
 800623e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0ee      	beq.n	8006226 <HAL_RCC_OscConfig+0x33a>
 8006248:	e014      	b.n	8006274 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800624a:	f7fe f849 	bl	80042e0 <HAL_GetTick>
 800624e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006250:	e00a      	b.n	8006268 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006252:	f7fe f845 	bl	80042e0 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006260:	4293      	cmp	r3, r2
 8006262:	d901      	bls.n	8006268 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e0a6      	b.n	80063b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006268:	4b56      	ldr	r3, [pc, #344]	; (80063c4 <HAL_RCC_OscConfig+0x4d8>)
 800626a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1ee      	bne.n	8006252 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006274:	7dfb      	ldrb	r3, [r7, #23]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d105      	bne.n	8006286 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800627a:	4b52      	ldr	r3, [pc, #328]	; (80063c4 <HAL_RCC_OscConfig+0x4d8>)
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	4a51      	ldr	r2, [pc, #324]	; (80063c4 <HAL_RCC_OscConfig+0x4d8>)
 8006280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006284:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 8092 	beq.w	80063b4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006290:	4b4c      	ldr	r3, [pc, #304]	; (80063c4 <HAL_RCC_OscConfig+0x4d8>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f003 030c 	and.w	r3, r3, #12
 8006298:	2b08      	cmp	r3, #8
 800629a:	d05c      	beq.n	8006356 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d141      	bne.n	8006328 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062a4:	4b48      	ldr	r3, [pc, #288]	; (80063c8 <HAL_RCC_OscConfig+0x4dc>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062aa:	f7fe f819 	bl	80042e0 <HAL_GetTick>
 80062ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062b0:	e008      	b.n	80062c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062b2:	f7fe f815 	bl	80042e0 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d901      	bls.n	80062c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e078      	b.n	80063b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062c4:	4b3f      	ldr	r3, [pc, #252]	; (80063c4 <HAL_RCC_OscConfig+0x4d8>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1f0      	bne.n	80062b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	69da      	ldr	r2, [r3, #28]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	431a      	orrs	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	019b      	lsls	r3, r3, #6
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e6:	085b      	lsrs	r3, r3, #1
 80062e8:	3b01      	subs	r3, #1
 80062ea:	041b      	lsls	r3, r3, #16
 80062ec:	431a      	orrs	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f2:	061b      	lsls	r3, r3, #24
 80062f4:	4933      	ldr	r1, [pc, #204]	; (80063c4 <HAL_RCC_OscConfig+0x4d8>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062fa:	4b33      	ldr	r3, [pc, #204]	; (80063c8 <HAL_RCC_OscConfig+0x4dc>)
 80062fc:	2201      	movs	r2, #1
 80062fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006300:	f7fd ffee 	bl	80042e0 <HAL_GetTick>
 8006304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006306:	e008      	b.n	800631a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006308:	f7fd ffea 	bl	80042e0 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e04d      	b.n	80063b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800631a:	4b2a      	ldr	r3, [pc, #168]	; (80063c4 <HAL_RCC_OscConfig+0x4d8>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0f0      	beq.n	8006308 <HAL_RCC_OscConfig+0x41c>
 8006326:	e045      	b.n	80063b4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006328:	4b27      	ldr	r3, [pc, #156]	; (80063c8 <HAL_RCC_OscConfig+0x4dc>)
 800632a:	2200      	movs	r2, #0
 800632c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800632e:	f7fd ffd7 	bl	80042e0 <HAL_GetTick>
 8006332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006334:	e008      	b.n	8006348 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006336:	f7fd ffd3 	bl	80042e0 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	2b02      	cmp	r3, #2
 8006342:	d901      	bls.n	8006348 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e036      	b.n	80063b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006348:	4b1e      	ldr	r3, [pc, #120]	; (80063c4 <HAL_RCC_OscConfig+0x4d8>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1f0      	bne.n	8006336 <HAL_RCC_OscConfig+0x44a>
 8006354:	e02e      	b.n	80063b4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d101      	bne.n	8006362 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e029      	b.n	80063b6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006362:	4b18      	ldr	r3, [pc, #96]	; (80063c4 <HAL_RCC_OscConfig+0x4d8>)
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	429a      	cmp	r2, r3
 8006374:	d11c      	bne.n	80063b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006380:	429a      	cmp	r2, r3
 8006382:	d115      	bne.n	80063b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800638a:	4013      	ands	r3, r2
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006390:	4293      	cmp	r3, r2
 8006392:	d10d      	bne.n	80063b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800639e:	429a      	cmp	r2, r3
 80063a0:	d106      	bne.n	80063b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d001      	beq.n	80063b4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e000      	b.n	80063b6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	40007000 	.word	0x40007000
 80063c4:	40023800 	.word	0x40023800
 80063c8:	42470060 	.word	0x42470060

080063cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e0cc      	b.n	800657a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063e0:	4b68      	ldr	r3, [pc, #416]	; (8006584 <HAL_RCC_ClockConfig+0x1b8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 030f 	and.w	r3, r3, #15
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d90c      	bls.n	8006408 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ee:	4b65      	ldr	r3, [pc, #404]	; (8006584 <HAL_RCC_ClockConfig+0x1b8>)
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063f6:	4b63      	ldr	r3, [pc, #396]	; (8006584 <HAL_RCC_ClockConfig+0x1b8>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 030f 	and.w	r3, r3, #15
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d001      	beq.n	8006408 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e0b8      	b.n	800657a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d020      	beq.n	8006456 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006420:	4b59      	ldr	r3, [pc, #356]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	4a58      	ldr	r2, [pc, #352]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 8006426:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800642a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0308 	and.w	r3, r3, #8
 8006434:	2b00      	cmp	r3, #0
 8006436:	d005      	beq.n	8006444 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006438:	4b53      	ldr	r3, [pc, #332]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	4a52      	ldr	r2, [pc, #328]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 800643e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006442:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006444:	4b50      	ldr	r3, [pc, #320]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	494d      	ldr	r1, [pc, #308]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 8006452:	4313      	orrs	r3, r2
 8006454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d044      	beq.n	80064ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d107      	bne.n	800647a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800646a:	4b47      	ldr	r3, [pc, #284]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d119      	bne.n	80064aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e07f      	b.n	800657a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2b02      	cmp	r3, #2
 8006480:	d003      	beq.n	800648a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006486:	2b03      	cmp	r3, #3
 8006488:	d107      	bne.n	800649a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800648a:	4b3f      	ldr	r3, [pc, #252]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d109      	bne.n	80064aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e06f      	b.n	800657a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800649a:	4b3b      	ldr	r3, [pc, #236]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e067      	b.n	800657a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064aa:	4b37      	ldr	r3, [pc, #220]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f023 0203 	bic.w	r2, r3, #3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	4934      	ldr	r1, [pc, #208]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064bc:	f7fd ff10 	bl	80042e0 <HAL_GetTick>
 80064c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064c2:	e00a      	b.n	80064da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064c4:	f7fd ff0c 	bl	80042e0 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d901      	bls.n	80064da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e04f      	b.n	800657a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064da:	4b2b      	ldr	r3, [pc, #172]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f003 020c 	and.w	r2, r3, #12
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d1eb      	bne.n	80064c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064ec:	4b25      	ldr	r3, [pc, #148]	; (8006584 <HAL_RCC_ClockConfig+0x1b8>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 030f 	and.w	r3, r3, #15
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d20c      	bcs.n	8006514 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064fa:	4b22      	ldr	r3, [pc, #136]	; (8006584 <HAL_RCC_ClockConfig+0x1b8>)
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006502:	4b20      	ldr	r3, [pc, #128]	; (8006584 <HAL_RCC_ClockConfig+0x1b8>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 030f 	and.w	r3, r3, #15
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d001      	beq.n	8006514 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e032      	b.n	800657a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b00      	cmp	r3, #0
 800651e:	d008      	beq.n	8006532 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006520:	4b19      	ldr	r3, [pc, #100]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	4916      	ldr	r1, [pc, #88]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 800652e:	4313      	orrs	r3, r2
 8006530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	2b00      	cmp	r3, #0
 800653c:	d009      	beq.n	8006552 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800653e:	4b12      	ldr	r3, [pc, #72]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	490e      	ldr	r1, [pc, #56]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 800654e:	4313      	orrs	r3, r2
 8006550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006552:	f000 f821 	bl	8006598 <HAL_RCC_GetSysClockFreq>
 8006556:	4602      	mov	r2, r0
 8006558:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	091b      	lsrs	r3, r3, #4
 800655e:	f003 030f 	and.w	r3, r3, #15
 8006562:	490a      	ldr	r1, [pc, #40]	; (800658c <HAL_RCC_ClockConfig+0x1c0>)
 8006564:	5ccb      	ldrb	r3, [r1, r3]
 8006566:	fa22 f303 	lsr.w	r3, r2, r3
 800656a:	4a09      	ldr	r2, [pc, #36]	; (8006590 <HAL_RCC_ClockConfig+0x1c4>)
 800656c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800656e:	4b09      	ldr	r3, [pc, #36]	; (8006594 <HAL_RCC_ClockConfig+0x1c8>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4618      	mov	r0, r3
 8006574:	f7fd f990 	bl	8003898 <HAL_InitTick>

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	40023c00 	.word	0x40023c00
 8006588:	40023800 	.word	0x40023800
 800658c:	0801bb48 	.word	0x0801bb48
 8006590:	2000000c 	.word	0x2000000c
 8006594:	20000010 	.word	0x20000010

08006598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006598:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800659c:	b084      	sub	sp, #16
 800659e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	607b      	str	r3, [r7, #4]
 80065a4:	2300      	movs	r3, #0
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	2300      	movs	r3, #0
 80065aa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065b0:	4b67      	ldr	r3, [pc, #412]	; (8006750 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f003 030c 	and.w	r3, r3, #12
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d00d      	beq.n	80065d8 <HAL_RCC_GetSysClockFreq+0x40>
 80065bc:	2b08      	cmp	r3, #8
 80065be:	f200 80bd 	bhi.w	800673c <HAL_RCC_GetSysClockFreq+0x1a4>
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <HAL_RCC_GetSysClockFreq+0x34>
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d003      	beq.n	80065d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80065ca:	e0b7      	b.n	800673c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065cc:	4b61      	ldr	r3, [pc, #388]	; (8006754 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80065ce:	60bb      	str	r3, [r7, #8]
       break;
 80065d0:	e0b7      	b.n	8006742 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065d2:	4b61      	ldr	r3, [pc, #388]	; (8006758 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80065d4:	60bb      	str	r3, [r7, #8]
      break;
 80065d6:	e0b4      	b.n	8006742 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065d8:	4b5d      	ldr	r3, [pc, #372]	; (8006750 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065e2:	4b5b      	ldr	r3, [pc, #364]	; (8006750 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d04d      	beq.n	800668a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065ee:	4b58      	ldr	r3, [pc, #352]	; (8006750 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	099b      	lsrs	r3, r3, #6
 80065f4:	461a      	mov	r2, r3
 80065f6:	f04f 0300 	mov.w	r3, #0
 80065fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80065fe:	f04f 0100 	mov.w	r1, #0
 8006602:	ea02 0800 	and.w	r8, r2, r0
 8006606:	ea03 0901 	and.w	r9, r3, r1
 800660a:	4640      	mov	r0, r8
 800660c:	4649      	mov	r1, r9
 800660e:	f04f 0200 	mov.w	r2, #0
 8006612:	f04f 0300 	mov.w	r3, #0
 8006616:	014b      	lsls	r3, r1, #5
 8006618:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800661c:	0142      	lsls	r2, r0, #5
 800661e:	4610      	mov	r0, r2
 8006620:	4619      	mov	r1, r3
 8006622:	ebb0 0008 	subs.w	r0, r0, r8
 8006626:	eb61 0109 	sbc.w	r1, r1, r9
 800662a:	f04f 0200 	mov.w	r2, #0
 800662e:	f04f 0300 	mov.w	r3, #0
 8006632:	018b      	lsls	r3, r1, #6
 8006634:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006638:	0182      	lsls	r2, r0, #6
 800663a:	1a12      	subs	r2, r2, r0
 800663c:	eb63 0301 	sbc.w	r3, r3, r1
 8006640:	f04f 0000 	mov.w	r0, #0
 8006644:	f04f 0100 	mov.w	r1, #0
 8006648:	00d9      	lsls	r1, r3, #3
 800664a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800664e:	00d0      	lsls	r0, r2, #3
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	eb12 0208 	adds.w	r2, r2, r8
 8006658:	eb43 0309 	adc.w	r3, r3, r9
 800665c:	f04f 0000 	mov.w	r0, #0
 8006660:	f04f 0100 	mov.w	r1, #0
 8006664:	0259      	lsls	r1, r3, #9
 8006666:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800666a:	0250      	lsls	r0, r2, #9
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4610      	mov	r0, r2
 8006672:	4619      	mov	r1, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	461a      	mov	r2, r3
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	f7fa faa4 	bl	8000bc8 <__aeabi_uldivmod>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	4613      	mov	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	e04a      	b.n	8006720 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800668a:	4b31      	ldr	r3, [pc, #196]	; (8006750 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	099b      	lsrs	r3, r3, #6
 8006690:	461a      	mov	r2, r3
 8006692:	f04f 0300 	mov.w	r3, #0
 8006696:	f240 10ff 	movw	r0, #511	; 0x1ff
 800669a:	f04f 0100 	mov.w	r1, #0
 800669e:	ea02 0400 	and.w	r4, r2, r0
 80066a2:	ea03 0501 	and.w	r5, r3, r1
 80066a6:	4620      	mov	r0, r4
 80066a8:	4629      	mov	r1, r5
 80066aa:	f04f 0200 	mov.w	r2, #0
 80066ae:	f04f 0300 	mov.w	r3, #0
 80066b2:	014b      	lsls	r3, r1, #5
 80066b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80066b8:	0142      	lsls	r2, r0, #5
 80066ba:	4610      	mov	r0, r2
 80066bc:	4619      	mov	r1, r3
 80066be:	1b00      	subs	r0, r0, r4
 80066c0:	eb61 0105 	sbc.w	r1, r1, r5
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	018b      	lsls	r3, r1, #6
 80066ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80066d2:	0182      	lsls	r2, r0, #6
 80066d4:	1a12      	subs	r2, r2, r0
 80066d6:	eb63 0301 	sbc.w	r3, r3, r1
 80066da:	f04f 0000 	mov.w	r0, #0
 80066de:	f04f 0100 	mov.w	r1, #0
 80066e2:	00d9      	lsls	r1, r3, #3
 80066e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066e8:	00d0      	lsls	r0, r2, #3
 80066ea:	4602      	mov	r2, r0
 80066ec:	460b      	mov	r3, r1
 80066ee:	1912      	adds	r2, r2, r4
 80066f0:	eb45 0303 	adc.w	r3, r5, r3
 80066f4:	f04f 0000 	mov.w	r0, #0
 80066f8:	f04f 0100 	mov.w	r1, #0
 80066fc:	0299      	lsls	r1, r3, #10
 80066fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006702:	0290      	lsls	r0, r2, #10
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	4610      	mov	r0, r2
 800670a:	4619      	mov	r1, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	461a      	mov	r2, r3
 8006710:	f04f 0300 	mov.w	r3, #0
 8006714:	f7fa fa58 	bl	8000bc8 <__aeabi_uldivmod>
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	4613      	mov	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006720:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	0c1b      	lsrs	r3, r3, #16
 8006726:	f003 0303 	and.w	r3, r3, #3
 800672a:	3301      	adds	r3, #1
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	fbb2 f3f3 	udiv	r3, r2, r3
 8006738:	60bb      	str	r3, [r7, #8]
      break;
 800673a:	e002      	b.n	8006742 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800673c:	4b05      	ldr	r3, [pc, #20]	; (8006754 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800673e:	60bb      	str	r3, [r7, #8]
      break;
 8006740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006742:	68bb      	ldr	r3, [r7, #8]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800674e:	bf00      	nop
 8006750:	40023800 	.word	0x40023800
 8006754:	00f42400 	.word	0x00f42400
 8006758:	007a1200 	.word	0x007a1200

0800675c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006760:	4b03      	ldr	r3, [pc, #12]	; (8006770 <HAL_RCC_GetHCLKFreq+0x14>)
 8006762:	681b      	ldr	r3, [r3, #0]
}
 8006764:	4618      	mov	r0, r3
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	2000000c 	.word	0x2000000c

08006774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006778:	f7ff fff0 	bl	800675c <HAL_RCC_GetHCLKFreq>
 800677c:	4602      	mov	r2, r0
 800677e:	4b05      	ldr	r3, [pc, #20]	; (8006794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	0a9b      	lsrs	r3, r3, #10
 8006784:	f003 0307 	and.w	r3, r3, #7
 8006788:	4903      	ldr	r1, [pc, #12]	; (8006798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800678a:	5ccb      	ldrb	r3, [r1, r3]
 800678c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006790:	4618      	mov	r0, r3
 8006792:	bd80      	pop	{r7, pc}
 8006794:	40023800 	.word	0x40023800
 8006798:	0801bb58 	.word	0x0801bb58

0800679c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80067a0:	f7ff ffdc 	bl	800675c <HAL_RCC_GetHCLKFreq>
 80067a4:	4602      	mov	r2, r0
 80067a6:	4b05      	ldr	r3, [pc, #20]	; (80067bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	0b5b      	lsrs	r3, r3, #13
 80067ac:	f003 0307 	and.w	r3, r3, #7
 80067b0:	4903      	ldr	r1, [pc, #12]	; (80067c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067b2:	5ccb      	ldrb	r3, [r1, r3]
 80067b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	40023800 	.word	0x40023800
 80067c0:	0801bb58 	.word	0x0801bb58

080067c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	220f      	movs	r2, #15
 80067d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80067d4:	4b12      	ldr	r3, [pc, #72]	; (8006820 <HAL_RCC_GetClockConfig+0x5c>)
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f003 0203 	and.w	r2, r3, #3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80067e0:	4b0f      	ldr	r3, [pc, #60]	; (8006820 <HAL_RCC_GetClockConfig+0x5c>)
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80067ec:	4b0c      	ldr	r3, [pc, #48]	; (8006820 <HAL_RCC_GetClockConfig+0x5c>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80067f8:	4b09      	ldr	r3, [pc, #36]	; (8006820 <HAL_RCC_GetClockConfig+0x5c>)
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	08db      	lsrs	r3, r3, #3
 80067fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006806:	4b07      	ldr	r3, [pc, #28]	; (8006824 <HAL_RCC_GetClockConfig+0x60>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 020f 	and.w	r2, r3, #15
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	601a      	str	r2, [r3, #0]
}
 8006812:	bf00      	nop
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	40023800 	.word	0x40023800
 8006824:	40023c00 	.word	0x40023c00

08006828 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b00      	cmp	r3, #0
 8006842:	d105      	bne.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800684c:	2b00      	cmp	r3, #0
 800684e:	d035      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006850:	4b62      	ldr	r3, [pc, #392]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006852:	2200      	movs	r2, #0
 8006854:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006856:	f7fd fd43 	bl	80042e0 <HAL_GetTick>
 800685a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800685c:	e008      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800685e:	f7fd fd3f 	bl	80042e0 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b02      	cmp	r3, #2
 800686a:	d901      	bls.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e0b0      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006870:	4b5b      	ldr	r3, [pc, #364]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1f0      	bne.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	019a      	lsls	r2, r3, #6
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	071b      	lsls	r3, r3, #28
 8006888:	4955      	ldr	r1, [pc, #340]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800688a:	4313      	orrs	r3, r2
 800688c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006890:	4b52      	ldr	r3, [pc, #328]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006892:	2201      	movs	r2, #1
 8006894:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006896:	f7fd fd23 	bl	80042e0 <HAL_GetTick>
 800689a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800689c:	e008      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800689e:	f7fd fd1f 	bl	80042e0 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d901      	bls.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e090      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068b0:	4b4b      	ldr	r3, [pc, #300]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0f0      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 8083 	beq.w	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80068ca:	2300      	movs	r3, #0
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	4b44      	ldr	r3, [pc, #272]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d2:	4a43      	ldr	r2, [pc, #268]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068d8:	6413      	str	r3, [r2, #64]	; 0x40
 80068da:	4b41      	ldr	r3, [pc, #260]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80068e6:	4b3f      	ldr	r3, [pc, #252]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a3e      	ldr	r2, [pc, #248]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80068ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068f2:	f7fd fcf5 	bl	80042e0 <HAL_GetTick>
 80068f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068f8:	e008      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068fa:	f7fd fcf1 	bl	80042e0 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d901      	bls.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e062      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800690c:	4b35      	ldr	r3, [pc, #212]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0f0      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006918:	4b31      	ldr	r3, [pc, #196]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800691a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006920:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d02f      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	429a      	cmp	r2, r3
 8006934:	d028      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006936:	4b2a      	ldr	r3, [pc, #168]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800693e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006940:	4b29      	ldr	r3, [pc, #164]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006942:	2201      	movs	r2, #1
 8006944:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006946:	4b28      	ldr	r3, [pc, #160]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006948:	2200      	movs	r2, #0
 800694a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800694c:	4a24      	ldr	r2, [pc, #144]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006952:	4b23      	ldr	r3, [pc, #140]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b01      	cmp	r3, #1
 800695c:	d114      	bne.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800695e:	f7fd fcbf 	bl	80042e0 <HAL_GetTick>
 8006962:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006964:	e00a      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006966:	f7fd fcbb 	bl	80042e0 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	f241 3288 	movw	r2, #5000	; 0x1388
 8006974:	4293      	cmp	r3, r2
 8006976:	d901      	bls.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e02a      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800697c:	4b18      	ldr	r3, [pc, #96]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800697e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b00      	cmp	r3, #0
 8006986:	d0ee      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006990:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006994:	d10d      	bne.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006996:	4b12      	ldr	r3, [pc, #72]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80069a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069aa:	490d      	ldr	r1, [pc, #52]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	608b      	str	r3, [r1, #8]
 80069b0:	e005      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x196>
 80069b2:	4b0b      	ldr	r3, [pc, #44]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	4a0a      	ldr	r2, [pc, #40]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80069bc:	6093      	str	r3, [r2, #8]
 80069be:	4b08      	ldr	r3, [pc, #32]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069ca:	4905      	ldr	r1, [pc, #20]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3718      	adds	r7, #24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	42470068 	.word	0x42470068
 80069e0:	40023800 	.word	0x40023800
 80069e4:	40007000 	.word	0x40007000
 80069e8:	42470e40 	.word	0x42470e40

080069ec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e083      	b.n	8006b06 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	7f5b      	ldrb	r3, [r3, #29]
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d105      	bne.n	8006a14 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7fc fa1e 	bl	8002e50 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2202      	movs	r2, #2
 8006a18:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	22ca      	movs	r2, #202	; 0xca
 8006a20:	625a      	str	r2, [r3, #36]	; 0x24
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2253      	movs	r2, #83	; 0x53
 8006a28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f9fb 	bl	8006e26 <RTC_EnterInitMode>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d008      	beq.n	8006a48 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	22ff      	movs	r2, #255	; 0xff
 8006a3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2204      	movs	r2, #4
 8006a42:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e05e      	b.n	8006b06 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	6812      	ldr	r2, [r2, #0]
 8006a52:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a5a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6899      	ldr	r1, [r3, #8]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	431a      	orrs	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	68d2      	ldr	r2, [r2, #12]
 8006a82:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6919      	ldr	r1, [r3, #16]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	041a      	lsls	r2, r3, #16
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006aa6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 0320 	and.w	r3, r3, #32
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10e      	bne.n	8006ad4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f98d 	bl	8006dd6 <HAL_RTC_WaitForSynchro>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d008      	beq.n	8006ad4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	22ff      	movs	r2, #255	; 0xff
 8006ac8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2204      	movs	r2, #4
 8006ace:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e018      	b.n	8006b06 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ae2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699a      	ldr	r2, [r3, #24]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	22ff      	movs	r2, #255	; 0xff
 8006afc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006b04:	2300      	movs	r3, #0
  }
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006b0e:	b590      	push	{r4, r7, lr}
 8006b10:	b087      	sub	sp, #28
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	60f8      	str	r0, [r7, #12]
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	7f1b      	ldrb	r3, [r3, #28]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d101      	bne.n	8006b2a <HAL_RTC_SetTime+0x1c>
 8006b26:	2302      	movs	r3, #2
 8006b28:	e0aa      	b.n	8006c80 <HAL_RTC_SetTime+0x172>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2202      	movs	r2, #2
 8006b34:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d126      	bne.n	8006b8a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d102      	bne.n	8006b50 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 f992 	bl	8006e7e <RTC_ByteToBcd2>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	785b      	ldrb	r3, [r3, #1]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 f98b 	bl	8006e7e <RTC_ByteToBcd2>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006b6c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	789b      	ldrb	r3, [r3, #2]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 f983 	bl	8006e7e <RTC_ByteToBcd2>
 8006b78:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006b7a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	78db      	ldrb	r3, [r3, #3]
 8006b82:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006b84:	4313      	orrs	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]
 8006b88:	e018      	b.n	8006bbc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d102      	bne.n	8006b9e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	785b      	ldrb	r3, [r3, #1]
 8006ba8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006baa:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006bb0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	78db      	ldrb	r3, [r3, #3]
 8006bb6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	22ca      	movs	r2, #202	; 0xca
 8006bc2:	625a      	str	r2, [r3, #36]	; 0x24
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2253      	movs	r2, #83	; 0x53
 8006bca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 f92a 	bl	8006e26 <RTC_EnterInitMode>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00b      	beq.n	8006bf0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	22ff      	movs	r2, #255	; 0xff
 8006bde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2204      	movs	r2, #4
 8006be4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e047      	b.n	8006c80 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006bfa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006bfe:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689a      	ldr	r2, [r3, #8]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c0e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6899      	ldr	r1, [r3, #8]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	68da      	ldr	r2, [r3, #12]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68da      	ldr	r2, [r3, #12]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c36:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f003 0320 	and.w	r3, r3, #32
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d111      	bne.n	8006c6a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 f8c5 	bl	8006dd6 <HAL_RTC_WaitForSynchro>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00b      	beq.n	8006c6a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	22ff      	movs	r2, #255	; 0xff
 8006c58:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2204      	movs	r2, #4
 8006c5e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e00a      	b.n	8006c80 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	22ff      	movs	r2, #255	; 0xff
 8006c70:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2201      	movs	r2, #1
 8006c76:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
  }
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	371c      	adds	r7, #28
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd90      	pop	{r4, r7, pc}

08006c88 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006c88:	b590      	push	{r4, r7, lr}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006c94:	2300      	movs	r3, #0
 8006c96:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	7f1b      	ldrb	r3, [r3, #28]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d101      	bne.n	8006ca4 <HAL_RTC_SetDate+0x1c>
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	e094      	b.n	8006dce <HAL_RTC_SetDate+0x146>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2202      	movs	r2, #2
 8006cae:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10e      	bne.n	8006cd4 <HAL_RTC_SetDate+0x4c>
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	785b      	ldrb	r3, [r3, #1]
 8006cba:	f003 0310 	and.w	r3, r3, #16
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d008      	beq.n	8006cd4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	785b      	ldrb	r3, [r3, #1]
 8006cc6:	f023 0310 	bic.w	r3, r3, #16
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	330a      	adds	r3, #10
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d11c      	bne.n	8006d14 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	78db      	ldrb	r3, [r3, #3]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 f8cd 	bl	8006e7e <RTC_ByteToBcd2>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	785b      	ldrb	r3, [r3, #1]
 8006cec:	4618      	mov	r0, r3
 8006cee:	f000 f8c6 	bl	8006e7e <RTC_ByteToBcd2>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006cf6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	789b      	ldrb	r3, [r3, #2]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 f8be 	bl	8006e7e <RTC_ByteToBcd2>
 8006d02:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006d04:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]
 8006d12:	e00e      	b.n	8006d32 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	78db      	ldrb	r3, [r3, #3]
 8006d18:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	785b      	ldrb	r3, [r3, #1]
 8006d1e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006d20:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006d26:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	22ca      	movs	r2, #202	; 0xca
 8006d38:	625a      	str	r2, [r3, #36]	; 0x24
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2253      	movs	r2, #83	; 0x53
 8006d40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 f86f 	bl	8006e26 <RTC_EnterInitMode>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00b      	beq.n	8006d66 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	22ff      	movs	r2, #255	; 0xff
 8006d54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2204      	movs	r2, #4
 8006d5a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e033      	b.n	8006dce <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d70:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d74:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d84:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f003 0320 	and.w	r3, r3, #32
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d111      	bne.n	8006db8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 f81e 	bl	8006dd6 <HAL_RTC_WaitForSynchro>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00b      	beq.n	8006db8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	22ff      	movs	r2, #255	; 0xff
 8006da6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2204      	movs	r2, #4
 8006dac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e00a      	b.n	8006dce <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	22ff      	movs	r2, #255	; 0xff
 8006dbe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
  }
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	371c      	adds	r7, #28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd90      	pop	{r4, r7, pc}

08006dd6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b084      	sub	sp, #16
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68da      	ldr	r2, [r3, #12]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006df0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006df2:	f7fd fa75 	bl	80042e0 <HAL_GetTick>
 8006df6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006df8:	e009      	b.n	8006e0e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006dfa:	f7fd fa71 	bl	80042e0 <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e08:	d901      	bls.n	8006e0e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e007      	b.n	8006e1e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f003 0320 	and.w	r3, r3, #32
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d0ee      	beq.n	8006dfa <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d119      	bne.n	8006e74 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f04f 32ff 	mov.w	r2, #4294967295
 8006e48:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e4a:	f7fd fa49 	bl	80042e0 <HAL_GetTick>
 8006e4e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006e50:	e009      	b.n	8006e66 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006e52:	f7fd fa45 	bl	80042e0 <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e60:	d901      	bls.n	8006e66 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e007      	b.n	8006e76 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d0ee      	beq.n	8006e52 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b085      	sub	sp, #20
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	4603      	mov	r3, r0
 8006e86:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8006e8c:	e005      	b.n	8006e9a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3301      	adds	r3, #1
 8006e92:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006e94:	79fb      	ldrb	r3, [r7, #7]
 8006e96:	3b0a      	subs	r3, #10
 8006e98:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
 8006e9c:	2b09      	cmp	r3, #9
 8006e9e:	d8f6      	bhi.n	8006e8e <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	011b      	lsls	r3, r3, #4
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	79fb      	ldrb	r3, [r7, #7]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	b2db      	uxtb	r3, r3
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b082      	sub	sp, #8
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e056      	b.n	8006f7a <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d106      	bne.n	8006eec <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7fc f830 	bl	8002f4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	431a      	orrs	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	ea42 0103 	orr.w	r1, r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	0c1b      	lsrs	r3, r3, #16
 8006f4a:	f003 0104 	and.w	r1, r3, #4
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	69da      	ldr	r2, [r3, #28]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
 8006f90:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d101      	bne.n	8006fa4 <HAL_SPI_TransmitReceive_IT+0x20>
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	e075      	b.n	8007090 <HAL_SPI_TransmitReceive_IT+0x10c>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fb2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006fba:	7dbb      	ldrb	r3, [r7, #22]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d00d      	beq.n	8006fdc <HAL_SPI_TransmitReceive_IT+0x58>
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fc6:	d106      	bne.n	8006fd6 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d102      	bne.n	8006fd6 <HAL_SPI_TransmitReceive_IT+0x52>
 8006fd0:	7dbb      	ldrb	r3, [r7, #22]
 8006fd2:	2b04      	cmp	r3, #4
 8006fd4:	d002      	beq.n	8006fdc <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fda:	e054      	b.n	8007086 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d005      	beq.n	8006fee <HAL_SPI_TransmitReceive_IT+0x6a>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <HAL_SPI_TransmitReceive_IT+0x6a>
 8006fe8:	887b      	ldrh	r3, [r7, #2]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d102      	bne.n	8006ff4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ff2:	e048      	b.n	8007086 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d003      	beq.n	8007008 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2205      	movs	r2, #5
 8007004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	887a      	ldrh	r2, [r7, #2]
 8007018:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	887a      	ldrh	r2, [r7, #2]
 800701e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	887a      	ldrh	r2, [r7, #2]
 800702a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	887a      	ldrh	r2, [r7, #2]
 8007030:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d006      	beq.n	8007048 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	4a17      	ldr	r2, [pc, #92]	; (800709c <HAL_SPI_TransmitReceive_IT+0x118>)
 800703e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4a17      	ldr	r2, [pc, #92]	; (80070a0 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8007044:	645a      	str	r2, [r3, #68]	; 0x44
 8007046:	e005      	b.n	8007054 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4a16      	ldr	r2, [pc, #88]	; (80070a4 <HAL_SPI_TransmitReceive_IT+0x120>)
 800704c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	4a15      	ldr	r2, [pc, #84]	; (80070a8 <HAL_SPI_TransmitReceive_IT+0x124>)
 8007052:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685a      	ldr	r2, [r3, #4]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8007062:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706e:	2b40      	cmp	r3, #64	; 0x40
 8007070:	d008      	beq.n	8007084 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	e000      	b.n	8007086 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8007084:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800708e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007090:	4618      	mov	r0, r3
 8007092:	371c      	adds	r7, #28
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	080073c1 	.word	0x080073c1
 80070a0:	08007421 	.word	0x08007421
 80070a4:	080072fd 	.word	0x080072fd
 80070a8:	08007361 	.word	0x08007361

080070ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b088      	sub	sp, #32
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	099b      	lsrs	r3, r3, #6
 80070c8:	f003 0301 	and.w	r3, r3, #1
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10f      	bne.n	80070f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00a      	beq.n	80070f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	099b      	lsrs	r3, r3, #6
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d004      	beq.n	80070f0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	4798      	blx	r3
    return;
 80070ee:	e0d7      	b.n	80072a0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	085b      	lsrs	r3, r3, #1
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00a      	beq.n	8007112 <HAL_SPI_IRQHandler+0x66>
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	09db      	lsrs	r3, r3, #7
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b00      	cmp	r3, #0
 8007106:	d004      	beq.n	8007112 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	4798      	blx	r3
    return;
 8007110:	e0c6      	b.n	80072a0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	095b      	lsrs	r3, r3, #5
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10c      	bne.n	8007138 <HAL_SPI_IRQHandler+0x8c>
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	099b      	lsrs	r3, r3, #6
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d106      	bne.n	8007138 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	0a1b      	lsrs	r3, r3, #8
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	2b00      	cmp	r3, #0
 8007134:	f000 80b4 	beq.w	80072a0 <HAL_SPI_IRQHandler+0x1f4>
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	095b      	lsrs	r3, r3, #5
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 80ad 	beq.w	80072a0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	099b      	lsrs	r3, r3, #6
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	2b00      	cmp	r3, #0
 8007150:	d023      	beq.n	800719a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b03      	cmp	r3, #3
 800715c:	d011      	beq.n	8007182 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007162:	f043 0204 	orr.w	r2, r3, #4
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800716a:	2300      	movs	r3, #0
 800716c:	617b      	str	r3, [r7, #20]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	617b      	str	r3, [r7, #20]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	617b      	str	r3, [r7, #20]
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	e00b      	b.n	800719a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007182:	2300      	movs	r3, #0
 8007184:	613b      	str	r3, [r7, #16]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	613b      	str	r3, [r7, #16]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	613b      	str	r3, [r7, #16]
 8007196:	693b      	ldr	r3, [r7, #16]
        return;
 8007198:	e082      	b.n	80072a0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	095b      	lsrs	r3, r3, #5
 800719e:	f003 0301 	and.w	r3, r3, #1
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d014      	beq.n	80071d0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071aa:	f043 0201 	orr.w	r2, r3, #1
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80071b2:	2300      	movs	r3, #0
 80071b4:	60fb      	str	r3, [r7, #12]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	0a1b      	lsrs	r3, r3, #8
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00c      	beq.n	80071f6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e0:	f043 0208 	orr.w	r2, r3, #8
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80071e8:	2300      	movs	r3, #0
 80071ea:	60bb      	str	r3, [r7, #8]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	60bb      	str	r3, [r7, #8]
 80071f4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d04f      	beq.n	800729e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800720c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	2b00      	cmp	r3, #0
 800721e:	d104      	bne.n	800722a <HAL_SPI_IRQHandler+0x17e>
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b00      	cmp	r3, #0
 8007228:	d034      	beq.n	8007294 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f022 0203 	bic.w	r2, r2, #3
 8007238:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800723e:	2b00      	cmp	r3, #0
 8007240:	d011      	beq.n	8007266 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007246:	4a18      	ldr	r2, [pc, #96]	; (80072a8 <HAL_SPI_IRQHandler+0x1fc>)
 8007248:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800724e:	4618      	mov	r0, r3
 8007250:	f7fd fbba 	bl	80049c8 <HAL_DMA_Abort_IT>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d005      	beq.n	8007266 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800726a:	2b00      	cmp	r3, #0
 800726c:	d016      	beq.n	800729c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007272:	4a0d      	ldr	r2, [pc, #52]	; (80072a8 <HAL_SPI_IRQHandler+0x1fc>)
 8007274:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800727a:	4618      	mov	r0, r3
 800727c:	f7fd fba4 	bl	80049c8 <HAL_DMA_Abort_IT>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00a      	beq.n	800729c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007292:	e003      	b.n	800729c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f813 	bl	80072c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800729a:	e000      	b.n	800729e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800729c:	bf00      	nop
    return;
 800729e:	bf00      	nop
  }
}
 80072a0:	3720      	adds	r7, #32
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	080072d5 	.word	0x080072d5

080072ac <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f7ff ffe6 	bl	80072c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80072f4:	bf00      	nop
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f103 020c 	add.w	r2, r3, #12
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007310:	7812      	ldrb	r2, [r2, #0]
 8007312:	b2d2      	uxtb	r2, r2
 8007314:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731a:	1c5a      	adds	r2, r3, #1
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007324:	b29b      	uxth	r3, r3
 8007326:	3b01      	subs	r3, #1
 8007328:	b29a      	uxth	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007332:	b29b      	uxth	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10f      	bne.n	8007358 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	685a      	ldr	r2, [r3, #4]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007346:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800734c:	b29b      	uxth	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d102      	bne.n	8007358 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f940 	bl	80075d8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007358:	bf00      	nop
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	330c      	adds	r3, #12
 8007372:	7812      	ldrb	r2, [r2, #0]
 8007374:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737a:	1c5a      	adds	r2, r3, #1
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007384:	b29b      	uxth	r3, r3
 8007386:	3b01      	subs	r3, #1
 8007388:	b29a      	uxth	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007392:	b29b      	uxth	r3, r3
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10f      	bne.n	80073b8 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073a6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d102      	bne.n	80073b8 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f910 	bl	80075d8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80073b8:	bf00      	nop
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d2:	b292      	uxth	r2, r2
 80073d4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073da:	1c9a      	adds	r2, r3, #2
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	3b01      	subs	r3, #1
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10f      	bne.n	8007418 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007406:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800740c:	b29b      	uxth	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d102      	bne.n	8007418 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f8e0 	bl	80075d8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007418:	bf00      	nop
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742c:	881a      	ldrh	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007438:	1c9a      	adds	r2, r3, #2
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007442:	b29b      	uxth	r3, r3
 8007444:	3b01      	subs	r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007450:	b29b      	uxth	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10f      	bne.n	8007476 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007464:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800746a:	b29b      	uxth	r3, r3
 800746c:	2b00      	cmp	r3, #0
 800746e:	d102      	bne.n	8007476 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f8b1 	bl	80075d8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007476:	bf00      	nop
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b084      	sub	sp, #16
 8007482:	af00      	add	r7, sp, #0
 8007484:	60f8      	str	r0, [r7, #12]
 8007486:	60b9      	str	r1, [r7, #8]
 8007488:	603b      	str	r3, [r7, #0]
 800748a:	4613      	mov	r3, r2
 800748c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800748e:	e04c      	b.n	800752a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007496:	d048      	beq.n	800752a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007498:	f7fc ff22 	bl	80042e0 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d902      	bls.n	80074ae <SPI_WaitFlagStateUntilTimeout+0x30>
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d13d      	bne.n	800752a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074c6:	d111      	bne.n	80074ec <SPI_WaitFlagStateUntilTimeout+0x6e>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074d0:	d004      	beq.n	80074dc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074da:	d107      	bne.n	80074ec <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074f4:	d10f      	bne.n	8007516 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007514:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e00f      	b.n	800754a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689a      	ldr	r2, [r3, #8]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	4013      	ands	r3, r2
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	429a      	cmp	r2, r3
 8007538:	bf0c      	ite	eq
 800753a:	2301      	moveq	r3, #1
 800753c:	2300      	movne	r3, #0
 800753e:	b2db      	uxtb	r3, r3
 8007540:	461a      	mov	r2, r3
 8007542:	79fb      	ldrb	r3, [r7, #7]
 8007544:	429a      	cmp	r2, r3
 8007546:	d1a3      	bne.n	8007490 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
	...

08007554 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b088      	sub	sp, #32
 8007558:	af02      	add	r7, sp, #8
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007560:	4b1b      	ldr	r3, [pc, #108]	; (80075d0 <SPI_EndRxTxTransaction+0x7c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a1b      	ldr	r2, [pc, #108]	; (80075d4 <SPI_EndRxTxTransaction+0x80>)
 8007566:	fba2 2303 	umull	r2, r3, r2, r3
 800756a:	0d5b      	lsrs	r3, r3, #21
 800756c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007570:	fb02 f303 	mul.w	r3, r2, r3
 8007574:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800757e:	d112      	bne.n	80075a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2200      	movs	r2, #0
 8007588:	2180      	movs	r1, #128	; 0x80
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f7ff ff77 	bl	800747e <SPI_WaitFlagStateUntilTimeout>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d016      	beq.n	80075c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759a:	f043 0220 	orr.w	r2, r3, #32
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e00f      	b.n	80075c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00a      	beq.n	80075c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075bc:	2b80      	cmp	r3, #128	; 0x80
 80075be:	d0f2      	beq.n	80075a6 <SPI_EndRxTxTransaction+0x52>
 80075c0:	e000      	b.n	80075c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80075c2:	bf00      	nop
  }

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	2000000c 	.word	0x2000000c
 80075d4:	165e9f81 	.word	0x165e9f81

080075d8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80075e0:	4b35      	ldr	r3, [pc, #212]	; (80076b8 <SPI_CloseRxTx_ISR+0xe0>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a35      	ldr	r2, [pc, #212]	; (80076bc <SPI_CloseRxTx_ISR+0xe4>)
 80075e6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ea:	0a5b      	lsrs	r3, r3, #9
 80075ec:	2264      	movs	r2, #100	; 0x64
 80075ee:	fb02 f303 	mul.w	r3, r2, r3
 80075f2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80075f4:	f7fc fe74 	bl	80042e0 <HAL_GetTick>
 80075f8:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0220 	bic.w	r2, r2, #32
 8007608:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d106      	bne.n	800761e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007614:	f043 0220 	orr.w	r2, r3, #32
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800761c:	e009      	b.n	8007632 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	3b01      	subs	r3, #1
 8007622:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b00      	cmp	r3, #0
 8007630:	d0eb      	beq.n	800760a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	2164      	movs	r1, #100	; 0x64
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7ff ff8c 	bl	8007554 <SPI_EndRxTxTransaction>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d005      	beq.n	800764e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007646:	f043 0220 	orr.w	r2, r3, #32
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10a      	bne.n	800766c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007656:	2300      	movs	r3, #0
 8007658:	60fb      	str	r3, [r7, #12]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	60fb      	str	r3, [r7, #12]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	60fb      	str	r3, [r7, #12]
 800766a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007670:	2b00      	cmp	r3, #0
 8007672:	d115      	bne.n	80076a0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b04      	cmp	r3, #4
 800767e:	d107      	bne.n	8007690 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f7ff fe0f 	bl	80072ac <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800768e:	e00e      	b.n	80076ae <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f7fb fb47 	bl	8002d2c <HAL_SPI_TxRxCpltCallback>
}
 800769e:	e006      	b.n	80076ae <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7ff fe09 	bl	80072c0 <HAL_SPI_ErrorCallback>
}
 80076ae:	bf00      	nop
 80076b0:	3718      	adds	r7, #24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	2000000c 	.word	0x2000000c
 80076bc:	057619f1 	.word	0x057619f1

080076c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d101      	bne.n	80076d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e01d      	b.n	800770e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d106      	bne.n	80076ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f815 	bl	8007716 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	3304      	adds	r3, #4
 80076fc:	4619      	mov	r1, r3
 80076fe:	4610      	mov	r0, r2
 8007700:	f000 fa58 	bl	8007bb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800772a:	b480      	push	{r7}
 800772c:	b085      	sub	sp, #20
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68da      	ldr	r2, [r3, #12]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f042 0201 	orr.w	r2, r2, #1
 8007740:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f003 0307 	and.w	r3, r3, #7
 800774c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2b06      	cmp	r3, #6
 8007752:	d007      	beq.n	8007764 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f042 0201 	orr.w	r2, r2, #1
 8007762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b082      	sub	sp, #8
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d101      	bne.n	8007784 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e01d      	b.n	80077c0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b00      	cmp	r3, #0
 800778e:	d106      	bne.n	800779e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7fc fb29 	bl	8003df0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2202      	movs	r2, #2
 80077a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	3304      	adds	r3, #4
 80077ae:	4619      	mov	r1, r3
 80077b0:	4610      	mov	r0, r2
 80077b2:	f000 f9ff 	bl	8007bb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d122      	bne.n	8007824 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f003 0302 	and.w	r3, r3, #2
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d11b      	bne.n	8007824 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f06f 0202 	mvn.w	r2, #2
 80077f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	f003 0303 	and.w	r3, r3, #3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f9b4 	bl	8007b78 <HAL_TIM_IC_CaptureCallback>
 8007810:	e005      	b.n	800781e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f9a6 	bl	8007b64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f9b7 	bl	8007b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	f003 0304 	and.w	r3, r3, #4
 800782e:	2b04      	cmp	r3, #4
 8007830:	d122      	bne.n	8007878 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b04      	cmp	r3, #4
 800783e:	d11b      	bne.n	8007878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f06f 0204 	mvn.w	r2, #4
 8007848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2202      	movs	r2, #2
 800784e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800785a:	2b00      	cmp	r3, #0
 800785c:	d003      	beq.n	8007866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f98a 	bl	8007b78 <HAL_TIM_IC_CaptureCallback>
 8007864:	e005      	b.n	8007872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f97c 	bl	8007b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f98d 	bl	8007b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	f003 0308 	and.w	r3, r3, #8
 8007882:	2b08      	cmp	r3, #8
 8007884:	d122      	bne.n	80078cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f003 0308 	and.w	r3, r3, #8
 8007890:	2b08      	cmp	r3, #8
 8007892:	d11b      	bne.n	80078cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f06f 0208 	mvn.w	r2, #8
 800789c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2204      	movs	r2, #4
 80078a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	f003 0303 	and.w	r3, r3, #3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f960 	bl	8007b78 <HAL_TIM_IC_CaptureCallback>
 80078b8:	e005      	b.n	80078c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f952 	bl	8007b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f963 	bl	8007b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	f003 0310 	and.w	r3, r3, #16
 80078d6:	2b10      	cmp	r3, #16
 80078d8:	d122      	bne.n	8007920 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	f003 0310 	and.w	r3, r3, #16
 80078e4:	2b10      	cmp	r3, #16
 80078e6:	d11b      	bne.n	8007920 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f06f 0210 	mvn.w	r2, #16
 80078f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2208      	movs	r2, #8
 80078f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007902:	2b00      	cmp	r3, #0
 8007904:	d003      	beq.n	800790e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f936 	bl	8007b78 <HAL_TIM_IC_CaptureCallback>
 800790c:	e005      	b.n	800791a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f928 	bl	8007b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f939 	bl	8007b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b01      	cmp	r3, #1
 800792c:	d10e      	bne.n	800794c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	2b01      	cmp	r3, #1
 800793a:	d107      	bne.n	800794c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f06f 0201 	mvn.w	r2, #1
 8007944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7fb fa0e 	bl	8002d68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007956:	2b80      	cmp	r3, #128	; 0x80
 8007958:	d10e      	bne.n	8007978 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007964:	2b80      	cmp	r3, #128	; 0x80
 8007966:	d107      	bne.n	8007978 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fbf4 	bl	8008160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007982:	2b40      	cmp	r3, #64	; 0x40
 8007984:	d10e      	bne.n	80079a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007990:	2b40      	cmp	r3, #64	; 0x40
 8007992:	d107      	bne.n	80079a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800799c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f8fe 	bl	8007ba0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b20      	cmp	r3, #32
 80079b0:	d10e      	bne.n	80079d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	f003 0320 	and.w	r3, r3, #32
 80079bc:	2b20      	cmp	r3, #32
 80079be:	d107      	bne.n	80079d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f06f 0220 	mvn.w	r2, #32
 80079c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fbbe 	bl	800814c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079d0:	bf00      	nop
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d101      	bne.n	80079f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80079ee:	2302      	movs	r3, #2
 80079f0:	e0b4      	b.n	8007b5c <HAL_TIM_PWM_ConfigChannel+0x184>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2202      	movs	r2, #2
 80079fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b0c      	cmp	r3, #12
 8007a06:	f200 809f 	bhi.w	8007b48 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007a0a:	a201      	add	r2, pc, #4	; (adr r2, 8007a10 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a10:	08007a45 	.word	0x08007a45
 8007a14:	08007b49 	.word	0x08007b49
 8007a18:	08007b49 	.word	0x08007b49
 8007a1c:	08007b49 	.word	0x08007b49
 8007a20:	08007a85 	.word	0x08007a85
 8007a24:	08007b49 	.word	0x08007b49
 8007a28:	08007b49 	.word	0x08007b49
 8007a2c:	08007b49 	.word	0x08007b49
 8007a30:	08007ac7 	.word	0x08007ac7
 8007a34:	08007b49 	.word	0x08007b49
 8007a38:	08007b49 	.word	0x08007b49
 8007a3c:	08007b49 	.word	0x08007b49
 8007a40:	08007b07 	.word	0x08007b07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68b9      	ldr	r1, [r7, #8]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 f952 	bl	8007cf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699a      	ldr	r2, [r3, #24]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f042 0208 	orr.w	r2, r2, #8
 8007a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	699a      	ldr	r2, [r3, #24]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f022 0204 	bic.w	r2, r2, #4
 8007a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6999      	ldr	r1, [r3, #24]
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	691a      	ldr	r2, [r3, #16]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	619a      	str	r2, [r3, #24]
      break;
 8007a82:	e062      	b.n	8007b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68b9      	ldr	r1, [r7, #8]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 f9a2 	bl	8007dd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	699a      	ldr	r2, [r3, #24]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	699a      	ldr	r2, [r3, #24]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	6999      	ldr	r1, [r3, #24]
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	021a      	lsls	r2, r3, #8
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	619a      	str	r2, [r3, #24]
      break;
 8007ac4:	e041      	b.n	8007b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68b9      	ldr	r1, [r7, #8]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 f9f7 	bl	8007ec0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	69da      	ldr	r2, [r3, #28]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f042 0208 	orr.w	r2, r2, #8
 8007ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69da      	ldr	r2, [r3, #28]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 0204 	bic.w	r2, r2, #4
 8007af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69d9      	ldr	r1, [r3, #28]
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	691a      	ldr	r2, [r3, #16]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	430a      	orrs	r2, r1
 8007b02:	61da      	str	r2, [r3, #28]
      break;
 8007b04:	e021      	b.n	8007b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68b9      	ldr	r1, [r7, #8]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 fa4b 	bl	8007fa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69da      	ldr	r2, [r3, #28]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	69da      	ldr	r2, [r3, #28]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	69d9      	ldr	r1, [r3, #28]
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	021a      	lsls	r2, r3, #8
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	61da      	str	r2, [r3, #28]
      break;
 8007b46:	e000      	b.n	8007b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007b48:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a40      	ldr	r2, [pc, #256]	; (8007cc8 <TIM_Base_SetConfig+0x114>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d013      	beq.n	8007bf4 <TIM_Base_SetConfig+0x40>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bd2:	d00f      	beq.n	8007bf4 <TIM_Base_SetConfig+0x40>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a3d      	ldr	r2, [pc, #244]	; (8007ccc <TIM_Base_SetConfig+0x118>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d00b      	beq.n	8007bf4 <TIM_Base_SetConfig+0x40>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a3c      	ldr	r2, [pc, #240]	; (8007cd0 <TIM_Base_SetConfig+0x11c>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d007      	beq.n	8007bf4 <TIM_Base_SetConfig+0x40>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a3b      	ldr	r2, [pc, #236]	; (8007cd4 <TIM_Base_SetConfig+0x120>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d003      	beq.n	8007bf4 <TIM_Base_SetConfig+0x40>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a3a      	ldr	r2, [pc, #232]	; (8007cd8 <TIM_Base_SetConfig+0x124>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d108      	bne.n	8007c06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a2f      	ldr	r2, [pc, #188]	; (8007cc8 <TIM_Base_SetConfig+0x114>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d02b      	beq.n	8007c66 <TIM_Base_SetConfig+0xb2>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c14:	d027      	beq.n	8007c66 <TIM_Base_SetConfig+0xb2>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a2c      	ldr	r2, [pc, #176]	; (8007ccc <TIM_Base_SetConfig+0x118>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d023      	beq.n	8007c66 <TIM_Base_SetConfig+0xb2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a2b      	ldr	r2, [pc, #172]	; (8007cd0 <TIM_Base_SetConfig+0x11c>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d01f      	beq.n	8007c66 <TIM_Base_SetConfig+0xb2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a2a      	ldr	r2, [pc, #168]	; (8007cd4 <TIM_Base_SetConfig+0x120>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d01b      	beq.n	8007c66 <TIM_Base_SetConfig+0xb2>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a29      	ldr	r2, [pc, #164]	; (8007cd8 <TIM_Base_SetConfig+0x124>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d017      	beq.n	8007c66 <TIM_Base_SetConfig+0xb2>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a28      	ldr	r2, [pc, #160]	; (8007cdc <TIM_Base_SetConfig+0x128>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d013      	beq.n	8007c66 <TIM_Base_SetConfig+0xb2>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a27      	ldr	r2, [pc, #156]	; (8007ce0 <TIM_Base_SetConfig+0x12c>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d00f      	beq.n	8007c66 <TIM_Base_SetConfig+0xb2>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a26      	ldr	r2, [pc, #152]	; (8007ce4 <TIM_Base_SetConfig+0x130>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d00b      	beq.n	8007c66 <TIM_Base_SetConfig+0xb2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a25      	ldr	r2, [pc, #148]	; (8007ce8 <TIM_Base_SetConfig+0x134>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d007      	beq.n	8007c66 <TIM_Base_SetConfig+0xb2>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a24      	ldr	r2, [pc, #144]	; (8007cec <TIM_Base_SetConfig+0x138>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d003      	beq.n	8007c66 <TIM_Base_SetConfig+0xb2>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a23      	ldr	r2, [pc, #140]	; (8007cf0 <TIM_Base_SetConfig+0x13c>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d108      	bne.n	8007c78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	689a      	ldr	r2, [r3, #8]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a0a      	ldr	r2, [pc, #40]	; (8007cc8 <TIM_Base_SetConfig+0x114>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d003      	beq.n	8007cac <TIM_Base_SetConfig+0xf8>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a0c      	ldr	r2, [pc, #48]	; (8007cd8 <TIM_Base_SetConfig+0x124>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d103      	bne.n	8007cb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	691a      	ldr	r2, [r3, #16]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	615a      	str	r2, [r3, #20]
}
 8007cba:	bf00      	nop
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	40010000 	.word	0x40010000
 8007ccc:	40000400 	.word	0x40000400
 8007cd0:	40000800 	.word	0x40000800
 8007cd4:	40000c00 	.word	0x40000c00
 8007cd8:	40010400 	.word	0x40010400
 8007cdc:	40014000 	.word	0x40014000
 8007ce0:	40014400 	.word	0x40014400
 8007ce4:	40014800 	.word	0x40014800
 8007ce8:	40001800 	.word	0x40001800
 8007cec:	40001c00 	.word	0x40001c00
 8007cf0:	40002000 	.word	0x40002000

08007cf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	f023 0201 	bic.w	r2, r3, #1
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f023 0303 	bic.w	r3, r3, #3
 8007d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	f023 0302 	bic.w	r3, r3, #2
 8007d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a20      	ldr	r2, [pc, #128]	; (8007dcc <TIM_OC1_SetConfig+0xd8>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d003      	beq.n	8007d58 <TIM_OC1_SetConfig+0x64>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a1f      	ldr	r2, [pc, #124]	; (8007dd0 <TIM_OC1_SetConfig+0xdc>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d10c      	bne.n	8007d72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f023 0308 	bic.w	r3, r3, #8
 8007d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f023 0304 	bic.w	r3, r3, #4
 8007d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a15      	ldr	r2, [pc, #84]	; (8007dcc <TIM_OC1_SetConfig+0xd8>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d003      	beq.n	8007d82 <TIM_OC1_SetConfig+0x8e>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a14      	ldr	r2, [pc, #80]	; (8007dd0 <TIM_OC1_SetConfig+0xdc>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d111      	bne.n	8007da6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	621a      	str	r2, [r3, #32]
}
 8007dc0:	bf00      	nop
 8007dc2:	371c      	adds	r7, #28
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	40010000 	.word	0x40010000
 8007dd0:	40010400 	.word	0x40010400

08007dd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b087      	sub	sp, #28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	f023 0210 	bic.w	r2, r3, #16
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	021b      	lsls	r3, r3, #8
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f023 0320 	bic.w	r3, r3, #32
 8007e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	011b      	lsls	r3, r3, #4
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a22      	ldr	r2, [pc, #136]	; (8007eb8 <TIM_OC2_SetConfig+0xe4>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d003      	beq.n	8007e3c <TIM_OC2_SetConfig+0x68>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a21      	ldr	r2, [pc, #132]	; (8007ebc <TIM_OC2_SetConfig+0xe8>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d10d      	bne.n	8007e58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	011b      	lsls	r3, r3, #4
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a17      	ldr	r2, [pc, #92]	; (8007eb8 <TIM_OC2_SetConfig+0xe4>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d003      	beq.n	8007e68 <TIM_OC2_SetConfig+0x94>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a16      	ldr	r2, [pc, #88]	; (8007ebc <TIM_OC2_SetConfig+0xe8>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d113      	bne.n	8007e90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	693a      	ldr	r2, [r7, #16]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	693a      	ldr	r2, [r7, #16]
 8007e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	621a      	str	r2, [r3, #32]
}
 8007eaa:	bf00      	nop
 8007eac:	371c      	adds	r7, #28
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	40010000 	.word	0x40010000
 8007ebc:	40010400 	.word	0x40010400

08007ec0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b087      	sub	sp, #28
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f023 0303 	bic.w	r3, r3, #3
 8007ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	021b      	lsls	r3, r3, #8
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a21      	ldr	r2, [pc, #132]	; (8007fa0 <TIM_OC3_SetConfig+0xe0>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d003      	beq.n	8007f26 <TIM_OC3_SetConfig+0x66>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a20      	ldr	r2, [pc, #128]	; (8007fa4 <TIM_OC3_SetConfig+0xe4>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d10d      	bne.n	8007f42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	021b      	lsls	r3, r3, #8
 8007f34:	697a      	ldr	r2, [r7, #20]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a16      	ldr	r2, [pc, #88]	; (8007fa0 <TIM_OC3_SetConfig+0xe0>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d003      	beq.n	8007f52 <TIM_OC3_SetConfig+0x92>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a15      	ldr	r2, [pc, #84]	; (8007fa4 <TIM_OC3_SetConfig+0xe4>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d113      	bne.n	8007f7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	011b      	lsls	r3, r3, #4
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	011b      	lsls	r3, r3, #4
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	685a      	ldr	r2, [r3, #4]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	621a      	str	r2, [r3, #32]
}
 8007f94:	bf00      	nop
 8007f96:	371c      	adds	r7, #28
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	40010000 	.word	0x40010000
 8007fa4:	40010400 	.word	0x40010400

08007fa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b087      	sub	sp, #28
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
 8007fb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a1b      	ldr	r3, [r3, #32]
 8007fc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	69db      	ldr	r3, [r3, #28]
 8007fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	021b      	lsls	r3, r3, #8
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	031b      	lsls	r3, r3, #12
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a12      	ldr	r2, [pc, #72]	; (800804c <TIM_OC4_SetConfig+0xa4>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d003      	beq.n	8008010 <TIM_OC4_SetConfig+0x68>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a11      	ldr	r2, [pc, #68]	; (8008050 <TIM_OC4_SetConfig+0xa8>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d109      	bne.n	8008024 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008016:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	695b      	ldr	r3, [r3, #20]
 800801c:	019b      	lsls	r3, r3, #6
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	4313      	orrs	r3, r2
 8008022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	685a      	ldr	r2, [r3, #4]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	621a      	str	r2, [r3, #32]
}
 800803e:	bf00      	nop
 8008040:	371c      	adds	r7, #28
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	40010000 	.word	0x40010000
 8008050:	40010400 	.word	0x40010400

08008054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008064:	2b01      	cmp	r3, #1
 8008066:	d101      	bne.n	800806c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008068:	2302      	movs	r3, #2
 800806a:	e05a      	b.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2202      	movs	r2, #2
 8008078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	4313      	orrs	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a21      	ldr	r2, [pc, #132]	; (8008130 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d022      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080b8:	d01d      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a1d      	ldr	r2, [pc, #116]	; (8008134 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d018      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a1b      	ldr	r2, [pc, #108]	; (8008138 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d013      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a1a      	ldr	r2, [pc, #104]	; (800813c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d00e      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a18      	ldr	r2, [pc, #96]	; (8008140 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d009      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a17      	ldr	r2, [pc, #92]	; (8008144 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d004      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a15      	ldr	r2, [pc, #84]	; (8008148 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d10c      	bne.n	8008110 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	4313      	orrs	r3, r2
 8008106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	40010000 	.word	0x40010000
 8008134:	40000400 	.word	0x40000400
 8008138:	40000800 	.word	0x40000800
 800813c:	40000c00 	.word	0x40000c00
 8008140:	40010400 	.word	0x40010400
 8008144:	40014000 	.word	0x40014000
 8008148:	40001800 	.word	0x40001800

0800814c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e03f      	b.n	8008206 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b00      	cmp	r3, #0
 8008190:	d106      	bne.n	80081a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7fb ff02 	bl	8003fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2224      	movs	r2, #36	; 0x24
 80081a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68da      	ldr	r2, [r3, #12]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f829 	bl	8008210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	691a      	ldr	r2, [r3, #16]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	695a      	ldr	r2, [r3, #20]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68da      	ldr	r2, [r3, #12]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2220      	movs	r2, #32
 80081f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2220      	movs	r2, #32
 8008200:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008214:	b0bd      	sub	sp, #244	; 0xf4
 8008216:	af00      	add	r7, sp, #0
 8008218:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800821c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800822c:	68d9      	ldr	r1, [r3, #12]
 800822e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	ea40 0301 	orr.w	r3, r0, r1
 8008238:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800823a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	431a      	orrs	r2, r3
 8008248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	431a      	orrs	r2, r3
 8008250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008254:	69db      	ldr	r3, [r3, #28]
 8008256:	4313      	orrs	r3, r2
 8008258:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800825c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008268:	f021 010c 	bic.w	r1, r1, #12
 800826c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008276:	430b      	orrs	r3, r1
 8008278:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800827a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	695b      	ldr	r3, [r3, #20]
 8008282:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800828a:	6999      	ldr	r1, [r3, #24]
 800828c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	ea40 0301 	orr.w	r3, r0, r1
 8008296:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800829c:	69db      	ldr	r3, [r3, #28]
 800829e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082a2:	f040 81a5 	bne.w	80085f0 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	4bcd      	ldr	r3, [pc, #820]	; (80085e4 <UART_SetConfig+0x3d4>)
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d006      	beq.n	80082c0 <UART_SetConfig+0xb0>
 80082b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	4bcb      	ldr	r3, [pc, #812]	; (80085e8 <UART_SetConfig+0x3d8>)
 80082ba:	429a      	cmp	r2, r3
 80082bc:	f040 80cb 	bne.w	8008456 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082c0:	f7fe fa6c 	bl	800679c <HAL_RCC_GetPCLK2Freq>
 80082c4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082cc:	461c      	mov	r4, r3
 80082ce:	f04f 0500 	mov.w	r5, #0
 80082d2:	4622      	mov	r2, r4
 80082d4:	462b      	mov	r3, r5
 80082d6:	1891      	adds	r1, r2, r2
 80082d8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80082dc:	415b      	adcs	r3, r3
 80082de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80082e2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80082e6:	1912      	adds	r2, r2, r4
 80082e8:	eb45 0303 	adc.w	r3, r5, r3
 80082ec:	f04f 0000 	mov.w	r0, #0
 80082f0:	f04f 0100 	mov.w	r1, #0
 80082f4:	00d9      	lsls	r1, r3, #3
 80082f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80082fa:	00d0      	lsls	r0, r2, #3
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	1911      	adds	r1, r2, r4
 8008302:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008306:	416b      	adcs	r3, r5
 8008308:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800830c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	461a      	mov	r2, r3
 8008314:	f04f 0300 	mov.w	r3, #0
 8008318:	1891      	adds	r1, r2, r2
 800831a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800831e:	415b      	adcs	r3, r3
 8008320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008324:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008328:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800832c:	f7f8 fc4c 	bl	8000bc8 <__aeabi_uldivmod>
 8008330:	4602      	mov	r2, r0
 8008332:	460b      	mov	r3, r1
 8008334:	4bad      	ldr	r3, [pc, #692]	; (80085ec <UART_SetConfig+0x3dc>)
 8008336:	fba3 2302 	umull	r2, r3, r3, r2
 800833a:	095b      	lsrs	r3, r3, #5
 800833c:	011e      	lsls	r6, r3, #4
 800833e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008342:	461c      	mov	r4, r3
 8008344:	f04f 0500 	mov.w	r5, #0
 8008348:	4622      	mov	r2, r4
 800834a:	462b      	mov	r3, r5
 800834c:	1891      	adds	r1, r2, r2
 800834e:	67b9      	str	r1, [r7, #120]	; 0x78
 8008350:	415b      	adcs	r3, r3
 8008352:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008354:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008358:	1912      	adds	r2, r2, r4
 800835a:	eb45 0303 	adc.w	r3, r5, r3
 800835e:	f04f 0000 	mov.w	r0, #0
 8008362:	f04f 0100 	mov.w	r1, #0
 8008366:	00d9      	lsls	r1, r3, #3
 8008368:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800836c:	00d0      	lsls	r0, r2, #3
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	1911      	adds	r1, r2, r4
 8008374:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008378:	416b      	adcs	r3, r5
 800837a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800837e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	461a      	mov	r2, r3
 8008386:	f04f 0300 	mov.w	r3, #0
 800838a:	1891      	adds	r1, r2, r2
 800838c:	6739      	str	r1, [r7, #112]	; 0x70
 800838e:	415b      	adcs	r3, r3
 8008390:	677b      	str	r3, [r7, #116]	; 0x74
 8008392:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008396:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800839a:	f7f8 fc15 	bl	8000bc8 <__aeabi_uldivmod>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4b92      	ldr	r3, [pc, #584]	; (80085ec <UART_SetConfig+0x3dc>)
 80083a4:	fba3 1302 	umull	r1, r3, r3, r2
 80083a8:	095b      	lsrs	r3, r3, #5
 80083aa:	2164      	movs	r1, #100	; 0x64
 80083ac:	fb01 f303 	mul.w	r3, r1, r3
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	00db      	lsls	r3, r3, #3
 80083b4:	3332      	adds	r3, #50	; 0x32
 80083b6:	4a8d      	ldr	r2, [pc, #564]	; (80085ec <UART_SetConfig+0x3dc>)
 80083b8:	fba2 2303 	umull	r2, r3, r2, r3
 80083bc:	095b      	lsrs	r3, r3, #5
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083c4:	441e      	add	r6, r3
 80083c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083ca:	4618      	mov	r0, r3
 80083cc:	f04f 0100 	mov.w	r1, #0
 80083d0:	4602      	mov	r2, r0
 80083d2:	460b      	mov	r3, r1
 80083d4:	1894      	adds	r4, r2, r2
 80083d6:	66bc      	str	r4, [r7, #104]	; 0x68
 80083d8:	415b      	adcs	r3, r3
 80083da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083dc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80083e0:	1812      	adds	r2, r2, r0
 80083e2:	eb41 0303 	adc.w	r3, r1, r3
 80083e6:	f04f 0400 	mov.w	r4, #0
 80083ea:	f04f 0500 	mov.w	r5, #0
 80083ee:	00dd      	lsls	r5, r3, #3
 80083f0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80083f4:	00d4      	lsls	r4, r2, #3
 80083f6:	4622      	mov	r2, r4
 80083f8:	462b      	mov	r3, r5
 80083fa:	1814      	adds	r4, r2, r0
 80083fc:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8008400:	414b      	adcs	r3, r1
 8008402:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	461a      	mov	r2, r3
 800840e:	f04f 0300 	mov.w	r3, #0
 8008412:	1891      	adds	r1, r2, r2
 8008414:	6639      	str	r1, [r7, #96]	; 0x60
 8008416:	415b      	adcs	r3, r3
 8008418:	667b      	str	r3, [r7, #100]	; 0x64
 800841a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800841e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008422:	f7f8 fbd1 	bl	8000bc8 <__aeabi_uldivmod>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	4b70      	ldr	r3, [pc, #448]	; (80085ec <UART_SetConfig+0x3dc>)
 800842c:	fba3 1302 	umull	r1, r3, r3, r2
 8008430:	095b      	lsrs	r3, r3, #5
 8008432:	2164      	movs	r1, #100	; 0x64
 8008434:	fb01 f303 	mul.w	r3, r1, r3
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	00db      	lsls	r3, r3, #3
 800843c:	3332      	adds	r3, #50	; 0x32
 800843e:	4a6b      	ldr	r2, [pc, #428]	; (80085ec <UART_SetConfig+0x3dc>)
 8008440:	fba2 2303 	umull	r2, r3, r2, r3
 8008444:	095b      	lsrs	r3, r3, #5
 8008446:	f003 0207 	and.w	r2, r3, #7
 800844a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4432      	add	r2, r6
 8008452:	609a      	str	r2, [r3, #8]
 8008454:	e26d      	b.n	8008932 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008456:	f7fe f98d 	bl	8006774 <HAL_RCC_GetPCLK1Freq>
 800845a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800845e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008462:	461c      	mov	r4, r3
 8008464:	f04f 0500 	mov.w	r5, #0
 8008468:	4622      	mov	r2, r4
 800846a:	462b      	mov	r3, r5
 800846c:	1891      	adds	r1, r2, r2
 800846e:	65b9      	str	r1, [r7, #88]	; 0x58
 8008470:	415b      	adcs	r3, r3
 8008472:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008474:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008478:	1912      	adds	r2, r2, r4
 800847a:	eb45 0303 	adc.w	r3, r5, r3
 800847e:	f04f 0000 	mov.w	r0, #0
 8008482:	f04f 0100 	mov.w	r1, #0
 8008486:	00d9      	lsls	r1, r3, #3
 8008488:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800848c:	00d0      	lsls	r0, r2, #3
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	1911      	adds	r1, r2, r4
 8008494:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8008498:	416b      	adcs	r3, r5
 800849a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800849e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	461a      	mov	r2, r3
 80084a6:	f04f 0300 	mov.w	r3, #0
 80084aa:	1891      	adds	r1, r2, r2
 80084ac:	6539      	str	r1, [r7, #80]	; 0x50
 80084ae:	415b      	adcs	r3, r3
 80084b0:	657b      	str	r3, [r7, #84]	; 0x54
 80084b2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80084b6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80084ba:	f7f8 fb85 	bl	8000bc8 <__aeabi_uldivmod>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	4b4a      	ldr	r3, [pc, #296]	; (80085ec <UART_SetConfig+0x3dc>)
 80084c4:	fba3 2302 	umull	r2, r3, r3, r2
 80084c8:	095b      	lsrs	r3, r3, #5
 80084ca:	011e      	lsls	r6, r3, #4
 80084cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084d0:	461c      	mov	r4, r3
 80084d2:	f04f 0500 	mov.w	r5, #0
 80084d6:	4622      	mov	r2, r4
 80084d8:	462b      	mov	r3, r5
 80084da:	1891      	adds	r1, r2, r2
 80084dc:	64b9      	str	r1, [r7, #72]	; 0x48
 80084de:	415b      	adcs	r3, r3
 80084e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80084e6:	1912      	adds	r2, r2, r4
 80084e8:	eb45 0303 	adc.w	r3, r5, r3
 80084ec:	f04f 0000 	mov.w	r0, #0
 80084f0:	f04f 0100 	mov.w	r1, #0
 80084f4:	00d9      	lsls	r1, r3, #3
 80084f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80084fa:	00d0      	lsls	r0, r2, #3
 80084fc:	4602      	mov	r2, r0
 80084fe:	460b      	mov	r3, r1
 8008500:	1911      	adds	r1, r2, r4
 8008502:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8008506:	416b      	adcs	r3, r5
 8008508:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800850c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	461a      	mov	r2, r3
 8008514:	f04f 0300 	mov.w	r3, #0
 8008518:	1891      	adds	r1, r2, r2
 800851a:	6439      	str	r1, [r7, #64]	; 0x40
 800851c:	415b      	adcs	r3, r3
 800851e:	647b      	str	r3, [r7, #68]	; 0x44
 8008520:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008524:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008528:	f7f8 fb4e 	bl	8000bc8 <__aeabi_uldivmod>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	4b2e      	ldr	r3, [pc, #184]	; (80085ec <UART_SetConfig+0x3dc>)
 8008532:	fba3 1302 	umull	r1, r3, r3, r2
 8008536:	095b      	lsrs	r3, r3, #5
 8008538:	2164      	movs	r1, #100	; 0x64
 800853a:	fb01 f303 	mul.w	r3, r1, r3
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	00db      	lsls	r3, r3, #3
 8008542:	3332      	adds	r3, #50	; 0x32
 8008544:	4a29      	ldr	r2, [pc, #164]	; (80085ec <UART_SetConfig+0x3dc>)
 8008546:	fba2 2303 	umull	r2, r3, r2, r3
 800854a:	095b      	lsrs	r3, r3, #5
 800854c:	005b      	lsls	r3, r3, #1
 800854e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008552:	441e      	add	r6, r3
 8008554:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008558:	4618      	mov	r0, r3
 800855a:	f04f 0100 	mov.w	r1, #0
 800855e:	4602      	mov	r2, r0
 8008560:	460b      	mov	r3, r1
 8008562:	1894      	adds	r4, r2, r2
 8008564:	63bc      	str	r4, [r7, #56]	; 0x38
 8008566:	415b      	adcs	r3, r3
 8008568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800856a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800856e:	1812      	adds	r2, r2, r0
 8008570:	eb41 0303 	adc.w	r3, r1, r3
 8008574:	f04f 0400 	mov.w	r4, #0
 8008578:	f04f 0500 	mov.w	r5, #0
 800857c:	00dd      	lsls	r5, r3, #3
 800857e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008582:	00d4      	lsls	r4, r2, #3
 8008584:	4622      	mov	r2, r4
 8008586:	462b      	mov	r3, r5
 8008588:	1814      	adds	r4, r2, r0
 800858a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800858e:	414b      	adcs	r3, r1
 8008590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	461a      	mov	r2, r3
 800859c:	f04f 0300 	mov.w	r3, #0
 80085a0:	1891      	adds	r1, r2, r2
 80085a2:	6339      	str	r1, [r7, #48]	; 0x30
 80085a4:	415b      	adcs	r3, r3
 80085a6:	637b      	str	r3, [r7, #52]	; 0x34
 80085a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80085ac:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80085b0:	f7f8 fb0a 	bl	8000bc8 <__aeabi_uldivmod>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	4b0c      	ldr	r3, [pc, #48]	; (80085ec <UART_SetConfig+0x3dc>)
 80085ba:	fba3 1302 	umull	r1, r3, r3, r2
 80085be:	095b      	lsrs	r3, r3, #5
 80085c0:	2164      	movs	r1, #100	; 0x64
 80085c2:	fb01 f303 	mul.w	r3, r1, r3
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	00db      	lsls	r3, r3, #3
 80085ca:	3332      	adds	r3, #50	; 0x32
 80085cc:	4a07      	ldr	r2, [pc, #28]	; (80085ec <UART_SetConfig+0x3dc>)
 80085ce:	fba2 2303 	umull	r2, r3, r2, r3
 80085d2:	095b      	lsrs	r3, r3, #5
 80085d4:	f003 0207 	and.w	r2, r3, #7
 80085d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4432      	add	r2, r6
 80085e0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80085e2:	e1a6      	b.n	8008932 <UART_SetConfig+0x722>
 80085e4:	40011000 	.word	0x40011000
 80085e8:	40011400 	.word	0x40011400
 80085ec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80085f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	4bd1      	ldr	r3, [pc, #836]	; (800893c <UART_SetConfig+0x72c>)
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d006      	beq.n	800860a <UART_SetConfig+0x3fa>
 80085fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	4bcf      	ldr	r3, [pc, #828]	; (8008940 <UART_SetConfig+0x730>)
 8008604:	429a      	cmp	r2, r3
 8008606:	f040 80ca 	bne.w	800879e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800860a:	f7fe f8c7 	bl	800679c <HAL_RCC_GetPCLK2Freq>
 800860e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008612:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008616:	461c      	mov	r4, r3
 8008618:	f04f 0500 	mov.w	r5, #0
 800861c:	4622      	mov	r2, r4
 800861e:	462b      	mov	r3, r5
 8008620:	1891      	adds	r1, r2, r2
 8008622:	62b9      	str	r1, [r7, #40]	; 0x28
 8008624:	415b      	adcs	r3, r3
 8008626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008628:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800862c:	1912      	adds	r2, r2, r4
 800862e:	eb45 0303 	adc.w	r3, r5, r3
 8008632:	f04f 0000 	mov.w	r0, #0
 8008636:	f04f 0100 	mov.w	r1, #0
 800863a:	00d9      	lsls	r1, r3, #3
 800863c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008640:	00d0      	lsls	r0, r2, #3
 8008642:	4602      	mov	r2, r0
 8008644:	460b      	mov	r3, r1
 8008646:	eb12 0a04 	adds.w	sl, r2, r4
 800864a:	eb43 0b05 	adc.w	fp, r3, r5
 800864e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	4618      	mov	r0, r3
 8008656:	f04f 0100 	mov.w	r1, #0
 800865a:	f04f 0200 	mov.w	r2, #0
 800865e:	f04f 0300 	mov.w	r3, #0
 8008662:	008b      	lsls	r3, r1, #2
 8008664:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008668:	0082      	lsls	r2, r0, #2
 800866a:	4650      	mov	r0, sl
 800866c:	4659      	mov	r1, fp
 800866e:	f7f8 faab 	bl	8000bc8 <__aeabi_uldivmod>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	4bb3      	ldr	r3, [pc, #716]	; (8008944 <UART_SetConfig+0x734>)
 8008678:	fba3 2302 	umull	r2, r3, r3, r2
 800867c:	095b      	lsrs	r3, r3, #5
 800867e:	011e      	lsls	r6, r3, #4
 8008680:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008684:	4618      	mov	r0, r3
 8008686:	f04f 0100 	mov.w	r1, #0
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	1894      	adds	r4, r2, r2
 8008690:	623c      	str	r4, [r7, #32]
 8008692:	415b      	adcs	r3, r3
 8008694:	627b      	str	r3, [r7, #36]	; 0x24
 8008696:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800869a:	1812      	adds	r2, r2, r0
 800869c:	eb41 0303 	adc.w	r3, r1, r3
 80086a0:	f04f 0400 	mov.w	r4, #0
 80086a4:	f04f 0500 	mov.w	r5, #0
 80086a8:	00dd      	lsls	r5, r3, #3
 80086aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80086ae:	00d4      	lsls	r4, r2, #3
 80086b0:	4622      	mov	r2, r4
 80086b2:	462b      	mov	r3, r5
 80086b4:	1814      	adds	r4, r2, r0
 80086b6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80086ba:	414b      	adcs	r3, r1
 80086bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	4618      	mov	r0, r3
 80086c8:	f04f 0100 	mov.w	r1, #0
 80086cc:	f04f 0200 	mov.w	r2, #0
 80086d0:	f04f 0300 	mov.w	r3, #0
 80086d4:	008b      	lsls	r3, r1, #2
 80086d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80086da:	0082      	lsls	r2, r0, #2
 80086dc:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80086e0:	f7f8 fa72 	bl	8000bc8 <__aeabi_uldivmod>
 80086e4:	4602      	mov	r2, r0
 80086e6:	460b      	mov	r3, r1
 80086e8:	4b96      	ldr	r3, [pc, #600]	; (8008944 <UART_SetConfig+0x734>)
 80086ea:	fba3 1302 	umull	r1, r3, r3, r2
 80086ee:	095b      	lsrs	r3, r3, #5
 80086f0:	2164      	movs	r1, #100	; 0x64
 80086f2:	fb01 f303 	mul.w	r3, r1, r3
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	011b      	lsls	r3, r3, #4
 80086fa:	3332      	adds	r3, #50	; 0x32
 80086fc:	4a91      	ldr	r2, [pc, #580]	; (8008944 <UART_SetConfig+0x734>)
 80086fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008702:	095b      	lsrs	r3, r3, #5
 8008704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008708:	441e      	add	r6, r3
 800870a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800870e:	4618      	mov	r0, r3
 8008710:	f04f 0100 	mov.w	r1, #0
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	1894      	adds	r4, r2, r2
 800871a:	61bc      	str	r4, [r7, #24]
 800871c:	415b      	adcs	r3, r3
 800871e:	61fb      	str	r3, [r7, #28]
 8008720:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008724:	1812      	adds	r2, r2, r0
 8008726:	eb41 0303 	adc.w	r3, r1, r3
 800872a:	f04f 0400 	mov.w	r4, #0
 800872e:	f04f 0500 	mov.w	r5, #0
 8008732:	00dd      	lsls	r5, r3, #3
 8008734:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008738:	00d4      	lsls	r4, r2, #3
 800873a:	4622      	mov	r2, r4
 800873c:	462b      	mov	r3, r5
 800873e:	1814      	adds	r4, r2, r0
 8008740:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8008744:	414b      	adcs	r3, r1
 8008746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800874a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	4618      	mov	r0, r3
 8008752:	f04f 0100 	mov.w	r1, #0
 8008756:	f04f 0200 	mov.w	r2, #0
 800875a:	f04f 0300 	mov.w	r3, #0
 800875e:	008b      	lsls	r3, r1, #2
 8008760:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008764:	0082      	lsls	r2, r0, #2
 8008766:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800876a:	f7f8 fa2d 	bl	8000bc8 <__aeabi_uldivmod>
 800876e:	4602      	mov	r2, r0
 8008770:	460b      	mov	r3, r1
 8008772:	4b74      	ldr	r3, [pc, #464]	; (8008944 <UART_SetConfig+0x734>)
 8008774:	fba3 1302 	umull	r1, r3, r3, r2
 8008778:	095b      	lsrs	r3, r3, #5
 800877a:	2164      	movs	r1, #100	; 0x64
 800877c:	fb01 f303 	mul.w	r3, r1, r3
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	011b      	lsls	r3, r3, #4
 8008784:	3332      	adds	r3, #50	; 0x32
 8008786:	4a6f      	ldr	r2, [pc, #444]	; (8008944 <UART_SetConfig+0x734>)
 8008788:	fba2 2303 	umull	r2, r3, r2, r3
 800878c:	095b      	lsrs	r3, r3, #5
 800878e:	f003 020f 	and.w	r2, r3, #15
 8008792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4432      	add	r2, r6
 800879a:	609a      	str	r2, [r3, #8]
 800879c:	e0c9      	b.n	8008932 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800879e:	f7fd ffe9 	bl	8006774 <HAL_RCC_GetPCLK1Freq>
 80087a2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80087aa:	461c      	mov	r4, r3
 80087ac:	f04f 0500 	mov.w	r5, #0
 80087b0:	4622      	mov	r2, r4
 80087b2:	462b      	mov	r3, r5
 80087b4:	1891      	adds	r1, r2, r2
 80087b6:	6139      	str	r1, [r7, #16]
 80087b8:	415b      	adcs	r3, r3
 80087ba:	617b      	str	r3, [r7, #20]
 80087bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80087c0:	1912      	adds	r2, r2, r4
 80087c2:	eb45 0303 	adc.w	r3, r5, r3
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 0100 	mov.w	r1, #0
 80087ce:	00d9      	lsls	r1, r3, #3
 80087d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80087d4:	00d0      	lsls	r0, r2, #3
 80087d6:	4602      	mov	r2, r0
 80087d8:	460b      	mov	r3, r1
 80087da:	eb12 0804 	adds.w	r8, r2, r4
 80087de:	eb43 0905 	adc.w	r9, r3, r5
 80087e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f04f 0100 	mov.w	r1, #0
 80087ee:	f04f 0200 	mov.w	r2, #0
 80087f2:	f04f 0300 	mov.w	r3, #0
 80087f6:	008b      	lsls	r3, r1, #2
 80087f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80087fc:	0082      	lsls	r2, r0, #2
 80087fe:	4640      	mov	r0, r8
 8008800:	4649      	mov	r1, r9
 8008802:	f7f8 f9e1 	bl	8000bc8 <__aeabi_uldivmod>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4b4e      	ldr	r3, [pc, #312]	; (8008944 <UART_SetConfig+0x734>)
 800880c:	fba3 2302 	umull	r2, r3, r3, r2
 8008810:	095b      	lsrs	r3, r3, #5
 8008812:	011e      	lsls	r6, r3, #4
 8008814:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008818:	4618      	mov	r0, r3
 800881a:	f04f 0100 	mov.w	r1, #0
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	1894      	adds	r4, r2, r2
 8008824:	60bc      	str	r4, [r7, #8]
 8008826:	415b      	adcs	r3, r3
 8008828:	60fb      	str	r3, [r7, #12]
 800882a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800882e:	1812      	adds	r2, r2, r0
 8008830:	eb41 0303 	adc.w	r3, r1, r3
 8008834:	f04f 0400 	mov.w	r4, #0
 8008838:	f04f 0500 	mov.w	r5, #0
 800883c:	00dd      	lsls	r5, r3, #3
 800883e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008842:	00d4      	lsls	r4, r2, #3
 8008844:	4622      	mov	r2, r4
 8008846:	462b      	mov	r3, r5
 8008848:	1814      	adds	r4, r2, r0
 800884a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800884e:	414b      	adcs	r3, r1
 8008850:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	4618      	mov	r0, r3
 800885c:	f04f 0100 	mov.w	r1, #0
 8008860:	f04f 0200 	mov.w	r2, #0
 8008864:	f04f 0300 	mov.w	r3, #0
 8008868:	008b      	lsls	r3, r1, #2
 800886a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800886e:	0082      	lsls	r2, r0, #2
 8008870:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008874:	f7f8 f9a8 	bl	8000bc8 <__aeabi_uldivmod>
 8008878:	4602      	mov	r2, r0
 800887a:	460b      	mov	r3, r1
 800887c:	4b31      	ldr	r3, [pc, #196]	; (8008944 <UART_SetConfig+0x734>)
 800887e:	fba3 1302 	umull	r1, r3, r3, r2
 8008882:	095b      	lsrs	r3, r3, #5
 8008884:	2164      	movs	r1, #100	; 0x64
 8008886:	fb01 f303 	mul.w	r3, r1, r3
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	011b      	lsls	r3, r3, #4
 800888e:	3332      	adds	r3, #50	; 0x32
 8008890:	4a2c      	ldr	r2, [pc, #176]	; (8008944 <UART_SetConfig+0x734>)
 8008892:	fba2 2303 	umull	r2, r3, r2, r3
 8008896:	095b      	lsrs	r3, r3, #5
 8008898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800889c:	441e      	add	r6, r3
 800889e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088a2:	4618      	mov	r0, r3
 80088a4:	f04f 0100 	mov.w	r1, #0
 80088a8:	4602      	mov	r2, r0
 80088aa:	460b      	mov	r3, r1
 80088ac:	1894      	adds	r4, r2, r2
 80088ae:	603c      	str	r4, [r7, #0]
 80088b0:	415b      	adcs	r3, r3
 80088b2:	607b      	str	r3, [r7, #4]
 80088b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088b8:	1812      	adds	r2, r2, r0
 80088ba:	eb41 0303 	adc.w	r3, r1, r3
 80088be:	f04f 0400 	mov.w	r4, #0
 80088c2:	f04f 0500 	mov.w	r5, #0
 80088c6:	00dd      	lsls	r5, r3, #3
 80088c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80088cc:	00d4      	lsls	r4, r2, #3
 80088ce:	4622      	mov	r2, r4
 80088d0:	462b      	mov	r3, r5
 80088d2:	1814      	adds	r4, r2, r0
 80088d4:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80088d8:	414b      	adcs	r3, r1
 80088da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80088de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	4618      	mov	r0, r3
 80088e6:	f04f 0100 	mov.w	r1, #0
 80088ea:	f04f 0200 	mov.w	r2, #0
 80088ee:	f04f 0300 	mov.w	r3, #0
 80088f2:	008b      	lsls	r3, r1, #2
 80088f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80088f8:	0082      	lsls	r2, r0, #2
 80088fa:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80088fe:	f7f8 f963 	bl	8000bc8 <__aeabi_uldivmod>
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	4b0f      	ldr	r3, [pc, #60]	; (8008944 <UART_SetConfig+0x734>)
 8008908:	fba3 1302 	umull	r1, r3, r3, r2
 800890c:	095b      	lsrs	r3, r3, #5
 800890e:	2164      	movs	r1, #100	; 0x64
 8008910:	fb01 f303 	mul.w	r3, r1, r3
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	011b      	lsls	r3, r3, #4
 8008918:	3332      	adds	r3, #50	; 0x32
 800891a:	4a0a      	ldr	r2, [pc, #40]	; (8008944 <UART_SetConfig+0x734>)
 800891c:	fba2 2303 	umull	r2, r3, r2, r3
 8008920:	095b      	lsrs	r3, r3, #5
 8008922:	f003 020f 	and.w	r2, r3, #15
 8008926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4432      	add	r2, r6
 800892e:	609a      	str	r2, [r3, #8]
}
 8008930:	e7ff      	b.n	8008932 <UART_SetConfig+0x722>
 8008932:	bf00      	nop
 8008934:	37f4      	adds	r7, #244	; 0xf4
 8008936:	46bd      	mov	sp, r7
 8008938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800893c:	40011000 	.word	0x40011000
 8008940:	40011400 	.word	0x40011400
 8008944:	51eb851f 	.word	0x51eb851f

08008948 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800894e:	f000 fb1f 	bl	8008f90 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8008952:	4b19      	ldr	r3, [pc, #100]	; (80089b8 <MX_LWIP_Init+0x70>)
 8008954:	2200      	movs	r2, #0
 8008956:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8008958:	4b18      	ldr	r3, [pc, #96]	; (80089bc <MX_LWIP_Init+0x74>)
 800895a:	2200      	movs	r2, #0
 800895c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800895e:	4b18      	ldr	r3, [pc, #96]	; (80089c0 <MX_LWIP_Init+0x78>)
 8008960:	2200      	movs	r2, #0
 8008962:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8008964:	4b17      	ldr	r3, [pc, #92]	; (80089c4 <MX_LWIP_Init+0x7c>)
 8008966:	9302      	str	r3, [sp, #8]
 8008968:	4b17      	ldr	r3, [pc, #92]	; (80089c8 <MX_LWIP_Init+0x80>)
 800896a:	9301      	str	r3, [sp, #4]
 800896c:	2300      	movs	r3, #0
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	4b13      	ldr	r3, [pc, #76]	; (80089c0 <MX_LWIP_Init+0x78>)
 8008972:	4a12      	ldr	r2, [pc, #72]	; (80089bc <MX_LWIP_Init+0x74>)
 8008974:	4910      	ldr	r1, [pc, #64]	; (80089b8 <MX_LWIP_Init+0x70>)
 8008976:	4815      	ldr	r0, [pc, #84]	; (80089cc <MX_LWIP_Init+0x84>)
 8008978:	f000 ffb0 	bl	80098dc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800897c:	4813      	ldr	r0, [pc, #76]	; (80089cc <MX_LWIP_Init+0x84>)
 800897e:	f001 f967 	bl	8009c50 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8008982:	4b12      	ldr	r3, [pc, #72]	; (80089cc <MX_LWIP_Init+0x84>)
 8008984:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008988:	089b      	lsrs	r3, r3, #2
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	b2db      	uxtb	r3, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	d003      	beq.n	800899c <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8008994:	480d      	ldr	r0, [pc, #52]	; (80089cc <MX_LWIP_Init+0x84>)
 8008996:	f001 f96b 	bl	8009c70 <netif_set_up>
 800899a:	e002      	b.n	80089a2 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800899c:	480b      	ldr	r0, [pc, #44]	; (80089cc <MX_LWIP_Init+0x84>)
 800899e:	f001 f9d3 	bl	8009d48 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80089a2:	490b      	ldr	r1, [pc, #44]	; (80089d0 <MX_LWIP_Init+0x88>)
 80089a4:	4809      	ldr	r0, [pc, #36]	; (80089cc <MX_LWIP_Init+0x84>)
 80089a6:	f001 fa01 	bl	8009dac <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80089aa:	4808      	ldr	r0, [pc, #32]	; (80089cc <MX_LWIP_Init+0x84>)
 80089ac:	f008 fa92 	bl	8010ed4 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80089b0:	bf00      	nop
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	20000808 	.word	0x20000808
 80089bc:	2000080c 	.word	0x2000080c
 80089c0:	20000810 	.word	0x20000810
 80089c4:	080148a1 	.word	0x080148a1
 80089c8:	08008dbd 	.word	0x08008dbd
 80089cc:	200007d0 	.word	0x200007d0
 80089d0:	08008e29 	.word	0x08008e29

080089d4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b08e      	sub	sp, #56	; 0x38
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089e0:	2200      	movs	r2, #0
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	605a      	str	r2, [r3, #4]
 80089e6:	609a      	str	r2, [r3, #8]
 80089e8:	60da      	str	r2, [r3, #12]
 80089ea:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a46      	ldr	r2, [pc, #280]	; (8008b0c <HAL_ETH_MspInit+0x138>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	f040 8085 	bne.w	8008b02 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80089f8:	2300      	movs	r3, #0
 80089fa:	623b      	str	r3, [r7, #32]
 80089fc:	4b44      	ldr	r3, [pc, #272]	; (8008b10 <HAL_ETH_MspInit+0x13c>)
 80089fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a00:	4a43      	ldr	r2, [pc, #268]	; (8008b10 <HAL_ETH_MspInit+0x13c>)
 8008a02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008a06:	6313      	str	r3, [r2, #48]	; 0x30
 8008a08:	4b41      	ldr	r3, [pc, #260]	; (8008b10 <HAL_ETH_MspInit+0x13c>)
 8008a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a10:	623b      	str	r3, [r7, #32]
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	2300      	movs	r3, #0
 8008a16:	61fb      	str	r3, [r7, #28]
 8008a18:	4b3d      	ldr	r3, [pc, #244]	; (8008b10 <HAL_ETH_MspInit+0x13c>)
 8008a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1c:	4a3c      	ldr	r2, [pc, #240]	; (8008b10 <HAL_ETH_MspInit+0x13c>)
 8008a1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a22:	6313      	str	r3, [r2, #48]	; 0x30
 8008a24:	4b3a      	ldr	r3, [pc, #232]	; (8008b10 <HAL_ETH_MspInit+0x13c>)
 8008a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a2c:	61fb      	str	r3, [r7, #28]
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	2300      	movs	r3, #0
 8008a32:	61bb      	str	r3, [r7, #24]
 8008a34:	4b36      	ldr	r3, [pc, #216]	; (8008b10 <HAL_ETH_MspInit+0x13c>)
 8008a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a38:	4a35      	ldr	r2, [pc, #212]	; (8008b10 <HAL_ETH_MspInit+0x13c>)
 8008a3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8008a40:	4b33      	ldr	r3, [pc, #204]	; (8008b10 <HAL_ETH_MspInit+0x13c>)
 8008a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a48:	61bb      	str	r3, [r7, #24]
 8008a4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	617b      	str	r3, [r7, #20]
 8008a50:	4b2f      	ldr	r3, [pc, #188]	; (8008b10 <HAL_ETH_MspInit+0x13c>)
 8008a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a54:	4a2e      	ldr	r2, [pc, #184]	; (8008b10 <HAL_ETH_MspInit+0x13c>)
 8008a56:	f043 0304 	orr.w	r3, r3, #4
 8008a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8008a5c:	4b2c      	ldr	r3, [pc, #176]	; (8008b10 <HAL_ETH_MspInit+0x13c>)
 8008a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a60:	f003 0304 	and.w	r3, r3, #4
 8008a64:	617b      	str	r3, [r7, #20]
 8008a66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a68:	2300      	movs	r3, #0
 8008a6a:	613b      	str	r3, [r7, #16]
 8008a6c:	4b28      	ldr	r3, [pc, #160]	; (8008b10 <HAL_ETH_MspInit+0x13c>)
 8008a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a70:	4a27      	ldr	r2, [pc, #156]	; (8008b10 <HAL_ETH_MspInit+0x13c>)
 8008a72:	f043 0301 	orr.w	r3, r3, #1
 8008a76:	6313      	str	r3, [r2, #48]	; 0x30
 8008a78:	4b25      	ldr	r3, [pc, #148]	; (8008b10 <HAL_ETH_MspInit+0x13c>)
 8008a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	613b      	str	r3, [r7, #16]
 8008a82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a84:	2300      	movs	r3, #0
 8008a86:	60fb      	str	r3, [r7, #12]
 8008a88:	4b21      	ldr	r3, [pc, #132]	; (8008b10 <HAL_ETH_MspInit+0x13c>)
 8008a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8c:	4a20      	ldr	r2, [pc, #128]	; (8008b10 <HAL_ETH_MspInit+0x13c>)
 8008a8e:	f043 0302 	orr.w	r3, r3, #2
 8008a92:	6313      	str	r3, [r2, #48]	; 0x30
 8008a94:	4b1e      	ldr	r3, [pc, #120]	; (8008b10 <HAL_ETH_MspInit+0x13c>)
 8008a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a98:	f003 0302 	and.w	r3, r3, #2
 8008a9c:	60fb      	str	r3, [r7, #12]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8008aa0:	2332      	movs	r3, #50	; 0x32
 8008aa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008aac:	2303      	movs	r3, #3
 8008aae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008ab0:	230b      	movs	r3, #11
 8008ab2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ab8:	4619      	mov	r1, r3
 8008aba:	4816      	ldr	r0, [pc, #88]	; (8008b14 <HAL_ETH_MspInit+0x140>)
 8008abc:	f7fd f848 	bl	8005b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8008ac0:	2386      	movs	r3, #134	; 0x86
 8008ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008acc:	2303      	movs	r3, #3
 8008ace:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008ad0:	230b      	movs	r3, #11
 8008ad2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ad8:	4619      	mov	r1, r3
 8008ada:	480f      	ldr	r0, [pc, #60]	; (8008b18 <HAL_ETH_MspInit+0x144>)
 8008adc:	f7fd f838 	bl	8005b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8008ae0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aea:	2300      	movs	r3, #0
 8008aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008aee:	2303      	movs	r3, #3
 8008af0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008af2:	230b      	movs	r3, #11
 8008af4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008afa:	4619      	mov	r1, r3
 8008afc:	4807      	ldr	r0, [pc, #28]	; (8008b1c <HAL_ETH_MspInit+0x148>)
 8008afe:	f7fd f827 	bl	8005b50 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008b02:	bf00      	nop
 8008b04:	3738      	adds	r7, #56	; 0x38
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	40028000 	.word	0x40028000
 8008b10:	40023800 	.word	0x40023800
 8008b14:	40020800 	.word	0x40020800
 8008b18:	40020000 	.word	0x40020000
 8008b1c:	40020400 	.word	0x40020400

08008b20 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008b2c:	4b4e      	ldr	r3, [pc, #312]	; (8008c68 <low_level_init+0x148>)
 8008b2e:	4a4f      	ldr	r2, [pc, #316]	; (8008c6c <low_level_init+0x14c>)
 8008b30:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8008b32:	4b4d      	ldr	r3, [pc, #308]	; (8008c68 <low_level_init+0x148>)
 8008b34:	2201      	movs	r2, #1
 8008b36:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 8008b38:	4b4b      	ldr	r3, [pc, #300]	; (8008c68 <low_level_init+0x148>)
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x02;
 8008b3e:	2302      	movs	r3, #2
 8008b40:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x00;
 8008b42:	2300      	movs	r3, #0
 8008b44:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x00;
 8008b46:	2300      	movs	r3, #0
 8008b48:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008b52:	2300      	movs	r3, #0
 8008b54:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008b56:	4a44      	ldr	r2, [pc, #272]	; (8008c68 <low_level_init+0x148>)
 8008b58:	f107 0308 	add.w	r3, r7, #8
 8008b5c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8008b5e:	4b42      	ldr	r3, [pc, #264]	; (8008c68 <low_level_init+0x148>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8008b64:	4b40      	ldr	r3, [pc, #256]	; (8008c68 <low_level_init+0x148>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8008b6a:	4b3f      	ldr	r3, [pc, #252]	; (8008c68 <low_level_init+0x148>)
 8008b6c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008b70:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008b72:	483d      	ldr	r0, [pc, #244]	; (8008c68 <low_level_init+0x148>)
 8008b74:	f7fb ff4a 	bl	8004a0c <HAL_ETH_Init>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d108      	bne.n	8008b94 <low_level_init+0x74>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008b88:	f043 0304 	orr.w	r3, r3, #4
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8008b94:	2304      	movs	r3, #4
 8008b96:	4a36      	ldr	r2, [pc, #216]	; (8008c70 <low_level_init+0x150>)
 8008b98:	4936      	ldr	r1, [pc, #216]	; (8008c74 <low_level_init+0x154>)
 8008b9a:	4833      	ldr	r0, [pc, #204]	; (8008c68 <low_level_init+0x148>)
 8008b9c:	f7fc f8d2 	bl	8004d44 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8008ba0:	2304      	movs	r3, #4
 8008ba2:	4a35      	ldr	r2, [pc, #212]	; (8008c78 <low_level_init+0x158>)
 8008ba4:	4935      	ldr	r1, [pc, #212]	; (8008c7c <low_level_init+0x15c>)
 8008ba6:	4830      	ldr	r0, [pc, #192]	; (8008c68 <low_level_init+0x148>)
 8008ba8:	f7fc f935 	bl	8004e16 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2206      	movs	r2, #6
 8008bb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008bb4:	4b2c      	ldr	r3, [pc, #176]	; (8008c68 <low_level_init+0x148>)
 8008bb6:	695b      	ldr	r3, [r3, #20]
 8008bb8:	781a      	ldrb	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008bc0:	4b29      	ldr	r3, [pc, #164]	; (8008c68 <low_level_init+0x148>)
 8008bc2:	695b      	ldr	r3, [r3, #20]
 8008bc4:	785a      	ldrb	r2, [r3, #1]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008bcc:	4b26      	ldr	r3, [pc, #152]	; (8008c68 <low_level_init+0x148>)
 8008bce:	695b      	ldr	r3, [r3, #20]
 8008bd0:	789a      	ldrb	r2, [r3, #2]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008bd8:	4b23      	ldr	r3, [pc, #140]	; (8008c68 <low_level_init+0x148>)
 8008bda:	695b      	ldr	r3, [r3, #20]
 8008bdc:	78da      	ldrb	r2, [r3, #3]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008be4:	4b20      	ldr	r3, [pc, #128]	; (8008c68 <low_level_init+0x148>)
 8008be6:	695b      	ldr	r3, [r3, #20]
 8008be8:	791a      	ldrb	r2, [r3, #4]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008bf0:	4b1d      	ldr	r3, [pc, #116]	; (8008c68 <low_level_init+0x148>)
 8008bf2:	695b      	ldr	r3, [r3, #20]
 8008bf4:	795a      	ldrb	r2, [r3, #5]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008c02:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008c0a:	f043 030a 	orr.w	r3, r3, #10
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8008c16:	4814      	ldr	r0, [pc, #80]	; (8008c68 <low_level_init+0x148>)
 8008c18:	f7fc fb22 	bl	8005260 <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 8008c1c:	f107 0310 	add.w	r3, r7, #16
 8008c20:	461a      	mov	r2, r3
 8008c22:	2111      	movs	r1, #17
 8008c24:	4810      	ldr	r0, [pc, #64]	; (8008c68 <low_level_init+0x148>)
 8008c26:	f7fc fa4d 	bl	80050c4 <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	f043 0303 	orr.w	r3, r3, #3
 8008c30:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	461a      	mov	r2, r3
 8008c36:	2111      	movs	r1, #17
 8008c38:	480b      	ldr	r0, [pc, #44]	; (8008c68 <low_level_init+0x148>)
 8008c3a:	f7fc faab 	bl	8005194 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 8008c3e:	f107 0310 	add.w	r3, r7, #16
 8008c42:	461a      	mov	r2, r3
 8008c44:	2112      	movs	r1, #18
 8008c46:	4808      	ldr	r0, [pc, #32]	; (8008c68 <low_level_init+0x148>)
 8008c48:	f7fc fa3c 	bl	80050c4 <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	f043 0320 	orr.w	r3, r3, #32
 8008c52:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	461a      	mov	r2, r3
 8008c58:	2112      	movs	r1, #18
 8008c5a:	4803      	ldr	r0, [pc, #12]	; (8008c68 <low_level_init+0x148>)
 8008c5c:	f7fc fa9a 	bl	8005194 <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008c60:	bf00      	nop
 8008c62:	3718      	adds	r7, #24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	200020e4 	.word	0x200020e4
 8008c6c:	40028000 	.word	0x40028000
 8008c70:	2000212c 	.word	0x2000212c
 8008c74:	20000814 	.word	0x20000814
 8008c78:	20000894 	.word	0x20000894
 8008c7c:	20002064 	.word	0x20002064

08008c80 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b08a      	sub	sp, #40	; 0x28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008c8a:	4b4b      	ldr	r3, [pc, #300]	; (8008db8 <low_level_output+0x138>)
 8008c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8008c92:	2300      	movs	r3, #0
 8008c94:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8008ca2:	4b45      	ldr	r3, [pc, #276]	; (8008db8 <low_level_output+0x138>)
 8008ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	623b      	str	r3, [r7, #32]
 8008cb0:	e05a      	b.n	8008d68 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	da03      	bge.n	8008cc2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8008cba:	23f8      	movs	r3, #248	; 0xf8
 8008cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8008cc0:	e05c      	b.n	8008d7c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8008cc2:	6a3b      	ldr	r3, [r7, #32]
 8008cc4:	895b      	ldrh	r3, [r3, #10]
 8008cc6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008ccc:	e02f      	b.n	8008d2e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8008cce:	69fa      	ldr	r2, [r7, #28]
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	18d0      	adds	r0, r2, r3
 8008cd4:	6a3b      	ldr	r3, [r7, #32]
 8008cd6:	685a      	ldr	r2, [r3, #4]
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	18d1      	adds	r1, r2, r3
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	f00b fef7 	bl	8014ad8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	da03      	bge.n	8008d00 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8008cf8:	23f8      	movs	r3, #248	; 0xf8
 8008cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8008cfe:	e03d      	b.n	8008d7c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008d10:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	1ad3      	subs	r3, r2, r3
 8008d18:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008d1c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8008d1e:	697a      	ldr	r2, [r7, #20]
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008d28:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	4413      	add	r3, r2
 8008d34:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d8c8      	bhi.n	8008cce <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008d3c:	69fa      	ldr	r2, [r7, #28]
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	18d0      	adds	r0, r2, r3
 8008d42:	6a3b      	ldr	r3, [r7, #32]
 8008d44:	685a      	ldr	r2, [r3, #4]
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	4413      	add	r3, r2
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	f00b fec3 	bl	8014ad8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	4413      	add	r3, r2
 8008d58:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	4413      	add	r3, r2
 8008d60:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8008d62:	6a3b      	ldr	r3, [r7, #32]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	623b      	str	r3, [r7, #32]
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1a1      	bne.n	8008cb2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8008d6e:	6979      	ldr	r1, [r7, #20]
 8008d70:	4811      	ldr	r0, [pc, #68]	; (8008db8 <low_level_output+0x138>)
 8008d72:	f7fc f8bd 	bl	8004ef0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8008d7c:	4b0e      	ldr	r3, [pc, #56]	; (8008db8 <low_level_output+0x138>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d84:	3314      	adds	r3, #20
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 0320 	and.w	r3, r3, #32
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00d      	beq.n	8008dac <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8008d90:	4b09      	ldr	r3, [pc, #36]	; (8008db8 <low_level_output+0x138>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d98:	3314      	adds	r3, #20
 8008d9a:	2220      	movs	r2, #32
 8008d9c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8008d9e:	4b06      	ldr	r3, [pc, #24]	; (8008db8 <low_level_output+0x138>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008da6:	3304      	adds	r3, #4
 8008da8:	2200      	movs	r2, #0
 8008daa:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8008dac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3728      	adds	r7, #40	; 0x28
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	200020e4 	.word	0x200020e4

08008dbc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d106      	bne.n	8008dd8 <ethernetif_init+0x1c>
 8008dca:	4b0e      	ldr	r3, [pc, #56]	; (8008e04 <ethernetif_init+0x48>)
 8008dcc:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8008dd0:	490d      	ldr	r1, [pc, #52]	; (8008e08 <ethernetif_init+0x4c>)
 8008dd2:	480e      	ldr	r0, [pc, #56]	; (8008e0c <ethernetif_init+0x50>)
 8008dd4:	f00c fbc4 	bl	8015560 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2273      	movs	r2, #115	; 0x73
 8008ddc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2274      	movs	r2, #116	; 0x74
 8008de4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a09      	ldr	r2, [pc, #36]	; (8008e10 <ethernetif_init+0x54>)
 8008dec:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a08      	ldr	r2, [pc, #32]	; (8008e14 <ethernetif_init+0x58>)
 8008df2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f7ff fe93 	bl	8008b20 <low_level_init>

  return ERR_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	08018dc0 	.word	0x08018dc0
 8008e08:	08018ddc 	.word	0x08018ddc
 8008e0c:	08018dec 	.word	0x08018dec
 8008e10:	08012d29 	.word	0x08012d29
 8008e14:	08008c81 	.word	0x08008c81

08008e18 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008e1c:	f7fb fa60 	bl	80042e0 <HAL_GetTick>
 8008e20:	4603      	mov	r3, r0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	bd80      	pop	{r7, pc}
	...

08008e28 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8008e30:	2300      	movs	r3, #0
 8008e32:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8008e34:	2300      	movs	r3, #0
 8008e36:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008e3e:	089b      	lsrs	r3, r3, #2
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d05d      	beq.n	8008f06 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8008e4a:	4b34      	ldr	r3, [pc, #208]	; (8008f1c <ethernetif_update_config+0xf4>)
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d03f      	beq.n	8008ed2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8008e52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008e56:	2100      	movs	r1, #0
 8008e58:	4830      	ldr	r0, [pc, #192]	; (8008f1c <ethernetif_update_config+0xf4>)
 8008e5a:	f7fc f99b 	bl	8005194 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8008e5e:	f7fb fa3f 	bl	80042e0 <HAL_GetTick>
 8008e62:	4603      	mov	r3, r0
 8008e64:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008e66:	f107 0308 	add.w	r3, r7, #8
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	482b      	ldr	r0, [pc, #172]	; (8008f1c <ethernetif_update_config+0xf4>)
 8008e70:	f7fc f928 	bl	80050c4 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8008e74:	f7fb fa34 	bl	80042e0 <HAL_GetTick>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e82:	d828      	bhi.n	8008ed6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	f003 0320 	and.w	r3, r3, #32
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d0eb      	beq.n	8008e66 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8008e8e:	f107 0308 	add.w	r3, r7, #8
 8008e92:	461a      	mov	r2, r3
 8008e94:	211f      	movs	r1, #31
 8008e96:	4821      	ldr	r0, [pc, #132]	; (8008f1c <ethernetif_update_config+0xf4>)
 8008e98:	f7fc f914 	bl	80050c4 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	f003 0310 	and.w	r3, r3, #16
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d004      	beq.n	8008eb0 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008ea6:	4b1d      	ldr	r3, [pc, #116]	; (8008f1c <ethernetif_update_config+0xf4>)
 8008ea8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008eac:	60da      	str	r2, [r3, #12]
 8008eae:	e002      	b.n	8008eb6 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8008eb0:	4b1a      	ldr	r3, [pc, #104]	; (8008f1c <ethernetif_update_config+0xf4>)
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	f003 0304 	and.w	r3, r3, #4
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d003      	beq.n	8008ec8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8008ec0:	4b16      	ldr	r3, [pc, #88]	; (8008f1c <ethernetif_update_config+0xf4>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	609a      	str	r2, [r3, #8]
 8008ec6:	e016      	b.n	8008ef6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8008ec8:	4b14      	ldr	r3, [pc, #80]	; (8008f1c <ethernetif_update_config+0xf4>)
 8008eca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008ece:	609a      	str	r2, [r3, #8]
 8008ed0:	e011      	b.n	8008ef6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8008ed2:	bf00      	nop
 8008ed4:	e000      	b.n	8008ed8 <ethernetif_update_config+0xb0>
          goto error;
 8008ed6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008ed8:	4b10      	ldr	r3, [pc, #64]	; (8008f1c <ethernetif_update_config+0xf4>)
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	08db      	lsrs	r3, r3, #3
 8008ede:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8008ee0:	4b0e      	ldr	r3, [pc, #56]	; (8008f1c <ethernetif_update_config+0xf4>)
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	085b      	lsrs	r3, r3, #1
 8008ee6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	461a      	mov	r2, r3
 8008eee:	2100      	movs	r1, #0
 8008ef0:	480a      	ldr	r0, [pc, #40]	; (8008f1c <ethernetif_update_config+0xf4>)
 8008ef2:	f7fc f94f 	bl	8005194 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	4808      	ldr	r0, [pc, #32]	; (8008f1c <ethernetif_update_config+0xf4>)
 8008efa:	f7fc fa0f 	bl	800531c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8008efe:	4807      	ldr	r0, [pc, #28]	; (8008f1c <ethernetif_update_config+0xf4>)
 8008f00:	f7fc f9ae 	bl	8005260 <HAL_ETH_Start>
 8008f04:	e002      	b.n	8008f0c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8008f06:	4805      	ldr	r0, [pc, #20]	; (8008f1c <ethernetif_update_config+0xf4>)
 8008f08:	f7fc f9d9 	bl	80052be <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f807 	bl	8008f20 <ethernetif_notify_conn_changed>
}
 8008f12:	bf00      	nop
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	200020e4 	.word	0x200020e4

08008f20 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008f3e:	88fb      	ldrh	r3, [r7, #6]
 8008f40:	021b      	lsls	r3, r3, #8
 8008f42:	b21a      	sxth	r2, r3
 8008f44:	88fb      	ldrh	r3, [r7, #6]
 8008f46:	0a1b      	lsrs	r3, r3, #8
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	b21b      	sxth	r3, r3
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	b21b      	sxth	r3, r3
 8008f50:	b29b      	uxth	r3, r3
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	370c      	adds	r7, #12
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b083      	sub	sp, #12
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	061a      	lsls	r2, r3, #24
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	021b      	lsls	r3, r3, #8
 8008f6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f72:	431a      	orrs	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	0a1b      	lsrs	r3, r3, #8
 8008f78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008f7c:	431a      	orrs	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	0e1b      	lsrs	r3, r3, #24
 8008f82:	4313      	orrs	r3, r2
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008f96:	2300      	movs	r3, #0
 8008f98:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8008f9a:	f000 f8d5 	bl	8009148 <mem_init>
  memp_init();
 8008f9e:	f000 fbdb 	bl	8009758 <memp_init>
  pbuf_init();
  netif_init();
 8008fa2:	f000 fc93 	bl	80098cc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008fa6:	f006 ff5d 	bl	800fe64 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008faa:	f001 fcfd 	bl	800a9a8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008fae:	f006 ff11 	bl	800fdd4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008fb2:	bf00      	nop
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
	...

08008fbc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8008fc6:	4b05      	ldr	r3, [pc, #20]	; (8008fdc <ptr_to_mem+0x20>)
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	88fb      	ldrh	r3, [r7, #6]
 8008fcc:	4413      	add	r3, r2
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	200003a4 	.word	0x200003a4

08008fe0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008fe8:	4b05      	ldr	r3, [pc, #20]	; (8009000 <mem_to_ptr+0x20>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	b29b      	uxth	r3, r3
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	200003a4 	.word	0x200003a4

08009004 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009004:	b590      	push	{r4, r7, lr}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800900c:	4b45      	ldr	r3, [pc, #276]	; (8009124 <plug_holes+0x120>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	429a      	cmp	r2, r3
 8009014:	d206      	bcs.n	8009024 <plug_holes+0x20>
 8009016:	4b44      	ldr	r3, [pc, #272]	; (8009128 <plug_holes+0x124>)
 8009018:	f240 12df 	movw	r2, #479	; 0x1df
 800901c:	4943      	ldr	r1, [pc, #268]	; (800912c <plug_holes+0x128>)
 800901e:	4844      	ldr	r0, [pc, #272]	; (8009130 <plug_holes+0x12c>)
 8009020:	f00c fa9e 	bl	8015560 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009024:	4b43      	ldr	r3, [pc, #268]	; (8009134 <plug_holes+0x130>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	429a      	cmp	r2, r3
 800902c:	d306      	bcc.n	800903c <plug_holes+0x38>
 800902e:	4b3e      	ldr	r3, [pc, #248]	; (8009128 <plug_holes+0x124>)
 8009030:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009034:	4940      	ldr	r1, [pc, #256]	; (8009138 <plug_holes+0x134>)
 8009036:	483e      	ldr	r0, [pc, #248]	; (8009130 <plug_holes+0x12c>)
 8009038:	f00c fa92 	bl	8015560 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	791b      	ldrb	r3, [r3, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d006      	beq.n	8009052 <plug_holes+0x4e>
 8009044:	4b38      	ldr	r3, [pc, #224]	; (8009128 <plug_holes+0x124>)
 8009046:	f240 12e1 	movw	r2, #481	; 0x1e1
 800904a:	493c      	ldr	r1, [pc, #240]	; (800913c <plug_holes+0x138>)
 800904c:	4838      	ldr	r0, [pc, #224]	; (8009130 <plug_holes+0x12c>)
 800904e:	f00c fa87 	bl	8015560 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	881b      	ldrh	r3, [r3, #0]
 8009056:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800905a:	d906      	bls.n	800906a <plug_holes+0x66>
 800905c:	4b32      	ldr	r3, [pc, #200]	; (8009128 <plug_holes+0x124>)
 800905e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009062:	4937      	ldr	r1, [pc, #220]	; (8009140 <plug_holes+0x13c>)
 8009064:	4832      	ldr	r0, [pc, #200]	; (8009130 <plug_holes+0x12c>)
 8009066:	f00c fa7b 	bl	8015560 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	4618      	mov	r0, r3
 8009070:	f7ff ffa4 	bl	8008fbc <ptr_to_mem>
 8009074:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	429a      	cmp	r2, r3
 800907c:	d024      	beq.n	80090c8 <plug_holes+0xc4>
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	791b      	ldrb	r3, [r3, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d120      	bne.n	80090c8 <plug_holes+0xc4>
 8009086:	4b2b      	ldr	r3, [pc, #172]	; (8009134 <plug_holes+0x130>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	429a      	cmp	r2, r3
 800908e:	d01b      	beq.n	80090c8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009090:	4b2c      	ldr	r3, [pc, #176]	; (8009144 <plug_holes+0x140>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	429a      	cmp	r2, r3
 8009098:	d102      	bne.n	80090a0 <plug_holes+0x9c>
      lfree = mem;
 800909a:	4a2a      	ldr	r2, [pc, #168]	; (8009144 <plug_holes+0x140>)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	881a      	ldrh	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	881b      	ldrh	r3, [r3, #0]
 80090ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80090b0:	d00a      	beq.n	80090c8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	881b      	ldrh	r3, [r3, #0]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7ff ff80 	bl	8008fbc <ptr_to_mem>
 80090bc:	4604      	mov	r4, r0
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7ff ff8e 	bl	8008fe0 <mem_to_ptr>
 80090c4:	4603      	mov	r3, r0
 80090c6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	885b      	ldrh	r3, [r3, #2]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7ff ff75 	bl	8008fbc <ptr_to_mem>
 80090d2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80090d4:	68ba      	ldr	r2, [r7, #8]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d01f      	beq.n	800911c <plug_holes+0x118>
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	791b      	ldrb	r3, [r3, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d11b      	bne.n	800911c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80090e4:	4b17      	ldr	r3, [pc, #92]	; (8009144 <plug_holes+0x140>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d102      	bne.n	80090f4 <plug_holes+0xf0>
      lfree = pmem;
 80090ee:	4a15      	ldr	r2, [pc, #84]	; (8009144 <plug_holes+0x140>)
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	881a      	ldrh	r2, [r3, #0]
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	881b      	ldrh	r3, [r3, #0]
 8009100:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009104:	d00a      	beq.n	800911c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	881b      	ldrh	r3, [r3, #0]
 800910a:	4618      	mov	r0, r3
 800910c:	f7ff ff56 	bl	8008fbc <ptr_to_mem>
 8009110:	4604      	mov	r4, r0
 8009112:	68b8      	ldr	r0, [r7, #8]
 8009114:	f7ff ff64 	bl	8008fe0 <mem_to_ptr>
 8009118:	4603      	mov	r3, r0
 800911a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800911c:	bf00      	nop
 800911e:	3714      	adds	r7, #20
 8009120:	46bd      	mov	sp, r7
 8009122:	bd90      	pop	{r4, r7, pc}
 8009124:	200003a4 	.word	0x200003a4
 8009128:	08018e14 	.word	0x08018e14
 800912c:	08018e44 	.word	0x08018e44
 8009130:	08018e5c 	.word	0x08018e5c
 8009134:	200003a8 	.word	0x200003a8
 8009138:	08018e84 	.word	0x08018e84
 800913c:	08018ea0 	.word	0x08018ea0
 8009140:	08018ebc 	.word	0x08018ebc
 8009144:	200003ac 	.word	0x200003ac

08009148 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800914e:	4b18      	ldr	r3, [pc, #96]	; (80091b0 <mem_init+0x68>)
 8009150:	3303      	adds	r3, #3
 8009152:	f023 0303 	bic.w	r3, r3, #3
 8009156:	461a      	mov	r2, r3
 8009158:	4b16      	ldr	r3, [pc, #88]	; (80091b4 <mem_init+0x6c>)
 800915a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800915c:	4b15      	ldr	r3, [pc, #84]	; (80091b4 <mem_init+0x6c>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009168:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009176:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800917a:	f7ff ff1f 	bl	8008fbc <ptr_to_mem>
 800917e:	4603      	mov	r3, r0
 8009180:	4a0d      	ldr	r2, [pc, #52]	; (80091b8 <mem_init+0x70>)
 8009182:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009184:	4b0c      	ldr	r3, [pc, #48]	; (80091b8 <mem_init+0x70>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2201      	movs	r2, #1
 800918a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800918c:	4b0a      	ldr	r3, [pc, #40]	; (80091b8 <mem_init+0x70>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009194:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009196:	4b08      	ldr	r3, [pc, #32]	; (80091b8 <mem_init+0x70>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800919e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80091a0:	4b04      	ldr	r3, [pc, #16]	; (80091b4 <mem_init+0x6c>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a05      	ldr	r2, [pc, #20]	; (80091bc <mem_init+0x74>)
 80091a6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80091a8:	bf00      	nop
 80091aa:	3708      	adds	r7, #8
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	20003914 	.word	0x20003914
 80091b4:	200003a4 	.word	0x200003a4
 80091b8:	200003a8 	.word	0x200003a8
 80091bc:	200003ac 	.word	0x200003ac

080091c0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7ff ff09 	bl	8008fe0 <mem_to_ptr>
 80091ce:	4603      	mov	r3, r0
 80091d0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	881b      	ldrh	r3, [r3, #0]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7ff fef0 	bl	8008fbc <ptr_to_mem>
 80091dc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	885b      	ldrh	r3, [r3, #2]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7ff feea 	bl	8008fbc <ptr_to_mem>
 80091e8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	881b      	ldrh	r3, [r3, #0]
 80091ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80091f2:	d818      	bhi.n	8009226 <mem_link_valid+0x66>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	885b      	ldrh	r3, [r3, #2]
 80091f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80091fc:	d813      	bhi.n	8009226 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009202:	8afa      	ldrh	r2, [r7, #22]
 8009204:	429a      	cmp	r2, r3
 8009206:	d004      	beq.n	8009212 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	881b      	ldrh	r3, [r3, #0]
 800920c:	8afa      	ldrh	r2, [r7, #22]
 800920e:	429a      	cmp	r2, r3
 8009210:	d109      	bne.n	8009226 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009212:	4b08      	ldr	r3, [pc, #32]	; (8009234 <mem_link_valid+0x74>)
 8009214:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	429a      	cmp	r2, r3
 800921a:	d006      	beq.n	800922a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	885b      	ldrh	r3, [r3, #2]
 8009220:	8afa      	ldrh	r2, [r7, #22]
 8009222:	429a      	cmp	r2, r3
 8009224:	d001      	beq.n	800922a <mem_link_valid+0x6a>
    return 0;
 8009226:	2300      	movs	r3, #0
 8009228:	e000      	b.n	800922c <mem_link_valid+0x6c>
  }
  return 1;
 800922a:	2301      	movs	r3, #1
}
 800922c:	4618      	mov	r0, r3
 800922e:	3718      	adds	r7, #24
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	200003a8 	.word	0x200003a8

08009238 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d04c      	beq.n	80092e0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f003 0303 	and.w	r3, r3, #3
 800924c:	2b00      	cmp	r3, #0
 800924e:	d007      	beq.n	8009260 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009250:	4b25      	ldr	r3, [pc, #148]	; (80092e8 <mem_free+0xb0>)
 8009252:	f240 2273 	movw	r2, #627	; 0x273
 8009256:	4925      	ldr	r1, [pc, #148]	; (80092ec <mem_free+0xb4>)
 8009258:	4825      	ldr	r0, [pc, #148]	; (80092f0 <mem_free+0xb8>)
 800925a:	f00c f981 	bl	8015560 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800925e:	e040      	b.n	80092e2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	3b08      	subs	r3, #8
 8009264:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009266:	4b23      	ldr	r3, [pc, #140]	; (80092f4 <mem_free+0xbc>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	429a      	cmp	r2, r3
 800926e:	d306      	bcc.n	800927e <mem_free+0x46>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f103 020c 	add.w	r2, r3, #12
 8009276:	4b20      	ldr	r3, [pc, #128]	; (80092f8 <mem_free+0xc0>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	429a      	cmp	r2, r3
 800927c:	d907      	bls.n	800928e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800927e:	4b1a      	ldr	r3, [pc, #104]	; (80092e8 <mem_free+0xb0>)
 8009280:	f240 227f 	movw	r2, #639	; 0x27f
 8009284:	491d      	ldr	r1, [pc, #116]	; (80092fc <mem_free+0xc4>)
 8009286:	481a      	ldr	r0, [pc, #104]	; (80092f0 <mem_free+0xb8>)
 8009288:	f00c f96a 	bl	8015560 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800928c:	e029      	b.n	80092e2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	791b      	ldrb	r3, [r3, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d107      	bne.n	80092a6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009296:	4b14      	ldr	r3, [pc, #80]	; (80092e8 <mem_free+0xb0>)
 8009298:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800929c:	4918      	ldr	r1, [pc, #96]	; (8009300 <mem_free+0xc8>)
 800929e:	4814      	ldr	r0, [pc, #80]	; (80092f0 <mem_free+0xb8>)
 80092a0:	f00c f95e 	bl	8015560 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80092a4:	e01d      	b.n	80092e2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f7ff ff8a 	bl	80091c0 <mem_link_valid>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d107      	bne.n	80092c2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80092b2:	4b0d      	ldr	r3, [pc, #52]	; (80092e8 <mem_free+0xb0>)
 80092b4:	f240 2295 	movw	r2, #661	; 0x295
 80092b8:	4912      	ldr	r1, [pc, #72]	; (8009304 <mem_free+0xcc>)
 80092ba:	480d      	ldr	r0, [pc, #52]	; (80092f0 <mem_free+0xb8>)
 80092bc:	f00c f950 	bl	8015560 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80092c0:	e00f      	b.n	80092e2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80092c8:	4b0f      	ldr	r3, [pc, #60]	; (8009308 <mem_free+0xd0>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d202      	bcs.n	80092d8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80092d2:	4a0d      	ldr	r2, [pc, #52]	; (8009308 <mem_free+0xd0>)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f7ff fe93 	bl	8009004 <plug_holes>
 80092de:	e000      	b.n	80092e2 <mem_free+0xaa>
    return;
 80092e0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	08018e14 	.word	0x08018e14
 80092ec:	08018ee8 	.word	0x08018ee8
 80092f0:	08018e5c 	.word	0x08018e5c
 80092f4:	200003a4 	.word	0x200003a4
 80092f8:	200003a8 	.word	0x200003a8
 80092fc:	08018f0c 	.word	0x08018f0c
 8009300:	08018f28 	.word	0x08018f28
 8009304:	08018f50 	.word	0x08018f50
 8009308:	200003ac 	.word	0x200003ac

0800930c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b088      	sub	sp, #32
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	460b      	mov	r3, r1
 8009316:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009318:	887b      	ldrh	r3, [r7, #2]
 800931a:	3303      	adds	r3, #3
 800931c:	b29b      	uxth	r3, r3
 800931e:	f023 0303 	bic.w	r3, r3, #3
 8009322:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8009324:	8bfb      	ldrh	r3, [r7, #30]
 8009326:	2b0b      	cmp	r3, #11
 8009328:	d801      	bhi.n	800932e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800932a:	230c      	movs	r3, #12
 800932c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800932e:	8bfb      	ldrh	r3, [r7, #30]
 8009330:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009334:	d803      	bhi.n	800933e <mem_trim+0x32>
 8009336:	8bfa      	ldrh	r2, [r7, #30]
 8009338:	887b      	ldrh	r3, [r7, #2]
 800933a:	429a      	cmp	r2, r3
 800933c:	d201      	bcs.n	8009342 <mem_trim+0x36>
    return NULL;
 800933e:	2300      	movs	r3, #0
 8009340:	e0cc      	b.n	80094dc <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009342:	4b68      	ldr	r3, [pc, #416]	; (80094e4 <mem_trim+0x1d8>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	429a      	cmp	r2, r3
 800934a:	d304      	bcc.n	8009356 <mem_trim+0x4a>
 800934c:	4b66      	ldr	r3, [pc, #408]	; (80094e8 <mem_trim+0x1dc>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	429a      	cmp	r2, r3
 8009354:	d306      	bcc.n	8009364 <mem_trim+0x58>
 8009356:	4b65      	ldr	r3, [pc, #404]	; (80094ec <mem_trim+0x1e0>)
 8009358:	f240 22d1 	movw	r2, #721	; 0x2d1
 800935c:	4964      	ldr	r1, [pc, #400]	; (80094f0 <mem_trim+0x1e4>)
 800935e:	4865      	ldr	r0, [pc, #404]	; (80094f4 <mem_trim+0x1e8>)
 8009360:	f00c f8fe 	bl	8015560 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009364:	4b5f      	ldr	r3, [pc, #380]	; (80094e4 <mem_trim+0x1d8>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	429a      	cmp	r2, r3
 800936c:	d304      	bcc.n	8009378 <mem_trim+0x6c>
 800936e:	4b5e      	ldr	r3, [pc, #376]	; (80094e8 <mem_trim+0x1dc>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	429a      	cmp	r2, r3
 8009376:	d301      	bcc.n	800937c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	e0af      	b.n	80094dc <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	3b08      	subs	r3, #8
 8009380:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009382:	69b8      	ldr	r0, [r7, #24]
 8009384:	f7ff fe2c 	bl	8008fe0 <mem_to_ptr>
 8009388:	4603      	mov	r3, r0
 800938a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	881a      	ldrh	r2, [r3, #0]
 8009390:	8afb      	ldrh	r3, [r7, #22]
 8009392:	1ad3      	subs	r3, r2, r3
 8009394:	b29b      	uxth	r3, r3
 8009396:	3b08      	subs	r3, #8
 8009398:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800939a:	8bfa      	ldrh	r2, [r7, #30]
 800939c:	8abb      	ldrh	r3, [r7, #20]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d906      	bls.n	80093b0 <mem_trim+0xa4>
 80093a2:	4b52      	ldr	r3, [pc, #328]	; (80094ec <mem_trim+0x1e0>)
 80093a4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80093a8:	4953      	ldr	r1, [pc, #332]	; (80094f8 <mem_trim+0x1ec>)
 80093aa:	4852      	ldr	r0, [pc, #328]	; (80094f4 <mem_trim+0x1e8>)
 80093ac:	f00c f8d8 	bl	8015560 <iprintf>
  if (newsize > size) {
 80093b0:	8bfa      	ldrh	r2, [r7, #30]
 80093b2:	8abb      	ldrh	r3, [r7, #20]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d901      	bls.n	80093bc <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80093b8:	2300      	movs	r3, #0
 80093ba:	e08f      	b.n	80094dc <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80093bc:	8bfa      	ldrh	r2, [r7, #30]
 80093be:	8abb      	ldrh	r3, [r7, #20]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d101      	bne.n	80093c8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	e089      	b.n	80094dc <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	881b      	ldrh	r3, [r3, #0]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7ff fdf5 	bl	8008fbc <ptr_to_mem>
 80093d2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	791b      	ldrb	r3, [r3, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d13f      	bne.n	800945c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	881b      	ldrh	r3, [r3, #0]
 80093e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80093e4:	d106      	bne.n	80093f4 <mem_trim+0xe8>
 80093e6:	4b41      	ldr	r3, [pc, #260]	; (80094ec <mem_trim+0x1e0>)
 80093e8:	f240 22f5 	movw	r2, #757	; 0x2f5
 80093ec:	4943      	ldr	r1, [pc, #268]	; (80094fc <mem_trim+0x1f0>)
 80093ee:	4841      	ldr	r0, [pc, #260]	; (80094f4 <mem_trim+0x1e8>)
 80093f0:	f00c f8b6 	bl	8015560 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	881b      	ldrh	r3, [r3, #0]
 80093f8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80093fa:	8afa      	ldrh	r2, [r7, #22]
 80093fc:	8bfb      	ldrh	r3, [r7, #30]
 80093fe:	4413      	add	r3, r2
 8009400:	b29b      	uxth	r3, r3
 8009402:	3308      	adds	r3, #8
 8009404:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009406:	4b3e      	ldr	r3, [pc, #248]	; (8009500 <mem_trim+0x1f4>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	693a      	ldr	r2, [r7, #16]
 800940c:	429a      	cmp	r2, r3
 800940e:	d106      	bne.n	800941e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8009410:	89fb      	ldrh	r3, [r7, #14]
 8009412:	4618      	mov	r0, r3
 8009414:	f7ff fdd2 	bl	8008fbc <ptr_to_mem>
 8009418:	4603      	mov	r3, r0
 800941a:	4a39      	ldr	r2, [pc, #228]	; (8009500 <mem_trim+0x1f4>)
 800941c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800941e:	89fb      	ldrh	r3, [r7, #14]
 8009420:	4618      	mov	r0, r3
 8009422:	f7ff fdcb 	bl	8008fbc <ptr_to_mem>
 8009426:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	2200      	movs	r2, #0
 800942c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	89ba      	ldrh	r2, [r7, #12]
 8009432:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	8afa      	ldrh	r2, [r7, #22]
 8009438:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	89fa      	ldrh	r2, [r7, #14]
 800943e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	881b      	ldrh	r3, [r3, #0]
 8009444:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009448:	d047      	beq.n	80094da <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	881b      	ldrh	r3, [r3, #0]
 800944e:	4618      	mov	r0, r3
 8009450:	f7ff fdb4 	bl	8008fbc <ptr_to_mem>
 8009454:	4602      	mov	r2, r0
 8009456:	89fb      	ldrh	r3, [r7, #14]
 8009458:	8053      	strh	r3, [r2, #2]
 800945a:	e03e      	b.n	80094da <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800945c:	8bfb      	ldrh	r3, [r7, #30]
 800945e:	f103 0214 	add.w	r2, r3, #20
 8009462:	8abb      	ldrh	r3, [r7, #20]
 8009464:	429a      	cmp	r2, r3
 8009466:	d838      	bhi.n	80094da <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009468:	8afa      	ldrh	r2, [r7, #22]
 800946a:	8bfb      	ldrh	r3, [r7, #30]
 800946c:	4413      	add	r3, r2
 800946e:	b29b      	uxth	r3, r3
 8009470:	3308      	adds	r3, #8
 8009472:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	881b      	ldrh	r3, [r3, #0]
 8009478:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800947c:	d106      	bne.n	800948c <mem_trim+0x180>
 800947e:	4b1b      	ldr	r3, [pc, #108]	; (80094ec <mem_trim+0x1e0>)
 8009480:	f240 3216 	movw	r2, #790	; 0x316
 8009484:	491d      	ldr	r1, [pc, #116]	; (80094fc <mem_trim+0x1f0>)
 8009486:	481b      	ldr	r0, [pc, #108]	; (80094f4 <mem_trim+0x1e8>)
 8009488:	f00c f86a 	bl	8015560 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800948c:	89fb      	ldrh	r3, [r7, #14]
 800948e:	4618      	mov	r0, r3
 8009490:	f7ff fd94 	bl	8008fbc <ptr_to_mem>
 8009494:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009496:	4b1a      	ldr	r3, [pc, #104]	; (8009500 <mem_trim+0x1f4>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	693a      	ldr	r2, [r7, #16]
 800949c:	429a      	cmp	r2, r3
 800949e:	d202      	bcs.n	80094a6 <mem_trim+0x19a>
      lfree = mem2;
 80094a0:	4a17      	ldr	r2, [pc, #92]	; (8009500 <mem_trim+0x1f4>)
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	2200      	movs	r2, #0
 80094aa:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	881a      	ldrh	r2, [r3, #0]
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	8afa      	ldrh	r2, [r7, #22]
 80094b8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	89fa      	ldrh	r2, [r7, #14]
 80094be:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	881b      	ldrh	r3, [r3, #0]
 80094c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80094c8:	d007      	beq.n	80094da <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	881b      	ldrh	r3, [r3, #0]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7ff fd74 	bl	8008fbc <ptr_to_mem>
 80094d4:	4602      	mov	r2, r0
 80094d6:	89fb      	ldrh	r3, [r7, #14]
 80094d8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80094da:	687b      	ldr	r3, [r7, #4]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3720      	adds	r7, #32
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	200003a4 	.word	0x200003a4
 80094e8:	200003a8 	.word	0x200003a8
 80094ec:	08018e14 	.word	0x08018e14
 80094f0:	08018f84 	.word	0x08018f84
 80094f4:	08018e5c 	.word	0x08018e5c
 80094f8:	08018f9c 	.word	0x08018f9c
 80094fc:	08018fbc 	.word	0x08018fbc
 8009500:	200003ac 	.word	0x200003ac

08009504 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b088      	sub	sp, #32
 8009508:	af00      	add	r7, sp, #0
 800950a:	4603      	mov	r3, r0
 800950c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800950e:	88fb      	ldrh	r3, [r7, #6]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d101      	bne.n	8009518 <mem_malloc+0x14>
    return NULL;
 8009514:	2300      	movs	r3, #0
 8009516:	e0d9      	b.n	80096cc <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009518:	88fb      	ldrh	r3, [r7, #6]
 800951a:	3303      	adds	r3, #3
 800951c:	b29b      	uxth	r3, r3
 800951e:	f023 0303 	bic.w	r3, r3, #3
 8009522:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009524:	8bbb      	ldrh	r3, [r7, #28]
 8009526:	2b0b      	cmp	r3, #11
 8009528:	d801      	bhi.n	800952e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800952a:	230c      	movs	r3, #12
 800952c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800952e:	8bbb      	ldrh	r3, [r7, #28]
 8009530:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009534:	d803      	bhi.n	800953e <mem_malloc+0x3a>
 8009536:	8bba      	ldrh	r2, [r7, #28]
 8009538:	88fb      	ldrh	r3, [r7, #6]
 800953a:	429a      	cmp	r2, r3
 800953c:	d201      	bcs.n	8009542 <mem_malloc+0x3e>
    return NULL;
 800953e:	2300      	movs	r3, #0
 8009540:	e0c4      	b.n	80096cc <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009542:	4b64      	ldr	r3, [pc, #400]	; (80096d4 <mem_malloc+0x1d0>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4618      	mov	r0, r3
 8009548:	f7ff fd4a 	bl	8008fe0 <mem_to_ptr>
 800954c:	4603      	mov	r3, r0
 800954e:	83fb      	strh	r3, [r7, #30]
 8009550:	e0b4      	b.n	80096bc <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009552:	8bfb      	ldrh	r3, [r7, #30]
 8009554:	4618      	mov	r0, r3
 8009556:	f7ff fd31 	bl	8008fbc <ptr_to_mem>
 800955a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	791b      	ldrb	r3, [r3, #4]
 8009560:	2b00      	cmp	r3, #0
 8009562:	f040 80a4 	bne.w	80096ae <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	881b      	ldrh	r3, [r3, #0]
 800956a:	461a      	mov	r2, r3
 800956c:	8bfb      	ldrh	r3, [r7, #30]
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	f1a3 0208 	sub.w	r2, r3, #8
 8009574:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009576:	429a      	cmp	r2, r3
 8009578:	f0c0 8099 	bcc.w	80096ae <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	881b      	ldrh	r3, [r3, #0]
 8009580:	461a      	mov	r2, r3
 8009582:	8bfb      	ldrh	r3, [r7, #30]
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	f1a3 0208 	sub.w	r2, r3, #8
 800958a:	8bbb      	ldrh	r3, [r7, #28]
 800958c:	3314      	adds	r3, #20
 800958e:	429a      	cmp	r2, r3
 8009590:	d333      	bcc.n	80095fa <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009592:	8bfa      	ldrh	r2, [r7, #30]
 8009594:	8bbb      	ldrh	r3, [r7, #28]
 8009596:	4413      	add	r3, r2
 8009598:	b29b      	uxth	r3, r3
 800959a:	3308      	adds	r3, #8
 800959c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800959e:	8a7b      	ldrh	r3, [r7, #18]
 80095a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80095a4:	d106      	bne.n	80095b4 <mem_malloc+0xb0>
 80095a6:	4b4c      	ldr	r3, [pc, #304]	; (80096d8 <mem_malloc+0x1d4>)
 80095a8:	f240 3287 	movw	r2, #903	; 0x387
 80095ac:	494b      	ldr	r1, [pc, #300]	; (80096dc <mem_malloc+0x1d8>)
 80095ae:	484c      	ldr	r0, [pc, #304]	; (80096e0 <mem_malloc+0x1dc>)
 80095b0:	f00b ffd6 	bl	8015560 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80095b4:	8a7b      	ldrh	r3, [r7, #18]
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7ff fd00 	bl	8008fbc <ptr_to_mem>
 80095bc:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	881a      	ldrh	r2, [r3, #0]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	8bfa      	ldrh	r2, [r7, #30]
 80095d0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	8a7a      	ldrh	r2, [r7, #18]
 80095d6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	2201      	movs	r2, #1
 80095dc:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	881b      	ldrh	r3, [r3, #0]
 80095e2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80095e6:	d00b      	beq.n	8009600 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	881b      	ldrh	r3, [r3, #0]
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7ff fce5 	bl	8008fbc <ptr_to_mem>
 80095f2:	4602      	mov	r2, r0
 80095f4:	8a7b      	ldrh	r3, [r7, #18]
 80095f6:	8053      	strh	r3, [r2, #2]
 80095f8:	e002      	b.n	8009600 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2201      	movs	r2, #1
 80095fe:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009600:	4b34      	ldr	r3, [pc, #208]	; (80096d4 <mem_malloc+0x1d0>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	429a      	cmp	r2, r3
 8009608:	d127      	bne.n	800965a <mem_malloc+0x156>
          struct mem *cur = lfree;
 800960a:	4b32      	ldr	r3, [pc, #200]	; (80096d4 <mem_malloc+0x1d0>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009610:	e005      	b.n	800961e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	881b      	ldrh	r3, [r3, #0]
 8009616:	4618      	mov	r0, r3
 8009618:	f7ff fcd0 	bl	8008fbc <ptr_to_mem>
 800961c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	791b      	ldrb	r3, [r3, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d004      	beq.n	8009630 <mem_malloc+0x12c>
 8009626:	4b2f      	ldr	r3, [pc, #188]	; (80096e4 <mem_malloc+0x1e0>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	69ba      	ldr	r2, [r7, #24]
 800962c:	429a      	cmp	r2, r3
 800962e:	d1f0      	bne.n	8009612 <mem_malloc+0x10e>
          }
          lfree = cur;
 8009630:	4a28      	ldr	r2, [pc, #160]	; (80096d4 <mem_malloc+0x1d0>)
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009636:	4b27      	ldr	r3, [pc, #156]	; (80096d4 <mem_malloc+0x1d0>)
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	4b2a      	ldr	r3, [pc, #168]	; (80096e4 <mem_malloc+0x1e0>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	429a      	cmp	r2, r3
 8009640:	d00b      	beq.n	800965a <mem_malloc+0x156>
 8009642:	4b24      	ldr	r3, [pc, #144]	; (80096d4 <mem_malloc+0x1d0>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	791b      	ldrb	r3, [r3, #4]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d006      	beq.n	800965a <mem_malloc+0x156>
 800964c:	4b22      	ldr	r3, [pc, #136]	; (80096d8 <mem_malloc+0x1d4>)
 800964e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009652:	4925      	ldr	r1, [pc, #148]	; (80096e8 <mem_malloc+0x1e4>)
 8009654:	4822      	ldr	r0, [pc, #136]	; (80096e0 <mem_malloc+0x1dc>)
 8009656:	f00b ff83 	bl	8015560 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800965a:	8bba      	ldrh	r2, [r7, #28]
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	4413      	add	r3, r2
 8009660:	3308      	adds	r3, #8
 8009662:	4a20      	ldr	r2, [pc, #128]	; (80096e4 <mem_malloc+0x1e0>)
 8009664:	6812      	ldr	r2, [r2, #0]
 8009666:	4293      	cmp	r3, r2
 8009668:	d906      	bls.n	8009678 <mem_malloc+0x174>
 800966a:	4b1b      	ldr	r3, [pc, #108]	; (80096d8 <mem_malloc+0x1d4>)
 800966c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009670:	491e      	ldr	r1, [pc, #120]	; (80096ec <mem_malloc+0x1e8>)
 8009672:	481b      	ldr	r0, [pc, #108]	; (80096e0 <mem_malloc+0x1dc>)
 8009674:	f00b ff74 	bl	8015560 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	f003 0303 	and.w	r3, r3, #3
 800967e:	2b00      	cmp	r3, #0
 8009680:	d006      	beq.n	8009690 <mem_malloc+0x18c>
 8009682:	4b15      	ldr	r3, [pc, #84]	; (80096d8 <mem_malloc+0x1d4>)
 8009684:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009688:	4919      	ldr	r1, [pc, #100]	; (80096f0 <mem_malloc+0x1ec>)
 800968a:	4815      	ldr	r0, [pc, #84]	; (80096e0 <mem_malloc+0x1dc>)
 800968c:	f00b ff68 	bl	8015560 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	f003 0303 	and.w	r3, r3, #3
 8009696:	2b00      	cmp	r3, #0
 8009698:	d006      	beq.n	80096a8 <mem_malloc+0x1a4>
 800969a:	4b0f      	ldr	r3, [pc, #60]	; (80096d8 <mem_malloc+0x1d4>)
 800969c:	f240 32bd 	movw	r2, #957	; 0x3bd
 80096a0:	4914      	ldr	r1, [pc, #80]	; (80096f4 <mem_malloc+0x1f0>)
 80096a2:	480f      	ldr	r0, [pc, #60]	; (80096e0 <mem_malloc+0x1dc>)
 80096a4:	f00b ff5c 	bl	8015560 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	3308      	adds	r3, #8
 80096ac:	e00e      	b.n	80096cc <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80096ae:	8bfb      	ldrh	r3, [r7, #30]
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7ff fc83 	bl	8008fbc <ptr_to_mem>
 80096b6:	4603      	mov	r3, r0
 80096b8:	881b      	ldrh	r3, [r3, #0]
 80096ba:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80096bc:	8bfa      	ldrh	r2, [r7, #30]
 80096be:	8bbb      	ldrh	r3, [r7, #28]
 80096c0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80096c4:	429a      	cmp	r2, r3
 80096c6:	f4ff af44 	bcc.w	8009552 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3720      	adds	r7, #32
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	200003ac 	.word	0x200003ac
 80096d8:	08018e14 	.word	0x08018e14
 80096dc:	08018fbc 	.word	0x08018fbc
 80096e0:	08018e5c 	.word	0x08018e5c
 80096e4:	200003a8 	.word	0x200003a8
 80096e8:	08018fd0 	.word	0x08018fd0
 80096ec:	08018fec 	.word	0x08018fec
 80096f0:	0801901c 	.word	0x0801901c
 80096f4:	0801904c 	.word	0x0801904c

080096f8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	2200      	movs	r2, #0
 8009706:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	3303      	adds	r3, #3
 800970e:	f023 0303 	bic.w	r3, r3, #3
 8009712:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009714:	2300      	movs	r3, #0
 8009716:	60fb      	str	r3, [r7, #12]
 8009718:	e011      	b.n	800973e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	68ba      	ldr	r2, [r7, #8]
 800972a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	881b      	ldrh	r3, [r3, #0]
 8009730:	461a      	mov	r2, r3
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	4413      	add	r3, r2
 8009736:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	3301      	adds	r3, #1
 800973c:	60fb      	str	r3, [r7, #12]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	885b      	ldrh	r3, [r3, #2]
 8009742:	461a      	mov	r2, r3
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	4293      	cmp	r3, r2
 8009748:	dbe7      	blt.n	800971a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800974a:	bf00      	nop
 800974c:	bf00      	nop
 800974e:	3714      	adds	r7, #20
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800975e:	2300      	movs	r3, #0
 8009760:	80fb      	strh	r3, [r7, #6]
 8009762:	e009      	b.n	8009778 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009764:	88fb      	ldrh	r3, [r7, #6]
 8009766:	4a08      	ldr	r2, [pc, #32]	; (8009788 <memp_init+0x30>)
 8009768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800976c:	4618      	mov	r0, r3
 800976e:	f7ff ffc3 	bl	80096f8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009772:	88fb      	ldrh	r3, [r7, #6]
 8009774:	3301      	adds	r3, #1
 8009776:	80fb      	strh	r3, [r7, #6]
 8009778:	88fb      	ldrh	r3, [r7, #6]
 800977a:	2b08      	cmp	r3, #8
 800977c:	d9f2      	bls.n	8009764 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800977e:	bf00      	nop
 8009780:	bf00      	nop
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	0801bbcc 	.word	0x0801bbcc

0800978c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d012      	beq.n	80097c8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	6812      	ldr	r2, [r2, #0]
 80097aa:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f003 0303 	and.w	r3, r3, #3
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d006      	beq.n	80097c4 <do_memp_malloc_pool+0x38>
 80097b6:	4b07      	ldr	r3, [pc, #28]	; (80097d4 <do_memp_malloc_pool+0x48>)
 80097b8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80097bc:	4906      	ldr	r1, [pc, #24]	; (80097d8 <do_memp_malloc_pool+0x4c>)
 80097be:	4807      	ldr	r0, [pc, #28]	; (80097dc <do_memp_malloc_pool+0x50>)
 80097c0:	f00b fece 	bl	8015560 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	e000      	b.n	80097ca <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	08019070 	.word	0x08019070
 80097d8:	080190a0 	.word	0x080190a0
 80097dc:	080190c4 	.word	0x080190c4

080097e0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	4603      	mov	r3, r0
 80097e8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80097ea:	79fb      	ldrb	r3, [r7, #7]
 80097ec:	2b08      	cmp	r3, #8
 80097ee:	d908      	bls.n	8009802 <memp_malloc+0x22>
 80097f0:	4b0a      	ldr	r3, [pc, #40]	; (800981c <memp_malloc+0x3c>)
 80097f2:	f240 1257 	movw	r2, #343	; 0x157
 80097f6:	490a      	ldr	r1, [pc, #40]	; (8009820 <memp_malloc+0x40>)
 80097f8:	480a      	ldr	r0, [pc, #40]	; (8009824 <memp_malloc+0x44>)
 80097fa:	f00b feb1 	bl	8015560 <iprintf>
 80097fe:	2300      	movs	r3, #0
 8009800:	e008      	b.n	8009814 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009802:	79fb      	ldrb	r3, [r7, #7]
 8009804:	4a08      	ldr	r2, [pc, #32]	; (8009828 <memp_malloc+0x48>)
 8009806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800980a:	4618      	mov	r0, r3
 800980c:	f7ff ffbe 	bl	800978c <do_memp_malloc_pool>
 8009810:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009812:	68fb      	ldr	r3, [r7, #12]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	08019070 	.word	0x08019070
 8009820:	08019100 	.word	0x08019100
 8009824:	080190c4 	.word	0x080190c4
 8009828:	0801bbcc 	.word	0x0801bbcc

0800982c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	f003 0303 	and.w	r3, r3, #3
 800983c:	2b00      	cmp	r3, #0
 800983e:	d006      	beq.n	800984e <do_memp_free_pool+0x22>
 8009840:	4b0a      	ldr	r3, [pc, #40]	; (800986c <do_memp_free_pool+0x40>)
 8009842:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009846:	490a      	ldr	r1, [pc, #40]	; (8009870 <do_memp_free_pool+0x44>)
 8009848:	480a      	ldr	r0, [pc, #40]	; (8009874 <do_memp_free_pool+0x48>)
 800984a:	f00b fe89 	bl	8015560 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009864:	bf00      	nop
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	08019070 	.word	0x08019070
 8009870:	08019120 	.word	0x08019120
 8009874:	080190c4 	.word	0x080190c4

08009878 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	4603      	mov	r3, r0
 8009880:	6039      	str	r1, [r7, #0]
 8009882:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009884:	79fb      	ldrb	r3, [r7, #7]
 8009886:	2b08      	cmp	r3, #8
 8009888:	d907      	bls.n	800989a <memp_free+0x22>
 800988a:	4b0c      	ldr	r3, [pc, #48]	; (80098bc <memp_free+0x44>)
 800988c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009890:	490b      	ldr	r1, [pc, #44]	; (80098c0 <memp_free+0x48>)
 8009892:	480c      	ldr	r0, [pc, #48]	; (80098c4 <memp_free+0x4c>)
 8009894:	f00b fe64 	bl	8015560 <iprintf>
 8009898:	e00c      	b.n	80098b4 <memp_free+0x3c>

  if (mem == NULL) {
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d008      	beq.n	80098b2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80098a0:	79fb      	ldrb	r3, [r7, #7]
 80098a2:	4a09      	ldr	r2, [pc, #36]	; (80098c8 <memp_free+0x50>)
 80098a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098a8:	6839      	ldr	r1, [r7, #0]
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7ff ffbe 	bl	800982c <do_memp_free_pool>
 80098b0:	e000      	b.n	80098b4 <memp_free+0x3c>
    return;
 80098b2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80098b4:	3708      	adds	r7, #8
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	08019070 	.word	0x08019070
 80098c0:	08019140 	.word	0x08019140
 80098c4:	080190c4 	.word	0x080190c4
 80098c8:	0801bbcc 	.word	0x0801bbcc

080098cc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80098cc:	b480      	push	{r7}
 80098ce:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80098d0:	bf00      	nop
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr
	...

080098dc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	607a      	str	r2, [r7, #4]
 80098e8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d108      	bne.n	8009902 <netif_add+0x26>
 80098f0:	4b5b      	ldr	r3, [pc, #364]	; (8009a60 <netif_add+0x184>)
 80098f2:	f240 1227 	movw	r2, #295	; 0x127
 80098f6:	495b      	ldr	r1, [pc, #364]	; (8009a64 <netif_add+0x188>)
 80098f8:	485b      	ldr	r0, [pc, #364]	; (8009a68 <netif_add+0x18c>)
 80098fa:	f00b fe31 	bl	8015560 <iprintf>
 80098fe:	2300      	movs	r3, #0
 8009900:	e0a9      	b.n	8009a56 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009904:	2b00      	cmp	r3, #0
 8009906:	d108      	bne.n	800991a <netif_add+0x3e>
 8009908:	4b55      	ldr	r3, [pc, #340]	; (8009a60 <netif_add+0x184>)
 800990a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800990e:	4957      	ldr	r1, [pc, #348]	; (8009a6c <netif_add+0x190>)
 8009910:	4855      	ldr	r0, [pc, #340]	; (8009a68 <netif_add+0x18c>)
 8009912:	f00b fe25 	bl	8015560 <iprintf>
 8009916:	2300      	movs	r3, #0
 8009918:	e09d      	b.n	8009a56 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d101      	bne.n	8009924 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009920:	4b53      	ldr	r3, [pc, #332]	; (8009a70 <netif_add+0x194>)
 8009922:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d101      	bne.n	800992e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800992a:	4b51      	ldr	r3, [pc, #324]	; (8009a70 <netif_add+0x194>)
 800992c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d101      	bne.n	8009938 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009934:	4b4e      	ldr	r3, [pc, #312]	; (8009a70 <netif_add+0x194>)
 8009936:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2200      	movs	r2, #0
 800993c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	4a49      	ldr	r2, [pc, #292]	; (8009a74 <netif_add+0x198>)
 800994e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2200      	movs	r2, #0
 8009954:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	3324      	adds	r3, #36	; 0x24
 8009962:	2204      	movs	r2, #4
 8009964:	2100      	movs	r1, #0
 8009966:	4618      	mov	r0, r3
 8009968:	f00b f8de 	bl	8014b28 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2200      	movs	r2, #0
 8009970:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6a3a      	ldr	r2, [r7, #32]
 8009976:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009978:	4b3f      	ldr	r3, [pc, #252]	; (8009a78 <netif_add+0x19c>)
 800997a:	781a      	ldrb	r2, [r3, #0]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009986:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	68b9      	ldr	r1, [r7, #8]
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f000 f914 	bl	8009bbc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	4798      	blx	r3
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d001      	beq.n	80099a4 <netif_add+0xc8>
    return NULL;
 80099a0:	2300      	movs	r3, #0
 80099a2:	e058      	b.n	8009a56 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80099aa:	2bff      	cmp	r3, #255	; 0xff
 80099ac:	d103      	bne.n	80099b6 <netif_add+0xda>
        netif->num = 0;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 80099b6:	2300      	movs	r3, #0
 80099b8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80099ba:	4b30      	ldr	r3, [pc, #192]	; (8009a7c <netif_add+0x1a0>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	617b      	str	r3, [r7, #20]
 80099c0:	e02b      	b.n	8009a1a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80099c2:	697a      	ldr	r2, [r7, #20]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d106      	bne.n	80099d8 <netif_add+0xfc>
 80099ca:	4b25      	ldr	r3, [pc, #148]	; (8009a60 <netif_add+0x184>)
 80099cc:	f240 128b 	movw	r2, #395	; 0x18b
 80099d0:	492b      	ldr	r1, [pc, #172]	; (8009a80 <netif_add+0x1a4>)
 80099d2:	4825      	ldr	r0, [pc, #148]	; (8009a68 <netif_add+0x18c>)
 80099d4:	f00b fdc4 	bl	8015560 <iprintf>
        num_netifs++;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	3301      	adds	r3, #1
 80099dc:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	2bff      	cmp	r3, #255	; 0xff
 80099e2:	dd06      	ble.n	80099f2 <netif_add+0x116>
 80099e4:	4b1e      	ldr	r3, [pc, #120]	; (8009a60 <netif_add+0x184>)
 80099e6:	f240 128d 	movw	r2, #397	; 0x18d
 80099ea:	4926      	ldr	r1, [pc, #152]	; (8009a84 <netif_add+0x1a8>)
 80099ec:	481e      	ldr	r0, [pc, #120]	; (8009a68 <netif_add+0x18c>)
 80099ee:	f00b fdb7 	bl	8015560 <iprintf>
        if (netif2->num == netif->num) {
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d108      	bne.n	8009a14 <netif_add+0x138>
          netif->num++;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009a08:	3301      	adds	r3, #1
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8009a12:	e005      	b.n	8009a20 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	617b      	str	r3, [r7, #20]
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1d0      	bne.n	80099c2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d1be      	bne.n	80099a4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009a2c:	2bfe      	cmp	r3, #254	; 0xfe
 8009a2e:	d103      	bne.n	8009a38 <netif_add+0x15c>
    netif_num = 0;
 8009a30:	4b11      	ldr	r3, [pc, #68]	; (8009a78 <netif_add+0x19c>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	701a      	strb	r2, [r3, #0]
 8009a36:	e006      	b.n	8009a46 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009a3e:	3301      	adds	r3, #1
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	4b0d      	ldr	r3, [pc, #52]	; (8009a78 <netif_add+0x19c>)
 8009a44:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009a46:	4b0d      	ldr	r3, [pc, #52]	; (8009a7c <netif_add+0x1a0>)
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009a4e:	4a0b      	ldr	r2, [pc, #44]	; (8009a7c <netif_add+0x1a0>)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009a54:	68fb      	ldr	r3, [r7, #12]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3718      	adds	r7, #24
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	0801915c 	.word	0x0801915c
 8009a64:	080191f0 	.word	0x080191f0
 8009a68:	080191ac 	.word	0x080191ac
 8009a6c:	0801920c 	.word	0x0801920c
 8009a70:	0801bc40 	.word	0x0801bc40
 8009a74:	08009dcf 	.word	0x08009dcf
 8009a78:	200003d4 	.word	0x200003d4
 8009a7c:	20006a10 	.word	0x20006a10
 8009a80:	08019230 	.word	0x08019230
 8009a84:	08019244 	.word	0x08019244

08009a88 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f002 facf 	bl	800c038 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f006 fe6d 	bl	801077c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009aa2:	bf00      	nop
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
	...

08009aac <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d106      	bne.n	8009acc <netif_do_set_ipaddr+0x20>
 8009abe:	4b1d      	ldr	r3, [pc, #116]	; (8009b34 <netif_do_set_ipaddr+0x88>)
 8009ac0:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009ac4:	491c      	ldr	r1, [pc, #112]	; (8009b38 <netif_do_set_ipaddr+0x8c>)
 8009ac6:	481d      	ldr	r0, [pc, #116]	; (8009b3c <netif_do_set_ipaddr+0x90>)
 8009ac8:	f00b fd4a 	bl	8015560 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d106      	bne.n	8009ae0 <netif_do_set_ipaddr+0x34>
 8009ad2:	4b18      	ldr	r3, [pc, #96]	; (8009b34 <netif_do_set_ipaddr+0x88>)
 8009ad4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8009ad8:	4917      	ldr	r1, [pc, #92]	; (8009b38 <netif_do_set_ipaddr+0x8c>)
 8009ada:	4818      	ldr	r0, [pc, #96]	; (8009b3c <netif_do_set_ipaddr+0x90>)
 8009adc:	f00b fd40 	bl	8015560 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	3304      	adds	r3, #4
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d01c      	beq.n	8009b28 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	3304      	adds	r3, #4
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009afe:	f107 0314 	add.w	r3, r7, #20
 8009b02:	4619      	mov	r1, r3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f7ff ffbf 	bl	8009a88 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d002      	beq.n	8009b16 <netif_do_set_ipaddr+0x6a>
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	e000      	b.n	8009b18 <netif_do_set_ipaddr+0x6c>
 8009b16:	2300      	movs	r3, #0
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009b1c:	2101      	movs	r1, #1
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f000 f8d2 	bl	8009cc8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009b24:	2301      	movs	r3, #1
 8009b26:	e000      	b.n	8009b2a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3718      	adds	r7, #24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	0801915c 	.word	0x0801915c
 8009b38:	08019274 	.word	0x08019274
 8009b3c:	080191ac 	.word	0x080191ac

08009b40 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	3308      	adds	r3, #8
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d00a      	beq.n	8009b70 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d002      	beq.n	8009b66 <netif_do_set_netmask+0x26>
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	e000      	b.n	8009b68 <netif_do_set_netmask+0x28>
 8009b66:	2300      	movs	r3, #0
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e000      	b.n	8009b72 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3714      	adds	r7, #20
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr

08009b7e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009b7e:	b480      	push	{r7}
 8009b80:	b085      	sub	sp, #20
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	60f8      	str	r0, [r7, #12]
 8009b86:	60b9      	str	r1, [r7, #8]
 8009b88:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	330c      	adds	r3, #12
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d00a      	beq.n	8009bae <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d002      	beq.n	8009ba4 <netif_do_set_gw+0x26>
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	e000      	b.n	8009ba6 <netif_do_set_gw+0x28>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8009baa:	2301      	movs	r3, #1
 8009bac:	e000      	b.n	8009bb0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3714      	adds	r7, #20
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b088      	sub	sp, #32
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
 8009bc8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d101      	bne.n	8009bdc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009bd8:	4b1c      	ldr	r3, [pc, #112]	; (8009c4c <netif_set_addr+0x90>)
 8009bda:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d101      	bne.n	8009be6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009be2:	4b1a      	ldr	r3, [pc, #104]	; (8009c4c <netif_set_addr+0x90>)
 8009be4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d101      	bne.n	8009bf0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009bec:	4b17      	ldr	r3, [pc, #92]	; (8009c4c <netif_set_addr+0x90>)
 8009bee:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d003      	beq.n	8009bfe <netif_set_addr+0x42>
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d101      	bne.n	8009c02 <netif_set_addr+0x46>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e000      	b.n	8009c04 <netif_set_addr+0x48>
 8009c02:	2300      	movs	r3, #0
 8009c04:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d006      	beq.n	8009c1a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009c0c:	f107 0310 	add.w	r3, r7, #16
 8009c10:	461a      	mov	r2, r3
 8009c12:	68b9      	ldr	r1, [r7, #8]
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f7ff ff49 	bl	8009aac <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009c1a:	69fa      	ldr	r2, [r7, #28]
 8009c1c:	6879      	ldr	r1, [r7, #4]
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f7ff ff8e 	bl	8009b40 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009c24:	69ba      	ldr	r2, [r7, #24]
 8009c26:	6839      	ldr	r1, [r7, #0]
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	f7ff ffa8 	bl	8009b7e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d106      	bne.n	8009c42 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009c34:	f107 0310 	add.w	r3, r7, #16
 8009c38:	461a      	mov	r2, r3
 8009c3a:	68b9      	ldr	r1, [r7, #8]
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	f7ff ff35 	bl	8009aac <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009c42:	bf00      	nop
 8009c44:	3720      	adds	r7, #32
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	0801bc40 	.word	0x0801bc40

08009c50 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009c58:	4a04      	ldr	r2, [pc, #16]	; (8009c6c <netif_set_default+0x1c>)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009c5e:	bf00      	nop
 8009c60:	370c      	adds	r7, #12
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	20006a14 	.word	0x20006a14

08009c70 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d107      	bne.n	8009c8e <netif_set_up+0x1e>
 8009c7e:	4b0f      	ldr	r3, [pc, #60]	; (8009cbc <netif_set_up+0x4c>)
 8009c80:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009c84:	490e      	ldr	r1, [pc, #56]	; (8009cc0 <netif_set_up+0x50>)
 8009c86:	480f      	ldr	r0, [pc, #60]	; (8009cc4 <netif_set_up+0x54>)
 8009c88:	f00b fc6a 	bl	8015560 <iprintf>
 8009c8c:	e013      	b.n	8009cb6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009c94:	f003 0301 	and.w	r3, r3, #1
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d10c      	bne.n	8009cb6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009ca2:	f043 0301 	orr.w	r3, r3, #1
 8009ca6:	b2da      	uxtb	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009cae:	2103      	movs	r1, #3
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 f809 	bl	8009cc8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	0801915c 	.word	0x0801915c
 8009cc0:	080192e4 	.word	0x080192e4
 8009cc4:	080191ac 	.word	0x080191ac

08009cc8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d106      	bne.n	8009ce8 <netif_issue_reports+0x20>
 8009cda:	4b18      	ldr	r3, [pc, #96]	; (8009d3c <netif_issue_reports+0x74>)
 8009cdc:	f240 326d 	movw	r2, #877	; 0x36d
 8009ce0:	4917      	ldr	r1, [pc, #92]	; (8009d40 <netif_issue_reports+0x78>)
 8009ce2:	4818      	ldr	r0, [pc, #96]	; (8009d44 <netif_issue_reports+0x7c>)
 8009ce4:	f00b fc3c 	bl	8015560 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009cee:	f003 0304 	and.w	r3, r3, #4
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d01e      	beq.n	8009d34 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009cfc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d017      	beq.n	8009d34 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009d04:	78fb      	ldrb	r3, [r7, #3]
 8009d06:	f003 0301 	and.w	r3, r3, #1
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d013      	beq.n	8009d36 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	3304      	adds	r3, #4
 8009d12:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00e      	beq.n	8009d36 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009d1e:	f003 0308 	and.w	r3, r3, #8
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d007      	beq.n	8009d36 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	3304      	adds	r3, #4
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f009 fae9 	bl	8013304 <etharp_request>
 8009d32:	e000      	b.n	8009d36 <netif_issue_reports+0x6e>
    return;
 8009d34:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009d36:	3708      	adds	r7, #8
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	0801915c 	.word	0x0801915c
 8009d40:	08019300 	.word	0x08019300
 8009d44:	080191ac 	.word	0x080191ac

08009d48 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d107      	bne.n	8009d66 <netif_set_down+0x1e>
 8009d56:	4b12      	ldr	r3, [pc, #72]	; (8009da0 <netif_set_down+0x58>)
 8009d58:	f240 329b 	movw	r2, #923	; 0x39b
 8009d5c:	4911      	ldr	r1, [pc, #68]	; (8009da4 <netif_set_down+0x5c>)
 8009d5e:	4812      	ldr	r0, [pc, #72]	; (8009da8 <netif_set_down+0x60>)
 8009d60:	f00b fbfe 	bl	8015560 <iprintf>
 8009d64:	e019      	b.n	8009d9a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009d6c:	f003 0301 	and.w	r3, r3, #1
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d012      	beq.n	8009d9a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009d7a:	f023 0301 	bic.w	r3, r3, #1
 8009d7e:	b2da      	uxtb	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009d8c:	f003 0308 	and.w	r3, r3, #8
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d002      	beq.n	8009d9a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f008 fe6f 	bl	8012a78 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	0801915c 	.word	0x0801915c
 8009da4:	08019324 	.word	0x08019324
 8009da8:	080191ac 	.word	0x080191ac

08009dac <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d002      	beq.n	8009dc2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	683a      	ldr	r2, [r7, #0]
 8009dc0:	61da      	str	r2, [r3, #28]
  }
}
 8009dc2:	bf00      	nop
 8009dc4:	370c      	adds	r7, #12
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr

08009dce <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8009dce:	b480      	push	{r7}
 8009dd0:	b085      	sub	sp, #20
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	60f8      	str	r0, [r7, #12]
 8009dd6:	60b9      	str	r1, [r7, #8]
 8009dd8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009dda:	f06f 030b 	mvn.w	r3, #11
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3714      	adds	r7, #20
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
	...

08009dec <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	4603      	mov	r3, r0
 8009df4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009df6:	79fb      	ldrb	r3, [r7, #7]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d013      	beq.n	8009e24 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009dfc:	4b0d      	ldr	r3, [pc, #52]	; (8009e34 <netif_get_by_index+0x48>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	60fb      	str	r3, [r7, #12]
 8009e02:	e00c      	b.n	8009e1e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	79fa      	ldrb	r2, [r7, #7]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d101      	bne.n	8009e18 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	e006      	b.n	8009e26 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	60fb      	str	r3, [r7, #12]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d1ef      	bne.n	8009e04 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009e24:	2300      	movs	r3, #0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3714      	adds	r7, #20
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	20006a10 	.word	0x20006a10

08009e38 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8009e3c:	4b03      	ldr	r3, [pc, #12]	; (8009e4c <pbuf_pool_is_empty+0x14>)
 8009e3e:	2201      	movs	r2, #1
 8009e40:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009e42:	bf00      	nop
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr
 8009e4c:	20006a18 	.word	0x20006a18

08009e50 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	4611      	mov	r1, r2
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	460b      	mov	r3, r1
 8009e60:	80fb      	strh	r3, [r7, #6]
 8009e62:	4613      	mov	r3, r2
 8009e64:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	88fa      	ldrh	r2, [r7, #6]
 8009e76:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	88ba      	ldrh	r2, [r7, #4]
 8009e7c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8009e7e:	8b3b      	ldrh	r3, [r7, #24]
 8009e80:	b2da      	uxtb	r2, r3
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	7f3a      	ldrb	r2, [r7, #28]
 8009e8a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	73da      	strb	r2, [r3, #15]
}
 8009e98:	bf00      	nop
 8009e9a:	3714      	adds	r7, #20
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b08c      	sub	sp, #48	; 0x30
 8009ea8:	af02      	add	r7, sp, #8
 8009eaa:	4603      	mov	r3, r0
 8009eac:	71fb      	strb	r3, [r7, #7]
 8009eae:	460b      	mov	r3, r1
 8009eb0:	80bb      	strh	r3, [r7, #4]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8009eb6:	79fb      	ldrb	r3, [r7, #7]
 8009eb8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8009eba:	887b      	ldrh	r3, [r7, #2]
 8009ebc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009ec0:	d07f      	beq.n	8009fc2 <pbuf_alloc+0x11e>
 8009ec2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009ec6:	f300 80c8 	bgt.w	800a05a <pbuf_alloc+0x1b6>
 8009eca:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009ece:	d010      	beq.n	8009ef2 <pbuf_alloc+0x4e>
 8009ed0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009ed4:	f300 80c1 	bgt.w	800a05a <pbuf_alloc+0x1b6>
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d002      	beq.n	8009ee2 <pbuf_alloc+0x3e>
 8009edc:	2b41      	cmp	r3, #65	; 0x41
 8009ede:	f040 80bc 	bne.w	800a05a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8009ee2:	887a      	ldrh	r2, [r7, #2]
 8009ee4:	88bb      	ldrh	r3, [r7, #4]
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	2000      	movs	r0, #0
 8009eea:	f000 f8d1 	bl	800a090 <pbuf_alloc_reference>
 8009eee:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8009ef0:	e0bd      	b.n	800a06e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8009efa:	88bb      	ldrh	r3, [r7, #4]
 8009efc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009efe:	2008      	movs	r0, #8
 8009f00:	f7ff fc6e 	bl	80097e0 <memp_malloc>
 8009f04:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d109      	bne.n	8009f20 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009f0c:	f7ff ff94 	bl	8009e38 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8009f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d002      	beq.n	8009f1c <pbuf_alloc+0x78>
            pbuf_free(p);
 8009f16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f18:	f000 faa8 	bl	800a46c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	e0a7      	b.n	800a070 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009f20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f22:	3303      	adds	r3, #3
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	f023 0303 	bic.w	r3, r3, #3
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	f5c3 7301 	rsb	r3, r3, #516	; 0x204
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	8b7a      	ldrh	r2, [r7, #26]
 8009f34:	4293      	cmp	r3, r2
 8009f36:	bf28      	it	cs
 8009f38:	4613      	movcs	r3, r2
 8009f3a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009f3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f3e:	3310      	adds	r3, #16
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	4413      	add	r3, r2
 8009f44:	3303      	adds	r3, #3
 8009f46:	f023 0303 	bic.w	r3, r3, #3
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	89f9      	ldrh	r1, [r7, #14]
 8009f4e:	8b7a      	ldrh	r2, [r7, #26]
 8009f50:	2300      	movs	r3, #0
 8009f52:	9301      	str	r3, [sp, #4]
 8009f54:	887b      	ldrh	r3, [r7, #2]
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	460b      	mov	r3, r1
 8009f5a:	4601      	mov	r1, r0
 8009f5c:	6938      	ldr	r0, [r7, #16]
 8009f5e:	f7ff ff77 	bl	8009e50 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	f003 0303 	and.w	r3, r3, #3
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d006      	beq.n	8009f7c <pbuf_alloc+0xd8>
 8009f6e:	4b42      	ldr	r3, [pc, #264]	; (800a078 <pbuf_alloc+0x1d4>)
 8009f70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f74:	4941      	ldr	r1, [pc, #260]	; (800a07c <pbuf_alloc+0x1d8>)
 8009f76:	4842      	ldr	r0, [pc, #264]	; (800a080 <pbuf_alloc+0x1dc>)
 8009f78:	f00b faf2 	bl	8015560 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009f7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f7e:	3303      	adds	r3, #3
 8009f80:	f023 0303 	bic.w	r3, r3, #3
 8009f84:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8009f88:	d106      	bne.n	8009f98 <pbuf_alloc+0xf4>
 8009f8a:	4b3b      	ldr	r3, [pc, #236]	; (800a078 <pbuf_alloc+0x1d4>)
 8009f8c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009f90:	493c      	ldr	r1, [pc, #240]	; (800a084 <pbuf_alloc+0x1e0>)
 8009f92:	483b      	ldr	r0, [pc, #236]	; (800a080 <pbuf_alloc+0x1dc>)
 8009f94:	f00b fae4 	bl	8015560 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d102      	bne.n	8009fa4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8009fa2:	e002      	b.n	8009faa <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8009fae:	8b7a      	ldrh	r2, [r7, #26]
 8009fb0:	89fb      	ldrh	r3, [r7, #14]
 8009fb2:	1ad3      	subs	r3, r2, r3
 8009fb4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8009fba:	8b7b      	ldrh	r3, [r7, #26]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d19e      	bne.n	8009efe <pbuf_alloc+0x5a>
      break;
 8009fc0:	e055      	b.n	800a06e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009fc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009fc4:	3303      	adds	r3, #3
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	f023 0303 	bic.w	r3, r3, #3
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	88bb      	ldrh	r3, [r7, #4]
 8009fd0:	3303      	adds	r3, #3
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	f023 0303 	bic.w	r3, r3, #3
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	4413      	add	r3, r2
 8009fdc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009fde:	8b3b      	ldrh	r3, [r7, #24]
 8009fe0:	3310      	adds	r3, #16
 8009fe2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009fe4:	8b3a      	ldrh	r2, [r7, #24]
 8009fe6:	88bb      	ldrh	r3, [r7, #4]
 8009fe8:	3303      	adds	r3, #3
 8009fea:	f023 0303 	bic.w	r3, r3, #3
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d306      	bcc.n	800a000 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009ff2:	8afa      	ldrh	r2, [r7, #22]
 8009ff4:	88bb      	ldrh	r3, [r7, #4]
 8009ff6:	3303      	adds	r3, #3
 8009ff8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d201      	bcs.n	800a004 <pbuf_alloc+0x160>
        return NULL;
 800a000:	2300      	movs	r3, #0
 800a002:	e035      	b.n	800a070 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a004:	8afb      	ldrh	r3, [r7, #22]
 800a006:	4618      	mov	r0, r3
 800a008:	f7ff fa7c 	bl	8009504 <mem_malloc>
 800a00c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a010:	2b00      	cmp	r3, #0
 800a012:	d101      	bne.n	800a018 <pbuf_alloc+0x174>
        return NULL;
 800a014:	2300      	movs	r3, #0
 800a016:	e02b      	b.n	800a070 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a018:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a01a:	3310      	adds	r3, #16
 800a01c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a01e:	4413      	add	r3, r2
 800a020:	3303      	adds	r3, #3
 800a022:	f023 0303 	bic.w	r3, r3, #3
 800a026:	4618      	mov	r0, r3
 800a028:	88b9      	ldrh	r1, [r7, #4]
 800a02a:	88ba      	ldrh	r2, [r7, #4]
 800a02c:	2300      	movs	r3, #0
 800a02e:	9301      	str	r3, [sp, #4]
 800a030:	887b      	ldrh	r3, [r7, #2]
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	460b      	mov	r3, r1
 800a036:	4601      	mov	r1, r0
 800a038:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a03a:	f7ff ff09 	bl	8009e50 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	f003 0303 	and.w	r3, r3, #3
 800a046:	2b00      	cmp	r3, #0
 800a048:	d010      	beq.n	800a06c <pbuf_alloc+0x1c8>
 800a04a:	4b0b      	ldr	r3, [pc, #44]	; (800a078 <pbuf_alloc+0x1d4>)
 800a04c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a050:	490d      	ldr	r1, [pc, #52]	; (800a088 <pbuf_alloc+0x1e4>)
 800a052:	480b      	ldr	r0, [pc, #44]	; (800a080 <pbuf_alloc+0x1dc>)
 800a054:	f00b fa84 	bl	8015560 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a058:	e008      	b.n	800a06c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a05a:	4b07      	ldr	r3, [pc, #28]	; (800a078 <pbuf_alloc+0x1d4>)
 800a05c:	f240 1227 	movw	r2, #295	; 0x127
 800a060:	490a      	ldr	r1, [pc, #40]	; (800a08c <pbuf_alloc+0x1e8>)
 800a062:	4807      	ldr	r0, [pc, #28]	; (800a080 <pbuf_alloc+0x1dc>)
 800a064:	f00b fa7c 	bl	8015560 <iprintf>
      return NULL;
 800a068:	2300      	movs	r3, #0
 800a06a:	e001      	b.n	800a070 <pbuf_alloc+0x1cc>
      break;
 800a06c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a070:	4618      	mov	r0, r3
 800a072:	3728      	adds	r7, #40	; 0x28
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	0801938c 	.word	0x0801938c
 800a07c:	080193bc 	.word	0x080193bc
 800a080:	080193ec 	.word	0x080193ec
 800a084:	08019414 	.word	0x08019414
 800a088:	08019448 	.word	0x08019448
 800a08c:	08019474 	.word	0x08019474

0800a090 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b086      	sub	sp, #24
 800a094:	af02      	add	r7, sp, #8
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	807b      	strh	r3, [r7, #2]
 800a09c:	4613      	mov	r3, r2
 800a09e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a0a0:	883b      	ldrh	r3, [r7, #0]
 800a0a2:	2b41      	cmp	r3, #65	; 0x41
 800a0a4:	d009      	beq.n	800a0ba <pbuf_alloc_reference+0x2a>
 800a0a6:	883b      	ldrh	r3, [r7, #0]
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d006      	beq.n	800a0ba <pbuf_alloc_reference+0x2a>
 800a0ac:	4b0f      	ldr	r3, [pc, #60]	; (800a0ec <pbuf_alloc_reference+0x5c>)
 800a0ae:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a0b2:	490f      	ldr	r1, [pc, #60]	; (800a0f0 <pbuf_alloc_reference+0x60>)
 800a0b4:	480f      	ldr	r0, [pc, #60]	; (800a0f4 <pbuf_alloc_reference+0x64>)
 800a0b6:	f00b fa53 	bl	8015560 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a0ba:	2007      	movs	r0, #7
 800a0bc:	f7ff fb90 	bl	80097e0 <memp_malloc>
 800a0c0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d101      	bne.n	800a0cc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	e00b      	b.n	800a0e4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a0cc:	8879      	ldrh	r1, [r7, #2]
 800a0ce:	887a      	ldrh	r2, [r7, #2]
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	9301      	str	r3, [sp, #4]
 800a0d4:	883b      	ldrh	r3, [r7, #0]
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	460b      	mov	r3, r1
 800a0da:	6879      	ldr	r1, [r7, #4]
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f7ff feb7 	bl	8009e50 <pbuf_init_alloced_pbuf>
  return p;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	0801938c 	.word	0x0801938c
 800a0f0:	08019490 	.word	0x08019490
 800a0f4:	080193ec 	.word	0x080193ec

0800a0f8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b088      	sub	sp, #32
 800a0fc:	af02      	add	r7, sp, #8
 800a0fe:	607b      	str	r3, [r7, #4]
 800a100:	4603      	mov	r3, r0
 800a102:	73fb      	strb	r3, [r7, #15]
 800a104:	460b      	mov	r3, r1
 800a106:	81bb      	strh	r3, [r7, #12]
 800a108:	4613      	mov	r3, r2
 800a10a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a10c:	7bfb      	ldrb	r3, [r7, #15]
 800a10e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a110:	8a7b      	ldrh	r3, [r7, #18]
 800a112:	3303      	adds	r3, #3
 800a114:	f023 0203 	bic.w	r2, r3, #3
 800a118:	89bb      	ldrh	r3, [r7, #12]
 800a11a:	441a      	add	r2, r3
 800a11c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a11e:	429a      	cmp	r2, r3
 800a120:	d901      	bls.n	800a126 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a122:	2300      	movs	r3, #0
 800a124:	e018      	b.n	800a158 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a126:	6a3b      	ldr	r3, [r7, #32]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d007      	beq.n	800a13c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a12c:	8a7b      	ldrh	r3, [r7, #18]
 800a12e:	3303      	adds	r3, #3
 800a130:	f023 0303 	bic.w	r3, r3, #3
 800a134:	6a3a      	ldr	r2, [r7, #32]
 800a136:	4413      	add	r3, r2
 800a138:	617b      	str	r3, [r7, #20]
 800a13a:	e001      	b.n	800a140 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a13c:	2300      	movs	r3, #0
 800a13e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	89b9      	ldrh	r1, [r7, #12]
 800a144:	89ba      	ldrh	r2, [r7, #12]
 800a146:	2302      	movs	r3, #2
 800a148:	9301      	str	r3, [sp, #4]
 800a14a:	897b      	ldrh	r3, [r7, #10]
 800a14c:	9300      	str	r3, [sp, #0]
 800a14e:	460b      	mov	r3, r1
 800a150:	6979      	ldr	r1, [r7, #20]
 800a152:	f7ff fe7d 	bl	8009e50 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a156:	687b      	ldr	r3, [r7, #4]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3718      	adds	r7, #24
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	460b      	mov	r3, r1
 800a16a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d106      	bne.n	800a180 <pbuf_realloc+0x20>
 800a172:	4b3a      	ldr	r3, [pc, #232]	; (800a25c <pbuf_realloc+0xfc>)
 800a174:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a178:	4939      	ldr	r1, [pc, #228]	; (800a260 <pbuf_realloc+0x100>)
 800a17a:	483a      	ldr	r0, [pc, #232]	; (800a264 <pbuf_realloc+0x104>)
 800a17c:	f00b f9f0 	bl	8015560 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	891b      	ldrh	r3, [r3, #8]
 800a184:	887a      	ldrh	r2, [r7, #2]
 800a186:	429a      	cmp	r2, r3
 800a188:	d263      	bcs.n	800a252 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	891a      	ldrh	r2, [r3, #8]
 800a18e:	887b      	ldrh	r3, [r7, #2]
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a194:	887b      	ldrh	r3, [r7, #2]
 800a196:	817b      	strh	r3, [r7, #10]
  q = p;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a19c:	e018      	b.n	800a1d0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	895b      	ldrh	r3, [r3, #10]
 800a1a2:	897a      	ldrh	r2, [r7, #10]
 800a1a4:	1ad3      	subs	r3, r2, r3
 800a1a6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	891a      	ldrh	r2, [r3, #8]
 800a1ac:	893b      	ldrh	r3, [r7, #8]
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d106      	bne.n	800a1d0 <pbuf_realloc+0x70>
 800a1c2:	4b26      	ldr	r3, [pc, #152]	; (800a25c <pbuf_realloc+0xfc>)
 800a1c4:	f240 12af 	movw	r2, #431	; 0x1af
 800a1c8:	4927      	ldr	r1, [pc, #156]	; (800a268 <pbuf_realloc+0x108>)
 800a1ca:	4826      	ldr	r0, [pc, #152]	; (800a264 <pbuf_realloc+0x104>)
 800a1cc:	f00b f9c8 	bl	8015560 <iprintf>
  while (rem_len > q->len) {
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	895b      	ldrh	r3, [r3, #10]
 800a1d4:	897a      	ldrh	r2, [r7, #10]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d8e1      	bhi.n	800a19e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	7b1b      	ldrb	r3, [r3, #12]
 800a1de:	f003 030f 	and.w	r3, r3, #15
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d121      	bne.n	800a22a <pbuf_realloc+0xca>
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	895b      	ldrh	r3, [r3, #10]
 800a1ea:	897a      	ldrh	r2, [r7, #10]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d01c      	beq.n	800a22a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	7b5b      	ldrb	r3, [r3, #13]
 800a1f4:	f003 0302 	and.w	r3, r3, #2
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d116      	bne.n	800a22a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	685a      	ldr	r2, [r3, #4]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	b29a      	uxth	r2, r3
 800a206:	897b      	ldrh	r3, [r7, #10]
 800a208:	4413      	add	r3, r2
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	4619      	mov	r1, r3
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f7ff f87c 	bl	800930c <mem_trim>
 800a214:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d106      	bne.n	800a22a <pbuf_realloc+0xca>
 800a21c:	4b0f      	ldr	r3, [pc, #60]	; (800a25c <pbuf_realloc+0xfc>)
 800a21e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a222:	4912      	ldr	r1, [pc, #72]	; (800a26c <pbuf_realloc+0x10c>)
 800a224:	480f      	ldr	r0, [pc, #60]	; (800a264 <pbuf_realloc+0x104>)
 800a226:	f00b f99b 	bl	8015560 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	897a      	ldrh	r2, [r7, #10]
 800a22e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	895a      	ldrh	r2, [r3, #10]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d004      	beq.n	800a24a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4618      	mov	r0, r3
 800a246:	f000 f911 	bl	800a46c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	601a      	str	r2, [r3, #0]
 800a250:	e000      	b.n	800a254 <pbuf_realloc+0xf4>
    return;
 800a252:	bf00      	nop

}
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	0801938c 	.word	0x0801938c
 800a260:	080194a4 	.word	0x080194a4
 800a264:	080193ec 	.word	0x080193ec
 800a268:	080194bc 	.word	0x080194bc
 800a26c:	080194d4 	.word	0x080194d4

0800a270 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b086      	sub	sp, #24
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	4613      	mov	r3, r2
 800a27c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d106      	bne.n	800a292 <pbuf_add_header_impl+0x22>
 800a284:	4b2b      	ldr	r3, [pc, #172]	; (800a334 <pbuf_add_header_impl+0xc4>)
 800a286:	f240 12df 	movw	r2, #479	; 0x1df
 800a28a:	492b      	ldr	r1, [pc, #172]	; (800a338 <pbuf_add_header_impl+0xc8>)
 800a28c:	482b      	ldr	r0, [pc, #172]	; (800a33c <pbuf_add_header_impl+0xcc>)
 800a28e:	f00b f967 	bl	8015560 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d003      	beq.n	800a2a0 <pbuf_add_header_impl+0x30>
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a29e:	d301      	bcc.n	800a2a4 <pbuf_add_header_impl+0x34>
    return 1;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e043      	b.n	800a32c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d101      	bne.n	800a2ae <pbuf_add_header_impl+0x3e>
    return 0;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	e03e      	b.n	800a32c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	891a      	ldrh	r2, [r3, #8]
 800a2b6:	8a7b      	ldrh	r3, [r7, #18]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	8a7a      	ldrh	r2, [r7, #18]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d901      	bls.n	800a2c6 <pbuf_add_header_impl+0x56>
    return 1;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e032      	b.n	800a32c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	7b1b      	ldrb	r3, [r3, #12]
 800a2ca:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a2cc:	8a3b      	ldrh	r3, [r7, #16]
 800a2ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00c      	beq.n	800a2f0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	685a      	ldr	r2, [r3, #4]
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	425b      	negs	r3, r3
 800a2de:	4413      	add	r3, r2
 800a2e0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	3310      	adds	r3, #16
 800a2e6:	697a      	ldr	r2, [r7, #20]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d20d      	bcs.n	800a308 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e01d      	b.n	800a32c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a2f0:	79fb      	ldrb	r3, [r7, #7]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d006      	beq.n	800a304 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	685a      	ldr	r2, [r3, #4]
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	425b      	negs	r3, r3
 800a2fe:	4413      	add	r3, r2
 800a300:	617b      	str	r3, [r7, #20]
 800a302:	e001      	b.n	800a308 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a304:	2301      	movs	r3, #1
 800a306:	e011      	b.n	800a32c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	697a      	ldr	r2, [r7, #20]
 800a30c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	895a      	ldrh	r2, [r3, #10]
 800a312:	8a7b      	ldrh	r3, [r7, #18]
 800a314:	4413      	add	r3, r2
 800a316:	b29a      	uxth	r2, r3
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	891a      	ldrh	r2, [r3, #8]
 800a320:	8a7b      	ldrh	r3, [r7, #18]
 800a322:	4413      	add	r3, r2
 800a324:	b29a      	uxth	r2, r3
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	811a      	strh	r2, [r3, #8]


  return 0;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3718      	adds	r7, #24
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	0801938c 	.word	0x0801938c
 800a338:	080194f0 	.word	0x080194f0
 800a33c:	080193ec 	.word	0x080193ec

0800a340 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a34a:	2200      	movs	r2, #0
 800a34c:	6839      	ldr	r1, [r7, #0]
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7ff ff8e 	bl	800a270 <pbuf_add_header_impl>
 800a354:	4603      	mov	r3, r0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3708      	adds	r7, #8
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
	...

0800a360 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d106      	bne.n	800a37e <pbuf_remove_header+0x1e>
 800a370:	4b20      	ldr	r3, [pc, #128]	; (800a3f4 <pbuf_remove_header+0x94>)
 800a372:	f240 224b 	movw	r2, #587	; 0x24b
 800a376:	4920      	ldr	r1, [pc, #128]	; (800a3f8 <pbuf_remove_header+0x98>)
 800a378:	4820      	ldr	r0, [pc, #128]	; (800a3fc <pbuf_remove_header+0x9c>)
 800a37a:	f00b f8f1 	bl	8015560 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d003      	beq.n	800a38c <pbuf_remove_header+0x2c>
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a38a:	d301      	bcc.n	800a390 <pbuf_remove_header+0x30>
    return 1;
 800a38c:	2301      	movs	r3, #1
 800a38e:	e02c      	b.n	800a3ea <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d101      	bne.n	800a39a <pbuf_remove_header+0x3a>
    return 0;
 800a396:	2300      	movs	r3, #0
 800a398:	e027      	b.n	800a3ea <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	895b      	ldrh	r3, [r3, #10]
 800a3a2:	89fa      	ldrh	r2, [r7, #14]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d908      	bls.n	800a3ba <pbuf_remove_header+0x5a>
 800a3a8:	4b12      	ldr	r3, [pc, #72]	; (800a3f4 <pbuf_remove_header+0x94>)
 800a3aa:	f240 2255 	movw	r2, #597	; 0x255
 800a3ae:	4914      	ldr	r1, [pc, #80]	; (800a400 <pbuf_remove_header+0xa0>)
 800a3b0:	4812      	ldr	r0, [pc, #72]	; (800a3fc <pbuf_remove_header+0x9c>)
 800a3b2:	f00b f8d5 	bl	8015560 <iprintf>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e017      	b.n	800a3ea <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	685a      	ldr	r2, [r3, #4]
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	441a      	add	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	895a      	ldrh	r2, [r3, #10]
 800a3d0:	89fb      	ldrh	r3, [r7, #14]
 800a3d2:	1ad3      	subs	r3, r2, r3
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	891a      	ldrh	r2, [r3, #8]
 800a3de:	89fb      	ldrh	r3, [r7, #14]
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	0801938c 	.word	0x0801938c
 800a3f8:	080194f0 	.word	0x080194f0
 800a3fc:	080193ec 	.word	0x080193ec
 800a400:	080194fc 	.word	0x080194fc

0800a404 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	460b      	mov	r3, r1
 800a40e:	807b      	strh	r3, [r7, #2]
 800a410:	4613      	mov	r3, r2
 800a412:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a414:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	da08      	bge.n	800a42e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a41c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a420:	425b      	negs	r3, r3
 800a422:	4619      	mov	r1, r3
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f7ff ff9b 	bl	800a360 <pbuf_remove_header>
 800a42a:	4603      	mov	r3, r0
 800a42c:	e007      	b.n	800a43e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a42e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a432:	787a      	ldrb	r2, [r7, #1]
 800a434:	4619      	mov	r1, r3
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f7ff ff1a 	bl	800a270 <pbuf_add_header_impl>
 800a43c:	4603      	mov	r3, r0
  }
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3708      	adds	r7, #8
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b082      	sub	sp, #8
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
 800a44e:	460b      	mov	r3, r1
 800a450:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a452:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a456:	2201      	movs	r2, #1
 800a458:	4619      	mov	r1, r3
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f7ff ffd2 	bl	800a404 <pbuf_header_impl>
 800a460:	4603      	mov	r3, r0
}
 800a462:	4618      	mov	r0, r3
 800a464:	3708      	adds	r7, #8
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
	...

0800a46c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b086      	sub	sp, #24
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d10b      	bne.n	800a492 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d106      	bne.n	800a48e <pbuf_free+0x22>
 800a480:	4b38      	ldr	r3, [pc, #224]	; (800a564 <pbuf_free+0xf8>)
 800a482:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a486:	4938      	ldr	r1, [pc, #224]	; (800a568 <pbuf_free+0xfc>)
 800a488:	4838      	ldr	r0, [pc, #224]	; (800a56c <pbuf_free+0x100>)
 800a48a:	f00b f869 	bl	8015560 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a48e:	2300      	movs	r3, #0
 800a490:	e063      	b.n	800a55a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a492:	2300      	movs	r3, #0
 800a494:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a496:	e05c      	b.n	800a552 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	7b9b      	ldrb	r3, [r3, #14]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d106      	bne.n	800a4ae <pbuf_free+0x42>
 800a4a0:	4b30      	ldr	r3, [pc, #192]	; (800a564 <pbuf_free+0xf8>)
 800a4a2:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a4a6:	4932      	ldr	r1, [pc, #200]	; (800a570 <pbuf_free+0x104>)
 800a4a8:	4830      	ldr	r0, [pc, #192]	; (800a56c <pbuf_free+0x100>)
 800a4aa:	f00b f859 	bl	8015560 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	7b9b      	ldrb	r3, [r3, #14]
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	b2da      	uxtb	r2, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	739a      	strb	r2, [r3, #14]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	7b9b      	ldrb	r3, [r3, #14]
 800a4be:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a4c0:	7dbb      	ldrb	r3, [r7, #22]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d143      	bne.n	800a54e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	7b1b      	ldrb	r3, [r3, #12]
 800a4d0:	f003 030f 	and.w	r3, r3, #15
 800a4d4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	7b5b      	ldrb	r3, [r3, #13]
 800a4da:	f003 0302 	and.w	r3, r3, #2
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d011      	beq.n	800a506 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	691b      	ldr	r3, [r3, #16]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d106      	bne.n	800a4fc <pbuf_free+0x90>
 800a4ee:	4b1d      	ldr	r3, [pc, #116]	; (800a564 <pbuf_free+0xf8>)
 800a4f0:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a4f4:	491f      	ldr	r1, [pc, #124]	; (800a574 <pbuf_free+0x108>)
 800a4f6:	481d      	ldr	r0, [pc, #116]	; (800a56c <pbuf_free+0x100>)
 800a4f8:	f00b f832 	bl	8015560 <iprintf>
        pc->custom_free_function(p);
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	4798      	blx	r3
 800a504:	e01d      	b.n	800a542 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a506:	7bfb      	ldrb	r3, [r7, #15]
 800a508:	2b02      	cmp	r3, #2
 800a50a:	d104      	bne.n	800a516 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800a50c:	6879      	ldr	r1, [r7, #4]
 800a50e:	2008      	movs	r0, #8
 800a510:	f7ff f9b2 	bl	8009878 <memp_free>
 800a514:	e015      	b.n	800a542 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a516:	7bfb      	ldrb	r3, [r7, #15]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d104      	bne.n	800a526 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800a51c:	6879      	ldr	r1, [r7, #4]
 800a51e:	2007      	movs	r0, #7
 800a520:	f7ff f9aa 	bl	8009878 <memp_free>
 800a524:	e00d      	b.n	800a542 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a526:	7bfb      	ldrb	r3, [r7, #15]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d103      	bne.n	800a534 <pbuf_free+0xc8>
          mem_free(p);
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f7fe fe83 	bl	8009238 <mem_free>
 800a532:	e006      	b.n	800a542 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a534:	4b0b      	ldr	r3, [pc, #44]	; (800a564 <pbuf_free+0xf8>)
 800a536:	f240 320f 	movw	r2, #783	; 0x30f
 800a53a:	490f      	ldr	r1, [pc, #60]	; (800a578 <pbuf_free+0x10c>)
 800a53c:	480b      	ldr	r0, [pc, #44]	; (800a56c <pbuf_free+0x100>)
 800a53e:	f00b f80f 	bl	8015560 <iprintf>
        }
      }
      count++;
 800a542:	7dfb      	ldrb	r3, [r7, #23]
 800a544:	3301      	adds	r3, #1
 800a546:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	607b      	str	r3, [r7, #4]
 800a54c:	e001      	b.n	800a552 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a54e:	2300      	movs	r3, #0
 800a550:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d19f      	bne.n	800a498 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a558:	7dfb      	ldrb	r3, [r7, #23]
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3718      	adds	r7, #24
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	0801938c 	.word	0x0801938c
 800a568:	080194f0 	.word	0x080194f0
 800a56c:	080193ec 	.word	0x080193ec
 800a570:	0801951c 	.word	0x0801951c
 800a574:	08019534 	.word	0x08019534
 800a578:	08019558 	.word	0x08019558

0800a57c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a584:	2300      	movs	r3, #0
 800a586:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a588:	e005      	b.n	800a596 <pbuf_clen+0x1a>
    ++len;
 800a58a:	89fb      	ldrh	r3, [r7, #14]
 800a58c:	3301      	adds	r3, #1
 800a58e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1f6      	bne.n	800a58a <pbuf_clen+0xe>
  }
  return len;
 800a59c:	89fb      	ldrh	r3, [r7, #14]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3714      	adds	r7, #20
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr
	...

0800a5ac <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d010      	beq.n	800a5dc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	7b9b      	ldrb	r3, [r3, #14]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	7b9b      	ldrb	r3, [r3, #14]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d106      	bne.n	800a5dc <pbuf_ref+0x30>
 800a5ce:	4b05      	ldr	r3, [pc, #20]	; (800a5e4 <pbuf_ref+0x38>)
 800a5d0:	f240 3242 	movw	r2, #834	; 0x342
 800a5d4:	4904      	ldr	r1, [pc, #16]	; (800a5e8 <pbuf_ref+0x3c>)
 800a5d6:	4805      	ldr	r0, [pc, #20]	; (800a5ec <pbuf_ref+0x40>)
 800a5d8:	f00a ffc2 	bl	8015560 <iprintf>
  }
}
 800a5dc:	bf00      	nop
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	0801938c 	.word	0x0801938c
 800a5e8:	0801956c 	.word	0x0801956c
 800a5ec:	080193ec 	.word	0x080193ec

0800a5f0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d002      	beq.n	800a606 <pbuf_cat+0x16>
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d107      	bne.n	800a616 <pbuf_cat+0x26>
 800a606:	4b20      	ldr	r3, [pc, #128]	; (800a688 <pbuf_cat+0x98>)
 800a608:	f240 3259 	movw	r2, #857	; 0x359
 800a60c:	491f      	ldr	r1, [pc, #124]	; (800a68c <pbuf_cat+0x9c>)
 800a60e:	4820      	ldr	r0, [pc, #128]	; (800a690 <pbuf_cat+0xa0>)
 800a610:	f00a ffa6 	bl	8015560 <iprintf>
 800a614:	e034      	b.n	800a680 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	60fb      	str	r3, [r7, #12]
 800a61a:	e00a      	b.n	800a632 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	891a      	ldrh	r2, [r3, #8]
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	891b      	ldrh	r3, [r3, #8]
 800a624:	4413      	add	r3, r2
 800a626:	b29a      	uxth	r2, r3
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	60fb      	str	r3, [r7, #12]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d1f0      	bne.n	800a61c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	891a      	ldrh	r2, [r3, #8]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	895b      	ldrh	r3, [r3, #10]
 800a642:	429a      	cmp	r2, r3
 800a644:	d006      	beq.n	800a654 <pbuf_cat+0x64>
 800a646:	4b10      	ldr	r3, [pc, #64]	; (800a688 <pbuf_cat+0x98>)
 800a648:	f240 3262 	movw	r2, #866	; 0x362
 800a64c:	4911      	ldr	r1, [pc, #68]	; (800a694 <pbuf_cat+0xa4>)
 800a64e:	4810      	ldr	r0, [pc, #64]	; (800a690 <pbuf_cat+0xa0>)
 800a650:	f00a ff86 	bl	8015560 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d006      	beq.n	800a66a <pbuf_cat+0x7a>
 800a65c:	4b0a      	ldr	r3, [pc, #40]	; (800a688 <pbuf_cat+0x98>)
 800a65e:	f240 3263 	movw	r2, #867	; 0x363
 800a662:	490d      	ldr	r1, [pc, #52]	; (800a698 <pbuf_cat+0xa8>)
 800a664:	480a      	ldr	r0, [pc, #40]	; (800a690 <pbuf_cat+0xa0>)
 800a666:	f00a ff7b 	bl	8015560 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	891a      	ldrh	r2, [r3, #8]
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	891b      	ldrh	r3, [r3, #8]
 800a672:	4413      	add	r3, r2
 800a674:	b29a      	uxth	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	683a      	ldr	r2, [r7, #0]
 800a67e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	0801938c 	.word	0x0801938c
 800a68c:	08019580 	.word	0x08019580
 800a690:	080193ec 	.word	0x080193ec
 800a694:	080195b8 	.word	0x080195b8
 800a698:	080195e8 	.word	0x080195e8

0800a69c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a6a6:	6839      	ldr	r1, [r7, #0]
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f7ff ffa1 	bl	800a5f0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a6ae:	6838      	ldr	r0, [r7, #0]
 800a6b0:	f7ff ff7c 	bl	800a5ac <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a6b4:	bf00      	nop
 800a6b6:	3708      	adds	r7, #8
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b086      	sub	sp, #24
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	617b      	str	r3, [r7, #20]
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d008      	beq.n	800a6e6 <pbuf_copy+0x2a>
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d005      	beq.n	800a6e6 <pbuf_copy+0x2a>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	891a      	ldrh	r2, [r3, #8]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	891b      	ldrh	r3, [r3, #8]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d209      	bcs.n	800a6fa <pbuf_copy+0x3e>
 800a6e6:	4b57      	ldr	r3, [pc, #348]	; (800a844 <pbuf_copy+0x188>)
 800a6e8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a6ec:	4956      	ldr	r1, [pc, #344]	; (800a848 <pbuf_copy+0x18c>)
 800a6ee:	4857      	ldr	r0, [pc, #348]	; (800a84c <pbuf_copy+0x190>)
 800a6f0:	f00a ff36 	bl	8015560 <iprintf>
 800a6f4:	f06f 030f 	mvn.w	r3, #15
 800a6f8:	e09f      	b.n	800a83a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	895b      	ldrh	r3, [r3, #10]
 800a6fe:	461a      	mov	r2, r3
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	1ad2      	subs	r2, r2, r3
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	895b      	ldrh	r3, [r3, #10]
 800a708:	4619      	mov	r1, r3
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	1acb      	subs	r3, r1, r3
 800a70e:	429a      	cmp	r2, r3
 800a710:	d306      	bcc.n	800a720 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	895b      	ldrh	r3, [r3, #10]
 800a716:	461a      	mov	r2, r3
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	1ad3      	subs	r3, r2, r3
 800a71c:	60fb      	str	r3, [r7, #12]
 800a71e:	e005      	b.n	800a72c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	895b      	ldrh	r3, [r3, #10]
 800a724:	461a      	mov	r2, r3
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	1ad3      	subs	r3, r2, r3
 800a72a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	685a      	ldr	r2, [r3, #4]
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	18d0      	adds	r0, r2, r3
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	685a      	ldr	r2, [r3, #4]
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	4413      	add	r3, r2
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	4619      	mov	r1, r3
 800a740:	f00a f9ca 	bl	8014ad8 <memcpy>
    offset_to += len;
 800a744:	697a      	ldr	r2, [r7, #20]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	4413      	add	r3, r2
 800a74a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	4413      	add	r3, r2
 800a752:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	895b      	ldrh	r3, [r3, #10]
 800a758:	461a      	mov	r2, r3
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d906      	bls.n	800a76e <pbuf_copy+0xb2>
 800a760:	4b38      	ldr	r3, [pc, #224]	; (800a844 <pbuf_copy+0x188>)
 800a762:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a766:	493a      	ldr	r1, [pc, #232]	; (800a850 <pbuf_copy+0x194>)
 800a768:	4838      	ldr	r0, [pc, #224]	; (800a84c <pbuf_copy+0x190>)
 800a76a:	f00a fef9 	bl	8015560 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	895b      	ldrh	r3, [r3, #10]
 800a772:	461a      	mov	r2, r3
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	4293      	cmp	r3, r2
 800a778:	d906      	bls.n	800a788 <pbuf_copy+0xcc>
 800a77a:	4b32      	ldr	r3, [pc, #200]	; (800a844 <pbuf_copy+0x188>)
 800a77c:	f240 32da 	movw	r2, #986	; 0x3da
 800a780:	4934      	ldr	r1, [pc, #208]	; (800a854 <pbuf_copy+0x198>)
 800a782:	4832      	ldr	r0, [pc, #200]	; (800a84c <pbuf_copy+0x190>)
 800a784:	f00a feec 	bl	8015560 <iprintf>
    if (offset_from >= p_from->len) {
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	895b      	ldrh	r3, [r3, #10]
 800a78c:	461a      	mov	r2, r3
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	4293      	cmp	r3, r2
 800a792:	d304      	bcc.n	800a79e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a794:	2300      	movs	r3, #0
 800a796:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	895b      	ldrh	r3, [r3, #10]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d114      	bne.n	800a7d4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10c      	bne.n	800a7d4 <pbuf_copy+0x118>
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d009      	beq.n	800a7d4 <pbuf_copy+0x118>
 800a7c0:	4b20      	ldr	r3, [pc, #128]	; (800a844 <pbuf_copy+0x188>)
 800a7c2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a7c6:	4924      	ldr	r1, [pc, #144]	; (800a858 <pbuf_copy+0x19c>)
 800a7c8:	4820      	ldr	r0, [pc, #128]	; (800a84c <pbuf_copy+0x190>)
 800a7ca:	f00a fec9 	bl	8015560 <iprintf>
 800a7ce:	f06f 030f 	mvn.w	r3, #15
 800a7d2:	e032      	b.n	800a83a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d013      	beq.n	800a802 <pbuf_copy+0x146>
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	895a      	ldrh	r2, [r3, #10]
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	891b      	ldrh	r3, [r3, #8]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d10d      	bne.n	800a802 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d009      	beq.n	800a802 <pbuf_copy+0x146>
 800a7ee:	4b15      	ldr	r3, [pc, #84]	; (800a844 <pbuf_copy+0x188>)
 800a7f0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800a7f4:	4919      	ldr	r1, [pc, #100]	; (800a85c <pbuf_copy+0x1a0>)
 800a7f6:	4815      	ldr	r0, [pc, #84]	; (800a84c <pbuf_copy+0x190>)
 800a7f8:	f00a feb2 	bl	8015560 <iprintf>
 800a7fc:	f06f 0305 	mvn.w	r3, #5
 800a800:	e01b      	b.n	800a83a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d013      	beq.n	800a830 <pbuf_copy+0x174>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	895a      	ldrh	r2, [r3, #10]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	891b      	ldrh	r3, [r3, #8]
 800a810:	429a      	cmp	r2, r3
 800a812:	d10d      	bne.n	800a830 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d009      	beq.n	800a830 <pbuf_copy+0x174>
 800a81c:	4b09      	ldr	r3, [pc, #36]	; (800a844 <pbuf_copy+0x188>)
 800a81e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a822:	490e      	ldr	r1, [pc, #56]	; (800a85c <pbuf_copy+0x1a0>)
 800a824:	4809      	ldr	r0, [pc, #36]	; (800a84c <pbuf_copy+0x190>)
 800a826:	f00a fe9b 	bl	8015560 <iprintf>
 800a82a:	f06f 0305 	mvn.w	r3, #5
 800a82e:	e004      	b.n	800a83a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	2b00      	cmp	r3, #0
 800a834:	f47f af61 	bne.w	800a6fa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a838:	2300      	movs	r3, #0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3718      	adds	r7, #24
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	0801938c 	.word	0x0801938c
 800a848:	08019634 	.word	0x08019634
 800a84c:	080193ec 	.word	0x080193ec
 800a850:	08019664 	.word	0x08019664
 800a854:	0801967c 	.word	0x0801967c
 800a858:	08019698 	.word	0x08019698
 800a85c:	080196a8 	.word	0x080196a8

0800a860 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b088      	sub	sp, #32
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	4611      	mov	r1, r2
 800a86c:	461a      	mov	r2, r3
 800a86e:	460b      	mov	r3, r1
 800a870:	80fb      	strh	r3, [r7, #6]
 800a872:	4613      	mov	r3, r2
 800a874:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a876:	2300      	movs	r3, #0
 800a878:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a87a:	2300      	movs	r3, #0
 800a87c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d108      	bne.n	800a896 <pbuf_copy_partial+0x36>
 800a884:	4b2b      	ldr	r3, [pc, #172]	; (800a934 <pbuf_copy_partial+0xd4>)
 800a886:	f240 420a 	movw	r2, #1034	; 0x40a
 800a88a:	492b      	ldr	r1, [pc, #172]	; (800a938 <pbuf_copy_partial+0xd8>)
 800a88c:	482b      	ldr	r0, [pc, #172]	; (800a93c <pbuf_copy_partial+0xdc>)
 800a88e:	f00a fe67 	bl	8015560 <iprintf>
 800a892:	2300      	movs	r3, #0
 800a894:	e04a      	b.n	800a92c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d108      	bne.n	800a8ae <pbuf_copy_partial+0x4e>
 800a89c:	4b25      	ldr	r3, [pc, #148]	; (800a934 <pbuf_copy_partial+0xd4>)
 800a89e:	f240 420b 	movw	r2, #1035	; 0x40b
 800a8a2:	4927      	ldr	r1, [pc, #156]	; (800a940 <pbuf_copy_partial+0xe0>)
 800a8a4:	4825      	ldr	r0, [pc, #148]	; (800a93c <pbuf_copy_partial+0xdc>)
 800a8a6:	f00a fe5b 	bl	8015560 <iprintf>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	e03e      	b.n	800a92c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	61fb      	str	r3, [r7, #28]
 800a8b2:	e034      	b.n	800a91e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a8b4:	88bb      	ldrh	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00a      	beq.n	800a8d0 <pbuf_copy_partial+0x70>
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	895b      	ldrh	r3, [r3, #10]
 800a8be:	88ba      	ldrh	r2, [r7, #4]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d305      	bcc.n	800a8d0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	895b      	ldrh	r3, [r3, #10]
 800a8c8:	88ba      	ldrh	r2, [r7, #4]
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	80bb      	strh	r3, [r7, #4]
 800a8ce:	e023      	b.n	800a918 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	895a      	ldrh	r2, [r3, #10]
 800a8d4:	88bb      	ldrh	r3, [r7, #4]
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a8da:	8b3a      	ldrh	r2, [r7, #24]
 800a8dc:	88fb      	ldrh	r3, [r7, #6]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d901      	bls.n	800a8e6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a8e2:	88fb      	ldrh	r3, [r7, #6]
 800a8e4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a8e6:	8b7b      	ldrh	r3, [r7, #26]
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	18d0      	adds	r0, r2, r3
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	685a      	ldr	r2, [r3, #4]
 800a8f0:	88bb      	ldrh	r3, [r7, #4]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	8b3a      	ldrh	r2, [r7, #24]
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	f00a f8ee 	bl	8014ad8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a8fc:	8afa      	ldrh	r2, [r7, #22]
 800a8fe:	8b3b      	ldrh	r3, [r7, #24]
 800a900:	4413      	add	r3, r2
 800a902:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a904:	8b7a      	ldrh	r2, [r7, #26]
 800a906:	8b3b      	ldrh	r3, [r7, #24]
 800a908:	4413      	add	r3, r2
 800a90a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a90c:	88fa      	ldrh	r2, [r7, #6]
 800a90e:	8b3b      	ldrh	r3, [r7, #24]
 800a910:	1ad3      	subs	r3, r2, r3
 800a912:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a914:	2300      	movs	r3, #0
 800a916:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	61fb      	str	r3, [r7, #28]
 800a91e:	88fb      	ldrh	r3, [r7, #6]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d002      	beq.n	800a92a <pbuf_copy_partial+0xca>
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d1c4      	bne.n	800a8b4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a92a:	8afb      	ldrh	r3, [r7, #22]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3720      	adds	r7, #32
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	0801938c 	.word	0x0801938c
 800a938:	080196d4 	.word	0x080196d4
 800a93c:	080193ec 	.word	0x080193ec
 800a940:	080196f4 	.word	0x080196f4

0800a944 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	4603      	mov	r3, r0
 800a94c:	603a      	str	r2, [r7, #0]
 800a94e:	71fb      	strb	r3, [r7, #7]
 800a950:	460b      	mov	r3, r1
 800a952:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	8919      	ldrh	r1, [r3, #8]
 800a958:	88ba      	ldrh	r2, [r7, #4]
 800a95a:	79fb      	ldrb	r3, [r7, #7]
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7ff faa1 	bl	8009ea4 <pbuf_alloc>
 800a962:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d101      	bne.n	800a96e <pbuf_clone+0x2a>
    return NULL;
 800a96a:	2300      	movs	r3, #0
 800a96c:	e011      	b.n	800a992 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a96e:	6839      	ldr	r1, [r7, #0]
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	f7ff fea3 	bl	800a6bc <pbuf_copy>
 800a976:	4603      	mov	r3, r0
 800a978:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a97a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d006      	beq.n	800a990 <pbuf_clone+0x4c>
 800a982:	4b06      	ldr	r3, [pc, #24]	; (800a99c <pbuf_clone+0x58>)
 800a984:	f240 5224 	movw	r2, #1316	; 0x524
 800a988:	4905      	ldr	r1, [pc, #20]	; (800a9a0 <pbuf_clone+0x5c>)
 800a98a:	4806      	ldr	r0, [pc, #24]	; (800a9a4 <pbuf_clone+0x60>)
 800a98c:	f00a fde8 	bl	8015560 <iprintf>
  return q;
 800a990:	68fb      	ldr	r3, [r7, #12]
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	0801938c 	.word	0x0801938c
 800a9a0:	08019800 	.word	0x08019800
 800a9a4:	080193ec 	.word	0x080193ec

0800a9a8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a9ac:	f00a fdf0 	bl	8015590 <rand>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	4b01      	ldr	r3, [pc, #4]	; (800a9c8 <tcp_init+0x20>)
 800a9c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a9c4:	bf00      	nop
 800a9c6:	bd80      	pop	{r7, pc}
 800a9c8:	20000016 	.word	0x20000016

0800a9cc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	7d1b      	ldrb	r3, [r3, #20]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d105      	bne.n	800a9e8 <tcp_free+0x1c>
 800a9dc:	4b06      	ldr	r3, [pc, #24]	; (800a9f8 <tcp_free+0x2c>)
 800a9de:	22d4      	movs	r2, #212	; 0xd4
 800a9e0:	4906      	ldr	r1, [pc, #24]	; (800a9fc <tcp_free+0x30>)
 800a9e2:	4807      	ldr	r0, [pc, #28]	; (800aa00 <tcp_free+0x34>)
 800a9e4:	f00a fdbc 	bl	8015560 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a9e8:	6879      	ldr	r1, [r7, #4]
 800a9ea:	2001      	movs	r0, #1
 800a9ec:	f7fe ff44 	bl	8009878 <memp_free>
}
 800a9f0:	bf00      	nop
 800a9f2:	3708      	adds	r7, #8
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	0801988c 	.word	0x0801988c
 800a9fc:	080198bc 	.word	0x080198bc
 800aa00:	080198d0 	.word	0x080198d0

0800aa04 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	7d1b      	ldrb	r3, [r3, #20]
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d105      	bne.n	800aa20 <tcp_free_listen+0x1c>
 800aa14:	4b06      	ldr	r3, [pc, #24]	; (800aa30 <tcp_free_listen+0x2c>)
 800aa16:	22df      	movs	r2, #223	; 0xdf
 800aa18:	4906      	ldr	r1, [pc, #24]	; (800aa34 <tcp_free_listen+0x30>)
 800aa1a:	4807      	ldr	r0, [pc, #28]	; (800aa38 <tcp_free_listen+0x34>)
 800aa1c:	f00a fda0 	bl	8015560 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800aa20:	6879      	ldr	r1, [r7, #4]
 800aa22:	2002      	movs	r0, #2
 800aa24:	f7fe ff28 	bl	8009878 <memp_free>
}
 800aa28:	bf00      	nop
 800aa2a:	3708      	adds	r7, #8
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	0801988c 	.word	0x0801988c
 800aa34:	080198f8 	.word	0x080198f8
 800aa38:	080198d0 	.word	0x080198d0

0800aa3c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800aa40:	f000 fea2 	bl	800b788 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800aa44:	4b07      	ldr	r3, [pc, #28]	; (800aa64 <tcp_tmr+0x28>)
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	b2da      	uxtb	r2, r3
 800aa4c:	4b05      	ldr	r3, [pc, #20]	; (800aa64 <tcp_tmr+0x28>)
 800aa4e:	701a      	strb	r2, [r3, #0]
 800aa50:	4b04      	ldr	r3, [pc, #16]	; (800aa64 <tcp_tmr+0x28>)
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	f003 0301 	and.w	r3, r3, #1
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d001      	beq.n	800aa60 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800aa5c:	f000 fb54 	bl	800b108 <tcp_slowtmr>
  }
}
 800aa60:	bf00      	nop
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	200003d5 	.word	0x200003d5

0800aa68 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d105      	bne.n	800aa84 <tcp_remove_listener+0x1c>
 800aa78:	4b0d      	ldr	r3, [pc, #52]	; (800aab0 <tcp_remove_listener+0x48>)
 800aa7a:	22ff      	movs	r2, #255	; 0xff
 800aa7c:	490d      	ldr	r1, [pc, #52]	; (800aab4 <tcp_remove_listener+0x4c>)
 800aa7e:	480e      	ldr	r0, [pc, #56]	; (800aab8 <tcp_remove_listener+0x50>)
 800aa80:	f00a fd6e 	bl	8015560 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	60fb      	str	r3, [r7, #12]
 800aa88:	e00a      	b.n	800aaa0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d102      	bne.n	800aa9a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2200      	movs	r2, #0
 800aa98:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	60fb      	str	r3, [r7, #12]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1f1      	bne.n	800aa8a <tcp_remove_listener+0x22>
    }
  }
}
 800aaa6:	bf00      	nop
 800aaa8:	bf00      	nop
 800aaaa:	3710      	adds	r7, #16
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	0801988c 	.word	0x0801988c
 800aab4:	08019914 	.word	0x08019914
 800aab8:	080198d0 	.word	0x080198d0

0800aabc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d106      	bne.n	800aad8 <tcp_listen_closed+0x1c>
 800aaca:	4b14      	ldr	r3, [pc, #80]	; (800ab1c <tcp_listen_closed+0x60>)
 800aacc:	f240 1211 	movw	r2, #273	; 0x111
 800aad0:	4913      	ldr	r1, [pc, #76]	; (800ab20 <tcp_listen_closed+0x64>)
 800aad2:	4814      	ldr	r0, [pc, #80]	; (800ab24 <tcp_listen_closed+0x68>)
 800aad4:	f00a fd44 	bl	8015560 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	7d1b      	ldrb	r3, [r3, #20]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d006      	beq.n	800aaee <tcp_listen_closed+0x32>
 800aae0:	4b0e      	ldr	r3, [pc, #56]	; (800ab1c <tcp_listen_closed+0x60>)
 800aae2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800aae6:	4910      	ldr	r1, [pc, #64]	; (800ab28 <tcp_listen_closed+0x6c>)
 800aae8:	480e      	ldr	r0, [pc, #56]	; (800ab24 <tcp_listen_closed+0x68>)
 800aaea:	f00a fd39 	bl	8015560 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800aaee:	2301      	movs	r3, #1
 800aaf0:	60fb      	str	r3, [r7, #12]
 800aaf2:	e00b      	b.n	800ab0c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800aaf4:	4a0d      	ldr	r2, [pc, #52]	; (800ab2c <tcp_listen_closed+0x70>)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	6879      	ldr	r1, [r7, #4]
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7ff ffb1 	bl	800aa68 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	60fb      	str	r3, [r7, #12]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	d9f0      	bls.n	800aaf4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ab12:	bf00      	nop
 800ab14:	bf00      	nop
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	0801988c 	.word	0x0801988c
 800ab20:	0801993c 	.word	0x0801993c
 800ab24:	080198d0 	.word	0x080198d0
 800ab28:	08019948 	.word	0x08019948
 800ab2c:	0801bc08 	.word	0x0801bc08

0800ab30 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ab30:	b5b0      	push	{r4, r5, r7, lr}
 800ab32:	b088      	sub	sp, #32
 800ab34:	af04      	add	r7, sp, #16
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d106      	bne.n	800ab50 <tcp_close_shutdown+0x20>
 800ab42:	4b63      	ldr	r3, [pc, #396]	; (800acd0 <tcp_close_shutdown+0x1a0>)
 800ab44:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ab48:	4962      	ldr	r1, [pc, #392]	; (800acd4 <tcp_close_shutdown+0x1a4>)
 800ab4a:	4863      	ldr	r0, [pc, #396]	; (800acd8 <tcp_close_shutdown+0x1a8>)
 800ab4c:	f00a fd08 	bl	8015560 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ab50:	78fb      	ldrb	r3, [r7, #3]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d066      	beq.n	800ac24 <tcp_close_shutdown+0xf4>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	7d1b      	ldrb	r3, [r3, #20]
 800ab5a:	2b04      	cmp	r3, #4
 800ab5c:	d003      	beq.n	800ab66 <tcp_close_shutdown+0x36>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	7d1b      	ldrb	r3, [r3, #20]
 800ab62:	2b07      	cmp	r3, #7
 800ab64:	d15e      	bne.n	800ac24 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d104      	bne.n	800ab78 <tcp_close_shutdown+0x48>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab76:	d055      	beq.n	800ac24 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	8b5b      	ldrh	r3, [r3, #26]
 800ab7c:	f003 0310 	and.w	r3, r3, #16
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d106      	bne.n	800ab92 <tcp_close_shutdown+0x62>
 800ab84:	4b52      	ldr	r3, [pc, #328]	; (800acd0 <tcp_close_shutdown+0x1a0>)
 800ab86:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ab8a:	4954      	ldr	r1, [pc, #336]	; (800acdc <tcp_close_shutdown+0x1ac>)
 800ab8c:	4852      	ldr	r0, [pc, #328]	; (800acd8 <tcp_close_shutdown+0x1a8>)
 800ab8e:	f00a fce7 	bl	8015560 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ab9a:	687d      	ldr	r5, [r7, #4]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	3304      	adds	r3, #4
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	8ad2      	ldrh	r2, [r2, #22]
 800aba4:	6879      	ldr	r1, [r7, #4]
 800aba6:	8b09      	ldrh	r1, [r1, #24]
 800aba8:	9102      	str	r1, [sp, #8]
 800abaa:	9201      	str	r2, [sp, #4]
 800abac:	9300      	str	r3, [sp, #0]
 800abae:	462b      	mov	r3, r5
 800abb0:	4622      	mov	r2, r4
 800abb2:	4601      	mov	r1, r0
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f004 fe8d 	bl	800f8d4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f001 f8c6 	bl	800bd4c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800abc0:	4b47      	ldr	r3, [pc, #284]	; (800ace0 <tcp_close_shutdown+0x1b0>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d105      	bne.n	800abd6 <tcp_close_shutdown+0xa6>
 800abca:	4b45      	ldr	r3, [pc, #276]	; (800ace0 <tcp_close_shutdown+0x1b0>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	4a43      	ldr	r2, [pc, #268]	; (800ace0 <tcp_close_shutdown+0x1b0>)
 800abd2:	6013      	str	r3, [r2, #0]
 800abd4:	e013      	b.n	800abfe <tcp_close_shutdown+0xce>
 800abd6:	4b42      	ldr	r3, [pc, #264]	; (800ace0 <tcp_close_shutdown+0x1b0>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	60fb      	str	r3, [r7, #12]
 800abdc:	e00c      	b.n	800abf8 <tcp_close_shutdown+0xc8>
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d104      	bne.n	800abf2 <tcp_close_shutdown+0xc2>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	68da      	ldr	r2, [r3, #12]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	60da      	str	r2, [r3, #12]
 800abf0:	e005      	b.n	800abfe <tcp_close_shutdown+0xce>
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	60fb      	str	r3, [r7, #12]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1ef      	bne.n	800abde <tcp_close_shutdown+0xae>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	60da      	str	r2, [r3, #12]
 800ac04:	4b37      	ldr	r3, [pc, #220]	; (800ace4 <tcp_close_shutdown+0x1b4>)
 800ac06:	2201      	movs	r2, #1
 800ac08:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ac0a:	4b37      	ldr	r3, [pc, #220]	; (800ace8 <tcp_close_shutdown+0x1b8>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d102      	bne.n	800ac1a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ac14:	f003 fd5a 	bl	800e6cc <tcp_trigger_input_pcb_close>
 800ac18:	e002      	b.n	800ac20 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f7ff fed6 	bl	800a9cc <tcp_free>
      }
      return ERR_OK;
 800ac20:	2300      	movs	r3, #0
 800ac22:	e050      	b.n	800acc6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	7d1b      	ldrb	r3, [r3, #20]
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	d03b      	beq.n	800aca4 <tcp_close_shutdown+0x174>
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	dc44      	bgt.n	800acba <tcp_close_shutdown+0x18a>
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d002      	beq.n	800ac3a <tcp_close_shutdown+0x10a>
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d02a      	beq.n	800ac8e <tcp_close_shutdown+0x15e>
 800ac38:	e03f      	b.n	800acba <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	8adb      	ldrh	r3, [r3, #22]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d021      	beq.n	800ac86 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ac42:	4b2a      	ldr	r3, [pc, #168]	; (800acec <tcp_close_shutdown+0x1bc>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d105      	bne.n	800ac58 <tcp_close_shutdown+0x128>
 800ac4c:	4b27      	ldr	r3, [pc, #156]	; (800acec <tcp_close_shutdown+0x1bc>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	4a26      	ldr	r2, [pc, #152]	; (800acec <tcp_close_shutdown+0x1bc>)
 800ac54:	6013      	str	r3, [r2, #0]
 800ac56:	e013      	b.n	800ac80 <tcp_close_shutdown+0x150>
 800ac58:	4b24      	ldr	r3, [pc, #144]	; (800acec <tcp_close_shutdown+0x1bc>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	60bb      	str	r3, [r7, #8]
 800ac5e:	e00c      	b.n	800ac7a <tcp_close_shutdown+0x14a>
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	68db      	ldr	r3, [r3, #12]
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d104      	bne.n	800ac74 <tcp_close_shutdown+0x144>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	68da      	ldr	r2, [r3, #12]
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	60da      	str	r2, [r3, #12]
 800ac72:	e005      	b.n	800ac80 <tcp_close_shutdown+0x150>
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	60bb      	str	r3, [r7, #8]
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d1ef      	bne.n	800ac60 <tcp_close_shutdown+0x130>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f7ff fea0 	bl	800a9cc <tcp_free>
      break;
 800ac8c:	e01a      	b.n	800acc4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f7ff ff14 	bl	800aabc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ac94:	6879      	ldr	r1, [r7, #4]
 800ac96:	4816      	ldr	r0, [pc, #88]	; (800acf0 <tcp_close_shutdown+0x1c0>)
 800ac98:	f001 f8a8 	bl	800bdec <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f7ff feb1 	bl	800aa04 <tcp_free_listen>
      break;
 800aca2:	e00f      	b.n	800acc4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800aca4:	6879      	ldr	r1, [r7, #4]
 800aca6:	480e      	ldr	r0, [pc, #56]	; (800ace0 <tcp_close_shutdown+0x1b0>)
 800aca8:	f001 f8a0 	bl	800bdec <tcp_pcb_remove>
 800acac:	4b0d      	ldr	r3, [pc, #52]	; (800ace4 <tcp_close_shutdown+0x1b4>)
 800acae:	2201      	movs	r2, #1
 800acb0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f7ff fe8a 	bl	800a9cc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800acb8:	e004      	b.n	800acc4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 f81a 	bl	800acf4 <tcp_close_shutdown_fin>
 800acc0:	4603      	mov	r3, r0
 800acc2:	e000      	b.n	800acc6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bdb0      	pop	{r4, r5, r7, pc}
 800acce:	bf00      	nop
 800acd0:	0801988c 	.word	0x0801988c
 800acd4:	08019960 	.word	0x08019960
 800acd8:	080198d0 	.word	0x080198d0
 800acdc:	08019980 	.word	0x08019980
 800ace0:	20006a20 	.word	0x20006a20
 800ace4:	20006a1c 	.word	0x20006a1c
 800ace8:	20006a34 	.word	0x20006a34
 800acec:	20006a2c 	.word	0x20006a2c
 800acf0:	20006a28 	.word	0x20006a28

0800acf4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d106      	bne.n	800ad10 <tcp_close_shutdown_fin+0x1c>
 800ad02:	4b2e      	ldr	r3, [pc, #184]	; (800adbc <tcp_close_shutdown_fin+0xc8>)
 800ad04:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ad08:	492d      	ldr	r1, [pc, #180]	; (800adc0 <tcp_close_shutdown_fin+0xcc>)
 800ad0a:	482e      	ldr	r0, [pc, #184]	; (800adc4 <tcp_close_shutdown_fin+0xd0>)
 800ad0c:	f00a fc28 	bl	8015560 <iprintf>

  switch (pcb->state) {
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	7d1b      	ldrb	r3, [r3, #20]
 800ad14:	2b07      	cmp	r3, #7
 800ad16:	d020      	beq.n	800ad5a <tcp_close_shutdown_fin+0x66>
 800ad18:	2b07      	cmp	r3, #7
 800ad1a:	dc2b      	bgt.n	800ad74 <tcp_close_shutdown_fin+0x80>
 800ad1c:	2b03      	cmp	r3, #3
 800ad1e:	d002      	beq.n	800ad26 <tcp_close_shutdown_fin+0x32>
 800ad20:	2b04      	cmp	r3, #4
 800ad22:	d00d      	beq.n	800ad40 <tcp_close_shutdown_fin+0x4c>
 800ad24:	e026      	b.n	800ad74 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f003 fee2 	bl	800eaf0 <tcp_send_fin>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ad30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d11f      	bne.n	800ad78 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2205      	movs	r2, #5
 800ad3c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ad3e:	e01b      	b.n	800ad78 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f003 fed5 	bl	800eaf0 <tcp_send_fin>
 800ad46:	4603      	mov	r3, r0
 800ad48:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ad4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d114      	bne.n	800ad7c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2205      	movs	r2, #5
 800ad56:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ad58:	e010      	b.n	800ad7c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f003 fec8 	bl	800eaf0 <tcp_send_fin>
 800ad60:	4603      	mov	r3, r0
 800ad62:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ad64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d109      	bne.n	800ad80 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2209      	movs	r2, #9
 800ad70:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ad72:	e005      	b.n	800ad80 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ad74:	2300      	movs	r3, #0
 800ad76:	e01c      	b.n	800adb2 <tcp_close_shutdown_fin+0xbe>
      break;
 800ad78:	bf00      	nop
 800ad7a:	e002      	b.n	800ad82 <tcp_close_shutdown_fin+0x8e>
      break;
 800ad7c:	bf00      	nop
 800ad7e:	e000      	b.n	800ad82 <tcp_close_shutdown_fin+0x8e>
      break;
 800ad80:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ad82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d103      	bne.n	800ad92 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f003 ffee 	bl	800ed6c <tcp_output>
 800ad90:	e00d      	b.n	800adae <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ad92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad9a:	d108      	bne.n	800adae <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	8b5b      	ldrh	r3, [r3, #26]
 800ada0:	f043 0308 	orr.w	r3, r3, #8
 800ada4:	b29a      	uxth	r2, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800adaa:	2300      	movs	r3, #0
 800adac:	e001      	b.n	800adb2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800adae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	0801988c 	.word	0x0801988c
 800adc0:	0801993c 	.word	0x0801993c
 800adc4:	080198d0 	.word	0x080198d0

0800adc8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d109      	bne.n	800adea <tcp_close+0x22>
 800add6:	4b0f      	ldr	r3, [pc, #60]	; (800ae14 <tcp_close+0x4c>)
 800add8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800addc:	490e      	ldr	r1, [pc, #56]	; (800ae18 <tcp_close+0x50>)
 800adde:	480f      	ldr	r0, [pc, #60]	; (800ae1c <tcp_close+0x54>)
 800ade0:	f00a fbbe 	bl	8015560 <iprintf>
 800ade4:	f06f 030f 	mvn.w	r3, #15
 800ade8:	e00f      	b.n	800ae0a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	7d1b      	ldrb	r3, [r3, #20]
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d006      	beq.n	800ae00 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	8b5b      	ldrh	r3, [r3, #26]
 800adf6:	f043 0310 	orr.w	r3, r3, #16
 800adfa:	b29a      	uxth	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ae00:	2101      	movs	r1, #1
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f7ff fe94 	bl	800ab30 <tcp_close_shutdown>
 800ae08:	4603      	mov	r3, r0
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3708      	adds	r7, #8
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	0801988c 	.word	0x0801988c
 800ae18:	0801999c 	.word	0x0801999c
 800ae1c:	080198d0 	.word	0x080198d0

0800ae20 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b08e      	sub	sp, #56	; 0x38
 800ae24:	af04      	add	r7, sp, #16
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d107      	bne.n	800ae40 <tcp_abandon+0x20>
 800ae30:	4b52      	ldr	r3, [pc, #328]	; (800af7c <tcp_abandon+0x15c>)
 800ae32:	f240 223d 	movw	r2, #573	; 0x23d
 800ae36:	4952      	ldr	r1, [pc, #328]	; (800af80 <tcp_abandon+0x160>)
 800ae38:	4852      	ldr	r0, [pc, #328]	; (800af84 <tcp_abandon+0x164>)
 800ae3a:	f00a fb91 	bl	8015560 <iprintf>
 800ae3e:	e099      	b.n	800af74 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	7d1b      	ldrb	r3, [r3, #20]
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d106      	bne.n	800ae56 <tcp_abandon+0x36>
 800ae48:	4b4c      	ldr	r3, [pc, #304]	; (800af7c <tcp_abandon+0x15c>)
 800ae4a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ae4e:	494e      	ldr	r1, [pc, #312]	; (800af88 <tcp_abandon+0x168>)
 800ae50:	484c      	ldr	r0, [pc, #304]	; (800af84 <tcp_abandon+0x164>)
 800ae52:	f00a fb85 	bl	8015560 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	7d1b      	ldrb	r3, [r3, #20]
 800ae5a:	2b0a      	cmp	r3, #10
 800ae5c:	d107      	bne.n	800ae6e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ae5e:	6879      	ldr	r1, [r7, #4]
 800ae60:	484a      	ldr	r0, [pc, #296]	; (800af8c <tcp_abandon+0x16c>)
 800ae62:	f000 ffc3 	bl	800bdec <tcp_pcb_remove>
    tcp_free(pcb);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f7ff fdb0 	bl	800a9cc <tcp_free>
 800ae6c:	e082      	b.n	800af74 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ae72:	2300      	movs	r3, #0
 800ae74:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae7a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae80:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae88:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	7d1b      	ldrb	r3, [r3, #20]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d126      	bne.n	800aee6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	8adb      	ldrh	r3, [r3, #22]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d02e      	beq.n	800aefe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800aea0:	4b3b      	ldr	r3, [pc, #236]	; (800af90 <tcp_abandon+0x170>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d105      	bne.n	800aeb6 <tcp_abandon+0x96>
 800aeaa:	4b39      	ldr	r3, [pc, #228]	; (800af90 <tcp_abandon+0x170>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	4a37      	ldr	r2, [pc, #220]	; (800af90 <tcp_abandon+0x170>)
 800aeb2:	6013      	str	r3, [r2, #0]
 800aeb4:	e013      	b.n	800aede <tcp_abandon+0xbe>
 800aeb6:	4b36      	ldr	r3, [pc, #216]	; (800af90 <tcp_abandon+0x170>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	61fb      	str	r3, [r7, #28]
 800aebc:	e00c      	b.n	800aed8 <tcp_abandon+0xb8>
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d104      	bne.n	800aed2 <tcp_abandon+0xb2>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	68da      	ldr	r2, [r3, #12]
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	60da      	str	r2, [r3, #12]
 800aed0:	e005      	b.n	800aede <tcp_abandon+0xbe>
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	61fb      	str	r3, [r7, #28]
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d1ef      	bne.n	800aebe <tcp_abandon+0x9e>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	60da      	str	r2, [r3, #12]
 800aee4:	e00b      	b.n	800aefe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	8adb      	ldrh	r3, [r3, #22]
 800aeee:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800aef0:	6879      	ldr	r1, [r7, #4]
 800aef2:	4828      	ldr	r0, [pc, #160]	; (800af94 <tcp_abandon+0x174>)
 800aef4:	f000 ff7a 	bl	800bdec <tcp_pcb_remove>
 800aef8:	4b27      	ldr	r3, [pc, #156]	; (800af98 <tcp_abandon+0x178>)
 800aefa:	2201      	movs	r2, #1
 800aefc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af02:	2b00      	cmp	r3, #0
 800af04:	d004      	beq.n	800af10 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af0a:	4618      	mov	r0, r3
 800af0c:	f000 fd1c 	bl	800b948 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af14:	2b00      	cmp	r3, #0
 800af16:	d004      	beq.n	800af22 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af1c:	4618      	mov	r0, r3
 800af1e:	f000 fd13 	bl	800b948 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af26:	2b00      	cmp	r3, #0
 800af28:	d004      	beq.n	800af34 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af2e:	4618      	mov	r0, r3
 800af30:	f000 fd0a 	bl	800b948 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800af34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00e      	beq.n	800af58 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800af3a:	6879      	ldr	r1, [r7, #4]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	3304      	adds	r3, #4
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	8b12      	ldrh	r2, [r2, #24]
 800af44:	9202      	str	r2, [sp, #8]
 800af46:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800af48:	9201      	str	r2, [sp, #4]
 800af4a:	9300      	str	r3, [sp, #0]
 800af4c:	460b      	mov	r3, r1
 800af4e:	697a      	ldr	r2, [r7, #20]
 800af50:	69b9      	ldr	r1, [r7, #24]
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f004 fcbe 	bl	800f8d4 <tcp_rst>
    }
    last_state = pcb->state;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	7d1b      	ldrb	r3, [r3, #20]
 800af5c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f7ff fd34 	bl	800a9cc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d004      	beq.n	800af74 <tcp_abandon+0x154>
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	f06f 010c 	mvn.w	r1, #12
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	4798      	blx	r3
  }
}
 800af74:	3728      	adds	r7, #40	; 0x28
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	0801988c 	.word	0x0801988c
 800af80:	080199d0 	.word	0x080199d0
 800af84:	080198d0 	.word	0x080198d0
 800af88:	080199ec 	.word	0x080199ec
 800af8c:	20006a30 	.word	0x20006a30
 800af90:	20006a2c 	.word	0x20006a2c
 800af94:	20006a20 	.word	0x20006a20
 800af98:	20006a1c 	.word	0x20006a1c

0800af9c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800afa4:	2101      	movs	r1, #1
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f7ff ff3a 	bl	800ae20 <tcp_abandon>
}
 800afac:	bf00      	nop
 800afae:	3708      	adds	r7, #8
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d106      	bne.n	800afd0 <tcp_update_rcv_ann_wnd+0x1c>
 800afc2:	4b25      	ldr	r3, [pc, #148]	; (800b058 <tcp_update_rcv_ann_wnd+0xa4>)
 800afc4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800afc8:	4924      	ldr	r1, [pc, #144]	; (800b05c <tcp_update_rcv_ann_wnd+0xa8>)
 800afca:	4825      	ldr	r0, [pc, #148]	; (800b060 <tcp_update_rcv_ann_wnd+0xac>)
 800afcc:	f00a fac8 	bl	8015560 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800afd8:	4413      	add	r3, r2
 800afda:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800afe4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800afe8:	bf28      	it	cs
 800afea:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 800afee:	b292      	uxth	r2, r2
 800aff0:	4413      	add	r3, r2
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	1ad3      	subs	r3, r2, r3
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	db08      	blt.n	800b00c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	e020      	b.n	800b04e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b014:	1ad3      	subs	r3, r2, r3
 800b016:	2b00      	cmp	r3, #0
 800b018:	dd03      	ble.n	800b022 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b020:	e014      	b.n	800b04c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02a:	1ad3      	subs	r3, r2, r3
 800b02c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b034:	d306      	bcc.n	800b044 <tcp_update_rcv_ann_wnd+0x90>
 800b036:	4b08      	ldr	r3, [pc, #32]	; (800b058 <tcp_update_rcv_ann_wnd+0xa4>)
 800b038:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b03c:	4909      	ldr	r1, [pc, #36]	; (800b064 <tcp_update_rcv_ann_wnd+0xb0>)
 800b03e:	4808      	ldr	r0, [pc, #32]	; (800b060 <tcp_update_rcv_ann_wnd+0xac>)
 800b040:	f00a fa8e 	bl	8015560 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	b29a      	uxth	r2, r3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b04c:	2300      	movs	r3, #0
  }
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	0801988c 	.word	0x0801988c
 800b05c:	08019ae8 	.word	0x08019ae8
 800b060:	080198d0 	.word	0x080198d0
 800b064:	08019b0c 	.word	0x08019b0c

0800b068 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	460b      	mov	r3, r1
 800b072:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d107      	bne.n	800b08a <tcp_recved+0x22>
 800b07a:	4b1f      	ldr	r3, [pc, #124]	; (800b0f8 <tcp_recved+0x90>)
 800b07c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b080:	491e      	ldr	r1, [pc, #120]	; (800b0fc <tcp_recved+0x94>)
 800b082:	481f      	ldr	r0, [pc, #124]	; (800b100 <tcp_recved+0x98>)
 800b084:	f00a fa6c 	bl	8015560 <iprintf>
 800b088:	e032      	b.n	800b0f0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	7d1b      	ldrb	r3, [r3, #20]
 800b08e:	2b01      	cmp	r3, #1
 800b090:	d106      	bne.n	800b0a0 <tcp_recved+0x38>
 800b092:	4b19      	ldr	r3, [pc, #100]	; (800b0f8 <tcp_recved+0x90>)
 800b094:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b098:	491a      	ldr	r1, [pc, #104]	; (800b104 <tcp_recved+0x9c>)
 800b09a:	4819      	ldr	r0, [pc, #100]	; (800b100 <tcp_recved+0x98>)
 800b09c:	f00a fa60 	bl	8015560 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b0a4:	887b      	ldrh	r3, [r7, #2]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b0aa:	89fb      	ldrh	r3, [r7, #14]
 800b0ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0b0:	d804      	bhi.n	800b0bc <tcp_recved+0x54>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0b6:	89fa      	ldrh	r2, [r7, #14]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d204      	bcs.n	800b0c6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b0c2:	851a      	strh	r2, [r3, #40]	; 0x28
 800b0c4:	e002      	b.n	800b0cc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	89fa      	ldrh	r2, [r7, #14]
 800b0ca:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f7ff ff71 	bl	800afb4 <tcp_update_rcv_ann_wnd>
 800b0d2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0da:	d309      	bcc.n	800b0f0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	8b5b      	ldrh	r3, [r3, #26]
 800b0e0:	f043 0302 	orr.w	r3, r3, #2
 800b0e4:	b29a      	uxth	r2, r3
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f003 fe3e 	bl	800ed6c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b0f0:	3710      	adds	r7, #16
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
 800b0f6:	bf00      	nop
 800b0f8:	0801988c 	.word	0x0801988c
 800b0fc:	08019b28 	.word	0x08019b28
 800b100:	080198d0 	.word	0x080198d0
 800b104:	08019b40 	.word	0x08019b40

0800b108 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b108:	b5b0      	push	{r4, r5, r7, lr}
 800b10a:	b090      	sub	sp, #64	; 0x40
 800b10c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b10e:	2300      	movs	r3, #0
 800b110:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b114:	4b94      	ldr	r3, [pc, #592]	; (800b368 <tcp_slowtmr+0x260>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	3301      	adds	r3, #1
 800b11a:	4a93      	ldr	r2, [pc, #588]	; (800b368 <tcp_slowtmr+0x260>)
 800b11c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b11e:	4b93      	ldr	r3, [pc, #588]	; (800b36c <tcp_slowtmr+0x264>)
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	3301      	adds	r3, #1
 800b124:	b2da      	uxtb	r2, r3
 800b126:	4b91      	ldr	r3, [pc, #580]	; (800b36c <tcp_slowtmr+0x264>)
 800b128:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b12a:	2300      	movs	r3, #0
 800b12c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b12e:	4b90      	ldr	r3, [pc, #576]	; (800b370 <tcp_slowtmr+0x268>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b134:	e29f      	b.n	800b676 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b138:	7d1b      	ldrb	r3, [r3, #20]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d106      	bne.n	800b14c <tcp_slowtmr+0x44>
 800b13e:	4b8d      	ldr	r3, [pc, #564]	; (800b374 <tcp_slowtmr+0x26c>)
 800b140:	f240 42be 	movw	r2, #1214	; 0x4be
 800b144:	498c      	ldr	r1, [pc, #560]	; (800b378 <tcp_slowtmr+0x270>)
 800b146:	488d      	ldr	r0, [pc, #564]	; (800b37c <tcp_slowtmr+0x274>)
 800b148:	f00a fa0a 	bl	8015560 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b14e:	7d1b      	ldrb	r3, [r3, #20]
 800b150:	2b01      	cmp	r3, #1
 800b152:	d106      	bne.n	800b162 <tcp_slowtmr+0x5a>
 800b154:	4b87      	ldr	r3, [pc, #540]	; (800b374 <tcp_slowtmr+0x26c>)
 800b156:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b15a:	4989      	ldr	r1, [pc, #548]	; (800b380 <tcp_slowtmr+0x278>)
 800b15c:	4887      	ldr	r0, [pc, #540]	; (800b37c <tcp_slowtmr+0x274>)
 800b15e:	f00a f9ff 	bl	8015560 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b164:	7d1b      	ldrb	r3, [r3, #20]
 800b166:	2b0a      	cmp	r3, #10
 800b168:	d106      	bne.n	800b178 <tcp_slowtmr+0x70>
 800b16a:	4b82      	ldr	r3, [pc, #520]	; (800b374 <tcp_slowtmr+0x26c>)
 800b16c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b170:	4984      	ldr	r1, [pc, #528]	; (800b384 <tcp_slowtmr+0x27c>)
 800b172:	4882      	ldr	r0, [pc, #520]	; (800b37c <tcp_slowtmr+0x274>)
 800b174:	f00a f9f4 	bl	8015560 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17a:	7f9a      	ldrb	r2, [r3, #30]
 800b17c:	4b7b      	ldr	r3, [pc, #492]	; (800b36c <tcp_slowtmr+0x264>)
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	429a      	cmp	r2, r3
 800b182:	d105      	bne.n	800b190 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b186:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b18e:	e272      	b.n	800b676 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b190:	4b76      	ldr	r3, [pc, #472]	; (800b36c <tcp_slowtmr+0x264>)
 800b192:	781a      	ldrb	r2, [r3, #0]
 800b194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b196:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b198:	2300      	movs	r3, #0
 800b19a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a6:	7d1b      	ldrb	r3, [r3, #20]
 800b1a8:	2b02      	cmp	r3, #2
 800b1aa:	d10a      	bne.n	800b1c2 <tcp_slowtmr+0xba>
 800b1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b1b2:	2b05      	cmp	r3, #5
 800b1b4:	d905      	bls.n	800b1c2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b1b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b1c0:	e11e      	b.n	800b400 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b1c8:	2b0b      	cmp	r3, #11
 800b1ca:	d905      	bls.n	800b1d8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b1cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b1d6:	e113      	b.n	800b400 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d075      	beq.n	800b2ce <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d006      	beq.n	800b1f8 <tcp_slowtmr+0xf0>
 800b1ea:	4b62      	ldr	r3, [pc, #392]	; (800b374 <tcp_slowtmr+0x26c>)
 800b1ec:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b1f0:	4965      	ldr	r1, [pc, #404]	; (800b388 <tcp_slowtmr+0x280>)
 800b1f2:	4862      	ldr	r0, [pc, #392]	; (800b37c <tcp_slowtmr+0x274>)
 800b1f4:	f00a f9b4 	bl	8015560 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d106      	bne.n	800b20e <tcp_slowtmr+0x106>
 800b200:	4b5c      	ldr	r3, [pc, #368]	; (800b374 <tcp_slowtmr+0x26c>)
 800b202:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b206:	4961      	ldr	r1, [pc, #388]	; (800b38c <tcp_slowtmr+0x284>)
 800b208:	485c      	ldr	r0, [pc, #368]	; (800b37c <tcp_slowtmr+0x274>)
 800b20a:	f00a f9a9 	bl	8015560 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b210:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b214:	2b0b      	cmp	r3, #11
 800b216:	d905      	bls.n	800b224 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b21c:	3301      	adds	r3, #1
 800b21e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b222:	e0ed      	b.n	800b400 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b226:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b22a:	3b01      	subs	r3, #1
 800b22c:	4a58      	ldr	r2, [pc, #352]	; (800b390 <tcp_slowtmr+0x288>)
 800b22e:	5cd3      	ldrb	r3, [r2, r3]
 800b230:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b234:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b238:	7c7a      	ldrb	r2, [r7, #17]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d907      	bls.n	800b24e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b240:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b244:	3301      	adds	r3, #1
 800b246:	b2da      	uxtb	r2, r3
 800b248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b24a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b250:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b254:	7c7a      	ldrb	r2, [r7, #17]
 800b256:	429a      	cmp	r2, r3
 800b258:	f200 80d2 	bhi.w	800b400 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b25c:	2301      	movs	r3, #1
 800b25e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b262:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b266:	2b00      	cmp	r3, #0
 800b268:	d108      	bne.n	800b27c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b26a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b26c:	f004 fc24 	bl	800fab8 <tcp_zero_window_probe>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d014      	beq.n	800b2a0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b276:	2300      	movs	r3, #0
 800b278:	623b      	str	r3, [r7, #32]
 800b27a:	e011      	b.n	800b2a0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b27e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b282:	4619      	mov	r1, r3
 800b284:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b286:	f003 faeb 	bl	800e860 <tcp_split_unsent_seg>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d107      	bne.n	800b2a0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b290:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b292:	f003 fd6b 	bl	800ed6c <tcp_output>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d101      	bne.n	800b2a0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b29c:	2300      	movs	r3, #0
 800b29e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b2a0:	6a3b      	ldr	r3, [r7, #32]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f000 80ac 	beq.w	800b400 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b2b6:	2b06      	cmp	r3, #6
 800b2b8:	f200 80a2 	bhi.w	800b400 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	b2da      	uxtb	r2, r3
 800b2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b2cc:	e098      	b.n	800b400 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	db0f      	blt.n	800b2f8 <tcp_slowtmr+0x1f0>
 800b2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b2de:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d008      	beq.n	800b2f8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800b2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	b21a      	sxth	r2, r3
 800b2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2fa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b300:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b304:	429a      	cmp	r2, r3
 800b306:	db7b      	blt.n	800b400 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b308:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b30a:	f004 f821 	bl	800f350 <tcp_rexmit_rto_prepare>
 800b30e:	4603      	mov	r3, r0
 800b310:	2b00      	cmp	r3, #0
 800b312:	d007      	beq.n	800b324 <tcp_slowtmr+0x21c>
 800b314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d171      	bne.n	800b400 <tcp_slowtmr+0x2f8>
 800b31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b31e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b320:	2b00      	cmp	r3, #0
 800b322:	d06d      	beq.n	800b400 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800b324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b326:	7d1b      	ldrb	r3, [r3, #20]
 800b328:	2b02      	cmp	r3, #2
 800b32a:	d03a      	beq.n	800b3a2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b32e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b332:	2b0c      	cmp	r3, #12
 800b334:	bf28      	it	cs
 800b336:	230c      	movcs	r3, #12
 800b338:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b340:	10db      	asrs	r3, r3, #3
 800b342:	b21b      	sxth	r3, r3
 800b344:	461a      	mov	r2, r3
 800b346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b348:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b34c:	4413      	add	r3, r2
 800b34e:	7efa      	ldrb	r2, [r7, #27]
 800b350:	4910      	ldr	r1, [pc, #64]	; (800b394 <tcp_slowtmr+0x28c>)
 800b352:	5c8a      	ldrb	r2, [r1, r2]
 800b354:	4093      	lsls	r3, r2
 800b356:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b35e:	4293      	cmp	r3, r2
 800b360:	dc1a      	bgt.n	800b398 <tcp_slowtmr+0x290>
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	b21a      	sxth	r2, r3
 800b366:	e019      	b.n	800b39c <tcp_slowtmr+0x294>
 800b368:	20006a24 	.word	0x20006a24
 800b36c:	200003d6 	.word	0x200003d6
 800b370:	20006a20 	.word	0x20006a20
 800b374:	0801988c 	.word	0x0801988c
 800b378:	08019bd0 	.word	0x08019bd0
 800b37c:	080198d0 	.word	0x080198d0
 800b380:	08019bfc 	.word	0x08019bfc
 800b384:	08019c28 	.word	0x08019c28
 800b388:	08019c58 	.word	0x08019c58
 800b38c:	08019c8c 	.word	0x08019c8c
 800b390:	0801bc00 	.word	0x0801bc00
 800b394:	0801bbf0 	.word	0x0801bbf0
 800b398:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b39e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800b3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	bf28      	it	cs
 800b3b8:	4613      	movcs	r3, r2
 800b3ba:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b3bc:	8a7b      	ldrh	r3, [r7, #18]
 800b3be:	085b      	lsrs	r3, r3, #1
 800b3c0:	b29a      	uxth	r2, r3
 800b3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3d2:	005b      	lsls	r3, r3, #1
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d206      	bcs.n	800b3e8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3de:	005b      	lsls	r3, r3, #1
 800b3e0:	b29a      	uxth	r2, r3
 800b3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800b3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ea:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800b3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800b3fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3fc:	f004 f818 	bl	800f430 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b402:	7d1b      	ldrb	r3, [r3, #20]
 800b404:	2b06      	cmp	r3, #6
 800b406:	d111      	bne.n	800b42c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b40a:	8b5b      	ldrh	r3, [r3, #26]
 800b40c:	f003 0310 	and.w	r3, r3, #16
 800b410:	2b00      	cmp	r3, #0
 800b412:	d00b      	beq.n	800b42c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b414:	4b9d      	ldr	r3, [pc, #628]	; (800b68c <tcp_slowtmr+0x584>)
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b41a:	6a1b      	ldr	r3, [r3, #32]
 800b41c:	1ad3      	subs	r3, r2, r3
 800b41e:	2b28      	cmp	r3, #40	; 0x28
 800b420:	d904      	bls.n	800b42c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b426:	3301      	adds	r3, #1
 800b428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42e:	7a5b      	ldrb	r3, [r3, #9]
 800b430:	f003 0308 	and.w	r3, r3, #8
 800b434:	2b00      	cmp	r3, #0
 800b436:	d04c      	beq.n	800b4d2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800b438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b43c:	2b04      	cmp	r3, #4
 800b43e:	d003      	beq.n	800b448 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800b440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b442:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b444:	2b07      	cmp	r3, #7
 800b446:	d144      	bne.n	800b4d2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b448:	4b90      	ldr	r3, [pc, #576]	; (800b68c <tcp_slowtmr+0x584>)
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b44e:	6a1b      	ldr	r3, [r3, #32]
 800b450:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b458:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800b45c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800b460:	498b      	ldr	r1, [pc, #556]	; (800b690 <tcp_slowtmr+0x588>)
 800b462:	fba1 1303 	umull	r1, r3, r1, r3
 800b466:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b468:	429a      	cmp	r2, r3
 800b46a:	d90a      	bls.n	800b482 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b46c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b470:	3301      	adds	r3, #1
 800b472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800b476:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b47a:	3301      	adds	r3, #1
 800b47c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b480:	e027      	b.n	800b4d2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b482:	4b82      	ldr	r3, [pc, #520]	; (800b68c <tcp_slowtmr+0x584>)
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b488:	6a1b      	ldr	r3, [r3, #32]
 800b48a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b48e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b494:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b498:	4618      	mov	r0, r3
 800b49a:	4b7e      	ldr	r3, [pc, #504]	; (800b694 <tcp_slowtmr+0x58c>)
 800b49c:	fb03 f300 	mul.w	r3, r3, r0
 800b4a0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b4a2:	497b      	ldr	r1, [pc, #492]	; (800b690 <tcp_slowtmr+0x588>)
 800b4a4:	fba1 1303 	umull	r1, r3, r1, r3
 800b4a8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d911      	bls.n	800b4d2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800b4ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4b0:	f004 fac2 	bl	800fa38 <tcp_keepalive>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800b4ba:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d107      	bne.n	800b4d2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800b4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	b2da      	uxtb	r2, r3
 800b4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ce:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d011      	beq.n	800b4fe <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b4da:	4b6c      	ldr	r3, [pc, #432]	; (800b68c <tcp_slowtmr+0x584>)
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e0:	6a1b      	ldr	r3, [r3, #32]
 800b4e2:	1ad2      	subs	r2, r2, r3
 800b4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	005b      	lsls	r3, r3, #1
 800b4f0:	440b      	add	r3, r1
 800b4f2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d302      	bcc.n	800b4fe <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800b4f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4fa:	f000 fddb 	bl	800c0b4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b500:	7d1b      	ldrb	r3, [r3, #20]
 800b502:	2b03      	cmp	r3, #3
 800b504:	d10b      	bne.n	800b51e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b506:	4b61      	ldr	r3, [pc, #388]	; (800b68c <tcp_slowtmr+0x584>)
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b50c:	6a1b      	ldr	r3, [r3, #32]
 800b50e:	1ad3      	subs	r3, r2, r3
 800b510:	2b28      	cmp	r3, #40	; 0x28
 800b512:	d904      	bls.n	800b51e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b518:	3301      	adds	r3, #1
 800b51a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b520:	7d1b      	ldrb	r3, [r3, #20]
 800b522:	2b09      	cmp	r3, #9
 800b524:	d10b      	bne.n	800b53e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b526:	4b59      	ldr	r3, [pc, #356]	; (800b68c <tcp_slowtmr+0x584>)
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52c:	6a1b      	ldr	r3, [r3, #32]
 800b52e:	1ad3      	subs	r3, r2, r3
 800b530:	2bf0      	cmp	r3, #240	; 0xf0
 800b532:	d904      	bls.n	800b53e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800b534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b538:	3301      	adds	r3, #1
 800b53a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b53e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b542:	2b00      	cmp	r3, #0
 800b544:	d060      	beq.n	800b608 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b54c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b54e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b550:	f000 fbfc 	bl	800bd4c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b556:	2b00      	cmp	r3, #0
 800b558:	d010      	beq.n	800b57c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b55a:	4b4f      	ldr	r3, [pc, #316]	; (800b698 <tcp_slowtmr+0x590>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b560:	429a      	cmp	r2, r3
 800b562:	d106      	bne.n	800b572 <tcp_slowtmr+0x46a>
 800b564:	4b4d      	ldr	r3, [pc, #308]	; (800b69c <tcp_slowtmr+0x594>)
 800b566:	f240 526d 	movw	r2, #1389	; 0x56d
 800b56a:	494d      	ldr	r1, [pc, #308]	; (800b6a0 <tcp_slowtmr+0x598>)
 800b56c:	484d      	ldr	r0, [pc, #308]	; (800b6a4 <tcp_slowtmr+0x59c>)
 800b56e:	f009 fff7 	bl	8015560 <iprintf>
        prev->next = pcb->next;
 800b572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b574:	68da      	ldr	r2, [r3, #12]
 800b576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b578:	60da      	str	r2, [r3, #12]
 800b57a:	e00f      	b.n	800b59c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b57c:	4b46      	ldr	r3, [pc, #280]	; (800b698 <tcp_slowtmr+0x590>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b582:	429a      	cmp	r2, r3
 800b584:	d006      	beq.n	800b594 <tcp_slowtmr+0x48c>
 800b586:	4b45      	ldr	r3, [pc, #276]	; (800b69c <tcp_slowtmr+0x594>)
 800b588:	f240 5271 	movw	r2, #1393	; 0x571
 800b58c:	4946      	ldr	r1, [pc, #280]	; (800b6a8 <tcp_slowtmr+0x5a0>)
 800b58e:	4845      	ldr	r0, [pc, #276]	; (800b6a4 <tcp_slowtmr+0x59c>)
 800b590:	f009 ffe6 	bl	8015560 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b596:	68db      	ldr	r3, [r3, #12]
 800b598:	4a3f      	ldr	r2, [pc, #252]	; (800b698 <tcp_slowtmr+0x590>)
 800b59a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b59c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d013      	beq.n	800b5cc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5aa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b5ac:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800b5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b0:	3304      	adds	r3, #4
 800b5b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5b4:	8ad2      	ldrh	r2, [r2, #22]
 800b5b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5b8:	8b09      	ldrh	r1, [r1, #24]
 800b5ba:	9102      	str	r1, [sp, #8]
 800b5bc:	9201      	str	r2, [sp, #4]
 800b5be:	9300      	str	r3, [sp, #0]
 800b5c0:	462b      	mov	r3, r5
 800b5c2:	4622      	mov	r2, r4
 800b5c4:	4601      	mov	r1, r0
 800b5c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5c8:	f004 f984 	bl	800f8d4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ce:	691b      	ldr	r3, [r3, #16]
 800b5d0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d4:	7d1b      	ldrb	r3, [r3, #20]
 800b5d6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5da:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b5e2:	6838      	ldr	r0, [r7, #0]
 800b5e4:	f7ff f9f2 	bl	800a9cc <tcp_free>

      tcp_active_pcbs_changed = 0;
 800b5e8:	4b30      	ldr	r3, [pc, #192]	; (800b6ac <tcp_slowtmr+0x5a4>)
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d004      	beq.n	800b5fe <tcp_slowtmr+0x4f6>
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f06f 010c 	mvn.w	r1, #12
 800b5fa:	68b8      	ldr	r0, [r7, #8]
 800b5fc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b5fe:	4b2b      	ldr	r3, [pc, #172]	; (800b6ac <tcp_slowtmr+0x5a4>)
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d037      	beq.n	800b676 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800b606:	e590      	b.n	800b12a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b60a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b614:	7f1b      	ldrb	r3, [r3, #28]
 800b616:	3301      	adds	r3, #1
 800b618:	b2da      	uxtb	r2, r3
 800b61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b620:	7f1a      	ldrb	r2, [r3, #28]
 800b622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b624:	7f5b      	ldrb	r3, [r3, #29]
 800b626:	429a      	cmp	r2, r3
 800b628:	d325      	bcc.n	800b676 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800b62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62c:	2200      	movs	r2, #0
 800b62e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b630:	4b1e      	ldr	r3, [pc, #120]	; (800b6ac <tcp_slowtmr+0x5a4>)
 800b632:	2200      	movs	r2, #0
 800b634:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d00b      	beq.n	800b658 <tcp_slowtmr+0x550>
 800b640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b648:	6912      	ldr	r2, [r2, #16]
 800b64a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b64c:	4610      	mov	r0, r2
 800b64e:	4798      	blx	r3
 800b650:	4603      	mov	r3, r0
 800b652:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b656:	e002      	b.n	800b65e <tcp_slowtmr+0x556>
 800b658:	2300      	movs	r3, #0
 800b65a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800b65e:	4b13      	ldr	r3, [pc, #76]	; (800b6ac <tcp_slowtmr+0x5a4>)
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d000      	beq.n	800b668 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800b666:	e560      	b.n	800b12a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b668:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d102      	bne.n	800b676 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800b670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b672:	f003 fb7b 	bl	800ed6c <tcp_output>
  while (pcb != NULL) {
 800b676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f47f ad5c 	bne.w	800b136 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b67e:	2300      	movs	r3, #0
 800b680:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800b682:	4b0b      	ldr	r3, [pc, #44]	; (800b6b0 <tcp_slowtmr+0x5a8>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b688:	e067      	b.n	800b75a <tcp_slowtmr+0x652>
 800b68a:	bf00      	nop
 800b68c:	20006a24 	.word	0x20006a24
 800b690:	10624dd3 	.word	0x10624dd3
 800b694:	000124f8 	.word	0x000124f8
 800b698:	20006a20 	.word	0x20006a20
 800b69c:	0801988c 	.word	0x0801988c
 800b6a0:	08019cc4 	.word	0x08019cc4
 800b6a4:	080198d0 	.word	0x080198d0
 800b6a8:	08019cf0 	.word	0x08019cf0
 800b6ac:	20006a1c 	.word	0x20006a1c
 800b6b0:	20006a30 	.word	0x20006a30
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b6:	7d1b      	ldrb	r3, [r3, #20]
 800b6b8:	2b0a      	cmp	r3, #10
 800b6ba:	d006      	beq.n	800b6ca <tcp_slowtmr+0x5c2>
 800b6bc:	4b2b      	ldr	r3, [pc, #172]	; (800b76c <tcp_slowtmr+0x664>)
 800b6be:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800b6c2:	492b      	ldr	r1, [pc, #172]	; (800b770 <tcp_slowtmr+0x668>)
 800b6c4:	482b      	ldr	r0, [pc, #172]	; (800b774 <tcp_slowtmr+0x66c>)
 800b6c6:	f009 ff4b 	bl	8015560 <iprintf>
    pcb_remove = 0;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b6d0:	4b29      	ldr	r3, [pc, #164]	; (800b778 <tcp_slowtmr+0x670>)
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d6:	6a1b      	ldr	r3, [r3, #32]
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	2bf0      	cmp	r3, #240	; 0xf0
 800b6dc:	d904      	bls.n	800b6e8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800b6de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b6e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d02f      	beq.n	800b750 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b6f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b6f2:	f000 fb2b 	bl	800bd4c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d010      	beq.n	800b71e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b6fc:	4b1f      	ldr	r3, [pc, #124]	; (800b77c <tcp_slowtmr+0x674>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b702:	429a      	cmp	r2, r3
 800b704:	d106      	bne.n	800b714 <tcp_slowtmr+0x60c>
 800b706:	4b19      	ldr	r3, [pc, #100]	; (800b76c <tcp_slowtmr+0x664>)
 800b708:	f240 52af 	movw	r2, #1455	; 0x5af
 800b70c:	491c      	ldr	r1, [pc, #112]	; (800b780 <tcp_slowtmr+0x678>)
 800b70e:	4819      	ldr	r0, [pc, #100]	; (800b774 <tcp_slowtmr+0x66c>)
 800b710:	f009 ff26 	bl	8015560 <iprintf>
        prev->next = pcb->next;
 800b714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b716:	68da      	ldr	r2, [r3, #12]
 800b718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71a:	60da      	str	r2, [r3, #12]
 800b71c:	e00f      	b.n	800b73e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b71e:	4b17      	ldr	r3, [pc, #92]	; (800b77c <tcp_slowtmr+0x674>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b724:	429a      	cmp	r2, r3
 800b726:	d006      	beq.n	800b736 <tcp_slowtmr+0x62e>
 800b728:	4b10      	ldr	r3, [pc, #64]	; (800b76c <tcp_slowtmr+0x664>)
 800b72a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b72e:	4915      	ldr	r1, [pc, #84]	; (800b784 <tcp_slowtmr+0x67c>)
 800b730:	4810      	ldr	r0, [pc, #64]	; (800b774 <tcp_slowtmr+0x66c>)
 800b732:	f009 ff15 	bl	8015560 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	4a10      	ldr	r2, [pc, #64]	; (800b77c <tcp_slowtmr+0x674>)
 800b73c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b740:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800b742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b748:	69f8      	ldr	r0, [r7, #28]
 800b74a:	f7ff f93f 	bl	800a9cc <tcp_free>
 800b74e:	e004      	b.n	800b75a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800b750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b752:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d1a9      	bne.n	800b6b4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800b760:	bf00      	nop
 800b762:	bf00      	nop
 800b764:	3730      	adds	r7, #48	; 0x30
 800b766:	46bd      	mov	sp, r7
 800b768:	bdb0      	pop	{r4, r5, r7, pc}
 800b76a:	bf00      	nop
 800b76c:	0801988c 	.word	0x0801988c
 800b770:	08019d1c 	.word	0x08019d1c
 800b774:	080198d0 	.word	0x080198d0
 800b778:	20006a24 	.word	0x20006a24
 800b77c:	20006a30 	.word	0x20006a30
 800b780:	08019d4c 	.word	0x08019d4c
 800b784:	08019d74 	.word	0x08019d74

0800b788 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b78e:	4b2d      	ldr	r3, [pc, #180]	; (800b844 <tcp_fasttmr+0xbc>)
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	3301      	adds	r3, #1
 800b794:	b2da      	uxtb	r2, r3
 800b796:	4b2b      	ldr	r3, [pc, #172]	; (800b844 <tcp_fasttmr+0xbc>)
 800b798:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b79a:	4b2b      	ldr	r3, [pc, #172]	; (800b848 <tcp_fasttmr+0xc0>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b7a0:	e048      	b.n	800b834 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	7f9a      	ldrb	r2, [r3, #30]
 800b7a6:	4b27      	ldr	r3, [pc, #156]	; (800b844 <tcp_fasttmr+0xbc>)
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d03f      	beq.n	800b82e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b7ae:	4b25      	ldr	r3, [pc, #148]	; (800b844 <tcp_fasttmr+0xbc>)
 800b7b0:	781a      	ldrb	r2, [r3, #0]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	8b5b      	ldrh	r3, [r3, #26]
 800b7ba:	f003 0301 	and.w	r3, r3, #1
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d010      	beq.n	800b7e4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	8b5b      	ldrh	r3, [r3, #26]
 800b7c6:	f043 0302 	orr.w	r3, r3, #2
 800b7ca:	b29a      	uxth	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f003 facb 	bl	800ed6c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	8b5b      	ldrh	r3, [r3, #26]
 800b7da:	f023 0303 	bic.w	r3, r3, #3
 800b7de:	b29a      	uxth	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	8b5b      	ldrh	r3, [r3, #26]
 800b7e8:	f003 0308 	and.w	r3, r3, #8
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d009      	beq.n	800b804 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	8b5b      	ldrh	r3, [r3, #26]
 800b7f4:	f023 0308 	bic.w	r3, r3, #8
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f7ff fa78 	bl	800acf4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d00a      	beq.n	800b828 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b812:	4b0e      	ldr	r3, [pc, #56]	; (800b84c <tcp_fasttmr+0xc4>)
 800b814:	2200      	movs	r2, #0
 800b816:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 f819 	bl	800b850 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b81e:	4b0b      	ldr	r3, [pc, #44]	; (800b84c <tcp_fasttmr+0xc4>)
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d000      	beq.n	800b828 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b826:	e7b8      	b.n	800b79a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	607b      	str	r3, [r7, #4]
 800b82c:	e002      	b.n	800b834 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d1b3      	bne.n	800b7a2 <tcp_fasttmr+0x1a>
    }
  }
}
 800b83a:	bf00      	nop
 800b83c:	bf00      	nop
 800b83e:	3708      	adds	r7, #8
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	200003d6 	.word	0x200003d6
 800b848:	20006a20 	.word	0x20006a20
 800b84c:	20006a1c 	.word	0x20006a1c

0800b850 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b850:	b590      	push	{r4, r7, lr}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d109      	bne.n	800b872 <tcp_process_refused_data+0x22>
 800b85e:	4b37      	ldr	r3, [pc, #220]	; (800b93c <tcp_process_refused_data+0xec>)
 800b860:	f240 6209 	movw	r2, #1545	; 0x609
 800b864:	4936      	ldr	r1, [pc, #216]	; (800b940 <tcp_process_refused_data+0xf0>)
 800b866:	4837      	ldr	r0, [pc, #220]	; (800b944 <tcp_process_refused_data+0xf4>)
 800b868:	f009 fe7a 	bl	8015560 <iprintf>
 800b86c:	f06f 030f 	mvn.w	r3, #15
 800b870:	e060      	b.n	800b934 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b876:	7b5b      	ldrb	r3, [r3, #13]
 800b878:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b87e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00b      	beq.n	800b8a8 <tcp_process_refused_data+0x58>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6918      	ldr	r0, [r3, #16]
 800b89a:	2300      	movs	r3, #0
 800b89c:	68ba      	ldr	r2, [r7, #8]
 800b89e:	6879      	ldr	r1, [r7, #4]
 800b8a0:	47a0      	blx	r4
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	73fb      	strb	r3, [r7, #15]
 800b8a6:	e007      	b.n	800b8b8 <tcp_process_refused_data+0x68>
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	6879      	ldr	r1, [r7, #4]
 800b8ae:	2000      	movs	r0, #0
 800b8b0:	f000 f8a4 	bl	800b9fc <tcp_recv_null>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b8b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d12a      	bne.n	800b916 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b8c0:	7bbb      	ldrb	r3, [r7, #14]
 800b8c2:	f003 0320 	and.w	r3, r3, #32
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d033      	beq.n	800b932 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8d2:	d005      	beq.n	800b8e0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8d8:	3301      	adds	r3, #1
 800b8da:	b29a      	uxth	r2, r3
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d00b      	beq.n	800b902 <tcp_process_refused_data+0xb2>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6918      	ldr	r0, [r3, #16]
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	6879      	ldr	r1, [r7, #4]
 800b8fa:	47a0      	blx	r4
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	73fb      	strb	r3, [r7, #15]
 800b900:	e001      	b.n	800b906 <tcp_process_refused_data+0xb6>
 800b902:	2300      	movs	r3, #0
 800b904:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b90a:	f113 0f0d 	cmn.w	r3, #13
 800b90e:	d110      	bne.n	800b932 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b910:	f06f 030c 	mvn.w	r3, #12
 800b914:	e00e      	b.n	800b934 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b91a:	f113 0f0d 	cmn.w	r3, #13
 800b91e:	d102      	bne.n	800b926 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b920:	f06f 030c 	mvn.w	r3, #12
 800b924:	e006      	b.n	800b934 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	68ba      	ldr	r2, [r7, #8]
 800b92a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800b92c:	f06f 0304 	mvn.w	r3, #4
 800b930:	e000      	b.n	800b934 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b932:	2300      	movs	r3, #0
}
 800b934:	4618      	mov	r0, r3
 800b936:	3714      	adds	r7, #20
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd90      	pop	{r4, r7, pc}
 800b93c:	0801988c 	.word	0x0801988c
 800b940:	08019d9c 	.word	0x08019d9c
 800b944:	080198d0 	.word	0x080198d0

0800b948 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b950:	e007      	b.n	800b962 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 f80a 	bl	800b972 <tcp_seg_free>
    seg = next;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d1f4      	bne.n	800b952 <tcp_segs_free+0xa>
  }
}
 800b968:	bf00      	nop
 800b96a:	bf00      	nop
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}

0800b972 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b972:	b580      	push	{r7, lr}
 800b974:	b082      	sub	sp, #8
 800b976:	af00      	add	r7, sp, #0
 800b978:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00c      	beq.n	800b99a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d004      	beq.n	800b992 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7fe fd6d 	bl	800a46c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b992:	6879      	ldr	r1, [r7, #4]
 800b994:	2003      	movs	r0, #3
 800b996:	f7fd ff6f 	bl	8009878 <memp_free>
  }
}
 800b99a:	bf00      	nop
 800b99c:	3708      	adds	r7, #8
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
	...

0800b9a4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d106      	bne.n	800b9c0 <tcp_seg_copy+0x1c>
 800b9b2:	4b0f      	ldr	r3, [pc, #60]	; (800b9f0 <tcp_seg_copy+0x4c>)
 800b9b4:	f240 6282 	movw	r2, #1666	; 0x682
 800b9b8:	490e      	ldr	r1, [pc, #56]	; (800b9f4 <tcp_seg_copy+0x50>)
 800b9ba:	480f      	ldr	r0, [pc, #60]	; (800b9f8 <tcp_seg_copy+0x54>)
 800b9bc:	f009 fdd0 	bl	8015560 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b9c0:	2003      	movs	r0, #3
 800b9c2:	f7fd ff0d 	bl	80097e0 <memp_malloc>
 800b9c6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d101      	bne.n	800b9d2 <tcp_seg_copy+0x2e>
    return NULL;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	e00a      	b.n	800b9e8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b9d2:	2210      	movs	r2, #16
 800b9d4:	6879      	ldr	r1, [r7, #4]
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	f009 f87e 	bl	8014ad8 <memcpy>
  pbuf_ref(cseg->p);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f7fe fde3 	bl	800a5ac <pbuf_ref>
  return cseg;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3710      	adds	r7, #16
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	0801988c 	.word	0x0801988c
 800b9f4:	08019de0 	.word	0x08019de0
 800b9f8:	080198d0 	.word	0x080198d0

0800b9fc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]
 800ba08:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d109      	bne.n	800ba24 <tcp_recv_null+0x28>
 800ba10:	4b12      	ldr	r3, [pc, #72]	; (800ba5c <tcp_recv_null+0x60>)
 800ba12:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ba16:	4912      	ldr	r1, [pc, #72]	; (800ba60 <tcp_recv_null+0x64>)
 800ba18:	4812      	ldr	r0, [pc, #72]	; (800ba64 <tcp_recv_null+0x68>)
 800ba1a:	f009 fda1 	bl	8015560 <iprintf>
 800ba1e:	f06f 030f 	mvn.w	r3, #15
 800ba22:	e016      	b.n	800ba52 <tcp_recv_null+0x56>

  if (p != NULL) {
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d009      	beq.n	800ba3e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	891b      	ldrh	r3, [r3, #8]
 800ba2e:	4619      	mov	r1, r3
 800ba30:	68b8      	ldr	r0, [r7, #8]
 800ba32:	f7ff fb19 	bl	800b068 <tcp_recved>
    pbuf_free(p);
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f7fe fd18 	bl	800a46c <pbuf_free>
 800ba3c:	e008      	b.n	800ba50 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ba3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d104      	bne.n	800ba50 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ba46:	68b8      	ldr	r0, [r7, #8]
 800ba48:	f7ff f9be 	bl	800adc8 <tcp_close>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	e000      	b.n	800ba52 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ba50:	2300      	movs	r3, #0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	0801988c 	.word	0x0801988c
 800ba60:	08019dfc 	.word	0x08019dfc
 800ba64:	080198d0 	.word	0x080198d0

0800ba68 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b086      	sub	sp, #24
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	4603      	mov	r3, r0
 800ba70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ba72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	db01      	blt.n	800ba7e <tcp_kill_prio+0x16>
 800ba7a:	79fb      	ldrb	r3, [r7, #7]
 800ba7c:	e000      	b.n	800ba80 <tcp_kill_prio+0x18>
 800ba7e:	237f      	movs	r3, #127	; 0x7f
 800ba80:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ba82:	7afb      	ldrb	r3, [r7, #11]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d034      	beq.n	800baf2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ba88:	7afb      	ldrb	r3, [r7, #11]
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ba92:	2300      	movs	r3, #0
 800ba94:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba96:	4b19      	ldr	r3, [pc, #100]	; (800bafc <tcp_kill_prio+0x94>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	617b      	str	r3, [r7, #20]
 800ba9c:	e01f      	b.n	800bade <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	7d5b      	ldrb	r3, [r3, #21]
 800baa2:	7afa      	ldrb	r2, [r7, #11]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d80c      	bhi.n	800bac2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800baac:	7afa      	ldrb	r2, [r7, #11]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d112      	bne.n	800bad8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bab2:	4b13      	ldr	r3, [pc, #76]	; (800bb00 <tcp_kill_prio+0x98>)
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	6a1b      	ldr	r3, [r3, #32]
 800baba:	1ad3      	subs	r3, r2, r3
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	429a      	cmp	r2, r3
 800bac0:	d80a      	bhi.n	800bad8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800bac2:	4b0f      	ldr	r3, [pc, #60]	; (800bb00 <tcp_kill_prio+0x98>)
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	6a1b      	ldr	r3, [r3, #32]
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	7d5b      	ldrb	r3, [r3, #21]
 800bad6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	617b      	str	r3, [r7, #20]
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d1dc      	bne.n	800ba9e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d004      	beq.n	800baf4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800baea:	6938      	ldr	r0, [r7, #16]
 800baec:	f7ff fa56 	bl	800af9c <tcp_abort>
 800baf0:	e000      	b.n	800baf4 <tcp_kill_prio+0x8c>
    return;
 800baf2:	bf00      	nop
  }
}
 800baf4:	3718      	adds	r7, #24
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	20006a20 	.word	0x20006a20
 800bb00:	20006a24 	.word	0x20006a24

0800bb04 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b086      	sub	sp, #24
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800bb0e:	79fb      	ldrb	r3, [r7, #7]
 800bb10:	2b08      	cmp	r3, #8
 800bb12:	d009      	beq.n	800bb28 <tcp_kill_state+0x24>
 800bb14:	79fb      	ldrb	r3, [r7, #7]
 800bb16:	2b09      	cmp	r3, #9
 800bb18:	d006      	beq.n	800bb28 <tcp_kill_state+0x24>
 800bb1a:	4b1a      	ldr	r3, [pc, #104]	; (800bb84 <tcp_kill_state+0x80>)
 800bb1c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800bb20:	4919      	ldr	r1, [pc, #100]	; (800bb88 <tcp_kill_state+0x84>)
 800bb22:	481a      	ldr	r0, [pc, #104]	; (800bb8c <tcp_kill_state+0x88>)
 800bb24:	f009 fd1c 	bl	8015560 <iprintf>

  inactivity = 0;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb30:	4b17      	ldr	r3, [pc, #92]	; (800bb90 <tcp_kill_state+0x8c>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	617b      	str	r3, [r7, #20]
 800bb36:	e017      	b.n	800bb68 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	7d1b      	ldrb	r3, [r3, #20]
 800bb3c:	79fa      	ldrb	r2, [r7, #7]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d10f      	bne.n	800bb62 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bb42:	4b14      	ldr	r3, [pc, #80]	; (800bb94 <tcp_kill_state+0x90>)
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	6a1b      	ldr	r3, [r3, #32]
 800bb4a:	1ad3      	subs	r3, r2, r3
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d807      	bhi.n	800bb62 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800bb52:	4b10      	ldr	r3, [pc, #64]	; (800bb94 <tcp_kill_state+0x90>)
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	6a1b      	ldr	r3, [r3, #32]
 800bb5a:	1ad3      	subs	r3, r2, r3
 800bb5c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	68db      	ldr	r3, [r3, #12]
 800bb66:	617b      	str	r3, [r7, #20]
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d1e4      	bne.n	800bb38 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d003      	beq.n	800bb7c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800bb74:	2100      	movs	r1, #0
 800bb76:	6938      	ldr	r0, [r7, #16]
 800bb78:	f7ff f952 	bl	800ae20 <tcp_abandon>
  }
}
 800bb7c:	bf00      	nop
 800bb7e:	3718      	adds	r7, #24
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	0801988c 	.word	0x0801988c
 800bb88:	08019e18 	.word	0x08019e18
 800bb8c:	080198d0 	.word	0x080198d0
 800bb90:	20006a20 	.word	0x20006a20
 800bb94:	20006a24 	.word	0x20006a24

0800bb98 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800bba2:	2300      	movs	r3, #0
 800bba4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bba6:	4b12      	ldr	r3, [pc, #72]	; (800bbf0 <tcp_kill_timewait+0x58>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	60fb      	str	r3, [r7, #12]
 800bbac:	e012      	b.n	800bbd4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bbae:	4b11      	ldr	r3, [pc, #68]	; (800bbf4 <tcp_kill_timewait+0x5c>)
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	1ad3      	subs	r3, r2, r3
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d807      	bhi.n	800bbce <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800bbbe:	4b0d      	ldr	r3, [pc, #52]	; (800bbf4 <tcp_kill_timewait+0x5c>)
 800bbc0:	681a      	ldr	r2, [r3, #0]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	6a1b      	ldr	r3, [r3, #32]
 800bbc6:	1ad3      	subs	r3, r2, r3
 800bbc8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	60fb      	str	r3, [r7, #12]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d1e9      	bne.n	800bbae <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d002      	beq.n	800bbe6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bbe0:	68b8      	ldr	r0, [r7, #8]
 800bbe2:	f7ff f9db 	bl	800af9c <tcp_abort>
  }
}
 800bbe6:	bf00      	nop
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	20006a30 	.word	0x20006a30
 800bbf4:	20006a24 	.word	0x20006a24

0800bbf8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800bbfe:	4b10      	ldr	r3, [pc, #64]	; (800bc40 <tcp_handle_closepend+0x48>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bc04:	e014      	b.n	800bc30 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	8b5b      	ldrh	r3, [r3, #26]
 800bc10:	f003 0308 	and.w	r3, r3, #8
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d009      	beq.n	800bc2c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	8b5b      	ldrh	r3, [r3, #26]
 800bc1c:	f023 0308 	bic.w	r3, r3, #8
 800bc20:	b29a      	uxth	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f7ff f864 	bl	800acf4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d1e7      	bne.n	800bc06 <tcp_handle_closepend+0xe>
  }
}
 800bc36:	bf00      	nop
 800bc38:	bf00      	nop
 800bc3a:	3708      	adds	r7, #8
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	20006a20 	.word	0x20006a20

0800bc44 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bc4e:	2001      	movs	r0, #1
 800bc50:	f7fd fdc6 	bl	80097e0 <memp_malloc>
 800bc54:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d126      	bne.n	800bcaa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800bc5c:	f7ff ffcc 	bl	800bbf8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800bc60:	f7ff ff9a 	bl	800bb98 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bc64:	2001      	movs	r0, #1
 800bc66:	f7fd fdbb 	bl	80097e0 <memp_malloc>
 800bc6a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d11b      	bne.n	800bcaa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800bc72:	2009      	movs	r0, #9
 800bc74:	f7ff ff46 	bl	800bb04 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bc78:	2001      	movs	r0, #1
 800bc7a:	f7fd fdb1 	bl	80097e0 <memp_malloc>
 800bc7e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d111      	bne.n	800bcaa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800bc86:	2008      	movs	r0, #8
 800bc88:	f7ff ff3c 	bl	800bb04 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bc8c:	2001      	movs	r0, #1
 800bc8e:	f7fd fda7 	bl	80097e0 <memp_malloc>
 800bc92:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d107      	bne.n	800bcaa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800bc9a:	79fb      	ldrb	r3, [r7, #7]
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f7ff fee3 	bl	800ba68 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bca2:	2001      	movs	r0, #1
 800bca4:	f7fd fd9c 	bl	80097e0 <memp_malloc>
 800bca8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d03f      	beq.n	800bd30 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bcb0:	229c      	movs	r2, #156	; 0x9c
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	68f8      	ldr	r0, [r7, #12]
 800bcb6:	f008 ff37 	bl	8014b28 <memset>
    pcb->prio = prio;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	79fa      	ldrb	r2, [r7, #7]
 800bcbe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800bcc6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bcd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	22ff      	movs	r2, #255	; 0xff
 800bcde:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800bce6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2206      	movs	r2, #6
 800bcec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2206      	movs	r2, #6
 800bcf4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcfc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2201      	movs	r2, #1
 800bd02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800bd06:	4b0d      	ldr	r3, [pc, #52]	; (800bd3c <tcp_alloc+0xf8>)
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800bd0e:	4b0c      	ldr	r3, [pc, #48]	; (800bd40 <tcp_alloc+0xfc>)
 800bd10:	781a      	ldrb	r2, [r3, #0]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800bd1c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	4a08      	ldr	r2, [pc, #32]	; (800bd44 <tcp_alloc+0x100>)
 800bd24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	4a07      	ldr	r2, [pc, #28]	; (800bd48 <tcp_alloc+0x104>)
 800bd2c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800bd30:	68fb      	ldr	r3, [r7, #12]
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3710      	adds	r7, #16
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	20006a24 	.word	0x20006a24
 800bd40:	200003d6 	.word	0x200003d6
 800bd44:	0800b9fd 	.word	0x0800b9fd
 800bd48:	006ddd00 	.word	0x006ddd00

0800bd4c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d107      	bne.n	800bd6a <tcp_pcb_purge+0x1e>
 800bd5a:	4b21      	ldr	r3, [pc, #132]	; (800bde0 <tcp_pcb_purge+0x94>)
 800bd5c:	f640 0251 	movw	r2, #2129	; 0x851
 800bd60:	4920      	ldr	r1, [pc, #128]	; (800bde4 <tcp_pcb_purge+0x98>)
 800bd62:	4821      	ldr	r0, [pc, #132]	; (800bde8 <tcp_pcb_purge+0x9c>)
 800bd64:	f009 fbfc 	bl	8015560 <iprintf>
 800bd68:	e037      	b.n	800bdda <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	7d1b      	ldrb	r3, [r3, #20]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d033      	beq.n	800bdda <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800bd76:	2b0a      	cmp	r3, #10
 800bd78:	d02f      	beq.n	800bdda <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d02b      	beq.n	800bdda <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d007      	beq.n	800bd9a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7fe fb6c 	bl	800a46c <pbuf_free>
      pcb->refused_data = NULL;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d002      	beq.n	800bda8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 f986 	bl	800c0b4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdae:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7ff fdc7 	bl	800b948 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7ff fdc2 	bl	800b948 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	66da      	str	r2, [r3, #108]	; 0x6c
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	0801988c 	.word	0x0801988c
 800bde4:	08019ed8 	.word	0x08019ed8
 800bde8:	080198d0 	.word	0x080198d0

0800bdec <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d106      	bne.n	800be0a <tcp_pcb_remove+0x1e>
 800bdfc:	4b3e      	ldr	r3, [pc, #248]	; (800bef8 <tcp_pcb_remove+0x10c>)
 800bdfe:	f640 0283 	movw	r2, #2179	; 0x883
 800be02:	493e      	ldr	r1, [pc, #248]	; (800befc <tcp_pcb_remove+0x110>)
 800be04:	483e      	ldr	r0, [pc, #248]	; (800bf00 <tcp_pcb_remove+0x114>)
 800be06:	f009 fbab 	bl	8015560 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d106      	bne.n	800be1e <tcp_pcb_remove+0x32>
 800be10:	4b39      	ldr	r3, [pc, #228]	; (800bef8 <tcp_pcb_remove+0x10c>)
 800be12:	f640 0284 	movw	r2, #2180	; 0x884
 800be16:	493b      	ldr	r1, [pc, #236]	; (800bf04 <tcp_pcb_remove+0x118>)
 800be18:	4839      	ldr	r0, [pc, #228]	; (800bf00 <tcp_pcb_remove+0x114>)
 800be1a:	f009 fba1 	bl	8015560 <iprintf>

  TCP_RMV(pcblist, pcb);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	683a      	ldr	r2, [r7, #0]
 800be24:	429a      	cmp	r2, r3
 800be26:	d105      	bne.n	800be34 <tcp_pcb_remove+0x48>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	68da      	ldr	r2, [r3, #12]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	601a      	str	r2, [r3, #0]
 800be32:	e013      	b.n	800be5c <tcp_pcb_remove+0x70>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	60fb      	str	r3, [r7, #12]
 800be3a:	e00c      	b.n	800be56 <tcp_pcb_remove+0x6a>
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	68db      	ldr	r3, [r3, #12]
 800be40:	683a      	ldr	r2, [r7, #0]
 800be42:	429a      	cmp	r2, r3
 800be44:	d104      	bne.n	800be50 <tcp_pcb_remove+0x64>
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	68da      	ldr	r2, [r3, #12]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	60da      	str	r2, [r3, #12]
 800be4e:	e005      	b.n	800be5c <tcp_pcb_remove+0x70>
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	68db      	ldr	r3, [r3, #12]
 800be54:	60fb      	str	r3, [r7, #12]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d1ef      	bne.n	800be3c <tcp_pcb_remove+0x50>
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	2200      	movs	r2, #0
 800be60:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800be62:	6838      	ldr	r0, [r7, #0]
 800be64:	f7ff ff72 	bl	800bd4c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	7d1b      	ldrb	r3, [r3, #20]
 800be6c:	2b0a      	cmp	r3, #10
 800be6e:	d013      	beq.n	800be98 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800be74:	2b01      	cmp	r3, #1
 800be76:	d00f      	beq.n	800be98 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	8b5b      	ldrh	r3, [r3, #26]
 800be7c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800be80:	2b00      	cmp	r3, #0
 800be82:	d009      	beq.n	800be98 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	8b5b      	ldrh	r3, [r3, #26]
 800be88:	f043 0302 	orr.w	r3, r3, #2
 800be8c:	b29a      	uxth	r2, r3
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800be92:	6838      	ldr	r0, [r7, #0]
 800be94:	f002 ff6a 	bl	800ed6c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	7d1b      	ldrb	r3, [r3, #20]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d020      	beq.n	800bee2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d006      	beq.n	800beb6 <tcp_pcb_remove+0xca>
 800bea8:	4b13      	ldr	r3, [pc, #76]	; (800bef8 <tcp_pcb_remove+0x10c>)
 800beaa:	f640 0293 	movw	r2, #2195	; 0x893
 800beae:	4916      	ldr	r1, [pc, #88]	; (800bf08 <tcp_pcb_remove+0x11c>)
 800beb0:	4813      	ldr	r0, [pc, #76]	; (800bf00 <tcp_pcb_remove+0x114>)
 800beb2:	f009 fb55 	bl	8015560 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d006      	beq.n	800becc <tcp_pcb_remove+0xe0>
 800bebe:	4b0e      	ldr	r3, [pc, #56]	; (800bef8 <tcp_pcb_remove+0x10c>)
 800bec0:	f640 0294 	movw	r2, #2196	; 0x894
 800bec4:	4911      	ldr	r1, [pc, #68]	; (800bf0c <tcp_pcb_remove+0x120>)
 800bec6:	480e      	ldr	r0, [pc, #56]	; (800bf00 <tcp_pcb_remove+0x114>)
 800bec8:	f009 fb4a 	bl	8015560 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d006      	beq.n	800bee2 <tcp_pcb_remove+0xf6>
 800bed4:	4b08      	ldr	r3, [pc, #32]	; (800bef8 <tcp_pcb_remove+0x10c>)
 800bed6:	f640 0296 	movw	r2, #2198	; 0x896
 800beda:	490d      	ldr	r1, [pc, #52]	; (800bf10 <tcp_pcb_remove+0x124>)
 800bedc:	4808      	ldr	r0, [pc, #32]	; (800bf00 <tcp_pcb_remove+0x114>)
 800bede:	f009 fb3f 	bl	8015560 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	2200      	movs	r2, #0
 800bee6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	2200      	movs	r2, #0
 800beec:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800beee:	bf00      	nop
 800bef0:	3710      	adds	r7, #16
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	0801988c 	.word	0x0801988c
 800befc:	08019ef4 	.word	0x08019ef4
 800bf00:	080198d0 	.word	0x080198d0
 800bf04:	08019f10 	.word	0x08019f10
 800bf08:	08019f30 	.word	0x08019f30
 800bf0c:	08019f48 	.word	0x08019f48
 800bf10:	08019f64 	.word	0x08019f64

0800bf14 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d106      	bne.n	800bf30 <tcp_next_iss+0x1c>
 800bf22:	4b0a      	ldr	r3, [pc, #40]	; (800bf4c <tcp_next_iss+0x38>)
 800bf24:	f640 02af 	movw	r2, #2223	; 0x8af
 800bf28:	4909      	ldr	r1, [pc, #36]	; (800bf50 <tcp_next_iss+0x3c>)
 800bf2a:	480a      	ldr	r0, [pc, #40]	; (800bf54 <tcp_next_iss+0x40>)
 800bf2c:	f009 fb18 	bl	8015560 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800bf30:	4b09      	ldr	r3, [pc, #36]	; (800bf58 <tcp_next_iss+0x44>)
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	4b09      	ldr	r3, [pc, #36]	; (800bf5c <tcp_next_iss+0x48>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4413      	add	r3, r2
 800bf3a:	4a07      	ldr	r2, [pc, #28]	; (800bf58 <tcp_next_iss+0x44>)
 800bf3c:	6013      	str	r3, [r2, #0]
  return iss;
 800bf3e:	4b06      	ldr	r3, [pc, #24]	; (800bf58 <tcp_next_iss+0x44>)
 800bf40:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3708      	adds	r7, #8
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	0801988c 	.word	0x0801988c
 800bf50:	08019f7c 	.word	0x08019f7c
 800bf54:	080198d0 	.word	0x080198d0
 800bf58:	20000018 	.word	0x20000018
 800bf5c:	20006a24 	.word	0x20006a24

0800bf60 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b086      	sub	sp, #24
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	4603      	mov	r3, r0
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
 800bf6c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d106      	bne.n	800bf82 <tcp_eff_send_mss_netif+0x22>
 800bf74:	4b14      	ldr	r3, [pc, #80]	; (800bfc8 <tcp_eff_send_mss_netif+0x68>)
 800bf76:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800bf7a:	4914      	ldr	r1, [pc, #80]	; (800bfcc <tcp_eff_send_mss_netif+0x6c>)
 800bf7c:	4814      	ldr	r0, [pc, #80]	; (800bfd0 <tcp_eff_send_mss_netif+0x70>)
 800bf7e:	f009 faef 	bl	8015560 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d101      	bne.n	800bf8c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800bf88:	89fb      	ldrh	r3, [r7, #14]
 800bf8a:	e019      	b.n	800bfc0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf90:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800bf92:	8afb      	ldrh	r3, [r7, #22]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d012      	beq.n	800bfbe <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800bf98:	2328      	movs	r3, #40	; 0x28
 800bf9a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800bf9c:	8afa      	ldrh	r2, [r7, #22]
 800bf9e:	8abb      	ldrh	r3, [r7, #20]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d904      	bls.n	800bfae <tcp_eff_send_mss_netif+0x4e>
 800bfa4:	8afa      	ldrh	r2, [r7, #22]
 800bfa6:	8abb      	ldrh	r3, [r7, #20]
 800bfa8:	1ad3      	subs	r3, r2, r3
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	e000      	b.n	800bfb0 <tcp_eff_send_mss_netif+0x50>
 800bfae:	2300      	movs	r3, #0
 800bfb0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800bfb2:	8a7a      	ldrh	r2, [r7, #18]
 800bfb4:	89fb      	ldrh	r3, [r7, #14]
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	bf28      	it	cs
 800bfba:	4613      	movcs	r3, r2
 800bfbc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800bfbe:	89fb      	ldrh	r3, [r7, #14]
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3718      	adds	r7, #24
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	0801988c 	.word	0x0801988c
 800bfcc:	08019f98 	.word	0x08019f98
 800bfd0:	080198d0 	.word	0x080198d0

0800bfd4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d119      	bne.n	800c01c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800bfe8:	4b10      	ldr	r3, [pc, #64]	; (800c02c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800bfea:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800bfee:	4910      	ldr	r1, [pc, #64]	; (800c030 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800bff0:	4810      	ldr	r0, [pc, #64]	; (800c034 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800bff2:	f009 fab5 	bl	8015560 <iprintf>

  while (pcb != NULL) {
 800bff6:	e011      	b.n	800c01c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	429a      	cmp	r2, r3
 800c002:	d108      	bne.n	800c016 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	68db      	ldr	r3, [r3, #12]
 800c008:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c00a:	68f8      	ldr	r0, [r7, #12]
 800c00c:	f7fe ffc6 	bl	800af9c <tcp_abort>
      pcb = next;
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	60fb      	str	r3, [r7, #12]
 800c014:	e002      	b.n	800c01c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d1ea      	bne.n	800bff8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c022:	bf00      	nop
 800c024:	bf00      	nop
 800c026:	3710      	adds	r7, #16
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	0801988c 	.word	0x0801988c
 800c030:	08019fc0 	.word	0x08019fc0
 800c034:	080198d0 	.word	0x080198d0

0800c038 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d02a      	beq.n	800c09e <tcp_netif_ip_addr_changed+0x66>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d026      	beq.n	800c09e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c050:	4b15      	ldr	r3, [pc, #84]	; (800c0a8 <tcp_netif_ip_addr_changed+0x70>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4619      	mov	r1, r3
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f7ff ffbc 	bl	800bfd4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c05c:	4b13      	ldr	r3, [pc, #76]	; (800c0ac <tcp_netif_ip_addr_changed+0x74>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4619      	mov	r1, r3
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f7ff ffb6 	bl	800bfd4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d017      	beq.n	800c09e <tcp_netif_ip_addr_changed+0x66>
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d013      	beq.n	800c09e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c076:	4b0e      	ldr	r3, [pc, #56]	; (800c0b0 <tcp_netif_ip_addr_changed+0x78>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	60fb      	str	r3, [r7, #12]
 800c07c:	e00c      	b.n	800c098 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681a      	ldr	r2, [r3, #0]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	429a      	cmp	r2, r3
 800c088:	d103      	bne.n	800c092 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	68db      	ldr	r3, [r3, #12]
 800c096:	60fb      	str	r3, [r7, #12]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d1ef      	bne.n	800c07e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c09e:	bf00      	nop
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	20006a20 	.word	0x20006a20
 800c0ac:	20006a2c 	.word	0x20006a2c
 800c0b0:	20006a28 	.word	0x20006a28

0800c0b4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d007      	beq.n	800c0d4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7ff fc3d 	bl	800b948 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c0d4:	bf00      	nop
 800c0d6:	3708      	adds	r7, #8
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c0dc:	b590      	push	{r4, r7, lr}
 800c0de:	b08d      	sub	sp, #52	; 0x34
 800c0e0:	af04      	add	r7, sp, #16
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d105      	bne.n	800c0f8 <tcp_input+0x1c>
 800c0ec:	4b9b      	ldr	r3, [pc, #620]	; (800c35c <tcp_input+0x280>)
 800c0ee:	2283      	movs	r2, #131	; 0x83
 800c0f0:	499b      	ldr	r1, [pc, #620]	; (800c360 <tcp_input+0x284>)
 800c0f2:	489c      	ldr	r0, [pc, #624]	; (800c364 <tcp_input+0x288>)
 800c0f4:	f009 fa34 	bl	8015560 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	4a9a      	ldr	r2, [pc, #616]	; (800c368 <tcp_input+0x28c>)
 800c0fe:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	895b      	ldrh	r3, [r3, #10]
 800c104:	2b13      	cmp	r3, #19
 800c106:	f240 83c4 	bls.w	800c892 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c10a:	4b98      	ldr	r3, [pc, #608]	; (800c36c <tcp_input+0x290>)
 800c10c:	695b      	ldr	r3, [r3, #20]
 800c10e:	4a97      	ldr	r2, [pc, #604]	; (800c36c <tcp_input+0x290>)
 800c110:	6812      	ldr	r2, [r2, #0]
 800c112:	4611      	mov	r1, r2
 800c114:	4618      	mov	r0, r3
 800c116:	f007 fd49 	bl	8013bac <ip4_addr_isbroadcast_u32>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	f040 83ba 	bne.w	800c896 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c122:	4b92      	ldr	r3, [pc, #584]	; (800c36c <tcp_input+0x290>)
 800c124:	695b      	ldr	r3, [r3, #20]
 800c126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c12a:	2be0      	cmp	r3, #224	; 0xe0
 800c12c:	f000 83b3 	beq.w	800c896 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c130:	4b8d      	ldr	r3, [pc, #564]	; (800c368 <tcp_input+0x28c>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	899b      	ldrh	r3, [r3, #12]
 800c136:	b29b      	uxth	r3, r3
 800c138:	4618      	mov	r0, r3
 800c13a:	f7fc fefb 	bl	8008f34 <lwip_htons>
 800c13e:	4603      	mov	r3, r0
 800c140:	0b1b      	lsrs	r3, r3, #12
 800c142:	b29b      	uxth	r3, r3
 800c144:	b2db      	uxtb	r3, r3
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c14a:	7cbb      	ldrb	r3, [r7, #18]
 800c14c:	2b13      	cmp	r3, #19
 800c14e:	f240 83a4 	bls.w	800c89a <tcp_input+0x7be>
 800c152:	7cbb      	ldrb	r3, [r7, #18]
 800c154:	b29a      	uxth	r2, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	891b      	ldrh	r3, [r3, #8]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	f200 839d 	bhi.w	800c89a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c160:	7cbb      	ldrb	r3, [r7, #18]
 800c162:	b29b      	uxth	r3, r3
 800c164:	3b14      	subs	r3, #20
 800c166:	b29a      	uxth	r2, r3
 800c168:	4b81      	ldr	r3, [pc, #516]	; (800c370 <tcp_input+0x294>)
 800c16a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c16c:	4b81      	ldr	r3, [pc, #516]	; (800c374 <tcp_input+0x298>)
 800c16e:	2200      	movs	r2, #0
 800c170:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	895a      	ldrh	r2, [r3, #10]
 800c176:	7cbb      	ldrb	r3, [r7, #18]
 800c178:	b29b      	uxth	r3, r3
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d309      	bcc.n	800c192 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c17e:	4b7c      	ldr	r3, [pc, #496]	; (800c370 <tcp_input+0x294>)
 800c180:	881a      	ldrh	r2, [r3, #0]
 800c182:	4b7d      	ldr	r3, [pc, #500]	; (800c378 <tcp_input+0x29c>)
 800c184:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c186:	7cbb      	ldrb	r3, [r7, #18]
 800c188:	4619      	mov	r1, r3
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f7fe f8e8 	bl	800a360 <pbuf_remove_header>
 800c190:	e04e      	b.n	800c230 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d105      	bne.n	800c1a6 <tcp_input+0xca>
 800c19a:	4b70      	ldr	r3, [pc, #448]	; (800c35c <tcp_input+0x280>)
 800c19c:	22c2      	movs	r2, #194	; 0xc2
 800c19e:	4977      	ldr	r1, [pc, #476]	; (800c37c <tcp_input+0x2a0>)
 800c1a0:	4870      	ldr	r0, [pc, #448]	; (800c364 <tcp_input+0x288>)
 800c1a2:	f009 f9dd 	bl	8015560 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c1a6:	2114      	movs	r1, #20
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f7fe f8d9 	bl	800a360 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	895a      	ldrh	r2, [r3, #10]
 800c1b2:	4b71      	ldr	r3, [pc, #452]	; (800c378 <tcp_input+0x29c>)
 800c1b4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c1b6:	4b6e      	ldr	r3, [pc, #440]	; (800c370 <tcp_input+0x294>)
 800c1b8:	881a      	ldrh	r2, [r3, #0]
 800c1ba:	4b6f      	ldr	r3, [pc, #444]	; (800c378 <tcp_input+0x29c>)
 800c1bc:	881b      	ldrh	r3, [r3, #0]
 800c1be:	1ad3      	subs	r3, r2, r3
 800c1c0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c1c2:	4b6d      	ldr	r3, [pc, #436]	; (800c378 <tcp_input+0x29c>)
 800c1c4:	881b      	ldrh	r3, [r3, #0]
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f7fe f8c9 	bl	800a360 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	895b      	ldrh	r3, [r3, #10]
 800c1d4:	8a3a      	ldrh	r2, [r7, #16]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	f200 8361 	bhi.w	800c89e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	4a64      	ldr	r2, [pc, #400]	; (800c374 <tcp_input+0x298>)
 800c1e4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	8a3a      	ldrh	r2, [r7, #16]
 800c1ec:	4611      	mov	r1, r2
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fe f8b6 	bl	800a360 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	891a      	ldrh	r2, [r3, #8]
 800c1f8:	8a3b      	ldrh	r3, [r7, #16]
 800c1fa:	1ad3      	subs	r3, r2, r3
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	895b      	ldrh	r3, [r3, #10]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d005      	beq.n	800c216 <tcp_input+0x13a>
 800c20a:	4b54      	ldr	r3, [pc, #336]	; (800c35c <tcp_input+0x280>)
 800c20c:	22df      	movs	r2, #223	; 0xdf
 800c20e:	495c      	ldr	r1, [pc, #368]	; (800c380 <tcp_input+0x2a4>)
 800c210:	4854      	ldr	r0, [pc, #336]	; (800c364 <tcp_input+0x288>)
 800c212:	f009 f9a5 	bl	8015560 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	891a      	ldrh	r2, [r3, #8]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	891b      	ldrh	r3, [r3, #8]
 800c220:	429a      	cmp	r2, r3
 800c222:	d005      	beq.n	800c230 <tcp_input+0x154>
 800c224:	4b4d      	ldr	r3, [pc, #308]	; (800c35c <tcp_input+0x280>)
 800c226:	22e0      	movs	r2, #224	; 0xe0
 800c228:	4956      	ldr	r1, [pc, #344]	; (800c384 <tcp_input+0x2a8>)
 800c22a:	484e      	ldr	r0, [pc, #312]	; (800c364 <tcp_input+0x288>)
 800c22c:	f009 f998 	bl	8015560 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c230:	4b4d      	ldr	r3, [pc, #308]	; (800c368 <tcp_input+0x28c>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	881b      	ldrh	r3, [r3, #0]
 800c236:	b29b      	uxth	r3, r3
 800c238:	4a4b      	ldr	r2, [pc, #300]	; (800c368 <tcp_input+0x28c>)
 800c23a:	6814      	ldr	r4, [r2, #0]
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7fc fe79 	bl	8008f34 <lwip_htons>
 800c242:	4603      	mov	r3, r0
 800c244:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c246:	4b48      	ldr	r3, [pc, #288]	; (800c368 <tcp_input+0x28c>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	885b      	ldrh	r3, [r3, #2]
 800c24c:	b29b      	uxth	r3, r3
 800c24e:	4a46      	ldr	r2, [pc, #280]	; (800c368 <tcp_input+0x28c>)
 800c250:	6814      	ldr	r4, [r2, #0]
 800c252:	4618      	mov	r0, r3
 800c254:	f7fc fe6e 	bl	8008f34 <lwip_htons>
 800c258:	4603      	mov	r3, r0
 800c25a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c25c:	4b42      	ldr	r3, [pc, #264]	; (800c368 <tcp_input+0x28c>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	4a41      	ldr	r2, [pc, #260]	; (800c368 <tcp_input+0x28c>)
 800c264:	6814      	ldr	r4, [r2, #0]
 800c266:	4618      	mov	r0, r3
 800c268:	f7fc fe79 	bl	8008f5e <lwip_htonl>
 800c26c:	4603      	mov	r3, r0
 800c26e:	6063      	str	r3, [r4, #4]
 800c270:	6863      	ldr	r3, [r4, #4]
 800c272:	4a45      	ldr	r2, [pc, #276]	; (800c388 <tcp_input+0x2ac>)
 800c274:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c276:	4b3c      	ldr	r3, [pc, #240]	; (800c368 <tcp_input+0x28c>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	689b      	ldr	r3, [r3, #8]
 800c27c:	4a3a      	ldr	r2, [pc, #232]	; (800c368 <tcp_input+0x28c>)
 800c27e:	6814      	ldr	r4, [r2, #0]
 800c280:	4618      	mov	r0, r3
 800c282:	f7fc fe6c 	bl	8008f5e <lwip_htonl>
 800c286:	4603      	mov	r3, r0
 800c288:	60a3      	str	r3, [r4, #8]
 800c28a:	68a3      	ldr	r3, [r4, #8]
 800c28c:	4a3f      	ldr	r2, [pc, #252]	; (800c38c <tcp_input+0x2b0>)
 800c28e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c290:	4b35      	ldr	r3, [pc, #212]	; (800c368 <tcp_input+0x28c>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	89db      	ldrh	r3, [r3, #14]
 800c296:	b29b      	uxth	r3, r3
 800c298:	4a33      	ldr	r2, [pc, #204]	; (800c368 <tcp_input+0x28c>)
 800c29a:	6814      	ldr	r4, [r2, #0]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7fc fe49 	bl	8008f34 <lwip_htons>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c2a6:	4b30      	ldr	r3, [pc, #192]	; (800c368 <tcp_input+0x28c>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	899b      	ldrh	r3, [r3, #12]
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7fc fe40 	bl	8008f34 <lwip_htons>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2bc:	b2da      	uxtb	r2, r3
 800c2be:	4b34      	ldr	r3, [pc, #208]	; (800c390 <tcp_input+0x2b4>)
 800c2c0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	891a      	ldrh	r2, [r3, #8]
 800c2c6:	4b33      	ldr	r3, [pc, #204]	; (800c394 <tcp_input+0x2b8>)
 800c2c8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c2ca:	4b31      	ldr	r3, [pc, #196]	; (800c390 <tcp_input+0x2b4>)
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	f003 0303 	and.w	r3, r3, #3
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d00c      	beq.n	800c2f0 <tcp_input+0x214>
    tcplen++;
 800c2d6:	4b2f      	ldr	r3, [pc, #188]	; (800c394 <tcp_input+0x2b8>)
 800c2d8:	881b      	ldrh	r3, [r3, #0]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	b29a      	uxth	r2, r3
 800c2de:	4b2d      	ldr	r3, [pc, #180]	; (800c394 <tcp_input+0x2b8>)
 800c2e0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	891a      	ldrh	r2, [r3, #8]
 800c2e6:	4b2b      	ldr	r3, [pc, #172]	; (800c394 <tcp_input+0x2b8>)
 800c2e8:	881b      	ldrh	r3, [r3, #0]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	f200 82d9 	bhi.w	800c8a2 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c2f4:	4b28      	ldr	r3, [pc, #160]	; (800c398 <tcp_input+0x2bc>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	61fb      	str	r3, [r7, #28]
 800c2fa:	e09d      	b.n	800c438 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	7d1b      	ldrb	r3, [r3, #20]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d105      	bne.n	800c310 <tcp_input+0x234>
 800c304:	4b15      	ldr	r3, [pc, #84]	; (800c35c <tcp_input+0x280>)
 800c306:	22fb      	movs	r2, #251	; 0xfb
 800c308:	4924      	ldr	r1, [pc, #144]	; (800c39c <tcp_input+0x2c0>)
 800c30a:	4816      	ldr	r0, [pc, #88]	; (800c364 <tcp_input+0x288>)
 800c30c:	f009 f928 	bl	8015560 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	7d1b      	ldrb	r3, [r3, #20]
 800c314:	2b0a      	cmp	r3, #10
 800c316:	d105      	bne.n	800c324 <tcp_input+0x248>
 800c318:	4b10      	ldr	r3, [pc, #64]	; (800c35c <tcp_input+0x280>)
 800c31a:	22fc      	movs	r2, #252	; 0xfc
 800c31c:	4920      	ldr	r1, [pc, #128]	; (800c3a0 <tcp_input+0x2c4>)
 800c31e:	4811      	ldr	r0, [pc, #68]	; (800c364 <tcp_input+0x288>)
 800c320:	f009 f91e 	bl	8015560 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	7d1b      	ldrb	r3, [r3, #20]
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d105      	bne.n	800c338 <tcp_input+0x25c>
 800c32c:	4b0b      	ldr	r3, [pc, #44]	; (800c35c <tcp_input+0x280>)
 800c32e:	22fd      	movs	r2, #253	; 0xfd
 800c330:	491c      	ldr	r1, [pc, #112]	; (800c3a4 <tcp_input+0x2c8>)
 800c332:	480c      	ldr	r0, [pc, #48]	; (800c364 <tcp_input+0x288>)
 800c334:	f009 f914 	bl	8015560 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c338:	69fb      	ldr	r3, [r7, #28]
 800c33a:	7a1b      	ldrb	r3, [r3, #8]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d033      	beq.n	800c3a8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c340:	69fb      	ldr	r3, [r7, #28]
 800c342:	7a1a      	ldrb	r2, [r3, #8]
 800c344:	4b09      	ldr	r3, [pc, #36]	; (800c36c <tcp_input+0x290>)
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c34c:	3301      	adds	r3, #1
 800c34e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c350:	429a      	cmp	r2, r3
 800c352:	d029      	beq.n	800c3a8 <tcp_input+0x2cc>
      prev = pcb;
 800c354:	69fb      	ldr	r3, [r7, #28]
 800c356:	61bb      	str	r3, [r7, #24]
      continue;
 800c358:	e06b      	b.n	800c432 <tcp_input+0x356>
 800c35a:	bf00      	nop
 800c35c:	08019ff4 	.word	0x08019ff4
 800c360:	0801a028 	.word	0x0801a028
 800c364:	0801a040 	.word	0x0801a040
 800c368:	200003e8 	.word	0x200003e8
 800c36c:	200038fc 	.word	0x200038fc
 800c370:	200003ec 	.word	0x200003ec
 800c374:	200003f0 	.word	0x200003f0
 800c378:	200003ee 	.word	0x200003ee
 800c37c:	0801a068 	.word	0x0801a068
 800c380:	0801a078 	.word	0x0801a078
 800c384:	0801a084 	.word	0x0801a084
 800c388:	200003f8 	.word	0x200003f8
 800c38c:	200003fc 	.word	0x200003fc
 800c390:	20000404 	.word	0x20000404
 800c394:	20000402 	.word	0x20000402
 800c398:	20006a20 	.word	0x20006a20
 800c39c:	0801a0a4 	.word	0x0801a0a4
 800c3a0:	0801a0cc 	.word	0x0801a0cc
 800c3a4:	0801a0f8 	.word	0x0801a0f8
    }

    if (pcb->remote_port == tcphdr->src &&
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	8b1a      	ldrh	r2, [r3, #24]
 800c3ac:	4b94      	ldr	r3, [pc, #592]	; (800c600 <tcp_input+0x524>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	881b      	ldrh	r3, [r3, #0]
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d13a      	bne.n	800c42e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c3b8:	69fb      	ldr	r3, [r7, #28]
 800c3ba:	8ada      	ldrh	r2, [r3, #22]
 800c3bc:	4b90      	ldr	r3, [pc, #576]	; (800c600 <tcp_input+0x524>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	885b      	ldrh	r3, [r3, #2]
 800c3c2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d132      	bne.n	800c42e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c3c8:	69fb      	ldr	r3, [r7, #28]
 800c3ca:	685a      	ldr	r2, [r3, #4]
 800c3cc:	4b8d      	ldr	r3, [pc, #564]	; (800c604 <tcp_input+0x528>)
 800c3ce:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d12c      	bne.n	800c42e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	4b8a      	ldr	r3, [pc, #552]	; (800c604 <tcp_input+0x528>)
 800c3da:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d126      	bne.n	800c42e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	69fa      	ldr	r2, [r7, #28]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d106      	bne.n	800c3f8 <tcp_input+0x31c>
 800c3ea:	4b87      	ldr	r3, [pc, #540]	; (800c608 <tcp_input+0x52c>)
 800c3ec:	f240 120d 	movw	r2, #269	; 0x10d
 800c3f0:	4986      	ldr	r1, [pc, #536]	; (800c60c <tcp_input+0x530>)
 800c3f2:	4887      	ldr	r0, [pc, #540]	; (800c610 <tcp_input+0x534>)
 800c3f4:	f009 f8b4 	bl	8015560 <iprintf>
      if (prev != NULL) {
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00a      	beq.n	800c414 <tcp_input+0x338>
        prev->next = pcb->next;
 800c3fe:	69fb      	ldr	r3, [r7, #28]
 800c400:	68da      	ldr	r2, [r3, #12]
 800c402:	69bb      	ldr	r3, [r7, #24]
 800c404:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c406:	4b83      	ldr	r3, [pc, #524]	; (800c614 <tcp_input+0x538>)
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	69fb      	ldr	r3, [r7, #28]
 800c40c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c40e:	4a81      	ldr	r2, [pc, #516]	; (800c614 <tcp_input+0x538>)
 800c410:	69fb      	ldr	r3, [r7, #28]
 800c412:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c414:	69fb      	ldr	r3, [r7, #28]
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	69fa      	ldr	r2, [r7, #28]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d111      	bne.n	800c442 <tcp_input+0x366>
 800c41e:	4b7a      	ldr	r3, [pc, #488]	; (800c608 <tcp_input+0x52c>)
 800c420:	f240 1215 	movw	r2, #277	; 0x115
 800c424:	497c      	ldr	r1, [pc, #496]	; (800c618 <tcp_input+0x53c>)
 800c426:	487a      	ldr	r0, [pc, #488]	; (800c610 <tcp_input+0x534>)
 800c428:	f009 f89a 	bl	8015560 <iprintf>
      break;
 800c42c:	e009      	b.n	800c442 <tcp_input+0x366>
    }
    prev = pcb;
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	68db      	ldr	r3, [r3, #12]
 800c436:	61fb      	str	r3, [r7, #28]
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	f47f af5e 	bne.w	800c2fc <tcp_input+0x220>
 800c440:	e000      	b.n	800c444 <tcp_input+0x368>
      break;
 800c442:	bf00      	nop
  }

  if (pcb == NULL) {
 800c444:	69fb      	ldr	r3, [r7, #28]
 800c446:	2b00      	cmp	r3, #0
 800c448:	f040 8095 	bne.w	800c576 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c44c:	4b73      	ldr	r3, [pc, #460]	; (800c61c <tcp_input+0x540>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	61fb      	str	r3, [r7, #28]
 800c452:	e03f      	b.n	800c4d4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c454:	69fb      	ldr	r3, [r7, #28]
 800c456:	7d1b      	ldrb	r3, [r3, #20]
 800c458:	2b0a      	cmp	r3, #10
 800c45a:	d006      	beq.n	800c46a <tcp_input+0x38e>
 800c45c:	4b6a      	ldr	r3, [pc, #424]	; (800c608 <tcp_input+0x52c>)
 800c45e:	f240 121f 	movw	r2, #287	; 0x11f
 800c462:	496f      	ldr	r1, [pc, #444]	; (800c620 <tcp_input+0x544>)
 800c464:	486a      	ldr	r0, [pc, #424]	; (800c610 <tcp_input+0x534>)
 800c466:	f009 f87b 	bl	8015560 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c46a:	69fb      	ldr	r3, [r7, #28]
 800c46c:	7a1b      	ldrb	r3, [r3, #8]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d009      	beq.n	800c486 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	7a1a      	ldrb	r2, [r3, #8]
 800c476:	4b63      	ldr	r3, [pc, #396]	; (800c604 <tcp_input+0x528>)
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c47e:	3301      	adds	r3, #1
 800c480:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c482:	429a      	cmp	r2, r3
 800c484:	d122      	bne.n	800c4cc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c486:	69fb      	ldr	r3, [r7, #28]
 800c488:	8b1a      	ldrh	r2, [r3, #24]
 800c48a:	4b5d      	ldr	r3, [pc, #372]	; (800c600 <tcp_input+0x524>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	881b      	ldrh	r3, [r3, #0]
 800c490:	b29b      	uxth	r3, r3
 800c492:	429a      	cmp	r2, r3
 800c494:	d11b      	bne.n	800c4ce <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c496:	69fb      	ldr	r3, [r7, #28]
 800c498:	8ada      	ldrh	r2, [r3, #22]
 800c49a:	4b59      	ldr	r3, [pc, #356]	; (800c600 <tcp_input+0x524>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	885b      	ldrh	r3, [r3, #2]
 800c4a0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d113      	bne.n	800c4ce <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	685a      	ldr	r2, [r3, #4]
 800c4aa:	4b56      	ldr	r3, [pc, #344]	; (800c604 <tcp_input+0x528>)
 800c4ac:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d10d      	bne.n	800c4ce <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c4b2:	69fb      	ldr	r3, [r7, #28]
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	4b53      	ldr	r3, [pc, #332]	; (800c604 <tcp_input+0x528>)
 800c4b8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d107      	bne.n	800c4ce <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c4be:	69f8      	ldr	r0, [r7, #28]
 800c4c0:	f000 fb54 	bl	800cb6c <tcp_timewait_input>
        }
        pbuf_free(p);
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f7fd ffd1 	bl	800a46c <pbuf_free>
        return;
 800c4ca:	e1f0      	b.n	800c8ae <tcp_input+0x7d2>
        continue;
 800c4cc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4ce:	69fb      	ldr	r3, [r7, #28]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	61fb      	str	r3, [r7, #28]
 800c4d4:	69fb      	ldr	r3, [r7, #28]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1bc      	bne.n	800c454 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c4de:	4b51      	ldr	r3, [pc, #324]	; (800c624 <tcp_input+0x548>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	617b      	str	r3, [r7, #20]
 800c4e4:	e02a      	b.n	800c53c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	7a1b      	ldrb	r3, [r3, #8]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d00c      	beq.n	800c508 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	7a1a      	ldrb	r2, [r3, #8]
 800c4f2:	4b44      	ldr	r3, [pc, #272]	; (800c604 <tcp_input+0x528>)
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d002      	beq.n	800c508 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	61bb      	str	r3, [r7, #24]
        continue;
 800c506:	e016      	b.n	800c536 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	8ada      	ldrh	r2, [r3, #22]
 800c50c:	4b3c      	ldr	r3, [pc, #240]	; (800c600 <tcp_input+0x524>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	885b      	ldrh	r3, [r3, #2]
 800c512:	b29b      	uxth	r3, r3
 800c514:	429a      	cmp	r2, r3
 800c516:	d10c      	bne.n	800c532 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	4b39      	ldr	r3, [pc, #228]	; (800c604 <tcp_input+0x528>)
 800c51e:	695b      	ldr	r3, [r3, #20]
 800c520:	429a      	cmp	r2, r3
 800c522:	d00f      	beq.n	800c544 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d00d      	beq.n	800c546 <tcp_input+0x46a>
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d009      	beq.n	800c546 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	68db      	ldr	r3, [r3, #12]
 800c53a:	617b      	str	r3, [r7, #20]
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d1d1      	bne.n	800c4e6 <tcp_input+0x40a>
 800c542:	e000      	b.n	800c546 <tcp_input+0x46a>
            break;
 800c544:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d014      	beq.n	800c576 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00a      	beq.n	800c568 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	68da      	ldr	r2, [r3, #12]
 800c556:	69bb      	ldr	r3, [r7, #24]
 800c558:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c55a:	4b32      	ldr	r3, [pc, #200]	; (800c624 <tcp_input+0x548>)
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c562:	4a30      	ldr	r2, [pc, #192]	; (800c624 <tcp_input+0x548>)
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c568:	6978      	ldr	r0, [r7, #20]
 800c56a:	f000 fa01 	bl	800c970 <tcp_listen_input>
      }
      pbuf_free(p);
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f7fd ff7c 	bl	800a46c <pbuf_free>
      return;
 800c574:	e19b      	b.n	800c8ae <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c576:	69fb      	ldr	r3, [r7, #28]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	f000 8160 	beq.w	800c83e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c57e:	4b2a      	ldr	r3, [pc, #168]	; (800c628 <tcp_input+0x54c>)
 800c580:	2200      	movs	r2, #0
 800c582:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	891a      	ldrh	r2, [r3, #8]
 800c588:	4b27      	ldr	r3, [pc, #156]	; (800c628 <tcp_input+0x54c>)
 800c58a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c58c:	4a26      	ldr	r2, [pc, #152]	; (800c628 <tcp_input+0x54c>)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c592:	4b1b      	ldr	r3, [pc, #108]	; (800c600 <tcp_input+0x524>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4a24      	ldr	r2, [pc, #144]	; (800c628 <tcp_input+0x54c>)
 800c598:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c59a:	4b24      	ldr	r3, [pc, #144]	; (800c62c <tcp_input+0x550>)
 800c59c:	2200      	movs	r2, #0
 800c59e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c5a0:	4b23      	ldr	r3, [pc, #140]	; (800c630 <tcp_input+0x554>)
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c5a6:	4b23      	ldr	r3, [pc, #140]	; (800c634 <tcp_input+0x558>)
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c5ac:	4b22      	ldr	r3, [pc, #136]	; (800c638 <tcp_input+0x55c>)
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	f003 0308 	and.w	r3, r3, #8
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d006      	beq.n	800c5c6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	7b5b      	ldrb	r3, [r3, #13]
 800c5bc:	f043 0301 	orr.w	r3, r3, #1
 800c5c0:	b2da      	uxtb	r2, r3
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d038      	beq.n	800c640 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c5ce:	69f8      	ldr	r0, [r7, #28]
 800c5d0:	f7ff f93e 	bl	800b850 <tcp_process_refused_data>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	f113 0f0d 	cmn.w	r3, #13
 800c5da:	d007      	beq.n	800c5ec <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c5dc:	69fb      	ldr	r3, [r7, #28]
 800c5de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d02d      	beq.n	800c640 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c5e4:	4b15      	ldr	r3, [pc, #84]	; (800c63c <tcp_input+0x560>)
 800c5e6:	881b      	ldrh	r3, [r3, #0]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d029      	beq.n	800c640 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	f040 8104 	bne.w	800c7fe <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c5f6:	69f8      	ldr	r0, [r7, #28]
 800c5f8:	f003 f9bc 	bl	800f974 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c5fc:	e0ff      	b.n	800c7fe <tcp_input+0x722>
 800c5fe:	bf00      	nop
 800c600:	200003e8 	.word	0x200003e8
 800c604:	200038fc 	.word	0x200038fc
 800c608:	08019ff4 	.word	0x08019ff4
 800c60c:	0801a120 	.word	0x0801a120
 800c610:	0801a040 	.word	0x0801a040
 800c614:	20006a20 	.word	0x20006a20
 800c618:	0801a14c 	.word	0x0801a14c
 800c61c:	20006a30 	.word	0x20006a30
 800c620:	0801a178 	.word	0x0801a178
 800c624:	20006a28 	.word	0x20006a28
 800c628:	200003d8 	.word	0x200003d8
 800c62c:	20000408 	.word	0x20000408
 800c630:	20000405 	.word	0x20000405
 800c634:	20000400 	.word	0x20000400
 800c638:	20000404 	.word	0x20000404
 800c63c:	20000402 	.word	0x20000402
      }
    }
    tcp_input_pcb = pcb;
 800c640:	4a9c      	ldr	r2, [pc, #624]	; (800c8b4 <tcp_input+0x7d8>)
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c646:	69f8      	ldr	r0, [r7, #28]
 800c648:	f000 fb0a 	bl	800cc60 <tcp_process>
 800c64c:	4603      	mov	r3, r0
 800c64e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c650:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c654:	f113 0f0d 	cmn.w	r3, #13
 800c658:	f000 80d3 	beq.w	800c802 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800c65c:	4b96      	ldr	r3, [pc, #600]	; (800c8b8 <tcp_input+0x7dc>)
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	f003 0308 	and.w	r3, r3, #8
 800c664:	2b00      	cmp	r3, #0
 800c666:	d015      	beq.n	800c694 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c668:	69fb      	ldr	r3, [r7, #28]
 800c66a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d008      	beq.n	800c684 <tcp_input+0x5a8>
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c678:	69fa      	ldr	r2, [r7, #28]
 800c67a:	6912      	ldr	r2, [r2, #16]
 800c67c:	f06f 010d 	mvn.w	r1, #13
 800c680:	4610      	mov	r0, r2
 800c682:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c684:	69f9      	ldr	r1, [r7, #28]
 800c686:	488d      	ldr	r0, [pc, #564]	; (800c8bc <tcp_input+0x7e0>)
 800c688:	f7ff fbb0 	bl	800bdec <tcp_pcb_remove>
        tcp_free(pcb);
 800c68c:	69f8      	ldr	r0, [r7, #28]
 800c68e:	f7fe f99d 	bl	800a9cc <tcp_free>
 800c692:	e0c1      	b.n	800c818 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800c694:	2300      	movs	r3, #0
 800c696:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c698:	4b89      	ldr	r3, [pc, #548]	; (800c8c0 <tcp_input+0x7e4>)
 800c69a:	881b      	ldrh	r3, [r3, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d01d      	beq.n	800c6dc <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c6a0:	4b87      	ldr	r3, [pc, #540]	; (800c8c0 <tcp_input+0x7e4>)
 800c6a2:	881b      	ldrh	r3, [r3, #0]
 800c6a4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d00a      	beq.n	800c6c6 <tcp_input+0x5ea>
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6b6:	69fa      	ldr	r2, [r7, #28]
 800c6b8:	6910      	ldr	r0, [r2, #16]
 800c6ba:	89fa      	ldrh	r2, [r7, #14]
 800c6bc:	69f9      	ldr	r1, [r7, #28]
 800c6be:	4798      	blx	r3
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	74fb      	strb	r3, [r7, #19]
 800c6c4:	e001      	b.n	800c6ca <tcp_input+0x5ee>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c6ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c6ce:	f113 0f0d 	cmn.w	r3, #13
 800c6d2:	f000 8098 	beq.w	800c806 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c6d6:	4b7a      	ldr	r3, [pc, #488]	; (800c8c0 <tcp_input+0x7e4>)
 800c6d8:	2200      	movs	r2, #0
 800c6da:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c6dc:	69f8      	ldr	r0, [r7, #28]
 800c6de:	f000 f907 	bl	800c8f0 <tcp_input_delayed_close>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f040 8090 	bne.w	800c80a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c6ea:	4b76      	ldr	r3, [pc, #472]	; (800c8c4 <tcp_input+0x7e8>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d041      	beq.n	800c776 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d006      	beq.n	800c708 <tcp_input+0x62c>
 800c6fa:	4b73      	ldr	r3, [pc, #460]	; (800c8c8 <tcp_input+0x7ec>)
 800c6fc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c700:	4972      	ldr	r1, [pc, #456]	; (800c8cc <tcp_input+0x7f0>)
 800c702:	4873      	ldr	r0, [pc, #460]	; (800c8d0 <tcp_input+0x7f4>)
 800c704:	f008 ff2c 	bl	8015560 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	8b5b      	ldrh	r3, [r3, #26]
 800c70c:	f003 0310 	and.w	r3, r3, #16
 800c710:	2b00      	cmp	r3, #0
 800c712:	d008      	beq.n	800c726 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c714:	4b6b      	ldr	r3, [pc, #428]	; (800c8c4 <tcp_input+0x7e8>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4618      	mov	r0, r3
 800c71a:	f7fd fea7 	bl	800a46c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c71e:	69f8      	ldr	r0, [r7, #28]
 800c720:	f7fe fc3c 	bl	800af9c <tcp_abort>
            goto aborted;
 800c724:	e078      	b.n	800c818 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d00c      	beq.n	800c74a <tcp_input+0x66e>
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	6918      	ldr	r0, [r3, #16]
 800c73a:	4b62      	ldr	r3, [pc, #392]	; (800c8c4 <tcp_input+0x7e8>)
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	2300      	movs	r3, #0
 800c740:	69f9      	ldr	r1, [r7, #28]
 800c742:	47a0      	blx	r4
 800c744:	4603      	mov	r3, r0
 800c746:	74fb      	strb	r3, [r7, #19]
 800c748:	e008      	b.n	800c75c <tcp_input+0x680>
 800c74a:	4b5e      	ldr	r3, [pc, #376]	; (800c8c4 <tcp_input+0x7e8>)
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	2300      	movs	r3, #0
 800c750:	69f9      	ldr	r1, [r7, #28]
 800c752:	2000      	movs	r0, #0
 800c754:	f7ff f952 	bl	800b9fc <tcp_recv_null>
 800c758:	4603      	mov	r3, r0
 800c75a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c75c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c760:	f113 0f0d 	cmn.w	r3, #13
 800c764:	d053      	beq.n	800c80e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c766:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d003      	beq.n	800c776 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c76e:	4b55      	ldr	r3, [pc, #340]	; (800c8c4 <tcp_input+0x7e8>)
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	69fb      	ldr	r3, [r7, #28]
 800c774:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c776:	4b50      	ldr	r3, [pc, #320]	; (800c8b8 <tcp_input+0x7dc>)
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	f003 0320 	and.w	r3, r3, #32
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d030      	beq.n	800c7e4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c786:	2b00      	cmp	r3, #0
 800c788:	d009      	beq.n	800c79e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c78a:	69fb      	ldr	r3, [r7, #28]
 800c78c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c78e:	7b5a      	ldrb	r2, [r3, #13]
 800c790:	69fb      	ldr	r3, [r7, #28]
 800c792:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c794:	f042 0220 	orr.w	r2, r2, #32
 800c798:	b2d2      	uxtb	r2, r2
 800c79a:	735a      	strb	r2, [r3, #13]
 800c79c:	e022      	b.n	800c7e4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c79e:	69fb      	ldr	r3, [r7, #28]
 800c7a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7a6:	d005      	beq.n	800c7b4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	b29a      	uxth	r2, r3
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00b      	beq.n	800c7d6 <tcp_input+0x6fa>
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	6918      	ldr	r0, [r3, #16]
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	69f9      	ldr	r1, [r7, #28]
 800c7ce:	47a0      	blx	r4
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	74fb      	strb	r3, [r7, #19]
 800c7d4:	e001      	b.n	800c7da <tcp_input+0x6fe>
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c7da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c7de:	f113 0f0d 	cmn.w	r3, #13
 800c7e2:	d016      	beq.n	800c812 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c7e4:	4b33      	ldr	r3, [pc, #204]	; (800c8b4 <tcp_input+0x7d8>)
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c7ea:	69f8      	ldr	r0, [r7, #28]
 800c7ec:	f000 f880 	bl	800c8f0 <tcp_input_delayed_close>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d10f      	bne.n	800c816 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c7f6:	69f8      	ldr	r0, [r7, #28]
 800c7f8:	f002 fab8 	bl	800ed6c <tcp_output>
 800c7fc:	e00c      	b.n	800c818 <tcp_input+0x73c>
        goto aborted;
 800c7fe:	bf00      	nop
 800c800:	e00a      	b.n	800c818 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c802:	bf00      	nop
 800c804:	e008      	b.n	800c818 <tcp_input+0x73c>
              goto aborted;
 800c806:	bf00      	nop
 800c808:	e006      	b.n	800c818 <tcp_input+0x73c>
          goto aborted;
 800c80a:	bf00      	nop
 800c80c:	e004      	b.n	800c818 <tcp_input+0x73c>
            goto aborted;
 800c80e:	bf00      	nop
 800c810:	e002      	b.n	800c818 <tcp_input+0x73c>
              goto aborted;
 800c812:	bf00      	nop
 800c814:	e000      	b.n	800c818 <tcp_input+0x73c>
          goto aborted;
 800c816:	bf00      	nop
    tcp_input_pcb = NULL;
 800c818:	4b26      	ldr	r3, [pc, #152]	; (800c8b4 <tcp_input+0x7d8>)
 800c81a:	2200      	movs	r2, #0
 800c81c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c81e:	4b29      	ldr	r3, [pc, #164]	; (800c8c4 <tcp_input+0x7e8>)
 800c820:	2200      	movs	r2, #0
 800c822:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c824:	4b2b      	ldr	r3, [pc, #172]	; (800c8d4 <tcp_input+0x7f8>)
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d03f      	beq.n	800c8ac <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800c82c:	4b29      	ldr	r3, [pc, #164]	; (800c8d4 <tcp_input+0x7f8>)
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	4618      	mov	r0, r3
 800c832:	f7fd fe1b 	bl	800a46c <pbuf_free>
      inseg.p = NULL;
 800c836:	4b27      	ldr	r3, [pc, #156]	; (800c8d4 <tcp_input+0x7f8>)
 800c838:	2200      	movs	r2, #0
 800c83a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c83c:	e036      	b.n	800c8ac <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c83e:	4b26      	ldr	r3, [pc, #152]	; (800c8d8 <tcp_input+0x7fc>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	899b      	ldrh	r3, [r3, #12]
 800c844:	b29b      	uxth	r3, r3
 800c846:	4618      	mov	r0, r3
 800c848:	f7fc fb74 	bl	8008f34 <lwip_htons>
 800c84c:	4603      	mov	r3, r0
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	f003 0304 	and.w	r3, r3, #4
 800c854:	2b00      	cmp	r3, #0
 800c856:	d118      	bne.n	800c88a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c858:	4b20      	ldr	r3, [pc, #128]	; (800c8dc <tcp_input+0x800>)
 800c85a:	6819      	ldr	r1, [r3, #0]
 800c85c:	4b20      	ldr	r3, [pc, #128]	; (800c8e0 <tcp_input+0x804>)
 800c85e:	881b      	ldrh	r3, [r3, #0]
 800c860:	461a      	mov	r2, r3
 800c862:	4b20      	ldr	r3, [pc, #128]	; (800c8e4 <tcp_input+0x808>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c868:	4b1b      	ldr	r3, [pc, #108]	; (800c8d8 <tcp_input+0x7fc>)
 800c86a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c86c:	885b      	ldrh	r3, [r3, #2]
 800c86e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c870:	4a19      	ldr	r2, [pc, #100]	; (800c8d8 <tcp_input+0x7fc>)
 800c872:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c874:	8812      	ldrh	r2, [r2, #0]
 800c876:	b292      	uxth	r2, r2
 800c878:	9202      	str	r2, [sp, #8]
 800c87a:	9301      	str	r3, [sp, #4]
 800c87c:	4b1a      	ldr	r3, [pc, #104]	; (800c8e8 <tcp_input+0x80c>)
 800c87e:	9300      	str	r3, [sp, #0]
 800c880:	4b1a      	ldr	r3, [pc, #104]	; (800c8ec <tcp_input+0x810>)
 800c882:	4602      	mov	r2, r0
 800c884:	2000      	movs	r0, #0
 800c886:	f003 f825 	bl	800f8d4 <tcp_rst>
    pbuf_free(p);
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f7fd fdee 	bl	800a46c <pbuf_free>
  return;
 800c890:	e00c      	b.n	800c8ac <tcp_input+0x7d0>
    goto dropped;
 800c892:	bf00      	nop
 800c894:	e006      	b.n	800c8a4 <tcp_input+0x7c8>
    goto dropped;
 800c896:	bf00      	nop
 800c898:	e004      	b.n	800c8a4 <tcp_input+0x7c8>
    goto dropped;
 800c89a:	bf00      	nop
 800c89c:	e002      	b.n	800c8a4 <tcp_input+0x7c8>
      goto dropped;
 800c89e:	bf00      	nop
 800c8a0:	e000      	b.n	800c8a4 <tcp_input+0x7c8>
      goto dropped;
 800c8a2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f7fd fde1 	bl	800a46c <pbuf_free>
 800c8aa:	e000      	b.n	800c8ae <tcp_input+0x7d2>
  return;
 800c8ac:	bf00      	nop
}
 800c8ae:	3724      	adds	r7, #36	; 0x24
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd90      	pop	{r4, r7, pc}
 800c8b4:	20006a34 	.word	0x20006a34
 800c8b8:	20000405 	.word	0x20000405
 800c8bc:	20006a20 	.word	0x20006a20
 800c8c0:	20000400 	.word	0x20000400
 800c8c4:	20000408 	.word	0x20000408
 800c8c8:	08019ff4 	.word	0x08019ff4
 800c8cc:	0801a1a8 	.word	0x0801a1a8
 800c8d0:	0801a040 	.word	0x0801a040
 800c8d4:	200003d8 	.word	0x200003d8
 800c8d8:	200003e8 	.word	0x200003e8
 800c8dc:	200003fc 	.word	0x200003fc
 800c8e0:	20000402 	.word	0x20000402
 800c8e4:	200003f8 	.word	0x200003f8
 800c8e8:	2000390c 	.word	0x2000390c
 800c8ec:	20003910 	.word	0x20003910

0800c8f0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b082      	sub	sp, #8
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d106      	bne.n	800c90c <tcp_input_delayed_close+0x1c>
 800c8fe:	4b17      	ldr	r3, [pc, #92]	; (800c95c <tcp_input_delayed_close+0x6c>)
 800c900:	f240 225a 	movw	r2, #602	; 0x25a
 800c904:	4916      	ldr	r1, [pc, #88]	; (800c960 <tcp_input_delayed_close+0x70>)
 800c906:	4817      	ldr	r0, [pc, #92]	; (800c964 <tcp_input_delayed_close+0x74>)
 800c908:	f008 fe2a 	bl	8015560 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c90c:	4b16      	ldr	r3, [pc, #88]	; (800c968 <tcp_input_delayed_close+0x78>)
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	f003 0310 	and.w	r3, r3, #16
 800c914:	2b00      	cmp	r3, #0
 800c916:	d01c      	beq.n	800c952 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	8b5b      	ldrh	r3, [r3, #26]
 800c91c:	f003 0310 	and.w	r3, r3, #16
 800c920:	2b00      	cmp	r3, #0
 800c922:	d10d      	bne.n	800c940 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d008      	beq.n	800c940 <tcp_input_delayed_close+0x50>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	6912      	ldr	r2, [r2, #16]
 800c938:	f06f 010e 	mvn.w	r1, #14
 800c93c:	4610      	mov	r0, r2
 800c93e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c940:	6879      	ldr	r1, [r7, #4]
 800c942:	480a      	ldr	r0, [pc, #40]	; (800c96c <tcp_input_delayed_close+0x7c>)
 800c944:	f7ff fa52 	bl	800bdec <tcp_pcb_remove>
    tcp_free(pcb);
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f7fe f83f 	bl	800a9cc <tcp_free>
    return 1;
 800c94e:	2301      	movs	r3, #1
 800c950:	e000      	b.n	800c954 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c952:	2300      	movs	r3, #0
}
 800c954:	4618      	mov	r0, r3
 800c956:	3708      	adds	r7, #8
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}
 800c95c:	08019ff4 	.word	0x08019ff4
 800c960:	0801a1c4 	.word	0x0801a1c4
 800c964:	0801a040 	.word	0x0801a040
 800c968:	20000405 	.word	0x20000405
 800c96c:	20006a20 	.word	0x20006a20

0800c970 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c970:	b590      	push	{r4, r7, lr}
 800c972:	b08b      	sub	sp, #44	; 0x2c
 800c974:	af04      	add	r7, sp, #16
 800c976:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c978:	4b6f      	ldr	r3, [pc, #444]	; (800cb38 <tcp_listen_input+0x1c8>)
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	f003 0304 	and.w	r3, r3, #4
 800c980:	2b00      	cmp	r3, #0
 800c982:	f040 80d2 	bne.w	800cb2a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d106      	bne.n	800c99a <tcp_listen_input+0x2a>
 800c98c:	4b6b      	ldr	r3, [pc, #428]	; (800cb3c <tcp_listen_input+0x1cc>)
 800c98e:	f240 2281 	movw	r2, #641	; 0x281
 800c992:	496b      	ldr	r1, [pc, #428]	; (800cb40 <tcp_listen_input+0x1d0>)
 800c994:	486b      	ldr	r0, [pc, #428]	; (800cb44 <tcp_listen_input+0x1d4>)
 800c996:	f008 fde3 	bl	8015560 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c99a:	4b67      	ldr	r3, [pc, #412]	; (800cb38 <tcp_listen_input+0x1c8>)
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	f003 0310 	and.w	r3, r3, #16
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d019      	beq.n	800c9da <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c9a6:	4b68      	ldr	r3, [pc, #416]	; (800cb48 <tcp_listen_input+0x1d8>)
 800c9a8:	6819      	ldr	r1, [r3, #0]
 800c9aa:	4b68      	ldr	r3, [pc, #416]	; (800cb4c <tcp_listen_input+0x1dc>)
 800c9ac:	881b      	ldrh	r3, [r3, #0]
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	4b67      	ldr	r3, [pc, #412]	; (800cb50 <tcp_listen_input+0x1e0>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c9b6:	4b67      	ldr	r3, [pc, #412]	; (800cb54 <tcp_listen_input+0x1e4>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c9ba:	885b      	ldrh	r3, [r3, #2]
 800c9bc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c9be:	4a65      	ldr	r2, [pc, #404]	; (800cb54 <tcp_listen_input+0x1e4>)
 800c9c0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c9c2:	8812      	ldrh	r2, [r2, #0]
 800c9c4:	b292      	uxth	r2, r2
 800c9c6:	9202      	str	r2, [sp, #8]
 800c9c8:	9301      	str	r3, [sp, #4]
 800c9ca:	4b63      	ldr	r3, [pc, #396]	; (800cb58 <tcp_listen_input+0x1e8>)
 800c9cc:	9300      	str	r3, [sp, #0]
 800c9ce:	4b63      	ldr	r3, [pc, #396]	; (800cb5c <tcp_listen_input+0x1ec>)
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f002 ff7e 	bl	800f8d4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c9d8:	e0a9      	b.n	800cb2e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c9da:	4b57      	ldr	r3, [pc, #348]	; (800cb38 <tcp_listen_input+0x1c8>)
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	f003 0302 	and.w	r3, r3, #2
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	f000 80a3 	beq.w	800cb2e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	7d5b      	ldrb	r3, [r3, #21]
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7ff f929 	bl	800bc44 <tcp_alloc>
 800c9f2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d111      	bne.n	800ca1e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	699b      	ldr	r3, [r3, #24]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d00a      	beq.n	800ca18 <tcp_listen_input+0xa8>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	699b      	ldr	r3, [r3, #24]
 800ca06:	687a      	ldr	r2, [r7, #4]
 800ca08:	6910      	ldr	r0, [r2, #16]
 800ca0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca0e:	2100      	movs	r1, #0
 800ca10:	4798      	blx	r3
 800ca12:	4603      	mov	r3, r0
 800ca14:	73bb      	strb	r3, [r7, #14]
      return;
 800ca16:	e08b      	b.n	800cb30 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ca18:	23f0      	movs	r3, #240	; 0xf0
 800ca1a:	73bb      	strb	r3, [r7, #14]
      return;
 800ca1c:	e088      	b.n	800cb30 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ca1e:	4b50      	ldr	r3, [pc, #320]	; (800cb60 <tcp_listen_input+0x1f0>)
 800ca20:	695a      	ldr	r2, [r3, #20]
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ca26:	4b4e      	ldr	r3, [pc, #312]	; (800cb60 <tcp_listen_input+0x1f0>)
 800ca28:	691a      	ldr	r2, [r3, #16]
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	8ada      	ldrh	r2, [r3, #22]
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ca36:	4b47      	ldr	r3, [pc, #284]	; (800cb54 <tcp_listen_input+0x1e4>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	881b      	ldrh	r3, [r3, #0]
 800ca3c:	b29a      	uxth	r2, r3
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	2203      	movs	r2, #3
 800ca46:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ca48:	4b41      	ldr	r3, [pc, #260]	; (800cb50 <tcp_listen_input+0x1e0>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	1c5a      	adds	r2, r3, #1
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ca5a:	6978      	ldr	r0, [r7, #20]
 800ca5c:	f7ff fa5a 	bl	800bf14 <tcp_next_iss>
 800ca60:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	693a      	ldr	r2, [r7, #16]
 800ca66:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	693a      	ldr	r2, [r7, #16]
 800ca6c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	693a      	ldr	r2, [r7, #16]
 800ca72:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	693a      	ldr	r2, [r7, #16]
 800ca78:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ca7a:	4b35      	ldr	r3, [pc, #212]	; (800cb50 <tcp_listen_input+0x1e0>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	1e5a      	subs	r2, r3, #1
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	691a      	ldr	r2, [r3, #16]
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	7a5b      	ldrb	r3, [r3, #9]
 800ca96:	f003 030c 	and.w	r3, r3, #12
 800ca9a:	b2da      	uxtb	r2, r3
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	7a1a      	ldrb	r2, [r3, #8]
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800caa8:	4b2e      	ldr	r3, [pc, #184]	; (800cb64 <tcp_listen_input+0x1f4>)
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	60da      	str	r2, [r3, #12]
 800cab0:	4a2c      	ldr	r2, [pc, #176]	; (800cb64 <tcp_listen_input+0x1f4>)
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	6013      	str	r3, [r2, #0]
 800cab6:	f003 f8cd 	bl	800fc54 <tcp_timer_needed>
 800caba:	4b2b      	ldr	r3, [pc, #172]	; (800cb68 <tcp_listen_input+0x1f8>)
 800cabc:	2201      	movs	r2, #1
 800cabe:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800cac0:	6978      	ldr	r0, [r7, #20]
 800cac2:	f001 fd8d 	bl	800e5e0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800cac6:	4b23      	ldr	r3, [pc, #140]	; (800cb54 <tcp_listen_input+0x1e4>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	89db      	ldrh	r3, [r3, #14]
 800cacc:	b29a      	uxth	r2, r3
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	3304      	adds	r3, #4
 800cae8:	4618      	mov	r0, r3
 800caea:	f006 fdab 	bl	8013644 <ip4_route>
 800caee:	4601      	mov	r1, r0
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	3304      	adds	r3, #4
 800caf4:	461a      	mov	r2, r3
 800caf6:	4620      	mov	r0, r4
 800caf8:	f7ff fa32 	bl	800bf60 <tcp_eff_send_mss_netif>
 800cafc:	4603      	mov	r3, r0
 800cafe:	461a      	mov	r2, r3
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800cb04:	2112      	movs	r1, #18
 800cb06:	6978      	ldr	r0, [r7, #20]
 800cb08:	f002 f842 	bl	800eb90 <tcp_enqueue_flags>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800cb10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d004      	beq.n	800cb22 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800cb18:	2100      	movs	r1, #0
 800cb1a:	6978      	ldr	r0, [r7, #20]
 800cb1c:	f7fe f980 	bl	800ae20 <tcp_abandon>
      return;
 800cb20:	e006      	b.n	800cb30 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800cb22:	6978      	ldr	r0, [r7, #20]
 800cb24:	f002 f922 	bl	800ed6c <tcp_output>
  return;
 800cb28:	e001      	b.n	800cb2e <tcp_listen_input+0x1be>
    return;
 800cb2a:	bf00      	nop
 800cb2c:	e000      	b.n	800cb30 <tcp_listen_input+0x1c0>
  return;
 800cb2e:	bf00      	nop
}
 800cb30:	371c      	adds	r7, #28
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd90      	pop	{r4, r7, pc}
 800cb36:	bf00      	nop
 800cb38:	20000404 	.word	0x20000404
 800cb3c:	08019ff4 	.word	0x08019ff4
 800cb40:	0801a1ec 	.word	0x0801a1ec
 800cb44:	0801a040 	.word	0x0801a040
 800cb48:	200003fc 	.word	0x200003fc
 800cb4c:	20000402 	.word	0x20000402
 800cb50:	200003f8 	.word	0x200003f8
 800cb54:	200003e8 	.word	0x200003e8
 800cb58:	2000390c 	.word	0x2000390c
 800cb5c:	20003910 	.word	0x20003910
 800cb60:	200038fc 	.word	0x200038fc
 800cb64:	20006a20 	.word	0x20006a20
 800cb68:	20006a1c 	.word	0x20006a1c

0800cb6c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b086      	sub	sp, #24
 800cb70:	af04      	add	r7, sp, #16
 800cb72:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800cb74:	4b2f      	ldr	r3, [pc, #188]	; (800cc34 <tcp_timewait_input+0xc8>)
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	f003 0304 	and.w	r3, r3, #4
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d153      	bne.n	800cc28 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d106      	bne.n	800cb94 <tcp_timewait_input+0x28>
 800cb86:	4b2c      	ldr	r3, [pc, #176]	; (800cc38 <tcp_timewait_input+0xcc>)
 800cb88:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cb8c:	492b      	ldr	r1, [pc, #172]	; (800cc3c <tcp_timewait_input+0xd0>)
 800cb8e:	482c      	ldr	r0, [pc, #176]	; (800cc40 <tcp_timewait_input+0xd4>)
 800cb90:	f008 fce6 	bl	8015560 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800cb94:	4b27      	ldr	r3, [pc, #156]	; (800cc34 <tcp_timewait_input+0xc8>)
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	f003 0302 	and.w	r3, r3, #2
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d02a      	beq.n	800cbf6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800cba0:	4b28      	ldr	r3, [pc, #160]	; (800cc44 <tcp_timewait_input+0xd8>)
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba8:	1ad3      	subs	r3, r2, r3
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	db2d      	blt.n	800cc0a <tcp_timewait_input+0x9e>
 800cbae:	4b25      	ldr	r3, [pc, #148]	; (800cc44 <tcp_timewait_input+0xd8>)
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb6:	6879      	ldr	r1, [r7, #4]
 800cbb8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cbba:	440b      	add	r3, r1
 800cbbc:	1ad3      	subs	r3, r2, r3
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	dc23      	bgt.n	800cc0a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cbc2:	4b21      	ldr	r3, [pc, #132]	; (800cc48 <tcp_timewait_input+0xdc>)
 800cbc4:	6819      	ldr	r1, [r3, #0]
 800cbc6:	4b21      	ldr	r3, [pc, #132]	; (800cc4c <tcp_timewait_input+0xe0>)
 800cbc8:	881b      	ldrh	r3, [r3, #0]
 800cbca:	461a      	mov	r2, r3
 800cbcc:	4b1d      	ldr	r3, [pc, #116]	; (800cc44 <tcp_timewait_input+0xd8>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cbd2:	4b1f      	ldr	r3, [pc, #124]	; (800cc50 <tcp_timewait_input+0xe4>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cbd6:	885b      	ldrh	r3, [r3, #2]
 800cbd8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cbda:	4a1d      	ldr	r2, [pc, #116]	; (800cc50 <tcp_timewait_input+0xe4>)
 800cbdc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cbde:	8812      	ldrh	r2, [r2, #0]
 800cbe0:	b292      	uxth	r2, r2
 800cbe2:	9202      	str	r2, [sp, #8]
 800cbe4:	9301      	str	r3, [sp, #4]
 800cbe6:	4b1b      	ldr	r3, [pc, #108]	; (800cc54 <tcp_timewait_input+0xe8>)
 800cbe8:	9300      	str	r3, [sp, #0]
 800cbea:	4b1b      	ldr	r3, [pc, #108]	; (800cc58 <tcp_timewait_input+0xec>)
 800cbec:	4602      	mov	r2, r0
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f002 fe70 	bl	800f8d4 <tcp_rst>
      return;
 800cbf4:	e01b      	b.n	800cc2e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800cbf6:	4b0f      	ldr	r3, [pc, #60]	; (800cc34 <tcp_timewait_input+0xc8>)
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	f003 0301 	and.w	r3, r3, #1
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d003      	beq.n	800cc0a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800cc02:	4b16      	ldr	r3, [pc, #88]	; (800cc5c <tcp_timewait_input+0xf0>)
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800cc0a:	4b10      	ldr	r3, [pc, #64]	; (800cc4c <tcp_timewait_input+0xe0>)
 800cc0c:	881b      	ldrh	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d00c      	beq.n	800cc2c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	8b5b      	ldrh	r3, [r3, #26]
 800cc16:	f043 0302 	orr.w	r3, r3, #2
 800cc1a:	b29a      	uxth	r2, r3
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f002 f8a3 	bl	800ed6c <tcp_output>
  }
  return;
 800cc26:	e001      	b.n	800cc2c <tcp_timewait_input+0xc0>
    return;
 800cc28:	bf00      	nop
 800cc2a:	e000      	b.n	800cc2e <tcp_timewait_input+0xc2>
  return;
 800cc2c:	bf00      	nop
}
 800cc2e:	3708      	adds	r7, #8
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	20000404 	.word	0x20000404
 800cc38:	08019ff4 	.word	0x08019ff4
 800cc3c:	0801a20c 	.word	0x0801a20c
 800cc40:	0801a040 	.word	0x0801a040
 800cc44:	200003f8 	.word	0x200003f8
 800cc48:	200003fc 	.word	0x200003fc
 800cc4c:	20000402 	.word	0x20000402
 800cc50:	200003e8 	.word	0x200003e8
 800cc54:	2000390c 	.word	0x2000390c
 800cc58:	20003910 	.word	0x20003910
 800cc5c:	20006a24 	.word	0x20006a24

0800cc60 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800cc60:	b590      	push	{r4, r7, lr}
 800cc62:	b08d      	sub	sp, #52	; 0x34
 800cc64:	af04      	add	r7, sp, #16
 800cc66:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d106      	bne.n	800cc84 <tcp_process+0x24>
 800cc76:	4ba5      	ldr	r3, [pc, #660]	; (800cf0c <tcp_process+0x2ac>)
 800cc78:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800cc7c:	49a4      	ldr	r1, [pc, #656]	; (800cf10 <tcp_process+0x2b0>)
 800cc7e:	48a5      	ldr	r0, [pc, #660]	; (800cf14 <tcp_process+0x2b4>)
 800cc80:	f008 fc6e 	bl	8015560 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800cc84:	4ba4      	ldr	r3, [pc, #656]	; (800cf18 <tcp_process+0x2b8>)
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	f003 0304 	and.w	r3, r3, #4
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d04e      	beq.n	800cd2e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	7d1b      	ldrb	r3, [r3, #20]
 800cc94:	2b02      	cmp	r3, #2
 800cc96:	d108      	bne.n	800ccaa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc9c:	4b9f      	ldr	r3, [pc, #636]	; (800cf1c <tcp_process+0x2bc>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d123      	bne.n	800ccec <tcp_process+0x8c>
        acceptable = 1;
 800cca4:	2301      	movs	r3, #1
 800cca6:	76fb      	strb	r3, [r7, #27]
 800cca8:	e020      	b.n	800ccec <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccae:	4b9c      	ldr	r3, [pc, #624]	; (800cf20 <tcp_process+0x2c0>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d102      	bne.n	800ccbc <tcp_process+0x5c>
        acceptable = 1;
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	76fb      	strb	r3, [r7, #27]
 800ccba:	e017      	b.n	800ccec <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ccbc:	4b98      	ldr	r3, [pc, #608]	; (800cf20 <tcp_process+0x2c0>)
 800ccbe:	681a      	ldr	r2, [r3, #0]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc4:	1ad3      	subs	r3, r2, r3
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	db10      	blt.n	800ccec <tcp_process+0x8c>
 800ccca:	4b95      	ldr	r3, [pc, #596]	; (800cf20 <tcp_process+0x2c0>)
 800cccc:	681a      	ldr	r2, [r3, #0]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd2:	6879      	ldr	r1, [r7, #4]
 800ccd4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ccd6:	440b      	add	r3, r1
 800ccd8:	1ad3      	subs	r3, r2, r3
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	dc06      	bgt.n	800ccec <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	8b5b      	ldrh	r3, [r3, #26]
 800cce2:	f043 0302 	orr.w	r3, r3, #2
 800cce6:	b29a      	uxth	r2, r3
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ccec:	7efb      	ldrb	r3, [r7, #27]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d01b      	beq.n	800cd2a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	7d1b      	ldrb	r3, [r3, #20]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d106      	bne.n	800cd08 <tcp_process+0xa8>
 800ccfa:	4b84      	ldr	r3, [pc, #528]	; (800cf0c <tcp_process+0x2ac>)
 800ccfc:	f44f 724e 	mov.w	r2, #824	; 0x338
 800cd00:	4988      	ldr	r1, [pc, #544]	; (800cf24 <tcp_process+0x2c4>)
 800cd02:	4884      	ldr	r0, [pc, #528]	; (800cf14 <tcp_process+0x2b4>)
 800cd04:	f008 fc2c 	bl	8015560 <iprintf>
      recv_flags |= TF_RESET;
 800cd08:	4b87      	ldr	r3, [pc, #540]	; (800cf28 <tcp_process+0x2c8>)
 800cd0a:	781b      	ldrb	r3, [r3, #0]
 800cd0c:	f043 0308 	orr.w	r3, r3, #8
 800cd10:	b2da      	uxtb	r2, r3
 800cd12:	4b85      	ldr	r3, [pc, #532]	; (800cf28 <tcp_process+0x2c8>)
 800cd14:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	8b5b      	ldrh	r3, [r3, #26]
 800cd1a:	f023 0301 	bic.w	r3, r3, #1
 800cd1e:	b29a      	uxth	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800cd24:	f06f 030d 	mvn.w	r3, #13
 800cd28:	e37a      	b.n	800d420 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	e378      	b.n	800d420 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800cd2e:	4b7a      	ldr	r3, [pc, #488]	; (800cf18 <tcp_process+0x2b8>)
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	f003 0302 	and.w	r3, r3, #2
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d010      	beq.n	800cd5c <tcp_process+0xfc>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	7d1b      	ldrb	r3, [r3, #20]
 800cd3e:	2b02      	cmp	r3, #2
 800cd40:	d00c      	beq.n	800cd5c <tcp_process+0xfc>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	7d1b      	ldrb	r3, [r3, #20]
 800cd46:	2b03      	cmp	r3, #3
 800cd48:	d008      	beq.n	800cd5c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	8b5b      	ldrh	r3, [r3, #26]
 800cd4e:	f043 0302 	orr.w	r3, r3, #2
 800cd52:	b29a      	uxth	r2, r3
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	e361      	b.n	800d420 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	8b5b      	ldrh	r3, [r3, #26]
 800cd60:	f003 0310 	and.w	r3, r3, #16
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d103      	bne.n	800cd70 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800cd68:	4b70      	ldr	r3, [pc, #448]	; (800cf2c <tcp_process+0x2cc>)
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2200      	movs	r2, #0
 800cd74:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f001 fc2d 	bl	800e5e0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	7d1b      	ldrb	r3, [r3, #20]
 800cd8a:	3b02      	subs	r3, #2
 800cd8c:	2b07      	cmp	r3, #7
 800cd8e:	f200 8337 	bhi.w	800d400 <tcp_process+0x7a0>
 800cd92:	a201      	add	r2, pc, #4	; (adr r2, 800cd98 <tcp_process+0x138>)
 800cd94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd98:	0800cdb9 	.word	0x0800cdb9
 800cd9c:	0800cfe9 	.word	0x0800cfe9
 800cda0:	0800d161 	.word	0x0800d161
 800cda4:	0800d18b 	.word	0x0800d18b
 800cda8:	0800d2af 	.word	0x0800d2af
 800cdac:	0800d161 	.word	0x0800d161
 800cdb0:	0800d33b 	.word	0x0800d33b
 800cdb4:	0800d3cb 	.word	0x0800d3cb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800cdb8:	4b57      	ldr	r3, [pc, #348]	; (800cf18 <tcp_process+0x2b8>)
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	f003 0310 	and.w	r3, r3, #16
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	f000 80e4 	beq.w	800cf8e <tcp_process+0x32e>
 800cdc6:	4b54      	ldr	r3, [pc, #336]	; (800cf18 <tcp_process+0x2b8>)
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	f003 0302 	and.w	r3, r3, #2
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	f000 80dd 	beq.w	800cf8e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdd8:	1c5a      	adds	r2, r3, #1
 800cdda:	4b50      	ldr	r3, [pc, #320]	; (800cf1c <tcp_process+0x2bc>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	f040 80d5 	bne.w	800cf8e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800cde4:	4b4e      	ldr	r3, [pc, #312]	; (800cf20 <tcp_process+0x2c0>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	1c5a      	adds	r2, r3, #1
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800cdf6:	4b49      	ldr	r3, [pc, #292]	; (800cf1c <tcp_process+0x2bc>)
 800cdf8:	681a      	ldr	r2, [r3, #0]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800cdfe:	4b4c      	ldr	r3, [pc, #304]	; (800cf30 <tcp_process+0x2d0>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	89db      	ldrh	r3, [r3, #14]
 800ce04:	b29a      	uxth	r2, r3
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ce18:	4b41      	ldr	r3, [pc, #260]	; (800cf20 <tcp_process+0x2c0>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	1e5a      	subs	r2, r3, #1
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2204      	movs	r2, #4
 800ce26:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	3304      	adds	r3, #4
 800ce30:	4618      	mov	r0, r3
 800ce32:	f006 fc07 	bl	8013644 <ip4_route>
 800ce36:	4601      	mov	r1, r0
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	3304      	adds	r3, #4
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f7ff f88e 	bl	800bf60 <tcp_eff_send_mss_netif>
 800ce44:	4603      	mov	r3, r0
 800ce46:	461a      	mov	r2, r3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce50:	009a      	lsls	r2, r3, #2
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce56:	005b      	lsls	r3, r3, #1
 800ce58:	f241 111c 	movw	r1, #4380	; 0x111c
 800ce5c:	428b      	cmp	r3, r1
 800ce5e:	bf38      	it	cc
 800ce60:	460b      	movcc	r3, r1
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d204      	bcs.n	800ce70 <tcp_process+0x210>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	e00d      	b.n	800ce8c <tcp_process+0x22c>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce74:	005b      	lsls	r3, r3, #1
 800ce76:	f241 121c 	movw	r2, #4380	; 0x111c
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d904      	bls.n	800ce88 <tcp_process+0x228>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce82:	005b      	lsls	r3, r3, #1
 800ce84:	b29b      	uxth	r3, r3
 800ce86:	e001      	b.n	800ce8c <tcp_process+0x22c>
 800ce88:	f241 131c 	movw	r3, #4380	; 0x111c
 800ce8c:	687a      	ldr	r2, [r7, #4]
 800ce8e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d106      	bne.n	800ceaa <tcp_process+0x24a>
 800ce9c:	4b1b      	ldr	r3, [pc, #108]	; (800cf0c <tcp_process+0x2ac>)
 800ce9e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800cea2:	4924      	ldr	r1, [pc, #144]	; (800cf34 <tcp_process+0x2d4>)
 800cea4:	481b      	ldr	r0, [pc, #108]	; (800cf14 <tcp_process+0x2b4>)
 800cea6:	f008 fb5b 	bl	8015560 <iprintf>
        --pcb->snd_queuelen;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	b29a      	uxth	r2, r3
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cebe:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d111      	bne.n	800ceea <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ceca:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d106      	bne.n	800cee0 <tcp_process+0x280>
 800ced2:	4b0e      	ldr	r3, [pc, #56]	; (800cf0c <tcp_process+0x2ac>)
 800ced4:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ced8:	4917      	ldr	r1, [pc, #92]	; (800cf38 <tcp_process+0x2d8>)
 800ceda:	480e      	ldr	r0, [pc, #56]	; (800cf14 <tcp_process+0x2b4>)
 800cedc:	f008 fb40 	bl	8015560 <iprintf>
          pcb->unsent = rseg->next;
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	66da      	str	r2, [r3, #108]	; 0x6c
 800cee8:	e003      	b.n	800cef2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800ceea:	69fb      	ldr	r3, [r7, #28]
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800cef2:	69f8      	ldr	r0, [r7, #28]
 800cef4:	f7fe fd3d 	bl	800b972 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d11d      	bne.n	800cf3c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf06:	861a      	strh	r2, [r3, #48]	; 0x30
 800cf08:	e01f      	b.n	800cf4a <tcp_process+0x2ea>
 800cf0a:	bf00      	nop
 800cf0c:	08019ff4 	.word	0x08019ff4
 800cf10:	0801a22c 	.word	0x0801a22c
 800cf14:	0801a040 	.word	0x0801a040
 800cf18:	20000404 	.word	0x20000404
 800cf1c:	200003fc 	.word	0x200003fc
 800cf20:	200003f8 	.word	0x200003f8
 800cf24:	0801a248 	.word	0x0801a248
 800cf28:	20000405 	.word	0x20000405
 800cf2c:	20006a24 	.word	0x20006a24
 800cf30:	200003e8 	.word	0x200003e8
 800cf34:	0801a268 	.word	0x0801a268
 800cf38:	0801a280 	.word	0x0801a280
        } else {
          pcb->rtime = 0;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2200      	movs	r2, #0
 800cf46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d00a      	beq.n	800cf6a <tcp_process+0x30a>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	6910      	ldr	r0, [r2, #16]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	6879      	ldr	r1, [r7, #4]
 800cf62:	4798      	blx	r3
 800cf64:	4603      	mov	r3, r0
 800cf66:	76bb      	strb	r3, [r7, #26]
 800cf68:	e001      	b.n	800cf6e <tcp_process+0x30e>
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800cf6e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cf72:	f113 0f0d 	cmn.w	r3, #13
 800cf76:	d102      	bne.n	800cf7e <tcp_process+0x31e>
          return ERR_ABRT;
 800cf78:	f06f 030c 	mvn.w	r3, #12
 800cf7c:	e250      	b.n	800d420 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	8b5b      	ldrh	r3, [r3, #26]
 800cf82:	f043 0302 	orr.w	r3, r3, #2
 800cf86:	b29a      	uxth	r2, r3
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800cf8c:	e23a      	b.n	800d404 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800cf8e:	4b9d      	ldr	r3, [pc, #628]	; (800d204 <tcp_process+0x5a4>)
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	f003 0310 	and.w	r3, r3, #16
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	f000 8234 	beq.w	800d404 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf9c:	4b9a      	ldr	r3, [pc, #616]	; (800d208 <tcp_process+0x5a8>)
 800cf9e:	6819      	ldr	r1, [r3, #0]
 800cfa0:	4b9a      	ldr	r3, [pc, #616]	; (800d20c <tcp_process+0x5ac>)
 800cfa2:	881b      	ldrh	r3, [r3, #0]
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	4b9a      	ldr	r3, [pc, #616]	; (800d210 <tcp_process+0x5b0>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cfac:	4b99      	ldr	r3, [pc, #612]	; (800d214 <tcp_process+0x5b4>)
 800cfae:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cfb0:	885b      	ldrh	r3, [r3, #2]
 800cfb2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cfb4:	4a97      	ldr	r2, [pc, #604]	; (800d214 <tcp_process+0x5b4>)
 800cfb6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cfb8:	8812      	ldrh	r2, [r2, #0]
 800cfba:	b292      	uxth	r2, r2
 800cfbc:	9202      	str	r2, [sp, #8]
 800cfbe:	9301      	str	r3, [sp, #4]
 800cfc0:	4b95      	ldr	r3, [pc, #596]	; (800d218 <tcp_process+0x5b8>)
 800cfc2:	9300      	str	r3, [sp, #0]
 800cfc4:	4b95      	ldr	r3, [pc, #596]	; (800d21c <tcp_process+0x5bc>)
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f002 fc83 	bl	800f8d4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cfd4:	2b05      	cmp	r3, #5
 800cfd6:	f200 8215 	bhi.w	800d404 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f002 fa4d 	bl	800f480 <tcp_rexmit_rto>
      break;
 800cfe6:	e20d      	b.n	800d404 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800cfe8:	4b86      	ldr	r3, [pc, #536]	; (800d204 <tcp_process+0x5a4>)
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	f003 0310 	and.w	r3, r3, #16
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	f000 80a1 	beq.w	800d138 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cff6:	4b84      	ldr	r3, [pc, #528]	; (800d208 <tcp_process+0x5a8>)
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cffe:	1ad3      	subs	r3, r2, r3
 800d000:	3b01      	subs	r3, #1
 800d002:	2b00      	cmp	r3, #0
 800d004:	db7e      	blt.n	800d104 <tcp_process+0x4a4>
 800d006:	4b80      	ldr	r3, [pc, #512]	; (800d208 <tcp_process+0x5a8>)
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d00e:	1ad3      	subs	r3, r2, r3
 800d010:	2b00      	cmp	r3, #0
 800d012:	dc77      	bgt.n	800d104 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2204      	movs	r2, #4
 800d018:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d102      	bne.n	800d028 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d022:	23fa      	movs	r3, #250	; 0xfa
 800d024:	76bb      	strb	r3, [r7, #26]
 800d026:	e01d      	b.n	800d064 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d02c:	699b      	ldr	r3, [r3, #24]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d106      	bne.n	800d040 <tcp_process+0x3e0>
 800d032:	4b7b      	ldr	r3, [pc, #492]	; (800d220 <tcp_process+0x5c0>)
 800d034:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d038:	497a      	ldr	r1, [pc, #488]	; (800d224 <tcp_process+0x5c4>)
 800d03a:	487b      	ldr	r0, [pc, #492]	; (800d228 <tcp_process+0x5c8>)
 800d03c:	f008 fa90 	bl	8015560 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d044:	699b      	ldr	r3, [r3, #24]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d00a      	beq.n	800d060 <tcp_process+0x400>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d04e:	699b      	ldr	r3, [r3, #24]
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	6910      	ldr	r0, [r2, #16]
 800d054:	2200      	movs	r2, #0
 800d056:	6879      	ldr	r1, [r7, #4]
 800d058:	4798      	blx	r3
 800d05a:	4603      	mov	r3, r0
 800d05c:	76bb      	strb	r3, [r7, #26]
 800d05e:	e001      	b.n	800d064 <tcp_process+0x404>
 800d060:	23f0      	movs	r3, #240	; 0xf0
 800d062:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d064:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d00a      	beq.n	800d082 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d06c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d070:	f113 0f0d 	cmn.w	r3, #13
 800d074:	d002      	beq.n	800d07c <tcp_process+0x41c>
              tcp_abort(pcb);
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f7fd ff90 	bl	800af9c <tcp_abort>
            }
            return ERR_ABRT;
 800d07c:	f06f 030c 	mvn.w	r3, #12
 800d080:	e1ce      	b.n	800d420 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f000 fae0 	bl	800d648 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d088:	4b68      	ldr	r3, [pc, #416]	; (800d22c <tcp_process+0x5cc>)
 800d08a:	881b      	ldrh	r3, [r3, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d005      	beq.n	800d09c <tcp_process+0x43c>
            recv_acked--;
 800d090:	4b66      	ldr	r3, [pc, #408]	; (800d22c <tcp_process+0x5cc>)
 800d092:	881b      	ldrh	r3, [r3, #0]
 800d094:	3b01      	subs	r3, #1
 800d096:	b29a      	uxth	r2, r3
 800d098:	4b64      	ldr	r3, [pc, #400]	; (800d22c <tcp_process+0x5cc>)
 800d09a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0a0:	009a      	lsls	r2, r3, #2
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0a6:	005b      	lsls	r3, r3, #1
 800d0a8:	f241 111c 	movw	r1, #4380	; 0x111c
 800d0ac:	428b      	cmp	r3, r1
 800d0ae:	bf38      	it	cc
 800d0b0:	460b      	movcc	r3, r1
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d204      	bcs.n	800d0c0 <tcp_process+0x460>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0ba:	009b      	lsls	r3, r3, #2
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	e00d      	b.n	800d0dc <tcp_process+0x47c>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0c4:	005b      	lsls	r3, r3, #1
 800d0c6:	f241 121c 	movw	r2, #4380	; 0x111c
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d904      	bls.n	800d0d8 <tcp_process+0x478>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0d2:	005b      	lsls	r3, r3, #1
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	e001      	b.n	800d0dc <tcp_process+0x47c>
 800d0d8:	f241 131c 	movw	r3, #4380	; 0x111c
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d0e2:	4b53      	ldr	r3, [pc, #332]	; (800d230 <tcp_process+0x5d0>)
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	f003 0320 	and.w	r3, r3, #32
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d037      	beq.n	800d15e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	8b5b      	ldrh	r3, [r3, #26]
 800d0f2:	f043 0302 	orr.w	r3, r3, #2
 800d0f6:	b29a      	uxth	r2, r3
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2207      	movs	r2, #7
 800d100:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d102:	e02c      	b.n	800d15e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d104:	4b40      	ldr	r3, [pc, #256]	; (800d208 <tcp_process+0x5a8>)
 800d106:	6819      	ldr	r1, [r3, #0]
 800d108:	4b40      	ldr	r3, [pc, #256]	; (800d20c <tcp_process+0x5ac>)
 800d10a:	881b      	ldrh	r3, [r3, #0]
 800d10c:	461a      	mov	r2, r3
 800d10e:	4b40      	ldr	r3, [pc, #256]	; (800d210 <tcp_process+0x5b0>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d114:	4b3f      	ldr	r3, [pc, #252]	; (800d214 <tcp_process+0x5b4>)
 800d116:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d118:	885b      	ldrh	r3, [r3, #2]
 800d11a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d11c:	4a3d      	ldr	r2, [pc, #244]	; (800d214 <tcp_process+0x5b4>)
 800d11e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d120:	8812      	ldrh	r2, [r2, #0]
 800d122:	b292      	uxth	r2, r2
 800d124:	9202      	str	r2, [sp, #8]
 800d126:	9301      	str	r3, [sp, #4]
 800d128:	4b3b      	ldr	r3, [pc, #236]	; (800d218 <tcp_process+0x5b8>)
 800d12a:	9300      	str	r3, [sp, #0]
 800d12c:	4b3b      	ldr	r3, [pc, #236]	; (800d21c <tcp_process+0x5bc>)
 800d12e:	4602      	mov	r2, r0
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f002 fbcf 	bl	800f8d4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d136:	e167      	b.n	800d408 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d138:	4b32      	ldr	r3, [pc, #200]	; (800d204 <tcp_process+0x5a4>)
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	f003 0302 	and.w	r3, r3, #2
 800d140:	2b00      	cmp	r3, #0
 800d142:	f000 8161 	beq.w	800d408 <tcp_process+0x7a8>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d14a:	1e5a      	subs	r2, r3, #1
 800d14c:	4b30      	ldr	r3, [pc, #192]	; (800d210 <tcp_process+0x5b0>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	429a      	cmp	r2, r3
 800d152:	f040 8159 	bne.w	800d408 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f002 f9b4 	bl	800f4c4 <tcp_rexmit>
      break;
 800d15c:	e154      	b.n	800d408 <tcp_process+0x7a8>
 800d15e:	e153      	b.n	800d408 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f000 fa71 	bl	800d648 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d166:	4b32      	ldr	r3, [pc, #200]	; (800d230 <tcp_process+0x5d0>)
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	f003 0320 	and.w	r3, r3, #32
 800d16e:	2b00      	cmp	r3, #0
 800d170:	f000 814c 	beq.w	800d40c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	8b5b      	ldrh	r3, [r3, #26]
 800d178:	f043 0302 	orr.w	r3, r3, #2
 800d17c:	b29a      	uxth	r2, r3
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2207      	movs	r2, #7
 800d186:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d188:	e140      	b.n	800d40c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f000 fa5c 	bl	800d648 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d190:	4b27      	ldr	r3, [pc, #156]	; (800d230 <tcp_process+0x5d0>)
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	f003 0320 	and.w	r3, r3, #32
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d071      	beq.n	800d280 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d19c:	4b19      	ldr	r3, [pc, #100]	; (800d204 <tcp_process+0x5a4>)
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	f003 0310 	and.w	r3, r3, #16
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d060      	beq.n	800d26a <tcp_process+0x60a>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d1ac:	4b16      	ldr	r3, [pc, #88]	; (800d208 <tcp_process+0x5a8>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d15a      	bne.n	800d26a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d156      	bne.n	800d26a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	8b5b      	ldrh	r3, [r3, #26]
 800d1c0:	f043 0302 	orr.w	r3, r3, #2
 800d1c4:	b29a      	uxth	r2, r3
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f7fe fdbe 	bl	800bd4c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d1d0:	4b18      	ldr	r3, [pc, #96]	; (800d234 <tcp_process+0x5d4>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	687a      	ldr	r2, [r7, #4]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d105      	bne.n	800d1e6 <tcp_process+0x586>
 800d1da:	4b16      	ldr	r3, [pc, #88]	; (800d234 <tcp_process+0x5d4>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	68db      	ldr	r3, [r3, #12]
 800d1e0:	4a14      	ldr	r2, [pc, #80]	; (800d234 <tcp_process+0x5d4>)
 800d1e2:	6013      	str	r3, [r2, #0]
 800d1e4:	e02e      	b.n	800d244 <tcp_process+0x5e4>
 800d1e6:	4b13      	ldr	r3, [pc, #76]	; (800d234 <tcp_process+0x5d4>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	617b      	str	r3, [r7, #20]
 800d1ec:	e027      	b.n	800d23e <tcp_process+0x5de>
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	68db      	ldr	r3, [r3, #12]
 800d1f2:	687a      	ldr	r2, [r7, #4]
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d11f      	bne.n	800d238 <tcp_process+0x5d8>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	68da      	ldr	r2, [r3, #12]
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	60da      	str	r2, [r3, #12]
 800d200:	e020      	b.n	800d244 <tcp_process+0x5e4>
 800d202:	bf00      	nop
 800d204:	20000404 	.word	0x20000404
 800d208:	200003fc 	.word	0x200003fc
 800d20c:	20000402 	.word	0x20000402
 800d210:	200003f8 	.word	0x200003f8
 800d214:	200003e8 	.word	0x200003e8
 800d218:	2000390c 	.word	0x2000390c
 800d21c:	20003910 	.word	0x20003910
 800d220:	08019ff4 	.word	0x08019ff4
 800d224:	0801a294 	.word	0x0801a294
 800d228:	0801a040 	.word	0x0801a040
 800d22c:	20000400 	.word	0x20000400
 800d230:	20000405 	.word	0x20000405
 800d234:	20006a20 	.word	0x20006a20
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	617b      	str	r3, [r7, #20]
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d1d4      	bne.n	800d1ee <tcp_process+0x58e>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2200      	movs	r2, #0
 800d248:	60da      	str	r2, [r3, #12]
 800d24a:	4b77      	ldr	r3, [pc, #476]	; (800d428 <tcp_process+0x7c8>)
 800d24c:	2201      	movs	r2, #1
 800d24e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	220a      	movs	r2, #10
 800d254:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d256:	4b75      	ldr	r3, [pc, #468]	; (800d42c <tcp_process+0x7cc>)
 800d258:	681a      	ldr	r2, [r3, #0]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	60da      	str	r2, [r3, #12]
 800d25e:	4a73      	ldr	r2, [pc, #460]	; (800d42c <tcp_process+0x7cc>)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6013      	str	r3, [r2, #0]
 800d264:	f002 fcf6 	bl	800fc54 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d268:	e0d2      	b.n	800d410 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	8b5b      	ldrh	r3, [r3, #26]
 800d26e:	f043 0302 	orr.w	r3, r3, #2
 800d272:	b29a      	uxth	r2, r3
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2208      	movs	r2, #8
 800d27c:	751a      	strb	r2, [r3, #20]
      break;
 800d27e:	e0c7      	b.n	800d410 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d280:	4b6b      	ldr	r3, [pc, #428]	; (800d430 <tcp_process+0x7d0>)
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	f003 0310 	and.w	r3, r3, #16
 800d288:	2b00      	cmp	r3, #0
 800d28a:	f000 80c1 	beq.w	800d410 <tcp_process+0x7b0>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d292:	4b68      	ldr	r3, [pc, #416]	; (800d434 <tcp_process+0x7d4>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	429a      	cmp	r2, r3
 800d298:	f040 80ba 	bne.w	800d410 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	f040 80b5 	bne.w	800d410 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2206      	movs	r2, #6
 800d2aa:	751a      	strb	r2, [r3, #20]
      break;
 800d2ac:	e0b0      	b.n	800d410 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f000 f9ca 	bl	800d648 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d2b4:	4b60      	ldr	r3, [pc, #384]	; (800d438 <tcp_process+0x7d8>)
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	f003 0320 	and.w	r3, r3, #32
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	f000 80a9 	beq.w	800d414 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	8b5b      	ldrh	r3, [r3, #26]
 800d2c6:	f043 0302 	orr.w	r3, r3, #2
 800d2ca:	b29a      	uxth	r2, r3
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f7fe fd3b 	bl	800bd4c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d2d6:	4b59      	ldr	r3, [pc, #356]	; (800d43c <tcp_process+0x7dc>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	687a      	ldr	r2, [r7, #4]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d105      	bne.n	800d2ec <tcp_process+0x68c>
 800d2e0:	4b56      	ldr	r3, [pc, #344]	; (800d43c <tcp_process+0x7dc>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	4a55      	ldr	r2, [pc, #340]	; (800d43c <tcp_process+0x7dc>)
 800d2e8:	6013      	str	r3, [r2, #0]
 800d2ea:	e013      	b.n	800d314 <tcp_process+0x6b4>
 800d2ec:	4b53      	ldr	r3, [pc, #332]	; (800d43c <tcp_process+0x7dc>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	613b      	str	r3, [r7, #16]
 800d2f2:	e00c      	b.n	800d30e <tcp_process+0x6ae>
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	687a      	ldr	r2, [r7, #4]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d104      	bne.n	800d308 <tcp_process+0x6a8>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	68da      	ldr	r2, [r3, #12]
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	60da      	str	r2, [r3, #12]
 800d306:	e005      	b.n	800d314 <tcp_process+0x6b4>
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	68db      	ldr	r3, [r3, #12]
 800d30c:	613b      	str	r3, [r7, #16]
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d1ef      	bne.n	800d2f4 <tcp_process+0x694>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	60da      	str	r2, [r3, #12]
 800d31a:	4b43      	ldr	r3, [pc, #268]	; (800d428 <tcp_process+0x7c8>)
 800d31c:	2201      	movs	r2, #1
 800d31e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	220a      	movs	r2, #10
 800d324:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d326:	4b41      	ldr	r3, [pc, #260]	; (800d42c <tcp_process+0x7cc>)
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	60da      	str	r2, [r3, #12]
 800d32e:	4a3f      	ldr	r2, [pc, #252]	; (800d42c <tcp_process+0x7cc>)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6013      	str	r3, [r2, #0]
 800d334:	f002 fc8e 	bl	800fc54 <tcp_timer_needed>
      }
      break;
 800d338:	e06c      	b.n	800d414 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f000 f984 	bl	800d648 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d340:	4b3b      	ldr	r3, [pc, #236]	; (800d430 <tcp_process+0x7d0>)
 800d342:	781b      	ldrb	r3, [r3, #0]
 800d344:	f003 0310 	and.w	r3, r3, #16
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d065      	beq.n	800d418 <tcp_process+0x7b8>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d350:	4b38      	ldr	r3, [pc, #224]	; (800d434 <tcp_process+0x7d4>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	429a      	cmp	r2, r3
 800d356:	d15f      	bne.n	800d418 <tcp_process+0x7b8>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d15b      	bne.n	800d418 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f7fe fcf3 	bl	800bd4c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d366:	4b35      	ldr	r3, [pc, #212]	; (800d43c <tcp_process+0x7dc>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d105      	bne.n	800d37c <tcp_process+0x71c>
 800d370:	4b32      	ldr	r3, [pc, #200]	; (800d43c <tcp_process+0x7dc>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	68db      	ldr	r3, [r3, #12]
 800d376:	4a31      	ldr	r2, [pc, #196]	; (800d43c <tcp_process+0x7dc>)
 800d378:	6013      	str	r3, [r2, #0]
 800d37a:	e013      	b.n	800d3a4 <tcp_process+0x744>
 800d37c:	4b2f      	ldr	r3, [pc, #188]	; (800d43c <tcp_process+0x7dc>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	60fb      	str	r3, [r7, #12]
 800d382:	e00c      	b.n	800d39e <tcp_process+0x73e>
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	68db      	ldr	r3, [r3, #12]
 800d388:	687a      	ldr	r2, [r7, #4]
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d104      	bne.n	800d398 <tcp_process+0x738>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	68da      	ldr	r2, [r3, #12]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	60da      	str	r2, [r3, #12]
 800d396:	e005      	b.n	800d3a4 <tcp_process+0x744>
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	60fb      	str	r3, [r7, #12]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d1ef      	bne.n	800d384 <tcp_process+0x724>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	60da      	str	r2, [r3, #12]
 800d3aa:	4b1f      	ldr	r3, [pc, #124]	; (800d428 <tcp_process+0x7c8>)
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	220a      	movs	r2, #10
 800d3b4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d3b6:	4b1d      	ldr	r3, [pc, #116]	; (800d42c <tcp_process+0x7cc>)
 800d3b8:	681a      	ldr	r2, [r3, #0]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	60da      	str	r2, [r3, #12]
 800d3be:	4a1b      	ldr	r2, [pc, #108]	; (800d42c <tcp_process+0x7cc>)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6013      	str	r3, [r2, #0]
 800d3c4:	f002 fc46 	bl	800fc54 <tcp_timer_needed>
      }
      break;
 800d3c8:	e026      	b.n	800d418 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f000 f93c 	bl	800d648 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d3d0:	4b17      	ldr	r3, [pc, #92]	; (800d430 <tcp_process+0x7d0>)
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	f003 0310 	and.w	r3, r3, #16
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d01f      	beq.n	800d41c <tcp_process+0x7bc>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d3e0:	4b14      	ldr	r3, [pc, #80]	; (800d434 <tcp_process+0x7d4>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d119      	bne.n	800d41c <tcp_process+0x7bc>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d115      	bne.n	800d41c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d3f0:	4b11      	ldr	r3, [pc, #68]	; (800d438 <tcp_process+0x7d8>)
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	f043 0310 	orr.w	r3, r3, #16
 800d3f8:	b2da      	uxtb	r2, r3
 800d3fa:	4b0f      	ldr	r3, [pc, #60]	; (800d438 <tcp_process+0x7d8>)
 800d3fc:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d3fe:	e00d      	b.n	800d41c <tcp_process+0x7bc>
    default:
      break;
 800d400:	bf00      	nop
 800d402:	e00c      	b.n	800d41e <tcp_process+0x7be>
      break;
 800d404:	bf00      	nop
 800d406:	e00a      	b.n	800d41e <tcp_process+0x7be>
      break;
 800d408:	bf00      	nop
 800d40a:	e008      	b.n	800d41e <tcp_process+0x7be>
      break;
 800d40c:	bf00      	nop
 800d40e:	e006      	b.n	800d41e <tcp_process+0x7be>
      break;
 800d410:	bf00      	nop
 800d412:	e004      	b.n	800d41e <tcp_process+0x7be>
      break;
 800d414:	bf00      	nop
 800d416:	e002      	b.n	800d41e <tcp_process+0x7be>
      break;
 800d418:	bf00      	nop
 800d41a:	e000      	b.n	800d41e <tcp_process+0x7be>
      break;
 800d41c:	bf00      	nop
  }
  return ERR_OK;
 800d41e:	2300      	movs	r3, #0
}
 800d420:	4618      	mov	r0, r3
 800d422:	3724      	adds	r7, #36	; 0x24
 800d424:	46bd      	mov	sp, r7
 800d426:	bd90      	pop	{r4, r7, pc}
 800d428:	20006a1c 	.word	0x20006a1c
 800d42c:	20006a30 	.word	0x20006a30
 800d430:	20000404 	.word	0x20000404
 800d434:	200003fc 	.word	0x200003fc
 800d438:	20000405 	.word	0x20000405
 800d43c:	20006a20 	.word	0x20006a20

0800d440 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d440:	b590      	push	{r4, r7, lr}
 800d442:	b085      	sub	sp, #20
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d106      	bne.n	800d45e <tcp_oos_insert_segment+0x1e>
 800d450:	4b3b      	ldr	r3, [pc, #236]	; (800d540 <tcp_oos_insert_segment+0x100>)
 800d452:	f240 421f 	movw	r2, #1055	; 0x41f
 800d456:	493b      	ldr	r1, [pc, #236]	; (800d544 <tcp_oos_insert_segment+0x104>)
 800d458:	483b      	ldr	r0, [pc, #236]	; (800d548 <tcp_oos_insert_segment+0x108>)
 800d45a:	f008 f881 	bl	8015560 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	68db      	ldr	r3, [r3, #12]
 800d462:	899b      	ldrh	r3, [r3, #12]
 800d464:	b29b      	uxth	r3, r3
 800d466:	4618      	mov	r0, r3
 800d468:	f7fb fd64 	bl	8008f34 <lwip_htons>
 800d46c:	4603      	mov	r3, r0
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	f003 0301 	and.w	r3, r3, #1
 800d474:	2b00      	cmp	r3, #0
 800d476:	d028      	beq.n	800d4ca <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d478:	6838      	ldr	r0, [r7, #0]
 800d47a:	f7fe fa65 	bl	800b948 <tcp_segs_free>
    next = NULL;
 800d47e:	2300      	movs	r3, #0
 800d480:	603b      	str	r3, [r7, #0]
 800d482:	e056      	b.n	800d532 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	68db      	ldr	r3, [r3, #12]
 800d488:	899b      	ldrh	r3, [r3, #12]
 800d48a:	b29b      	uxth	r3, r3
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7fb fd51 	bl	8008f34 <lwip_htons>
 800d492:	4603      	mov	r3, r0
 800d494:	b2db      	uxtb	r3, r3
 800d496:	f003 0301 	and.w	r3, r3, #1
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d00d      	beq.n	800d4ba <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	68db      	ldr	r3, [r3, #12]
 800d4a2:	899b      	ldrh	r3, [r3, #12]
 800d4a4:	b29c      	uxth	r4, r3
 800d4a6:	2001      	movs	r0, #1
 800d4a8:	f7fb fd44 	bl	8008f34 <lwip_htons>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	4322      	orrs	r2, r4
 800d4b6:	b292      	uxth	r2, r2
 800d4b8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d4c4:	68f8      	ldr	r0, [r7, #12]
 800d4c6:	f7fe fa54 	bl	800b972 <tcp_seg_free>
    while (next &&
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d00e      	beq.n	800d4ee <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	891b      	ldrh	r3, [r3, #8]
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	4b1d      	ldr	r3, [pc, #116]	; (800d54c <tcp_oos_insert_segment+0x10c>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	441a      	add	r2, r3
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	6839      	ldr	r1, [r7, #0]
 800d4e4:	8909      	ldrh	r1, [r1, #8]
 800d4e6:	440b      	add	r3, r1
 800d4e8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	daca      	bge.n	800d484 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d01e      	beq.n	800d532 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	891b      	ldrh	r3, [r3, #8]
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	4b14      	ldr	r3, [pc, #80]	; (800d54c <tcp_oos_insert_segment+0x10c>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	441a      	add	r2, r3
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	68db      	ldr	r3, [r3, #12]
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d508:	2b00      	cmp	r3, #0
 800d50a:	dd12      	ble.n	800d532 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	68db      	ldr	r3, [r3, #12]
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	b29a      	uxth	r2, r3
 800d514:	4b0d      	ldr	r3, [pc, #52]	; (800d54c <tcp_oos_insert_segment+0x10c>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	b29b      	uxth	r3, r3
 800d51a:	1ad3      	subs	r3, r2, r3
 800d51c:	b29a      	uxth	r2, r3
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	685a      	ldr	r2, [r3, #4]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	891b      	ldrh	r3, [r3, #8]
 800d52a:	4619      	mov	r1, r3
 800d52c:	4610      	mov	r0, r2
 800d52e:	f7fc fe17 	bl	800a160 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	683a      	ldr	r2, [r7, #0]
 800d536:	601a      	str	r2, [r3, #0]
}
 800d538:	bf00      	nop
 800d53a:	3714      	adds	r7, #20
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd90      	pop	{r4, r7, pc}
 800d540:	08019ff4 	.word	0x08019ff4
 800d544:	0801a2b4 	.word	0x0801a2b4
 800d548:	0801a040 	.word	0x0801a040
 800d54c:	200003f8 	.word	0x200003f8

0800d550 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d550:	b5b0      	push	{r4, r5, r7, lr}
 800d552:	b086      	sub	sp, #24
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	607a      	str	r2, [r7, #4]
 800d55c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d55e:	e03e      	b.n	800d5de <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	4618      	mov	r0, r3
 800d570:	f7fd f804 	bl	800a57c <pbuf_clen>
 800d574:	4603      	mov	r3, r0
 800d576:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d57e:	8a7a      	ldrh	r2, [r7, #18]
 800d580:	429a      	cmp	r2, r3
 800d582:	d906      	bls.n	800d592 <tcp_free_acked_segments+0x42>
 800d584:	4b2a      	ldr	r3, [pc, #168]	; (800d630 <tcp_free_acked_segments+0xe0>)
 800d586:	f240 4257 	movw	r2, #1111	; 0x457
 800d58a:	492a      	ldr	r1, [pc, #168]	; (800d634 <tcp_free_acked_segments+0xe4>)
 800d58c:	482a      	ldr	r0, [pc, #168]	; (800d638 <tcp_free_acked_segments+0xe8>)
 800d58e:	f007 ffe7 	bl	8015560 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800d598:	8a7b      	ldrh	r3, [r7, #18]
 800d59a:	1ad3      	subs	r3, r2, r3
 800d59c:	b29a      	uxth	r2, r3
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	891a      	ldrh	r2, [r3, #8]
 800d5a8:	4b24      	ldr	r3, [pc, #144]	; (800d63c <tcp_free_acked_segments+0xec>)
 800d5aa:	881b      	ldrh	r3, [r3, #0]
 800d5ac:	4413      	add	r3, r2
 800d5ae:	b29a      	uxth	r2, r3
 800d5b0:	4b22      	ldr	r3, [pc, #136]	; (800d63c <tcp_free_acked_segments+0xec>)
 800d5b2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d5b4:	6978      	ldr	r0, [r7, #20]
 800d5b6:	f7fe f9dc 	bl	800b972 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d00c      	beq.n	800d5de <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d109      	bne.n	800d5de <tcp_free_acked_segments+0x8e>
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d106      	bne.n	800d5de <tcp_free_acked_segments+0x8e>
 800d5d0:	4b17      	ldr	r3, [pc, #92]	; (800d630 <tcp_free_acked_segments+0xe0>)
 800d5d2:	f240 4261 	movw	r2, #1121	; 0x461
 800d5d6:	491a      	ldr	r1, [pc, #104]	; (800d640 <tcp_free_acked_segments+0xf0>)
 800d5d8:	4817      	ldr	r0, [pc, #92]	; (800d638 <tcp_free_acked_segments+0xe8>)
 800d5da:	f007 ffc1 	bl	8015560 <iprintf>
  while (seg_list != NULL &&
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d020      	beq.n	800d626 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7fb fcb7 	bl	8008f5e <lwip_htonl>
 800d5f0:	4604      	mov	r4, r0
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	891b      	ldrh	r3, [r3, #8]
 800d5f6:	461d      	mov	r5, r3
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	68db      	ldr	r3, [r3, #12]
 800d5fc:	899b      	ldrh	r3, [r3, #12]
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	4618      	mov	r0, r3
 800d602:	f7fb fc97 	bl	8008f34 <lwip_htons>
 800d606:	4603      	mov	r3, r0
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	f003 0303 	and.w	r3, r3, #3
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d001      	beq.n	800d616 <tcp_free_acked_segments+0xc6>
 800d612:	2301      	movs	r3, #1
 800d614:	e000      	b.n	800d618 <tcp_free_acked_segments+0xc8>
 800d616:	2300      	movs	r3, #0
 800d618:	442b      	add	r3, r5
 800d61a:	18e2      	adds	r2, r4, r3
 800d61c:	4b09      	ldr	r3, [pc, #36]	; (800d644 <tcp_free_acked_segments+0xf4>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d622:	2b00      	cmp	r3, #0
 800d624:	dd9c      	ble.n	800d560 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d626:	68bb      	ldr	r3, [r7, #8]
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3718      	adds	r7, #24
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bdb0      	pop	{r4, r5, r7, pc}
 800d630:	08019ff4 	.word	0x08019ff4
 800d634:	0801a2dc 	.word	0x0801a2dc
 800d638:	0801a040 	.word	0x0801a040
 800d63c:	20000400 	.word	0x20000400
 800d640:	0801a304 	.word	0x0801a304
 800d644:	200003fc 	.word	0x200003fc

0800d648 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d648:	b5b0      	push	{r4, r5, r7, lr}
 800d64a:	b094      	sub	sp, #80	; 0x50
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d650:	2300      	movs	r3, #0
 800d652:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d106      	bne.n	800d668 <tcp_receive+0x20>
 800d65a:	4ba6      	ldr	r3, [pc, #664]	; (800d8f4 <tcp_receive+0x2ac>)
 800d65c:	f240 427b 	movw	r2, #1147	; 0x47b
 800d660:	49a5      	ldr	r1, [pc, #660]	; (800d8f8 <tcp_receive+0x2b0>)
 800d662:	48a6      	ldr	r0, [pc, #664]	; (800d8fc <tcp_receive+0x2b4>)
 800d664:	f007 ff7c 	bl	8015560 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	7d1b      	ldrb	r3, [r3, #20]
 800d66c:	2b03      	cmp	r3, #3
 800d66e:	d806      	bhi.n	800d67e <tcp_receive+0x36>
 800d670:	4ba0      	ldr	r3, [pc, #640]	; (800d8f4 <tcp_receive+0x2ac>)
 800d672:	f240 427c 	movw	r2, #1148	; 0x47c
 800d676:	49a2      	ldr	r1, [pc, #648]	; (800d900 <tcp_receive+0x2b8>)
 800d678:	48a0      	ldr	r0, [pc, #640]	; (800d8fc <tcp_receive+0x2b4>)
 800d67a:	f007 ff71 	bl	8015560 <iprintf>

  if (flags & TCP_ACK) {
 800d67e:	4ba1      	ldr	r3, [pc, #644]	; (800d904 <tcp_receive+0x2bc>)
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	f003 0310 	and.w	r3, r3, #16
 800d686:	2b00      	cmp	r3, #0
 800d688:	f000 8263 	beq.w	800db52 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d692:	461a      	mov	r2, r3
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d698:	4413      	add	r3, r2
 800d69a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d6a0:	4b99      	ldr	r3, [pc, #612]	; (800d908 <tcp_receive+0x2c0>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	1ad3      	subs	r3, r2, r3
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	db1b      	blt.n	800d6e2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d6ae:	4b96      	ldr	r3, [pc, #600]	; (800d908 <tcp_receive+0x2c0>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d106      	bne.n	800d6c4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d6ba:	4b94      	ldr	r3, [pc, #592]	; (800d90c <tcp_receive+0x2c4>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	1ad3      	subs	r3, r2, r3
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	db0e      	blt.n	800d6e2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d6c8:	4b90      	ldr	r3, [pc, #576]	; (800d90c <tcp_receive+0x2c4>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d125      	bne.n	800d71c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d6d0:	4b8f      	ldr	r3, [pc, #572]	; (800d910 <tcp_receive+0x2c8>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	89db      	ldrh	r3, [r3, #14]
 800d6d6:	b29a      	uxth	r2, r3
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d91c      	bls.n	800d71c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d6e2:	4b8b      	ldr	r3, [pc, #556]	; (800d910 <tcp_receive+0x2c8>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	89db      	ldrh	r3, [r3, #14]
 800d6e8:	b29a      	uxth	r2, r3
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d205      	bcs.n	800d70c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800d70c:	4b7e      	ldr	r3, [pc, #504]	; (800d908 <tcp_receive+0x2c0>)
 800d70e:	681a      	ldr	r2, [r3, #0]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800d714:	4b7d      	ldr	r3, [pc, #500]	; (800d90c <tcp_receive+0x2c4>)
 800d716:	681a      	ldr	r2, [r3, #0]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d71c:	4b7b      	ldr	r3, [pc, #492]	; (800d90c <tcp_receive+0x2c4>)
 800d71e:	681a      	ldr	r2, [r3, #0]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d724:	1ad3      	subs	r3, r2, r3
 800d726:	2b00      	cmp	r3, #0
 800d728:	dc58      	bgt.n	800d7dc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800d72a:	4b7a      	ldr	r3, [pc, #488]	; (800d914 <tcp_receive+0x2cc>)
 800d72c:	881b      	ldrh	r3, [r3, #0]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d14b      	bne.n	800d7ca <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d736:	687a      	ldr	r2, [r7, #4]
 800d738:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800d73c:	4413      	add	r3, r2
 800d73e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d740:	429a      	cmp	r2, r3
 800d742:	d142      	bne.n	800d7ca <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	db3d      	blt.n	800d7ca <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d752:	4b6e      	ldr	r3, [pc, #440]	; (800d90c <tcp_receive+0x2c4>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	429a      	cmp	r2, r3
 800d758:	d137      	bne.n	800d7ca <tcp_receive+0x182>
              found_dupack = 1;
 800d75a:	2301      	movs	r3, #1
 800d75c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d764:	2bff      	cmp	r3, #255	; 0xff
 800d766:	d007      	beq.n	800d778 <tcp_receive+0x130>
                ++pcb->dupacks;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d76e:	3301      	adds	r3, #1
 800d770:	b2da      	uxtb	r2, r3
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d77e:	2b03      	cmp	r3, #3
 800d780:	d91b      	bls.n	800d7ba <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d78c:	4413      	add	r3, r2
 800d78e:	b29a      	uxth	r2, r3
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d796:	429a      	cmp	r2, r3
 800d798:	d30a      	bcc.n	800d7b0 <tcp_receive+0x168>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7a4:	4413      	add	r3, r2
 800d7a6:	b29a      	uxth	r2, r3
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d7ae:	e004      	b.n	800d7ba <tcp_receive+0x172>
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d7c0:	2b02      	cmp	r3, #2
 800d7c2:	d902      	bls.n	800d7ca <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f001 fee9 	bl	800f59c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d7ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	f040 8160 	bne.w	800da92 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d7da:	e15a      	b.n	800da92 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d7dc:	4b4b      	ldr	r3, [pc, #300]	; (800d90c <tcp_receive+0x2c4>)
 800d7de:	681a      	ldr	r2, [r3, #0]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7e4:	1ad3      	subs	r3, r2, r3
 800d7e6:	3b01      	subs	r3, #1
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	f2c0 814d 	blt.w	800da88 <tcp_receive+0x440>
 800d7ee:	4b47      	ldr	r3, [pc, #284]	; (800d90c <tcp_receive+0x2c4>)
 800d7f0:	681a      	ldr	r2, [r3, #0]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7f6:	1ad3      	subs	r3, r2, r3
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	f300 8145 	bgt.w	800da88 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	8b5b      	ldrh	r3, [r3, #26]
 800d802:	f003 0304 	and.w	r3, r3, #4
 800d806:	2b00      	cmp	r3, #0
 800d808:	d010      	beq.n	800d82c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	8b5b      	ldrh	r3, [r3, #26]
 800d80e:	f023 0304 	bic.w	r3, r3, #4
 800d812:	b29a      	uxth	r2, r3
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2200      	movs	r2, #0
 800d828:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2200      	movs	r2, #0
 800d830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d83a:	10db      	asrs	r3, r3, #3
 800d83c:	b21b      	sxth	r3, r3
 800d83e:	b29a      	uxth	r2, r3
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d846:	b29b      	uxth	r3, r3
 800d848:	4413      	add	r3, r2
 800d84a:	b29b      	uxth	r3, r3
 800d84c:	b21a      	sxth	r2, r3
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d854:	4b2d      	ldr	r3, [pc, #180]	; (800d90c <tcp_receive+0x2c4>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	b29a      	uxth	r2, r3
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d85e:	b29b      	uxth	r3, r3
 800d860:	1ad3      	subs	r3, r2, r3
 800d862:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2200      	movs	r2, #0
 800d868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d86c:	4b27      	ldr	r3, [pc, #156]	; (800d90c <tcp_receive+0x2c4>)
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	7d1b      	ldrb	r3, [r3, #20]
 800d878:	2b03      	cmp	r3, #3
 800d87a:	f240 8096 	bls.w	800d9aa <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d244      	bcs.n	800d918 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	8b5b      	ldrh	r3, [r3, #26]
 800d892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d896:	2b00      	cmp	r3, #0
 800d898:	d001      	beq.n	800d89e <tcp_receive+0x256>
 800d89a:	2301      	movs	r3, #1
 800d89c:	e000      	b.n	800d8a0 <tcp_receive+0x258>
 800d89e:	2302      	movs	r3, #2
 800d8a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d8a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d8a8:	b29a      	uxth	r2, r3
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8ae:	fb12 f303 	smulbb	r3, r2, r3
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	bf28      	it	cs
 800d8ba:	4613      	movcs	r3, r2
 800d8bc:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d8c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d8c6:	4413      	add	r3, r2
 800d8c8:	b29a      	uxth	r2, r3
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d309      	bcc.n	800d8e8 <tcp_receive+0x2a0>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d8da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d8dc:	4413      	add	r3, r2
 800d8de:	b29a      	uxth	r2, r3
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d8e6:	e060      	b.n	800d9aa <tcp_receive+0x362>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d8f2:	e05a      	b.n	800d9aa <tcp_receive+0x362>
 800d8f4:	08019ff4 	.word	0x08019ff4
 800d8f8:	0801a324 	.word	0x0801a324
 800d8fc:	0801a040 	.word	0x0801a040
 800d900:	0801a340 	.word	0x0801a340
 800d904:	20000404 	.word	0x20000404
 800d908:	200003f8 	.word	0x200003f8
 800d90c:	200003fc 	.word	0x200003fc
 800d910:	200003e8 	.word	0x200003e8
 800d914:	20000402 	.word	0x20000402
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d91e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d920:	4413      	add	r3, r2
 800d922:	b29a      	uxth	r2, r3
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d309      	bcc.n	800d942 <tcp_receive+0x2fa>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d934:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d936:	4413      	add	r3, r2
 800d938:	b29a      	uxth	r2, r3
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d940:	e004      	b.n	800d94c <tcp_receive+0x304>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d948:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d958:	429a      	cmp	r2, r3
 800d95a:	d326      	bcc.n	800d9aa <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d968:	1ad3      	subs	r3, r2, r3
 800d96a:	b29a      	uxth	r2, r3
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d97c:	4413      	add	r3, r2
 800d97e:	b29a      	uxth	r2, r3
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d986:	429a      	cmp	r2, r3
 800d988:	d30a      	bcc.n	800d9a0 <tcp_receive+0x358>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d994:	4413      	add	r3, r2
 800d996:	b29a      	uxth	r2, r3
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d99e:	e004      	b.n	800d9aa <tcp_receive+0x362>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9b2:	4a98      	ldr	r2, [pc, #608]	; (800dc14 <tcp_receive+0x5cc>)
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f7ff fdcb 	bl	800d550 <tcp_free_acked_segments>
 800d9ba:	4602      	mov	r2, r0
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9c8:	4a93      	ldr	r2, [pc, #588]	; (800dc18 <tcp_receive+0x5d0>)
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f7ff fdc0 	bl	800d550 <tcp_free_acked_segments>
 800d9d0:	4602      	mov	r2, r0
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d104      	bne.n	800d9e8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9e4:	861a      	strh	r2, [r3, #48]	; 0x30
 800d9e6:	e002      	b.n	800d9ee <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d103      	bne.n	800da04 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2200      	movs	r2, #0
 800da00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800da0a:	4b84      	ldr	r3, [pc, #528]	; (800dc1c <tcp_receive+0x5d4>)
 800da0c:	881b      	ldrh	r3, [r3, #0]
 800da0e:	4413      	add	r3, r2
 800da10:	b29a      	uxth	r2, r3
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	8b5b      	ldrh	r3, [r3, #26]
 800da1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da20:	2b00      	cmp	r3, #0
 800da22:	d035      	beq.n	800da90 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d118      	bne.n	800da5e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da30:	2b00      	cmp	r3, #0
 800da32:	d00c      	beq.n	800da4e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da3c:	68db      	ldr	r3, [r3, #12]
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	4618      	mov	r0, r3
 800da42:	f7fb fa8c 	bl	8008f5e <lwip_htonl>
 800da46:	4603      	mov	r3, r0
 800da48:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	dc20      	bgt.n	800da90 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	8b5b      	ldrh	r3, [r3, #26]
 800da52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da56:	b29a      	uxth	r2, r3
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800da5c:	e018      	b.n	800da90 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7fb fa77 	bl	8008f5e <lwip_htonl>
 800da70:	4603      	mov	r3, r0
 800da72:	1ae3      	subs	r3, r4, r3
 800da74:	2b00      	cmp	r3, #0
 800da76:	dc0b      	bgt.n	800da90 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	8b5b      	ldrh	r3, [r3, #26]
 800da7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da80:	b29a      	uxth	r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800da86:	e003      	b.n	800da90 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f001 ff73 	bl	800f974 <tcp_send_empty_ack>
 800da8e:	e000      	b.n	800da92 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800da90:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da96:	2b00      	cmp	r3, #0
 800da98:	d05b      	beq.n	800db52 <tcp_receive+0x50a>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da9e:	4b60      	ldr	r3, [pc, #384]	; (800dc20 <tcp_receive+0x5d8>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	1ad3      	subs	r3, r2, r3
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	da54      	bge.n	800db52 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800daa8:	4b5e      	ldr	r3, [pc, #376]	; (800dc24 <tcp_receive+0x5dc>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	b29a      	uxth	r2, r3
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	1ad3      	subs	r3, r2, r3
 800dab6:	b29b      	uxth	r3, r3
 800dab8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800dabc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dac6:	10db      	asrs	r3, r3, #3
 800dac8:	b21b      	sxth	r3, r3
 800daca:	b29b      	uxth	r3, r3
 800dacc:	1ad3      	subs	r3, r2, r3
 800dace:	b29b      	uxth	r3, r3
 800dad0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dada:	b29a      	uxth	r2, r3
 800dadc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dae0:	4413      	add	r3, r2
 800dae2:	b29b      	uxth	r3, r3
 800dae4:	b21a      	sxth	r2, r3
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800daea:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800daee:	2b00      	cmp	r3, #0
 800daf0:	da05      	bge.n	800dafe <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800daf2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800daf6:	425b      	negs	r3, r3
 800daf8:	b29b      	uxth	r3, r3
 800dafa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800dafe:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800db08:	109b      	asrs	r3, r3, #2
 800db0a:	b21b      	sxth	r3, r3
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	1ad3      	subs	r3, r2, r3
 800db10:	b29b      	uxth	r3, r3
 800db12:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800db1c:	b29a      	uxth	r2, r3
 800db1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800db22:	4413      	add	r3, r2
 800db24:	b29b      	uxth	r3, r3
 800db26:	b21a      	sxth	r2, r3
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800db32:	10db      	asrs	r3, r3, #3
 800db34:	b21b      	sxth	r3, r3
 800db36:	b29a      	uxth	r2, r3
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800db3e:	b29b      	uxth	r3, r3
 800db40:	4413      	add	r3, r2
 800db42:	b29b      	uxth	r3, r3
 800db44:	b21a      	sxth	r2, r3
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2200      	movs	r2, #0
 800db50:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800db52:	4b35      	ldr	r3, [pc, #212]	; (800dc28 <tcp_receive+0x5e0>)
 800db54:	881b      	ldrh	r3, [r3, #0]
 800db56:	2b00      	cmp	r3, #0
 800db58:	f000 84e1 	beq.w	800e51e <tcp_receive+0xed6>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	7d1b      	ldrb	r3, [r3, #20]
 800db60:	2b06      	cmp	r3, #6
 800db62:	f200 84dc 	bhi.w	800e51e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db6a:	4b30      	ldr	r3, [pc, #192]	; (800dc2c <tcp_receive+0x5e4>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	1ad3      	subs	r3, r2, r3
 800db70:	3b01      	subs	r3, #1
 800db72:	2b00      	cmp	r3, #0
 800db74:	f2c0 808e 	blt.w	800dc94 <tcp_receive+0x64c>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db7c:	4b2a      	ldr	r3, [pc, #168]	; (800dc28 <tcp_receive+0x5e0>)
 800db7e:	881b      	ldrh	r3, [r3, #0]
 800db80:	4619      	mov	r1, r3
 800db82:	4b2a      	ldr	r3, [pc, #168]	; (800dc2c <tcp_receive+0x5e4>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	440b      	add	r3, r1
 800db88:	1ad3      	subs	r3, r2, r3
 800db8a:	3301      	adds	r3, #1
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	f300 8081 	bgt.w	800dc94 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800db92:	4b27      	ldr	r3, [pc, #156]	; (800dc30 <tcp_receive+0x5e8>)
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db9c:	4b23      	ldr	r3, [pc, #140]	; (800dc2c <tcp_receive+0x5e4>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800dba4:	4b22      	ldr	r3, [pc, #136]	; (800dc30 <tcp_receive+0x5e8>)
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d106      	bne.n	800dbba <tcp_receive+0x572>
 800dbac:	4b21      	ldr	r3, [pc, #132]	; (800dc34 <tcp_receive+0x5ec>)
 800dbae:	f240 5294 	movw	r2, #1428	; 0x594
 800dbb2:	4921      	ldr	r1, [pc, #132]	; (800dc38 <tcp_receive+0x5f0>)
 800dbb4:	4821      	ldr	r0, [pc, #132]	; (800dc3c <tcp_receive+0x5f4>)
 800dbb6:	f007 fcd3 	bl	8015560 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800dbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbbc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d906      	bls.n	800dbd2 <tcp_receive+0x58a>
 800dbc4:	4b1b      	ldr	r3, [pc, #108]	; (800dc34 <tcp_receive+0x5ec>)
 800dbc6:	f240 5295 	movw	r2, #1429	; 0x595
 800dbca:	491d      	ldr	r1, [pc, #116]	; (800dc40 <tcp_receive+0x5f8>)
 800dbcc:	481b      	ldr	r0, [pc, #108]	; (800dc3c <tcp_receive+0x5f4>)
 800dbce:	f007 fcc7 	bl	8015560 <iprintf>
      off = (u16_t)off32;
 800dbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800dbd8:	4b15      	ldr	r3, [pc, #84]	; (800dc30 <tcp_receive+0x5e8>)
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	891b      	ldrh	r3, [r3, #8]
 800dbde:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d906      	bls.n	800dbf4 <tcp_receive+0x5ac>
 800dbe6:	4b13      	ldr	r3, [pc, #76]	; (800dc34 <tcp_receive+0x5ec>)
 800dbe8:	f240 5297 	movw	r2, #1431	; 0x597
 800dbec:	4915      	ldr	r1, [pc, #84]	; (800dc44 <tcp_receive+0x5fc>)
 800dbee:	4813      	ldr	r0, [pc, #76]	; (800dc3c <tcp_receive+0x5f4>)
 800dbf0:	f007 fcb6 	bl	8015560 <iprintf>
      inseg.len -= off;
 800dbf4:	4b0e      	ldr	r3, [pc, #56]	; (800dc30 <tcp_receive+0x5e8>)
 800dbf6:	891a      	ldrh	r2, [r3, #8]
 800dbf8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dbfc:	1ad3      	subs	r3, r2, r3
 800dbfe:	b29a      	uxth	r2, r3
 800dc00:	4b0b      	ldr	r3, [pc, #44]	; (800dc30 <tcp_receive+0x5e8>)
 800dc02:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800dc04:	4b0a      	ldr	r3, [pc, #40]	; (800dc30 <tcp_receive+0x5e8>)
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	891a      	ldrh	r2, [r3, #8]
 800dc0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dc0e:	1ad3      	subs	r3, r2, r3
 800dc10:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800dc12:	e029      	b.n	800dc68 <tcp_receive+0x620>
 800dc14:	0801a35c 	.word	0x0801a35c
 800dc18:	0801a364 	.word	0x0801a364
 800dc1c:	20000400 	.word	0x20000400
 800dc20:	200003fc 	.word	0x200003fc
 800dc24:	20006a24 	.word	0x20006a24
 800dc28:	20000402 	.word	0x20000402
 800dc2c:	200003f8 	.word	0x200003f8
 800dc30:	200003d8 	.word	0x200003d8
 800dc34:	08019ff4 	.word	0x08019ff4
 800dc38:	0801a36c 	.word	0x0801a36c
 800dc3c:	0801a040 	.word	0x0801a040
 800dc40:	0801a37c 	.word	0x0801a37c
 800dc44:	0801a38c 	.word	0x0801a38c
        off -= p->len;
 800dc48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc4a:	895b      	ldrh	r3, [r3, #10]
 800dc4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dc50:	1ad3      	subs	r3, r2, r3
 800dc52:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800dc56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc58:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dc5a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800dc5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc5e:	2200      	movs	r2, #0
 800dc60:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800dc62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800dc68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc6a:	895b      	ldrh	r3, [r3, #10]
 800dc6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d8e9      	bhi.n	800dc48 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800dc74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dc78:	4619      	mov	r1, r3
 800dc7a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dc7c:	f7fc fb70 	bl	800a360 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc84:	4a91      	ldr	r2, [pc, #580]	; (800decc <tcp_receive+0x884>)
 800dc86:	6013      	str	r3, [r2, #0]
 800dc88:	4b91      	ldr	r3, [pc, #580]	; (800ded0 <tcp_receive+0x888>)
 800dc8a:	68db      	ldr	r3, [r3, #12]
 800dc8c:	4a8f      	ldr	r2, [pc, #572]	; (800decc <tcp_receive+0x884>)
 800dc8e:	6812      	ldr	r2, [r2, #0]
 800dc90:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800dc92:	e00d      	b.n	800dcb0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800dc94:	4b8d      	ldr	r3, [pc, #564]	; (800decc <tcp_receive+0x884>)
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc9c:	1ad3      	subs	r3, r2, r3
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	da06      	bge.n	800dcb0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	8b5b      	ldrh	r3, [r3, #26]
 800dca6:	f043 0302 	orr.w	r3, r3, #2
 800dcaa:	b29a      	uxth	r2, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dcb0:	4b86      	ldr	r3, [pc, #536]	; (800decc <tcp_receive+0x884>)
 800dcb2:	681a      	ldr	r2, [r3, #0]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb8:	1ad3      	subs	r3, r2, r3
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	f2c0 842a 	blt.w	800e514 <tcp_receive+0xecc>
 800dcc0:	4b82      	ldr	r3, [pc, #520]	; (800decc <tcp_receive+0x884>)
 800dcc2:	681a      	ldr	r2, [r3, #0]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc8:	6879      	ldr	r1, [r7, #4]
 800dcca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dccc:	440b      	add	r3, r1
 800dcce:	1ad3      	subs	r3, r2, r3
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	f300 841e 	bgt.w	800e514 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dcdc:	4b7b      	ldr	r3, [pc, #492]	; (800decc <tcp_receive+0x884>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	429a      	cmp	r2, r3
 800dce2:	f040 829a 	bne.w	800e21a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800dce6:	4b7a      	ldr	r3, [pc, #488]	; (800ded0 <tcp_receive+0x888>)
 800dce8:	891c      	ldrh	r4, [r3, #8]
 800dcea:	4b79      	ldr	r3, [pc, #484]	; (800ded0 <tcp_receive+0x888>)
 800dcec:	68db      	ldr	r3, [r3, #12]
 800dcee:	899b      	ldrh	r3, [r3, #12]
 800dcf0:	b29b      	uxth	r3, r3
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f7fb f91e 	bl	8008f34 <lwip_htons>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	f003 0303 	and.w	r3, r3, #3
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d001      	beq.n	800dd08 <tcp_receive+0x6c0>
 800dd04:	2301      	movs	r3, #1
 800dd06:	e000      	b.n	800dd0a <tcp_receive+0x6c2>
 800dd08:	2300      	movs	r3, #0
 800dd0a:	4423      	add	r3, r4
 800dd0c:	b29a      	uxth	r2, r3
 800dd0e:	4b71      	ldr	r3, [pc, #452]	; (800ded4 <tcp_receive+0x88c>)
 800dd10:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dd16:	4b6f      	ldr	r3, [pc, #444]	; (800ded4 <tcp_receive+0x88c>)
 800dd18:	881b      	ldrh	r3, [r3, #0]
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	d275      	bcs.n	800de0a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dd1e:	4b6c      	ldr	r3, [pc, #432]	; (800ded0 <tcp_receive+0x888>)
 800dd20:	68db      	ldr	r3, [r3, #12]
 800dd22:	899b      	ldrh	r3, [r3, #12]
 800dd24:	b29b      	uxth	r3, r3
 800dd26:	4618      	mov	r0, r3
 800dd28:	f7fb f904 	bl	8008f34 <lwip_htons>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	f003 0301 	and.w	r3, r3, #1
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d01f      	beq.n	800dd78 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800dd38:	4b65      	ldr	r3, [pc, #404]	; (800ded0 <tcp_receive+0x888>)
 800dd3a:	68db      	ldr	r3, [r3, #12]
 800dd3c:	899b      	ldrh	r3, [r3, #12]
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	b21b      	sxth	r3, r3
 800dd42:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dd46:	b21c      	sxth	r4, r3
 800dd48:	4b61      	ldr	r3, [pc, #388]	; (800ded0 <tcp_receive+0x888>)
 800dd4a:	68db      	ldr	r3, [r3, #12]
 800dd4c:	899b      	ldrh	r3, [r3, #12]
 800dd4e:	b29b      	uxth	r3, r3
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7fb f8ef 	bl	8008f34 <lwip_htons>
 800dd56:	4603      	mov	r3, r0
 800dd58:	b2db      	uxtb	r3, r3
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800dd60:	b29b      	uxth	r3, r3
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7fb f8e6 	bl	8008f34 <lwip_htons>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	b21b      	sxth	r3, r3
 800dd6c:	4323      	orrs	r3, r4
 800dd6e:	b21a      	sxth	r2, r3
 800dd70:	4b57      	ldr	r3, [pc, #348]	; (800ded0 <tcp_receive+0x888>)
 800dd72:	68db      	ldr	r3, [r3, #12]
 800dd74:	b292      	uxth	r2, r2
 800dd76:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dd7c:	4b54      	ldr	r3, [pc, #336]	; (800ded0 <tcp_receive+0x888>)
 800dd7e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800dd80:	4b53      	ldr	r3, [pc, #332]	; (800ded0 <tcp_receive+0x888>)
 800dd82:	68db      	ldr	r3, [r3, #12]
 800dd84:	899b      	ldrh	r3, [r3, #12]
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7fb f8d3 	bl	8008f34 <lwip_htons>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	b2db      	uxtb	r3, r3
 800dd92:	f003 0302 	and.w	r3, r3, #2
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d005      	beq.n	800dda6 <tcp_receive+0x75e>
            inseg.len -= 1;
 800dd9a:	4b4d      	ldr	r3, [pc, #308]	; (800ded0 <tcp_receive+0x888>)
 800dd9c:	891b      	ldrh	r3, [r3, #8]
 800dd9e:	3b01      	subs	r3, #1
 800dda0:	b29a      	uxth	r2, r3
 800dda2:	4b4b      	ldr	r3, [pc, #300]	; (800ded0 <tcp_receive+0x888>)
 800dda4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800dda6:	4b4a      	ldr	r3, [pc, #296]	; (800ded0 <tcp_receive+0x888>)
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	4a49      	ldr	r2, [pc, #292]	; (800ded0 <tcp_receive+0x888>)
 800ddac:	8912      	ldrh	r2, [r2, #8]
 800ddae:	4611      	mov	r1, r2
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7fc f9d5 	bl	800a160 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ddb6:	4b46      	ldr	r3, [pc, #280]	; (800ded0 <tcp_receive+0x888>)
 800ddb8:	891c      	ldrh	r4, [r3, #8]
 800ddba:	4b45      	ldr	r3, [pc, #276]	; (800ded0 <tcp_receive+0x888>)
 800ddbc:	68db      	ldr	r3, [r3, #12]
 800ddbe:	899b      	ldrh	r3, [r3, #12]
 800ddc0:	b29b      	uxth	r3, r3
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7fb f8b6 	bl	8008f34 <lwip_htons>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	b2db      	uxtb	r3, r3
 800ddcc:	f003 0303 	and.w	r3, r3, #3
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d001      	beq.n	800ddd8 <tcp_receive+0x790>
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	e000      	b.n	800ddda <tcp_receive+0x792>
 800ddd8:	2300      	movs	r3, #0
 800ddda:	4423      	add	r3, r4
 800dddc:	b29a      	uxth	r2, r3
 800ddde:	4b3d      	ldr	r3, [pc, #244]	; (800ded4 <tcp_receive+0x88c>)
 800dde0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800dde2:	4b3c      	ldr	r3, [pc, #240]	; (800ded4 <tcp_receive+0x88c>)
 800dde4:	881b      	ldrh	r3, [r3, #0]
 800dde6:	461a      	mov	r2, r3
 800dde8:	4b38      	ldr	r3, [pc, #224]	; (800decc <tcp_receive+0x884>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	441a      	add	r2, r3
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddf2:	6879      	ldr	r1, [r7, #4]
 800ddf4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ddf6:	440b      	add	r3, r1
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d006      	beq.n	800de0a <tcp_receive+0x7c2>
 800ddfc:	4b36      	ldr	r3, [pc, #216]	; (800ded8 <tcp_receive+0x890>)
 800ddfe:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800de02:	4936      	ldr	r1, [pc, #216]	; (800dedc <tcp_receive+0x894>)
 800de04:	4836      	ldr	r0, [pc, #216]	; (800dee0 <tcp_receive+0x898>)
 800de06:	f007 fbab 	bl	8015560 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de0e:	2b00      	cmp	r3, #0
 800de10:	f000 80e7 	beq.w	800dfe2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800de14:	4b2e      	ldr	r3, [pc, #184]	; (800ded0 <tcp_receive+0x888>)
 800de16:	68db      	ldr	r3, [r3, #12]
 800de18:	899b      	ldrh	r3, [r3, #12]
 800de1a:	b29b      	uxth	r3, r3
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7fb f889 	bl	8008f34 <lwip_htons>
 800de22:	4603      	mov	r3, r0
 800de24:	b2db      	uxtb	r3, r3
 800de26:	f003 0301 	and.w	r3, r3, #1
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d010      	beq.n	800de50 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800de2e:	e00a      	b.n	800de46 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de34:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de3a:	681a      	ldr	r2, [r3, #0]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800de40:	68f8      	ldr	r0, [r7, #12]
 800de42:	f7fd fd96 	bl	800b972 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d1f0      	bne.n	800de30 <tcp_receive+0x7e8>
 800de4e:	e0c8      	b.n	800dfe2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de54:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800de56:	e052      	b.n	800defe <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800de58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de5a:	68db      	ldr	r3, [r3, #12]
 800de5c:	899b      	ldrh	r3, [r3, #12]
 800de5e:	b29b      	uxth	r3, r3
 800de60:	4618      	mov	r0, r3
 800de62:	f7fb f867 	bl	8008f34 <lwip_htons>
 800de66:	4603      	mov	r3, r0
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	f003 0301 	and.w	r3, r3, #1
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d03d      	beq.n	800deee <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800de72:	4b17      	ldr	r3, [pc, #92]	; (800ded0 <tcp_receive+0x888>)
 800de74:	68db      	ldr	r3, [r3, #12]
 800de76:	899b      	ldrh	r3, [r3, #12]
 800de78:	b29b      	uxth	r3, r3
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7fb f85a 	bl	8008f34 <lwip_htons>
 800de80:	4603      	mov	r3, r0
 800de82:	b2db      	uxtb	r3, r3
 800de84:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d130      	bne.n	800deee <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800de8c:	4b10      	ldr	r3, [pc, #64]	; (800ded0 <tcp_receive+0x888>)
 800de8e:	68db      	ldr	r3, [r3, #12]
 800de90:	899b      	ldrh	r3, [r3, #12]
 800de92:	b29c      	uxth	r4, r3
 800de94:	2001      	movs	r0, #1
 800de96:	f7fb f84d 	bl	8008f34 <lwip_htons>
 800de9a:	4603      	mov	r3, r0
 800de9c:	461a      	mov	r2, r3
 800de9e:	4b0c      	ldr	r3, [pc, #48]	; (800ded0 <tcp_receive+0x888>)
 800dea0:	68db      	ldr	r3, [r3, #12]
 800dea2:	4322      	orrs	r2, r4
 800dea4:	b292      	uxth	r2, r2
 800dea6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800dea8:	4b09      	ldr	r3, [pc, #36]	; (800ded0 <tcp_receive+0x888>)
 800deaa:	891c      	ldrh	r4, [r3, #8]
 800deac:	4b08      	ldr	r3, [pc, #32]	; (800ded0 <tcp_receive+0x888>)
 800deae:	68db      	ldr	r3, [r3, #12]
 800deb0:	899b      	ldrh	r3, [r3, #12]
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7fb f83d 	bl	8008f34 <lwip_htons>
 800deba:	4603      	mov	r3, r0
 800debc:	b2db      	uxtb	r3, r3
 800debe:	f003 0303 	and.w	r3, r3, #3
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d00e      	beq.n	800dee4 <tcp_receive+0x89c>
 800dec6:	2301      	movs	r3, #1
 800dec8:	e00d      	b.n	800dee6 <tcp_receive+0x89e>
 800deca:	bf00      	nop
 800decc:	200003f8 	.word	0x200003f8
 800ded0:	200003d8 	.word	0x200003d8
 800ded4:	20000402 	.word	0x20000402
 800ded8:	08019ff4 	.word	0x08019ff4
 800dedc:	0801a39c 	.word	0x0801a39c
 800dee0:	0801a040 	.word	0x0801a040
 800dee4:	2300      	movs	r3, #0
 800dee6:	4423      	add	r3, r4
 800dee8:	b29a      	uxth	r2, r3
 800deea:	4b98      	ldr	r3, [pc, #608]	; (800e14c <tcp_receive+0xb04>)
 800deec:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800deee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800def0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800def2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800def8:	6938      	ldr	r0, [r7, #16]
 800defa:	f7fd fd3a 	bl	800b972 <tcp_seg_free>
            while (next &&
 800defe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df00:	2b00      	cmp	r3, #0
 800df02:	d00e      	beq.n	800df22 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800df04:	4b91      	ldr	r3, [pc, #580]	; (800e14c <tcp_receive+0xb04>)
 800df06:	881b      	ldrh	r3, [r3, #0]
 800df08:	461a      	mov	r2, r3
 800df0a:	4b91      	ldr	r3, [pc, #580]	; (800e150 <tcp_receive+0xb08>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	441a      	add	r2, r3
 800df10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df12:	68db      	ldr	r3, [r3, #12]
 800df14:	685b      	ldr	r3, [r3, #4]
 800df16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800df18:	8909      	ldrh	r1, [r1, #8]
 800df1a:	440b      	add	r3, r1
 800df1c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800df1e:	2b00      	cmp	r3, #0
 800df20:	da9a      	bge.n	800de58 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800df22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df24:	2b00      	cmp	r3, #0
 800df26:	d059      	beq.n	800dfdc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800df28:	4b88      	ldr	r3, [pc, #544]	; (800e14c <tcp_receive+0xb04>)
 800df2a:	881b      	ldrh	r3, [r3, #0]
 800df2c:	461a      	mov	r2, r3
 800df2e:	4b88      	ldr	r3, [pc, #544]	; (800e150 <tcp_receive+0xb08>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	441a      	add	r2, r3
 800df34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df36:	68db      	ldr	r3, [r3, #12]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	dd4d      	ble.n	800dfdc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800df40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	685b      	ldr	r3, [r3, #4]
 800df46:	b29a      	uxth	r2, r3
 800df48:	4b81      	ldr	r3, [pc, #516]	; (800e150 <tcp_receive+0xb08>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	b29b      	uxth	r3, r3
 800df4e:	1ad3      	subs	r3, r2, r3
 800df50:	b29a      	uxth	r2, r3
 800df52:	4b80      	ldr	r3, [pc, #512]	; (800e154 <tcp_receive+0xb0c>)
 800df54:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800df56:	4b7f      	ldr	r3, [pc, #508]	; (800e154 <tcp_receive+0xb0c>)
 800df58:	68db      	ldr	r3, [r3, #12]
 800df5a:	899b      	ldrh	r3, [r3, #12]
 800df5c:	b29b      	uxth	r3, r3
 800df5e:	4618      	mov	r0, r3
 800df60:	f7fa ffe8 	bl	8008f34 <lwip_htons>
 800df64:	4603      	mov	r3, r0
 800df66:	b2db      	uxtb	r3, r3
 800df68:	f003 0302 	and.w	r3, r3, #2
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d005      	beq.n	800df7c <tcp_receive+0x934>
                inseg.len -= 1;
 800df70:	4b78      	ldr	r3, [pc, #480]	; (800e154 <tcp_receive+0xb0c>)
 800df72:	891b      	ldrh	r3, [r3, #8]
 800df74:	3b01      	subs	r3, #1
 800df76:	b29a      	uxth	r2, r3
 800df78:	4b76      	ldr	r3, [pc, #472]	; (800e154 <tcp_receive+0xb0c>)
 800df7a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800df7c:	4b75      	ldr	r3, [pc, #468]	; (800e154 <tcp_receive+0xb0c>)
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	4a74      	ldr	r2, [pc, #464]	; (800e154 <tcp_receive+0xb0c>)
 800df82:	8912      	ldrh	r2, [r2, #8]
 800df84:	4611      	mov	r1, r2
 800df86:	4618      	mov	r0, r3
 800df88:	f7fc f8ea 	bl	800a160 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800df8c:	4b71      	ldr	r3, [pc, #452]	; (800e154 <tcp_receive+0xb0c>)
 800df8e:	891c      	ldrh	r4, [r3, #8]
 800df90:	4b70      	ldr	r3, [pc, #448]	; (800e154 <tcp_receive+0xb0c>)
 800df92:	68db      	ldr	r3, [r3, #12]
 800df94:	899b      	ldrh	r3, [r3, #12]
 800df96:	b29b      	uxth	r3, r3
 800df98:	4618      	mov	r0, r3
 800df9a:	f7fa ffcb 	bl	8008f34 <lwip_htons>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	b2db      	uxtb	r3, r3
 800dfa2:	f003 0303 	and.w	r3, r3, #3
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d001      	beq.n	800dfae <tcp_receive+0x966>
 800dfaa:	2301      	movs	r3, #1
 800dfac:	e000      	b.n	800dfb0 <tcp_receive+0x968>
 800dfae:	2300      	movs	r3, #0
 800dfb0:	4423      	add	r3, r4
 800dfb2:	b29a      	uxth	r2, r3
 800dfb4:	4b65      	ldr	r3, [pc, #404]	; (800e14c <tcp_receive+0xb04>)
 800dfb6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800dfb8:	4b64      	ldr	r3, [pc, #400]	; (800e14c <tcp_receive+0xb04>)
 800dfba:	881b      	ldrh	r3, [r3, #0]
 800dfbc:	461a      	mov	r2, r3
 800dfbe:	4b64      	ldr	r3, [pc, #400]	; (800e150 <tcp_receive+0xb08>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	441a      	add	r2, r3
 800dfc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfc6:	68db      	ldr	r3, [r3, #12]
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d006      	beq.n	800dfdc <tcp_receive+0x994>
 800dfce:	4b62      	ldr	r3, [pc, #392]	; (800e158 <tcp_receive+0xb10>)
 800dfd0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800dfd4:	4961      	ldr	r1, [pc, #388]	; (800e15c <tcp_receive+0xb14>)
 800dfd6:	4862      	ldr	r0, [pc, #392]	; (800e160 <tcp_receive+0xb18>)
 800dfd8:	f007 fac2 	bl	8015560 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dfe0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800dfe2:	4b5a      	ldr	r3, [pc, #360]	; (800e14c <tcp_receive+0xb04>)
 800dfe4:	881b      	ldrh	r3, [r3, #0]
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	4b59      	ldr	r3, [pc, #356]	; (800e150 <tcp_receive+0xb08>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	441a      	add	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dff6:	4b55      	ldr	r3, [pc, #340]	; (800e14c <tcp_receive+0xb04>)
 800dff8:	881b      	ldrh	r3, [r3, #0]
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d206      	bcs.n	800e00c <tcp_receive+0x9c4>
 800dffe:	4b56      	ldr	r3, [pc, #344]	; (800e158 <tcp_receive+0xb10>)
 800e000:	f240 6207 	movw	r2, #1543	; 0x607
 800e004:	4957      	ldr	r1, [pc, #348]	; (800e164 <tcp_receive+0xb1c>)
 800e006:	4856      	ldr	r0, [pc, #344]	; (800e160 <tcp_receive+0xb18>)
 800e008:	f007 faaa 	bl	8015560 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e010:	4b4e      	ldr	r3, [pc, #312]	; (800e14c <tcp_receive+0xb04>)
 800e012:	881b      	ldrh	r3, [r3, #0]
 800e014:	1ad3      	subs	r3, r2, r3
 800e016:	b29a      	uxth	r2, r3
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f7fc ffc9 	bl	800afb4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e022:	4b4c      	ldr	r3, [pc, #304]	; (800e154 <tcp_receive+0xb0c>)
 800e024:	685b      	ldr	r3, [r3, #4]
 800e026:	891b      	ldrh	r3, [r3, #8]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d006      	beq.n	800e03a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800e02c:	4b49      	ldr	r3, [pc, #292]	; (800e154 <tcp_receive+0xb0c>)
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	4a4d      	ldr	r2, [pc, #308]	; (800e168 <tcp_receive+0xb20>)
 800e032:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e034:	4b47      	ldr	r3, [pc, #284]	; (800e154 <tcp_receive+0xb0c>)
 800e036:	2200      	movs	r2, #0
 800e038:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e03a:	4b46      	ldr	r3, [pc, #280]	; (800e154 <tcp_receive+0xb0c>)
 800e03c:	68db      	ldr	r3, [r3, #12]
 800e03e:	899b      	ldrh	r3, [r3, #12]
 800e040:	b29b      	uxth	r3, r3
 800e042:	4618      	mov	r0, r3
 800e044:	f7fa ff76 	bl	8008f34 <lwip_htons>
 800e048:	4603      	mov	r3, r0
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	f003 0301 	and.w	r3, r3, #1
 800e050:	2b00      	cmp	r3, #0
 800e052:	f000 80b8 	beq.w	800e1c6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e056:	4b45      	ldr	r3, [pc, #276]	; (800e16c <tcp_receive+0xb24>)
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	f043 0320 	orr.w	r3, r3, #32
 800e05e:	b2da      	uxtb	r2, r3
 800e060:	4b42      	ldr	r3, [pc, #264]	; (800e16c <tcp_receive+0xb24>)
 800e062:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e064:	e0af      	b.n	800e1c6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e06a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e070:	68db      	ldr	r3, [r3, #12]
 800e072:	685b      	ldr	r3, [r3, #4]
 800e074:	4a36      	ldr	r2, [pc, #216]	; (800e150 <tcp_receive+0xb08>)
 800e076:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	891b      	ldrh	r3, [r3, #8]
 800e07c:	461c      	mov	r4, r3
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	68db      	ldr	r3, [r3, #12]
 800e082:	899b      	ldrh	r3, [r3, #12]
 800e084:	b29b      	uxth	r3, r3
 800e086:	4618      	mov	r0, r3
 800e088:	f7fa ff54 	bl	8008f34 <lwip_htons>
 800e08c:	4603      	mov	r3, r0
 800e08e:	b2db      	uxtb	r3, r3
 800e090:	f003 0303 	and.w	r3, r3, #3
 800e094:	2b00      	cmp	r3, #0
 800e096:	d001      	beq.n	800e09c <tcp_receive+0xa54>
 800e098:	2301      	movs	r3, #1
 800e09a:	e000      	b.n	800e09e <tcp_receive+0xa56>
 800e09c:	2300      	movs	r3, #0
 800e09e:	191a      	adds	r2, r3, r4
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a4:	441a      	add	r2, r3
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0ae:	461c      	mov	r4, r3
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	891b      	ldrh	r3, [r3, #8]
 800e0b4:	461d      	mov	r5, r3
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	68db      	ldr	r3, [r3, #12]
 800e0ba:	899b      	ldrh	r3, [r3, #12]
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7fa ff38 	bl	8008f34 <lwip_htons>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	f003 0303 	and.w	r3, r3, #3
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d001      	beq.n	800e0d4 <tcp_receive+0xa8c>
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	e000      	b.n	800e0d6 <tcp_receive+0xa8e>
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	442b      	add	r3, r5
 800e0d8:	429c      	cmp	r4, r3
 800e0da:	d206      	bcs.n	800e0ea <tcp_receive+0xaa2>
 800e0dc:	4b1e      	ldr	r3, [pc, #120]	; (800e158 <tcp_receive+0xb10>)
 800e0de:	f240 622b 	movw	r2, #1579	; 0x62b
 800e0e2:	4923      	ldr	r1, [pc, #140]	; (800e170 <tcp_receive+0xb28>)
 800e0e4:	481e      	ldr	r0, [pc, #120]	; (800e160 <tcp_receive+0xb18>)
 800e0e6:	f007 fa3b 	bl	8015560 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	891b      	ldrh	r3, [r3, #8]
 800e0ee:	461c      	mov	r4, r3
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	68db      	ldr	r3, [r3, #12]
 800e0f4:	899b      	ldrh	r3, [r3, #12]
 800e0f6:	b29b      	uxth	r3, r3
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7fa ff1b 	bl	8008f34 <lwip_htons>
 800e0fe:	4603      	mov	r3, r0
 800e100:	b2db      	uxtb	r3, r3
 800e102:	f003 0303 	and.w	r3, r3, #3
 800e106:	2b00      	cmp	r3, #0
 800e108:	d001      	beq.n	800e10e <tcp_receive+0xac6>
 800e10a:	2301      	movs	r3, #1
 800e10c:	e000      	b.n	800e110 <tcp_receive+0xac8>
 800e10e:	2300      	movs	r3, #0
 800e110:	1919      	adds	r1, r3, r4
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e116:	b28b      	uxth	r3, r1
 800e118:	1ad3      	subs	r3, r2, r3
 800e11a:	b29a      	uxth	r2, r3
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f7fc ff47 	bl	800afb4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	891b      	ldrh	r3, [r3, #8]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d028      	beq.n	800e182 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e130:	4b0d      	ldr	r3, [pc, #52]	; (800e168 <tcp_receive+0xb20>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d01d      	beq.n	800e174 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800e138:	4b0b      	ldr	r3, [pc, #44]	; (800e168 <tcp_receive+0xb20>)
 800e13a:	681a      	ldr	r2, [r3, #0]
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	4619      	mov	r1, r3
 800e142:	4610      	mov	r0, r2
 800e144:	f7fc fa54 	bl	800a5f0 <pbuf_cat>
 800e148:	e018      	b.n	800e17c <tcp_receive+0xb34>
 800e14a:	bf00      	nop
 800e14c:	20000402 	.word	0x20000402
 800e150:	200003f8 	.word	0x200003f8
 800e154:	200003d8 	.word	0x200003d8
 800e158:	08019ff4 	.word	0x08019ff4
 800e15c:	0801a3d4 	.word	0x0801a3d4
 800e160:	0801a040 	.word	0x0801a040
 800e164:	0801a410 	.word	0x0801a410
 800e168:	20000408 	.word	0x20000408
 800e16c:	20000405 	.word	0x20000405
 800e170:	0801a430 	.word	0x0801a430
            } else {
              recv_data = cseg->p;
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	4a70      	ldr	r2, [pc, #448]	; (800e33c <tcp_receive+0xcf4>)
 800e17a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	2200      	movs	r2, #0
 800e180:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	68db      	ldr	r3, [r3, #12]
 800e186:	899b      	ldrh	r3, [r3, #12]
 800e188:	b29b      	uxth	r3, r3
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7fa fed2 	bl	8008f34 <lwip_htons>
 800e190:	4603      	mov	r3, r0
 800e192:	b2db      	uxtb	r3, r3
 800e194:	f003 0301 	and.w	r3, r3, #1
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d00d      	beq.n	800e1b8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e19c:	4b68      	ldr	r3, [pc, #416]	; (800e340 <tcp_receive+0xcf8>)
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	f043 0320 	orr.w	r3, r3, #32
 800e1a4:	b2da      	uxtb	r2, r3
 800e1a6:	4b66      	ldr	r3, [pc, #408]	; (800e340 <tcp_receive+0xcf8>)
 800e1a8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	7d1b      	ldrb	r3, [r3, #20]
 800e1ae:	2b04      	cmp	r3, #4
 800e1b0:	d102      	bne.n	800e1b8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2207      	movs	r2, #7
 800e1b6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e1c0:	68b8      	ldr	r0, [r7, #8]
 800e1c2:	f7fd fbd6 	bl	800b972 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d008      	beq.n	800e1e0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	685a      	ldr	r2, [r3, #4]
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	f43f af43 	beq.w	800e066 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	8b5b      	ldrh	r3, [r3, #26]
 800e1e4:	f003 0301 	and.w	r3, r3, #1
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d00e      	beq.n	800e20a <tcp_receive+0xbc2>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	8b5b      	ldrh	r3, [r3, #26]
 800e1f0:	f023 0301 	bic.w	r3, r3, #1
 800e1f4:	b29a      	uxth	r2, r3
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	835a      	strh	r2, [r3, #26]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	8b5b      	ldrh	r3, [r3, #26]
 800e1fe:	f043 0302 	orr.w	r3, r3, #2
 800e202:	b29a      	uxth	r2, r3
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e208:	e188      	b.n	800e51c <tcp_receive+0xed4>
        tcp_ack(pcb);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	8b5b      	ldrh	r3, [r3, #26]
 800e20e:	f043 0301 	orr.w	r3, r3, #1
 800e212:	b29a      	uxth	r2, r3
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e218:	e180      	b.n	800e51c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d106      	bne.n	800e230 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e222:	4848      	ldr	r0, [pc, #288]	; (800e344 <tcp_receive+0xcfc>)
 800e224:	f7fd fbbe 	bl	800b9a4 <tcp_seg_copy>
 800e228:	4602      	mov	r2, r0
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	675a      	str	r2, [r3, #116]	; 0x74
 800e22e:	e16d      	b.n	800e50c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e230:	2300      	movs	r3, #0
 800e232:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e238:	63bb      	str	r3, [r7, #56]	; 0x38
 800e23a:	e157      	b.n	800e4ec <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800e23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23e:	68db      	ldr	r3, [r3, #12]
 800e240:	685a      	ldr	r2, [r3, #4]
 800e242:	4b41      	ldr	r3, [pc, #260]	; (800e348 <tcp_receive+0xd00>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	429a      	cmp	r2, r3
 800e248:	d11d      	bne.n	800e286 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e24a:	4b3e      	ldr	r3, [pc, #248]	; (800e344 <tcp_receive+0xcfc>)
 800e24c:	891a      	ldrh	r2, [r3, #8]
 800e24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e250:	891b      	ldrh	r3, [r3, #8]
 800e252:	429a      	cmp	r2, r3
 800e254:	f240 814f 	bls.w	800e4f6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e258:	483a      	ldr	r0, [pc, #232]	; (800e344 <tcp_receive+0xcfc>)
 800e25a:	f7fd fba3 	bl	800b9a4 <tcp_seg_copy>
 800e25e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	2b00      	cmp	r3, #0
 800e264:	f000 8149 	beq.w	800e4fa <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800e268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d003      	beq.n	800e276 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800e26e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e270:	697a      	ldr	r2, [r7, #20]
 800e272:	601a      	str	r2, [r3, #0]
 800e274:	e002      	b.n	800e27c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	697a      	ldr	r2, [r7, #20]
 800e27a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e27c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e27e:	6978      	ldr	r0, [r7, #20]
 800e280:	f7ff f8de 	bl	800d440 <tcp_oos_insert_segment>
                }
                break;
 800e284:	e139      	b.n	800e4fa <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d117      	bne.n	800e2bc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e28c:	4b2e      	ldr	r3, [pc, #184]	; (800e348 <tcp_receive+0xd00>)
 800e28e:	681a      	ldr	r2, [r3, #0]
 800e290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e292:	68db      	ldr	r3, [r3, #12]
 800e294:	685b      	ldr	r3, [r3, #4]
 800e296:	1ad3      	subs	r3, r2, r3
 800e298:	2b00      	cmp	r3, #0
 800e29a:	da57      	bge.n	800e34c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e29c:	4829      	ldr	r0, [pc, #164]	; (800e344 <tcp_receive+0xcfc>)
 800e29e:	f7fd fb81 	bl	800b9a4 <tcp_seg_copy>
 800e2a2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e2a4:	69bb      	ldr	r3, [r7, #24]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	f000 8129 	beq.w	800e4fe <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	69ba      	ldr	r2, [r7, #24]
 800e2b0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e2b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e2b4:	69b8      	ldr	r0, [r7, #24]
 800e2b6:	f7ff f8c3 	bl	800d440 <tcp_oos_insert_segment>
                  }
                  break;
 800e2ba:	e120      	b.n	800e4fe <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e2bc:	4b22      	ldr	r3, [pc, #136]	; (800e348 <tcp_receive+0xd00>)
 800e2be:	681a      	ldr	r2, [r3, #0]
 800e2c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2c2:	68db      	ldr	r3, [r3, #12]
 800e2c4:	685b      	ldr	r3, [r3, #4]
 800e2c6:	1ad3      	subs	r3, r2, r3
 800e2c8:	3b01      	subs	r3, #1
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	db3e      	blt.n	800e34c <tcp_receive+0xd04>
 800e2ce:	4b1e      	ldr	r3, [pc, #120]	; (800e348 <tcp_receive+0xd00>)
 800e2d0:	681a      	ldr	r2, [r3, #0]
 800e2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d4:	68db      	ldr	r3, [r3, #12]
 800e2d6:	685b      	ldr	r3, [r3, #4]
 800e2d8:	1ad3      	subs	r3, r2, r3
 800e2da:	3301      	adds	r3, #1
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	dc35      	bgt.n	800e34c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e2e0:	4818      	ldr	r0, [pc, #96]	; (800e344 <tcp_receive+0xcfc>)
 800e2e2:	f7fd fb5f 	bl	800b9a4 <tcp_seg_copy>
 800e2e6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e2e8:	69fb      	ldr	r3, [r7, #28]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	f000 8109 	beq.w	800e502 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2f2:	68db      	ldr	r3, [r3, #12]
 800e2f4:	685b      	ldr	r3, [r3, #4]
 800e2f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e2f8:	8912      	ldrh	r2, [r2, #8]
 800e2fa:	441a      	add	r2, r3
 800e2fc:	4b12      	ldr	r3, [pc, #72]	; (800e348 <tcp_receive+0xd00>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	1ad3      	subs	r3, r2, r3
 800e302:	2b00      	cmp	r3, #0
 800e304:	dd12      	ble.n	800e32c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e306:	4b10      	ldr	r3, [pc, #64]	; (800e348 <tcp_receive+0xd00>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	b29a      	uxth	r2, r3
 800e30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e30e:	68db      	ldr	r3, [r3, #12]
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	b29b      	uxth	r3, r3
 800e314:	1ad3      	subs	r3, r2, r3
 800e316:	b29a      	uxth	r2, r3
 800e318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e31a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e31c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e31e:	685a      	ldr	r2, [r3, #4]
 800e320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e322:	891b      	ldrh	r3, [r3, #8]
 800e324:	4619      	mov	r1, r3
 800e326:	4610      	mov	r0, r2
 800e328:	f7fb ff1a 	bl	800a160 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e32e:	69fa      	ldr	r2, [r7, #28]
 800e330:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e332:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e334:	69f8      	ldr	r0, [r7, #28]
 800e336:	f7ff f883 	bl	800d440 <tcp_oos_insert_segment>
                  }
                  break;
 800e33a:	e0e2      	b.n	800e502 <tcp_receive+0xeba>
 800e33c:	20000408 	.word	0x20000408
 800e340:	20000405 	.word	0x20000405
 800e344:	200003d8 	.word	0x200003d8
 800e348:	200003f8 	.word	0x200003f8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e34e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	2b00      	cmp	r3, #0
 800e356:	f040 80c6 	bne.w	800e4e6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e35a:	4b80      	ldr	r3, [pc, #512]	; (800e55c <tcp_receive+0xf14>)
 800e35c:	681a      	ldr	r2, [r3, #0]
 800e35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e360:	68db      	ldr	r3, [r3, #12]
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e366:	2b00      	cmp	r3, #0
 800e368:	f340 80bd 	ble.w	800e4e6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36e:	68db      	ldr	r3, [r3, #12]
 800e370:	899b      	ldrh	r3, [r3, #12]
 800e372:	b29b      	uxth	r3, r3
 800e374:	4618      	mov	r0, r3
 800e376:	f7fa fddd 	bl	8008f34 <lwip_htons>
 800e37a:	4603      	mov	r3, r0
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	f003 0301 	and.w	r3, r3, #1
 800e382:	2b00      	cmp	r3, #0
 800e384:	f040 80bf 	bne.w	800e506 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e388:	4875      	ldr	r0, [pc, #468]	; (800e560 <tcp_receive+0xf18>)
 800e38a:	f7fd fb0b 	bl	800b9a4 <tcp_seg_copy>
 800e38e:	4602      	mov	r2, r0
 800e390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e392:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	f000 80b6 	beq.w	800e50a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a0:	68db      	ldr	r3, [r3, #12]
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e3a6:	8912      	ldrh	r2, [r2, #8]
 800e3a8:	441a      	add	r2, r3
 800e3aa:	4b6c      	ldr	r3, [pc, #432]	; (800e55c <tcp_receive+0xf14>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	1ad3      	subs	r3, r2, r3
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	dd12      	ble.n	800e3da <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e3b4:	4b69      	ldr	r3, [pc, #420]	; (800e55c <tcp_receive+0xf14>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	b29a      	uxth	r2, r3
 800e3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3bc:	68db      	ldr	r3, [r3, #12]
 800e3be:	685b      	ldr	r3, [r3, #4]
 800e3c0:	b29b      	uxth	r3, r3
 800e3c2:	1ad3      	subs	r3, r2, r3
 800e3c4:	b29a      	uxth	r2, r3
 800e3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3cc:	685a      	ldr	r2, [r3, #4]
 800e3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d0:	891b      	ldrh	r3, [r3, #8]
 800e3d2:	4619      	mov	r1, r3
 800e3d4:	4610      	mov	r0, r2
 800e3d6:	f7fb fec3 	bl	800a160 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e3da:	4b62      	ldr	r3, [pc, #392]	; (800e564 <tcp_receive+0xf1c>)
 800e3dc:	881b      	ldrh	r3, [r3, #0]
 800e3de:	461a      	mov	r2, r3
 800e3e0:	4b5e      	ldr	r3, [pc, #376]	; (800e55c <tcp_receive+0xf14>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	441a      	add	r2, r3
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ea:	6879      	ldr	r1, [r7, #4]
 800e3ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e3ee:	440b      	add	r3, r1
 800e3f0:	1ad3      	subs	r3, r2, r3
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	f340 8089 	ble.w	800e50a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	68db      	ldr	r3, [r3, #12]
 800e3fe:	899b      	ldrh	r3, [r3, #12]
 800e400:	b29b      	uxth	r3, r3
 800e402:	4618      	mov	r0, r3
 800e404:	f7fa fd96 	bl	8008f34 <lwip_htons>
 800e408:	4603      	mov	r3, r0
 800e40a:	b2db      	uxtb	r3, r3
 800e40c:	f003 0301 	and.w	r3, r3, #1
 800e410:	2b00      	cmp	r3, #0
 800e412:	d022      	beq.n	800e45a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	68db      	ldr	r3, [r3, #12]
 800e41a:	899b      	ldrh	r3, [r3, #12]
 800e41c:	b29b      	uxth	r3, r3
 800e41e:	b21b      	sxth	r3, r3
 800e420:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e424:	b21c      	sxth	r4, r3
 800e426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	68db      	ldr	r3, [r3, #12]
 800e42c:	899b      	ldrh	r3, [r3, #12]
 800e42e:	b29b      	uxth	r3, r3
 800e430:	4618      	mov	r0, r3
 800e432:	f7fa fd7f 	bl	8008f34 <lwip_htons>
 800e436:	4603      	mov	r3, r0
 800e438:	b2db      	uxtb	r3, r3
 800e43a:	b29b      	uxth	r3, r3
 800e43c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e440:	b29b      	uxth	r3, r3
 800e442:	4618      	mov	r0, r3
 800e444:	f7fa fd76 	bl	8008f34 <lwip_htons>
 800e448:	4603      	mov	r3, r0
 800e44a:	b21b      	sxth	r3, r3
 800e44c:	4323      	orrs	r3, r4
 800e44e:	b21a      	sxth	r2, r3
 800e450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	68db      	ldr	r3, [r3, #12]
 800e456:	b292      	uxth	r2, r2
 800e458:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e45e:	b29a      	uxth	r2, r3
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e464:	4413      	add	r3, r2
 800e466:	b299      	uxth	r1, r3
 800e468:	4b3c      	ldr	r3, [pc, #240]	; (800e55c <tcp_receive+0xf14>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	b29a      	uxth	r2, r3
 800e46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	1a8a      	subs	r2, r1, r2
 800e474:	b292      	uxth	r2, r2
 800e476:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	685a      	ldr	r2, [r3, #4]
 800e47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	891b      	ldrh	r3, [r3, #8]
 800e484:	4619      	mov	r1, r3
 800e486:	4610      	mov	r0, r2
 800e488:	f7fb fe6a 	bl	800a160 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	891c      	ldrh	r4, [r3, #8]
 800e492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	68db      	ldr	r3, [r3, #12]
 800e498:	899b      	ldrh	r3, [r3, #12]
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	4618      	mov	r0, r3
 800e49e:	f7fa fd49 	bl	8008f34 <lwip_htons>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	b2db      	uxtb	r3, r3
 800e4a6:	f003 0303 	and.w	r3, r3, #3
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d001      	beq.n	800e4b2 <tcp_receive+0xe6a>
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	e000      	b.n	800e4b4 <tcp_receive+0xe6c>
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	4423      	add	r3, r4
 800e4b6:	b29a      	uxth	r2, r3
 800e4b8:	4b2a      	ldr	r3, [pc, #168]	; (800e564 <tcp_receive+0xf1c>)
 800e4ba:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e4bc:	4b29      	ldr	r3, [pc, #164]	; (800e564 <tcp_receive+0xf1c>)
 800e4be:	881b      	ldrh	r3, [r3, #0]
 800e4c0:	461a      	mov	r2, r3
 800e4c2:	4b26      	ldr	r3, [pc, #152]	; (800e55c <tcp_receive+0xf14>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	441a      	add	r2, r3
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4cc:	6879      	ldr	r1, [r7, #4]
 800e4ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e4d0:	440b      	add	r3, r1
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	d019      	beq.n	800e50a <tcp_receive+0xec2>
 800e4d6:	4b24      	ldr	r3, [pc, #144]	; (800e568 <tcp_receive+0xf20>)
 800e4d8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800e4dc:	4923      	ldr	r1, [pc, #140]	; (800e56c <tcp_receive+0xf24>)
 800e4de:	4824      	ldr	r0, [pc, #144]	; (800e570 <tcp_receive+0xf28>)
 800e4e0:	f007 f83e 	bl	8015560 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e4e4:	e011      	b.n	800e50a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800e4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	f47f aea4 	bne.w	800e23c <tcp_receive+0xbf4>
 800e4f4:	e00a      	b.n	800e50c <tcp_receive+0xec4>
                break;
 800e4f6:	bf00      	nop
 800e4f8:	e008      	b.n	800e50c <tcp_receive+0xec4>
                break;
 800e4fa:	bf00      	nop
 800e4fc:	e006      	b.n	800e50c <tcp_receive+0xec4>
                  break;
 800e4fe:	bf00      	nop
 800e500:	e004      	b.n	800e50c <tcp_receive+0xec4>
                  break;
 800e502:	bf00      	nop
 800e504:	e002      	b.n	800e50c <tcp_receive+0xec4>
                  break;
 800e506:	bf00      	nop
 800e508:	e000      	b.n	800e50c <tcp_receive+0xec4>
                break;
 800e50a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f001 fa31 	bl	800f974 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e512:	e003      	b.n	800e51c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f001 fa2d 	bl	800f974 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e51a:	e01a      	b.n	800e552 <tcp_receive+0xf0a>
 800e51c:	e019      	b.n	800e552 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e51e:	4b0f      	ldr	r3, [pc, #60]	; (800e55c <tcp_receive+0xf14>)
 800e520:	681a      	ldr	r2, [r3, #0]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e526:	1ad3      	subs	r3, r2, r3
 800e528:	2b00      	cmp	r3, #0
 800e52a:	db0a      	blt.n	800e542 <tcp_receive+0xefa>
 800e52c:	4b0b      	ldr	r3, [pc, #44]	; (800e55c <tcp_receive+0xf14>)
 800e52e:	681a      	ldr	r2, [r3, #0]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e534:	6879      	ldr	r1, [r7, #4]
 800e536:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e538:	440b      	add	r3, r1
 800e53a:	1ad3      	subs	r3, r2, r3
 800e53c:	3301      	adds	r3, #1
 800e53e:	2b00      	cmp	r3, #0
 800e540:	dd07      	ble.n	800e552 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	8b5b      	ldrh	r3, [r3, #26]
 800e546:	f043 0302 	orr.w	r3, r3, #2
 800e54a:	b29a      	uxth	r2, r3
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e550:	e7ff      	b.n	800e552 <tcp_receive+0xf0a>
 800e552:	bf00      	nop
 800e554:	3750      	adds	r7, #80	; 0x50
 800e556:	46bd      	mov	sp, r7
 800e558:	bdb0      	pop	{r4, r5, r7, pc}
 800e55a:	bf00      	nop
 800e55c:	200003f8 	.word	0x200003f8
 800e560:	200003d8 	.word	0x200003d8
 800e564:	20000402 	.word	0x20000402
 800e568:	08019ff4 	.word	0x08019ff4
 800e56c:	0801a39c 	.word	0x0801a39c
 800e570:	0801a040 	.word	0x0801a040

0800e574 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e574:	b480      	push	{r7}
 800e576:	b083      	sub	sp, #12
 800e578:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e57a:	4b15      	ldr	r3, [pc, #84]	; (800e5d0 <tcp_get_next_optbyte+0x5c>)
 800e57c:	881b      	ldrh	r3, [r3, #0]
 800e57e:	1c5a      	adds	r2, r3, #1
 800e580:	b291      	uxth	r1, r2
 800e582:	4a13      	ldr	r2, [pc, #76]	; (800e5d0 <tcp_get_next_optbyte+0x5c>)
 800e584:	8011      	strh	r1, [r2, #0]
 800e586:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e588:	4b12      	ldr	r3, [pc, #72]	; (800e5d4 <tcp_get_next_optbyte+0x60>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d004      	beq.n	800e59a <tcp_get_next_optbyte+0x26>
 800e590:	4b11      	ldr	r3, [pc, #68]	; (800e5d8 <tcp_get_next_optbyte+0x64>)
 800e592:	881b      	ldrh	r3, [r3, #0]
 800e594:	88fa      	ldrh	r2, [r7, #6]
 800e596:	429a      	cmp	r2, r3
 800e598:	d208      	bcs.n	800e5ac <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e59a:	4b10      	ldr	r3, [pc, #64]	; (800e5dc <tcp_get_next_optbyte+0x68>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	3314      	adds	r3, #20
 800e5a0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e5a2:	88fb      	ldrh	r3, [r7, #6]
 800e5a4:	683a      	ldr	r2, [r7, #0]
 800e5a6:	4413      	add	r3, r2
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	e00b      	b.n	800e5c4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e5ac:	88fb      	ldrh	r3, [r7, #6]
 800e5ae:	b2da      	uxtb	r2, r3
 800e5b0:	4b09      	ldr	r3, [pc, #36]	; (800e5d8 <tcp_get_next_optbyte+0x64>)
 800e5b2:	881b      	ldrh	r3, [r3, #0]
 800e5b4:	b2db      	uxtb	r3, r3
 800e5b6:	1ad3      	subs	r3, r2, r3
 800e5b8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e5ba:	4b06      	ldr	r3, [pc, #24]	; (800e5d4 <tcp_get_next_optbyte+0x60>)
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	797b      	ldrb	r3, [r7, #5]
 800e5c0:	4413      	add	r3, r2
 800e5c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	370c      	adds	r7, #12
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr
 800e5d0:	200003f4 	.word	0x200003f4
 800e5d4:	200003f0 	.word	0x200003f0
 800e5d8:	200003ee 	.word	0x200003ee
 800e5dc:	200003e8 	.word	0x200003e8

0800e5e0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b084      	sub	sp, #16
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d106      	bne.n	800e5fc <tcp_parseopt+0x1c>
 800e5ee:	4b32      	ldr	r3, [pc, #200]	; (800e6b8 <tcp_parseopt+0xd8>)
 800e5f0:	f240 727d 	movw	r2, #1917	; 0x77d
 800e5f4:	4931      	ldr	r1, [pc, #196]	; (800e6bc <tcp_parseopt+0xdc>)
 800e5f6:	4832      	ldr	r0, [pc, #200]	; (800e6c0 <tcp_parseopt+0xe0>)
 800e5f8:	f006 ffb2 	bl	8015560 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e5fc:	4b31      	ldr	r3, [pc, #196]	; (800e6c4 <tcp_parseopt+0xe4>)
 800e5fe:	881b      	ldrh	r3, [r3, #0]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d055      	beq.n	800e6b0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e604:	4b30      	ldr	r3, [pc, #192]	; (800e6c8 <tcp_parseopt+0xe8>)
 800e606:	2200      	movs	r2, #0
 800e608:	801a      	strh	r2, [r3, #0]
 800e60a:	e045      	b.n	800e698 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800e60c:	f7ff ffb2 	bl	800e574 <tcp_get_next_optbyte>
 800e610:	4603      	mov	r3, r0
 800e612:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e614:	7bfb      	ldrb	r3, [r7, #15]
 800e616:	2b02      	cmp	r3, #2
 800e618:	d006      	beq.n	800e628 <tcp_parseopt+0x48>
 800e61a:	2b02      	cmp	r3, #2
 800e61c:	dc2b      	bgt.n	800e676 <tcp_parseopt+0x96>
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d041      	beq.n	800e6a6 <tcp_parseopt+0xc6>
 800e622:	2b01      	cmp	r3, #1
 800e624:	d127      	bne.n	800e676 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800e626:	e037      	b.n	800e698 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e628:	f7ff ffa4 	bl	800e574 <tcp_get_next_optbyte>
 800e62c:	4603      	mov	r3, r0
 800e62e:	2b04      	cmp	r3, #4
 800e630:	d13b      	bne.n	800e6aa <tcp_parseopt+0xca>
 800e632:	4b25      	ldr	r3, [pc, #148]	; (800e6c8 <tcp_parseopt+0xe8>)
 800e634:	881b      	ldrh	r3, [r3, #0]
 800e636:	3301      	adds	r3, #1
 800e638:	4a22      	ldr	r2, [pc, #136]	; (800e6c4 <tcp_parseopt+0xe4>)
 800e63a:	8812      	ldrh	r2, [r2, #0]
 800e63c:	4293      	cmp	r3, r2
 800e63e:	da34      	bge.n	800e6aa <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e640:	f7ff ff98 	bl	800e574 <tcp_get_next_optbyte>
 800e644:	4603      	mov	r3, r0
 800e646:	b29b      	uxth	r3, r3
 800e648:	021b      	lsls	r3, r3, #8
 800e64a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e64c:	f7ff ff92 	bl	800e574 <tcp_get_next_optbyte>
 800e650:	4603      	mov	r3, r0
 800e652:	b29a      	uxth	r2, r3
 800e654:	89bb      	ldrh	r3, [r7, #12]
 800e656:	4313      	orrs	r3, r2
 800e658:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e65a:	89bb      	ldrh	r3, [r7, #12]
 800e65c:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 800e660:	d804      	bhi.n	800e66c <tcp_parseopt+0x8c>
 800e662:	89bb      	ldrh	r3, [r7, #12]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d001      	beq.n	800e66c <tcp_parseopt+0x8c>
 800e668:	89ba      	ldrh	r2, [r7, #12]
 800e66a:	e001      	b.n	800e670 <tcp_parseopt+0x90>
 800e66c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800e674:	e010      	b.n	800e698 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e676:	f7ff ff7d 	bl	800e574 <tcp_get_next_optbyte>
 800e67a:	4603      	mov	r3, r0
 800e67c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e67e:	7afb      	ldrb	r3, [r7, #11]
 800e680:	2b01      	cmp	r3, #1
 800e682:	d914      	bls.n	800e6ae <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e684:	7afb      	ldrb	r3, [r7, #11]
 800e686:	b29a      	uxth	r2, r3
 800e688:	4b0f      	ldr	r3, [pc, #60]	; (800e6c8 <tcp_parseopt+0xe8>)
 800e68a:	881b      	ldrh	r3, [r3, #0]
 800e68c:	4413      	add	r3, r2
 800e68e:	b29b      	uxth	r3, r3
 800e690:	3b02      	subs	r3, #2
 800e692:	b29a      	uxth	r2, r3
 800e694:	4b0c      	ldr	r3, [pc, #48]	; (800e6c8 <tcp_parseopt+0xe8>)
 800e696:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e698:	4b0b      	ldr	r3, [pc, #44]	; (800e6c8 <tcp_parseopt+0xe8>)
 800e69a:	881a      	ldrh	r2, [r3, #0]
 800e69c:	4b09      	ldr	r3, [pc, #36]	; (800e6c4 <tcp_parseopt+0xe4>)
 800e69e:	881b      	ldrh	r3, [r3, #0]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d3b3      	bcc.n	800e60c <tcp_parseopt+0x2c>
 800e6a4:	e004      	b.n	800e6b0 <tcp_parseopt+0xd0>
          return;
 800e6a6:	bf00      	nop
 800e6a8:	e002      	b.n	800e6b0 <tcp_parseopt+0xd0>
            return;
 800e6aa:	bf00      	nop
 800e6ac:	e000      	b.n	800e6b0 <tcp_parseopt+0xd0>
            return;
 800e6ae:	bf00      	nop
      }
    }
  }
}
 800e6b0:	3710      	adds	r7, #16
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	08019ff4 	.word	0x08019ff4
 800e6bc:	0801a458 	.word	0x0801a458
 800e6c0:	0801a040 	.word	0x0801a040
 800e6c4:	200003ec 	.word	0x200003ec
 800e6c8:	200003f4 	.word	0x200003f4

0800e6cc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e6d0:	4b05      	ldr	r3, [pc, #20]	; (800e6e8 <tcp_trigger_input_pcb_close+0x1c>)
 800e6d2:	781b      	ldrb	r3, [r3, #0]
 800e6d4:	f043 0310 	orr.w	r3, r3, #16
 800e6d8:	b2da      	uxtb	r2, r3
 800e6da:	4b03      	ldr	r3, [pc, #12]	; (800e6e8 <tcp_trigger_input_pcb_close+0x1c>)
 800e6dc:	701a      	strb	r2, [r3, #0]
}
 800e6de:	bf00      	nop
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr
 800e6e8:	20000405 	.word	0x20000405

0800e6ec <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b084      	sub	sp, #16
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	60f8      	str	r0, [r7, #12]
 800e6f4:	60b9      	str	r1, [r7, #8]
 800e6f6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d00a      	beq.n	800e714 <tcp_route+0x28>
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	7a1b      	ldrb	r3, [r3, #8]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d006      	beq.n	800e714 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	7a1b      	ldrb	r3, [r3, #8]
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7fb fb6e 	bl	8009dec <netif_get_by_index>
 800e710:	4603      	mov	r3, r0
 800e712:	e003      	b.n	800e71c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f004 ff95 	bl	8013644 <ip4_route>
 800e71a:	4603      	mov	r3, r0
  }
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3710      	adds	r7, #16
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800e724:	b590      	push	{r4, r7, lr}
 800e726:	b087      	sub	sp, #28
 800e728:	af00      	add	r7, sp, #0
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	60b9      	str	r1, [r7, #8]
 800e72e:	603b      	str	r3, [r7, #0]
 800e730:	4613      	mov	r3, r2
 800e732:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d105      	bne.n	800e746 <tcp_create_segment+0x22>
 800e73a:	4b44      	ldr	r3, [pc, #272]	; (800e84c <tcp_create_segment+0x128>)
 800e73c:	22a3      	movs	r2, #163	; 0xa3
 800e73e:	4944      	ldr	r1, [pc, #272]	; (800e850 <tcp_create_segment+0x12c>)
 800e740:	4844      	ldr	r0, [pc, #272]	; (800e854 <tcp_create_segment+0x130>)
 800e742:	f006 ff0d 	bl	8015560 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d105      	bne.n	800e758 <tcp_create_segment+0x34>
 800e74c:	4b3f      	ldr	r3, [pc, #252]	; (800e84c <tcp_create_segment+0x128>)
 800e74e:	22a4      	movs	r2, #164	; 0xa4
 800e750:	4941      	ldr	r1, [pc, #260]	; (800e858 <tcp_create_segment+0x134>)
 800e752:	4840      	ldr	r0, [pc, #256]	; (800e854 <tcp_create_segment+0x130>)
 800e754:	f006 ff04 	bl	8015560 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e758:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	b2db      	uxtb	r3, r3
 800e760:	f003 0304 	and.w	r3, r3, #4
 800e764:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e766:	2003      	movs	r0, #3
 800e768:	f7fb f83a 	bl	80097e0 <memp_malloc>
 800e76c:	6138      	str	r0, [r7, #16]
 800e76e:	693b      	ldr	r3, [r7, #16]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d104      	bne.n	800e77e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e774:	68b8      	ldr	r0, [r7, #8]
 800e776:	f7fb fe79 	bl	800a46c <pbuf_free>
    return NULL;
 800e77a:	2300      	movs	r3, #0
 800e77c:	e061      	b.n	800e842 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e784:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	2200      	movs	r2, #0
 800e78a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	68ba      	ldr	r2, [r7, #8]
 800e790:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	891a      	ldrh	r2, [r3, #8]
 800e796:	7dfb      	ldrb	r3, [r7, #23]
 800e798:	b29b      	uxth	r3, r3
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d205      	bcs.n	800e7aa <tcp_create_segment+0x86>
 800e79e:	4b2b      	ldr	r3, [pc, #172]	; (800e84c <tcp_create_segment+0x128>)
 800e7a0:	22b0      	movs	r2, #176	; 0xb0
 800e7a2:	492e      	ldr	r1, [pc, #184]	; (800e85c <tcp_create_segment+0x138>)
 800e7a4:	482b      	ldr	r0, [pc, #172]	; (800e854 <tcp_create_segment+0x130>)
 800e7a6:	f006 fedb 	bl	8015560 <iprintf>
  seg->len = p->tot_len - optlen;
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	891a      	ldrh	r2, [r3, #8]
 800e7ae:	7dfb      	ldrb	r3, [r7, #23]
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	1ad3      	subs	r3, r2, r3
 800e7b4:	b29a      	uxth	r2, r3
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800e7ba:	2114      	movs	r1, #20
 800e7bc:	68b8      	ldr	r0, [r7, #8]
 800e7be:	f7fb fdbf 	bl	800a340 <pbuf_add_header>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d004      	beq.n	800e7d2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e7c8:	6938      	ldr	r0, [r7, #16]
 800e7ca:	f7fd f8d2 	bl	800b972 <tcp_seg_free>
    return NULL;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	e037      	b.n	800e842 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e7d2:	693b      	ldr	r3, [r7, #16]
 800e7d4:	685b      	ldr	r3, [r3, #4]
 800e7d6:	685a      	ldr	r2, [r3, #4]
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	8ada      	ldrh	r2, [r3, #22]
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	68dc      	ldr	r4, [r3, #12]
 800e7e4:	4610      	mov	r0, r2
 800e7e6:	f7fa fba5 	bl	8008f34 <lwip_htons>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	8b1a      	ldrh	r2, [r3, #24]
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	68dc      	ldr	r4, [r3, #12]
 800e7f6:	4610      	mov	r0, r2
 800e7f8:	f7fa fb9c 	bl	8008f34 <lwip_htons>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	68dc      	ldr	r4, [r3, #12]
 800e804:	6838      	ldr	r0, [r7, #0]
 800e806:	f7fa fbaa 	bl	8008f5e <lwip_htonl>
 800e80a:	4603      	mov	r3, r0
 800e80c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e80e:	7dfb      	ldrb	r3, [r7, #23]
 800e810:	089b      	lsrs	r3, r3, #2
 800e812:	b2db      	uxtb	r3, r3
 800e814:	b29b      	uxth	r3, r3
 800e816:	3305      	adds	r3, #5
 800e818:	b29b      	uxth	r3, r3
 800e81a:	031b      	lsls	r3, r3, #12
 800e81c:	b29a      	uxth	r2, r3
 800e81e:	79fb      	ldrb	r3, [r7, #7]
 800e820:	b29b      	uxth	r3, r3
 800e822:	4313      	orrs	r3, r2
 800e824:	b29a      	uxth	r2, r3
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	68dc      	ldr	r4, [r3, #12]
 800e82a:	4610      	mov	r0, r2
 800e82c:	f7fa fb82 	bl	8008f34 <lwip_htons>
 800e830:	4603      	mov	r3, r0
 800e832:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	68db      	ldr	r3, [r3, #12]
 800e838:	2200      	movs	r2, #0
 800e83a:	749a      	strb	r2, [r3, #18]
 800e83c:	2200      	movs	r2, #0
 800e83e:	74da      	strb	r2, [r3, #19]
  return seg;
 800e840:	693b      	ldr	r3, [r7, #16]
}
 800e842:	4618      	mov	r0, r3
 800e844:	371c      	adds	r7, #28
 800e846:	46bd      	mov	sp, r7
 800e848:	bd90      	pop	{r4, r7, pc}
 800e84a:	bf00      	nop
 800e84c:	0801a474 	.word	0x0801a474
 800e850:	0801a4a8 	.word	0x0801a4a8
 800e854:	0801a4c8 	.word	0x0801a4c8
 800e858:	0801a4f0 	.word	0x0801a4f0
 800e85c:	0801a514 	.word	0x0801a514

0800e860 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e860:	b590      	push	{r4, r7, lr}
 800e862:	b08b      	sub	sp, #44	; 0x2c
 800e864:	af02      	add	r7, sp, #8
 800e866:	6078      	str	r0, [r7, #4]
 800e868:	460b      	mov	r3, r1
 800e86a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e86c:	2300      	movs	r3, #0
 800e86e:	61fb      	str	r3, [r7, #28]
 800e870:	2300      	movs	r3, #0
 800e872:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e874:	2300      	movs	r3, #0
 800e876:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d106      	bne.n	800e88c <tcp_split_unsent_seg+0x2c>
 800e87e:	4b95      	ldr	r3, [pc, #596]	; (800ead4 <tcp_split_unsent_seg+0x274>)
 800e880:	f240 324b 	movw	r2, #843	; 0x34b
 800e884:	4994      	ldr	r1, [pc, #592]	; (800ead8 <tcp_split_unsent_seg+0x278>)
 800e886:	4895      	ldr	r0, [pc, #596]	; (800eadc <tcp_split_unsent_seg+0x27c>)
 800e888:	f006 fe6a 	bl	8015560 <iprintf>

  useg = pcb->unsent;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e890:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d102      	bne.n	800e89e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e898:	f04f 33ff 	mov.w	r3, #4294967295
 800e89c:	e116      	b.n	800eacc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e89e:	887b      	ldrh	r3, [r7, #2]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d109      	bne.n	800e8b8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e8a4:	4b8b      	ldr	r3, [pc, #556]	; (800ead4 <tcp_split_unsent_seg+0x274>)
 800e8a6:	f240 3253 	movw	r2, #851	; 0x353
 800e8aa:	498d      	ldr	r1, [pc, #564]	; (800eae0 <tcp_split_unsent_seg+0x280>)
 800e8ac:	488b      	ldr	r0, [pc, #556]	; (800eadc <tcp_split_unsent_seg+0x27c>)
 800e8ae:	f006 fe57 	bl	8015560 <iprintf>
    return ERR_VAL;
 800e8b2:	f06f 0305 	mvn.w	r3, #5
 800e8b6:	e109      	b.n	800eacc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	891b      	ldrh	r3, [r3, #8]
 800e8bc:	887a      	ldrh	r2, [r7, #2]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d301      	bcc.n	800e8c6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	e102      	b.n	800eacc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8ca:	887a      	ldrh	r2, [r7, #2]
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d906      	bls.n	800e8de <tcp_split_unsent_seg+0x7e>
 800e8d0:	4b80      	ldr	r3, [pc, #512]	; (800ead4 <tcp_split_unsent_seg+0x274>)
 800e8d2:	f240 325b 	movw	r2, #859	; 0x35b
 800e8d6:	4983      	ldr	r1, [pc, #524]	; (800eae4 <tcp_split_unsent_seg+0x284>)
 800e8d8:	4880      	ldr	r0, [pc, #512]	; (800eadc <tcp_split_unsent_seg+0x27c>)
 800e8da:	f006 fe41 	bl	8015560 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	891b      	ldrh	r3, [r3, #8]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d106      	bne.n	800e8f4 <tcp_split_unsent_seg+0x94>
 800e8e6:	4b7b      	ldr	r3, [pc, #492]	; (800ead4 <tcp_split_unsent_seg+0x274>)
 800e8e8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800e8ec:	497e      	ldr	r1, [pc, #504]	; (800eae8 <tcp_split_unsent_seg+0x288>)
 800e8ee:	487b      	ldr	r0, [pc, #492]	; (800eadc <tcp_split_unsent_seg+0x27c>)
 800e8f0:	f006 fe36 	bl	8015560 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e8f4:	697b      	ldr	r3, [r7, #20]
 800e8f6:	7a9b      	ldrb	r3, [r3, #10]
 800e8f8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e8fa:	7bfb      	ldrb	r3, [r7, #15]
 800e8fc:	009b      	lsls	r3, r3, #2
 800e8fe:	b2db      	uxtb	r3, r3
 800e900:	f003 0304 	and.w	r3, r3, #4
 800e904:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	891a      	ldrh	r2, [r3, #8]
 800e90a:	887b      	ldrh	r3, [r7, #2]
 800e90c:	1ad3      	subs	r3, r2, r3
 800e90e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e910:	7bbb      	ldrb	r3, [r7, #14]
 800e912:	b29a      	uxth	r2, r3
 800e914:	89bb      	ldrh	r3, [r7, #12]
 800e916:	4413      	add	r3, r2
 800e918:	b29b      	uxth	r3, r3
 800e91a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e91e:	4619      	mov	r1, r3
 800e920:	2036      	movs	r0, #54	; 0x36
 800e922:	f7fb fabf 	bl	8009ea4 <pbuf_alloc>
 800e926:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	f000 80b7 	beq.w	800ea9e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	685b      	ldr	r3, [r3, #4]
 800e934:	891a      	ldrh	r2, [r3, #8]
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	891b      	ldrh	r3, [r3, #8]
 800e93a:	1ad3      	subs	r3, r2, r3
 800e93c:	b29a      	uxth	r2, r3
 800e93e:	887b      	ldrh	r3, [r7, #2]
 800e940:	4413      	add	r3, r2
 800e942:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	6858      	ldr	r0, [r3, #4]
 800e948:	693b      	ldr	r3, [r7, #16]
 800e94a:	685a      	ldr	r2, [r3, #4]
 800e94c:	7bbb      	ldrb	r3, [r7, #14]
 800e94e:	18d1      	adds	r1, r2, r3
 800e950:	897b      	ldrh	r3, [r7, #10]
 800e952:	89ba      	ldrh	r2, [r7, #12]
 800e954:	f7fb ff84 	bl	800a860 <pbuf_copy_partial>
 800e958:	4603      	mov	r3, r0
 800e95a:	461a      	mov	r2, r3
 800e95c:	89bb      	ldrh	r3, [r7, #12]
 800e95e:	4293      	cmp	r3, r2
 800e960:	f040 809f 	bne.w	800eaa2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	68db      	ldr	r3, [r3, #12]
 800e968:	899b      	ldrh	r3, [r3, #12]
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	4618      	mov	r0, r3
 800e96e:	f7fa fae1 	bl	8008f34 <lwip_htons>
 800e972:	4603      	mov	r3, r0
 800e974:	b2db      	uxtb	r3, r3
 800e976:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e97a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e97c:	2300      	movs	r3, #0
 800e97e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e980:	7efb      	ldrb	r3, [r7, #27]
 800e982:	f003 0308 	and.w	r3, r3, #8
 800e986:	2b00      	cmp	r3, #0
 800e988:	d007      	beq.n	800e99a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e98a:	7efb      	ldrb	r3, [r7, #27]
 800e98c:	f023 0308 	bic.w	r3, r3, #8
 800e990:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e992:	7ebb      	ldrb	r3, [r7, #26]
 800e994:	f043 0308 	orr.w	r3, r3, #8
 800e998:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e99a:	7efb      	ldrb	r3, [r7, #27]
 800e99c:	f003 0301 	and.w	r3, r3, #1
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d007      	beq.n	800e9b4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e9a4:	7efb      	ldrb	r3, [r7, #27]
 800e9a6:	f023 0301 	bic.w	r3, r3, #1
 800e9aa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e9ac:	7ebb      	ldrb	r3, [r7, #26]
 800e9ae:	f043 0301 	orr.w	r3, r3, #1
 800e9b2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	68db      	ldr	r3, [r3, #12]
 800e9b8:	685b      	ldr	r3, [r3, #4]
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f7fa facf 	bl	8008f5e <lwip_htonl>
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	887b      	ldrh	r3, [r7, #2]
 800e9c4:	18d1      	adds	r1, r2, r3
 800e9c6:	7eba      	ldrb	r2, [r7, #26]
 800e9c8:	7bfb      	ldrb	r3, [r7, #15]
 800e9ca:	9300      	str	r3, [sp, #0]
 800e9cc:	460b      	mov	r3, r1
 800e9ce:	6939      	ldr	r1, [r7, #16]
 800e9d0:	6878      	ldr	r0, [r7, #4]
 800e9d2:	f7ff fea7 	bl	800e724 <tcp_create_segment>
 800e9d6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e9d8:	69fb      	ldr	r3, [r7, #28]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d063      	beq.n	800eaa6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	685b      	ldr	r3, [r3, #4]
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f7fb fdca 	bl	800a57c <pbuf_clen>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	461a      	mov	r2, r3
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e9f2:	1a9b      	subs	r3, r3, r2
 800e9f4:	b29a      	uxth	r2, r3
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	6858      	ldr	r0, [r3, #4]
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	891a      	ldrh	r2, [r3, #8]
 800ea06:	89bb      	ldrh	r3, [r7, #12]
 800ea08:	1ad3      	subs	r3, r2, r3
 800ea0a:	b29b      	uxth	r3, r3
 800ea0c:	4619      	mov	r1, r3
 800ea0e:	f7fb fba7 	bl	800a160 <pbuf_realloc>
  useg->len -= remainder;
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	891a      	ldrh	r2, [r3, #8]
 800ea16:	89bb      	ldrh	r3, [r7, #12]
 800ea18:	1ad3      	subs	r3, r2, r3
 800ea1a:	b29a      	uxth	r2, r3
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	899b      	ldrh	r3, [r3, #12]
 800ea26:	b29c      	uxth	r4, r3
 800ea28:	7efb      	ldrb	r3, [r7, #27]
 800ea2a:	b29b      	uxth	r3, r3
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f7fa fa81 	bl	8008f34 <lwip_htons>
 800ea32:	4603      	mov	r3, r0
 800ea34:	461a      	mov	r2, r3
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	68db      	ldr	r3, [r3, #12]
 800ea3a:	4322      	orrs	r2, r4
 800ea3c:	b292      	uxth	r2, r2
 800ea3e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	4618      	mov	r0, r3
 800ea46:	f7fb fd99 	bl	800a57c <pbuf_clen>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ea54:	4413      	add	r3, r2
 800ea56:	b29a      	uxth	r2, r3
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ea5e:	69fb      	ldr	r3, [r7, #28]
 800ea60:	685b      	ldr	r3, [r3, #4]
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7fb fd8a 	bl	800a57c <pbuf_clen>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ea72:	4413      	add	r3, r2
 800ea74:	b29a      	uxth	r2, r3
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	681a      	ldr	r2, [r3, #0]
 800ea80:	69fb      	ldr	r3, [r7, #28]
 800ea82:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	69fa      	ldr	r2, [r7, #28]
 800ea88:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d103      	bne.n	800ea9a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2200      	movs	r2, #0
 800ea96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	e016      	b.n	800eacc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ea9e:	bf00      	nop
 800eaa0:	e002      	b.n	800eaa8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800eaa2:	bf00      	nop
 800eaa4:	e000      	b.n	800eaa8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800eaa6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d006      	beq.n	800eabc <tcp_split_unsent_seg+0x25c>
 800eaae:	4b09      	ldr	r3, [pc, #36]	; (800ead4 <tcp_split_unsent_seg+0x274>)
 800eab0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800eab4:	490d      	ldr	r1, [pc, #52]	; (800eaec <tcp_split_unsent_seg+0x28c>)
 800eab6:	4809      	ldr	r0, [pc, #36]	; (800eadc <tcp_split_unsent_seg+0x27c>)
 800eab8:	f006 fd52 	bl	8015560 <iprintf>
  if (p != NULL) {
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d002      	beq.n	800eac8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800eac2:	6938      	ldr	r0, [r7, #16]
 800eac4:	f7fb fcd2 	bl	800a46c <pbuf_free>
  }

  return ERR_MEM;
 800eac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3724      	adds	r7, #36	; 0x24
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd90      	pop	{r4, r7, pc}
 800ead4:	0801a474 	.word	0x0801a474
 800ead8:	0801a808 	.word	0x0801a808
 800eadc:	0801a4c8 	.word	0x0801a4c8
 800eae0:	0801a82c 	.word	0x0801a82c
 800eae4:	0801a850 	.word	0x0801a850
 800eae8:	0801a860 	.word	0x0801a860
 800eaec:	0801a870 	.word	0x0801a870

0800eaf0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800eaf0:	b590      	push	{r4, r7, lr}
 800eaf2:	b085      	sub	sp, #20
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d106      	bne.n	800eb0c <tcp_send_fin+0x1c>
 800eafe:	4b21      	ldr	r3, [pc, #132]	; (800eb84 <tcp_send_fin+0x94>)
 800eb00:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800eb04:	4920      	ldr	r1, [pc, #128]	; (800eb88 <tcp_send_fin+0x98>)
 800eb06:	4821      	ldr	r0, [pc, #132]	; (800eb8c <tcp_send_fin+0x9c>)
 800eb08:	f006 fd2a 	bl	8015560 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d02e      	beq.n	800eb72 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb18:	60fb      	str	r3, [r7, #12]
 800eb1a:	e002      	b.n	800eb22 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d1f8      	bne.n	800eb1c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	68db      	ldr	r3, [r3, #12]
 800eb2e:	899b      	ldrh	r3, [r3, #12]
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	4618      	mov	r0, r3
 800eb34:	f7fa f9fe 	bl	8008f34 <lwip_htons>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	b2db      	uxtb	r3, r3
 800eb3c:	f003 0307 	and.w	r3, r3, #7
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d116      	bne.n	800eb72 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	68db      	ldr	r3, [r3, #12]
 800eb48:	899b      	ldrh	r3, [r3, #12]
 800eb4a:	b29c      	uxth	r4, r3
 800eb4c:	2001      	movs	r0, #1
 800eb4e:	f7fa f9f1 	bl	8008f34 <lwip_htons>
 800eb52:	4603      	mov	r3, r0
 800eb54:	461a      	mov	r2, r3
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	68db      	ldr	r3, [r3, #12]
 800eb5a:	4322      	orrs	r2, r4
 800eb5c:	b292      	uxth	r2, r2
 800eb5e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	8b5b      	ldrh	r3, [r3, #26]
 800eb64:	f043 0320 	orr.w	r3, r3, #32
 800eb68:	b29a      	uxth	r2, r3
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	e004      	b.n	800eb7c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800eb72:	2101      	movs	r1, #1
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f000 f80b 	bl	800eb90 <tcp_enqueue_flags>
 800eb7a:	4603      	mov	r3, r0
}
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	3714      	adds	r7, #20
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd90      	pop	{r4, r7, pc}
 800eb84:	0801a474 	.word	0x0801a474
 800eb88:	0801a87c 	.word	0x0801a87c
 800eb8c:	0801a4c8 	.word	0x0801a4c8

0800eb90 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b08a      	sub	sp, #40	; 0x28
 800eb94:	af02      	add	r7, sp, #8
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	460b      	mov	r3, r1
 800eb9a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800eba0:	2300      	movs	r3, #0
 800eba2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800eba4:	78fb      	ldrb	r3, [r7, #3]
 800eba6:	f003 0303 	and.w	r3, r3, #3
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d106      	bne.n	800ebbc <tcp_enqueue_flags+0x2c>
 800ebae:	4b67      	ldr	r3, [pc, #412]	; (800ed4c <tcp_enqueue_flags+0x1bc>)
 800ebb0:	f240 4211 	movw	r2, #1041	; 0x411
 800ebb4:	4966      	ldr	r1, [pc, #408]	; (800ed50 <tcp_enqueue_flags+0x1c0>)
 800ebb6:	4867      	ldr	r0, [pc, #412]	; (800ed54 <tcp_enqueue_flags+0x1c4>)
 800ebb8:	f006 fcd2 	bl	8015560 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d106      	bne.n	800ebd0 <tcp_enqueue_flags+0x40>
 800ebc2:	4b62      	ldr	r3, [pc, #392]	; (800ed4c <tcp_enqueue_flags+0x1bc>)
 800ebc4:	f240 4213 	movw	r2, #1043	; 0x413
 800ebc8:	4963      	ldr	r1, [pc, #396]	; (800ed58 <tcp_enqueue_flags+0x1c8>)
 800ebca:	4862      	ldr	r0, [pc, #392]	; (800ed54 <tcp_enqueue_flags+0x1c4>)
 800ebcc:	f006 fcc8 	bl	8015560 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ebd0:	78fb      	ldrb	r3, [r7, #3]
 800ebd2:	f003 0302 	and.w	r3, r3, #2
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d001      	beq.n	800ebde <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ebda:	2301      	movs	r3, #1
 800ebdc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ebde:	7ffb      	ldrb	r3, [r7, #31]
 800ebe0:	009b      	lsls	r3, r3, #2
 800ebe2:	b2db      	uxtb	r3, r3
 800ebe4:	f003 0304 	and.w	r3, r3, #4
 800ebe8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ebea:	7dfb      	ldrb	r3, [r7, #23]
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	2036      	movs	r0, #54	; 0x36
 800ebf6:	f7fb f955 	bl	8009ea4 <pbuf_alloc>
 800ebfa:	6138      	str	r0, [r7, #16]
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d109      	bne.n	800ec16 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	8b5b      	ldrh	r3, [r3, #26]
 800ec06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec0a:	b29a      	uxth	r2, r3
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ec10:	f04f 33ff 	mov.w	r3, #4294967295
 800ec14:	e095      	b.n	800ed42 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	895a      	ldrh	r2, [r3, #10]
 800ec1a:	7dfb      	ldrb	r3, [r7, #23]
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d206      	bcs.n	800ec30 <tcp_enqueue_flags+0xa0>
 800ec22:	4b4a      	ldr	r3, [pc, #296]	; (800ed4c <tcp_enqueue_flags+0x1bc>)
 800ec24:	f240 4239 	movw	r2, #1081	; 0x439
 800ec28:	494c      	ldr	r1, [pc, #304]	; (800ed5c <tcp_enqueue_flags+0x1cc>)
 800ec2a:	484a      	ldr	r0, [pc, #296]	; (800ed54 <tcp_enqueue_flags+0x1c4>)
 800ec2c:	f006 fc98 	bl	8015560 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ec34:	78fa      	ldrb	r2, [r7, #3]
 800ec36:	7ffb      	ldrb	r3, [r7, #31]
 800ec38:	9300      	str	r3, [sp, #0]
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	6939      	ldr	r1, [r7, #16]
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f7ff fd70 	bl	800e724 <tcp_create_segment>
 800ec44:	60f8      	str	r0, [r7, #12]
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d109      	bne.n	800ec60 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	8b5b      	ldrh	r3, [r3, #26]
 800ec50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec54:	b29a      	uxth	r2, r3
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ec5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ec5e:	e070      	b.n	800ed42 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	68db      	ldr	r3, [r3, #12]
 800ec64:	f003 0303 	and.w	r3, r3, #3
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d006      	beq.n	800ec7a <tcp_enqueue_flags+0xea>
 800ec6c:	4b37      	ldr	r3, [pc, #220]	; (800ed4c <tcp_enqueue_flags+0x1bc>)
 800ec6e:	f240 4242 	movw	r2, #1090	; 0x442
 800ec72:	493b      	ldr	r1, [pc, #236]	; (800ed60 <tcp_enqueue_flags+0x1d0>)
 800ec74:	4837      	ldr	r0, [pc, #220]	; (800ed54 <tcp_enqueue_flags+0x1c4>)
 800ec76:	f006 fc73 	bl	8015560 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	891b      	ldrh	r3, [r3, #8]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d006      	beq.n	800ec90 <tcp_enqueue_flags+0x100>
 800ec82:	4b32      	ldr	r3, [pc, #200]	; (800ed4c <tcp_enqueue_flags+0x1bc>)
 800ec84:	f240 4243 	movw	r2, #1091	; 0x443
 800ec88:	4936      	ldr	r1, [pc, #216]	; (800ed64 <tcp_enqueue_flags+0x1d4>)
 800ec8a:	4832      	ldr	r0, [pc, #200]	; (800ed54 <tcp_enqueue_flags+0x1c4>)
 800ec8c:	f006 fc68 	bl	8015560 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d103      	bne.n	800eca0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	68fa      	ldr	r2, [r7, #12]
 800ec9c:	66da      	str	r2, [r3, #108]	; 0x6c
 800ec9e:	e00d      	b.n	800ecbc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eca4:	61bb      	str	r3, [r7, #24]
 800eca6:	e002      	b.n	800ecae <tcp_enqueue_flags+0x11e>
 800eca8:	69bb      	ldr	r3, [r7, #24]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	61bb      	str	r3, [r7, #24]
 800ecae:	69bb      	ldr	r3, [r7, #24]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d1f8      	bne.n	800eca8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ecb6:	69bb      	ldr	r3, [r7, #24]
 800ecb8:	68fa      	ldr	r2, [r7, #12]
 800ecba:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ecc4:	78fb      	ldrb	r3, [r7, #3]
 800ecc6:	f003 0302 	and.w	r3, r3, #2
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d104      	bne.n	800ecd8 <tcp_enqueue_flags+0x148>
 800ecce:	78fb      	ldrb	r3, [r7, #3]
 800ecd0:	f003 0301 	and.w	r3, r3, #1
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d004      	beq.n	800ece2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecdc:	1c5a      	adds	r2, r3, #1
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ece2:	78fb      	ldrb	r3, [r7, #3]
 800ece4:	f003 0301 	and.w	r3, r3, #1
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d006      	beq.n	800ecfa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	8b5b      	ldrh	r3, [r3, #26]
 800ecf0:	f043 0320 	orr.w	r3, r3, #32
 800ecf4:	b29a      	uxth	r2, r3
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7fb fc3c 	bl	800a57c <pbuf_clen>
 800ed04:	4603      	mov	r3, r0
 800ed06:	461a      	mov	r2, r3
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ed0e:	4413      	add	r3, r2
 800ed10:	b29a      	uxth	r2, r3
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d00e      	beq.n	800ed40 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d10a      	bne.n	800ed40 <tcp_enqueue_flags+0x1b0>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d106      	bne.n	800ed40 <tcp_enqueue_flags+0x1b0>
 800ed32:	4b06      	ldr	r3, [pc, #24]	; (800ed4c <tcp_enqueue_flags+0x1bc>)
 800ed34:	f240 4265 	movw	r2, #1125	; 0x465
 800ed38:	490b      	ldr	r1, [pc, #44]	; (800ed68 <tcp_enqueue_flags+0x1d8>)
 800ed3a:	4806      	ldr	r0, [pc, #24]	; (800ed54 <tcp_enqueue_flags+0x1c4>)
 800ed3c:	f006 fc10 	bl	8015560 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ed40:	2300      	movs	r3, #0
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3720      	adds	r7, #32
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}
 800ed4a:	bf00      	nop
 800ed4c:	0801a474 	.word	0x0801a474
 800ed50:	0801a898 	.word	0x0801a898
 800ed54:	0801a4c8 	.word	0x0801a4c8
 800ed58:	0801a8f0 	.word	0x0801a8f0
 800ed5c:	0801a910 	.word	0x0801a910
 800ed60:	0801a94c 	.word	0x0801a94c
 800ed64:	0801a964 	.word	0x0801a964
 800ed68:	0801a990 	.word	0x0801a990

0800ed6c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ed6c:	b5b0      	push	{r4, r5, r7, lr}
 800ed6e:	b08a      	sub	sp, #40	; 0x28
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d106      	bne.n	800ed88 <tcp_output+0x1c>
 800ed7a:	4b9e      	ldr	r3, [pc, #632]	; (800eff4 <tcp_output+0x288>)
 800ed7c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ed80:	499d      	ldr	r1, [pc, #628]	; (800eff8 <tcp_output+0x28c>)
 800ed82:	489e      	ldr	r0, [pc, #632]	; (800effc <tcp_output+0x290>)
 800ed84:	f006 fbec 	bl	8015560 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	7d1b      	ldrb	r3, [r3, #20]
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d106      	bne.n	800ed9e <tcp_output+0x32>
 800ed90:	4b98      	ldr	r3, [pc, #608]	; (800eff4 <tcp_output+0x288>)
 800ed92:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ed96:	499a      	ldr	r1, [pc, #616]	; (800f000 <tcp_output+0x294>)
 800ed98:	4898      	ldr	r0, [pc, #608]	; (800effc <tcp_output+0x290>)
 800ed9a:	f006 fbe1 	bl	8015560 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ed9e:	4b99      	ldr	r3, [pc, #612]	; (800f004 <tcp_output+0x298>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	687a      	ldr	r2, [r7, #4]
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d101      	bne.n	800edac <tcp_output+0x40>
    return ERR_OK;
 800eda8:	2300      	movs	r3, #0
 800edaa:	e1ce      	b.n	800f14a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800edb8:	4293      	cmp	r3, r2
 800edba:	bf28      	it	cs
 800edbc:	4613      	movcs	r3, r2
 800edbe:	b29b      	uxth	r3, r3
 800edc0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edc6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800edc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d10b      	bne.n	800ede6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	8b5b      	ldrh	r3, [r3, #26]
 800edd2:	f003 0302 	and.w	r3, r3, #2
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	f000 81aa 	beq.w	800f130 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f000 fdc9 	bl	800f974 <tcp_send_empty_ack>
 800ede2:	4603      	mov	r3, r0
 800ede4:	e1b1      	b.n	800f14a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ede6:	6879      	ldr	r1, [r7, #4]
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	3304      	adds	r3, #4
 800edec:	461a      	mov	r2, r3
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	f7ff fc7c 	bl	800e6ec <tcp_route>
 800edf4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d102      	bne.n	800ee02 <tcp_output+0x96>
    return ERR_RTE;
 800edfc:	f06f 0303 	mvn.w	r3, #3
 800ee00:	e1a3      	b.n	800f14a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d003      	beq.n	800ee10 <tcp_output+0xa4>
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d111      	bne.n	800ee34 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d002      	beq.n	800ee1c <tcp_output+0xb0>
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	3304      	adds	r3, #4
 800ee1a:	e000      	b.n	800ee1e <tcp_output+0xb2>
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d102      	bne.n	800ee2c <tcp_output+0xc0>
      return ERR_RTE;
 800ee26:	f06f 0303 	mvn.w	r3, #3
 800ee2a:	e18e      	b.n	800f14a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ee2c:	693b      	ldr	r3, [r7, #16]
 800ee2e:	681a      	ldr	r2, [r3, #0]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ee34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	685b      	ldr	r3, [r3, #4]
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7fa f88f 	bl	8008f5e <lwip_htonl>
 800ee40:	4602      	mov	r2, r0
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee46:	1ad3      	subs	r3, r2, r3
 800ee48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee4a:	8912      	ldrh	r2, [r2, #8]
 800ee4c:	4413      	add	r3, r2
 800ee4e:	69ba      	ldr	r2, [r7, #24]
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d227      	bcs.n	800eea4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	69bb      	ldr	r3, [r7, #24]
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d114      	bne.n	800ee8c <tcp_output+0x120>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d110      	bne.n	800ee8c <tcp_output+0x120>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d10b      	bne.n	800ee8c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2200      	movs	r2, #0
 800ee78:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2201      	movs	r2, #1
 800ee80:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2200      	movs	r2, #0
 800ee88:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	8b5b      	ldrh	r3, [r3, #26]
 800ee90:	f003 0302 	and.w	r3, r3, #2
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	f000 814d 	beq.w	800f134 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f000 fd6a 	bl	800f974 <tcp_send_empty_ack>
 800eea0:	4603      	mov	r3, r0
 800eea2:	e152      	b.n	800f14a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2200      	movs	r2, #0
 800eea8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eeb0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800eeb2:	6a3b      	ldr	r3, [r7, #32]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	f000 811c 	beq.w	800f0f2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800eeba:	e002      	b.n	800eec2 <tcp_output+0x156>
 800eebc:	6a3b      	ldr	r3, [r7, #32]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	623b      	str	r3, [r7, #32]
 800eec2:	6a3b      	ldr	r3, [r7, #32]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d1f8      	bne.n	800eebc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800eeca:	e112      	b.n	800f0f2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800eecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eece:	68db      	ldr	r3, [r3, #12]
 800eed0:	899b      	ldrh	r3, [r3, #12]
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	4618      	mov	r0, r3
 800eed6:	f7fa f82d 	bl	8008f34 <lwip_htons>
 800eeda:	4603      	mov	r3, r0
 800eedc:	b2db      	uxtb	r3, r3
 800eede:	f003 0304 	and.w	r3, r3, #4
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d006      	beq.n	800eef4 <tcp_output+0x188>
 800eee6:	4b43      	ldr	r3, [pc, #268]	; (800eff4 <tcp_output+0x288>)
 800eee8:	f240 5236 	movw	r2, #1334	; 0x536
 800eeec:	4946      	ldr	r1, [pc, #280]	; (800f008 <tcp_output+0x29c>)
 800eeee:	4843      	ldr	r0, [pc, #268]	; (800effc <tcp_output+0x290>)
 800eef0:	f006 fb36 	bl	8015560 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d01f      	beq.n	800ef3c <tcp_output+0x1d0>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	8b5b      	ldrh	r3, [r3, #26]
 800ef00:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d119      	bne.n	800ef3c <tcp_output+0x1d0>
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d00b      	beq.n	800ef28 <tcp_output+0x1bc>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d110      	bne.n	800ef3c <tcp_output+0x1d0>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef1e:	891a      	ldrh	r2, [r3, #8]
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d209      	bcs.n	800ef3c <tcp_output+0x1d0>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d004      	beq.n	800ef3c <tcp_output+0x1d0>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ef38:	2b0f      	cmp	r3, #15
 800ef3a:	d901      	bls.n	800ef40 <tcp_output+0x1d4>
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	e000      	b.n	800ef42 <tcp_output+0x1d6>
 800ef40:	2300      	movs	r3, #0
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d106      	bne.n	800ef54 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	8b5b      	ldrh	r3, [r3, #26]
 800ef4a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	f000 80e4 	beq.w	800f11c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	7d1b      	ldrb	r3, [r3, #20]
 800ef58:	2b02      	cmp	r3, #2
 800ef5a:	d00d      	beq.n	800ef78 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ef5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef5e:	68db      	ldr	r3, [r3, #12]
 800ef60:	899b      	ldrh	r3, [r3, #12]
 800ef62:	b29c      	uxth	r4, r3
 800ef64:	2010      	movs	r0, #16
 800ef66:	f7f9 ffe5 	bl	8008f34 <lwip_htons>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef70:	68db      	ldr	r3, [r3, #12]
 800ef72:	4322      	orrs	r2, r4
 800ef74:	b292      	uxth	r2, r2
 800ef76:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ef78:	697a      	ldr	r2, [r7, #20]
 800ef7a:	6879      	ldr	r1, [r7, #4]
 800ef7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef7e:	f000 f909 	bl	800f194 <tcp_output_segment>
 800ef82:	4603      	mov	r3, r0
 800ef84:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ef86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d009      	beq.n	800efa2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	8b5b      	ldrh	r3, [r3, #26]
 800ef92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef96:	b29a      	uxth	r2, r3
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	835a      	strh	r2, [r3, #26]
      return err;
 800ef9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efa0:	e0d3      	b.n	800f14a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800efa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa4:	681a      	ldr	r2, [r3, #0]
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	7d1b      	ldrb	r3, [r3, #20]
 800efae:	2b02      	cmp	r3, #2
 800efb0:	d006      	beq.n	800efc0 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	8b5b      	ldrh	r3, [r3, #26]
 800efb6:	f023 0303 	bic.w	r3, r3, #3
 800efba:	b29a      	uxth	r2, r3
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800efc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc2:	68db      	ldr	r3, [r3, #12]
 800efc4:	685b      	ldr	r3, [r3, #4]
 800efc6:	4618      	mov	r0, r3
 800efc8:	f7f9 ffc9 	bl	8008f5e <lwip_htonl>
 800efcc:	4604      	mov	r4, r0
 800efce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd0:	891b      	ldrh	r3, [r3, #8]
 800efd2:	461d      	mov	r5, r3
 800efd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd6:	68db      	ldr	r3, [r3, #12]
 800efd8:	899b      	ldrh	r3, [r3, #12]
 800efda:	b29b      	uxth	r3, r3
 800efdc:	4618      	mov	r0, r3
 800efde:	f7f9 ffa9 	bl	8008f34 <lwip_htons>
 800efe2:	4603      	mov	r3, r0
 800efe4:	b2db      	uxtb	r3, r3
 800efe6:	f003 0303 	and.w	r3, r3, #3
 800efea:	2b00      	cmp	r3, #0
 800efec:	d00e      	beq.n	800f00c <tcp_output+0x2a0>
 800efee:	2301      	movs	r3, #1
 800eff0:	e00d      	b.n	800f00e <tcp_output+0x2a2>
 800eff2:	bf00      	nop
 800eff4:	0801a474 	.word	0x0801a474
 800eff8:	0801a9b8 	.word	0x0801a9b8
 800effc:	0801a4c8 	.word	0x0801a4c8
 800f000:	0801a9d0 	.word	0x0801a9d0
 800f004:	20006a34 	.word	0x20006a34
 800f008:	0801a9f8 	.word	0x0801a9f8
 800f00c:	2300      	movs	r3, #0
 800f00e:	442b      	add	r3, r5
 800f010:	4423      	add	r3, r4
 800f012:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	1ad3      	subs	r3, r2, r3
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	da02      	bge.n	800f026 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	68ba      	ldr	r2, [r7, #8]
 800f024:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f028:	891b      	ldrh	r3, [r3, #8]
 800f02a:	461c      	mov	r4, r3
 800f02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	899b      	ldrh	r3, [r3, #12]
 800f032:	b29b      	uxth	r3, r3
 800f034:	4618      	mov	r0, r3
 800f036:	f7f9 ff7d 	bl	8008f34 <lwip_htons>
 800f03a:	4603      	mov	r3, r0
 800f03c:	b2db      	uxtb	r3, r3
 800f03e:	f003 0303 	and.w	r3, r3, #3
 800f042:	2b00      	cmp	r3, #0
 800f044:	d001      	beq.n	800f04a <tcp_output+0x2de>
 800f046:	2301      	movs	r3, #1
 800f048:	e000      	b.n	800f04c <tcp_output+0x2e0>
 800f04a:	2300      	movs	r3, #0
 800f04c:	4423      	add	r3, r4
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d049      	beq.n	800f0e6 <tcp_output+0x37a>
      seg->next = NULL;
 800f052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f054:	2200      	movs	r2, #0
 800f056:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d105      	bne.n	800f06c <tcp_output+0x300>
        pcb->unacked = seg;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f064:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f068:	623b      	str	r3, [r7, #32]
 800f06a:	e03f      	b.n	800f0ec <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f06e:	68db      	ldr	r3, [r3, #12]
 800f070:	685b      	ldr	r3, [r3, #4]
 800f072:	4618      	mov	r0, r3
 800f074:	f7f9 ff73 	bl	8008f5e <lwip_htonl>
 800f078:	4604      	mov	r4, r0
 800f07a:	6a3b      	ldr	r3, [r7, #32]
 800f07c:	68db      	ldr	r3, [r3, #12]
 800f07e:	685b      	ldr	r3, [r3, #4]
 800f080:	4618      	mov	r0, r3
 800f082:	f7f9 ff6c 	bl	8008f5e <lwip_htonl>
 800f086:	4603      	mov	r3, r0
 800f088:	1ae3      	subs	r3, r4, r3
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	da24      	bge.n	800f0d8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	3370      	adds	r3, #112	; 0x70
 800f092:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f094:	e002      	b.n	800f09c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f096:	69fb      	ldr	r3, [r7, #28]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f09c:	69fb      	ldr	r3, [r7, #28]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d011      	beq.n	800f0c8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f0a4:	69fb      	ldr	r3, [r7, #28]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	68db      	ldr	r3, [r3, #12]
 800f0aa:	685b      	ldr	r3, [r3, #4]
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7f9 ff56 	bl	8008f5e <lwip_htonl>
 800f0b2:	4604      	mov	r4, r0
 800f0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b6:	68db      	ldr	r3, [r3, #12]
 800f0b8:	685b      	ldr	r3, [r3, #4]
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7f9 ff4f 	bl	8008f5e <lwip_htonl>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	dbe6      	blt.n	800f096 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f0c8:	69fb      	ldr	r3, [r7, #28]
 800f0ca:	681a      	ldr	r2, [r3, #0]
 800f0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ce:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f0d0:	69fb      	ldr	r3, [r7, #28]
 800f0d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0d4:	601a      	str	r2, [r3, #0]
 800f0d6:	e009      	b.n	800f0ec <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f0d8:	6a3b      	ldr	r3, [r7, #32]
 800f0da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0dc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f0de:	6a3b      	ldr	r3, [r7, #32]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	623b      	str	r3, [r7, #32]
 800f0e4:	e002      	b.n	800f0ec <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f0e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0e8:	f7fc fc43 	bl	800b972 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0f0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d012      	beq.n	800f11e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0fa:	68db      	ldr	r3, [r3, #12]
 800f0fc:	685b      	ldr	r3, [r3, #4]
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7f9 ff2d 	bl	8008f5e <lwip_htonl>
 800f104:	4602      	mov	r2, r0
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f10a:	1ad3      	subs	r3, r2, r3
 800f10c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f10e:	8912      	ldrh	r2, [r2, #8]
 800f110:	4413      	add	r3, r2
  while (seg != NULL &&
 800f112:	69ba      	ldr	r2, [r7, #24]
 800f114:	429a      	cmp	r2, r3
 800f116:	f4bf aed9 	bcs.w	800eecc <tcp_output+0x160>
 800f11a:	e000      	b.n	800f11e <tcp_output+0x3b2>
      break;
 800f11c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f122:	2b00      	cmp	r3, #0
 800f124:	d108      	bne.n	800f138 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2200      	movs	r2, #0
 800f12a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f12e:	e004      	b.n	800f13a <tcp_output+0x3ce>
    goto output_done;
 800f130:	bf00      	nop
 800f132:	e002      	b.n	800f13a <tcp_output+0x3ce>
    goto output_done;
 800f134:	bf00      	nop
 800f136:	e000      	b.n	800f13a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f138:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	8b5b      	ldrh	r3, [r3, #26]
 800f13e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f142:	b29a      	uxth	r2, r3
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f148:	2300      	movs	r3, #0
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3728      	adds	r7, #40	; 0x28
 800f14e:	46bd      	mov	sp, r7
 800f150:	bdb0      	pop	{r4, r5, r7, pc}
 800f152:	bf00      	nop

0800f154 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b082      	sub	sp, #8
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d106      	bne.n	800f170 <tcp_output_segment_busy+0x1c>
 800f162:	4b09      	ldr	r3, [pc, #36]	; (800f188 <tcp_output_segment_busy+0x34>)
 800f164:	f240 529a 	movw	r2, #1434	; 0x59a
 800f168:	4908      	ldr	r1, [pc, #32]	; (800f18c <tcp_output_segment_busy+0x38>)
 800f16a:	4809      	ldr	r0, [pc, #36]	; (800f190 <tcp_output_segment_busy+0x3c>)
 800f16c:	f006 f9f8 	bl	8015560 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	685b      	ldr	r3, [r3, #4]
 800f174:	7b9b      	ldrb	r3, [r3, #14]
 800f176:	2b01      	cmp	r3, #1
 800f178:	d001      	beq.n	800f17e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f17a:	2301      	movs	r3, #1
 800f17c:	e000      	b.n	800f180 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f17e:	2300      	movs	r3, #0
}
 800f180:	4618      	mov	r0, r3
 800f182:	3708      	adds	r7, #8
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}
 800f188:	0801a474 	.word	0x0801a474
 800f18c:	0801aa10 	.word	0x0801aa10
 800f190:	0801a4c8 	.word	0x0801a4c8

0800f194 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f194:	b5b0      	push	{r4, r5, r7, lr}
 800f196:	b08c      	sub	sp, #48	; 0x30
 800f198:	af04      	add	r7, sp, #16
 800f19a:	60f8      	str	r0, [r7, #12]
 800f19c:	60b9      	str	r1, [r7, #8]
 800f19e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d106      	bne.n	800f1b4 <tcp_output_segment+0x20>
 800f1a6:	4b63      	ldr	r3, [pc, #396]	; (800f334 <tcp_output_segment+0x1a0>)
 800f1a8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f1ac:	4962      	ldr	r1, [pc, #392]	; (800f338 <tcp_output_segment+0x1a4>)
 800f1ae:	4863      	ldr	r0, [pc, #396]	; (800f33c <tcp_output_segment+0x1a8>)
 800f1b0:	f006 f9d6 	bl	8015560 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d106      	bne.n	800f1c8 <tcp_output_segment+0x34>
 800f1ba:	4b5e      	ldr	r3, [pc, #376]	; (800f334 <tcp_output_segment+0x1a0>)
 800f1bc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f1c0:	495f      	ldr	r1, [pc, #380]	; (800f340 <tcp_output_segment+0x1ac>)
 800f1c2:	485e      	ldr	r0, [pc, #376]	; (800f33c <tcp_output_segment+0x1a8>)
 800f1c4:	f006 f9cc 	bl	8015560 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d106      	bne.n	800f1dc <tcp_output_segment+0x48>
 800f1ce:	4b59      	ldr	r3, [pc, #356]	; (800f334 <tcp_output_segment+0x1a0>)
 800f1d0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f1d4:	495b      	ldr	r1, [pc, #364]	; (800f344 <tcp_output_segment+0x1b0>)
 800f1d6:	4859      	ldr	r0, [pc, #356]	; (800f33c <tcp_output_segment+0x1a8>)
 800f1d8:	f006 f9c2 	bl	8015560 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f1dc:	68f8      	ldr	r0, [r7, #12]
 800f1de:	f7ff ffb9 	bl	800f154 <tcp_output_segment_busy>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d001      	beq.n	800f1ec <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	e09f      	b.n	800f32c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	68dc      	ldr	r4, [r3, #12]
 800f1f4:	4610      	mov	r0, r2
 800f1f6:	f7f9 feb2 	bl	8008f5e <lwip_htonl>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	68dc      	ldr	r4, [r3, #12]
 800f206:	4610      	mov	r0, r2
 800f208:	f7f9 fe94 	bl	8008f34 <lwip_htons>
 800f20c:	4603      	mov	r3, r0
 800f20e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f214:	68ba      	ldr	r2, [r7, #8]
 800f216:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f218:	441a      	add	r2, r3
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	68db      	ldr	r3, [r3, #12]
 800f222:	3314      	adds	r3, #20
 800f224:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	7a9b      	ldrb	r3, [r3, #10]
 800f22a:	f003 0301 	and.w	r3, r3, #1
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d015      	beq.n	800f25e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	3304      	adds	r3, #4
 800f236:	461a      	mov	r2, r3
 800f238:	6879      	ldr	r1, [r7, #4]
 800f23a:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 800f23e:	f7fc fe8f 	bl	800bf60 <tcp_eff_send_mss_netif>
 800f242:	4603      	mov	r3, r0
 800f244:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f246:	8b7b      	ldrh	r3, [r7, #26]
 800f248:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7f9 fe86 	bl	8008f5e <lwip_htonl>
 800f252:	4602      	mov	r2, r0
 800f254:	69fb      	ldr	r3, [r7, #28]
 800f256:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f258:	69fb      	ldr	r3, [r7, #28]
 800f25a:	3304      	adds	r3, #4
 800f25c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f264:	2b00      	cmp	r3, #0
 800f266:	da02      	bge.n	800f26e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	2200      	movs	r2, #0
 800f26c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f272:	2b00      	cmp	r3, #0
 800f274:	d10c      	bne.n	800f290 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f276:	4b34      	ldr	r3, [pc, #208]	; (800f348 <tcp_output_segment+0x1b4>)
 800f278:	681a      	ldr	r2, [r3, #0]
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	68db      	ldr	r3, [r3, #12]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	4618      	mov	r0, r3
 800f286:	f7f9 fe6a 	bl	8008f5e <lwip_htonl>
 800f28a:	4602      	mov	r2, r0
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	68da      	ldr	r2, [r3, #12]
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	685b      	ldr	r3, [r3, #4]
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	1ad3      	subs	r3, r2, r3
 800f29c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	8959      	ldrh	r1, [r3, #10]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	8b3a      	ldrh	r2, [r7, #24]
 800f2aa:	1a8a      	subs	r2, r1, r2
 800f2ac:	b292      	uxth	r2, r2
 800f2ae:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	685b      	ldr	r3, [r3, #4]
 800f2b4:	8919      	ldrh	r1, [r3, #8]
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	685b      	ldr	r3, [r3, #4]
 800f2ba:	8b3a      	ldrh	r2, [r7, #24]
 800f2bc:	1a8a      	subs	r2, r1, r2
 800f2be:	b292      	uxth	r2, r2
 800f2c0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	685b      	ldr	r3, [r3, #4]
 800f2c6:	68fa      	ldr	r2, [r7, #12]
 800f2c8:	68d2      	ldr	r2, [r2, #12]
 800f2ca:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	68db      	ldr	r3, [r3, #12]
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	741a      	strb	r2, [r3, #16]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	68db      	ldr	r3, [r3, #12]
 800f2dc:	f103 0214 	add.w	r2, r3, #20
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	7a9b      	ldrb	r3, [r3, #10]
 800f2e4:	009b      	lsls	r3, r3, #2
 800f2e6:	f003 0304 	and.w	r3, r3, #4
 800f2ea:	4413      	add	r3, r2
 800f2ec:	69fa      	ldr	r2, [r7, #28]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d006      	beq.n	800f300 <tcp_output_segment+0x16c>
 800f2f2:	4b10      	ldr	r3, [pc, #64]	; (800f334 <tcp_output_segment+0x1a0>)
 800f2f4:	f240 621c 	movw	r2, #1564	; 0x61c
 800f2f8:	4914      	ldr	r1, [pc, #80]	; (800f34c <tcp_output_segment+0x1b8>)
 800f2fa:	4810      	ldr	r0, [pc, #64]	; (800f33c <tcp_output_segment+0x1a8>)
 800f2fc:	f006 f930 	bl	8015560 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	6858      	ldr	r0, [r3, #4]
 800f304:	68b9      	ldr	r1, [r7, #8]
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	1d1c      	adds	r4, r3, #4
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	7add      	ldrb	r5, [r3, #11]
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	7a9b      	ldrb	r3, [r3, #10]
 800f312:	687a      	ldr	r2, [r7, #4]
 800f314:	9202      	str	r2, [sp, #8]
 800f316:	2206      	movs	r2, #6
 800f318:	9201      	str	r2, [sp, #4]
 800f31a:	9300      	str	r3, [sp, #0]
 800f31c:	462b      	mov	r3, r5
 800f31e:	4622      	mov	r2, r4
 800f320:	f004 fb6c 	bl	80139fc <ip4_output_if>
 800f324:	4603      	mov	r3, r0
 800f326:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f328:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3720      	adds	r7, #32
 800f330:	46bd      	mov	sp, r7
 800f332:	bdb0      	pop	{r4, r5, r7, pc}
 800f334:	0801a474 	.word	0x0801a474
 800f338:	0801aa38 	.word	0x0801aa38
 800f33c:	0801a4c8 	.word	0x0801a4c8
 800f340:	0801aa58 	.word	0x0801aa58
 800f344:	0801aa78 	.word	0x0801aa78
 800f348:	20006a24 	.word	0x20006a24
 800f34c:	0801aa9c 	.word	0x0801aa9c

0800f350 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f350:	b5b0      	push	{r4, r5, r7, lr}
 800f352:	b084      	sub	sp, #16
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d106      	bne.n	800f36c <tcp_rexmit_rto_prepare+0x1c>
 800f35e:	4b31      	ldr	r3, [pc, #196]	; (800f424 <tcp_rexmit_rto_prepare+0xd4>)
 800f360:	f240 6263 	movw	r2, #1635	; 0x663
 800f364:	4930      	ldr	r1, [pc, #192]	; (800f428 <tcp_rexmit_rto_prepare+0xd8>)
 800f366:	4831      	ldr	r0, [pc, #196]	; (800f42c <tcp_rexmit_rto_prepare+0xdc>)
 800f368:	f006 f8fa 	bl	8015560 <iprintf>

  if (pcb->unacked == NULL) {
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f370:	2b00      	cmp	r3, #0
 800f372:	d102      	bne.n	800f37a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f374:	f06f 0305 	mvn.w	r3, #5
 800f378:	e050      	b.n	800f41c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f37e:	60fb      	str	r3, [r7, #12]
 800f380:	e00b      	b.n	800f39a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f382:	68f8      	ldr	r0, [r7, #12]
 800f384:	f7ff fee6 	bl	800f154 <tcp_output_segment_busy>
 800f388:	4603      	mov	r3, r0
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d002      	beq.n	800f394 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f38e:	f06f 0305 	mvn.w	r3, #5
 800f392:	e043      	b.n	800f41c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	60fb      	str	r3, [r7, #12]
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d1ef      	bne.n	800f382 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f3a2:	68f8      	ldr	r0, [r7, #12]
 800f3a4:	f7ff fed6 	bl	800f154 <tcp_output_segment_busy>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d002      	beq.n	800f3b4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f3ae:	f06f 0305 	mvn.w	r3, #5
 800f3b2:	e033      	b.n	800f41c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	8b5b      	ldrh	r3, [r3, #26]
 800f3ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f3d2:	b29a      	uxth	r2, r3
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	68db      	ldr	r3, [r3, #12]
 800f3dc:	685b      	ldr	r3, [r3, #4]
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7f9 fdbd 	bl	8008f5e <lwip_htonl>
 800f3e4:	4604      	mov	r4, r0
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	891b      	ldrh	r3, [r3, #8]
 800f3ea:	461d      	mov	r5, r3
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	68db      	ldr	r3, [r3, #12]
 800f3f0:	899b      	ldrh	r3, [r3, #12]
 800f3f2:	b29b      	uxth	r3, r3
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7f9 fd9d 	bl	8008f34 <lwip_htons>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	b2db      	uxtb	r3, r3
 800f3fe:	f003 0303 	and.w	r3, r3, #3
 800f402:	2b00      	cmp	r3, #0
 800f404:	d001      	beq.n	800f40a <tcp_rexmit_rto_prepare+0xba>
 800f406:	2301      	movs	r3, #1
 800f408:	e000      	b.n	800f40c <tcp_rexmit_rto_prepare+0xbc>
 800f40a:	2300      	movs	r3, #0
 800f40c:	442b      	add	r3, r5
 800f40e:	18e2      	adds	r2, r4, r3
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2200      	movs	r2, #0
 800f418:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f41a:	2300      	movs	r3, #0
}
 800f41c:	4618      	mov	r0, r3
 800f41e:	3710      	adds	r7, #16
 800f420:	46bd      	mov	sp, r7
 800f422:	bdb0      	pop	{r4, r5, r7, pc}
 800f424:	0801a474 	.word	0x0801a474
 800f428:	0801aab0 	.word	0x0801aab0
 800f42c:	0801a4c8 	.word	0x0801a4c8

0800f430 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d106      	bne.n	800f44c <tcp_rexmit_rto_commit+0x1c>
 800f43e:	4b0d      	ldr	r3, [pc, #52]	; (800f474 <tcp_rexmit_rto_commit+0x44>)
 800f440:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f444:	490c      	ldr	r1, [pc, #48]	; (800f478 <tcp_rexmit_rto_commit+0x48>)
 800f446:	480d      	ldr	r0, [pc, #52]	; (800f47c <tcp_rexmit_rto_commit+0x4c>)
 800f448:	f006 f88a 	bl	8015560 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f452:	2bff      	cmp	r3, #255	; 0xff
 800f454:	d007      	beq.n	800f466 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f45c:	3301      	adds	r3, #1
 800f45e:	b2da      	uxtb	r2, r3
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f7ff fc80 	bl	800ed6c <tcp_output>
}
 800f46c:	bf00      	nop
 800f46e:	3708      	adds	r7, #8
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}
 800f474:	0801a474 	.word	0x0801a474
 800f478:	0801aad4 	.word	0x0801aad4
 800f47c:	0801a4c8 	.word	0x0801a4c8

0800f480 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b082      	sub	sp, #8
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d106      	bne.n	800f49c <tcp_rexmit_rto+0x1c>
 800f48e:	4b0a      	ldr	r3, [pc, #40]	; (800f4b8 <tcp_rexmit_rto+0x38>)
 800f490:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f494:	4909      	ldr	r1, [pc, #36]	; (800f4bc <tcp_rexmit_rto+0x3c>)
 800f496:	480a      	ldr	r0, [pc, #40]	; (800f4c0 <tcp_rexmit_rto+0x40>)
 800f498:	f006 f862 	bl	8015560 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f7ff ff57 	bl	800f350 <tcp_rexmit_rto_prepare>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d102      	bne.n	800f4ae <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f7ff ffc1 	bl	800f430 <tcp_rexmit_rto_commit>
  }
}
 800f4ae:	bf00      	nop
 800f4b0:	3708      	adds	r7, #8
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}
 800f4b6:	bf00      	nop
 800f4b8:	0801a474 	.word	0x0801a474
 800f4bc:	0801aaf8 	.word	0x0801aaf8
 800f4c0:	0801a4c8 	.word	0x0801a4c8

0800f4c4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f4c4:	b590      	push	{r4, r7, lr}
 800f4c6:	b085      	sub	sp, #20
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d106      	bne.n	800f4e0 <tcp_rexmit+0x1c>
 800f4d2:	4b2f      	ldr	r3, [pc, #188]	; (800f590 <tcp_rexmit+0xcc>)
 800f4d4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800f4d8:	492e      	ldr	r1, [pc, #184]	; (800f594 <tcp_rexmit+0xd0>)
 800f4da:	482f      	ldr	r0, [pc, #188]	; (800f598 <tcp_rexmit+0xd4>)
 800f4dc:	f006 f840 	bl	8015560 <iprintf>

  if (pcb->unacked == NULL) {
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d102      	bne.n	800f4ee <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f4e8:	f06f 0305 	mvn.w	r3, #5
 800f4ec:	e04c      	b.n	800f588 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4f2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f4f4:	68b8      	ldr	r0, [r7, #8]
 800f4f6:	f7ff fe2d 	bl	800f154 <tcp_output_segment_busy>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d002      	beq.n	800f506 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f500:	f06f 0305 	mvn.w	r3, #5
 800f504:	e040      	b.n	800f588 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	681a      	ldr	r2, [r3, #0]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	336c      	adds	r3, #108	; 0x6c
 800f512:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f514:	e002      	b.n	800f51c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d011      	beq.n	800f548 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	68db      	ldr	r3, [r3, #12]
 800f52a:	685b      	ldr	r3, [r3, #4]
 800f52c:	4618      	mov	r0, r3
 800f52e:	f7f9 fd16 	bl	8008f5e <lwip_htonl>
 800f532:	4604      	mov	r4, r0
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	68db      	ldr	r3, [r3, #12]
 800f538:	685b      	ldr	r3, [r3, #4]
 800f53a:	4618      	mov	r0, r3
 800f53c:	f7f9 fd0f 	bl	8008f5e <lwip_htonl>
 800f540:	4603      	mov	r3, r0
 800f542:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f544:	2b00      	cmp	r3, #0
 800f546:	dbe6      	blt.n	800f516 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	681a      	ldr	r2, [r3, #0]
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	68ba      	ldr	r2, [r7, #8]
 800f554:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d103      	bne.n	800f566 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2200      	movs	r2, #0
 800f562:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f56c:	2bff      	cmp	r3, #255	; 0xff
 800f56e:	d007      	beq.n	800f580 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f576:	3301      	adds	r3, #1
 800f578:	b2da      	uxtb	r2, r3
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2200      	movs	r2, #0
 800f584:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f586:	2300      	movs	r3, #0
}
 800f588:	4618      	mov	r0, r3
 800f58a:	3714      	adds	r7, #20
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd90      	pop	{r4, r7, pc}
 800f590:	0801a474 	.word	0x0801a474
 800f594:	0801ab14 	.word	0x0801ab14
 800f598:	0801a4c8 	.word	0x0801a4c8

0800f59c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b082      	sub	sp, #8
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d106      	bne.n	800f5b8 <tcp_rexmit_fast+0x1c>
 800f5aa:	4b2a      	ldr	r3, [pc, #168]	; (800f654 <tcp_rexmit_fast+0xb8>)
 800f5ac:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f5b0:	4929      	ldr	r1, [pc, #164]	; (800f658 <tcp_rexmit_fast+0xbc>)
 800f5b2:	482a      	ldr	r0, [pc, #168]	; (800f65c <tcp_rexmit_fast+0xc0>)
 800f5b4:	f005 ffd4 	bl	8015560 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d044      	beq.n	800f64a <tcp_rexmit_fast+0xae>
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	8b5b      	ldrh	r3, [r3, #26]
 800f5c4:	f003 0304 	and.w	r3, r3, #4
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d13e      	bne.n	800f64a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f7ff ff79 	bl	800f4c4 <tcp_rexmit>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d138      	bne.n	800f64a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	bf28      	it	cs
 800f5e8:	4613      	movcs	r3, r2
 800f5ea:	b29b      	uxth	r3, r3
 800f5ec:	0fda      	lsrs	r2, r3, #31
 800f5ee:	4413      	add	r3, r2
 800f5f0:	105b      	asrs	r3, r3, #1
 800f5f2:	b29a      	uxth	r2, r3
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f600:	461a      	mov	r2, r3
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f606:	005b      	lsls	r3, r3, #1
 800f608:	429a      	cmp	r2, r3
 800f60a:	d206      	bcs.n	800f61a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f610:	005b      	lsls	r3, r3, #1
 800f612:	b29a      	uxth	r2, r3
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f624:	4619      	mov	r1, r3
 800f626:	0049      	lsls	r1, r1, #1
 800f628:	440b      	add	r3, r1
 800f62a:	b29b      	uxth	r3, r3
 800f62c:	4413      	add	r3, r2
 800f62e:	b29a      	uxth	r2, r3
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	8b5b      	ldrh	r3, [r3, #26]
 800f63a:	f043 0304 	orr.w	r3, r3, #4
 800f63e:	b29a      	uxth	r2, r3
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2200      	movs	r2, #0
 800f648:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f64a:	bf00      	nop
 800f64c:	3708      	adds	r7, #8
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}
 800f652:	bf00      	nop
 800f654:	0801a474 	.word	0x0801a474
 800f658:	0801ab2c 	.word	0x0801ab2c
 800f65c:	0801a4c8 	.word	0x0801a4c8

0800f660 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b086      	sub	sp, #24
 800f664:	af00      	add	r7, sp, #0
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	607b      	str	r3, [r7, #4]
 800f66a:	460b      	mov	r3, r1
 800f66c:	817b      	strh	r3, [r7, #10]
 800f66e:	4613      	mov	r3, r2
 800f670:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f672:	897a      	ldrh	r2, [r7, #10]
 800f674:	893b      	ldrh	r3, [r7, #8]
 800f676:	4413      	add	r3, r2
 800f678:	b29b      	uxth	r3, r3
 800f67a:	3314      	adds	r3, #20
 800f67c:	b29b      	uxth	r3, r3
 800f67e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f682:	4619      	mov	r1, r3
 800f684:	2022      	movs	r0, #34	; 0x22
 800f686:	f7fa fc0d 	bl	8009ea4 <pbuf_alloc>
 800f68a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d04d      	beq.n	800f72e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f692:	897b      	ldrh	r3, [r7, #10]
 800f694:	3313      	adds	r3, #19
 800f696:	697a      	ldr	r2, [r7, #20]
 800f698:	8952      	ldrh	r2, [r2, #10]
 800f69a:	4293      	cmp	r3, r2
 800f69c:	db06      	blt.n	800f6ac <tcp_output_alloc_header_common+0x4c>
 800f69e:	4b26      	ldr	r3, [pc, #152]	; (800f738 <tcp_output_alloc_header_common+0xd8>)
 800f6a0:	f240 7223 	movw	r2, #1827	; 0x723
 800f6a4:	4925      	ldr	r1, [pc, #148]	; (800f73c <tcp_output_alloc_header_common+0xdc>)
 800f6a6:	4826      	ldr	r0, [pc, #152]	; (800f740 <tcp_output_alloc_header_common+0xe0>)
 800f6a8:	f005 ff5a 	bl	8015560 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	685b      	ldr	r3, [r3, #4]
 800f6b0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f6b2:	8c3b      	ldrh	r3, [r7, #32]
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f7f9 fc3d 	bl	8008f34 <lwip_htons>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	461a      	mov	r2, r3
 800f6be:	693b      	ldr	r3, [r7, #16]
 800f6c0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f6c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7f9 fc35 	bl	8008f34 <lwip_htons>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	461a      	mov	r2, r3
 800f6ce:	693b      	ldr	r3, [r7, #16]
 800f6d0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	687a      	ldr	r2, [r7, #4]
 800f6d6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f6d8:	68f8      	ldr	r0, [r7, #12]
 800f6da:	f7f9 fc40 	bl	8008f5e <lwip_htonl>
 800f6de:	4602      	mov	r2, r0
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f6e4:	897b      	ldrh	r3, [r7, #10]
 800f6e6:	089b      	lsrs	r3, r3, #2
 800f6e8:	b29b      	uxth	r3, r3
 800f6ea:	3305      	adds	r3, #5
 800f6ec:	b29b      	uxth	r3, r3
 800f6ee:	031b      	lsls	r3, r3, #12
 800f6f0:	b29a      	uxth	r2, r3
 800f6f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f6f6:	b29b      	uxth	r3, r3
 800f6f8:	4313      	orrs	r3, r2
 800f6fa:	b29b      	uxth	r3, r3
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7f9 fc19 	bl	8008f34 <lwip_htons>
 800f702:	4603      	mov	r3, r0
 800f704:	461a      	mov	r2, r3
 800f706:	693b      	ldr	r3, [r7, #16]
 800f708:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f70a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f70c:	4618      	mov	r0, r3
 800f70e:	f7f9 fc11 	bl	8008f34 <lwip_htons>
 800f712:	4603      	mov	r3, r0
 800f714:	461a      	mov	r2, r3
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f71a:	693b      	ldr	r3, [r7, #16]
 800f71c:	2200      	movs	r2, #0
 800f71e:	741a      	strb	r2, [r3, #16]
 800f720:	2200      	movs	r2, #0
 800f722:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f724:	693b      	ldr	r3, [r7, #16]
 800f726:	2200      	movs	r2, #0
 800f728:	749a      	strb	r2, [r3, #18]
 800f72a:	2200      	movs	r2, #0
 800f72c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f72e:	697b      	ldr	r3, [r7, #20]
}
 800f730:	4618      	mov	r0, r3
 800f732:	3718      	adds	r7, #24
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}
 800f738:	0801a474 	.word	0x0801a474
 800f73c:	0801ab4c 	.word	0x0801ab4c
 800f740:	0801a4c8 	.word	0x0801a4c8

0800f744 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f744:	b5b0      	push	{r4, r5, r7, lr}
 800f746:	b08a      	sub	sp, #40	; 0x28
 800f748:	af04      	add	r7, sp, #16
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	607b      	str	r3, [r7, #4]
 800f74e:	460b      	mov	r3, r1
 800f750:	817b      	strh	r3, [r7, #10]
 800f752:	4613      	mov	r3, r2
 800f754:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d106      	bne.n	800f76a <tcp_output_alloc_header+0x26>
 800f75c:	4b15      	ldr	r3, [pc, #84]	; (800f7b4 <tcp_output_alloc_header+0x70>)
 800f75e:	f240 7242 	movw	r2, #1858	; 0x742
 800f762:	4915      	ldr	r1, [pc, #84]	; (800f7b8 <tcp_output_alloc_header+0x74>)
 800f764:	4815      	ldr	r0, [pc, #84]	; (800f7bc <tcp_output_alloc_header+0x78>)
 800f766:	f005 fefb 	bl	8015560 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	8adb      	ldrh	r3, [r3, #22]
 800f772:	68fa      	ldr	r2, [r7, #12]
 800f774:	8b12      	ldrh	r2, [r2, #24]
 800f776:	68f9      	ldr	r1, [r7, #12]
 800f778:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800f77a:	893d      	ldrh	r5, [r7, #8]
 800f77c:	897c      	ldrh	r4, [r7, #10]
 800f77e:	9103      	str	r1, [sp, #12]
 800f780:	2110      	movs	r1, #16
 800f782:	9102      	str	r1, [sp, #8]
 800f784:	9201      	str	r2, [sp, #4]
 800f786:	9300      	str	r3, [sp, #0]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	462a      	mov	r2, r5
 800f78c:	4621      	mov	r1, r4
 800f78e:	f7ff ff67 	bl	800f660 <tcp_output_alloc_header_common>
 800f792:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d006      	beq.n	800f7a8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f79e:	68fa      	ldr	r2, [r7, #12]
 800f7a0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f7a2:	441a      	add	r2, r3
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f7a8:	697b      	ldr	r3, [r7, #20]
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3718      	adds	r7, #24
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bdb0      	pop	{r4, r5, r7, pc}
 800f7b2:	bf00      	nop
 800f7b4:	0801a474 	.word	0x0801a474
 800f7b8:	0801ab7c 	.word	0x0801ab7c
 800f7bc:	0801a4c8 	.word	0x0801a4c8

0800f7c0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b088      	sub	sp, #32
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	60f8      	str	r0, [r7, #12]
 800f7c8:	60b9      	str	r1, [r7, #8]
 800f7ca:	4611      	mov	r1, r2
 800f7cc:	461a      	mov	r2, r3
 800f7ce:	460b      	mov	r3, r1
 800f7d0:	71fb      	strb	r3, [r7, #7]
 800f7d2:	4613      	mov	r3, r2
 800f7d4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d106      	bne.n	800f7ee <tcp_output_fill_options+0x2e>
 800f7e0:	4b13      	ldr	r3, [pc, #76]	; (800f830 <tcp_output_fill_options+0x70>)
 800f7e2:	f240 7256 	movw	r2, #1878	; 0x756
 800f7e6:	4913      	ldr	r1, [pc, #76]	; (800f834 <tcp_output_fill_options+0x74>)
 800f7e8:	4813      	ldr	r0, [pc, #76]	; (800f838 <tcp_output_fill_options+0x78>)
 800f7ea:	f005 feb9 	bl	8015560 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	685b      	ldr	r3, [r3, #4]
 800f7f2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f7f4:	69bb      	ldr	r3, [r7, #24]
 800f7f6:	3314      	adds	r3, #20
 800f7f8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f7fa:	69bb      	ldr	r3, [r7, #24]
 800f7fc:	f103 0214 	add.w	r2, r3, #20
 800f800:	8bfb      	ldrh	r3, [r7, #30]
 800f802:	009b      	lsls	r3, r3, #2
 800f804:	4619      	mov	r1, r3
 800f806:	79fb      	ldrb	r3, [r7, #7]
 800f808:	009b      	lsls	r3, r3, #2
 800f80a:	f003 0304 	and.w	r3, r3, #4
 800f80e:	440b      	add	r3, r1
 800f810:	4413      	add	r3, r2
 800f812:	697a      	ldr	r2, [r7, #20]
 800f814:	429a      	cmp	r2, r3
 800f816:	d006      	beq.n	800f826 <tcp_output_fill_options+0x66>
 800f818:	4b05      	ldr	r3, [pc, #20]	; (800f830 <tcp_output_fill_options+0x70>)
 800f81a:	f240 7275 	movw	r2, #1909	; 0x775
 800f81e:	4907      	ldr	r1, [pc, #28]	; (800f83c <tcp_output_fill_options+0x7c>)
 800f820:	4805      	ldr	r0, [pc, #20]	; (800f838 <tcp_output_fill_options+0x78>)
 800f822:	f005 fe9d 	bl	8015560 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f826:	bf00      	nop
 800f828:	3720      	adds	r7, #32
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}
 800f82e:	bf00      	nop
 800f830:	0801a474 	.word	0x0801a474
 800f834:	0801aba4 	.word	0x0801aba4
 800f838:	0801a4c8 	.word	0x0801a4c8
 800f83c:	0801aa9c 	.word	0x0801aa9c

0800f840 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b08a      	sub	sp, #40	; 0x28
 800f844:	af04      	add	r7, sp, #16
 800f846:	60f8      	str	r0, [r7, #12]
 800f848:	60b9      	str	r1, [r7, #8]
 800f84a:	607a      	str	r2, [r7, #4]
 800f84c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d106      	bne.n	800f862 <tcp_output_control_segment+0x22>
 800f854:	4b1c      	ldr	r3, [pc, #112]	; (800f8c8 <tcp_output_control_segment+0x88>)
 800f856:	f240 7287 	movw	r2, #1927	; 0x787
 800f85a:	491c      	ldr	r1, [pc, #112]	; (800f8cc <tcp_output_control_segment+0x8c>)
 800f85c:	481c      	ldr	r0, [pc, #112]	; (800f8d0 <tcp_output_control_segment+0x90>)
 800f85e:	f005 fe7f 	bl	8015560 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f862:	683a      	ldr	r2, [r7, #0]
 800f864:	6879      	ldr	r1, [r7, #4]
 800f866:	68f8      	ldr	r0, [r7, #12]
 800f868:	f7fe ff40 	bl	800e6ec <tcp_route>
 800f86c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d102      	bne.n	800f87a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f874:	23fc      	movs	r3, #252	; 0xfc
 800f876:	75fb      	strb	r3, [r7, #23]
 800f878:	e01c      	b.n	800f8b4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d006      	beq.n	800f88e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	7adb      	ldrb	r3, [r3, #11]
 800f884:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	7a9b      	ldrb	r3, [r3, #10]
 800f88a:	757b      	strb	r3, [r7, #21]
 800f88c:	e003      	b.n	800f896 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f88e:	23ff      	movs	r3, #255	; 0xff
 800f890:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f892:	2300      	movs	r3, #0
 800f894:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f896:	7dba      	ldrb	r2, [r7, #22]
 800f898:	693b      	ldr	r3, [r7, #16]
 800f89a:	9302      	str	r3, [sp, #8]
 800f89c:	2306      	movs	r3, #6
 800f89e:	9301      	str	r3, [sp, #4]
 800f8a0:	7d7b      	ldrb	r3, [r7, #21]
 800f8a2:	9300      	str	r3, [sp, #0]
 800f8a4:	4613      	mov	r3, r2
 800f8a6:	683a      	ldr	r2, [r7, #0]
 800f8a8:	6879      	ldr	r1, [r7, #4]
 800f8aa:	68b8      	ldr	r0, [r7, #8]
 800f8ac:	f004 f8a6 	bl	80139fc <ip4_output_if>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f8b4:	68b8      	ldr	r0, [r7, #8]
 800f8b6:	f7fa fdd9 	bl	800a46c <pbuf_free>
  return err;
 800f8ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f8be:	4618      	mov	r0, r3
 800f8c0:	3718      	adds	r7, #24
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}
 800f8c6:	bf00      	nop
 800f8c8:	0801a474 	.word	0x0801a474
 800f8cc:	0801abcc 	.word	0x0801abcc
 800f8d0:	0801a4c8 	.word	0x0801a4c8

0800f8d4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f8d4:	b590      	push	{r4, r7, lr}
 800f8d6:	b08b      	sub	sp, #44	; 0x2c
 800f8d8:	af04      	add	r7, sp, #16
 800f8da:	60f8      	str	r0, [r7, #12]
 800f8dc:	60b9      	str	r1, [r7, #8]
 800f8de:	607a      	str	r2, [r7, #4]
 800f8e0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d106      	bne.n	800f8f6 <tcp_rst+0x22>
 800f8e8:	4b1e      	ldr	r3, [pc, #120]	; (800f964 <tcp_rst+0x90>)
 800f8ea:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800f8ee:	491e      	ldr	r1, [pc, #120]	; (800f968 <tcp_rst+0x94>)
 800f8f0:	481e      	ldr	r0, [pc, #120]	; (800f96c <tcp_rst+0x98>)
 800f8f2:	f005 fe35 	bl	8015560 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d106      	bne.n	800f90a <tcp_rst+0x36>
 800f8fc:	4b19      	ldr	r3, [pc, #100]	; (800f964 <tcp_rst+0x90>)
 800f8fe:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800f902:	491b      	ldr	r1, [pc, #108]	; (800f970 <tcp_rst+0x9c>)
 800f904:	4819      	ldr	r0, [pc, #100]	; (800f96c <tcp_rst+0x98>)
 800f906:	f005 fe2b 	bl	8015560 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f90a:	2300      	movs	r3, #0
 800f90c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f90e:	2308      	movs	r3, #8
 800f910:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f912:	7dfb      	ldrb	r3, [r7, #23]
 800f914:	b29c      	uxth	r4, r3
 800f916:	68b8      	ldr	r0, [r7, #8]
 800f918:	f7f9 fb21 	bl	8008f5e <lwip_htonl>
 800f91c:	4602      	mov	r2, r0
 800f91e:	8abb      	ldrh	r3, [r7, #20]
 800f920:	9303      	str	r3, [sp, #12]
 800f922:	2314      	movs	r3, #20
 800f924:	9302      	str	r3, [sp, #8]
 800f926:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f928:	9301      	str	r3, [sp, #4]
 800f92a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f92c:	9300      	str	r3, [sp, #0]
 800f92e:	4613      	mov	r3, r2
 800f930:	2200      	movs	r2, #0
 800f932:	4621      	mov	r1, r4
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f7ff fe93 	bl	800f660 <tcp_output_alloc_header_common>
 800f93a:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f93c:	693b      	ldr	r3, [r7, #16]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d00c      	beq.n	800f95c <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f942:	7dfb      	ldrb	r3, [r7, #23]
 800f944:	2200      	movs	r2, #0
 800f946:	6939      	ldr	r1, [r7, #16]
 800f948:	68f8      	ldr	r0, [r7, #12]
 800f94a:	f7ff ff39 	bl	800f7c0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f950:	683a      	ldr	r2, [r7, #0]
 800f952:	6939      	ldr	r1, [r7, #16]
 800f954:	68f8      	ldr	r0, [r7, #12]
 800f956:	f7ff ff73 	bl	800f840 <tcp_output_control_segment>
 800f95a:	e000      	b.n	800f95e <tcp_rst+0x8a>
    return;
 800f95c:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f95e:	371c      	adds	r7, #28
 800f960:	46bd      	mov	sp, r7
 800f962:	bd90      	pop	{r4, r7, pc}
 800f964:	0801a474 	.word	0x0801a474
 800f968:	0801abf8 	.word	0x0801abf8
 800f96c:	0801a4c8 	.word	0x0801a4c8
 800f970:	0801ac14 	.word	0x0801ac14

0800f974 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f974:	b590      	push	{r4, r7, lr}
 800f976:	b087      	sub	sp, #28
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f97c:	2300      	movs	r3, #0
 800f97e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f980:	2300      	movs	r3, #0
 800f982:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d106      	bne.n	800f998 <tcp_send_empty_ack+0x24>
 800f98a:	4b28      	ldr	r3, [pc, #160]	; (800fa2c <tcp_send_empty_ack+0xb8>)
 800f98c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800f990:	4927      	ldr	r1, [pc, #156]	; (800fa30 <tcp_send_empty_ack+0xbc>)
 800f992:	4828      	ldr	r0, [pc, #160]	; (800fa34 <tcp_send_empty_ack+0xc0>)
 800f994:	f005 fde4 	bl	8015560 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f998:	7dfb      	ldrb	r3, [r7, #23]
 800f99a:	009b      	lsls	r3, r3, #2
 800f99c:	b2db      	uxtb	r3, r3
 800f99e:	f003 0304 	and.w	r3, r3, #4
 800f9a2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f9a4:	7d7b      	ldrb	r3, [r7, #21]
 800f9a6:	b29c      	uxth	r4, r3
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f7f9 fad6 	bl	8008f5e <lwip_htonl>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	4621      	mov	r1, r4
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f7ff fec3 	bl	800f744 <tcp_output_alloc_header>
 800f9be:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f9c0:	693b      	ldr	r3, [r7, #16]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d109      	bne.n	800f9da <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	8b5b      	ldrh	r3, [r3, #26]
 800f9ca:	f043 0303 	orr.w	r3, r3, #3
 800f9ce:	b29a      	uxth	r2, r3
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f9d4:	f06f 0301 	mvn.w	r3, #1
 800f9d8:	e023      	b.n	800fa22 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f9da:	7dbb      	ldrb	r3, [r7, #22]
 800f9dc:	7dfa      	ldrb	r2, [r7, #23]
 800f9de:	6939      	ldr	r1, [r7, #16]
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f7ff feed 	bl	800f7c0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f9e6:	687a      	ldr	r2, [r7, #4]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	3304      	adds	r3, #4
 800f9ec:	6939      	ldr	r1, [r7, #16]
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f7ff ff26 	bl	800f840 <tcp_output_control_segment>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f9f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d007      	beq.n	800fa10 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	8b5b      	ldrh	r3, [r3, #26]
 800fa04:	f043 0303 	orr.w	r3, r3, #3
 800fa08:	b29a      	uxth	r2, r3
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	835a      	strh	r2, [r3, #26]
 800fa0e:	e006      	b.n	800fa1e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	8b5b      	ldrh	r3, [r3, #26]
 800fa14:	f023 0303 	bic.w	r3, r3, #3
 800fa18:	b29a      	uxth	r2, r3
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800fa1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	371c      	adds	r7, #28
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd90      	pop	{r4, r7, pc}
 800fa2a:	bf00      	nop
 800fa2c:	0801a474 	.word	0x0801a474
 800fa30:	0801ac30 	.word	0x0801ac30
 800fa34:	0801a4c8 	.word	0x0801a4c8

0800fa38 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800fa38:	b590      	push	{r4, r7, lr}
 800fa3a:	b087      	sub	sp, #28
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fa40:	2300      	movs	r3, #0
 800fa42:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d106      	bne.n	800fa58 <tcp_keepalive+0x20>
 800fa4a:	4b18      	ldr	r3, [pc, #96]	; (800faac <tcp_keepalive+0x74>)
 800fa4c:	f640 0224 	movw	r2, #2084	; 0x824
 800fa50:	4917      	ldr	r1, [pc, #92]	; (800fab0 <tcp_keepalive+0x78>)
 800fa52:	4818      	ldr	r0, [pc, #96]	; (800fab4 <tcp_keepalive+0x7c>)
 800fa54:	f005 fd84 	bl	8015560 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800fa58:	7dfb      	ldrb	r3, [r7, #23]
 800fa5a:	b29c      	uxth	r4, r3
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa60:	3b01      	subs	r3, #1
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7f9 fa7b 	bl	8008f5e <lwip_htonl>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	4621      	mov	r1, r4
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f7ff fe68 	bl	800f744 <tcp_output_alloc_header>
 800fa74:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fa76:	693b      	ldr	r3, [r7, #16]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d102      	bne.n	800fa82 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800fa7c:	f04f 33ff 	mov.w	r3, #4294967295
 800fa80:	e010      	b.n	800faa4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fa82:	7dfb      	ldrb	r3, [r7, #23]
 800fa84:	2200      	movs	r2, #0
 800fa86:	6939      	ldr	r1, [r7, #16]
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f7ff fe99 	bl	800f7c0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fa8e:	687a      	ldr	r2, [r7, #4]
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	3304      	adds	r3, #4
 800fa94:	6939      	ldr	r1, [r7, #16]
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f7ff fed2 	bl	800f840 <tcp_output_control_segment>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800faa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	371c      	adds	r7, #28
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd90      	pop	{r4, r7, pc}
 800faac:	0801a474 	.word	0x0801a474
 800fab0:	0801ac50 	.word	0x0801ac50
 800fab4:	0801a4c8 	.word	0x0801a4c8

0800fab8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800fab8:	b590      	push	{r4, r7, lr}
 800faba:	b08b      	sub	sp, #44	; 0x2c
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fac0:	2300      	movs	r3, #0
 800fac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d106      	bne.n	800fada <tcp_zero_window_probe+0x22>
 800facc:	4b4c      	ldr	r3, [pc, #304]	; (800fc00 <tcp_zero_window_probe+0x148>)
 800face:	f640 024f 	movw	r2, #2127	; 0x84f
 800fad2:	494c      	ldr	r1, [pc, #304]	; (800fc04 <tcp_zero_window_probe+0x14c>)
 800fad4:	484c      	ldr	r0, [pc, #304]	; (800fc08 <tcp_zero_window_probe+0x150>)
 800fad6:	f005 fd43 	bl	8015560 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fade:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800fae0:	6a3b      	ldr	r3, [r7, #32]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d101      	bne.n	800faea <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800fae6:	2300      	movs	r3, #0
 800fae8:	e086      	b.n	800fbf8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800faf0:	2bff      	cmp	r3, #255	; 0xff
 800faf2:	d007      	beq.n	800fb04 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fafa:	3301      	adds	r3, #1
 800fafc:	b2da      	uxtb	r2, r3
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800fb04:	6a3b      	ldr	r3, [r7, #32]
 800fb06:	68db      	ldr	r3, [r3, #12]
 800fb08:	899b      	ldrh	r3, [r3, #12]
 800fb0a:	b29b      	uxth	r3, r3
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f7f9 fa11 	bl	8008f34 <lwip_htons>
 800fb12:	4603      	mov	r3, r0
 800fb14:	b2db      	uxtb	r3, r3
 800fb16:	f003 0301 	and.w	r3, r3, #1
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d005      	beq.n	800fb2a <tcp_zero_window_probe+0x72>
 800fb1e:	6a3b      	ldr	r3, [r7, #32]
 800fb20:	891b      	ldrh	r3, [r3, #8]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d101      	bne.n	800fb2a <tcp_zero_window_probe+0x72>
 800fb26:	2301      	movs	r3, #1
 800fb28:	e000      	b.n	800fb2c <tcp_zero_window_probe+0x74>
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800fb2e:	7ffb      	ldrb	r3, [r7, #31]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	bf0c      	ite	eq
 800fb34:	2301      	moveq	r3, #1
 800fb36:	2300      	movne	r3, #0
 800fb38:	b2db      	uxtb	r3, r3
 800fb3a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800fb3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb40:	b299      	uxth	r1, r3
 800fb42:	6a3b      	ldr	r3, [r7, #32]
 800fb44:	68db      	ldr	r3, [r3, #12]
 800fb46:	685b      	ldr	r3, [r3, #4]
 800fb48:	8bba      	ldrh	r2, [r7, #28]
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f7ff fdfa 	bl	800f744 <tcp_output_alloc_header>
 800fb50:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800fb52:	69bb      	ldr	r3, [r7, #24]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d102      	bne.n	800fb5e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800fb58:	f04f 33ff 	mov.w	r3, #4294967295
 800fb5c:	e04c      	b.n	800fbf8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800fb5e:	69bb      	ldr	r3, [r7, #24]
 800fb60:	685b      	ldr	r3, [r3, #4]
 800fb62:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800fb64:	7ffb      	ldrb	r3, [r7, #31]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d011      	beq.n	800fb8e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	899b      	ldrh	r3, [r3, #12]
 800fb6e:	b29b      	uxth	r3, r3
 800fb70:	b21b      	sxth	r3, r3
 800fb72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fb76:	b21c      	sxth	r4, r3
 800fb78:	2011      	movs	r0, #17
 800fb7a:	f7f9 f9db 	bl	8008f34 <lwip_htons>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	b21b      	sxth	r3, r3
 800fb82:	4323      	orrs	r3, r4
 800fb84:	b21b      	sxth	r3, r3
 800fb86:	b29a      	uxth	r2, r3
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	819a      	strh	r2, [r3, #12]
 800fb8c:	e010      	b.n	800fbb0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800fb8e:	69bb      	ldr	r3, [r7, #24]
 800fb90:	685b      	ldr	r3, [r3, #4]
 800fb92:	3314      	adds	r3, #20
 800fb94:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800fb96:	6a3b      	ldr	r3, [r7, #32]
 800fb98:	6858      	ldr	r0, [r3, #4]
 800fb9a:	6a3b      	ldr	r3, [r7, #32]
 800fb9c:	685b      	ldr	r3, [r3, #4]
 800fb9e:	891a      	ldrh	r2, [r3, #8]
 800fba0:	6a3b      	ldr	r3, [r7, #32]
 800fba2:	891b      	ldrh	r3, [r3, #8]
 800fba4:	1ad3      	subs	r3, r2, r3
 800fba6:	b29b      	uxth	r3, r3
 800fba8:	2201      	movs	r2, #1
 800fbaa:	6939      	ldr	r1, [r7, #16]
 800fbac:	f7fa fe58 	bl	800a860 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800fbb0:	6a3b      	ldr	r3, [r7, #32]
 800fbb2:	68db      	ldr	r3, [r3, #12]
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f7f9 f9d1 	bl	8008f5e <lwip_htonl>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	3301      	adds	r3, #1
 800fbc0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	1ad3      	subs	r3, r2, r3
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	da02      	bge.n	800fbd4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	68fa      	ldr	r2, [r7, #12]
 800fbd2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fbd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbd8:	2200      	movs	r2, #0
 800fbda:	69b9      	ldr	r1, [r7, #24]
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f7ff fdef 	bl	800f7c0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fbe2:	687a      	ldr	r2, [r7, #4]
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	3304      	adds	r3, #4
 800fbe8:	69b9      	ldr	r1, [r7, #24]
 800fbea:	6878      	ldr	r0, [r7, #4]
 800fbec:	f7ff fe28 	bl	800f840 <tcp_output_control_segment>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fbf4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	372c      	adds	r7, #44	; 0x2c
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd90      	pop	{r4, r7, pc}
 800fc00:	0801a474 	.word	0x0801a474
 800fc04:	0801ac6c 	.word	0x0801ac6c
 800fc08:	0801a4c8 	.word	0x0801a4c8

0800fc0c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b082      	sub	sp, #8
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800fc14:	f7fa ff12 	bl	800aa3c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800fc18:	4b0a      	ldr	r3, [pc, #40]	; (800fc44 <tcpip_tcp_timer+0x38>)
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d103      	bne.n	800fc28 <tcpip_tcp_timer+0x1c>
 800fc20:	4b09      	ldr	r3, [pc, #36]	; (800fc48 <tcpip_tcp_timer+0x3c>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d005      	beq.n	800fc34 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fc28:	2200      	movs	r2, #0
 800fc2a:	4908      	ldr	r1, [pc, #32]	; (800fc4c <tcpip_tcp_timer+0x40>)
 800fc2c:	20fa      	movs	r0, #250	; 0xfa
 800fc2e:	f000 f8f3 	bl	800fe18 <sys_timeout>
 800fc32:	e003      	b.n	800fc3c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800fc34:	4b06      	ldr	r3, [pc, #24]	; (800fc50 <tcpip_tcp_timer+0x44>)
 800fc36:	2200      	movs	r2, #0
 800fc38:	601a      	str	r2, [r3, #0]
  }
}
 800fc3a:	bf00      	nop
 800fc3c:	bf00      	nop
 800fc3e:	3708      	adds	r7, #8
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}
 800fc44:	20006a20 	.word	0x20006a20
 800fc48:	20006a30 	.word	0x20006a30
 800fc4c:	0800fc0d 	.word	0x0800fc0d
 800fc50:	20000414 	.word	0x20000414

0800fc54 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800fc58:	4b0a      	ldr	r3, [pc, #40]	; (800fc84 <tcp_timer_needed+0x30>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d10f      	bne.n	800fc80 <tcp_timer_needed+0x2c>
 800fc60:	4b09      	ldr	r3, [pc, #36]	; (800fc88 <tcp_timer_needed+0x34>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d103      	bne.n	800fc70 <tcp_timer_needed+0x1c>
 800fc68:	4b08      	ldr	r3, [pc, #32]	; (800fc8c <tcp_timer_needed+0x38>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d007      	beq.n	800fc80 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800fc70:	4b04      	ldr	r3, [pc, #16]	; (800fc84 <tcp_timer_needed+0x30>)
 800fc72:	2201      	movs	r2, #1
 800fc74:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fc76:	2200      	movs	r2, #0
 800fc78:	4905      	ldr	r1, [pc, #20]	; (800fc90 <tcp_timer_needed+0x3c>)
 800fc7a:	20fa      	movs	r0, #250	; 0xfa
 800fc7c:	f000 f8cc 	bl	800fe18 <sys_timeout>
  }
}
 800fc80:	bf00      	nop
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	20000414 	.word	0x20000414
 800fc88:	20006a20 	.word	0x20006a20
 800fc8c:	20006a30 	.word	0x20006a30
 800fc90:	0800fc0d 	.word	0x0800fc0d

0800fc94 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b086      	sub	sp, #24
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	60f8      	str	r0, [r7, #12]
 800fc9c:	60b9      	str	r1, [r7, #8]
 800fc9e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800fca0:	2006      	movs	r0, #6
 800fca2:	f7f9 fd9d 	bl	80097e0 <memp_malloc>
 800fca6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800fca8:	693b      	ldr	r3, [r7, #16]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d109      	bne.n	800fcc2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800fcae:	693b      	ldr	r3, [r7, #16]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d151      	bne.n	800fd58 <sys_timeout_abs+0xc4>
 800fcb4:	4b2a      	ldr	r3, [pc, #168]	; (800fd60 <sys_timeout_abs+0xcc>)
 800fcb6:	22be      	movs	r2, #190	; 0xbe
 800fcb8:	492a      	ldr	r1, [pc, #168]	; (800fd64 <sys_timeout_abs+0xd0>)
 800fcba:	482b      	ldr	r0, [pc, #172]	; (800fd68 <sys_timeout_abs+0xd4>)
 800fcbc:	f005 fc50 	bl	8015560 <iprintf>
    return;
 800fcc0:	e04a      	b.n	800fd58 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800fcc2:	693b      	ldr	r3, [r7, #16]
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800fcc8:	693b      	ldr	r3, [r7, #16]
 800fcca:	68ba      	ldr	r2, [r7, #8]
 800fccc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800fcce:	693b      	ldr	r3, [r7, #16]
 800fcd0:	687a      	ldr	r2, [r7, #4]
 800fcd2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	68fa      	ldr	r2, [r7, #12]
 800fcd8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800fcda:	4b24      	ldr	r3, [pc, #144]	; (800fd6c <sys_timeout_abs+0xd8>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d103      	bne.n	800fcea <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800fce2:	4a22      	ldr	r2, [pc, #136]	; (800fd6c <sys_timeout_abs+0xd8>)
 800fce4:	693b      	ldr	r3, [r7, #16]
 800fce6:	6013      	str	r3, [r2, #0]
    return;
 800fce8:	e037      	b.n	800fd5a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	685a      	ldr	r2, [r3, #4]
 800fcee:	4b1f      	ldr	r3, [pc, #124]	; (800fd6c <sys_timeout_abs+0xd8>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	685b      	ldr	r3, [r3, #4]
 800fcf4:	1ad3      	subs	r3, r2, r3
 800fcf6:	0fdb      	lsrs	r3, r3, #31
 800fcf8:	f003 0301 	and.w	r3, r3, #1
 800fcfc:	b2db      	uxtb	r3, r3
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d007      	beq.n	800fd12 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800fd02:	4b1a      	ldr	r3, [pc, #104]	; (800fd6c <sys_timeout_abs+0xd8>)
 800fd04:	681a      	ldr	r2, [r3, #0]
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800fd0a:	4a18      	ldr	r2, [pc, #96]	; (800fd6c <sys_timeout_abs+0xd8>)
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	6013      	str	r3, [r2, #0]
 800fd10:	e023      	b.n	800fd5a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800fd12:	4b16      	ldr	r3, [pc, #88]	; (800fd6c <sys_timeout_abs+0xd8>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	617b      	str	r3, [r7, #20]
 800fd18:	e01a      	b.n	800fd50 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d00b      	beq.n	800fd3a <sys_timeout_abs+0xa6>
 800fd22:	693b      	ldr	r3, [r7, #16]
 800fd24:	685a      	ldr	r2, [r3, #4]
 800fd26:	697b      	ldr	r3, [r7, #20]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	685b      	ldr	r3, [r3, #4]
 800fd2c:	1ad3      	subs	r3, r2, r3
 800fd2e:	0fdb      	lsrs	r3, r3, #31
 800fd30:	f003 0301 	and.w	r3, r3, #1
 800fd34:	b2db      	uxtb	r3, r3
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d007      	beq.n	800fd4a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	681a      	ldr	r2, [r3, #0]
 800fd3e:	693b      	ldr	r3, [r7, #16]
 800fd40:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	693a      	ldr	r2, [r7, #16]
 800fd46:	601a      	str	r2, [r3, #0]
        break;
 800fd48:	e007      	b.n	800fd5a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	617b      	str	r3, [r7, #20]
 800fd50:	697b      	ldr	r3, [r7, #20]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d1e1      	bne.n	800fd1a <sys_timeout_abs+0x86>
 800fd56:	e000      	b.n	800fd5a <sys_timeout_abs+0xc6>
    return;
 800fd58:	bf00      	nop
      }
    }
  }
}
 800fd5a:	3718      	adds	r7, #24
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}
 800fd60:	0801ac90 	.word	0x0801ac90
 800fd64:	0801acc4 	.word	0x0801acc4
 800fd68:	0801ad04 	.word	0x0801ad04
 800fd6c:	2000040c 	.word	0x2000040c

0800fd70 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b086      	sub	sp, #24
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	685b      	ldr	r3, [r3, #4]
 800fd80:	4798      	blx	r3

  now = sys_now();
 800fd82:	f7f9 f849 	bl	8008e18 <sys_now>
 800fd86:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	681a      	ldr	r2, [r3, #0]
 800fd8c:	4b0f      	ldr	r3, [pc, #60]	; (800fdcc <lwip_cyclic_timer+0x5c>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	4413      	add	r3, r2
 800fd92:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800fd94:	68fa      	ldr	r2, [r7, #12]
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	1ad3      	subs	r3, r2, r3
 800fd9a:	0fdb      	lsrs	r3, r3, #31
 800fd9c:	f003 0301 	and.w	r3, r3, #1
 800fda0:	b2db      	uxtb	r3, r3
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d009      	beq.n	800fdba <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	681a      	ldr	r2, [r3, #0]
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	4413      	add	r3, r2
 800fdae:	687a      	ldr	r2, [r7, #4]
 800fdb0:	4907      	ldr	r1, [pc, #28]	; (800fdd0 <lwip_cyclic_timer+0x60>)
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7ff ff6e 	bl	800fc94 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800fdb8:	e004      	b.n	800fdc4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800fdba:	687a      	ldr	r2, [r7, #4]
 800fdbc:	4904      	ldr	r1, [pc, #16]	; (800fdd0 <lwip_cyclic_timer+0x60>)
 800fdbe:	68f8      	ldr	r0, [r7, #12]
 800fdc0:	f7ff ff68 	bl	800fc94 <sys_timeout_abs>
}
 800fdc4:	bf00      	nop
 800fdc6:	3718      	adds	r7, #24
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	20000410 	.word	0x20000410
 800fdd0:	0800fd71 	.word	0x0800fd71

0800fdd4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b082      	sub	sp, #8
 800fdd8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fdda:	2301      	movs	r3, #1
 800fddc:	607b      	str	r3, [r7, #4]
 800fdde:	e00e      	b.n	800fdfe <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800fde0:	4a0b      	ldr	r2, [pc, #44]	; (800fe10 <sys_timeouts_init+0x3c>)
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	00db      	lsls	r3, r3, #3
 800fdec:	4a08      	ldr	r2, [pc, #32]	; (800fe10 <sys_timeouts_init+0x3c>)
 800fdee:	4413      	add	r3, r2
 800fdf0:	461a      	mov	r2, r3
 800fdf2:	4908      	ldr	r1, [pc, #32]	; (800fe14 <sys_timeouts_init+0x40>)
 800fdf4:	f000 f810 	bl	800fe18 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	607b      	str	r3, [r7, #4]
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2b04      	cmp	r3, #4
 800fe02:	d9ed      	bls.n	800fde0 <sys_timeouts_init+0xc>
  }
}
 800fe04:	bf00      	nop
 800fe06:	bf00      	nop
 800fe08:	3708      	adds	r7, #8
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}
 800fe0e:	bf00      	nop
 800fe10:	0801bc18 	.word	0x0801bc18
 800fe14:	0800fd71 	.word	0x0800fd71

0800fe18 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b086      	sub	sp, #24
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	60f8      	str	r0, [r7, #12]
 800fe20:	60b9      	str	r1, [r7, #8]
 800fe22:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe2a:	d306      	bcc.n	800fe3a <sys_timeout+0x22>
 800fe2c:	4b0a      	ldr	r3, [pc, #40]	; (800fe58 <sys_timeout+0x40>)
 800fe2e:	f240 1229 	movw	r2, #297	; 0x129
 800fe32:	490a      	ldr	r1, [pc, #40]	; (800fe5c <sys_timeout+0x44>)
 800fe34:	480a      	ldr	r0, [pc, #40]	; (800fe60 <sys_timeout+0x48>)
 800fe36:	f005 fb93 	bl	8015560 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800fe3a:	f7f8 ffed 	bl	8008e18 <sys_now>
 800fe3e:	4602      	mov	r2, r0
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	4413      	add	r3, r2
 800fe44:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800fe46:	687a      	ldr	r2, [r7, #4]
 800fe48:	68b9      	ldr	r1, [r7, #8]
 800fe4a:	6978      	ldr	r0, [r7, #20]
 800fe4c:	f7ff ff22 	bl	800fc94 <sys_timeout_abs>
#endif
}
 800fe50:	bf00      	nop
 800fe52:	3718      	adds	r7, #24
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	0801ac90 	.word	0x0801ac90
 800fe5c:	0801ad2c 	.word	0x0801ad2c
 800fe60:	0801ad04 	.word	0x0801ad04

0800fe64 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fe68:	f005 fb92 	bl	8015590 <rand>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	b29b      	uxth	r3, r3
 800fe70:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fe74:	b29b      	uxth	r3, r3
 800fe76:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800fe7a:	b29a      	uxth	r2, r3
 800fe7c:	4b01      	ldr	r3, [pc, #4]	; (800fe84 <udp_init+0x20>)
 800fe7e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fe80:	bf00      	nop
 800fe82:	bd80      	pop	{r7, pc}
 800fe84:	2000001c 	.word	0x2000001c

0800fe88 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b083      	sub	sp, #12
 800fe8c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800fe8e:	2300      	movs	r3, #0
 800fe90:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800fe92:	4b17      	ldr	r3, [pc, #92]	; (800fef0 <udp_new_port+0x68>)
 800fe94:	881b      	ldrh	r3, [r3, #0]
 800fe96:	1c5a      	adds	r2, r3, #1
 800fe98:	b291      	uxth	r1, r2
 800fe9a:	4a15      	ldr	r2, [pc, #84]	; (800fef0 <udp_new_port+0x68>)
 800fe9c:	8011      	strh	r1, [r2, #0]
 800fe9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fea2:	4293      	cmp	r3, r2
 800fea4:	d103      	bne.n	800feae <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800fea6:	4b12      	ldr	r3, [pc, #72]	; (800fef0 <udp_new_port+0x68>)
 800fea8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800feac:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800feae:	4b11      	ldr	r3, [pc, #68]	; (800fef4 <udp_new_port+0x6c>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	603b      	str	r3, [r7, #0]
 800feb4:	e011      	b.n	800feda <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	8a5a      	ldrh	r2, [r3, #18]
 800feba:	4b0d      	ldr	r3, [pc, #52]	; (800fef0 <udp_new_port+0x68>)
 800febc:	881b      	ldrh	r3, [r3, #0]
 800febe:	429a      	cmp	r2, r3
 800fec0:	d108      	bne.n	800fed4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800fec2:	88fb      	ldrh	r3, [r7, #6]
 800fec4:	3301      	adds	r3, #1
 800fec6:	80fb      	strh	r3, [r7, #6]
 800fec8:	88fb      	ldrh	r3, [r7, #6]
 800feca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fece:	d3e0      	bcc.n	800fe92 <udp_new_port+0xa>
        return 0;
 800fed0:	2300      	movs	r3, #0
 800fed2:	e007      	b.n	800fee4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	68db      	ldr	r3, [r3, #12]
 800fed8:	603b      	str	r3, [r7, #0]
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d1ea      	bne.n	800feb6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800fee0:	4b03      	ldr	r3, [pc, #12]	; (800fef0 <udp_new_port+0x68>)
 800fee2:	881b      	ldrh	r3, [r3, #0]
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	370c      	adds	r7, #12
 800fee8:	46bd      	mov	sp, r7
 800feea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feee:	4770      	bx	lr
 800fef0:	2000001c 	.word	0x2000001c
 800fef4:	20006a38 	.word	0x20006a38

0800fef8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b084      	sub	sp, #16
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	60f8      	str	r0, [r7, #12]
 800ff00:	60b9      	str	r1, [r7, #8]
 800ff02:	4613      	mov	r3, r2
 800ff04:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d105      	bne.n	800ff18 <udp_input_local_match+0x20>
 800ff0c:	4b27      	ldr	r3, [pc, #156]	; (800ffac <udp_input_local_match+0xb4>)
 800ff0e:	2287      	movs	r2, #135	; 0x87
 800ff10:	4927      	ldr	r1, [pc, #156]	; (800ffb0 <udp_input_local_match+0xb8>)
 800ff12:	4828      	ldr	r0, [pc, #160]	; (800ffb4 <udp_input_local_match+0xbc>)
 800ff14:	f005 fb24 	bl	8015560 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d105      	bne.n	800ff2a <udp_input_local_match+0x32>
 800ff1e:	4b23      	ldr	r3, [pc, #140]	; (800ffac <udp_input_local_match+0xb4>)
 800ff20:	2288      	movs	r2, #136	; 0x88
 800ff22:	4925      	ldr	r1, [pc, #148]	; (800ffb8 <udp_input_local_match+0xc0>)
 800ff24:	4823      	ldr	r0, [pc, #140]	; (800ffb4 <udp_input_local_match+0xbc>)
 800ff26:	f005 fb1b 	bl	8015560 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	7a1b      	ldrb	r3, [r3, #8]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d00b      	beq.n	800ff4a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	7a1a      	ldrb	r2, [r3, #8]
 800ff36:	4b21      	ldr	r3, [pc, #132]	; (800ffbc <udp_input_local_match+0xc4>)
 800ff38:	685b      	ldr	r3, [r3, #4]
 800ff3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ff3e:	3301      	adds	r3, #1
 800ff40:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d001      	beq.n	800ff4a <udp_input_local_match+0x52>
    return 0;
 800ff46:	2300      	movs	r3, #0
 800ff48:	e02b      	b.n	800ffa2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ff4a:	79fb      	ldrb	r3, [r7, #7]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d018      	beq.n	800ff82 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d013      	beq.n	800ff7e <udp_input_local_match+0x86>
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d00f      	beq.n	800ff7e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ff5e:	4b17      	ldr	r3, [pc, #92]	; (800ffbc <udp_input_local_match+0xc4>)
 800ff60:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ff62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff66:	d00a      	beq.n	800ff7e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	681a      	ldr	r2, [r3, #0]
 800ff6c:	4b13      	ldr	r3, [pc, #76]	; (800ffbc <udp_input_local_match+0xc4>)
 800ff6e:	695b      	ldr	r3, [r3, #20]
 800ff70:	405a      	eors	r2, r3
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	3308      	adds	r3, #8
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d110      	bne.n	800ffa0 <udp_input_local_match+0xa8>
          return 1;
 800ff7e:	2301      	movs	r3, #1
 800ff80:	e00f      	b.n	800ffa2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d009      	beq.n	800ff9c <udp_input_local_match+0xa4>
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d005      	beq.n	800ff9c <udp_input_local_match+0xa4>
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	681a      	ldr	r2, [r3, #0]
 800ff94:	4b09      	ldr	r3, [pc, #36]	; (800ffbc <udp_input_local_match+0xc4>)
 800ff96:	695b      	ldr	r3, [r3, #20]
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	d101      	bne.n	800ffa0 <udp_input_local_match+0xa8>
        return 1;
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	e000      	b.n	800ffa2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ffa0:	2300      	movs	r3, #0
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	3710      	adds	r7, #16
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}
 800ffaa:	bf00      	nop
 800ffac:	0801ad78 	.word	0x0801ad78
 800ffb0:	0801ada8 	.word	0x0801ada8
 800ffb4:	0801adcc 	.word	0x0801adcc
 800ffb8:	0801adf4 	.word	0x0801adf4
 800ffbc:	200038fc 	.word	0x200038fc

0800ffc0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ffc0:	b590      	push	{r4, r7, lr}
 800ffc2:	b08d      	sub	sp, #52	; 0x34
 800ffc4:	af02      	add	r7, sp, #8
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d105      	bne.n	800ffe0 <udp_input+0x20>
 800ffd4:	4b7c      	ldr	r3, [pc, #496]	; (80101c8 <udp_input+0x208>)
 800ffd6:	22cf      	movs	r2, #207	; 0xcf
 800ffd8:	497c      	ldr	r1, [pc, #496]	; (80101cc <udp_input+0x20c>)
 800ffda:	487d      	ldr	r0, [pc, #500]	; (80101d0 <udp_input+0x210>)
 800ffdc:	f005 fac0 	bl	8015560 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d105      	bne.n	800fff2 <udp_input+0x32>
 800ffe6:	4b78      	ldr	r3, [pc, #480]	; (80101c8 <udp_input+0x208>)
 800ffe8:	22d0      	movs	r2, #208	; 0xd0
 800ffea:	497a      	ldr	r1, [pc, #488]	; (80101d4 <udp_input+0x214>)
 800ffec:	4878      	ldr	r0, [pc, #480]	; (80101d0 <udp_input+0x210>)
 800ffee:	f005 fab7 	bl	8015560 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	895b      	ldrh	r3, [r3, #10]
 800fff6:	2b07      	cmp	r3, #7
 800fff8:	d803      	bhi.n	8010002 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f7fa fa36 	bl	800a46c <pbuf_free>
    goto end;
 8010000:	e0de      	b.n	80101c0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	685b      	ldr	r3, [r3, #4]
 8010006:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010008:	4b73      	ldr	r3, [pc, #460]	; (80101d8 <udp_input+0x218>)
 801000a:	695b      	ldr	r3, [r3, #20]
 801000c:	4a72      	ldr	r2, [pc, #456]	; (80101d8 <udp_input+0x218>)
 801000e:	6812      	ldr	r2, [r2, #0]
 8010010:	4611      	mov	r1, r2
 8010012:	4618      	mov	r0, r3
 8010014:	f003 fdca 	bl	8013bac <ip4_addr_isbroadcast_u32>
 8010018:	4603      	mov	r3, r0
 801001a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	881b      	ldrh	r3, [r3, #0]
 8010020:	b29b      	uxth	r3, r3
 8010022:	4618      	mov	r0, r3
 8010024:	f7f8 ff86 	bl	8008f34 <lwip_htons>
 8010028:	4603      	mov	r3, r0
 801002a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801002c:	697b      	ldr	r3, [r7, #20]
 801002e:	885b      	ldrh	r3, [r3, #2]
 8010030:	b29b      	uxth	r3, r3
 8010032:	4618      	mov	r0, r3
 8010034:	f7f8 ff7e 	bl	8008f34 <lwip_htons>
 8010038:	4603      	mov	r3, r0
 801003a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801003c:	2300      	movs	r3, #0
 801003e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010040:	2300      	movs	r3, #0
 8010042:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010044:	2300      	movs	r3, #0
 8010046:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010048:	4b64      	ldr	r3, [pc, #400]	; (80101dc <udp_input+0x21c>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	627b      	str	r3, [r7, #36]	; 0x24
 801004e:	e054      	b.n	80100fa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010052:	8a5b      	ldrh	r3, [r3, #18]
 8010054:	89fa      	ldrh	r2, [r7, #14]
 8010056:	429a      	cmp	r2, r3
 8010058:	d14a      	bne.n	80100f0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801005a:	7cfb      	ldrb	r3, [r7, #19]
 801005c:	461a      	mov	r2, r3
 801005e:	6839      	ldr	r1, [r7, #0]
 8010060:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010062:	f7ff ff49 	bl	800fef8 <udp_input_local_match>
 8010066:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010068:	2b00      	cmp	r3, #0
 801006a:	d041      	beq.n	80100f0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801006c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006e:	7c1b      	ldrb	r3, [r3, #16]
 8010070:	f003 0304 	and.w	r3, r3, #4
 8010074:	2b00      	cmp	r3, #0
 8010076:	d11d      	bne.n	80100b4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010078:	69fb      	ldr	r3, [r7, #28]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d102      	bne.n	8010084 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801007e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010080:	61fb      	str	r3, [r7, #28]
 8010082:	e017      	b.n	80100b4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010084:	7cfb      	ldrb	r3, [r7, #19]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d014      	beq.n	80100b4 <udp_input+0xf4>
 801008a:	4b53      	ldr	r3, [pc, #332]	; (80101d8 <udp_input+0x218>)
 801008c:	695b      	ldr	r3, [r3, #20]
 801008e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010092:	d10f      	bne.n	80100b4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010094:	69fb      	ldr	r3, [r7, #28]
 8010096:	681a      	ldr	r2, [r3, #0]
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	3304      	adds	r3, #4
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	429a      	cmp	r2, r3
 80100a0:	d008      	beq.n	80100b4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80100a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a4:	681a      	ldr	r2, [r3, #0]
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	3304      	adds	r3, #4
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	429a      	cmp	r2, r3
 80100ae:	d101      	bne.n	80100b4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80100b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80100b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b6:	8a9b      	ldrh	r3, [r3, #20]
 80100b8:	8a3a      	ldrh	r2, [r7, #16]
 80100ba:	429a      	cmp	r2, r3
 80100bc:	d118      	bne.n	80100f0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80100be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d005      	beq.n	80100d2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80100c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c8:	685a      	ldr	r2, [r3, #4]
 80100ca:	4b43      	ldr	r3, [pc, #268]	; (80101d8 <udp_input+0x218>)
 80100cc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d10e      	bne.n	80100f0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80100d2:	6a3b      	ldr	r3, [r7, #32]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d014      	beq.n	8010102 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80100d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100da:	68da      	ldr	r2, [r3, #12]
 80100dc:	6a3b      	ldr	r3, [r7, #32]
 80100de:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80100e0:	4b3e      	ldr	r3, [pc, #248]	; (80101dc <udp_input+0x21c>)
 80100e2:	681a      	ldr	r2, [r3, #0]
 80100e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80100e8:	4a3c      	ldr	r2, [pc, #240]	; (80101dc <udp_input+0x21c>)
 80100ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ec:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80100ee:	e008      	b.n	8010102 <udp_input+0x142>
      }
    }

    prev = pcb;
 80100f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80100f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f6:	68db      	ldr	r3, [r3, #12]
 80100f8:	627b      	str	r3, [r7, #36]	; 0x24
 80100fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d1a7      	bne.n	8010050 <udp_input+0x90>
 8010100:	e000      	b.n	8010104 <udp_input+0x144>
        break;
 8010102:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010106:	2b00      	cmp	r3, #0
 8010108:	d101      	bne.n	801010e <udp_input+0x14e>
    pcb = uncon_pcb;
 801010a:	69fb      	ldr	r3, [r7, #28]
 801010c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801010e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010110:	2b00      	cmp	r3, #0
 8010112:	d002      	beq.n	801011a <udp_input+0x15a>
    for_us = 1;
 8010114:	2301      	movs	r3, #1
 8010116:	76fb      	strb	r3, [r7, #27]
 8010118:	e00a      	b.n	8010130 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	3304      	adds	r3, #4
 801011e:	681a      	ldr	r2, [r3, #0]
 8010120:	4b2d      	ldr	r3, [pc, #180]	; (80101d8 <udp_input+0x218>)
 8010122:	695b      	ldr	r3, [r3, #20]
 8010124:	429a      	cmp	r2, r3
 8010126:	bf0c      	ite	eq
 8010128:	2301      	moveq	r3, #1
 801012a:	2300      	movne	r3, #0
 801012c:	b2db      	uxtb	r3, r3
 801012e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010130:	7efb      	ldrb	r3, [r7, #27]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d041      	beq.n	80101ba <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010136:	2108      	movs	r1, #8
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f7fa f911 	bl	800a360 <pbuf_remove_header>
 801013e:	4603      	mov	r3, r0
 8010140:	2b00      	cmp	r3, #0
 8010142:	d00a      	beq.n	801015a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010144:	4b20      	ldr	r3, [pc, #128]	; (80101c8 <udp_input+0x208>)
 8010146:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801014a:	4925      	ldr	r1, [pc, #148]	; (80101e0 <udp_input+0x220>)
 801014c:	4820      	ldr	r0, [pc, #128]	; (80101d0 <udp_input+0x210>)
 801014e:	f005 fa07 	bl	8015560 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f7fa f98a 	bl	800a46c <pbuf_free>
      goto end;
 8010158:	e032      	b.n	80101c0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801015a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015c:	2b00      	cmp	r3, #0
 801015e:	d012      	beq.n	8010186 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010162:	699b      	ldr	r3, [r3, #24]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d00a      	beq.n	801017e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801016a:	699c      	ldr	r4, [r3, #24]
 801016c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801016e:	69d8      	ldr	r0, [r3, #28]
 8010170:	8a3b      	ldrh	r3, [r7, #16]
 8010172:	9300      	str	r3, [sp, #0]
 8010174:	4b1b      	ldr	r3, [pc, #108]	; (80101e4 <udp_input+0x224>)
 8010176:	687a      	ldr	r2, [r7, #4]
 8010178:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801017a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801017c:	e021      	b.n	80101c2 <udp_input+0x202>
        pbuf_free(p);
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f7fa f974 	bl	800a46c <pbuf_free>
        goto end;
 8010184:	e01c      	b.n	80101c0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010186:	7cfb      	ldrb	r3, [r7, #19]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d112      	bne.n	80101b2 <udp_input+0x1f2>
 801018c:	4b12      	ldr	r3, [pc, #72]	; (80101d8 <udp_input+0x218>)
 801018e:	695b      	ldr	r3, [r3, #20]
 8010190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010194:	2be0      	cmp	r3, #224	; 0xe0
 8010196:	d00c      	beq.n	80101b2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010198:	4b0f      	ldr	r3, [pc, #60]	; (80101d8 <udp_input+0x218>)
 801019a:	899b      	ldrh	r3, [r3, #12]
 801019c:	3308      	adds	r3, #8
 801019e:	b29b      	uxth	r3, r3
 80101a0:	b21b      	sxth	r3, r3
 80101a2:	4619      	mov	r1, r3
 80101a4:	6878      	ldr	r0, [r7, #4]
 80101a6:	f7fa f94e 	bl	800a446 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80101aa:	2103      	movs	r1, #3
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f003 f9bf 	bl	8013530 <icmp_dest_unreach>
      pbuf_free(p);
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f7fa f95a 	bl	800a46c <pbuf_free>
  return;
 80101b8:	e003      	b.n	80101c2 <udp_input+0x202>
    pbuf_free(p);
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f7fa f956 	bl	800a46c <pbuf_free>
  return;
 80101c0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80101c2:	372c      	adds	r7, #44	; 0x2c
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd90      	pop	{r4, r7, pc}
 80101c8:	0801ad78 	.word	0x0801ad78
 80101cc:	0801ae1c 	.word	0x0801ae1c
 80101d0:	0801adcc 	.word	0x0801adcc
 80101d4:	0801ae34 	.word	0x0801ae34
 80101d8:	200038fc 	.word	0x200038fc
 80101dc:	20006a38 	.word	0x20006a38
 80101e0:	0801ae50 	.word	0x0801ae50
 80101e4:	2000390c 	.word	0x2000390c

080101e8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b088      	sub	sp, #32
 80101ec:	af02      	add	r7, sp, #8
 80101ee:	60f8      	str	r0, [r7, #12]
 80101f0:	60b9      	str	r1, [r7, #8]
 80101f2:	607a      	str	r2, [r7, #4]
 80101f4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d109      	bne.n	8010210 <udp_sendto_if+0x28>
 80101fc:	4b2e      	ldr	r3, [pc, #184]	; (80102b8 <udp_sendto_if+0xd0>)
 80101fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010202:	492e      	ldr	r1, [pc, #184]	; (80102bc <udp_sendto_if+0xd4>)
 8010204:	482e      	ldr	r0, [pc, #184]	; (80102c0 <udp_sendto_if+0xd8>)
 8010206:	f005 f9ab 	bl	8015560 <iprintf>
 801020a:	f06f 030f 	mvn.w	r3, #15
 801020e:	e04f      	b.n	80102b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d109      	bne.n	801022a <udp_sendto_if+0x42>
 8010216:	4b28      	ldr	r3, [pc, #160]	; (80102b8 <udp_sendto_if+0xd0>)
 8010218:	f240 2281 	movw	r2, #641	; 0x281
 801021c:	4929      	ldr	r1, [pc, #164]	; (80102c4 <udp_sendto_if+0xdc>)
 801021e:	4828      	ldr	r0, [pc, #160]	; (80102c0 <udp_sendto_if+0xd8>)
 8010220:	f005 f99e 	bl	8015560 <iprintf>
 8010224:	f06f 030f 	mvn.w	r3, #15
 8010228:	e042      	b.n	80102b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d109      	bne.n	8010244 <udp_sendto_if+0x5c>
 8010230:	4b21      	ldr	r3, [pc, #132]	; (80102b8 <udp_sendto_if+0xd0>)
 8010232:	f240 2282 	movw	r2, #642	; 0x282
 8010236:	4924      	ldr	r1, [pc, #144]	; (80102c8 <udp_sendto_if+0xe0>)
 8010238:	4821      	ldr	r0, [pc, #132]	; (80102c0 <udp_sendto_if+0xd8>)
 801023a:	f005 f991 	bl	8015560 <iprintf>
 801023e:	f06f 030f 	mvn.w	r3, #15
 8010242:	e035      	b.n	80102b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8010244:	6a3b      	ldr	r3, [r7, #32]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d109      	bne.n	801025e <udp_sendto_if+0x76>
 801024a:	4b1b      	ldr	r3, [pc, #108]	; (80102b8 <udp_sendto_if+0xd0>)
 801024c:	f240 2283 	movw	r2, #643	; 0x283
 8010250:	491e      	ldr	r1, [pc, #120]	; (80102cc <udp_sendto_if+0xe4>)
 8010252:	481b      	ldr	r0, [pc, #108]	; (80102c0 <udp_sendto_if+0xd8>)
 8010254:	f005 f984 	bl	8015560 <iprintf>
 8010258:	f06f 030f 	mvn.w	r3, #15
 801025c:	e028      	b.n	80102b0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d009      	beq.n	8010278 <udp_sendto_if+0x90>
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d005      	beq.n	8010278 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010274:	2be0      	cmp	r3, #224	; 0xe0
 8010276:	d103      	bne.n	8010280 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8010278:	6a3b      	ldr	r3, [r7, #32]
 801027a:	3304      	adds	r3, #4
 801027c:	617b      	str	r3, [r7, #20]
 801027e:	e00b      	b.n	8010298 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	681a      	ldr	r2, [r3, #0]
 8010284:	6a3b      	ldr	r3, [r7, #32]
 8010286:	3304      	adds	r3, #4
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	429a      	cmp	r2, r3
 801028c:	d002      	beq.n	8010294 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801028e:	f06f 0303 	mvn.w	r3, #3
 8010292:	e00d      	b.n	80102b0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8010298:	887a      	ldrh	r2, [r7, #2]
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	9301      	str	r3, [sp, #4]
 801029e:	6a3b      	ldr	r3, [r7, #32]
 80102a0:	9300      	str	r3, [sp, #0]
 80102a2:	4613      	mov	r3, r2
 80102a4:	687a      	ldr	r2, [r7, #4]
 80102a6:	68b9      	ldr	r1, [r7, #8]
 80102a8:	68f8      	ldr	r0, [r7, #12]
 80102aa:	f000 f811 	bl	80102d0 <udp_sendto_if_src>
 80102ae:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80102b0:	4618      	mov	r0, r3
 80102b2:	3718      	adds	r7, #24
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}
 80102b8:	0801ad78 	.word	0x0801ad78
 80102bc:	0801aeec 	.word	0x0801aeec
 80102c0:	0801adcc 	.word	0x0801adcc
 80102c4:	0801af08 	.word	0x0801af08
 80102c8:	0801af24 	.word	0x0801af24
 80102cc:	0801af44 	.word	0x0801af44

080102d0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b08c      	sub	sp, #48	; 0x30
 80102d4:	af04      	add	r7, sp, #16
 80102d6:	60f8      	str	r0, [r7, #12]
 80102d8:	60b9      	str	r1, [r7, #8]
 80102da:	607a      	str	r2, [r7, #4]
 80102dc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d109      	bne.n	80102f8 <udp_sendto_if_src+0x28>
 80102e4:	4b65      	ldr	r3, [pc, #404]	; (801047c <udp_sendto_if_src+0x1ac>)
 80102e6:	f240 22d1 	movw	r2, #721	; 0x2d1
 80102ea:	4965      	ldr	r1, [pc, #404]	; (8010480 <udp_sendto_if_src+0x1b0>)
 80102ec:	4865      	ldr	r0, [pc, #404]	; (8010484 <udp_sendto_if_src+0x1b4>)
 80102ee:	f005 f937 	bl	8015560 <iprintf>
 80102f2:	f06f 030f 	mvn.w	r3, #15
 80102f6:	e0bc      	b.n	8010472 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d109      	bne.n	8010312 <udp_sendto_if_src+0x42>
 80102fe:	4b5f      	ldr	r3, [pc, #380]	; (801047c <udp_sendto_if_src+0x1ac>)
 8010300:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010304:	4960      	ldr	r1, [pc, #384]	; (8010488 <udp_sendto_if_src+0x1b8>)
 8010306:	485f      	ldr	r0, [pc, #380]	; (8010484 <udp_sendto_if_src+0x1b4>)
 8010308:	f005 f92a 	bl	8015560 <iprintf>
 801030c:	f06f 030f 	mvn.w	r3, #15
 8010310:	e0af      	b.n	8010472 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d109      	bne.n	801032c <udp_sendto_if_src+0x5c>
 8010318:	4b58      	ldr	r3, [pc, #352]	; (801047c <udp_sendto_if_src+0x1ac>)
 801031a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801031e:	495b      	ldr	r1, [pc, #364]	; (801048c <udp_sendto_if_src+0x1bc>)
 8010320:	4858      	ldr	r0, [pc, #352]	; (8010484 <udp_sendto_if_src+0x1b4>)
 8010322:	f005 f91d 	bl	8015560 <iprintf>
 8010326:	f06f 030f 	mvn.w	r3, #15
 801032a:	e0a2      	b.n	8010472 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801032c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801032e:	2b00      	cmp	r3, #0
 8010330:	d109      	bne.n	8010346 <udp_sendto_if_src+0x76>
 8010332:	4b52      	ldr	r3, [pc, #328]	; (801047c <udp_sendto_if_src+0x1ac>)
 8010334:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8010338:	4955      	ldr	r1, [pc, #340]	; (8010490 <udp_sendto_if_src+0x1c0>)
 801033a:	4852      	ldr	r0, [pc, #328]	; (8010484 <udp_sendto_if_src+0x1b4>)
 801033c:	f005 f910 	bl	8015560 <iprintf>
 8010340:	f06f 030f 	mvn.w	r3, #15
 8010344:	e095      	b.n	8010472 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8010346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010348:	2b00      	cmp	r3, #0
 801034a:	d109      	bne.n	8010360 <udp_sendto_if_src+0x90>
 801034c:	4b4b      	ldr	r3, [pc, #300]	; (801047c <udp_sendto_if_src+0x1ac>)
 801034e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8010352:	4950      	ldr	r1, [pc, #320]	; (8010494 <udp_sendto_if_src+0x1c4>)
 8010354:	484b      	ldr	r0, [pc, #300]	; (8010484 <udp_sendto_if_src+0x1b4>)
 8010356:	f005 f903 	bl	8015560 <iprintf>
 801035a:	f06f 030f 	mvn.w	r3, #15
 801035e:	e088      	b.n	8010472 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	8a5b      	ldrh	r3, [r3, #18]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d10f      	bne.n	8010388 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010368:	68f9      	ldr	r1, [r7, #12]
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	8a5b      	ldrh	r3, [r3, #18]
 801036e:	461a      	mov	r2, r3
 8010370:	68f8      	ldr	r0, [r7, #12]
 8010372:	f000 f893 	bl	801049c <udp_bind>
 8010376:	4603      	mov	r3, r0
 8010378:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801037a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d002      	beq.n	8010388 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8010382:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010386:	e074      	b.n	8010472 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8010388:	68bb      	ldr	r3, [r7, #8]
 801038a:	891b      	ldrh	r3, [r3, #8]
 801038c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8010390:	4293      	cmp	r3, r2
 8010392:	d902      	bls.n	801039a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8010394:	f04f 33ff 	mov.w	r3, #4294967295
 8010398:	e06b      	b.n	8010472 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801039a:	2108      	movs	r1, #8
 801039c:	68b8      	ldr	r0, [r7, #8]
 801039e:	f7f9 ffcf 	bl	800a340 <pbuf_add_header>
 80103a2:	4603      	mov	r3, r0
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d015      	beq.n	80103d4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80103a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80103ac:	2108      	movs	r1, #8
 80103ae:	2022      	movs	r0, #34	; 0x22
 80103b0:	f7f9 fd78 	bl	8009ea4 <pbuf_alloc>
 80103b4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80103b6:	69fb      	ldr	r3, [r7, #28]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d102      	bne.n	80103c2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80103bc:	f04f 33ff 	mov.w	r3, #4294967295
 80103c0:	e057      	b.n	8010472 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	891b      	ldrh	r3, [r3, #8]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d006      	beq.n	80103d8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80103ca:	68b9      	ldr	r1, [r7, #8]
 80103cc:	69f8      	ldr	r0, [r7, #28]
 80103ce:	f7fa f965 	bl	800a69c <pbuf_chain>
 80103d2:	e001      	b.n	80103d8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80103d8:	69fb      	ldr	r3, [r7, #28]
 80103da:	895b      	ldrh	r3, [r3, #10]
 80103dc:	2b07      	cmp	r3, #7
 80103de:	d806      	bhi.n	80103ee <udp_sendto_if_src+0x11e>
 80103e0:	4b26      	ldr	r3, [pc, #152]	; (801047c <udp_sendto_if_src+0x1ac>)
 80103e2:	f240 320d 	movw	r2, #781	; 0x30d
 80103e6:	492c      	ldr	r1, [pc, #176]	; (8010498 <udp_sendto_if_src+0x1c8>)
 80103e8:	4826      	ldr	r0, [pc, #152]	; (8010484 <udp_sendto_if_src+0x1b4>)
 80103ea:	f005 f8b9 	bl	8015560 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80103ee:	69fb      	ldr	r3, [r7, #28]
 80103f0:	685b      	ldr	r3, [r3, #4]
 80103f2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	8a5b      	ldrh	r3, [r3, #18]
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7f8 fd9b 	bl	8008f34 <lwip_htons>
 80103fe:	4603      	mov	r3, r0
 8010400:	461a      	mov	r2, r3
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8010406:	887b      	ldrh	r3, [r7, #2]
 8010408:	4618      	mov	r0, r3
 801040a:	f7f8 fd93 	bl	8008f34 <lwip_htons>
 801040e:	4603      	mov	r3, r0
 8010410:	461a      	mov	r2, r3
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	2200      	movs	r2, #0
 801041a:	719a      	strb	r2, [r3, #6]
 801041c:	2200      	movs	r2, #0
 801041e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010420:	69fb      	ldr	r3, [r7, #28]
 8010422:	891b      	ldrh	r3, [r3, #8]
 8010424:	4618      	mov	r0, r3
 8010426:	f7f8 fd85 	bl	8008f34 <lwip_htons>
 801042a:	4603      	mov	r3, r0
 801042c:	461a      	mov	r2, r3
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8010432:	2311      	movs	r3, #17
 8010434:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	7adb      	ldrb	r3, [r3, #11]
 801043a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	7a9b      	ldrb	r3, [r3, #10]
 8010440:	7cb9      	ldrb	r1, [r7, #18]
 8010442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010444:	9202      	str	r2, [sp, #8]
 8010446:	7cfa      	ldrb	r2, [r7, #19]
 8010448:	9201      	str	r2, [sp, #4]
 801044a:	9300      	str	r3, [sp, #0]
 801044c:	460b      	mov	r3, r1
 801044e:	687a      	ldr	r2, [r7, #4]
 8010450:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010452:	69f8      	ldr	r0, [r7, #28]
 8010454:	f003 fafc 	bl	8013a50 <ip4_output_if_src>
 8010458:	4603      	mov	r3, r0
 801045a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801045c:	69fa      	ldr	r2, [r7, #28]
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	429a      	cmp	r2, r3
 8010462:	d004      	beq.n	801046e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8010464:	69f8      	ldr	r0, [r7, #28]
 8010466:	f7fa f801 	bl	800a46c <pbuf_free>
    q = NULL;
 801046a:	2300      	movs	r3, #0
 801046c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801046e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010472:	4618      	mov	r0, r3
 8010474:	3720      	adds	r7, #32
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}
 801047a:	bf00      	nop
 801047c:	0801ad78 	.word	0x0801ad78
 8010480:	0801af64 	.word	0x0801af64
 8010484:	0801adcc 	.word	0x0801adcc
 8010488:	0801af84 	.word	0x0801af84
 801048c:	0801afa4 	.word	0x0801afa4
 8010490:	0801afc8 	.word	0x0801afc8
 8010494:	0801afec 	.word	0x0801afec
 8010498:	0801b010 	.word	0x0801b010

0801049c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b086      	sub	sp, #24
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	60f8      	str	r0, [r7, #12]
 80104a4:	60b9      	str	r1, [r7, #8]
 80104a6:	4613      	mov	r3, r2
 80104a8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80104aa:	68bb      	ldr	r3, [r7, #8]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d101      	bne.n	80104b4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80104b0:	4b39      	ldr	r3, [pc, #228]	; (8010598 <udp_bind+0xfc>)
 80104b2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d109      	bne.n	80104ce <udp_bind+0x32>
 80104ba:	4b38      	ldr	r3, [pc, #224]	; (801059c <udp_bind+0x100>)
 80104bc:	f240 32b7 	movw	r2, #951	; 0x3b7
 80104c0:	4937      	ldr	r1, [pc, #220]	; (80105a0 <udp_bind+0x104>)
 80104c2:	4838      	ldr	r0, [pc, #224]	; (80105a4 <udp_bind+0x108>)
 80104c4:	f005 f84c 	bl	8015560 <iprintf>
 80104c8:	f06f 030f 	mvn.w	r3, #15
 80104cc:	e060      	b.n	8010590 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80104ce:	2300      	movs	r3, #0
 80104d0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80104d2:	4b35      	ldr	r3, [pc, #212]	; (80105a8 <udp_bind+0x10c>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	617b      	str	r3, [r7, #20]
 80104d8:	e009      	b.n	80104ee <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80104da:	68fa      	ldr	r2, [r7, #12]
 80104dc:	697b      	ldr	r3, [r7, #20]
 80104de:	429a      	cmp	r2, r3
 80104e0:	d102      	bne.n	80104e8 <udp_bind+0x4c>
      rebind = 1;
 80104e2:	2301      	movs	r3, #1
 80104e4:	74fb      	strb	r3, [r7, #19]
      break;
 80104e6:	e005      	b.n	80104f4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	68db      	ldr	r3, [r3, #12]
 80104ec:	617b      	str	r3, [r7, #20]
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d1f2      	bne.n	80104da <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80104f4:	88fb      	ldrh	r3, [r7, #6]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d109      	bne.n	801050e <udp_bind+0x72>
    port = udp_new_port();
 80104fa:	f7ff fcc5 	bl	800fe88 <udp_new_port>
 80104fe:	4603      	mov	r3, r0
 8010500:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010502:	88fb      	ldrh	r3, [r7, #6]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d12c      	bne.n	8010562 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010508:	f06f 0307 	mvn.w	r3, #7
 801050c:	e040      	b.n	8010590 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801050e:	4b26      	ldr	r3, [pc, #152]	; (80105a8 <udp_bind+0x10c>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	617b      	str	r3, [r7, #20]
 8010514:	e022      	b.n	801055c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8010516:	68fa      	ldr	r2, [r7, #12]
 8010518:	697b      	ldr	r3, [r7, #20]
 801051a:	429a      	cmp	r2, r3
 801051c:	d01b      	beq.n	8010556 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801051e:	697b      	ldr	r3, [r7, #20]
 8010520:	8a5b      	ldrh	r3, [r3, #18]
 8010522:	88fa      	ldrh	r2, [r7, #6]
 8010524:	429a      	cmp	r2, r3
 8010526:	d116      	bne.n	8010556 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010528:	697b      	ldr	r3, [r7, #20]
 801052a:	681a      	ldr	r2, [r3, #0]
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010530:	429a      	cmp	r2, r3
 8010532:	d00d      	beq.n	8010550 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d00a      	beq.n	8010550 <udp_bind+0xb4>
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d006      	beq.n	8010550 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010542:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010544:	2b00      	cmp	r3, #0
 8010546:	d003      	beq.n	8010550 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010548:	697b      	ldr	r3, [r7, #20]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d102      	bne.n	8010556 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010550:	f06f 0307 	mvn.w	r3, #7
 8010554:	e01c      	b.n	8010590 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010556:	697b      	ldr	r3, [r7, #20]
 8010558:	68db      	ldr	r3, [r3, #12]
 801055a:	617b      	str	r3, [r7, #20]
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d1d9      	bne.n	8010516 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010562:	68bb      	ldr	r3, [r7, #8]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d002      	beq.n	801056e <udp_bind+0xd2>
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	e000      	b.n	8010570 <udp_bind+0xd4>
 801056e:	2300      	movs	r3, #0
 8010570:	68fa      	ldr	r2, [r7, #12]
 8010572:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	88fa      	ldrh	r2, [r7, #6]
 8010578:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801057a:	7cfb      	ldrb	r3, [r7, #19]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d106      	bne.n	801058e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010580:	4b09      	ldr	r3, [pc, #36]	; (80105a8 <udp_bind+0x10c>)
 8010582:	681a      	ldr	r2, [r3, #0]
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010588:	4a07      	ldr	r2, [pc, #28]	; (80105a8 <udp_bind+0x10c>)
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801058e:	2300      	movs	r3, #0
}
 8010590:	4618      	mov	r0, r3
 8010592:	3718      	adds	r7, #24
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}
 8010598:	0801bc40 	.word	0x0801bc40
 801059c:	0801ad78 	.word	0x0801ad78
 80105a0:	0801b040 	.word	0x0801b040
 80105a4:	0801adcc 	.word	0x0801adcc
 80105a8:	20006a38 	.word	0x20006a38

080105ac <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b086      	sub	sp, #24
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	60f8      	str	r0, [r7, #12]
 80105b4:	60b9      	str	r1, [r7, #8]
 80105b6:	4613      	mov	r3, r2
 80105b8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d109      	bne.n	80105d4 <udp_connect+0x28>
 80105c0:	4b2c      	ldr	r3, [pc, #176]	; (8010674 <udp_connect+0xc8>)
 80105c2:	f240 4235 	movw	r2, #1077	; 0x435
 80105c6:	492c      	ldr	r1, [pc, #176]	; (8010678 <udp_connect+0xcc>)
 80105c8:	482c      	ldr	r0, [pc, #176]	; (801067c <udp_connect+0xd0>)
 80105ca:	f004 ffc9 	bl	8015560 <iprintf>
 80105ce:	f06f 030f 	mvn.w	r3, #15
 80105d2:	e04b      	b.n	801066c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d109      	bne.n	80105ee <udp_connect+0x42>
 80105da:	4b26      	ldr	r3, [pc, #152]	; (8010674 <udp_connect+0xc8>)
 80105dc:	f240 4236 	movw	r2, #1078	; 0x436
 80105e0:	4927      	ldr	r1, [pc, #156]	; (8010680 <udp_connect+0xd4>)
 80105e2:	4826      	ldr	r0, [pc, #152]	; (801067c <udp_connect+0xd0>)
 80105e4:	f004 ffbc 	bl	8015560 <iprintf>
 80105e8:	f06f 030f 	mvn.w	r3, #15
 80105ec:	e03e      	b.n	801066c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	8a5b      	ldrh	r3, [r3, #18]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d10f      	bne.n	8010616 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80105f6:	68f9      	ldr	r1, [r7, #12]
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	8a5b      	ldrh	r3, [r3, #18]
 80105fc:	461a      	mov	r2, r3
 80105fe:	68f8      	ldr	r0, [r7, #12]
 8010600:	f7ff ff4c 	bl	801049c <udp_bind>
 8010604:	4603      	mov	r3, r0
 8010606:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010608:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d002      	beq.n	8010616 <udp_connect+0x6a>
      return err;
 8010610:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010614:	e02a      	b.n	801066c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d002      	beq.n	8010622 <udp_connect+0x76>
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	e000      	b.n	8010624 <udp_connect+0x78>
 8010622:	2300      	movs	r3, #0
 8010624:	68fa      	ldr	r2, [r7, #12]
 8010626:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	88fa      	ldrh	r2, [r7, #6]
 801062c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	7c1b      	ldrb	r3, [r3, #16]
 8010632:	f043 0304 	orr.w	r3, r3, #4
 8010636:	b2da      	uxtb	r2, r3
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801063c:	4b11      	ldr	r3, [pc, #68]	; (8010684 <udp_connect+0xd8>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	617b      	str	r3, [r7, #20]
 8010642:	e008      	b.n	8010656 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8010644:	68fa      	ldr	r2, [r7, #12]
 8010646:	697b      	ldr	r3, [r7, #20]
 8010648:	429a      	cmp	r2, r3
 801064a:	d101      	bne.n	8010650 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801064c:	2300      	movs	r3, #0
 801064e:	e00d      	b.n	801066c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010650:	697b      	ldr	r3, [r7, #20]
 8010652:	68db      	ldr	r3, [r3, #12]
 8010654:	617b      	str	r3, [r7, #20]
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d1f3      	bne.n	8010644 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801065c:	4b09      	ldr	r3, [pc, #36]	; (8010684 <udp_connect+0xd8>)
 801065e:	681a      	ldr	r2, [r3, #0]
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010664:	4a07      	ldr	r2, [pc, #28]	; (8010684 <udp_connect+0xd8>)
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801066a:	2300      	movs	r3, #0
}
 801066c:	4618      	mov	r0, r3
 801066e:	3718      	adds	r7, #24
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}
 8010674:	0801ad78 	.word	0x0801ad78
 8010678:	0801b058 	.word	0x0801b058
 801067c:	0801adcc 	.word	0x0801adcc
 8010680:	0801b074 	.word	0x0801b074
 8010684:	20006a38 	.word	0x20006a38

08010688 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af00      	add	r7, sp, #0
 801068e:	60f8      	str	r0, [r7, #12]
 8010690:	60b9      	str	r1, [r7, #8]
 8010692:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d107      	bne.n	80106aa <udp_recv+0x22>
 801069a:	4b08      	ldr	r3, [pc, #32]	; (80106bc <udp_recv+0x34>)
 801069c:	f240 428a 	movw	r2, #1162	; 0x48a
 80106a0:	4907      	ldr	r1, [pc, #28]	; (80106c0 <udp_recv+0x38>)
 80106a2:	4808      	ldr	r0, [pc, #32]	; (80106c4 <udp_recv+0x3c>)
 80106a4:	f004 ff5c 	bl	8015560 <iprintf>
 80106a8:	e005      	b.n	80106b6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	68ba      	ldr	r2, [r7, #8]
 80106ae:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	687a      	ldr	r2, [r7, #4]
 80106b4:	61da      	str	r2, [r3, #28]
}
 80106b6:	3710      	adds	r7, #16
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}
 80106bc:	0801ad78 	.word	0x0801ad78
 80106c0:	0801b0ac 	.word	0x0801b0ac
 80106c4:	0801adcc 	.word	0x0801adcc

080106c8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b084      	sub	sp, #16
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d107      	bne.n	80106e6 <udp_remove+0x1e>
 80106d6:	4b19      	ldr	r3, [pc, #100]	; (801073c <udp_remove+0x74>)
 80106d8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80106dc:	4918      	ldr	r1, [pc, #96]	; (8010740 <udp_remove+0x78>)
 80106de:	4819      	ldr	r0, [pc, #100]	; (8010744 <udp_remove+0x7c>)
 80106e0:	f004 ff3e 	bl	8015560 <iprintf>
 80106e4:	e026      	b.n	8010734 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80106e6:	4b18      	ldr	r3, [pc, #96]	; (8010748 <udp_remove+0x80>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	687a      	ldr	r2, [r7, #4]
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d105      	bne.n	80106fc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80106f0:	4b15      	ldr	r3, [pc, #84]	; (8010748 <udp_remove+0x80>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	68db      	ldr	r3, [r3, #12]
 80106f6:	4a14      	ldr	r2, [pc, #80]	; (8010748 <udp_remove+0x80>)
 80106f8:	6013      	str	r3, [r2, #0]
 80106fa:	e017      	b.n	801072c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80106fc:	4b12      	ldr	r3, [pc, #72]	; (8010748 <udp_remove+0x80>)
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	60fb      	str	r3, [r7, #12]
 8010702:	e010      	b.n	8010726 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	68db      	ldr	r3, [r3, #12]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d009      	beq.n	8010720 <udp_remove+0x58>
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	68db      	ldr	r3, [r3, #12]
 8010710:	687a      	ldr	r2, [r7, #4]
 8010712:	429a      	cmp	r2, r3
 8010714:	d104      	bne.n	8010720 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	68da      	ldr	r2, [r3, #12]
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	60da      	str	r2, [r3, #12]
        break;
 801071e:	e005      	b.n	801072c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	68db      	ldr	r3, [r3, #12]
 8010724:	60fb      	str	r3, [r7, #12]
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d1eb      	bne.n	8010704 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801072c:	6879      	ldr	r1, [r7, #4]
 801072e:	2000      	movs	r0, #0
 8010730:	f7f9 f8a2 	bl	8009878 <memp_free>
}
 8010734:	3710      	adds	r7, #16
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}
 801073a:	bf00      	nop
 801073c:	0801ad78 	.word	0x0801ad78
 8010740:	0801b0c4 	.word	0x0801b0c4
 8010744:	0801adcc 	.word	0x0801adcc
 8010748:	20006a38 	.word	0x20006a38

0801074c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b082      	sub	sp, #8
 8010750:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8010752:	2000      	movs	r0, #0
 8010754:	f7f9 f844 	bl	80097e0 <memp_malloc>
 8010758:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d007      	beq.n	8010770 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8010760:	2220      	movs	r2, #32
 8010762:	2100      	movs	r1, #0
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f004 f9df 	bl	8014b28 <memset>
    pcb->ttl = UDP_TTL;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	22ff      	movs	r2, #255	; 0xff
 801076e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8010770:	687b      	ldr	r3, [r7, #4]
}
 8010772:	4618      	mov	r0, r3
 8010774:	3708      	adds	r7, #8
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}
	...

0801077c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801077c:	b480      	push	{r7}
 801077e:	b085      	sub	sp, #20
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d01e      	beq.n	80107ca <udp_netif_ip_addr_changed+0x4e>
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d01a      	beq.n	80107ca <udp_netif_ip_addr_changed+0x4e>
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d017      	beq.n	80107ca <udp_netif_ip_addr_changed+0x4e>
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d013      	beq.n	80107ca <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80107a2:	4b0d      	ldr	r3, [pc, #52]	; (80107d8 <udp_netif_ip_addr_changed+0x5c>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	60fb      	str	r3, [r7, #12]
 80107a8:	e00c      	b.n	80107c4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	681a      	ldr	r2, [r3, #0]
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	429a      	cmp	r2, r3
 80107b4:	d103      	bne.n	80107be <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	681a      	ldr	r2, [r3, #0]
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	68db      	ldr	r3, [r3, #12]
 80107c2:	60fb      	str	r3, [r7, #12]
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d1ef      	bne.n	80107aa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80107ca:	bf00      	nop
 80107cc:	3714      	adds	r7, #20
 80107ce:	46bd      	mov	sp, r7
 80107d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d4:	4770      	bx	lr
 80107d6:	bf00      	nop
 80107d8:	20006a38 	.word	0x20006a38

080107dc <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80107e0:	4b20      	ldr	r3, [pc, #128]	; (8010864 <dhcp_inc_pcb_refcount+0x88>)
 80107e2:	781b      	ldrb	r3, [r3, #0]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d133      	bne.n	8010850 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80107e8:	4b1f      	ldr	r3, [pc, #124]	; (8010868 <dhcp_inc_pcb_refcount+0x8c>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d005      	beq.n	80107fc <dhcp_inc_pcb_refcount+0x20>
 80107f0:	4b1e      	ldr	r3, [pc, #120]	; (801086c <dhcp_inc_pcb_refcount+0x90>)
 80107f2:	22e5      	movs	r2, #229	; 0xe5
 80107f4:	491e      	ldr	r1, [pc, #120]	; (8010870 <dhcp_inc_pcb_refcount+0x94>)
 80107f6:	481f      	ldr	r0, [pc, #124]	; (8010874 <dhcp_inc_pcb_refcount+0x98>)
 80107f8:	f004 feb2 	bl	8015560 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80107fc:	f7ff ffa6 	bl	801074c <udp_new>
 8010800:	4603      	mov	r3, r0
 8010802:	4a19      	ldr	r2, [pc, #100]	; (8010868 <dhcp_inc_pcb_refcount+0x8c>)
 8010804:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8010806:	4b18      	ldr	r3, [pc, #96]	; (8010868 <dhcp_inc_pcb_refcount+0x8c>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d102      	bne.n	8010814 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801080e:	f04f 33ff 	mov.w	r3, #4294967295
 8010812:	e024      	b.n	801085e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8010814:	4b14      	ldr	r3, [pc, #80]	; (8010868 <dhcp_inc_pcb_refcount+0x8c>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	7a5a      	ldrb	r2, [r3, #9]
 801081a:	4b13      	ldr	r3, [pc, #76]	; (8010868 <dhcp_inc_pcb_refcount+0x8c>)
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	f042 0220 	orr.w	r2, r2, #32
 8010822:	b2d2      	uxtb	r2, r2
 8010824:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8010826:	4b10      	ldr	r3, [pc, #64]	; (8010868 <dhcp_inc_pcb_refcount+0x8c>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	2244      	movs	r2, #68	; 0x44
 801082c:	4912      	ldr	r1, [pc, #72]	; (8010878 <dhcp_inc_pcb_refcount+0x9c>)
 801082e:	4618      	mov	r0, r3
 8010830:	f7ff fe34 	bl	801049c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8010834:	4b0c      	ldr	r3, [pc, #48]	; (8010868 <dhcp_inc_pcb_refcount+0x8c>)
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	2243      	movs	r2, #67	; 0x43
 801083a:	490f      	ldr	r1, [pc, #60]	; (8010878 <dhcp_inc_pcb_refcount+0x9c>)
 801083c:	4618      	mov	r0, r3
 801083e:	f7ff feb5 	bl	80105ac <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8010842:	4b09      	ldr	r3, [pc, #36]	; (8010868 <dhcp_inc_pcb_refcount+0x8c>)
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	2200      	movs	r2, #0
 8010848:	490c      	ldr	r1, [pc, #48]	; (801087c <dhcp_inc_pcb_refcount+0xa0>)
 801084a:	4618      	mov	r0, r3
 801084c:	f7ff ff1c 	bl	8010688 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8010850:	4b04      	ldr	r3, [pc, #16]	; (8010864 <dhcp_inc_pcb_refcount+0x88>)
 8010852:	781b      	ldrb	r3, [r3, #0]
 8010854:	3301      	adds	r3, #1
 8010856:	b2da      	uxtb	r2, r3
 8010858:	4b02      	ldr	r3, [pc, #8]	; (8010864 <dhcp_inc_pcb_refcount+0x88>)
 801085a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801085c:	2300      	movs	r3, #0
}
 801085e:	4618      	mov	r0, r3
 8010860:	bd80      	pop	{r7, pc}
 8010862:	bf00      	nop
 8010864:	2000041c 	.word	0x2000041c
 8010868:	20000418 	.word	0x20000418
 801086c:	0801b0dc 	.word	0x0801b0dc
 8010870:	0801b114 	.word	0x0801b114
 8010874:	0801b13c 	.word	0x0801b13c
 8010878:	0801bc40 	.word	0x0801bc40
 801087c:	08012099 	.word	0x08012099

08010880 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8010884:	4b0e      	ldr	r3, [pc, #56]	; (80108c0 <dhcp_dec_pcb_refcount+0x40>)
 8010886:	781b      	ldrb	r3, [r3, #0]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d105      	bne.n	8010898 <dhcp_dec_pcb_refcount+0x18>
 801088c:	4b0d      	ldr	r3, [pc, #52]	; (80108c4 <dhcp_dec_pcb_refcount+0x44>)
 801088e:	22ff      	movs	r2, #255	; 0xff
 8010890:	490d      	ldr	r1, [pc, #52]	; (80108c8 <dhcp_dec_pcb_refcount+0x48>)
 8010892:	480e      	ldr	r0, [pc, #56]	; (80108cc <dhcp_dec_pcb_refcount+0x4c>)
 8010894:	f004 fe64 	bl	8015560 <iprintf>
  dhcp_pcb_refcount--;
 8010898:	4b09      	ldr	r3, [pc, #36]	; (80108c0 <dhcp_dec_pcb_refcount+0x40>)
 801089a:	781b      	ldrb	r3, [r3, #0]
 801089c:	3b01      	subs	r3, #1
 801089e:	b2da      	uxtb	r2, r3
 80108a0:	4b07      	ldr	r3, [pc, #28]	; (80108c0 <dhcp_dec_pcb_refcount+0x40>)
 80108a2:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80108a4:	4b06      	ldr	r3, [pc, #24]	; (80108c0 <dhcp_dec_pcb_refcount+0x40>)
 80108a6:	781b      	ldrb	r3, [r3, #0]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d107      	bne.n	80108bc <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80108ac:	4b08      	ldr	r3, [pc, #32]	; (80108d0 <dhcp_dec_pcb_refcount+0x50>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	4618      	mov	r0, r3
 80108b2:	f7ff ff09 	bl	80106c8 <udp_remove>
    dhcp_pcb = NULL;
 80108b6:	4b06      	ldr	r3, [pc, #24]	; (80108d0 <dhcp_dec_pcb_refcount+0x50>)
 80108b8:	2200      	movs	r2, #0
 80108ba:	601a      	str	r2, [r3, #0]
  }
}
 80108bc:	bf00      	nop
 80108be:	bd80      	pop	{r7, pc}
 80108c0:	2000041c 	.word	0x2000041c
 80108c4:	0801b0dc 	.word	0x0801b0dc
 80108c8:	0801b164 	.word	0x0801b164
 80108cc:	0801b13c 	.word	0x0801b13c
 80108d0:	20000418 	.word	0x20000418

080108d4 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b084      	sub	sp, #16
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108e0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80108e2:	210c      	movs	r1, #12
 80108e4:	68f8      	ldr	r0, [r7, #12]
 80108e6:	f001 f819 	bl	801191c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80108ea:	4b06      	ldr	r3, [pc, #24]	; (8010904 <dhcp_handle_nak+0x30>)
 80108ec:	4a05      	ldr	r2, [pc, #20]	; (8010904 <dhcp_handle_nak+0x30>)
 80108ee:	4905      	ldr	r1, [pc, #20]	; (8010904 <dhcp_handle_nak+0x30>)
 80108f0:	6878      	ldr	r0, [r7, #4]
 80108f2:	f7f9 f963 	bl	8009bbc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f000 fc0c 	bl	8011114 <dhcp_discover>
}
 80108fc:	bf00      	nop
 80108fe:	3710      	adds	r7, #16
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}
 8010904:	0801bc40 	.word	0x0801bc40

08010908 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b084      	sub	sp, #16
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010914:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8010916:	2108      	movs	r1, #8
 8010918:	68f8      	ldr	r0, [r7, #12]
 801091a:	f000 ffff 	bl	801191c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	331c      	adds	r3, #28
 8010922:	2200      	movs	r2, #0
 8010924:	4619      	mov	r1, r3
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f002 fb00 	bl	8012f2c <etharp_query>
 801092c:	4603      	mov	r3, r0
 801092e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	799b      	ldrb	r3, [r3, #6]
 8010934:	2bff      	cmp	r3, #255	; 0xff
 8010936:	d005      	beq.n	8010944 <dhcp_check+0x3c>
    dhcp->tries++;
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	799b      	ldrb	r3, [r3, #6]
 801093c:	3301      	adds	r3, #1
 801093e:	b2da      	uxtb	r2, r3
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8010944:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8010948:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801094a:	893b      	ldrh	r3, [r7, #8]
 801094c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010950:	4a06      	ldr	r2, [pc, #24]	; (801096c <dhcp_check+0x64>)
 8010952:	fb82 1203 	smull	r1, r2, r2, r3
 8010956:	1152      	asrs	r2, r2, #5
 8010958:	17db      	asrs	r3, r3, #31
 801095a:	1ad3      	subs	r3, r2, r3
 801095c:	b29a      	uxth	r2, r3
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8010962:	bf00      	nop
 8010964:	3710      	adds	r7, #16
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}
 801096a:	bf00      	nop
 801096c:	10624dd3 	.word	0x10624dd3

08010970 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b084      	sub	sp, #16
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
 8010978:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801097e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8010980:	4b0c      	ldr	r3, [pc, #48]	; (80109b4 <dhcp_handle_offer+0x44>)
 8010982:	789b      	ldrb	r3, [r3, #2]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d011      	beq.n	80109ac <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	2200      	movs	r2, #0
 801098c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801098e:	4b0a      	ldr	r3, [pc, #40]	; (80109b8 <dhcp_handle_offer+0x48>)
 8010990:	689b      	ldr	r3, [r3, #8]
 8010992:	4618      	mov	r0, r3
 8010994:	f7f8 fae3 	bl	8008f5e <lwip_htonl>
 8010998:	4602      	mov	r2, r0
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	691a      	ldr	r2, [r3, #16]
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80109a6:	6878      	ldr	r0, [r7, #4]
 80109a8:	f000 f808 	bl	80109bc <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80109ac:	bf00      	nop
 80109ae:	3710      	adds	r7, #16
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}
 80109b4:	20006a3c 	.word	0x20006a3c
 80109b8:	20006a44 	.word	0x20006a44

080109bc <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80109bc:	b5b0      	push	{r4, r5, r7, lr}
 80109be:	b08a      	sub	sp, #40	; 0x28
 80109c0:	af02      	add	r7, sp, #8
 80109c2:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d109      	bne.n	80109de <dhcp_select+0x22>
 80109ca:	4b71      	ldr	r3, [pc, #452]	; (8010b90 <dhcp_select+0x1d4>)
 80109cc:	f240 1277 	movw	r2, #375	; 0x177
 80109d0:	4970      	ldr	r1, [pc, #448]	; (8010b94 <dhcp_select+0x1d8>)
 80109d2:	4871      	ldr	r0, [pc, #452]	; (8010b98 <dhcp_select+0x1dc>)
 80109d4:	f004 fdc4 	bl	8015560 <iprintf>
 80109d8:	f06f 030f 	mvn.w	r3, #15
 80109dc:	e0d3      	b.n	8010b86 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109e2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80109e4:	69bb      	ldr	r3, [r7, #24]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d109      	bne.n	80109fe <dhcp_select+0x42>
 80109ea:	4b69      	ldr	r3, [pc, #420]	; (8010b90 <dhcp_select+0x1d4>)
 80109ec:	f240 1279 	movw	r2, #377	; 0x179
 80109f0:	496a      	ldr	r1, [pc, #424]	; (8010b9c <dhcp_select+0x1e0>)
 80109f2:	4869      	ldr	r0, [pc, #420]	; (8010b98 <dhcp_select+0x1dc>)
 80109f4:	f004 fdb4 	bl	8015560 <iprintf>
 80109f8:	f06f 0305 	mvn.w	r3, #5
 80109fc:	e0c3      	b.n	8010b86 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80109fe:	2101      	movs	r1, #1
 8010a00:	69b8      	ldr	r0, [r7, #24]
 8010a02:	f000 ff8b 	bl	801191c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010a06:	f107 030c 	add.w	r3, r7, #12
 8010a0a:	2203      	movs	r2, #3
 8010a0c:	69b9      	ldr	r1, [r7, #24]
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f001 fc10 	bl	8012234 <dhcp_create_msg>
 8010a14:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	f000 8085 	beq.w	8010b28 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	685b      	ldr	r3, [r3, #4]
 8010a22:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010a24:	89b8      	ldrh	r0, [r7, #12]
 8010a26:	693b      	ldr	r3, [r7, #16]
 8010a28:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010a2c:	2302      	movs	r3, #2
 8010a2e:	2239      	movs	r2, #57	; 0x39
 8010a30:	f000 ff8e 	bl	8011950 <dhcp_option>
 8010a34:	4603      	mov	r3, r0
 8010a36:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010a38:	89b8      	ldrh	r0, [r7, #12]
 8010a3a:	693b      	ldr	r3, [r7, #16]
 8010a3c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010a44:	461a      	mov	r2, r3
 8010a46:	f000 ffdd 	bl	8011a04 <dhcp_option_short>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010a4e:	89b8      	ldrh	r0, [r7, #12]
 8010a50:	693b      	ldr	r3, [r7, #16]
 8010a52:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010a56:	2304      	movs	r3, #4
 8010a58:	2232      	movs	r2, #50	; 0x32
 8010a5a:	f000 ff79 	bl	8011950 <dhcp_option>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010a62:	89bc      	ldrh	r4, [r7, #12]
 8010a64:	693b      	ldr	r3, [r7, #16]
 8010a66:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010a6a:	69bb      	ldr	r3, [r7, #24]
 8010a6c:	69db      	ldr	r3, [r3, #28]
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f7f8 fa75 	bl	8008f5e <lwip_htonl>
 8010a74:	4603      	mov	r3, r0
 8010a76:	461a      	mov	r2, r3
 8010a78:	4629      	mov	r1, r5
 8010a7a:	4620      	mov	r0, r4
 8010a7c:	f000 fff4 	bl	8011a68 <dhcp_option_long>
 8010a80:	4603      	mov	r3, r0
 8010a82:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8010a84:	89b8      	ldrh	r0, [r7, #12]
 8010a86:	693b      	ldr	r3, [r7, #16]
 8010a88:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010a8c:	2304      	movs	r3, #4
 8010a8e:	2236      	movs	r2, #54	; 0x36
 8010a90:	f000 ff5e 	bl	8011950 <dhcp_option>
 8010a94:	4603      	mov	r3, r0
 8010a96:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8010a98:	89bc      	ldrh	r4, [r7, #12]
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010aa0:	69bb      	ldr	r3, [r7, #24]
 8010aa2:	699b      	ldr	r3, [r3, #24]
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f7f8 fa5a 	bl	8008f5e <lwip_htonl>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	461a      	mov	r2, r3
 8010aae:	4629      	mov	r1, r5
 8010ab0:	4620      	mov	r0, r4
 8010ab2:	f000 ffd9 	bl	8011a68 <dhcp_option_long>
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010aba:	89b8      	ldrh	r0, [r7, #12]
 8010abc:	693b      	ldr	r3, [r7, #16]
 8010abe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010ac2:	2303      	movs	r3, #3
 8010ac4:	2237      	movs	r2, #55	; 0x37
 8010ac6:	f000 ff43 	bl	8011950 <dhcp_option>
 8010aca:	4603      	mov	r3, r0
 8010acc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010ace:	2300      	movs	r3, #0
 8010ad0:	77bb      	strb	r3, [r7, #30]
 8010ad2:	e00e      	b.n	8010af2 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010ad4:	89b8      	ldrh	r0, [r7, #12]
 8010ad6:	693b      	ldr	r3, [r7, #16]
 8010ad8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010adc:	7fbb      	ldrb	r3, [r7, #30]
 8010ade:	4a30      	ldr	r2, [pc, #192]	; (8010ba0 <dhcp_select+0x1e4>)
 8010ae0:	5cd3      	ldrb	r3, [r2, r3]
 8010ae2:	461a      	mov	r2, r3
 8010ae4:	f000 ff68 	bl	80119b8 <dhcp_option_byte>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010aec:	7fbb      	ldrb	r3, [r7, #30]
 8010aee:	3301      	adds	r3, #1
 8010af0:	77bb      	strb	r3, [r7, #30]
 8010af2:	7fbb      	ldrb	r3, [r7, #30]
 8010af4:	2b02      	cmp	r3, #2
 8010af6:	d9ed      	bls.n	8010ad4 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010af8:	89b8      	ldrh	r0, [r7, #12]
 8010afa:	693b      	ldr	r3, [r7, #16]
 8010afc:	33f0      	adds	r3, #240	; 0xf0
 8010afe:	697a      	ldr	r2, [r7, #20]
 8010b00:	4619      	mov	r1, r3
 8010b02:	f001 fc6d 	bl	80123e0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010b06:	4b27      	ldr	r3, [pc, #156]	; (8010ba4 <dhcp_select+0x1e8>)
 8010b08:	6818      	ldr	r0, [r3, #0]
 8010b0a:	4b27      	ldr	r3, [pc, #156]	; (8010ba8 <dhcp_select+0x1ec>)
 8010b0c:	9301      	str	r3, [sp, #4]
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	9300      	str	r3, [sp, #0]
 8010b12:	2343      	movs	r3, #67	; 0x43
 8010b14:	4a25      	ldr	r2, [pc, #148]	; (8010bac <dhcp_select+0x1f0>)
 8010b16:	6979      	ldr	r1, [r7, #20]
 8010b18:	f7ff fbda 	bl	80102d0 <udp_sendto_if_src>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010b20:	6978      	ldr	r0, [r7, #20]
 8010b22:	f7f9 fca3 	bl	800a46c <pbuf_free>
 8010b26:	e001      	b.n	8010b2c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010b28:	23ff      	movs	r3, #255	; 0xff
 8010b2a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010b2c:	69bb      	ldr	r3, [r7, #24]
 8010b2e:	799b      	ldrb	r3, [r3, #6]
 8010b30:	2bff      	cmp	r3, #255	; 0xff
 8010b32:	d005      	beq.n	8010b40 <dhcp_select+0x184>
    dhcp->tries++;
 8010b34:	69bb      	ldr	r3, [r7, #24]
 8010b36:	799b      	ldrb	r3, [r3, #6]
 8010b38:	3301      	adds	r3, #1
 8010b3a:	b2da      	uxtb	r2, r3
 8010b3c:	69bb      	ldr	r3, [r7, #24]
 8010b3e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8010b40:	69bb      	ldr	r3, [r7, #24]
 8010b42:	799b      	ldrb	r3, [r3, #6]
 8010b44:	2b05      	cmp	r3, #5
 8010b46:	d80d      	bhi.n	8010b64 <dhcp_select+0x1a8>
 8010b48:	69bb      	ldr	r3, [r7, #24]
 8010b4a:	799b      	ldrb	r3, [r3, #6]
 8010b4c:	461a      	mov	r2, r3
 8010b4e:	2301      	movs	r3, #1
 8010b50:	4093      	lsls	r3, r2
 8010b52:	b29b      	uxth	r3, r3
 8010b54:	461a      	mov	r2, r3
 8010b56:	0152      	lsls	r2, r2, #5
 8010b58:	1ad2      	subs	r2, r2, r3
 8010b5a:	0092      	lsls	r2, r2, #2
 8010b5c:	4413      	add	r3, r2
 8010b5e:	00db      	lsls	r3, r3, #3
 8010b60:	b29b      	uxth	r3, r3
 8010b62:	e001      	b.n	8010b68 <dhcp_select+0x1ac>
 8010b64:	f64e 2360 	movw	r3, #60000	; 0xea60
 8010b68:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010b6a:	89fb      	ldrh	r3, [r7, #14]
 8010b6c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010b70:	4a0f      	ldr	r2, [pc, #60]	; (8010bb0 <dhcp_select+0x1f4>)
 8010b72:	fb82 1203 	smull	r1, r2, r2, r3
 8010b76:	1152      	asrs	r2, r2, #5
 8010b78:	17db      	asrs	r3, r3, #31
 8010b7a:	1ad3      	subs	r3, r2, r3
 8010b7c:	b29a      	uxth	r2, r3
 8010b7e:	69bb      	ldr	r3, [r7, #24]
 8010b80:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010b82:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	3720      	adds	r7, #32
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8010b8e:	bf00      	nop
 8010b90:	0801b0dc 	.word	0x0801b0dc
 8010b94:	0801b188 	.word	0x0801b188
 8010b98:	0801b13c 	.word	0x0801b13c
 8010b9c:	0801b1a4 	.word	0x0801b1a4
 8010ba0:	20000020 	.word	0x20000020
 8010ba4:	20000418 	.word	0x20000418
 8010ba8:	0801bc40 	.word	0x0801bc40
 8010bac:	0801bc44 	.word	0x0801bc44
 8010bb0:	10624dd3 	.word	0x10624dd3

08010bb4 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b082      	sub	sp, #8
 8010bb8:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8010bba:	4b27      	ldr	r3, [pc, #156]	; (8010c58 <dhcp_coarse_tmr+0xa4>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	607b      	str	r3, [r7, #4]
 8010bc0:	e042      	b.n	8010c48 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bc6:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8010bc8:	683b      	ldr	r3, [r7, #0]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d039      	beq.n	8010c42 <dhcp_coarse_tmr+0x8e>
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	795b      	ldrb	r3, [r3, #5]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d035      	beq.n	8010c42 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	8a9b      	ldrh	r3, [r3, #20]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d012      	beq.n	8010c04 <dhcp_coarse_tmr+0x50>
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	8a5b      	ldrh	r3, [r3, #18]
 8010be2:	3301      	adds	r3, #1
 8010be4:	b29a      	uxth	r2, r3
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	825a      	strh	r2, [r3, #18]
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	8a5a      	ldrh	r2, [r3, #18]
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	8a9b      	ldrh	r3, [r3, #20]
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	d106      	bne.n	8010c04 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f000 fdf6 	bl	80117e8 <dhcp_release_and_stop>
        dhcp_start(netif);
 8010bfc:	6878      	ldr	r0, [r7, #4]
 8010bfe:	f000 f969 	bl	8010ed4 <dhcp_start>
 8010c02:	e01e      	b.n	8010c42 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	8a1b      	ldrh	r3, [r3, #16]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d00b      	beq.n	8010c24 <dhcp_coarse_tmr+0x70>
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	8a1b      	ldrh	r3, [r3, #16]
 8010c10:	1e5a      	subs	r2, r3, #1
 8010c12:	b291      	uxth	r1, r2
 8010c14:	683a      	ldr	r2, [r7, #0]
 8010c16:	8211      	strh	r1, [r2, #16]
 8010c18:	2b01      	cmp	r3, #1
 8010c1a:	d103      	bne.n	8010c24 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	f000 f8c6 	bl	8010dae <dhcp_t2_timeout>
 8010c22:	e00e      	b.n	8010c42 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	89db      	ldrh	r3, [r3, #14]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d00a      	beq.n	8010c42 <dhcp_coarse_tmr+0x8e>
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	89db      	ldrh	r3, [r3, #14]
 8010c30:	1e5a      	subs	r2, r3, #1
 8010c32:	b291      	uxth	r1, r2
 8010c34:	683a      	ldr	r2, [r7, #0]
 8010c36:	81d1      	strh	r1, [r2, #14]
 8010c38:	2b01      	cmp	r3, #1
 8010c3a:	d102      	bne.n	8010c42 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	f000 f888 	bl	8010d52 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	607b      	str	r3, [r7, #4]
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d1b9      	bne.n	8010bc2 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8010c4e:	bf00      	nop
 8010c50:	bf00      	nop
 8010c52:	3708      	adds	r7, #8
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	20006a10 	.word	0x20006a10

08010c5c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b082      	sub	sp, #8
 8010c60:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8010c62:	4b16      	ldr	r3, [pc, #88]	; (8010cbc <dhcp_fine_tmr+0x60>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	607b      	str	r3, [r7, #4]
 8010c68:	e020      	b.n	8010cac <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c6e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d017      	beq.n	8010ca6 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	891b      	ldrh	r3, [r3, #8]
 8010c7a:	2b01      	cmp	r3, #1
 8010c7c:	d906      	bls.n	8010c8c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8010c7e:	683b      	ldr	r3, [r7, #0]
 8010c80:	891b      	ldrh	r3, [r3, #8]
 8010c82:	3b01      	subs	r3, #1
 8010c84:	b29a      	uxth	r2, r3
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	811a      	strh	r2, [r3, #8]
 8010c8a:	e00c      	b.n	8010ca6 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	891b      	ldrh	r3, [r3, #8]
 8010c90:	2b01      	cmp	r3, #1
 8010c92:	d108      	bne.n	8010ca6 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	891b      	ldrh	r3, [r3, #8]
 8010c98:	3b01      	subs	r3, #1
 8010c9a:	b29a      	uxth	r2, r3
 8010c9c:	683b      	ldr	r3, [r7, #0]
 8010c9e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f000 f80d 	bl	8010cc0 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	607b      	str	r3, [r7, #4]
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d1db      	bne.n	8010c6a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8010cb2:	bf00      	nop
 8010cb4:	bf00      	nop
 8010cb6:	3708      	adds	r7, #8
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}
 8010cbc:	20006a10 	.word	0x20006a10

08010cc0 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b084      	sub	sp, #16
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ccc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	795b      	ldrb	r3, [r3, #5]
 8010cd2:	2b0c      	cmp	r3, #12
 8010cd4:	d003      	beq.n	8010cde <dhcp_timeout+0x1e>
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	795b      	ldrb	r3, [r3, #5]
 8010cda:	2b06      	cmp	r3, #6
 8010cdc:	d103      	bne.n	8010ce6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f000 fa18 	bl	8011114 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8010ce4:	e031      	b.n	8010d4a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	795b      	ldrb	r3, [r3, #5]
 8010cea:	2b01      	cmp	r3, #1
 8010cec:	d10e      	bne.n	8010d0c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	799b      	ldrb	r3, [r3, #6]
 8010cf2:	2b05      	cmp	r3, #5
 8010cf4:	d803      	bhi.n	8010cfe <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8010cf6:	6878      	ldr	r0, [r7, #4]
 8010cf8:	f7ff fe60 	bl	80109bc <dhcp_select>
}
 8010cfc:	e025      	b.n	8010d4a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f000 fd72 	bl	80117e8 <dhcp_release_and_stop>
      dhcp_start(netif);
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f000 f8e5 	bl	8010ed4 <dhcp_start>
}
 8010d0a:	e01e      	b.n	8010d4a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	795b      	ldrb	r3, [r3, #5]
 8010d10:	2b08      	cmp	r3, #8
 8010d12:	d10b      	bne.n	8010d2c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	799b      	ldrb	r3, [r3, #6]
 8010d18:	2b01      	cmp	r3, #1
 8010d1a:	d803      	bhi.n	8010d24 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f7ff fdf3 	bl	8010908 <dhcp_check>
}
 8010d22:	e012      	b.n	8010d4a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f000 fa97 	bl	8011258 <dhcp_bind>
}
 8010d2a:	e00e      	b.n	8010d4a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	795b      	ldrb	r3, [r3, #5]
 8010d30:	2b03      	cmp	r3, #3
 8010d32:	d10a      	bne.n	8010d4a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	799b      	ldrb	r3, [r3, #6]
 8010d38:	2b01      	cmp	r3, #1
 8010d3a:	d803      	bhi.n	8010d44 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f000 fc9d 	bl	801167c <dhcp_reboot>
}
 8010d42:	e002      	b.n	8010d4a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	f000 f9e5 	bl	8011114 <dhcp_discover>
}
 8010d4a:	bf00      	nop
 8010d4c:	3710      	adds	r7, #16
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}

08010d52 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8010d52:	b580      	push	{r7, lr}
 8010d54:	b084      	sub	sp, #16
 8010d56:	af00      	add	r7, sp, #0
 8010d58:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d5e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	795b      	ldrb	r3, [r3, #5]
 8010d64:	2b01      	cmp	r3, #1
 8010d66:	d007      	beq.n	8010d78 <dhcp_t1_timeout+0x26>
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	795b      	ldrb	r3, [r3, #5]
 8010d6c:	2b0a      	cmp	r3, #10
 8010d6e:	d003      	beq.n	8010d78 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010d74:	2b05      	cmp	r3, #5
 8010d76:	d116      	bne.n	8010da6 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8010d78:	6878      	ldr	r0, [r7, #4]
 8010d7a:	f000 fb47 	bl	801140c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	899b      	ldrh	r3, [r3, #12]
 8010d82:	461a      	mov	r2, r3
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	8a5b      	ldrh	r3, [r3, #18]
 8010d88:	1ad3      	subs	r3, r2, r3
 8010d8a:	2b01      	cmp	r3, #1
 8010d8c:	dd0b      	ble.n	8010da6 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	899b      	ldrh	r3, [r3, #12]
 8010d92:	461a      	mov	r2, r3
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	8a5b      	ldrh	r3, [r3, #18]
 8010d98:	1ad3      	subs	r3, r2, r3
 8010d9a:	0fda      	lsrs	r2, r3, #31
 8010d9c:	4413      	add	r3, r2
 8010d9e:	105b      	asrs	r3, r3, #1
 8010da0:	b29a      	uxth	r2, r3
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8010da6:	bf00      	nop
 8010da8:	3710      	adds	r7, #16
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}

08010dae <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8010dae:	b580      	push	{r7, lr}
 8010db0:	b084      	sub	sp, #16
 8010db2:	af00      	add	r7, sp, #0
 8010db4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dba:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	795b      	ldrb	r3, [r3, #5]
 8010dc0:	2b01      	cmp	r3, #1
 8010dc2:	d00b      	beq.n	8010ddc <dhcp_t2_timeout+0x2e>
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	795b      	ldrb	r3, [r3, #5]
 8010dc8:	2b0a      	cmp	r3, #10
 8010dca:	d007      	beq.n	8010ddc <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010dd0:	2b05      	cmp	r3, #5
 8010dd2:	d003      	beq.n	8010ddc <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	795b      	ldrb	r3, [r3, #5]
 8010dd8:	2b04      	cmp	r3, #4
 8010dda:	d116      	bne.n	8010e0a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f000 fbb1 	bl	8011544 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	8a9b      	ldrh	r3, [r3, #20]
 8010de6:	461a      	mov	r2, r3
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	8a5b      	ldrh	r3, [r3, #18]
 8010dec:	1ad3      	subs	r3, r2, r3
 8010dee:	2b01      	cmp	r3, #1
 8010df0:	dd0b      	ble.n	8010e0a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	8a9b      	ldrh	r3, [r3, #20]
 8010df6:	461a      	mov	r2, r3
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	8a5b      	ldrh	r3, [r3, #18]
 8010dfc:	1ad3      	subs	r3, r2, r3
 8010dfe:	0fda      	lsrs	r2, r3, #31
 8010e00:	4413      	add	r3, r2
 8010e02:	105b      	asrs	r3, r3, #1
 8010e04:	b29a      	uxth	r2, r3
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8010e0a:	bf00      	nop
 8010e0c:	3710      	adds	r7, #16
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd80      	pop	{r7, pc}
	...

08010e14 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b084      	sub	sp, #16
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
 8010e1c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e22:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	2200      	movs	r2, #0
 8010e28:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8010e30:	4b26      	ldr	r3, [pc, #152]	; (8010ecc <dhcp_handle_ack+0xb8>)
 8010e32:	78db      	ldrb	r3, [r3, #3]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d003      	beq.n	8010e40 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8010e38:	4b25      	ldr	r3, [pc, #148]	; (8010ed0 <dhcp_handle_ack+0xbc>)
 8010e3a:	68da      	ldr	r2, [r3, #12]
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8010e40:	4b22      	ldr	r3, [pc, #136]	; (8010ecc <dhcp_handle_ack+0xb8>)
 8010e42:	791b      	ldrb	r3, [r3, #4]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d004      	beq.n	8010e52 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8010e48:	4b21      	ldr	r3, [pc, #132]	; (8010ed0 <dhcp_handle_ack+0xbc>)
 8010e4a:	691a      	ldr	r2, [r3, #16]
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8010e50:	e004      	b.n	8010e5c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e56:	085a      	lsrs	r2, r3, #1
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8010e5c:	4b1b      	ldr	r3, [pc, #108]	; (8010ecc <dhcp_handle_ack+0xb8>)
 8010e5e:	795b      	ldrb	r3, [r3, #5]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d004      	beq.n	8010e6e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8010e64:	4b1a      	ldr	r3, [pc, #104]	; (8010ed0 <dhcp_handle_ack+0xbc>)
 8010e66:	695a      	ldr	r2, [r3, #20]
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	631a      	str	r2, [r3, #48]	; 0x30
 8010e6c:	e007      	b.n	8010e7e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010e72:	4613      	mov	r3, r2
 8010e74:	00db      	lsls	r3, r3, #3
 8010e76:	1a9b      	subs	r3, r3, r2
 8010e78:	08da      	lsrs	r2, r3, #3
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	691a      	ldr	r2, [r3, #16]
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8010e86:	4b11      	ldr	r3, [pc, #68]	; (8010ecc <dhcp_handle_ack+0xb8>)
 8010e88:	799b      	ldrb	r3, [r3, #6]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d00b      	beq.n	8010ea6 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8010e8e:	4b10      	ldr	r3, [pc, #64]	; (8010ed0 <dhcp_handle_ack+0xbc>)
 8010e90:	699b      	ldr	r3, [r3, #24]
 8010e92:	4618      	mov	r0, r3
 8010e94:	f7f8 f863 	bl	8008f5e <lwip_htonl>
 8010e98:	4602      	mov	r2, r0
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	2201      	movs	r2, #1
 8010ea2:	71da      	strb	r2, [r3, #7]
 8010ea4:	e002      	b.n	8010eac <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8010eac:	4b07      	ldr	r3, [pc, #28]	; (8010ecc <dhcp_handle_ack+0xb8>)
 8010eae:	79db      	ldrb	r3, [r3, #7]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d007      	beq.n	8010ec4 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8010eb4:	4b06      	ldr	r3, [pc, #24]	; (8010ed0 <dhcp_handle_ack+0xbc>)
 8010eb6:	69db      	ldr	r3, [r3, #28]
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f7f8 f850 	bl	8008f5e <lwip_htonl>
 8010ebe:	4602      	mov	r2, r0
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8010ec4:	bf00      	nop
 8010ec6:	3710      	adds	r7, #16
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}
 8010ecc:	20006a3c 	.word	0x20006a3c
 8010ed0:	20006a44 	.word	0x20006a44

08010ed4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b084      	sub	sp, #16
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d109      	bne.n	8010ef6 <dhcp_start+0x22>
 8010ee2:	4b37      	ldr	r3, [pc, #220]	; (8010fc0 <dhcp_start+0xec>)
 8010ee4:	f240 22e7 	movw	r2, #743	; 0x2e7
 8010ee8:	4936      	ldr	r1, [pc, #216]	; (8010fc4 <dhcp_start+0xf0>)
 8010eea:	4837      	ldr	r0, [pc, #220]	; (8010fc8 <dhcp_start+0xf4>)
 8010eec:	f004 fb38 	bl	8015560 <iprintf>
 8010ef0:	f06f 030f 	mvn.w	r3, #15
 8010ef4:	e060      	b.n	8010fb8 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010efc:	f003 0301 	and.w	r3, r3, #1
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d109      	bne.n	8010f18 <dhcp_start+0x44>
 8010f04:	4b2e      	ldr	r3, [pc, #184]	; (8010fc0 <dhcp_start+0xec>)
 8010f06:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8010f0a:	4930      	ldr	r1, [pc, #192]	; (8010fcc <dhcp_start+0xf8>)
 8010f0c:	482e      	ldr	r0, [pc, #184]	; (8010fc8 <dhcp_start+0xf4>)
 8010f0e:	f004 fb27 	bl	8015560 <iprintf>
 8010f12:	f06f 030f 	mvn.w	r3, #15
 8010f16:	e04f      	b.n	8010fb8 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f1c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f22:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8010f26:	d202      	bcs.n	8010f2e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8010f28:	f04f 33ff 	mov.w	r3, #4294967295
 8010f2c:	e044      	b.n	8010fb8 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d10d      	bne.n	8010f50 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8010f34:	2034      	movs	r0, #52	; 0x34
 8010f36:	f7f8 fae5 	bl	8009504 <mem_malloc>
 8010f3a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d102      	bne.n	8010f48 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8010f42:	f04f 33ff 	mov.w	r3, #4294967295
 8010f46:	e037      	b.n	8010fb8 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	68fa      	ldr	r2, [r7, #12]
 8010f4c:	625a      	str	r2, [r3, #36]	; 0x24
 8010f4e:	e005      	b.n	8010f5c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	791b      	ldrb	r3, [r3, #4]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d001      	beq.n	8010f5c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010f58:	f7ff fc92 	bl	8010880 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8010f5c:	2234      	movs	r2, #52	; 0x34
 8010f5e:	2100      	movs	r1, #0
 8010f60:	68f8      	ldr	r0, [r7, #12]
 8010f62:	f003 fde1 	bl	8014b28 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8010f66:	f7ff fc39 	bl	80107dc <dhcp_inc_pcb_refcount>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d002      	beq.n	8010f76 <dhcp_start+0xa2>
    return ERR_MEM;
 8010f70:	f04f 33ff 	mov.w	r3, #4294967295
 8010f74:	e020      	b.n	8010fb8 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	2201      	movs	r2, #1
 8010f7a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010f82:	f003 0304 	and.w	r3, r3, #4
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d105      	bne.n	8010f96 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8010f8a:	2102      	movs	r1, #2
 8010f8c:	68f8      	ldr	r0, [r7, #12]
 8010f8e:	f000 fcc5 	bl	801191c <dhcp_set_state>
    return ERR_OK;
 8010f92:	2300      	movs	r3, #0
 8010f94:	e010      	b.n	8010fb8 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8010f96:	6878      	ldr	r0, [r7, #4]
 8010f98:	f000 f8bc 	bl	8011114 <dhcp_discover>
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8010fa0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d005      	beq.n	8010fb4 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f000 fc1d 	bl	80117e8 <dhcp_release_and_stop>
    return ERR_MEM;
 8010fae:	f04f 33ff 	mov.w	r3, #4294967295
 8010fb2:	e001      	b.n	8010fb8 <dhcp_start+0xe4>
  }
  return result;
 8010fb4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010fb8:	4618      	mov	r0, r3
 8010fba:	3710      	adds	r7, #16
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}
 8010fc0:	0801b0dc 	.word	0x0801b0dc
 8010fc4:	0801b1c0 	.word	0x0801b1c0
 8010fc8:	0801b13c 	.word	0x0801b13c
 8010fcc:	0801b204 	.word	0x0801b204

08010fd0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b084      	sub	sp, #16
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
 8010fd8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d107      	bne.n	8010ff0 <dhcp_arp_reply+0x20>
 8010fe0:	4b0e      	ldr	r3, [pc, #56]	; (801101c <dhcp_arp_reply+0x4c>)
 8010fe2:	f240 328b 	movw	r2, #907	; 0x38b
 8010fe6:	490e      	ldr	r1, [pc, #56]	; (8011020 <dhcp_arp_reply+0x50>)
 8010fe8:	480e      	ldr	r0, [pc, #56]	; (8011024 <dhcp_arp_reply+0x54>)
 8010fea:	f004 fab9 	bl	8015560 <iprintf>
 8010fee:	e012      	b.n	8011016 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ff4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d00c      	beq.n	8011016 <dhcp_arp_reply+0x46>
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	795b      	ldrb	r3, [r3, #5]
 8011000:	2b08      	cmp	r3, #8
 8011002:	d108      	bne.n	8011016 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	681a      	ldr	r2, [r3, #0]
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	69db      	ldr	r3, [r3, #28]
 801100c:	429a      	cmp	r2, r3
 801100e:	d102      	bne.n	8011016 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f000 f809 	bl	8011028 <dhcp_decline>
    }
  }
}
 8011016:	3710      	adds	r7, #16
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}
 801101c:	0801b0dc 	.word	0x0801b0dc
 8011020:	0801b1c0 	.word	0x0801b1c0
 8011024:	0801b13c 	.word	0x0801b13c

08011028 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8011028:	b5b0      	push	{r4, r5, r7, lr}
 801102a:	b08a      	sub	sp, #40	; 0x28
 801102c:	af02      	add	r7, sp, #8
 801102e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011034:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8011036:	210c      	movs	r1, #12
 8011038:	69b8      	ldr	r0, [r7, #24]
 801103a:	f000 fc6f 	bl	801191c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801103e:	f107 030c 	add.w	r3, r7, #12
 8011042:	2204      	movs	r2, #4
 8011044:	69b9      	ldr	r1, [r7, #24]
 8011046:	6878      	ldr	r0, [r7, #4]
 8011048:	f001 f8f4 	bl	8012234 <dhcp_create_msg>
 801104c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801104e:	697b      	ldr	r3, [r7, #20]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d035      	beq.n	80110c0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011054:	697b      	ldr	r3, [r7, #20]
 8011056:	685b      	ldr	r3, [r3, #4]
 8011058:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801105a:	89b8      	ldrh	r0, [r7, #12]
 801105c:	693b      	ldr	r3, [r7, #16]
 801105e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011062:	2304      	movs	r3, #4
 8011064:	2232      	movs	r2, #50	; 0x32
 8011066:	f000 fc73 	bl	8011950 <dhcp_option>
 801106a:	4603      	mov	r3, r0
 801106c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801106e:	89bc      	ldrh	r4, [r7, #12]
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011076:	69bb      	ldr	r3, [r7, #24]
 8011078:	69db      	ldr	r3, [r3, #28]
 801107a:	4618      	mov	r0, r3
 801107c:	f7f7 ff6f 	bl	8008f5e <lwip_htonl>
 8011080:	4603      	mov	r3, r0
 8011082:	461a      	mov	r2, r3
 8011084:	4629      	mov	r1, r5
 8011086:	4620      	mov	r0, r4
 8011088:	f000 fcee 	bl	8011a68 <dhcp_option_long>
 801108c:	4603      	mov	r3, r0
 801108e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011090:	89b8      	ldrh	r0, [r7, #12]
 8011092:	693b      	ldr	r3, [r7, #16]
 8011094:	33f0      	adds	r3, #240	; 0xf0
 8011096:	697a      	ldr	r2, [r7, #20]
 8011098:	4619      	mov	r1, r3
 801109a:	f001 f9a1 	bl	80123e0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801109e:	4b19      	ldr	r3, [pc, #100]	; (8011104 <dhcp_decline+0xdc>)
 80110a0:	6818      	ldr	r0, [r3, #0]
 80110a2:	4b19      	ldr	r3, [pc, #100]	; (8011108 <dhcp_decline+0xe0>)
 80110a4:	9301      	str	r3, [sp, #4]
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	9300      	str	r3, [sp, #0]
 80110aa:	2343      	movs	r3, #67	; 0x43
 80110ac:	4a17      	ldr	r2, [pc, #92]	; (801110c <dhcp_decline+0xe4>)
 80110ae:	6979      	ldr	r1, [r7, #20]
 80110b0:	f7ff f90e 	bl	80102d0 <udp_sendto_if_src>
 80110b4:	4603      	mov	r3, r0
 80110b6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80110b8:	6978      	ldr	r0, [r7, #20]
 80110ba:	f7f9 f9d7 	bl	800a46c <pbuf_free>
 80110be:	e001      	b.n	80110c4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80110c0:	23ff      	movs	r3, #255	; 0xff
 80110c2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80110c4:	69bb      	ldr	r3, [r7, #24]
 80110c6:	799b      	ldrb	r3, [r3, #6]
 80110c8:	2bff      	cmp	r3, #255	; 0xff
 80110ca:	d005      	beq.n	80110d8 <dhcp_decline+0xb0>
    dhcp->tries++;
 80110cc:	69bb      	ldr	r3, [r7, #24]
 80110ce:	799b      	ldrb	r3, [r3, #6]
 80110d0:	3301      	adds	r3, #1
 80110d2:	b2da      	uxtb	r2, r3
 80110d4:	69bb      	ldr	r3, [r7, #24]
 80110d6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80110d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80110dc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80110de:	89fb      	ldrh	r3, [r7, #14]
 80110e0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80110e4:	4a0a      	ldr	r2, [pc, #40]	; (8011110 <dhcp_decline+0xe8>)
 80110e6:	fb82 1203 	smull	r1, r2, r2, r3
 80110ea:	1152      	asrs	r2, r2, #5
 80110ec:	17db      	asrs	r3, r3, #31
 80110ee:	1ad3      	subs	r3, r2, r3
 80110f0:	b29a      	uxth	r2, r3
 80110f2:	69bb      	ldr	r3, [r7, #24]
 80110f4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80110f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80110fa:	4618      	mov	r0, r3
 80110fc:	3720      	adds	r7, #32
 80110fe:	46bd      	mov	sp, r7
 8011100:	bdb0      	pop	{r4, r5, r7, pc}
 8011102:	bf00      	nop
 8011104:	20000418 	.word	0x20000418
 8011108:	0801bc40 	.word	0x0801bc40
 801110c:	0801bc44 	.word	0x0801bc44
 8011110:	10624dd3 	.word	0x10624dd3

08011114 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b08a      	sub	sp, #40	; 0x28
 8011118:	af02      	add	r7, sp, #8
 801111a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011120:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8011122:	2300      	movs	r3, #0
 8011124:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8011126:	69bb      	ldr	r3, [r7, #24]
 8011128:	2200      	movs	r2, #0
 801112a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801112c:	2106      	movs	r1, #6
 801112e:	69b8      	ldr	r0, [r7, #24]
 8011130:	f000 fbf4 	bl	801191c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8011134:	f107 0308 	add.w	r3, r7, #8
 8011138:	2201      	movs	r2, #1
 801113a:	69b9      	ldr	r1, [r7, #24]
 801113c:	6878      	ldr	r0, [r7, #4]
 801113e:	f001 f879 	bl	8012234 <dhcp_create_msg>
 8011142:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8011144:	693b      	ldr	r3, [r7, #16]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d04b      	beq.n	80111e2 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801114a:	693b      	ldr	r3, [r7, #16]
 801114c:	685b      	ldr	r3, [r3, #4]
 801114e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011150:	8938      	ldrh	r0, [r7, #8]
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011158:	2302      	movs	r3, #2
 801115a:	2239      	movs	r2, #57	; 0x39
 801115c:	f000 fbf8 	bl	8011950 <dhcp_option>
 8011160:	4603      	mov	r3, r0
 8011162:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011164:	8938      	ldrh	r0, [r7, #8]
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011170:	461a      	mov	r2, r3
 8011172:	f000 fc47 	bl	8011a04 <dhcp_option_short>
 8011176:	4603      	mov	r3, r0
 8011178:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801117a:	8938      	ldrh	r0, [r7, #8]
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011182:	2303      	movs	r3, #3
 8011184:	2237      	movs	r2, #55	; 0x37
 8011186:	f000 fbe3 	bl	8011950 <dhcp_option>
 801118a:	4603      	mov	r3, r0
 801118c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801118e:	2300      	movs	r3, #0
 8011190:	77fb      	strb	r3, [r7, #31]
 8011192:	e00e      	b.n	80111b2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011194:	8938      	ldrh	r0, [r7, #8]
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801119c:	7ffb      	ldrb	r3, [r7, #31]
 801119e:	4a29      	ldr	r2, [pc, #164]	; (8011244 <dhcp_discover+0x130>)
 80111a0:	5cd3      	ldrb	r3, [r2, r3]
 80111a2:	461a      	mov	r2, r3
 80111a4:	f000 fc08 	bl	80119b8 <dhcp_option_byte>
 80111a8:	4603      	mov	r3, r0
 80111aa:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80111ac:	7ffb      	ldrb	r3, [r7, #31]
 80111ae:	3301      	adds	r3, #1
 80111b0:	77fb      	strb	r3, [r7, #31]
 80111b2:	7ffb      	ldrb	r3, [r7, #31]
 80111b4:	2b02      	cmp	r3, #2
 80111b6:	d9ed      	bls.n	8011194 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80111b8:	8938      	ldrh	r0, [r7, #8]
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	33f0      	adds	r3, #240	; 0xf0
 80111be:	693a      	ldr	r2, [r7, #16]
 80111c0:	4619      	mov	r1, r3
 80111c2:	f001 f90d 	bl	80123e0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80111c6:	4b20      	ldr	r3, [pc, #128]	; (8011248 <dhcp_discover+0x134>)
 80111c8:	6818      	ldr	r0, [r3, #0]
 80111ca:	4b20      	ldr	r3, [pc, #128]	; (801124c <dhcp_discover+0x138>)
 80111cc:	9301      	str	r3, [sp, #4]
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	9300      	str	r3, [sp, #0]
 80111d2:	2343      	movs	r3, #67	; 0x43
 80111d4:	4a1e      	ldr	r2, [pc, #120]	; (8011250 <dhcp_discover+0x13c>)
 80111d6:	6939      	ldr	r1, [r7, #16]
 80111d8:	f7ff f87a 	bl	80102d0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80111dc:	6938      	ldr	r0, [r7, #16]
 80111de:	f7f9 f945 	bl	800a46c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80111e2:	69bb      	ldr	r3, [r7, #24]
 80111e4:	799b      	ldrb	r3, [r3, #6]
 80111e6:	2bff      	cmp	r3, #255	; 0xff
 80111e8:	d005      	beq.n	80111f6 <dhcp_discover+0xe2>
    dhcp->tries++;
 80111ea:	69bb      	ldr	r3, [r7, #24]
 80111ec:	799b      	ldrb	r3, [r3, #6]
 80111ee:	3301      	adds	r3, #1
 80111f0:	b2da      	uxtb	r2, r3
 80111f2:	69bb      	ldr	r3, [r7, #24]
 80111f4:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80111f6:	69bb      	ldr	r3, [r7, #24]
 80111f8:	799b      	ldrb	r3, [r3, #6]
 80111fa:	2b05      	cmp	r3, #5
 80111fc:	d80d      	bhi.n	801121a <dhcp_discover+0x106>
 80111fe:	69bb      	ldr	r3, [r7, #24]
 8011200:	799b      	ldrb	r3, [r3, #6]
 8011202:	461a      	mov	r2, r3
 8011204:	2301      	movs	r3, #1
 8011206:	4093      	lsls	r3, r2
 8011208:	b29b      	uxth	r3, r3
 801120a:	461a      	mov	r2, r3
 801120c:	0152      	lsls	r2, r2, #5
 801120e:	1ad2      	subs	r2, r2, r3
 8011210:	0092      	lsls	r2, r2, #2
 8011212:	4413      	add	r3, r2
 8011214:	00db      	lsls	r3, r3, #3
 8011216:	b29b      	uxth	r3, r3
 8011218:	e001      	b.n	801121e <dhcp_discover+0x10a>
 801121a:	f64e 2360 	movw	r3, #60000	; 0xea60
 801121e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011220:	897b      	ldrh	r3, [r7, #10]
 8011222:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011226:	4a0b      	ldr	r2, [pc, #44]	; (8011254 <dhcp_discover+0x140>)
 8011228:	fb82 1203 	smull	r1, r2, r2, r3
 801122c:	1152      	asrs	r2, r2, #5
 801122e:	17db      	asrs	r3, r3, #31
 8011230:	1ad3      	subs	r3, r2, r3
 8011232:	b29a      	uxth	r2, r3
 8011234:	69bb      	ldr	r3, [r7, #24]
 8011236:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011238:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801123c:	4618      	mov	r0, r3
 801123e:	3720      	adds	r7, #32
 8011240:	46bd      	mov	sp, r7
 8011242:	bd80      	pop	{r7, pc}
 8011244:	20000020 	.word	0x20000020
 8011248:	20000418 	.word	0x20000418
 801124c:	0801bc40 	.word	0x0801bc40
 8011250:	0801bc44 	.word	0x0801bc44
 8011254:	10624dd3 	.word	0x10624dd3

08011258 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b088      	sub	sp, #32
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d107      	bne.n	8011276 <dhcp_bind+0x1e>
 8011266:	4b64      	ldr	r3, [pc, #400]	; (80113f8 <dhcp_bind+0x1a0>)
 8011268:	f240 4215 	movw	r2, #1045	; 0x415
 801126c:	4963      	ldr	r1, [pc, #396]	; (80113fc <dhcp_bind+0x1a4>)
 801126e:	4864      	ldr	r0, [pc, #400]	; (8011400 <dhcp_bind+0x1a8>)
 8011270:	f004 f976 	bl	8015560 <iprintf>
 8011274:	e0bc      	b.n	80113f0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801127a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801127c:	69bb      	ldr	r3, [r7, #24]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d107      	bne.n	8011292 <dhcp_bind+0x3a>
 8011282:	4b5d      	ldr	r3, [pc, #372]	; (80113f8 <dhcp_bind+0x1a0>)
 8011284:	f240 4217 	movw	r2, #1047	; 0x417
 8011288:	495e      	ldr	r1, [pc, #376]	; (8011404 <dhcp_bind+0x1ac>)
 801128a:	485d      	ldr	r0, [pc, #372]	; (8011400 <dhcp_bind+0x1a8>)
 801128c:	f004 f968 	bl	8015560 <iprintf>
 8011290:	e0ae      	b.n	80113f0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8011292:	69bb      	ldr	r3, [r7, #24]
 8011294:	2200      	movs	r2, #0
 8011296:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8011298:	69bb      	ldr	r3, [r7, #24]
 801129a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801129c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112a0:	d019      	beq.n	80112d6 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80112a2:	69bb      	ldr	r3, [r7, #24]
 80112a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112a6:	331e      	adds	r3, #30
 80112a8:	4a57      	ldr	r2, [pc, #348]	; (8011408 <dhcp_bind+0x1b0>)
 80112aa:	fba2 2303 	umull	r2, r3, r2, r3
 80112ae:	095b      	lsrs	r3, r3, #5
 80112b0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80112b2:	69fb      	ldr	r3, [r7, #28]
 80112b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80112b8:	d302      	bcc.n	80112c0 <dhcp_bind+0x68>
      timeout = 0xffff;
 80112ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80112be:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80112c0:	69fb      	ldr	r3, [r7, #28]
 80112c2:	b29a      	uxth	r2, r3
 80112c4:	69bb      	ldr	r3, [r7, #24]
 80112c6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80112c8:	69bb      	ldr	r3, [r7, #24]
 80112ca:	8a9b      	ldrh	r3, [r3, #20]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d102      	bne.n	80112d6 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80112d0:	69bb      	ldr	r3, [r7, #24]
 80112d2:	2201      	movs	r2, #1
 80112d4:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80112d6:	69bb      	ldr	r3, [r7, #24]
 80112d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112de:	d01d      	beq.n	801131c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80112e0:	69bb      	ldr	r3, [r7, #24]
 80112e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112e4:	331e      	adds	r3, #30
 80112e6:	4a48      	ldr	r2, [pc, #288]	; (8011408 <dhcp_bind+0x1b0>)
 80112e8:	fba2 2303 	umull	r2, r3, r2, r3
 80112ec:	095b      	lsrs	r3, r3, #5
 80112ee:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80112f0:	69fb      	ldr	r3, [r7, #28]
 80112f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80112f6:	d302      	bcc.n	80112fe <dhcp_bind+0xa6>
      timeout = 0xffff;
 80112f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80112fc:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80112fe:	69fb      	ldr	r3, [r7, #28]
 8011300:	b29a      	uxth	r2, r3
 8011302:	69bb      	ldr	r3, [r7, #24]
 8011304:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8011306:	69bb      	ldr	r3, [r7, #24]
 8011308:	895b      	ldrh	r3, [r3, #10]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d102      	bne.n	8011314 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801130e:	69bb      	ldr	r3, [r7, #24]
 8011310:	2201      	movs	r2, #1
 8011312:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8011314:	69bb      	ldr	r3, [r7, #24]
 8011316:	895a      	ldrh	r2, [r3, #10]
 8011318:	69bb      	ldr	r3, [r7, #24]
 801131a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801131c:	69bb      	ldr	r3, [r7, #24]
 801131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011324:	d01d      	beq.n	8011362 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8011326:	69bb      	ldr	r3, [r7, #24]
 8011328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801132a:	331e      	adds	r3, #30
 801132c:	4a36      	ldr	r2, [pc, #216]	; (8011408 <dhcp_bind+0x1b0>)
 801132e:	fba2 2303 	umull	r2, r3, r2, r3
 8011332:	095b      	lsrs	r3, r3, #5
 8011334:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8011336:	69fb      	ldr	r3, [r7, #28]
 8011338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801133c:	d302      	bcc.n	8011344 <dhcp_bind+0xec>
      timeout = 0xffff;
 801133e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011342:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8011344:	69fb      	ldr	r3, [r7, #28]
 8011346:	b29a      	uxth	r2, r3
 8011348:	69bb      	ldr	r3, [r7, #24]
 801134a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801134c:	69bb      	ldr	r3, [r7, #24]
 801134e:	899b      	ldrh	r3, [r3, #12]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d102      	bne.n	801135a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8011354:	69bb      	ldr	r3, [r7, #24]
 8011356:	2201      	movs	r2, #1
 8011358:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801135a:	69bb      	ldr	r3, [r7, #24]
 801135c:	899a      	ldrh	r2, [r3, #12]
 801135e:	69bb      	ldr	r3, [r7, #24]
 8011360:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8011362:	69bb      	ldr	r3, [r7, #24]
 8011364:	895a      	ldrh	r2, [r3, #10]
 8011366:	69bb      	ldr	r3, [r7, #24]
 8011368:	899b      	ldrh	r3, [r3, #12]
 801136a:	429a      	cmp	r2, r3
 801136c:	d306      	bcc.n	801137c <dhcp_bind+0x124>
 801136e:	69bb      	ldr	r3, [r7, #24]
 8011370:	899b      	ldrh	r3, [r3, #12]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d002      	beq.n	801137c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8011376:	69bb      	ldr	r3, [r7, #24]
 8011378:	2200      	movs	r2, #0
 801137a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801137c:	69bb      	ldr	r3, [r7, #24]
 801137e:	79db      	ldrb	r3, [r3, #7]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d003      	beq.n	801138c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8011384:	69bb      	ldr	r3, [r7, #24]
 8011386:	6a1b      	ldr	r3, [r3, #32]
 8011388:	613b      	str	r3, [r7, #16]
 801138a:	e014      	b.n	80113b6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801138c:	69bb      	ldr	r3, [r7, #24]
 801138e:	331c      	adds	r3, #28
 8011390:	781b      	ldrb	r3, [r3, #0]
 8011392:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8011394:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011398:	2b00      	cmp	r3, #0
 801139a:	db02      	blt.n	80113a2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801139c:	23ff      	movs	r3, #255	; 0xff
 801139e:	613b      	str	r3, [r7, #16]
 80113a0:	e009      	b.n	80113b6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80113a2:	7dfb      	ldrb	r3, [r7, #23]
 80113a4:	2bbf      	cmp	r3, #191	; 0xbf
 80113a6:	d903      	bls.n	80113b0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80113a8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80113ac:	613b      	str	r3, [r7, #16]
 80113ae:	e002      	b.n	80113b6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80113b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80113b4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80113b6:	69bb      	ldr	r3, [r7, #24]
 80113b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113ba:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d108      	bne.n	80113d4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80113c2:	69bb      	ldr	r3, [r7, #24]
 80113c4:	69da      	ldr	r2, [r3, #28]
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	4013      	ands	r3, r2
 80113ca:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80113d2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80113d4:	210a      	movs	r1, #10
 80113d6:	69b8      	ldr	r0, [r7, #24]
 80113d8:	f000 faa0 	bl	801191c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80113dc:	69bb      	ldr	r3, [r7, #24]
 80113de:	f103 011c 	add.w	r1, r3, #28
 80113e2:	f107 030c 	add.w	r3, r7, #12
 80113e6:	f107 0210 	add.w	r2, r7, #16
 80113ea:	6878      	ldr	r0, [r7, #4]
 80113ec:	f7f8 fbe6 	bl	8009bbc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80113f0:	3720      	adds	r7, #32
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}
 80113f6:	bf00      	nop
 80113f8:	0801b0dc 	.word	0x0801b0dc
 80113fc:	0801b23c 	.word	0x0801b23c
 8011400:	0801b13c 	.word	0x0801b13c
 8011404:	0801b258 	.word	0x0801b258
 8011408:	88888889 	.word	0x88888889

0801140c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b08a      	sub	sp, #40	; 0x28
 8011410:	af02      	add	r7, sp, #8
 8011412:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011418:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801141a:	2105      	movs	r1, #5
 801141c:	69b8      	ldr	r0, [r7, #24]
 801141e:	f000 fa7d 	bl	801191c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011422:	f107 030c 	add.w	r3, r7, #12
 8011426:	2203      	movs	r2, #3
 8011428:	69b9      	ldr	r1, [r7, #24]
 801142a:	6878      	ldr	r0, [r7, #4]
 801142c:	f000 ff02 	bl	8012234 <dhcp_create_msg>
 8011430:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011432:	697b      	ldr	r3, [r7, #20]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d04e      	beq.n	80114d6 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011438:	697b      	ldr	r3, [r7, #20]
 801143a:	685b      	ldr	r3, [r3, #4]
 801143c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801143e:	89b8      	ldrh	r0, [r7, #12]
 8011440:	693b      	ldr	r3, [r7, #16]
 8011442:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011446:	2302      	movs	r3, #2
 8011448:	2239      	movs	r2, #57	; 0x39
 801144a:	f000 fa81 	bl	8011950 <dhcp_option>
 801144e:	4603      	mov	r3, r0
 8011450:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011452:	89b8      	ldrh	r0, [r7, #12]
 8011454:	693b      	ldr	r3, [r7, #16]
 8011456:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801145e:	461a      	mov	r2, r3
 8011460:	f000 fad0 	bl	8011a04 <dhcp_option_short>
 8011464:	4603      	mov	r3, r0
 8011466:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011468:	89b8      	ldrh	r0, [r7, #12]
 801146a:	693b      	ldr	r3, [r7, #16]
 801146c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011470:	2303      	movs	r3, #3
 8011472:	2237      	movs	r2, #55	; 0x37
 8011474:	f000 fa6c 	bl	8011950 <dhcp_option>
 8011478:	4603      	mov	r3, r0
 801147a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801147c:	2300      	movs	r3, #0
 801147e:	77bb      	strb	r3, [r7, #30]
 8011480:	e00e      	b.n	80114a0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011482:	89b8      	ldrh	r0, [r7, #12]
 8011484:	693b      	ldr	r3, [r7, #16]
 8011486:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801148a:	7fbb      	ldrb	r3, [r7, #30]
 801148c:	4a2a      	ldr	r2, [pc, #168]	; (8011538 <dhcp_renew+0x12c>)
 801148e:	5cd3      	ldrb	r3, [r2, r3]
 8011490:	461a      	mov	r2, r3
 8011492:	f000 fa91 	bl	80119b8 <dhcp_option_byte>
 8011496:	4603      	mov	r3, r0
 8011498:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801149a:	7fbb      	ldrb	r3, [r7, #30]
 801149c:	3301      	adds	r3, #1
 801149e:	77bb      	strb	r3, [r7, #30]
 80114a0:	7fbb      	ldrb	r3, [r7, #30]
 80114a2:	2b02      	cmp	r3, #2
 80114a4:	d9ed      	bls.n	8011482 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80114a6:	89b8      	ldrh	r0, [r7, #12]
 80114a8:	693b      	ldr	r3, [r7, #16]
 80114aa:	33f0      	adds	r3, #240	; 0xf0
 80114ac:	697a      	ldr	r2, [r7, #20]
 80114ae:	4619      	mov	r1, r3
 80114b0:	f000 ff96 	bl	80123e0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80114b4:	4b21      	ldr	r3, [pc, #132]	; (801153c <dhcp_renew+0x130>)
 80114b6:	6818      	ldr	r0, [r3, #0]
 80114b8:	69bb      	ldr	r3, [r7, #24]
 80114ba:	f103 0218 	add.w	r2, r3, #24
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	9300      	str	r3, [sp, #0]
 80114c2:	2343      	movs	r3, #67	; 0x43
 80114c4:	6979      	ldr	r1, [r7, #20]
 80114c6:	f7fe fe8f 	bl	80101e8 <udp_sendto_if>
 80114ca:	4603      	mov	r3, r0
 80114cc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80114ce:	6978      	ldr	r0, [r7, #20]
 80114d0:	f7f8 ffcc 	bl	800a46c <pbuf_free>
 80114d4:	e001      	b.n	80114da <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80114d6:	23ff      	movs	r3, #255	; 0xff
 80114d8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80114da:	69bb      	ldr	r3, [r7, #24]
 80114dc:	799b      	ldrb	r3, [r3, #6]
 80114de:	2bff      	cmp	r3, #255	; 0xff
 80114e0:	d005      	beq.n	80114ee <dhcp_renew+0xe2>
    dhcp->tries++;
 80114e2:	69bb      	ldr	r3, [r7, #24]
 80114e4:	799b      	ldrb	r3, [r3, #6]
 80114e6:	3301      	adds	r3, #1
 80114e8:	b2da      	uxtb	r2, r3
 80114ea:	69bb      	ldr	r3, [r7, #24]
 80114ec:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80114ee:	69bb      	ldr	r3, [r7, #24]
 80114f0:	799b      	ldrb	r3, [r3, #6]
 80114f2:	2b09      	cmp	r3, #9
 80114f4:	d80a      	bhi.n	801150c <dhcp_renew+0x100>
 80114f6:	69bb      	ldr	r3, [r7, #24]
 80114f8:	799b      	ldrb	r3, [r3, #6]
 80114fa:	b29b      	uxth	r3, r3
 80114fc:	461a      	mov	r2, r3
 80114fe:	0152      	lsls	r2, r2, #5
 8011500:	1ad2      	subs	r2, r2, r3
 8011502:	0092      	lsls	r2, r2, #2
 8011504:	4413      	add	r3, r2
 8011506:	011b      	lsls	r3, r3, #4
 8011508:	b29b      	uxth	r3, r3
 801150a:	e001      	b.n	8011510 <dhcp_renew+0x104>
 801150c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8011510:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011512:	89fb      	ldrh	r3, [r7, #14]
 8011514:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011518:	4a09      	ldr	r2, [pc, #36]	; (8011540 <dhcp_renew+0x134>)
 801151a:	fb82 1203 	smull	r1, r2, r2, r3
 801151e:	1152      	asrs	r2, r2, #5
 8011520:	17db      	asrs	r3, r3, #31
 8011522:	1ad3      	subs	r3, r2, r3
 8011524:	b29a      	uxth	r2, r3
 8011526:	69bb      	ldr	r3, [r7, #24]
 8011528:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801152a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801152e:	4618      	mov	r0, r3
 8011530:	3720      	adds	r7, #32
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}
 8011536:	bf00      	nop
 8011538:	20000020 	.word	0x20000020
 801153c:	20000418 	.word	0x20000418
 8011540:	10624dd3 	.word	0x10624dd3

08011544 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b08a      	sub	sp, #40	; 0x28
 8011548:	af02      	add	r7, sp, #8
 801154a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011550:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8011552:	2104      	movs	r1, #4
 8011554:	69b8      	ldr	r0, [r7, #24]
 8011556:	f000 f9e1 	bl	801191c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801155a:	f107 030c 	add.w	r3, r7, #12
 801155e:	2203      	movs	r2, #3
 8011560:	69b9      	ldr	r1, [r7, #24]
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	f000 fe66 	bl	8012234 <dhcp_create_msg>
 8011568:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d04c      	beq.n	801160a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011570:	697b      	ldr	r3, [r7, #20]
 8011572:	685b      	ldr	r3, [r3, #4]
 8011574:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011576:	89b8      	ldrh	r0, [r7, #12]
 8011578:	693b      	ldr	r3, [r7, #16]
 801157a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801157e:	2302      	movs	r3, #2
 8011580:	2239      	movs	r2, #57	; 0x39
 8011582:	f000 f9e5 	bl	8011950 <dhcp_option>
 8011586:	4603      	mov	r3, r0
 8011588:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801158a:	89b8      	ldrh	r0, [r7, #12]
 801158c:	693b      	ldr	r3, [r7, #16]
 801158e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011596:	461a      	mov	r2, r3
 8011598:	f000 fa34 	bl	8011a04 <dhcp_option_short>
 801159c:	4603      	mov	r3, r0
 801159e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80115a0:	89b8      	ldrh	r0, [r7, #12]
 80115a2:	693b      	ldr	r3, [r7, #16]
 80115a4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80115a8:	2303      	movs	r3, #3
 80115aa:	2237      	movs	r2, #55	; 0x37
 80115ac:	f000 f9d0 	bl	8011950 <dhcp_option>
 80115b0:	4603      	mov	r3, r0
 80115b2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80115b4:	2300      	movs	r3, #0
 80115b6:	77bb      	strb	r3, [r7, #30]
 80115b8:	e00e      	b.n	80115d8 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80115ba:	89b8      	ldrh	r0, [r7, #12]
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80115c2:	7fbb      	ldrb	r3, [r7, #30]
 80115c4:	4a29      	ldr	r2, [pc, #164]	; (801166c <dhcp_rebind+0x128>)
 80115c6:	5cd3      	ldrb	r3, [r2, r3]
 80115c8:	461a      	mov	r2, r3
 80115ca:	f000 f9f5 	bl	80119b8 <dhcp_option_byte>
 80115ce:	4603      	mov	r3, r0
 80115d0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80115d2:	7fbb      	ldrb	r3, [r7, #30]
 80115d4:	3301      	adds	r3, #1
 80115d6:	77bb      	strb	r3, [r7, #30]
 80115d8:	7fbb      	ldrb	r3, [r7, #30]
 80115da:	2b02      	cmp	r3, #2
 80115dc:	d9ed      	bls.n	80115ba <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80115de:	89b8      	ldrh	r0, [r7, #12]
 80115e0:	693b      	ldr	r3, [r7, #16]
 80115e2:	33f0      	adds	r3, #240	; 0xf0
 80115e4:	697a      	ldr	r2, [r7, #20]
 80115e6:	4619      	mov	r1, r3
 80115e8:	f000 fefa 	bl	80123e0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80115ec:	4b20      	ldr	r3, [pc, #128]	; (8011670 <dhcp_rebind+0x12c>)
 80115ee:	6818      	ldr	r0, [r3, #0]
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	9300      	str	r3, [sp, #0]
 80115f4:	2343      	movs	r3, #67	; 0x43
 80115f6:	4a1f      	ldr	r2, [pc, #124]	; (8011674 <dhcp_rebind+0x130>)
 80115f8:	6979      	ldr	r1, [r7, #20]
 80115fa:	f7fe fdf5 	bl	80101e8 <udp_sendto_if>
 80115fe:	4603      	mov	r3, r0
 8011600:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011602:	6978      	ldr	r0, [r7, #20]
 8011604:	f7f8 ff32 	bl	800a46c <pbuf_free>
 8011608:	e001      	b.n	801160e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801160a:	23ff      	movs	r3, #255	; 0xff
 801160c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801160e:	69bb      	ldr	r3, [r7, #24]
 8011610:	799b      	ldrb	r3, [r3, #6]
 8011612:	2bff      	cmp	r3, #255	; 0xff
 8011614:	d005      	beq.n	8011622 <dhcp_rebind+0xde>
    dhcp->tries++;
 8011616:	69bb      	ldr	r3, [r7, #24]
 8011618:	799b      	ldrb	r3, [r3, #6]
 801161a:	3301      	adds	r3, #1
 801161c:	b2da      	uxtb	r2, r3
 801161e:	69bb      	ldr	r3, [r7, #24]
 8011620:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8011622:	69bb      	ldr	r3, [r7, #24]
 8011624:	799b      	ldrb	r3, [r3, #6]
 8011626:	2b09      	cmp	r3, #9
 8011628:	d80a      	bhi.n	8011640 <dhcp_rebind+0xfc>
 801162a:	69bb      	ldr	r3, [r7, #24]
 801162c:	799b      	ldrb	r3, [r3, #6]
 801162e:	b29b      	uxth	r3, r3
 8011630:	461a      	mov	r2, r3
 8011632:	0152      	lsls	r2, r2, #5
 8011634:	1ad2      	subs	r2, r2, r3
 8011636:	0092      	lsls	r2, r2, #2
 8011638:	4413      	add	r3, r2
 801163a:	00db      	lsls	r3, r3, #3
 801163c:	b29b      	uxth	r3, r3
 801163e:	e001      	b.n	8011644 <dhcp_rebind+0x100>
 8011640:	f242 7310 	movw	r3, #10000	; 0x2710
 8011644:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011646:	89fb      	ldrh	r3, [r7, #14]
 8011648:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801164c:	4a0a      	ldr	r2, [pc, #40]	; (8011678 <dhcp_rebind+0x134>)
 801164e:	fb82 1203 	smull	r1, r2, r2, r3
 8011652:	1152      	asrs	r2, r2, #5
 8011654:	17db      	asrs	r3, r3, #31
 8011656:	1ad3      	subs	r3, r2, r3
 8011658:	b29a      	uxth	r2, r3
 801165a:	69bb      	ldr	r3, [r7, #24]
 801165c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801165e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011662:	4618      	mov	r0, r3
 8011664:	3720      	adds	r7, #32
 8011666:	46bd      	mov	sp, r7
 8011668:	bd80      	pop	{r7, pc}
 801166a:	bf00      	nop
 801166c:	20000020 	.word	0x20000020
 8011670:	20000418 	.word	0x20000418
 8011674:	0801bc44 	.word	0x0801bc44
 8011678:	10624dd3 	.word	0x10624dd3

0801167c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801167c:	b5b0      	push	{r4, r5, r7, lr}
 801167e:	b08a      	sub	sp, #40	; 0x28
 8011680:	af02      	add	r7, sp, #8
 8011682:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011688:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801168a:	2103      	movs	r1, #3
 801168c:	69b8      	ldr	r0, [r7, #24]
 801168e:	f000 f945 	bl	801191c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011692:	f107 030c 	add.w	r3, r7, #12
 8011696:	2203      	movs	r2, #3
 8011698:	69b9      	ldr	r1, [r7, #24]
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f000 fdca 	bl	8012234 <dhcp_create_msg>
 80116a0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80116a2:	697b      	ldr	r3, [r7, #20]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d066      	beq.n	8011776 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80116a8:	697b      	ldr	r3, [r7, #20]
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80116ae:	89b8      	ldrh	r0, [r7, #12]
 80116b0:	693b      	ldr	r3, [r7, #16]
 80116b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80116b6:	2302      	movs	r3, #2
 80116b8:	2239      	movs	r2, #57	; 0x39
 80116ba:	f000 f949 	bl	8011950 <dhcp_option>
 80116be:	4603      	mov	r3, r0
 80116c0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80116c2:	89b8      	ldrh	r0, [r7, #12]
 80116c4:	693b      	ldr	r3, [r7, #16]
 80116c6:	33f0      	adds	r3, #240	; 0xf0
 80116c8:	f44f 7210 	mov.w	r2, #576	; 0x240
 80116cc:	4619      	mov	r1, r3
 80116ce:	f000 f999 	bl	8011a04 <dhcp_option_short>
 80116d2:	4603      	mov	r3, r0
 80116d4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80116d6:	89b8      	ldrh	r0, [r7, #12]
 80116d8:	693b      	ldr	r3, [r7, #16]
 80116da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80116de:	2304      	movs	r3, #4
 80116e0:	2232      	movs	r2, #50	; 0x32
 80116e2:	f000 f935 	bl	8011950 <dhcp_option>
 80116e6:	4603      	mov	r3, r0
 80116e8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80116ea:	89bc      	ldrh	r4, [r7, #12]
 80116ec:	693b      	ldr	r3, [r7, #16]
 80116ee:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80116f2:	69bb      	ldr	r3, [r7, #24]
 80116f4:	69db      	ldr	r3, [r3, #28]
 80116f6:	4618      	mov	r0, r3
 80116f8:	f7f7 fc31 	bl	8008f5e <lwip_htonl>
 80116fc:	4603      	mov	r3, r0
 80116fe:	461a      	mov	r2, r3
 8011700:	4629      	mov	r1, r5
 8011702:	4620      	mov	r0, r4
 8011704:	f000 f9b0 	bl	8011a68 <dhcp_option_long>
 8011708:	4603      	mov	r3, r0
 801170a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801170c:	89b8      	ldrh	r0, [r7, #12]
 801170e:	693b      	ldr	r3, [r7, #16]
 8011710:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011714:	2303      	movs	r3, #3
 8011716:	2237      	movs	r2, #55	; 0x37
 8011718:	f000 f91a 	bl	8011950 <dhcp_option>
 801171c:	4603      	mov	r3, r0
 801171e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011720:	2300      	movs	r3, #0
 8011722:	77bb      	strb	r3, [r7, #30]
 8011724:	e00e      	b.n	8011744 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011726:	89b8      	ldrh	r0, [r7, #12]
 8011728:	693b      	ldr	r3, [r7, #16]
 801172a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801172e:	7fbb      	ldrb	r3, [r7, #30]
 8011730:	4a29      	ldr	r2, [pc, #164]	; (80117d8 <dhcp_reboot+0x15c>)
 8011732:	5cd3      	ldrb	r3, [r2, r3]
 8011734:	461a      	mov	r2, r3
 8011736:	f000 f93f 	bl	80119b8 <dhcp_option_byte>
 801173a:	4603      	mov	r3, r0
 801173c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801173e:	7fbb      	ldrb	r3, [r7, #30]
 8011740:	3301      	adds	r3, #1
 8011742:	77bb      	strb	r3, [r7, #30]
 8011744:	7fbb      	ldrb	r3, [r7, #30]
 8011746:	2b02      	cmp	r3, #2
 8011748:	d9ed      	bls.n	8011726 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801174a:	89b8      	ldrh	r0, [r7, #12]
 801174c:	693b      	ldr	r3, [r7, #16]
 801174e:	33f0      	adds	r3, #240	; 0xf0
 8011750:	697a      	ldr	r2, [r7, #20]
 8011752:	4619      	mov	r1, r3
 8011754:	f000 fe44 	bl	80123e0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011758:	4b20      	ldr	r3, [pc, #128]	; (80117dc <dhcp_reboot+0x160>)
 801175a:	6818      	ldr	r0, [r3, #0]
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	9300      	str	r3, [sp, #0]
 8011760:	2343      	movs	r3, #67	; 0x43
 8011762:	4a1f      	ldr	r2, [pc, #124]	; (80117e0 <dhcp_reboot+0x164>)
 8011764:	6979      	ldr	r1, [r7, #20]
 8011766:	f7fe fd3f 	bl	80101e8 <udp_sendto_if>
 801176a:	4603      	mov	r3, r0
 801176c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801176e:	6978      	ldr	r0, [r7, #20]
 8011770:	f7f8 fe7c 	bl	800a46c <pbuf_free>
 8011774:	e001      	b.n	801177a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011776:	23ff      	movs	r3, #255	; 0xff
 8011778:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801177a:	69bb      	ldr	r3, [r7, #24]
 801177c:	799b      	ldrb	r3, [r3, #6]
 801177e:	2bff      	cmp	r3, #255	; 0xff
 8011780:	d005      	beq.n	801178e <dhcp_reboot+0x112>
    dhcp->tries++;
 8011782:	69bb      	ldr	r3, [r7, #24]
 8011784:	799b      	ldrb	r3, [r3, #6]
 8011786:	3301      	adds	r3, #1
 8011788:	b2da      	uxtb	r2, r3
 801178a:	69bb      	ldr	r3, [r7, #24]
 801178c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801178e:	69bb      	ldr	r3, [r7, #24]
 8011790:	799b      	ldrb	r3, [r3, #6]
 8011792:	2b09      	cmp	r3, #9
 8011794:	d80a      	bhi.n	80117ac <dhcp_reboot+0x130>
 8011796:	69bb      	ldr	r3, [r7, #24]
 8011798:	799b      	ldrb	r3, [r3, #6]
 801179a:	b29b      	uxth	r3, r3
 801179c:	461a      	mov	r2, r3
 801179e:	0152      	lsls	r2, r2, #5
 80117a0:	1ad2      	subs	r2, r2, r3
 80117a2:	0092      	lsls	r2, r2, #2
 80117a4:	4413      	add	r3, r2
 80117a6:	00db      	lsls	r3, r3, #3
 80117a8:	b29b      	uxth	r3, r3
 80117aa:	e001      	b.n	80117b0 <dhcp_reboot+0x134>
 80117ac:	f242 7310 	movw	r3, #10000	; 0x2710
 80117b0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80117b2:	89fb      	ldrh	r3, [r7, #14]
 80117b4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80117b8:	4a0a      	ldr	r2, [pc, #40]	; (80117e4 <dhcp_reboot+0x168>)
 80117ba:	fb82 1203 	smull	r1, r2, r2, r3
 80117be:	1152      	asrs	r2, r2, #5
 80117c0:	17db      	asrs	r3, r3, #31
 80117c2:	1ad3      	subs	r3, r2, r3
 80117c4:	b29a      	uxth	r2, r3
 80117c6:	69bb      	ldr	r3, [r7, #24]
 80117c8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80117ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80117ce:	4618      	mov	r0, r3
 80117d0:	3720      	adds	r7, #32
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bdb0      	pop	{r4, r5, r7, pc}
 80117d6:	bf00      	nop
 80117d8:	20000020 	.word	0x20000020
 80117dc:	20000418 	.word	0x20000418
 80117e0:	0801bc44 	.word	0x0801bc44
 80117e4:	10624dd3 	.word	0x10624dd3

080117e8 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80117e8:	b5b0      	push	{r4, r5, r7, lr}
 80117ea:	b08a      	sub	sp, #40	; 0x28
 80117ec:	af02      	add	r7, sp, #8
 80117ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117f4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80117f6:	69fb      	ldr	r3, [r7, #28]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	f000 8084 	beq.w	8011906 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80117fe:	69fb      	ldr	r3, [r7, #28]
 8011800:	795b      	ldrb	r3, [r3, #5]
 8011802:	2b00      	cmp	r3, #0
 8011804:	f000 8081 	beq.w	801190a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8011808:	69fb      	ldr	r3, [r7, #28]
 801180a:	699b      	ldr	r3, [r3, #24]
 801180c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801180e:	69fb      	ldr	r3, [r7, #28]
 8011810:	2200      	movs	r2, #0
 8011812:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8011814:	69fb      	ldr	r3, [r7, #28]
 8011816:	2200      	movs	r2, #0
 8011818:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801181a:	69fb      	ldr	r3, [r7, #28]
 801181c:	2200      	movs	r2, #0
 801181e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8011820:	69fb      	ldr	r3, [r7, #28]
 8011822:	2200      	movs	r2, #0
 8011824:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8011826:	69fb      	ldr	r3, [r7, #28]
 8011828:	2200      	movs	r2, #0
 801182a:	631a      	str	r2, [r3, #48]	; 0x30
 801182c:	69fb      	ldr	r3, [r7, #28]
 801182e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011830:	69fb      	ldr	r3, [r7, #28]
 8011832:	62da      	str	r2, [r3, #44]	; 0x2c
 8011834:	69fb      	ldr	r3, [r7, #28]
 8011836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011838:	69fb      	ldr	r3, [r7, #28]
 801183a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801183c:	69fb      	ldr	r3, [r7, #28]
 801183e:	2200      	movs	r2, #0
 8011840:	829a      	strh	r2, [r3, #20]
 8011842:	69fb      	ldr	r3, [r7, #28]
 8011844:	8a9a      	ldrh	r2, [r3, #20]
 8011846:	69fb      	ldr	r3, [r7, #28]
 8011848:	825a      	strh	r2, [r3, #18]
 801184a:	69fb      	ldr	r3, [r7, #28]
 801184c:	8a5a      	ldrh	r2, [r3, #18]
 801184e:	69fb      	ldr	r3, [r7, #28]
 8011850:	821a      	strh	r2, [r3, #16]
 8011852:	69fb      	ldr	r3, [r7, #28]
 8011854:	8a1a      	ldrh	r2, [r3, #16]
 8011856:	69fb      	ldr	r3, [r7, #28]
 8011858:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801185a:	6878      	ldr	r0, [r7, #4]
 801185c:	f000 fdee 	bl	801243c <dhcp_supplied_address>
 8011860:	4603      	mov	r3, r0
 8011862:	2b00      	cmp	r3, #0
 8011864:	d03b      	beq.n	80118de <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8011866:	f107 030e 	add.w	r3, r7, #14
 801186a:	2207      	movs	r2, #7
 801186c:	69f9      	ldr	r1, [r7, #28]
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	f000 fce0 	bl	8012234 <dhcp_create_msg>
 8011874:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8011876:	69bb      	ldr	r3, [r7, #24]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d030      	beq.n	80118de <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801187c:	69bb      	ldr	r3, [r7, #24]
 801187e:	685b      	ldr	r3, [r3, #4]
 8011880:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8011882:	89f8      	ldrh	r0, [r7, #14]
 8011884:	697b      	ldr	r3, [r7, #20]
 8011886:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801188a:	2304      	movs	r3, #4
 801188c:	2236      	movs	r2, #54	; 0x36
 801188e:	f000 f85f 	bl	8011950 <dhcp_option>
 8011892:	4603      	mov	r3, r0
 8011894:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8011896:	89fc      	ldrh	r4, [r7, #14]
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7f7 fb5c 	bl	8008f5e <lwip_htonl>
 80118a6:	4603      	mov	r3, r0
 80118a8:	461a      	mov	r2, r3
 80118aa:	4629      	mov	r1, r5
 80118ac:	4620      	mov	r0, r4
 80118ae:	f000 f8db 	bl	8011a68 <dhcp_option_long>
 80118b2:	4603      	mov	r3, r0
 80118b4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80118b6:	89f8      	ldrh	r0, [r7, #14]
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	33f0      	adds	r3, #240	; 0xf0
 80118bc:	69ba      	ldr	r2, [r7, #24]
 80118be:	4619      	mov	r1, r3
 80118c0:	f000 fd8e 	bl	80123e0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80118c4:	4b13      	ldr	r3, [pc, #76]	; (8011914 <dhcp_release_and_stop+0x12c>)
 80118c6:	6818      	ldr	r0, [r3, #0]
 80118c8:	f107 0210 	add.w	r2, r7, #16
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	9300      	str	r3, [sp, #0]
 80118d0:	2343      	movs	r3, #67	; 0x43
 80118d2:	69b9      	ldr	r1, [r7, #24]
 80118d4:	f7fe fc88 	bl	80101e8 <udp_sendto_if>
      pbuf_free(p_out);
 80118d8:	69b8      	ldr	r0, [r7, #24]
 80118da:	f7f8 fdc7 	bl	800a46c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80118de:	4b0e      	ldr	r3, [pc, #56]	; (8011918 <dhcp_release_and_stop+0x130>)
 80118e0:	4a0d      	ldr	r2, [pc, #52]	; (8011918 <dhcp_release_and_stop+0x130>)
 80118e2:	490d      	ldr	r1, [pc, #52]	; (8011918 <dhcp_release_and_stop+0x130>)
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	f7f8 f969 	bl	8009bbc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80118ea:	2100      	movs	r1, #0
 80118ec:	69f8      	ldr	r0, [r7, #28]
 80118ee:	f000 f815 	bl	801191c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80118f2:	69fb      	ldr	r3, [r7, #28]
 80118f4:	791b      	ldrb	r3, [r3, #4]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d008      	beq.n	801190c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80118fa:	f7fe ffc1 	bl	8010880 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80118fe:	69fb      	ldr	r3, [r7, #28]
 8011900:	2200      	movs	r2, #0
 8011902:	711a      	strb	r2, [r3, #4]
 8011904:	e002      	b.n	801190c <dhcp_release_and_stop+0x124>
    return;
 8011906:	bf00      	nop
 8011908:	e000      	b.n	801190c <dhcp_release_and_stop+0x124>
    return;
 801190a:	bf00      	nop
  }
}
 801190c:	3720      	adds	r7, #32
 801190e:	46bd      	mov	sp, r7
 8011910:	bdb0      	pop	{r4, r5, r7, pc}
 8011912:	bf00      	nop
 8011914:	20000418 	.word	0x20000418
 8011918:	0801bc40 	.word	0x0801bc40

0801191c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801191c:	b480      	push	{r7}
 801191e:	b083      	sub	sp, #12
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
 8011924:	460b      	mov	r3, r1
 8011926:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	795b      	ldrb	r3, [r3, #5]
 801192c:	78fa      	ldrb	r2, [r7, #3]
 801192e:	429a      	cmp	r2, r3
 8011930:	d008      	beq.n	8011944 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	78fa      	ldrb	r2, [r7, #3]
 8011936:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2200      	movs	r2, #0
 801193c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2200      	movs	r2, #0
 8011942:	811a      	strh	r2, [r3, #8]
  }
}
 8011944:	bf00      	nop
 8011946:	370c      	adds	r7, #12
 8011948:	46bd      	mov	sp, r7
 801194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194e:	4770      	bx	lr

08011950 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b082      	sub	sp, #8
 8011954:	af00      	add	r7, sp, #0
 8011956:	6039      	str	r1, [r7, #0]
 8011958:	4611      	mov	r1, r2
 801195a:	461a      	mov	r2, r3
 801195c:	4603      	mov	r3, r0
 801195e:	80fb      	strh	r3, [r7, #6]
 8011960:	460b      	mov	r3, r1
 8011962:	717b      	strb	r3, [r7, #5]
 8011964:	4613      	mov	r3, r2
 8011966:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8011968:	88fa      	ldrh	r2, [r7, #6]
 801196a:	793b      	ldrb	r3, [r7, #4]
 801196c:	4413      	add	r3, r2
 801196e:	3302      	adds	r3, #2
 8011970:	2b44      	cmp	r3, #68	; 0x44
 8011972:	d906      	bls.n	8011982 <dhcp_option+0x32>
 8011974:	4b0d      	ldr	r3, [pc, #52]	; (80119ac <dhcp_option+0x5c>)
 8011976:	f240 529a 	movw	r2, #1434	; 0x59a
 801197a:	490d      	ldr	r1, [pc, #52]	; (80119b0 <dhcp_option+0x60>)
 801197c:	480d      	ldr	r0, [pc, #52]	; (80119b4 <dhcp_option+0x64>)
 801197e:	f003 fdef 	bl	8015560 <iprintf>
  options[options_out_len++] = option_type;
 8011982:	88fb      	ldrh	r3, [r7, #6]
 8011984:	1c5a      	adds	r2, r3, #1
 8011986:	80fa      	strh	r2, [r7, #6]
 8011988:	461a      	mov	r2, r3
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	4413      	add	r3, r2
 801198e:	797a      	ldrb	r2, [r7, #5]
 8011990:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8011992:	88fb      	ldrh	r3, [r7, #6]
 8011994:	1c5a      	adds	r2, r3, #1
 8011996:	80fa      	strh	r2, [r7, #6]
 8011998:	461a      	mov	r2, r3
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	4413      	add	r3, r2
 801199e:	793a      	ldrb	r2, [r7, #4]
 80119a0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80119a2:	88fb      	ldrh	r3, [r7, #6]
}
 80119a4:	4618      	mov	r0, r3
 80119a6:	3708      	adds	r7, #8
 80119a8:	46bd      	mov	sp, r7
 80119aa:	bd80      	pop	{r7, pc}
 80119ac:	0801b0dc 	.word	0x0801b0dc
 80119b0:	0801b270 	.word	0x0801b270
 80119b4:	0801b13c 	.word	0x0801b13c

080119b8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b082      	sub	sp, #8
 80119bc:	af00      	add	r7, sp, #0
 80119be:	4603      	mov	r3, r0
 80119c0:	6039      	str	r1, [r7, #0]
 80119c2:	80fb      	strh	r3, [r7, #6]
 80119c4:	4613      	mov	r3, r2
 80119c6:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80119c8:	88fb      	ldrh	r3, [r7, #6]
 80119ca:	2b43      	cmp	r3, #67	; 0x43
 80119cc:	d906      	bls.n	80119dc <dhcp_option_byte+0x24>
 80119ce:	4b0a      	ldr	r3, [pc, #40]	; (80119f8 <dhcp_option_byte+0x40>)
 80119d0:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80119d4:	4909      	ldr	r1, [pc, #36]	; (80119fc <dhcp_option_byte+0x44>)
 80119d6:	480a      	ldr	r0, [pc, #40]	; (8011a00 <dhcp_option_byte+0x48>)
 80119d8:	f003 fdc2 	bl	8015560 <iprintf>
  options[options_out_len++] = value;
 80119dc:	88fb      	ldrh	r3, [r7, #6]
 80119de:	1c5a      	adds	r2, r3, #1
 80119e0:	80fa      	strh	r2, [r7, #6]
 80119e2:	461a      	mov	r2, r3
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	4413      	add	r3, r2
 80119e8:	797a      	ldrb	r2, [r7, #5]
 80119ea:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80119ec:	88fb      	ldrh	r3, [r7, #6]
}
 80119ee:	4618      	mov	r0, r3
 80119f0:	3708      	adds	r7, #8
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}
 80119f6:	bf00      	nop
 80119f8:	0801b0dc 	.word	0x0801b0dc
 80119fc:	0801b2b4 	.word	0x0801b2b4
 8011a00:	0801b13c 	.word	0x0801b13c

08011a04 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b082      	sub	sp, #8
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	6039      	str	r1, [r7, #0]
 8011a0e:	80fb      	strh	r3, [r7, #6]
 8011a10:	4613      	mov	r3, r2
 8011a12:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8011a14:	88fb      	ldrh	r3, [r7, #6]
 8011a16:	3302      	adds	r3, #2
 8011a18:	2b44      	cmp	r3, #68	; 0x44
 8011a1a:	d906      	bls.n	8011a2a <dhcp_option_short+0x26>
 8011a1c:	4b0f      	ldr	r3, [pc, #60]	; (8011a5c <dhcp_option_short+0x58>)
 8011a1e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8011a22:	490f      	ldr	r1, [pc, #60]	; (8011a60 <dhcp_option_short+0x5c>)
 8011a24:	480f      	ldr	r0, [pc, #60]	; (8011a64 <dhcp_option_short+0x60>)
 8011a26:	f003 fd9b 	bl	8015560 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8011a2a:	88bb      	ldrh	r3, [r7, #4]
 8011a2c:	0a1b      	lsrs	r3, r3, #8
 8011a2e:	b29a      	uxth	r2, r3
 8011a30:	88fb      	ldrh	r3, [r7, #6]
 8011a32:	1c59      	adds	r1, r3, #1
 8011a34:	80f9      	strh	r1, [r7, #6]
 8011a36:	4619      	mov	r1, r3
 8011a38:	683b      	ldr	r3, [r7, #0]
 8011a3a:	440b      	add	r3, r1
 8011a3c:	b2d2      	uxtb	r2, r2
 8011a3e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8011a40:	88fb      	ldrh	r3, [r7, #6]
 8011a42:	1c5a      	adds	r2, r3, #1
 8011a44:	80fa      	strh	r2, [r7, #6]
 8011a46:	461a      	mov	r2, r3
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	4413      	add	r3, r2
 8011a4c:	88ba      	ldrh	r2, [r7, #4]
 8011a4e:	b2d2      	uxtb	r2, r2
 8011a50:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011a52:	88fb      	ldrh	r3, [r7, #6]
}
 8011a54:	4618      	mov	r0, r3
 8011a56:	3708      	adds	r7, #8
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	bd80      	pop	{r7, pc}
 8011a5c:	0801b0dc 	.word	0x0801b0dc
 8011a60:	0801b2ec 	.word	0x0801b2ec
 8011a64:	0801b13c 	.word	0x0801b13c

08011a68 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b084      	sub	sp, #16
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	4603      	mov	r3, r0
 8011a70:	60b9      	str	r1, [r7, #8]
 8011a72:	607a      	str	r2, [r7, #4]
 8011a74:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8011a76:	89fb      	ldrh	r3, [r7, #14]
 8011a78:	3304      	adds	r3, #4
 8011a7a:	2b44      	cmp	r3, #68	; 0x44
 8011a7c:	d906      	bls.n	8011a8c <dhcp_option_long+0x24>
 8011a7e:	4b19      	ldr	r3, [pc, #100]	; (8011ae4 <dhcp_option_long+0x7c>)
 8011a80:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8011a84:	4918      	ldr	r1, [pc, #96]	; (8011ae8 <dhcp_option_long+0x80>)
 8011a86:	4819      	ldr	r0, [pc, #100]	; (8011aec <dhcp_option_long+0x84>)
 8011a88:	f003 fd6a 	bl	8015560 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	0e1a      	lsrs	r2, r3, #24
 8011a90:	89fb      	ldrh	r3, [r7, #14]
 8011a92:	1c59      	adds	r1, r3, #1
 8011a94:	81f9      	strh	r1, [r7, #14]
 8011a96:	4619      	mov	r1, r3
 8011a98:	68bb      	ldr	r3, [r7, #8]
 8011a9a:	440b      	add	r3, r1
 8011a9c:	b2d2      	uxtb	r2, r2
 8011a9e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	0c1a      	lsrs	r2, r3, #16
 8011aa4:	89fb      	ldrh	r3, [r7, #14]
 8011aa6:	1c59      	adds	r1, r3, #1
 8011aa8:	81f9      	strh	r1, [r7, #14]
 8011aaa:	4619      	mov	r1, r3
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	440b      	add	r3, r1
 8011ab0:	b2d2      	uxtb	r2, r2
 8011ab2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	0a1a      	lsrs	r2, r3, #8
 8011ab8:	89fb      	ldrh	r3, [r7, #14]
 8011aba:	1c59      	adds	r1, r3, #1
 8011abc:	81f9      	strh	r1, [r7, #14]
 8011abe:	4619      	mov	r1, r3
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	440b      	add	r3, r1
 8011ac4:	b2d2      	uxtb	r2, r2
 8011ac6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8011ac8:	89fb      	ldrh	r3, [r7, #14]
 8011aca:	1c5a      	adds	r2, r3, #1
 8011acc:	81fa      	strh	r2, [r7, #14]
 8011ace:	461a      	mov	r2, r3
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	4413      	add	r3, r2
 8011ad4:	687a      	ldr	r2, [r7, #4]
 8011ad6:	b2d2      	uxtb	r2, r2
 8011ad8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011ada:	89fb      	ldrh	r3, [r7, #14]
}
 8011adc:	4618      	mov	r0, r3
 8011ade:	3710      	adds	r7, #16
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}
 8011ae4:	0801b0dc 	.word	0x0801b0dc
 8011ae8:	0801b328 	.word	0x0801b328
 8011aec:	0801b13c 	.word	0x0801b13c

08011af0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b090      	sub	sp, #64	; 0x40
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8011afa:	2300      	movs	r3, #0
 8011afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8011afe:	2300      	movs	r3, #0
 8011b00:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8011b02:	2208      	movs	r2, #8
 8011b04:	2100      	movs	r1, #0
 8011b06:	48be      	ldr	r0, [pc, #760]	; (8011e00 <dhcp_parse_reply+0x310>)
 8011b08:	f003 f80e 	bl	8014b28 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	895b      	ldrh	r3, [r3, #10]
 8011b10:	2b2b      	cmp	r3, #43	; 0x2b
 8011b12:	d802      	bhi.n	8011b1a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8011b14:	f06f 0301 	mvn.w	r3, #1
 8011b18:	e2a8      	b.n	801206c <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	685b      	ldr	r3, [r3, #4]
 8011b1e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8011b20:	23f0      	movs	r3, #240	; 0xf0
 8011b22:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	891b      	ldrh	r3, [r3, #8]
 8011b28:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8011b2e:	e00c      	b.n	8011b4a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8011b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b32:	895b      	ldrh	r3, [r3, #10]
 8011b34:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011b36:	1ad3      	subs	r3, r2, r3
 8011b38:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8011b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b3c:	895b      	ldrh	r3, [r3, #10]
 8011b3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8011b40:	1ad3      	subs	r3, r2, r3
 8011b42:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8011b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8011b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d004      	beq.n	8011b5a <dhcp_parse_reply+0x6a>
 8011b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b52:	895b      	ldrh	r3, [r3, #10]
 8011b54:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011b56:	429a      	cmp	r2, r3
 8011b58:	d2ea      	bcs.n	8011b30 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8011b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d102      	bne.n	8011b66 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8011b60:	f06f 0301 	mvn.w	r3, #1
 8011b64:	e282      	b.n	801206c <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8011b66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011b68:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8011b6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011b6c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8011b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b70:	685b      	ldr	r3, [r3, #4]
 8011b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8011b74:	e23a      	b.n	8011fec <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8011b76:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011b78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011b7a:	4413      	add	r3, r2
 8011b7c:	781b      	ldrb	r3, [r3, #0]
 8011b7e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8011b80:	2300      	movs	r3, #0
 8011b82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8011b86:	f04f 33ff 	mov.w	r3, #4294967295
 8011b8a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8011b8c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011b8e:	3302      	adds	r3, #2
 8011b90:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8011b92:	8bfa      	ldrh	r2, [r7, #30]
 8011b94:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011b96:	429a      	cmp	r2, r3
 8011b98:	d202      	bcs.n	8011ba0 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8011b9a:	f06f 0301 	mvn.w	r3, #1
 8011b9e:	e265      	b.n	801206c <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8011ba0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011ba2:	3301      	adds	r3, #1
 8011ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ba6:	8952      	ldrh	r2, [r2, #10]
 8011ba8:	4293      	cmp	r3, r2
 8011baa:	da07      	bge.n	8011bbc <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8011bac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011bae:	3301      	adds	r3, #1
 8011bb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011bb2:	4413      	add	r3, r2
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011bba:	e00b      	b.n	8011bd4 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8011bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d004      	beq.n	8011bce <dhcp_parse_reply+0xde>
 8011bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	685b      	ldr	r3, [r3, #4]
 8011bca:	781b      	ldrb	r3, [r3, #0]
 8011bcc:	e000      	b.n	8011bd0 <dhcp_parse_reply+0xe0>
 8011bce:	2300      	movs	r3, #0
 8011bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8011bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8011bdc:	7dfb      	ldrb	r3, [r7, #23]
 8011bde:	2b3b      	cmp	r3, #59	; 0x3b
 8011be0:	f200 812d 	bhi.w	8011e3e <dhcp_parse_reply+0x34e>
 8011be4:	a201      	add	r2, pc, #4	; (adr r2, 8011bec <dhcp_parse_reply+0xfc>)
 8011be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bea:	bf00      	nop
 8011bec:	08011cdd 	.word	0x08011cdd
 8011bf0:	08011ced 	.word	0x08011ced
 8011bf4:	08011e3f 	.word	0x08011e3f
 8011bf8:	08011d0f 	.word	0x08011d0f
 8011bfc:	08011e3f 	.word	0x08011e3f
 8011c00:	08011e3f 	.word	0x08011e3f
 8011c04:	08011e3f 	.word	0x08011e3f
 8011c08:	08011e3f 	.word	0x08011e3f
 8011c0c:	08011e3f 	.word	0x08011e3f
 8011c10:	08011e3f 	.word	0x08011e3f
 8011c14:	08011e3f 	.word	0x08011e3f
 8011c18:	08011e3f 	.word	0x08011e3f
 8011c1c:	08011e3f 	.word	0x08011e3f
 8011c20:	08011e3f 	.word	0x08011e3f
 8011c24:	08011e3f 	.word	0x08011e3f
 8011c28:	08011e3f 	.word	0x08011e3f
 8011c2c:	08011e3f 	.word	0x08011e3f
 8011c30:	08011e3f 	.word	0x08011e3f
 8011c34:	08011e3f 	.word	0x08011e3f
 8011c38:	08011e3f 	.word	0x08011e3f
 8011c3c:	08011e3f 	.word	0x08011e3f
 8011c40:	08011e3f 	.word	0x08011e3f
 8011c44:	08011e3f 	.word	0x08011e3f
 8011c48:	08011e3f 	.word	0x08011e3f
 8011c4c:	08011e3f 	.word	0x08011e3f
 8011c50:	08011e3f 	.word	0x08011e3f
 8011c54:	08011e3f 	.word	0x08011e3f
 8011c58:	08011e3f 	.word	0x08011e3f
 8011c5c:	08011e3f 	.word	0x08011e3f
 8011c60:	08011e3f 	.word	0x08011e3f
 8011c64:	08011e3f 	.word	0x08011e3f
 8011c68:	08011e3f 	.word	0x08011e3f
 8011c6c:	08011e3f 	.word	0x08011e3f
 8011c70:	08011e3f 	.word	0x08011e3f
 8011c74:	08011e3f 	.word	0x08011e3f
 8011c78:	08011e3f 	.word	0x08011e3f
 8011c7c:	08011e3f 	.word	0x08011e3f
 8011c80:	08011e3f 	.word	0x08011e3f
 8011c84:	08011e3f 	.word	0x08011e3f
 8011c88:	08011e3f 	.word	0x08011e3f
 8011c8c:	08011e3f 	.word	0x08011e3f
 8011c90:	08011e3f 	.word	0x08011e3f
 8011c94:	08011e3f 	.word	0x08011e3f
 8011c98:	08011e3f 	.word	0x08011e3f
 8011c9c:	08011e3f 	.word	0x08011e3f
 8011ca0:	08011e3f 	.word	0x08011e3f
 8011ca4:	08011e3f 	.word	0x08011e3f
 8011ca8:	08011e3f 	.word	0x08011e3f
 8011cac:	08011e3f 	.word	0x08011e3f
 8011cb0:	08011e3f 	.word	0x08011e3f
 8011cb4:	08011e3f 	.word	0x08011e3f
 8011cb8:	08011d3b 	.word	0x08011d3b
 8011cbc:	08011d5d 	.word	0x08011d5d
 8011cc0:	08011d99 	.word	0x08011d99
 8011cc4:	08011dbb 	.word	0x08011dbb
 8011cc8:	08011e3f 	.word	0x08011e3f
 8011ccc:	08011e3f 	.word	0x08011e3f
 8011cd0:	08011e3f 	.word	0x08011e3f
 8011cd4:	08011ddd 	.word	0x08011ddd
 8011cd8:	08011e1d 	.word	0x08011e1d
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8011cdc:	2300      	movs	r3, #0
 8011cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ce6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8011cea:	e0ac      	b.n	8011e46 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cf0:	2b04      	cmp	r3, #4
 8011cf2:	d009      	beq.n	8011d08 <dhcp_parse_reply+0x218>
 8011cf4:	4b43      	ldr	r3, [pc, #268]	; (8011e04 <dhcp_parse_reply+0x314>)
 8011cf6:	f240 622e 	movw	r2, #1582	; 0x62e
 8011cfa:	4943      	ldr	r1, [pc, #268]	; (8011e08 <dhcp_parse_reply+0x318>)
 8011cfc:	4843      	ldr	r0, [pc, #268]	; (8011e0c <dhcp_parse_reply+0x31c>)
 8011cfe:	f003 fc2f 	bl	8015560 <iprintf>
 8011d02:	f06f 0305 	mvn.w	r3, #5
 8011d06:	e1b1      	b.n	801206c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8011d08:	2306      	movs	r3, #6
 8011d0a:	623b      	str	r3, [r7, #32]
        break;
 8011d0c:	e09b      	b.n	8011e46 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8011d0e:	2304      	movs	r3, #4
 8011d10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8011d14:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011d18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d209      	bcs.n	8011d34 <dhcp_parse_reply+0x244>
 8011d20:	4b38      	ldr	r3, [pc, #224]	; (8011e04 <dhcp_parse_reply+0x314>)
 8011d22:	f240 6233 	movw	r2, #1587	; 0x633
 8011d26:	493a      	ldr	r1, [pc, #232]	; (8011e10 <dhcp_parse_reply+0x320>)
 8011d28:	4838      	ldr	r0, [pc, #224]	; (8011e0c <dhcp_parse_reply+0x31c>)
 8011d2a:	f003 fc19 	bl	8015560 <iprintf>
 8011d2e:	f06f 0305 	mvn.w	r3, #5
 8011d32:	e19b      	b.n	801206c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8011d34:	2307      	movs	r3, #7
 8011d36:	623b      	str	r3, [r7, #32]
        break;
 8011d38:	e085      	b.n	8011e46 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d3e:	2b04      	cmp	r3, #4
 8011d40:	d009      	beq.n	8011d56 <dhcp_parse_reply+0x266>
 8011d42:	4b30      	ldr	r3, [pc, #192]	; (8011e04 <dhcp_parse_reply+0x314>)
 8011d44:	f240 6241 	movw	r2, #1601	; 0x641
 8011d48:	492f      	ldr	r1, [pc, #188]	; (8011e08 <dhcp_parse_reply+0x318>)
 8011d4a:	4830      	ldr	r0, [pc, #192]	; (8011e0c <dhcp_parse_reply+0x31c>)
 8011d4c:	f003 fc08 	bl	8015560 <iprintf>
 8011d50:	f06f 0305 	mvn.w	r3, #5
 8011d54:	e18a      	b.n	801206c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8011d56:	2303      	movs	r3, #3
 8011d58:	623b      	str	r3, [r7, #32]
        break;
 8011d5a:	e074      	b.n	8011e46 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8011d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d60:	2b01      	cmp	r3, #1
 8011d62:	d009      	beq.n	8011d78 <dhcp_parse_reply+0x288>
 8011d64:	4b27      	ldr	r3, [pc, #156]	; (8011e04 <dhcp_parse_reply+0x314>)
 8011d66:	f240 624f 	movw	r2, #1615	; 0x64f
 8011d6a:	492a      	ldr	r1, [pc, #168]	; (8011e14 <dhcp_parse_reply+0x324>)
 8011d6c:	4827      	ldr	r0, [pc, #156]	; (8011e0c <dhcp_parse_reply+0x31c>)
 8011d6e:	f003 fbf7 	bl	8015560 <iprintf>
 8011d72:	f06f 0305 	mvn.w	r3, #5
 8011d76:	e179      	b.n	801206c <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8011d78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011d7a:	2bf0      	cmp	r3, #240	; 0xf0
 8011d7c:	d009      	beq.n	8011d92 <dhcp_parse_reply+0x2a2>
 8011d7e:	4b21      	ldr	r3, [pc, #132]	; (8011e04 <dhcp_parse_reply+0x314>)
 8011d80:	f240 6251 	movw	r2, #1617	; 0x651
 8011d84:	4924      	ldr	r1, [pc, #144]	; (8011e18 <dhcp_parse_reply+0x328>)
 8011d86:	4821      	ldr	r0, [pc, #132]	; (8011e0c <dhcp_parse_reply+0x31c>)
 8011d88:	f003 fbea 	bl	8015560 <iprintf>
 8011d8c:	f06f 0305 	mvn.w	r3, #5
 8011d90:	e16c      	b.n	801206c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8011d92:	2300      	movs	r3, #0
 8011d94:	623b      	str	r3, [r7, #32]
        break;
 8011d96:	e056      	b.n	8011e46 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8011d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d9c:	2b01      	cmp	r3, #1
 8011d9e:	d009      	beq.n	8011db4 <dhcp_parse_reply+0x2c4>
 8011da0:	4b18      	ldr	r3, [pc, #96]	; (8011e04 <dhcp_parse_reply+0x314>)
 8011da2:	f240 6255 	movw	r2, #1621	; 0x655
 8011da6:	491b      	ldr	r1, [pc, #108]	; (8011e14 <dhcp_parse_reply+0x324>)
 8011da8:	4818      	ldr	r0, [pc, #96]	; (8011e0c <dhcp_parse_reply+0x31c>)
 8011daa:	f003 fbd9 	bl	8015560 <iprintf>
 8011dae:	f06f 0305 	mvn.w	r3, #5
 8011db2:	e15b      	b.n	801206c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8011db4:	2301      	movs	r3, #1
 8011db6:	623b      	str	r3, [r7, #32]
        break;
 8011db8:	e045      	b.n	8011e46 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011dba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011dbe:	2b04      	cmp	r3, #4
 8011dc0:	d009      	beq.n	8011dd6 <dhcp_parse_reply+0x2e6>
 8011dc2:	4b10      	ldr	r3, [pc, #64]	; (8011e04 <dhcp_parse_reply+0x314>)
 8011dc4:	f240 6259 	movw	r2, #1625	; 0x659
 8011dc8:	490f      	ldr	r1, [pc, #60]	; (8011e08 <dhcp_parse_reply+0x318>)
 8011dca:	4810      	ldr	r0, [pc, #64]	; (8011e0c <dhcp_parse_reply+0x31c>)
 8011dcc:	f003 fbc8 	bl	8015560 <iprintf>
 8011dd0:	f06f 0305 	mvn.w	r3, #5
 8011dd4:	e14a      	b.n	801206c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8011dd6:	2302      	movs	r3, #2
 8011dd8:	623b      	str	r3, [r7, #32]
        break;
 8011dda:	e034      	b.n	8011e46 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011de0:	2b04      	cmp	r3, #4
 8011de2:	d009      	beq.n	8011df8 <dhcp_parse_reply+0x308>
 8011de4:	4b07      	ldr	r3, [pc, #28]	; (8011e04 <dhcp_parse_reply+0x314>)
 8011de6:	f240 625d 	movw	r2, #1629	; 0x65d
 8011dea:	4907      	ldr	r1, [pc, #28]	; (8011e08 <dhcp_parse_reply+0x318>)
 8011dec:	4807      	ldr	r0, [pc, #28]	; (8011e0c <dhcp_parse_reply+0x31c>)
 8011dee:	f003 fbb7 	bl	8015560 <iprintf>
 8011df2:	f06f 0305 	mvn.w	r3, #5
 8011df6:	e139      	b.n	801206c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8011df8:	2304      	movs	r3, #4
 8011dfa:	623b      	str	r3, [r7, #32]
        break;
 8011dfc:	e023      	b.n	8011e46 <dhcp_parse_reply+0x356>
 8011dfe:	bf00      	nop
 8011e00:	20006a3c 	.word	0x20006a3c
 8011e04:	0801b0dc 	.word	0x0801b0dc
 8011e08:	0801b364 	.word	0x0801b364
 8011e0c:	0801b13c 	.word	0x0801b13c
 8011e10:	0801b370 	.word	0x0801b370
 8011e14:	0801b384 	.word	0x0801b384
 8011e18:	0801b390 	.word	0x0801b390
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e20:	2b04      	cmp	r3, #4
 8011e22:	d009      	beq.n	8011e38 <dhcp_parse_reply+0x348>
 8011e24:	4b93      	ldr	r3, [pc, #588]	; (8012074 <dhcp_parse_reply+0x584>)
 8011e26:	f240 6261 	movw	r2, #1633	; 0x661
 8011e2a:	4993      	ldr	r1, [pc, #588]	; (8012078 <dhcp_parse_reply+0x588>)
 8011e2c:	4893      	ldr	r0, [pc, #588]	; (801207c <dhcp_parse_reply+0x58c>)
 8011e2e:	f003 fb97 	bl	8015560 <iprintf>
 8011e32:	f06f 0305 	mvn.w	r3, #5
 8011e36:	e119      	b.n	801206c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8011e38:	2305      	movs	r3, #5
 8011e3a:	623b      	str	r3, [r7, #32]
        break;
 8011e3c:	e003      	b.n	8011e46 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8011e3e:	2300      	movs	r3, #0
 8011e40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8011e44:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8011e46:	7dfb      	ldrb	r3, [r7, #23]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d103      	bne.n	8011e54 <dhcp_parse_reply+0x364>
      offset++;
 8011e4c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011e4e:	3301      	adds	r3, #1
 8011e50:	877b      	strh	r3, [r7, #58]	; 0x3a
 8011e52:	e0a1      	b.n	8011f98 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8011e54:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011e56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e5a:	4413      	add	r3, r2
 8011e5c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8011e60:	4293      	cmp	r3, r2
 8011e62:	dd02      	ble.n	8011e6a <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8011e64:	f06f 0301 	mvn.w	r3, #1
 8011e68:	e100      	b.n	801206c <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8011e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e6e:	b29a      	uxth	r2, r3
 8011e70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011e72:	4413      	add	r3, r2
 8011e74:	b29b      	uxth	r3, r3
 8011e76:	3302      	adds	r3, #2
 8011e78:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8011e7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	f000 808a 	beq.w	8011f98 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8011e84:	2300      	movs	r3, #0
 8011e86:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8011e88:	6a3b      	ldr	r3, [r7, #32]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	db02      	blt.n	8011e94 <dhcp_parse_reply+0x3a4>
 8011e8e:	6a3b      	ldr	r3, [r7, #32]
 8011e90:	2b07      	cmp	r3, #7
 8011e92:	dd06      	ble.n	8011ea2 <dhcp_parse_reply+0x3b2>
 8011e94:	4b77      	ldr	r3, [pc, #476]	; (8012074 <dhcp_parse_reply+0x584>)
 8011e96:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8011e9a:	4979      	ldr	r1, [pc, #484]	; (8012080 <dhcp_parse_reply+0x590>)
 8011e9c:	4877      	ldr	r0, [pc, #476]	; (801207c <dhcp_parse_reply+0x58c>)
 8011e9e:	f003 fb5f 	bl	8015560 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8011ea2:	4a78      	ldr	r2, [pc, #480]	; (8012084 <dhcp_parse_reply+0x594>)
 8011ea4:	6a3b      	ldr	r3, [r7, #32]
 8011ea6:	4413      	add	r3, r2
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d174      	bne.n	8011f98 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8011eae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011eb2:	2b04      	cmp	r3, #4
 8011eb4:	bf28      	it	cs
 8011eb6:	2304      	movcs	r3, #4
 8011eb8:	b2db      	uxtb	r3, r3
 8011eba:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8011ebc:	8bfb      	ldrh	r3, [r7, #30]
 8011ebe:	8aba      	ldrh	r2, [r7, #20]
 8011ec0:	f107 0108 	add.w	r1, r7, #8
 8011ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ec6:	f7f8 fccb 	bl	800a860 <pbuf_copy_partial>
 8011eca:	4603      	mov	r3, r0
 8011ecc:	461a      	mov	r2, r3
 8011ece:	8abb      	ldrh	r3, [r7, #20]
 8011ed0:	4293      	cmp	r3, r2
 8011ed2:	d002      	beq.n	8011eda <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8011ed4:	f06f 0301 	mvn.w	r3, #1
 8011ed8:	e0c8      	b.n	801206c <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8011eda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011ede:	2b04      	cmp	r3, #4
 8011ee0:	d933      	bls.n	8011f4a <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8011ee2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011ee6:	f003 0303 	and.w	r3, r3, #3
 8011eea:	b2db      	uxtb	r3, r3
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d009      	beq.n	8011f04 <dhcp_parse_reply+0x414>
 8011ef0:	4b60      	ldr	r3, [pc, #384]	; (8012074 <dhcp_parse_reply+0x584>)
 8011ef2:	f240 6281 	movw	r2, #1665	; 0x681
 8011ef6:	4964      	ldr	r1, [pc, #400]	; (8012088 <dhcp_parse_reply+0x598>)
 8011ef8:	4860      	ldr	r0, [pc, #384]	; (801207c <dhcp_parse_reply+0x58c>)
 8011efa:	f003 fb31 	bl	8015560 <iprintf>
 8011efe:	f06f 0305 	mvn.w	r3, #5
 8011f02:	e0b3      	b.n	801206c <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8011f04:	4a5f      	ldr	r2, [pc, #380]	; (8012084 <dhcp_parse_reply+0x594>)
 8011f06:	6a3b      	ldr	r3, [r7, #32]
 8011f08:	4413      	add	r3, r2
 8011f0a:	2201      	movs	r2, #1
 8011f0c:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8011f0e:	68bb      	ldr	r3, [r7, #8]
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7f7 f824 	bl	8008f5e <lwip_htonl>
 8011f16:	4602      	mov	r2, r0
 8011f18:	495c      	ldr	r1, [pc, #368]	; (801208c <dhcp_parse_reply+0x59c>)
 8011f1a:	6a3b      	ldr	r3, [r7, #32]
 8011f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8011f20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011f24:	3b04      	subs	r3, #4
 8011f26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8011f2a:	8bfb      	ldrh	r3, [r7, #30]
 8011f2c:	3304      	adds	r3, #4
 8011f2e:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8011f30:	8a7a      	ldrh	r2, [r7, #18]
 8011f32:	8bfb      	ldrh	r3, [r7, #30]
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d202      	bcs.n	8011f3e <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8011f38:	f06f 0301 	mvn.w	r3, #1
 8011f3c:	e096      	b.n	801206c <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8011f3e:	8a7b      	ldrh	r3, [r7, #18]
 8011f40:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8011f42:	6a3b      	ldr	r3, [r7, #32]
 8011f44:	3301      	adds	r3, #1
 8011f46:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8011f48:	e79e      	b.n	8011e88 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8011f4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011f4e:	2b04      	cmp	r3, #4
 8011f50:	d106      	bne.n	8011f60 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	4618      	mov	r0, r3
 8011f56:	f7f7 f802 	bl	8008f5e <lwip_htonl>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	60bb      	str	r3, [r7, #8]
 8011f5e:	e011      	b.n	8011f84 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8011f60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011f64:	2b01      	cmp	r3, #1
 8011f66:	d009      	beq.n	8011f7c <dhcp_parse_reply+0x48c>
 8011f68:	4b42      	ldr	r3, [pc, #264]	; (8012074 <dhcp_parse_reply+0x584>)
 8011f6a:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8011f6e:	4948      	ldr	r1, [pc, #288]	; (8012090 <dhcp_parse_reply+0x5a0>)
 8011f70:	4842      	ldr	r0, [pc, #264]	; (801207c <dhcp_parse_reply+0x58c>)
 8011f72:	f003 faf5 	bl	8015560 <iprintf>
 8011f76:	f06f 0305 	mvn.w	r3, #5
 8011f7a:	e077      	b.n	801206c <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8011f7c:	f107 0308 	add.w	r3, r7, #8
 8011f80:	781b      	ldrb	r3, [r3, #0]
 8011f82:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8011f84:	4a3f      	ldr	r2, [pc, #252]	; (8012084 <dhcp_parse_reply+0x594>)
 8011f86:	6a3b      	ldr	r3, [r7, #32]
 8011f88:	4413      	add	r3, r2
 8011f8a:	2201      	movs	r2, #1
 8011f8c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8011f8e:	68ba      	ldr	r2, [r7, #8]
 8011f90:	493e      	ldr	r1, [pc, #248]	; (801208c <dhcp_parse_reply+0x59c>)
 8011f92:	6a3b      	ldr	r3, [r7, #32]
 8011f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8011f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f9a:	895b      	ldrh	r3, [r3, #10]
 8011f9c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011f9e:	429a      	cmp	r2, r3
 8011fa0:	d324      	bcc.n	8011fec <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8011fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fa4:	895b      	ldrh	r3, [r3, #10]
 8011fa6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011fa8:	1ad3      	subs	r3, r2, r3
 8011faa:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8011fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fae:	895b      	ldrh	r3, [r3, #10]
 8011fb0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8011fb2:	1ad3      	subs	r3, r2, r3
 8011fb4:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8011fb6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011fb8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d213      	bcs.n	8011fe6 <dhcp_parse_reply+0x4f6>
        q = q->next;
 8011fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8011fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d109      	bne.n	8011fde <dhcp_parse_reply+0x4ee>
 8011fca:	4b2a      	ldr	r3, [pc, #168]	; (8012074 <dhcp_parse_reply+0x584>)
 8011fcc:	f240 629d 	movw	r2, #1693	; 0x69d
 8011fd0:	4930      	ldr	r1, [pc, #192]	; (8012094 <dhcp_parse_reply+0x5a4>)
 8011fd2:	482a      	ldr	r0, [pc, #168]	; (801207c <dhcp_parse_reply+0x58c>)
 8011fd4:	f003 fac4 	bl	8015560 <iprintf>
 8011fd8:	f06f 0305 	mvn.w	r3, #5
 8011fdc:	e046      	b.n	801206c <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8011fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe0:	685b      	ldr	r3, [r3, #4]
 8011fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011fe4:	e002      	b.n	8011fec <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8011fe6:	f06f 0301 	mvn.w	r3, #1
 8011fea:	e03f      	b.n	801206c <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8011fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d00a      	beq.n	8012008 <dhcp_parse_reply+0x518>
 8011ff2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011ff4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011ff6:	429a      	cmp	r2, r3
 8011ff8:	d206      	bcs.n	8012008 <dhcp_parse_reply+0x518>
 8011ffa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011ffc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011ffe:	4413      	add	r3, r2
 8012000:	781b      	ldrb	r3, [r3, #0]
 8012002:	2bff      	cmp	r3, #255	; 0xff
 8012004:	f47f adb7 	bne.w	8011b76 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8012008:	4b1e      	ldr	r3, [pc, #120]	; (8012084 <dhcp_parse_reply+0x594>)
 801200a:	781b      	ldrb	r3, [r3, #0]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d018      	beq.n	8012042 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8012010:	4b1e      	ldr	r3, [pc, #120]	; (801208c <dhcp_parse_reply+0x59c>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8012016:	4b1b      	ldr	r3, [pc, #108]	; (8012084 <dhcp_parse_reply+0x594>)
 8012018:	2200      	movs	r2, #0
 801201a:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	2b01      	cmp	r3, #1
 8012020:	d102      	bne.n	8012028 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8012022:	2301      	movs	r3, #1
 8012024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012026:	e00c      	b.n	8012042 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	2b02      	cmp	r3, #2
 801202c:	d102      	bne.n	8012034 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 801202e:	2301      	movs	r3, #1
 8012030:	62bb      	str	r3, [r7, #40]	; 0x28
 8012032:	e006      	b.n	8012042 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	2b03      	cmp	r3, #3
 8012038:	d103      	bne.n	8012042 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 801203a:	2301      	movs	r3, #1
 801203c:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801203e:	2301      	movs	r3, #1
 8012040:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8012042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012044:	2b00      	cmp	r3, #0
 8012046:	d006      	beq.n	8012056 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8012048:	2300      	movs	r3, #0
 801204a:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801204c:	236c      	movs	r3, #108	; 0x6c
 801204e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8012050:	23ec      	movs	r3, #236	; 0xec
 8012052:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8012054:	e569      	b.n	8011b2a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8012056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012058:	2b00      	cmp	r3, #0
 801205a:	d006      	beq.n	801206a <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 801205c:	2300      	movs	r3, #0
 801205e:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8012060:	232c      	movs	r3, #44	; 0x2c
 8012062:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8012064:	236c      	movs	r3, #108	; 0x6c
 8012066:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8012068:	e55f      	b.n	8011b2a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801206a:	2300      	movs	r3, #0
}
 801206c:	4618      	mov	r0, r3
 801206e:	3740      	adds	r7, #64	; 0x40
 8012070:	46bd      	mov	sp, r7
 8012072:	bd80      	pop	{r7, pc}
 8012074:	0801b0dc 	.word	0x0801b0dc
 8012078:	0801b364 	.word	0x0801b364
 801207c:	0801b13c 	.word	0x0801b13c
 8012080:	0801b3a8 	.word	0x0801b3a8
 8012084:	20006a3c 	.word	0x20006a3c
 8012088:	0801b3bc 	.word	0x0801b3bc
 801208c:	20006a44 	.word	0x20006a44
 8012090:	0801b3d4 	.word	0x0801b3d4
 8012094:	0801b3e8 	.word	0x0801b3e8

08012098 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b08a      	sub	sp, #40	; 0x28
 801209c:	af00      	add	r7, sp, #0
 801209e:	60f8      	str	r0, [r7, #12]
 80120a0:	60b9      	str	r1, [r7, #8]
 80120a2:	607a      	str	r2, [r7, #4]
 80120a4:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80120a6:	4b60      	ldr	r3, [pc, #384]	; (8012228 <dhcp_recv+0x190>)
 80120a8:	685b      	ldr	r3, [r3, #4]
 80120aa:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80120ac:	6a3b      	ldr	r3, [r7, #32]
 80120ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120b0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	685b      	ldr	r3, [r3, #4]
 80120b6:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80120b8:	69fb      	ldr	r3, [r7, #28]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	f000 809d 	beq.w	80121fa <dhcp_recv+0x162>
 80120c0:	69fb      	ldr	r3, [r7, #28]
 80120c2:	791b      	ldrb	r3, [r3, #4]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	f000 8098 	beq.w	80121fa <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	895b      	ldrh	r3, [r3, #10]
 80120ce:	2b2b      	cmp	r3, #43	; 0x2b
 80120d0:	f240 8095 	bls.w	80121fe <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80120d4:	69bb      	ldr	r3, [r7, #24]
 80120d6:	781b      	ldrb	r3, [r3, #0]
 80120d8:	2b02      	cmp	r3, #2
 80120da:	f040 8092 	bne.w	8012202 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80120de:	2300      	movs	r3, #0
 80120e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80120e4:	e012      	b.n	801210c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80120e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120ea:	6a3a      	ldr	r2, [r7, #32]
 80120ec:	4413      	add	r3, r2
 80120ee:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80120f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120f6:	69b9      	ldr	r1, [r7, #24]
 80120f8:	440b      	add	r3, r1
 80120fa:	7f1b      	ldrb	r3, [r3, #28]
 80120fc:	429a      	cmp	r2, r3
 80120fe:	f040 8082 	bne.w	8012206 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012106:	3301      	adds	r3, #1
 8012108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801210c:	6a3b      	ldr	r3, [r7, #32]
 801210e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012112:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012116:	429a      	cmp	r2, r3
 8012118:	d203      	bcs.n	8012122 <dhcp_recv+0x8a>
 801211a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801211e:	2b05      	cmp	r3, #5
 8012120:	d9e1      	bls.n	80120e6 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8012122:	69bb      	ldr	r3, [r7, #24]
 8012124:	685b      	ldr	r3, [r3, #4]
 8012126:	4618      	mov	r0, r3
 8012128:	f7f6 ff19 	bl	8008f5e <lwip_htonl>
 801212c:	4602      	mov	r2, r0
 801212e:	69fb      	ldr	r3, [r7, #28]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	429a      	cmp	r2, r3
 8012134:	d169      	bne.n	801220a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8012136:	69f9      	ldr	r1, [r7, #28]
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f7ff fcd9 	bl	8011af0 <dhcp_parse_reply>
 801213e:	4603      	mov	r3, r0
 8012140:	2b00      	cmp	r3, #0
 8012142:	d164      	bne.n	801220e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8012144:	4b39      	ldr	r3, [pc, #228]	; (801222c <dhcp_recv+0x194>)
 8012146:	785b      	ldrb	r3, [r3, #1]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d062      	beq.n	8012212 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	685b      	ldr	r3, [r3, #4]
 8012150:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8012152:	4b37      	ldr	r3, [pc, #220]	; (8012230 <dhcp_recv+0x198>)
 8012154:	685b      	ldr	r3, [r3, #4]
 8012156:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8012158:	7cfb      	ldrb	r3, [r7, #19]
 801215a:	2b05      	cmp	r3, #5
 801215c:	d12a      	bne.n	80121b4 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801215e:	69fb      	ldr	r3, [r7, #28]
 8012160:	795b      	ldrb	r3, [r3, #5]
 8012162:	2b01      	cmp	r3, #1
 8012164:	d112      	bne.n	801218c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8012166:	6979      	ldr	r1, [r7, #20]
 8012168:	6a38      	ldr	r0, [r7, #32]
 801216a:	f7fe fe53 	bl	8010e14 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801216e:	6a3b      	ldr	r3, [r7, #32]
 8012170:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012174:	f003 0308 	and.w	r3, r3, #8
 8012178:	2b00      	cmp	r3, #0
 801217a:	d003      	beq.n	8012184 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801217c:	6a38      	ldr	r0, [r7, #32]
 801217e:	f7fe fbc3 	bl	8010908 <dhcp_check>
 8012182:	e049      	b.n	8012218 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8012184:	6a38      	ldr	r0, [r7, #32]
 8012186:	f7ff f867 	bl	8011258 <dhcp_bind>
 801218a:	e045      	b.n	8012218 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801218c:	69fb      	ldr	r3, [r7, #28]
 801218e:	795b      	ldrb	r3, [r3, #5]
 8012190:	2b03      	cmp	r3, #3
 8012192:	d007      	beq.n	80121a4 <dhcp_recv+0x10c>
 8012194:	69fb      	ldr	r3, [r7, #28]
 8012196:	795b      	ldrb	r3, [r3, #5]
 8012198:	2b04      	cmp	r3, #4
 801219a:	d003      	beq.n	80121a4 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801219c:	69fb      	ldr	r3, [r7, #28]
 801219e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80121a0:	2b05      	cmp	r3, #5
 80121a2:	d139      	bne.n	8012218 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80121a4:	6979      	ldr	r1, [r7, #20]
 80121a6:	6a38      	ldr	r0, [r7, #32]
 80121a8:	f7fe fe34 	bl	8010e14 <dhcp_handle_ack>
      dhcp_bind(netif);
 80121ac:	6a38      	ldr	r0, [r7, #32]
 80121ae:	f7ff f853 	bl	8011258 <dhcp_bind>
 80121b2:	e031      	b.n	8012218 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80121b4:	7cfb      	ldrb	r3, [r7, #19]
 80121b6:	2b06      	cmp	r3, #6
 80121b8:	d113      	bne.n	80121e2 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80121ba:	69fb      	ldr	r3, [r7, #28]
 80121bc:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80121be:	2b03      	cmp	r3, #3
 80121c0:	d00b      	beq.n	80121da <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80121c2:	69fb      	ldr	r3, [r7, #28]
 80121c4:	795b      	ldrb	r3, [r3, #5]
 80121c6:	2b01      	cmp	r3, #1
 80121c8:	d007      	beq.n	80121da <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80121ca:	69fb      	ldr	r3, [r7, #28]
 80121cc:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80121ce:	2b04      	cmp	r3, #4
 80121d0:	d003      	beq.n	80121da <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80121d2:	69fb      	ldr	r3, [r7, #28]
 80121d4:	795b      	ldrb	r3, [r3, #5]
 80121d6:	2b05      	cmp	r3, #5
 80121d8:	d103      	bne.n	80121e2 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80121da:	6a38      	ldr	r0, [r7, #32]
 80121dc:	f7fe fb7a 	bl	80108d4 <dhcp_handle_nak>
 80121e0:	e01a      	b.n	8012218 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80121e2:	7cfb      	ldrb	r3, [r7, #19]
 80121e4:	2b02      	cmp	r3, #2
 80121e6:	d116      	bne.n	8012216 <dhcp_recv+0x17e>
 80121e8:	69fb      	ldr	r3, [r7, #28]
 80121ea:	795b      	ldrb	r3, [r3, #5]
 80121ec:	2b06      	cmp	r3, #6
 80121ee:	d112      	bne.n	8012216 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80121f0:	6979      	ldr	r1, [r7, #20]
 80121f2:	6a38      	ldr	r0, [r7, #32]
 80121f4:	f7fe fbbc 	bl	8010970 <dhcp_handle_offer>
 80121f8:	e00e      	b.n	8012218 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80121fa:	bf00      	nop
 80121fc:	e00c      	b.n	8012218 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80121fe:	bf00      	nop
 8012200:	e00a      	b.n	8012218 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012202:	bf00      	nop
 8012204:	e008      	b.n	8012218 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8012206:	bf00      	nop
 8012208:	e006      	b.n	8012218 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801220a:	bf00      	nop
 801220c:	e004      	b.n	8012218 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801220e:	bf00      	nop
 8012210:	e002      	b.n	8012218 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012212:	bf00      	nop
 8012214:	e000      	b.n	8012218 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8012216:	bf00      	nop
  pbuf_free(p);
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f7f8 f927 	bl	800a46c <pbuf_free>
}
 801221e:	bf00      	nop
 8012220:	3728      	adds	r7, #40	; 0x28
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}
 8012226:	bf00      	nop
 8012228:	200038fc 	.word	0x200038fc
 801222c:	20006a3c 	.word	0x20006a3c
 8012230:	20006a44 	.word	0x20006a44

08012234 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b088      	sub	sp, #32
 8012238:	af00      	add	r7, sp, #0
 801223a:	60f8      	str	r0, [r7, #12]
 801223c:	60b9      	str	r1, [r7, #8]
 801223e:	603b      	str	r3, [r7, #0]
 8012240:	4613      	mov	r3, r2
 8012242:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d108      	bne.n	801225c <dhcp_create_msg+0x28>
 801224a:	4b5f      	ldr	r3, [pc, #380]	; (80123c8 <dhcp_create_msg+0x194>)
 801224c:	f240 7269 	movw	r2, #1897	; 0x769
 8012250:	495e      	ldr	r1, [pc, #376]	; (80123cc <dhcp_create_msg+0x198>)
 8012252:	485f      	ldr	r0, [pc, #380]	; (80123d0 <dhcp_create_msg+0x19c>)
 8012254:	f003 f984 	bl	8015560 <iprintf>
 8012258:	2300      	movs	r3, #0
 801225a:	e0b1      	b.n	80123c0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801225c:	68bb      	ldr	r3, [r7, #8]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d108      	bne.n	8012274 <dhcp_create_msg+0x40>
 8012262:	4b59      	ldr	r3, [pc, #356]	; (80123c8 <dhcp_create_msg+0x194>)
 8012264:	f240 726a 	movw	r2, #1898	; 0x76a
 8012268:	495a      	ldr	r1, [pc, #360]	; (80123d4 <dhcp_create_msg+0x1a0>)
 801226a:	4859      	ldr	r0, [pc, #356]	; (80123d0 <dhcp_create_msg+0x19c>)
 801226c:	f003 f978 	bl	8015560 <iprintf>
 8012270:	2300      	movs	r3, #0
 8012272:	e0a5      	b.n	80123c0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8012274:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012278:	f44f 719a 	mov.w	r1, #308	; 0x134
 801227c:	2036      	movs	r0, #54	; 0x36
 801227e:	f7f7 fe11 	bl	8009ea4 <pbuf_alloc>
 8012282:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8012284:	69bb      	ldr	r3, [r7, #24]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d101      	bne.n	801228e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801228a:	2300      	movs	r3, #0
 801228c:	e098      	b.n	80123c0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801228e:	69bb      	ldr	r3, [r7, #24]
 8012290:	895b      	ldrh	r3, [r3, #10]
 8012292:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8012296:	d206      	bcs.n	80122a6 <dhcp_create_msg+0x72>
 8012298:	4b4b      	ldr	r3, [pc, #300]	; (80123c8 <dhcp_create_msg+0x194>)
 801229a:	f240 7271 	movw	r2, #1905	; 0x771
 801229e:	494e      	ldr	r1, [pc, #312]	; (80123d8 <dhcp_create_msg+0x1a4>)
 80122a0:	484b      	ldr	r0, [pc, #300]	; (80123d0 <dhcp_create_msg+0x19c>)
 80122a2:	f003 f95d 	bl	8015560 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80122a6:	79fb      	ldrb	r3, [r7, #7]
 80122a8:	2b03      	cmp	r3, #3
 80122aa:	d103      	bne.n	80122b4 <dhcp_create_msg+0x80>
 80122ac:	68bb      	ldr	r3, [r7, #8]
 80122ae:	795b      	ldrb	r3, [r3, #5]
 80122b0:	2b03      	cmp	r3, #3
 80122b2:	d10d      	bne.n	80122d0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80122b4:	68bb      	ldr	r3, [r7, #8]
 80122b6:	799b      	ldrb	r3, [r3, #6]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d105      	bne.n	80122c8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80122bc:	f003 f968 	bl	8015590 <rand>
 80122c0:	4603      	mov	r3, r0
 80122c2:	461a      	mov	r2, r3
 80122c4:	4b45      	ldr	r3, [pc, #276]	; (80123dc <dhcp_create_msg+0x1a8>)
 80122c6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80122c8:	4b44      	ldr	r3, [pc, #272]	; (80123dc <dhcp_create_msg+0x1a8>)
 80122ca:	681a      	ldr	r2, [r3, #0]
 80122cc:	68bb      	ldr	r3, [r7, #8]
 80122ce:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80122d0:	69bb      	ldr	r3, [r7, #24]
 80122d2:	685b      	ldr	r3, [r3, #4]
 80122d4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80122d6:	f44f 729a 	mov.w	r2, #308	; 0x134
 80122da:	2100      	movs	r1, #0
 80122dc:	6978      	ldr	r0, [r7, #20]
 80122de:	f002 fc23 	bl	8014b28 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80122e2:	697b      	ldr	r3, [r7, #20]
 80122e4:	2201      	movs	r2, #1
 80122e6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80122e8:	697b      	ldr	r3, [r7, #20]
 80122ea:	2201      	movs	r2, #1
 80122ec:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80122f4:	697b      	ldr	r3, [r7, #20]
 80122f6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80122f8:	68bb      	ldr	r3, [r7, #8]
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	4618      	mov	r0, r3
 80122fe:	f7f6 fe2e 	bl	8008f5e <lwip_htonl>
 8012302:	4602      	mov	r2, r0
 8012304:	697b      	ldr	r3, [r7, #20]
 8012306:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8012308:	79fb      	ldrb	r3, [r7, #7]
 801230a:	2b08      	cmp	r3, #8
 801230c:	d010      	beq.n	8012330 <dhcp_create_msg+0xfc>
 801230e:	79fb      	ldrb	r3, [r7, #7]
 8012310:	2b04      	cmp	r3, #4
 8012312:	d00d      	beq.n	8012330 <dhcp_create_msg+0xfc>
 8012314:	79fb      	ldrb	r3, [r7, #7]
 8012316:	2b07      	cmp	r3, #7
 8012318:	d00a      	beq.n	8012330 <dhcp_create_msg+0xfc>
 801231a:	79fb      	ldrb	r3, [r7, #7]
 801231c:	2b03      	cmp	r3, #3
 801231e:	d10c      	bne.n	801233a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8012320:	68bb      	ldr	r3, [r7, #8]
 8012322:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8012324:	2b05      	cmp	r3, #5
 8012326:	d003      	beq.n	8012330 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8012328:	68bb      	ldr	r3, [r7, #8]
 801232a:	795b      	ldrb	r3, [r3, #5]
 801232c:	2b04      	cmp	r3, #4
 801232e:	d104      	bne.n	801233a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	3304      	adds	r3, #4
 8012334:	681a      	ldr	r2, [r3, #0]
 8012336:	697b      	ldr	r3, [r7, #20]
 8012338:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801233a:	2300      	movs	r3, #0
 801233c:	83fb      	strh	r3, [r7, #30]
 801233e:	e00c      	b.n	801235a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8012340:	8bfa      	ldrh	r2, [r7, #30]
 8012342:	8bfb      	ldrh	r3, [r7, #30]
 8012344:	68f9      	ldr	r1, [r7, #12]
 8012346:	440a      	add	r2, r1
 8012348:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801234c:	697a      	ldr	r2, [r7, #20]
 801234e:	4413      	add	r3, r2
 8012350:	460a      	mov	r2, r1
 8012352:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012354:	8bfb      	ldrh	r3, [r7, #30]
 8012356:	3301      	adds	r3, #1
 8012358:	83fb      	strh	r3, [r7, #30]
 801235a:	8bfb      	ldrh	r3, [r7, #30]
 801235c:	2b05      	cmp	r3, #5
 801235e:	d9ef      	bls.n	8012340 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8012360:	697b      	ldr	r3, [r7, #20]
 8012362:	2200      	movs	r2, #0
 8012364:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8012368:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801236c:	2200      	movs	r2, #0
 801236e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8012372:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8012376:	2200      	movs	r2, #0
 8012378:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801237c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8012380:	2200      	movs	r2, #0
 8012382:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8012386:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801238a:	697b      	ldr	r3, [r7, #20]
 801238c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012390:	2301      	movs	r3, #1
 8012392:	2235      	movs	r2, #53	; 0x35
 8012394:	2000      	movs	r0, #0
 8012396:	f7ff fadb 	bl	8011950 <dhcp_option>
 801239a:	4603      	mov	r3, r0
 801239c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801239e:	697b      	ldr	r3, [r7, #20]
 80123a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80123a4:	79fa      	ldrb	r2, [r7, #7]
 80123a6:	8a7b      	ldrh	r3, [r7, #18]
 80123a8:	4618      	mov	r0, r3
 80123aa:	f7ff fb05 	bl	80119b8 <dhcp_option_byte>
 80123ae:	4603      	mov	r3, r0
 80123b0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80123b2:	683b      	ldr	r3, [r7, #0]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d002      	beq.n	80123be <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80123b8:	683b      	ldr	r3, [r7, #0]
 80123ba:	8a7a      	ldrh	r2, [r7, #18]
 80123bc:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80123be:	69bb      	ldr	r3, [r7, #24]
}
 80123c0:	4618      	mov	r0, r3
 80123c2:	3720      	adds	r7, #32
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bd80      	pop	{r7, pc}
 80123c8:	0801b0dc 	.word	0x0801b0dc
 80123cc:	0801b3fc 	.word	0x0801b3fc
 80123d0:	0801b13c 	.word	0x0801b13c
 80123d4:	0801b41c 	.word	0x0801b41c
 80123d8:	0801b43c 	.word	0x0801b43c
 80123dc:	20000420 	.word	0x20000420

080123e0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b084      	sub	sp, #16
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	4603      	mov	r3, r0
 80123e8:	60b9      	str	r1, [r7, #8]
 80123ea:	607a      	str	r2, [r7, #4]
 80123ec:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80123ee:	89fb      	ldrh	r3, [r7, #14]
 80123f0:	1c5a      	adds	r2, r3, #1
 80123f2:	81fa      	strh	r2, [r7, #14]
 80123f4:	461a      	mov	r2, r3
 80123f6:	68bb      	ldr	r3, [r7, #8]
 80123f8:	4413      	add	r3, r2
 80123fa:	22ff      	movs	r2, #255	; 0xff
 80123fc:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80123fe:	e007      	b.n	8012410 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8012400:	89fb      	ldrh	r3, [r7, #14]
 8012402:	1c5a      	adds	r2, r3, #1
 8012404:	81fa      	strh	r2, [r7, #14]
 8012406:	461a      	mov	r2, r3
 8012408:	68bb      	ldr	r3, [r7, #8]
 801240a:	4413      	add	r3, r2
 801240c:	2200      	movs	r2, #0
 801240e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8012410:	89fb      	ldrh	r3, [r7, #14]
 8012412:	2b43      	cmp	r3, #67	; 0x43
 8012414:	d904      	bls.n	8012420 <dhcp_option_trailer+0x40>
 8012416:	89fb      	ldrh	r3, [r7, #14]
 8012418:	f003 0303 	and.w	r3, r3, #3
 801241c:	2b00      	cmp	r3, #0
 801241e:	d002      	beq.n	8012426 <dhcp_option_trailer+0x46>
 8012420:	89fb      	ldrh	r3, [r7, #14]
 8012422:	2b43      	cmp	r3, #67	; 0x43
 8012424:	d9ec      	bls.n	8012400 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8012426:	89fb      	ldrh	r3, [r7, #14]
 8012428:	33f0      	adds	r3, #240	; 0xf0
 801242a:	b29b      	uxth	r3, r3
 801242c:	4619      	mov	r1, r3
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f7f7 fe96 	bl	800a160 <pbuf_realloc>
}
 8012434:	bf00      	nop
 8012436:	3710      	adds	r7, #16
 8012438:	46bd      	mov	sp, r7
 801243a:	bd80      	pop	{r7, pc}

0801243c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801243c:	b480      	push	{r7}
 801243e:	b085      	sub	sp, #20
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d017      	beq.n	801247a <dhcp_supplied_address+0x3e>
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801244e:	2b00      	cmp	r3, #0
 8012450:	d013      	beq.n	801247a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012456:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	795b      	ldrb	r3, [r3, #5]
 801245c:	2b0a      	cmp	r3, #10
 801245e:	d007      	beq.n	8012470 <dhcp_supplied_address+0x34>
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	795b      	ldrb	r3, [r3, #5]
 8012464:	2b05      	cmp	r3, #5
 8012466:	d003      	beq.n	8012470 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801246c:	2b04      	cmp	r3, #4
 801246e:	d101      	bne.n	8012474 <dhcp_supplied_address+0x38>
 8012470:	2301      	movs	r3, #1
 8012472:	e000      	b.n	8012476 <dhcp_supplied_address+0x3a>
 8012474:	2300      	movs	r3, #0
 8012476:	b2db      	uxtb	r3, r3
 8012478:	e000      	b.n	801247c <dhcp_supplied_address+0x40>
  }
  return 0;
 801247a:	2300      	movs	r3, #0
}
 801247c:	4618      	mov	r0, r3
 801247e:	3714      	adds	r7, #20
 8012480:	46bd      	mov	sp, r7
 8012482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012486:	4770      	bx	lr

08012488 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b082      	sub	sp, #8
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012490:	4915      	ldr	r1, [pc, #84]	; (80124e8 <etharp_free_entry+0x60>)
 8012492:	687a      	ldr	r2, [r7, #4]
 8012494:	4613      	mov	r3, r2
 8012496:	005b      	lsls	r3, r3, #1
 8012498:	4413      	add	r3, r2
 801249a:	00db      	lsls	r3, r3, #3
 801249c:	440b      	add	r3, r1
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d013      	beq.n	80124cc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80124a4:	4910      	ldr	r1, [pc, #64]	; (80124e8 <etharp_free_entry+0x60>)
 80124a6:	687a      	ldr	r2, [r7, #4]
 80124a8:	4613      	mov	r3, r2
 80124aa:	005b      	lsls	r3, r3, #1
 80124ac:	4413      	add	r3, r2
 80124ae:	00db      	lsls	r3, r3, #3
 80124b0:	440b      	add	r3, r1
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	4618      	mov	r0, r3
 80124b6:	f7f7 ffd9 	bl	800a46c <pbuf_free>
    arp_table[i].q = NULL;
 80124ba:	490b      	ldr	r1, [pc, #44]	; (80124e8 <etharp_free_entry+0x60>)
 80124bc:	687a      	ldr	r2, [r7, #4]
 80124be:	4613      	mov	r3, r2
 80124c0:	005b      	lsls	r3, r3, #1
 80124c2:	4413      	add	r3, r2
 80124c4:	00db      	lsls	r3, r3, #3
 80124c6:	440b      	add	r3, r1
 80124c8:	2200      	movs	r2, #0
 80124ca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80124cc:	4906      	ldr	r1, [pc, #24]	; (80124e8 <etharp_free_entry+0x60>)
 80124ce:	687a      	ldr	r2, [r7, #4]
 80124d0:	4613      	mov	r3, r2
 80124d2:	005b      	lsls	r3, r3, #1
 80124d4:	4413      	add	r3, r2
 80124d6:	00db      	lsls	r3, r3, #3
 80124d8:	440b      	add	r3, r1
 80124da:	3314      	adds	r3, #20
 80124dc:	2200      	movs	r2, #0
 80124de:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80124e0:	bf00      	nop
 80124e2:	3708      	adds	r7, #8
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}
 80124e8:	20000424 	.word	0x20000424

080124ec <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b082      	sub	sp, #8
 80124f0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80124f2:	2300      	movs	r3, #0
 80124f4:	607b      	str	r3, [r7, #4]
 80124f6:	e096      	b.n	8012626 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80124f8:	494f      	ldr	r1, [pc, #316]	; (8012638 <etharp_tmr+0x14c>)
 80124fa:	687a      	ldr	r2, [r7, #4]
 80124fc:	4613      	mov	r3, r2
 80124fe:	005b      	lsls	r3, r3, #1
 8012500:	4413      	add	r3, r2
 8012502:	00db      	lsls	r3, r3, #3
 8012504:	440b      	add	r3, r1
 8012506:	3314      	adds	r3, #20
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801250c:	78fb      	ldrb	r3, [r7, #3]
 801250e:	2b00      	cmp	r3, #0
 8012510:	f000 8086 	beq.w	8012620 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012514:	4948      	ldr	r1, [pc, #288]	; (8012638 <etharp_tmr+0x14c>)
 8012516:	687a      	ldr	r2, [r7, #4]
 8012518:	4613      	mov	r3, r2
 801251a:	005b      	lsls	r3, r3, #1
 801251c:	4413      	add	r3, r2
 801251e:	00db      	lsls	r3, r3, #3
 8012520:	440b      	add	r3, r1
 8012522:	3312      	adds	r3, #18
 8012524:	881b      	ldrh	r3, [r3, #0]
 8012526:	3301      	adds	r3, #1
 8012528:	b298      	uxth	r0, r3
 801252a:	4943      	ldr	r1, [pc, #268]	; (8012638 <etharp_tmr+0x14c>)
 801252c:	687a      	ldr	r2, [r7, #4]
 801252e:	4613      	mov	r3, r2
 8012530:	005b      	lsls	r3, r3, #1
 8012532:	4413      	add	r3, r2
 8012534:	00db      	lsls	r3, r3, #3
 8012536:	440b      	add	r3, r1
 8012538:	3312      	adds	r3, #18
 801253a:	4602      	mov	r2, r0
 801253c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801253e:	493e      	ldr	r1, [pc, #248]	; (8012638 <etharp_tmr+0x14c>)
 8012540:	687a      	ldr	r2, [r7, #4]
 8012542:	4613      	mov	r3, r2
 8012544:	005b      	lsls	r3, r3, #1
 8012546:	4413      	add	r3, r2
 8012548:	00db      	lsls	r3, r3, #3
 801254a:	440b      	add	r3, r1
 801254c:	3312      	adds	r3, #18
 801254e:	881b      	ldrh	r3, [r3, #0]
 8012550:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012554:	d215      	bcs.n	8012582 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012556:	4938      	ldr	r1, [pc, #224]	; (8012638 <etharp_tmr+0x14c>)
 8012558:	687a      	ldr	r2, [r7, #4]
 801255a:	4613      	mov	r3, r2
 801255c:	005b      	lsls	r3, r3, #1
 801255e:	4413      	add	r3, r2
 8012560:	00db      	lsls	r3, r3, #3
 8012562:	440b      	add	r3, r1
 8012564:	3314      	adds	r3, #20
 8012566:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012568:	2b01      	cmp	r3, #1
 801256a:	d10e      	bne.n	801258a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801256c:	4932      	ldr	r1, [pc, #200]	; (8012638 <etharp_tmr+0x14c>)
 801256e:	687a      	ldr	r2, [r7, #4]
 8012570:	4613      	mov	r3, r2
 8012572:	005b      	lsls	r3, r3, #1
 8012574:	4413      	add	r3, r2
 8012576:	00db      	lsls	r3, r3, #3
 8012578:	440b      	add	r3, r1
 801257a:	3312      	adds	r3, #18
 801257c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801257e:	2b04      	cmp	r3, #4
 8012580:	d903      	bls.n	801258a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f7ff ff80 	bl	8012488 <etharp_free_entry>
 8012588:	e04a      	b.n	8012620 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801258a:	492b      	ldr	r1, [pc, #172]	; (8012638 <etharp_tmr+0x14c>)
 801258c:	687a      	ldr	r2, [r7, #4]
 801258e:	4613      	mov	r3, r2
 8012590:	005b      	lsls	r3, r3, #1
 8012592:	4413      	add	r3, r2
 8012594:	00db      	lsls	r3, r3, #3
 8012596:	440b      	add	r3, r1
 8012598:	3314      	adds	r3, #20
 801259a:	781b      	ldrb	r3, [r3, #0]
 801259c:	2b03      	cmp	r3, #3
 801259e:	d10a      	bne.n	80125b6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80125a0:	4925      	ldr	r1, [pc, #148]	; (8012638 <etharp_tmr+0x14c>)
 80125a2:	687a      	ldr	r2, [r7, #4]
 80125a4:	4613      	mov	r3, r2
 80125a6:	005b      	lsls	r3, r3, #1
 80125a8:	4413      	add	r3, r2
 80125aa:	00db      	lsls	r3, r3, #3
 80125ac:	440b      	add	r3, r1
 80125ae:	3314      	adds	r3, #20
 80125b0:	2204      	movs	r2, #4
 80125b2:	701a      	strb	r2, [r3, #0]
 80125b4:	e034      	b.n	8012620 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80125b6:	4920      	ldr	r1, [pc, #128]	; (8012638 <etharp_tmr+0x14c>)
 80125b8:	687a      	ldr	r2, [r7, #4]
 80125ba:	4613      	mov	r3, r2
 80125bc:	005b      	lsls	r3, r3, #1
 80125be:	4413      	add	r3, r2
 80125c0:	00db      	lsls	r3, r3, #3
 80125c2:	440b      	add	r3, r1
 80125c4:	3314      	adds	r3, #20
 80125c6:	781b      	ldrb	r3, [r3, #0]
 80125c8:	2b04      	cmp	r3, #4
 80125ca:	d10a      	bne.n	80125e2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80125cc:	491a      	ldr	r1, [pc, #104]	; (8012638 <etharp_tmr+0x14c>)
 80125ce:	687a      	ldr	r2, [r7, #4]
 80125d0:	4613      	mov	r3, r2
 80125d2:	005b      	lsls	r3, r3, #1
 80125d4:	4413      	add	r3, r2
 80125d6:	00db      	lsls	r3, r3, #3
 80125d8:	440b      	add	r3, r1
 80125da:	3314      	adds	r3, #20
 80125dc:	2202      	movs	r2, #2
 80125de:	701a      	strb	r2, [r3, #0]
 80125e0:	e01e      	b.n	8012620 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80125e2:	4915      	ldr	r1, [pc, #84]	; (8012638 <etharp_tmr+0x14c>)
 80125e4:	687a      	ldr	r2, [r7, #4]
 80125e6:	4613      	mov	r3, r2
 80125e8:	005b      	lsls	r3, r3, #1
 80125ea:	4413      	add	r3, r2
 80125ec:	00db      	lsls	r3, r3, #3
 80125ee:	440b      	add	r3, r1
 80125f0:	3314      	adds	r3, #20
 80125f2:	781b      	ldrb	r3, [r3, #0]
 80125f4:	2b01      	cmp	r3, #1
 80125f6:	d113      	bne.n	8012620 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80125f8:	490f      	ldr	r1, [pc, #60]	; (8012638 <etharp_tmr+0x14c>)
 80125fa:	687a      	ldr	r2, [r7, #4]
 80125fc:	4613      	mov	r3, r2
 80125fe:	005b      	lsls	r3, r3, #1
 8012600:	4413      	add	r3, r2
 8012602:	00db      	lsls	r3, r3, #3
 8012604:	440b      	add	r3, r1
 8012606:	3308      	adds	r3, #8
 8012608:	6818      	ldr	r0, [r3, #0]
 801260a:	687a      	ldr	r2, [r7, #4]
 801260c:	4613      	mov	r3, r2
 801260e:	005b      	lsls	r3, r3, #1
 8012610:	4413      	add	r3, r2
 8012612:	00db      	lsls	r3, r3, #3
 8012614:	4a08      	ldr	r2, [pc, #32]	; (8012638 <etharp_tmr+0x14c>)
 8012616:	4413      	add	r3, r2
 8012618:	3304      	adds	r3, #4
 801261a:	4619      	mov	r1, r3
 801261c:	f000 fe72 	bl	8013304 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	3301      	adds	r3, #1
 8012624:	607b      	str	r3, [r7, #4]
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	2b09      	cmp	r3, #9
 801262a:	f77f af65 	ble.w	80124f8 <etharp_tmr+0xc>
      }
    }
  }
}
 801262e:	bf00      	nop
 8012630:	bf00      	nop
 8012632:	3708      	adds	r7, #8
 8012634:	46bd      	mov	sp, r7
 8012636:	bd80      	pop	{r7, pc}
 8012638:	20000424 	.word	0x20000424

0801263c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b08a      	sub	sp, #40	; 0x28
 8012640:	af00      	add	r7, sp, #0
 8012642:	60f8      	str	r0, [r7, #12]
 8012644:	460b      	mov	r3, r1
 8012646:	607a      	str	r2, [r7, #4]
 8012648:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801264a:	230a      	movs	r3, #10
 801264c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801264e:	230a      	movs	r3, #10
 8012650:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012652:	230a      	movs	r3, #10
 8012654:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012656:	2300      	movs	r3, #0
 8012658:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801265a:	230a      	movs	r3, #10
 801265c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801265e:	2300      	movs	r3, #0
 8012660:	83bb      	strh	r3, [r7, #28]
 8012662:	2300      	movs	r3, #0
 8012664:	837b      	strh	r3, [r7, #26]
 8012666:	2300      	movs	r3, #0
 8012668:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801266a:	2300      	movs	r3, #0
 801266c:	843b      	strh	r3, [r7, #32]
 801266e:	e0ae      	b.n	80127ce <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012670:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012674:	49a6      	ldr	r1, [pc, #664]	; (8012910 <etharp_find_entry+0x2d4>)
 8012676:	4613      	mov	r3, r2
 8012678:	005b      	lsls	r3, r3, #1
 801267a:	4413      	add	r3, r2
 801267c:	00db      	lsls	r3, r3, #3
 801267e:	440b      	add	r3, r1
 8012680:	3314      	adds	r3, #20
 8012682:	781b      	ldrb	r3, [r3, #0]
 8012684:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012686:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801268a:	2b0a      	cmp	r3, #10
 801268c:	d105      	bne.n	801269a <etharp_find_entry+0x5e>
 801268e:	7dfb      	ldrb	r3, [r7, #23]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d102      	bne.n	801269a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012694:	8c3b      	ldrh	r3, [r7, #32]
 8012696:	847b      	strh	r3, [r7, #34]	; 0x22
 8012698:	e095      	b.n	80127c6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801269a:	7dfb      	ldrb	r3, [r7, #23]
 801269c:	2b00      	cmp	r3, #0
 801269e:	f000 8092 	beq.w	80127c6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80126a2:	7dfb      	ldrb	r3, [r7, #23]
 80126a4:	2b01      	cmp	r3, #1
 80126a6:	d009      	beq.n	80126bc <etharp_find_entry+0x80>
 80126a8:	7dfb      	ldrb	r3, [r7, #23]
 80126aa:	2b01      	cmp	r3, #1
 80126ac:	d806      	bhi.n	80126bc <etharp_find_entry+0x80>
 80126ae:	4b99      	ldr	r3, [pc, #612]	; (8012914 <etharp_find_entry+0x2d8>)
 80126b0:	f240 1223 	movw	r2, #291	; 0x123
 80126b4:	4998      	ldr	r1, [pc, #608]	; (8012918 <etharp_find_entry+0x2dc>)
 80126b6:	4899      	ldr	r0, [pc, #612]	; (801291c <etharp_find_entry+0x2e0>)
 80126b8:	f002 ff52 	bl	8015560 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d020      	beq.n	8012704 <etharp_find_entry+0xc8>
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	6819      	ldr	r1, [r3, #0]
 80126c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80126ca:	4891      	ldr	r0, [pc, #580]	; (8012910 <etharp_find_entry+0x2d4>)
 80126cc:	4613      	mov	r3, r2
 80126ce:	005b      	lsls	r3, r3, #1
 80126d0:	4413      	add	r3, r2
 80126d2:	00db      	lsls	r3, r3, #3
 80126d4:	4403      	add	r3, r0
 80126d6:	3304      	adds	r3, #4
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	4299      	cmp	r1, r3
 80126dc:	d112      	bne.n	8012704 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d00c      	beq.n	80126fe <etharp_find_entry+0xc2>
 80126e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80126e8:	4989      	ldr	r1, [pc, #548]	; (8012910 <etharp_find_entry+0x2d4>)
 80126ea:	4613      	mov	r3, r2
 80126ec:	005b      	lsls	r3, r3, #1
 80126ee:	4413      	add	r3, r2
 80126f0:	00db      	lsls	r3, r3, #3
 80126f2:	440b      	add	r3, r1
 80126f4:	3308      	adds	r3, #8
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	687a      	ldr	r2, [r7, #4]
 80126fa:	429a      	cmp	r2, r3
 80126fc:	d102      	bne.n	8012704 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80126fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012702:	e100      	b.n	8012906 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012704:	7dfb      	ldrb	r3, [r7, #23]
 8012706:	2b01      	cmp	r3, #1
 8012708:	d140      	bne.n	801278c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801270a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801270e:	4980      	ldr	r1, [pc, #512]	; (8012910 <etharp_find_entry+0x2d4>)
 8012710:	4613      	mov	r3, r2
 8012712:	005b      	lsls	r3, r3, #1
 8012714:	4413      	add	r3, r2
 8012716:	00db      	lsls	r3, r3, #3
 8012718:	440b      	add	r3, r1
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d01a      	beq.n	8012756 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012720:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012724:	497a      	ldr	r1, [pc, #488]	; (8012910 <etharp_find_entry+0x2d4>)
 8012726:	4613      	mov	r3, r2
 8012728:	005b      	lsls	r3, r3, #1
 801272a:	4413      	add	r3, r2
 801272c:	00db      	lsls	r3, r3, #3
 801272e:	440b      	add	r3, r1
 8012730:	3312      	adds	r3, #18
 8012732:	881b      	ldrh	r3, [r3, #0]
 8012734:	8bba      	ldrh	r2, [r7, #28]
 8012736:	429a      	cmp	r2, r3
 8012738:	d845      	bhi.n	80127c6 <etharp_find_entry+0x18a>
            old_queue = i;
 801273a:	8c3b      	ldrh	r3, [r7, #32]
 801273c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801273e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012742:	4973      	ldr	r1, [pc, #460]	; (8012910 <etharp_find_entry+0x2d4>)
 8012744:	4613      	mov	r3, r2
 8012746:	005b      	lsls	r3, r3, #1
 8012748:	4413      	add	r3, r2
 801274a:	00db      	lsls	r3, r3, #3
 801274c:	440b      	add	r3, r1
 801274e:	3312      	adds	r3, #18
 8012750:	881b      	ldrh	r3, [r3, #0]
 8012752:	83bb      	strh	r3, [r7, #28]
 8012754:	e037      	b.n	80127c6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012756:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801275a:	496d      	ldr	r1, [pc, #436]	; (8012910 <etharp_find_entry+0x2d4>)
 801275c:	4613      	mov	r3, r2
 801275e:	005b      	lsls	r3, r3, #1
 8012760:	4413      	add	r3, r2
 8012762:	00db      	lsls	r3, r3, #3
 8012764:	440b      	add	r3, r1
 8012766:	3312      	adds	r3, #18
 8012768:	881b      	ldrh	r3, [r3, #0]
 801276a:	8b7a      	ldrh	r2, [r7, #26]
 801276c:	429a      	cmp	r2, r3
 801276e:	d82a      	bhi.n	80127c6 <etharp_find_entry+0x18a>
            old_pending = i;
 8012770:	8c3b      	ldrh	r3, [r7, #32]
 8012772:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012774:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012778:	4965      	ldr	r1, [pc, #404]	; (8012910 <etharp_find_entry+0x2d4>)
 801277a:	4613      	mov	r3, r2
 801277c:	005b      	lsls	r3, r3, #1
 801277e:	4413      	add	r3, r2
 8012780:	00db      	lsls	r3, r3, #3
 8012782:	440b      	add	r3, r1
 8012784:	3312      	adds	r3, #18
 8012786:	881b      	ldrh	r3, [r3, #0]
 8012788:	837b      	strh	r3, [r7, #26]
 801278a:	e01c      	b.n	80127c6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801278c:	7dfb      	ldrb	r3, [r7, #23]
 801278e:	2b01      	cmp	r3, #1
 8012790:	d919      	bls.n	80127c6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012792:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012796:	495e      	ldr	r1, [pc, #376]	; (8012910 <etharp_find_entry+0x2d4>)
 8012798:	4613      	mov	r3, r2
 801279a:	005b      	lsls	r3, r3, #1
 801279c:	4413      	add	r3, r2
 801279e:	00db      	lsls	r3, r3, #3
 80127a0:	440b      	add	r3, r1
 80127a2:	3312      	adds	r3, #18
 80127a4:	881b      	ldrh	r3, [r3, #0]
 80127a6:	8b3a      	ldrh	r2, [r7, #24]
 80127a8:	429a      	cmp	r2, r3
 80127aa:	d80c      	bhi.n	80127c6 <etharp_find_entry+0x18a>
            old_stable = i;
 80127ac:	8c3b      	ldrh	r3, [r7, #32]
 80127ae:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80127b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80127b4:	4956      	ldr	r1, [pc, #344]	; (8012910 <etharp_find_entry+0x2d4>)
 80127b6:	4613      	mov	r3, r2
 80127b8:	005b      	lsls	r3, r3, #1
 80127ba:	4413      	add	r3, r2
 80127bc:	00db      	lsls	r3, r3, #3
 80127be:	440b      	add	r3, r1
 80127c0:	3312      	adds	r3, #18
 80127c2:	881b      	ldrh	r3, [r3, #0]
 80127c4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80127c6:	8c3b      	ldrh	r3, [r7, #32]
 80127c8:	3301      	adds	r3, #1
 80127ca:	b29b      	uxth	r3, r3
 80127cc:	843b      	strh	r3, [r7, #32]
 80127ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80127d2:	2b09      	cmp	r3, #9
 80127d4:	f77f af4c 	ble.w	8012670 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80127d8:	7afb      	ldrb	r3, [r7, #11]
 80127da:	f003 0302 	and.w	r3, r3, #2
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d108      	bne.n	80127f4 <etharp_find_entry+0x1b8>
 80127e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80127e6:	2b0a      	cmp	r3, #10
 80127e8:	d107      	bne.n	80127fa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80127ea:	7afb      	ldrb	r3, [r7, #11]
 80127ec:	f003 0301 	and.w	r3, r3, #1
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d102      	bne.n	80127fa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80127f4:	f04f 33ff 	mov.w	r3, #4294967295
 80127f8:	e085      	b.n	8012906 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80127fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80127fe:	2b09      	cmp	r3, #9
 8012800:	dc02      	bgt.n	8012808 <etharp_find_entry+0x1cc>
    i = empty;
 8012802:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012804:	843b      	strh	r3, [r7, #32]
 8012806:	e039      	b.n	801287c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012808:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801280c:	2b09      	cmp	r3, #9
 801280e:	dc14      	bgt.n	801283a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012812:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012814:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012818:	493d      	ldr	r1, [pc, #244]	; (8012910 <etharp_find_entry+0x2d4>)
 801281a:	4613      	mov	r3, r2
 801281c:	005b      	lsls	r3, r3, #1
 801281e:	4413      	add	r3, r2
 8012820:	00db      	lsls	r3, r3, #3
 8012822:	440b      	add	r3, r1
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d018      	beq.n	801285c <etharp_find_entry+0x220>
 801282a:	4b3a      	ldr	r3, [pc, #232]	; (8012914 <etharp_find_entry+0x2d8>)
 801282c:	f240 126d 	movw	r2, #365	; 0x16d
 8012830:	493b      	ldr	r1, [pc, #236]	; (8012920 <etharp_find_entry+0x2e4>)
 8012832:	483a      	ldr	r0, [pc, #232]	; (801291c <etharp_find_entry+0x2e0>)
 8012834:	f002 fe94 	bl	8015560 <iprintf>
 8012838:	e010      	b.n	801285c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801283a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801283e:	2b09      	cmp	r3, #9
 8012840:	dc02      	bgt.n	8012848 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012842:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012844:	843b      	strh	r3, [r7, #32]
 8012846:	e009      	b.n	801285c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012848:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801284c:	2b09      	cmp	r3, #9
 801284e:	dc02      	bgt.n	8012856 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012850:	8bfb      	ldrh	r3, [r7, #30]
 8012852:	843b      	strh	r3, [r7, #32]
 8012854:	e002      	b.n	801285c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012856:	f04f 33ff 	mov.w	r3, #4294967295
 801285a:	e054      	b.n	8012906 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801285c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012860:	2b09      	cmp	r3, #9
 8012862:	dd06      	ble.n	8012872 <etharp_find_entry+0x236>
 8012864:	4b2b      	ldr	r3, [pc, #172]	; (8012914 <etharp_find_entry+0x2d8>)
 8012866:	f240 127f 	movw	r2, #383	; 0x17f
 801286a:	492e      	ldr	r1, [pc, #184]	; (8012924 <etharp_find_entry+0x2e8>)
 801286c:	482b      	ldr	r0, [pc, #172]	; (801291c <etharp_find_entry+0x2e0>)
 801286e:	f002 fe77 	bl	8015560 <iprintf>
    etharp_free_entry(i);
 8012872:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012876:	4618      	mov	r0, r3
 8012878:	f7ff fe06 	bl	8012488 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801287c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012880:	2b09      	cmp	r3, #9
 8012882:	dd06      	ble.n	8012892 <etharp_find_entry+0x256>
 8012884:	4b23      	ldr	r3, [pc, #140]	; (8012914 <etharp_find_entry+0x2d8>)
 8012886:	f240 1283 	movw	r2, #387	; 0x183
 801288a:	4926      	ldr	r1, [pc, #152]	; (8012924 <etharp_find_entry+0x2e8>)
 801288c:	4823      	ldr	r0, [pc, #140]	; (801291c <etharp_find_entry+0x2e0>)
 801288e:	f002 fe67 	bl	8015560 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012892:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012896:	491e      	ldr	r1, [pc, #120]	; (8012910 <etharp_find_entry+0x2d4>)
 8012898:	4613      	mov	r3, r2
 801289a:	005b      	lsls	r3, r3, #1
 801289c:	4413      	add	r3, r2
 801289e:	00db      	lsls	r3, r3, #3
 80128a0:	440b      	add	r3, r1
 80128a2:	3314      	adds	r3, #20
 80128a4:	781b      	ldrb	r3, [r3, #0]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d006      	beq.n	80128b8 <etharp_find_entry+0x27c>
 80128aa:	4b1a      	ldr	r3, [pc, #104]	; (8012914 <etharp_find_entry+0x2d8>)
 80128ac:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80128b0:	491d      	ldr	r1, [pc, #116]	; (8012928 <etharp_find_entry+0x2ec>)
 80128b2:	481a      	ldr	r0, [pc, #104]	; (801291c <etharp_find_entry+0x2e0>)
 80128b4:	f002 fe54 	bl	8015560 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d00b      	beq.n	80128d6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80128be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	6819      	ldr	r1, [r3, #0]
 80128c6:	4812      	ldr	r0, [pc, #72]	; (8012910 <etharp_find_entry+0x2d4>)
 80128c8:	4613      	mov	r3, r2
 80128ca:	005b      	lsls	r3, r3, #1
 80128cc:	4413      	add	r3, r2
 80128ce:	00db      	lsls	r3, r3, #3
 80128d0:	4403      	add	r3, r0
 80128d2:	3304      	adds	r3, #4
 80128d4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80128d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80128da:	490d      	ldr	r1, [pc, #52]	; (8012910 <etharp_find_entry+0x2d4>)
 80128dc:	4613      	mov	r3, r2
 80128de:	005b      	lsls	r3, r3, #1
 80128e0:	4413      	add	r3, r2
 80128e2:	00db      	lsls	r3, r3, #3
 80128e4:	440b      	add	r3, r1
 80128e6:	3312      	adds	r3, #18
 80128e8:	2200      	movs	r2, #0
 80128ea:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80128ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80128f0:	4907      	ldr	r1, [pc, #28]	; (8012910 <etharp_find_entry+0x2d4>)
 80128f2:	4613      	mov	r3, r2
 80128f4:	005b      	lsls	r3, r3, #1
 80128f6:	4413      	add	r3, r2
 80128f8:	00db      	lsls	r3, r3, #3
 80128fa:	440b      	add	r3, r1
 80128fc:	3308      	adds	r3, #8
 80128fe:	687a      	ldr	r2, [r7, #4]
 8012900:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012902:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012906:	4618      	mov	r0, r3
 8012908:	3728      	adds	r7, #40	; 0x28
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}
 801290e:	bf00      	nop
 8012910:	20000424 	.word	0x20000424
 8012914:	0801b47c 	.word	0x0801b47c
 8012918:	0801b4b4 	.word	0x0801b4b4
 801291c:	0801b4f4 	.word	0x0801b4f4
 8012920:	0801b51c 	.word	0x0801b51c
 8012924:	0801b534 	.word	0x0801b534
 8012928:	0801b548 	.word	0x0801b548

0801292c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b088      	sub	sp, #32
 8012930:	af02      	add	r7, sp, #8
 8012932:	60f8      	str	r0, [r7, #12]
 8012934:	60b9      	str	r1, [r7, #8]
 8012936:	607a      	str	r2, [r7, #4]
 8012938:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012940:	2b06      	cmp	r3, #6
 8012942:	d006      	beq.n	8012952 <etharp_update_arp_entry+0x26>
 8012944:	4b48      	ldr	r3, [pc, #288]	; (8012a68 <etharp_update_arp_entry+0x13c>)
 8012946:	f240 12a9 	movw	r2, #425	; 0x1a9
 801294a:	4948      	ldr	r1, [pc, #288]	; (8012a6c <etharp_update_arp_entry+0x140>)
 801294c:	4848      	ldr	r0, [pc, #288]	; (8012a70 <etharp_update_arp_entry+0x144>)
 801294e:	f002 fe07 	bl	8015560 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012952:	68bb      	ldr	r3, [r7, #8]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d012      	beq.n	801297e <etharp_update_arp_entry+0x52>
 8012958:	68bb      	ldr	r3, [r7, #8]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d00e      	beq.n	801297e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012960:	68bb      	ldr	r3, [r7, #8]
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	68f9      	ldr	r1, [r7, #12]
 8012966:	4618      	mov	r0, r3
 8012968:	f001 f920 	bl	8013bac <ip4_addr_isbroadcast_u32>
 801296c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801296e:	2b00      	cmp	r3, #0
 8012970:	d105      	bne.n	801297e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012972:	68bb      	ldr	r3, [r7, #8]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801297a:	2be0      	cmp	r3, #224	; 0xe0
 801297c:	d102      	bne.n	8012984 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801297e:	f06f 030f 	mvn.w	r3, #15
 8012982:	e06c      	b.n	8012a5e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012984:	78fb      	ldrb	r3, [r7, #3]
 8012986:	68fa      	ldr	r2, [r7, #12]
 8012988:	4619      	mov	r1, r3
 801298a:	68b8      	ldr	r0, [r7, #8]
 801298c:	f7ff fe56 	bl	801263c <etharp_find_entry>
 8012990:	4603      	mov	r3, r0
 8012992:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012994:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012998:	2b00      	cmp	r3, #0
 801299a:	da02      	bge.n	80129a2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801299c:	8afb      	ldrh	r3, [r7, #22]
 801299e:	b25b      	sxtb	r3, r3
 80129a0:	e05d      	b.n	8012a5e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80129a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80129a6:	4933      	ldr	r1, [pc, #204]	; (8012a74 <etharp_update_arp_entry+0x148>)
 80129a8:	4613      	mov	r3, r2
 80129aa:	005b      	lsls	r3, r3, #1
 80129ac:	4413      	add	r3, r2
 80129ae:	00db      	lsls	r3, r3, #3
 80129b0:	440b      	add	r3, r1
 80129b2:	3314      	adds	r3, #20
 80129b4:	2202      	movs	r2, #2
 80129b6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80129b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80129bc:	492d      	ldr	r1, [pc, #180]	; (8012a74 <etharp_update_arp_entry+0x148>)
 80129be:	4613      	mov	r3, r2
 80129c0:	005b      	lsls	r3, r3, #1
 80129c2:	4413      	add	r3, r2
 80129c4:	00db      	lsls	r3, r3, #3
 80129c6:	440b      	add	r3, r1
 80129c8:	3308      	adds	r3, #8
 80129ca:	68fa      	ldr	r2, [r7, #12]
 80129cc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80129ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80129d2:	4613      	mov	r3, r2
 80129d4:	005b      	lsls	r3, r3, #1
 80129d6:	4413      	add	r3, r2
 80129d8:	00db      	lsls	r3, r3, #3
 80129da:	3308      	adds	r3, #8
 80129dc:	4a25      	ldr	r2, [pc, #148]	; (8012a74 <etharp_update_arp_entry+0x148>)
 80129de:	4413      	add	r3, r2
 80129e0:	3304      	adds	r3, #4
 80129e2:	2206      	movs	r2, #6
 80129e4:	6879      	ldr	r1, [r7, #4]
 80129e6:	4618      	mov	r0, r3
 80129e8:	f002 f876 	bl	8014ad8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80129ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80129f0:	4920      	ldr	r1, [pc, #128]	; (8012a74 <etharp_update_arp_entry+0x148>)
 80129f2:	4613      	mov	r3, r2
 80129f4:	005b      	lsls	r3, r3, #1
 80129f6:	4413      	add	r3, r2
 80129f8:	00db      	lsls	r3, r3, #3
 80129fa:	440b      	add	r3, r1
 80129fc:	3312      	adds	r3, #18
 80129fe:	2200      	movs	r2, #0
 8012a00:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012a02:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012a06:	491b      	ldr	r1, [pc, #108]	; (8012a74 <etharp_update_arp_entry+0x148>)
 8012a08:	4613      	mov	r3, r2
 8012a0a:	005b      	lsls	r3, r3, #1
 8012a0c:	4413      	add	r3, r2
 8012a0e:	00db      	lsls	r3, r3, #3
 8012a10:	440b      	add	r3, r1
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d021      	beq.n	8012a5c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012a18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012a1c:	4915      	ldr	r1, [pc, #84]	; (8012a74 <etharp_update_arp_entry+0x148>)
 8012a1e:	4613      	mov	r3, r2
 8012a20:	005b      	lsls	r3, r3, #1
 8012a22:	4413      	add	r3, r2
 8012a24:	00db      	lsls	r3, r3, #3
 8012a26:	440b      	add	r3, r1
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012a2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012a30:	4910      	ldr	r1, [pc, #64]	; (8012a74 <etharp_update_arp_entry+0x148>)
 8012a32:	4613      	mov	r3, r2
 8012a34:	005b      	lsls	r3, r3, #1
 8012a36:	4413      	add	r3, r2
 8012a38:	00db      	lsls	r3, r3, #3
 8012a3a:	440b      	add	r3, r1
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8012a46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012a4a:	9300      	str	r3, [sp, #0]
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	6939      	ldr	r1, [r7, #16]
 8012a50:	68f8      	ldr	r0, [r7, #12]
 8012a52:	f001 ffb3 	bl	80149bc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012a56:	6938      	ldr	r0, [r7, #16]
 8012a58:	f7f7 fd08 	bl	800a46c <pbuf_free>
  }
  return ERR_OK;
 8012a5c:	2300      	movs	r3, #0
}
 8012a5e:	4618      	mov	r0, r3
 8012a60:	3718      	adds	r7, #24
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bd80      	pop	{r7, pc}
 8012a66:	bf00      	nop
 8012a68:	0801b47c 	.word	0x0801b47c
 8012a6c:	0801b574 	.word	0x0801b574
 8012a70:	0801b4f4 	.word	0x0801b4f4
 8012a74:	20000424 	.word	0x20000424

08012a78 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b084      	sub	sp, #16
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a80:	2300      	movs	r3, #0
 8012a82:	60fb      	str	r3, [r7, #12]
 8012a84:	e01e      	b.n	8012ac4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012a86:	4913      	ldr	r1, [pc, #76]	; (8012ad4 <etharp_cleanup_netif+0x5c>)
 8012a88:	68fa      	ldr	r2, [r7, #12]
 8012a8a:	4613      	mov	r3, r2
 8012a8c:	005b      	lsls	r3, r3, #1
 8012a8e:	4413      	add	r3, r2
 8012a90:	00db      	lsls	r3, r3, #3
 8012a92:	440b      	add	r3, r1
 8012a94:	3314      	adds	r3, #20
 8012a96:	781b      	ldrb	r3, [r3, #0]
 8012a98:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012a9a:	7afb      	ldrb	r3, [r7, #11]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d00e      	beq.n	8012abe <etharp_cleanup_netif+0x46>
 8012aa0:	490c      	ldr	r1, [pc, #48]	; (8012ad4 <etharp_cleanup_netif+0x5c>)
 8012aa2:	68fa      	ldr	r2, [r7, #12]
 8012aa4:	4613      	mov	r3, r2
 8012aa6:	005b      	lsls	r3, r3, #1
 8012aa8:	4413      	add	r3, r2
 8012aaa:	00db      	lsls	r3, r3, #3
 8012aac:	440b      	add	r3, r1
 8012aae:	3308      	adds	r3, #8
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	687a      	ldr	r2, [r7, #4]
 8012ab4:	429a      	cmp	r2, r3
 8012ab6:	d102      	bne.n	8012abe <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012ab8:	68f8      	ldr	r0, [r7, #12]
 8012aba:	f7ff fce5 	bl	8012488 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	3301      	adds	r3, #1
 8012ac2:	60fb      	str	r3, [r7, #12]
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	2b09      	cmp	r3, #9
 8012ac8:	dddd      	ble.n	8012a86 <etharp_cleanup_netif+0xe>
    }
  }
}
 8012aca:	bf00      	nop
 8012acc:	bf00      	nop
 8012ace:	3710      	adds	r7, #16
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}
 8012ad4:	20000424 	.word	0x20000424

08012ad8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012ad8:	b5b0      	push	{r4, r5, r7, lr}
 8012ada:	b08a      	sub	sp, #40	; 0x28
 8012adc:	af04      	add	r7, sp, #16
 8012ade:	6078      	str	r0, [r7, #4]
 8012ae0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012ae2:	683b      	ldr	r3, [r7, #0]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d107      	bne.n	8012af8 <etharp_input+0x20>
 8012ae8:	4b3f      	ldr	r3, [pc, #252]	; (8012be8 <etharp_input+0x110>)
 8012aea:	f240 228a 	movw	r2, #650	; 0x28a
 8012aee:	493f      	ldr	r1, [pc, #252]	; (8012bec <etharp_input+0x114>)
 8012af0:	483f      	ldr	r0, [pc, #252]	; (8012bf0 <etharp_input+0x118>)
 8012af2:	f002 fd35 	bl	8015560 <iprintf>
 8012af6:	e074      	b.n	8012be2 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	685b      	ldr	r3, [r3, #4]
 8012afc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012afe:	693b      	ldr	r3, [r7, #16]
 8012b00:	881b      	ldrh	r3, [r3, #0]
 8012b02:	b29b      	uxth	r3, r3
 8012b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b08:	d10c      	bne.n	8012b24 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012b0a:	693b      	ldr	r3, [r7, #16]
 8012b0c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012b0e:	2b06      	cmp	r3, #6
 8012b10:	d108      	bne.n	8012b24 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012b12:	693b      	ldr	r3, [r7, #16]
 8012b14:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012b16:	2b04      	cmp	r3, #4
 8012b18:	d104      	bne.n	8012b24 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012b1a:	693b      	ldr	r3, [r7, #16]
 8012b1c:	885b      	ldrh	r3, [r3, #2]
 8012b1e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012b20:	2b08      	cmp	r3, #8
 8012b22:	d003      	beq.n	8012b2c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012b24:	6878      	ldr	r0, [r7, #4]
 8012b26:	f7f7 fca1 	bl	800a46c <pbuf_free>
    return;
 8012b2a:	e05a      	b.n	8012be2 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012b2c:	693b      	ldr	r3, [r7, #16]
 8012b2e:	330e      	adds	r3, #14
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012b34:	693b      	ldr	r3, [r7, #16]
 8012b36:	3318      	adds	r3, #24
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	3304      	adds	r3, #4
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d102      	bne.n	8012b4c <etharp_input+0x74>
    for_us = 0;
 8012b46:	2300      	movs	r3, #0
 8012b48:	75fb      	strb	r3, [r7, #23]
 8012b4a:	e009      	b.n	8012b60 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012b4c:	68ba      	ldr	r2, [r7, #8]
 8012b4e:	683b      	ldr	r3, [r7, #0]
 8012b50:	3304      	adds	r3, #4
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	429a      	cmp	r2, r3
 8012b56:	bf0c      	ite	eq
 8012b58:	2301      	moveq	r3, #1
 8012b5a:	2300      	movne	r3, #0
 8012b5c:	b2db      	uxtb	r3, r3
 8012b5e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012b60:	693b      	ldr	r3, [r7, #16]
 8012b62:	f103 0208 	add.w	r2, r3, #8
 8012b66:	7dfb      	ldrb	r3, [r7, #23]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d001      	beq.n	8012b70 <etharp_input+0x98>
 8012b6c:	2301      	movs	r3, #1
 8012b6e:	e000      	b.n	8012b72 <etharp_input+0x9a>
 8012b70:	2302      	movs	r3, #2
 8012b72:	f107 010c 	add.w	r1, r7, #12
 8012b76:	6838      	ldr	r0, [r7, #0]
 8012b78:	f7ff fed8 	bl	801292c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012b7c:	693b      	ldr	r3, [r7, #16]
 8012b7e:	88db      	ldrh	r3, [r3, #6]
 8012b80:	b29b      	uxth	r3, r3
 8012b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b86:	d003      	beq.n	8012b90 <etharp_input+0xb8>
 8012b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b8c:	d01e      	beq.n	8012bcc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012b8e:	e025      	b.n	8012bdc <etharp_input+0x104>
      if (for_us) {
 8012b90:	7dfb      	ldrb	r3, [r7, #23]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d021      	beq.n	8012bda <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012b96:	683b      	ldr	r3, [r7, #0]
 8012b98:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8012b9c:	693b      	ldr	r3, [r7, #16]
 8012b9e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8012ba8:	683b      	ldr	r3, [r7, #0]
 8012baa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012bac:	693a      	ldr	r2, [r7, #16]
 8012bae:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012bb0:	2102      	movs	r1, #2
 8012bb2:	9103      	str	r1, [sp, #12]
 8012bb4:	f107 010c 	add.w	r1, r7, #12
 8012bb8:	9102      	str	r1, [sp, #8]
 8012bba:	9201      	str	r2, [sp, #4]
 8012bbc:	9300      	str	r3, [sp, #0]
 8012bbe:	462b      	mov	r3, r5
 8012bc0:	4622      	mov	r2, r4
 8012bc2:	4601      	mov	r1, r0
 8012bc4:	6838      	ldr	r0, [r7, #0]
 8012bc6:	f000 faef 	bl	80131a8 <etharp_raw>
      break;
 8012bca:	e006      	b.n	8012bda <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8012bcc:	f107 030c 	add.w	r3, r7, #12
 8012bd0:	4619      	mov	r1, r3
 8012bd2:	6838      	ldr	r0, [r7, #0]
 8012bd4:	f7fe f9fc 	bl	8010fd0 <dhcp_arp_reply>
      break;
 8012bd8:	e000      	b.n	8012bdc <etharp_input+0x104>
      break;
 8012bda:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012bdc:	6878      	ldr	r0, [r7, #4]
 8012bde:	f7f7 fc45 	bl	800a46c <pbuf_free>
}
 8012be2:	3718      	adds	r7, #24
 8012be4:	46bd      	mov	sp, r7
 8012be6:	bdb0      	pop	{r4, r5, r7, pc}
 8012be8:	0801b47c 	.word	0x0801b47c
 8012bec:	0801b5cc 	.word	0x0801b5cc
 8012bf0:	0801b4f4 	.word	0x0801b4f4

08012bf4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b086      	sub	sp, #24
 8012bf8:	af02      	add	r7, sp, #8
 8012bfa:	60f8      	str	r0, [r7, #12]
 8012bfc:	60b9      	str	r1, [r7, #8]
 8012bfe:	4613      	mov	r3, r2
 8012c00:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012c02:	79fa      	ldrb	r2, [r7, #7]
 8012c04:	4944      	ldr	r1, [pc, #272]	; (8012d18 <etharp_output_to_arp_index+0x124>)
 8012c06:	4613      	mov	r3, r2
 8012c08:	005b      	lsls	r3, r3, #1
 8012c0a:	4413      	add	r3, r2
 8012c0c:	00db      	lsls	r3, r3, #3
 8012c0e:	440b      	add	r3, r1
 8012c10:	3314      	adds	r3, #20
 8012c12:	781b      	ldrb	r3, [r3, #0]
 8012c14:	2b01      	cmp	r3, #1
 8012c16:	d806      	bhi.n	8012c26 <etharp_output_to_arp_index+0x32>
 8012c18:	4b40      	ldr	r3, [pc, #256]	; (8012d1c <etharp_output_to_arp_index+0x128>)
 8012c1a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012c1e:	4940      	ldr	r1, [pc, #256]	; (8012d20 <etharp_output_to_arp_index+0x12c>)
 8012c20:	4840      	ldr	r0, [pc, #256]	; (8012d24 <etharp_output_to_arp_index+0x130>)
 8012c22:	f002 fc9d 	bl	8015560 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012c26:	79fa      	ldrb	r2, [r7, #7]
 8012c28:	493b      	ldr	r1, [pc, #236]	; (8012d18 <etharp_output_to_arp_index+0x124>)
 8012c2a:	4613      	mov	r3, r2
 8012c2c:	005b      	lsls	r3, r3, #1
 8012c2e:	4413      	add	r3, r2
 8012c30:	00db      	lsls	r3, r3, #3
 8012c32:	440b      	add	r3, r1
 8012c34:	3314      	adds	r3, #20
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	2b02      	cmp	r3, #2
 8012c3a:	d153      	bne.n	8012ce4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012c3c:	79fa      	ldrb	r2, [r7, #7]
 8012c3e:	4936      	ldr	r1, [pc, #216]	; (8012d18 <etharp_output_to_arp_index+0x124>)
 8012c40:	4613      	mov	r3, r2
 8012c42:	005b      	lsls	r3, r3, #1
 8012c44:	4413      	add	r3, r2
 8012c46:	00db      	lsls	r3, r3, #3
 8012c48:	440b      	add	r3, r1
 8012c4a:	3312      	adds	r3, #18
 8012c4c:	881b      	ldrh	r3, [r3, #0]
 8012c4e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012c52:	d919      	bls.n	8012c88 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012c54:	79fa      	ldrb	r2, [r7, #7]
 8012c56:	4613      	mov	r3, r2
 8012c58:	005b      	lsls	r3, r3, #1
 8012c5a:	4413      	add	r3, r2
 8012c5c:	00db      	lsls	r3, r3, #3
 8012c5e:	4a2e      	ldr	r2, [pc, #184]	; (8012d18 <etharp_output_to_arp_index+0x124>)
 8012c60:	4413      	add	r3, r2
 8012c62:	3304      	adds	r3, #4
 8012c64:	4619      	mov	r1, r3
 8012c66:	68f8      	ldr	r0, [r7, #12]
 8012c68:	f000 fb4c 	bl	8013304 <etharp_request>
 8012c6c:	4603      	mov	r3, r0
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d138      	bne.n	8012ce4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012c72:	79fa      	ldrb	r2, [r7, #7]
 8012c74:	4928      	ldr	r1, [pc, #160]	; (8012d18 <etharp_output_to_arp_index+0x124>)
 8012c76:	4613      	mov	r3, r2
 8012c78:	005b      	lsls	r3, r3, #1
 8012c7a:	4413      	add	r3, r2
 8012c7c:	00db      	lsls	r3, r3, #3
 8012c7e:	440b      	add	r3, r1
 8012c80:	3314      	adds	r3, #20
 8012c82:	2203      	movs	r2, #3
 8012c84:	701a      	strb	r2, [r3, #0]
 8012c86:	e02d      	b.n	8012ce4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012c88:	79fa      	ldrb	r2, [r7, #7]
 8012c8a:	4923      	ldr	r1, [pc, #140]	; (8012d18 <etharp_output_to_arp_index+0x124>)
 8012c8c:	4613      	mov	r3, r2
 8012c8e:	005b      	lsls	r3, r3, #1
 8012c90:	4413      	add	r3, r2
 8012c92:	00db      	lsls	r3, r3, #3
 8012c94:	440b      	add	r3, r1
 8012c96:	3312      	adds	r3, #18
 8012c98:	881b      	ldrh	r3, [r3, #0]
 8012c9a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012c9e:	d321      	bcc.n	8012ce4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012ca0:	79fa      	ldrb	r2, [r7, #7]
 8012ca2:	4613      	mov	r3, r2
 8012ca4:	005b      	lsls	r3, r3, #1
 8012ca6:	4413      	add	r3, r2
 8012ca8:	00db      	lsls	r3, r3, #3
 8012caa:	4a1b      	ldr	r2, [pc, #108]	; (8012d18 <etharp_output_to_arp_index+0x124>)
 8012cac:	4413      	add	r3, r2
 8012cae:	1d19      	adds	r1, r3, #4
 8012cb0:	79fa      	ldrb	r2, [r7, #7]
 8012cb2:	4613      	mov	r3, r2
 8012cb4:	005b      	lsls	r3, r3, #1
 8012cb6:	4413      	add	r3, r2
 8012cb8:	00db      	lsls	r3, r3, #3
 8012cba:	3308      	adds	r3, #8
 8012cbc:	4a16      	ldr	r2, [pc, #88]	; (8012d18 <etharp_output_to_arp_index+0x124>)
 8012cbe:	4413      	add	r3, r2
 8012cc0:	3304      	adds	r3, #4
 8012cc2:	461a      	mov	r2, r3
 8012cc4:	68f8      	ldr	r0, [r7, #12]
 8012cc6:	f000 fafb 	bl	80132c0 <etharp_request_dst>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d109      	bne.n	8012ce4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012cd0:	79fa      	ldrb	r2, [r7, #7]
 8012cd2:	4911      	ldr	r1, [pc, #68]	; (8012d18 <etharp_output_to_arp_index+0x124>)
 8012cd4:	4613      	mov	r3, r2
 8012cd6:	005b      	lsls	r3, r3, #1
 8012cd8:	4413      	add	r3, r2
 8012cda:	00db      	lsls	r3, r3, #3
 8012cdc:	440b      	add	r3, r1
 8012cde:	3314      	adds	r3, #20
 8012ce0:	2203      	movs	r2, #3
 8012ce2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8012cea:	79fa      	ldrb	r2, [r7, #7]
 8012cec:	4613      	mov	r3, r2
 8012cee:	005b      	lsls	r3, r3, #1
 8012cf0:	4413      	add	r3, r2
 8012cf2:	00db      	lsls	r3, r3, #3
 8012cf4:	3308      	adds	r3, #8
 8012cf6:	4a08      	ldr	r2, [pc, #32]	; (8012d18 <etharp_output_to_arp_index+0x124>)
 8012cf8:	4413      	add	r3, r2
 8012cfa:	3304      	adds	r3, #4
 8012cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012d00:	9200      	str	r2, [sp, #0]
 8012d02:	460a      	mov	r2, r1
 8012d04:	68b9      	ldr	r1, [r7, #8]
 8012d06:	68f8      	ldr	r0, [r7, #12]
 8012d08:	f001 fe58 	bl	80149bc <ethernet_output>
 8012d0c:	4603      	mov	r3, r0
}
 8012d0e:	4618      	mov	r0, r3
 8012d10:	3710      	adds	r7, #16
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd80      	pop	{r7, pc}
 8012d16:	bf00      	nop
 8012d18:	20000424 	.word	0x20000424
 8012d1c:	0801b47c 	.word	0x0801b47c
 8012d20:	0801b5ec 	.word	0x0801b5ec
 8012d24:	0801b4f4 	.word	0x0801b4f4

08012d28 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b08a      	sub	sp, #40	; 0x28
 8012d2c:	af02      	add	r7, sp, #8
 8012d2e:	60f8      	str	r0, [r7, #12]
 8012d30:	60b9      	str	r1, [r7, #8]
 8012d32:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d106      	bne.n	8012d4c <etharp_output+0x24>
 8012d3e:	4b73      	ldr	r3, [pc, #460]	; (8012f0c <etharp_output+0x1e4>)
 8012d40:	f240 321e 	movw	r2, #798	; 0x31e
 8012d44:	4972      	ldr	r1, [pc, #456]	; (8012f10 <etharp_output+0x1e8>)
 8012d46:	4873      	ldr	r0, [pc, #460]	; (8012f14 <etharp_output+0x1ec>)
 8012d48:	f002 fc0a 	bl	8015560 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012d4c:	68bb      	ldr	r3, [r7, #8]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d106      	bne.n	8012d60 <etharp_output+0x38>
 8012d52:	4b6e      	ldr	r3, [pc, #440]	; (8012f0c <etharp_output+0x1e4>)
 8012d54:	f240 321f 	movw	r2, #799	; 0x31f
 8012d58:	496f      	ldr	r1, [pc, #444]	; (8012f18 <etharp_output+0x1f0>)
 8012d5a:	486e      	ldr	r0, [pc, #440]	; (8012f14 <etharp_output+0x1ec>)
 8012d5c:	f002 fc00 	bl	8015560 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d106      	bne.n	8012d74 <etharp_output+0x4c>
 8012d66:	4b69      	ldr	r3, [pc, #420]	; (8012f0c <etharp_output+0x1e4>)
 8012d68:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012d6c:	496b      	ldr	r1, [pc, #428]	; (8012f1c <etharp_output+0x1f4>)
 8012d6e:	4869      	ldr	r0, [pc, #420]	; (8012f14 <etharp_output+0x1ec>)
 8012d70:	f002 fbf6 	bl	8015560 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	68f9      	ldr	r1, [r7, #12]
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f000 ff16 	bl	8013bac <ip4_addr_isbroadcast_u32>
 8012d80:	4603      	mov	r3, r0
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d002      	beq.n	8012d8c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012d86:	4b66      	ldr	r3, [pc, #408]	; (8012f20 <etharp_output+0x1f8>)
 8012d88:	61fb      	str	r3, [r7, #28]
 8012d8a:	e0af      	b.n	8012eec <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012d94:	2be0      	cmp	r3, #224	; 0xe0
 8012d96:	d118      	bne.n	8012dca <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012d98:	2301      	movs	r3, #1
 8012d9a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012da0:	235e      	movs	r3, #94	; 0x5e
 8012da2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	3301      	adds	r3, #1
 8012da8:	781b      	ldrb	r3, [r3, #0]
 8012daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012dae:	b2db      	uxtb	r3, r3
 8012db0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	3302      	adds	r3, #2
 8012db6:	781b      	ldrb	r3, [r3, #0]
 8012db8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	3303      	adds	r3, #3
 8012dbe:	781b      	ldrb	r3, [r3, #0]
 8012dc0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012dc2:	f107 0310 	add.w	r3, r7, #16
 8012dc6:	61fb      	str	r3, [r7, #28]
 8012dc8:	e090      	b.n	8012eec <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	681a      	ldr	r2, [r3, #0]
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	3304      	adds	r3, #4
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	405a      	eors	r2, r3
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	3308      	adds	r3, #8
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	4013      	ands	r3, r2
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d012      	beq.n	8012e08 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012de8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012dec:	4293      	cmp	r3, r2
 8012dee:	d00b      	beq.n	8012e08 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	330c      	adds	r3, #12
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d003      	beq.n	8012e02 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	330c      	adds	r3, #12
 8012dfe:	61bb      	str	r3, [r7, #24]
 8012e00:	e002      	b.n	8012e08 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012e02:	f06f 0303 	mvn.w	r3, #3
 8012e06:	e07d      	b.n	8012f04 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012e08:	4b46      	ldr	r3, [pc, #280]	; (8012f24 <etharp_output+0x1fc>)
 8012e0a:	781b      	ldrb	r3, [r3, #0]
 8012e0c:	4619      	mov	r1, r3
 8012e0e:	4a46      	ldr	r2, [pc, #280]	; (8012f28 <etharp_output+0x200>)
 8012e10:	460b      	mov	r3, r1
 8012e12:	005b      	lsls	r3, r3, #1
 8012e14:	440b      	add	r3, r1
 8012e16:	00db      	lsls	r3, r3, #3
 8012e18:	4413      	add	r3, r2
 8012e1a:	3314      	adds	r3, #20
 8012e1c:	781b      	ldrb	r3, [r3, #0]
 8012e1e:	2b01      	cmp	r3, #1
 8012e20:	d925      	bls.n	8012e6e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012e22:	4b40      	ldr	r3, [pc, #256]	; (8012f24 <etharp_output+0x1fc>)
 8012e24:	781b      	ldrb	r3, [r3, #0]
 8012e26:	4619      	mov	r1, r3
 8012e28:	4a3f      	ldr	r2, [pc, #252]	; (8012f28 <etharp_output+0x200>)
 8012e2a:	460b      	mov	r3, r1
 8012e2c:	005b      	lsls	r3, r3, #1
 8012e2e:	440b      	add	r3, r1
 8012e30:	00db      	lsls	r3, r3, #3
 8012e32:	4413      	add	r3, r2
 8012e34:	3308      	adds	r3, #8
 8012e36:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012e38:	68fa      	ldr	r2, [r7, #12]
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d117      	bne.n	8012e6e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012e3e:	69bb      	ldr	r3, [r7, #24]
 8012e40:	681a      	ldr	r2, [r3, #0]
 8012e42:	4b38      	ldr	r3, [pc, #224]	; (8012f24 <etharp_output+0x1fc>)
 8012e44:	781b      	ldrb	r3, [r3, #0]
 8012e46:	4618      	mov	r0, r3
 8012e48:	4937      	ldr	r1, [pc, #220]	; (8012f28 <etharp_output+0x200>)
 8012e4a:	4603      	mov	r3, r0
 8012e4c:	005b      	lsls	r3, r3, #1
 8012e4e:	4403      	add	r3, r0
 8012e50:	00db      	lsls	r3, r3, #3
 8012e52:	440b      	add	r3, r1
 8012e54:	3304      	adds	r3, #4
 8012e56:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012e58:	429a      	cmp	r2, r3
 8012e5a:	d108      	bne.n	8012e6e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012e5c:	4b31      	ldr	r3, [pc, #196]	; (8012f24 <etharp_output+0x1fc>)
 8012e5e:	781b      	ldrb	r3, [r3, #0]
 8012e60:	461a      	mov	r2, r3
 8012e62:	68b9      	ldr	r1, [r7, #8]
 8012e64:	68f8      	ldr	r0, [r7, #12]
 8012e66:	f7ff fec5 	bl	8012bf4 <etharp_output_to_arp_index>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	e04a      	b.n	8012f04 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012e6e:	2300      	movs	r3, #0
 8012e70:	75fb      	strb	r3, [r7, #23]
 8012e72:	e031      	b.n	8012ed8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012e74:	7dfa      	ldrb	r2, [r7, #23]
 8012e76:	492c      	ldr	r1, [pc, #176]	; (8012f28 <etharp_output+0x200>)
 8012e78:	4613      	mov	r3, r2
 8012e7a:	005b      	lsls	r3, r3, #1
 8012e7c:	4413      	add	r3, r2
 8012e7e:	00db      	lsls	r3, r3, #3
 8012e80:	440b      	add	r3, r1
 8012e82:	3314      	adds	r3, #20
 8012e84:	781b      	ldrb	r3, [r3, #0]
 8012e86:	2b01      	cmp	r3, #1
 8012e88:	d923      	bls.n	8012ed2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012e8a:	7dfa      	ldrb	r2, [r7, #23]
 8012e8c:	4926      	ldr	r1, [pc, #152]	; (8012f28 <etharp_output+0x200>)
 8012e8e:	4613      	mov	r3, r2
 8012e90:	005b      	lsls	r3, r3, #1
 8012e92:	4413      	add	r3, r2
 8012e94:	00db      	lsls	r3, r3, #3
 8012e96:	440b      	add	r3, r1
 8012e98:	3308      	adds	r3, #8
 8012e9a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012e9c:	68fa      	ldr	r2, [r7, #12]
 8012e9e:	429a      	cmp	r2, r3
 8012ea0:	d117      	bne.n	8012ed2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012ea2:	69bb      	ldr	r3, [r7, #24]
 8012ea4:	6819      	ldr	r1, [r3, #0]
 8012ea6:	7dfa      	ldrb	r2, [r7, #23]
 8012ea8:	481f      	ldr	r0, [pc, #124]	; (8012f28 <etharp_output+0x200>)
 8012eaa:	4613      	mov	r3, r2
 8012eac:	005b      	lsls	r3, r3, #1
 8012eae:	4413      	add	r3, r2
 8012eb0:	00db      	lsls	r3, r3, #3
 8012eb2:	4403      	add	r3, r0
 8012eb4:	3304      	adds	r3, #4
 8012eb6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012eb8:	4299      	cmp	r1, r3
 8012eba:	d10a      	bne.n	8012ed2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012ebc:	4a19      	ldr	r2, [pc, #100]	; (8012f24 <etharp_output+0x1fc>)
 8012ebe:	7dfb      	ldrb	r3, [r7, #23]
 8012ec0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012ec2:	7dfb      	ldrb	r3, [r7, #23]
 8012ec4:	461a      	mov	r2, r3
 8012ec6:	68b9      	ldr	r1, [r7, #8]
 8012ec8:	68f8      	ldr	r0, [r7, #12]
 8012eca:	f7ff fe93 	bl	8012bf4 <etharp_output_to_arp_index>
 8012ece:	4603      	mov	r3, r0
 8012ed0:	e018      	b.n	8012f04 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012ed2:	7dfb      	ldrb	r3, [r7, #23]
 8012ed4:	3301      	adds	r3, #1
 8012ed6:	75fb      	strb	r3, [r7, #23]
 8012ed8:	7dfb      	ldrb	r3, [r7, #23]
 8012eda:	2b09      	cmp	r3, #9
 8012edc:	d9ca      	bls.n	8012e74 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012ede:	68ba      	ldr	r2, [r7, #8]
 8012ee0:	69b9      	ldr	r1, [r7, #24]
 8012ee2:	68f8      	ldr	r0, [r7, #12]
 8012ee4:	f000 f822 	bl	8012f2c <etharp_query>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	e00b      	b.n	8012f04 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8012ef2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012ef6:	9300      	str	r3, [sp, #0]
 8012ef8:	69fb      	ldr	r3, [r7, #28]
 8012efa:	68b9      	ldr	r1, [r7, #8]
 8012efc:	68f8      	ldr	r0, [r7, #12]
 8012efe:	f001 fd5d 	bl	80149bc <ethernet_output>
 8012f02:	4603      	mov	r3, r0
}
 8012f04:	4618      	mov	r0, r3
 8012f06:	3720      	adds	r7, #32
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	bd80      	pop	{r7, pc}
 8012f0c:	0801b47c 	.word	0x0801b47c
 8012f10:	0801b5cc 	.word	0x0801b5cc
 8012f14:	0801b4f4 	.word	0x0801b4f4
 8012f18:	0801b61c 	.word	0x0801b61c
 8012f1c:	0801b5bc 	.word	0x0801b5bc
 8012f20:	0801bc48 	.word	0x0801bc48
 8012f24:	20000514 	.word	0x20000514
 8012f28:	20000424 	.word	0x20000424

08012f2c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b08c      	sub	sp, #48	; 0x30
 8012f30:	af02      	add	r7, sp, #8
 8012f32:	60f8      	str	r0, [r7, #12]
 8012f34:	60b9      	str	r1, [r7, #8]
 8012f36:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	332a      	adds	r3, #42	; 0x2a
 8012f3c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012f3e:	23ff      	movs	r3, #255	; 0xff
 8012f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012f44:	2300      	movs	r3, #0
 8012f46:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012f48:	68bb      	ldr	r3, [r7, #8]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	68f9      	ldr	r1, [r7, #12]
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f000 fe2c 	bl	8013bac <ip4_addr_isbroadcast_u32>
 8012f54:	4603      	mov	r3, r0
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d10c      	bne.n	8012f74 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012f5a:	68bb      	ldr	r3, [r7, #8]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012f62:	2be0      	cmp	r3, #224	; 0xe0
 8012f64:	d006      	beq.n	8012f74 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d003      	beq.n	8012f74 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012f6c:	68bb      	ldr	r3, [r7, #8]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d102      	bne.n	8012f7a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012f74:	f06f 030f 	mvn.w	r3, #15
 8012f78:	e101      	b.n	801317e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012f7a:	68fa      	ldr	r2, [r7, #12]
 8012f7c:	2101      	movs	r1, #1
 8012f7e:	68b8      	ldr	r0, [r7, #8]
 8012f80:	f7ff fb5c 	bl	801263c <etharp_find_entry>
 8012f84:	4603      	mov	r3, r0
 8012f86:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012f88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	da02      	bge.n	8012f96 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012f90:	8a7b      	ldrh	r3, [r7, #18]
 8012f92:	b25b      	sxtb	r3, r3
 8012f94:	e0f3      	b.n	801317e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012f96:	8a7b      	ldrh	r3, [r7, #18]
 8012f98:	2b7e      	cmp	r3, #126	; 0x7e
 8012f9a:	d906      	bls.n	8012faa <etharp_query+0x7e>
 8012f9c:	4b7a      	ldr	r3, [pc, #488]	; (8013188 <etharp_query+0x25c>)
 8012f9e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012fa2:	497a      	ldr	r1, [pc, #488]	; (801318c <etharp_query+0x260>)
 8012fa4:	487a      	ldr	r0, [pc, #488]	; (8013190 <etharp_query+0x264>)
 8012fa6:	f002 fadb 	bl	8015560 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012faa:	8a7b      	ldrh	r3, [r7, #18]
 8012fac:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012fae:	7c7a      	ldrb	r2, [r7, #17]
 8012fb0:	4978      	ldr	r1, [pc, #480]	; (8013194 <etharp_query+0x268>)
 8012fb2:	4613      	mov	r3, r2
 8012fb4:	005b      	lsls	r3, r3, #1
 8012fb6:	4413      	add	r3, r2
 8012fb8:	00db      	lsls	r3, r3, #3
 8012fba:	440b      	add	r3, r1
 8012fbc:	3314      	adds	r3, #20
 8012fbe:	781b      	ldrb	r3, [r3, #0]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d115      	bne.n	8012ff0 <etharp_query+0xc4>
    is_new_entry = 1;
 8012fc4:	2301      	movs	r3, #1
 8012fc6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012fc8:	7c7a      	ldrb	r2, [r7, #17]
 8012fca:	4972      	ldr	r1, [pc, #456]	; (8013194 <etharp_query+0x268>)
 8012fcc:	4613      	mov	r3, r2
 8012fce:	005b      	lsls	r3, r3, #1
 8012fd0:	4413      	add	r3, r2
 8012fd2:	00db      	lsls	r3, r3, #3
 8012fd4:	440b      	add	r3, r1
 8012fd6:	3314      	adds	r3, #20
 8012fd8:	2201      	movs	r2, #1
 8012fda:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012fdc:	7c7a      	ldrb	r2, [r7, #17]
 8012fde:	496d      	ldr	r1, [pc, #436]	; (8013194 <etharp_query+0x268>)
 8012fe0:	4613      	mov	r3, r2
 8012fe2:	005b      	lsls	r3, r3, #1
 8012fe4:	4413      	add	r3, r2
 8012fe6:	00db      	lsls	r3, r3, #3
 8012fe8:	440b      	add	r3, r1
 8012fea:	3308      	adds	r3, #8
 8012fec:	68fa      	ldr	r2, [r7, #12]
 8012fee:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012ff0:	7c7a      	ldrb	r2, [r7, #17]
 8012ff2:	4968      	ldr	r1, [pc, #416]	; (8013194 <etharp_query+0x268>)
 8012ff4:	4613      	mov	r3, r2
 8012ff6:	005b      	lsls	r3, r3, #1
 8012ff8:	4413      	add	r3, r2
 8012ffa:	00db      	lsls	r3, r3, #3
 8012ffc:	440b      	add	r3, r1
 8012ffe:	3314      	adds	r3, #20
 8013000:	781b      	ldrb	r3, [r3, #0]
 8013002:	2b01      	cmp	r3, #1
 8013004:	d011      	beq.n	801302a <etharp_query+0xfe>
 8013006:	7c7a      	ldrb	r2, [r7, #17]
 8013008:	4962      	ldr	r1, [pc, #392]	; (8013194 <etharp_query+0x268>)
 801300a:	4613      	mov	r3, r2
 801300c:	005b      	lsls	r3, r3, #1
 801300e:	4413      	add	r3, r2
 8013010:	00db      	lsls	r3, r3, #3
 8013012:	440b      	add	r3, r1
 8013014:	3314      	adds	r3, #20
 8013016:	781b      	ldrb	r3, [r3, #0]
 8013018:	2b01      	cmp	r3, #1
 801301a:	d806      	bhi.n	801302a <etharp_query+0xfe>
 801301c:	4b5a      	ldr	r3, [pc, #360]	; (8013188 <etharp_query+0x25c>)
 801301e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8013022:	495d      	ldr	r1, [pc, #372]	; (8013198 <etharp_query+0x26c>)
 8013024:	485a      	ldr	r0, [pc, #360]	; (8013190 <etharp_query+0x264>)
 8013026:	f002 fa9b 	bl	8015560 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801302a:	6a3b      	ldr	r3, [r7, #32]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d102      	bne.n	8013036 <etharp_query+0x10a>
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d10c      	bne.n	8013050 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8013036:	68b9      	ldr	r1, [r7, #8]
 8013038:	68f8      	ldr	r0, [r7, #12]
 801303a:	f000 f963 	bl	8013304 <etharp_request>
 801303e:	4603      	mov	r3, r0
 8013040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d102      	bne.n	8013050 <etharp_query+0x124>
      return result;
 801304a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801304e:	e096      	b.n	801317e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d106      	bne.n	8013064 <etharp_query+0x138>
 8013056:	4b4c      	ldr	r3, [pc, #304]	; (8013188 <etharp_query+0x25c>)
 8013058:	f240 32e1 	movw	r2, #993	; 0x3e1
 801305c:	494f      	ldr	r1, [pc, #316]	; (801319c <etharp_query+0x270>)
 801305e:	484c      	ldr	r0, [pc, #304]	; (8013190 <etharp_query+0x264>)
 8013060:	f002 fa7e 	bl	8015560 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013064:	7c7a      	ldrb	r2, [r7, #17]
 8013066:	494b      	ldr	r1, [pc, #300]	; (8013194 <etharp_query+0x268>)
 8013068:	4613      	mov	r3, r2
 801306a:	005b      	lsls	r3, r3, #1
 801306c:	4413      	add	r3, r2
 801306e:	00db      	lsls	r3, r3, #3
 8013070:	440b      	add	r3, r1
 8013072:	3314      	adds	r3, #20
 8013074:	781b      	ldrb	r3, [r3, #0]
 8013076:	2b01      	cmp	r3, #1
 8013078:	d917      	bls.n	80130aa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801307a:	4a49      	ldr	r2, [pc, #292]	; (80131a0 <etharp_query+0x274>)
 801307c:	7c7b      	ldrb	r3, [r7, #17]
 801307e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013080:	7c7a      	ldrb	r2, [r7, #17]
 8013082:	4613      	mov	r3, r2
 8013084:	005b      	lsls	r3, r3, #1
 8013086:	4413      	add	r3, r2
 8013088:	00db      	lsls	r3, r3, #3
 801308a:	3308      	adds	r3, #8
 801308c:	4a41      	ldr	r2, [pc, #260]	; (8013194 <etharp_query+0x268>)
 801308e:	4413      	add	r3, r2
 8013090:	3304      	adds	r3, #4
 8013092:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013096:	9200      	str	r2, [sp, #0]
 8013098:	697a      	ldr	r2, [r7, #20]
 801309a:	6879      	ldr	r1, [r7, #4]
 801309c:	68f8      	ldr	r0, [r7, #12]
 801309e:	f001 fc8d 	bl	80149bc <ethernet_output>
 80130a2:	4603      	mov	r3, r0
 80130a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80130a8:	e067      	b.n	801317a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80130aa:	7c7a      	ldrb	r2, [r7, #17]
 80130ac:	4939      	ldr	r1, [pc, #228]	; (8013194 <etharp_query+0x268>)
 80130ae:	4613      	mov	r3, r2
 80130b0:	005b      	lsls	r3, r3, #1
 80130b2:	4413      	add	r3, r2
 80130b4:	00db      	lsls	r3, r3, #3
 80130b6:	440b      	add	r3, r1
 80130b8:	3314      	adds	r3, #20
 80130ba:	781b      	ldrb	r3, [r3, #0]
 80130bc:	2b01      	cmp	r3, #1
 80130be:	d15c      	bne.n	801317a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80130c0:	2300      	movs	r3, #0
 80130c2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80130c8:	e01c      	b.n	8013104 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80130ca:	69fb      	ldr	r3, [r7, #28]
 80130cc:	895a      	ldrh	r2, [r3, #10]
 80130ce:	69fb      	ldr	r3, [r7, #28]
 80130d0:	891b      	ldrh	r3, [r3, #8]
 80130d2:	429a      	cmp	r2, r3
 80130d4:	d10a      	bne.n	80130ec <etharp_query+0x1c0>
 80130d6:	69fb      	ldr	r3, [r7, #28]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d006      	beq.n	80130ec <etharp_query+0x1c0>
 80130de:	4b2a      	ldr	r3, [pc, #168]	; (8013188 <etharp_query+0x25c>)
 80130e0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80130e4:	492f      	ldr	r1, [pc, #188]	; (80131a4 <etharp_query+0x278>)
 80130e6:	482a      	ldr	r0, [pc, #168]	; (8013190 <etharp_query+0x264>)
 80130e8:	f002 fa3a 	bl	8015560 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80130ec:	69fb      	ldr	r3, [r7, #28]
 80130ee:	7b1b      	ldrb	r3, [r3, #12]
 80130f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d002      	beq.n	80130fe <etharp_query+0x1d2>
        copy_needed = 1;
 80130f8:	2301      	movs	r3, #1
 80130fa:	61bb      	str	r3, [r7, #24]
        break;
 80130fc:	e005      	b.n	801310a <etharp_query+0x1de>
      }
      p = p->next;
 80130fe:	69fb      	ldr	r3, [r7, #28]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013104:	69fb      	ldr	r3, [r7, #28]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d1df      	bne.n	80130ca <etharp_query+0x19e>
    }
    if (copy_needed) {
 801310a:	69bb      	ldr	r3, [r7, #24]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d007      	beq.n	8013120 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013110:	687a      	ldr	r2, [r7, #4]
 8013112:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013116:	200e      	movs	r0, #14
 8013118:	f7f7 fc14 	bl	800a944 <pbuf_clone>
 801311c:	61f8      	str	r0, [r7, #28]
 801311e:	e004      	b.n	801312a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013124:	69f8      	ldr	r0, [r7, #28]
 8013126:	f7f7 fa41 	bl	800a5ac <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801312a:	69fb      	ldr	r3, [r7, #28]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d021      	beq.n	8013174 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013130:	7c7a      	ldrb	r2, [r7, #17]
 8013132:	4918      	ldr	r1, [pc, #96]	; (8013194 <etharp_query+0x268>)
 8013134:	4613      	mov	r3, r2
 8013136:	005b      	lsls	r3, r3, #1
 8013138:	4413      	add	r3, r2
 801313a:	00db      	lsls	r3, r3, #3
 801313c:	440b      	add	r3, r1
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d00a      	beq.n	801315a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013144:	7c7a      	ldrb	r2, [r7, #17]
 8013146:	4913      	ldr	r1, [pc, #76]	; (8013194 <etharp_query+0x268>)
 8013148:	4613      	mov	r3, r2
 801314a:	005b      	lsls	r3, r3, #1
 801314c:	4413      	add	r3, r2
 801314e:	00db      	lsls	r3, r3, #3
 8013150:	440b      	add	r3, r1
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	4618      	mov	r0, r3
 8013156:	f7f7 f989 	bl	800a46c <pbuf_free>
      }
      arp_table[i].q = p;
 801315a:	7c7a      	ldrb	r2, [r7, #17]
 801315c:	490d      	ldr	r1, [pc, #52]	; (8013194 <etharp_query+0x268>)
 801315e:	4613      	mov	r3, r2
 8013160:	005b      	lsls	r3, r3, #1
 8013162:	4413      	add	r3, r2
 8013164:	00db      	lsls	r3, r3, #3
 8013166:	440b      	add	r3, r1
 8013168:	69fa      	ldr	r2, [r7, #28]
 801316a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801316c:	2300      	movs	r3, #0
 801316e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013172:	e002      	b.n	801317a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013174:	23ff      	movs	r3, #255	; 0xff
 8013176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801317a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801317e:	4618      	mov	r0, r3
 8013180:	3728      	adds	r7, #40	; 0x28
 8013182:	46bd      	mov	sp, r7
 8013184:	bd80      	pop	{r7, pc}
 8013186:	bf00      	nop
 8013188:	0801b47c 	.word	0x0801b47c
 801318c:	0801b628 	.word	0x0801b628
 8013190:	0801b4f4 	.word	0x0801b4f4
 8013194:	20000424 	.word	0x20000424
 8013198:	0801b638 	.word	0x0801b638
 801319c:	0801b61c 	.word	0x0801b61c
 80131a0:	20000514 	.word	0x20000514
 80131a4:	0801b660 	.word	0x0801b660

080131a8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b08a      	sub	sp, #40	; 0x28
 80131ac:	af02      	add	r7, sp, #8
 80131ae:	60f8      	str	r0, [r7, #12]
 80131b0:	60b9      	str	r1, [r7, #8]
 80131b2:	607a      	str	r2, [r7, #4]
 80131b4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80131b6:	2300      	movs	r3, #0
 80131b8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d106      	bne.n	80131ce <etharp_raw+0x26>
 80131c0:	4b3a      	ldr	r3, [pc, #232]	; (80132ac <etharp_raw+0x104>)
 80131c2:	f240 4257 	movw	r2, #1111	; 0x457
 80131c6:	493a      	ldr	r1, [pc, #232]	; (80132b0 <etharp_raw+0x108>)
 80131c8:	483a      	ldr	r0, [pc, #232]	; (80132b4 <etharp_raw+0x10c>)
 80131ca:	f002 f9c9 	bl	8015560 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80131ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80131d2:	211c      	movs	r1, #28
 80131d4:	200e      	movs	r0, #14
 80131d6:	f7f6 fe65 	bl	8009ea4 <pbuf_alloc>
 80131da:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80131dc:	69bb      	ldr	r3, [r7, #24]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d102      	bne.n	80131e8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80131e2:	f04f 33ff 	mov.w	r3, #4294967295
 80131e6:	e05d      	b.n	80132a4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80131e8:	69bb      	ldr	r3, [r7, #24]
 80131ea:	895b      	ldrh	r3, [r3, #10]
 80131ec:	2b1b      	cmp	r3, #27
 80131ee:	d806      	bhi.n	80131fe <etharp_raw+0x56>
 80131f0:	4b2e      	ldr	r3, [pc, #184]	; (80132ac <etharp_raw+0x104>)
 80131f2:	f240 4262 	movw	r2, #1122	; 0x462
 80131f6:	4930      	ldr	r1, [pc, #192]	; (80132b8 <etharp_raw+0x110>)
 80131f8:	482e      	ldr	r0, [pc, #184]	; (80132b4 <etharp_raw+0x10c>)
 80131fa:	f002 f9b1 	bl	8015560 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80131fe:	69bb      	ldr	r3, [r7, #24]
 8013200:	685b      	ldr	r3, [r3, #4]
 8013202:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013204:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013206:	4618      	mov	r0, r3
 8013208:	f7f5 fe94 	bl	8008f34 <lwip_htons>
 801320c:	4603      	mov	r3, r0
 801320e:	461a      	mov	r2, r3
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801321a:	2b06      	cmp	r3, #6
 801321c:	d006      	beq.n	801322c <etharp_raw+0x84>
 801321e:	4b23      	ldr	r3, [pc, #140]	; (80132ac <etharp_raw+0x104>)
 8013220:	f240 4269 	movw	r2, #1129	; 0x469
 8013224:	4925      	ldr	r1, [pc, #148]	; (80132bc <etharp_raw+0x114>)
 8013226:	4823      	ldr	r0, [pc, #140]	; (80132b4 <etharp_raw+0x10c>)
 8013228:	f002 f99a 	bl	8015560 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801322c:	697b      	ldr	r3, [r7, #20]
 801322e:	3308      	adds	r3, #8
 8013230:	2206      	movs	r2, #6
 8013232:	6839      	ldr	r1, [r7, #0]
 8013234:	4618      	mov	r0, r3
 8013236:	f001 fc4f 	bl	8014ad8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801323a:	697b      	ldr	r3, [r7, #20]
 801323c:	3312      	adds	r3, #18
 801323e:	2206      	movs	r2, #6
 8013240:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013242:	4618      	mov	r0, r3
 8013244:	f001 fc48 	bl	8014ad8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013248:	697b      	ldr	r3, [r7, #20]
 801324a:	330e      	adds	r3, #14
 801324c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801324e:	6812      	ldr	r2, [r2, #0]
 8013250:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013252:	697b      	ldr	r3, [r7, #20]
 8013254:	3318      	adds	r3, #24
 8013256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013258:	6812      	ldr	r2, [r2, #0]
 801325a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	2200      	movs	r2, #0
 8013260:	701a      	strb	r2, [r3, #0]
 8013262:	2200      	movs	r2, #0
 8013264:	f042 0201 	orr.w	r2, r2, #1
 8013268:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801326a:	697b      	ldr	r3, [r7, #20]
 801326c:	2200      	movs	r2, #0
 801326e:	f042 0208 	orr.w	r2, r2, #8
 8013272:	709a      	strb	r2, [r3, #2]
 8013274:	2200      	movs	r2, #0
 8013276:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013278:	697b      	ldr	r3, [r7, #20]
 801327a:	2206      	movs	r2, #6
 801327c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801327e:	697b      	ldr	r3, [r7, #20]
 8013280:	2204      	movs	r2, #4
 8013282:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013284:	f640 0306 	movw	r3, #2054	; 0x806
 8013288:	9300      	str	r3, [sp, #0]
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	68ba      	ldr	r2, [r7, #8]
 801328e:	69b9      	ldr	r1, [r7, #24]
 8013290:	68f8      	ldr	r0, [r7, #12]
 8013292:	f001 fb93 	bl	80149bc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013296:	69b8      	ldr	r0, [r7, #24]
 8013298:	f7f7 f8e8 	bl	800a46c <pbuf_free>
  p = NULL;
 801329c:	2300      	movs	r3, #0
 801329e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80132a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80132a4:	4618      	mov	r0, r3
 80132a6:	3720      	adds	r7, #32
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}
 80132ac:	0801b47c 	.word	0x0801b47c
 80132b0:	0801b5cc 	.word	0x0801b5cc
 80132b4:	0801b4f4 	.word	0x0801b4f4
 80132b8:	0801b67c 	.word	0x0801b67c
 80132bc:	0801b6b0 	.word	0x0801b6b0

080132c0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b088      	sub	sp, #32
 80132c4:	af04      	add	r7, sp, #16
 80132c6:	60f8      	str	r0, [r7, #12]
 80132c8:	60b9      	str	r1, [r7, #8]
 80132ca:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80132dc:	2201      	movs	r2, #1
 80132de:	9203      	str	r2, [sp, #12]
 80132e0:	68ba      	ldr	r2, [r7, #8]
 80132e2:	9202      	str	r2, [sp, #8]
 80132e4:	4a06      	ldr	r2, [pc, #24]	; (8013300 <etharp_request_dst+0x40>)
 80132e6:	9201      	str	r2, [sp, #4]
 80132e8:	9300      	str	r3, [sp, #0]
 80132ea:	4603      	mov	r3, r0
 80132ec:	687a      	ldr	r2, [r7, #4]
 80132ee:	68f8      	ldr	r0, [r7, #12]
 80132f0:	f7ff ff5a 	bl	80131a8 <etharp_raw>
 80132f4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80132f6:	4618      	mov	r0, r3
 80132f8:	3710      	adds	r7, #16
 80132fa:	46bd      	mov	sp, r7
 80132fc:	bd80      	pop	{r7, pc}
 80132fe:	bf00      	nop
 8013300:	0801bc50 	.word	0x0801bc50

08013304 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b082      	sub	sp, #8
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
 801330c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801330e:	4a05      	ldr	r2, [pc, #20]	; (8013324 <etharp_request+0x20>)
 8013310:	6839      	ldr	r1, [r7, #0]
 8013312:	6878      	ldr	r0, [r7, #4]
 8013314:	f7ff ffd4 	bl	80132c0 <etharp_request_dst>
 8013318:	4603      	mov	r3, r0
}
 801331a:	4618      	mov	r0, r3
 801331c:	3708      	adds	r7, #8
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}
 8013322:	bf00      	nop
 8013324:	0801bc48 	.word	0x0801bc48

08013328 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b08e      	sub	sp, #56	; 0x38
 801332c:	af04      	add	r7, sp, #16
 801332e:	6078      	str	r0, [r7, #4]
 8013330:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013332:	4b79      	ldr	r3, [pc, #484]	; (8013518 <icmp_input+0x1f0>)
 8013334:	689b      	ldr	r3, [r3, #8]
 8013336:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801333a:	781b      	ldrb	r3, [r3, #0]
 801333c:	f003 030f 	and.w	r3, r3, #15
 8013340:	b2db      	uxtb	r3, r3
 8013342:	009b      	lsls	r3, r3, #2
 8013344:	b2db      	uxtb	r3, r3
 8013346:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013348:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801334a:	2b13      	cmp	r3, #19
 801334c:	f240 80cd 	bls.w	80134ea <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	895b      	ldrh	r3, [r3, #10]
 8013354:	2b03      	cmp	r3, #3
 8013356:	f240 80ca 	bls.w	80134ee <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	685b      	ldr	r3, [r3, #4]
 801335e:	781b      	ldrb	r3, [r3, #0]
 8013360:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013364:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013368:	2b00      	cmp	r3, #0
 801336a:	f000 80b7 	beq.w	80134dc <icmp_input+0x1b4>
 801336e:	2b08      	cmp	r3, #8
 8013370:	f040 80b7 	bne.w	80134e2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013374:	4b69      	ldr	r3, [pc, #420]	; (801351c <icmp_input+0x1f4>)
 8013376:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013378:	4b67      	ldr	r3, [pc, #412]	; (8013518 <icmp_input+0x1f0>)
 801337a:	695b      	ldr	r3, [r3, #20]
 801337c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013380:	2be0      	cmp	r3, #224	; 0xe0
 8013382:	f000 80bb 	beq.w	80134fc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013386:	4b64      	ldr	r3, [pc, #400]	; (8013518 <icmp_input+0x1f0>)
 8013388:	695b      	ldr	r3, [r3, #20]
 801338a:	4a63      	ldr	r2, [pc, #396]	; (8013518 <icmp_input+0x1f0>)
 801338c:	6812      	ldr	r2, [r2, #0]
 801338e:	4611      	mov	r1, r2
 8013390:	4618      	mov	r0, r3
 8013392:	f000 fc0b 	bl	8013bac <ip4_addr_isbroadcast_u32>
 8013396:	4603      	mov	r3, r0
 8013398:	2b00      	cmp	r3, #0
 801339a:	f040 80b1 	bne.w	8013500 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	891b      	ldrh	r3, [r3, #8]
 80133a2:	2b07      	cmp	r3, #7
 80133a4:	f240 80a5 	bls.w	80134f2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80133a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80133aa:	330e      	adds	r3, #14
 80133ac:	4619      	mov	r1, r3
 80133ae:	6878      	ldr	r0, [r7, #4]
 80133b0:	f7f6 ffc6 	bl	800a340 <pbuf_add_header>
 80133b4:	4603      	mov	r3, r0
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d04b      	beq.n	8013452 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	891a      	ldrh	r2, [r3, #8]
 80133be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80133c0:	4413      	add	r3, r2
 80133c2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	891b      	ldrh	r3, [r3, #8]
 80133c8:	8b7a      	ldrh	r2, [r7, #26]
 80133ca:	429a      	cmp	r2, r3
 80133cc:	f0c0 809a 	bcc.w	8013504 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80133d0:	8b7b      	ldrh	r3, [r7, #26]
 80133d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80133d6:	4619      	mov	r1, r3
 80133d8:	200e      	movs	r0, #14
 80133da:	f7f6 fd63 	bl	8009ea4 <pbuf_alloc>
 80133de:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80133e0:	697b      	ldr	r3, [r7, #20]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	f000 8090 	beq.w	8013508 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80133e8:	697b      	ldr	r3, [r7, #20]
 80133ea:	895b      	ldrh	r3, [r3, #10]
 80133ec:	461a      	mov	r2, r3
 80133ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80133f0:	3308      	adds	r3, #8
 80133f2:	429a      	cmp	r2, r3
 80133f4:	d203      	bcs.n	80133fe <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80133f6:	6978      	ldr	r0, [r7, #20]
 80133f8:	f7f7 f838 	bl	800a46c <pbuf_free>
          goto icmperr;
 80133fc:	e085      	b.n	801350a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80133fe:	697b      	ldr	r3, [r7, #20]
 8013400:	685b      	ldr	r3, [r3, #4]
 8013402:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013406:	4618      	mov	r0, r3
 8013408:	f001 fb66 	bl	8014ad8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801340c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801340e:	4619      	mov	r1, r3
 8013410:	6978      	ldr	r0, [r7, #20]
 8013412:	f7f6 ffa5 	bl	800a360 <pbuf_remove_header>
 8013416:	4603      	mov	r3, r0
 8013418:	2b00      	cmp	r3, #0
 801341a:	d009      	beq.n	8013430 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801341c:	4b40      	ldr	r3, [pc, #256]	; (8013520 <icmp_input+0x1f8>)
 801341e:	22b6      	movs	r2, #182	; 0xb6
 8013420:	4940      	ldr	r1, [pc, #256]	; (8013524 <icmp_input+0x1fc>)
 8013422:	4841      	ldr	r0, [pc, #260]	; (8013528 <icmp_input+0x200>)
 8013424:	f002 f89c 	bl	8015560 <iprintf>
          pbuf_free(r);
 8013428:	6978      	ldr	r0, [r7, #20]
 801342a:	f7f7 f81f 	bl	800a46c <pbuf_free>
          goto icmperr;
 801342e:	e06c      	b.n	801350a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013430:	6879      	ldr	r1, [r7, #4]
 8013432:	6978      	ldr	r0, [r7, #20]
 8013434:	f7f7 f942 	bl	800a6bc <pbuf_copy>
 8013438:	4603      	mov	r3, r0
 801343a:	2b00      	cmp	r3, #0
 801343c:	d003      	beq.n	8013446 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801343e:	6978      	ldr	r0, [r7, #20]
 8013440:	f7f7 f814 	bl	800a46c <pbuf_free>
          goto icmperr;
 8013444:	e061      	b.n	801350a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8013446:	6878      	ldr	r0, [r7, #4]
 8013448:	f7f7 f810 	bl	800a46c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801344c:	697b      	ldr	r3, [r7, #20]
 801344e:	607b      	str	r3, [r7, #4]
 8013450:	e00f      	b.n	8013472 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013452:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013454:	330e      	adds	r3, #14
 8013456:	4619      	mov	r1, r3
 8013458:	6878      	ldr	r0, [r7, #4]
 801345a:	f7f6 ff81 	bl	800a360 <pbuf_remove_header>
 801345e:	4603      	mov	r3, r0
 8013460:	2b00      	cmp	r3, #0
 8013462:	d006      	beq.n	8013472 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013464:	4b2e      	ldr	r3, [pc, #184]	; (8013520 <icmp_input+0x1f8>)
 8013466:	22c7      	movs	r2, #199	; 0xc7
 8013468:	4930      	ldr	r1, [pc, #192]	; (801352c <icmp_input+0x204>)
 801346a:	482f      	ldr	r0, [pc, #188]	; (8013528 <icmp_input+0x200>)
 801346c:	f002 f878 	bl	8015560 <iprintf>
          goto icmperr;
 8013470:	e04b      	b.n	801350a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	685b      	ldr	r3, [r3, #4]
 8013476:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013478:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801347a:	4619      	mov	r1, r3
 801347c:	6878      	ldr	r0, [r7, #4]
 801347e:	f7f6 ff5f 	bl	800a340 <pbuf_add_header>
 8013482:	4603      	mov	r3, r0
 8013484:	2b00      	cmp	r3, #0
 8013486:	d12b      	bne.n	80134e0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	685b      	ldr	r3, [r3, #4]
 801348c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801348e:	69fb      	ldr	r3, [r7, #28]
 8013490:	681a      	ldr	r2, [r3, #0]
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013496:	4b20      	ldr	r3, [pc, #128]	; (8013518 <icmp_input+0x1f0>)
 8013498:	691a      	ldr	r2, [r3, #16]
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	2200      	movs	r2, #0
 80134a2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80134a4:	693b      	ldr	r3, [r7, #16]
 80134a6:	2200      	movs	r2, #0
 80134a8:	709a      	strb	r2, [r3, #2]
 80134aa:	2200      	movs	r2, #0
 80134ac:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	22ff      	movs	r2, #255	; 0xff
 80134b2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	2200      	movs	r2, #0
 80134b8:	729a      	strb	r2, [r3, #10]
 80134ba:	2200      	movs	r2, #0
 80134bc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80134be:	683b      	ldr	r3, [r7, #0]
 80134c0:	9302      	str	r3, [sp, #8]
 80134c2:	2301      	movs	r3, #1
 80134c4:	9301      	str	r3, [sp, #4]
 80134c6:	2300      	movs	r3, #0
 80134c8:	9300      	str	r3, [sp, #0]
 80134ca:	23ff      	movs	r3, #255	; 0xff
 80134cc:	2200      	movs	r2, #0
 80134ce:	69f9      	ldr	r1, [r7, #28]
 80134d0:	6878      	ldr	r0, [r7, #4]
 80134d2:	f000 fa93 	bl	80139fc <ip4_output_if>
 80134d6:	4603      	mov	r3, r0
 80134d8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80134da:	e001      	b.n	80134e0 <icmp_input+0x1b8>
      break;
 80134dc:	bf00      	nop
 80134de:	e000      	b.n	80134e2 <icmp_input+0x1ba>
      break;
 80134e0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80134e2:	6878      	ldr	r0, [r7, #4]
 80134e4:	f7f6 ffc2 	bl	800a46c <pbuf_free>
  return;
 80134e8:	e013      	b.n	8013512 <icmp_input+0x1ea>
    goto lenerr;
 80134ea:	bf00      	nop
 80134ec:	e002      	b.n	80134f4 <icmp_input+0x1cc>
    goto lenerr;
 80134ee:	bf00      	nop
 80134f0:	e000      	b.n	80134f4 <icmp_input+0x1cc>
        goto lenerr;
 80134f2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80134f4:	6878      	ldr	r0, [r7, #4]
 80134f6:	f7f6 ffb9 	bl	800a46c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80134fa:	e00a      	b.n	8013512 <icmp_input+0x1ea>
        goto icmperr;
 80134fc:	bf00      	nop
 80134fe:	e004      	b.n	801350a <icmp_input+0x1e2>
        goto icmperr;
 8013500:	bf00      	nop
 8013502:	e002      	b.n	801350a <icmp_input+0x1e2>
          goto icmperr;
 8013504:	bf00      	nop
 8013506:	e000      	b.n	801350a <icmp_input+0x1e2>
          goto icmperr;
 8013508:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801350a:	6878      	ldr	r0, [r7, #4]
 801350c:	f7f6 ffae 	bl	800a46c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013510:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013512:	3728      	adds	r7, #40	; 0x28
 8013514:	46bd      	mov	sp, r7
 8013516:	bd80      	pop	{r7, pc}
 8013518:	200038fc 	.word	0x200038fc
 801351c:	20003910 	.word	0x20003910
 8013520:	0801b6f4 	.word	0x0801b6f4
 8013524:	0801b72c 	.word	0x0801b72c
 8013528:	0801b764 	.word	0x0801b764
 801352c:	0801b78c 	.word	0x0801b78c

08013530 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b082      	sub	sp, #8
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
 8013538:	460b      	mov	r3, r1
 801353a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801353c:	78fb      	ldrb	r3, [r7, #3]
 801353e:	461a      	mov	r2, r3
 8013540:	2103      	movs	r1, #3
 8013542:	6878      	ldr	r0, [r7, #4]
 8013544:	f000 f814 	bl	8013570 <icmp_send_response>
}
 8013548:	bf00      	nop
 801354a:	3708      	adds	r7, #8
 801354c:	46bd      	mov	sp, r7
 801354e:	bd80      	pop	{r7, pc}

08013550 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013550:	b580      	push	{r7, lr}
 8013552:	b082      	sub	sp, #8
 8013554:	af00      	add	r7, sp, #0
 8013556:	6078      	str	r0, [r7, #4]
 8013558:	460b      	mov	r3, r1
 801355a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801355c:	78fb      	ldrb	r3, [r7, #3]
 801355e:	461a      	mov	r2, r3
 8013560:	210b      	movs	r1, #11
 8013562:	6878      	ldr	r0, [r7, #4]
 8013564:	f000 f804 	bl	8013570 <icmp_send_response>
}
 8013568:	bf00      	nop
 801356a:	3708      	adds	r7, #8
 801356c:	46bd      	mov	sp, r7
 801356e:	bd80      	pop	{r7, pc}

08013570 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b08c      	sub	sp, #48	; 0x30
 8013574:	af04      	add	r7, sp, #16
 8013576:	6078      	str	r0, [r7, #4]
 8013578:	460b      	mov	r3, r1
 801357a:	70fb      	strb	r3, [r7, #3]
 801357c:	4613      	mov	r3, r2
 801357e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013580:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013584:	2124      	movs	r1, #36	; 0x24
 8013586:	2022      	movs	r0, #34	; 0x22
 8013588:	f7f6 fc8c 	bl	8009ea4 <pbuf_alloc>
 801358c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801358e:	69fb      	ldr	r3, [r7, #28]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d04c      	beq.n	801362e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013594:	69fb      	ldr	r3, [r7, #28]
 8013596:	895b      	ldrh	r3, [r3, #10]
 8013598:	2b23      	cmp	r3, #35	; 0x23
 801359a:	d806      	bhi.n	80135aa <icmp_send_response+0x3a>
 801359c:	4b26      	ldr	r3, [pc, #152]	; (8013638 <icmp_send_response+0xc8>)
 801359e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80135a2:	4926      	ldr	r1, [pc, #152]	; (801363c <icmp_send_response+0xcc>)
 80135a4:	4826      	ldr	r0, [pc, #152]	; (8013640 <icmp_send_response+0xd0>)
 80135a6:	f001 ffdb 	bl	8015560 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	685b      	ldr	r3, [r3, #4]
 80135ae:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80135b0:	69fb      	ldr	r3, [r7, #28]
 80135b2:	685b      	ldr	r3, [r3, #4]
 80135b4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80135b6:	697b      	ldr	r3, [r7, #20]
 80135b8:	78fa      	ldrb	r2, [r7, #3]
 80135ba:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80135bc:	697b      	ldr	r3, [r7, #20]
 80135be:	78ba      	ldrb	r2, [r7, #2]
 80135c0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80135c2:	697b      	ldr	r3, [r7, #20]
 80135c4:	2200      	movs	r2, #0
 80135c6:	711a      	strb	r2, [r3, #4]
 80135c8:	2200      	movs	r2, #0
 80135ca:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80135cc:	697b      	ldr	r3, [r7, #20]
 80135ce:	2200      	movs	r2, #0
 80135d0:	719a      	strb	r2, [r3, #6]
 80135d2:	2200      	movs	r2, #0
 80135d4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80135d6:	69fb      	ldr	r3, [r7, #28]
 80135d8:	685b      	ldr	r3, [r3, #4]
 80135da:	f103 0008 	add.w	r0, r3, #8
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	685b      	ldr	r3, [r3, #4]
 80135e2:	221c      	movs	r2, #28
 80135e4:	4619      	mov	r1, r3
 80135e6:	f001 fa77 	bl	8014ad8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80135ea:	69bb      	ldr	r3, [r7, #24]
 80135ec:	68db      	ldr	r3, [r3, #12]
 80135ee:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80135f0:	f107 030c 	add.w	r3, r7, #12
 80135f4:	4618      	mov	r0, r3
 80135f6:	f000 f825 	bl	8013644 <ip4_route>
 80135fa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80135fc:	693b      	ldr	r3, [r7, #16]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d011      	beq.n	8013626 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013602:	697b      	ldr	r3, [r7, #20]
 8013604:	2200      	movs	r2, #0
 8013606:	709a      	strb	r2, [r3, #2]
 8013608:	2200      	movs	r2, #0
 801360a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801360c:	f107 020c 	add.w	r2, r7, #12
 8013610:	693b      	ldr	r3, [r7, #16]
 8013612:	9302      	str	r3, [sp, #8]
 8013614:	2301      	movs	r3, #1
 8013616:	9301      	str	r3, [sp, #4]
 8013618:	2300      	movs	r3, #0
 801361a:	9300      	str	r3, [sp, #0]
 801361c:	23ff      	movs	r3, #255	; 0xff
 801361e:	2100      	movs	r1, #0
 8013620:	69f8      	ldr	r0, [r7, #28]
 8013622:	f000 f9eb 	bl	80139fc <ip4_output_if>
  }
  pbuf_free(q);
 8013626:	69f8      	ldr	r0, [r7, #28]
 8013628:	f7f6 ff20 	bl	800a46c <pbuf_free>
 801362c:	e000      	b.n	8013630 <icmp_send_response+0xc0>
    return;
 801362e:	bf00      	nop
}
 8013630:	3720      	adds	r7, #32
 8013632:	46bd      	mov	sp, r7
 8013634:	bd80      	pop	{r7, pc}
 8013636:	bf00      	nop
 8013638:	0801b6f4 	.word	0x0801b6f4
 801363c:	0801b7c0 	.word	0x0801b7c0
 8013640:	0801b764 	.word	0x0801b764

08013644 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013644:	b480      	push	{r7}
 8013646:	b085      	sub	sp, #20
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801364c:	4b33      	ldr	r3, [pc, #204]	; (801371c <ip4_route+0xd8>)
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	60fb      	str	r3, [r7, #12]
 8013652:	e036      	b.n	80136c2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801365a:	f003 0301 	and.w	r3, r3, #1
 801365e:	b2db      	uxtb	r3, r3
 8013660:	2b00      	cmp	r3, #0
 8013662:	d02b      	beq.n	80136bc <ip4_route+0x78>
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801366a:	089b      	lsrs	r3, r3, #2
 801366c:	f003 0301 	and.w	r3, r3, #1
 8013670:	b2db      	uxtb	r3, r3
 8013672:	2b00      	cmp	r3, #0
 8013674:	d022      	beq.n	80136bc <ip4_route+0x78>
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	3304      	adds	r3, #4
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d01d      	beq.n	80136bc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	681a      	ldr	r2, [r3, #0]
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	3304      	adds	r3, #4
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	405a      	eors	r2, r3
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	3308      	adds	r3, #8
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	4013      	ands	r3, r2
 8013694:	2b00      	cmp	r3, #0
 8013696:	d101      	bne.n	801369c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	e038      	b.n	801370e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80136a2:	f003 0302 	and.w	r3, r3, #2
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d108      	bne.n	80136bc <ip4_route+0x78>
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	681a      	ldr	r2, [r3, #0]
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	330c      	adds	r3, #12
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	429a      	cmp	r2, r3
 80136b6:	d101      	bne.n	80136bc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	e028      	b.n	801370e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	60fb      	str	r3, [r7, #12]
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d1c5      	bne.n	8013654 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80136c8:	4b15      	ldr	r3, [pc, #84]	; (8013720 <ip4_route+0xdc>)
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d01a      	beq.n	8013706 <ip4_route+0xc2>
 80136d0:	4b13      	ldr	r3, [pc, #76]	; (8013720 <ip4_route+0xdc>)
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80136d8:	f003 0301 	and.w	r3, r3, #1
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d012      	beq.n	8013706 <ip4_route+0xc2>
 80136e0:	4b0f      	ldr	r3, [pc, #60]	; (8013720 <ip4_route+0xdc>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80136e8:	f003 0304 	and.w	r3, r3, #4
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d00a      	beq.n	8013706 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80136f0:	4b0b      	ldr	r3, [pc, #44]	; (8013720 <ip4_route+0xdc>)
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	3304      	adds	r3, #4
 80136f6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d004      	beq.n	8013706 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	b2db      	uxtb	r3, r3
 8013702:	2b7f      	cmp	r3, #127	; 0x7f
 8013704:	d101      	bne.n	801370a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013706:	2300      	movs	r3, #0
 8013708:	e001      	b.n	801370e <ip4_route+0xca>
  }

  return netif_default;
 801370a:	4b05      	ldr	r3, [pc, #20]	; (8013720 <ip4_route+0xdc>)
 801370c:	681b      	ldr	r3, [r3, #0]
}
 801370e:	4618      	mov	r0, r3
 8013710:	3714      	adds	r7, #20
 8013712:	46bd      	mov	sp, r7
 8013714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013718:	4770      	bx	lr
 801371a:	bf00      	nop
 801371c:	20006a10 	.word	0x20006a10
 8013720:	20006a14 	.word	0x20006a14

08013724 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b082      	sub	sp, #8
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013732:	f003 0301 	and.w	r3, r3, #1
 8013736:	b2db      	uxtb	r3, r3
 8013738:	2b00      	cmp	r3, #0
 801373a:	d016      	beq.n	801376a <ip4_input_accept+0x46>
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	3304      	adds	r3, #4
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d011      	beq.n	801376a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013746:	4b0b      	ldr	r3, [pc, #44]	; (8013774 <ip4_input_accept+0x50>)
 8013748:	695a      	ldr	r2, [r3, #20]
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	3304      	adds	r3, #4
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	429a      	cmp	r2, r3
 8013752:	d008      	beq.n	8013766 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013754:	4b07      	ldr	r3, [pc, #28]	; (8013774 <ip4_input_accept+0x50>)
 8013756:	695b      	ldr	r3, [r3, #20]
 8013758:	6879      	ldr	r1, [r7, #4]
 801375a:	4618      	mov	r0, r3
 801375c:	f000 fa26 	bl	8013bac <ip4_addr_isbroadcast_u32>
 8013760:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013762:	2b00      	cmp	r3, #0
 8013764:	d001      	beq.n	801376a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013766:	2301      	movs	r3, #1
 8013768:	e000      	b.n	801376c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801376a:	2300      	movs	r3, #0
}
 801376c:	4618      	mov	r0, r3
 801376e:	3708      	adds	r7, #8
 8013770:	46bd      	mov	sp, r7
 8013772:	bd80      	pop	{r7, pc}
 8013774:	200038fc 	.word	0x200038fc

08013778 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b088      	sub	sp, #32
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
 8013780:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8013782:	2301      	movs	r3, #1
 8013784:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	685b      	ldr	r3, [r3, #4]
 801378a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801378c:	69fb      	ldr	r3, [r7, #28]
 801378e:	781b      	ldrb	r3, [r3, #0]
 8013790:	091b      	lsrs	r3, r3, #4
 8013792:	b2db      	uxtb	r3, r3
 8013794:	2b04      	cmp	r3, #4
 8013796:	d004      	beq.n	80137a2 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	f7f6 fe67 	bl	800a46c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801379e:	2300      	movs	r3, #0
 80137a0:	e123      	b.n	80139ea <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80137a2:	69fb      	ldr	r3, [r7, #28]
 80137a4:	781b      	ldrb	r3, [r3, #0]
 80137a6:	f003 030f 	and.w	r3, r3, #15
 80137aa:	b2db      	uxtb	r3, r3
 80137ac:	009b      	lsls	r3, r3, #2
 80137ae:	b2db      	uxtb	r3, r3
 80137b0:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80137b2:	69fb      	ldr	r3, [r7, #28]
 80137b4:	885b      	ldrh	r3, [r3, #2]
 80137b6:	b29b      	uxth	r3, r3
 80137b8:	4618      	mov	r0, r3
 80137ba:	f7f5 fbbb 	bl	8008f34 <lwip_htons>
 80137be:	4603      	mov	r3, r0
 80137c0:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	891b      	ldrh	r3, [r3, #8]
 80137c6:	8a3a      	ldrh	r2, [r7, #16]
 80137c8:	429a      	cmp	r2, r3
 80137ca:	d204      	bcs.n	80137d6 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80137cc:	8a3b      	ldrh	r3, [r7, #16]
 80137ce:	4619      	mov	r1, r3
 80137d0:	6878      	ldr	r0, [r7, #4]
 80137d2:	f7f6 fcc5 	bl	800a160 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	895b      	ldrh	r3, [r3, #10]
 80137da:	8a7a      	ldrh	r2, [r7, #18]
 80137dc:	429a      	cmp	r2, r3
 80137de:	d807      	bhi.n	80137f0 <ip4_input+0x78>
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	891b      	ldrh	r3, [r3, #8]
 80137e4:	8a3a      	ldrh	r2, [r7, #16]
 80137e6:	429a      	cmp	r2, r3
 80137e8:	d802      	bhi.n	80137f0 <ip4_input+0x78>
 80137ea:	8a7b      	ldrh	r3, [r7, #18]
 80137ec:	2b13      	cmp	r3, #19
 80137ee:	d804      	bhi.n	80137fa <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f7f6 fe3b 	bl	800a46c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80137f6:	2300      	movs	r3, #0
 80137f8:	e0f7      	b.n	80139ea <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80137fa:	69fb      	ldr	r3, [r7, #28]
 80137fc:	691b      	ldr	r3, [r3, #16]
 80137fe:	4a7d      	ldr	r2, [pc, #500]	; (80139f4 <ip4_input+0x27c>)
 8013800:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013802:	69fb      	ldr	r3, [r7, #28]
 8013804:	68db      	ldr	r3, [r3, #12]
 8013806:	4a7b      	ldr	r2, [pc, #492]	; (80139f4 <ip4_input+0x27c>)
 8013808:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801380a:	4b7a      	ldr	r3, [pc, #488]	; (80139f4 <ip4_input+0x27c>)
 801380c:	695b      	ldr	r3, [r3, #20]
 801380e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013812:	2be0      	cmp	r3, #224	; 0xe0
 8013814:	d112      	bne.n	801383c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013816:	683b      	ldr	r3, [r7, #0]
 8013818:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801381c:	f003 0301 	and.w	r3, r3, #1
 8013820:	b2db      	uxtb	r3, r3
 8013822:	2b00      	cmp	r3, #0
 8013824:	d007      	beq.n	8013836 <ip4_input+0xbe>
 8013826:	683b      	ldr	r3, [r7, #0]
 8013828:	3304      	adds	r3, #4
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d002      	beq.n	8013836 <ip4_input+0xbe>
      netif = inp;
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	61bb      	str	r3, [r7, #24]
 8013834:	e02a      	b.n	801388c <ip4_input+0x114>
    } else {
      netif = NULL;
 8013836:	2300      	movs	r3, #0
 8013838:	61bb      	str	r3, [r7, #24]
 801383a:	e027      	b.n	801388c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801383c:	6838      	ldr	r0, [r7, #0]
 801383e:	f7ff ff71 	bl	8013724 <ip4_input_accept>
 8013842:	4603      	mov	r3, r0
 8013844:	2b00      	cmp	r3, #0
 8013846:	d002      	beq.n	801384e <ip4_input+0xd6>
      netif = inp;
 8013848:	683b      	ldr	r3, [r7, #0]
 801384a:	61bb      	str	r3, [r7, #24]
 801384c:	e01e      	b.n	801388c <ip4_input+0x114>
    } else {
      netif = NULL;
 801384e:	2300      	movs	r3, #0
 8013850:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013852:	4b68      	ldr	r3, [pc, #416]	; (80139f4 <ip4_input+0x27c>)
 8013854:	695b      	ldr	r3, [r3, #20]
 8013856:	b2db      	uxtb	r3, r3
 8013858:	2b7f      	cmp	r3, #127	; 0x7f
 801385a:	d017      	beq.n	801388c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801385c:	4b66      	ldr	r3, [pc, #408]	; (80139f8 <ip4_input+0x280>)
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	61bb      	str	r3, [r7, #24]
 8013862:	e00e      	b.n	8013882 <ip4_input+0x10a>
          if (netif == inp) {
 8013864:	69ba      	ldr	r2, [r7, #24]
 8013866:	683b      	ldr	r3, [r7, #0]
 8013868:	429a      	cmp	r2, r3
 801386a:	d006      	beq.n	801387a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801386c:	69b8      	ldr	r0, [r7, #24]
 801386e:	f7ff ff59 	bl	8013724 <ip4_input_accept>
 8013872:	4603      	mov	r3, r0
 8013874:	2b00      	cmp	r3, #0
 8013876:	d108      	bne.n	801388a <ip4_input+0x112>
 8013878:	e000      	b.n	801387c <ip4_input+0x104>
            continue;
 801387a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801387c:	69bb      	ldr	r3, [r7, #24]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	61bb      	str	r3, [r7, #24]
 8013882:	69bb      	ldr	r3, [r7, #24]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d1ed      	bne.n	8013864 <ip4_input+0xec>
 8013888:	e000      	b.n	801388c <ip4_input+0x114>
            break;
 801388a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801388c:	69bb      	ldr	r3, [r7, #24]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d111      	bne.n	80138b6 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8013892:	69fb      	ldr	r3, [r7, #28]
 8013894:	7a5b      	ldrb	r3, [r3, #9]
 8013896:	2b11      	cmp	r3, #17
 8013898:	d10d      	bne.n	80138b6 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801389a:	8a7b      	ldrh	r3, [r7, #18]
 801389c:	69fa      	ldr	r2, [r7, #28]
 801389e:	4413      	add	r3, r2
 80138a0:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	885b      	ldrh	r3, [r3, #2]
 80138a6:	b29b      	uxth	r3, r3
 80138a8:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80138ac:	d103      	bne.n	80138b6 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80138ae:	683b      	ldr	r3, [r7, #0]
 80138b0:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80138b2:	2300      	movs	r3, #0
 80138b4:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80138b6:	697b      	ldr	r3, [r7, #20]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d017      	beq.n	80138ec <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80138bc:	4b4d      	ldr	r3, [pc, #308]	; (80139f4 <ip4_input+0x27c>)
 80138be:	691b      	ldr	r3, [r3, #16]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d013      	beq.n	80138ec <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80138c4:	4b4b      	ldr	r3, [pc, #300]	; (80139f4 <ip4_input+0x27c>)
 80138c6:	691b      	ldr	r3, [r3, #16]
 80138c8:	6839      	ldr	r1, [r7, #0]
 80138ca:	4618      	mov	r0, r3
 80138cc:	f000 f96e 	bl	8013bac <ip4_addr_isbroadcast_u32>
 80138d0:	4603      	mov	r3, r0
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d105      	bne.n	80138e2 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80138d6:	4b47      	ldr	r3, [pc, #284]	; (80139f4 <ip4_input+0x27c>)
 80138d8:	691b      	ldr	r3, [r3, #16]
 80138da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80138de:	2be0      	cmp	r3, #224	; 0xe0
 80138e0:	d104      	bne.n	80138ec <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80138e2:	6878      	ldr	r0, [r7, #4]
 80138e4:	f7f6 fdc2 	bl	800a46c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80138e8:	2300      	movs	r3, #0
 80138ea:	e07e      	b.n	80139ea <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80138ec:	69bb      	ldr	r3, [r7, #24]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d104      	bne.n	80138fc <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80138f2:	6878      	ldr	r0, [r7, #4]
 80138f4:	f7f6 fdba 	bl	800a46c <pbuf_free>
    return ERR_OK;
 80138f8:	2300      	movs	r3, #0
 80138fa:	e076      	b.n	80139ea <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80138fc:	69fb      	ldr	r3, [r7, #28]
 80138fe:	88db      	ldrh	r3, [r3, #6]
 8013900:	b29b      	uxth	r3, r3
 8013902:	461a      	mov	r2, r3
 8013904:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013908:	4013      	ands	r3, r2
 801390a:	2b00      	cmp	r3, #0
 801390c:	d00b      	beq.n	8013926 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801390e:	6878      	ldr	r0, [r7, #4]
 8013910:	f000 fc92 	bl	8014238 <ip4_reass>
 8013914:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d101      	bne.n	8013920 <ip4_input+0x1a8>
      return ERR_OK;
 801391c:	2300      	movs	r3, #0
 801391e:	e064      	b.n	80139ea <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	685b      	ldr	r3, [r3, #4]
 8013924:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013926:	4a33      	ldr	r2, [pc, #204]	; (80139f4 <ip4_input+0x27c>)
 8013928:	69bb      	ldr	r3, [r7, #24]
 801392a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801392c:	4a31      	ldr	r2, [pc, #196]	; (80139f4 <ip4_input+0x27c>)
 801392e:	683b      	ldr	r3, [r7, #0]
 8013930:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013932:	4a30      	ldr	r2, [pc, #192]	; (80139f4 <ip4_input+0x27c>)
 8013934:	69fb      	ldr	r3, [r7, #28]
 8013936:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013938:	69fb      	ldr	r3, [r7, #28]
 801393a:	781b      	ldrb	r3, [r3, #0]
 801393c:	f003 030f 	and.w	r3, r3, #15
 8013940:	b2db      	uxtb	r3, r3
 8013942:	009b      	lsls	r3, r3, #2
 8013944:	b2db      	uxtb	r3, r3
 8013946:	b29a      	uxth	r2, r3
 8013948:	4b2a      	ldr	r3, [pc, #168]	; (80139f4 <ip4_input+0x27c>)
 801394a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801394c:	8a7b      	ldrh	r3, [r7, #18]
 801394e:	4619      	mov	r1, r3
 8013950:	6878      	ldr	r0, [r7, #4]
 8013952:	f7f6 fd05 	bl	800a360 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013956:	69fb      	ldr	r3, [r7, #28]
 8013958:	7a5b      	ldrb	r3, [r3, #9]
 801395a:	2b11      	cmp	r3, #17
 801395c:	d006      	beq.n	801396c <ip4_input+0x1f4>
 801395e:	2b11      	cmp	r3, #17
 8013960:	dc13      	bgt.n	801398a <ip4_input+0x212>
 8013962:	2b01      	cmp	r3, #1
 8013964:	d00c      	beq.n	8013980 <ip4_input+0x208>
 8013966:	2b06      	cmp	r3, #6
 8013968:	d005      	beq.n	8013976 <ip4_input+0x1fe>
 801396a:	e00e      	b.n	801398a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801396c:	6839      	ldr	r1, [r7, #0]
 801396e:	6878      	ldr	r0, [r7, #4]
 8013970:	f7fc fb26 	bl	800ffc0 <udp_input>
        break;
 8013974:	e026      	b.n	80139c4 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013976:	6839      	ldr	r1, [r7, #0]
 8013978:	6878      	ldr	r0, [r7, #4]
 801397a:	f7f8 fbaf 	bl	800c0dc <tcp_input>
        break;
 801397e:	e021      	b.n	80139c4 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013980:	6839      	ldr	r1, [r7, #0]
 8013982:	6878      	ldr	r0, [r7, #4]
 8013984:	f7ff fcd0 	bl	8013328 <icmp_input>
        break;
 8013988:	e01c      	b.n	80139c4 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801398a:	4b1a      	ldr	r3, [pc, #104]	; (80139f4 <ip4_input+0x27c>)
 801398c:	695b      	ldr	r3, [r3, #20]
 801398e:	69b9      	ldr	r1, [r7, #24]
 8013990:	4618      	mov	r0, r3
 8013992:	f000 f90b 	bl	8013bac <ip4_addr_isbroadcast_u32>
 8013996:	4603      	mov	r3, r0
 8013998:	2b00      	cmp	r3, #0
 801399a:	d10f      	bne.n	80139bc <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801399c:	4b15      	ldr	r3, [pc, #84]	; (80139f4 <ip4_input+0x27c>)
 801399e:	695b      	ldr	r3, [r3, #20]
 80139a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80139a4:	2be0      	cmp	r3, #224	; 0xe0
 80139a6:	d009      	beq.n	80139bc <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80139a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80139ac:	4619      	mov	r1, r3
 80139ae:	6878      	ldr	r0, [r7, #4]
 80139b0:	f7f6 fd49 	bl	800a446 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80139b4:	2102      	movs	r1, #2
 80139b6:	6878      	ldr	r0, [r7, #4]
 80139b8:	f7ff fdba 	bl	8013530 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f7f6 fd55 	bl	800a46c <pbuf_free>
        break;
 80139c2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80139c4:	4b0b      	ldr	r3, [pc, #44]	; (80139f4 <ip4_input+0x27c>)
 80139c6:	2200      	movs	r2, #0
 80139c8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80139ca:	4b0a      	ldr	r3, [pc, #40]	; (80139f4 <ip4_input+0x27c>)
 80139cc:	2200      	movs	r2, #0
 80139ce:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80139d0:	4b08      	ldr	r3, [pc, #32]	; (80139f4 <ip4_input+0x27c>)
 80139d2:	2200      	movs	r2, #0
 80139d4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80139d6:	4b07      	ldr	r3, [pc, #28]	; (80139f4 <ip4_input+0x27c>)
 80139d8:	2200      	movs	r2, #0
 80139da:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80139dc:	4b05      	ldr	r3, [pc, #20]	; (80139f4 <ip4_input+0x27c>)
 80139de:	2200      	movs	r2, #0
 80139e0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80139e2:	4b04      	ldr	r3, [pc, #16]	; (80139f4 <ip4_input+0x27c>)
 80139e4:	2200      	movs	r2, #0
 80139e6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80139e8:	2300      	movs	r3, #0
}
 80139ea:	4618      	mov	r0, r3
 80139ec:	3720      	adds	r7, #32
 80139ee:	46bd      	mov	sp, r7
 80139f0:	bd80      	pop	{r7, pc}
 80139f2:	bf00      	nop
 80139f4:	200038fc 	.word	0x200038fc
 80139f8:	20006a10 	.word	0x20006a10

080139fc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b08a      	sub	sp, #40	; 0x28
 8013a00:	af04      	add	r7, sp, #16
 8013a02:	60f8      	str	r0, [r7, #12]
 8013a04:	60b9      	str	r1, [r7, #8]
 8013a06:	607a      	str	r2, [r7, #4]
 8013a08:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013a0a:	68bb      	ldr	r3, [r7, #8]
 8013a0c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d009      	beq.n	8013a28 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013a14:	68bb      	ldr	r3, [r7, #8]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d003      	beq.n	8013a22 <ip4_output_if+0x26>
 8013a1a:	68bb      	ldr	r3, [r7, #8]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d102      	bne.n	8013a28 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a24:	3304      	adds	r3, #4
 8013a26:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013a28:	78fa      	ldrb	r2, [r7, #3]
 8013a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a2c:	9302      	str	r3, [sp, #8]
 8013a2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013a32:	9301      	str	r3, [sp, #4]
 8013a34:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013a38:	9300      	str	r3, [sp, #0]
 8013a3a:	4613      	mov	r3, r2
 8013a3c:	687a      	ldr	r2, [r7, #4]
 8013a3e:	6979      	ldr	r1, [r7, #20]
 8013a40:	68f8      	ldr	r0, [r7, #12]
 8013a42:	f000 f805 	bl	8013a50 <ip4_output_if_src>
 8013a46:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013a48:	4618      	mov	r0, r3
 8013a4a:	3718      	adds	r7, #24
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	bd80      	pop	{r7, pc}

08013a50 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b088      	sub	sp, #32
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	60f8      	str	r0, [r7, #12]
 8013a58:	60b9      	str	r1, [r7, #8]
 8013a5a:	607a      	str	r2, [r7, #4]
 8013a5c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	7b9b      	ldrb	r3, [r3, #14]
 8013a62:	2b01      	cmp	r3, #1
 8013a64:	d006      	beq.n	8013a74 <ip4_output_if_src+0x24>
 8013a66:	4b4b      	ldr	r3, [pc, #300]	; (8013b94 <ip4_output_if_src+0x144>)
 8013a68:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013a6c:	494a      	ldr	r1, [pc, #296]	; (8013b98 <ip4_output_if_src+0x148>)
 8013a6e:	484b      	ldr	r0, [pc, #300]	; (8013b9c <ip4_output_if_src+0x14c>)
 8013a70:	f001 fd76 	bl	8015560 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d060      	beq.n	8013b3c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013a7a:	2314      	movs	r3, #20
 8013a7c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013a7e:	2114      	movs	r1, #20
 8013a80:	68f8      	ldr	r0, [r7, #12]
 8013a82:	f7f6 fc5d 	bl	800a340 <pbuf_add_header>
 8013a86:	4603      	mov	r3, r0
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d002      	beq.n	8013a92 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013a8c:	f06f 0301 	mvn.w	r3, #1
 8013a90:	e07c      	b.n	8013b8c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	685b      	ldr	r3, [r3, #4]
 8013a96:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	895b      	ldrh	r3, [r3, #10]
 8013a9c:	2b13      	cmp	r3, #19
 8013a9e:	d806      	bhi.n	8013aae <ip4_output_if_src+0x5e>
 8013aa0:	4b3c      	ldr	r3, [pc, #240]	; (8013b94 <ip4_output_if_src+0x144>)
 8013aa2:	f44f 7262 	mov.w	r2, #904	; 0x388
 8013aa6:	493e      	ldr	r1, [pc, #248]	; (8013ba0 <ip4_output_if_src+0x150>)
 8013aa8:	483c      	ldr	r0, [pc, #240]	; (8013b9c <ip4_output_if_src+0x14c>)
 8013aaa:	f001 fd59 	bl	8015560 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013aae:	69fb      	ldr	r3, [r7, #28]
 8013ab0:	78fa      	ldrb	r2, [r7, #3]
 8013ab2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013ab4:	69fb      	ldr	r3, [r7, #28]
 8013ab6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013aba:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	681a      	ldr	r2, [r3, #0]
 8013ac0:	69fb      	ldr	r3, [r7, #28]
 8013ac2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013ac4:	8b7b      	ldrh	r3, [r7, #26]
 8013ac6:	089b      	lsrs	r3, r3, #2
 8013ac8:	b29b      	uxth	r3, r3
 8013aca:	b2db      	uxtb	r3, r3
 8013acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ad0:	b2da      	uxtb	r2, r3
 8013ad2:	69fb      	ldr	r3, [r7, #28]
 8013ad4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013ad6:	69fb      	ldr	r3, [r7, #28]
 8013ad8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013adc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	891b      	ldrh	r3, [r3, #8]
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f7f5 fa26 	bl	8008f34 <lwip_htons>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	461a      	mov	r2, r3
 8013aec:	69fb      	ldr	r3, [r7, #28]
 8013aee:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013af0:	69fb      	ldr	r3, [r7, #28]
 8013af2:	2200      	movs	r2, #0
 8013af4:	719a      	strb	r2, [r3, #6]
 8013af6:	2200      	movs	r2, #0
 8013af8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013afa:	4b2a      	ldr	r3, [pc, #168]	; (8013ba4 <ip4_output_if_src+0x154>)
 8013afc:	881b      	ldrh	r3, [r3, #0]
 8013afe:	4618      	mov	r0, r3
 8013b00:	f7f5 fa18 	bl	8008f34 <lwip_htons>
 8013b04:	4603      	mov	r3, r0
 8013b06:	461a      	mov	r2, r3
 8013b08:	69fb      	ldr	r3, [r7, #28]
 8013b0a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013b0c:	4b25      	ldr	r3, [pc, #148]	; (8013ba4 <ip4_output_if_src+0x154>)
 8013b0e:	881b      	ldrh	r3, [r3, #0]
 8013b10:	3301      	adds	r3, #1
 8013b12:	b29a      	uxth	r2, r3
 8013b14:	4b23      	ldr	r3, [pc, #140]	; (8013ba4 <ip4_output_if_src+0x154>)
 8013b16:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013b18:	68bb      	ldr	r3, [r7, #8]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d104      	bne.n	8013b28 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013b1e:	4b22      	ldr	r3, [pc, #136]	; (8013ba8 <ip4_output_if_src+0x158>)
 8013b20:	681a      	ldr	r2, [r3, #0]
 8013b22:	69fb      	ldr	r3, [r7, #28]
 8013b24:	60da      	str	r2, [r3, #12]
 8013b26:	e003      	b.n	8013b30 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013b28:	68bb      	ldr	r3, [r7, #8]
 8013b2a:	681a      	ldr	r2, [r3, #0]
 8013b2c:	69fb      	ldr	r3, [r7, #28]
 8013b2e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013b30:	69fb      	ldr	r3, [r7, #28]
 8013b32:	2200      	movs	r2, #0
 8013b34:	729a      	strb	r2, [r3, #10]
 8013b36:	2200      	movs	r2, #0
 8013b38:	72da      	strb	r2, [r3, #11]
 8013b3a:	e00f      	b.n	8013b5c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	895b      	ldrh	r3, [r3, #10]
 8013b40:	2b13      	cmp	r3, #19
 8013b42:	d802      	bhi.n	8013b4a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013b44:	f06f 0301 	mvn.w	r3, #1
 8013b48:	e020      	b.n	8013b8c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	685b      	ldr	r3, [r3, #4]
 8013b4e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013b50:	69fb      	ldr	r3, [r7, #28]
 8013b52:	691b      	ldr	r3, [r3, #16]
 8013b54:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013b56:	f107 0314 	add.w	r3, r7, #20
 8013b5a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d00c      	beq.n	8013b7e <ip4_output_if_src+0x12e>
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	891a      	ldrh	r2, [r3, #8]
 8013b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013b6c:	429a      	cmp	r2, r3
 8013b6e:	d906      	bls.n	8013b7e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013b70:	687a      	ldr	r2, [r7, #4]
 8013b72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013b74:	68f8      	ldr	r0, [r7, #12]
 8013b76:	f000 fd4d 	bl	8014614 <ip4_frag>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	e006      	b.n	8013b8c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b80:	695b      	ldr	r3, [r3, #20]
 8013b82:	687a      	ldr	r2, [r7, #4]
 8013b84:	68f9      	ldr	r1, [r7, #12]
 8013b86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b88:	4798      	blx	r3
 8013b8a:	4603      	mov	r3, r0
}
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	3720      	adds	r7, #32
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd80      	pop	{r7, pc}
 8013b94:	0801b7ec 	.word	0x0801b7ec
 8013b98:	0801b820 	.word	0x0801b820
 8013b9c:	0801b82c 	.word	0x0801b82c
 8013ba0:	0801b854 	.word	0x0801b854
 8013ba4:	20000516 	.word	0x20000516
 8013ba8:	0801bc40 	.word	0x0801bc40

08013bac <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013bac:	b480      	push	{r7}
 8013bae:	b085      	sub	sp, #20
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
 8013bb4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bc0:	d002      	beq.n	8013bc8 <ip4_addr_isbroadcast_u32+0x1c>
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d101      	bne.n	8013bcc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013bc8:	2301      	movs	r3, #1
 8013bca:	e02a      	b.n	8013c22 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013bcc:	683b      	ldr	r3, [r7, #0]
 8013bce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013bd2:	f003 0302 	and.w	r3, r3, #2
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d101      	bne.n	8013bde <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013bda:	2300      	movs	r3, #0
 8013bdc:	e021      	b.n	8013c22 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013bde:	683b      	ldr	r3, [r7, #0]
 8013be0:	3304      	adds	r3, #4
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	687a      	ldr	r2, [r7, #4]
 8013be6:	429a      	cmp	r2, r3
 8013be8:	d101      	bne.n	8013bee <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013bea:	2300      	movs	r3, #0
 8013bec:	e019      	b.n	8013c22 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013bee:	68fa      	ldr	r2, [r7, #12]
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	3304      	adds	r3, #4
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	405a      	eors	r2, r3
 8013bf8:	683b      	ldr	r3, [r7, #0]
 8013bfa:	3308      	adds	r3, #8
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	4013      	ands	r3, r2
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d10d      	bne.n	8013c20 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	3308      	adds	r3, #8
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	43da      	mvns	r2, r3
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013c10:	683b      	ldr	r3, [r7, #0]
 8013c12:	3308      	adds	r3, #8
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013c18:	429a      	cmp	r2, r3
 8013c1a:	d101      	bne.n	8013c20 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013c1c:	2301      	movs	r3, #1
 8013c1e:	e000      	b.n	8013c22 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013c20:	2300      	movs	r3, #0
  }
}
 8013c22:	4618      	mov	r0, r3
 8013c24:	3714      	adds	r7, #20
 8013c26:	46bd      	mov	sp, r7
 8013c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2c:	4770      	bx	lr
	...

08013c30 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b084      	sub	sp, #16
 8013c34:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013c36:	2300      	movs	r3, #0
 8013c38:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013c3a:	4b12      	ldr	r3, [pc, #72]	; (8013c84 <ip_reass_tmr+0x54>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013c40:	e018      	b.n	8013c74 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	7fdb      	ldrb	r3, [r3, #31]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d00b      	beq.n	8013c62 <ip_reass_tmr+0x32>
      r->timer--;
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	7fdb      	ldrb	r3, [r3, #31]
 8013c4e:	3b01      	subs	r3, #1
 8013c50:	b2da      	uxtb	r2, r3
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	60fb      	str	r3, [r7, #12]
 8013c60:	e008      	b.n	8013c74 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013c6c:	68b9      	ldr	r1, [r7, #8]
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f000 f80a 	bl	8013c88 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d1e3      	bne.n	8013c42 <ip_reass_tmr+0x12>
    }
  }
}
 8013c7a:	bf00      	nop
 8013c7c:	bf00      	nop
 8013c7e:	3710      	adds	r7, #16
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd80      	pop	{r7, pc}
 8013c84:	20000518 	.word	0x20000518

08013c88 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b088      	sub	sp, #32
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
 8013c90:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013c92:	2300      	movs	r3, #0
 8013c94:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013c96:	683a      	ldr	r2, [r7, #0]
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	429a      	cmp	r2, r3
 8013c9c:	d105      	bne.n	8013caa <ip_reass_free_complete_datagram+0x22>
 8013c9e:	4b45      	ldr	r3, [pc, #276]	; (8013db4 <ip_reass_free_complete_datagram+0x12c>)
 8013ca0:	22ab      	movs	r2, #171	; 0xab
 8013ca2:	4945      	ldr	r1, [pc, #276]	; (8013db8 <ip_reass_free_complete_datagram+0x130>)
 8013ca4:	4845      	ldr	r0, [pc, #276]	; (8013dbc <ip_reass_free_complete_datagram+0x134>)
 8013ca6:	f001 fc5b 	bl	8015560 <iprintf>
  if (prev != NULL) {
 8013caa:	683b      	ldr	r3, [r7, #0]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d00a      	beq.n	8013cc6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013cb0:	683b      	ldr	r3, [r7, #0]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	687a      	ldr	r2, [r7, #4]
 8013cb6:	429a      	cmp	r2, r3
 8013cb8:	d005      	beq.n	8013cc6 <ip_reass_free_complete_datagram+0x3e>
 8013cba:	4b3e      	ldr	r3, [pc, #248]	; (8013db4 <ip_reass_free_complete_datagram+0x12c>)
 8013cbc:	22ad      	movs	r2, #173	; 0xad
 8013cbe:	4940      	ldr	r1, [pc, #256]	; (8013dc0 <ip_reass_free_complete_datagram+0x138>)
 8013cc0:	483e      	ldr	r0, [pc, #248]	; (8013dbc <ip_reass_free_complete_datagram+0x134>)
 8013cc2:	f001 fc4d 	bl	8015560 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	685b      	ldr	r3, [r3, #4]
 8013cca:	685b      	ldr	r3, [r3, #4]
 8013ccc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013cce:	697b      	ldr	r3, [r7, #20]
 8013cd0:	889b      	ldrh	r3, [r3, #4]
 8013cd2:	b29b      	uxth	r3, r3
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d12a      	bne.n	8013d2e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	685b      	ldr	r3, [r3, #4]
 8013cdc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013cde:	697b      	ldr	r3, [r7, #20]
 8013ce0:	681a      	ldr	r2, [r3, #0]
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013ce6:	69bb      	ldr	r3, [r7, #24]
 8013ce8:	6858      	ldr	r0, [r3, #4]
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	3308      	adds	r3, #8
 8013cee:	2214      	movs	r2, #20
 8013cf0:	4619      	mov	r1, r3
 8013cf2:	f000 fef1 	bl	8014ad8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013cf6:	2101      	movs	r1, #1
 8013cf8:	69b8      	ldr	r0, [r7, #24]
 8013cfa:	f7ff fc29 	bl	8013550 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013cfe:	69b8      	ldr	r0, [r7, #24]
 8013d00:	f7f6 fc3c 	bl	800a57c <pbuf_clen>
 8013d04:	4603      	mov	r3, r0
 8013d06:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013d08:	8bfa      	ldrh	r2, [r7, #30]
 8013d0a:	8a7b      	ldrh	r3, [r7, #18]
 8013d0c:	4413      	add	r3, r2
 8013d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013d12:	db05      	blt.n	8013d20 <ip_reass_free_complete_datagram+0x98>
 8013d14:	4b27      	ldr	r3, [pc, #156]	; (8013db4 <ip_reass_free_complete_datagram+0x12c>)
 8013d16:	22bc      	movs	r2, #188	; 0xbc
 8013d18:	492a      	ldr	r1, [pc, #168]	; (8013dc4 <ip_reass_free_complete_datagram+0x13c>)
 8013d1a:	4828      	ldr	r0, [pc, #160]	; (8013dbc <ip_reass_free_complete_datagram+0x134>)
 8013d1c:	f001 fc20 	bl	8015560 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013d20:	8bfa      	ldrh	r2, [r7, #30]
 8013d22:	8a7b      	ldrh	r3, [r7, #18]
 8013d24:	4413      	add	r3, r2
 8013d26:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013d28:	69b8      	ldr	r0, [r7, #24]
 8013d2a:	f7f6 fb9f 	bl	800a46c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	685b      	ldr	r3, [r3, #4]
 8013d32:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013d34:	e01f      	b.n	8013d76 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013d36:	69bb      	ldr	r3, [r7, #24]
 8013d38:	685b      	ldr	r3, [r3, #4]
 8013d3a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013d3c:	69bb      	ldr	r3, [r7, #24]
 8013d3e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013d40:	697b      	ldr	r3, [r7, #20]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013d46:	68f8      	ldr	r0, [r7, #12]
 8013d48:	f7f6 fc18 	bl	800a57c <pbuf_clen>
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013d50:	8bfa      	ldrh	r2, [r7, #30]
 8013d52:	8a7b      	ldrh	r3, [r7, #18]
 8013d54:	4413      	add	r3, r2
 8013d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013d5a:	db05      	blt.n	8013d68 <ip_reass_free_complete_datagram+0xe0>
 8013d5c:	4b15      	ldr	r3, [pc, #84]	; (8013db4 <ip_reass_free_complete_datagram+0x12c>)
 8013d5e:	22cc      	movs	r2, #204	; 0xcc
 8013d60:	4918      	ldr	r1, [pc, #96]	; (8013dc4 <ip_reass_free_complete_datagram+0x13c>)
 8013d62:	4816      	ldr	r0, [pc, #88]	; (8013dbc <ip_reass_free_complete_datagram+0x134>)
 8013d64:	f001 fbfc 	bl	8015560 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013d68:	8bfa      	ldrh	r2, [r7, #30]
 8013d6a:	8a7b      	ldrh	r3, [r7, #18]
 8013d6c:	4413      	add	r3, r2
 8013d6e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013d70:	68f8      	ldr	r0, [r7, #12]
 8013d72:	f7f6 fb7b 	bl	800a46c <pbuf_free>
  while (p != NULL) {
 8013d76:	69bb      	ldr	r3, [r7, #24]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d1dc      	bne.n	8013d36 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013d7c:	6839      	ldr	r1, [r7, #0]
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	f000 f8c2 	bl	8013f08 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013d84:	4b10      	ldr	r3, [pc, #64]	; (8013dc8 <ip_reass_free_complete_datagram+0x140>)
 8013d86:	881b      	ldrh	r3, [r3, #0]
 8013d88:	8bfa      	ldrh	r2, [r7, #30]
 8013d8a:	429a      	cmp	r2, r3
 8013d8c:	d905      	bls.n	8013d9a <ip_reass_free_complete_datagram+0x112>
 8013d8e:	4b09      	ldr	r3, [pc, #36]	; (8013db4 <ip_reass_free_complete_datagram+0x12c>)
 8013d90:	22d2      	movs	r2, #210	; 0xd2
 8013d92:	490e      	ldr	r1, [pc, #56]	; (8013dcc <ip_reass_free_complete_datagram+0x144>)
 8013d94:	4809      	ldr	r0, [pc, #36]	; (8013dbc <ip_reass_free_complete_datagram+0x134>)
 8013d96:	f001 fbe3 	bl	8015560 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013d9a:	4b0b      	ldr	r3, [pc, #44]	; (8013dc8 <ip_reass_free_complete_datagram+0x140>)
 8013d9c:	881a      	ldrh	r2, [r3, #0]
 8013d9e:	8bfb      	ldrh	r3, [r7, #30]
 8013da0:	1ad3      	subs	r3, r2, r3
 8013da2:	b29a      	uxth	r2, r3
 8013da4:	4b08      	ldr	r3, [pc, #32]	; (8013dc8 <ip_reass_free_complete_datagram+0x140>)
 8013da6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013da8:	8bfb      	ldrh	r3, [r7, #30]
}
 8013daa:	4618      	mov	r0, r3
 8013dac:	3720      	adds	r7, #32
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}
 8013db2:	bf00      	nop
 8013db4:	0801b884 	.word	0x0801b884
 8013db8:	0801b8c0 	.word	0x0801b8c0
 8013dbc:	0801b8cc 	.word	0x0801b8cc
 8013dc0:	0801b8f4 	.word	0x0801b8f4
 8013dc4:	0801b908 	.word	0x0801b908
 8013dc8:	2000051c 	.word	0x2000051c
 8013dcc:	0801b928 	.word	0x0801b928

08013dd0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b08a      	sub	sp, #40	; 0x28
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
 8013dd8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013dda:	2300      	movs	r3, #0
 8013ddc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013dde:	2300      	movs	r3, #0
 8013de0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013de2:	2300      	movs	r3, #0
 8013de4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013de6:	2300      	movs	r3, #0
 8013de8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013dea:	2300      	movs	r3, #0
 8013dec:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013dee:	4b28      	ldr	r3, [pc, #160]	; (8013e90 <ip_reass_remove_oldest_datagram+0xc0>)
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013df4:	e030      	b.n	8013e58 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013df8:	695a      	ldr	r2, [r3, #20]
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	68db      	ldr	r3, [r3, #12]
 8013dfe:	429a      	cmp	r2, r3
 8013e00:	d10c      	bne.n	8013e1c <ip_reass_remove_oldest_datagram+0x4c>
 8013e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e04:	699a      	ldr	r2, [r3, #24]
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	691b      	ldr	r3, [r3, #16]
 8013e0a:	429a      	cmp	r2, r3
 8013e0c:	d106      	bne.n	8013e1c <ip_reass_remove_oldest_datagram+0x4c>
 8013e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e10:	899a      	ldrh	r2, [r3, #12]
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	889b      	ldrh	r3, [r3, #4]
 8013e16:	b29b      	uxth	r3, r3
 8013e18:	429a      	cmp	r2, r3
 8013e1a:	d014      	beq.n	8013e46 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013e1c:	693b      	ldr	r3, [r7, #16]
 8013e1e:	3301      	adds	r3, #1
 8013e20:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013e22:	6a3b      	ldr	r3, [r7, #32]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d104      	bne.n	8013e32 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e2a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013e2c:	69fb      	ldr	r3, [r7, #28]
 8013e2e:	61bb      	str	r3, [r7, #24]
 8013e30:	e009      	b.n	8013e46 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e34:	7fda      	ldrb	r2, [r3, #31]
 8013e36:	6a3b      	ldr	r3, [r7, #32]
 8013e38:	7fdb      	ldrb	r3, [r3, #31]
 8013e3a:	429a      	cmp	r2, r3
 8013e3c:	d803      	bhi.n	8013e46 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e40:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013e42:	69fb      	ldr	r3, [r7, #28]
 8013e44:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d001      	beq.n	8013e52 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e50:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d1cb      	bne.n	8013df6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013e5e:	6a3b      	ldr	r3, [r7, #32]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d008      	beq.n	8013e76 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013e64:	69b9      	ldr	r1, [r7, #24]
 8013e66:	6a38      	ldr	r0, [r7, #32]
 8013e68:	f7ff ff0e 	bl	8013c88 <ip_reass_free_complete_datagram>
 8013e6c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013e6e:	697a      	ldr	r2, [r7, #20]
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	4413      	add	r3, r2
 8013e74:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013e76:	697a      	ldr	r2, [r7, #20]
 8013e78:	683b      	ldr	r3, [r7, #0]
 8013e7a:	429a      	cmp	r2, r3
 8013e7c:	da02      	bge.n	8013e84 <ip_reass_remove_oldest_datagram+0xb4>
 8013e7e:	693b      	ldr	r3, [r7, #16]
 8013e80:	2b01      	cmp	r3, #1
 8013e82:	dcac      	bgt.n	8013dde <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013e84:	697b      	ldr	r3, [r7, #20]
}
 8013e86:	4618      	mov	r0, r3
 8013e88:	3728      	adds	r7, #40	; 0x28
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	bd80      	pop	{r7, pc}
 8013e8e:	bf00      	nop
 8013e90:	20000518 	.word	0x20000518

08013e94 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b084      	sub	sp, #16
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
 8013e9c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013e9e:	2004      	movs	r0, #4
 8013ea0:	f7f5 fc9e 	bl	80097e0 <memp_malloc>
 8013ea4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d110      	bne.n	8013ece <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013eac:	6839      	ldr	r1, [r7, #0]
 8013eae:	6878      	ldr	r0, [r7, #4]
 8013eb0:	f7ff ff8e 	bl	8013dd0 <ip_reass_remove_oldest_datagram>
 8013eb4:	4602      	mov	r2, r0
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	4293      	cmp	r3, r2
 8013eba:	dc03      	bgt.n	8013ec4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013ebc:	2004      	movs	r0, #4
 8013ebe:	f7f5 fc8f 	bl	80097e0 <memp_malloc>
 8013ec2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d101      	bne.n	8013ece <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013eca:	2300      	movs	r3, #0
 8013ecc:	e016      	b.n	8013efc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013ece:	2220      	movs	r2, #32
 8013ed0:	2100      	movs	r1, #0
 8013ed2:	68f8      	ldr	r0, [r7, #12]
 8013ed4:	f000 fe28 	bl	8014b28 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	220f      	movs	r2, #15
 8013edc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013ede:	4b09      	ldr	r3, [pc, #36]	; (8013f04 <ip_reass_enqueue_new_datagram+0x70>)
 8013ee0:	681a      	ldr	r2, [r3, #0]
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013ee6:	4a07      	ldr	r2, [pc, #28]	; (8013f04 <ip_reass_enqueue_new_datagram+0x70>)
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	3308      	adds	r3, #8
 8013ef0:	2214      	movs	r2, #20
 8013ef2:	6879      	ldr	r1, [r7, #4]
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f000 fdef 	bl	8014ad8 <memcpy>
  return ipr;
 8013efa:	68fb      	ldr	r3, [r7, #12]
}
 8013efc:	4618      	mov	r0, r3
 8013efe:	3710      	adds	r7, #16
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd80      	pop	{r7, pc}
 8013f04:	20000518 	.word	0x20000518

08013f08 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b082      	sub	sp, #8
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
 8013f10:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013f12:	4b10      	ldr	r3, [pc, #64]	; (8013f54 <ip_reass_dequeue_datagram+0x4c>)
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	687a      	ldr	r2, [r7, #4]
 8013f18:	429a      	cmp	r2, r3
 8013f1a:	d104      	bne.n	8013f26 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	4a0c      	ldr	r2, [pc, #48]	; (8013f54 <ip_reass_dequeue_datagram+0x4c>)
 8013f22:	6013      	str	r3, [r2, #0]
 8013f24:	e00d      	b.n	8013f42 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013f26:	683b      	ldr	r3, [r7, #0]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d106      	bne.n	8013f3a <ip_reass_dequeue_datagram+0x32>
 8013f2c:	4b0a      	ldr	r3, [pc, #40]	; (8013f58 <ip_reass_dequeue_datagram+0x50>)
 8013f2e:	f240 1245 	movw	r2, #325	; 0x145
 8013f32:	490a      	ldr	r1, [pc, #40]	; (8013f5c <ip_reass_dequeue_datagram+0x54>)
 8013f34:	480a      	ldr	r0, [pc, #40]	; (8013f60 <ip_reass_dequeue_datagram+0x58>)
 8013f36:	f001 fb13 	bl	8015560 <iprintf>
    prev->next = ipr->next;
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	681a      	ldr	r2, [r3, #0]
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013f42:	6879      	ldr	r1, [r7, #4]
 8013f44:	2004      	movs	r0, #4
 8013f46:	f7f5 fc97 	bl	8009878 <memp_free>
}
 8013f4a:	bf00      	nop
 8013f4c:	3708      	adds	r7, #8
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	bd80      	pop	{r7, pc}
 8013f52:	bf00      	nop
 8013f54:	20000518 	.word	0x20000518
 8013f58:	0801b884 	.word	0x0801b884
 8013f5c:	0801b94c 	.word	0x0801b94c
 8013f60:	0801b8cc 	.word	0x0801b8cc

08013f64 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b08c      	sub	sp, #48	; 0x30
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	60f8      	str	r0, [r7, #12]
 8013f6c:	60b9      	str	r1, [r7, #8]
 8013f6e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013f70:	2300      	movs	r3, #0
 8013f72:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013f74:	2301      	movs	r3, #1
 8013f76:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013f78:	68bb      	ldr	r3, [r7, #8]
 8013f7a:	685b      	ldr	r3, [r3, #4]
 8013f7c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013f7e:	69fb      	ldr	r3, [r7, #28]
 8013f80:	885b      	ldrh	r3, [r3, #2]
 8013f82:	b29b      	uxth	r3, r3
 8013f84:	4618      	mov	r0, r3
 8013f86:	f7f4 ffd5 	bl	8008f34 <lwip_htons>
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013f8e:	69fb      	ldr	r3, [r7, #28]
 8013f90:	781b      	ldrb	r3, [r3, #0]
 8013f92:	f003 030f 	and.w	r3, r3, #15
 8013f96:	b2db      	uxtb	r3, r3
 8013f98:	009b      	lsls	r3, r3, #2
 8013f9a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013f9c:	7e7b      	ldrb	r3, [r7, #25]
 8013f9e:	b29b      	uxth	r3, r3
 8013fa0:	8b7a      	ldrh	r2, [r7, #26]
 8013fa2:	429a      	cmp	r2, r3
 8013fa4:	d202      	bcs.n	8013fac <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8013faa:	e135      	b.n	8014218 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013fac:	7e7b      	ldrb	r3, [r7, #25]
 8013fae:	b29b      	uxth	r3, r3
 8013fb0:	8b7a      	ldrh	r2, [r7, #26]
 8013fb2:	1ad3      	subs	r3, r2, r3
 8013fb4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013fb6:	69fb      	ldr	r3, [r7, #28]
 8013fb8:	88db      	ldrh	r3, [r3, #6]
 8013fba:	b29b      	uxth	r3, r3
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	f7f4 ffb9 	bl	8008f34 <lwip_htons>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013fc8:	b29b      	uxth	r3, r3
 8013fca:	00db      	lsls	r3, r3, #3
 8013fcc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013fce:	68bb      	ldr	r3, [r7, #8]
 8013fd0:	685b      	ldr	r3, [r3, #4]
 8013fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	701a      	strb	r2, [r3, #0]
 8013fda:	2200      	movs	r2, #0
 8013fdc:	705a      	strb	r2, [r3, #1]
 8013fde:	2200      	movs	r2, #0
 8013fe0:	709a      	strb	r2, [r3, #2]
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fe8:	8afa      	ldrh	r2, [r7, #22]
 8013fea:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013fec:	8afa      	ldrh	r2, [r7, #22]
 8013fee:	8b7b      	ldrh	r3, [r7, #26]
 8013ff0:	4413      	add	r3, r2
 8013ff2:	b29a      	uxth	r2, r3
 8013ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ff6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ffa:	88db      	ldrh	r3, [r3, #6]
 8013ffc:	b29b      	uxth	r3, r3
 8013ffe:	8afa      	ldrh	r2, [r7, #22]
 8014000:	429a      	cmp	r2, r3
 8014002:	d902      	bls.n	801400a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014004:	f04f 33ff 	mov.w	r3, #4294967295
 8014008:	e106      	b.n	8014218 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	685b      	ldr	r3, [r3, #4]
 801400e:	627b      	str	r3, [r7, #36]	; 0x24
 8014010:	e068      	b.n	80140e4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8014012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014014:	685b      	ldr	r3, [r3, #4]
 8014016:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801401a:	889b      	ldrh	r3, [r3, #4]
 801401c:	b29a      	uxth	r2, r3
 801401e:	693b      	ldr	r3, [r7, #16]
 8014020:	889b      	ldrh	r3, [r3, #4]
 8014022:	b29b      	uxth	r3, r3
 8014024:	429a      	cmp	r2, r3
 8014026:	d235      	bcs.n	8014094 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801402a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801402c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014030:	2b00      	cmp	r3, #0
 8014032:	d020      	beq.n	8014076 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014036:	889b      	ldrh	r3, [r3, #4]
 8014038:	b29a      	uxth	r2, r3
 801403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801403c:	88db      	ldrh	r3, [r3, #6]
 801403e:	b29b      	uxth	r3, r3
 8014040:	429a      	cmp	r2, r3
 8014042:	d307      	bcc.n	8014054 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014046:	88db      	ldrh	r3, [r3, #6]
 8014048:	b29a      	uxth	r2, r3
 801404a:	693b      	ldr	r3, [r7, #16]
 801404c:	889b      	ldrh	r3, [r3, #4]
 801404e:	b29b      	uxth	r3, r3
 8014050:	429a      	cmp	r2, r3
 8014052:	d902      	bls.n	801405a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014054:	f04f 33ff 	mov.w	r3, #4294967295
 8014058:	e0de      	b.n	8014218 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801405a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801405c:	68ba      	ldr	r2, [r7, #8]
 801405e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014062:	88db      	ldrh	r3, [r3, #6]
 8014064:	b29a      	uxth	r2, r3
 8014066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014068:	889b      	ldrh	r3, [r3, #4]
 801406a:	b29b      	uxth	r3, r3
 801406c:	429a      	cmp	r2, r3
 801406e:	d03d      	beq.n	80140ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014070:	2300      	movs	r3, #0
 8014072:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014074:	e03a      	b.n	80140ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014078:	88db      	ldrh	r3, [r3, #6]
 801407a:	b29a      	uxth	r2, r3
 801407c:	693b      	ldr	r3, [r7, #16]
 801407e:	889b      	ldrh	r3, [r3, #4]
 8014080:	b29b      	uxth	r3, r3
 8014082:	429a      	cmp	r2, r3
 8014084:	d902      	bls.n	801408c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014086:	f04f 33ff 	mov.w	r3, #4294967295
 801408a:	e0c5      	b.n	8014218 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	68ba      	ldr	r2, [r7, #8]
 8014090:	605a      	str	r2, [r3, #4]
      break;
 8014092:	e02b      	b.n	80140ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014096:	889b      	ldrh	r3, [r3, #4]
 8014098:	b29a      	uxth	r2, r3
 801409a:	693b      	ldr	r3, [r7, #16]
 801409c:	889b      	ldrh	r3, [r3, #4]
 801409e:	b29b      	uxth	r3, r3
 80140a0:	429a      	cmp	r2, r3
 80140a2:	d102      	bne.n	80140aa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80140a4:	f04f 33ff 	mov.w	r3, #4294967295
 80140a8:	e0b6      	b.n	8014218 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80140aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ac:	889b      	ldrh	r3, [r3, #4]
 80140ae:	b29a      	uxth	r2, r3
 80140b0:	693b      	ldr	r3, [r7, #16]
 80140b2:	88db      	ldrh	r3, [r3, #6]
 80140b4:	b29b      	uxth	r3, r3
 80140b6:	429a      	cmp	r2, r3
 80140b8:	d202      	bcs.n	80140c0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80140ba:	f04f 33ff 	mov.w	r3, #4294967295
 80140be:	e0ab      	b.n	8014218 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80140c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d009      	beq.n	80140da <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80140c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140c8:	88db      	ldrh	r3, [r3, #6]
 80140ca:	b29a      	uxth	r2, r3
 80140cc:	693b      	ldr	r3, [r7, #16]
 80140ce:	889b      	ldrh	r3, [r3, #4]
 80140d0:	b29b      	uxth	r3, r3
 80140d2:	429a      	cmp	r2, r3
 80140d4:	d001      	beq.n	80140da <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80140d6:	2300      	movs	r3, #0
 80140d8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80140da:	693b      	ldr	r3, [r7, #16]
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80140e0:	693b      	ldr	r3, [r7, #16]
 80140e2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80140e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d193      	bne.n	8014012 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80140ea:	e000      	b.n	80140ee <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80140ec:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80140ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d12d      	bne.n	8014150 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80140f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d01c      	beq.n	8014134 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80140fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140fc:	88db      	ldrh	r3, [r3, #6]
 80140fe:	b29a      	uxth	r2, r3
 8014100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014102:	889b      	ldrh	r3, [r3, #4]
 8014104:	b29b      	uxth	r3, r3
 8014106:	429a      	cmp	r2, r3
 8014108:	d906      	bls.n	8014118 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801410a:	4b45      	ldr	r3, [pc, #276]	; (8014220 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801410c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014110:	4944      	ldr	r1, [pc, #272]	; (8014224 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014112:	4845      	ldr	r0, [pc, #276]	; (8014228 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014114:	f001 fa24 	bl	8015560 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801411a:	68ba      	ldr	r2, [r7, #8]
 801411c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014120:	88db      	ldrh	r3, [r3, #6]
 8014122:	b29a      	uxth	r2, r3
 8014124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014126:	889b      	ldrh	r3, [r3, #4]
 8014128:	b29b      	uxth	r3, r3
 801412a:	429a      	cmp	r2, r3
 801412c:	d010      	beq.n	8014150 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801412e:	2300      	movs	r3, #0
 8014130:	623b      	str	r3, [r7, #32]
 8014132:	e00d      	b.n	8014150 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	685b      	ldr	r3, [r3, #4]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d006      	beq.n	801414a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801413c:	4b38      	ldr	r3, [pc, #224]	; (8014220 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801413e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8014142:	493a      	ldr	r1, [pc, #232]	; (801422c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014144:	4838      	ldr	r0, [pc, #224]	; (8014228 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014146:	f001 fa0b 	bl	8015560 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	68ba      	ldr	r2, [r7, #8]
 801414e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d105      	bne.n	8014162 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	7f9b      	ldrb	r3, [r3, #30]
 801415a:	f003 0301 	and.w	r3, r3, #1
 801415e:	2b00      	cmp	r3, #0
 8014160:	d059      	beq.n	8014216 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8014162:	6a3b      	ldr	r3, [r7, #32]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d04f      	beq.n	8014208 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	685b      	ldr	r3, [r3, #4]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d006      	beq.n	801417e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	685b      	ldr	r3, [r3, #4]
 8014174:	685b      	ldr	r3, [r3, #4]
 8014176:	889b      	ldrh	r3, [r3, #4]
 8014178:	b29b      	uxth	r3, r3
 801417a:	2b00      	cmp	r3, #0
 801417c:	d002      	beq.n	8014184 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801417e:	2300      	movs	r3, #0
 8014180:	623b      	str	r3, [r7, #32]
 8014182:	e041      	b.n	8014208 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014186:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801418e:	e012      	b.n	80141b6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014192:	685b      	ldr	r3, [r3, #4]
 8014194:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014198:	88db      	ldrh	r3, [r3, #6]
 801419a:	b29a      	uxth	r2, r3
 801419c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801419e:	889b      	ldrh	r3, [r3, #4]
 80141a0:	b29b      	uxth	r3, r3
 80141a2:	429a      	cmp	r2, r3
 80141a4:	d002      	beq.n	80141ac <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80141a6:	2300      	movs	r3, #0
 80141a8:	623b      	str	r3, [r7, #32]
            break;
 80141aa:	e007      	b.n	80141bc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80141ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ae:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80141b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80141b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d1e9      	bne.n	8014190 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80141bc:	6a3b      	ldr	r3, [r7, #32]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d022      	beq.n	8014208 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	685b      	ldr	r3, [r3, #4]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d106      	bne.n	80141d8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80141ca:	4b15      	ldr	r3, [pc, #84]	; (8014220 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80141cc:	f240 12df 	movw	r2, #479	; 0x1df
 80141d0:	4917      	ldr	r1, [pc, #92]	; (8014230 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80141d2:	4815      	ldr	r0, [pc, #84]	; (8014228 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80141d4:	f001 f9c4 	bl	8015560 <iprintf>
          LWIP_ASSERT("sanity check",
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	685b      	ldr	r3, [r3, #4]
 80141dc:	685b      	ldr	r3, [r3, #4]
 80141de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141e0:	429a      	cmp	r2, r3
 80141e2:	d106      	bne.n	80141f2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80141e4:	4b0e      	ldr	r3, [pc, #56]	; (8014220 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80141e6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80141ea:	4911      	ldr	r1, [pc, #68]	; (8014230 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80141ec:	480e      	ldr	r0, [pc, #56]	; (8014228 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80141ee:	f001 f9b7 	bl	8015560 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80141f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d006      	beq.n	8014208 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80141fa:	4b09      	ldr	r3, [pc, #36]	; (8014220 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80141fc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8014200:	490c      	ldr	r1, [pc, #48]	; (8014234 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014202:	4809      	ldr	r0, [pc, #36]	; (8014228 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014204:	f001 f9ac 	bl	8015560 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014208:	6a3b      	ldr	r3, [r7, #32]
 801420a:	2b00      	cmp	r3, #0
 801420c:	bf14      	ite	ne
 801420e:	2301      	movne	r3, #1
 8014210:	2300      	moveq	r3, #0
 8014212:	b2db      	uxtb	r3, r3
 8014214:	e000      	b.n	8014218 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014216:	2300      	movs	r3, #0
}
 8014218:	4618      	mov	r0, r3
 801421a:	3730      	adds	r7, #48	; 0x30
 801421c:	46bd      	mov	sp, r7
 801421e:	bd80      	pop	{r7, pc}
 8014220:	0801b884 	.word	0x0801b884
 8014224:	0801b968 	.word	0x0801b968
 8014228:	0801b8cc 	.word	0x0801b8cc
 801422c:	0801b988 	.word	0x0801b988
 8014230:	0801b9c0 	.word	0x0801b9c0
 8014234:	0801b9d0 	.word	0x0801b9d0

08014238 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b08e      	sub	sp, #56	; 0x38
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	685b      	ldr	r3, [r3, #4]
 8014244:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014248:	781b      	ldrb	r3, [r3, #0]
 801424a:	f003 030f 	and.w	r3, r3, #15
 801424e:	b2db      	uxtb	r3, r3
 8014250:	009b      	lsls	r3, r3, #2
 8014252:	b2db      	uxtb	r3, r3
 8014254:	2b14      	cmp	r3, #20
 8014256:	f040 8167 	bne.w	8014528 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801425c:	88db      	ldrh	r3, [r3, #6]
 801425e:	b29b      	uxth	r3, r3
 8014260:	4618      	mov	r0, r3
 8014262:	f7f4 fe67 	bl	8008f34 <lwip_htons>
 8014266:	4603      	mov	r3, r0
 8014268:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801426c:	b29b      	uxth	r3, r3
 801426e:	00db      	lsls	r3, r3, #3
 8014270:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014274:	885b      	ldrh	r3, [r3, #2]
 8014276:	b29b      	uxth	r3, r3
 8014278:	4618      	mov	r0, r3
 801427a:	f7f4 fe5b 	bl	8008f34 <lwip_htons>
 801427e:	4603      	mov	r3, r0
 8014280:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014284:	781b      	ldrb	r3, [r3, #0]
 8014286:	f003 030f 	and.w	r3, r3, #15
 801428a:	b2db      	uxtb	r3, r3
 801428c:	009b      	lsls	r3, r3, #2
 801428e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8014292:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014296:	b29b      	uxth	r3, r3
 8014298:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801429a:	429a      	cmp	r2, r3
 801429c:	f0c0 8146 	bcc.w	801452c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80142a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80142a4:	b29b      	uxth	r3, r3
 80142a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80142a8:	1ad3      	subs	r3, r2, r3
 80142aa:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80142ac:	6878      	ldr	r0, [r7, #4]
 80142ae:	f7f6 f965 	bl	800a57c <pbuf_clen>
 80142b2:	4603      	mov	r3, r0
 80142b4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80142b6:	4b9f      	ldr	r3, [pc, #636]	; (8014534 <ip4_reass+0x2fc>)
 80142b8:	881b      	ldrh	r3, [r3, #0]
 80142ba:	461a      	mov	r2, r3
 80142bc:	8c3b      	ldrh	r3, [r7, #32]
 80142be:	4413      	add	r3, r2
 80142c0:	2b0a      	cmp	r3, #10
 80142c2:	dd10      	ble.n	80142e6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80142c4:	8c3b      	ldrh	r3, [r7, #32]
 80142c6:	4619      	mov	r1, r3
 80142c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80142ca:	f7ff fd81 	bl	8013dd0 <ip_reass_remove_oldest_datagram>
 80142ce:	4603      	mov	r3, r0
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	f000 812d 	beq.w	8014530 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80142d6:	4b97      	ldr	r3, [pc, #604]	; (8014534 <ip4_reass+0x2fc>)
 80142d8:	881b      	ldrh	r3, [r3, #0]
 80142da:	461a      	mov	r2, r3
 80142dc:	8c3b      	ldrh	r3, [r7, #32]
 80142de:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80142e0:	2b0a      	cmp	r3, #10
 80142e2:	f300 8125 	bgt.w	8014530 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80142e6:	4b94      	ldr	r3, [pc, #592]	; (8014538 <ip4_reass+0x300>)
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	633b      	str	r3, [r7, #48]	; 0x30
 80142ec:	e015      	b.n	801431a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80142ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142f0:	695a      	ldr	r2, [r3, #20]
 80142f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142f4:	68db      	ldr	r3, [r3, #12]
 80142f6:	429a      	cmp	r2, r3
 80142f8:	d10c      	bne.n	8014314 <ip4_reass+0xdc>
 80142fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142fc:	699a      	ldr	r2, [r3, #24]
 80142fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014300:	691b      	ldr	r3, [r3, #16]
 8014302:	429a      	cmp	r2, r3
 8014304:	d106      	bne.n	8014314 <ip4_reass+0xdc>
 8014306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014308:	899a      	ldrh	r2, [r3, #12]
 801430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801430c:	889b      	ldrh	r3, [r3, #4]
 801430e:	b29b      	uxth	r3, r3
 8014310:	429a      	cmp	r2, r3
 8014312:	d006      	beq.n	8014322 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	633b      	str	r3, [r7, #48]	; 0x30
 801431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801431c:	2b00      	cmp	r3, #0
 801431e:	d1e6      	bne.n	80142ee <ip4_reass+0xb6>
 8014320:	e000      	b.n	8014324 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014322:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014326:	2b00      	cmp	r3, #0
 8014328:	d109      	bne.n	801433e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801432a:	8c3b      	ldrh	r3, [r7, #32]
 801432c:	4619      	mov	r1, r3
 801432e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014330:	f7ff fdb0 	bl	8013e94 <ip_reass_enqueue_new_datagram>
 8014334:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014338:	2b00      	cmp	r3, #0
 801433a:	d11c      	bne.n	8014376 <ip4_reass+0x13e>
      goto nullreturn;
 801433c:	e109      	b.n	8014552 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014340:	88db      	ldrh	r3, [r3, #6]
 8014342:	b29b      	uxth	r3, r3
 8014344:	4618      	mov	r0, r3
 8014346:	f7f4 fdf5 	bl	8008f34 <lwip_htons>
 801434a:	4603      	mov	r3, r0
 801434c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014350:	2b00      	cmp	r3, #0
 8014352:	d110      	bne.n	8014376 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014356:	89db      	ldrh	r3, [r3, #14]
 8014358:	4618      	mov	r0, r3
 801435a:	f7f4 fdeb 	bl	8008f34 <lwip_htons>
 801435e:	4603      	mov	r3, r0
 8014360:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014364:	2b00      	cmp	r3, #0
 8014366:	d006      	beq.n	8014376 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801436a:	3308      	adds	r3, #8
 801436c:	2214      	movs	r2, #20
 801436e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014370:	4618      	mov	r0, r3
 8014372:	f000 fbb1 	bl	8014ad8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014378:	88db      	ldrh	r3, [r3, #6]
 801437a:	b29b      	uxth	r3, r3
 801437c:	f003 0320 	and.w	r3, r3, #32
 8014380:	2b00      	cmp	r3, #0
 8014382:	bf0c      	ite	eq
 8014384:	2301      	moveq	r3, #1
 8014386:	2300      	movne	r3, #0
 8014388:	b2db      	uxtb	r3, r3
 801438a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801438c:	69fb      	ldr	r3, [r7, #28]
 801438e:	2b00      	cmp	r3, #0
 8014390:	d00e      	beq.n	80143b0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014392:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014394:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014396:	4413      	add	r3, r2
 8014398:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801439a:	8b7a      	ldrh	r2, [r7, #26]
 801439c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801439e:	429a      	cmp	r2, r3
 80143a0:	f0c0 80a0 	bcc.w	80144e4 <ip4_reass+0x2ac>
 80143a4:	8b7b      	ldrh	r3, [r7, #26]
 80143a6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80143aa:	4293      	cmp	r3, r2
 80143ac:	f200 809a 	bhi.w	80144e4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80143b0:	69fa      	ldr	r2, [r7, #28]
 80143b2:	6879      	ldr	r1, [r7, #4]
 80143b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80143b6:	f7ff fdd5 	bl	8013f64 <ip_reass_chain_frag_into_datagram_and_validate>
 80143ba:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80143bc:	697b      	ldr	r3, [r7, #20]
 80143be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143c2:	f000 8091 	beq.w	80144e8 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80143c6:	4b5b      	ldr	r3, [pc, #364]	; (8014534 <ip4_reass+0x2fc>)
 80143c8:	881a      	ldrh	r2, [r3, #0]
 80143ca:	8c3b      	ldrh	r3, [r7, #32]
 80143cc:	4413      	add	r3, r2
 80143ce:	b29a      	uxth	r2, r3
 80143d0:	4b58      	ldr	r3, [pc, #352]	; (8014534 <ip4_reass+0x2fc>)
 80143d2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80143d4:	69fb      	ldr	r3, [r7, #28]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d00d      	beq.n	80143f6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80143da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80143dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80143de:	4413      	add	r3, r2
 80143e0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80143e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143e4:	8a7a      	ldrh	r2, [r7, #18]
 80143e6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80143e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ea:	7f9b      	ldrb	r3, [r3, #30]
 80143ec:	f043 0301 	orr.w	r3, r3, #1
 80143f0:	b2da      	uxtb	r2, r3
 80143f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143f4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80143f6:	697b      	ldr	r3, [r7, #20]
 80143f8:	2b01      	cmp	r3, #1
 80143fa:	d171      	bne.n	80144e0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80143fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143fe:	8b9b      	ldrh	r3, [r3, #28]
 8014400:	3314      	adds	r3, #20
 8014402:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014406:	685b      	ldr	r3, [r3, #4]
 8014408:	685b      	ldr	r3, [r3, #4]
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014410:	685b      	ldr	r3, [r3, #4]
 8014412:	685b      	ldr	r3, [r3, #4]
 8014414:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014418:	3308      	adds	r3, #8
 801441a:	2214      	movs	r2, #20
 801441c:	4619      	mov	r1, r3
 801441e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014420:	f000 fb5a 	bl	8014ad8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014424:	8a3b      	ldrh	r3, [r7, #16]
 8014426:	4618      	mov	r0, r3
 8014428:	f7f4 fd84 	bl	8008f34 <lwip_htons>
 801442c:	4603      	mov	r3, r0
 801442e:	461a      	mov	r2, r3
 8014430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014432:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014436:	2200      	movs	r2, #0
 8014438:	719a      	strb	r2, [r3, #6]
 801443a:	2200      	movs	r2, #0
 801443c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014440:	2200      	movs	r2, #0
 8014442:	729a      	strb	r2, [r3, #10]
 8014444:	2200      	movs	r2, #0
 8014446:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801444a:	685b      	ldr	r3, [r3, #4]
 801444c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801444e:	e00d      	b.n	801446c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014452:	685b      	ldr	r3, [r3, #4]
 8014454:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014456:	2114      	movs	r1, #20
 8014458:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801445a:	f7f5 ff81 	bl	800a360 <pbuf_remove_header>
      pbuf_cat(p, r);
 801445e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014460:	6878      	ldr	r0, [r7, #4]
 8014462:	f7f6 f8c5 	bl	800a5f0 <pbuf_cat>
      r = iprh->next_pbuf;
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801446c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801446e:	2b00      	cmp	r3, #0
 8014470:	d1ee      	bne.n	8014450 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014472:	4b31      	ldr	r3, [pc, #196]	; (8014538 <ip4_reass+0x300>)
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014478:	429a      	cmp	r2, r3
 801447a:	d102      	bne.n	8014482 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801447c:	2300      	movs	r3, #0
 801447e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014480:	e010      	b.n	80144a4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014482:	4b2d      	ldr	r3, [pc, #180]	; (8014538 <ip4_reass+0x300>)
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014488:	e007      	b.n	801449a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014490:	429a      	cmp	r2, r3
 8014492:	d006      	beq.n	80144a2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	62fb      	str	r3, [r7, #44]	; 0x2c
 801449a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801449c:	2b00      	cmp	r3, #0
 801449e:	d1f4      	bne.n	801448a <ip4_reass+0x252>
 80144a0:	e000      	b.n	80144a4 <ip4_reass+0x26c>
          break;
 80144a2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80144a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80144a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80144a8:	f7ff fd2e 	bl	8013f08 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	f7f6 f865 	bl	800a57c <pbuf_clen>
 80144b2:	4603      	mov	r3, r0
 80144b4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80144b6:	4b1f      	ldr	r3, [pc, #124]	; (8014534 <ip4_reass+0x2fc>)
 80144b8:	881b      	ldrh	r3, [r3, #0]
 80144ba:	8c3a      	ldrh	r2, [r7, #32]
 80144bc:	429a      	cmp	r2, r3
 80144be:	d906      	bls.n	80144ce <ip4_reass+0x296>
 80144c0:	4b1e      	ldr	r3, [pc, #120]	; (801453c <ip4_reass+0x304>)
 80144c2:	f240 229b 	movw	r2, #667	; 0x29b
 80144c6:	491e      	ldr	r1, [pc, #120]	; (8014540 <ip4_reass+0x308>)
 80144c8:	481e      	ldr	r0, [pc, #120]	; (8014544 <ip4_reass+0x30c>)
 80144ca:	f001 f849 	bl	8015560 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80144ce:	4b19      	ldr	r3, [pc, #100]	; (8014534 <ip4_reass+0x2fc>)
 80144d0:	881a      	ldrh	r2, [r3, #0]
 80144d2:	8c3b      	ldrh	r3, [r7, #32]
 80144d4:	1ad3      	subs	r3, r2, r3
 80144d6:	b29a      	uxth	r2, r3
 80144d8:	4b16      	ldr	r3, [pc, #88]	; (8014534 <ip4_reass+0x2fc>)
 80144da:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	e03c      	b.n	801455a <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80144e0:	2300      	movs	r3, #0
 80144e2:	e03a      	b.n	801455a <ip4_reass+0x322>
      goto nullreturn_ipr;
 80144e4:	bf00      	nop
 80144e6:	e000      	b.n	80144ea <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80144e8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80144ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d106      	bne.n	80144fe <ip4_reass+0x2c6>
 80144f0:	4b12      	ldr	r3, [pc, #72]	; (801453c <ip4_reass+0x304>)
 80144f2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80144f6:	4914      	ldr	r1, [pc, #80]	; (8014548 <ip4_reass+0x310>)
 80144f8:	4812      	ldr	r0, [pc, #72]	; (8014544 <ip4_reass+0x30c>)
 80144fa:	f001 f831 	bl	8015560 <iprintf>
  if (ipr->p == NULL) {
 80144fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014500:	685b      	ldr	r3, [r3, #4]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d124      	bne.n	8014550 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014506:	4b0c      	ldr	r3, [pc, #48]	; (8014538 <ip4_reass+0x300>)
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801450c:	429a      	cmp	r2, r3
 801450e:	d006      	beq.n	801451e <ip4_reass+0x2e6>
 8014510:	4b0a      	ldr	r3, [pc, #40]	; (801453c <ip4_reass+0x304>)
 8014512:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014516:	490d      	ldr	r1, [pc, #52]	; (801454c <ip4_reass+0x314>)
 8014518:	480a      	ldr	r0, [pc, #40]	; (8014544 <ip4_reass+0x30c>)
 801451a:	f001 f821 	bl	8015560 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801451e:	2100      	movs	r1, #0
 8014520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014522:	f7ff fcf1 	bl	8013f08 <ip_reass_dequeue_datagram>
 8014526:	e014      	b.n	8014552 <ip4_reass+0x31a>
    goto nullreturn;
 8014528:	bf00      	nop
 801452a:	e012      	b.n	8014552 <ip4_reass+0x31a>
    goto nullreturn;
 801452c:	bf00      	nop
 801452e:	e010      	b.n	8014552 <ip4_reass+0x31a>
      goto nullreturn;
 8014530:	bf00      	nop
 8014532:	e00e      	b.n	8014552 <ip4_reass+0x31a>
 8014534:	2000051c 	.word	0x2000051c
 8014538:	20000518 	.word	0x20000518
 801453c:	0801b884 	.word	0x0801b884
 8014540:	0801b9f4 	.word	0x0801b9f4
 8014544:	0801b8cc 	.word	0x0801b8cc
 8014548:	0801ba10 	.word	0x0801ba10
 801454c:	0801ba1c 	.word	0x0801ba1c
  }

nullreturn:
 8014550:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014552:	6878      	ldr	r0, [r7, #4]
 8014554:	f7f5 ff8a 	bl	800a46c <pbuf_free>
  return NULL;
 8014558:	2300      	movs	r3, #0
}
 801455a:	4618      	mov	r0, r3
 801455c:	3738      	adds	r7, #56	; 0x38
 801455e:	46bd      	mov	sp, r7
 8014560:	bd80      	pop	{r7, pc}
 8014562:	bf00      	nop

08014564 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014568:	2005      	movs	r0, #5
 801456a:	f7f5 f939 	bl	80097e0 <memp_malloc>
 801456e:	4603      	mov	r3, r0
}
 8014570:	4618      	mov	r0, r3
 8014572:	bd80      	pop	{r7, pc}

08014574 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b082      	sub	sp, #8
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d106      	bne.n	8014590 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014582:	4b07      	ldr	r3, [pc, #28]	; (80145a0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014584:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014588:	4906      	ldr	r1, [pc, #24]	; (80145a4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801458a:	4807      	ldr	r0, [pc, #28]	; (80145a8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801458c:	f000 ffe8 	bl	8015560 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014590:	6879      	ldr	r1, [r7, #4]
 8014592:	2005      	movs	r0, #5
 8014594:	f7f5 f970 	bl	8009878 <memp_free>
}
 8014598:	bf00      	nop
 801459a:	3708      	adds	r7, #8
 801459c:	46bd      	mov	sp, r7
 801459e:	bd80      	pop	{r7, pc}
 80145a0:	0801b884 	.word	0x0801b884
 80145a4:	0801ba3c 	.word	0x0801ba3c
 80145a8:	0801b8cc 	.word	0x0801b8cc

080145ac <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b084      	sub	sp, #16
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d106      	bne.n	80145cc <ipfrag_free_pbuf_custom+0x20>
 80145be:	4b11      	ldr	r3, [pc, #68]	; (8014604 <ipfrag_free_pbuf_custom+0x58>)
 80145c0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80145c4:	4910      	ldr	r1, [pc, #64]	; (8014608 <ipfrag_free_pbuf_custom+0x5c>)
 80145c6:	4811      	ldr	r0, [pc, #68]	; (801460c <ipfrag_free_pbuf_custom+0x60>)
 80145c8:	f000 ffca 	bl	8015560 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80145cc:	68fa      	ldr	r2, [r7, #12]
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	429a      	cmp	r2, r3
 80145d2:	d006      	beq.n	80145e2 <ipfrag_free_pbuf_custom+0x36>
 80145d4:	4b0b      	ldr	r3, [pc, #44]	; (8014604 <ipfrag_free_pbuf_custom+0x58>)
 80145d6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80145da:	490d      	ldr	r1, [pc, #52]	; (8014610 <ipfrag_free_pbuf_custom+0x64>)
 80145dc:	480b      	ldr	r0, [pc, #44]	; (801460c <ipfrag_free_pbuf_custom+0x60>)
 80145de:	f000 ffbf 	bl	8015560 <iprintf>
  if (pcr->original != NULL) {
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	695b      	ldr	r3, [r3, #20]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d004      	beq.n	80145f4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	695b      	ldr	r3, [r3, #20]
 80145ee:	4618      	mov	r0, r3
 80145f0:	f7f5 ff3c 	bl	800a46c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80145f4:	68f8      	ldr	r0, [r7, #12]
 80145f6:	f7ff ffbd 	bl	8014574 <ip_frag_free_pbuf_custom_ref>
}
 80145fa:	bf00      	nop
 80145fc:	3710      	adds	r7, #16
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd80      	pop	{r7, pc}
 8014602:	bf00      	nop
 8014604:	0801b884 	.word	0x0801b884
 8014608:	0801ba48 	.word	0x0801ba48
 801460c:	0801b8cc 	.word	0x0801b8cc
 8014610:	0801ba54 	.word	0x0801ba54

08014614 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014614:	b580      	push	{r7, lr}
 8014616:	b094      	sub	sp, #80	; 0x50
 8014618:	af02      	add	r7, sp, #8
 801461a:	60f8      	str	r0, [r7, #12]
 801461c:	60b9      	str	r1, [r7, #8]
 801461e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014620:	2300      	movs	r3, #0
 8014622:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014626:	68bb      	ldr	r3, [r7, #8]
 8014628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801462a:	3b14      	subs	r3, #20
 801462c:	2b00      	cmp	r3, #0
 801462e:	da00      	bge.n	8014632 <ip4_frag+0x1e>
 8014630:	3307      	adds	r3, #7
 8014632:	10db      	asrs	r3, r3, #3
 8014634:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014636:	2314      	movs	r3, #20
 8014638:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	685b      	ldr	r3, [r3, #4]
 801463e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014642:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014646:	781b      	ldrb	r3, [r3, #0]
 8014648:	f003 030f 	and.w	r3, r3, #15
 801464c:	b2db      	uxtb	r3, r3
 801464e:	009b      	lsls	r3, r3, #2
 8014650:	b2db      	uxtb	r3, r3
 8014652:	2b14      	cmp	r3, #20
 8014654:	d002      	beq.n	801465c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014656:	f06f 0305 	mvn.w	r3, #5
 801465a:	e110      	b.n	801487e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	895b      	ldrh	r3, [r3, #10]
 8014660:	2b13      	cmp	r3, #19
 8014662:	d809      	bhi.n	8014678 <ip4_frag+0x64>
 8014664:	4b88      	ldr	r3, [pc, #544]	; (8014888 <ip4_frag+0x274>)
 8014666:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801466a:	4988      	ldr	r1, [pc, #544]	; (801488c <ip4_frag+0x278>)
 801466c:	4888      	ldr	r0, [pc, #544]	; (8014890 <ip4_frag+0x27c>)
 801466e:	f000 ff77 	bl	8015560 <iprintf>
 8014672:	f06f 0305 	mvn.w	r3, #5
 8014676:	e102      	b.n	801487e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801467a:	88db      	ldrh	r3, [r3, #6]
 801467c:	b29b      	uxth	r3, r3
 801467e:	4618      	mov	r0, r3
 8014680:	f7f4 fc58 	bl	8008f34 <lwip_htons>
 8014684:	4603      	mov	r3, r0
 8014686:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014688:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801468a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801468e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014692:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014698:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	891b      	ldrh	r3, [r3, #8]
 801469e:	3b14      	subs	r3, #20
 80146a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80146a4:	e0e1      	b.n	801486a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80146a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80146a8:	00db      	lsls	r3, r3, #3
 80146aa:	b29b      	uxth	r3, r3
 80146ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80146b0:	4293      	cmp	r3, r2
 80146b2:	bf28      	it	cs
 80146b4:	4613      	movcs	r3, r2
 80146b6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80146b8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80146bc:	2114      	movs	r1, #20
 80146be:	200e      	movs	r0, #14
 80146c0:	f7f5 fbf0 	bl	8009ea4 <pbuf_alloc>
 80146c4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80146c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	f000 80d5 	beq.w	8014878 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80146ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d0:	895b      	ldrh	r3, [r3, #10]
 80146d2:	2b13      	cmp	r3, #19
 80146d4:	d806      	bhi.n	80146e4 <ip4_frag+0xd0>
 80146d6:	4b6c      	ldr	r3, [pc, #432]	; (8014888 <ip4_frag+0x274>)
 80146d8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80146dc:	496d      	ldr	r1, [pc, #436]	; (8014894 <ip4_frag+0x280>)
 80146de:	486c      	ldr	r0, [pc, #432]	; (8014890 <ip4_frag+0x27c>)
 80146e0:	f000 ff3e 	bl	8015560 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80146e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e6:	685b      	ldr	r3, [r3, #4]
 80146e8:	2214      	movs	r2, #20
 80146ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80146ec:	4618      	mov	r0, r3
 80146ee:	f000 f9f3 	bl	8014ad8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80146f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f4:	685b      	ldr	r3, [r3, #4]
 80146f6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80146f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80146fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80146fe:	e064      	b.n	80147ca <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	895a      	ldrh	r2, [r3, #10]
 8014704:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014706:	1ad3      	subs	r3, r2, r3
 8014708:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	895b      	ldrh	r3, [r3, #10]
 801470e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014710:	429a      	cmp	r2, r3
 8014712:	d906      	bls.n	8014722 <ip4_frag+0x10e>
 8014714:	4b5c      	ldr	r3, [pc, #368]	; (8014888 <ip4_frag+0x274>)
 8014716:	f240 322d 	movw	r2, #813	; 0x32d
 801471a:	495f      	ldr	r1, [pc, #380]	; (8014898 <ip4_frag+0x284>)
 801471c:	485c      	ldr	r0, [pc, #368]	; (8014890 <ip4_frag+0x27c>)
 801471e:	f000 ff1f 	bl	8015560 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014722:	8bfa      	ldrh	r2, [r7, #30]
 8014724:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014728:	4293      	cmp	r3, r2
 801472a:	bf28      	it	cs
 801472c:	4613      	movcs	r3, r2
 801472e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014732:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014736:	2b00      	cmp	r3, #0
 8014738:	d105      	bne.n	8014746 <ip4_frag+0x132>
        poff = 0;
 801473a:	2300      	movs	r3, #0
 801473c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	60fb      	str	r3, [r7, #12]
        continue;
 8014744:	e041      	b.n	80147ca <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014746:	f7ff ff0d 	bl	8014564 <ip_frag_alloc_pbuf_custom_ref>
 801474a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801474c:	69bb      	ldr	r3, [r7, #24]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d103      	bne.n	801475a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014752:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014754:	f7f5 fe8a 	bl	800a46c <pbuf_free>
        goto memerr;
 8014758:	e08f      	b.n	801487a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801475a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014760:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014762:	4413      	add	r3, r2
 8014764:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014768:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801476c:	9201      	str	r2, [sp, #4]
 801476e:	9300      	str	r3, [sp, #0]
 8014770:	4603      	mov	r3, r0
 8014772:	2241      	movs	r2, #65	; 0x41
 8014774:	2000      	movs	r0, #0
 8014776:	f7f5 fcbf 	bl	800a0f8 <pbuf_alloced_custom>
 801477a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801477c:	697b      	ldr	r3, [r7, #20]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d106      	bne.n	8014790 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014782:	69b8      	ldr	r0, [r7, #24]
 8014784:	f7ff fef6 	bl	8014574 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014788:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801478a:	f7f5 fe6f 	bl	800a46c <pbuf_free>
        goto memerr;
 801478e:	e074      	b.n	801487a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014790:	68f8      	ldr	r0, [r7, #12]
 8014792:	f7f5 ff0b 	bl	800a5ac <pbuf_ref>
      pcr->original = p;
 8014796:	69bb      	ldr	r3, [r7, #24]
 8014798:	68fa      	ldr	r2, [r7, #12]
 801479a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801479c:	69bb      	ldr	r3, [r7, #24]
 801479e:	4a3f      	ldr	r2, [pc, #252]	; (801489c <ip4_frag+0x288>)
 80147a0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80147a2:	6979      	ldr	r1, [r7, #20]
 80147a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147a6:	f7f5 ff23 	bl	800a5f0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80147aa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80147ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80147b2:	1ad3      	subs	r3, r2, r3
 80147b4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80147b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d004      	beq.n	80147ca <ip4_frag+0x1b6>
        poff = 0;
 80147c0:	2300      	movs	r3, #0
 80147c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80147ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d196      	bne.n	8014700 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80147d2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80147d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80147d8:	4413      	add	r3, r2
 80147da:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80147dc:	68bb      	ldr	r3, [r7, #8]
 80147de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80147e0:	f1a3 0213 	sub.w	r2, r3, #19
 80147e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80147e8:	429a      	cmp	r2, r3
 80147ea:	bfcc      	ite	gt
 80147ec:	2301      	movgt	r3, #1
 80147ee:	2300      	movle	r3, #0
 80147f0:	b2db      	uxtb	r3, r3
 80147f2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80147f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80147f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80147fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80147fe:	6a3b      	ldr	r3, [r7, #32]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d002      	beq.n	801480a <ip4_frag+0x1f6>
 8014804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014806:	2b00      	cmp	r3, #0
 8014808:	d003      	beq.n	8014812 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801480a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801480c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014810:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014812:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014814:	4618      	mov	r0, r3
 8014816:	f7f4 fb8d 	bl	8008f34 <lwip_htons>
 801481a:	4603      	mov	r3, r0
 801481c:	461a      	mov	r2, r3
 801481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014820:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014822:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014824:	3314      	adds	r3, #20
 8014826:	b29b      	uxth	r3, r3
 8014828:	4618      	mov	r0, r3
 801482a:	f7f4 fb83 	bl	8008f34 <lwip_htons>
 801482e:	4603      	mov	r3, r0
 8014830:	461a      	mov	r2, r3
 8014832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014834:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014838:	2200      	movs	r2, #0
 801483a:	729a      	strb	r2, [r3, #10]
 801483c:	2200      	movs	r2, #0
 801483e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014840:	68bb      	ldr	r3, [r7, #8]
 8014842:	695b      	ldr	r3, [r3, #20]
 8014844:	687a      	ldr	r2, [r7, #4]
 8014846:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014848:	68b8      	ldr	r0, [r7, #8]
 801484a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801484c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801484e:	f7f5 fe0d 	bl	800a46c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014852:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014856:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014858:	1ad3      	subs	r3, r2, r3
 801485a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801485e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014862:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014864:	4413      	add	r3, r2
 8014866:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801486a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801486e:	2b00      	cmp	r3, #0
 8014870:	f47f af19 	bne.w	80146a6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014874:	2300      	movs	r3, #0
 8014876:	e002      	b.n	801487e <ip4_frag+0x26a>
      goto memerr;
 8014878:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801487a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801487e:	4618      	mov	r0, r3
 8014880:	3748      	adds	r7, #72	; 0x48
 8014882:	46bd      	mov	sp, r7
 8014884:	bd80      	pop	{r7, pc}
 8014886:	bf00      	nop
 8014888:	0801b884 	.word	0x0801b884
 801488c:	0801ba60 	.word	0x0801ba60
 8014890:	0801b8cc 	.word	0x0801b8cc
 8014894:	0801ba7c 	.word	0x0801ba7c
 8014898:	0801ba9c 	.word	0x0801ba9c
 801489c:	080145ad 	.word	0x080145ad

080148a0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b086      	sub	sp, #24
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
 80148a8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80148aa:	230e      	movs	r3, #14
 80148ac:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	895b      	ldrh	r3, [r3, #10]
 80148b2:	2b0e      	cmp	r3, #14
 80148b4:	d96e      	bls.n	8014994 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	7bdb      	ldrb	r3, [r3, #15]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d106      	bne.n	80148cc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80148be:	683b      	ldr	r3, [r7, #0]
 80148c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80148c4:	3301      	adds	r3, #1
 80148c6:	b2da      	uxtb	r2, r3
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	685b      	ldr	r3, [r3, #4]
 80148d0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80148d2:	693b      	ldr	r3, [r7, #16]
 80148d4:	7b1a      	ldrb	r2, [r3, #12]
 80148d6:	7b5b      	ldrb	r3, [r3, #13]
 80148d8:	021b      	lsls	r3, r3, #8
 80148da:	4313      	orrs	r3, r2
 80148dc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80148de:	693b      	ldr	r3, [r7, #16]
 80148e0:	781b      	ldrb	r3, [r3, #0]
 80148e2:	f003 0301 	and.w	r3, r3, #1
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d023      	beq.n	8014932 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80148ea:	693b      	ldr	r3, [r7, #16]
 80148ec:	781b      	ldrb	r3, [r3, #0]
 80148ee:	2b01      	cmp	r3, #1
 80148f0:	d10f      	bne.n	8014912 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80148f2:	693b      	ldr	r3, [r7, #16]
 80148f4:	785b      	ldrb	r3, [r3, #1]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d11b      	bne.n	8014932 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80148fa:	693b      	ldr	r3, [r7, #16]
 80148fc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80148fe:	2b5e      	cmp	r3, #94	; 0x5e
 8014900:	d117      	bne.n	8014932 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	7b5b      	ldrb	r3, [r3, #13]
 8014906:	f043 0310 	orr.w	r3, r3, #16
 801490a:	b2da      	uxtb	r2, r3
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	735a      	strb	r2, [r3, #13]
 8014910:	e00f      	b.n	8014932 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014912:	693b      	ldr	r3, [r7, #16]
 8014914:	2206      	movs	r2, #6
 8014916:	4928      	ldr	r1, [pc, #160]	; (80149b8 <ethernet_input+0x118>)
 8014918:	4618      	mov	r0, r3
 801491a:	f000 f8cf 	bl	8014abc <memcmp>
 801491e:	4603      	mov	r3, r0
 8014920:	2b00      	cmp	r3, #0
 8014922:	d106      	bne.n	8014932 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	7b5b      	ldrb	r3, [r3, #13]
 8014928:	f043 0308 	orr.w	r3, r3, #8
 801492c:	b2da      	uxtb	r2, r3
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014932:	89fb      	ldrh	r3, [r7, #14]
 8014934:	2b08      	cmp	r3, #8
 8014936:	d003      	beq.n	8014940 <ethernet_input+0xa0>
 8014938:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801493c:	d014      	beq.n	8014968 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801493e:	e032      	b.n	80149a6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014940:	683b      	ldr	r3, [r7, #0]
 8014942:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014946:	f003 0308 	and.w	r3, r3, #8
 801494a:	2b00      	cmp	r3, #0
 801494c:	d024      	beq.n	8014998 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801494e:	8afb      	ldrh	r3, [r7, #22]
 8014950:	4619      	mov	r1, r3
 8014952:	6878      	ldr	r0, [r7, #4]
 8014954:	f7f5 fd04 	bl	800a360 <pbuf_remove_header>
 8014958:	4603      	mov	r3, r0
 801495a:	2b00      	cmp	r3, #0
 801495c:	d11e      	bne.n	801499c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801495e:	6839      	ldr	r1, [r7, #0]
 8014960:	6878      	ldr	r0, [r7, #4]
 8014962:	f7fe ff09 	bl	8013778 <ip4_input>
      break;
 8014966:	e013      	b.n	8014990 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014968:	683b      	ldr	r3, [r7, #0]
 801496a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801496e:	f003 0308 	and.w	r3, r3, #8
 8014972:	2b00      	cmp	r3, #0
 8014974:	d014      	beq.n	80149a0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014976:	8afb      	ldrh	r3, [r7, #22]
 8014978:	4619      	mov	r1, r3
 801497a:	6878      	ldr	r0, [r7, #4]
 801497c:	f7f5 fcf0 	bl	800a360 <pbuf_remove_header>
 8014980:	4603      	mov	r3, r0
 8014982:	2b00      	cmp	r3, #0
 8014984:	d10e      	bne.n	80149a4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014986:	6839      	ldr	r1, [r7, #0]
 8014988:	6878      	ldr	r0, [r7, #4]
 801498a:	f7fe f8a5 	bl	8012ad8 <etharp_input>
      break;
 801498e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014990:	2300      	movs	r3, #0
 8014992:	e00c      	b.n	80149ae <ethernet_input+0x10e>
    goto free_and_return;
 8014994:	bf00      	nop
 8014996:	e006      	b.n	80149a6 <ethernet_input+0x106>
        goto free_and_return;
 8014998:	bf00      	nop
 801499a:	e004      	b.n	80149a6 <ethernet_input+0x106>
        goto free_and_return;
 801499c:	bf00      	nop
 801499e:	e002      	b.n	80149a6 <ethernet_input+0x106>
        goto free_and_return;
 80149a0:	bf00      	nop
 80149a2:	e000      	b.n	80149a6 <ethernet_input+0x106>
        goto free_and_return;
 80149a4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80149a6:	6878      	ldr	r0, [r7, #4]
 80149a8:	f7f5 fd60 	bl	800a46c <pbuf_free>
  return ERR_OK;
 80149ac:	2300      	movs	r3, #0
}
 80149ae:	4618      	mov	r0, r3
 80149b0:	3718      	adds	r7, #24
 80149b2:	46bd      	mov	sp, r7
 80149b4:	bd80      	pop	{r7, pc}
 80149b6:	bf00      	nop
 80149b8:	0801bc48 	.word	0x0801bc48

080149bc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80149bc:	b580      	push	{r7, lr}
 80149be:	b086      	sub	sp, #24
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	60f8      	str	r0, [r7, #12]
 80149c4:	60b9      	str	r1, [r7, #8]
 80149c6:	607a      	str	r2, [r7, #4]
 80149c8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80149ca:	8c3b      	ldrh	r3, [r7, #32]
 80149cc:	4618      	mov	r0, r3
 80149ce:	f7f4 fab1 	bl	8008f34 <lwip_htons>
 80149d2:	4603      	mov	r3, r0
 80149d4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80149d6:	210e      	movs	r1, #14
 80149d8:	68b8      	ldr	r0, [r7, #8]
 80149da:	f7f5 fcb1 	bl	800a340 <pbuf_add_header>
 80149de:	4603      	mov	r3, r0
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d125      	bne.n	8014a30 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80149e4:	68bb      	ldr	r3, [r7, #8]
 80149e6:	685b      	ldr	r3, [r3, #4]
 80149e8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80149ea:	693b      	ldr	r3, [r7, #16]
 80149ec:	8afa      	ldrh	r2, [r7, #22]
 80149ee:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80149f0:	693b      	ldr	r3, [r7, #16]
 80149f2:	2206      	movs	r2, #6
 80149f4:	6839      	ldr	r1, [r7, #0]
 80149f6:	4618      	mov	r0, r3
 80149f8:	f000 f86e 	bl	8014ad8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80149fc:	693b      	ldr	r3, [r7, #16]
 80149fe:	3306      	adds	r3, #6
 8014a00:	2206      	movs	r2, #6
 8014a02:	6879      	ldr	r1, [r7, #4]
 8014a04:	4618      	mov	r0, r3
 8014a06:	f000 f867 	bl	8014ad8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014a10:	2b06      	cmp	r3, #6
 8014a12:	d006      	beq.n	8014a22 <ethernet_output+0x66>
 8014a14:	4b0a      	ldr	r3, [pc, #40]	; (8014a40 <ethernet_output+0x84>)
 8014a16:	f44f 7299 	mov.w	r2, #306	; 0x132
 8014a1a:	490a      	ldr	r1, [pc, #40]	; (8014a44 <ethernet_output+0x88>)
 8014a1c:	480a      	ldr	r0, [pc, #40]	; (8014a48 <ethernet_output+0x8c>)
 8014a1e:	f000 fd9f 	bl	8015560 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	699b      	ldr	r3, [r3, #24]
 8014a26:	68b9      	ldr	r1, [r7, #8]
 8014a28:	68f8      	ldr	r0, [r7, #12]
 8014a2a:	4798      	blx	r3
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	e002      	b.n	8014a36 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014a30:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014a32:	f06f 0301 	mvn.w	r3, #1
}
 8014a36:	4618      	mov	r0, r3
 8014a38:	3718      	adds	r7, #24
 8014a3a:	46bd      	mov	sp, r7
 8014a3c:	bd80      	pop	{r7, pc}
 8014a3e:	bf00      	nop
 8014a40:	0801baac 	.word	0x0801baac
 8014a44:	0801bae4 	.word	0x0801bae4
 8014a48:	0801bb18 	.word	0x0801bb18

08014a4c <atoi>:
 8014a4c:	220a      	movs	r2, #10
 8014a4e:	2100      	movs	r1, #0
 8014a50:	f000 bed0 	b.w	80157f4 <strtol>

08014a54 <__libc_init_array>:
 8014a54:	b570      	push	{r4, r5, r6, lr}
 8014a56:	4d0d      	ldr	r5, [pc, #52]	; (8014a8c <__libc_init_array+0x38>)
 8014a58:	4c0d      	ldr	r4, [pc, #52]	; (8014a90 <__libc_init_array+0x3c>)
 8014a5a:	1b64      	subs	r4, r4, r5
 8014a5c:	10a4      	asrs	r4, r4, #2
 8014a5e:	2600      	movs	r6, #0
 8014a60:	42a6      	cmp	r6, r4
 8014a62:	d109      	bne.n	8014a78 <__libc_init_array+0x24>
 8014a64:	4d0b      	ldr	r5, [pc, #44]	; (8014a94 <__libc_init_array+0x40>)
 8014a66:	4c0c      	ldr	r4, [pc, #48]	; (8014a98 <__libc_init_array+0x44>)
 8014a68:	f003 ffac 	bl	80189c4 <_init>
 8014a6c:	1b64      	subs	r4, r4, r5
 8014a6e:	10a4      	asrs	r4, r4, #2
 8014a70:	2600      	movs	r6, #0
 8014a72:	42a6      	cmp	r6, r4
 8014a74:	d105      	bne.n	8014a82 <__libc_init_array+0x2e>
 8014a76:	bd70      	pop	{r4, r5, r6, pc}
 8014a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a7c:	4798      	blx	r3
 8014a7e:	3601      	adds	r6, #1
 8014a80:	e7ee      	b.n	8014a60 <__libc_init_array+0xc>
 8014a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a86:	4798      	blx	r3
 8014a88:	3601      	adds	r6, #1
 8014a8a:	e7f2      	b.n	8014a72 <__libc_init_array+0x1e>
 8014a8c:	0801c0e0 	.word	0x0801c0e0
 8014a90:	0801c0e0 	.word	0x0801c0e0
 8014a94:	0801c0e0 	.word	0x0801c0e0
 8014a98:	0801c0e4 	.word	0x0801c0e4

08014a9c <malloc>:
 8014a9c:	4b02      	ldr	r3, [pc, #8]	; (8014aa8 <malloc+0xc>)
 8014a9e:	4601      	mov	r1, r0
 8014aa0:	6818      	ldr	r0, [r3, #0]
 8014aa2:	f000 b899 	b.w	8014bd8 <_malloc_r>
 8014aa6:	bf00      	nop
 8014aa8:	20000024 	.word	0x20000024

08014aac <free>:
 8014aac:	4b02      	ldr	r3, [pc, #8]	; (8014ab8 <free+0xc>)
 8014aae:	4601      	mov	r1, r0
 8014ab0:	6818      	ldr	r0, [r3, #0]
 8014ab2:	f000 b841 	b.w	8014b38 <_free_r>
 8014ab6:	bf00      	nop
 8014ab8:	20000024 	.word	0x20000024

08014abc <memcmp>:
 8014abc:	b530      	push	{r4, r5, lr}
 8014abe:	3901      	subs	r1, #1
 8014ac0:	2400      	movs	r4, #0
 8014ac2:	42a2      	cmp	r2, r4
 8014ac4:	d101      	bne.n	8014aca <memcmp+0xe>
 8014ac6:	2000      	movs	r0, #0
 8014ac8:	e005      	b.n	8014ad6 <memcmp+0x1a>
 8014aca:	5d03      	ldrb	r3, [r0, r4]
 8014acc:	3401      	adds	r4, #1
 8014ace:	5d0d      	ldrb	r5, [r1, r4]
 8014ad0:	42ab      	cmp	r3, r5
 8014ad2:	d0f6      	beq.n	8014ac2 <memcmp+0x6>
 8014ad4:	1b58      	subs	r0, r3, r5
 8014ad6:	bd30      	pop	{r4, r5, pc}

08014ad8 <memcpy>:
 8014ad8:	440a      	add	r2, r1
 8014ada:	4291      	cmp	r1, r2
 8014adc:	f100 33ff 	add.w	r3, r0, #4294967295
 8014ae0:	d100      	bne.n	8014ae4 <memcpy+0xc>
 8014ae2:	4770      	bx	lr
 8014ae4:	b510      	push	{r4, lr}
 8014ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014aea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014aee:	4291      	cmp	r1, r2
 8014af0:	d1f9      	bne.n	8014ae6 <memcpy+0xe>
 8014af2:	bd10      	pop	{r4, pc}

08014af4 <memmove>:
 8014af4:	4288      	cmp	r0, r1
 8014af6:	b510      	push	{r4, lr}
 8014af8:	eb01 0402 	add.w	r4, r1, r2
 8014afc:	d902      	bls.n	8014b04 <memmove+0x10>
 8014afe:	4284      	cmp	r4, r0
 8014b00:	4623      	mov	r3, r4
 8014b02:	d807      	bhi.n	8014b14 <memmove+0x20>
 8014b04:	1e43      	subs	r3, r0, #1
 8014b06:	42a1      	cmp	r1, r4
 8014b08:	d008      	beq.n	8014b1c <memmove+0x28>
 8014b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014b0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014b12:	e7f8      	b.n	8014b06 <memmove+0x12>
 8014b14:	4402      	add	r2, r0
 8014b16:	4601      	mov	r1, r0
 8014b18:	428a      	cmp	r2, r1
 8014b1a:	d100      	bne.n	8014b1e <memmove+0x2a>
 8014b1c:	bd10      	pop	{r4, pc}
 8014b1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014b22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014b26:	e7f7      	b.n	8014b18 <memmove+0x24>

08014b28 <memset>:
 8014b28:	4402      	add	r2, r0
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	4293      	cmp	r3, r2
 8014b2e:	d100      	bne.n	8014b32 <memset+0xa>
 8014b30:	4770      	bx	lr
 8014b32:	f803 1b01 	strb.w	r1, [r3], #1
 8014b36:	e7f9      	b.n	8014b2c <memset+0x4>

08014b38 <_free_r>:
 8014b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014b3a:	2900      	cmp	r1, #0
 8014b3c:	d048      	beq.n	8014bd0 <_free_r+0x98>
 8014b3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b42:	9001      	str	r0, [sp, #4]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	f1a1 0404 	sub.w	r4, r1, #4
 8014b4a:	bfb8      	it	lt
 8014b4c:	18e4      	addlt	r4, r4, r3
 8014b4e:	f001 fe09 	bl	8016764 <__malloc_lock>
 8014b52:	4a20      	ldr	r2, [pc, #128]	; (8014bd4 <_free_r+0x9c>)
 8014b54:	9801      	ldr	r0, [sp, #4]
 8014b56:	6813      	ldr	r3, [r2, #0]
 8014b58:	4615      	mov	r5, r2
 8014b5a:	b933      	cbnz	r3, 8014b6a <_free_r+0x32>
 8014b5c:	6063      	str	r3, [r4, #4]
 8014b5e:	6014      	str	r4, [r2, #0]
 8014b60:	b003      	add	sp, #12
 8014b62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b66:	f001 be03 	b.w	8016770 <__malloc_unlock>
 8014b6a:	42a3      	cmp	r3, r4
 8014b6c:	d90b      	bls.n	8014b86 <_free_r+0x4e>
 8014b6e:	6821      	ldr	r1, [r4, #0]
 8014b70:	1862      	adds	r2, r4, r1
 8014b72:	4293      	cmp	r3, r2
 8014b74:	bf04      	itt	eq
 8014b76:	681a      	ldreq	r2, [r3, #0]
 8014b78:	685b      	ldreq	r3, [r3, #4]
 8014b7a:	6063      	str	r3, [r4, #4]
 8014b7c:	bf04      	itt	eq
 8014b7e:	1852      	addeq	r2, r2, r1
 8014b80:	6022      	streq	r2, [r4, #0]
 8014b82:	602c      	str	r4, [r5, #0]
 8014b84:	e7ec      	b.n	8014b60 <_free_r+0x28>
 8014b86:	461a      	mov	r2, r3
 8014b88:	685b      	ldr	r3, [r3, #4]
 8014b8a:	b10b      	cbz	r3, 8014b90 <_free_r+0x58>
 8014b8c:	42a3      	cmp	r3, r4
 8014b8e:	d9fa      	bls.n	8014b86 <_free_r+0x4e>
 8014b90:	6811      	ldr	r1, [r2, #0]
 8014b92:	1855      	adds	r5, r2, r1
 8014b94:	42a5      	cmp	r5, r4
 8014b96:	d10b      	bne.n	8014bb0 <_free_r+0x78>
 8014b98:	6824      	ldr	r4, [r4, #0]
 8014b9a:	4421      	add	r1, r4
 8014b9c:	1854      	adds	r4, r2, r1
 8014b9e:	42a3      	cmp	r3, r4
 8014ba0:	6011      	str	r1, [r2, #0]
 8014ba2:	d1dd      	bne.n	8014b60 <_free_r+0x28>
 8014ba4:	681c      	ldr	r4, [r3, #0]
 8014ba6:	685b      	ldr	r3, [r3, #4]
 8014ba8:	6053      	str	r3, [r2, #4]
 8014baa:	4421      	add	r1, r4
 8014bac:	6011      	str	r1, [r2, #0]
 8014bae:	e7d7      	b.n	8014b60 <_free_r+0x28>
 8014bb0:	d902      	bls.n	8014bb8 <_free_r+0x80>
 8014bb2:	230c      	movs	r3, #12
 8014bb4:	6003      	str	r3, [r0, #0]
 8014bb6:	e7d3      	b.n	8014b60 <_free_r+0x28>
 8014bb8:	6825      	ldr	r5, [r4, #0]
 8014bba:	1961      	adds	r1, r4, r5
 8014bbc:	428b      	cmp	r3, r1
 8014bbe:	bf04      	itt	eq
 8014bc0:	6819      	ldreq	r1, [r3, #0]
 8014bc2:	685b      	ldreq	r3, [r3, #4]
 8014bc4:	6063      	str	r3, [r4, #4]
 8014bc6:	bf04      	itt	eq
 8014bc8:	1949      	addeq	r1, r1, r5
 8014bca:	6021      	streq	r1, [r4, #0]
 8014bcc:	6054      	str	r4, [r2, #4]
 8014bce:	e7c7      	b.n	8014b60 <_free_r+0x28>
 8014bd0:	b003      	add	sp, #12
 8014bd2:	bd30      	pop	{r4, r5, pc}
 8014bd4:	20000520 	.word	0x20000520

08014bd8 <_malloc_r>:
 8014bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bda:	1ccd      	adds	r5, r1, #3
 8014bdc:	f025 0503 	bic.w	r5, r5, #3
 8014be0:	3508      	adds	r5, #8
 8014be2:	2d0c      	cmp	r5, #12
 8014be4:	bf38      	it	cc
 8014be6:	250c      	movcc	r5, #12
 8014be8:	2d00      	cmp	r5, #0
 8014bea:	4606      	mov	r6, r0
 8014bec:	db01      	blt.n	8014bf2 <_malloc_r+0x1a>
 8014bee:	42a9      	cmp	r1, r5
 8014bf0:	d903      	bls.n	8014bfa <_malloc_r+0x22>
 8014bf2:	230c      	movs	r3, #12
 8014bf4:	6033      	str	r3, [r6, #0]
 8014bf6:	2000      	movs	r0, #0
 8014bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bfa:	f001 fdb3 	bl	8016764 <__malloc_lock>
 8014bfe:	4921      	ldr	r1, [pc, #132]	; (8014c84 <_malloc_r+0xac>)
 8014c00:	680a      	ldr	r2, [r1, #0]
 8014c02:	4614      	mov	r4, r2
 8014c04:	b99c      	cbnz	r4, 8014c2e <_malloc_r+0x56>
 8014c06:	4f20      	ldr	r7, [pc, #128]	; (8014c88 <_malloc_r+0xb0>)
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	b923      	cbnz	r3, 8014c16 <_malloc_r+0x3e>
 8014c0c:	4621      	mov	r1, r4
 8014c0e:	4630      	mov	r0, r6
 8014c10:	f000 fcfe 	bl	8015610 <_sbrk_r>
 8014c14:	6038      	str	r0, [r7, #0]
 8014c16:	4629      	mov	r1, r5
 8014c18:	4630      	mov	r0, r6
 8014c1a:	f000 fcf9 	bl	8015610 <_sbrk_r>
 8014c1e:	1c43      	adds	r3, r0, #1
 8014c20:	d123      	bne.n	8014c6a <_malloc_r+0x92>
 8014c22:	230c      	movs	r3, #12
 8014c24:	6033      	str	r3, [r6, #0]
 8014c26:	4630      	mov	r0, r6
 8014c28:	f001 fda2 	bl	8016770 <__malloc_unlock>
 8014c2c:	e7e3      	b.n	8014bf6 <_malloc_r+0x1e>
 8014c2e:	6823      	ldr	r3, [r4, #0]
 8014c30:	1b5b      	subs	r3, r3, r5
 8014c32:	d417      	bmi.n	8014c64 <_malloc_r+0x8c>
 8014c34:	2b0b      	cmp	r3, #11
 8014c36:	d903      	bls.n	8014c40 <_malloc_r+0x68>
 8014c38:	6023      	str	r3, [r4, #0]
 8014c3a:	441c      	add	r4, r3
 8014c3c:	6025      	str	r5, [r4, #0]
 8014c3e:	e004      	b.n	8014c4a <_malloc_r+0x72>
 8014c40:	6863      	ldr	r3, [r4, #4]
 8014c42:	42a2      	cmp	r2, r4
 8014c44:	bf0c      	ite	eq
 8014c46:	600b      	streq	r3, [r1, #0]
 8014c48:	6053      	strne	r3, [r2, #4]
 8014c4a:	4630      	mov	r0, r6
 8014c4c:	f001 fd90 	bl	8016770 <__malloc_unlock>
 8014c50:	f104 000b 	add.w	r0, r4, #11
 8014c54:	1d23      	adds	r3, r4, #4
 8014c56:	f020 0007 	bic.w	r0, r0, #7
 8014c5a:	1ac2      	subs	r2, r0, r3
 8014c5c:	d0cc      	beq.n	8014bf8 <_malloc_r+0x20>
 8014c5e:	1a1b      	subs	r3, r3, r0
 8014c60:	50a3      	str	r3, [r4, r2]
 8014c62:	e7c9      	b.n	8014bf8 <_malloc_r+0x20>
 8014c64:	4622      	mov	r2, r4
 8014c66:	6864      	ldr	r4, [r4, #4]
 8014c68:	e7cc      	b.n	8014c04 <_malloc_r+0x2c>
 8014c6a:	1cc4      	adds	r4, r0, #3
 8014c6c:	f024 0403 	bic.w	r4, r4, #3
 8014c70:	42a0      	cmp	r0, r4
 8014c72:	d0e3      	beq.n	8014c3c <_malloc_r+0x64>
 8014c74:	1a21      	subs	r1, r4, r0
 8014c76:	4630      	mov	r0, r6
 8014c78:	f000 fcca 	bl	8015610 <_sbrk_r>
 8014c7c:	3001      	adds	r0, #1
 8014c7e:	d1dd      	bne.n	8014c3c <_malloc_r+0x64>
 8014c80:	e7cf      	b.n	8014c22 <_malloc_r+0x4a>
 8014c82:	bf00      	nop
 8014c84:	20000520 	.word	0x20000520
 8014c88:	20000524 	.word	0x20000524

08014c8c <__cvt>:
 8014c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014c90:	ec55 4b10 	vmov	r4, r5, d0
 8014c94:	2d00      	cmp	r5, #0
 8014c96:	460e      	mov	r6, r1
 8014c98:	4619      	mov	r1, r3
 8014c9a:	462b      	mov	r3, r5
 8014c9c:	bfbb      	ittet	lt
 8014c9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014ca2:	461d      	movlt	r5, r3
 8014ca4:	2300      	movge	r3, #0
 8014ca6:	232d      	movlt	r3, #45	; 0x2d
 8014ca8:	700b      	strb	r3, [r1, #0]
 8014caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014cac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014cb0:	4691      	mov	r9, r2
 8014cb2:	f023 0820 	bic.w	r8, r3, #32
 8014cb6:	bfbc      	itt	lt
 8014cb8:	4622      	movlt	r2, r4
 8014cba:	4614      	movlt	r4, r2
 8014cbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014cc0:	d005      	beq.n	8014cce <__cvt+0x42>
 8014cc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014cc6:	d100      	bne.n	8014cca <__cvt+0x3e>
 8014cc8:	3601      	adds	r6, #1
 8014cca:	2102      	movs	r1, #2
 8014ccc:	e000      	b.n	8014cd0 <__cvt+0x44>
 8014cce:	2103      	movs	r1, #3
 8014cd0:	ab03      	add	r3, sp, #12
 8014cd2:	9301      	str	r3, [sp, #4]
 8014cd4:	ab02      	add	r3, sp, #8
 8014cd6:	9300      	str	r3, [sp, #0]
 8014cd8:	ec45 4b10 	vmov	d0, r4, r5
 8014cdc:	4653      	mov	r3, sl
 8014cde:	4632      	mov	r2, r6
 8014ce0:	f000 fe3e 	bl	8015960 <_dtoa_r>
 8014ce4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014ce8:	4607      	mov	r7, r0
 8014cea:	d102      	bne.n	8014cf2 <__cvt+0x66>
 8014cec:	f019 0f01 	tst.w	r9, #1
 8014cf0:	d022      	beq.n	8014d38 <__cvt+0xac>
 8014cf2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014cf6:	eb07 0906 	add.w	r9, r7, r6
 8014cfa:	d110      	bne.n	8014d1e <__cvt+0x92>
 8014cfc:	783b      	ldrb	r3, [r7, #0]
 8014cfe:	2b30      	cmp	r3, #48	; 0x30
 8014d00:	d10a      	bne.n	8014d18 <__cvt+0x8c>
 8014d02:	2200      	movs	r2, #0
 8014d04:	2300      	movs	r3, #0
 8014d06:	4620      	mov	r0, r4
 8014d08:	4629      	mov	r1, r5
 8014d0a:	f7eb feed 	bl	8000ae8 <__aeabi_dcmpeq>
 8014d0e:	b918      	cbnz	r0, 8014d18 <__cvt+0x8c>
 8014d10:	f1c6 0601 	rsb	r6, r6, #1
 8014d14:	f8ca 6000 	str.w	r6, [sl]
 8014d18:	f8da 3000 	ldr.w	r3, [sl]
 8014d1c:	4499      	add	r9, r3
 8014d1e:	2200      	movs	r2, #0
 8014d20:	2300      	movs	r3, #0
 8014d22:	4620      	mov	r0, r4
 8014d24:	4629      	mov	r1, r5
 8014d26:	f7eb fedf 	bl	8000ae8 <__aeabi_dcmpeq>
 8014d2a:	b108      	cbz	r0, 8014d30 <__cvt+0xa4>
 8014d2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8014d30:	2230      	movs	r2, #48	; 0x30
 8014d32:	9b03      	ldr	r3, [sp, #12]
 8014d34:	454b      	cmp	r3, r9
 8014d36:	d307      	bcc.n	8014d48 <__cvt+0xbc>
 8014d38:	9b03      	ldr	r3, [sp, #12]
 8014d3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014d3c:	1bdb      	subs	r3, r3, r7
 8014d3e:	4638      	mov	r0, r7
 8014d40:	6013      	str	r3, [r2, #0]
 8014d42:	b004      	add	sp, #16
 8014d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d48:	1c59      	adds	r1, r3, #1
 8014d4a:	9103      	str	r1, [sp, #12]
 8014d4c:	701a      	strb	r2, [r3, #0]
 8014d4e:	e7f0      	b.n	8014d32 <__cvt+0xa6>

08014d50 <__exponent>:
 8014d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d52:	4603      	mov	r3, r0
 8014d54:	2900      	cmp	r1, #0
 8014d56:	bfb8      	it	lt
 8014d58:	4249      	neglt	r1, r1
 8014d5a:	f803 2b02 	strb.w	r2, [r3], #2
 8014d5e:	bfb4      	ite	lt
 8014d60:	222d      	movlt	r2, #45	; 0x2d
 8014d62:	222b      	movge	r2, #43	; 0x2b
 8014d64:	2909      	cmp	r1, #9
 8014d66:	7042      	strb	r2, [r0, #1]
 8014d68:	dd2a      	ble.n	8014dc0 <__exponent+0x70>
 8014d6a:	f10d 0407 	add.w	r4, sp, #7
 8014d6e:	46a4      	mov	ip, r4
 8014d70:	270a      	movs	r7, #10
 8014d72:	46a6      	mov	lr, r4
 8014d74:	460a      	mov	r2, r1
 8014d76:	fb91 f6f7 	sdiv	r6, r1, r7
 8014d7a:	fb07 1516 	mls	r5, r7, r6, r1
 8014d7e:	3530      	adds	r5, #48	; 0x30
 8014d80:	2a63      	cmp	r2, #99	; 0x63
 8014d82:	f104 34ff 	add.w	r4, r4, #4294967295
 8014d86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8014d8a:	4631      	mov	r1, r6
 8014d8c:	dcf1      	bgt.n	8014d72 <__exponent+0x22>
 8014d8e:	3130      	adds	r1, #48	; 0x30
 8014d90:	f1ae 0502 	sub.w	r5, lr, #2
 8014d94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8014d98:	1c44      	adds	r4, r0, #1
 8014d9a:	4629      	mov	r1, r5
 8014d9c:	4561      	cmp	r1, ip
 8014d9e:	d30a      	bcc.n	8014db6 <__exponent+0x66>
 8014da0:	f10d 0209 	add.w	r2, sp, #9
 8014da4:	eba2 020e 	sub.w	r2, r2, lr
 8014da8:	4565      	cmp	r5, ip
 8014daa:	bf88      	it	hi
 8014dac:	2200      	movhi	r2, #0
 8014dae:	4413      	add	r3, r2
 8014db0:	1a18      	subs	r0, r3, r0
 8014db2:	b003      	add	sp, #12
 8014db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014db6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014dba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8014dbe:	e7ed      	b.n	8014d9c <__exponent+0x4c>
 8014dc0:	2330      	movs	r3, #48	; 0x30
 8014dc2:	3130      	adds	r1, #48	; 0x30
 8014dc4:	7083      	strb	r3, [r0, #2]
 8014dc6:	70c1      	strb	r1, [r0, #3]
 8014dc8:	1d03      	adds	r3, r0, #4
 8014dca:	e7f1      	b.n	8014db0 <__exponent+0x60>

08014dcc <_printf_float>:
 8014dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dd0:	ed2d 8b02 	vpush	{d8}
 8014dd4:	b08d      	sub	sp, #52	; 0x34
 8014dd6:	460c      	mov	r4, r1
 8014dd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014ddc:	4616      	mov	r6, r2
 8014dde:	461f      	mov	r7, r3
 8014de0:	4605      	mov	r5, r0
 8014de2:	f001 fcb7 	bl	8016754 <_localeconv_r>
 8014de6:	f8d0 a000 	ldr.w	sl, [r0]
 8014dea:	4650      	mov	r0, sl
 8014dec:	f7eb f9fa 	bl	80001e4 <strlen>
 8014df0:	2300      	movs	r3, #0
 8014df2:	930a      	str	r3, [sp, #40]	; 0x28
 8014df4:	6823      	ldr	r3, [r4, #0]
 8014df6:	9305      	str	r3, [sp, #20]
 8014df8:	f8d8 3000 	ldr.w	r3, [r8]
 8014dfc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014e00:	3307      	adds	r3, #7
 8014e02:	f023 0307 	bic.w	r3, r3, #7
 8014e06:	f103 0208 	add.w	r2, r3, #8
 8014e0a:	f8c8 2000 	str.w	r2, [r8]
 8014e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014e16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014e1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014e1e:	9307      	str	r3, [sp, #28]
 8014e20:	f8cd 8018 	str.w	r8, [sp, #24]
 8014e24:	ee08 0a10 	vmov	s16, r0
 8014e28:	4b9f      	ldr	r3, [pc, #636]	; (80150a8 <_printf_float+0x2dc>)
 8014e2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8014e32:	f7eb fe8b 	bl	8000b4c <__aeabi_dcmpun>
 8014e36:	bb88      	cbnz	r0, 8014e9c <_printf_float+0xd0>
 8014e38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014e3c:	4b9a      	ldr	r3, [pc, #616]	; (80150a8 <_printf_float+0x2dc>)
 8014e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8014e42:	f7eb fe65 	bl	8000b10 <__aeabi_dcmple>
 8014e46:	bb48      	cbnz	r0, 8014e9c <_printf_float+0xd0>
 8014e48:	2200      	movs	r2, #0
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	4640      	mov	r0, r8
 8014e4e:	4649      	mov	r1, r9
 8014e50:	f7eb fe54 	bl	8000afc <__aeabi_dcmplt>
 8014e54:	b110      	cbz	r0, 8014e5c <_printf_float+0x90>
 8014e56:	232d      	movs	r3, #45	; 0x2d
 8014e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014e5c:	4b93      	ldr	r3, [pc, #588]	; (80150ac <_printf_float+0x2e0>)
 8014e5e:	4894      	ldr	r0, [pc, #592]	; (80150b0 <_printf_float+0x2e4>)
 8014e60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014e64:	bf94      	ite	ls
 8014e66:	4698      	movls	r8, r3
 8014e68:	4680      	movhi	r8, r0
 8014e6a:	2303      	movs	r3, #3
 8014e6c:	6123      	str	r3, [r4, #16]
 8014e6e:	9b05      	ldr	r3, [sp, #20]
 8014e70:	f023 0204 	bic.w	r2, r3, #4
 8014e74:	6022      	str	r2, [r4, #0]
 8014e76:	f04f 0900 	mov.w	r9, #0
 8014e7a:	9700      	str	r7, [sp, #0]
 8014e7c:	4633      	mov	r3, r6
 8014e7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8014e80:	4621      	mov	r1, r4
 8014e82:	4628      	mov	r0, r5
 8014e84:	f000 f9d8 	bl	8015238 <_printf_common>
 8014e88:	3001      	adds	r0, #1
 8014e8a:	f040 8090 	bne.w	8014fae <_printf_float+0x1e2>
 8014e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8014e92:	b00d      	add	sp, #52	; 0x34
 8014e94:	ecbd 8b02 	vpop	{d8}
 8014e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e9c:	4642      	mov	r2, r8
 8014e9e:	464b      	mov	r3, r9
 8014ea0:	4640      	mov	r0, r8
 8014ea2:	4649      	mov	r1, r9
 8014ea4:	f7eb fe52 	bl	8000b4c <__aeabi_dcmpun>
 8014ea8:	b140      	cbz	r0, 8014ebc <_printf_float+0xf0>
 8014eaa:	464b      	mov	r3, r9
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	bfbc      	itt	lt
 8014eb0:	232d      	movlt	r3, #45	; 0x2d
 8014eb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014eb6:	487f      	ldr	r0, [pc, #508]	; (80150b4 <_printf_float+0x2e8>)
 8014eb8:	4b7f      	ldr	r3, [pc, #508]	; (80150b8 <_printf_float+0x2ec>)
 8014eba:	e7d1      	b.n	8014e60 <_printf_float+0x94>
 8014ebc:	6863      	ldr	r3, [r4, #4]
 8014ebe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8014ec2:	9206      	str	r2, [sp, #24]
 8014ec4:	1c5a      	adds	r2, r3, #1
 8014ec6:	d13f      	bne.n	8014f48 <_printf_float+0x17c>
 8014ec8:	2306      	movs	r3, #6
 8014eca:	6063      	str	r3, [r4, #4]
 8014ecc:	9b05      	ldr	r3, [sp, #20]
 8014ece:	6861      	ldr	r1, [r4, #4]
 8014ed0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	9303      	str	r3, [sp, #12]
 8014ed8:	ab0a      	add	r3, sp, #40	; 0x28
 8014eda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8014ede:	ab09      	add	r3, sp, #36	; 0x24
 8014ee0:	ec49 8b10 	vmov	d0, r8, r9
 8014ee4:	9300      	str	r3, [sp, #0]
 8014ee6:	6022      	str	r2, [r4, #0]
 8014ee8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014eec:	4628      	mov	r0, r5
 8014eee:	f7ff fecd 	bl	8014c8c <__cvt>
 8014ef2:	9b06      	ldr	r3, [sp, #24]
 8014ef4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014ef6:	2b47      	cmp	r3, #71	; 0x47
 8014ef8:	4680      	mov	r8, r0
 8014efa:	d108      	bne.n	8014f0e <_printf_float+0x142>
 8014efc:	1cc8      	adds	r0, r1, #3
 8014efe:	db02      	blt.n	8014f06 <_printf_float+0x13a>
 8014f00:	6863      	ldr	r3, [r4, #4]
 8014f02:	4299      	cmp	r1, r3
 8014f04:	dd41      	ble.n	8014f8a <_printf_float+0x1be>
 8014f06:	f1ab 0b02 	sub.w	fp, fp, #2
 8014f0a:	fa5f fb8b 	uxtb.w	fp, fp
 8014f0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014f12:	d820      	bhi.n	8014f56 <_printf_float+0x18a>
 8014f14:	3901      	subs	r1, #1
 8014f16:	465a      	mov	r2, fp
 8014f18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014f1c:	9109      	str	r1, [sp, #36]	; 0x24
 8014f1e:	f7ff ff17 	bl	8014d50 <__exponent>
 8014f22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f24:	1813      	adds	r3, r2, r0
 8014f26:	2a01      	cmp	r2, #1
 8014f28:	4681      	mov	r9, r0
 8014f2a:	6123      	str	r3, [r4, #16]
 8014f2c:	dc02      	bgt.n	8014f34 <_printf_float+0x168>
 8014f2e:	6822      	ldr	r2, [r4, #0]
 8014f30:	07d2      	lsls	r2, r2, #31
 8014f32:	d501      	bpl.n	8014f38 <_printf_float+0x16c>
 8014f34:	3301      	adds	r3, #1
 8014f36:	6123      	str	r3, [r4, #16]
 8014f38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d09c      	beq.n	8014e7a <_printf_float+0xae>
 8014f40:	232d      	movs	r3, #45	; 0x2d
 8014f42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014f46:	e798      	b.n	8014e7a <_printf_float+0xae>
 8014f48:	9a06      	ldr	r2, [sp, #24]
 8014f4a:	2a47      	cmp	r2, #71	; 0x47
 8014f4c:	d1be      	bne.n	8014ecc <_printf_float+0x100>
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d1bc      	bne.n	8014ecc <_printf_float+0x100>
 8014f52:	2301      	movs	r3, #1
 8014f54:	e7b9      	b.n	8014eca <_printf_float+0xfe>
 8014f56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8014f5a:	d118      	bne.n	8014f8e <_printf_float+0x1c2>
 8014f5c:	2900      	cmp	r1, #0
 8014f5e:	6863      	ldr	r3, [r4, #4]
 8014f60:	dd0b      	ble.n	8014f7a <_printf_float+0x1ae>
 8014f62:	6121      	str	r1, [r4, #16]
 8014f64:	b913      	cbnz	r3, 8014f6c <_printf_float+0x1a0>
 8014f66:	6822      	ldr	r2, [r4, #0]
 8014f68:	07d0      	lsls	r0, r2, #31
 8014f6a:	d502      	bpl.n	8014f72 <_printf_float+0x1a6>
 8014f6c:	3301      	adds	r3, #1
 8014f6e:	440b      	add	r3, r1
 8014f70:	6123      	str	r3, [r4, #16]
 8014f72:	65a1      	str	r1, [r4, #88]	; 0x58
 8014f74:	f04f 0900 	mov.w	r9, #0
 8014f78:	e7de      	b.n	8014f38 <_printf_float+0x16c>
 8014f7a:	b913      	cbnz	r3, 8014f82 <_printf_float+0x1b6>
 8014f7c:	6822      	ldr	r2, [r4, #0]
 8014f7e:	07d2      	lsls	r2, r2, #31
 8014f80:	d501      	bpl.n	8014f86 <_printf_float+0x1ba>
 8014f82:	3302      	adds	r3, #2
 8014f84:	e7f4      	b.n	8014f70 <_printf_float+0x1a4>
 8014f86:	2301      	movs	r3, #1
 8014f88:	e7f2      	b.n	8014f70 <_printf_float+0x1a4>
 8014f8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8014f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f90:	4299      	cmp	r1, r3
 8014f92:	db05      	blt.n	8014fa0 <_printf_float+0x1d4>
 8014f94:	6823      	ldr	r3, [r4, #0]
 8014f96:	6121      	str	r1, [r4, #16]
 8014f98:	07d8      	lsls	r0, r3, #31
 8014f9a:	d5ea      	bpl.n	8014f72 <_printf_float+0x1a6>
 8014f9c:	1c4b      	adds	r3, r1, #1
 8014f9e:	e7e7      	b.n	8014f70 <_printf_float+0x1a4>
 8014fa0:	2900      	cmp	r1, #0
 8014fa2:	bfd4      	ite	le
 8014fa4:	f1c1 0202 	rsble	r2, r1, #2
 8014fa8:	2201      	movgt	r2, #1
 8014faa:	4413      	add	r3, r2
 8014fac:	e7e0      	b.n	8014f70 <_printf_float+0x1a4>
 8014fae:	6823      	ldr	r3, [r4, #0]
 8014fb0:	055a      	lsls	r2, r3, #21
 8014fb2:	d407      	bmi.n	8014fc4 <_printf_float+0x1f8>
 8014fb4:	6923      	ldr	r3, [r4, #16]
 8014fb6:	4642      	mov	r2, r8
 8014fb8:	4631      	mov	r1, r6
 8014fba:	4628      	mov	r0, r5
 8014fbc:	47b8      	blx	r7
 8014fbe:	3001      	adds	r0, #1
 8014fc0:	d12c      	bne.n	801501c <_printf_float+0x250>
 8014fc2:	e764      	b.n	8014e8e <_printf_float+0xc2>
 8014fc4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014fc8:	f240 80e0 	bls.w	801518c <_printf_float+0x3c0>
 8014fcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	f7eb fd88 	bl	8000ae8 <__aeabi_dcmpeq>
 8014fd8:	2800      	cmp	r0, #0
 8014fda:	d034      	beq.n	8015046 <_printf_float+0x27a>
 8014fdc:	4a37      	ldr	r2, [pc, #220]	; (80150bc <_printf_float+0x2f0>)
 8014fde:	2301      	movs	r3, #1
 8014fe0:	4631      	mov	r1, r6
 8014fe2:	4628      	mov	r0, r5
 8014fe4:	47b8      	blx	r7
 8014fe6:	3001      	adds	r0, #1
 8014fe8:	f43f af51 	beq.w	8014e8e <_printf_float+0xc2>
 8014fec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014ff0:	429a      	cmp	r2, r3
 8014ff2:	db02      	blt.n	8014ffa <_printf_float+0x22e>
 8014ff4:	6823      	ldr	r3, [r4, #0]
 8014ff6:	07d8      	lsls	r0, r3, #31
 8014ff8:	d510      	bpl.n	801501c <_printf_float+0x250>
 8014ffa:	ee18 3a10 	vmov	r3, s16
 8014ffe:	4652      	mov	r2, sl
 8015000:	4631      	mov	r1, r6
 8015002:	4628      	mov	r0, r5
 8015004:	47b8      	blx	r7
 8015006:	3001      	adds	r0, #1
 8015008:	f43f af41 	beq.w	8014e8e <_printf_float+0xc2>
 801500c:	f04f 0800 	mov.w	r8, #0
 8015010:	f104 091a 	add.w	r9, r4, #26
 8015014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015016:	3b01      	subs	r3, #1
 8015018:	4543      	cmp	r3, r8
 801501a:	dc09      	bgt.n	8015030 <_printf_float+0x264>
 801501c:	6823      	ldr	r3, [r4, #0]
 801501e:	079b      	lsls	r3, r3, #30
 8015020:	f100 8105 	bmi.w	801522e <_printf_float+0x462>
 8015024:	68e0      	ldr	r0, [r4, #12]
 8015026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015028:	4298      	cmp	r0, r3
 801502a:	bfb8      	it	lt
 801502c:	4618      	movlt	r0, r3
 801502e:	e730      	b.n	8014e92 <_printf_float+0xc6>
 8015030:	2301      	movs	r3, #1
 8015032:	464a      	mov	r2, r9
 8015034:	4631      	mov	r1, r6
 8015036:	4628      	mov	r0, r5
 8015038:	47b8      	blx	r7
 801503a:	3001      	adds	r0, #1
 801503c:	f43f af27 	beq.w	8014e8e <_printf_float+0xc2>
 8015040:	f108 0801 	add.w	r8, r8, #1
 8015044:	e7e6      	b.n	8015014 <_printf_float+0x248>
 8015046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015048:	2b00      	cmp	r3, #0
 801504a:	dc39      	bgt.n	80150c0 <_printf_float+0x2f4>
 801504c:	4a1b      	ldr	r2, [pc, #108]	; (80150bc <_printf_float+0x2f0>)
 801504e:	2301      	movs	r3, #1
 8015050:	4631      	mov	r1, r6
 8015052:	4628      	mov	r0, r5
 8015054:	47b8      	blx	r7
 8015056:	3001      	adds	r0, #1
 8015058:	f43f af19 	beq.w	8014e8e <_printf_float+0xc2>
 801505c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015060:	4313      	orrs	r3, r2
 8015062:	d102      	bne.n	801506a <_printf_float+0x29e>
 8015064:	6823      	ldr	r3, [r4, #0]
 8015066:	07d9      	lsls	r1, r3, #31
 8015068:	d5d8      	bpl.n	801501c <_printf_float+0x250>
 801506a:	ee18 3a10 	vmov	r3, s16
 801506e:	4652      	mov	r2, sl
 8015070:	4631      	mov	r1, r6
 8015072:	4628      	mov	r0, r5
 8015074:	47b8      	blx	r7
 8015076:	3001      	adds	r0, #1
 8015078:	f43f af09 	beq.w	8014e8e <_printf_float+0xc2>
 801507c:	f04f 0900 	mov.w	r9, #0
 8015080:	f104 0a1a 	add.w	sl, r4, #26
 8015084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015086:	425b      	negs	r3, r3
 8015088:	454b      	cmp	r3, r9
 801508a:	dc01      	bgt.n	8015090 <_printf_float+0x2c4>
 801508c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801508e:	e792      	b.n	8014fb6 <_printf_float+0x1ea>
 8015090:	2301      	movs	r3, #1
 8015092:	4652      	mov	r2, sl
 8015094:	4631      	mov	r1, r6
 8015096:	4628      	mov	r0, r5
 8015098:	47b8      	blx	r7
 801509a:	3001      	adds	r0, #1
 801509c:	f43f aef7 	beq.w	8014e8e <_printf_float+0xc2>
 80150a0:	f109 0901 	add.w	r9, r9, #1
 80150a4:	e7ee      	b.n	8015084 <_printf_float+0x2b8>
 80150a6:	bf00      	nop
 80150a8:	7fefffff 	.word	0x7fefffff
 80150ac:	0801bd5c 	.word	0x0801bd5c
 80150b0:	0801bd60 	.word	0x0801bd60
 80150b4:	0801bd68 	.word	0x0801bd68
 80150b8:	0801bd64 	.word	0x0801bd64
 80150bc:	0801bd6c 	.word	0x0801bd6c
 80150c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80150c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80150c4:	429a      	cmp	r2, r3
 80150c6:	bfa8      	it	ge
 80150c8:	461a      	movge	r2, r3
 80150ca:	2a00      	cmp	r2, #0
 80150cc:	4691      	mov	r9, r2
 80150ce:	dc37      	bgt.n	8015140 <_printf_float+0x374>
 80150d0:	f04f 0b00 	mov.w	fp, #0
 80150d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80150d8:	f104 021a 	add.w	r2, r4, #26
 80150dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80150de:	9305      	str	r3, [sp, #20]
 80150e0:	eba3 0309 	sub.w	r3, r3, r9
 80150e4:	455b      	cmp	r3, fp
 80150e6:	dc33      	bgt.n	8015150 <_printf_float+0x384>
 80150e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80150ec:	429a      	cmp	r2, r3
 80150ee:	db3b      	blt.n	8015168 <_printf_float+0x39c>
 80150f0:	6823      	ldr	r3, [r4, #0]
 80150f2:	07da      	lsls	r2, r3, #31
 80150f4:	d438      	bmi.n	8015168 <_printf_float+0x39c>
 80150f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80150f8:	9b05      	ldr	r3, [sp, #20]
 80150fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80150fc:	1ad3      	subs	r3, r2, r3
 80150fe:	eba2 0901 	sub.w	r9, r2, r1
 8015102:	4599      	cmp	r9, r3
 8015104:	bfa8      	it	ge
 8015106:	4699      	movge	r9, r3
 8015108:	f1b9 0f00 	cmp.w	r9, #0
 801510c:	dc35      	bgt.n	801517a <_printf_float+0x3ae>
 801510e:	f04f 0800 	mov.w	r8, #0
 8015112:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015116:	f104 0a1a 	add.w	sl, r4, #26
 801511a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801511e:	1a9b      	subs	r3, r3, r2
 8015120:	eba3 0309 	sub.w	r3, r3, r9
 8015124:	4543      	cmp	r3, r8
 8015126:	f77f af79 	ble.w	801501c <_printf_float+0x250>
 801512a:	2301      	movs	r3, #1
 801512c:	4652      	mov	r2, sl
 801512e:	4631      	mov	r1, r6
 8015130:	4628      	mov	r0, r5
 8015132:	47b8      	blx	r7
 8015134:	3001      	adds	r0, #1
 8015136:	f43f aeaa 	beq.w	8014e8e <_printf_float+0xc2>
 801513a:	f108 0801 	add.w	r8, r8, #1
 801513e:	e7ec      	b.n	801511a <_printf_float+0x34e>
 8015140:	4613      	mov	r3, r2
 8015142:	4631      	mov	r1, r6
 8015144:	4642      	mov	r2, r8
 8015146:	4628      	mov	r0, r5
 8015148:	47b8      	blx	r7
 801514a:	3001      	adds	r0, #1
 801514c:	d1c0      	bne.n	80150d0 <_printf_float+0x304>
 801514e:	e69e      	b.n	8014e8e <_printf_float+0xc2>
 8015150:	2301      	movs	r3, #1
 8015152:	4631      	mov	r1, r6
 8015154:	4628      	mov	r0, r5
 8015156:	9205      	str	r2, [sp, #20]
 8015158:	47b8      	blx	r7
 801515a:	3001      	adds	r0, #1
 801515c:	f43f ae97 	beq.w	8014e8e <_printf_float+0xc2>
 8015160:	9a05      	ldr	r2, [sp, #20]
 8015162:	f10b 0b01 	add.w	fp, fp, #1
 8015166:	e7b9      	b.n	80150dc <_printf_float+0x310>
 8015168:	ee18 3a10 	vmov	r3, s16
 801516c:	4652      	mov	r2, sl
 801516e:	4631      	mov	r1, r6
 8015170:	4628      	mov	r0, r5
 8015172:	47b8      	blx	r7
 8015174:	3001      	adds	r0, #1
 8015176:	d1be      	bne.n	80150f6 <_printf_float+0x32a>
 8015178:	e689      	b.n	8014e8e <_printf_float+0xc2>
 801517a:	9a05      	ldr	r2, [sp, #20]
 801517c:	464b      	mov	r3, r9
 801517e:	4442      	add	r2, r8
 8015180:	4631      	mov	r1, r6
 8015182:	4628      	mov	r0, r5
 8015184:	47b8      	blx	r7
 8015186:	3001      	adds	r0, #1
 8015188:	d1c1      	bne.n	801510e <_printf_float+0x342>
 801518a:	e680      	b.n	8014e8e <_printf_float+0xc2>
 801518c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801518e:	2a01      	cmp	r2, #1
 8015190:	dc01      	bgt.n	8015196 <_printf_float+0x3ca>
 8015192:	07db      	lsls	r3, r3, #31
 8015194:	d538      	bpl.n	8015208 <_printf_float+0x43c>
 8015196:	2301      	movs	r3, #1
 8015198:	4642      	mov	r2, r8
 801519a:	4631      	mov	r1, r6
 801519c:	4628      	mov	r0, r5
 801519e:	47b8      	blx	r7
 80151a0:	3001      	adds	r0, #1
 80151a2:	f43f ae74 	beq.w	8014e8e <_printf_float+0xc2>
 80151a6:	ee18 3a10 	vmov	r3, s16
 80151aa:	4652      	mov	r2, sl
 80151ac:	4631      	mov	r1, r6
 80151ae:	4628      	mov	r0, r5
 80151b0:	47b8      	blx	r7
 80151b2:	3001      	adds	r0, #1
 80151b4:	f43f ae6b 	beq.w	8014e8e <_printf_float+0xc2>
 80151b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80151bc:	2200      	movs	r2, #0
 80151be:	2300      	movs	r3, #0
 80151c0:	f7eb fc92 	bl	8000ae8 <__aeabi_dcmpeq>
 80151c4:	b9d8      	cbnz	r0, 80151fe <_printf_float+0x432>
 80151c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151c8:	f108 0201 	add.w	r2, r8, #1
 80151cc:	3b01      	subs	r3, #1
 80151ce:	4631      	mov	r1, r6
 80151d0:	4628      	mov	r0, r5
 80151d2:	47b8      	blx	r7
 80151d4:	3001      	adds	r0, #1
 80151d6:	d10e      	bne.n	80151f6 <_printf_float+0x42a>
 80151d8:	e659      	b.n	8014e8e <_printf_float+0xc2>
 80151da:	2301      	movs	r3, #1
 80151dc:	4652      	mov	r2, sl
 80151de:	4631      	mov	r1, r6
 80151e0:	4628      	mov	r0, r5
 80151e2:	47b8      	blx	r7
 80151e4:	3001      	adds	r0, #1
 80151e6:	f43f ae52 	beq.w	8014e8e <_printf_float+0xc2>
 80151ea:	f108 0801 	add.w	r8, r8, #1
 80151ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151f0:	3b01      	subs	r3, #1
 80151f2:	4543      	cmp	r3, r8
 80151f4:	dcf1      	bgt.n	80151da <_printf_float+0x40e>
 80151f6:	464b      	mov	r3, r9
 80151f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80151fc:	e6dc      	b.n	8014fb8 <_printf_float+0x1ec>
 80151fe:	f04f 0800 	mov.w	r8, #0
 8015202:	f104 0a1a 	add.w	sl, r4, #26
 8015206:	e7f2      	b.n	80151ee <_printf_float+0x422>
 8015208:	2301      	movs	r3, #1
 801520a:	4642      	mov	r2, r8
 801520c:	e7df      	b.n	80151ce <_printf_float+0x402>
 801520e:	2301      	movs	r3, #1
 8015210:	464a      	mov	r2, r9
 8015212:	4631      	mov	r1, r6
 8015214:	4628      	mov	r0, r5
 8015216:	47b8      	blx	r7
 8015218:	3001      	adds	r0, #1
 801521a:	f43f ae38 	beq.w	8014e8e <_printf_float+0xc2>
 801521e:	f108 0801 	add.w	r8, r8, #1
 8015222:	68e3      	ldr	r3, [r4, #12]
 8015224:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015226:	1a5b      	subs	r3, r3, r1
 8015228:	4543      	cmp	r3, r8
 801522a:	dcf0      	bgt.n	801520e <_printf_float+0x442>
 801522c:	e6fa      	b.n	8015024 <_printf_float+0x258>
 801522e:	f04f 0800 	mov.w	r8, #0
 8015232:	f104 0919 	add.w	r9, r4, #25
 8015236:	e7f4      	b.n	8015222 <_printf_float+0x456>

08015238 <_printf_common>:
 8015238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801523c:	4616      	mov	r6, r2
 801523e:	4699      	mov	r9, r3
 8015240:	688a      	ldr	r2, [r1, #8]
 8015242:	690b      	ldr	r3, [r1, #16]
 8015244:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015248:	4293      	cmp	r3, r2
 801524a:	bfb8      	it	lt
 801524c:	4613      	movlt	r3, r2
 801524e:	6033      	str	r3, [r6, #0]
 8015250:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015254:	4607      	mov	r7, r0
 8015256:	460c      	mov	r4, r1
 8015258:	b10a      	cbz	r2, 801525e <_printf_common+0x26>
 801525a:	3301      	adds	r3, #1
 801525c:	6033      	str	r3, [r6, #0]
 801525e:	6823      	ldr	r3, [r4, #0]
 8015260:	0699      	lsls	r1, r3, #26
 8015262:	bf42      	ittt	mi
 8015264:	6833      	ldrmi	r3, [r6, #0]
 8015266:	3302      	addmi	r3, #2
 8015268:	6033      	strmi	r3, [r6, #0]
 801526a:	6825      	ldr	r5, [r4, #0]
 801526c:	f015 0506 	ands.w	r5, r5, #6
 8015270:	d106      	bne.n	8015280 <_printf_common+0x48>
 8015272:	f104 0a19 	add.w	sl, r4, #25
 8015276:	68e3      	ldr	r3, [r4, #12]
 8015278:	6832      	ldr	r2, [r6, #0]
 801527a:	1a9b      	subs	r3, r3, r2
 801527c:	42ab      	cmp	r3, r5
 801527e:	dc26      	bgt.n	80152ce <_printf_common+0x96>
 8015280:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015284:	1e13      	subs	r3, r2, #0
 8015286:	6822      	ldr	r2, [r4, #0]
 8015288:	bf18      	it	ne
 801528a:	2301      	movne	r3, #1
 801528c:	0692      	lsls	r2, r2, #26
 801528e:	d42b      	bmi.n	80152e8 <_printf_common+0xb0>
 8015290:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015294:	4649      	mov	r1, r9
 8015296:	4638      	mov	r0, r7
 8015298:	47c0      	blx	r8
 801529a:	3001      	adds	r0, #1
 801529c:	d01e      	beq.n	80152dc <_printf_common+0xa4>
 801529e:	6823      	ldr	r3, [r4, #0]
 80152a0:	68e5      	ldr	r5, [r4, #12]
 80152a2:	6832      	ldr	r2, [r6, #0]
 80152a4:	f003 0306 	and.w	r3, r3, #6
 80152a8:	2b04      	cmp	r3, #4
 80152aa:	bf08      	it	eq
 80152ac:	1aad      	subeq	r5, r5, r2
 80152ae:	68a3      	ldr	r3, [r4, #8]
 80152b0:	6922      	ldr	r2, [r4, #16]
 80152b2:	bf0c      	ite	eq
 80152b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80152b8:	2500      	movne	r5, #0
 80152ba:	4293      	cmp	r3, r2
 80152bc:	bfc4      	itt	gt
 80152be:	1a9b      	subgt	r3, r3, r2
 80152c0:	18ed      	addgt	r5, r5, r3
 80152c2:	2600      	movs	r6, #0
 80152c4:	341a      	adds	r4, #26
 80152c6:	42b5      	cmp	r5, r6
 80152c8:	d11a      	bne.n	8015300 <_printf_common+0xc8>
 80152ca:	2000      	movs	r0, #0
 80152cc:	e008      	b.n	80152e0 <_printf_common+0xa8>
 80152ce:	2301      	movs	r3, #1
 80152d0:	4652      	mov	r2, sl
 80152d2:	4649      	mov	r1, r9
 80152d4:	4638      	mov	r0, r7
 80152d6:	47c0      	blx	r8
 80152d8:	3001      	adds	r0, #1
 80152da:	d103      	bne.n	80152e4 <_printf_common+0xac>
 80152dc:	f04f 30ff 	mov.w	r0, #4294967295
 80152e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152e4:	3501      	adds	r5, #1
 80152e6:	e7c6      	b.n	8015276 <_printf_common+0x3e>
 80152e8:	18e1      	adds	r1, r4, r3
 80152ea:	1c5a      	adds	r2, r3, #1
 80152ec:	2030      	movs	r0, #48	; 0x30
 80152ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80152f2:	4422      	add	r2, r4
 80152f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80152f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80152fc:	3302      	adds	r3, #2
 80152fe:	e7c7      	b.n	8015290 <_printf_common+0x58>
 8015300:	2301      	movs	r3, #1
 8015302:	4622      	mov	r2, r4
 8015304:	4649      	mov	r1, r9
 8015306:	4638      	mov	r0, r7
 8015308:	47c0      	blx	r8
 801530a:	3001      	adds	r0, #1
 801530c:	d0e6      	beq.n	80152dc <_printf_common+0xa4>
 801530e:	3601      	adds	r6, #1
 8015310:	e7d9      	b.n	80152c6 <_printf_common+0x8e>
	...

08015314 <_printf_i>:
 8015314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015318:	460c      	mov	r4, r1
 801531a:	4691      	mov	r9, r2
 801531c:	7e27      	ldrb	r7, [r4, #24]
 801531e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015320:	2f78      	cmp	r7, #120	; 0x78
 8015322:	4680      	mov	r8, r0
 8015324:	469a      	mov	sl, r3
 8015326:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801532a:	d807      	bhi.n	801533c <_printf_i+0x28>
 801532c:	2f62      	cmp	r7, #98	; 0x62
 801532e:	d80a      	bhi.n	8015346 <_printf_i+0x32>
 8015330:	2f00      	cmp	r7, #0
 8015332:	f000 80d8 	beq.w	80154e6 <_printf_i+0x1d2>
 8015336:	2f58      	cmp	r7, #88	; 0x58
 8015338:	f000 80a3 	beq.w	8015482 <_printf_i+0x16e>
 801533c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015340:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015344:	e03a      	b.n	80153bc <_printf_i+0xa8>
 8015346:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801534a:	2b15      	cmp	r3, #21
 801534c:	d8f6      	bhi.n	801533c <_printf_i+0x28>
 801534e:	a001      	add	r0, pc, #4	; (adr r0, 8015354 <_printf_i+0x40>)
 8015350:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015354:	080153ad 	.word	0x080153ad
 8015358:	080153c1 	.word	0x080153c1
 801535c:	0801533d 	.word	0x0801533d
 8015360:	0801533d 	.word	0x0801533d
 8015364:	0801533d 	.word	0x0801533d
 8015368:	0801533d 	.word	0x0801533d
 801536c:	080153c1 	.word	0x080153c1
 8015370:	0801533d 	.word	0x0801533d
 8015374:	0801533d 	.word	0x0801533d
 8015378:	0801533d 	.word	0x0801533d
 801537c:	0801533d 	.word	0x0801533d
 8015380:	080154cd 	.word	0x080154cd
 8015384:	080153f1 	.word	0x080153f1
 8015388:	080154af 	.word	0x080154af
 801538c:	0801533d 	.word	0x0801533d
 8015390:	0801533d 	.word	0x0801533d
 8015394:	080154ef 	.word	0x080154ef
 8015398:	0801533d 	.word	0x0801533d
 801539c:	080153f1 	.word	0x080153f1
 80153a0:	0801533d 	.word	0x0801533d
 80153a4:	0801533d 	.word	0x0801533d
 80153a8:	080154b7 	.word	0x080154b7
 80153ac:	680b      	ldr	r3, [r1, #0]
 80153ae:	1d1a      	adds	r2, r3, #4
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	600a      	str	r2, [r1, #0]
 80153b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80153b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80153bc:	2301      	movs	r3, #1
 80153be:	e0a3      	b.n	8015508 <_printf_i+0x1f4>
 80153c0:	6825      	ldr	r5, [r4, #0]
 80153c2:	6808      	ldr	r0, [r1, #0]
 80153c4:	062e      	lsls	r6, r5, #24
 80153c6:	f100 0304 	add.w	r3, r0, #4
 80153ca:	d50a      	bpl.n	80153e2 <_printf_i+0xce>
 80153cc:	6805      	ldr	r5, [r0, #0]
 80153ce:	600b      	str	r3, [r1, #0]
 80153d0:	2d00      	cmp	r5, #0
 80153d2:	da03      	bge.n	80153dc <_printf_i+0xc8>
 80153d4:	232d      	movs	r3, #45	; 0x2d
 80153d6:	426d      	negs	r5, r5
 80153d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80153dc:	485e      	ldr	r0, [pc, #376]	; (8015558 <_printf_i+0x244>)
 80153de:	230a      	movs	r3, #10
 80153e0:	e019      	b.n	8015416 <_printf_i+0x102>
 80153e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80153e6:	6805      	ldr	r5, [r0, #0]
 80153e8:	600b      	str	r3, [r1, #0]
 80153ea:	bf18      	it	ne
 80153ec:	b22d      	sxthne	r5, r5
 80153ee:	e7ef      	b.n	80153d0 <_printf_i+0xbc>
 80153f0:	680b      	ldr	r3, [r1, #0]
 80153f2:	6825      	ldr	r5, [r4, #0]
 80153f4:	1d18      	adds	r0, r3, #4
 80153f6:	6008      	str	r0, [r1, #0]
 80153f8:	0628      	lsls	r0, r5, #24
 80153fa:	d501      	bpl.n	8015400 <_printf_i+0xec>
 80153fc:	681d      	ldr	r5, [r3, #0]
 80153fe:	e002      	b.n	8015406 <_printf_i+0xf2>
 8015400:	0669      	lsls	r1, r5, #25
 8015402:	d5fb      	bpl.n	80153fc <_printf_i+0xe8>
 8015404:	881d      	ldrh	r5, [r3, #0]
 8015406:	4854      	ldr	r0, [pc, #336]	; (8015558 <_printf_i+0x244>)
 8015408:	2f6f      	cmp	r7, #111	; 0x6f
 801540a:	bf0c      	ite	eq
 801540c:	2308      	moveq	r3, #8
 801540e:	230a      	movne	r3, #10
 8015410:	2100      	movs	r1, #0
 8015412:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015416:	6866      	ldr	r6, [r4, #4]
 8015418:	60a6      	str	r6, [r4, #8]
 801541a:	2e00      	cmp	r6, #0
 801541c:	bfa2      	ittt	ge
 801541e:	6821      	ldrge	r1, [r4, #0]
 8015420:	f021 0104 	bicge.w	r1, r1, #4
 8015424:	6021      	strge	r1, [r4, #0]
 8015426:	b90d      	cbnz	r5, 801542c <_printf_i+0x118>
 8015428:	2e00      	cmp	r6, #0
 801542a:	d04d      	beq.n	80154c8 <_printf_i+0x1b4>
 801542c:	4616      	mov	r6, r2
 801542e:	fbb5 f1f3 	udiv	r1, r5, r3
 8015432:	fb03 5711 	mls	r7, r3, r1, r5
 8015436:	5dc7      	ldrb	r7, [r0, r7]
 8015438:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801543c:	462f      	mov	r7, r5
 801543e:	42bb      	cmp	r3, r7
 8015440:	460d      	mov	r5, r1
 8015442:	d9f4      	bls.n	801542e <_printf_i+0x11a>
 8015444:	2b08      	cmp	r3, #8
 8015446:	d10b      	bne.n	8015460 <_printf_i+0x14c>
 8015448:	6823      	ldr	r3, [r4, #0]
 801544a:	07df      	lsls	r7, r3, #31
 801544c:	d508      	bpl.n	8015460 <_printf_i+0x14c>
 801544e:	6923      	ldr	r3, [r4, #16]
 8015450:	6861      	ldr	r1, [r4, #4]
 8015452:	4299      	cmp	r1, r3
 8015454:	bfde      	ittt	le
 8015456:	2330      	movle	r3, #48	; 0x30
 8015458:	f806 3c01 	strble.w	r3, [r6, #-1]
 801545c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015460:	1b92      	subs	r2, r2, r6
 8015462:	6122      	str	r2, [r4, #16]
 8015464:	f8cd a000 	str.w	sl, [sp]
 8015468:	464b      	mov	r3, r9
 801546a:	aa03      	add	r2, sp, #12
 801546c:	4621      	mov	r1, r4
 801546e:	4640      	mov	r0, r8
 8015470:	f7ff fee2 	bl	8015238 <_printf_common>
 8015474:	3001      	adds	r0, #1
 8015476:	d14c      	bne.n	8015512 <_printf_i+0x1fe>
 8015478:	f04f 30ff 	mov.w	r0, #4294967295
 801547c:	b004      	add	sp, #16
 801547e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015482:	4835      	ldr	r0, [pc, #212]	; (8015558 <_printf_i+0x244>)
 8015484:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015488:	6823      	ldr	r3, [r4, #0]
 801548a:	680e      	ldr	r6, [r1, #0]
 801548c:	061f      	lsls	r7, r3, #24
 801548e:	f856 5b04 	ldr.w	r5, [r6], #4
 8015492:	600e      	str	r6, [r1, #0]
 8015494:	d514      	bpl.n	80154c0 <_printf_i+0x1ac>
 8015496:	07d9      	lsls	r1, r3, #31
 8015498:	bf44      	itt	mi
 801549a:	f043 0320 	orrmi.w	r3, r3, #32
 801549e:	6023      	strmi	r3, [r4, #0]
 80154a0:	b91d      	cbnz	r5, 80154aa <_printf_i+0x196>
 80154a2:	6823      	ldr	r3, [r4, #0]
 80154a4:	f023 0320 	bic.w	r3, r3, #32
 80154a8:	6023      	str	r3, [r4, #0]
 80154aa:	2310      	movs	r3, #16
 80154ac:	e7b0      	b.n	8015410 <_printf_i+0xfc>
 80154ae:	6823      	ldr	r3, [r4, #0]
 80154b0:	f043 0320 	orr.w	r3, r3, #32
 80154b4:	6023      	str	r3, [r4, #0]
 80154b6:	2378      	movs	r3, #120	; 0x78
 80154b8:	4828      	ldr	r0, [pc, #160]	; (801555c <_printf_i+0x248>)
 80154ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80154be:	e7e3      	b.n	8015488 <_printf_i+0x174>
 80154c0:	065e      	lsls	r6, r3, #25
 80154c2:	bf48      	it	mi
 80154c4:	b2ad      	uxthmi	r5, r5
 80154c6:	e7e6      	b.n	8015496 <_printf_i+0x182>
 80154c8:	4616      	mov	r6, r2
 80154ca:	e7bb      	b.n	8015444 <_printf_i+0x130>
 80154cc:	680b      	ldr	r3, [r1, #0]
 80154ce:	6826      	ldr	r6, [r4, #0]
 80154d0:	6960      	ldr	r0, [r4, #20]
 80154d2:	1d1d      	adds	r5, r3, #4
 80154d4:	600d      	str	r5, [r1, #0]
 80154d6:	0635      	lsls	r5, r6, #24
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	d501      	bpl.n	80154e0 <_printf_i+0x1cc>
 80154dc:	6018      	str	r0, [r3, #0]
 80154de:	e002      	b.n	80154e6 <_printf_i+0x1d2>
 80154e0:	0671      	lsls	r1, r6, #25
 80154e2:	d5fb      	bpl.n	80154dc <_printf_i+0x1c8>
 80154e4:	8018      	strh	r0, [r3, #0]
 80154e6:	2300      	movs	r3, #0
 80154e8:	6123      	str	r3, [r4, #16]
 80154ea:	4616      	mov	r6, r2
 80154ec:	e7ba      	b.n	8015464 <_printf_i+0x150>
 80154ee:	680b      	ldr	r3, [r1, #0]
 80154f0:	1d1a      	adds	r2, r3, #4
 80154f2:	600a      	str	r2, [r1, #0]
 80154f4:	681e      	ldr	r6, [r3, #0]
 80154f6:	6862      	ldr	r2, [r4, #4]
 80154f8:	2100      	movs	r1, #0
 80154fa:	4630      	mov	r0, r6
 80154fc:	f7ea fe80 	bl	8000200 <memchr>
 8015500:	b108      	cbz	r0, 8015506 <_printf_i+0x1f2>
 8015502:	1b80      	subs	r0, r0, r6
 8015504:	6060      	str	r0, [r4, #4]
 8015506:	6863      	ldr	r3, [r4, #4]
 8015508:	6123      	str	r3, [r4, #16]
 801550a:	2300      	movs	r3, #0
 801550c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015510:	e7a8      	b.n	8015464 <_printf_i+0x150>
 8015512:	6923      	ldr	r3, [r4, #16]
 8015514:	4632      	mov	r2, r6
 8015516:	4649      	mov	r1, r9
 8015518:	4640      	mov	r0, r8
 801551a:	47d0      	blx	sl
 801551c:	3001      	adds	r0, #1
 801551e:	d0ab      	beq.n	8015478 <_printf_i+0x164>
 8015520:	6823      	ldr	r3, [r4, #0]
 8015522:	079b      	lsls	r3, r3, #30
 8015524:	d413      	bmi.n	801554e <_printf_i+0x23a>
 8015526:	68e0      	ldr	r0, [r4, #12]
 8015528:	9b03      	ldr	r3, [sp, #12]
 801552a:	4298      	cmp	r0, r3
 801552c:	bfb8      	it	lt
 801552e:	4618      	movlt	r0, r3
 8015530:	e7a4      	b.n	801547c <_printf_i+0x168>
 8015532:	2301      	movs	r3, #1
 8015534:	4632      	mov	r2, r6
 8015536:	4649      	mov	r1, r9
 8015538:	4640      	mov	r0, r8
 801553a:	47d0      	blx	sl
 801553c:	3001      	adds	r0, #1
 801553e:	d09b      	beq.n	8015478 <_printf_i+0x164>
 8015540:	3501      	adds	r5, #1
 8015542:	68e3      	ldr	r3, [r4, #12]
 8015544:	9903      	ldr	r1, [sp, #12]
 8015546:	1a5b      	subs	r3, r3, r1
 8015548:	42ab      	cmp	r3, r5
 801554a:	dcf2      	bgt.n	8015532 <_printf_i+0x21e>
 801554c:	e7eb      	b.n	8015526 <_printf_i+0x212>
 801554e:	2500      	movs	r5, #0
 8015550:	f104 0619 	add.w	r6, r4, #25
 8015554:	e7f5      	b.n	8015542 <_printf_i+0x22e>
 8015556:	bf00      	nop
 8015558:	0801bd6e 	.word	0x0801bd6e
 801555c:	0801bd7f 	.word	0x0801bd7f

08015560 <iprintf>:
 8015560:	b40f      	push	{r0, r1, r2, r3}
 8015562:	4b0a      	ldr	r3, [pc, #40]	; (801558c <iprintf+0x2c>)
 8015564:	b513      	push	{r0, r1, r4, lr}
 8015566:	681c      	ldr	r4, [r3, #0]
 8015568:	b124      	cbz	r4, 8015574 <iprintf+0x14>
 801556a:	69a3      	ldr	r3, [r4, #24]
 801556c:	b913      	cbnz	r3, 8015574 <iprintf+0x14>
 801556e:	4620      	mov	r0, r4
 8015570:	f001 f840 	bl	80165f4 <__sinit>
 8015574:	ab05      	add	r3, sp, #20
 8015576:	9a04      	ldr	r2, [sp, #16]
 8015578:	68a1      	ldr	r1, [r4, #8]
 801557a:	9301      	str	r3, [sp, #4]
 801557c:	4620      	mov	r0, r4
 801557e:	f001 fe0f 	bl	80171a0 <_vfiprintf_r>
 8015582:	b002      	add	sp, #8
 8015584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015588:	b004      	add	sp, #16
 801558a:	4770      	bx	lr
 801558c:	20000024 	.word	0x20000024

08015590 <rand>:
 8015590:	4b17      	ldr	r3, [pc, #92]	; (80155f0 <rand+0x60>)
 8015592:	b510      	push	{r4, lr}
 8015594:	681c      	ldr	r4, [r3, #0]
 8015596:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015598:	b9b3      	cbnz	r3, 80155c8 <rand+0x38>
 801559a:	2018      	movs	r0, #24
 801559c:	f7ff fa7e 	bl	8014a9c <malloc>
 80155a0:	63a0      	str	r0, [r4, #56]	; 0x38
 80155a2:	b928      	cbnz	r0, 80155b0 <rand+0x20>
 80155a4:	4602      	mov	r2, r0
 80155a6:	4b13      	ldr	r3, [pc, #76]	; (80155f4 <rand+0x64>)
 80155a8:	4813      	ldr	r0, [pc, #76]	; (80155f8 <rand+0x68>)
 80155aa:	214e      	movs	r1, #78	; 0x4e
 80155ac:	f000 f92c 	bl	8015808 <__assert_func>
 80155b0:	4a12      	ldr	r2, [pc, #72]	; (80155fc <rand+0x6c>)
 80155b2:	4b13      	ldr	r3, [pc, #76]	; (8015600 <rand+0x70>)
 80155b4:	e9c0 2300 	strd	r2, r3, [r0]
 80155b8:	4b12      	ldr	r3, [pc, #72]	; (8015604 <rand+0x74>)
 80155ba:	6083      	str	r3, [r0, #8]
 80155bc:	230b      	movs	r3, #11
 80155be:	8183      	strh	r3, [r0, #12]
 80155c0:	2201      	movs	r2, #1
 80155c2:	2300      	movs	r3, #0
 80155c4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80155c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80155ca:	480f      	ldr	r0, [pc, #60]	; (8015608 <rand+0x78>)
 80155cc:	690a      	ldr	r2, [r1, #16]
 80155ce:	694b      	ldr	r3, [r1, #20]
 80155d0:	4c0e      	ldr	r4, [pc, #56]	; (801560c <rand+0x7c>)
 80155d2:	4350      	muls	r0, r2
 80155d4:	fb04 0003 	mla	r0, r4, r3, r0
 80155d8:	fba2 3404 	umull	r3, r4, r2, r4
 80155dc:	1c5a      	adds	r2, r3, #1
 80155de:	4404      	add	r4, r0
 80155e0:	f144 0000 	adc.w	r0, r4, #0
 80155e4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80155e8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80155ec:	bd10      	pop	{r4, pc}
 80155ee:	bf00      	nop
 80155f0:	20000024 	.word	0x20000024
 80155f4:	0801bd90 	.word	0x0801bd90
 80155f8:	0801bda7 	.word	0x0801bda7
 80155fc:	abcd330e 	.word	0xabcd330e
 8015600:	e66d1234 	.word	0xe66d1234
 8015604:	0005deec 	.word	0x0005deec
 8015608:	5851f42d 	.word	0x5851f42d
 801560c:	4c957f2d 	.word	0x4c957f2d

08015610 <_sbrk_r>:
 8015610:	b538      	push	{r3, r4, r5, lr}
 8015612:	4d06      	ldr	r5, [pc, #24]	; (801562c <_sbrk_r+0x1c>)
 8015614:	2300      	movs	r3, #0
 8015616:	4604      	mov	r4, r0
 8015618:	4608      	mov	r0, r1
 801561a:	602b      	str	r3, [r5, #0]
 801561c:	f7ee fb20 	bl	8003c60 <_sbrk>
 8015620:	1c43      	adds	r3, r0, #1
 8015622:	d102      	bne.n	801562a <_sbrk_r+0x1a>
 8015624:	682b      	ldr	r3, [r5, #0]
 8015626:	b103      	cbz	r3, 801562a <_sbrk_r+0x1a>
 8015628:	6023      	str	r3, [r4, #0]
 801562a:	bd38      	pop	{r3, r4, r5, pc}
 801562c:	20006a64 	.word	0x20006a64

08015630 <sniprintf>:
 8015630:	b40c      	push	{r2, r3}
 8015632:	b530      	push	{r4, r5, lr}
 8015634:	4b17      	ldr	r3, [pc, #92]	; (8015694 <sniprintf+0x64>)
 8015636:	1e0c      	subs	r4, r1, #0
 8015638:	681d      	ldr	r5, [r3, #0]
 801563a:	b09d      	sub	sp, #116	; 0x74
 801563c:	da08      	bge.n	8015650 <sniprintf+0x20>
 801563e:	238b      	movs	r3, #139	; 0x8b
 8015640:	602b      	str	r3, [r5, #0]
 8015642:	f04f 30ff 	mov.w	r0, #4294967295
 8015646:	b01d      	add	sp, #116	; 0x74
 8015648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801564c:	b002      	add	sp, #8
 801564e:	4770      	bx	lr
 8015650:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015654:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015658:	bf14      	ite	ne
 801565a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801565e:	4623      	moveq	r3, r4
 8015660:	9304      	str	r3, [sp, #16]
 8015662:	9307      	str	r3, [sp, #28]
 8015664:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015668:	9002      	str	r0, [sp, #8]
 801566a:	9006      	str	r0, [sp, #24]
 801566c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015670:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015672:	ab21      	add	r3, sp, #132	; 0x84
 8015674:	a902      	add	r1, sp, #8
 8015676:	4628      	mov	r0, r5
 8015678:	9301      	str	r3, [sp, #4]
 801567a:	f001 fc67 	bl	8016f4c <_svfiprintf_r>
 801567e:	1c43      	adds	r3, r0, #1
 8015680:	bfbc      	itt	lt
 8015682:	238b      	movlt	r3, #139	; 0x8b
 8015684:	602b      	strlt	r3, [r5, #0]
 8015686:	2c00      	cmp	r4, #0
 8015688:	d0dd      	beq.n	8015646 <sniprintf+0x16>
 801568a:	9b02      	ldr	r3, [sp, #8]
 801568c:	2200      	movs	r2, #0
 801568e:	701a      	strb	r2, [r3, #0]
 8015690:	e7d9      	b.n	8015646 <sniprintf+0x16>
 8015692:	bf00      	nop
 8015694:	20000024 	.word	0x20000024

08015698 <strncmp>:
 8015698:	b510      	push	{r4, lr}
 801569a:	b16a      	cbz	r2, 80156b8 <strncmp+0x20>
 801569c:	3901      	subs	r1, #1
 801569e:	1884      	adds	r4, r0, r2
 80156a0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80156a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80156a8:	4293      	cmp	r3, r2
 80156aa:	d103      	bne.n	80156b4 <strncmp+0x1c>
 80156ac:	42a0      	cmp	r0, r4
 80156ae:	d001      	beq.n	80156b4 <strncmp+0x1c>
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d1f5      	bne.n	80156a0 <strncmp+0x8>
 80156b4:	1a98      	subs	r0, r3, r2
 80156b6:	bd10      	pop	{r4, pc}
 80156b8:	4610      	mov	r0, r2
 80156ba:	e7fc      	b.n	80156b6 <strncmp+0x1e>

080156bc <strstr>:
 80156bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156be:	780c      	ldrb	r4, [r1, #0]
 80156c0:	b164      	cbz	r4, 80156dc <strstr+0x20>
 80156c2:	4603      	mov	r3, r0
 80156c4:	781a      	ldrb	r2, [r3, #0]
 80156c6:	4618      	mov	r0, r3
 80156c8:	1c5e      	adds	r6, r3, #1
 80156ca:	b90a      	cbnz	r2, 80156d0 <strstr+0x14>
 80156cc:	4610      	mov	r0, r2
 80156ce:	e005      	b.n	80156dc <strstr+0x20>
 80156d0:	4294      	cmp	r4, r2
 80156d2:	d108      	bne.n	80156e6 <strstr+0x2a>
 80156d4:	460d      	mov	r5, r1
 80156d6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80156da:	b902      	cbnz	r2, 80156de <strstr+0x22>
 80156dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156de:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80156e2:	4297      	cmp	r7, r2
 80156e4:	d0f7      	beq.n	80156d6 <strstr+0x1a>
 80156e6:	4633      	mov	r3, r6
 80156e8:	e7ec      	b.n	80156c4 <strstr+0x8>
	...

080156ec <_strtol_l.isra.0>:
 80156ec:	2b01      	cmp	r3, #1
 80156ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156f2:	d001      	beq.n	80156f8 <_strtol_l.isra.0+0xc>
 80156f4:	2b24      	cmp	r3, #36	; 0x24
 80156f6:	d906      	bls.n	8015706 <_strtol_l.isra.0+0x1a>
 80156f8:	f000 ff1e 	bl	8016538 <__errno>
 80156fc:	2316      	movs	r3, #22
 80156fe:	6003      	str	r3, [r0, #0]
 8015700:	2000      	movs	r0, #0
 8015702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015706:	4f3a      	ldr	r7, [pc, #232]	; (80157f0 <_strtol_l.isra.0+0x104>)
 8015708:	468e      	mov	lr, r1
 801570a:	4676      	mov	r6, lr
 801570c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015710:	5de5      	ldrb	r5, [r4, r7]
 8015712:	f015 0508 	ands.w	r5, r5, #8
 8015716:	d1f8      	bne.n	801570a <_strtol_l.isra.0+0x1e>
 8015718:	2c2d      	cmp	r4, #45	; 0x2d
 801571a:	d134      	bne.n	8015786 <_strtol_l.isra.0+0x9a>
 801571c:	f89e 4000 	ldrb.w	r4, [lr]
 8015720:	f04f 0801 	mov.w	r8, #1
 8015724:	f106 0e02 	add.w	lr, r6, #2
 8015728:	2b00      	cmp	r3, #0
 801572a:	d05c      	beq.n	80157e6 <_strtol_l.isra.0+0xfa>
 801572c:	2b10      	cmp	r3, #16
 801572e:	d10c      	bne.n	801574a <_strtol_l.isra.0+0x5e>
 8015730:	2c30      	cmp	r4, #48	; 0x30
 8015732:	d10a      	bne.n	801574a <_strtol_l.isra.0+0x5e>
 8015734:	f89e 4000 	ldrb.w	r4, [lr]
 8015738:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801573c:	2c58      	cmp	r4, #88	; 0x58
 801573e:	d14d      	bne.n	80157dc <_strtol_l.isra.0+0xf0>
 8015740:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8015744:	2310      	movs	r3, #16
 8015746:	f10e 0e02 	add.w	lr, lr, #2
 801574a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801574e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015752:	2600      	movs	r6, #0
 8015754:	fbbc f9f3 	udiv	r9, ip, r3
 8015758:	4635      	mov	r5, r6
 801575a:	fb03 ca19 	mls	sl, r3, r9, ip
 801575e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8015762:	2f09      	cmp	r7, #9
 8015764:	d818      	bhi.n	8015798 <_strtol_l.isra.0+0xac>
 8015766:	463c      	mov	r4, r7
 8015768:	42a3      	cmp	r3, r4
 801576a:	dd24      	ble.n	80157b6 <_strtol_l.isra.0+0xca>
 801576c:	2e00      	cmp	r6, #0
 801576e:	db1f      	blt.n	80157b0 <_strtol_l.isra.0+0xc4>
 8015770:	45a9      	cmp	r9, r5
 8015772:	d31d      	bcc.n	80157b0 <_strtol_l.isra.0+0xc4>
 8015774:	d101      	bne.n	801577a <_strtol_l.isra.0+0x8e>
 8015776:	45a2      	cmp	sl, r4
 8015778:	db1a      	blt.n	80157b0 <_strtol_l.isra.0+0xc4>
 801577a:	fb05 4503 	mla	r5, r5, r3, r4
 801577e:	2601      	movs	r6, #1
 8015780:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015784:	e7eb      	b.n	801575e <_strtol_l.isra.0+0x72>
 8015786:	2c2b      	cmp	r4, #43	; 0x2b
 8015788:	bf08      	it	eq
 801578a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801578e:	46a8      	mov	r8, r5
 8015790:	bf08      	it	eq
 8015792:	f106 0e02 	addeq.w	lr, r6, #2
 8015796:	e7c7      	b.n	8015728 <_strtol_l.isra.0+0x3c>
 8015798:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801579c:	2f19      	cmp	r7, #25
 801579e:	d801      	bhi.n	80157a4 <_strtol_l.isra.0+0xb8>
 80157a0:	3c37      	subs	r4, #55	; 0x37
 80157a2:	e7e1      	b.n	8015768 <_strtol_l.isra.0+0x7c>
 80157a4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80157a8:	2f19      	cmp	r7, #25
 80157aa:	d804      	bhi.n	80157b6 <_strtol_l.isra.0+0xca>
 80157ac:	3c57      	subs	r4, #87	; 0x57
 80157ae:	e7db      	b.n	8015768 <_strtol_l.isra.0+0x7c>
 80157b0:	f04f 36ff 	mov.w	r6, #4294967295
 80157b4:	e7e4      	b.n	8015780 <_strtol_l.isra.0+0x94>
 80157b6:	2e00      	cmp	r6, #0
 80157b8:	da05      	bge.n	80157c6 <_strtol_l.isra.0+0xda>
 80157ba:	2322      	movs	r3, #34	; 0x22
 80157bc:	6003      	str	r3, [r0, #0]
 80157be:	4665      	mov	r5, ip
 80157c0:	b942      	cbnz	r2, 80157d4 <_strtol_l.isra.0+0xe8>
 80157c2:	4628      	mov	r0, r5
 80157c4:	e79d      	b.n	8015702 <_strtol_l.isra.0+0x16>
 80157c6:	f1b8 0f00 	cmp.w	r8, #0
 80157ca:	d000      	beq.n	80157ce <_strtol_l.isra.0+0xe2>
 80157cc:	426d      	negs	r5, r5
 80157ce:	2a00      	cmp	r2, #0
 80157d0:	d0f7      	beq.n	80157c2 <_strtol_l.isra.0+0xd6>
 80157d2:	b10e      	cbz	r6, 80157d8 <_strtol_l.isra.0+0xec>
 80157d4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80157d8:	6011      	str	r1, [r2, #0]
 80157da:	e7f2      	b.n	80157c2 <_strtol_l.isra.0+0xd6>
 80157dc:	2430      	movs	r4, #48	; 0x30
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d1b3      	bne.n	801574a <_strtol_l.isra.0+0x5e>
 80157e2:	2308      	movs	r3, #8
 80157e4:	e7b1      	b.n	801574a <_strtol_l.isra.0+0x5e>
 80157e6:	2c30      	cmp	r4, #48	; 0x30
 80157e8:	d0a4      	beq.n	8015734 <_strtol_l.isra.0+0x48>
 80157ea:	230a      	movs	r3, #10
 80157ec:	e7ad      	b.n	801574a <_strtol_l.isra.0+0x5e>
 80157ee:	bf00      	nop
 80157f0:	0801bc57 	.word	0x0801bc57

080157f4 <strtol>:
 80157f4:	4613      	mov	r3, r2
 80157f6:	460a      	mov	r2, r1
 80157f8:	4601      	mov	r1, r0
 80157fa:	4802      	ldr	r0, [pc, #8]	; (8015804 <strtol+0x10>)
 80157fc:	6800      	ldr	r0, [r0, #0]
 80157fe:	f7ff bf75 	b.w	80156ec <_strtol_l.isra.0>
 8015802:	bf00      	nop
 8015804:	20000024 	.word	0x20000024

08015808 <__assert_func>:
 8015808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801580a:	4614      	mov	r4, r2
 801580c:	461a      	mov	r2, r3
 801580e:	4b09      	ldr	r3, [pc, #36]	; (8015834 <__assert_func+0x2c>)
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	4605      	mov	r5, r0
 8015814:	68d8      	ldr	r0, [r3, #12]
 8015816:	b14c      	cbz	r4, 801582c <__assert_func+0x24>
 8015818:	4b07      	ldr	r3, [pc, #28]	; (8015838 <__assert_func+0x30>)
 801581a:	9100      	str	r1, [sp, #0]
 801581c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015820:	4906      	ldr	r1, [pc, #24]	; (801583c <__assert_func+0x34>)
 8015822:	462b      	mov	r3, r5
 8015824:	f000 ff64 	bl	80166f0 <fiprintf>
 8015828:	f001 ff00 	bl	801762c <abort>
 801582c:	4b04      	ldr	r3, [pc, #16]	; (8015840 <__assert_func+0x38>)
 801582e:	461c      	mov	r4, r3
 8015830:	e7f3      	b.n	801581a <__assert_func+0x12>
 8015832:	bf00      	nop
 8015834:	20000024 	.word	0x20000024
 8015838:	0801be06 	.word	0x0801be06
 801583c:	0801be13 	.word	0x0801be13
 8015840:	0801be41 	.word	0x0801be41

08015844 <quorem>:
 8015844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015848:	6903      	ldr	r3, [r0, #16]
 801584a:	690c      	ldr	r4, [r1, #16]
 801584c:	42a3      	cmp	r3, r4
 801584e:	4607      	mov	r7, r0
 8015850:	f2c0 8081 	blt.w	8015956 <quorem+0x112>
 8015854:	3c01      	subs	r4, #1
 8015856:	f101 0814 	add.w	r8, r1, #20
 801585a:	f100 0514 	add.w	r5, r0, #20
 801585e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015862:	9301      	str	r3, [sp, #4]
 8015864:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015868:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801586c:	3301      	adds	r3, #1
 801586e:	429a      	cmp	r2, r3
 8015870:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015874:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015878:	fbb2 f6f3 	udiv	r6, r2, r3
 801587c:	d331      	bcc.n	80158e2 <quorem+0x9e>
 801587e:	f04f 0e00 	mov.w	lr, #0
 8015882:	4640      	mov	r0, r8
 8015884:	46ac      	mov	ip, r5
 8015886:	46f2      	mov	sl, lr
 8015888:	f850 2b04 	ldr.w	r2, [r0], #4
 801588c:	b293      	uxth	r3, r2
 801588e:	fb06 e303 	mla	r3, r6, r3, lr
 8015892:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015896:	b29b      	uxth	r3, r3
 8015898:	ebaa 0303 	sub.w	r3, sl, r3
 801589c:	0c12      	lsrs	r2, r2, #16
 801589e:	f8dc a000 	ldr.w	sl, [ip]
 80158a2:	fb06 e202 	mla	r2, r6, r2, lr
 80158a6:	fa13 f38a 	uxtah	r3, r3, sl
 80158aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80158ae:	fa1f fa82 	uxth.w	sl, r2
 80158b2:	f8dc 2000 	ldr.w	r2, [ip]
 80158b6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80158ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80158be:	b29b      	uxth	r3, r3
 80158c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80158c4:	4581      	cmp	r9, r0
 80158c6:	f84c 3b04 	str.w	r3, [ip], #4
 80158ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80158ce:	d2db      	bcs.n	8015888 <quorem+0x44>
 80158d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80158d4:	b92b      	cbnz	r3, 80158e2 <quorem+0x9e>
 80158d6:	9b01      	ldr	r3, [sp, #4]
 80158d8:	3b04      	subs	r3, #4
 80158da:	429d      	cmp	r5, r3
 80158dc:	461a      	mov	r2, r3
 80158de:	d32e      	bcc.n	801593e <quorem+0xfa>
 80158e0:	613c      	str	r4, [r7, #16]
 80158e2:	4638      	mov	r0, r7
 80158e4:	f001 f9c8 	bl	8016c78 <__mcmp>
 80158e8:	2800      	cmp	r0, #0
 80158ea:	db24      	blt.n	8015936 <quorem+0xf2>
 80158ec:	3601      	adds	r6, #1
 80158ee:	4628      	mov	r0, r5
 80158f0:	f04f 0c00 	mov.w	ip, #0
 80158f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80158f8:	f8d0 e000 	ldr.w	lr, [r0]
 80158fc:	b293      	uxth	r3, r2
 80158fe:	ebac 0303 	sub.w	r3, ip, r3
 8015902:	0c12      	lsrs	r2, r2, #16
 8015904:	fa13 f38e 	uxtah	r3, r3, lr
 8015908:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801590c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015910:	b29b      	uxth	r3, r3
 8015912:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015916:	45c1      	cmp	r9, r8
 8015918:	f840 3b04 	str.w	r3, [r0], #4
 801591c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015920:	d2e8      	bcs.n	80158f4 <quorem+0xb0>
 8015922:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015926:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801592a:	b922      	cbnz	r2, 8015936 <quorem+0xf2>
 801592c:	3b04      	subs	r3, #4
 801592e:	429d      	cmp	r5, r3
 8015930:	461a      	mov	r2, r3
 8015932:	d30a      	bcc.n	801594a <quorem+0x106>
 8015934:	613c      	str	r4, [r7, #16]
 8015936:	4630      	mov	r0, r6
 8015938:	b003      	add	sp, #12
 801593a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801593e:	6812      	ldr	r2, [r2, #0]
 8015940:	3b04      	subs	r3, #4
 8015942:	2a00      	cmp	r2, #0
 8015944:	d1cc      	bne.n	80158e0 <quorem+0x9c>
 8015946:	3c01      	subs	r4, #1
 8015948:	e7c7      	b.n	80158da <quorem+0x96>
 801594a:	6812      	ldr	r2, [r2, #0]
 801594c:	3b04      	subs	r3, #4
 801594e:	2a00      	cmp	r2, #0
 8015950:	d1f0      	bne.n	8015934 <quorem+0xf0>
 8015952:	3c01      	subs	r4, #1
 8015954:	e7eb      	b.n	801592e <quorem+0xea>
 8015956:	2000      	movs	r0, #0
 8015958:	e7ee      	b.n	8015938 <quorem+0xf4>
 801595a:	0000      	movs	r0, r0
 801595c:	0000      	movs	r0, r0
	...

08015960 <_dtoa_r>:
 8015960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015964:	ed2d 8b02 	vpush	{d8}
 8015968:	ec57 6b10 	vmov	r6, r7, d0
 801596c:	b095      	sub	sp, #84	; 0x54
 801596e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015970:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015974:	9105      	str	r1, [sp, #20]
 8015976:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801597a:	4604      	mov	r4, r0
 801597c:	9209      	str	r2, [sp, #36]	; 0x24
 801597e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015980:	b975      	cbnz	r5, 80159a0 <_dtoa_r+0x40>
 8015982:	2010      	movs	r0, #16
 8015984:	f7ff f88a 	bl	8014a9c <malloc>
 8015988:	4602      	mov	r2, r0
 801598a:	6260      	str	r0, [r4, #36]	; 0x24
 801598c:	b920      	cbnz	r0, 8015998 <_dtoa_r+0x38>
 801598e:	4bb2      	ldr	r3, [pc, #712]	; (8015c58 <_dtoa_r+0x2f8>)
 8015990:	21ea      	movs	r1, #234	; 0xea
 8015992:	48b2      	ldr	r0, [pc, #712]	; (8015c5c <_dtoa_r+0x2fc>)
 8015994:	f7ff ff38 	bl	8015808 <__assert_func>
 8015998:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801599c:	6005      	str	r5, [r0, #0]
 801599e:	60c5      	str	r5, [r0, #12]
 80159a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80159a2:	6819      	ldr	r1, [r3, #0]
 80159a4:	b151      	cbz	r1, 80159bc <_dtoa_r+0x5c>
 80159a6:	685a      	ldr	r2, [r3, #4]
 80159a8:	604a      	str	r2, [r1, #4]
 80159aa:	2301      	movs	r3, #1
 80159ac:	4093      	lsls	r3, r2
 80159ae:	608b      	str	r3, [r1, #8]
 80159b0:	4620      	mov	r0, r4
 80159b2:	f000 ff23 	bl	80167fc <_Bfree>
 80159b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80159b8:	2200      	movs	r2, #0
 80159ba:	601a      	str	r2, [r3, #0]
 80159bc:	1e3b      	subs	r3, r7, #0
 80159be:	bfb9      	ittee	lt
 80159c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80159c4:	9303      	strlt	r3, [sp, #12]
 80159c6:	2300      	movge	r3, #0
 80159c8:	f8c8 3000 	strge.w	r3, [r8]
 80159cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80159d0:	4ba3      	ldr	r3, [pc, #652]	; (8015c60 <_dtoa_r+0x300>)
 80159d2:	bfbc      	itt	lt
 80159d4:	2201      	movlt	r2, #1
 80159d6:	f8c8 2000 	strlt.w	r2, [r8]
 80159da:	ea33 0309 	bics.w	r3, r3, r9
 80159de:	d11b      	bne.n	8015a18 <_dtoa_r+0xb8>
 80159e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80159e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80159e6:	6013      	str	r3, [r2, #0]
 80159e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80159ec:	4333      	orrs	r3, r6
 80159ee:	f000 857a 	beq.w	80164e6 <_dtoa_r+0xb86>
 80159f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80159f4:	b963      	cbnz	r3, 8015a10 <_dtoa_r+0xb0>
 80159f6:	4b9b      	ldr	r3, [pc, #620]	; (8015c64 <_dtoa_r+0x304>)
 80159f8:	e024      	b.n	8015a44 <_dtoa_r+0xe4>
 80159fa:	4b9b      	ldr	r3, [pc, #620]	; (8015c68 <_dtoa_r+0x308>)
 80159fc:	9300      	str	r3, [sp, #0]
 80159fe:	3308      	adds	r3, #8
 8015a00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015a02:	6013      	str	r3, [r2, #0]
 8015a04:	9800      	ldr	r0, [sp, #0]
 8015a06:	b015      	add	sp, #84	; 0x54
 8015a08:	ecbd 8b02 	vpop	{d8}
 8015a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a10:	4b94      	ldr	r3, [pc, #592]	; (8015c64 <_dtoa_r+0x304>)
 8015a12:	9300      	str	r3, [sp, #0]
 8015a14:	3303      	adds	r3, #3
 8015a16:	e7f3      	b.n	8015a00 <_dtoa_r+0xa0>
 8015a18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	ec51 0b17 	vmov	r0, r1, d7
 8015a22:	2300      	movs	r3, #0
 8015a24:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8015a28:	f7eb f85e 	bl	8000ae8 <__aeabi_dcmpeq>
 8015a2c:	4680      	mov	r8, r0
 8015a2e:	b158      	cbz	r0, 8015a48 <_dtoa_r+0xe8>
 8015a30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015a32:	2301      	movs	r3, #1
 8015a34:	6013      	str	r3, [r2, #0]
 8015a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	f000 8551 	beq.w	80164e0 <_dtoa_r+0xb80>
 8015a3e:	488b      	ldr	r0, [pc, #556]	; (8015c6c <_dtoa_r+0x30c>)
 8015a40:	6018      	str	r0, [r3, #0]
 8015a42:	1e43      	subs	r3, r0, #1
 8015a44:	9300      	str	r3, [sp, #0]
 8015a46:	e7dd      	b.n	8015a04 <_dtoa_r+0xa4>
 8015a48:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8015a4c:	aa12      	add	r2, sp, #72	; 0x48
 8015a4e:	a913      	add	r1, sp, #76	; 0x4c
 8015a50:	4620      	mov	r0, r4
 8015a52:	f001 f9b5 	bl	8016dc0 <__d2b>
 8015a56:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015a5a:	4683      	mov	fp, r0
 8015a5c:	2d00      	cmp	r5, #0
 8015a5e:	d07c      	beq.n	8015b5a <_dtoa_r+0x1fa>
 8015a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a62:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8015a66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015a6a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8015a6e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8015a72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8015a76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015a7a:	4b7d      	ldr	r3, [pc, #500]	; (8015c70 <_dtoa_r+0x310>)
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	4630      	mov	r0, r6
 8015a80:	4639      	mov	r1, r7
 8015a82:	f7ea fc11 	bl	80002a8 <__aeabi_dsub>
 8015a86:	a36e      	add	r3, pc, #440	; (adr r3, 8015c40 <_dtoa_r+0x2e0>)
 8015a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a8c:	f7ea fdc4 	bl	8000618 <__aeabi_dmul>
 8015a90:	a36d      	add	r3, pc, #436	; (adr r3, 8015c48 <_dtoa_r+0x2e8>)
 8015a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a96:	f7ea fc09 	bl	80002ac <__adddf3>
 8015a9a:	4606      	mov	r6, r0
 8015a9c:	4628      	mov	r0, r5
 8015a9e:	460f      	mov	r7, r1
 8015aa0:	f7ea fd50 	bl	8000544 <__aeabi_i2d>
 8015aa4:	a36a      	add	r3, pc, #424	; (adr r3, 8015c50 <_dtoa_r+0x2f0>)
 8015aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aaa:	f7ea fdb5 	bl	8000618 <__aeabi_dmul>
 8015aae:	4602      	mov	r2, r0
 8015ab0:	460b      	mov	r3, r1
 8015ab2:	4630      	mov	r0, r6
 8015ab4:	4639      	mov	r1, r7
 8015ab6:	f7ea fbf9 	bl	80002ac <__adddf3>
 8015aba:	4606      	mov	r6, r0
 8015abc:	460f      	mov	r7, r1
 8015abe:	f7eb f85b 	bl	8000b78 <__aeabi_d2iz>
 8015ac2:	2200      	movs	r2, #0
 8015ac4:	4682      	mov	sl, r0
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	4630      	mov	r0, r6
 8015aca:	4639      	mov	r1, r7
 8015acc:	f7eb f816 	bl	8000afc <__aeabi_dcmplt>
 8015ad0:	b148      	cbz	r0, 8015ae6 <_dtoa_r+0x186>
 8015ad2:	4650      	mov	r0, sl
 8015ad4:	f7ea fd36 	bl	8000544 <__aeabi_i2d>
 8015ad8:	4632      	mov	r2, r6
 8015ada:	463b      	mov	r3, r7
 8015adc:	f7eb f804 	bl	8000ae8 <__aeabi_dcmpeq>
 8015ae0:	b908      	cbnz	r0, 8015ae6 <_dtoa_r+0x186>
 8015ae2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015ae6:	f1ba 0f16 	cmp.w	sl, #22
 8015aea:	d854      	bhi.n	8015b96 <_dtoa_r+0x236>
 8015aec:	4b61      	ldr	r3, [pc, #388]	; (8015c74 <_dtoa_r+0x314>)
 8015aee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015af6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015afa:	f7ea ffff 	bl	8000afc <__aeabi_dcmplt>
 8015afe:	2800      	cmp	r0, #0
 8015b00:	d04b      	beq.n	8015b9a <_dtoa_r+0x23a>
 8015b02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015b06:	2300      	movs	r3, #0
 8015b08:	930e      	str	r3, [sp, #56]	; 0x38
 8015b0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015b0c:	1b5d      	subs	r5, r3, r5
 8015b0e:	1e6b      	subs	r3, r5, #1
 8015b10:	9304      	str	r3, [sp, #16]
 8015b12:	bf43      	ittte	mi
 8015b14:	2300      	movmi	r3, #0
 8015b16:	f1c5 0801 	rsbmi	r8, r5, #1
 8015b1a:	9304      	strmi	r3, [sp, #16]
 8015b1c:	f04f 0800 	movpl.w	r8, #0
 8015b20:	f1ba 0f00 	cmp.w	sl, #0
 8015b24:	db3b      	blt.n	8015b9e <_dtoa_r+0x23e>
 8015b26:	9b04      	ldr	r3, [sp, #16]
 8015b28:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8015b2c:	4453      	add	r3, sl
 8015b2e:	9304      	str	r3, [sp, #16]
 8015b30:	2300      	movs	r3, #0
 8015b32:	9306      	str	r3, [sp, #24]
 8015b34:	9b05      	ldr	r3, [sp, #20]
 8015b36:	2b09      	cmp	r3, #9
 8015b38:	d869      	bhi.n	8015c0e <_dtoa_r+0x2ae>
 8015b3a:	2b05      	cmp	r3, #5
 8015b3c:	bfc4      	itt	gt
 8015b3e:	3b04      	subgt	r3, #4
 8015b40:	9305      	strgt	r3, [sp, #20]
 8015b42:	9b05      	ldr	r3, [sp, #20]
 8015b44:	f1a3 0302 	sub.w	r3, r3, #2
 8015b48:	bfcc      	ite	gt
 8015b4a:	2500      	movgt	r5, #0
 8015b4c:	2501      	movle	r5, #1
 8015b4e:	2b03      	cmp	r3, #3
 8015b50:	d869      	bhi.n	8015c26 <_dtoa_r+0x2c6>
 8015b52:	e8df f003 	tbb	[pc, r3]
 8015b56:	4e2c      	.short	0x4e2c
 8015b58:	5a4c      	.short	0x5a4c
 8015b5a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8015b5e:	441d      	add	r5, r3
 8015b60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015b64:	2b20      	cmp	r3, #32
 8015b66:	bfc1      	itttt	gt
 8015b68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015b6c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8015b70:	fa09 f303 	lslgt.w	r3, r9, r3
 8015b74:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015b78:	bfda      	itte	le
 8015b7a:	f1c3 0320 	rsble	r3, r3, #32
 8015b7e:	fa06 f003 	lslle.w	r0, r6, r3
 8015b82:	4318      	orrgt	r0, r3
 8015b84:	f7ea fcce 	bl	8000524 <__aeabi_ui2d>
 8015b88:	2301      	movs	r3, #1
 8015b8a:	4606      	mov	r6, r0
 8015b8c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015b90:	3d01      	subs	r5, #1
 8015b92:	9310      	str	r3, [sp, #64]	; 0x40
 8015b94:	e771      	b.n	8015a7a <_dtoa_r+0x11a>
 8015b96:	2301      	movs	r3, #1
 8015b98:	e7b6      	b.n	8015b08 <_dtoa_r+0x1a8>
 8015b9a:	900e      	str	r0, [sp, #56]	; 0x38
 8015b9c:	e7b5      	b.n	8015b0a <_dtoa_r+0x1aa>
 8015b9e:	f1ca 0300 	rsb	r3, sl, #0
 8015ba2:	9306      	str	r3, [sp, #24]
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	eba8 080a 	sub.w	r8, r8, sl
 8015baa:	930d      	str	r3, [sp, #52]	; 0x34
 8015bac:	e7c2      	b.n	8015b34 <_dtoa_r+0x1d4>
 8015bae:	2300      	movs	r3, #0
 8015bb0:	9308      	str	r3, [sp, #32]
 8015bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	dc39      	bgt.n	8015c2c <_dtoa_r+0x2cc>
 8015bb8:	f04f 0901 	mov.w	r9, #1
 8015bbc:	f8cd 9004 	str.w	r9, [sp, #4]
 8015bc0:	464b      	mov	r3, r9
 8015bc2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8015bc6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015bc8:	2200      	movs	r2, #0
 8015bca:	6042      	str	r2, [r0, #4]
 8015bcc:	2204      	movs	r2, #4
 8015bce:	f102 0614 	add.w	r6, r2, #20
 8015bd2:	429e      	cmp	r6, r3
 8015bd4:	6841      	ldr	r1, [r0, #4]
 8015bd6:	d92f      	bls.n	8015c38 <_dtoa_r+0x2d8>
 8015bd8:	4620      	mov	r0, r4
 8015bda:	f000 fdcf 	bl	801677c <_Balloc>
 8015bde:	9000      	str	r0, [sp, #0]
 8015be0:	2800      	cmp	r0, #0
 8015be2:	d14b      	bne.n	8015c7c <_dtoa_r+0x31c>
 8015be4:	4b24      	ldr	r3, [pc, #144]	; (8015c78 <_dtoa_r+0x318>)
 8015be6:	4602      	mov	r2, r0
 8015be8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015bec:	e6d1      	b.n	8015992 <_dtoa_r+0x32>
 8015bee:	2301      	movs	r3, #1
 8015bf0:	e7de      	b.n	8015bb0 <_dtoa_r+0x250>
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	9308      	str	r3, [sp, #32]
 8015bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bf8:	eb0a 0903 	add.w	r9, sl, r3
 8015bfc:	f109 0301 	add.w	r3, r9, #1
 8015c00:	2b01      	cmp	r3, #1
 8015c02:	9301      	str	r3, [sp, #4]
 8015c04:	bfb8      	it	lt
 8015c06:	2301      	movlt	r3, #1
 8015c08:	e7dd      	b.n	8015bc6 <_dtoa_r+0x266>
 8015c0a:	2301      	movs	r3, #1
 8015c0c:	e7f2      	b.n	8015bf4 <_dtoa_r+0x294>
 8015c0e:	2501      	movs	r5, #1
 8015c10:	2300      	movs	r3, #0
 8015c12:	9305      	str	r3, [sp, #20]
 8015c14:	9508      	str	r5, [sp, #32]
 8015c16:	f04f 39ff 	mov.w	r9, #4294967295
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8015c20:	2312      	movs	r3, #18
 8015c22:	9209      	str	r2, [sp, #36]	; 0x24
 8015c24:	e7cf      	b.n	8015bc6 <_dtoa_r+0x266>
 8015c26:	2301      	movs	r3, #1
 8015c28:	9308      	str	r3, [sp, #32]
 8015c2a:	e7f4      	b.n	8015c16 <_dtoa_r+0x2b6>
 8015c2c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8015c30:	f8cd 9004 	str.w	r9, [sp, #4]
 8015c34:	464b      	mov	r3, r9
 8015c36:	e7c6      	b.n	8015bc6 <_dtoa_r+0x266>
 8015c38:	3101      	adds	r1, #1
 8015c3a:	6041      	str	r1, [r0, #4]
 8015c3c:	0052      	lsls	r2, r2, #1
 8015c3e:	e7c6      	b.n	8015bce <_dtoa_r+0x26e>
 8015c40:	636f4361 	.word	0x636f4361
 8015c44:	3fd287a7 	.word	0x3fd287a7
 8015c48:	8b60c8b3 	.word	0x8b60c8b3
 8015c4c:	3fc68a28 	.word	0x3fc68a28
 8015c50:	509f79fb 	.word	0x509f79fb
 8015c54:	3fd34413 	.word	0x3fd34413
 8015c58:	0801bd90 	.word	0x0801bd90
 8015c5c:	0801be4f 	.word	0x0801be4f
 8015c60:	7ff00000 	.word	0x7ff00000
 8015c64:	0801be4b 	.word	0x0801be4b
 8015c68:	0801be42 	.word	0x0801be42
 8015c6c:	0801bd6d 	.word	0x0801bd6d
 8015c70:	3ff80000 	.word	0x3ff80000
 8015c74:	0801bfa8 	.word	0x0801bfa8
 8015c78:	0801beae 	.word	0x0801beae
 8015c7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015c7e:	9a00      	ldr	r2, [sp, #0]
 8015c80:	601a      	str	r2, [r3, #0]
 8015c82:	9b01      	ldr	r3, [sp, #4]
 8015c84:	2b0e      	cmp	r3, #14
 8015c86:	f200 80ad 	bhi.w	8015de4 <_dtoa_r+0x484>
 8015c8a:	2d00      	cmp	r5, #0
 8015c8c:	f000 80aa 	beq.w	8015de4 <_dtoa_r+0x484>
 8015c90:	f1ba 0f00 	cmp.w	sl, #0
 8015c94:	dd36      	ble.n	8015d04 <_dtoa_r+0x3a4>
 8015c96:	4ac3      	ldr	r2, [pc, #780]	; (8015fa4 <_dtoa_r+0x644>)
 8015c98:	f00a 030f 	and.w	r3, sl, #15
 8015c9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015ca0:	ed93 7b00 	vldr	d7, [r3]
 8015ca4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8015ca8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8015cac:	eeb0 8a47 	vmov.f32	s16, s14
 8015cb0:	eef0 8a67 	vmov.f32	s17, s15
 8015cb4:	d016      	beq.n	8015ce4 <_dtoa_r+0x384>
 8015cb6:	4bbc      	ldr	r3, [pc, #752]	; (8015fa8 <_dtoa_r+0x648>)
 8015cb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015cbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015cc0:	f7ea fdd4 	bl	800086c <__aeabi_ddiv>
 8015cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015cc8:	f007 070f 	and.w	r7, r7, #15
 8015ccc:	2503      	movs	r5, #3
 8015cce:	4eb6      	ldr	r6, [pc, #728]	; (8015fa8 <_dtoa_r+0x648>)
 8015cd0:	b957      	cbnz	r7, 8015ce8 <_dtoa_r+0x388>
 8015cd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015cd6:	ec53 2b18 	vmov	r2, r3, d8
 8015cda:	f7ea fdc7 	bl	800086c <__aeabi_ddiv>
 8015cde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015ce2:	e029      	b.n	8015d38 <_dtoa_r+0x3d8>
 8015ce4:	2502      	movs	r5, #2
 8015ce6:	e7f2      	b.n	8015cce <_dtoa_r+0x36e>
 8015ce8:	07f9      	lsls	r1, r7, #31
 8015cea:	d508      	bpl.n	8015cfe <_dtoa_r+0x39e>
 8015cec:	ec51 0b18 	vmov	r0, r1, d8
 8015cf0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015cf4:	f7ea fc90 	bl	8000618 <__aeabi_dmul>
 8015cf8:	ec41 0b18 	vmov	d8, r0, r1
 8015cfc:	3501      	adds	r5, #1
 8015cfe:	107f      	asrs	r7, r7, #1
 8015d00:	3608      	adds	r6, #8
 8015d02:	e7e5      	b.n	8015cd0 <_dtoa_r+0x370>
 8015d04:	f000 80a6 	beq.w	8015e54 <_dtoa_r+0x4f4>
 8015d08:	f1ca 0600 	rsb	r6, sl, #0
 8015d0c:	4ba5      	ldr	r3, [pc, #660]	; (8015fa4 <_dtoa_r+0x644>)
 8015d0e:	4fa6      	ldr	r7, [pc, #664]	; (8015fa8 <_dtoa_r+0x648>)
 8015d10:	f006 020f 	and.w	r2, r6, #15
 8015d14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015d20:	f7ea fc7a 	bl	8000618 <__aeabi_dmul>
 8015d24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015d28:	1136      	asrs	r6, r6, #4
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	2502      	movs	r5, #2
 8015d2e:	2e00      	cmp	r6, #0
 8015d30:	f040 8085 	bne.w	8015e3e <_dtoa_r+0x4de>
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d1d2      	bne.n	8015cde <_dtoa_r+0x37e>
 8015d38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	f000 808c 	beq.w	8015e58 <_dtoa_r+0x4f8>
 8015d40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015d44:	4b99      	ldr	r3, [pc, #612]	; (8015fac <_dtoa_r+0x64c>)
 8015d46:	2200      	movs	r2, #0
 8015d48:	4630      	mov	r0, r6
 8015d4a:	4639      	mov	r1, r7
 8015d4c:	f7ea fed6 	bl	8000afc <__aeabi_dcmplt>
 8015d50:	2800      	cmp	r0, #0
 8015d52:	f000 8081 	beq.w	8015e58 <_dtoa_r+0x4f8>
 8015d56:	9b01      	ldr	r3, [sp, #4]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d07d      	beq.n	8015e58 <_dtoa_r+0x4f8>
 8015d5c:	f1b9 0f00 	cmp.w	r9, #0
 8015d60:	dd3c      	ble.n	8015ddc <_dtoa_r+0x47c>
 8015d62:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015d66:	9307      	str	r3, [sp, #28]
 8015d68:	2200      	movs	r2, #0
 8015d6a:	4b91      	ldr	r3, [pc, #580]	; (8015fb0 <_dtoa_r+0x650>)
 8015d6c:	4630      	mov	r0, r6
 8015d6e:	4639      	mov	r1, r7
 8015d70:	f7ea fc52 	bl	8000618 <__aeabi_dmul>
 8015d74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015d78:	3501      	adds	r5, #1
 8015d7a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8015d7e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015d82:	4628      	mov	r0, r5
 8015d84:	f7ea fbde 	bl	8000544 <__aeabi_i2d>
 8015d88:	4632      	mov	r2, r6
 8015d8a:	463b      	mov	r3, r7
 8015d8c:	f7ea fc44 	bl	8000618 <__aeabi_dmul>
 8015d90:	4b88      	ldr	r3, [pc, #544]	; (8015fb4 <_dtoa_r+0x654>)
 8015d92:	2200      	movs	r2, #0
 8015d94:	f7ea fa8a 	bl	80002ac <__adddf3>
 8015d98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8015d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015da0:	9303      	str	r3, [sp, #12]
 8015da2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d15c      	bne.n	8015e62 <_dtoa_r+0x502>
 8015da8:	4b83      	ldr	r3, [pc, #524]	; (8015fb8 <_dtoa_r+0x658>)
 8015daa:	2200      	movs	r2, #0
 8015dac:	4630      	mov	r0, r6
 8015dae:	4639      	mov	r1, r7
 8015db0:	f7ea fa7a 	bl	80002a8 <__aeabi_dsub>
 8015db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015db8:	4606      	mov	r6, r0
 8015dba:	460f      	mov	r7, r1
 8015dbc:	f7ea febc 	bl	8000b38 <__aeabi_dcmpgt>
 8015dc0:	2800      	cmp	r0, #0
 8015dc2:	f040 8296 	bne.w	80162f2 <_dtoa_r+0x992>
 8015dc6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015dca:	4630      	mov	r0, r6
 8015dcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015dd0:	4639      	mov	r1, r7
 8015dd2:	f7ea fe93 	bl	8000afc <__aeabi_dcmplt>
 8015dd6:	2800      	cmp	r0, #0
 8015dd8:	f040 8288 	bne.w	80162ec <_dtoa_r+0x98c>
 8015ddc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015de0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015de4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	f2c0 8158 	blt.w	801609c <_dtoa_r+0x73c>
 8015dec:	f1ba 0f0e 	cmp.w	sl, #14
 8015df0:	f300 8154 	bgt.w	801609c <_dtoa_r+0x73c>
 8015df4:	4b6b      	ldr	r3, [pc, #428]	; (8015fa4 <_dtoa_r+0x644>)
 8015df6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015dfa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	f280 80e3 	bge.w	8015fcc <_dtoa_r+0x66c>
 8015e06:	9b01      	ldr	r3, [sp, #4]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	f300 80df 	bgt.w	8015fcc <_dtoa_r+0x66c>
 8015e0e:	f040 826d 	bne.w	80162ec <_dtoa_r+0x98c>
 8015e12:	4b69      	ldr	r3, [pc, #420]	; (8015fb8 <_dtoa_r+0x658>)
 8015e14:	2200      	movs	r2, #0
 8015e16:	4640      	mov	r0, r8
 8015e18:	4649      	mov	r1, r9
 8015e1a:	f7ea fbfd 	bl	8000618 <__aeabi_dmul>
 8015e1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015e22:	f7ea fe7f 	bl	8000b24 <__aeabi_dcmpge>
 8015e26:	9e01      	ldr	r6, [sp, #4]
 8015e28:	4637      	mov	r7, r6
 8015e2a:	2800      	cmp	r0, #0
 8015e2c:	f040 8243 	bne.w	80162b6 <_dtoa_r+0x956>
 8015e30:	9d00      	ldr	r5, [sp, #0]
 8015e32:	2331      	movs	r3, #49	; 0x31
 8015e34:	f805 3b01 	strb.w	r3, [r5], #1
 8015e38:	f10a 0a01 	add.w	sl, sl, #1
 8015e3c:	e23f      	b.n	80162be <_dtoa_r+0x95e>
 8015e3e:	07f2      	lsls	r2, r6, #31
 8015e40:	d505      	bpl.n	8015e4e <_dtoa_r+0x4ee>
 8015e42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015e46:	f7ea fbe7 	bl	8000618 <__aeabi_dmul>
 8015e4a:	3501      	adds	r5, #1
 8015e4c:	2301      	movs	r3, #1
 8015e4e:	1076      	asrs	r6, r6, #1
 8015e50:	3708      	adds	r7, #8
 8015e52:	e76c      	b.n	8015d2e <_dtoa_r+0x3ce>
 8015e54:	2502      	movs	r5, #2
 8015e56:	e76f      	b.n	8015d38 <_dtoa_r+0x3d8>
 8015e58:	9b01      	ldr	r3, [sp, #4]
 8015e5a:	f8cd a01c 	str.w	sl, [sp, #28]
 8015e5e:	930c      	str	r3, [sp, #48]	; 0x30
 8015e60:	e78d      	b.n	8015d7e <_dtoa_r+0x41e>
 8015e62:	9900      	ldr	r1, [sp, #0]
 8015e64:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015e66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015e68:	4b4e      	ldr	r3, [pc, #312]	; (8015fa4 <_dtoa_r+0x644>)
 8015e6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015e6e:	4401      	add	r1, r0
 8015e70:	9102      	str	r1, [sp, #8]
 8015e72:	9908      	ldr	r1, [sp, #32]
 8015e74:	eeb0 8a47 	vmov.f32	s16, s14
 8015e78:	eef0 8a67 	vmov.f32	s17, s15
 8015e7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015e80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015e84:	2900      	cmp	r1, #0
 8015e86:	d045      	beq.n	8015f14 <_dtoa_r+0x5b4>
 8015e88:	494c      	ldr	r1, [pc, #304]	; (8015fbc <_dtoa_r+0x65c>)
 8015e8a:	2000      	movs	r0, #0
 8015e8c:	f7ea fcee 	bl	800086c <__aeabi_ddiv>
 8015e90:	ec53 2b18 	vmov	r2, r3, d8
 8015e94:	f7ea fa08 	bl	80002a8 <__aeabi_dsub>
 8015e98:	9d00      	ldr	r5, [sp, #0]
 8015e9a:	ec41 0b18 	vmov	d8, r0, r1
 8015e9e:	4639      	mov	r1, r7
 8015ea0:	4630      	mov	r0, r6
 8015ea2:	f7ea fe69 	bl	8000b78 <__aeabi_d2iz>
 8015ea6:	900c      	str	r0, [sp, #48]	; 0x30
 8015ea8:	f7ea fb4c 	bl	8000544 <__aeabi_i2d>
 8015eac:	4602      	mov	r2, r0
 8015eae:	460b      	mov	r3, r1
 8015eb0:	4630      	mov	r0, r6
 8015eb2:	4639      	mov	r1, r7
 8015eb4:	f7ea f9f8 	bl	80002a8 <__aeabi_dsub>
 8015eb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015eba:	3330      	adds	r3, #48	; 0x30
 8015ebc:	f805 3b01 	strb.w	r3, [r5], #1
 8015ec0:	ec53 2b18 	vmov	r2, r3, d8
 8015ec4:	4606      	mov	r6, r0
 8015ec6:	460f      	mov	r7, r1
 8015ec8:	f7ea fe18 	bl	8000afc <__aeabi_dcmplt>
 8015ecc:	2800      	cmp	r0, #0
 8015ece:	d165      	bne.n	8015f9c <_dtoa_r+0x63c>
 8015ed0:	4632      	mov	r2, r6
 8015ed2:	463b      	mov	r3, r7
 8015ed4:	4935      	ldr	r1, [pc, #212]	; (8015fac <_dtoa_r+0x64c>)
 8015ed6:	2000      	movs	r0, #0
 8015ed8:	f7ea f9e6 	bl	80002a8 <__aeabi_dsub>
 8015edc:	ec53 2b18 	vmov	r2, r3, d8
 8015ee0:	f7ea fe0c 	bl	8000afc <__aeabi_dcmplt>
 8015ee4:	2800      	cmp	r0, #0
 8015ee6:	f040 80b9 	bne.w	801605c <_dtoa_r+0x6fc>
 8015eea:	9b02      	ldr	r3, [sp, #8]
 8015eec:	429d      	cmp	r5, r3
 8015eee:	f43f af75 	beq.w	8015ddc <_dtoa_r+0x47c>
 8015ef2:	4b2f      	ldr	r3, [pc, #188]	; (8015fb0 <_dtoa_r+0x650>)
 8015ef4:	ec51 0b18 	vmov	r0, r1, d8
 8015ef8:	2200      	movs	r2, #0
 8015efa:	f7ea fb8d 	bl	8000618 <__aeabi_dmul>
 8015efe:	4b2c      	ldr	r3, [pc, #176]	; (8015fb0 <_dtoa_r+0x650>)
 8015f00:	ec41 0b18 	vmov	d8, r0, r1
 8015f04:	2200      	movs	r2, #0
 8015f06:	4630      	mov	r0, r6
 8015f08:	4639      	mov	r1, r7
 8015f0a:	f7ea fb85 	bl	8000618 <__aeabi_dmul>
 8015f0e:	4606      	mov	r6, r0
 8015f10:	460f      	mov	r7, r1
 8015f12:	e7c4      	b.n	8015e9e <_dtoa_r+0x53e>
 8015f14:	ec51 0b17 	vmov	r0, r1, d7
 8015f18:	f7ea fb7e 	bl	8000618 <__aeabi_dmul>
 8015f1c:	9b02      	ldr	r3, [sp, #8]
 8015f1e:	9d00      	ldr	r5, [sp, #0]
 8015f20:	930c      	str	r3, [sp, #48]	; 0x30
 8015f22:	ec41 0b18 	vmov	d8, r0, r1
 8015f26:	4639      	mov	r1, r7
 8015f28:	4630      	mov	r0, r6
 8015f2a:	f7ea fe25 	bl	8000b78 <__aeabi_d2iz>
 8015f2e:	9011      	str	r0, [sp, #68]	; 0x44
 8015f30:	f7ea fb08 	bl	8000544 <__aeabi_i2d>
 8015f34:	4602      	mov	r2, r0
 8015f36:	460b      	mov	r3, r1
 8015f38:	4630      	mov	r0, r6
 8015f3a:	4639      	mov	r1, r7
 8015f3c:	f7ea f9b4 	bl	80002a8 <__aeabi_dsub>
 8015f40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f42:	3330      	adds	r3, #48	; 0x30
 8015f44:	f805 3b01 	strb.w	r3, [r5], #1
 8015f48:	9b02      	ldr	r3, [sp, #8]
 8015f4a:	429d      	cmp	r5, r3
 8015f4c:	4606      	mov	r6, r0
 8015f4e:	460f      	mov	r7, r1
 8015f50:	f04f 0200 	mov.w	r2, #0
 8015f54:	d134      	bne.n	8015fc0 <_dtoa_r+0x660>
 8015f56:	4b19      	ldr	r3, [pc, #100]	; (8015fbc <_dtoa_r+0x65c>)
 8015f58:	ec51 0b18 	vmov	r0, r1, d8
 8015f5c:	f7ea f9a6 	bl	80002ac <__adddf3>
 8015f60:	4602      	mov	r2, r0
 8015f62:	460b      	mov	r3, r1
 8015f64:	4630      	mov	r0, r6
 8015f66:	4639      	mov	r1, r7
 8015f68:	f7ea fde6 	bl	8000b38 <__aeabi_dcmpgt>
 8015f6c:	2800      	cmp	r0, #0
 8015f6e:	d175      	bne.n	801605c <_dtoa_r+0x6fc>
 8015f70:	ec53 2b18 	vmov	r2, r3, d8
 8015f74:	4911      	ldr	r1, [pc, #68]	; (8015fbc <_dtoa_r+0x65c>)
 8015f76:	2000      	movs	r0, #0
 8015f78:	f7ea f996 	bl	80002a8 <__aeabi_dsub>
 8015f7c:	4602      	mov	r2, r0
 8015f7e:	460b      	mov	r3, r1
 8015f80:	4630      	mov	r0, r6
 8015f82:	4639      	mov	r1, r7
 8015f84:	f7ea fdba 	bl	8000afc <__aeabi_dcmplt>
 8015f88:	2800      	cmp	r0, #0
 8015f8a:	f43f af27 	beq.w	8015ddc <_dtoa_r+0x47c>
 8015f8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015f90:	1e6b      	subs	r3, r5, #1
 8015f92:	930c      	str	r3, [sp, #48]	; 0x30
 8015f94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015f98:	2b30      	cmp	r3, #48	; 0x30
 8015f9a:	d0f8      	beq.n	8015f8e <_dtoa_r+0x62e>
 8015f9c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015fa0:	e04a      	b.n	8016038 <_dtoa_r+0x6d8>
 8015fa2:	bf00      	nop
 8015fa4:	0801bfa8 	.word	0x0801bfa8
 8015fa8:	0801bf80 	.word	0x0801bf80
 8015fac:	3ff00000 	.word	0x3ff00000
 8015fb0:	40240000 	.word	0x40240000
 8015fb4:	401c0000 	.word	0x401c0000
 8015fb8:	40140000 	.word	0x40140000
 8015fbc:	3fe00000 	.word	0x3fe00000
 8015fc0:	4baf      	ldr	r3, [pc, #700]	; (8016280 <_dtoa_r+0x920>)
 8015fc2:	f7ea fb29 	bl	8000618 <__aeabi_dmul>
 8015fc6:	4606      	mov	r6, r0
 8015fc8:	460f      	mov	r7, r1
 8015fca:	e7ac      	b.n	8015f26 <_dtoa_r+0x5c6>
 8015fcc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015fd0:	9d00      	ldr	r5, [sp, #0]
 8015fd2:	4642      	mov	r2, r8
 8015fd4:	464b      	mov	r3, r9
 8015fd6:	4630      	mov	r0, r6
 8015fd8:	4639      	mov	r1, r7
 8015fda:	f7ea fc47 	bl	800086c <__aeabi_ddiv>
 8015fde:	f7ea fdcb 	bl	8000b78 <__aeabi_d2iz>
 8015fe2:	9002      	str	r0, [sp, #8]
 8015fe4:	f7ea faae 	bl	8000544 <__aeabi_i2d>
 8015fe8:	4642      	mov	r2, r8
 8015fea:	464b      	mov	r3, r9
 8015fec:	f7ea fb14 	bl	8000618 <__aeabi_dmul>
 8015ff0:	4602      	mov	r2, r0
 8015ff2:	460b      	mov	r3, r1
 8015ff4:	4630      	mov	r0, r6
 8015ff6:	4639      	mov	r1, r7
 8015ff8:	f7ea f956 	bl	80002a8 <__aeabi_dsub>
 8015ffc:	9e02      	ldr	r6, [sp, #8]
 8015ffe:	9f01      	ldr	r7, [sp, #4]
 8016000:	3630      	adds	r6, #48	; 0x30
 8016002:	f805 6b01 	strb.w	r6, [r5], #1
 8016006:	9e00      	ldr	r6, [sp, #0]
 8016008:	1bae      	subs	r6, r5, r6
 801600a:	42b7      	cmp	r7, r6
 801600c:	4602      	mov	r2, r0
 801600e:	460b      	mov	r3, r1
 8016010:	d137      	bne.n	8016082 <_dtoa_r+0x722>
 8016012:	f7ea f94b 	bl	80002ac <__adddf3>
 8016016:	4642      	mov	r2, r8
 8016018:	464b      	mov	r3, r9
 801601a:	4606      	mov	r6, r0
 801601c:	460f      	mov	r7, r1
 801601e:	f7ea fd8b 	bl	8000b38 <__aeabi_dcmpgt>
 8016022:	b9c8      	cbnz	r0, 8016058 <_dtoa_r+0x6f8>
 8016024:	4642      	mov	r2, r8
 8016026:	464b      	mov	r3, r9
 8016028:	4630      	mov	r0, r6
 801602a:	4639      	mov	r1, r7
 801602c:	f7ea fd5c 	bl	8000ae8 <__aeabi_dcmpeq>
 8016030:	b110      	cbz	r0, 8016038 <_dtoa_r+0x6d8>
 8016032:	9b02      	ldr	r3, [sp, #8]
 8016034:	07d9      	lsls	r1, r3, #31
 8016036:	d40f      	bmi.n	8016058 <_dtoa_r+0x6f8>
 8016038:	4620      	mov	r0, r4
 801603a:	4659      	mov	r1, fp
 801603c:	f000 fbde 	bl	80167fc <_Bfree>
 8016040:	2300      	movs	r3, #0
 8016042:	702b      	strb	r3, [r5, #0]
 8016044:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016046:	f10a 0001 	add.w	r0, sl, #1
 801604a:	6018      	str	r0, [r3, #0]
 801604c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801604e:	2b00      	cmp	r3, #0
 8016050:	f43f acd8 	beq.w	8015a04 <_dtoa_r+0xa4>
 8016054:	601d      	str	r5, [r3, #0]
 8016056:	e4d5      	b.n	8015a04 <_dtoa_r+0xa4>
 8016058:	f8cd a01c 	str.w	sl, [sp, #28]
 801605c:	462b      	mov	r3, r5
 801605e:	461d      	mov	r5, r3
 8016060:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016064:	2a39      	cmp	r2, #57	; 0x39
 8016066:	d108      	bne.n	801607a <_dtoa_r+0x71a>
 8016068:	9a00      	ldr	r2, [sp, #0]
 801606a:	429a      	cmp	r2, r3
 801606c:	d1f7      	bne.n	801605e <_dtoa_r+0x6fe>
 801606e:	9a07      	ldr	r2, [sp, #28]
 8016070:	9900      	ldr	r1, [sp, #0]
 8016072:	3201      	adds	r2, #1
 8016074:	9207      	str	r2, [sp, #28]
 8016076:	2230      	movs	r2, #48	; 0x30
 8016078:	700a      	strb	r2, [r1, #0]
 801607a:	781a      	ldrb	r2, [r3, #0]
 801607c:	3201      	adds	r2, #1
 801607e:	701a      	strb	r2, [r3, #0]
 8016080:	e78c      	b.n	8015f9c <_dtoa_r+0x63c>
 8016082:	4b7f      	ldr	r3, [pc, #508]	; (8016280 <_dtoa_r+0x920>)
 8016084:	2200      	movs	r2, #0
 8016086:	f7ea fac7 	bl	8000618 <__aeabi_dmul>
 801608a:	2200      	movs	r2, #0
 801608c:	2300      	movs	r3, #0
 801608e:	4606      	mov	r6, r0
 8016090:	460f      	mov	r7, r1
 8016092:	f7ea fd29 	bl	8000ae8 <__aeabi_dcmpeq>
 8016096:	2800      	cmp	r0, #0
 8016098:	d09b      	beq.n	8015fd2 <_dtoa_r+0x672>
 801609a:	e7cd      	b.n	8016038 <_dtoa_r+0x6d8>
 801609c:	9a08      	ldr	r2, [sp, #32]
 801609e:	2a00      	cmp	r2, #0
 80160a0:	f000 80c4 	beq.w	801622c <_dtoa_r+0x8cc>
 80160a4:	9a05      	ldr	r2, [sp, #20]
 80160a6:	2a01      	cmp	r2, #1
 80160a8:	f300 80a8 	bgt.w	80161fc <_dtoa_r+0x89c>
 80160ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80160ae:	2a00      	cmp	r2, #0
 80160b0:	f000 80a0 	beq.w	80161f4 <_dtoa_r+0x894>
 80160b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80160b8:	9e06      	ldr	r6, [sp, #24]
 80160ba:	4645      	mov	r5, r8
 80160bc:	9a04      	ldr	r2, [sp, #16]
 80160be:	2101      	movs	r1, #1
 80160c0:	441a      	add	r2, r3
 80160c2:	4620      	mov	r0, r4
 80160c4:	4498      	add	r8, r3
 80160c6:	9204      	str	r2, [sp, #16]
 80160c8:	f000 fc54 	bl	8016974 <__i2b>
 80160cc:	4607      	mov	r7, r0
 80160ce:	2d00      	cmp	r5, #0
 80160d0:	dd0b      	ble.n	80160ea <_dtoa_r+0x78a>
 80160d2:	9b04      	ldr	r3, [sp, #16]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	dd08      	ble.n	80160ea <_dtoa_r+0x78a>
 80160d8:	42ab      	cmp	r3, r5
 80160da:	9a04      	ldr	r2, [sp, #16]
 80160dc:	bfa8      	it	ge
 80160de:	462b      	movge	r3, r5
 80160e0:	eba8 0803 	sub.w	r8, r8, r3
 80160e4:	1aed      	subs	r5, r5, r3
 80160e6:	1ad3      	subs	r3, r2, r3
 80160e8:	9304      	str	r3, [sp, #16]
 80160ea:	9b06      	ldr	r3, [sp, #24]
 80160ec:	b1fb      	cbz	r3, 801612e <_dtoa_r+0x7ce>
 80160ee:	9b08      	ldr	r3, [sp, #32]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	f000 809f 	beq.w	8016234 <_dtoa_r+0x8d4>
 80160f6:	2e00      	cmp	r6, #0
 80160f8:	dd11      	ble.n	801611e <_dtoa_r+0x7be>
 80160fa:	4639      	mov	r1, r7
 80160fc:	4632      	mov	r2, r6
 80160fe:	4620      	mov	r0, r4
 8016100:	f000 fcf4 	bl	8016aec <__pow5mult>
 8016104:	465a      	mov	r2, fp
 8016106:	4601      	mov	r1, r0
 8016108:	4607      	mov	r7, r0
 801610a:	4620      	mov	r0, r4
 801610c:	f000 fc48 	bl	80169a0 <__multiply>
 8016110:	4659      	mov	r1, fp
 8016112:	9007      	str	r0, [sp, #28]
 8016114:	4620      	mov	r0, r4
 8016116:	f000 fb71 	bl	80167fc <_Bfree>
 801611a:	9b07      	ldr	r3, [sp, #28]
 801611c:	469b      	mov	fp, r3
 801611e:	9b06      	ldr	r3, [sp, #24]
 8016120:	1b9a      	subs	r2, r3, r6
 8016122:	d004      	beq.n	801612e <_dtoa_r+0x7ce>
 8016124:	4659      	mov	r1, fp
 8016126:	4620      	mov	r0, r4
 8016128:	f000 fce0 	bl	8016aec <__pow5mult>
 801612c:	4683      	mov	fp, r0
 801612e:	2101      	movs	r1, #1
 8016130:	4620      	mov	r0, r4
 8016132:	f000 fc1f 	bl	8016974 <__i2b>
 8016136:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016138:	2b00      	cmp	r3, #0
 801613a:	4606      	mov	r6, r0
 801613c:	dd7c      	ble.n	8016238 <_dtoa_r+0x8d8>
 801613e:	461a      	mov	r2, r3
 8016140:	4601      	mov	r1, r0
 8016142:	4620      	mov	r0, r4
 8016144:	f000 fcd2 	bl	8016aec <__pow5mult>
 8016148:	9b05      	ldr	r3, [sp, #20]
 801614a:	2b01      	cmp	r3, #1
 801614c:	4606      	mov	r6, r0
 801614e:	dd76      	ble.n	801623e <_dtoa_r+0x8de>
 8016150:	2300      	movs	r3, #0
 8016152:	9306      	str	r3, [sp, #24]
 8016154:	6933      	ldr	r3, [r6, #16]
 8016156:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801615a:	6918      	ldr	r0, [r3, #16]
 801615c:	f000 fbba 	bl	80168d4 <__hi0bits>
 8016160:	f1c0 0020 	rsb	r0, r0, #32
 8016164:	9b04      	ldr	r3, [sp, #16]
 8016166:	4418      	add	r0, r3
 8016168:	f010 001f 	ands.w	r0, r0, #31
 801616c:	f000 8086 	beq.w	801627c <_dtoa_r+0x91c>
 8016170:	f1c0 0320 	rsb	r3, r0, #32
 8016174:	2b04      	cmp	r3, #4
 8016176:	dd7f      	ble.n	8016278 <_dtoa_r+0x918>
 8016178:	f1c0 001c 	rsb	r0, r0, #28
 801617c:	9b04      	ldr	r3, [sp, #16]
 801617e:	4403      	add	r3, r0
 8016180:	4480      	add	r8, r0
 8016182:	4405      	add	r5, r0
 8016184:	9304      	str	r3, [sp, #16]
 8016186:	f1b8 0f00 	cmp.w	r8, #0
 801618a:	dd05      	ble.n	8016198 <_dtoa_r+0x838>
 801618c:	4659      	mov	r1, fp
 801618e:	4642      	mov	r2, r8
 8016190:	4620      	mov	r0, r4
 8016192:	f000 fd05 	bl	8016ba0 <__lshift>
 8016196:	4683      	mov	fp, r0
 8016198:	9b04      	ldr	r3, [sp, #16]
 801619a:	2b00      	cmp	r3, #0
 801619c:	dd05      	ble.n	80161aa <_dtoa_r+0x84a>
 801619e:	4631      	mov	r1, r6
 80161a0:	461a      	mov	r2, r3
 80161a2:	4620      	mov	r0, r4
 80161a4:	f000 fcfc 	bl	8016ba0 <__lshift>
 80161a8:	4606      	mov	r6, r0
 80161aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d069      	beq.n	8016284 <_dtoa_r+0x924>
 80161b0:	4631      	mov	r1, r6
 80161b2:	4658      	mov	r0, fp
 80161b4:	f000 fd60 	bl	8016c78 <__mcmp>
 80161b8:	2800      	cmp	r0, #0
 80161ba:	da63      	bge.n	8016284 <_dtoa_r+0x924>
 80161bc:	2300      	movs	r3, #0
 80161be:	4659      	mov	r1, fp
 80161c0:	220a      	movs	r2, #10
 80161c2:	4620      	mov	r0, r4
 80161c4:	f000 fb3c 	bl	8016840 <__multadd>
 80161c8:	9b08      	ldr	r3, [sp, #32]
 80161ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80161ce:	4683      	mov	fp, r0
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	f000 818f 	beq.w	80164f4 <_dtoa_r+0xb94>
 80161d6:	4639      	mov	r1, r7
 80161d8:	2300      	movs	r3, #0
 80161da:	220a      	movs	r2, #10
 80161dc:	4620      	mov	r0, r4
 80161de:	f000 fb2f 	bl	8016840 <__multadd>
 80161e2:	f1b9 0f00 	cmp.w	r9, #0
 80161e6:	4607      	mov	r7, r0
 80161e8:	f300 808e 	bgt.w	8016308 <_dtoa_r+0x9a8>
 80161ec:	9b05      	ldr	r3, [sp, #20]
 80161ee:	2b02      	cmp	r3, #2
 80161f0:	dc50      	bgt.n	8016294 <_dtoa_r+0x934>
 80161f2:	e089      	b.n	8016308 <_dtoa_r+0x9a8>
 80161f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80161f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80161fa:	e75d      	b.n	80160b8 <_dtoa_r+0x758>
 80161fc:	9b01      	ldr	r3, [sp, #4]
 80161fe:	1e5e      	subs	r6, r3, #1
 8016200:	9b06      	ldr	r3, [sp, #24]
 8016202:	42b3      	cmp	r3, r6
 8016204:	bfbf      	itttt	lt
 8016206:	9b06      	ldrlt	r3, [sp, #24]
 8016208:	9606      	strlt	r6, [sp, #24]
 801620a:	1af2      	sublt	r2, r6, r3
 801620c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801620e:	bfb6      	itet	lt
 8016210:	189b      	addlt	r3, r3, r2
 8016212:	1b9e      	subge	r6, r3, r6
 8016214:	930d      	strlt	r3, [sp, #52]	; 0x34
 8016216:	9b01      	ldr	r3, [sp, #4]
 8016218:	bfb8      	it	lt
 801621a:	2600      	movlt	r6, #0
 801621c:	2b00      	cmp	r3, #0
 801621e:	bfb5      	itete	lt
 8016220:	eba8 0503 	sublt.w	r5, r8, r3
 8016224:	9b01      	ldrge	r3, [sp, #4]
 8016226:	2300      	movlt	r3, #0
 8016228:	4645      	movge	r5, r8
 801622a:	e747      	b.n	80160bc <_dtoa_r+0x75c>
 801622c:	9e06      	ldr	r6, [sp, #24]
 801622e:	9f08      	ldr	r7, [sp, #32]
 8016230:	4645      	mov	r5, r8
 8016232:	e74c      	b.n	80160ce <_dtoa_r+0x76e>
 8016234:	9a06      	ldr	r2, [sp, #24]
 8016236:	e775      	b.n	8016124 <_dtoa_r+0x7c4>
 8016238:	9b05      	ldr	r3, [sp, #20]
 801623a:	2b01      	cmp	r3, #1
 801623c:	dc18      	bgt.n	8016270 <_dtoa_r+0x910>
 801623e:	9b02      	ldr	r3, [sp, #8]
 8016240:	b9b3      	cbnz	r3, 8016270 <_dtoa_r+0x910>
 8016242:	9b03      	ldr	r3, [sp, #12]
 8016244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016248:	b9a3      	cbnz	r3, 8016274 <_dtoa_r+0x914>
 801624a:	9b03      	ldr	r3, [sp, #12]
 801624c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016250:	0d1b      	lsrs	r3, r3, #20
 8016252:	051b      	lsls	r3, r3, #20
 8016254:	b12b      	cbz	r3, 8016262 <_dtoa_r+0x902>
 8016256:	9b04      	ldr	r3, [sp, #16]
 8016258:	3301      	adds	r3, #1
 801625a:	9304      	str	r3, [sp, #16]
 801625c:	f108 0801 	add.w	r8, r8, #1
 8016260:	2301      	movs	r3, #1
 8016262:	9306      	str	r3, [sp, #24]
 8016264:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016266:	2b00      	cmp	r3, #0
 8016268:	f47f af74 	bne.w	8016154 <_dtoa_r+0x7f4>
 801626c:	2001      	movs	r0, #1
 801626e:	e779      	b.n	8016164 <_dtoa_r+0x804>
 8016270:	2300      	movs	r3, #0
 8016272:	e7f6      	b.n	8016262 <_dtoa_r+0x902>
 8016274:	9b02      	ldr	r3, [sp, #8]
 8016276:	e7f4      	b.n	8016262 <_dtoa_r+0x902>
 8016278:	d085      	beq.n	8016186 <_dtoa_r+0x826>
 801627a:	4618      	mov	r0, r3
 801627c:	301c      	adds	r0, #28
 801627e:	e77d      	b.n	801617c <_dtoa_r+0x81c>
 8016280:	40240000 	.word	0x40240000
 8016284:	9b01      	ldr	r3, [sp, #4]
 8016286:	2b00      	cmp	r3, #0
 8016288:	dc38      	bgt.n	80162fc <_dtoa_r+0x99c>
 801628a:	9b05      	ldr	r3, [sp, #20]
 801628c:	2b02      	cmp	r3, #2
 801628e:	dd35      	ble.n	80162fc <_dtoa_r+0x99c>
 8016290:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8016294:	f1b9 0f00 	cmp.w	r9, #0
 8016298:	d10d      	bne.n	80162b6 <_dtoa_r+0x956>
 801629a:	4631      	mov	r1, r6
 801629c:	464b      	mov	r3, r9
 801629e:	2205      	movs	r2, #5
 80162a0:	4620      	mov	r0, r4
 80162a2:	f000 facd 	bl	8016840 <__multadd>
 80162a6:	4601      	mov	r1, r0
 80162a8:	4606      	mov	r6, r0
 80162aa:	4658      	mov	r0, fp
 80162ac:	f000 fce4 	bl	8016c78 <__mcmp>
 80162b0:	2800      	cmp	r0, #0
 80162b2:	f73f adbd 	bgt.w	8015e30 <_dtoa_r+0x4d0>
 80162b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162b8:	9d00      	ldr	r5, [sp, #0]
 80162ba:	ea6f 0a03 	mvn.w	sl, r3
 80162be:	f04f 0800 	mov.w	r8, #0
 80162c2:	4631      	mov	r1, r6
 80162c4:	4620      	mov	r0, r4
 80162c6:	f000 fa99 	bl	80167fc <_Bfree>
 80162ca:	2f00      	cmp	r7, #0
 80162cc:	f43f aeb4 	beq.w	8016038 <_dtoa_r+0x6d8>
 80162d0:	f1b8 0f00 	cmp.w	r8, #0
 80162d4:	d005      	beq.n	80162e2 <_dtoa_r+0x982>
 80162d6:	45b8      	cmp	r8, r7
 80162d8:	d003      	beq.n	80162e2 <_dtoa_r+0x982>
 80162da:	4641      	mov	r1, r8
 80162dc:	4620      	mov	r0, r4
 80162de:	f000 fa8d 	bl	80167fc <_Bfree>
 80162e2:	4639      	mov	r1, r7
 80162e4:	4620      	mov	r0, r4
 80162e6:	f000 fa89 	bl	80167fc <_Bfree>
 80162ea:	e6a5      	b.n	8016038 <_dtoa_r+0x6d8>
 80162ec:	2600      	movs	r6, #0
 80162ee:	4637      	mov	r7, r6
 80162f0:	e7e1      	b.n	80162b6 <_dtoa_r+0x956>
 80162f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80162f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80162f8:	4637      	mov	r7, r6
 80162fa:	e599      	b.n	8015e30 <_dtoa_r+0x4d0>
 80162fc:	9b08      	ldr	r3, [sp, #32]
 80162fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8016302:	2b00      	cmp	r3, #0
 8016304:	f000 80fd 	beq.w	8016502 <_dtoa_r+0xba2>
 8016308:	2d00      	cmp	r5, #0
 801630a:	dd05      	ble.n	8016318 <_dtoa_r+0x9b8>
 801630c:	4639      	mov	r1, r7
 801630e:	462a      	mov	r2, r5
 8016310:	4620      	mov	r0, r4
 8016312:	f000 fc45 	bl	8016ba0 <__lshift>
 8016316:	4607      	mov	r7, r0
 8016318:	9b06      	ldr	r3, [sp, #24]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d05c      	beq.n	80163d8 <_dtoa_r+0xa78>
 801631e:	6879      	ldr	r1, [r7, #4]
 8016320:	4620      	mov	r0, r4
 8016322:	f000 fa2b 	bl	801677c <_Balloc>
 8016326:	4605      	mov	r5, r0
 8016328:	b928      	cbnz	r0, 8016336 <_dtoa_r+0x9d6>
 801632a:	4b80      	ldr	r3, [pc, #512]	; (801652c <_dtoa_r+0xbcc>)
 801632c:	4602      	mov	r2, r0
 801632e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8016332:	f7ff bb2e 	b.w	8015992 <_dtoa_r+0x32>
 8016336:	693a      	ldr	r2, [r7, #16]
 8016338:	3202      	adds	r2, #2
 801633a:	0092      	lsls	r2, r2, #2
 801633c:	f107 010c 	add.w	r1, r7, #12
 8016340:	300c      	adds	r0, #12
 8016342:	f7fe fbc9 	bl	8014ad8 <memcpy>
 8016346:	2201      	movs	r2, #1
 8016348:	4629      	mov	r1, r5
 801634a:	4620      	mov	r0, r4
 801634c:	f000 fc28 	bl	8016ba0 <__lshift>
 8016350:	9b00      	ldr	r3, [sp, #0]
 8016352:	3301      	adds	r3, #1
 8016354:	9301      	str	r3, [sp, #4]
 8016356:	9b00      	ldr	r3, [sp, #0]
 8016358:	444b      	add	r3, r9
 801635a:	9307      	str	r3, [sp, #28]
 801635c:	9b02      	ldr	r3, [sp, #8]
 801635e:	f003 0301 	and.w	r3, r3, #1
 8016362:	46b8      	mov	r8, r7
 8016364:	9306      	str	r3, [sp, #24]
 8016366:	4607      	mov	r7, r0
 8016368:	9b01      	ldr	r3, [sp, #4]
 801636a:	4631      	mov	r1, r6
 801636c:	3b01      	subs	r3, #1
 801636e:	4658      	mov	r0, fp
 8016370:	9302      	str	r3, [sp, #8]
 8016372:	f7ff fa67 	bl	8015844 <quorem>
 8016376:	4603      	mov	r3, r0
 8016378:	3330      	adds	r3, #48	; 0x30
 801637a:	9004      	str	r0, [sp, #16]
 801637c:	4641      	mov	r1, r8
 801637e:	4658      	mov	r0, fp
 8016380:	9308      	str	r3, [sp, #32]
 8016382:	f000 fc79 	bl	8016c78 <__mcmp>
 8016386:	463a      	mov	r2, r7
 8016388:	4681      	mov	r9, r0
 801638a:	4631      	mov	r1, r6
 801638c:	4620      	mov	r0, r4
 801638e:	f000 fc8f 	bl	8016cb0 <__mdiff>
 8016392:	68c2      	ldr	r2, [r0, #12]
 8016394:	9b08      	ldr	r3, [sp, #32]
 8016396:	4605      	mov	r5, r0
 8016398:	bb02      	cbnz	r2, 80163dc <_dtoa_r+0xa7c>
 801639a:	4601      	mov	r1, r0
 801639c:	4658      	mov	r0, fp
 801639e:	f000 fc6b 	bl	8016c78 <__mcmp>
 80163a2:	9b08      	ldr	r3, [sp, #32]
 80163a4:	4602      	mov	r2, r0
 80163a6:	4629      	mov	r1, r5
 80163a8:	4620      	mov	r0, r4
 80163aa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80163ae:	f000 fa25 	bl	80167fc <_Bfree>
 80163b2:	9b05      	ldr	r3, [sp, #20]
 80163b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80163b6:	9d01      	ldr	r5, [sp, #4]
 80163b8:	ea43 0102 	orr.w	r1, r3, r2
 80163bc:	9b06      	ldr	r3, [sp, #24]
 80163be:	430b      	orrs	r3, r1
 80163c0:	9b08      	ldr	r3, [sp, #32]
 80163c2:	d10d      	bne.n	80163e0 <_dtoa_r+0xa80>
 80163c4:	2b39      	cmp	r3, #57	; 0x39
 80163c6:	d029      	beq.n	801641c <_dtoa_r+0xabc>
 80163c8:	f1b9 0f00 	cmp.w	r9, #0
 80163cc:	dd01      	ble.n	80163d2 <_dtoa_r+0xa72>
 80163ce:	9b04      	ldr	r3, [sp, #16]
 80163d0:	3331      	adds	r3, #49	; 0x31
 80163d2:	9a02      	ldr	r2, [sp, #8]
 80163d4:	7013      	strb	r3, [r2, #0]
 80163d6:	e774      	b.n	80162c2 <_dtoa_r+0x962>
 80163d8:	4638      	mov	r0, r7
 80163da:	e7b9      	b.n	8016350 <_dtoa_r+0x9f0>
 80163dc:	2201      	movs	r2, #1
 80163de:	e7e2      	b.n	80163a6 <_dtoa_r+0xa46>
 80163e0:	f1b9 0f00 	cmp.w	r9, #0
 80163e4:	db06      	blt.n	80163f4 <_dtoa_r+0xa94>
 80163e6:	9905      	ldr	r1, [sp, #20]
 80163e8:	ea41 0909 	orr.w	r9, r1, r9
 80163ec:	9906      	ldr	r1, [sp, #24]
 80163ee:	ea59 0101 	orrs.w	r1, r9, r1
 80163f2:	d120      	bne.n	8016436 <_dtoa_r+0xad6>
 80163f4:	2a00      	cmp	r2, #0
 80163f6:	ddec      	ble.n	80163d2 <_dtoa_r+0xa72>
 80163f8:	4659      	mov	r1, fp
 80163fa:	2201      	movs	r2, #1
 80163fc:	4620      	mov	r0, r4
 80163fe:	9301      	str	r3, [sp, #4]
 8016400:	f000 fbce 	bl	8016ba0 <__lshift>
 8016404:	4631      	mov	r1, r6
 8016406:	4683      	mov	fp, r0
 8016408:	f000 fc36 	bl	8016c78 <__mcmp>
 801640c:	2800      	cmp	r0, #0
 801640e:	9b01      	ldr	r3, [sp, #4]
 8016410:	dc02      	bgt.n	8016418 <_dtoa_r+0xab8>
 8016412:	d1de      	bne.n	80163d2 <_dtoa_r+0xa72>
 8016414:	07da      	lsls	r2, r3, #31
 8016416:	d5dc      	bpl.n	80163d2 <_dtoa_r+0xa72>
 8016418:	2b39      	cmp	r3, #57	; 0x39
 801641a:	d1d8      	bne.n	80163ce <_dtoa_r+0xa6e>
 801641c:	9a02      	ldr	r2, [sp, #8]
 801641e:	2339      	movs	r3, #57	; 0x39
 8016420:	7013      	strb	r3, [r2, #0]
 8016422:	462b      	mov	r3, r5
 8016424:	461d      	mov	r5, r3
 8016426:	3b01      	subs	r3, #1
 8016428:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801642c:	2a39      	cmp	r2, #57	; 0x39
 801642e:	d050      	beq.n	80164d2 <_dtoa_r+0xb72>
 8016430:	3201      	adds	r2, #1
 8016432:	701a      	strb	r2, [r3, #0]
 8016434:	e745      	b.n	80162c2 <_dtoa_r+0x962>
 8016436:	2a00      	cmp	r2, #0
 8016438:	dd03      	ble.n	8016442 <_dtoa_r+0xae2>
 801643a:	2b39      	cmp	r3, #57	; 0x39
 801643c:	d0ee      	beq.n	801641c <_dtoa_r+0xabc>
 801643e:	3301      	adds	r3, #1
 8016440:	e7c7      	b.n	80163d2 <_dtoa_r+0xa72>
 8016442:	9a01      	ldr	r2, [sp, #4]
 8016444:	9907      	ldr	r1, [sp, #28]
 8016446:	f802 3c01 	strb.w	r3, [r2, #-1]
 801644a:	428a      	cmp	r2, r1
 801644c:	d02a      	beq.n	80164a4 <_dtoa_r+0xb44>
 801644e:	4659      	mov	r1, fp
 8016450:	2300      	movs	r3, #0
 8016452:	220a      	movs	r2, #10
 8016454:	4620      	mov	r0, r4
 8016456:	f000 f9f3 	bl	8016840 <__multadd>
 801645a:	45b8      	cmp	r8, r7
 801645c:	4683      	mov	fp, r0
 801645e:	f04f 0300 	mov.w	r3, #0
 8016462:	f04f 020a 	mov.w	r2, #10
 8016466:	4641      	mov	r1, r8
 8016468:	4620      	mov	r0, r4
 801646a:	d107      	bne.n	801647c <_dtoa_r+0xb1c>
 801646c:	f000 f9e8 	bl	8016840 <__multadd>
 8016470:	4680      	mov	r8, r0
 8016472:	4607      	mov	r7, r0
 8016474:	9b01      	ldr	r3, [sp, #4]
 8016476:	3301      	adds	r3, #1
 8016478:	9301      	str	r3, [sp, #4]
 801647a:	e775      	b.n	8016368 <_dtoa_r+0xa08>
 801647c:	f000 f9e0 	bl	8016840 <__multadd>
 8016480:	4639      	mov	r1, r7
 8016482:	4680      	mov	r8, r0
 8016484:	2300      	movs	r3, #0
 8016486:	220a      	movs	r2, #10
 8016488:	4620      	mov	r0, r4
 801648a:	f000 f9d9 	bl	8016840 <__multadd>
 801648e:	4607      	mov	r7, r0
 8016490:	e7f0      	b.n	8016474 <_dtoa_r+0xb14>
 8016492:	f1b9 0f00 	cmp.w	r9, #0
 8016496:	9a00      	ldr	r2, [sp, #0]
 8016498:	bfcc      	ite	gt
 801649a:	464d      	movgt	r5, r9
 801649c:	2501      	movle	r5, #1
 801649e:	4415      	add	r5, r2
 80164a0:	f04f 0800 	mov.w	r8, #0
 80164a4:	4659      	mov	r1, fp
 80164a6:	2201      	movs	r2, #1
 80164a8:	4620      	mov	r0, r4
 80164aa:	9301      	str	r3, [sp, #4]
 80164ac:	f000 fb78 	bl	8016ba0 <__lshift>
 80164b0:	4631      	mov	r1, r6
 80164b2:	4683      	mov	fp, r0
 80164b4:	f000 fbe0 	bl	8016c78 <__mcmp>
 80164b8:	2800      	cmp	r0, #0
 80164ba:	dcb2      	bgt.n	8016422 <_dtoa_r+0xac2>
 80164bc:	d102      	bne.n	80164c4 <_dtoa_r+0xb64>
 80164be:	9b01      	ldr	r3, [sp, #4]
 80164c0:	07db      	lsls	r3, r3, #31
 80164c2:	d4ae      	bmi.n	8016422 <_dtoa_r+0xac2>
 80164c4:	462b      	mov	r3, r5
 80164c6:	461d      	mov	r5, r3
 80164c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80164cc:	2a30      	cmp	r2, #48	; 0x30
 80164ce:	d0fa      	beq.n	80164c6 <_dtoa_r+0xb66>
 80164d0:	e6f7      	b.n	80162c2 <_dtoa_r+0x962>
 80164d2:	9a00      	ldr	r2, [sp, #0]
 80164d4:	429a      	cmp	r2, r3
 80164d6:	d1a5      	bne.n	8016424 <_dtoa_r+0xac4>
 80164d8:	f10a 0a01 	add.w	sl, sl, #1
 80164dc:	2331      	movs	r3, #49	; 0x31
 80164de:	e779      	b.n	80163d4 <_dtoa_r+0xa74>
 80164e0:	4b13      	ldr	r3, [pc, #76]	; (8016530 <_dtoa_r+0xbd0>)
 80164e2:	f7ff baaf 	b.w	8015a44 <_dtoa_r+0xe4>
 80164e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	f47f aa86 	bne.w	80159fa <_dtoa_r+0x9a>
 80164ee:	4b11      	ldr	r3, [pc, #68]	; (8016534 <_dtoa_r+0xbd4>)
 80164f0:	f7ff baa8 	b.w	8015a44 <_dtoa_r+0xe4>
 80164f4:	f1b9 0f00 	cmp.w	r9, #0
 80164f8:	dc03      	bgt.n	8016502 <_dtoa_r+0xba2>
 80164fa:	9b05      	ldr	r3, [sp, #20]
 80164fc:	2b02      	cmp	r3, #2
 80164fe:	f73f aec9 	bgt.w	8016294 <_dtoa_r+0x934>
 8016502:	9d00      	ldr	r5, [sp, #0]
 8016504:	4631      	mov	r1, r6
 8016506:	4658      	mov	r0, fp
 8016508:	f7ff f99c 	bl	8015844 <quorem>
 801650c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8016510:	f805 3b01 	strb.w	r3, [r5], #1
 8016514:	9a00      	ldr	r2, [sp, #0]
 8016516:	1aaa      	subs	r2, r5, r2
 8016518:	4591      	cmp	r9, r2
 801651a:	ddba      	ble.n	8016492 <_dtoa_r+0xb32>
 801651c:	4659      	mov	r1, fp
 801651e:	2300      	movs	r3, #0
 8016520:	220a      	movs	r2, #10
 8016522:	4620      	mov	r0, r4
 8016524:	f000 f98c 	bl	8016840 <__multadd>
 8016528:	4683      	mov	fp, r0
 801652a:	e7eb      	b.n	8016504 <_dtoa_r+0xba4>
 801652c:	0801beae 	.word	0x0801beae
 8016530:	0801bd6c 	.word	0x0801bd6c
 8016534:	0801be42 	.word	0x0801be42

08016538 <__errno>:
 8016538:	4b01      	ldr	r3, [pc, #4]	; (8016540 <__errno+0x8>)
 801653a:	6818      	ldr	r0, [r3, #0]
 801653c:	4770      	bx	lr
 801653e:	bf00      	nop
 8016540:	20000024 	.word	0x20000024

08016544 <std>:
 8016544:	2300      	movs	r3, #0
 8016546:	b510      	push	{r4, lr}
 8016548:	4604      	mov	r4, r0
 801654a:	e9c0 3300 	strd	r3, r3, [r0]
 801654e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016552:	6083      	str	r3, [r0, #8]
 8016554:	8181      	strh	r1, [r0, #12]
 8016556:	6643      	str	r3, [r0, #100]	; 0x64
 8016558:	81c2      	strh	r2, [r0, #14]
 801655a:	6183      	str	r3, [r0, #24]
 801655c:	4619      	mov	r1, r3
 801655e:	2208      	movs	r2, #8
 8016560:	305c      	adds	r0, #92	; 0x5c
 8016562:	f7fe fae1 	bl	8014b28 <memset>
 8016566:	4b05      	ldr	r3, [pc, #20]	; (801657c <std+0x38>)
 8016568:	6263      	str	r3, [r4, #36]	; 0x24
 801656a:	4b05      	ldr	r3, [pc, #20]	; (8016580 <std+0x3c>)
 801656c:	62a3      	str	r3, [r4, #40]	; 0x28
 801656e:	4b05      	ldr	r3, [pc, #20]	; (8016584 <std+0x40>)
 8016570:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016572:	4b05      	ldr	r3, [pc, #20]	; (8016588 <std+0x44>)
 8016574:	6224      	str	r4, [r4, #32]
 8016576:	6323      	str	r3, [r4, #48]	; 0x30
 8016578:	bd10      	pop	{r4, pc}
 801657a:	bf00      	nop
 801657c:	08017401 	.word	0x08017401
 8016580:	08017423 	.word	0x08017423
 8016584:	0801745b 	.word	0x0801745b
 8016588:	0801747f 	.word	0x0801747f

0801658c <_cleanup_r>:
 801658c:	4901      	ldr	r1, [pc, #4]	; (8016594 <_cleanup_r+0x8>)
 801658e:	f000 b8c1 	b.w	8016714 <_fwalk_reent>
 8016592:	bf00      	nop
 8016594:	08017769 	.word	0x08017769

08016598 <__sfmoreglue>:
 8016598:	b570      	push	{r4, r5, r6, lr}
 801659a:	1e4a      	subs	r2, r1, #1
 801659c:	2568      	movs	r5, #104	; 0x68
 801659e:	4355      	muls	r5, r2
 80165a0:	460e      	mov	r6, r1
 80165a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80165a6:	f7fe fb17 	bl	8014bd8 <_malloc_r>
 80165aa:	4604      	mov	r4, r0
 80165ac:	b140      	cbz	r0, 80165c0 <__sfmoreglue+0x28>
 80165ae:	2100      	movs	r1, #0
 80165b0:	e9c0 1600 	strd	r1, r6, [r0]
 80165b4:	300c      	adds	r0, #12
 80165b6:	60a0      	str	r0, [r4, #8]
 80165b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80165bc:	f7fe fab4 	bl	8014b28 <memset>
 80165c0:	4620      	mov	r0, r4
 80165c2:	bd70      	pop	{r4, r5, r6, pc}

080165c4 <__sfp_lock_acquire>:
 80165c4:	4801      	ldr	r0, [pc, #4]	; (80165cc <__sfp_lock_acquire+0x8>)
 80165c6:	f000 b8ca 	b.w	801675e <__retarget_lock_acquire_recursive>
 80165ca:	bf00      	nop
 80165cc:	20006a70 	.word	0x20006a70

080165d0 <__sfp_lock_release>:
 80165d0:	4801      	ldr	r0, [pc, #4]	; (80165d8 <__sfp_lock_release+0x8>)
 80165d2:	f000 b8c5 	b.w	8016760 <__retarget_lock_release_recursive>
 80165d6:	bf00      	nop
 80165d8:	20006a70 	.word	0x20006a70

080165dc <__sinit_lock_acquire>:
 80165dc:	4801      	ldr	r0, [pc, #4]	; (80165e4 <__sinit_lock_acquire+0x8>)
 80165de:	f000 b8be 	b.w	801675e <__retarget_lock_acquire_recursive>
 80165e2:	bf00      	nop
 80165e4:	20006a6b 	.word	0x20006a6b

080165e8 <__sinit_lock_release>:
 80165e8:	4801      	ldr	r0, [pc, #4]	; (80165f0 <__sinit_lock_release+0x8>)
 80165ea:	f000 b8b9 	b.w	8016760 <__retarget_lock_release_recursive>
 80165ee:	bf00      	nop
 80165f0:	20006a6b 	.word	0x20006a6b

080165f4 <__sinit>:
 80165f4:	b510      	push	{r4, lr}
 80165f6:	4604      	mov	r4, r0
 80165f8:	f7ff fff0 	bl	80165dc <__sinit_lock_acquire>
 80165fc:	69a3      	ldr	r3, [r4, #24]
 80165fe:	b11b      	cbz	r3, 8016608 <__sinit+0x14>
 8016600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016604:	f7ff bff0 	b.w	80165e8 <__sinit_lock_release>
 8016608:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801660c:	6523      	str	r3, [r4, #80]	; 0x50
 801660e:	4b13      	ldr	r3, [pc, #76]	; (801665c <__sinit+0x68>)
 8016610:	4a13      	ldr	r2, [pc, #76]	; (8016660 <__sinit+0x6c>)
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	62a2      	str	r2, [r4, #40]	; 0x28
 8016616:	42a3      	cmp	r3, r4
 8016618:	bf04      	itt	eq
 801661a:	2301      	moveq	r3, #1
 801661c:	61a3      	streq	r3, [r4, #24]
 801661e:	4620      	mov	r0, r4
 8016620:	f000 f820 	bl	8016664 <__sfp>
 8016624:	6060      	str	r0, [r4, #4]
 8016626:	4620      	mov	r0, r4
 8016628:	f000 f81c 	bl	8016664 <__sfp>
 801662c:	60a0      	str	r0, [r4, #8]
 801662e:	4620      	mov	r0, r4
 8016630:	f000 f818 	bl	8016664 <__sfp>
 8016634:	2200      	movs	r2, #0
 8016636:	60e0      	str	r0, [r4, #12]
 8016638:	2104      	movs	r1, #4
 801663a:	6860      	ldr	r0, [r4, #4]
 801663c:	f7ff ff82 	bl	8016544 <std>
 8016640:	68a0      	ldr	r0, [r4, #8]
 8016642:	2201      	movs	r2, #1
 8016644:	2109      	movs	r1, #9
 8016646:	f7ff ff7d 	bl	8016544 <std>
 801664a:	68e0      	ldr	r0, [r4, #12]
 801664c:	2202      	movs	r2, #2
 801664e:	2112      	movs	r1, #18
 8016650:	f7ff ff78 	bl	8016544 <std>
 8016654:	2301      	movs	r3, #1
 8016656:	61a3      	str	r3, [r4, #24]
 8016658:	e7d2      	b.n	8016600 <__sinit+0xc>
 801665a:	bf00      	nop
 801665c:	0801bd58 	.word	0x0801bd58
 8016660:	0801658d 	.word	0x0801658d

08016664 <__sfp>:
 8016664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016666:	4607      	mov	r7, r0
 8016668:	f7ff ffac 	bl	80165c4 <__sfp_lock_acquire>
 801666c:	4b1e      	ldr	r3, [pc, #120]	; (80166e8 <__sfp+0x84>)
 801666e:	681e      	ldr	r6, [r3, #0]
 8016670:	69b3      	ldr	r3, [r6, #24]
 8016672:	b913      	cbnz	r3, 801667a <__sfp+0x16>
 8016674:	4630      	mov	r0, r6
 8016676:	f7ff ffbd 	bl	80165f4 <__sinit>
 801667a:	3648      	adds	r6, #72	; 0x48
 801667c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016680:	3b01      	subs	r3, #1
 8016682:	d503      	bpl.n	801668c <__sfp+0x28>
 8016684:	6833      	ldr	r3, [r6, #0]
 8016686:	b30b      	cbz	r3, 80166cc <__sfp+0x68>
 8016688:	6836      	ldr	r6, [r6, #0]
 801668a:	e7f7      	b.n	801667c <__sfp+0x18>
 801668c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016690:	b9d5      	cbnz	r5, 80166c8 <__sfp+0x64>
 8016692:	4b16      	ldr	r3, [pc, #88]	; (80166ec <__sfp+0x88>)
 8016694:	60e3      	str	r3, [r4, #12]
 8016696:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801669a:	6665      	str	r5, [r4, #100]	; 0x64
 801669c:	f000 f85e 	bl	801675c <__retarget_lock_init_recursive>
 80166a0:	f7ff ff96 	bl	80165d0 <__sfp_lock_release>
 80166a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80166a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80166ac:	6025      	str	r5, [r4, #0]
 80166ae:	61a5      	str	r5, [r4, #24]
 80166b0:	2208      	movs	r2, #8
 80166b2:	4629      	mov	r1, r5
 80166b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80166b8:	f7fe fa36 	bl	8014b28 <memset>
 80166bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80166c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80166c4:	4620      	mov	r0, r4
 80166c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166c8:	3468      	adds	r4, #104	; 0x68
 80166ca:	e7d9      	b.n	8016680 <__sfp+0x1c>
 80166cc:	2104      	movs	r1, #4
 80166ce:	4638      	mov	r0, r7
 80166d0:	f7ff ff62 	bl	8016598 <__sfmoreglue>
 80166d4:	4604      	mov	r4, r0
 80166d6:	6030      	str	r0, [r6, #0]
 80166d8:	2800      	cmp	r0, #0
 80166da:	d1d5      	bne.n	8016688 <__sfp+0x24>
 80166dc:	f7ff ff78 	bl	80165d0 <__sfp_lock_release>
 80166e0:	230c      	movs	r3, #12
 80166e2:	603b      	str	r3, [r7, #0]
 80166e4:	e7ee      	b.n	80166c4 <__sfp+0x60>
 80166e6:	bf00      	nop
 80166e8:	0801bd58 	.word	0x0801bd58
 80166ec:	ffff0001 	.word	0xffff0001

080166f0 <fiprintf>:
 80166f0:	b40e      	push	{r1, r2, r3}
 80166f2:	b503      	push	{r0, r1, lr}
 80166f4:	4601      	mov	r1, r0
 80166f6:	ab03      	add	r3, sp, #12
 80166f8:	4805      	ldr	r0, [pc, #20]	; (8016710 <fiprintf+0x20>)
 80166fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80166fe:	6800      	ldr	r0, [r0, #0]
 8016700:	9301      	str	r3, [sp, #4]
 8016702:	f000 fd4d 	bl	80171a0 <_vfiprintf_r>
 8016706:	b002      	add	sp, #8
 8016708:	f85d eb04 	ldr.w	lr, [sp], #4
 801670c:	b003      	add	sp, #12
 801670e:	4770      	bx	lr
 8016710:	20000024 	.word	0x20000024

08016714 <_fwalk_reent>:
 8016714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016718:	4606      	mov	r6, r0
 801671a:	4688      	mov	r8, r1
 801671c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016720:	2700      	movs	r7, #0
 8016722:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016726:	f1b9 0901 	subs.w	r9, r9, #1
 801672a:	d505      	bpl.n	8016738 <_fwalk_reent+0x24>
 801672c:	6824      	ldr	r4, [r4, #0]
 801672e:	2c00      	cmp	r4, #0
 8016730:	d1f7      	bne.n	8016722 <_fwalk_reent+0xe>
 8016732:	4638      	mov	r0, r7
 8016734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016738:	89ab      	ldrh	r3, [r5, #12]
 801673a:	2b01      	cmp	r3, #1
 801673c:	d907      	bls.n	801674e <_fwalk_reent+0x3a>
 801673e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016742:	3301      	adds	r3, #1
 8016744:	d003      	beq.n	801674e <_fwalk_reent+0x3a>
 8016746:	4629      	mov	r1, r5
 8016748:	4630      	mov	r0, r6
 801674a:	47c0      	blx	r8
 801674c:	4307      	orrs	r7, r0
 801674e:	3568      	adds	r5, #104	; 0x68
 8016750:	e7e9      	b.n	8016726 <_fwalk_reent+0x12>
	...

08016754 <_localeconv_r>:
 8016754:	4800      	ldr	r0, [pc, #0]	; (8016758 <_localeconv_r+0x4>)
 8016756:	4770      	bx	lr
 8016758:	20000178 	.word	0x20000178

0801675c <__retarget_lock_init_recursive>:
 801675c:	4770      	bx	lr

0801675e <__retarget_lock_acquire_recursive>:
 801675e:	4770      	bx	lr

08016760 <__retarget_lock_release_recursive>:
 8016760:	4770      	bx	lr
	...

08016764 <__malloc_lock>:
 8016764:	4801      	ldr	r0, [pc, #4]	; (801676c <__malloc_lock+0x8>)
 8016766:	f7ff bffa 	b.w	801675e <__retarget_lock_acquire_recursive>
 801676a:	bf00      	nop
 801676c:	20006a6c 	.word	0x20006a6c

08016770 <__malloc_unlock>:
 8016770:	4801      	ldr	r0, [pc, #4]	; (8016778 <__malloc_unlock+0x8>)
 8016772:	f7ff bff5 	b.w	8016760 <__retarget_lock_release_recursive>
 8016776:	bf00      	nop
 8016778:	20006a6c 	.word	0x20006a6c

0801677c <_Balloc>:
 801677c:	b570      	push	{r4, r5, r6, lr}
 801677e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016780:	4604      	mov	r4, r0
 8016782:	460d      	mov	r5, r1
 8016784:	b976      	cbnz	r6, 80167a4 <_Balloc+0x28>
 8016786:	2010      	movs	r0, #16
 8016788:	f7fe f988 	bl	8014a9c <malloc>
 801678c:	4602      	mov	r2, r0
 801678e:	6260      	str	r0, [r4, #36]	; 0x24
 8016790:	b920      	cbnz	r0, 801679c <_Balloc+0x20>
 8016792:	4b18      	ldr	r3, [pc, #96]	; (80167f4 <_Balloc+0x78>)
 8016794:	4818      	ldr	r0, [pc, #96]	; (80167f8 <_Balloc+0x7c>)
 8016796:	2166      	movs	r1, #102	; 0x66
 8016798:	f7ff f836 	bl	8015808 <__assert_func>
 801679c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80167a0:	6006      	str	r6, [r0, #0]
 80167a2:	60c6      	str	r6, [r0, #12]
 80167a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80167a6:	68f3      	ldr	r3, [r6, #12]
 80167a8:	b183      	cbz	r3, 80167cc <_Balloc+0x50>
 80167aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80167ac:	68db      	ldr	r3, [r3, #12]
 80167ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80167b2:	b9b8      	cbnz	r0, 80167e4 <_Balloc+0x68>
 80167b4:	2101      	movs	r1, #1
 80167b6:	fa01 f605 	lsl.w	r6, r1, r5
 80167ba:	1d72      	adds	r2, r6, #5
 80167bc:	0092      	lsls	r2, r2, #2
 80167be:	4620      	mov	r0, r4
 80167c0:	f000 fb5a 	bl	8016e78 <_calloc_r>
 80167c4:	b160      	cbz	r0, 80167e0 <_Balloc+0x64>
 80167c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80167ca:	e00e      	b.n	80167ea <_Balloc+0x6e>
 80167cc:	2221      	movs	r2, #33	; 0x21
 80167ce:	2104      	movs	r1, #4
 80167d0:	4620      	mov	r0, r4
 80167d2:	f000 fb51 	bl	8016e78 <_calloc_r>
 80167d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80167d8:	60f0      	str	r0, [r6, #12]
 80167da:	68db      	ldr	r3, [r3, #12]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d1e4      	bne.n	80167aa <_Balloc+0x2e>
 80167e0:	2000      	movs	r0, #0
 80167e2:	bd70      	pop	{r4, r5, r6, pc}
 80167e4:	6802      	ldr	r2, [r0, #0]
 80167e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80167ea:	2300      	movs	r3, #0
 80167ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80167f0:	e7f7      	b.n	80167e2 <_Balloc+0x66>
 80167f2:	bf00      	nop
 80167f4:	0801bd90 	.word	0x0801bd90
 80167f8:	0801bf20 	.word	0x0801bf20

080167fc <_Bfree>:
 80167fc:	b570      	push	{r4, r5, r6, lr}
 80167fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016800:	4605      	mov	r5, r0
 8016802:	460c      	mov	r4, r1
 8016804:	b976      	cbnz	r6, 8016824 <_Bfree+0x28>
 8016806:	2010      	movs	r0, #16
 8016808:	f7fe f948 	bl	8014a9c <malloc>
 801680c:	4602      	mov	r2, r0
 801680e:	6268      	str	r0, [r5, #36]	; 0x24
 8016810:	b920      	cbnz	r0, 801681c <_Bfree+0x20>
 8016812:	4b09      	ldr	r3, [pc, #36]	; (8016838 <_Bfree+0x3c>)
 8016814:	4809      	ldr	r0, [pc, #36]	; (801683c <_Bfree+0x40>)
 8016816:	218a      	movs	r1, #138	; 0x8a
 8016818:	f7fe fff6 	bl	8015808 <__assert_func>
 801681c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016820:	6006      	str	r6, [r0, #0]
 8016822:	60c6      	str	r6, [r0, #12]
 8016824:	b13c      	cbz	r4, 8016836 <_Bfree+0x3a>
 8016826:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016828:	6862      	ldr	r2, [r4, #4]
 801682a:	68db      	ldr	r3, [r3, #12]
 801682c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016830:	6021      	str	r1, [r4, #0]
 8016832:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016836:	bd70      	pop	{r4, r5, r6, pc}
 8016838:	0801bd90 	.word	0x0801bd90
 801683c:	0801bf20 	.word	0x0801bf20

08016840 <__multadd>:
 8016840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016844:	690e      	ldr	r6, [r1, #16]
 8016846:	4607      	mov	r7, r0
 8016848:	4698      	mov	r8, r3
 801684a:	460c      	mov	r4, r1
 801684c:	f101 0014 	add.w	r0, r1, #20
 8016850:	2300      	movs	r3, #0
 8016852:	6805      	ldr	r5, [r0, #0]
 8016854:	b2a9      	uxth	r1, r5
 8016856:	fb02 8101 	mla	r1, r2, r1, r8
 801685a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801685e:	0c2d      	lsrs	r5, r5, #16
 8016860:	fb02 c505 	mla	r5, r2, r5, ip
 8016864:	b289      	uxth	r1, r1
 8016866:	3301      	adds	r3, #1
 8016868:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801686c:	429e      	cmp	r6, r3
 801686e:	f840 1b04 	str.w	r1, [r0], #4
 8016872:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8016876:	dcec      	bgt.n	8016852 <__multadd+0x12>
 8016878:	f1b8 0f00 	cmp.w	r8, #0
 801687c:	d022      	beq.n	80168c4 <__multadd+0x84>
 801687e:	68a3      	ldr	r3, [r4, #8]
 8016880:	42b3      	cmp	r3, r6
 8016882:	dc19      	bgt.n	80168b8 <__multadd+0x78>
 8016884:	6861      	ldr	r1, [r4, #4]
 8016886:	4638      	mov	r0, r7
 8016888:	3101      	adds	r1, #1
 801688a:	f7ff ff77 	bl	801677c <_Balloc>
 801688e:	4605      	mov	r5, r0
 8016890:	b928      	cbnz	r0, 801689e <__multadd+0x5e>
 8016892:	4602      	mov	r2, r0
 8016894:	4b0d      	ldr	r3, [pc, #52]	; (80168cc <__multadd+0x8c>)
 8016896:	480e      	ldr	r0, [pc, #56]	; (80168d0 <__multadd+0x90>)
 8016898:	21b5      	movs	r1, #181	; 0xb5
 801689a:	f7fe ffb5 	bl	8015808 <__assert_func>
 801689e:	6922      	ldr	r2, [r4, #16]
 80168a0:	3202      	adds	r2, #2
 80168a2:	f104 010c 	add.w	r1, r4, #12
 80168a6:	0092      	lsls	r2, r2, #2
 80168a8:	300c      	adds	r0, #12
 80168aa:	f7fe f915 	bl	8014ad8 <memcpy>
 80168ae:	4621      	mov	r1, r4
 80168b0:	4638      	mov	r0, r7
 80168b2:	f7ff ffa3 	bl	80167fc <_Bfree>
 80168b6:	462c      	mov	r4, r5
 80168b8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80168bc:	3601      	adds	r6, #1
 80168be:	f8c3 8014 	str.w	r8, [r3, #20]
 80168c2:	6126      	str	r6, [r4, #16]
 80168c4:	4620      	mov	r0, r4
 80168c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168ca:	bf00      	nop
 80168cc:	0801beae 	.word	0x0801beae
 80168d0:	0801bf20 	.word	0x0801bf20

080168d4 <__hi0bits>:
 80168d4:	0c03      	lsrs	r3, r0, #16
 80168d6:	041b      	lsls	r3, r3, #16
 80168d8:	b9d3      	cbnz	r3, 8016910 <__hi0bits+0x3c>
 80168da:	0400      	lsls	r0, r0, #16
 80168dc:	2310      	movs	r3, #16
 80168de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80168e2:	bf04      	itt	eq
 80168e4:	0200      	lsleq	r0, r0, #8
 80168e6:	3308      	addeq	r3, #8
 80168e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80168ec:	bf04      	itt	eq
 80168ee:	0100      	lsleq	r0, r0, #4
 80168f0:	3304      	addeq	r3, #4
 80168f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80168f6:	bf04      	itt	eq
 80168f8:	0080      	lsleq	r0, r0, #2
 80168fa:	3302      	addeq	r3, #2
 80168fc:	2800      	cmp	r0, #0
 80168fe:	db05      	blt.n	801690c <__hi0bits+0x38>
 8016900:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016904:	f103 0301 	add.w	r3, r3, #1
 8016908:	bf08      	it	eq
 801690a:	2320      	moveq	r3, #32
 801690c:	4618      	mov	r0, r3
 801690e:	4770      	bx	lr
 8016910:	2300      	movs	r3, #0
 8016912:	e7e4      	b.n	80168de <__hi0bits+0xa>

08016914 <__lo0bits>:
 8016914:	6803      	ldr	r3, [r0, #0]
 8016916:	f013 0207 	ands.w	r2, r3, #7
 801691a:	4601      	mov	r1, r0
 801691c:	d00b      	beq.n	8016936 <__lo0bits+0x22>
 801691e:	07da      	lsls	r2, r3, #31
 8016920:	d424      	bmi.n	801696c <__lo0bits+0x58>
 8016922:	0798      	lsls	r0, r3, #30
 8016924:	bf49      	itett	mi
 8016926:	085b      	lsrmi	r3, r3, #1
 8016928:	089b      	lsrpl	r3, r3, #2
 801692a:	2001      	movmi	r0, #1
 801692c:	600b      	strmi	r3, [r1, #0]
 801692e:	bf5c      	itt	pl
 8016930:	600b      	strpl	r3, [r1, #0]
 8016932:	2002      	movpl	r0, #2
 8016934:	4770      	bx	lr
 8016936:	b298      	uxth	r0, r3
 8016938:	b9b0      	cbnz	r0, 8016968 <__lo0bits+0x54>
 801693a:	0c1b      	lsrs	r3, r3, #16
 801693c:	2010      	movs	r0, #16
 801693e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016942:	bf04      	itt	eq
 8016944:	0a1b      	lsreq	r3, r3, #8
 8016946:	3008      	addeq	r0, #8
 8016948:	071a      	lsls	r2, r3, #28
 801694a:	bf04      	itt	eq
 801694c:	091b      	lsreq	r3, r3, #4
 801694e:	3004      	addeq	r0, #4
 8016950:	079a      	lsls	r2, r3, #30
 8016952:	bf04      	itt	eq
 8016954:	089b      	lsreq	r3, r3, #2
 8016956:	3002      	addeq	r0, #2
 8016958:	07da      	lsls	r2, r3, #31
 801695a:	d403      	bmi.n	8016964 <__lo0bits+0x50>
 801695c:	085b      	lsrs	r3, r3, #1
 801695e:	f100 0001 	add.w	r0, r0, #1
 8016962:	d005      	beq.n	8016970 <__lo0bits+0x5c>
 8016964:	600b      	str	r3, [r1, #0]
 8016966:	4770      	bx	lr
 8016968:	4610      	mov	r0, r2
 801696a:	e7e8      	b.n	801693e <__lo0bits+0x2a>
 801696c:	2000      	movs	r0, #0
 801696e:	4770      	bx	lr
 8016970:	2020      	movs	r0, #32
 8016972:	4770      	bx	lr

08016974 <__i2b>:
 8016974:	b510      	push	{r4, lr}
 8016976:	460c      	mov	r4, r1
 8016978:	2101      	movs	r1, #1
 801697a:	f7ff feff 	bl	801677c <_Balloc>
 801697e:	4602      	mov	r2, r0
 8016980:	b928      	cbnz	r0, 801698e <__i2b+0x1a>
 8016982:	4b05      	ldr	r3, [pc, #20]	; (8016998 <__i2b+0x24>)
 8016984:	4805      	ldr	r0, [pc, #20]	; (801699c <__i2b+0x28>)
 8016986:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801698a:	f7fe ff3d 	bl	8015808 <__assert_func>
 801698e:	2301      	movs	r3, #1
 8016990:	6144      	str	r4, [r0, #20]
 8016992:	6103      	str	r3, [r0, #16]
 8016994:	bd10      	pop	{r4, pc}
 8016996:	bf00      	nop
 8016998:	0801beae 	.word	0x0801beae
 801699c:	0801bf20 	.word	0x0801bf20

080169a0 <__multiply>:
 80169a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169a4:	4614      	mov	r4, r2
 80169a6:	690a      	ldr	r2, [r1, #16]
 80169a8:	6923      	ldr	r3, [r4, #16]
 80169aa:	429a      	cmp	r2, r3
 80169ac:	bfb8      	it	lt
 80169ae:	460b      	movlt	r3, r1
 80169b0:	460d      	mov	r5, r1
 80169b2:	bfbc      	itt	lt
 80169b4:	4625      	movlt	r5, r4
 80169b6:	461c      	movlt	r4, r3
 80169b8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80169bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80169c0:	68ab      	ldr	r3, [r5, #8]
 80169c2:	6869      	ldr	r1, [r5, #4]
 80169c4:	eb0a 0709 	add.w	r7, sl, r9
 80169c8:	42bb      	cmp	r3, r7
 80169ca:	b085      	sub	sp, #20
 80169cc:	bfb8      	it	lt
 80169ce:	3101      	addlt	r1, #1
 80169d0:	f7ff fed4 	bl	801677c <_Balloc>
 80169d4:	b930      	cbnz	r0, 80169e4 <__multiply+0x44>
 80169d6:	4602      	mov	r2, r0
 80169d8:	4b42      	ldr	r3, [pc, #264]	; (8016ae4 <__multiply+0x144>)
 80169da:	4843      	ldr	r0, [pc, #268]	; (8016ae8 <__multiply+0x148>)
 80169dc:	f240 115d 	movw	r1, #349	; 0x15d
 80169e0:	f7fe ff12 	bl	8015808 <__assert_func>
 80169e4:	f100 0614 	add.w	r6, r0, #20
 80169e8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80169ec:	4633      	mov	r3, r6
 80169ee:	2200      	movs	r2, #0
 80169f0:	4543      	cmp	r3, r8
 80169f2:	d31e      	bcc.n	8016a32 <__multiply+0x92>
 80169f4:	f105 0c14 	add.w	ip, r5, #20
 80169f8:	f104 0314 	add.w	r3, r4, #20
 80169fc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8016a00:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8016a04:	9202      	str	r2, [sp, #8]
 8016a06:	ebac 0205 	sub.w	r2, ip, r5
 8016a0a:	3a15      	subs	r2, #21
 8016a0c:	f022 0203 	bic.w	r2, r2, #3
 8016a10:	3204      	adds	r2, #4
 8016a12:	f105 0115 	add.w	r1, r5, #21
 8016a16:	458c      	cmp	ip, r1
 8016a18:	bf38      	it	cc
 8016a1a:	2204      	movcc	r2, #4
 8016a1c:	9201      	str	r2, [sp, #4]
 8016a1e:	9a02      	ldr	r2, [sp, #8]
 8016a20:	9303      	str	r3, [sp, #12]
 8016a22:	429a      	cmp	r2, r3
 8016a24:	d808      	bhi.n	8016a38 <__multiply+0x98>
 8016a26:	2f00      	cmp	r7, #0
 8016a28:	dc55      	bgt.n	8016ad6 <__multiply+0x136>
 8016a2a:	6107      	str	r7, [r0, #16]
 8016a2c:	b005      	add	sp, #20
 8016a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a32:	f843 2b04 	str.w	r2, [r3], #4
 8016a36:	e7db      	b.n	80169f0 <__multiply+0x50>
 8016a38:	f8b3 a000 	ldrh.w	sl, [r3]
 8016a3c:	f1ba 0f00 	cmp.w	sl, #0
 8016a40:	d020      	beq.n	8016a84 <__multiply+0xe4>
 8016a42:	f105 0e14 	add.w	lr, r5, #20
 8016a46:	46b1      	mov	r9, r6
 8016a48:	2200      	movs	r2, #0
 8016a4a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8016a4e:	f8d9 b000 	ldr.w	fp, [r9]
 8016a52:	b2a1      	uxth	r1, r4
 8016a54:	fa1f fb8b 	uxth.w	fp, fp
 8016a58:	fb0a b101 	mla	r1, sl, r1, fp
 8016a5c:	4411      	add	r1, r2
 8016a5e:	f8d9 2000 	ldr.w	r2, [r9]
 8016a62:	0c24      	lsrs	r4, r4, #16
 8016a64:	0c12      	lsrs	r2, r2, #16
 8016a66:	fb0a 2404 	mla	r4, sl, r4, r2
 8016a6a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8016a6e:	b289      	uxth	r1, r1
 8016a70:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8016a74:	45f4      	cmp	ip, lr
 8016a76:	f849 1b04 	str.w	r1, [r9], #4
 8016a7a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8016a7e:	d8e4      	bhi.n	8016a4a <__multiply+0xaa>
 8016a80:	9901      	ldr	r1, [sp, #4]
 8016a82:	5072      	str	r2, [r6, r1]
 8016a84:	9a03      	ldr	r2, [sp, #12]
 8016a86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016a8a:	3304      	adds	r3, #4
 8016a8c:	f1b9 0f00 	cmp.w	r9, #0
 8016a90:	d01f      	beq.n	8016ad2 <__multiply+0x132>
 8016a92:	6834      	ldr	r4, [r6, #0]
 8016a94:	f105 0114 	add.w	r1, r5, #20
 8016a98:	46b6      	mov	lr, r6
 8016a9a:	f04f 0a00 	mov.w	sl, #0
 8016a9e:	880a      	ldrh	r2, [r1, #0]
 8016aa0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8016aa4:	fb09 b202 	mla	r2, r9, r2, fp
 8016aa8:	4492      	add	sl, r2
 8016aaa:	b2a4      	uxth	r4, r4
 8016aac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8016ab0:	f84e 4b04 	str.w	r4, [lr], #4
 8016ab4:	f851 4b04 	ldr.w	r4, [r1], #4
 8016ab8:	f8be 2000 	ldrh.w	r2, [lr]
 8016abc:	0c24      	lsrs	r4, r4, #16
 8016abe:	fb09 2404 	mla	r4, r9, r4, r2
 8016ac2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8016ac6:	458c      	cmp	ip, r1
 8016ac8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016acc:	d8e7      	bhi.n	8016a9e <__multiply+0xfe>
 8016ace:	9a01      	ldr	r2, [sp, #4]
 8016ad0:	50b4      	str	r4, [r6, r2]
 8016ad2:	3604      	adds	r6, #4
 8016ad4:	e7a3      	b.n	8016a1e <__multiply+0x7e>
 8016ad6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d1a5      	bne.n	8016a2a <__multiply+0x8a>
 8016ade:	3f01      	subs	r7, #1
 8016ae0:	e7a1      	b.n	8016a26 <__multiply+0x86>
 8016ae2:	bf00      	nop
 8016ae4:	0801beae 	.word	0x0801beae
 8016ae8:	0801bf20 	.word	0x0801bf20

08016aec <__pow5mult>:
 8016aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016af0:	4615      	mov	r5, r2
 8016af2:	f012 0203 	ands.w	r2, r2, #3
 8016af6:	4606      	mov	r6, r0
 8016af8:	460f      	mov	r7, r1
 8016afa:	d007      	beq.n	8016b0c <__pow5mult+0x20>
 8016afc:	4c25      	ldr	r4, [pc, #148]	; (8016b94 <__pow5mult+0xa8>)
 8016afe:	3a01      	subs	r2, #1
 8016b00:	2300      	movs	r3, #0
 8016b02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016b06:	f7ff fe9b 	bl	8016840 <__multadd>
 8016b0a:	4607      	mov	r7, r0
 8016b0c:	10ad      	asrs	r5, r5, #2
 8016b0e:	d03d      	beq.n	8016b8c <__pow5mult+0xa0>
 8016b10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016b12:	b97c      	cbnz	r4, 8016b34 <__pow5mult+0x48>
 8016b14:	2010      	movs	r0, #16
 8016b16:	f7fd ffc1 	bl	8014a9c <malloc>
 8016b1a:	4602      	mov	r2, r0
 8016b1c:	6270      	str	r0, [r6, #36]	; 0x24
 8016b1e:	b928      	cbnz	r0, 8016b2c <__pow5mult+0x40>
 8016b20:	4b1d      	ldr	r3, [pc, #116]	; (8016b98 <__pow5mult+0xac>)
 8016b22:	481e      	ldr	r0, [pc, #120]	; (8016b9c <__pow5mult+0xb0>)
 8016b24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016b28:	f7fe fe6e 	bl	8015808 <__assert_func>
 8016b2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016b30:	6004      	str	r4, [r0, #0]
 8016b32:	60c4      	str	r4, [r0, #12]
 8016b34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016b38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016b3c:	b94c      	cbnz	r4, 8016b52 <__pow5mult+0x66>
 8016b3e:	f240 2171 	movw	r1, #625	; 0x271
 8016b42:	4630      	mov	r0, r6
 8016b44:	f7ff ff16 	bl	8016974 <__i2b>
 8016b48:	2300      	movs	r3, #0
 8016b4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8016b4e:	4604      	mov	r4, r0
 8016b50:	6003      	str	r3, [r0, #0]
 8016b52:	f04f 0900 	mov.w	r9, #0
 8016b56:	07eb      	lsls	r3, r5, #31
 8016b58:	d50a      	bpl.n	8016b70 <__pow5mult+0x84>
 8016b5a:	4639      	mov	r1, r7
 8016b5c:	4622      	mov	r2, r4
 8016b5e:	4630      	mov	r0, r6
 8016b60:	f7ff ff1e 	bl	80169a0 <__multiply>
 8016b64:	4639      	mov	r1, r7
 8016b66:	4680      	mov	r8, r0
 8016b68:	4630      	mov	r0, r6
 8016b6a:	f7ff fe47 	bl	80167fc <_Bfree>
 8016b6e:	4647      	mov	r7, r8
 8016b70:	106d      	asrs	r5, r5, #1
 8016b72:	d00b      	beq.n	8016b8c <__pow5mult+0xa0>
 8016b74:	6820      	ldr	r0, [r4, #0]
 8016b76:	b938      	cbnz	r0, 8016b88 <__pow5mult+0x9c>
 8016b78:	4622      	mov	r2, r4
 8016b7a:	4621      	mov	r1, r4
 8016b7c:	4630      	mov	r0, r6
 8016b7e:	f7ff ff0f 	bl	80169a0 <__multiply>
 8016b82:	6020      	str	r0, [r4, #0]
 8016b84:	f8c0 9000 	str.w	r9, [r0]
 8016b88:	4604      	mov	r4, r0
 8016b8a:	e7e4      	b.n	8016b56 <__pow5mult+0x6a>
 8016b8c:	4638      	mov	r0, r7
 8016b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b92:	bf00      	nop
 8016b94:	0801c070 	.word	0x0801c070
 8016b98:	0801bd90 	.word	0x0801bd90
 8016b9c:	0801bf20 	.word	0x0801bf20

08016ba0 <__lshift>:
 8016ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ba4:	460c      	mov	r4, r1
 8016ba6:	6849      	ldr	r1, [r1, #4]
 8016ba8:	6923      	ldr	r3, [r4, #16]
 8016baa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016bae:	68a3      	ldr	r3, [r4, #8]
 8016bb0:	4607      	mov	r7, r0
 8016bb2:	4691      	mov	r9, r2
 8016bb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016bb8:	f108 0601 	add.w	r6, r8, #1
 8016bbc:	42b3      	cmp	r3, r6
 8016bbe:	db0b      	blt.n	8016bd8 <__lshift+0x38>
 8016bc0:	4638      	mov	r0, r7
 8016bc2:	f7ff fddb 	bl	801677c <_Balloc>
 8016bc6:	4605      	mov	r5, r0
 8016bc8:	b948      	cbnz	r0, 8016bde <__lshift+0x3e>
 8016bca:	4602      	mov	r2, r0
 8016bcc:	4b28      	ldr	r3, [pc, #160]	; (8016c70 <__lshift+0xd0>)
 8016bce:	4829      	ldr	r0, [pc, #164]	; (8016c74 <__lshift+0xd4>)
 8016bd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016bd4:	f7fe fe18 	bl	8015808 <__assert_func>
 8016bd8:	3101      	adds	r1, #1
 8016bda:	005b      	lsls	r3, r3, #1
 8016bdc:	e7ee      	b.n	8016bbc <__lshift+0x1c>
 8016bde:	2300      	movs	r3, #0
 8016be0:	f100 0114 	add.w	r1, r0, #20
 8016be4:	f100 0210 	add.w	r2, r0, #16
 8016be8:	4618      	mov	r0, r3
 8016bea:	4553      	cmp	r3, sl
 8016bec:	db33      	blt.n	8016c56 <__lshift+0xb6>
 8016bee:	6920      	ldr	r0, [r4, #16]
 8016bf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016bf4:	f104 0314 	add.w	r3, r4, #20
 8016bf8:	f019 091f 	ands.w	r9, r9, #31
 8016bfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016c00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016c04:	d02b      	beq.n	8016c5e <__lshift+0xbe>
 8016c06:	f1c9 0e20 	rsb	lr, r9, #32
 8016c0a:	468a      	mov	sl, r1
 8016c0c:	2200      	movs	r2, #0
 8016c0e:	6818      	ldr	r0, [r3, #0]
 8016c10:	fa00 f009 	lsl.w	r0, r0, r9
 8016c14:	4302      	orrs	r2, r0
 8016c16:	f84a 2b04 	str.w	r2, [sl], #4
 8016c1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c1e:	459c      	cmp	ip, r3
 8016c20:	fa22 f20e 	lsr.w	r2, r2, lr
 8016c24:	d8f3      	bhi.n	8016c0e <__lshift+0x6e>
 8016c26:	ebac 0304 	sub.w	r3, ip, r4
 8016c2a:	3b15      	subs	r3, #21
 8016c2c:	f023 0303 	bic.w	r3, r3, #3
 8016c30:	3304      	adds	r3, #4
 8016c32:	f104 0015 	add.w	r0, r4, #21
 8016c36:	4584      	cmp	ip, r0
 8016c38:	bf38      	it	cc
 8016c3a:	2304      	movcc	r3, #4
 8016c3c:	50ca      	str	r2, [r1, r3]
 8016c3e:	b10a      	cbz	r2, 8016c44 <__lshift+0xa4>
 8016c40:	f108 0602 	add.w	r6, r8, #2
 8016c44:	3e01      	subs	r6, #1
 8016c46:	4638      	mov	r0, r7
 8016c48:	612e      	str	r6, [r5, #16]
 8016c4a:	4621      	mov	r1, r4
 8016c4c:	f7ff fdd6 	bl	80167fc <_Bfree>
 8016c50:	4628      	mov	r0, r5
 8016c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c56:	f842 0f04 	str.w	r0, [r2, #4]!
 8016c5a:	3301      	adds	r3, #1
 8016c5c:	e7c5      	b.n	8016bea <__lshift+0x4a>
 8016c5e:	3904      	subs	r1, #4
 8016c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c64:	f841 2f04 	str.w	r2, [r1, #4]!
 8016c68:	459c      	cmp	ip, r3
 8016c6a:	d8f9      	bhi.n	8016c60 <__lshift+0xc0>
 8016c6c:	e7ea      	b.n	8016c44 <__lshift+0xa4>
 8016c6e:	bf00      	nop
 8016c70:	0801beae 	.word	0x0801beae
 8016c74:	0801bf20 	.word	0x0801bf20

08016c78 <__mcmp>:
 8016c78:	b530      	push	{r4, r5, lr}
 8016c7a:	6902      	ldr	r2, [r0, #16]
 8016c7c:	690c      	ldr	r4, [r1, #16]
 8016c7e:	1b12      	subs	r2, r2, r4
 8016c80:	d10e      	bne.n	8016ca0 <__mcmp+0x28>
 8016c82:	f100 0314 	add.w	r3, r0, #20
 8016c86:	3114      	adds	r1, #20
 8016c88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016c8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016c90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016c94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016c98:	42a5      	cmp	r5, r4
 8016c9a:	d003      	beq.n	8016ca4 <__mcmp+0x2c>
 8016c9c:	d305      	bcc.n	8016caa <__mcmp+0x32>
 8016c9e:	2201      	movs	r2, #1
 8016ca0:	4610      	mov	r0, r2
 8016ca2:	bd30      	pop	{r4, r5, pc}
 8016ca4:	4283      	cmp	r3, r0
 8016ca6:	d3f3      	bcc.n	8016c90 <__mcmp+0x18>
 8016ca8:	e7fa      	b.n	8016ca0 <__mcmp+0x28>
 8016caa:	f04f 32ff 	mov.w	r2, #4294967295
 8016cae:	e7f7      	b.n	8016ca0 <__mcmp+0x28>

08016cb0 <__mdiff>:
 8016cb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cb4:	460c      	mov	r4, r1
 8016cb6:	4606      	mov	r6, r0
 8016cb8:	4611      	mov	r1, r2
 8016cba:	4620      	mov	r0, r4
 8016cbc:	4617      	mov	r7, r2
 8016cbe:	f7ff ffdb 	bl	8016c78 <__mcmp>
 8016cc2:	1e05      	subs	r5, r0, #0
 8016cc4:	d110      	bne.n	8016ce8 <__mdiff+0x38>
 8016cc6:	4629      	mov	r1, r5
 8016cc8:	4630      	mov	r0, r6
 8016cca:	f7ff fd57 	bl	801677c <_Balloc>
 8016cce:	b930      	cbnz	r0, 8016cde <__mdiff+0x2e>
 8016cd0:	4b39      	ldr	r3, [pc, #228]	; (8016db8 <__mdiff+0x108>)
 8016cd2:	4602      	mov	r2, r0
 8016cd4:	f240 2132 	movw	r1, #562	; 0x232
 8016cd8:	4838      	ldr	r0, [pc, #224]	; (8016dbc <__mdiff+0x10c>)
 8016cda:	f7fe fd95 	bl	8015808 <__assert_func>
 8016cde:	2301      	movs	r3, #1
 8016ce0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016ce4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ce8:	bfa4      	itt	ge
 8016cea:	463b      	movge	r3, r7
 8016cec:	4627      	movge	r7, r4
 8016cee:	4630      	mov	r0, r6
 8016cf0:	6879      	ldr	r1, [r7, #4]
 8016cf2:	bfa6      	itte	ge
 8016cf4:	461c      	movge	r4, r3
 8016cf6:	2500      	movge	r5, #0
 8016cf8:	2501      	movlt	r5, #1
 8016cfa:	f7ff fd3f 	bl	801677c <_Balloc>
 8016cfe:	b920      	cbnz	r0, 8016d0a <__mdiff+0x5a>
 8016d00:	4b2d      	ldr	r3, [pc, #180]	; (8016db8 <__mdiff+0x108>)
 8016d02:	4602      	mov	r2, r0
 8016d04:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016d08:	e7e6      	b.n	8016cd8 <__mdiff+0x28>
 8016d0a:	693e      	ldr	r6, [r7, #16]
 8016d0c:	60c5      	str	r5, [r0, #12]
 8016d0e:	6925      	ldr	r5, [r4, #16]
 8016d10:	f107 0114 	add.w	r1, r7, #20
 8016d14:	f104 0914 	add.w	r9, r4, #20
 8016d18:	f100 0e14 	add.w	lr, r0, #20
 8016d1c:	f107 0210 	add.w	r2, r7, #16
 8016d20:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8016d24:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8016d28:	46f2      	mov	sl, lr
 8016d2a:	2700      	movs	r7, #0
 8016d2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8016d30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016d34:	fa1f f883 	uxth.w	r8, r3
 8016d38:	fa17 f78b 	uxtah	r7, r7, fp
 8016d3c:	0c1b      	lsrs	r3, r3, #16
 8016d3e:	eba7 0808 	sub.w	r8, r7, r8
 8016d42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016d46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016d4a:	fa1f f888 	uxth.w	r8, r8
 8016d4e:	141f      	asrs	r7, r3, #16
 8016d50:	454d      	cmp	r5, r9
 8016d52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016d56:	f84a 3b04 	str.w	r3, [sl], #4
 8016d5a:	d8e7      	bhi.n	8016d2c <__mdiff+0x7c>
 8016d5c:	1b2b      	subs	r3, r5, r4
 8016d5e:	3b15      	subs	r3, #21
 8016d60:	f023 0303 	bic.w	r3, r3, #3
 8016d64:	3304      	adds	r3, #4
 8016d66:	3415      	adds	r4, #21
 8016d68:	42a5      	cmp	r5, r4
 8016d6a:	bf38      	it	cc
 8016d6c:	2304      	movcc	r3, #4
 8016d6e:	4419      	add	r1, r3
 8016d70:	4473      	add	r3, lr
 8016d72:	469e      	mov	lr, r3
 8016d74:	460d      	mov	r5, r1
 8016d76:	4565      	cmp	r5, ip
 8016d78:	d30e      	bcc.n	8016d98 <__mdiff+0xe8>
 8016d7a:	f10c 0203 	add.w	r2, ip, #3
 8016d7e:	1a52      	subs	r2, r2, r1
 8016d80:	f022 0203 	bic.w	r2, r2, #3
 8016d84:	3903      	subs	r1, #3
 8016d86:	458c      	cmp	ip, r1
 8016d88:	bf38      	it	cc
 8016d8a:	2200      	movcc	r2, #0
 8016d8c:	441a      	add	r2, r3
 8016d8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016d92:	b17b      	cbz	r3, 8016db4 <__mdiff+0x104>
 8016d94:	6106      	str	r6, [r0, #16]
 8016d96:	e7a5      	b.n	8016ce4 <__mdiff+0x34>
 8016d98:	f855 8b04 	ldr.w	r8, [r5], #4
 8016d9c:	fa17 f488 	uxtah	r4, r7, r8
 8016da0:	1422      	asrs	r2, r4, #16
 8016da2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8016da6:	b2a4      	uxth	r4, r4
 8016da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8016dac:	f84e 4b04 	str.w	r4, [lr], #4
 8016db0:	1417      	asrs	r7, r2, #16
 8016db2:	e7e0      	b.n	8016d76 <__mdiff+0xc6>
 8016db4:	3e01      	subs	r6, #1
 8016db6:	e7ea      	b.n	8016d8e <__mdiff+0xde>
 8016db8:	0801beae 	.word	0x0801beae
 8016dbc:	0801bf20 	.word	0x0801bf20

08016dc0 <__d2b>:
 8016dc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016dc4:	4689      	mov	r9, r1
 8016dc6:	2101      	movs	r1, #1
 8016dc8:	ec57 6b10 	vmov	r6, r7, d0
 8016dcc:	4690      	mov	r8, r2
 8016dce:	f7ff fcd5 	bl	801677c <_Balloc>
 8016dd2:	4604      	mov	r4, r0
 8016dd4:	b930      	cbnz	r0, 8016de4 <__d2b+0x24>
 8016dd6:	4602      	mov	r2, r0
 8016dd8:	4b25      	ldr	r3, [pc, #148]	; (8016e70 <__d2b+0xb0>)
 8016dda:	4826      	ldr	r0, [pc, #152]	; (8016e74 <__d2b+0xb4>)
 8016ddc:	f240 310a 	movw	r1, #778	; 0x30a
 8016de0:	f7fe fd12 	bl	8015808 <__assert_func>
 8016de4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016de8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016dec:	bb35      	cbnz	r5, 8016e3c <__d2b+0x7c>
 8016dee:	2e00      	cmp	r6, #0
 8016df0:	9301      	str	r3, [sp, #4]
 8016df2:	d028      	beq.n	8016e46 <__d2b+0x86>
 8016df4:	4668      	mov	r0, sp
 8016df6:	9600      	str	r6, [sp, #0]
 8016df8:	f7ff fd8c 	bl	8016914 <__lo0bits>
 8016dfc:	9900      	ldr	r1, [sp, #0]
 8016dfe:	b300      	cbz	r0, 8016e42 <__d2b+0x82>
 8016e00:	9a01      	ldr	r2, [sp, #4]
 8016e02:	f1c0 0320 	rsb	r3, r0, #32
 8016e06:	fa02 f303 	lsl.w	r3, r2, r3
 8016e0a:	430b      	orrs	r3, r1
 8016e0c:	40c2      	lsrs	r2, r0
 8016e0e:	6163      	str	r3, [r4, #20]
 8016e10:	9201      	str	r2, [sp, #4]
 8016e12:	9b01      	ldr	r3, [sp, #4]
 8016e14:	61a3      	str	r3, [r4, #24]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	bf14      	ite	ne
 8016e1a:	2202      	movne	r2, #2
 8016e1c:	2201      	moveq	r2, #1
 8016e1e:	6122      	str	r2, [r4, #16]
 8016e20:	b1d5      	cbz	r5, 8016e58 <__d2b+0x98>
 8016e22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016e26:	4405      	add	r5, r0
 8016e28:	f8c9 5000 	str.w	r5, [r9]
 8016e2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016e30:	f8c8 0000 	str.w	r0, [r8]
 8016e34:	4620      	mov	r0, r4
 8016e36:	b003      	add	sp, #12
 8016e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016e40:	e7d5      	b.n	8016dee <__d2b+0x2e>
 8016e42:	6161      	str	r1, [r4, #20]
 8016e44:	e7e5      	b.n	8016e12 <__d2b+0x52>
 8016e46:	a801      	add	r0, sp, #4
 8016e48:	f7ff fd64 	bl	8016914 <__lo0bits>
 8016e4c:	9b01      	ldr	r3, [sp, #4]
 8016e4e:	6163      	str	r3, [r4, #20]
 8016e50:	2201      	movs	r2, #1
 8016e52:	6122      	str	r2, [r4, #16]
 8016e54:	3020      	adds	r0, #32
 8016e56:	e7e3      	b.n	8016e20 <__d2b+0x60>
 8016e58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016e5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016e60:	f8c9 0000 	str.w	r0, [r9]
 8016e64:	6918      	ldr	r0, [r3, #16]
 8016e66:	f7ff fd35 	bl	80168d4 <__hi0bits>
 8016e6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016e6e:	e7df      	b.n	8016e30 <__d2b+0x70>
 8016e70:	0801beae 	.word	0x0801beae
 8016e74:	0801bf20 	.word	0x0801bf20

08016e78 <_calloc_r>:
 8016e78:	b513      	push	{r0, r1, r4, lr}
 8016e7a:	434a      	muls	r2, r1
 8016e7c:	4611      	mov	r1, r2
 8016e7e:	9201      	str	r2, [sp, #4]
 8016e80:	f7fd feaa 	bl	8014bd8 <_malloc_r>
 8016e84:	4604      	mov	r4, r0
 8016e86:	b118      	cbz	r0, 8016e90 <_calloc_r+0x18>
 8016e88:	9a01      	ldr	r2, [sp, #4]
 8016e8a:	2100      	movs	r1, #0
 8016e8c:	f7fd fe4c 	bl	8014b28 <memset>
 8016e90:	4620      	mov	r0, r4
 8016e92:	b002      	add	sp, #8
 8016e94:	bd10      	pop	{r4, pc}

08016e96 <__ssputs_r>:
 8016e96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e9a:	688e      	ldr	r6, [r1, #8]
 8016e9c:	429e      	cmp	r6, r3
 8016e9e:	4682      	mov	sl, r0
 8016ea0:	460c      	mov	r4, r1
 8016ea2:	4690      	mov	r8, r2
 8016ea4:	461f      	mov	r7, r3
 8016ea6:	d838      	bhi.n	8016f1a <__ssputs_r+0x84>
 8016ea8:	898a      	ldrh	r2, [r1, #12]
 8016eaa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016eae:	d032      	beq.n	8016f16 <__ssputs_r+0x80>
 8016eb0:	6825      	ldr	r5, [r4, #0]
 8016eb2:	6909      	ldr	r1, [r1, #16]
 8016eb4:	eba5 0901 	sub.w	r9, r5, r1
 8016eb8:	6965      	ldr	r5, [r4, #20]
 8016eba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016ebe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016ec2:	3301      	adds	r3, #1
 8016ec4:	444b      	add	r3, r9
 8016ec6:	106d      	asrs	r5, r5, #1
 8016ec8:	429d      	cmp	r5, r3
 8016eca:	bf38      	it	cc
 8016ecc:	461d      	movcc	r5, r3
 8016ece:	0553      	lsls	r3, r2, #21
 8016ed0:	d531      	bpl.n	8016f36 <__ssputs_r+0xa0>
 8016ed2:	4629      	mov	r1, r5
 8016ed4:	f7fd fe80 	bl	8014bd8 <_malloc_r>
 8016ed8:	4606      	mov	r6, r0
 8016eda:	b950      	cbnz	r0, 8016ef2 <__ssputs_r+0x5c>
 8016edc:	230c      	movs	r3, #12
 8016ede:	f8ca 3000 	str.w	r3, [sl]
 8016ee2:	89a3      	ldrh	r3, [r4, #12]
 8016ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ee8:	81a3      	strh	r3, [r4, #12]
 8016eea:	f04f 30ff 	mov.w	r0, #4294967295
 8016eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ef2:	6921      	ldr	r1, [r4, #16]
 8016ef4:	464a      	mov	r2, r9
 8016ef6:	f7fd fdef 	bl	8014ad8 <memcpy>
 8016efa:	89a3      	ldrh	r3, [r4, #12]
 8016efc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016f04:	81a3      	strh	r3, [r4, #12]
 8016f06:	6126      	str	r6, [r4, #16]
 8016f08:	6165      	str	r5, [r4, #20]
 8016f0a:	444e      	add	r6, r9
 8016f0c:	eba5 0509 	sub.w	r5, r5, r9
 8016f10:	6026      	str	r6, [r4, #0]
 8016f12:	60a5      	str	r5, [r4, #8]
 8016f14:	463e      	mov	r6, r7
 8016f16:	42be      	cmp	r6, r7
 8016f18:	d900      	bls.n	8016f1c <__ssputs_r+0x86>
 8016f1a:	463e      	mov	r6, r7
 8016f1c:	4632      	mov	r2, r6
 8016f1e:	6820      	ldr	r0, [r4, #0]
 8016f20:	4641      	mov	r1, r8
 8016f22:	f7fd fde7 	bl	8014af4 <memmove>
 8016f26:	68a3      	ldr	r3, [r4, #8]
 8016f28:	6822      	ldr	r2, [r4, #0]
 8016f2a:	1b9b      	subs	r3, r3, r6
 8016f2c:	4432      	add	r2, r6
 8016f2e:	60a3      	str	r3, [r4, #8]
 8016f30:	6022      	str	r2, [r4, #0]
 8016f32:	2000      	movs	r0, #0
 8016f34:	e7db      	b.n	8016eee <__ssputs_r+0x58>
 8016f36:	462a      	mov	r2, r5
 8016f38:	f000 fcda 	bl	80178f0 <_realloc_r>
 8016f3c:	4606      	mov	r6, r0
 8016f3e:	2800      	cmp	r0, #0
 8016f40:	d1e1      	bne.n	8016f06 <__ssputs_r+0x70>
 8016f42:	6921      	ldr	r1, [r4, #16]
 8016f44:	4650      	mov	r0, sl
 8016f46:	f7fd fdf7 	bl	8014b38 <_free_r>
 8016f4a:	e7c7      	b.n	8016edc <__ssputs_r+0x46>

08016f4c <_svfiprintf_r>:
 8016f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f50:	4698      	mov	r8, r3
 8016f52:	898b      	ldrh	r3, [r1, #12]
 8016f54:	061b      	lsls	r3, r3, #24
 8016f56:	b09d      	sub	sp, #116	; 0x74
 8016f58:	4607      	mov	r7, r0
 8016f5a:	460d      	mov	r5, r1
 8016f5c:	4614      	mov	r4, r2
 8016f5e:	d50e      	bpl.n	8016f7e <_svfiprintf_r+0x32>
 8016f60:	690b      	ldr	r3, [r1, #16]
 8016f62:	b963      	cbnz	r3, 8016f7e <_svfiprintf_r+0x32>
 8016f64:	2140      	movs	r1, #64	; 0x40
 8016f66:	f7fd fe37 	bl	8014bd8 <_malloc_r>
 8016f6a:	6028      	str	r0, [r5, #0]
 8016f6c:	6128      	str	r0, [r5, #16]
 8016f6e:	b920      	cbnz	r0, 8016f7a <_svfiprintf_r+0x2e>
 8016f70:	230c      	movs	r3, #12
 8016f72:	603b      	str	r3, [r7, #0]
 8016f74:	f04f 30ff 	mov.w	r0, #4294967295
 8016f78:	e0d1      	b.n	801711e <_svfiprintf_r+0x1d2>
 8016f7a:	2340      	movs	r3, #64	; 0x40
 8016f7c:	616b      	str	r3, [r5, #20]
 8016f7e:	2300      	movs	r3, #0
 8016f80:	9309      	str	r3, [sp, #36]	; 0x24
 8016f82:	2320      	movs	r3, #32
 8016f84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016f88:	f8cd 800c 	str.w	r8, [sp, #12]
 8016f8c:	2330      	movs	r3, #48	; 0x30
 8016f8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017138 <_svfiprintf_r+0x1ec>
 8016f92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016f96:	f04f 0901 	mov.w	r9, #1
 8016f9a:	4623      	mov	r3, r4
 8016f9c:	469a      	mov	sl, r3
 8016f9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016fa2:	b10a      	cbz	r2, 8016fa8 <_svfiprintf_r+0x5c>
 8016fa4:	2a25      	cmp	r2, #37	; 0x25
 8016fa6:	d1f9      	bne.n	8016f9c <_svfiprintf_r+0x50>
 8016fa8:	ebba 0b04 	subs.w	fp, sl, r4
 8016fac:	d00b      	beq.n	8016fc6 <_svfiprintf_r+0x7a>
 8016fae:	465b      	mov	r3, fp
 8016fb0:	4622      	mov	r2, r4
 8016fb2:	4629      	mov	r1, r5
 8016fb4:	4638      	mov	r0, r7
 8016fb6:	f7ff ff6e 	bl	8016e96 <__ssputs_r>
 8016fba:	3001      	adds	r0, #1
 8016fbc:	f000 80aa 	beq.w	8017114 <_svfiprintf_r+0x1c8>
 8016fc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016fc2:	445a      	add	r2, fp
 8016fc4:	9209      	str	r2, [sp, #36]	; 0x24
 8016fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	f000 80a2 	beq.w	8017114 <_svfiprintf_r+0x1c8>
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8016fd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016fda:	f10a 0a01 	add.w	sl, sl, #1
 8016fde:	9304      	str	r3, [sp, #16]
 8016fe0:	9307      	str	r3, [sp, #28]
 8016fe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016fe6:	931a      	str	r3, [sp, #104]	; 0x68
 8016fe8:	4654      	mov	r4, sl
 8016fea:	2205      	movs	r2, #5
 8016fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ff0:	4851      	ldr	r0, [pc, #324]	; (8017138 <_svfiprintf_r+0x1ec>)
 8016ff2:	f7e9 f905 	bl	8000200 <memchr>
 8016ff6:	9a04      	ldr	r2, [sp, #16]
 8016ff8:	b9d8      	cbnz	r0, 8017032 <_svfiprintf_r+0xe6>
 8016ffa:	06d0      	lsls	r0, r2, #27
 8016ffc:	bf44      	itt	mi
 8016ffe:	2320      	movmi	r3, #32
 8017000:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017004:	0711      	lsls	r1, r2, #28
 8017006:	bf44      	itt	mi
 8017008:	232b      	movmi	r3, #43	; 0x2b
 801700a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801700e:	f89a 3000 	ldrb.w	r3, [sl]
 8017012:	2b2a      	cmp	r3, #42	; 0x2a
 8017014:	d015      	beq.n	8017042 <_svfiprintf_r+0xf6>
 8017016:	9a07      	ldr	r2, [sp, #28]
 8017018:	4654      	mov	r4, sl
 801701a:	2000      	movs	r0, #0
 801701c:	f04f 0c0a 	mov.w	ip, #10
 8017020:	4621      	mov	r1, r4
 8017022:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017026:	3b30      	subs	r3, #48	; 0x30
 8017028:	2b09      	cmp	r3, #9
 801702a:	d94e      	bls.n	80170ca <_svfiprintf_r+0x17e>
 801702c:	b1b0      	cbz	r0, 801705c <_svfiprintf_r+0x110>
 801702e:	9207      	str	r2, [sp, #28]
 8017030:	e014      	b.n	801705c <_svfiprintf_r+0x110>
 8017032:	eba0 0308 	sub.w	r3, r0, r8
 8017036:	fa09 f303 	lsl.w	r3, r9, r3
 801703a:	4313      	orrs	r3, r2
 801703c:	9304      	str	r3, [sp, #16]
 801703e:	46a2      	mov	sl, r4
 8017040:	e7d2      	b.n	8016fe8 <_svfiprintf_r+0x9c>
 8017042:	9b03      	ldr	r3, [sp, #12]
 8017044:	1d19      	adds	r1, r3, #4
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	9103      	str	r1, [sp, #12]
 801704a:	2b00      	cmp	r3, #0
 801704c:	bfbb      	ittet	lt
 801704e:	425b      	neglt	r3, r3
 8017050:	f042 0202 	orrlt.w	r2, r2, #2
 8017054:	9307      	strge	r3, [sp, #28]
 8017056:	9307      	strlt	r3, [sp, #28]
 8017058:	bfb8      	it	lt
 801705a:	9204      	strlt	r2, [sp, #16]
 801705c:	7823      	ldrb	r3, [r4, #0]
 801705e:	2b2e      	cmp	r3, #46	; 0x2e
 8017060:	d10c      	bne.n	801707c <_svfiprintf_r+0x130>
 8017062:	7863      	ldrb	r3, [r4, #1]
 8017064:	2b2a      	cmp	r3, #42	; 0x2a
 8017066:	d135      	bne.n	80170d4 <_svfiprintf_r+0x188>
 8017068:	9b03      	ldr	r3, [sp, #12]
 801706a:	1d1a      	adds	r2, r3, #4
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	9203      	str	r2, [sp, #12]
 8017070:	2b00      	cmp	r3, #0
 8017072:	bfb8      	it	lt
 8017074:	f04f 33ff 	movlt.w	r3, #4294967295
 8017078:	3402      	adds	r4, #2
 801707a:	9305      	str	r3, [sp, #20]
 801707c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017148 <_svfiprintf_r+0x1fc>
 8017080:	7821      	ldrb	r1, [r4, #0]
 8017082:	2203      	movs	r2, #3
 8017084:	4650      	mov	r0, sl
 8017086:	f7e9 f8bb 	bl	8000200 <memchr>
 801708a:	b140      	cbz	r0, 801709e <_svfiprintf_r+0x152>
 801708c:	2340      	movs	r3, #64	; 0x40
 801708e:	eba0 000a 	sub.w	r0, r0, sl
 8017092:	fa03 f000 	lsl.w	r0, r3, r0
 8017096:	9b04      	ldr	r3, [sp, #16]
 8017098:	4303      	orrs	r3, r0
 801709a:	3401      	adds	r4, #1
 801709c:	9304      	str	r3, [sp, #16]
 801709e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170a2:	4826      	ldr	r0, [pc, #152]	; (801713c <_svfiprintf_r+0x1f0>)
 80170a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80170a8:	2206      	movs	r2, #6
 80170aa:	f7e9 f8a9 	bl	8000200 <memchr>
 80170ae:	2800      	cmp	r0, #0
 80170b0:	d038      	beq.n	8017124 <_svfiprintf_r+0x1d8>
 80170b2:	4b23      	ldr	r3, [pc, #140]	; (8017140 <_svfiprintf_r+0x1f4>)
 80170b4:	bb1b      	cbnz	r3, 80170fe <_svfiprintf_r+0x1b2>
 80170b6:	9b03      	ldr	r3, [sp, #12]
 80170b8:	3307      	adds	r3, #7
 80170ba:	f023 0307 	bic.w	r3, r3, #7
 80170be:	3308      	adds	r3, #8
 80170c0:	9303      	str	r3, [sp, #12]
 80170c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170c4:	4433      	add	r3, r6
 80170c6:	9309      	str	r3, [sp, #36]	; 0x24
 80170c8:	e767      	b.n	8016f9a <_svfiprintf_r+0x4e>
 80170ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80170ce:	460c      	mov	r4, r1
 80170d0:	2001      	movs	r0, #1
 80170d2:	e7a5      	b.n	8017020 <_svfiprintf_r+0xd4>
 80170d4:	2300      	movs	r3, #0
 80170d6:	3401      	adds	r4, #1
 80170d8:	9305      	str	r3, [sp, #20]
 80170da:	4619      	mov	r1, r3
 80170dc:	f04f 0c0a 	mov.w	ip, #10
 80170e0:	4620      	mov	r0, r4
 80170e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80170e6:	3a30      	subs	r2, #48	; 0x30
 80170e8:	2a09      	cmp	r2, #9
 80170ea:	d903      	bls.n	80170f4 <_svfiprintf_r+0x1a8>
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d0c5      	beq.n	801707c <_svfiprintf_r+0x130>
 80170f0:	9105      	str	r1, [sp, #20]
 80170f2:	e7c3      	b.n	801707c <_svfiprintf_r+0x130>
 80170f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80170f8:	4604      	mov	r4, r0
 80170fa:	2301      	movs	r3, #1
 80170fc:	e7f0      	b.n	80170e0 <_svfiprintf_r+0x194>
 80170fe:	ab03      	add	r3, sp, #12
 8017100:	9300      	str	r3, [sp, #0]
 8017102:	462a      	mov	r2, r5
 8017104:	4b0f      	ldr	r3, [pc, #60]	; (8017144 <_svfiprintf_r+0x1f8>)
 8017106:	a904      	add	r1, sp, #16
 8017108:	4638      	mov	r0, r7
 801710a:	f7fd fe5f 	bl	8014dcc <_printf_float>
 801710e:	1c42      	adds	r2, r0, #1
 8017110:	4606      	mov	r6, r0
 8017112:	d1d6      	bne.n	80170c2 <_svfiprintf_r+0x176>
 8017114:	89ab      	ldrh	r3, [r5, #12]
 8017116:	065b      	lsls	r3, r3, #25
 8017118:	f53f af2c 	bmi.w	8016f74 <_svfiprintf_r+0x28>
 801711c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801711e:	b01d      	add	sp, #116	; 0x74
 8017120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017124:	ab03      	add	r3, sp, #12
 8017126:	9300      	str	r3, [sp, #0]
 8017128:	462a      	mov	r2, r5
 801712a:	4b06      	ldr	r3, [pc, #24]	; (8017144 <_svfiprintf_r+0x1f8>)
 801712c:	a904      	add	r1, sp, #16
 801712e:	4638      	mov	r0, r7
 8017130:	f7fe f8f0 	bl	8015314 <_printf_i>
 8017134:	e7eb      	b.n	801710e <_svfiprintf_r+0x1c2>
 8017136:	bf00      	nop
 8017138:	0801c07c 	.word	0x0801c07c
 801713c:	0801c086 	.word	0x0801c086
 8017140:	08014dcd 	.word	0x08014dcd
 8017144:	08016e97 	.word	0x08016e97
 8017148:	0801c082 	.word	0x0801c082

0801714c <__sfputc_r>:
 801714c:	6893      	ldr	r3, [r2, #8]
 801714e:	3b01      	subs	r3, #1
 8017150:	2b00      	cmp	r3, #0
 8017152:	b410      	push	{r4}
 8017154:	6093      	str	r3, [r2, #8]
 8017156:	da08      	bge.n	801716a <__sfputc_r+0x1e>
 8017158:	6994      	ldr	r4, [r2, #24]
 801715a:	42a3      	cmp	r3, r4
 801715c:	db01      	blt.n	8017162 <__sfputc_r+0x16>
 801715e:	290a      	cmp	r1, #10
 8017160:	d103      	bne.n	801716a <__sfputc_r+0x1e>
 8017162:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017166:	f000 b98f 	b.w	8017488 <__swbuf_r>
 801716a:	6813      	ldr	r3, [r2, #0]
 801716c:	1c58      	adds	r0, r3, #1
 801716e:	6010      	str	r0, [r2, #0]
 8017170:	7019      	strb	r1, [r3, #0]
 8017172:	4608      	mov	r0, r1
 8017174:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017178:	4770      	bx	lr

0801717a <__sfputs_r>:
 801717a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801717c:	4606      	mov	r6, r0
 801717e:	460f      	mov	r7, r1
 8017180:	4614      	mov	r4, r2
 8017182:	18d5      	adds	r5, r2, r3
 8017184:	42ac      	cmp	r4, r5
 8017186:	d101      	bne.n	801718c <__sfputs_r+0x12>
 8017188:	2000      	movs	r0, #0
 801718a:	e007      	b.n	801719c <__sfputs_r+0x22>
 801718c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017190:	463a      	mov	r2, r7
 8017192:	4630      	mov	r0, r6
 8017194:	f7ff ffda 	bl	801714c <__sfputc_r>
 8017198:	1c43      	adds	r3, r0, #1
 801719a:	d1f3      	bne.n	8017184 <__sfputs_r+0xa>
 801719c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080171a0 <_vfiprintf_r>:
 80171a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171a4:	460d      	mov	r5, r1
 80171a6:	b09d      	sub	sp, #116	; 0x74
 80171a8:	4614      	mov	r4, r2
 80171aa:	4698      	mov	r8, r3
 80171ac:	4606      	mov	r6, r0
 80171ae:	b118      	cbz	r0, 80171b8 <_vfiprintf_r+0x18>
 80171b0:	6983      	ldr	r3, [r0, #24]
 80171b2:	b90b      	cbnz	r3, 80171b8 <_vfiprintf_r+0x18>
 80171b4:	f7ff fa1e 	bl	80165f4 <__sinit>
 80171b8:	4b89      	ldr	r3, [pc, #548]	; (80173e0 <_vfiprintf_r+0x240>)
 80171ba:	429d      	cmp	r5, r3
 80171bc:	d11b      	bne.n	80171f6 <_vfiprintf_r+0x56>
 80171be:	6875      	ldr	r5, [r6, #4]
 80171c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80171c2:	07d9      	lsls	r1, r3, #31
 80171c4:	d405      	bmi.n	80171d2 <_vfiprintf_r+0x32>
 80171c6:	89ab      	ldrh	r3, [r5, #12]
 80171c8:	059a      	lsls	r2, r3, #22
 80171ca:	d402      	bmi.n	80171d2 <_vfiprintf_r+0x32>
 80171cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80171ce:	f7ff fac6 	bl	801675e <__retarget_lock_acquire_recursive>
 80171d2:	89ab      	ldrh	r3, [r5, #12]
 80171d4:	071b      	lsls	r3, r3, #28
 80171d6:	d501      	bpl.n	80171dc <_vfiprintf_r+0x3c>
 80171d8:	692b      	ldr	r3, [r5, #16]
 80171da:	b9eb      	cbnz	r3, 8017218 <_vfiprintf_r+0x78>
 80171dc:	4629      	mov	r1, r5
 80171de:	4630      	mov	r0, r6
 80171e0:	f000 f9b6 	bl	8017550 <__swsetup_r>
 80171e4:	b1c0      	cbz	r0, 8017218 <_vfiprintf_r+0x78>
 80171e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80171e8:	07dc      	lsls	r4, r3, #31
 80171ea:	d50e      	bpl.n	801720a <_vfiprintf_r+0x6a>
 80171ec:	f04f 30ff 	mov.w	r0, #4294967295
 80171f0:	b01d      	add	sp, #116	; 0x74
 80171f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171f6:	4b7b      	ldr	r3, [pc, #492]	; (80173e4 <_vfiprintf_r+0x244>)
 80171f8:	429d      	cmp	r5, r3
 80171fa:	d101      	bne.n	8017200 <_vfiprintf_r+0x60>
 80171fc:	68b5      	ldr	r5, [r6, #8]
 80171fe:	e7df      	b.n	80171c0 <_vfiprintf_r+0x20>
 8017200:	4b79      	ldr	r3, [pc, #484]	; (80173e8 <_vfiprintf_r+0x248>)
 8017202:	429d      	cmp	r5, r3
 8017204:	bf08      	it	eq
 8017206:	68f5      	ldreq	r5, [r6, #12]
 8017208:	e7da      	b.n	80171c0 <_vfiprintf_r+0x20>
 801720a:	89ab      	ldrh	r3, [r5, #12]
 801720c:	0598      	lsls	r0, r3, #22
 801720e:	d4ed      	bmi.n	80171ec <_vfiprintf_r+0x4c>
 8017210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017212:	f7ff faa5 	bl	8016760 <__retarget_lock_release_recursive>
 8017216:	e7e9      	b.n	80171ec <_vfiprintf_r+0x4c>
 8017218:	2300      	movs	r3, #0
 801721a:	9309      	str	r3, [sp, #36]	; 0x24
 801721c:	2320      	movs	r3, #32
 801721e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017222:	f8cd 800c 	str.w	r8, [sp, #12]
 8017226:	2330      	movs	r3, #48	; 0x30
 8017228:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80173ec <_vfiprintf_r+0x24c>
 801722c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017230:	f04f 0901 	mov.w	r9, #1
 8017234:	4623      	mov	r3, r4
 8017236:	469a      	mov	sl, r3
 8017238:	f813 2b01 	ldrb.w	r2, [r3], #1
 801723c:	b10a      	cbz	r2, 8017242 <_vfiprintf_r+0xa2>
 801723e:	2a25      	cmp	r2, #37	; 0x25
 8017240:	d1f9      	bne.n	8017236 <_vfiprintf_r+0x96>
 8017242:	ebba 0b04 	subs.w	fp, sl, r4
 8017246:	d00b      	beq.n	8017260 <_vfiprintf_r+0xc0>
 8017248:	465b      	mov	r3, fp
 801724a:	4622      	mov	r2, r4
 801724c:	4629      	mov	r1, r5
 801724e:	4630      	mov	r0, r6
 8017250:	f7ff ff93 	bl	801717a <__sfputs_r>
 8017254:	3001      	adds	r0, #1
 8017256:	f000 80aa 	beq.w	80173ae <_vfiprintf_r+0x20e>
 801725a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801725c:	445a      	add	r2, fp
 801725e:	9209      	str	r2, [sp, #36]	; 0x24
 8017260:	f89a 3000 	ldrb.w	r3, [sl]
 8017264:	2b00      	cmp	r3, #0
 8017266:	f000 80a2 	beq.w	80173ae <_vfiprintf_r+0x20e>
 801726a:	2300      	movs	r3, #0
 801726c:	f04f 32ff 	mov.w	r2, #4294967295
 8017270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017274:	f10a 0a01 	add.w	sl, sl, #1
 8017278:	9304      	str	r3, [sp, #16]
 801727a:	9307      	str	r3, [sp, #28]
 801727c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017280:	931a      	str	r3, [sp, #104]	; 0x68
 8017282:	4654      	mov	r4, sl
 8017284:	2205      	movs	r2, #5
 8017286:	f814 1b01 	ldrb.w	r1, [r4], #1
 801728a:	4858      	ldr	r0, [pc, #352]	; (80173ec <_vfiprintf_r+0x24c>)
 801728c:	f7e8 ffb8 	bl	8000200 <memchr>
 8017290:	9a04      	ldr	r2, [sp, #16]
 8017292:	b9d8      	cbnz	r0, 80172cc <_vfiprintf_r+0x12c>
 8017294:	06d1      	lsls	r1, r2, #27
 8017296:	bf44      	itt	mi
 8017298:	2320      	movmi	r3, #32
 801729a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801729e:	0713      	lsls	r3, r2, #28
 80172a0:	bf44      	itt	mi
 80172a2:	232b      	movmi	r3, #43	; 0x2b
 80172a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80172a8:	f89a 3000 	ldrb.w	r3, [sl]
 80172ac:	2b2a      	cmp	r3, #42	; 0x2a
 80172ae:	d015      	beq.n	80172dc <_vfiprintf_r+0x13c>
 80172b0:	9a07      	ldr	r2, [sp, #28]
 80172b2:	4654      	mov	r4, sl
 80172b4:	2000      	movs	r0, #0
 80172b6:	f04f 0c0a 	mov.w	ip, #10
 80172ba:	4621      	mov	r1, r4
 80172bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80172c0:	3b30      	subs	r3, #48	; 0x30
 80172c2:	2b09      	cmp	r3, #9
 80172c4:	d94e      	bls.n	8017364 <_vfiprintf_r+0x1c4>
 80172c6:	b1b0      	cbz	r0, 80172f6 <_vfiprintf_r+0x156>
 80172c8:	9207      	str	r2, [sp, #28]
 80172ca:	e014      	b.n	80172f6 <_vfiprintf_r+0x156>
 80172cc:	eba0 0308 	sub.w	r3, r0, r8
 80172d0:	fa09 f303 	lsl.w	r3, r9, r3
 80172d4:	4313      	orrs	r3, r2
 80172d6:	9304      	str	r3, [sp, #16]
 80172d8:	46a2      	mov	sl, r4
 80172da:	e7d2      	b.n	8017282 <_vfiprintf_r+0xe2>
 80172dc:	9b03      	ldr	r3, [sp, #12]
 80172de:	1d19      	adds	r1, r3, #4
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	9103      	str	r1, [sp, #12]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	bfbb      	ittet	lt
 80172e8:	425b      	neglt	r3, r3
 80172ea:	f042 0202 	orrlt.w	r2, r2, #2
 80172ee:	9307      	strge	r3, [sp, #28]
 80172f0:	9307      	strlt	r3, [sp, #28]
 80172f2:	bfb8      	it	lt
 80172f4:	9204      	strlt	r2, [sp, #16]
 80172f6:	7823      	ldrb	r3, [r4, #0]
 80172f8:	2b2e      	cmp	r3, #46	; 0x2e
 80172fa:	d10c      	bne.n	8017316 <_vfiprintf_r+0x176>
 80172fc:	7863      	ldrb	r3, [r4, #1]
 80172fe:	2b2a      	cmp	r3, #42	; 0x2a
 8017300:	d135      	bne.n	801736e <_vfiprintf_r+0x1ce>
 8017302:	9b03      	ldr	r3, [sp, #12]
 8017304:	1d1a      	adds	r2, r3, #4
 8017306:	681b      	ldr	r3, [r3, #0]
 8017308:	9203      	str	r2, [sp, #12]
 801730a:	2b00      	cmp	r3, #0
 801730c:	bfb8      	it	lt
 801730e:	f04f 33ff 	movlt.w	r3, #4294967295
 8017312:	3402      	adds	r4, #2
 8017314:	9305      	str	r3, [sp, #20]
 8017316:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80173fc <_vfiprintf_r+0x25c>
 801731a:	7821      	ldrb	r1, [r4, #0]
 801731c:	2203      	movs	r2, #3
 801731e:	4650      	mov	r0, sl
 8017320:	f7e8 ff6e 	bl	8000200 <memchr>
 8017324:	b140      	cbz	r0, 8017338 <_vfiprintf_r+0x198>
 8017326:	2340      	movs	r3, #64	; 0x40
 8017328:	eba0 000a 	sub.w	r0, r0, sl
 801732c:	fa03 f000 	lsl.w	r0, r3, r0
 8017330:	9b04      	ldr	r3, [sp, #16]
 8017332:	4303      	orrs	r3, r0
 8017334:	3401      	adds	r4, #1
 8017336:	9304      	str	r3, [sp, #16]
 8017338:	f814 1b01 	ldrb.w	r1, [r4], #1
 801733c:	482c      	ldr	r0, [pc, #176]	; (80173f0 <_vfiprintf_r+0x250>)
 801733e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017342:	2206      	movs	r2, #6
 8017344:	f7e8 ff5c 	bl	8000200 <memchr>
 8017348:	2800      	cmp	r0, #0
 801734a:	d03f      	beq.n	80173cc <_vfiprintf_r+0x22c>
 801734c:	4b29      	ldr	r3, [pc, #164]	; (80173f4 <_vfiprintf_r+0x254>)
 801734e:	bb1b      	cbnz	r3, 8017398 <_vfiprintf_r+0x1f8>
 8017350:	9b03      	ldr	r3, [sp, #12]
 8017352:	3307      	adds	r3, #7
 8017354:	f023 0307 	bic.w	r3, r3, #7
 8017358:	3308      	adds	r3, #8
 801735a:	9303      	str	r3, [sp, #12]
 801735c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801735e:	443b      	add	r3, r7
 8017360:	9309      	str	r3, [sp, #36]	; 0x24
 8017362:	e767      	b.n	8017234 <_vfiprintf_r+0x94>
 8017364:	fb0c 3202 	mla	r2, ip, r2, r3
 8017368:	460c      	mov	r4, r1
 801736a:	2001      	movs	r0, #1
 801736c:	e7a5      	b.n	80172ba <_vfiprintf_r+0x11a>
 801736e:	2300      	movs	r3, #0
 8017370:	3401      	adds	r4, #1
 8017372:	9305      	str	r3, [sp, #20]
 8017374:	4619      	mov	r1, r3
 8017376:	f04f 0c0a 	mov.w	ip, #10
 801737a:	4620      	mov	r0, r4
 801737c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017380:	3a30      	subs	r2, #48	; 0x30
 8017382:	2a09      	cmp	r2, #9
 8017384:	d903      	bls.n	801738e <_vfiprintf_r+0x1ee>
 8017386:	2b00      	cmp	r3, #0
 8017388:	d0c5      	beq.n	8017316 <_vfiprintf_r+0x176>
 801738a:	9105      	str	r1, [sp, #20]
 801738c:	e7c3      	b.n	8017316 <_vfiprintf_r+0x176>
 801738e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017392:	4604      	mov	r4, r0
 8017394:	2301      	movs	r3, #1
 8017396:	e7f0      	b.n	801737a <_vfiprintf_r+0x1da>
 8017398:	ab03      	add	r3, sp, #12
 801739a:	9300      	str	r3, [sp, #0]
 801739c:	462a      	mov	r2, r5
 801739e:	4b16      	ldr	r3, [pc, #88]	; (80173f8 <_vfiprintf_r+0x258>)
 80173a0:	a904      	add	r1, sp, #16
 80173a2:	4630      	mov	r0, r6
 80173a4:	f7fd fd12 	bl	8014dcc <_printf_float>
 80173a8:	4607      	mov	r7, r0
 80173aa:	1c78      	adds	r0, r7, #1
 80173ac:	d1d6      	bne.n	801735c <_vfiprintf_r+0x1bc>
 80173ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80173b0:	07d9      	lsls	r1, r3, #31
 80173b2:	d405      	bmi.n	80173c0 <_vfiprintf_r+0x220>
 80173b4:	89ab      	ldrh	r3, [r5, #12]
 80173b6:	059a      	lsls	r2, r3, #22
 80173b8:	d402      	bmi.n	80173c0 <_vfiprintf_r+0x220>
 80173ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80173bc:	f7ff f9d0 	bl	8016760 <__retarget_lock_release_recursive>
 80173c0:	89ab      	ldrh	r3, [r5, #12]
 80173c2:	065b      	lsls	r3, r3, #25
 80173c4:	f53f af12 	bmi.w	80171ec <_vfiprintf_r+0x4c>
 80173c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80173ca:	e711      	b.n	80171f0 <_vfiprintf_r+0x50>
 80173cc:	ab03      	add	r3, sp, #12
 80173ce:	9300      	str	r3, [sp, #0]
 80173d0:	462a      	mov	r2, r5
 80173d2:	4b09      	ldr	r3, [pc, #36]	; (80173f8 <_vfiprintf_r+0x258>)
 80173d4:	a904      	add	r1, sp, #16
 80173d6:	4630      	mov	r0, r6
 80173d8:	f7fd ff9c 	bl	8015314 <_printf_i>
 80173dc:	e7e4      	b.n	80173a8 <_vfiprintf_r+0x208>
 80173de:	bf00      	nop
 80173e0:	0801bee0 	.word	0x0801bee0
 80173e4:	0801bf00 	.word	0x0801bf00
 80173e8:	0801bec0 	.word	0x0801bec0
 80173ec:	0801c07c 	.word	0x0801c07c
 80173f0:	0801c086 	.word	0x0801c086
 80173f4:	08014dcd 	.word	0x08014dcd
 80173f8:	0801717b 	.word	0x0801717b
 80173fc:	0801c082 	.word	0x0801c082

08017400 <__sread>:
 8017400:	b510      	push	{r4, lr}
 8017402:	460c      	mov	r4, r1
 8017404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017408:	f000 fa98 	bl	801793c <_read_r>
 801740c:	2800      	cmp	r0, #0
 801740e:	bfab      	itete	ge
 8017410:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017412:	89a3      	ldrhlt	r3, [r4, #12]
 8017414:	181b      	addge	r3, r3, r0
 8017416:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801741a:	bfac      	ite	ge
 801741c:	6563      	strge	r3, [r4, #84]	; 0x54
 801741e:	81a3      	strhlt	r3, [r4, #12]
 8017420:	bd10      	pop	{r4, pc}

08017422 <__swrite>:
 8017422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017426:	461f      	mov	r7, r3
 8017428:	898b      	ldrh	r3, [r1, #12]
 801742a:	05db      	lsls	r3, r3, #23
 801742c:	4605      	mov	r5, r0
 801742e:	460c      	mov	r4, r1
 8017430:	4616      	mov	r6, r2
 8017432:	d505      	bpl.n	8017440 <__swrite+0x1e>
 8017434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017438:	2302      	movs	r3, #2
 801743a:	2200      	movs	r2, #0
 801743c:	f000 f9d0 	bl	80177e0 <_lseek_r>
 8017440:	89a3      	ldrh	r3, [r4, #12]
 8017442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801744a:	81a3      	strh	r3, [r4, #12]
 801744c:	4632      	mov	r2, r6
 801744e:	463b      	mov	r3, r7
 8017450:	4628      	mov	r0, r5
 8017452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017456:	f000 b869 	b.w	801752c <_write_r>

0801745a <__sseek>:
 801745a:	b510      	push	{r4, lr}
 801745c:	460c      	mov	r4, r1
 801745e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017462:	f000 f9bd 	bl	80177e0 <_lseek_r>
 8017466:	1c43      	adds	r3, r0, #1
 8017468:	89a3      	ldrh	r3, [r4, #12]
 801746a:	bf15      	itete	ne
 801746c:	6560      	strne	r0, [r4, #84]	; 0x54
 801746e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017472:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017476:	81a3      	strheq	r3, [r4, #12]
 8017478:	bf18      	it	ne
 801747a:	81a3      	strhne	r3, [r4, #12]
 801747c:	bd10      	pop	{r4, pc}

0801747e <__sclose>:
 801747e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017482:	f000 b8db 	b.w	801763c <_close_r>
	...

08017488 <__swbuf_r>:
 8017488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801748a:	460e      	mov	r6, r1
 801748c:	4614      	mov	r4, r2
 801748e:	4605      	mov	r5, r0
 8017490:	b118      	cbz	r0, 801749a <__swbuf_r+0x12>
 8017492:	6983      	ldr	r3, [r0, #24]
 8017494:	b90b      	cbnz	r3, 801749a <__swbuf_r+0x12>
 8017496:	f7ff f8ad 	bl	80165f4 <__sinit>
 801749a:	4b21      	ldr	r3, [pc, #132]	; (8017520 <__swbuf_r+0x98>)
 801749c:	429c      	cmp	r4, r3
 801749e:	d12b      	bne.n	80174f8 <__swbuf_r+0x70>
 80174a0:	686c      	ldr	r4, [r5, #4]
 80174a2:	69a3      	ldr	r3, [r4, #24]
 80174a4:	60a3      	str	r3, [r4, #8]
 80174a6:	89a3      	ldrh	r3, [r4, #12]
 80174a8:	071a      	lsls	r2, r3, #28
 80174aa:	d52f      	bpl.n	801750c <__swbuf_r+0x84>
 80174ac:	6923      	ldr	r3, [r4, #16]
 80174ae:	b36b      	cbz	r3, 801750c <__swbuf_r+0x84>
 80174b0:	6923      	ldr	r3, [r4, #16]
 80174b2:	6820      	ldr	r0, [r4, #0]
 80174b4:	1ac0      	subs	r0, r0, r3
 80174b6:	6963      	ldr	r3, [r4, #20]
 80174b8:	b2f6      	uxtb	r6, r6
 80174ba:	4283      	cmp	r3, r0
 80174bc:	4637      	mov	r7, r6
 80174be:	dc04      	bgt.n	80174ca <__swbuf_r+0x42>
 80174c0:	4621      	mov	r1, r4
 80174c2:	4628      	mov	r0, r5
 80174c4:	f000 f950 	bl	8017768 <_fflush_r>
 80174c8:	bb30      	cbnz	r0, 8017518 <__swbuf_r+0x90>
 80174ca:	68a3      	ldr	r3, [r4, #8]
 80174cc:	3b01      	subs	r3, #1
 80174ce:	60a3      	str	r3, [r4, #8]
 80174d0:	6823      	ldr	r3, [r4, #0]
 80174d2:	1c5a      	adds	r2, r3, #1
 80174d4:	6022      	str	r2, [r4, #0]
 80174d6:	701e      	strb	r6, [r3, #0]
 80174d8:	6963      	ldr	r3, [r4, #20]
 80174da:	3001      	adds	r0, #1
 80174dc:	4283      	cmp	r3, r0
 80174de:	d004      	beq.n	80174ea <__swbuf_r+0x62>
 80174e0:	89a3      	ldrh	r3, [r4, #12]
 80174e2:	07db      	lsls	r3, r3, #31
 80174e4:	d506      	bpl.n	80174f4 <__swbuf_r+0x6c>
 80174e6:	2e0a      	cmp	r6, #10
 80174e8:	d104      	bne.n	80174f4 <__swbuf_r+0x6c>
 80174ea:	4621      	mov	r1, r4
 80174ec:	4628      	mov	r0, r5
 80174ee:	f000 f93b 	bl	8017768 <_fflush_r>
 80174f2:	b988      	cbnz	r0, 8017518 <__swbuf_r+0x90>
 80174f4:	4638      	mov	r0, r7
 80174f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174f8:	4b0a      	ldr	r3, [pc, #40]	; (8017524 <__swbuf_r+0x9c>)
 80174fa:	429c      	cmp	r4, r3
 80174fc:	d101      	bne.n	8017502 <__swbuf_r+0x7a>
 80174fe:	68ac      	ldr	r4, [r5, #8]
 8017500:	e7cf      	b.n	80174a2 <__swbuf_r+0x1a>
 8017502:	4b09      	ldr	r3, [pc, #36]	; (8017528 <__swbuf_r+0xa0>)
 8017504:	429c      	cmp	r4, r3
 8017506:	bf08      	it	eq
 8017508:	68ec      	ldreq	r4, [r5, #12]
 801750a:	e7ca      	b.n	80174a2 <__swbuf_r+0x1a>
 801750c:	4621      	mov	r1, r4
 801750e:	4628      	mov	r0, r5
 8017510:	f000 f81e 	bl	8017550 <__swsetup_r>
 8017514:	2800      	cmp	r0, #0
 8017516:	d0cb      	beq.n	80174b0 <__swbuf_r+0x28>
 8017518:	f04f 37ff 	mov.w	r7, #4294967295
 801751c:	e7ea      	b.n	80174f4 <__swbuf_r+0x6c>
 801751e:	bf00      	nop
 8017520:	0801bee0 	.word	0x0801bee0
 8017524:	0801bf00 	.word	0x0801bf00
 8017528:	0801bec0 	.word	0x0801bec0

0801752c <_write_r>:
 801752c:	b538      	push	{r3, r4, r5, lr}
 801752e:	4d07      	ldr	r5, [pc, #28]	; (801754c <_write_r+0x20>)
 8017530:	4604      	mov	r4, r0
 8017532:	4608      	mov	r0, r1
 8017534:	4611      	mov	r1, r2
 8017536:	2200      	movs	r2, #0
 8017538:	602a      	str	r2, [r5, #0]
 801753a:	461a      	mov	r2, r3
 801753c:	f7ec fb3f 	bl	8003bbe <_write>
 8017540:	1c43      	adds	r3, r0, #1
 8017542:	d102      	bne.n	801754a <_write_r+0x1e>
 8017544:	682b      	ldr	r3, [r5, #0]
 8017546:	b103      	cbz	r3, 801754a <_write_r+0x1e>
 8017548:	6023      	str	r3, [r4, #0]
 801754a:	bd38      	pop	{r3, r4, r5, pc}
 801754c:	20006a64 	.word	0x20006a64

08017550 <__swsetup_r>:
 8017550:	4b32      	ldr	r3, [pc, #200]	; (801761c <__swsetup_r+0xcc>)
 8017552:	b570      	push	{r4, r5, r6, lr}
 8017554:	681d      	ldr	r5, [r3, #0]
 8017556:	4606      	mov	r6, r0
 8017558:	460c      	mov	r4, r1
 801755a:	b125      	cbz	r5, 8017566 <__swsetup_r+0x16>
 801755c:	69ab      	ldr	r3, [r5, #24]
 801755e:	b913      	cbnz	r3, 8017566 <__swsetup_r+0x16>
 8017560:	4628      	mov	r0, r5
 8017562:	f7ff f847 	bl	80165f4 <__sinit>
 8017566:	4b2e      	ldr	r3, [pc, #184]	; (8017620 <__swsetup_r+0xd0>)
 8017568:	429c      	cmp	r4, r3
 801756a:	d10f      	bne.n	801758c <__swsetup_r+0x3c>
 801756c:	686c      	ldr	r4, [r5, #4]
 801756e:	89a3      	ldrh	r3, [r4, #12]
 8017570:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017574:	0719      	lsls	r1, r3, #28
 8017576:	d42c      	bmi.n	80175d2 <__swsetup_r+0x82>
 8017578:	06dd      	lsls	r5, r3, #27
 801757a:	d411      	bmi.n	80175a0 <__swsetup_r+0x50>
 801757c:	2309      	movs	r3, #9
 801757e:	6033      	str	r3, [r6, #0]
 8017580:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017584:	81a3      	strh	r3, [r4, #12]
 8017586:	f04f 30ff 	mov.w	r0, #4294967295
 801758a:	e03e      	b.n	801760a <__swsetup_r+0xba>
 801758c:	4b25      	ldr	r3, [pc, #148]	; (8017624 <__swsetup_r+0xd4>)
 801758e:	429c      	cmp	r4, r3
 8017590:	d101      	bne.n	8017596 <__swsetup_r+0x46>
 8017592:	68ac      	ldr	r4, [r5, #8]
 8017594:	e7eb      	b.n	801756e <__swsetup_r+0x1e>
 8017596:	4b24      	ldr	r3, [pc, #144]	; (8017628 <__swsetup_r+0xd8>)
 8017598:	429c      	cmp	r4, r3
 801759a:	bf08      	it	eq
 801759c:	68ec      	ldreq	r4, [r5, #12]
 801759e:	e7e6      	b.n	801756e <__swsetup_r+0x1e>
 80175a0:	0758      	lsls	r0, r3, #29
 80175a2:	d512      	bpl.n	80175ca <__swsetup_r+0x7a>
 80175a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80175a6:	b141      	cbz	r1, 80175ba <__swsetup_r+0x6a>
 80175a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80175ac:	4299      	cmp	r1, r3
 80175ae:	d002      	beq.n	80175b6 <__swsetup_r+0x66>
 80175b0:	4630      	mov	r0, r6
 80175b2:	f7fd fac1 	bl	8014b38 <_free_r>
 80175b6:	2300      	movs	r3, #0
 80175b8:	6363      	str	r3, [r4, #52]	; 0x34
 80175ba:	89a3      	ldrh	r3, [r4, #12]
 80175bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80175c0:	81a3      	strh	r3, [r4, #12]
 80175c2:	2300      	movs	r3, #0
 80175c4:	6063      	str	r3, [r4, #4]
 80175c6:	6923      	ldr	r3, [r4, #16]
 80175c8:	6023      	str	r3, [r4, #0]
 80175ca:	89a3      	ldrh	r3, [r4, #12]
 80175cc:	f043 0308 	orr.w	r3, r3, #8
 80175d0:	81a3      	strh	r3, [r4, #12]
 80175d2:	6923      	ldr	r3, [r4, #16]
 80175d4:	b94b      	cbnz	r3, 80175ea <__swsetup_r+0x9a>
 80175d6:	89a3      	ldrh	r3, [r4, #12]
 80175d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80175dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80175e0:	d003      	beq.n	80175ea <__swsetup_r+0x9a>
 80175e2:	4621      	mov	r1, r4
 80175e4:	4630      	mov	r0, r6
 80175e6:	f000 f931 	bl	801784c <__smakebuf_r>
 80175ea:	89a0      	ldrh	r0, [r4, #12]
 80175ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80175f0:	f010 0301 	ands.w	r3, r0, #1
 80175f4:	d00a      	beq.n	801760c <__swsetup_r+0xbc>
 80175f6:	2300      	movs	r3, #0
 80175f8:	60a3      	str	r3, [r4, #8]
 80175fa:	6963      	ldr	r3, [r4, #20]
 80175fc:	425b      	negs	r3, r3
 80175fe:	61a3      	str	r3, [r4, #24]
 8017600:	6923      	ldr	r3, [r4, #16]
 8017602:	b943      	cbnz	r3, 8017616 <__swsetup_r+0xc6>
 8017604:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017608:	d1ba      	bne.n	8017580 <__swsetup_r+0x30>
 801760a:	bd70      	pop	{r4, r5, r6, pc}
 801760c:	0781      	lsls	r1, r0, #30
 801760e:	bf58      	it	pl
 8017610:	6963      	ldrpl	r3, [r4, #20]
 8017612:	60a3      	str	r3, [r4, #8]
 8017614:	e7f4      	b.n	8017600 <__swsetup_r+0xb0>
 8017616:	2000      	movs	r0, #0
 8017618:	e7f7      	b.n	801760a <__swsetup_r+0xba>
 801761a:	bf00      	nop
 801761c:	20000024 	.word	0x20000024
 8017620:	0801bee0 	.word	0x0801bee0
 8017624:	0801bf00 	.word	0x0801bf00
 8017628:	0801bec0 	.word	0x0801bec0

0801762c <abort>:
 801762c:	b508      	push	{r3, lr}
 801762e:	2006      	movs	r0, #6
 8017630:	f000 f9be 	bl	80179b0 <raise>
 8017634:	2001      	movs	r0, #1
 8017636:	f7ec fa9b 	bl	8003b70 <_exit>
	...

0801763c <_close_r>:
 801763c:	b538      	push	{r3, r4, r5, lr}
 801763e:	4d06      	ldr	r5, [pc, #24]	; (8017658 <_close_r+0x1c>)
 8017640:	2300      	movs	r3, #0
 8017642:	4604      	mov	r4, r0
 8017644:	4608      	mov	r0, r1
 8017646:	602b      	str	r3, [r5, #0]
 8017648:	f7ec fad5 	bl	8003bf6 <_close>
 801764c:	1c43      	adds	r3, r0, #1
 801764e:	d102      	bne.n	8017656 <_close_r+0x1a>
 8017650:	682b      	ldr	r3, [r5, #0]
 8017652:	b103      	cbz	r3, 8017656 <_close_r+0x1a>
 8017654:	6023      	str	r3, [r4, #0]
 8017656:	bd38      	pop	{r3, r4, r5, pc}
 8017658:	20006a64 	.word	0x20006a64

0801765c <__sflush_r>:
 801765c:	898a      	ldrh	r2, [r1, #12]
 801765e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017662:	4605      	mov	r5, r0
 8017664:	0710      	lsls	r0, r2, #28
 8017666:	460c      	mov	r4, r1
 8017668:	d458      	bmi.n	801771c <__sflush_r+0xc0>
 801766a:	684b      	ldr	r3, [r1, #4]
 801766c:	2b00      	cmp	r3, #0
 801766e:	dc05      	bgt.n	801767c <__sflush_r+0x20>
 8017670:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017672:	2b00      	cmp	r3, #0
 8017674:	dc02      	bgt.n	801767c <__sflush_r+0x20>
 8017676:	2000      	movs	r0, #0
 8017678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801767c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801767e:	2e00      	cmp	r6, #0
 8017680:	d0f9      	beq.n	8017676 <__sflush_r+0x1a>
 8017682:	2300      	movs	r3, #0
 8017684:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017688:	682f      	ldr	r7, [r5, #0]
 801768a:	602b      	str	r3, [r5, #0]
 801768c:	d032      	beq.n	80176f4 <__sflush_r+0x98>
 801768e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017690:	89a3      	ldrh	r3, [r4, #12]
 8017692:	075a      	lsls	r2, r3, #29
 8017694:	d505      	bpl.n	80176a2 <__sflush_r+0x46>
 8017696:	6863      	ldr	r3, [r4, #4]
 8017698:	1ac0      	subs	r0, r0, r3
 801769a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801769c:	b10b      	cbz	r3, 80176a2 <__sflush_r+0x46>
 801769e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80176a0:	1ac0      	subs	r0, r0, r3
 80176a2:	2300      	movs	r3, #0
 80176a4:	4602      	mov	r2, r0
 80176a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80176a8:	6a21      	ldr	r1, [r4, #32]
 80176aa:	4628      	mov	r0, r5
 80176ac:	47b0      	blx	r6
 80176ae:	1c43      	adds	r3, r0, #1
 80176b0:	89a3      	ldrh	r3, [r4, #12]
 80176b2:	d106      	bne.n	80176c2 <__sflush_r+0x66>
 80176b4:	6829      	ldr	r1, [r5, #0]
 80176b6:	291d      	cmp	r1, #29
 80176b8:	d82c      	bhi.n	8017714 <__sflush_r+0xb8>
 80176ba:	4a2a      	ldr	r2, [pc, #168]	; (8017764 <__sflush_r+0x108>)
 80176bc:	40ca      	lsrs	r2, r1
 80176be:	07d6      	lsls	r6, r2, #31
 80176c0:	d528      	bpl.n	8017714 <__sflush_r+0xb8>
 80176c2:	2200      	movs	r2, #0
 80176c4:	6062      	str	r2, [r4, #4]
 80176c6:	04d9      	lsls	r1, r3, #19
 80176c8:	6922      	ldr	r2, [r4, #16]
 80176ca:	6022      	str	r2, [r4, #0]
 80176cc:	d504      	bpl.n	80176d8 <__sflush_r+0x7c>
 80176ce:	1c42      	adds	r2, r0, #1
 80176d0:	d101      	bne.n	80176d6 <__sflush_r+0x7a>
 80176d2:	682b      	ldr	r3, [r5, #0]
 80176d4:	b903      	cbnz	r3, 80176d8 <__sflush_r+0x7c>
 80176d6:	6560      	str	r0, [r4, #84]	; 0x54
 80176d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80176da:	602f      	str	r7, [r5, #0]
 80176dc:	2900      	cmp	r1, #0
 80176de:	d0ca      	beq.n	8017676 <__sflush_r+0x1a>
 80176e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80176e4:	4299      	cmp	r1, r3
 80176e6:	d002      	beq.n	80176ee <__sflush_r+0x92>
 80176e8:	4628      	mov	r0, r5
 80176ea:	f7fd fa25 	bl	8014b38 <_free_r>
 80176ee:	2000      	movs	r0, #0
 80176f0:	6360      	str	r0, [r4, #52]	; 0x34
 80176f2:	e7c1      	b.n	8017678 <__sflush_r+0x1c>
 80176f4:	6a21      	ldr	r1, [r4, #32]
 80176f6:	2301      	movs	r3, #1
 80176f8:	4628      	mov	r0, r5
 80176fa:	47b0      	blx	r6
 80176fc:	1c41      	adds	r1, r0, #1
 80176fe:	d1c7      	bne.n	8017690 <__sflush_r+0x34>
 8017700:	682b      	ldr	r3, [r5, #0]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d0c4      	beq.n	8017690 <__sflush_r+0x34>
 8017706:	2b1d      	cmp	r3, #29
 8017708:	d001      	beq.n	801770e <__sflush_r+0xb2>
 801770a:	2b16      	cmp	r3, #22
 801770c:	d101      	bne.n	8017712 <__sflush_r+0xb6>
 801770e:	602f      	str	r7, [r5, #0]
 8017710:	e7b1      	b.n	8017676 <__sflush_r+0x1a>
 8017712:	89a3      	ldrh	r3, [r4, #12]
 8017714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017718:	81a3      	strh	r3, [r4, #12]
 801771a:	e7ad      	b.n	8017678 <__sflush_r+0x1c>
 801771c:	690f      	ldr	r7, [r1, #16]
 801771e:	2f00      	cmp	r7, #0
 8017720:	d0a9      	beq.n	8017676 <__sflush_r+0x1a>
 8017722:	0793      	lsls	r3, r2, #30
 8017724:	680e      	ldr	r6, [r1, #0]
 8017726:	bf08      	it	eq
 8017728:	694b      	ldreq	r3, [r1, #20]
 801772a:	600f      	str	r7, [r1, #0]
 801772c:	bf18      	it	ne
 801772e:	2300      	movne	r3, #0
 8017730:	eba6 0807 	sub.w	r8, r6, r7
 8017734:	608b      	str	r3, [r1, #8]
 8017736:	f1b8 0f00 	cmp.w	r8, #0
 801773a:	dd9c      	ble.n	8017676 <__sflush_r+0x1a>
 801773c:	6a21      	ldr	r1, [r4, #32]
 801773e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017740:	4643      	mov	r3, r8
 8017742:	463a      	mov	r2, r7
 8017744:	4628      	mov	r0, r5
 8017746:	47b0      	blx	r6
 8017748:	2800      	cmp	r0, #0
 801774a:	dc06      	bgt.n	801775a <__sflush_r+0xfe>
 801774c:	89a3      	ldrh	r3, [r4, #12]
 801774e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017752:	81a3      	strh	r3, [r4, #12]
 8017754:	f04f 30ff 	mov.w	r0, #4294967295
 8017758:	e78e      	b.n	8017678 <__sflush_r+0x1c>
 801775a:	4407      	add	r7, r0
 801775c:	eba8 0800 	sub.w	r8, r8, r0
 8017760:	e7e9      	b.n	8017736 <__sflush_r+0xda>
 8017762:	bf00      	nop
 8017764:	20400001 	.word	0x20400001

08017768 <_fflush_r>:
 8017768:	b538      	push	{r3, r4, r5, lr}
 801776a:	690b      	ldr	r3, [r1, #16]
 801776c:	4605      	mov	r5, r0
 801776e:	460c      	mov	r4, r1
 8017770:	b913      	cbnz	r3, 8017778 <_fflush_r+0x10>
 8017772:	2500      	movs	r5, #0
 8017774:	4628      	mov	r0, r5
 8017776:	bd38      	pop	{r3, r4, r5, pc}
 8017778:	b118      	cbz	r0, 8017782 <_fflush_r+0x1a>
 801777a:	6983      	ldr	r3, [r0, #24]
 801777c:	b90b      	cbnz	r3, 8017782 <_fflush_r+0x1a>
 801777e:	f7fe ff39 	bl	80165f4 <__sinit>
 8017782:	4b14      	ldr	r3, [pc, #80]	; (80177d4 <_fflush_r+0x6c>)
 8017784:	429c      	cmp	r4, r3
 8017786:	d11b      	bne.n	80177c0 <_fflush_r+0x58>
 8017788:	686c      	ldr	r4, [r5, #4]
 801778a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d0ef      	beq.n	8017772 <_fflush_r+0xa>
 8017792:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017794:	07d0      	lsls	r0, r2, #31
 8017796:	d404      	bmi.n	80177a2 <_fflush_r+0x3a>
 8017798:	0599      	lsls	r1, r3, #22
 801779a:	d402      	bmi.n	80177a2 <_fflush_r+0x3a>
 801779c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801779e:	f7fe ffde 	bl	801675e <__retarget_lock_acquire_recursive>
 80177a2:	4628      	mov	r0, r5
 80177a4:	4621      	mov	r1, r4
 80177a6:	f7ff ff59 	bl	801765c <__sflush_r>
 80177aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80177ac:	07da      	lsls	r2, r3, #31
 80177ae:	4605      	mov	r5, r0
 80177b0:	d4e0      	bmi.n	8017774 <_fflush_r+0xc>
 80177b2:	89a3      	ldrh	r3, [r4, #12]
 80177b4:	059b      	lsls	r3, r3, #22
 80177b6:	d4dd      	bmi.n	8017774 <_fflush_r+0xc>
 80177b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80177ba:	f7fe ffd1 	bl	8016760 <__retarget_lock_release_recursive>
 80177be:	e7d9      	b.n	8017774 <_fflush_r+0xc>
 80177c0:	4b05      	ldr	r3, [pc, #20]	; (80177d8 <_fflush_r+0x70>)
 80177c2:	429c      	cmp	r4, r3
 80177c4:	d101      	bne.n	80177ca <_fflush_r+0x62>
 80177c6:	68ac      	ldr	r4, [r5, #8]
 80177c8:	e7df      	b.n	801778a <_fflush_r+0x22>
 80177ca:	4b04      	ldr	r3, [pc, #16]	; (80177dc <_fflush_r+0x74>)
 80177cc:	429c      	cmp	r4, r3
 80177ce:	bf08      	it	eq
 80177d0:	68ec      	ldreq	r4, [r5, #12]
 80177d2:	e7da      	b.n	801778a <_fflush_r+0x22>
 80177d4:	0801bee0 	.word	0x0801bee0
 80177d8:	0801bf00 	.word	0x0801bf00
 80177dc:	0801bec0 	.word	0x0801bec0

080177e0 <_lseek_r>:
 80177e0:	b538      	push	{r3, r4, r5, lr}
 80177e2:	4d07      	ldr	r5, [pc, #28]	; (8017800 <_lseek_r+0x20>)
 80177e4:	4604      	mov	r4, r0
 80177e6:	4608      	mov	r0, r1
 80177e8:	4611      	mov	r1, r2
 80177ea:	2200      	movs	r2, #0
 80177ec:	602a      	str	r2, [r5, #0]
 80177ee:	461a      	mov	r2, r3
 80177f0:	f7ec fa28 	bl	8003c44 <_lseek>
 80177f4:	1c43      	adds	r3, r0, #1
 80177f6:	d102      	bne.n	80177fe <_lseek_r+0x1e>
 80177f8:	682b      	ldr	r3, [r5, #0]
 80177fa:	b103      	cbz	r3, 80177fe <_lseek_r+0x1e>
 80177fc:	6023      	str	r3, [r4, #0]
 80177fe:	bd38      	pop	{r3, r4, r5, pc}
 8017800:	20006a64 	.word	0x20006a64

08017804 <__swhatbuf_r>:
 8017804:	b570      	push	{r4, r5, r6, lr}
 8017806:	460e      	mov	r6, r1
 8017808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801780c:	2900      	cmp	r1, #0
 801780e:	b096      	sub	sp, #88	; 0x58
 8017810:	4614      	mov	r4, r2
 8017812:	461d      	mov	r5, r3
 8017814:	da07      	bge.n	8017826 <__swhatbuf_r+0x22>
 8017816:	2300      	movs	r3, #0
 8017818:	602b      	str	r3, [r5, #0]
 801781a:	89b3      	ldrh	r3, [r6, #12]
 801781c:	061a      	lsls	r2, r3, #24
 801781e:	d410      	bmi.n	8017842 <__swhatbuf_r+0x3e>
 8017820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017824:	e00e      	b.n	8017844 <__swhatbuf_r+0x40>
 8017826:	466a      	mov	r2, sp
 8017828:	f000 f8ec 	bl	8017a04 <_fstat_r>
 801782c:	2800      	cmp	r0, #0
 801782e:	dbf2      	blt.n	8017816 <__swhatbuf_r+0x12>
 8017830:	9a01      	ldr	r2, [sp, #4]
 8017832:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017836:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801783a:	425a      	negs	r2, r3
 801783c:	415a      	adcs	r2, r3
 801783e:	602a      	str	r2, [r5, #0]
 8017840:	e7ee      	b.n	8017820 <__swhatbuf_r+0x1c>
 8017842:	2340      	movs	r3, #64	; 0x40
 8017844:	2000      	movs	r0, #0
 8017846:	6023      	str	r3, [r4, #0]
 8017848:	b016      	add	sp, #88	; 0x58
 801784a:	bd70      	pop	{r4, r5, r6, pc}

0801784c <__smakebuf_r>:
 801784c:	898b      	ldrh	r3, [r1, #12]
 801784e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017850:	079d      	lsls	r5, r3, #30
 8017852:	4606      	mov	r6, r0
 8017854:	460c      	mov	r4, r1
 8017856:	d507      	bpl.n	8017868 <__smakebuf_r+0x1c>
 8017858:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801785c:	6023      	str	r3, [r4, #0]
 801785e:	6123      	str	r3, [r4, #16]
 8017860:	2301      	movs	r3, #1
 8017862:	6163      	str	r3, [r4, #20]
 8017864:	b002      	add	sp, #8
 8017866:	bd70      	pop	{r4, r5, r6, pc}
 8017868:	ab01      	add	r3, sp, #4
 801786a:	466a      	mov	r2, sp
 801786c:	f7ff ffca 	bl	8017804 <__swhatbuf_r>
 8017870:	9900      	ldr	r1, [sp, #0]
 8017872:	4605      	mov	r5, r0
 8017874:	4630      	mov	r0, r6
 8017876:	f7fd f9af 	bl	8014bd8 <_malloc_r>
 801787a:	b948      	cbnz	r0, 8017890 <__smakebuf_r+0x44>
 801787c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017880:	059a      	lsls	r2, r3, #22
 8017882:	d4ef      	bmi.n	8017864 <__smakebuf_r+0x18>
 8017884:	f023 0303 	bic.w	r3, r3, #3
 8017888:	f043 0302 	orr.w	r3, r3, #2
 801788c:	81a3      	strh	r3, [r4, #12]
 801788e:	e7e3      	b.n	8017858 <__smakebuf_r+0xc>
 8017890:	4b0d      	ldr	r3, [pc, #52]	; (80178c8 <__smakebuf_r+0x7c>)
 8017892:	62b3      	str	r3, [r6, #40]	; 0x28
 8017894:	89a3      	ldrh	r3, [r4, #12]
 8017896:	6020      	str	r0, [r4, #0]
 8017898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801789c:	81a3      	strh	r3, [r4, #12]
 801789e:	9b00      	ldr	r3, [sp, #0]
 80178a0:	6163      	str	r3, [r4, #20]
 80178a2:	9b01      	ldr	r3, [sp, #4]
 80178a4:	6120      	str	r0, [r4, #16]
 80178a6:	b15b      	cbz	r3, 80178c0 <__smakebuf_r+0x74>
 80178a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80178ac:	4630      	mov	r0, r6
 80178ae:	f000 f8bb 	bl	8017a28 <_isatty_r>
 80178b2:	b128      	cbz	r0, 80178c0 <__smakebuf_r+0x74>
 80178b4:	89a3      	ldrh	r3, [r4, #12]
 80178b6:	f023 0303 	bic.w	r3, r3, #3
 80178ba:	f043 0301 	orr.w	r3, r3, #1
 80178be:	81a3      	strh	r3, [r4, #12]
 80178c0:	89a0      	ldrh	r0, [r4, #12]
 80178c2:	4305      	orrs	r5, r0
 80178c4:	81a5      	strh	r5, [r4, #12]
 80178c6:	e7cd      	b.n	8017864 <__smakebuf_r+0x18>
 80178c8:	0801658d 	.word	0x0801658d

080178cc <__ascii_mbtowc>:
 80178cc:	b082      	sub	sp, #8
 80178ce:	b901      	cbnz	r1, 80178d2 <__ascii_mbtowc+0x6>
 80178d0:	a901      	add	r1, sp, #4
 80178d2:	b142      	cbz	r2, 80178e6 <__ascii_mbtowc+0x1a>
 80178d4:	b14b      	cbz	r3, 80178ea <__ascii_mbtowc+0x1e>
 80178d6:	7813      	ldrb	r3, [r2, #0]
 80178d8:	600b      	str	r3, [r1, #0]
 80178da:	7812      	ldrb	r2, [r2, #0]
 80178dc:	1e10      	subs	r0, r2, #0
 80178de:	bf18      	it	ne
 80178e0:	2001      	movne	r0, #1
 80178e2:	b002      	add	sp, #8
 80178e4:	4770      	bx	lr
 80178e6:	4610      	mov	r0, r2
 80178e8:	e7fb      	b.n	80178e2 <__ascii_mbtowc+0x16>
 80178ea:	f06f 0001 	mvn.w	r0, #1
 80178ee:	e7f8      	b.n	80178e2 <__ascii_mbtowc+0x16>

080178f0 <_realloc_r>:
 80178f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178f2:	4607      	mov	r7, r0
 80178f4:	4614      	mov	r4, r2
 80178f6:	460e      	mov	r6, r1
 80178f8:	b921      	cbnz	r1, 8017904 <_realloc_r+0x14>
 80178fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80178fe:	4611      	mov	r1, r2
 8017900:	f7fd b96a 	b.w	8014bd8 <_malloc_r>
 8017904:	b922      	cbnz	r2, 8017910 <_realloc_r+0x20>
 8017906:	f7fd f917 	bl	8014b38 <_free_r>
 801790a:	4625      	mov	r5, r4
 801790c:	4628      	mov	r0, r5
 801790e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017910:	f000 f89a 	bl	8017a48 <_malloc_usable_size_r>
 8017914:	42a0      	cmp	r0, r4
 8017916:	d20f      	bcs.n	8017938 <_realloc_r+0x48>
 8017918:	4621      	mov	r1, r4
 801791a:	4638      	mov	r0, r7
 801791c:	f7fd f95c 	bl	8014bd8 <_malloc_r>
 8017920:	4605      	mov	r5, r0
 8017922:	2800      	cmp	r0, #0
 8017924:	d0f2      	beq.n	801790c <_realloc_r+0x1c>
 8017926:	4631      	mov	r1, r6
 8017928:	4622      	mov	r2, r4
 801792a:	f7fd f8d5 	bl	8014ad8 <memcpy>
 801792e:	4631      	mov	r1, r6
 8017930:	4638      	mov	r0, r7
 8017932:	f7fd f901 	bl	8014b38 <_free_r>
 8017936:	e7e9      	b.n	801790c <_realloc_r+0x1c>
 8017938:	4635      	mov	r5, r6
 801793a:	e7e7      	b.n	801790c <_realloc_r+0x1c>

0801793c <_read_r>:
 801793c:	b538      	push	{r3, r4, r5, lr}
 801793e:	4d07      	ldr	r5, [pc, #28]	; (801795c <_read_r+0x20>)
 8017940:	4604      	mov	r4, r0
 8017942:	4608      	mov	r0, r1
 8017944:	4611      	mov	r1, r2
 8017946:	2200      	movs	r2, #0
 8017948:	602a      	str	r2, [r5, #0]
 801794a:	461a      	mov	r2, r3
 801794c:	f7ec f91a 	bl	8003b84 <_read>
 8017950:	1c43      	adds	r3, r0, #1
 8017952:	d102      	bne.n	801795a <_read_r+0x1e>
 8017954:	682b      	ldr	r3, [r5, #0]
 8017956:	b103      	cbz	r3, 801795a <_read_r+0x1e>
 8017958:	6023      	str	r3, [r4, #0]
 801795a:	bd38      	pop	{r3, r4, r5, pc}
 801795c:	20006a64 	.word	0x20006a64

08017960 <_raise_r>:
 8017960:	291f      	cmp	r1, #31
 8017962:	b538      	push	{r3, r4, r5, lr}
 8017964:	4604      	mov	r4, r0
 8017966:	460d      	mov	r5, r1
 8017968:	d904      	bls.n	8017974 <_raise_r+0x14>
 801796a:	2316      	movs	r3, #22
 801796c:	6003      	str	r3, [r0, #0]
 801796e:	f04f 30ff 	mov.w	r0, #4294967295
 8017972:	bd38      	pop	{r3, r4, r5, pc}
 8017974:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017976:	b112      	cbz	r2, 801797e <_raise_r+0x1e>
 8017978:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801797c:	b94b      	cbnz	r3, 8017992 <_raise_r+0x32>
 801797e:	4620      	mov	r0, r4
 8017980:	f000 f830 	bl	80179e4 <_getpid_r>
 8017984:	462a      	mov	r2, r5
 8017986:	4601      	mov	r1, r0
 8017988:	4620      	mov	r0, r4
 801798a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801798e:	f000 b817 	b.w	80179c0 <_kill_r>
 8017992:	2b01      	cmp	r3, #1
 8017994:	d00a      	beq.n	80179ac <_raise_r+0x4c>
 8017996:	1c59      	adds	r1, r3, #1
 8017998:	d103      	bne.n	80179a2 <_raise_r+0x42>
 801799a:	2316      	movs	r3, #22
 801799c:	6003      	str	r3, [r0, #0]
 801799e:	2001      	movs	r0, #1
 80179a0:	e7e7      	b.n	8017972 <_raise_r+0x12>
 80179a2:	2400      	movs	r4, #0
 80179a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80179a8:	4628      	mov	r0, r5
 80179aa:	4798      	blx	r3
 80179ac:	2000      	movs	r0, #0
 80179ae:	e7e0      	b.n	8017972 <_raise_r+0x12>

080179b0 <raise>:
 80179b0:	4b02      	ldr	r3, [pc, #8]	; (80179bc <raise+0xc>)
 80179b2:	4601      	mov	r1, r0
 80179b4:	6818      	ldr	r0, [r3, #0]
 80179b6:	f7ff bfd3 	b.w	8017960 <_raise_r>
 80179ba:	bf00      	nop
 80179bc:	20000024 	.word	0x20000024

080179c0 <_kill_r>:
 80179c0:	b538      	push	{r3, r4, r5, lr}
 80179c2:	4d07      	ldr	r5, [pc, #28]	; (80179e0 <_kill_r+0x20>)
 80179c4:	2300      	movs	r3, #0
 80179c6:	4604      	mov	r4, r0
 80179c8:	4608      	mov	r0, r1
 80179ca:	4611      	mov	r1, r2
 80179cc:	602b      	str	r3, [r5, #0]
 80179ce:	f7ec f8bd 	bl	8003b4c <_kill>
 80179d2:	1c43      	adds	r3, r0, #1
 80179d4:	d102      	bne.n	80179dc <_kill_r+0x1c>
 80179d6:	682b      	ldr	r3, [r5, #0]
 80179d8:	b103      	cbz	r3, 80179dc <_kill_r+0x1c>
 80179da:	6023      	str	r3, [r4, #0]
 80179dc:	bd38      	pop	{r3, r4, r5, pc}
 80179de:	bf00      	nop
 80179e0:	20006a64 	.word	0x20006a64

080179e4 <_getpid_r>:
 80179e4:	f7ec b8aa 	b.w	8003b3c <_getpid>

080179e8 <__ascii_wctomb>:
 80179e8:	b149      	cbz	r1, 80179fe <__ascii_wctomb+0x16>
 80179ea:	2aff      	cmp	r2, #255	; 0xff
 80179ec:	bf85      	ittet	hi
 80179ee:	238a      	movhi	r3, #138	; 0x8a
 80179f0:	6003      	strhi	r3, [r0, #0]
 80179f2:	700a      	strbls	r2, [r1, #0]
 80179f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80179f8:	bf98      	it	ls
 80179fa:	2001      	movls	r0, #1
 80179fc:	4770      	bx	lr
 80179fe:	4608      	mov	r0, r1
 8017a00:	4770      	bx	lr
	...

08017a04 <_fstat_r>:
 8017a04:	b538      	push	{r3, r4, r5, lr}
 8017a06:	4d07      	ldr	r5, [pc, #28]	; (8017a24 <_fstat_r+0x20>)
 8017a08:	2300      	movs	r3, #0
 8017a0a:	4604      	mov	r4, r0
 8017a0c:	4608      	mov	r0, r1
 8017a0e:	4611      	mov	r1, r2
 8017a10:	602b      	str	r3, [r5, #0]
 8017a12:	f7ec f8fc 	bl	8003c0e <_fstat>
 8017a16:	1c43      	adds	r3, r0, #1
 8017a18:	d102      	bne.n	8017a20 <_fstat_r+0x1c>
 8017a1a:	682b      	ldr	r3, [r5, #0]
 8017a1c:	b103      	cbz	r3, 8017a20 <_fstat_r+0x1c>
 8017a1e:	6023      	str	r3, [r4, #0]
 8017a20:	bd38      	pop	{r3, r4, r5, pc}
 8017a22:	bf00      	nop
 8017a24:	20006a64 	.word	0x20006a64

08017a28 <_isatty_r>:
 8017a28:	b538      	push	{r3, r4, r5, lr}
 8017a2a:	4d06      	ldr	r5, [pc, #24]	; (8017a44 <_isatty_r+0x1c>)
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	4604      	mov	r4, r0
 8017a30:	4608      	mov	r0, r1
 8017a32:	602b      	str	r3, [r5, #0]
 8017a34:	f7ec f8fb 	bl	8003c2e <_isatty>
 8017a38:	1c43      	adds	r3, r0, #1
 8017a3a:	d102      	bne.n	8017a42 <_isatty_r+0x1a>
 8017a3c:	682b      	ldr	r3, [r5, #0]
 8017a3e:	b103      	cbz	r3, 8017a42 <_isatty_r+0x1a>
 8017a40:	6023      	str	r3, [r4, #0]
 8017a42:	bd38      	pop	{r3, r4, r5, pc}
 8017a44:	20006a64 	.word	0x20006a64

08017a48 <_malloc_usable_size_r>:
 8017a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a4c:	1f18      	subs	r0, r3, #4
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	bfbc      	itt	lt
 8017a52:	580b      	ldrlt	r3, [r1, r0]
 8017a54:	18c0      	addlt	r0, r0, r3
 8017a56:	4770      	bx	lr

08017a58 <pow>:
 8017a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a5c:	ec59 8b10 	vmov	r8, r9, d0
 8017a60:	ec57 6b11 	vmov	r6, r7, d1
 8017a64:	f000 f8a8 	bl	8017bb8 <__ieee754_pow>
 8017a68:	4b4e      	ldr	r3, [pc, #312]	; (8017ba4 <pow+0x14c>)
 8017a6a:	f993 3000 	ldrsb.w	r3, [r3]
 8017a6e:	3301      	adds	r3, #1
 8017a70:	ec55 4b10 	vmov	r4, r5, d0
 8017a74:	d015      	beq.n	8017aa2 <pow+0x4a>
 8017a76:	4632      	mov	r2, r6
 8017a78:	463b      	mov	r3, r7
 8017a7a:	4630      	mov	r0, r6
 8017a7c:	4639      	mov	r1, r7
 8017a7e:	f7e9 f865 	bl	8000b4c <__aeabi_dcmpun>
 8017a82:	b970      	cbnz	r0, 8017aa2 <pow+0x4a>
 8017a84:	4642      	mov	r2, r8
 8017a86:	464b      	mov	r3, r9
 8017a88:	4640      	mov	r0, r8
 8017a8a:	4649      	mov	r1, r9
 8017a8c:	f7e9 f85e 	bl	8000b4c <__aeabi_dcmpun>
 8017a90:	2200      	movs	r2, #0
 8017a92:	2300      	movs	r3, #0
 8017a94:	b148      	cbz	r0, 8017aaa <pow+0x52>
 8017a96:	4630      	mov	r0, r6
 8017a98:	4639      	mov	r1, r7
 8017a9a:	f7e9 f825 	bl	8000ae8 <__aeabi_dcmpeq>
 8017a9e:	2800      	cmp	r0, #0
 8017aa0:	d17d      	bne.n	8017b9e <pow+0x146>
 8017aa2:	ec45 4b10 	vmov	d0, r4, r5
 8017aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017aaa:	4640      	mov	r0, r8
 8017aac:	4649      	mov	r1, r9
 8017aae:	f7e9 f81b 	bl	8000ae8 <__aeabi_dcmpeq>
 8017ab2:	b1e0      	cbz	r0, 8017aee <pow+0x96>
 8017ab4:	2200      	movs	r2, #0
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	4630      	mov	r0, r6
 8017aba:	4639      	mov	r1, r7
 8017abc:	f7e9 f814 	bl	8000ae8 <__aeabi_dcmpeq>
 8017ac0:	2800      	cmp	r0, #0
 8017ac2:	d16c      	bne.n	8017b9e <pow+0x146>
 8017ac4:	ec47 6b10 	vmov	d0, r6, r7
 8017ac8:	f000 fe55 	bl	8018776 <finite>
 8017acc:	2800      	cmp	r0, #0
 8017ace:	d0e8      	beq.n	8017aa2 <pow+0x4a>
 8017ad0:	2200      	movs	r2, #0
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	4630      	mov	r0, r6
 8017ad6:	4639      	mov	r1, r7
 8017ad8:	f7e9 f810 	bl	8000afc <__aeabi_dcmplt>
 8017adc:	2800      	cmp	r0, #0
 8017ade:	d0e0      	beq.n	8017aa2 <pow+0x4a>
 8017ae0:	f7fe fd2a 	bl	8016538 <__errno>
 8017ae4:	2321      	movs	r3, #33	; 0x21
 8017ae6:	6003      	str	r3, [r0, #0]
 8017ae8:	2400      	movs	r4, #0
 8017aea:	4d2f      	ldr	r5, [pc, #188]	; (8017ba8 <pow+0x150>)
 8017aec:	e7d9      	b.n	8017aa2 <pow+0x4a>
 8017aee:	ec45 4b10 	vmov	d0, r4, r5
 8017af2:	f000 fe40 	bl	8018776 <finite>
 8017af6:	bbb8      	cbnz	r0, 8017b68 <pow+0x110>
 8017af8:	ec49 8b10 	vmov	d0, r8, r9
 8017afc:	f000 fe3b 	bl	8018776 <finite>
 8017b00:	b390      	cbz	r0, 8017b68 <pow+0x110>
 8017b02:	ec47 6b10 	vmov	d0, r6, r7
 8017b06:	f000 fe36 	bl	8018776 <finite>
 8017b0a:	b368      	cbz	r0, 8017b68 <pow+0x110>
 8017b0c:	4622      	mov	r2, r4
 8017b0e:	462b      	mov	r3, r5
 8017b10:	4620      	mov	r0, r4
 8017b12:	4629      	mov	r1, r5
 8017b14:	f7e9 f81a 	bl	8000b4c <__aeabi_dcmpun>
 8017b18:	b160      	cbz	r0, 8017b34 <pow+0xdc>
 8017b1a:	f7fe fd0d 	bl	8016538 <__errno>
 8017b1e:	2321      	movs	r3, #33	; 0x21
 8017b20:	6003      	str	r3, [r0, #0]
 8017b22:	2200      	movs	r2, #0
 8017b24:	2300      	movs	r3, #0
 8017b26:	4610      	mov	r0, r2
 8017b28:	4619      	mov	r1, r3
 8017b2a:	f7e8 fe9f 	bl	800086c <__aeabi_ddiv>
 8017b2e:	4604      	mov	r4, r0
 8017b30:	460d      	mov	r5, r1
 8017b32:	e7b6      	b.n	8017aa2 <pow+0x4a>
 8017b34:	f7fe fd00 	bl	8016538 <__errno>
 8017b38:	2322      	movs	r3, #34	; 0x22
 8017b3a:	6003      	str	r3, [r0, #0]
 8017b3c:	2200      	movs	r2, #0
 8017b3e:	2300      	movs	r3, #0
 8017b40:	4640      	mov	r0, r8
 8017b42:	4649      	mov	r1, r9
 8017b44:	f7e8 ffda 	bl	8000afc <__aeabi_dcmplt>
 8017b48:	2400      	movs	r4, #0
 8017b4a:	b158      	cbz	r0, 8017b64 <pow+0x10c>
 8017b4c:	ec47 6b10 	vmov	d0, r6, r7
 8017b50:	f000 fe26 	bl	80187a0 <rint>
 8017b54:	4632      	mov	r2, r6
 8017b56:	ec51 0b10 	vmov	r0, r1, d0
 8017b5a:	463b      	mov	r3, r7
 8017b5c:	f7e8 ffc4 	bl	8000ae8 <__aeabi_dcmpeq>
 8017b60:	2800      	cmp	r0, #0
 8017b62:	d0c2      	beq.n	8017aea <pow+0x92>
 8017b64:	4d11      	ldr	r5, [pc, #68]	; (8017bac <pow+0x154>)
 8017b66:	e79c      	b.n	8017aa2 <pow+0x4a>
 8017b68:	2200      	movs	r2, #0
 8017b6a:	2300      	movs	r3, #0
 8017b6c:	4620      	mov	r0, r4
 8017b6e:	4629      	mov	r1, r5
 8017b70:	f7e8 ffba 	bl	8000ae8 <__aeabi_dcmpeq>
 8017b74:	2800      	cmp	r0, #0
 8017b76:	d094      	beq.n	8017aa2 <pow+0x4a>
 8017b78:	ec49 8b10 	vmov	d0, r8, r9
 8017b7c:	f000 fdfb 	bl	8018776 <finite>
 8017b80:	2800      	cmp	r0, #0
 8017b82:	d08e      	beq.n	8017aa2 <pow+0x4a>
 8017b84:	ec47 6b10 	vmov	d0, r6, r7
 8017b88:	f000 fdf5 	bl	8018776 <finite>
 8017b8c:	2800      	cmp	r0, #0
 8017b8e:	d088      	beq.n	8017aa2 <pow+0x4a>
 8017b90:	f7fe fcd2 	bl	8016538 <__errno>
 8017b94:	2322      	movs	r3, #34	; 0x22
 8017b96:	6003      	str	r3, [r0, #0]
 8017b98:	2400      	movs	r4, #0
 8017b9a:	2500      	movs	r5, #0
 8017b9c:	e781      	b.n	8017aa2 <pow+0x4a>
 8017b9e:	4d04      	ldr	r5, [pc, #16]	; (8017bb0 <pow+0x158>)
 8017ba0:	2400      	movs	r4, #0
 8017ba2:	e77e      	b.n	8017aa2 <pow+0x4a>
 8017ba4:	200001f4 	.word	0x200001f4
 8017ba8:	fff00000 	.word	0xfff00000
 8017bac:	7ff00000 	.word	0x7ff00000
 8017bb0:	3ff00000 	.word	0x3ff00000
 8017bb4:	00000000 	.word	0x00000000

08017bb8 <__ieee754_pow>:
 8017bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bbc:	ed2d 8b06 	vpush	{d8-d10}
 8017bc0:	b08d      	sub	sp, #52	; 0x34
 8017bc2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8017bc6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8017bca:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8017bce:	ea56 0100 	orrs.w	r1, r6, r0
 8017bd2:	ec53 2b10 	vmov	r2, r3, d0
 8017bd6:	f000 84d1 	beq.w	801857c <__ieee754_pow+0x9c4>
 8017bda:	497f      	ldr	r1, [pc, #508]	; (8017dd8 <__ieee754_pow+0x220>)
 8017bdc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8017be0:	428c      	cmp	r4, r1
 8017be2:	ee10 8a10 	vmov	r8, s0
 8017be6:	4699      	mov	r9, r3
 8017be8:	dc09      	bgt.n	8017bfe <__ieee754_pow+0x46>
 8017bea:	d103      	bne.n	8017bf4 <__ieee754_pow+0x3c>
 8017bec:	b97a      	cbnz	r2, 8017c0e <__ieee754_pow+0x56>
 8017bee:	42a6      	cmp	r6, r4
 8017bf0:	dd02      	ble.n	8017bf8 <__ieee754_pow+0x40>
 8017bf2:	e00c      	b.n	8017c0e <__ieee754_pow+0x56>
 8017bf4:	428e      	cmp	r6, r1
 8017bf6:	dc02      	bgt.n	8017bfe <__ieee754_pow+0x46>
 8017bf8:	428e      	cmp	r6, r1
 8017bfa:	d110      	bne.n	8017c1e <__ieee754_pow+0x66>
 8017bfc:	b178      	cbz	r0, 8017c1e <__ieee754_pow+0x66>
 8017bfe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8017c02:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8017c06:	ea54 0308 	orrs.w	r3, r4, r8
 8017c0a:	f000 84b7 	beq.w	801857c <__ieee754_pow+0x9c4>
 8017c0e:	4873      	ldr	r0, [pc, #460]	; (8017ddc <__ieee754_pow+0x224>)
 8017c10:	b00d      	add	sp, #52	; 0x34
 8017c12:	ecbd 8b06 	vpop	{d8-d10}
 8017c16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c1a:	f000 bdb9 	b.w	8018790 <nan>
 8017c1e:	f1b9 0f00 	cmp.w	r9, #0
 8017c22:	da36      	bge.n	8017c92 <__ieee754_pow+0xda>
 8017c24:	496e      	ldr	r1, [pc, #440]	; (8017de0 <__ieee754_pow+0x228>)
 8017c26:	428e      	cmp	r6, r1
 8017c28:	dc51      	bgt.n	8017cce <__ieee754_pow+0x116>
 8017c2a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8017c2e:	428e      	cmp	r6, r1
 8017c30:	f340 84af 	ble.w	8018592 <__ieee754_pow+0x9da>
 8017c34:	1531      	asrs	r1, r6, #20
 8017c36:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8017c3a:	2914      	cmp	r1, #20
 8017c3c:	dd0f      	ble.n	8017c5e <__ieee754_pow+0xa6>
 8017c3e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8017c42:	fa20 fc01 	lsr.w	ip, r0, r1
 8017c46:	fa0c f101 	lsl.w	r1, ip, r1
 8017c4a:	4281      	cmp	r1, r0
 8017c4c:	f040 84a1 	bne.w	8018592 <__ieee754_pow+0x9da>
 8017c50:	f00c 0c01 	and.w	ip, ip, #1
 8017c54:	f1cc 0102 	rsb	r1, ip, #2
 8017c58:	9100      	str	r1, [sp, #0]
 8017c5a:	b180      	cbz	r0, 8017c7e <__ieee754_pow+0xc6>
 8017c5c:	e059      	b.n	8017d12 <__ieee754_pow+0x15a>
 8017c5e:	2800      	cmp	r0, #0
 8017c60:	d155      	bne.n	8017d0e <__ieee754_pow+0x156>
 8017c62:	f1c1 0114 	rsb	r1, r1, #20
 8017c66:	fa46 fc01 	asr.w	ip, r6, r1
 8017c6a:	fa0c f101 	lsl.w	r1, ip, r1
 8017c6e:	42b1      	cmp	r1, r6
 8017c70:	f040 848c 	bne.w	801858c <__ieee754_pow+0x9d4>
 8017c74:	f00c 0c01 	and.w	ip, ip, #1
 8017c78:	f1cc 0102 	rsb	r1, ip, #2
 8017c7c:	9100      	str	r1, [sp, #0]
 8017c7e:	4959      	ldr	r1, [pc, #356]	; (8017de4 <__ieee754_pow+0x22c>)
 8017c80:	428e      	cmp	r6, r1
 8017c82:	d12d      	bne.n	8017ce0 <__ieee754_pow+0x128>
 8017c84:	2f00      	cmp	r7, #0
 8017c86:	da79      	bge.n	8017d7c <__ieee754_pow+0x1c4>
 8017c88:	4956      	ldr	r1, [pc, #344]	; (8017de4 <__ieee754_pow+0x22c>)
 8017c8a:	2000      	movs	r0, #0
 8017c8c:	f7e8 fdee 	bl	800086c <__aeabi_ddiv>
 8017c90:	e016      	b.n	8017cc0 <__ieee754_pow+0x108>
 8017c92:	2100      	movs	r1, #0
 8017c94:	9100      	str	r1, [sp, #0]
 8017c96:	2800      	cmp	r0, #0
 8017c98:	d13b      	bne.n	8017d12 <__ieee754_pow+0x15a>
 8017c9a:	494f      	ldr	r1, [pc, #316]	; (8017dd8 <__ieee754_pow+0x220>)
 8017c9c:	428e      	cmp	r6, r1
 8017c9e:	d1ee      	bne.n	8017c7e <__ieee754_pow+0xc6>
 8017ca0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8017ca4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8017ca8:	ea53 0308 	orrs.w	r3, r3, r8
 8017cac:	f000 8466 	beq.w	801857c <__ieee754_pow+0x9c4>
 8017cb0:	4b4d      	ldr	r3, [pc, #308]	; (8017de8 <__ieee754_pow+0x230>)
 8017cb2:	429c      	cmp	r4, r3
 8017cb4:	dd0d      	ble.n	8017cd2 <__ieee754_pow+0x11a>
 8017cb6:	2f00      	cmp	r7, #0
 8017cb8:	f280 8464 	bge.w	8018584 <__ieee754_pow+0x9cc>
 8017cbc:	2000      	movs	r0, #0
 8017cbe:	2100      	movs	r1, #0
 8017cc0:	ec41 0b10 	vmov	d0, r0, r1
 8017cc4:	b00d      	add	sp, #52	; 0x34
 8017cc6:	ecbd 8b06 	vpop	{d8-d10}
 8017cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cce:	2102      	movs	r1, #2
 8017cd0:	e7e0      	b.n	8017c94 <__ieee754_pow+0xdc>
 8017cd2:	2f00      	cmp	r7, #0
 8017cd4:	daf2      	bge.n	8017cbc <__ieee754_pow+0x104>
 8017cd6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8017cda:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017cde:	e7ef      	b.n	8017cc0 <__ieee754_pow+0x108>
 8017ce0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8017ce4:	d104      	bne.n	8017cf0 <__ieee754_pow+0x138>
 8017ce6:	4610      	mov	r0, r2
 8017ce8:	4619      	mov	r1, r3
 8017cea:	f7e8 fc95 	bl	8000618 <__aeabi_dmul>
 8017cee:	e7e7      	b.n	8017cc0 <__ieee754_pow+0x108>
 8017cf0:	493e      	ldr	r1, [pc, #248]	; (8017dec <__ieee754_pow+0x234>)
 8017cf2:	428f      	cmp	r7, r1
 8017cf4:	d10d      	bne.n	8017d12 <__ieee754_pow+0x15a>
 8017cf6:	f1b9 0f00 	cmp.w	r9, #0
 8017cfa:	db0a      	blt.n	8017d12 <__ieee754_pow+0x15a>
 8017cfc:	ec43 2b10 	vmov	d0, r2, r3
 8017d00:	b00d      	add	sp, #52	; 0x34
 8017d02:	ecbd 8b06 	vpop	{d8-d10}
 8017d06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d0a:	f000 bc77 	b.w	80185fc <__ieee754_sqrt>
 8017d0e:	2100      	movs	r1, #0
 8017d10:	9100      	str	r1, [sp, #0]
 8017d12:	ec43 2b10 	vmov	d0, r2, r3
 8017d16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017d1a:	f000 fd23 	bl	8018764 <fabs>
 8017d1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017d22:	ec51 0b10 	vmov	r0, r1, d0
 8017d26:	f1b8 0f00 	cmp.w	r8, #0
 8017d2a:	d12a      	bne.n	8017d82 <__ieee754_pow+0x1ca>
 8017d2c:	b12c      	cbz	r4, 8017d3a <__ieee754_pow+0x182>
 8017d2e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8017de4 <__ieee754_pow+0x22c>
 8017d32:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8017d36:	45e6      	cmp	lr, ip
 8017d38:	d123      	bne.n	8017d82 <__ieee754_pow+0x1ca>
 8017d3a:	2f00      	cmp	r7, #0
 8017d3c:	da05      	bge.n	8017d4a <__ieee754_pow+0x192>
 8017d3e:	4602      	mov	r2, r0
 8017d40:	460b      	mov	r3, r1
 8017d42:	2000      	movs	r0, #0
 8017d44:	4927      	ldr	r1, [pc, #156]	; (8017de4 <__ieee754_pow+0x22c>)
 8017d46:	f7e8 fd91 	bl	800086c <__aeabi_ddiv>
 8017d4a:	f1b9 0f00 	cmp.w	r9, #0
 8017d4e:	dab7      	bge.n	8017cc0 <__ieee754_pow+0x108>
 8017d50:	9b00      	ldr	r3, [sp, #0]
 8017d52:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8017d56:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8017d5a:	4323      	orrs	r3, r4
 8017d5c:	d108      	bne.n	8017d70 <__ieee754_pow+0x1b8>
 8017d5e:	4602      	mov	r2, r0
 8017d60:	460b      	mov	r3, r1
 8017d62:	4610      	mov	r0, r2
 8017d64:	4619      	mov	r1, r3
 8017d66:	f7e8 fa9f 	bl	80002a8 <__aeabi_dsub>
 8017d6a:	4602      	mov	r2, r0
 8017d6c:	460b      	mov	r3, r1
 8017d6e:	e78d      	b.n	8017c8c <__ieee754_pow+0xd4>
 8017d70:	9b00      	ldr	r3, [sp, #0]
 8017d72:	2b01      	cmp	r3, #1
 8017d74:	d1a4      	bne.n	8017cc0 <__ieee754_pow+0x108>
 8017d76:	4602      	mov	r2, r0
 8017d78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017d7c:	4610      	mov	r0, r2
 8017d7e:	4619      	mov	r1, r3
 8017d80:	e79e      	b.n	8017cc0 <__ieee754_pow+0x108>
 8017d82:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8017d86:	f10c 35ff 	add.w	r5, ip, #4294967295
 8017d8a:	950a      	str	r5, [sp, #40]	; 0x28
 8017d8c:	9d00      	ldr	r5, [sp, #0]
 8017d8e:	46ac      	mov	ip, r5
 8017d90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8017d92:	ea5c 0505 	orrs.w	r5, ip, r5
 8017d96:	d0e4      	beq.n	8017d62 <__ieee754_pow+0x1aa>
 8017d98:	4b15      	ldr	r3, [pc, #84]	; (8017df0 <__ieee754_pow+0x238>)
 8017d9a:	429e      	cmp	r6, r3
 8017d9c:	f340 80fc 	ble.w	8017f98 <__ieee754_pow+0x3e0>
 8017da0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8017da4:	429e      	cmp	r6, r3
 8017da6:	4b10      	ldr	r3, [pc, #64]	; (8017de8 <__ieee754_pow+0x230>)
 8017da8:	dd07      	ble.n	8017dba <__ieee754_pow+0x202>
 8017daa:	429c      	cmp	r4, r3
 8017dac:	dc0a      	bgt.n	8017dc4 <__ieee754_pow+0x20c>
 8017dae:	2f00      	cmp	r7, #0
 8017db0:	da84      	bge.n	8017cbc <__ieee754_pow+0x104>
 8017db2:	a307      	add	r3, pc, #28	; (adr r3, 8017dd0 <__ieee754_pow+0x218>)
 8017db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017db8:	e795      	b.n	8017ce6 <__ieee754_pow+0x12e>
 8017dba:	429c      	cmp	r4, r3
 8017dbc:	dbf7      	blt.n	8017dae <__ieee754_pow+0x1f6>
 8017dbe:	4b09      	ldr	r3, [pc, #36]	; (8017de4 <__ieee754_pow+0x22c>)
 8017dc0:	429c      	cmp	r4, r3
 8017dc2:	dd17      	ble.n	8017df4 <__ieee754_pow+0x23c>
 8017dc4:	2f00      	cmp	r7, #0
 8017dc6:	dcf4      	bgt.n	8017db2 <__ieee754_pow+0x1fa>
 8017dc8:	e778      	b.n	8017cbc <__ieee754_pow+0x104>
 8017dca:	bf00      	nop
 8017dcc:	f3af 8000 	nop.w
 8017dd0:	8800759c 	.word	0x8800759c
 8017dd4:	7e37e43c 	.word	0x7e37e43c
 8017dd8:	7ff00000 	.word	0x7ff00000
 8017ddc:	0801be41 	.word	0x0801be41
 8017de0:	433fffff 	.word	0x433fffff
 8017de4:	3ff00000 	.word	0x3ff00000
 8017de8:	3fefffff 	.word	0x3fefffff
 8017dec:	3fe00000 	.word	0x3fe00000
 8017df0:	41e00000 	.word	0x41e00000
 8017df4:	4b64      	ldr	r3, [pc, #400]	; (8017f88 <__ieee754_pow+0x3d0>)
 8017df6:	2200      	movs	r2, #0
 8017df8:	f7e8 fa56 	bl	80002a8 <__aeabi_dsub>
 8017dfc:	a356      	add	r3, pc, #344	; (adr r3, 8017f58 <__ieee754_pow+0x3a0>)
 8017dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e02:	4604      	mov	r4, r0
 8017e04:	460d      	mov	r5, r1
 8017e06:	f7e8 fc07 	bl	8000618 <__aeabi_dmul>
 8017e0a:	a355      	add	r3, pc, #340	; (adr r3, 8017f60 <__ieee754_pow+0x3a8>)
 8017e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e10:	4606      	mov	r6, r0
 8017e12:	460f      	mov	r7, r1
 8017e14:	4620      	mov	r0, r4
 8017e16:	4629      	mov	r1, r5
 8017e18:	f7e8 fbfe 	bl	8000618 <__aeabi_dmul>
 8017e1c:	4b5b      	ldr	r3, [pc, #364]	; (8017f8c <__ieee754_pow+0x3d4>)
 8017e1e:	4682      	mov	sl, r0
 8017e20:	468b      	mov	fp, r1
 8017e22:	2200      	movs	r2, #0
 8017e24:	4620      	mov	r0, r4
 8017e26:	4629      	mov	r1, r5
 8017e28:	f7e8 fbf6 	bl	8000618 <__aeabi_dmul>
 8017e2c:	4602      	mov	r2, r0
 8017e2e:	460b      	mov	r3, r1
 8017e30:	a14d      	add	r1, pc, #308	; (adr r1, 8017f68 <__ieee754_pow+0x3b0>)
 8017e32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017e36:	f7e8 fa37 	bl	80002a8 <__aeabi_dsub>
 8017e3a:	4622      	mov	r2, r4
 8017e3c:	462b      	mov	r3, r5
 8017e3e:	f7e8 fbeb 	bl	8000618 <__aeabi_dmul>
 8017e42:	4602      	mov	r2, r0
 8017e44:	460b      	mov	r3, r1
 8017e46:	2000      	movs	r0, #0
 8017e48:	4951      	ldr	r1, [pc, #324]	; (8017f90 <__ieee754_pow+0x3d8>)
 8017e4a:	f7e8 fa2d 	bl	80002a8 <__aeabi_dsub>
 8017e4e:	4622      	mov	r2, r4
 8017e50:	4680      	mov	r8, r0
 8017e52:	4689      	mov	r9, r1
 8017e54:	462b      	mov	r3, r5
 8017e56:	4620      	mov	r0, r4
 8017e58:	4629      	mov	r1, r5
 8017e5a:	f7e8 fbdd 	bl	8000618 <__aeabi_dmul>
 8017e5e:	4602      	mov	r2, r0
 8017e60:	460b      	mov	r3, r1
 8017e62:	4640      	mov	r0, r8
 8017e64:	4649      	mov	r1, r9
 8017e66:	f7e8 fbd7 	bl	8000618 <__aeabi_dmul>
 8017e6a:	a341      	add	r3, pc, #260	; (adr r3, 8017f70 <__ieee754_pow+0x3b8>)
 8017e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e70:	f7e8 fbd2 	bl	8000618 <__aeabi_dmul>
 8017e74:	4602      	mov	r2, r0
 8017e76:	460b      	mov	r3, r1
 8017e78:	4650      	mov	r0, sl
 8017e7a:	4659      	mov	r1, fp
 8017e7c:	f7e8 fa14 	bl	80002a8 <__aeabi_dsub>
 8017e80:	4602      	mov	r2, r0
 8017e82:	460b      	mov	r3, r1
 8017e84:	4680      	mov	r8, r0
 8017e86:	4689      	mov	r9, r1
 8017e88:	4630      	mov	r0, r6
 8017e8a:	4639      	mov	r1, r7
 8017e8c:	f7e8 fa0e 	bl	80002ac <__adddf3>
 8017e90:	2400      	movs	r4, #0
 8017e92:	4632      	mov	r2, r6
 8017e94:	463b      	mov	r3, r7
 8017e96:	4620      	mov	r0, r4
 8017e98:	460d      	mov	r5, r1
 8017e9a:	f7e8 fa05 	bl	80002a8 <__aeabi_dsub>
 8017e9e:	4602      	mov	r2, r0
 8017ea0:	460b      	mov	r3, r1
 8017ea2:	4640      	mov	r0, r8
 8017ea4:	4649      	mov	r1, r9
 8017ea6:	f7e8 f9ff 	bl	80002a8 <__aeabi_dsub>
 8017eaa:	9b00      	ldr	r3, [sp, #0]
 8017eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017eae:	3b01      	subs	r3, #1
 8017eb0:	4313      	orrs	r3, r2
 8017eb2:	4682      	mov	sl, r0
 8017eb4:	468b      	mov	fp, r1
 8017eb6:	f040 81f1 	bne.w	801829c <__ieee754_pow+0x6e4>
 8017eba:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8017f78 <__ieee754_pow+0x3c0>
 8017ebe:	eeb0 8a47 	vmov.f32	s16, s14
 8017ec2:	eef0 8a67 	vmov.f32	s17, s15
 8017ec6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017eca:	2600      	movs	r6, #0
 8017ecc:	4632      	mov	r2, r6
 8017ece:	463b      	mov	r3, r7
 8017ed0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017ed4:	f7e8 f9e8 	bl	80002a8 <__aeabi_dsub>
 8017ed8:	4622      	mov	r2, r4
 8017eda:	462b      	mov	r3, r5
 8017edc:	f7e8 fb9c 	bl	8000618 <__aeabi_dmul>
 8017ee0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017ee4:	4680      	mov	r8, r0
 8017ee6:	4689      	mov	r9, r1
 8017ee8:	4650      	mov	r0, sl
 8017eea:	4659      	mov	r1, fp
 8017eec:	f7e8 fb94 	bl	8000618 <__aeabi_dmul>
 8017ef0:	4602      	mov	r2, r0
 8017ef2:	460b      	mov	r3, r1
 8017ef4:	4640      	mov	r0, r8
 8017ef6:	4649      	mov	r1, r9
 8017ef8:	f7e8 f9d8 	bl	80002ac <__adddf3>
 8017efc:	4632      	mov	r2, r6
 8017efe:	463b      	mov	r3, r7
 8017f00:	4680      	mov	r8, r0
 8017f02:	4689      	mov	r9, r1
 8017f04:	4620      	mov	r0, r4
 8017f06:	4629      	mov	r1, r5
 8017f08:	f7e8 fb86 	bl	8000618 <__aeabi_dmul>
 8017f0c:	460b      	mov	r3, r1
 8017f0e:	4604      	mov	r4, r0
 8017f10:	460d      	mov	r5, r1
 8017f12:	4602      	mov	r2, r0
 8017f14:	4649      	mov	r1, r9
 8017f16:	4640      	mov	r0, r8
 8017f18:	f7e8 f9c8 	bl	80002ac <__adddf3>
 8017f1c:	4b1d      	ldr	r3, [pc, #116]	; (8017f94 <__ieee754_pow+0x3dc>)
 8017f1e:	4299      	cmp	r1, r3
 8017f20:	ec45 4b19 	vmov	d9, r4, r5
 8017f24:	4606      	mov	r6, r0
 8017f26:	460f      	mov	r7, r1
 8017f28:	468b      	mov	fp, r1
 8017f2a:	f340 82fe 	ble.w	801852a <__ieee754_pow+0x972>
 8017f2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8017f32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8017f36:	4303      	orrs	r3, r0
 8017f38:	f000 81f0 	beq.w	801831c <__ieee754_pow+0x764>
 8017f3c:	a310      	add	r3, pc, #64	; (adr r3, 8017f80 <__ieee754_pow+0x3c8>)
 8017f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f42:	ec51 0b18 	vmov	r0, r1, d8
 8017f46:	f7e8 fb67 	bl	8000618 <__aeabi_dmul>
 8017f4a:	a30d      	add	r3, pc, #52	; (adr r3, 8017f80 <__ieee754_pow+0x3c8>)
 8017f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f50:	e6cb      	b.n	8017cea <__ieee754_pow+0x132>
 8017f52:	bf00      	nop
 8017f54:	f3af 8000 	nop.w
 8017f58:	60000000 	.word	0x60000000
 8017f5c:	3ff71547 	.word	0x3ff71547
 8017f60:	f85ddf44 	.word	0xf85ddf44
 8017f64:	3e54ae0b 	.word	0x3e54ae0b
 8017f68:	55555555 	.word	0x55555555
 8017f6c:	3fd55555 	.word	0x3fd55555
 8017f70:	652b82fe 	.word	0x652b82fe
 8017f74:	3ff71547 	.word	0x3ff71547
 8017f78:	00000000 	.word	0x00000000
 8017f7c:	bff00000 	.word	0xbff00000
 8017f80:	8800759c 	.word	0x8800759c
 8017f84:	7e37e43c 	.word	0x7e37e43c
 8017f88:	3ff00000 	.word	0x3ff00000
 8017f8c:	3fd00000 	.word	0x3fd00000
 8017f90:	3fe00000 	.word	0x3fe00000
 8017f94:	408fffff 	.word	0x408fffff
 8017f98:	4bd7      	ldr	r3, [pc, #860]	; (80182f8 <__ieee754_pow+0x740>)
 8017f9a:	ea03 0309 	and.w	r3, r3, r9
 8017f9e:	2200      	movs	r2, #0
 8017fa0:	b92b      	cbnz	r3, 8017fae <__ieee754_pow+0x3f6>
 8017fa2:	4bd6      	ldr	r3, [pc, #856]	; (80182fc <__ieee754_pow+0x744>)
 8017fa4:	f7e8 fb38 	bl	8000618 <__aeabi_dmul>
 8017fa8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8017fac:	460c      	mov	r4, r1
 8017fae:	1523      	asrs	r3, r4, #20
 8017fb0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017fb4:	4413      	add	r3, r2
 8017fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8017fb8:	4bd1      	ldr	r3, [pc, #836]	; (8018300 <__ieee754_pow+0x748>)
 8017fba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8017fbe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8017fc2:	429c      	cmp	r4, r3
 8017fc4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8017fc8:	dd08      	ble.n	8017fdc <__ieee754_pow+0x424>
 8017fca:	4bce      	ldr	r3, [pc, #824]	; (8018304 <__ieee754_pow+0x74c>)
 8017fcc:	429c      	cmp	r4, r3
 8017fce:	f340 8163 	ble.w	8018298 <__ieee754_pow+0x6e0>
 8017fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fd4:	3301      	adds	r3, #1
 8017fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8017fd8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8017fdc:	2400      	movs	r4, #0
 8017fde:	00e3      	lsls	r3, r4, #3
 8017fe0:	930b      	str	r3, [sp, #44]	; 0x2c
 8017fe2:	4bc9      	ldr	r3, [pc, #804]	; (8018308 <__ieee754_pow+0x750>)
 8017fe4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017fe8:	ed93 7b00 	vldr	d7, [r3]
 8017fec:	4629      	mov	r1, r5
 8017fee:	ec53 2b17 	vmov	r2, r3, d7
 8017ff2:	eeb0 8a47 	vmov.f32	s16, s14
 8017ff6:	eef0 8a67 	vmov.f32	s17, s15
 8017ffa:	4682      	mov	sl, r0
 8017ffc:	f7e8 f954 	bl	80002a8 <__aeabi_dsub>
 8018000:	4652      	mov	r2, sl
 8018002:	4606      	mov	r6, r0
 8018004:	460f      	mov	r7, r1
 8018006:	462b      	mov	r3, r5
 8018008:	ec51 0b18 	vmov	r0, r1, d8
 801800c:	f7e8 f94e 	bl	80002ac <__adddf3>
 8018010:	4602      	mov	r2, r0
 8018012:	460b      	mov	r3, r1
 8018014:	2000      	movs	r0, #0
 8018016:	49bd      	ldr	r1, [pc, #756]	; (801830c <__ieee754_pow+0x754>)
 8018018:	f7e8 fc28 	bl	800086c <__aeabi_ddiv>
 801801c:	ec41 0b19 	vmov	d9, r0, r1
 8018020:	4602      	mov	r2, r0
 8018022:	460b      	mov	r3, r1
 8018024:	4630      	mov	r0, r6
 8018026:	4639      	mov	r1, r7
 8018028:	f7e8 faf6 	bl	8000618 <__aeabi_dmul>
 801802c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018030:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018034:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018038:	2300      	movs	r3, #0
 801803a:	9304      	str	r3, [sp, #16]
 801803c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8018040:	46ab      	mov	fp, r5
 8018042:	106d      	asrs	r5, r5, #1
 8018044:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8018048:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801804c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8018050:	2200      	movs	r2, #0
 8018052:	4640      	mov	r0, r8
 8018054:	4649      	mov	r1, r9
 8018056:	4614      	mov	r4, r2
 8018058:	461d      	mov	r5, r3
 801805a:	f7e8 fadd 	bl	8000618 <__aeabi_dmul>
 801805e:	4602      	mov	r2, r0
 8018060:	460b      	mov	r3, r1
 8018062:	4630      	mov	r0, r6
 8018064:	4639      	mov	r1, r7
 8018066:	f7e8 f91f 	bl	80002a8 <__aeabi_dsub>
 801806a:	ec53 2b18 	vmov	r2, r3, d8
 801806e:	4606      	mov	r6, r0
 8018070:	460f      	mov	r7, r1
 8018072:	4620      	mov	r0, r4
 8018074:	4629      	mov	r1, r5
 8018076:	f7e8 f917 	bl	80002a8 <__aeabi_dsub>
 801807a:	4602      	mov	r2, r0
 801807c:	460b      	mov	r3, r1
 801807e:	4650      	mov	r0, sl
 8018080:	4659      	mov	r1, fp
 8018082:	f7e8 f911 	bl	80002a8 <__aeabi_dsub>
 8018086:	4642      	mov	r2, r8
 8018088:	464b      	mov	r3, r9
 801808a:	f7e8 fac5 	bl	8000618 <__aeabi_dmul>
 801808e:	4602      	mov	r2, r0
 8018090:	460b      	mov	r3, r1
 8018092:	4630      	mov	r0, r6
 8018094:	4639      	mov	r1, r7
 8018096:	f7e8 f907 	bl	80002a8 <__aeabi_dsub>
 801809a:	ec53 2b19 	vmov	r2, r3, d9
 801809e:	f7e8 fabb 	bl	8000618 <__aeabi_dmul>
 80180a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80180a6:	ec41 0b18 	vmov	d8, r0, r1
 80180aa:	4610      	mov	r0, r2
 80180ac:	4619      	mov	r1, r3
 80180ae:	f7e8 fab3 	bl	8000618 <__aeabi_dmul>
 80180b2:	a37d      	add	r3, pc, #500	; (adr r3, 80182a8 <__ieee754_pow+0x6f0>)
 80180b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180b8:	4604      	mov	r4, r0
 80180ba:	460d      	mov	r5, r1
 80180bc:	f7e8 faac 	bl	8000618 <__aeabi_dmul>
 80180c0:	a37b      	add	r3, pc, #492	; (adr r3, 80182b0 <__ieee754_pow+0x6f8>)
 80180c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180c6:	f7e8 f8f1 	bl	80002ac <__adddf3>
 80180ca:	4622      	mov	r2, r4
 80180cc:	462b      	mov	r3, r5
 80180ce:	f7e8 faa3 	bl	8000618 <__aeabi_dmul>
 80180d2:	a379      	add	r3, pc, #484	; (adr r3, 80182b8 <__ieee754_pow+0x700>)
 80180d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180d8:	f7e8 f8e8 	bl	80002ac <__adddf3>
 80180dc:	4622      	mov	r2, r4
 80180de:	462b      	mov	r3, r5
 80180e0:	f7e8 fa9a 	bl	8000618 <__aeabi_dmul>
 80180e4:	a376      	add	r3, pc, #472	; (adr r3, 80182c0 <__ieee754_pow+0x708>)
 80180e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180ea:	f7e8 f8df 	bl	80002ac <__adddf3>
 80180ee:	4622      	mov	r2, r4
 80180f0:	462b      	mov	r3, r5
 80180f2:	f7e8 fa91 	bl	8000618 <__aeabi_dmul>
 80180f6:	a374      	add	r3, pc, #464	; (adr r3, 80182c8 <__ieee754_pow+0x710>)
 80180f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180fc:	f7e8 f8d6 	bl	80002ac <__adddf3>
 8018100:	4622      	mov	r2, r4
 8018102:	462b      	mov	r3, r5
 8018104:	f7e8 fa88 	bl	8000618 <__aeabi_dmul>
 8018108:	a371      	add	r3, pc, #452	; (adr r3, 80182d0 <__ieee754_pow+0x718>)
 801810a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801810e:	f7e8 f8cd 	bl	80002ac <__adddf3>
 8018112:	4622      	mov	r2, r4
 8018114:	4606      	mov	r6, r0
 8018116:	460f      	mov	r7, r1
 8018118:	462b      	mov	r3, r5
 801811a:	4620      	mov	r0, r4
 801811c:	4629      	mov	r1, r5
 801811e:	f7e8 fa7b 	bl	8000618 <__aeabi_dmul>
 8018122:	4602      	mov	r2, r0
 8018124:	460b      	mov	r3, r1
 8018126:	4630      	mov	r0, r6
 8018128:	4639      	mov	r1, r7
 801812a:	f7e8 fa75 	bl	8000618 <__aeabi_dmul>
 801812e:	4642      	mov	r2, r8
 8018130:	4604      	mov	r4, r0
 8018132:	460d      	mov	r5, r1
 8018134:	464b      	mov	r3, r9
 8018136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801813a:	f7e8 f8b7 	bl	80002ac <__adddf3>
 801813e:	ec53 2b18 	vmov	r2, r3, d8
 8018142:	f7e8 fa69 	bl	8000618 <__aeabi_dmul>
 8018146:	4622      	mov	r2, r4
 8018148:	462b      	mov	r3, r5
 801814a:	f7e8 f8af 	bl	80002ac <__adddf3>
 801814e:	4642      	mov	r2, r8
 8018150:	4682      	mov	sl, r0
 8018152:	468b      	mov	fp, r1
 8018154:	464b      	mov	r3, r9
 8018156:	4640      	mov	r0, r8
 8018158:	4649      	mov	r1, r9
 801815a:	f7e8 fa5d 	bl	8000618 <__aeabi_dmul>
 801815e:	4b6c      	ldr	r3, [pc, #432]	; (8018310 <__ieee754_pow+0x758>)
 8018160:	2200      	movs	r2, #0
 8018162:	4606      	mov	r6, r0
 8018164:	460f      	mov	r7, r1
 8018166:	f7e8 f8a1 	bl	80002ac <__adddf3>
 801816a:	4652      	mov	r2, sl
 801816c:	465b      	mov	r3, fp
 801816e:	f7e8 f89d 	bl	80002ac <__adddf3>
 8018172:	9c04      	ldr	r4, [sp, #16]
 8018174:	460d      	mov	r5, r1
 8018176:	4622      	mov	r2, r4
 8018178:	460b      	mov	r3, r1
 801817a:	4640      	mov	r0, r8
 801817c:	4649      	mov	r1, r9
 801817e:	f7e8 fa4b 	bl	8000618 <__aeabi_dmul>
 8018182:	4b63      	ldr	r3, [pc, #396]	; (8018310 <__ieee754_pow+0x758>)
 8018184:	4680      	mov	r8, r0
 8018186:	4689      	mov	r9, r1
 8018188:	2200      	movs	r2, #0
 801818a:	4620      	mov	r0, r4
 801818c:	4629      	mov	r1, r5
 801818e:	f7e8 f88b 	bl	80002a8 <__aeabi_dsub>
 8018192:	4632      	mov	r2, r6
 8018194:	463b      	mov	r3, r7
 8018196:	f7e8 f887 	bl	80002a8 <__aeabi_dsub>
 801819a:	4602      	mov	r2, r0
 801819c:	460b      	mov	r3, r1
 801819e:	4650      	mov	r0, sl
 80181a0:	4659      	mov	r1, fp
 80181a2:	f7e8 f881 	bl	80002a8 <__aeabi_dsub>
 80181a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80181aa:	f7e8 fa35 	bl	8000618 <__aeabi_dmul>
 80181ae:	4622      	mov	r2, r4
 80181b0:	4606      	mov	r6, r0
 80181b2:	460f      	mov	r7, r1
 80181b4:	462b      	mov	r3, r5
 80181b6:	ec51 0b18 	vmov	r0, r1, d8
 80181ba:	f7e8 fa2d 	bl	8000618 <__aeabi_dmul>
 80181be:	4602      	mov	r2, r0
 80181c0:	460b      	mov	r3, r1
 80181c2:	4630      	mov	r0, r6
 80181c4:	4639      	mov	r1, r7
 80181c6:	f7e8 f871 	bl	80002ac <__adddf3>
 80181ca:	4606      	mov	r6, r0
 80181cc:	460f      	mov	r7, r1
 80181ce:	4602      	mov	r2, r0
 80181d0:	460b      	mov	r3, r1
 80181d2:	4640      	mov	r0, r8
 80181d4:	4649      	mov	r1, r9
 80181d6:	f7e8 f869 	bl	80002ac <__adddf3>
 80181da:	9c04      	ldr	r4, [sp, #16]
 80181dc:	a33e      	add	r3, pc, #248	; (adr r3, 80182d8 <__ieee754_pow+0x720>)
 80181de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181e2:	4620      	mov	r0, r4
 80181e4:	460d      	mov	r5, r1
 80181e6:	f7e8 fa17 	bl	8000618 <__aeabi_dmul>
 80181ea:	4642      	mov	r2, r8
 80181ec:	ec41 0b18 	vmov	d8, r0, r1
 80181f0:	464b      	mov	r3, r9
 80181f2:	4620      	mov	r0, r4
 80181f4:	4629      	mov	r1, r5
 80181f6:	f7e8 f857 	bl	80002a8 <__aeabi_dsub>
 80181fa:	4602      	mov	r2, r0
 80181fc:	460b      	mov	r3, r1
 80181fe:	4630      	mov	r0, r6
 8018200:	4639      	mov	r1, r7
 8018202:	f7e8 f851 	bl	80002a8 <__aeabi_dsub>
 8018206:	a336      	add	r3, pc, #216	; (adr r3, 80182e0 <__ieee754_pow+0x728>)
 8018208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801820c:	f7e8 fa04 	bl	8000618 <__aeabi_dmul>
 8018210:	a335      	add	r3, pc, #212	; (adr r3, 80182e8 <__ieee754_pow+0x730>)
 8018212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018216:	4606      	mov	r6, r0
 8018218:	460f      	mov	r7, r1
 801821a:	4620      	mov	r0, r4
 801821c:	4629      	mov	r1, r5
 801821e:	f7e8 f9fb 	bl	8000618 <__aeabi_dmul>
 8018222:	4602      	mov	r2, r0
 8018224:	460b      	mov	r3, r1
 8018226:	4630      	mov	r0, r6
 8018228:	4639      	mov	r1, r7
 801822a:	f7e8 f83f 	bl	80002ac <__adddf3>
 801822e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018230:	4b38      	ldr	r3, [pc, #224]	; (8018314 <__ieee754_pow+0x75c>)
 8018232:	4413      	add	r3, r2
 8018234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018238:	f7e8 f838 	bl	80002ac <__adddf3>
 801823c:	4682      	mov	sl, r0
 801823e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018240:	468b      	mov	fp, r1
 8018242:	f7e8 f97f 	bl	8000544 <__aeabi_i2d>
 8018246:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018248:	4b33      	ldr	r3, [pc, #204]	; (8018318 <__ieee754_pow+0x760>)
 801824a:	4413      	add	r3, r2
 801824c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018250:	4606      	mov	r6, r0
 8018252:	460f      	mov	r7, r1
 8018254:	4652      	mov	r2, sl
 8018256:	465b      	mov	r3, fp
 8018258:	ec51 0b18 	vmov	r0, r1, d8
 801825c:	f7e8 f826 	bl	80002ac <__adddf3>
 8018260:	4642      	mov	r2, r8
 8018262:	464b      	mov	r3, r9
 8018264:	f7e8 f822 	bl	80002ac <__adddf3>
 8018268:	4632      	mov	r2, r6
 801826a:	463b      	mov	r3, r7
 801826c:	f7e8 f81e 	bl	80002ac <__adddf3>
 8018270:	9c04      	ldr	r4, [sp, #16]
 8018272:	4632      	mov	r2, r6
 8018274:	463b      	mov	r3, r7
 8018276:	4620      	mov	r0, r4
 8018278:	460d      	mov	r5, r1
 801827a:	f7e8 f815 	bl	80002a8 <__aeabi_dsub>
 801827e:	4642      	mov	r2, r8
 8018280:	464b      	mov	r3, r9
 8018282:	f7e8 f811 	bl	80002a8 <__aeabi_dsub>
 8018286:	ec53 2b18 	vmov	r2, r3, d8
 801828a:	f7e8 f80d 	bl	80002a8 <__aeabi_dsub>
 801828e:	4602      	mov	r2, r0
 8018290:	460b      	mov	r3, r1
 8018292:	4650      	mov	r0, sl
 8018294:	4659      	mov	r1, fp
 8018296:	e606      	b.n	8017ea6 <__ieee754_pow+0x2ee>
 8018298:	2401      	movs	r4, #1
 801829a:	e6a0      	b.n	8017fde <__ieee754_pow+0x426>
 801829c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80182f0 <__ieee754_pow+0x738>
 80182a0:	e60d      	b.n	8017ebe <__ieee754_pow+0x306>
 80182a2:	bf00      	nop
 80182a4:	f3af 8000 	nop.w
 80182a8:	4a454eef 	.word	0x4a454eef
 80182ac:	3fca7e28 	.word	0x3fca7e28
 80182b0:	93c9db65 	.word	0x93c9db65
 80182b4:	3fcd864a 	.word	0x3fcd864a
 80182b8:	a91d4101 	.word	0xa91d4101
 80182bc:	3fd17460 	.word	0x3fd17460
 80182c0:	518f264d 	.word	0x518f264d
 80182c4:	3fd55555 	.word	0x3fd55555
 80182c8:	db6fabff 	.word	0xdb6fabff
 80182cc:	3fdb6db6 	.word	0x3fdb6db6
 80182d0:	33333303 	.word	0x33333303
 80182d4:	3fe33333 	.word	0x3fe33333
 80182d8:	e0000000 	.word	0xe0000000
 80182dc:	3feec709 	.word	0x3feec709
 80182e0:	dc3a03fd 	.word	0xdc3a03fd
 80182e4:	3feec709 	.word	0x3feec709
 80182e8:	145b01f5 	.word	0x145b01f5
 80182ec:	be3e2fe0 	.word	0xbe3e2fe0
 80182f0:	00000000 	.word	0x00000000
 80182f4:	3ff00000 	.word	0x3ff00000
 80182f8:	7ff00000 	.word	0x7ff00000
 80182fc:	43400000 	.word	0x43400000
 8018300:	0003988e 	.word	0x0003988e
 8018304:	000bb679 	.word	0x000bb679
 8018308:	0801c098 	.word	0x0801c098
 801830c:	3ff00000 	.word	0x3ff00000
 8018310:	40080000 	.word	0x40080000
 8018314:	0801c0b8 	.word	0x0801c0b8
 8018318:	0801c0a8 	.word	0x0801c0a8
 801831c:	a3b5      	add	r3, pc, #724	; (adr r3, 80185f4 <__ieee754_pow+0xa3c>)
 801831e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018322:	4640      	mov	r0, r8
 8018324:	4649      	mov	r1, r9
 8018326:	f7e7 ffc1 	bl	80002ac <__adddf3>
 801832a:	4622      	mov	r2, r4
 801832c:	ec41 0b1a 	vmov	d10, r0, r1
 8018330:	462b      	mov	r3, r5
 8018332:	4630      	mov	r0, r6
 8018334:	4639      	mov	r1, r7
 8018336:	f7e7 ffb7 	bl	80002a8 <__aeabi_dsub>
 801833a:	4602      	mov	r2, r0
 801833c:	460b      	mov	r3, r1
 801833e:	ec51 0b1a 	vmov	r0, r1, d10
 8018342:	f7e8 fbf9 	bl	8000b38 <__aeabi_dcmpgt>
 8018346:	2800      	cmp	r0, #0
 8018348:	f47f adf8 	bne.w	8017f3c <__ieee754_pow+0x384>
 801834c:	4aa4      	ldr	r2, [pc, #656]	; (80185e0 <__ieee754_pow+0xa28>)
 801834e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018352:	4293      	cmp	r3, r2
 8018354:	f340 810b 	ble.w	801856e <__ieee754_pow+0x9b6>
 8018358:	151b      	asrs	r3, r3, #20
 801835a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801835e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8018362:	fa4a f303 	asr.w	r3, sl, r3
 8018366:	445b      	add	r3, fp
 8018368:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801836c:	4e9d      	ldr	r6, [pc, #628]	; (80185e4 <__ieee754_pow+0xa2c>)
 801836e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8018372:	4116      	asrs	r6, r2
 8018374:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8018378:	2000      	movs	r0, #0
 801837a:	ea23 0106 	bic.w	r1, r3, r6
 801837e:	f1c2 0214 	rsb	r2, r2, #20
 8018382:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8018386:	fa4a fa02 	asr.w	sl, sl, r2
 801838a:	f1bb 0f00 	cmp.w	fp, #0
 801838e:	4602      	mov	r2, r0
 8018390:	460b      	mov	r3, r1
 8018392:	4620      	mov	r0, r4
 8018394:	4629      	mov	r1, r5
 8018396:	bfb8      	it	lt
 8018398:	f1ca 0a00 	rsblt	sl, sl, #0
 801839c:	f7e7 ff84 	bl	80002a8 <__aeabi_dsub>
 80183a0:	ec41 0b19 	vmov	d9, r0, r1
 80183a4:	4642      	mov	r2, r8
 80183a6:	464b      	mov	r3, r9
 80183a8:	ec51 0b19 	vmov	r0, r1, d9
 80183ac:	f7e7 ff7e 	bl	80002ac <__adddf3>
 80183b0:	2400      	movs	r4, #0
 80183b2:	a379      	add	r3, pc, #484	; (adr r3, 8018598 <__ieee754_pow+0x9e0>)
 80183b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183b8:	4620      	mov	r0, r4
 80183ba:	460d      	mov	r5, r1
 80183bc:	f7e8 f92c 	bl	8000618 <__aeabi_dmul>
 80183c0:	ec53 2b19 	vmov	r2, r3, d9
 80183c4:	4606      	mov	r6, r0
 80183c6:	460f      	mov	r7, r1
 80183c8:	4620      	mov	r0, r4
 80183ca:	4629      	mov	r1, r5
 80183cc:	f7e7 ff6c 	bl	80002a8 <__aeabi_dsub>
 80183d0:	4602      	mov	r2, r0
 80183d2:	460b      	mov	r3, r1
 80183d4:	4640      	mov	r0, r8
 80183d6:	4649      	mov	r1, r9
 80183d8:	f7e7 ff66 	bl	80002a8 <__aeabi_dsub>
 80183dc:	a370      	add	r3, pc, #448	; (adr r3, 80185a0 <__ieee754_pow+0x9e8>)
 80183de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183e2:	f7e8 f919 	bl	8000618 <__aeabi_dmul>
 80183e6:	a370      	add	r3, pc, #448	; (adr r3, 80185a8 <__ieee754_pow+0x9f0>)
 80183e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183ec:	4680      	mov	r8, r0
 80183ee:	4689      	mov	r9, r1
 80183f0:	4620      	mov	r0, r4
 80183f2:	4629      	mov	r1, r5
 80183f4:	f7e8 f910 	bl	8000618 <__aeabi_dmul>
 80183f8:	4602      	mov	r2, r0
 80183fa:	460b      	mov	r3, r1
 80183fc:	4640      	mov	r0, r8
 80183fe:	4649      	mov	r1, r9
 8018400:	f7e7 ff54 	bl	80002ac <__adddf3>
 8018404:	4604      	mov	r4, r0
 8018406:	460d      	mov	r5, r1
 8018408:	4602      	mov	r2, r0
 801840a:	460b      	mov	r3, r1
 801840c:	4630      	mov	r0, r6
 801840e:	4639      	mov	r1, r7
 8018410:	f7e7 ff4c 	bl	80002ac <__adddf3>
 8018414:	4632      	mov	r2, r6
 8018416:	463b      	mov	r3, r7
 8018418:	4680      	mov	r8, r0
 801841a:	4689      	mov	r9, r1
 801841c:	f7e7 ff44 	bl	80002a8 <__aeabi_dsub>
 8018420:	4602      	mov	r2, r0
 8018422:	460b      	mov	r3, r1
 8018424:	4620      	mov	r0, r4
 8018426:	4629      	mov	r1, r5
 8018428:	f7e7 ff3e 	bl	80002a8 <__aeabi_dsub>
 801842c:	4642      	mov	r2, r8
 801842e:	4606      	mov	r6, r0
 8018430:	460f      	mov	r7, r1
 8018432:	464b      	mov	r3, r9
 8018434:	4640      	mov	r0, r8
 8018436:	4649      	mov	r1, r9
 8018438:	f7e8 f8ee 	bl	8000618 <__aeabi_dmul>
 801843c:	a35c      	add	r3, pc, #368	; (adr r3, 80185b0 <__ieee754_pow+0x9f8>)
 801843e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018442:	4604      	mov	r4, r0
 8018444:	460d      	mov	r5, r1
 8018446:	f7e8 f8e7 	bl	8000618 <__aeabi_dmul>
 801844a:	a35b      	add	r3, pc, #364	; (adr r3, 80185b8 <__ieee754_pow+0xa00>)
 801844c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018450:	f7e7 ff2a 	bl	80002a8 <__aeabi_dsub>
 8018454:	4622      	mov	r2, r4
 8018456:	462b      	mov	r3, r5
 8018458:	f7e8 f8de 	bl	8000618 <__aeabi_dmul>
 801845c:	a358      	add	r3, pc, #352	; (adr r3, 80185c0 <__ieee754_pow+0xa08>)
 801845e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018462:	f7e7 ff23 	bl	80002ac <__adddf3>
 8018466:	4622      	mov	r2, r4
 8018468:	462b      	mov	r3, r5
 801846a:	f7e8 f8d5 	bl	8000618 <__aeabi_dmul>
 801846e:	a356      	add	r3, pc, #344	; (adr r3, 80185c8 <__ieee754_pow+0xa10>)
 8018470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018474:	f7e7 ff18 	bl	80002a8 <__aeabi_dsub>
 8018478:	4622      	mov	r2, r4
 801847a:	462b      	mov	r3, r5
 801847c:	f7e8 f8cc 	bl	8000618 <__aeabi_dmul>
 8018480:	a353      	add	r3, pc, #332	; (adr r3, 80185d0 <__ieee754_pow+0xa18>)
 8018482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018486:	f7e7 ff11 	bl	80002ac <__adddf3>
 801848a:	4622      	mov	r2, r4
 801848c:	462b      	mov	r3, r5
 801848e:	f7e8 f8c3 	bl	8000618 <__aeabi_dmul>
 8018492:	4602      	mov	r2, r0
 8018494:	460b      	mov	r3, r1
 8018496:	4640      	mov	r0, r8
 8018498:	4649      	mov	r1, r9
 801849a:	f7e7 ff05 	bl	80002a8 <__aeabi_dsub>
 801849e:	4604      	mov	r4, r0
 80184a0:	460d      	mov	r5, r1
 80184a2:	4602      	mov	r2, r0
 80184a4:	460b      	mov	r3, r1
 80184a6:	4640      	mov	r0, r8
 80184a8:	4649      	mov	r1, r9
 80184aa:	f7e8 f8b5 	bl	8000618 <__aeabi_dmul>
 80184ae:	2200      	movs	r2, #0
 80184b0:	ec41 0b19 	vmov	d9, r0, r1
 80184b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80184b8:	4620      	mov	r0, r4
 80184ba:	4629      	mov	r1, r5
 80184bc:	f7e7 fef4 	bl	80002a8 <__aeabi_dsub>
 80184c0:	4602      	mov	r2, r0
 80184c2:	460b      	mov	r3, r1
 80184c4:	ec51 0b19 	vmov	r0, r1, d9
 80184c8:	f7e8 f9d0 	bl	800086c <__aeabi_ddiv>
 80184cc:	4632      	mov	r2, r6
 80184ce:	4604      	mov	r4, r0
 80184d0:	460d      	mov	r5, r1
 80184d2:	463b      	mov	r3, r7
 80184d4:	4640      	mov	r0, r8
 80184d6:	4649      	mov	r1, r9
 80184d8:	f7e8 f89e 	bl	8000618 <__aeabi_dmul>
 80184dc:	4632      	mov	r2, r6
 80184de:	463b      	mov	r3, r7
 80184e0:	f7e7 fee4 	bl	80002ac <__adddf3>
 80184e4:	4602      	mov	r2, r0
 80184e6:	460b      	mov	r3, r1
 80184e8:	4620      	mov	r0, r4
 80184ea:	4629      	mov	r1, r5
 80184ec:	f7e7 fedc 	bl	80002a8 <__aeabi_dsub>
 80184f0:	4642      	mov	r2, r8
 80184f2:	464b      	mov	r3, r9
 80184f4:	f7e7 fed8 	bl	80002a8 <__aeabi_dsub>
 80184f8:	460b      	mov	r3, r1
 80184fa:	4602      	mov	r2, r0
 80184fc:	493a      	ldr	r1, [pc, #232]	; (80185e8 <__ieee754_pow+0xa30>)
 80184fe:	2000      	movs	r0, #0
 8018500:	f7e7 fed2 	bl	80002a8 <__aeabi_dsub>
 8018504:	e9cd 0100 	strd	r0, r1, [sp]
 8018508:	9b01      	ldr	r3, [sp, #4]
 801850a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801850e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018512:	da2f      	bge.n	8018574 <__ieee754_pow+0x9bc>
 8018514:	4650      	mov	r0, sl
 8018516:	ed9d 0b00 	vldr	d0, [sp]
 801851a:	f000 f9cd 	bl	80188b8 <scalbn>
 801851e:	ec51 0b10 	vmov	r0, r1, d0
 8018522:	ec53 2b18 	vmov	r2, r3, d8
 8018526:	f7ff bbe0 	b.w	8017cea <__ieee754_pow+0x132>
 801852a:	4b30      	ldr	r3, [pc, #192]	; (80185ec <__ieee754_pow+0xa34>)
 801852c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8018530:	429e      	cmp	r6, r3
 8018532:	f77f af0b 	ble.w	801834c <__ieee754_pow+0x794>
 8018536:	4b2e      	ldr	r3, [pc, #184]	; (80185f0 <__ieee754_pow+0xa38>)
 8018538:	440b      	add	r3, r1
 801853a:	4303      	orrs	r3, r0
 801853c:	d00b      	beq.n	8018556 <__ieee754_pow+0x99e>
 801853e:	a326      	add	r3, pc, #152	; (adr r3, 80185d8 <__ieee754_pow+0xa20>)
 8018540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018544:	ec51 0b18 	vmov	r0, r1, d8
 8018548:	f7e8 f866 	bl	8000618 <__aeabi_dmul>
 801854c:	a322      	add	r3, pc, #136	; (adr r3, 80185d8 <__ieee754_pow+0xa20>)
 801854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018552:	f7ff bbca 	b.w	8017cea <__ieee754_pow+0x132>
 8018556:	4622      	mov	r2, r4
 8018558:	462b      	mov	r3, r5
 801855a:	f7e7 fea5 	bl	80002a8 <__aeabi_dsub>
 801855e:	4642      	mov	r2, r8
 8018560:	464b      	mov	r3, r9
 8018562:	f7e8 fadf 	bl	8000b24 <__aeabi_dcmpge>
 8018566:	2800      	cmp	r0, #0
 8018568:	f43f aef0 	beq.w	801834c <__ieee754_pow+0x794>
 801856c:	e7e7      	b.n	801853e <__ieee754_pow+0x986>
 801856e:	f04f 0a00 	mov.w	sl, #0
 8018572:	e717      	b.n	80183a4 <__ieee754_pow+0x7ec>
 8018574:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018578:	4619      	mov	r1, r3
 801857a:	e7d2      	b.n	8018522 <__ieee754_pow+0x96a>
 801857c:	491a      	ldr	r1, [pc, #104]	; (80185e8 <__ieee754_pow+0xa30>)
 801857e:	2000      	movs	r0, #0
 8018580:	f7ff bb9e 	b.w	8017cc0 <__ieee754_pow+0x108>
 8018584:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018588:	f7ff bb9a 	b.w	8017cc0 <__ieee754_pow+0x108>
 801858c:	9000      	str	r0, [sp, #0]
 801858e:	f7ff bb76 	b.w	8017c7e <__ieee754_pow+0xc6>
 8018592:	2100      	movs	r1, #0
 8018594:	f7ff bb60 	b.w	8017c58 <__ieee754_pow+0xa0>
 8018598:	00000000 	.word	0x00000000
 801859c:	3fe62e43 	.word	0x3fe62e43
 80185a0:	fefa39ef 	.word	0xfefa39ef
 80185a4:	3fe62e42 	.word	0x3fe62e42
 80185a8:	0ca86c39 	.word	0x0ca86c39
 80185ac:	be205c61 	.word	0xbe205c61
 80185b0:	72bea4d0 	.word	0x72bea4d0
 80185b4:	3e663769 	.word	0x3e663769
 80185b8:	c5d26bf1 	.word	0xc5d26bf1
 80185bc:	3ebbbd41 	.word	0x3ebbbd41
 80185c0:	af25de2c 	.word	0xaf25de2c
 80185c4:	3f11566a 	.word	0x3f11566a
 80185c8:	16bebd93 	.word	0x16bebd93
 80185cc:	3f66c16c 	.word	0x3f66c16c
 80185d0:	5555553e 	.word	0x5555553e
 80185d4:	3fc55555 	.word	0x3fc55555
 80185d8:	c2f8f359 	.word	0xc2f8f359
 80185dc:	01a56e1f 	.word	0x01a56e1f
 80185e0:	3fe00000 	.word	0x3fe00000
 80185e4:	000fffff 	.word	0x000fffff
 80185e8:	3ff00000 	.word	0x3ff00000
 80185ec:	4090cbff 	.word	0x4090cbff
 80185f0:	3f6f3400 	.word	0x3f6f3400
 80185f4:	652b82fe 	.word	0x652b82fe
 80185f8:	3c971547 	.word	0x3c971547

080185fc <__ieee754_sqrt>:
 80185fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018600:	ec55 4b10 	vmov	r4, r5, d0
 8018604:	4e56      	ldr	r6, [pc, #344]	; (8018760 <__ieee754_sqrt+0x164>)
 8018606:	43ae      	bics	r6, r5
 8018608:	ee10 0a10 	vmov	r0, s0
 801860c:	ee10 3a10 	vmov	r3, s0
 8018610:	4629      	mov	r1, r5
 8018612:	462a      	mov	r2, r5
 8018614:	d110      	bne.n	8018638 <__ieee754_sqrt+0x3c>
 8018616:	ee10 2a10 	vmov	r2, s0
 801861a:	462b      	mov	r3, r5
 801861c:	f7e7 fffc 	bl	8000618 <__aeabi_dmul>
 8018620:	4602      	mov	r2, r0
 8018622:	460b      	mov	r3, r1
 8018624:	4620      	mov	r0, r4
 8018626:	4629      	mov	r1, r5
 8018628:	f7e7 fe40 	bl	80002ac <__adddf3>
 801862c:	4604      	mov	r4, r0
 801862e:	460d      	mov	r5, r1
 8018630:	ec45 4b10 	vmov	d0, r4, r5
 8018634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018638:	2d00      	cmp	r5, #0
 801863a:	dc10      	bgt.n	801865e <__ieee754_sqrt+0x62>
 801863c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018640:	4330      	orrs	r0, r6
 8018642:	d0f5      	beq.n	8018630 <__ieee754_sqrt+0x34>
 8018644:	b15d      	cbz	r5, 801865e <__ieee754_sqrt+0x62>
 8018646:	ee10 2a10 	vmov	r2, s0
 801864a:	462b      	mov	r3, r5
 801864c:	ee10 0a10 	vmov	r0, s0
 8018650:	f7e7 fe2a 	bl	80002a8 <__aeabi_dsub>
 8018654:	4602      	mov	r2, r0
 8018656:	460b      	mov	r3, r1
 8018658:	f7e8 f908 	bl	800086c <__aeabi_ddiv>
 801865c:	e7e6      	b.n	801862c <__ieee754_sqrt+0x30>
 801865e:	1509      	asrs	r1, r1, #20
 8018660:	d076      	beq.n	8018750 <__ieee754_sqrt+0x154>
 8018662:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8018666:	07ce      	lsls	r6, r1, #31
 8018668:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801866c:	bf5e      	ittt	pl
 801866e:	0fda      	lsrpl	r2, r3, #31
 8018670:	005b      	lslpl	r3, r3, #1
 8018672:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8018676:	0fda      	lsrs	r2, r3, #31
 8018678:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801867c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8018680:	2000      	movs	r0, #0
 8018682:	106d      	asrs	r5, r5, #1
 8018684:	005b      	lsls	r3, r3, #1
 8018686:	f04f 0e16 	mov.w	lr, #22
 801868a:	4684      	mov	ip, r0
 801868c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8018690:	eb0c 0401 	add.w	r4, ip, r1
 8018694:	4294      	cmp	r4, r2
 8018696:	bfde      	ittt	le
 8018698:	1b12      	suble	r2, r2, r4
 801869a:	eb04 0c01 	addle.w	ip, r4, r1
 801869e:	1840      	addle	r0, r0, r1
 80186a0:	0052      	lsls	r2, r2, #1
 80186a2:	f1be 0e01 	subs.w	lr, lr, #1
 80186a6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80186aa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80186ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80186b2:	d1ed      	bne.n	8018690 <__ieee754_sqrt+0x94>
 80186b4:	4671      	mov	r1, lr
 80186b6:	2720      	movs	r7, #32
 80186b8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80186bc:	4562      	cmp	r2, ip
 80186be:	eb04 060e 	add.w	r6, r4, lr
 80186c2:	dc02      	bgt.n	80186ca <__ieee754_sqrt+0xce>
 80186c4:	d113      	bne.n	80186ee <__ieee754_sqrt+0xf2>
 80186c6:	429e      	cmp	r6, r3
 80186c8:	d811      	bhi.n	80186ee <__ieee754_sqrt+0xf2>
 80186ca:	2e00      	cmp	r6, #0
 80186cc:	eb06 0e04 	add.w	lr, r6, r4
 80186d0:	da43      	bge.n	801875a <__ieee754_sqrt+0x15e>
 80186d2:	f1be 0f00 	cmp.w	lr, #0
 80186d6:	db40      	blt.n	801875a <__ieee754_sqrt+0x15e>
 80186d8:	f10c 0801 	add.w	r8, ip, #1
 80186dc:	eba2 020c 	sub.w	r2, r2, ip
 80186e0:	429e      	cmp	r6, r3
 80186e2:	bf88      	it	hi
 80186e4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80186e8:	1b9b      	subs	r3, r3, r6
 80186ea:	4421      	add	r1, r4
 80186ec:	46c4      	mov	ip, r8
 80186ee:	0052      	lsls	r2, r2, #1
 80186f0:	3f01      	subs	r7, #1
 80186f2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80186f6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80186fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80186fe:	d1dd      	bne.n	80186bc <__ieee754_sqrt+0xc0>
 8018700:	4313      	orrs	r3, r2
 8018702:	d006      	beq.n	8018712 <__ieee754_sqrt+0x116>
 8018704:	1c4c      	adds	r4, r1, #1
 8018706:	bf13      	iteet	ne
 8018708:	3101      	addne	r1, #1
 801870a:	3001      	addeq	r0, #1
 801870c:	4639      	moveq	r1, r7
 801870e:	f021 0101 	bicne.w	r1, r1, #1
 8018712:	1043      	asrs	r3, r0, #1
 8018714:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8018718:	0849      	lsrs	r1, r1, #1
 801871a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801871e:	07c2      	lsls	r2, r0, #31
 8018720:	bf48      	it	mi
 8018722:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8018726:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801872a:	460c      	mov	r4, r1
 801872c:	463d      	mov	r5, r7
 801872e:	e77f      	b.n	8018630 <__ieee754_sqrt+0x34>
 8018730:	0ada      	lsrs	r2, r3, #11
 8018732:	3815      	subs	r0, #21
 8018734:	055b      	lsls	r3, r3, #21
 8018736:	2a00      	cmp	r2, #0
 8018738:	d0fa      	beq.n	8018730 <__ieee754_sqrt+0x134>
 801873a:	02d7      	lsls	r7, r2, #11
 801873c:	d50a      	bpl.n	8018754 <__ieee754_sqrt+0x158>
 801873e:	f1c1 0420 	rsb	r4, r1, #32
 8018742:	fa23 f404 	lsr.w	r4, r3, r4
 8018746:	1e4d      	subs	r5, r1, #1
 8018748:	408b      	lsls	r3, r1
 801874a:	4322      	orrs	r2, r4
 801874c:	1b41      	subs	r1, r0, r5
 801874e:	e788      	b.n	8018662 <__ieee754_sqrt+0x66>
 8018750:	4608      	mov	r0, r1
 8018752:	e7f0      	b.n	8018736 <__ieee754_sqrt+0x13a>
 8018754:	0052      	lsls	r2, r2, #1
 8018756:	3101      	adds	r1, #1
 8018758:	e7ef      	b.n	801873a <__ieee754_sqrt+0x13e>
 801875a:	46e0      	mov	r8, ip
 801875c:	e7be      	b.n	80186dc <__ieee754_sqrt+0xe0>
 801875e:	bf00      	nop
 8018760:	7ff00000 	.word	0x7ff00000

08018764 <fabs>:
 8018764:	ec51 0b10 	vmov	r0, r1, d0
 8018768:	ee10 2a10 	vmov	r2, s0
 801876c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018770:	ec43 2b10 	vmov	d0, r2, r3
 8018774:	4770      	bx	lr

08018776 <finite>:
 8018776:	b082      	sub	sp, #8
 8018778:	ed8d 0b00 	vstr	d0, [sp]
 801877c:	9801      	ldr	r0, [sp, #4]
 801877e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8018782:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8018786:	0fc0      	lsrs	r0, r0, #31
 8018788:	b002      	add	sp, #8
 801878a:	4770      	bx	lr
 801878c:	0000      	movs	r0, r0
	...

08018790 <nan>:
 8018790:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018798 <nan+0x8>
 8018794:	4770      	bx	lr
 8018796:	bf00      	nop
 8018798:	00000000 	.word	0x00000000
 801879c:	7ff80000 	.word	0x7ff80000

080187a0 <rint>:
 80187a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80187a2:	ec51 0b10 	vmov	r0, r1, d0
 80187a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80187aa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80187ae:	2e13      	cmp	r6, #19
 80187b0:	ee10 4a10 	vmov	r4, s0
 80187b4:	460b      	mov	r3, r1
 80187b6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80187ba:	dc58      	bgt.n	801886e <rint+0xce>
 80187bc:	2e00      	cmp	r6, #0
 80187be:	da2b      	bge.n	8018818 <rint+0x78>
 80187c0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80187c4:	4302      	orrs	r2, r0
 80187c6:	d023      	beq.n	8018810 <rint+0x70>
 80187c8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80187cc:	4302      	orrs	r2, r0
 80187ce:	4254      	negs	r4, r2
 80187d0:	4314      	orrs	r4, r2
 80187d2:	0c4b      	lsrs	r3, r1, #17
 80187d4:	0b24      	lsrs	r4, r4, #12
 80187d6:	045b      	lsls	r3, r3, #17
 80187d8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80187dc:	ea44 0103 	orr.w	r1, r4, r3
 80187e0:	4b32      	ldr	r3, [pc, #200]	; (80188ac <rint+0x10c>)
 80187e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80187e6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80187ea:	4602      	mov	r2, r0
 80187ec:	460b      	mov	r3, r1
 80187ee:	4630      	mov	r0, r6
 80187f0:	4639      	mov	r1, r7
 80187f2:	f7e7 fd5b 	bl	80002ac <__adddf3>
 80187f6:	e9cd 0100 	strd	r0, r1, [sp]
 80187fa:	463b      	mov	r3, r7
 80187fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018800:	4632      	mov	r2, r6
 8018802:	f7e7 fd51 	bl	80002a8 <__aeabi_dsub>
 8018806:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801880a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801880e:	4639      	mov	r1, r7
 8018810:	ec41 0b10 	vmov	d0, r0, r1
 8018814:	b003      	add	sp, #12
 8018816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018818:	4a25      	ldr	r2, [pc, #148]	; (80188b0 <rint+0x110>)
 801881a:	4132      	asrs	r2, r6
 801881c:	ea01 0702 	and.w	r7, r1, r2
 8018820:	4307      	orrs	r7, r0
 8018822:	d0f5      	beq.n	8018810 <rint+0x70>
 8018824:	0851      	lsrs	r1, r2, #1
 8018826:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801882a:	4314      	orrs	r4, r2
 801882c:	d00c      	beq.n	8018848 <rint+0xa8>
 801882e:	ea23 0201 	bic.w	r2, r3, r1
 8018832:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8018836:	2e13      	cmp	r6, #19
 8018838:	fa43 f606 	asr.w	r6, r3, r6
 801883c:	bf0c      	ite	eq
 801883e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8018842:	2400      	movne	r4, #0
 8018844:	ea42 0306 	orr.w	r3, r2, r6
 8018848:	4918      	ldr	r1, [pc, #96]	; (80188ac <rint+0x10c>)
 801884a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801884e:	4622      	mov	r2, r4
 8018850:	e9d5 4500 	ldrd	r4, r5, [r5]
 8018854:	4620      	mov	r0, r4
 8018856:	4629      	mov	r1, r5
 8018858:	f7e7 fd28 	bl	80002ac <__adddf3>
 801885c:	e9cd 0100 	strd	r0, r1, [sp]
 8018860:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018864:	4622      	mov	r2, r4
 8018866:	462b      	mov	r3, r5
 8018868:	f7e7 fd1e 	bl	80002a8 <__aeabi_dsub>
 801886c:	e7d0      	b.n	8018810 <rint+0x70>
 801886e:	2e33      	cmp	r6, #51	; 0x33
 8018870:	dd07      	ble.n	8018882 <rint+0xe2>
 8018872:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018876:	d1cb      	bne.n	8018810 <rint+0x70>
 8018878:	ee10 2a10 	vmov	r2, s0
 801887c:	f7e7 fd16 	bl	80002ac <__adddf3>
 8018880:	e7c6      	b.n	8018810 <rint+0x70>
 8018882:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8018886:	f04f 36ff 	mov.w	r6, #4294967295
 801888a:	40d6      	lsrs	r6, r2
 801888c:	4230      	tst	r0, r6
 801888e:	d0bf      	beq.n	8018810 <rint+0x70>
 8018890:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8018894:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8018898:	bf1f      	itttt	ne
 801889a:	ea24 0101 	bicne.w	r1, r4, r1
 801889e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80188a2:	fa44 f202 	asrne.w	r2, r4, r2
 80188a6:	ea41 0402 	orrne.w	r4, r1, r2
 80188aa:	e7cd      	b.n	8018848 <rint+0xa8>
 80188ac:	0801c0c8 	.word	0x0801c0c8
 80188b0:	000fffff 	.word	0x000fffff
 80188b4:	00000000 	.word	0x00000000

080188b8 <scalbn>:
 80188b8:	b570      	push	{r4, r5, r6, lr}
 80188ba:	ec55 4b10 	vmov	r4, r5, d0
 80188be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80188c2:	4606      	mov	r6, r0
 80188c4:	462b      	mov	r3, r5
 80188c6:	b99a      	cbnz	r2, 80188f0 <scalbn+0x38>
 80188c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80188cc:	4323      	orrs	r3, r4
 80188ce:	d036      	beq.n	801893e <scalbn+0x86>
 80188d0:	4b39      	ldr	r3, [pc, #228]	; (80189b8 <scalbn+0x100>)
 80188d2:	4629      	mov	r1, r5
 80188d4:	ee10 0a10 	vmov	r0, s0
 80188d8:	2200      	movs	r2, #0
 80188da:	f7e7 fe9d 	bl	8000618 <__aeabi_dmul>
 80188de:	4b37      	ldr	r3, [pc, #220]	; (80189bc <scalbn+0x104>)
 80188e0:	429e      	cmp	r6, r3
 80188e2:	4604      	mov	r4, r0
 80188e4:	460d      	mov	r5, r1
 80188e6:	da10      	bge.n	801890a <scalbn+0x52>
 80188e8:	a32b      	add	r3, pc, #172	; (adr r3, 8018998 <scalbn+0xe0>)
 80188ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188ee:	e03a      	b.n	8018966 <scalbn+0xae>
 80188f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80188f4:	428a      	cmp	r2, r1
 80188f6:	d10c      	bne.n	8018912 <scalbn+0x5a>
 80188f8:	ee10 2a10 	vmov	r2, s0
 80188fc:	4620      	mov	r0, r4
 80188fe:	4629      	mov	r1, r5
 8018900:	f7e7 fcd4 	bl	80002ac <__adddf3>
 8018904:	4604      	mov	r4, r0
 8018906:	460d      	mov	r5, r1
 8018908:	e019      	b.n	801893e <scalbn+0x86>
 801890a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801890e:	460b      	mov	r3, r1
 8018910:	3a36      	subs	r2, #54	; 0x36
 8018912:	4432      	add	r2, r6
 8018914:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8018918:	428a      	cmp	r2, r1
 801891a:	dd08      	ble.n	801892e <scalbn+0x76>
 801891c:	2d00      	cmp	r5, #0
 801891e:	a120      	add	r1, pc, #128	; (adr r1, 80189a0 <scalbn+0xe8>)
 8018920:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018924:	da1c      	bge.n	8018960 <scalbn+0xa8>
 8018926:	a120      	add	r1, pc, #128	; (adr r1, 80189a8 <scalbn+0xf0>)
 8018928:	e9d1 0100 	ldrd	r0, r1, [r1]
 801892c:	e018      	b.n	8018960 <scalbn+0xa8>
 801892e:	2a00      	cmp	r2, #0
 8018930:	dd08      	ble.n	8018944 <scalbn+0x8c>
 8018932:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018936:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801893a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801893e:	ec45 4b10 	vmov	d0, r4, r5
 8018942:	bd70      	pop	{r4, r5, r6, pc}
 8018944:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8018948:	da19      	bge.n	801897e <scalbn+0xc6>
 801894a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801894e:	429e      	cmp	r6, r3
 8018950:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8018954:	dd0a      	ble.n	801896c <scalbn+0xb4>
 8018956:	a112      	add	r1, pc, #72	; (adr r1, 80189a0 <scalbn+0xe8>)
 8018958:	e9d1 0100 	ldrd	r0, r1, [r1]
 801895c:	2b00      	cmp	r3, #0
 801895e:	d1e2      	bne.n	8018926 <scalbn+0x6e>
 8018960:	a30f      	add	r3, pc, #60	; (adr r3, 80189a0 <scalbn+0xe8>)
 8018962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018966:	f7e7 fe57 	bl	8000618 <__aeabi_dmul>
 801896a:	e7cb      	b.n	8018904 <scalbn+0x4c>
 801896c:	a10a      	add	r1, pc, #40	; (adr r1, 8018998 <scalbn+0xe0>)
 801896e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018972:	2b00      	cmp	r3, #0
 8018974:	d0b8      	beq.n	80188e8 <scalbn+0x30>
 8018976:	a10e      	add	r1, pc, #56	; (adr r1, 80189b0 <scalbn+0xf8>)
 8018978:	e9d1 0100 	ldrd	r0, r1, [r1]
 801897c:	e7b4      	b.n	80188e8 <scalbn+0x30>
 801897e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018982:	3236      	adds	r2, #54	; 0x36
 8018984:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018988:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801898c:	4620      	mov	r0, r4
 801898e:	4b0c      	ldr	r3, [pc, #48]	; (80189c0 <scalbn+0x108>)
 8018990:	2200      	movs	r2, #0
 8018992:	e7e8      	b.n	8018966 <scalbn+0xae>
 8018994:	f3af 8000 	nop.w
 8018998:	c2f8f359 	.word	0xc2f8f359
 801899c:	01a56e1f 	.word	0x01a56e1f
 80189a0:	8800759c 	.word	0x8800759c
 80189a4:	7e37e43c 	.word	0x7e37e43c
 80189a8:	8800759c 	.word	0x8800759c
 80189ac:	fe37e43c 	.word	0xfe37e43c
 80189b0:	c2f8f359 	.word	0xc2f8f359
 80189b4:	81a56e1f 	.word	0x81a56e1f
 80189b8:	43500000 	.word	0x43500000
 80189bc:	ffff3cb0 	.word	0xffff3cb0
 80189c0:	3c900000 	.word	0x3c900000

080189c4 <_init>:
 80189c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189c6:	bf00      	nop
 80189c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189ca:	bc08      	pop	{r3}
 80189cc:	469e      	mov	lr, r3
 80189ce:	4770      	bx	lr

080189d0 <_fini>:
 80189d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189d2:	bf00      	nop
 80189d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189d6:	bc08      	pop	{r3}
 80189d8:	469e      	mov	lr, r3
 80189da:	4770      	bx	lr
